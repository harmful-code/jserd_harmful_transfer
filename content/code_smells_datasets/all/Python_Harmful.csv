id,language,text,smell,tokens
128595,Python,"class ATNConfig(object):
    __slots__ = (
        'state', 'alt', 'context', 'semanticContext', 'reachesIntoOuterContext',
        'precedenceFilterSuppressed'
    )

    def __init__(self, state:ATNState=None, alt:int=None, context:PredictionContext=None, semantic:SemanticContext=None, config:ATNConfig=None):
        if config is not None:
            if state is None:
                state = config.state
            if alt is None:
                alt = config.alt
            if context is None:
                context = config.context
            if semantic is None:
                semantic = config.semanticContext
        if semantic is None:
            semantic = SemanticContext.NONE
        # The ATN state associated with this configuration#/
        self.state = state
        # What alt (or lexer rule) is predicted by this configuration#/
        self.alt = alt
        # The stack of invoking states leading to the rule/states associated
        #  with this config.  We track only those contexts pushed during
        #  execution of the ATN simulator.
        self.context = context
        self.semanticContext = semantic
        # We cannot execute predicates dependent upon local context unless
        # we know for sure we are in the correct context. Because there is
        # no way to do this efficiently, we simply cannot evaluate
        # dependent predicates unless we are in the rule that initially
        # invokes the ATN simulator.
        #
        # closure() tracks the depth of how far we dip into the
        # outer context: depth &gt; 0.  Note that it may not be totally
        # accurate depth since I don't ever decrement. TODO: make it a boolean then
        self.reachesIntoOuterContext = 0 if config is None else config.reachesIntoOuterContext
        self.precedenceFilterSuppressed = False if config is None else config.precedenceFilterSuppressed

    # An ATN configuration is equal to another if both have
    #  the same state, they predict the same alternative, and
    #  syntactic/semantic contexts are the same.
    #/
    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfig):
            return False
        else:
            return self.state.stateNumber==other.state.stateNumber \
                and self.alt==other.alt \
                and ((self.context is other.context) or (self.context==other.context)) \
                and self.semanticContext==other.semanticContext \
                and self.precedenceFilterSuppressed==other.precedenceFilterSuppressed

    def __hash__(self):
        return hash((self.state.stateNumber, self.alt, self.context, self.semanticContext))

    def hashCodeForConfigSet(self):
        return hash((self.state.stateNumber, self.alt, hash(self.semanticContext)))

    def equalsForConfigSet(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfig):
            return False
        else:
            return self.state.stateNumber==other.state.stateNumber \
                and self.alt==other.alt \
                and self.semanticContext==other.semanticContext

    def __str__(self):
        with StringIO() as buf:
            buf.write('(')
            buf.write(str(self.state))
            buf.write("","")
            buf.write(str(self.alt))
            if self.context is not None:
                buf.write("",["")
                buf.write(str(self.context))
                buf.write(""]"")
            if self.semanticContext is not None and self.semanticContext is not SemanticContext.NONE:
                buf.write("","")
                buf.write(str(self.semanticContext))
            if self.reachesIntoOuterContext>0:
                buf.write("",up="")
                buf.write(str(self.reachesIntoOuterContext))
            buf.write(')')
            return buf.getvalue()",1,334 2000 40 426 41 58 2001 61 40 648 44 648 44 648 44 648 44 648 44 648 41 348 2002 40 2003 44 2004 58 2005 61 303 44 2006 58 404 61 303 44 2007 58 2008 61 303 44 2009 58 2010 61 303 44 2011 58 2000 61 303 41 58 392 2011 407 422 303 58 392 2004 407 303 58 2004 61 2011 46 2004 392 2006 407 303 58 2006 61 2011 46 2006 392 2007 407 303 58 2007 61 2011 46 2007 392 2009 407 303 58 2009 61 2011 46 2012 392 2009 407 303 58 2009 61 2010 46 2013 621 2003 46 2004 61 2004 621 2003 46 2006 61 2006 621 621 621 2003 46 2007 61 2007 2003 46 2012 61 2009 621 621 621 621 621 621 621 621 621 2003 46 2014 61 1500 392 2011 407 303 360 2011 46 2014 2003 46 2015 61 302 392 2011 407 303 360 2011 46 2015 621 621 621 621 348 2016 40 2003 44 2017 41 58 392 2003 407 2017 58 450 304 359 422 2018 40 2017 44 2000 41 58 450 302 360 58 450 2003 46 2004 46 2019 614 2017 46 2004 46 2019 92 308 2003 46 2006 614 2017 46 2006 92 308 40 40 2003 46 2007 407 2017 46 2007 41 428 40 2003 46 2007 614 2017 46 2007 41 41 92 308 2003 46 2012 614 2017 46 2012 92 308 2003 46 2015 614 2017 46 2015 348 2020 40 2003 41 58 450 2021 40 40 2003 46 2004 46 2019 44 2003 46 2006 44 2003 46 2007 44 2003 46 2012 41 41 348 2022 40 2003 41 58 450 2021 40 40 2003 46 2004 46 2019 44 2003 46 2006 44 2021 40 2003 46 2012 41 41 41 348 2023 40 2003 44 2017 41 58 392 2003 407 2017 58 450 304 359 422 2018 40 2017 44 2000 41 58 450 302 360 58 450 2003 46 2004 46 2019 614 2017 46 2004 46 2019 92 308 2003 46 2006 614 2017 46 2006 92 308 2003 46 2012 614 2017 46 2012 348 2024 40 2003 41 58 497 2025 40 41 311 2026 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2004 41 41 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2006 41 41 392 2003 46 2007 407 422 303 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2007 41 41 2026 46 2027 40 648 41 392 2003 46 2012 407 422 303 308 2003 46 2012 407 422 2010 46 2013 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2012 41 41 392 2003 46 2014 62 1500 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2014 41 41 2026 46 2027 40 648 41 450 2026 46 2029 40 41 
128609,Python,"class TokenStreamRewriter(object):
    DEFAULT_PROGRAM_NAME = ""default""
    PROGRAM_INIT_SIZE = 100
    MIN_TOKEN_INDEX = 0

    def __init__(self, tokens):
        """"""
        :type  tokens: antlr4.BufferedTokenStream.BufferedTokenStream
        :param tokens:
        :return:
        """"""
        super(TokenStreamRewriter, self).__init__()
        self.tokens = tokens
        self.programs = {self.DEFAULT_PROGRAM_NAME: []}
        self.lastRewriteTokenIndexes = {}

    def getTokenStream(self):
        return self.tokens

    def rollback(self, instruction_index, program_name):
        ins = self.programs.get(program_name, None)
        if ins:
            self.programs[program_name] = ins[self.MIN_TOKEN_INDEX: instruction_index]

    def deleteProgram(self, program_name=DEFAULT_PROGRAM_NAME):
        self.rollback(self.MIN_TOKEN_INDEX, program_name)

    def insertAfterToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertAfter(token.tokenIndex, text, program_name)

    def insertAfter(self, index, text, program_name=DEFAULT_PROGRAM_NAME):
        op = self.InsertAfterOp(self.tokens, index + 1, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def insertBeforeIndex(self, index, text):
        self.insertBefore(self.DEFAULT_PROGRAM_NAME, index, text)

    def insertBeforeToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertBefore(program_name, token.tokenIndex, text)

    def insertBefore(self, program_name, index, text):
        op = self.InsertBeforeOp(self.tokens, index, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def replaceIndex(self, index, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, index, index, text)

    def replaceRange(self, from_idx, to_idx, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, from_idx, to_idx, text)

    def replaceSingleToken(self, token, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, token.tokenIndex, token.tokenIndex, text)

    def replaceRangeTokens(self, from_token, to_token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.replace(program_name, from_token.tokenIndex, to_token.tokenIndex, text)

    def replace(self, program_name, from_idx, to_idx, text):
        if any((from_idx > to_idx, from_idx < 0, to_idx < 0, to_idx >= len(self.tokens.tokens))):
            raise ValueError(
                'replace: range invalid: {}..{}(size={})'.format(from_idx, to_idx, len(self.tokens.tokens)))
        op = self.ReplaceOp(from_idx, to_idx, self.tokens, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def deleteToken(self, token):
        self.delete(self.DEFAULT_PROGRAM_NAME, token, token)

    def deleteIndex(self, index):
        self.delete(self.DEFAULT_PROGRAM_NAME, index, index)

    def delete(self, program_name, from_idx, to_idx):
        if isinstance(from_idx, Token):
            self.replace(program_name, from_idx.tokenIndex, to_idx.tokenIndex, """")
        else:
            self.replace(program_name, from_idx, to_idx, """")

    def lastRewriteTokenIndex(self, program_name=DEFAULT_PROGRAM_NAME):
        return self.lastRewriteTokenIndexes.get(program_name, -1)

    def setLastRewriteTokenIndex(self, program_name, i):
        self.lastRewriteTokenIndexes[program_name] = i

    def getProgram(self, program_name):
        return self.programs.setdefault(program_name, [])

    def getDefaultText(self):
        return self.getText(self.DEFAULT_PROGRAM_NAME, 0, len(self.tokens.tokens) - 1)

    def getText(self, program_name, start, stop):
        """"""
        :return: the text in tokens[start, stop](closed interval)
        """"""
        rewrites = self.programs.get(program_name)

        # ensure start/end are in range
        if stop > len(self.tokens.tokens) - 1:
            stop = len(self.tokens.tokens) - 1
        if start < 0:
            start = 0

        # if no instructions to execute
        if not rewrites: return self.tokens.getText(start, stop)
        buf = StringIO()
        indexToOp = self._reduceToSingleOperationPerIndex(rewrites)
        i = start
        while all((i <= stop, i < len(self.tokens.tokens))):
            op = indexToOp.pop(i, None)
            token = self.tokens.get(i)
            if op is None:
                if token.type != Token.EOF: buf.write(token.text)
                i += 1
            else:
                i = op.execute(buf)

        if stop == len(self.tokens.tokens) - 1:
            for op in indexToOp.values():
                if op.index >= len(self.tokens.tokens) - 1: buf.write(
                    op.text)  # TODO: this check is probably not needed

        return buf.getvalue()

    def _reduceToSingleOperationPerIndex(self, rewrites):
        # Walk replaces
        for i, rop in enumerate(rewrites):
            if any((rop is None, not isinstance(rop, TokenStreamRewriter.ReplaceOp))):
                continue
            # Wipe prior inserts within range
            inserts = [op for op in rewrites[:i] if type(op) is TokenStreamRewriter.InsertBeforeOp]
            for iop in inserts:
                if iop.index == rop.index:
                    rewrites[iop.instructionIndex] = None
                    rop.text = '{}{}'.format(iop.text, rop.text)
                elif all((iop.index > rop.index, iop.index <= rop.last_index)):
                    rewrites[iop.instructionIndex] = None

            # Drop any prior replaces contained within
            prevReplaces = [op for op in rewrites[:i] if type(op) is TokenStreamRewriter.ReplaceOp]
            for prevRop in prevReplaces:
                if all((prevRop.index >= rop.index, prevRop.last_index <= rop.last_index)):
                    rewrites[prevRop.instructionIndex] = None
                    continue
                isDisjoint = any((prevRop.last_index < rop.index, prevRop.index > rop.last_index))
                if all((prevRop.text is None, rop.text is None, not isDisjoint)):
                    rewrites[prevRop.instructionIndex] = None
                    rop.index = min(prevRop.index, rop.index)
                    rop.last_index = min(prevRop.last_index, rop.last_index)
                    print('New rop {}'.format(rop))
                elif (not(isDisjoint)):
                    raise ValueError(""replace op boundaries of {} overlap with previous {}"".format(rop, prevRop))

        # Walk inserts before
        for i, iop in enumerate(rewrites):
            if any((iop is None, not isinstance(iop, TokenStreamRewriter.InsertBeforeOp))):
                continue
            prevInserts = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.InsertBeforeOp)]
            for prev_index, prevIop in enumerate(prevInserts):
                if prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertBeforeOp:
                    iop.text += prevIop.text
                    rewrites[prev_index] = None
                elif prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertAfterOp:
                    iop.text = prevIop.text + iop.text
                    rewrites[prev_index] = None
            # look for replaces where iop.index is in range; error
            prevReplaces = [op for op in rewrites[:i] if type(op) is TokenStreamRewriter.ReplaceOp]
            for rop in prevReplaces:
                if iop.index == rop.index:
                    rop.text = iop.text + rop.text
                    rewrites[i] = None
                    continue
                if all((iop.index >= rop.index, iop.index <= rop.last_index)):
                    raise ValueError(""insert op {} within boundaries of previous {}"".format(iop, rop))

        reduced = {}
        for i, op in enumerate(rewrites):
            if op is None: continue
            if reduced.get(op.index): raise ValueError('should be only one op per index')
            reduced[op.index] = op

        return reduced

    class RewriteOperation(object):

        def __init__(self, tokens, index, text=""""):
            """"""
            :type tokens: CommonTokenStream
            :param tokens:
            :param index:
            :param text:
            :return:
            """"""
            self.tokens = tokens
            self.index = index
            self.text = text
            self.instructionIndex = 0

        def execute(self, buf):
            """"""
            :type buf: StringIO.StringIO
            :param buf:
            :return:
            """"""
            return self.index

        def __str__(self):
            return '<{}@{}:""{}"">'.format(self.__class__.__name__, self.tokens.get(self.index), self.text)

    class InsertBeforeOp(RewriteOperation):

        def __init__(self, tokens, index, text=""""):
            super(TokenStreamRewriter.InsertBeforeOp, self).__init__(tokens, index, text)

        def execute(self, buf):
            buf.write(self.text)
            if self.tokens.get(self.index).type != Token.EOF:
                buf.write(self.tokens.get(self.index).text)
            return self.index + 1

    class InsertAfterOp(InsertBeforeOp):
        pass

    class ReplaceOp(RewriteOperation):

        def __init__(self, from_idx, to_idx, tokens, text):
            super(TokenStreamRewriter.ReplaceOp, self).__init__(tokens, from_idx, text)
            self.last_index = to_idx

        def execute(self, buf):
            if self.text:
                buf.write(self.text)
            return self.last_index + 1

        def __str__(self):
            if self.text:
                return '<ReplaceOp@{}..{}:""{}"">'.format(self.tokens.get(self.index), self.tokens.get(self.last_index),
                                                        self.text)",1,334 2000 40 426 41 58 2001 61 648 2002 61 1503 2003 61 1500 348 2004 40 2005 44 2006 41 58 648 463 40 2000 44 2005 41 46 2004 40 41 2005 46 2006 61 2006 2005 46 2007 61 123 2005 46 2001 58 91 93 125 2005 46 2008 61 123 125 348 2009 40 2005 41 58 450 2005 46 2006 348 2010 40 2005 44 2011 44 2012 41 58 2013 61 2005 46 2007 46 2014 40 2012 44 303 41 392 2013 58 2005 46 2007 91 2012 93 61 2013 91 2005 46 2003 58 2011 93 348 2015 40 2005 44 2012 61 2001 41 58 2005 46 2010 40 2005 46 2003 44 2012 41 348 2016 40 2005 44 2017 44 2018 44 2012 61 2001 41 58 2005 46 2019 40 2017 46 2020 44 2018 44 2012 41 348 2019 40 2005 44 2021 44 2018 44 2012 61 2001 41 58 2022 61 2005 46 2023 40 2005 46 2006 44 2021 43 1501 44 2018 41 2024 61 2005 46 2025 40 2012 41 2022 46 2026 61 2027 40 2024 41 2024 46 2028 40 2022 41 348 2029 40 2005 44 2021 44 2018 41 58 2005 46 2030 40 2005 46 2001 44 2021 44 2018 41 348 2031 40 2005 44 2017 44 2018 44 2012 61 2001 41 58 2005 46 2030 40 2012 44 2017 46 2020 44 2018 41 348 2030 40 2005 44 2012 44 2021 44 2018 41 58 2022 61 2005 46 2032 40 2005 46 2006 44 2021 44 2018 41 2024 61 2005 46 2025 40 2012 41 2022 46 2026 61 2027 40 2024 41 2024 46 2028 40 2022 41 348 2033 40 2005 44 2021 44 2018 41 58 2005 46 2034 40 2005 46 2001 44 2021 44 2021 44 2018 41 348 2035 40 2005 44 2036 44 2037 44 2018 41 58 2005 46 2034 40 2005 46 2001 44 2036 44 2037 44 2018 41 348 2038 40 2005 44 2017 44 2018 41 58 2005 46 2034 40 2005 46 2001 44 2017 46 2020 44 2017 46 2020 44 2018 41 348 2039 40 2005 44 2040 44 2041 44 2018 44 2012 61 2001 41 58 2005 46 2034 40 2012 44 2040 46 2020 44 2041 46 2020 44 2018 41 348 2034 40 2005 44 2012 44 2036 44 2037 44 2018 41 58 392 2042 40 40 2036 62 2037 44 2036 60 1500 44 2037 60 1500 44 2037 615 2027 40 2005 46 2006 46 2006 41 41 41 58 440 2043 40 648 46 2044 40 2036 44 2037 44 2027 40 2005 46 2006 46 2006 41 41 41 2022 61 2005 46 2045 40 2036 44 2037 44 2005 46 2006 44 2018 41 2024 61 2005 46 2025 40 2012 41 2022 46 2026 61 2027 40 2024 41 2024 46 2028 40 2022 41 348 2046 40 2005 44 2017 41 58 2005 46 353 40 2005 46 2001 44 2017 44 2017 41 348 2047 40 2005 44 2021 41 58 2005 46 353 40 2005 46 2001 44 2021 44 2021 41 348 353 40 2005 44 2012 44 2036 44 2037 41 58 392 2048 40 2036 44 2049 41 58 2005 46 2034 40 2012 44 2036 46 2020 44 2037 46 2020 44 648 41 360 58 2005 46 2034 40 2012 44 2036 44 2037 44 648 41 348 2050 40 2005 44 2012 61 2001 41 58 450 2005 46 2008 46 2014 40 2012 44 45 1501 41 348 2051 40 2005 44 2012 44 2052 41 58 2005 46 2008 91 2012 93 61 2052 348 2025 40 2005 44 2012 41 58 450 2005 46 2007 46 2053 40 2012 44 91 93 41 348 2054 40 2005 41 58 450 2005 46 2055 40 2005 46 2001 44 1500 44 2027 40 2005 46 2006 46 2006 41 45 1501 41 348 2055 40 2005 44 2012 44 2056 44 2057 41 58 648 2024 61 2005 46 2007 46 2014 40 2012 41 621 392 2057 62 2027 40 2005 46 2006 46 2006 41 45 1501 58 2057 61 2027 40 2005 46 2006 46 2006 41 45 1501 392 2056 60 1500 58 2056 61 1500 621 392 422 2024 58 450 2005 46 2006 46 2055 40 2056 44 2057 41 2058 61 2059 40 41 2060 61 2005 46 2061 40 2024 41 2052 61 2056 496 2062 40 40 2052 620 2057 44 2052 60 2027 40 2005 46 2006 46 2006 41 41 41 58 2022 61 2060 46 2063 40 2052 44 303 41 2017 61 2005 46 2006 46 2014 40 2052 41 392 2022 407 303 58 392 2017 46 2064 631 2049 46 2065 58 2058 46 2066 40 2017 46 2018 41 2052 636 1501 360 58 2052 61 2022 46 2067 40 2058 41 392 2057 614 2027 40 2005 46 2006 46 2006 41 45 1501 58 385 2022 398 2060 46 2068 40 41 58 392 2022 46 2021 615 2027 40 2005 46 2006 46 2006 41 45 1501 58 2058 46 2066 40 2022 46 2018 41 621 450 2058 46 2069 40 41 348 2061 40 2005 44 2024 41 58 621 385 2052 44 2070 398 2071 40 2024 41 58 392 2042 40 40 2070 407 303 44 422 2048 40 2070 44 2000 46 2045 41 41 41 58 344 621 2072 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2064 40 2022 41 407 2000 46 2032 93 385 2073 398 2072 58 392 2073 46 2021 614 2070 46 2021 58 2024 91 2073 46 2026 93 61 303 2070 46 2018 61 648 46 2044 40 2073 46 2018 44 2070 46 2018 41 359 2062 40 40 2073 46 2021 62 2070 46 2021 44 2073 46 2021 620 2070 46 2074 41 41 58 2024 91 2073 46 2026 93 61 303 621 2075 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2064 40 2022 41 407 2000 46 2045 93 385 2076 398 2075 58 392 2062 40 40 2076 46 2021 615 2070 46 2021 44 2076 46 2074 620 2070 46 2074 41 41 58 2024 91 2076 46 2026 93 61 303 344 2077 61 2042 40 40 2076 46 2074 60 2070 46 2021 44 2076 46 2021 62 2070 46 2074 41 41 392 2062 40 40 2076 46 2018 407 303 44 2070 46 2018 407 303 44 422 2077 41 41 58 2024 91 2076 46 2026 93 61 303 2070 46 2021 61 2078 40 2076 46 2021 44 2070 46 2021 41 2070 46 2074 61 2078 40 2076 46 2074 44 2070 46 2074 41 436 40 648 46 2044 40 2070 41 41 359 40 422 40 2077 41 41 58 440 2043 40 648 46 2044 40 2070 44 2076 41 41 621 385 2052 44 2073 398 2071 40 2024 41 58 392 2042 40 40 2073 407 303 44 422 2048 40 2073 44 2000 46 2032 41 41 41 58 344 2079 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2048 40 2022 44 2000 46 2032 41 93 385 2080 44 2081 398 2071 40 2079 41 58 392 2081 46 2021 614 2073 46 2021 308 2064 40 2081 41 407 2000 46 2032 58 2073 46 2018 636 2081 46 2018 2024 91 2080 93 61 303 359 2081 46 2021 614 2073 46 2021 308 2064 40 2081 41 407 2000 46 2023 58 2073 46 2018 61 2081 46 2018 43 2073 46 2018 2024 91 2080 93 61 303 621 2075 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2064 40 2022 41 407 2000 46 2045 93 385 2070 398 2075 58 392 2073 46 2021 614 2070 46 2021 58 2070 46 2018 61 2073 46 2018 43 2070 46 2018 2024 91 2052 93 61 303 344 392 2062 40 40 2073 46 2021 615 2070 46 2021 44 2073 46 2021 620 2070 46 2074 41 41 58 440 2043 40 648 46 2044 40 2073 44 2070 41 41 2082 61 123 125 385 2052 44 2022 398 2071 40 2024 41 58 392 2022 407 303 58 344 392 2082 46 2014 40 2022 46 2021 41 58 440 2043 40 648 41 2082 91 2022 46 2021 93 61 2022 450 2082 334 2083 40 426 41 58 348 2004 40 2005 44 2006 44 2021 44 2018 61 648 41 58 648 2005 46 2006 61 2006 2005 46 2021 61 2021 2005 46 2018 61 2018 2005 46 2026 61 1500 348 2067 40 2005 44 2058 41 58 648 450 2005 46 2021 348 2084 40 2005 41 58 450 648 46 2044 40 2005 46 2085 46 2086 44 2005 46 2006 46 2014 40 2005 46 2021 41 44 2005 46 2018 41 334 2032 40 2083 41 58 348 2004 40 2005 44 2006 44 2021 44 2018 61 648 41 58 463 40 2000 46 2032 44 2005 41 46 2004 40 2006 44 2021 44 2018 41 348 2067 40 2005 44 2058 41 58 2058 46 2066 40 2005 46 2018 41 392 2005 46 2006 46 2014 40 2005 46 2021 41 46 2064 631 2049 46 2065 58 2058 46 2066 40 2005 46 2006 46 2014 40 2005 46 2021 41 46 2018 41 450 2005 46 2021 43 1501 334 2023 40 2032 41 58 434 334 2045 40 2083 41 58 348 2004 40 2005 44 2036 44 2037 44 2006 44 2018 41 58 463 40 2000 46 2045 44 2005 41 46 2004 40 2006 44 2036 44 2018 41 2005 46 2074 61 2037 348 2067 40 2005 44 2058 41 58 392 2005 46 2018 58 2058 46 2066 40 2005 46 2018 41 450 2005 46 2074 43 1501 348 2084 40 2005 41 58 392 2005 46 2018 58 450 648 46 2044 40 2005 46 2006 46 2014 40 2005 46 2021 41 44 2005 46 2006 46 2014 40 2005 46 2074 41 44 2005 46 2018 41 
128706,Python,"class DefaultErrorStrategy(ErrorStrategy):

    def __init__(self):
        super(DefaultErrorStrategy, self).__init__()
        # Indicates whether the error strategy is currently ""recovering from an
        # error"". This is used to suppress reporting multiple error messages while
        # attempting to recover from a detected syntax error.
        #
        # @see #inErrorRecoveryMode
        #
        self.errorRecoveryMode = False

        # The index into the input stream where the last error occurred.
        # 	This is used to prevent infinite loops where an error is found
        #  but no token is consumed during recovery...another error is found,
        #  ad nauseum.  This is a failsafe mechanism to guarantee that at least
        #  one token/tree node is consumed for two errors.
        #
        self.lastErrorIndex = -1
        self.lastErrorStates = None
        self.nextTokensContext = None
        self.nextTokenState = 0

    # <p>The default implementation simply calls {@link #endErrorCondition} to
    # ensure that the handler is not in error recovery mode.</p>
    def reset(self, recognizer):
        self.endErrorCondition(recognizer)

    #
    # This method is called to enter error recovery mode when a recognition
    # exception is reported.
    #
    # @param recognizer the parser instance
    #
    def beginErrorCondition(self, recognizer):
        self.errorRecoveryMode = True

    def inErrorRecoveryMode(self, recognizer):
        return self.errorRecoveryMode

    #
    # This method is called to leave error recovery mode after recovering from
    # a recognition exception.
    #
    # @param recognizer
    #
    def endErrorCondition(self, recognizer):
        self.errorRecoveryMode = False
        self.lastErrorStates = None
        self.lastErrorIndex = -1

    #
    # {@inheritDoc}
    #
    # <p>The default implementation simply calls {@link #endErrorCondition}.</p>
    #
    def reportMatch(self, recognizer):
        self.endErrorCondition(recognizer)

    #
    # {@inheritDoc}
    #
    # <p>The default implementation returns immediately if the handler is already
    # in error recovery mode. Otherwise, it calls {@link #beginErrorCondition}
    # and dispatches the reporting task based on the runtime type of {@code e}
    # according to the following table.</p>
    #
    # <ul>
    # <li>{@link NoViableAltException}: Dispatches the call to
    # {@link #reportNoViableAlternative}</li>
    # <li>{@link InputMismatchException}: Dispatches the call to
    # {@link #reportInputMismatch}</li>
    # <li>{@link FailedPredicateException}: Dispatches the call to
    # {@link #reportFailedPredicate}</li>
    # <li>All other types: calls {@link Parser#notifyErrorListeners} to report
    # the exception</li>
    # </ul>
    #
    def reportError(self, recognizer, e):
        # if we've already reported an error and have not matched a token
        # yet successfully, don't report any errors.
        if self.inErrorRecoveryMode(recognizer):
            return # don't report spurious errors
        self.beginErrorCondition(recognizer)
        if isinstance( e, NoViableAltException ):
            self.reportNoViableAlternative(recognizer, e)
        elif isinstance( e, InputMismatchException ):
            self.reportInputMismatch(recognizer, e)
        elif isinstance( e, FailedPredicateException ):
            self.reportFailedPredicate(recognizer, e)
        else:
            print(""unknown recognition error type: "" + type(e).__name__)
            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e)

    #
    # {@inheritDoc}
    #
    # <p>The default implementation resynchronizes the parser by consuming tokens
    # until we find one in the resynchronization set--loosely the set of tokens
    # that can follow the current rule.</p>
    #
    def recover(self, recognizer, e):
        if self.lastErrorIndex==recognizer.getInputStream().index \
            and self.lastErrorStates is not None \
            and recognizer.state in self.lastErrorStates:
            # uh oh, another error at same token index and previously-visited
            # state in ATN; must be a case where LT(1) is in the recovery
            # token set so nothing got consumed. Consume a single token
            # at least to prevent an infinite loop; this is a failsafe.
            recognizer.consume()

        self.lastErrorIndex = recognizer._input.index
        if self.lastErrorStates is None:
            self.lastErrorStates = []
        self.lastErrorStates.append(recognizer.state)
        followSet = self.getErrorRecoverySet(recognizer)
        self.consumeUntil(recognizer, followSet)

    # The default implementation of {@link ANTLRErrorStrategy#sync} makes sure
    # that the current lookahead symbol is consistent with what were expecting
    # at this point in the ATN. You can call this anytime but ANTLR only
    # generates code to check before subrules/loops and each iteration.
    #
    # <p>Implements Jim Idle's magic sync mechanism in closures and optional
    # subrules. E.g.,</p>
    #
    # <pre>
    # a : sync ( stuff sync )* ;
    # sync : {consume to what can follow sync} ;
    # </pre>
    #
    # At the start of a sub rule upon error, {@link #sync} performs single
    # token deletion, if possible. If it can't do that, it bails on the current
    # rule and uses the default error recovery, which consumes until the
    # resynchronization set of the current rule.
    #
    # <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
    # with an empty alternative), then the expected set includes what follows
    # the subrule.</p>
    #
    # <p>During loop iteration, it consumes until it sees a token that can start a
    # sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
    # stay in the loop as long as possible.</p>
    #
    # <p><strong>ORIGINS</strong></p>
    #
    # <p>Previous versions of ANTLR did a poor job of their recovery within loops.
    # A single mismatch token or missing token would force the parser to bail
    # out of the entire rules surrounding the loop. So, for rule</p>
    #
    # <pre>
    # classDef : 'class' ID '{' member* '}'
    # </pre>
    #
    # input with an extra token between members would force the parser to
    # consume until it found the next class definition rather than the next
    # member definition of the current class.
    #
    # <p>This functionality cost a little bit of effort because the parser has to
    # compare token set at the start of the loop and at each iteration. If for
    # some reason speed is suffering for you, you can turn off this
    # functionality by simply overriding this method as a blank { }.</p>
    #
    def sync(self, recognizer):
        # If already recovering, don't try to sync
        if self.inErrorRecoveryMode(recognizer):
            return

        s = recognizer._interp.atn.states[recognizer.state]
        la = recognizer.getTokenStream().LA(1)
        # try cheaper subset first; might get lucky. seems to shave a wee bit off
        nextTokens = recognizer.atn.nextTokens(s)
        if la in nextTokens:
            self.nextTokensContext = None
            self.nextTokenState = ATNState.INVALID_STATE_NUMBER
            return
        elif Token.EPSILON in nextTokens:
            if self.nextTokensContext is None:
                # It's possible the next token won't match information tracked
                # by sync is restricted for performance.
                self.nextTokensContext = recognizer._ctx
                self.nextTokensState = recognizer._stateNumber
            return

        if s.stateType in [ATNState.BLOCK_START, ATNState.STAR_BLOCK_START,
                                ATNState.PLUS_BLOCK_START, ATNState.STAR_LOOP_ENTRY]:
            # report error and recover if possible
            if self.singleTokenDeletion(recognizer)is not None:
                return
            else:
                raise InputMismatchException(recognizer)

        elif s.stateType in [ATNState.PLUS_LOOP_BACK, ATNState.STAR_LOOP_BACK]:
            self.reportUnwantedToken(recognizer)
            expecting = recognizer.getExpectedTokens()
            whatFollowsLoopIterationOrRule = expecting.addSet(self.getErrorRecoverySet(recognizer))
            self.consumeUntil(recognizer, whatFollowsLoopIterationOrRule)

        else:
            # do nothing if we can't identify the exact kind of ATN state
            pass

    # This is called by {@link #reportError} when the exception is a
    # {@link NoViableAltException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportNoViableAlternative(self, recognizer, e):
        tokens = recognizer.getTokenStream()
        if tokens is not None:
            if e.startToken.type==Token.EOF:
                input = ""<EOF>""
            else:
                input = tokens.getText(e.startToken, e.offendingToken)
        else:
            input = ""<unknown input>""
        msg = ""no viable alternative at input "" + self.escapeWSAndQuote(input)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    #
    # This is called by {@link #reportError} when the exception is an
    # {@link InputMismatchException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportInputMismatch(self, recognizer, e):
        msg = ""mismatched input "" + self.getTokenErrorDisplay(e.offendingToken) \
              + "" expecting "" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    #
    # This is called by {@link #reportError} when the exception is a
    # {@link FailedPredicateException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportFailedPredicate(self, recognizer, e):
        ruleName = recognizer.ruleNames[recognizer._ctx.getRuleIndex()]
        msg = ""rule "" + ruleName + "" "" + e.message
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    # This method is called to report a syntax error which requires the removal
    # of a token from the input stream. At the time this method is called, the
    # erroneous symbol is current {@code LT(1)} symbol and has not yet been
    # removed from the input stream. When this method returns,
    # {@code recognizer} is in error recovery mode.
    #
    # <p>This method is called when {@link #singleTokenDeletion} identifies
    # single-token deletion as a viable recovery strategy for a mismatched
    # input error.</p>
    #
    # <p>The default implementation simply returns if the handler is already in
    # error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
    # enter error recovery mode, followed by calling
    # {@link Parser#notifyErrorListeners}.</p>
    #
    # @param recognizer the parser instance
    #
    def reportUnwantedToken(self, recognizer):
        if self.inErrorRecoveryMode(recognizer):
            return

        self.beginErrorCondition(recognizer)
        t = recognizer.getCurrentToken()
        tokenName = self.getTokenErrorDisplay(t)
        expecting = self.getExpectedTokens(recognizer)
        msg = ""extraneous input "" + tokenName + "" expecting "" \
            + expecting.toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, t, None)

    # This method is called to report a syntax error which requires the
    # insertion of a missing token into the input stream. At the time this
    # method is called, the missing token has not yet been inserted. When this
    # method returns, {@code recognizer} is in error recovery mode.
    #
    # <p>This method is called when {@link #singleTokenInsertion} identifies
    # single-token insertion as a viable recovery strategy for a mismatched
    # input error.</p>
    #
    # <p>The default implementation simply returns if the handler is already in
    # error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
    # enter error recovery mode, followed by calling
    # {@link Parser#notifyErrorListeners}.</p>
    #
    # @param recognizer the parser instance
    #
    def reportMissingToken(self, recognizer):
        if self.inErrorRecoveryMode(recognizer):
            return
        self.beginErrorCondition(recognizer)
        t = recognizer.getCurrentToken()
        expecting = self.getExpectedTokens(recognizer)
        msg = ""missing "" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) \
              + "" at "" + self.getTokenErrorDisplay(t)
        recognizer.notifyErrorListeners(msg, t, None)

    # <p>The default implementation attempts to recover from the mismatched input
    # by using single token insertion and deletion as described below. If the
    # recovery attempt fails, this method throws an
    # {@link InputMismatchException}.</p>
    #
    # <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
    #
    # <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
    # right token, however, then assume {@code LA(1)} is some extra spurious
    # token and delete it. Then consume and return the next token (which was
    # the {@code LA(2)} token) as the successful result of the match operation.</p>
    #
    # <p>This recovery strategy is implemented by {@link #singleTokenDeletion}.</p>
    #
    # <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
    #
    # <p>If current token (at {@code LA(1)}) is consistent with what could come
    # after the expected {@code LA(1)} token, then assume the token is missing
    # and use the parser's {@link TokenFactory} to create it on the fly. The
    # ""insertion"" is performed by returning the created token as the successful
    # result of the match operation.</p>
    #
    # <p>This recovery strategy is implemented by {@link #singleTokenInsertion}.</p>
    #
    # <p><strong>EXAMPLE</strong></p>
    #
    # <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
    # the parser returns from the nested call to {@code expr}, it will have
    # call chain:</p>
    #
    # <pre>
    # stat &rarr; expr &rarr; atom
    # </pre>
    #
    # and it will be trying to match the {@code ')'} at this point in the
    # derivation:
    #
    # <pre>
    # =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
    #                    ^
    # </pre>
    #
    # The attempt to match {@code ')'} will fail when it sees {@code ';'} and
    # call {@link #recoverInline}. To recover, it sees that {@code LA(1)==';'}
    # is in the set of tokens that can follow the {@code ')'} token reference
    # in rule {@code atom}. It can assume that you forgot the {@code ')'}.
    #
    def recoverInline(self, recognizer):
        # SINGLE TOKEN DELETION
        matchedSymbol = self.singleTokenDeletion(recognizer)
        if matchedSymbol is not None:
            # we have deleted the extra token.
            # now, move past ttype token as if all were ok
            recognizer.consume()
            return matchedSymbol

        # SINGLE TOKEN INSERTION
        if self.singleTokenInsertion(recognizer):
            return self.getMissingSymbol(recognizer)

        # even that didn't work; must throw the exception
        raise InputMismatchException(recognizer)

    #
    # This method implements the single-token insertion inline error recovery
    # strategy. It is called by {@link #recoverInline} if the single-token
    # deletion strategy fails to recover from the mismatched input. If this
    # method returns {@code true}, {@code recognizer} will be in error recovery
    # mode.
    #
    # <p>This method determines whether or not single-token insertion is viable by
    # checking if the {@code LA(1)} input symbol could be successfully matched
    # if it were instead the {@code LA(2)} symbol. If this method returns
    # {@code true}, the caller is responsible for creating and inserting a
    # token with the correct type to produce this behavior.</p>
    #
    # @param recognizer the parser instance
    # @return {@code true} if single-token insertion is a viable recovery
    # strategy for the current mismatched input, otherwise {@code false}
    #
    def singleTokenInsertion(self, recognizer):
        currentSymbolType = recognizer.getTokenStream().LA(1)
        # if current token is consistent with what could come after current
        # ATN state, then we know we're missing a token; error recovery
        # is free to conjure up and insert the missing token
        atn = recognizer._interp.atn
        currentState = atn.states[recognizer.state]
        next = currentState.transitions[0].target
        expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)
        if currentSymbolType in expectingAtLL2:
            self.reportMissingToken(recognizer)
            return True
        else:
            return False

    # This method implements the single-token deletion inline error recovery
    # strategy. It is called by {@link #recoverInline} to attempt to recover
    # from mismatched input. If this method returns null, the parser and error
    # handler state will not have changed. If this method returns non-null,
    # {@code recognizer} will <em>not</em> be in error recovery mode since the
    # returned token was a successful match.
    #
    # <p>If the single-token deletion is successful, this method calls
    # {@link #reportUnwantedToken} to report the error, followed by
    # {@link Parser#consume} to actually ""delete"" the extraneous token. Then,
    # before returning {@link #reportMatch} is called to signal a successful
    # match.</p>
    #
    # @param recognizer the parser instance
    # @return the successfully matched {@link Token} instance if single-token
    # deletion successfully recovers from the mismatched input, otherwise
    # {@code null}
    #
    def singleTokenDeletion(self, recognizer):
        nextTokenType = recognizer.getTokenStream().LA(2)
        expecting = self.getExpectedTokens(recognizer)
        if nextTokenType in expecting:
            self.reportUnwantedToken(recognizer)
            # print(""recoverFromMismatchedToken deleting "" \
            #     + str(recognizer.getTokenStream().LT(1)) \
            #     + "" since "" + str(recognizer.getTokenStream().LT(2)) \
            #     + "" is what we want"", file=sys.stderr)
            recognizer.consume() # simply delete extra token
            # we want to return the token we're actually matching
            matchedSymbol = recognizer.getCurrentToken()
            self.reportMatch(recognizer) # we know current token is correct
            return matchedSymbol
        else:
            return None

    # Conjure up a missing token during error recovery.
    #
    #  The recognizer attempts to recover from single missing
    #  symbols. But, actions might refer to that missing symbol.
    #  For example, x=ID {f($x);}. The action clearly assumes
    #  that there has been an identifier matched previously and that
    #  $x points at that token. If that token is missing, but
    #  the next token in the stream is what we want we assume that
    #  this token is missing and we keep going. Because we
    #  have to return some token to replace the missing token,
    #  we have to conjure one up. This method gives the user control
    #  over the tokens returned for missing tokens. Mostly,
    #  you will want to create something special for identifier
    #  tokens. For literals such as '{' and ',', the default
    #  action in the parser or tree parser works. It simply creates
    #  a CommonToken of the appropriate type. The text will be the token.
    #  If you change what tokens must be created by the lexer,
    #  override this method to create the appropriate tokens.
    #
    def getMissingSymbol(self, recognizer):
        currentSymbol = recognizer.getCurrentToken()
        expecting = self.getExpectedTokens(recognizer)
        expectedTokenType = expecting[0] # get any element
        if expectedTokenType==Token.EOF:
            tokenText = u""<missing EOF>""
        else:
            name = None
            if expectedTokenType < len(recognizer.literalNames):
                name = recognizer.literalNames[expectedTokenType]
            if name is None and expectedTokenType < len(recognizer.symbolicNames):
                name = recognizer.symbolicNames[expectedTokenType]
            tokenText = u""<missing "" + unicode(name) + u"">""
        current = currentSymbol
        lookback = recognizer.getTokenStream().LT(-1)
        if current.type==Token.EOF and lookback is not None:
            current = lookback
        return recognizer.getTokenFactory().create(current.source,
            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
            -1, -1, current.line, current.column)

    def getExpectedTokens(self, recognizer):
        return recognizer.getExpectedTokens()

    # How should a token be displayed in an error message? The default
    #  is to display just the text, but during development you might
    #  want to have a lot of information spit out.  Override in that case
    #  to use t.toString() (which, for CommonToken, dumps everything about
    #  the token). This is better than forcing you to override a method in
    #  your token objects because you don't have to go modify your lexer
    #  so that it creates a new Java type.
    #
    def getTokenErrorDisplay(self, t):
        if t is None:
            return u""<no token>""
        s = t.text
        if s is None:
            if t.type==Token.EOF:
                s = u""<EOF>""
            else:
                s = u""<"" + unicode(t.type) + u"">""
        return self.escapeWSAndQuote(s)

    def escapeWSAndQuote(self, s):
        s = s.replace(u""\n"",u""\\n"")
        s = s.replace(u""\r"",u""\\r"")
        s = s.replace(u""\t"",u""\\t"")
        return u""'"" + s + u""'""

    #  Compute the error recovery set for the current rule.  During
    #  rule invocation, the parser pushes the set of tokens that can
    #  follow that rule reference on the stack; this amounts to
    #  computing FIRST of what follows the rule reference in the
    #  enclosing rule. See LinearApproximator.FIRST().
    #  This local follow set only includes tokens
    #  from within the rule; i.e., the FIRST computation done by
    #  ANTLR stops at the end of a rule.
    #
    #  EXAMPLE
    #
    #  When you find a ""no viable alt exception"", the input is not
    #  consistent with any of the alternatives for rule r.  The best
    #  thing to do is to consume tokens until you see something that
    #  can legally follow a call to r#or* any rule that called r.
    #  You don't want the exact set of viable next tokens because the
    #  input might just be missing a token--you might consume the
    #  rest of the input looking for one of the missing tokens.
    #
    #  Consider grammar:
    #
    #  a : '[' b ']'
    #    | '(' b ')'
    #    ;
    #  b : c '^' INT ;
    #  c : ID
    #    | INT
    #    ;
    #
    #  At each rule invocation, the set of tokens that could follow
    #  that rule is pushed on a stack.  Here are the various
    #  context-sensitive follow sets:
    #
    #  FOLLOW(b1_in_a) = FIRST(']') = ']'
    #  FOLLOW(b2_in_a) = FIRST(')') = ')'
    #  FOLLOW(c_in_b) = FIRST('^') = '^'
    #
    #  Upon erroneous input ""[]"", the call chain is
    #
    #  a -> b -> c
    #
    #  and, hence, the follow context stack is:
    #
    #  depth     follow set       start of rule execution
    #    0         <EOF>                    a (from main())
    #    1          ']'                     b
    #    2          '^'                     c
    #
    #  Notice that ')' is not included, because b would have to have
    #  been called from a different context in rule a for ')' to be
    #  included.
    #
    #  For error recovery, we cannot consider FOLLOW(c)
    #  (context-sensitive or otherwise).  We need the combined set of
    #  all context-sensitive FOLLOW sets--the set of all tokens that
    #  could follow any reference in the call chain.  We need to
    #  resync to one of those tokens.  Note that FOLLOW(c)='^' and if
    #  we resync'd to that token, we'd consume until EOF.  We need to
    #  sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
    #  In this case, for input ""[]"", LA(1) is ']' and in the set, so we would
    #  not consume anything. After printing an error, rule c would
    #  return normally.  Rule b would not find the required '^' though.
    #  At this point, it gets a mismatched token error and throws an
    #  exception (since LA(1) is not in the viable following token
    #  set).  The rule exception handler tries to recover, but finds
    #  the same recovery set and doesn't consume anything.  Rule b
    #  exits normally returning to rule a.  Now it finds the ']' (and
    #  with the successful match exits errorRecovery mode).
    #
    #  So, you can see that the parser walks up the call chain looking
    #  for the token that was a member of the recovery set.
    #
    #  Errors are not generated in errorRecovery mode.
    #
    #  ANTLR's error recovery mechanism is based upon original ideas:
    #
    #  ""Algorithms + Data Structures = Programs"" by Niklaus Wirth
    #
    #  and
    #
    #  ""A note on error recovery in recursive descent parsers"":
    #  http:#portal.acm.org/citation.cfm?id=947902.947905
    #
    #  Later, Josef Grosch had some good ideas:
    #
    #  ""Efficient and Comfortable Error Recovery in Recursive Descent
    #  Parsers"":
    #  ftp:#www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
    #
    #  Like Grosch I implement context-sensitive FOLLOW sets that are combined
    #  at run-time upon error to avoid overhead during parsing.
    #
    def getErrorRecoverySet(self, recognizer):
        atn = recognizer._interp.atn
        ctx = recognizer._ctx
        recoverSet = IntervalSet()
        while ctx is not None and ctx.invokingState>=0:
            # compute what follows who invoked us
            invokingState = atn.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            follow = atn.nextTokens(rt.followState)
            recoverSet.addSet(follow)
            ctx = ctx.parentCtx
        recoverSet.removeOne(Token.EPSILON)
        return recoverSet

    # Consume tokens until one matches the given token set.#
    def consumeUntil(self, recognizer, set_):
        ttype = recognizer.getTokenStream().LA(1)
        while ttype != Token.EOF and not ttype in set_:
            recognizer.consume()
            ttype = recognizer.getTokenStream().LA(1)",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 463 40 2000 44 2003 41 46 2002 40 41 621 621 621 621 621 621 2003 46 2004 61 302 621 621 621 621 621 621 2003 46 2005 61 45 1501 2003 46 2006 61 303 2003 46 2007 61 303 2003 46 2008 61 1500 621 621 348 2009 40 2003 44 2010 41 58 2003 46 2011 40 2010 41 621 621 621 621 621 621 348 2012 40 2003 44 2010 41 58 2003 46 2004 61 304 348 2013 40 2003 44 2010 41 58 450 2003 46 2004 621 621 621 621 621 621 348 2011 40 2003 44 2010 41 58 2003 46 2004 61 302 2003 46 2006 61 303 2003 46 2005 61 45 1501 621 621 621 621 621 348 2014 40 2003 44 2010 41 58 2003 46 2011 40 2010 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2015 40 2003 44 2010 44 2016 41 58 621 621 392 2003 46 2013 40 2010 41 58 450 621 2003 46 2012 40 2010 41 392 2017 40 2016 44 2018 41 58 2003 46 2019 40 2010 44 2016 41 359 2017 40 2016 44 2020 41 58 2003 46 2021 40 2010 44 2016 41 359 2017 40 2016 44 2022 41 58 2003 46 2023 40 2010 44 2016 41 360 58 436 40 648 43 2024 40 2016 41 46 2025 41 2010 46 2026 40 2016 46 2027 40 41 44 2016 46 2028 40 41 44 2016 41 621 621 621 621 621 621 621 348 2029 40 2003 44 2010 44 2016 41 58 392 2003 46 2005 614 2010 46 2030 40 41 46 2031 92 308 2003 46 2006 407 422 303 92 308 2010 46 2032 398 2003 46 2006 58 621 621 621 621 2010 46 2033 40 41 2003 46 2005 61 2010 46 2034 46 2031 392 2003 46 2006 407 303 58 2003 46 2006 61 91 93 2003 46 2006 46 2035 40 2010 46 2032 41 2036 61 2003 46 2037 40 2010 41 2003 46 2038 40 2010 44 2036 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2039 40 2003 44 2010 41 58 621 392 2003 46 2013 40 2010 41 58 450 2040 61 2010 46 2041 46 2042 46 2043 91 2010 46 2032 93 2044 61 2010 46 2045 40 41 46 2046 40 1501 41 621 2047 61 2010 46 2042 46 2047 40 2040 41 392 2044 398 2047 58 2003 46 2007 61 303 2003 46 2008 61 2048 46 2049 450 359 2050 46 2051 398 2047 58 392 2003 46 2007 407 303 58 621 621 2003 46 2007 61 2010 46 2052 2003 46 2053 61 2010 46 2054 450 392 2040 46 2055 398 91 2048 46 2056 44 2048 46 2057 44 2048 46 2058 44 2048 46 2059 93 58 621 392 2003 46 2060 40 2010 41 407 422 303 58 450 360 58 440 2020 40 2010 41 359 2040 46 2055 398 91 2048 46 2061 44 2048 46 2062 93 58 2003 46 2063 40 2010 41 2064 61 2010 46 2065 40 41 2066 61 2064 46 2067 40 2003 46 2037 40 2010 41 41 2003 46 2038 40 2010 44 2066 41 360 58 621 434 621 621 621 621 621 621 621 621 348 2019 40 2003 44 2010 44 2016 41 58 2068 61 2010 46 2045 40 41 392 2068 407 422 303 58 392 2016 46 2069 46 2024 614 2050 46 2070 58 2071 61 648 360 58 2071 61 2068 46 2072 40 2016 46 2069 44 2016 46 2073 41 360 58 2071 61 648 2074 61 648 43 2003 46 2075 40 2071 41 2010 46 2026 40 2074 44 2016 46 2073 44 2016 41 621 621 621 621 621 621 621 621 621 348 2021 40 2003 44 2010 44 2016 41 58 2074 61 648 43 2003 46 2076 40 2016 46 2073 41 92 43 648 43 2016 46 2065 40 41 46 2077 40 2010 46 2078 44 2010 46 2079 41 2010 46 2026 40 2074 44 2016 46 2073 44 2016 41 621 621 621 621 621 621 621 621 621 348 2023 40 2003 44 2010 44 2016 41 58 2080 61 2010 46 2081 91 2010 46 2052 46 2082 40 41 93 2074 61 648 43 2080 43 648 43 2016 46 2083 2010 46 2026 40 2074 44 2016 46 2073 44 2016 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2063 40 2003 44 2010 41 58 392 2003 46 2013 40 2010 41 58 450 2003 46 2012 40 2010 41 2084 61 2010 46 2085 40 41 2086 61 2003 46 2076 40 2084 41 2064 61 2003 46 2065 40 2010 41 2074 61 648 43 2086 43 648 92 43 2064 46 2077 40 2010 46 2078 44 2010 46 2079 41 2010 46 2026 40 2074 44 2084 44 303 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2087 40 2003 44 2010 41 58 392 2003 46 2013 40 2010 41 58 450 2003 46 2012 40 2010 41 2084 61 2010 46 2085 40 41 2064 61 2003 46 2065 40 2010 41 2074 61 648 43 2064 46 2077 40 2010 46 2078 44 2010 46 2079 41 92 43 648 43 2003 46 2076 40 2084 41 2010 46 2026 40 2074 44 2084 44 303 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2088 40 2003 44 2010 41 58 621 2089 61 2003 46 2060 40 2010 41 392 2089 407 422 303 58 621 621 2010 46 2033 40 41 450 2089 621 392 2003 46 2090 40 2010 41 58 450 2003 46 2091 40 2010 41 621 440 2020 40 2010 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2090 40 2003 44 2010 41 58 2092 61 2010 46 2045 40 41 46 2046 40 1501 41 621 621 621 2042 61 2010 46 2041 46 2042 2093 61 2042 46 2043 91 2010 46 2032 93 2094 61 2093 46 2095 91 1500 93 46 2096 2097 61 2042 46 2047 40 2094 44 2010 46 2052 41 392 2092 398 2097 58 2003 46 2087 40 2010 41 450 304 360 58 450 302 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2060 40 2003 44 2010 41 58 2098 61 2010 46 2045 40 41 46 2046 40 1502 41 2064 61 2003 46 2065 40 2010 41 392 2098 398 2064 58 2003 46 2063 40 2010 41 621 621 621 621 2010 46 2033 40 41 621 621 2089 61 2010 46 2085 40 41 2003 46 2014 40 2010 41 621 450 2089 360 58 450 303 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2091 40 2003 44 2010 41 58 2099 61 2010 46 2085 40 41 2064 61 2003 46 2065 40 2010 41 2100 61 2064 91 1500 93 621 392 2100 614 2050 46 2070 58 2101 61 648 360 58 2102 61 303 392 2100 60 2103 40 2010 46 2078 41 58 2102 61 2010 46 2078 91 2100 93 392 2102 407 303 308 2100 60 2103 40 2010 46 2079 41 58 2102 61 2010 46 2079 91 2100 93 2101 61 648 43 2104 40 2102 41 43 648 2105 61 2099 2106 61 2010 46 2045 40 41 46 2107 40 45 1501 41 392 2105 46 2024 614 2050 46 2070 308 2106 407 422 303 58 2105 61 2106 450 2010 46 2108 40 41 46 2109 40 2105 46 2110 44 2100 44 2101 44 2050 46 2111 44 45 1501 44 45 1501 44 2105 46 410 44 2105 46 2112 41 348 2065 40 2003 44 2010 41 58 450 2010 46 2065 40 41 621 621 621 621 621 621 621 621 348 2076 40 2003 44 2084 41 58 392 2084 407 303 58 450 648 2040 61 2084 46 2113 392 2040 407 303 58 392 2084 46 2024 614 2050 46 2070 58 2040 61 648 360 58 2040 61 648 43 2104 40 2084 46 2024 41 43 648 450 2003 46 2075 40 2040 41 348 2075 40 2003 44 2040 41 58 2040 61 2040 46 2114 40 648 44 648 41 2040 61 2040 46 2114 40 648 44 648 41 2040 61 2040 46 2114 40 648 44 648 41 450 648 43 2040 43 648 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2037 40 2003 44 2010 41 58 2042 61 2010 46 2041 46 2042 2115 61 2010 46 2052 2116 61 2117 40 41 496 2115 407 422 303 308 2115 46 2118 615 1500 58 621 2118 61 2042 46 2043 91 2115 46 2118 93 2119 61 2118 46 2095 91 1500 93 2120 61 2042 46 2047 40 2119 46 2121 41 2116 46 2067 40 2120 41 2115 61 2115 46 2122 2116 46 2123 40 2050 46 2051 41 450 2116 621 348 2038 40 2003 44 2010 44 2124 41 58 2125 61 2010 46 2045 40 41 46 2046 40 1501 41 496 2125 631 2050 46 2070 308 422 2125 398 2124 58 2010 46 2033 40 41 2125 61 2010 46 2045 40 41 46 2046 40 1501 41 
128900,Python,"class IntervalSet(object):
    __slots__ = ('intervals', 'readonly')

    def __init__(self):
        self.intervals = None
        self.readonly = False

    def __iter__(self):
        if self.intervals is not None:
            for i in self.intervals:
                for c in i:
                    yield c

    def __getitem__(self, item):
        i = 0
        for k in self:
            if i==item:
                return k
            else:
                i += 1
        return Token.INVALID_TYPE

    def addOne(self, v:int):
        self.addRange(range(v, v+1))

    def addRange(self, v:range):
        if self.intervals is None:
            self.intervals = list()
            self.intervals.append(v)
        else:
            # find insert pos
            k = 0
            for i in self.intervals:
                # distinct range -> insert
                if v.stop<i.start:
                    self.intervals.insert(k, v)
                    return
                # contiguous range -> adjust
                elif v.stop==i.start:
                    self.intervals[k] = range(v.start, i.stop)
                    return
                # overlapping range -> adjust and reduce
                elif v.start<=i.stop:
                    self.intervals[k] = range(min(i.start,v.start), max(i.stop,v.stop))
                    self.reduce(k)
                    return
                k += 1
            # greater than any existing
            self.intervals.append(v)

    def addSet(self, other:IntervalSet):
        if other.intervals is not None:
            for i in other.intervals:
                self.addRange(i)
        return self

    def reduce(self, k:int):
        # only need to reduce if k is not the last
        if k<len(self.intervals)-1:
            l = self.intervals[k]
            r = self.intervals[k+1]
            # if r contained in l
            if l.stop >= r.stop:
                self.intervals.pop(k+1)
                self.reduce(k)
            elif l.stop >= r.start:
                self.intervals[k] = range(l.start, r.stop)
                self.intervals.pop(k+1)

    def complement(self, start, stop):
        result = IntervalSet()
        result.addRange(range(start,stop+1))
        for i in self.intervals:
            result.removeRange(i)
        return result

    def __contains__(self, item):
        if self.intervals is None:
            return False
        else:
            return any(item in i for i in self.intervals)

    def __len__(self):
        return sum(len(i) for i in self.intervals)

    def removeRange(self, v):
        if v.start==v.stop-1:
            self.removeOne(v.start)
        elif self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals are ordered
                if v.stop<=i.start:
                    return
                # check for including range, split it
                elif v.start>i.start and v.stop<i.stop:
                    self.intervals[k] = range(i.start, v.start)
                    x = range(v.stop, i.stop)
                    self.intervals.insert(k, x)
                    return
                # check for included range, remove it
                elif v.start<=i.start and v.stop>=i.stop:
                    self.intervals.pop(k)
                    k -= 1  # need another pass
                # check for lower boundary
                elif v.start<i.stop:
                    self.intervals[k] = range(i.start, v.start)
                # check for upper boundary
                elif v.stop<i.stop:
                    self.intervals[k] = range(v.stop, i.stop)
                k += 1

    def removeOne(self, v):
        if self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals is ordered
                if v<i.start:
                    return
                # check for single value range
                elif v==i.start and v==i.stop-1:
                    self.intervals.pop(k)
                    return
                # check for lower boundary
                elif v==i.start:
                    self.intervals[k] = range(i.start+1, i.stop)
                    return
                # check for upper boundary
                elif v==i.stop-1:
                    self.intervals[k] = range(i.start, i.stop-1)
                    return
                # split existing range
                elif v<i.stop-1:
                    x = range(i.start, v)
                    self.intervals[k] = range(v + 1, i.stop)
                    self.intervals.insert(k, x)
                    return
                k += 1


    def toString(self, literalNames:list, symbolicNames:list):
        if self.intervals is None:
            return ""{}""
        with StringIO() as buf:
            if len(self)>1:
                buf.write(""{"")
            first = True
            for i in self.intervals:
                for j in i:
                    if not first:
                        buf.write("", "")
                    buf.write(self.elementName(literalNames, symbolicNames, j))
                    first = False
            if len(self)>1:
                buf.write(""}"")
            return buf.getvalue()

    def elementName(self, literalNames:list, symbolicNames:list, a:int):
        if a==Token.EOF:
            return ""<EOF>""
        elif a==Token.EPSILON:
            return ""<EPSILON>""
        else:
            if a<len(literalNames) and literalNames[a] != ""<INVALID>"":
                return literalNames[a]
            if a<len(symbolicNames):
                return symbolicNames[a]
            return ""<UNKNOWN>""",1,334 2000 40 426 41 58 2001 61 40 648 44 648 41 348 2002 40 2003 41 58 2003 46 2004 61 303 2003 46 441 61 302 348 2005 40 2003 41 58 392 2003 46 2004 407 422 303 58 385 2006 398 2003 46 2004 58 385 2007 398 2006 58 500 2007 348 2008 40 2003 44 2009 41 58 2006 61 1500 385 2010 398 2003 58 392 2006 614 2009 58 450 2010 360 58 2006 636 1501 450 2011 46 2012 348 2013 40 2003 44 2014 58 404 41 58 2003 46 2015 40 2016 40 2014 44 2014 43 1501 41 41 348 2015 40 2003 44 2014 58 2016 41 58 392 2003 46 2004 407 303 58 2003 46 2004 61 411 40 41 2003 46 2004 46 2017 40 2014 41 360 58 621 2010 61 1500 385 2006 398 2003 46 2004 58 621 392 2014 46 2018 60 2006 46 2019 58 2003 46 2004 46 2020 40 2010 44 2014 41 450 621 359 2014 46 2018 614 2006 46 2019 58 2003 46 2004 91 2010 93 61 2016 40 2014 46 2019 44 2006 46 2018 41 450 621 359 2014 46 2019 620 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2021 40 2006 46 2019 44 2014 46 2019 41 44 2022 40 2006 46 2018 44 2014 46 2018 41 41 2003 46 2023 40 2010 41 450 2010 636 1501 621 2003 46 2004 46 2017 40 2014 41 348 2024 40 2003 44 2025 58 2000 41 58 392 2025 46 2004 407 422 303 58 385 2006 398 2025 46 2004 58 2003 46 2015 40 2006 41 450 2003 348 2023 40 2003 44 2010 58 404 41 58 621 392 2010 60 2026 40 2003 46 2004 41 45 1501 58 2027 61 2003 46 2004 91 2010 93 2028 61 2003 46 2004 91 2010 43 1501 93 621 392 2027 46 2018 615 2028 46 2018 58 2003 46 2004 46 2029 40 2010 43 1501 41 2003 46 2023 40 2010 41 359 2027 46 2018 615 2028 46 2019 58 2003 46 2004 91 2010 93 61 2016 40 2027 46 2019 44 2028 46 2018 41 2003 46 2004 46 2029 40 2010 43 1501 41 348 2030 40 2003 44 2019 44 2018 41 58 2031 61 2000 40 41 2031 46 2015 40 2016 40 2019 44 2018 43 1501 41 41 385 2006 398 2003 46 2004 58 2031 46 2032 40 2006 41 450 2031 348 2033 40 2003 44 2009 41 58 392 2003 46 2004 407 303 58 450 302 360 58 450 2034 40 2009 398 2006 385 2006 398 2003 46 2004 41 348 2035 40 2003 41 58 450 2036 40 2026 40 2006 41 385 2006 398 2003 46 2004 41 348 2032 40 2003 44 2014 41 58 392 2014 46 2019 614 2014 46 2018 45 1501 58 2003 46 2037 40 2014 46 2019 41 359 2003 46 2004 407 422 303 58 2010 61 1500 385 2006 398 2003 46 2004 58 621 392 2014 46 2018 620 2006 46 2019 58 450 621 359 2014 46 2019 62 2006 46 2019 308 2014 46 2018 60 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 44 2014 46 2019 41 2038 61 2016 40 2014 46 2018 44 2006 46 2018 41 2003 46 2004 46 2020 40 2010 44 2038 41 450 621 359 2014 46 2019 620 2006 46 2019 308 2014 46 2018 615 2006 46 2018 58 2003 46 2004 46 2029 40 2010 41 2010 628 1501 621 621 359 2014 46 2019 60 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 44 2014 46 2019 41 621 359 2014 46 2018 60 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2014 46 2018 44 2006 46 2018 41 2010 636 1501 348 2037 40 2003 44 2014 41 58 392 2003 46 2004 407 422 303 58 2010 61 1500 385 2006 398 2003 46 2004 58 621 392 2014 60 2006 46 2019 58 450 621 359 2014 614 2006 46 2019 308 2014 614 2006 46 2018 45 1501 58 2003 46 2004 46 2029 40 2010 41 450 621 359 2014 614 2006 46 2019 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 43 1501 44 2006 46 2018 41 450 621 359 2014 614 2006 46 2018 45 1501 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 44 2006 46 2018 45 1501 41 450 621 359 2014 60 2006 46 2018 45 1501 58 2038 61 2016 40 2006 46 2019 44 2014 41 2003 46 2004 91 2010 93 61 2016 40 2014 43 1501 44 2006 46 2018 41 2003 46 2004 46 2020 40 2010 44 2038 41 450 2010 636 1501 348 2039 40 2003 44 2040 58 411 44 2041 58 411 41 58 392 2003 46 2004 407 303 58 450 648 497 2042 40 41 311 2043 58 392 2026 40 2003 41 62 1501 58 2043 46 2044 40 648 41 2045 61 304 385 2006 398 2003 46 2004 58 385 2046 398 2006 58 392 422 2045 58 2043 46 2044 40 648 41 2043 46 2044 40 2003 46 2047 40 2040 44 2041 44 2046 41 41 2045 61 302 392 2026 40 2003 41 62 1501 58 2043 46 2044 40 648 41 450 2043 46 2048 40 41 348 2047 40 2003 44 2040 58 411 44 2041 58 411 44 2049 58 404 41 58 392 2049 614 2011 46 2050 58 450 648 359 2049 614 2011 46 2051 58 450 648 360 58 392 2049 60 2026 40 2040 41 308 2040 91 2049 93 631 648 58 450 2040 91 2049 93 392 2049 60 2026 40 2041 41 58 450 2041 91 2049 93 450 648 
128922,Python,"class IntervalSet(object):

    def __init__(self):
        self.intervals = None # type: list | None
        self.readonly = False

    def __iter__(self):
        if self.intervals is not None:
            for i in self.intervals:
                for c in i:
                    yield c

    def __getitem__(self, item):
        i = 0
        for k in self:
            if i==item:
                return k
            else:
                i += 1
        return Token.INVALID_TYPE

    def addOne(self, v):
        self.addRange(Interval(v, v+1))

    def addRange(self, v):
        if self.intervals is None:
            self.intervals = list()
            self.intervals.append(v)
        else:
            # find insert pos
            k = 0
            for i in self.intervals:
                # distinct range -> insert
                if v.stop<i.start:
                    self.intervals.insert(k, v)
                    return
                # contiguous range -> adjust
                elif v.stop==i.start:
                    self.intervals[k] = Interval(v.start, i.stop)
                    return
                # overlapping range -> adjust and reduce
                elif v.start<=i.stop:
                    self.intervals[k] = Interval(min(i.start,v.start), max(i.stop,v.stop))
                    self.reduce(k)
                    return
                k += 1
            # greater than any existing
            self.intervals.append(v)

    def addSet(self, other):
        if other.intervals is not None:
            for i in other.intervals:
                self.addRange(i)
        return self

    def reduce(self, k):
        # only need to reduce if k is not the last
        if k<len(self.intervals)-1:
            l = self.intervals[k]
            r = self.intervals[k+1]
            # if r contained in l
            if l.stop >= r.stop:
                self.intervals.pop(k+1)
                self.reduce(k)
            elif l.stop >= r.start:
                self.intervals[k] = Interval(l.start, r.stop)
                self.intervals.pop(k+1)

    def complement(self, start, stop):
        result = IntervalSet()
        result.addRange(Interval(start,stop+1))
        for i in self.intervals:
            result.removeRange(i)
        return result

    def __contains__(self, item):
        if self.intervals is None:
            return False
        else:
            return any(item in i for i in self.intervals)

    def __len__(self):
        return sum(len(i) for i in self.intervals)

    def removeRange(self, v):
        if v.start==v.stop-1:
            self.removeOne(v.start)
        elif self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals are ordered
                if v.stop<=i.start:
                    return
                # check for including range, split it
                elif v.start>i.start and v.stop<i.stop:
                    self.intervals[k] = Interval(i.start, v.start)
                    x = Interval(v.stop, i.stop)
                    self.intervals.insert(k, x)
                    return
                # check for included range, remove it
                elif v.start<=i.start and v.stop>=i.stop:
                    self.intervals.pop(k)
                    k -= 1 # need another pass
                # check for lower boundary
                elif v.start<i.stop:
                    self.intervals[k] = Interval(i.start, v.start)
                # check for upper boundary
                elif v.stop<i.stop:
                    self.intervals[k] = Interval(v.stop, i.stop)
                k += 1

    def removeOne(self, v):
        if self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals is ordered
                if v<i.start:
                    return
                # check for single value range
                elif v==i.start and v==i.stop-1:
                    self.intervals.pop(k)
                    return
                # check for lower boundary
                elif v==i.start:
                    self.intervals[k] = Interval(i.start+1, i.stop)
                    return
                # check for upper boundary
                elif v==i.stop-1:
                    self.intervals[k] = Interval(i.start, i.stop-1)
                    return
                # split existing range
                elif v<i.stop-1:
                    x = Interval(i.start, v)
                    self.intervals[k] = Interval(v + 1, i.stop)
                    self.intervals.insert(k, x)
                    return
                k += 1


    def toString(self, literalNames, symbolicNames):
        if self.intervals is None:
            return u""{}""
        with StringIO() as buf:
            if len(self)>1:
                buf.write(u""{"")
            first = True
            for i in self.intervals:
                for j in i:
                    if not first:
                        buf.write(u"", "")
                    buf.write(self.elementName(literalNames, symbolicNames, j))
                    first = False
            if len(self)>1:
                buf.write(u""}"")
            return buf.getvalue()

    def elementName(self, literalNames, symbolicNames, a):
        if a==Token.EOF:
            return u""<EOF>""
        elif a==Token.EPSILON:
            return u""<EPSILON>""
        else:
            if a<len(literalNames) and literalNames[a] != u""<INVALID>"":
                return literalNames[a]
            if a<len(symbolicNames):
                return symbolicNames[a]
            return u""<UNKNOWN>""",1,334 2000 40 426 41 58 348 2001 40 2002 41 58 2002 46 2003 61 303 621 2002 46 441 61 302 348 2004 40 2002 41 58 392 2002 46 2003 407 422 303 58 385 2005 398 2002 46 2003 58 385 2006 398 2005 58 500 2006 348 2007 40 2002 44 2008 41 58 2005 61 1500 385 2009 398 2002 58 392 2005 614 2008 58 450 2009 360 58 2005 636 1501 450 2010 46 2011 348 2012 40 2002 44 2013 41 58 2002 46 2014 40 2015 40 2013 44 2013 43 1501 41 41 348 2014 40 2002 44 2013 41 58 392 2002 46 2003 407 303 58 2002 46 2003 61 411 40 41 2002 46 2003 46 2016 40 2013 41 360 58 621 2009 61 1500 385 2005 398 2002 46 2003 58 621 392 2013 46 2017 60 2005 46 2018 58 2002 46 2003 46 2019 40 2009 44 2013 41 450 621 359 2013 46 2017 614 2005 46 2018 58 2002 46 2003 91 2009 93 61 2015 40 2013 46 2018 44 2005 46 2017 41 450 621 359 2013 46 2018 620 2005 46 2017 58 2002 46 2003 91 2009 93 61 2015 40 2020 40 2005 46 2018 44 2013 46 2018 41 44 2021 40 2005 46 2017 44 2013 46 2017 41 41 2002 46 2022 40 2009 41 450 2009 636 1501 621 2002 46 2003 46 2016 40 2013 41 348 2023 40 2002 44 2024 41 58 392 2024 46 2003 407 422 303 58 385 2005 398 2024 46 2003 58 2002 46 2014 40 2005 41 450 2002 348 2022 40 2002 44 2009 41 58 621 392 2009 60 2025 40 2002 46 2003 41 45 1501 58 2026 61 2002 46 2003 91 2009 93 2027 61 2002 46 2003 91 2009 43 1501 93 621 392 2026 46 2017 615 2027 46 2017 58 2002 46 2003 46 2028 40 2009 43 1501 41 2002 46 2022 40 2009 41 359 2026 46 2017 615 2027 46 2018 58 2002 46 2003 91 2009 93 61 2015 40 2026 46 2018 44 2027 46 2017 41 2002 46 2003 46 2028 40 2009 43 1501 41 348 2029 40 2002 44 2018 44 2017 41 58 2030 61 2000 40 41 2030 46 2014 40 2015 40 2018 44 2017 43 1501 41 41 385 2005 398 2002 46 2003 58 2030 46 2031 40 2005 41 450 2030 348 2032 40 2002 44 2008 41 58 392 2002 46 2003 407 303 58 450 302 360 58 450 2033 40 2008 398 2005 385 2005 398 2002 46 2003 41 348 2034 40 2002 41 58 450 2035 40 2025 40 2005 41 385 2005 398 2002 46 2003 41 348 2031 40 2002 44 2013 41 58 392 2013 46 2018 614 2013 46 2017 45 1501 58 2002 46 2036 40 2013 46 2018 41 359 2002 46 2003 407 422 303 58 2009 61 1500 385 2005 398 2002 46 2003 58 621 392 2013 46 2017 620 2005 46 2018 58 450 621 359 2013 46 2018 62 2005 46 2018 308 2013 46 2017 60 2005 46 2017 58 2002 46 2003 91 2009 93 61 2015 40 2005 46 2018 44 2013 46 2018 41 2037 61 2015 40 2013 46 2017 44 2005 46 2017 41 2002 46 2003 46 2019 40 2009 44 2037 41 450 621 359 2013 46 2018 620 2005 46 2018 308 2013 46 2017 615 2005 46 2017 58 2002 46 2003 46 2028 40 2009 41 2009 628 1501 621 621 359 2013 46 2018 60 2005 46 2017 58 2002 46 2003 91 2009 93 61 2015 40 2005 46 2018 44 2013 46 2018 41 621 359 2013 46 2017 60 2005 46 2017 58 2002 46 2003 91 2009 93 61 2015 40 2013 46 2017 44 2005 46 2017 41 2009 636 1501 348 2036 40 2002 44 2013 41 58 392 2002 46 2003 407 422 303 58 2009 61 1500 385 2005 398 2002 46 2003 58 621 392 2013 60 2005 46 2018 58 450 621 359 2013 614 2005 46 2018 308 2013 614 2005 46 2017 45 1501 58 2002 46 2003 46 2028 40 2009 41 450 621 359 2013 614 2005 46 2018 58 2002 46 2003 91 2009 93 61 2015 40 2005 46 2018 43 1501 44 2005 46 2017 41 450 621 359 2013 614 2005 46 2017 45 1501 58 2002 46 2003 91 2009 93 61 2015 40 2005 46 2018 44 2005 46 2017 45 1501 41 450 621 359 2013 60 2005 46 2017 45 1501 58 2037 61 2015 40 2005 46 2018 44 2013 41 2002 46 2003 91 2009 93 61 2015 40 2013 43 1501 44 2005 46 2017 41 2002 46 2003 46 2019 40 2009 44 2037 41 450 2009 636 1501 348 2038 40 2002 44 2039 44 2040 41 58 392 2002 46 2003 407 303 58 450 648 497 2041 40 41 311 2042 58 392 2025 40 2002 41 62 1501 58 2042 46 2043 40 648 41 2044 61 304 385 2005 398 2002 46 2003 58 385 2045 398 2005 58 392 422 2044 58 2042 46 2043 40 648 41 2042 46 2043 40 2002 46 2046 40 2039 44 2040 44 2045 41 41 2044 61 302 392 2025 40 2002 41 62 1501 58 2042 46 2043 40 648 41 450 2042 46 2047 40 41 348 2046 40 2002 44 2039 44 2040 44 2048 41 58 392 2048 614 2010 46 2049 58 450 648 359 2048 614 2010 46 2050 58 450 648 360 58 392 2048 60 2025 40 2039 41 308 2039 91 2048 93 631 648 58 450 2039 91 2048 93 392 2048 60 2025 40 2040 41 58 450 2040 91 2048 93 450 648 
129010,Python,"class BufferedTokenStream(TokenStream):
    __slots__ = ('tokenSource', 'tokens', 'index', 'fetchedEOF')

    def __init__(self, tokenSource:Lexer):
        # The {@link TokenSource} from which tokens for this stream are fetched.
        self.tokenSource = tokenSource

        # A collection of all tokens fetched from the token source. The list is
        # considered a complete view of the input once {@link #fetchedEOF} is set
        # to {@code true}.
        self.tokens = []

        # The index into {@link #tokens} of the current token (next token to
        # {@link #consume}). {@link #tokens}{@code [}{@link #p}{@code ]} should be
        # {@link #LT LT(1)}.
        #
        # <p>This field is set to -1 when the stream is first constructed or when
        # {@link #setTokenSource} is called, indicating that the first token has
        # not yet been fetched from the token source. For additional information,
        # see the documentation of {@link IntStream} for a description of
        # Initializing Methods.</p>
        self.index = -1

        # Indicates whether the {@link Token#EOF} token has been fetched from
        # {@link #tokenSource} and added to {@link #tokens}. This field improves
        # performance for the following cases:
        #
        # <ul>
        # <li>{@link #consume}: The lookahead check in {@link #consume} to prevent
        # consuming the EOF symbol is optimized by checking the values of
        # {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.</li>
        # <li>{@link #fetch}: The check to prevent adding multiple EOF symbols into
        # {@link #tokens} is trivial with this field.</li>
        # <ul>
        self.fetchedEOF = False

    def mark(self):
        return 0

    def release(self, marker:int):
        # no resources to release
        pass

    def reset(self):
        self.seek(0)

    def seek(self, index:int):
        self.lazyInit()
        self.index = self.adjustSeekIndex(index)

    def get(self, index:int):
        self.lazyInit()
        return self.tokens[index]

    def consume(self):
        skipEofCheck = False
        if self.index >= 0:
            if self.fetchedEOF:
                # the last token in tokens is EOF. skip check if p indexes any
                # fetched token except the last.
                skipEofCheck = self.index < len(self.tokens) - 1
            else:
               # no EOF token in tokens. skip check if p indexes a fetched token.
                skipEofCheck = self.index < len(self.tokens)
        else:
            # not yet initialized
            skipEofCheck = False

        if not skipEofCheck and self.LA(1) == Token.EOF:
            raise IllegalStateException(""cannot consume EOF"")

        if self.sync(self.index + 1):
            self.index = self.adjustSeekIndex(self.index + 1)

    # Make sure index {@code i} in tokens has a token.
    #
    # @return {@code true} if a token is located at index {@code i}, otherwise
    #    {@code false}.
    # @see #get(int i)
    #/
    def sync(self, i:int):
        n = i - len(self.tokens) + 1 # how many more elements we need?
        if n > 0 :
            fetched = self.fetch(n)
            return fetched >= n
        return True

    # Add {@code n} elements to buffer.
    #
    # @return The actual number of elements added to the buffer.
    #/
    def fetch(self, n:int):
        if self.fetchedEOF:
            return 0
        for i in range(0, n):
            t = self.tokenSource.nextToken()
            t.tokenIndex = len(self.tokens)
            self.tokens.append(t)
            if t.type==Token.EOF:
                self.fetchedEOF = True
                return i + 1
        return n


    # Get all tokens from start..stop inclusively#/
    def getTokens(self, start:int, stop:int, types:set=None):
        if start<0 or stop<0:
            return None
        self.lazyInit()
        subset = []
        if stop >= len(self.tokens):
            stop = len(self.tokens)-1
        for i in range(start, stop):
            t = self.tokens[i]
            if t.type==Token.EOF:
                break
            if types is None or t.type in types:
                subset.append(t)
        return subset

    def LA(self, i:int):
        return self.LT(i).type

    def LB(self, k:int):
        if (self.index-k) < 0:
            return None
        return self.tokens[self.index-k]

    def LT(self, k:int):
        self.lazyInit()
        if k==0:
            return None
        if k < 0:
            return self.LB(-k)
        i = self.index + k - 1
        self.sync(i)
        if i >= len(self.tokens): # return EOF token
            # EOF must be last token
            return self.tokens[len(self.tokens)-1]
        return self.tokens[i]

    # Allowed derived classes to modify the behavior of operations which change
    # the current stream position by adjusting the target token index of a seek
    # operation. The default implementation simply returns {@code i}. If an
    # exception is thrown in this method, the current stream index should not be
    # changed.
    #
    # <p>For example, {@link CommonTokenStream} overrides this method to ensure that
    # the seek target is always an on-channel token.</p>
    #
    # @param i The target token index.
    # @return The adjusted target token index.

    def adjustSeekIndex(self, i:int):
        return i

    def lazyInit(self):
        if self.index == -1:
            self.setup()

    def setup(self):
        self.sync(0)
        self.index = self.adjustSeekIndex(0)

    # Reset this token stream by setting its token source.#/
    def setTokenSource(self, tokenSource:Lexer):
        self.tokenSource = tokenSource
        self.tokens = []
        self.index = -1
        self.fetchedEOF = False


    # Given a starting index, return the index of the next token on channel.
    #  Return i if tokens[i] is on channel.  Return the index of the EOF token
    # if there are no tokens on channel between i and EOF.
    #/
    def nextTokenOnChannel(self, i:int, channel:int):
        self.sync(i)
        if i>=len(self.tokens):
            return len(self.tokens) - 1
        token = self.tokens[i]
        while token.channel!=channel:
            if token.type==Token.EOF:
                return i
            i += 1
            self.sync(i)
            token = self.tokens[i]
        return i

    # Given a starting index, return the index of the previous token on channel.
    #  Return i if tokens[i] is on channel. Return -1 if there are no tokens
    #  on channel between i and 0.
    def previousTokenOnChannel(self, i:int, channel:int):
        while i>=0 and self.tokens[i].channel!=channel:
            i -= 1
        return i

    # Collect all tokens on specified channel to the right of
    #  the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
    #  EOF. If channel is -1, find any non default channel token.
    def getHiddenTokensToRight(self, tokenIndex:int, channel:int=-1):
        self.lazyInit()
        if tokenIndex<0 or tokenIndex>=len(self.tokens):
            raise Exception(str(tokenIndex) + "" not in 0.."" + str(len(self.tokens)-1))
        from antlr4.Lexer import Lexer
        nextOnChannel = self.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL)
        from_ = tokenIndex+1
        # if none onchannel to right, nextOnChannel=-1 so set to = last token
        to = (len(self.tokens)-1) if nextOnChannel==-1 else nextOnChannel
        return self.filterForChannel(from_, to, channel)


    # Collect all tokens on specified channel to the left of
    #  the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
    #  If channel is -1, find any non default channel token.
    def getHiddenTokensToLeft(self, tokenIndex:int, channel:int=-1):
        self.lazyInit()
        if tokenIndex<0 or tokenIndex>=len(self.tokens):
            raise Exception(str(tokenIndex) + "" not in 0.."" + str(len(self.tokens)-1))
        from antlr4.Lexer import Lexer
        prevOnChannel = self.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL)
        if prevOnChannel == tokenIndex - 1:
            return None
        # if none on channel to left, prevOnChannel=-1 then from=0
        from_ = prevOnChannel+1
        to = tokenIndex-1
        return self.filterForChannel(from_, to, channel)


    def filterForChannel(self, left:int, right:int, channel:int):
        hidden = []
        for i in range(left, right+1):
            t = self.tokens[i]
            if channel==-1:
                from antlr4.Lexer import Lexer
                if t.channel!= Lexer.DEFAULT_TOKEN_CHANNEL:
                    hidden.append(t)
            elif t.channel==channel:
                    hidden.append(t)
        if len(hidden)==0:
            return None
        return hidden

    def getSourceName(self):
        return self.tokenSource.getSourceName()

    # Get the text of all tokens in this buffer.#/
    def getText(self, start:int=None, stop:int=None):
        self.lazyInit()
        self.fill()
        if isinstance(start, Token):
            start = start.tokenIndex
        elif start is None:
            start = 0
        if isinstance(stop, Token):
            stop = stop.tokenIndex
        elif stop is None or stop >= len(self.tokens):
            stop = len(self.tokens) - 1
        if start < 0 or stop < 0 or stop < start:
            return """"
        with StringIO() as buf:
            for i in range(start, stop+1):
                t = self.tokens[i]
                if t.type==Token.EOF:
                    break
                buf.write(t.text)
            return buf.getvalue()


    # Get all tokens from lexer until EOF#/
    def fill(self):
        self.lazyInit()
        while self.fetch(1000)==1000:
            pass",1,334 2000 40 2001 41 58 2002 61 40 648 44 648 44 648 44 648 41 348 2003 40 2004 44 2005 58 2006 41 58 621 2004 46 2005 61 2005 621 621 621 2004 46 2007 61 91 93 621 621 621 621 621 621 621 621 621 2004 46 2008 61 45 1501 621 621 621 621 621 621 621 621 621 621 621 2004 46 2009 61 302 348 2010 40 2004 41 58 450 1500 348 2011 40 2004 44 2012 58 404 41 58 621 434 348 2013 40 2004 41 58 2004 46 2014 40 1500 41 348 2014 40 2004 44 2008 58 404 41 58 2004 46 2015 40 41 2004 46 2008 61 2004 46 2016 40 2008 41 348 2017 40 2004 44 2008 58 404 41 58 2004 46 2015 40 41 450 2004 46 2007 91 2008 93 348 2018 40 2004 41 58 2019 61 302 392 2004 46 2008 615 1500 58 392 2004 46 2009 58 621 621 2019 61 2004 46 2008 60 2020 40 2004 46 2007 41 45 1501 360 58 621 2019 61 2004 46 2008 60 2020 40 2004 46 2007 41 360 58 621 2019 61 302 392 422 2019 308 2004 46 2021 40 1501 41 614 2022 46 2023 58 440 2024 40 648 41 392 2004 46 2025 40 2004 46 2008 43 1501 41 58 2004 46 2008 61 2004 46 2016 40 2004 46 2008 43 1501 41 621 621 621 621 621 621 348 2025 40 2004 44 2026 58 404 41 58 2027 61 2026 45 2020 40 2004 46 2007 41 43 1501 621 392 2027 62 1500 58 2028 61 2004 46 2029 40 2027 41 450 2028 615 2027 450 304 621 621 621 621 348 2029 40 2004 44 2027 58 404 41 58 392 2004 46 2009 58 450 1500 385 2026 398 2030 40 1500 44 2027 41 58 2031 61 2004 46 2005 46 2032 40 41 2031 46 2033 61 2020 40 2004 46 2007 41 2004 46 2007 46 2034 40 2031 41 392 2031 46 2035 614 2022 46 2023 58 2004 46 2009 61 304 450 2026 43 1501 450 2027 621 348 2036 40 2004 44 2037 58 404 44 2038 58 404 44 2039 58 2040 61 303 41 58 392 2037 60 1500 428 2038 60 1500 58 450 303 2004 46 2015 40 41 2041 61 91 93 392 2038 615 2020 40 2004 46 2007 41 58 2038 61 2020 40 2004 46 2007 41 45 1501 385 2026 398 2030 40 2037 44 2038 41 58 2031 61 2004 46 2007 91 2026 93 392 2031 46 2035 614 2022 46 2023 58 325 392 2039 407 303 428 2031 46 2035 398 2039 58 2041 46 2034 40 2031 41 450 2041 348 2021 40 2004 44 2026 58 404 41 58 450 2004 46 2042 40 2026 41 46 2035 348 2043 40 2004 44 2044 58 404 41 58 392 40 2004 46 2008 45 2044 41 60 1500 58 450 303 450 2004 46 2007 91 2004 46 2008 45 2044 93 348 2042 40 2004 44 2044 58 404 41 58 2004 46 2015 40 41 392 2044 614 1500 58 450 303 392 2044 60 1500 58 450 2004 46 2043 40 45 2044 41 2026 61 2004 46 2008 43 2044 45 1501 2004 46 2025 40 2026 41 392 2026 615 2020 40 2004 46 2007 41 58 621 621 450 2004 46 2007 91 2020 40 2004 46 2007 41 45 1501 93 450 2004 46 2007 91 2026 93 621 621 621 621 621 621 621 621 621 621 621 348 2016 40 2004 44 2026 58 404 41 58 450 2026 348 2015 40 2004 41 58 392 2004 46 2008 614 45 1501 58 2004 46 2045 40 41 348 2045 40 2004 41 58 2004 46 2025 40 1500 41 2004 46 2008 61 2004 46 2016 40 1500 41 621 348 2046 40 2004 44 2005 58 2006 41 58 2004 46 2005 61 2005 2004 46 2007 61 91 93 2004 46 2008 61 45 1501 2004 46 2009 61 302 621 621 621 621 348 2047 40 2004 44 2026 58 404 44 2048 58 404 41 58 2004 46 2025 40 2026 41 392 2026 615 2020 40 2004 46 2007 41 58 450 2020 40 2004 46 2007 41 45 1501 2049 61 2004 46 2007 91 2026 93 496 2049 46 2048 631 2048 58 392 2049 46 2035 614 2022 46 2023 58 450 2026 2026 636 1501 2004 46 2025 40 2026 41 2049 61 2004 46 2007 91 2026 93 450 2026 621 621 621 348 2050 40 2004 44 2026 58 404 44 2048 58 404 41 58 496 2026 615 1500 308 2004 46 2007 91 2026 93 46 2048 631 2048 58 2026 628 1501 450 2026 621 621 621 348 2051 40 2004 44 2033 58 404 44 2048 58 404 61 45 1501 41 58 2004 46 2015 40 41 392 2033 60 1500 428 2033 615 2020 40 2004 46 2007 41 58 440 2052 40 2053 40 2033 41 43 648 43 2053 40 2020 40 2004 46 2007 41 45 1501 41 41 388 2054 46 2006 397 2006 2055 61 2004 46 2047 40 2033 43 1501 44 2006 46 2056 41 2057 61 2033 43 1501 621 2058 61 40 2020 40 2004 46 2007 41 45 1501 41 392 2055 614 45 1501 360 2055 450 2004 46 2059 40 2057 44 2058 44 2048 41 621 621 621 348 2060 40 2004 44 2033 58 404 44 2048 58 404 61 45 1501 41 58 2004 46 2015 40 41 392 2033 60 1500 428 2033 615 2020 40 2004 46 2007 41 58 440 2052 40 2053 40 2033 41 43 648 43 2053 40 2020 40 2004 46 2007 41 45 1501 41 41 388 2054 46 2006 397 2006 2061 61 2004 46 2050 40 2033 45 1501 44 2006 46 2056 41 392 2061 614 2033 45 1501 58 450 303 621 2057 61 2061 43 1501 2058 61 2033 45 1501 450 2004 46 2059 40 2057 44 2058 44 2048 41 348 2059 40 2004 44 2062 58 404 44 2063 58 404 44 2048 58 404 41 58 2064 61 91 93 385 2026 398 2030 40 2062 44 2063 43 1501 41 58 2031 61 2004 46 2007 91 2026 93 392 2048 614 45 1501 58 388 2054 46 2006 397 2006 392 2031 46 2048 631 2006 46 2056 58 2064 46 2034 40 2031 41 359 2031 46 2048 614 2048 58 2064 46 2034 40 2031 41 392 2020 40 2064 41 614 1500 58 450 303 450 2064 348 2065 40 2004 41 58 450 2004 46 2005 46 2065 40 41 621 348 2066 40 2004 44 2037 58 404 61 303 44 2038 58 404 61 303 41 58 2004 46 2015 40 41 2004 46 2067 40 41 392 2068 40 2037 44 2022 41 58 2037 61 2037 46 2033 359 2037 407 303 58 2037 61 1500 392 2068 40 2038 44 2022 41 58 2038 61 2038 46 2033 359 2038 407 303 428 2038 615 2020 40 2004 46 2007 41 58 2038 61 2020 40 2004 46 2007 41 45 1501 392 2037 60 1500 428 2038 60 1500 428 2038 60 2037 58 450 648 497 2069 40 41 311 2070 58 385 2026 398 2030 40 2037 44 2038 43 1501 41 58 2031 61 2004 46 2007 91 2026 93 392 2031 46 2035 614 2022 46 2023 58 325 2070 46 2071 40 2031 46 2072 41 450 2070 46 2073 40 41 621 348 2067 40 2004 41 58 2004 46 2015 40 41 496 2004 46 2029 40 1504 41 614 1504 58 434 
130783,Python,"class MultiWidget(Widget):
    """"""
    A widget that is composed of multiple widgets.

    In addition to the values added by Widget.get_context(), this widget
    adds a list of subwidgets to the context as widget['subwidgets'].
    These can be looped over and rendered like normal widgets.

    You'll probably want to use this class with MultiValueField.
    """"""
    template_name = 'django/forms/widgets/multiwidget.html'

    def __init__(self, widgets, attrs=None):
        if isinstance(widgets, dict):
            self.widgets_names = [
                ('_%s' % name) if name else '' for name in widgets
            ]
            widgets = widgets.values()
        else:
            self.widgets_names = ['_%s' % i for i in range(len(widgets))]
        self.widgets = [w() if isinstance(w, type) else w for w in widgets]
        super().__init__(attrs)

    @property
    def is_hidden(self):
        return all(w.is_hidden for w in self.widgets)

    def get_context(self, name, value, attrs):
        context = super().get_context(name, value, attrs)
        if self.is_localized:
            for widget in self.widgets:
                widget.is_localized = self.is_localized
        # value is a list of values, each corresponding to a widget
        # in self.widgets.
        if not isinstance(value, list):
            value = self.decompress(value)

        final_attrs = context['widget']['attrs']
        input_type = final_attrs.pop('type', None)
        id_ = final_attrs.get('id')
        subwidgets = []
        for i, (widget_name, widget) in enumerate(zip(self.widgets_names, self.widgets)):
            if input_type is not None:
                widget.input_type = input_type
            widget_name = name + widget_name
            try:
                widget_value = value[i]
            except IndexError:
                widget_value = None
            if id_:
                widget_attrs = final_attrs.copy()
                widget_attrs['id'] = '%s_%s' % (id_, i)
            else:
                widget_attrs = final_attrs
            subwidgets.append(widget.get_context(widget_name, widget_value, widget_attrs)['widget'])
        context['widget']['subwidgets'] = subwidgets
        return context

    def id_for_label(self, id_):
        return ''

    def value_from_datadict(self, data, files, name):
        return [
            widget.value_from_datadict(data, files, name + widget_name)
            for widget_name, widget in zip(self.widgets_names, self.widgets)
        ]

    def value_omitted_from_data(self, data, files, name):
        return all(
            widget.value_omitted_from_data(data, files, name + widget_name)
            for widget_name, widget in zip(self.widgets_names, self.widgets)
        )

    def decompress(self, value):
        """"""
        Return a list of decompressed values for the given compressed value.
        The given value can be assumed to be valid, but not necessarily
        non-empty.
        """"""
        raise NotImplementedError('Subclasses must implement this method.')

    def _get_media(self):
        """"""
        Media for a multiwidget is the combination of all media of the
        subwidgets.
        """"""
        media = Media()
        for w in self.widgets:
            media = media + w.media
        return media
    media = property(_get_media)

    def __deepcopy__(self, memo):
        obj = super().__deepcopy__(memo)
        obj.widgets = copy.deepcopy(self.widgets)
        return obj

    @property
    def needs_multipart_form(self):
        return any(w.needs_multipart_form for w in self.widgets)",1,334 2000 40 2001 41 58 648 2002 61 648 348 2003 40 2004 44 2005 44 2006 61 303 41 58 392 2007 40 2005 44 2008 41 58 2004 46 2009 61 91 40 648 37 2010 41 392 2010 360 648 385 2010 398 2005 93 2005 61 2005 46 2011 40 41 360 58 2004 46 2009 61 91 648 37 2012 385 2012 398 2013 40 2014 40 2005 41 41 93 2004 46 2005 61 91 2015 40 41 392 2007 40 2015 44 2016 41 360 2015 385 2015 398 2005 93 463 40 41 46 2003 40 2006 41 64 2017 348 2018 40 2004 41 58 450 2019 40 2015 46 2018 385 2015 398 2004 46 2005 41 348 2020 40 2004 44 2010 44 2021 44 2006 41 58 2022 61 463 40 41 46 2020 40 2010 44 2021 44 2006 41 392 2004 46 2023 58 385 2024 398 2004 46 2005 58 2024 46 2023 61 2004 46 2023 621 621 392 422 2007 40 2021 44 411 41 58 2021 61 2004 46 2025 40 2021 41 2026 61 2022 91 648 93 91 648 93 2027 61 2026 46 2028 40 648 44 303 41 2029 61 2026 46 2030 40 648 41 2031 61 91 93 385 2012 44 40 2032 44 2024 41 398 2033 40 2034 40 2004 46 2009 44 2004 46 2005 41 41 58 392 2027 407 422 303 58 2024 46 2027 61 2027 2032 61 2010 43 2032 474 58 2035 61 2021 91 2012 93 374 2036 58 2035 61 303 392 2029 58 2037 61 2026 46 2038 40 41 2037 91 648 93 61 648 37 40 2029 44 2012 41 360 58 2037 61 2026 2031 46 2039 40 2024 46 2020 40 2032 44 2035 44 2037 41 91 648 93 41 2022 91 648 93 91 648 93 61 2031 450 2022 348 2040 40 2004 44 2029 41 58 450 648 348 2041 40 2004 44 2042 44 2043 44 2010 41 58 450 91 2024 46 2041 40 2042 44 2043 44 2010 43 2032 41 385 2032 44 2024 398 2034 40 2004 46 2009 44 2004 46 2005 41 93 348 2044 40 2004 44 2042 44 2043 44 2010 41 58 450 2019 40 2024 46 2044 40 2042 44 2043 44 2010 43 2032 41 385 2032 44 2024 398 2034 40 2004 46 2009 44 2004 46 2005 41 41 348 2025 40 2004 44 2021 41 58 648 440 2045 40 648 41 348 2046 40 2004 41 58 648 2047 61 2048 40 41 385 2015 398 2004 46 2005 58 2047 61 2047 43 2015 46 2047 450 2047 2047 61 2017 40 2046 41 348 2049 40 2004 44 2050 41 58 2051 61 463 40 41 46 2049 40 2050 41 2051 46 2005 61 2038 46 2052 40 2004 46 2005 41 450 2051 64 2017 348 2053 40 2004 41 58 450 2054 40 2015 46 2053 385 2015 398 2004 46 2005 41 
130897,Python,"class ProjectState:
    """"""
    Represent the entire project's overall state. This is the item that is
    passed around - do it here rather than at the app level so that cross-app
    FKs/etc. resolve properly.
    """"""

    def __init__(self, models=None, real_apps=None):
        self.models = models or {}
        # Apps to include from main registry, usually unmigrated ones
        if real_apps is None:
            real_apps = set()
        else:
            assert isinstance(real_apps, set)
        self.real_apps = real_apps
        self.is_delayed = False
        # {remote_model_key: {model_key: {field_name: field}}}
        self._relations = None

    @property
    def relations(self):
        if self._relations is None:
            self.resolve_fields_and_relations()
        return self._relations

    def add_model(self, model_state):
        model_key = model_state.app_label, model_state.name_lower
        self.models[model_key] = model_state
        if self._relations is not None:
            self.resolve_model_relations(model_key)
        if 'apps' in self.__dict__:  # hasattr would cache the property
            self.reload_model(*model_key)

    def remove_model(self, app_label, model_name):
        model_key = app_label, model_name
        del self.models[model_key]
        if self._relations is not None:
            self._relations.pop(model_key, None)
            # Call list() since _relations can change size during iteration.
            for related_model_key, model_relations in list(self._relations.items()):
                model_relations.pop(model_key, None)
                if not model_relations:
                    del self._relations[related_model_key]
        if 'apps' in self.__dict__:  # hasattr would cache the property
            self.apps.unregister_model(*model_key)
            # Need to do this explicitly since unregister_model() doesn't clear
            # the cache automatically (#24513)
            self.apps.clear_cache()

    def rename_model(self, app_label, old_name, new_name):
        # Add a new model.
        old_name_lower = old_name.lower()
        new_name_lower = new_name.lower()
        renamed_model = self.models[app_label, old_name_lower].clone()
        renamed_model.name = new_name
        self.models[app_label, new_name_lower] = renamed_model
        # Repoint all fields pointing to the old model to the new one.
        old_model_tuple = (app_label, old_name_lower)
        new_remote_model = f'{app_label}.{new_name}'
        to_reload = set()
        for model_state, name, field, reference in get_references(self, old_model_tuple):
            changed_field = None
            if reference.to:
                changed_field = field.clone()
                changed_field.remote_field.model = new_remote_model
            if reference.through:
                if changed_field is None:
                    changed_field = field.clone()
                changed_field.remote_field.through = new_remote_model
            if changed_field:
                model_state.fields[name] = changed_field
                to_reload.add((model_state.app_label, model_state.name_lower))
        if self._relations is not None:
            old_name_key = app_label, old_name_lower
            new_name_key = app_label, new_name_lower
            if old_name_key in self._relations:
                self._relations[new_name_key] = self._relations.pop(old_name_key)
            for model_relations in self._relations.values():
                if old_name_key in model_relations:
                    model_relations[new_name_key] = model_relations.pop(old_name_key)
        # Reload models related to old model before removing the old model.
        self.reload_models(to_reload, delay=True)
        # Remove the old model.
        self.remove_model(app_label, old_name_lower)
        self.reload_model(app_label, new_name_lower, delay=True)

    def alter_model_options(self, app_label, model_name, options, option_keys=None):
        model_state = self.models[app_label, model_name]
        model_state.options = {**model_state.options, **options}
        if option_keys:
            for key in option_keys:
                if key not in options:
                    model_state.options.pop(key, False)
        self.reload_model(app_label, model_name, delay=True)

    def alter_model_managers(self, app_label, model_name, managers):
        model_state = self.models[app_label, model_name]
        model_state.managers = list(managers)
        self.reload_model(app_label, model_name, delay=True)

    def _append_option(self, app_label, model_name, option_name, obj):
        model_state = self.models[app_label, model_name]
        model_state.options[option_name] = [*model_state.options[option_name], obj]
        self.reload_model(app_label, model_name, delay=True)

    def _remove_option(self, app_label, model_name, option_name, obj_name):
        model_state = self.models[app_label, model_name]
        objs = model_state.options[option_name]
        model_state.options[option_name] = [obj for obj in objs if obj.name != obj_name]
        self.reload_model(app_label, model_name, delay=True)

    def add_index(self, app_label, model_name, index):
        self._append_option(app_label, model_name, 'indexes', index)

    def remove_index(self, app_label, model_name, index_name):
        self._remove_option(app_label, model_name, 'indexes', index_name)

    def add_constraint(self, app_label, model_name, constraint):
        self._append_option(app_label, model_name, 'constraints', constraint)

    def remove_constraint(self, app_label, model_name, constraint_name):
        self._remove_option(app_label, model_name, 'constraints', constraint_name)

    def add_field(self, app_label, model_name, name, field, preserve_default):
        # If preserve default is off, don't use the default for future state.
        if not preserve_default:
            field = field.clone()
            field.default = NOT_PROVIDED
        else:
            field = field
        model_key = app_label, model_name
        self.models[model_key].fields[name] = field
        if self._relations is not None:
            self.resolve_model_field_relations(model_key, name, field)
        # Delay rendering of relationships if it's not a relational field.
        delay = not field.is_relation
        self.reload_model(*model_key, delay=delay)

    def remove_field(self, app_label, model_name, name):
        model_key = app_label, model_name
        model_state = self.models[model_key]
        old_field = model_state.fields.pop(name)
        if self._relations is not None:
            self.resolve_model_field_relations(model_key, name, old_field)
        # Delay rendering of relationships if it's not a relational field.
        delay = not old_field.is_relation
        self.reload_model(*model_key, delay=delay)

    def alter_field(self, app_label, model_name, name, field, preserve_default):
        if not preserve_default:
            field = field.clone()
            field.default = NOT_PROVIDED
        else:
            field = field
        model_key = app_label, model_name
        fields = self.models[model_key].fields
        if self._relations is not None:
            old_field = fields.pop(name)
            if old_field.is_relation:
                self.resolve_model_field_relations(model_key, name, old_field)
            fields[name] = field
            if field.is_relation:
                self.resolve_model_field_relations(model_key, name, field)
        else:
            fields[name] = field
        # TODO: investigate if old relational fields must be reloaded or if
        # it's sufficient if the new field is (#27737).
        # Delay rendering of relationships if it's not a relational field and
        # not referenced by a foreign key.
        delay = (
            not field.is_relation and
            not field_is_referenced(self, model_key, (name, field))
        )
        self.reload_model(*model_key, delay=delay)

    def rename_field(self, app_label, model_name, old_name, new_name):
        model_key = app_label, model_name
        model_state = self.models[model_key]
        # Rename the field.
        fields = model_state.fields
        try:
            found = fields.pop(old_name)
        except KeyError:
            raise FieldDoesNotExist(
                f""{app_label}.{model_name} has no field named '{old_name}'""
            )
        fields[new_name] = found
        for field in fields.values():
            # Fix from_fields to refer to the new field.
            from_fields = getattr(field, 'from_fields', None)
            if from_fields:
                field.from_fields = tuple([
                    new_name if from_field_name == old_name else from_field_name
                    for from_field_name in from_fields
                ])
        # Fix index/unique_together to refer to the new field.
        options = model_state.options
        for option in ('index_together', 'unique_together'):
            if option in options:
                options[option] = [
                    [new_name if n == old_name else n for n in together]
                    for together in options[option]
                ]
        # Fix to_fields to refer to the new field.
        delay = True
        references = get_references(self, model_key, (old_name, found))
        for *_, field, reference in references:
            delay = False
            if reference.to:
                remote_field, to_fields = reference.to
                if getattr(remote_field, 'field_name', None) == old_name:
                    remote_field.field_name = new_name
                if to_fields:
                    field.to_fields = tuple([
                        new_name if to_field_name == old_name else to_field_name
                        for to_field_name in to_fields
                    ])
        if self._relations is not None:
            old_name_lower = old_name.lower()
            new_name_lower = new_name.lower()
            for to_model in self._relations.values():
                if old_name_lower in to_model[model_key]:
                    field = to_model[model_key].pop(old_name_lower)
                    field.name = new_name_lower
                    to_model[model_key][new_name_lower] = field
        self.reload_model(*model_key, delay=delay)

    def _find_reload_model(self, app_label, model_name, delay=False):
        if delay:
            self.is_delayed = True

        related_models = set()

        try:
            old_model = self.apps.get_model(app_label, model_name)
        except LookupError:
            pass
        else:
            # Get all relations to and from the old model before reloading,
            # as _meta.apps may change
            if delay:
                related_models = get_related_models_tuples(old_model)
            else:
                related_models = get_related_models_recursive(old_model)

        # Get all outgoing references from the model to be rendered
        model_state = self.models[(app_label, model_name)]
        # Directly related models are the models pointed to by ForeignKeys,
        # OneToOneFields, and ManyToManyFields.
        direct_related_models = set()
        for field in model_state.fields.values():
            if field.is_relation:
                if field.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT:
                    continue
                rel_app_label, rel_model_name = _get_app_label_and_model_name(field.related_model, app_label)
                direct_related_models.add((rel_app_label, rel_model_name.lower()))

        # For all direct related models recursively get all related models.
        related_models.update(direct_related_models)
        for rel_app_label, rel_model_name in direct_related_models:
            try:
                rel_model = self.apps.get_model(rel_app_label, rel_model_name)
            except LookupError:
                pass
            else:
                if delay:
                    related_models.update(get_related_models_tuples(rel_model))
                else:
                    related_models.update(get_related_models_recursive(rel_model))

        # Include the model itself
        related_models.add((app_label, model_name))

        return related_models

    def reload_model(self, app_label, model_name, delay=False):
        if 'apps' in self.__dict__:  # hasattr would cache the property
            related_models = self._find_reload_model(app_label, model_name, delay)
            self._reload(related_models)

    def reload_models(self, models, delay=True):
        if 'apps' in self.__dict__:  # hasattr would cache the property
            related_models = set()
            for app_label, model_name in models:
                related_models.update(self._find_reload_model(app_label, model_name, delay))
            self._reload(related_models)

    def _reload(self, related_models):
        # Unregister all related models
        with self.apps.bulk_update():
            for rel_app_label, rel_model_name in related_models:
                self.apps.unregister_model(rel_app_label, rel_model_name)

        states_to_be_rendered = []
        # Gather all models states of those models that will be rerendered.
        # This includes:
        # 1. All related models of unmigrated apps
        for model_state in self.apps.real_models:
            if (model_state.app_label, model_state.name_lower) in related_models:
                states_to_be_rendered.append(model_state)

        # 2. All related models of migrated apps
        for rel_app_label, rel_model_name in related_models:
            try:
                model_state = self.models[rel_app_label, rel_model_name]
            except KeyError:
                pass
            else:
                states_to_be_rendered.append(model_state)

        # Render all models
        self.apps.render_multiple(states_to_be_rendered)

    def update_model_field_relation(
        self, model, model_key, field_name, field, concretes,
    ):
        remote_model_key = resolve_relation(model, *model_key)
        if remote_model_key[0] not in self.real_apps and remote_model_key in concretes:
            remote_model_key = concretes[remote_model_key]
        relations_to_remote_model = self._relations[remote_model_key]
        if field_name in self.models[model_key].fields:
            # The assert holds because it's a new relation, or an altered
            # relation, in which case references have been removed by
            # alter_field().
            assert field_name not in relations_to_remote_model[model_key]
            relations_to_remote_model[model_key][field_name] = field
        else:
            del relations_to_remote_model[model_key][field_name]
            if not relations_to_remote_model[model_key]:
                del relations_to_remote_model[model_key]

    def resolve_model_field_relations(
        self, model_key, field_name, field, concretes=None,
    ):
        remote_field = field.remote_field
        if not remote_field:
            return
        if concretes is None:
            concretes, _ = self._get_concrete_models_mapping_and_proxy_models()

        self.update_model_field_relation(
            remote_field.model, model_key, field_name, field, concretes,
        )

        through = getattr(remote_field, 'through', None)
        if not through:
            return
        self.update_model_field_relation(through, model_key, field_name, field, concretes)

    def resolve_model_relations(self, model_key, concretes=None):
        if concretes is None:
            concretes, _ = self._get_concrete_models_mapping_and_proxy_models()

        model_state = self.models[model_key]
        for field_name, field in model_state.fields.items():
            self.resolve_model_field_relations(model_key, field_name, field, concretes)

    def resolve_fields_and_relations(self):
        # Resolve fields.
        for model_state in self.models.values():
            for field_name, field in model_state.fields.items():
                field.name = field_name
        # Resolve relations.
        # {remote_model_key: {model_key: {field_name: field}}}
        self._relations = defaultdict(partial(defaultdict, dict))
        concretes, proxies = self._get_concrete_models_mapping_and_proxy_models()

        for model_key in concretes:
            self.resolve_model_relations(model_key, concretes)

        for model_key in proxies:
            self._relations[model_key] = self._relations[concretes[model_key]]

    def get_concrete_model_key(self, model):
        concrete_models_mapping, _ = self._get_concrete_models_mapping_and_proxy_models()
        model_key = make_model_tuple(model)
        return concrete_models_mapping[model_key]

    def _get_concrete_models_mapping_and_proxy_models(self):
        concrete_models_mapping = {}
        proxy_models = {}
        # Split models to proxy and concrete models.
        for model_key, model_state in self.models.items():
            if model_state.options.get('proxy'):
                proxy_models[model_key] = model_state
                # Find a concrete model for the proxy.
                concrete_models_mapping[model_key] = self._find_concrete_model_from_proxy(
                    proxy_models, model_state,
                )
            else:
                concrete_models_mapping[model_key] = model_key
        return concrete_models_mapping, proxy_models

    def _find_concrete_model_from_proxy(self, proxy_models, model_state):
        for base in model_state.bases:
            if not (isinstance(base, str) or issubclass(base, models.Model)):
                continue
            base_key = make_model_tuple(base)
            base_state = proxy_models.get(base_key)
            if not base_state:
                # Concrete model found, stop looking at bases.
                return base_key
            return self._find_concrete_model_from_proxy(proxy_models, base_state)

    def clone(self):
        """"""Return an exact copy of this ProjectState.""""""
        new_state = ProjectState(
            models={k: v.clone() for k, v in self.models.items()},
            real_apps=self.real_apps,
        )
        if 'apps' in self.__dict__:
            new_state.apps = self.apps.clone()
        new_state.is_delayed = self.is_delayed
        return new_state

    def clear_delayed_apps_cache(self):
        if self.is_delayed and 'apps' in self.__dict__:
            del self.__dict__['apps']

    @cached_property
    def apps(self):
        return StateApps(self.real_apps, self.models)

    @classmethod
    def from_apps(cls, apps):
        """"""Take an Apps and return a ProjectState matching it.""""""
        app_models = {}
        for model in apps.get_models(include_swapped=True):
            model_state = ModelState.from_model(model)
            app_models[(model_state.app_label, model_state.name_lower)] = model_state
        return cls(app_models)

    def __eq__(self, other):
        return self.models == other.models and self.real_apps == other.real_apps",1,334 2000 58 648 348 2001 40 2002 44 2003 61 303 44 2004 61 303 41 58 2002 46 2003 61 2003 428 123 125 621 392 2004 407 303 58 2004 61 2005 40 41 360 58 313 2006 40 2004 44 2005 41 2002 46 2004 61 2004 2002 46 2007 61 302 621 2002 46 2008 61 303 64 2009 348 2010 40 2002 41 58 392 2002 46 2008 407 303 58 2002 46 2011 40 41 450 2002 46 2008 348 2012 40 2002 44 2013 41 58 2014 61 2013 46 2015 44 2013 46 2016 2002 46 2003 91 2014 93 61 2013 392 2002 46 2008 407 422 303 58 2002 46 2017 40 2014 41 392 648 398 2002 46 2018 58 621 2002 46 2019 40 42 2014 41 348 2020 40 2002 44 2015 44 2021 41 58 2014 61 2015 44 2021 351 2002 46 2003 91 2014 93 392 2002 46 2008 407 422 303 58 2002 46 2008 46 2022 40 2014 44 303 41 621 385 2023 44 2024 398 411 40 2002 46 2008 46 2025 40 41 41 58 2024 46 2022 40 2014 44 303 41 392 422 2024 58 351 2002 46 2008 91 2023 93 392 648 398 2002 46 2018 58 621 2002 46 2026 46 2027 40 42 2014 41 621 621 2002 46 2026 46 2028 40 41 348 2029 40 2002 44 2015 44 2030 44 2031 41 58 621 2032 61 2030 46 2033 40 41 2034 61 2031 46 2033 40 41 2035 61 2002 46 2003 91 2015 44 2032 93 46 335 40 41 2035 46 2036 61 2031 2002 46 2003 91 2015 44 2034 93 61 2035 621 2037 61 40 2015 44 2032 41 2038 61 648 2039 61 2005 40 41 385 2013 44 2036 44 2040 44 2041 398 2042 40 2002 44 2037 41 58 2043 61 303 392 2041 46 2044 58 2043 61 2040 46 335 40 41 2043 46 2045 46 2046 61 2038 392 2041 46 2047 58 392 2043 407 303 58 2043 61 2040 46 335 40 41 2043 46 2045 46 2047 61 2038 392 2043 58 2013 46 2048 91 2036 93 61 2043 2039 46 2049 40 40 2013 46 2015 44 2013 46 2016 41 41 392 2002 46 2008 407 422 303 58 2050 61 2015 44 2032 2051 61 2015 44 2034 392 2050 398 2002 46 2008 58 2002 46 2008 91 2051 93 61 2002 46 2008 46 2022 40 2050 41 385 2024 398 2002 46 2008 46 2052 40 41 58 392 2050 398 2024 58 2024 91 2051 93 61 2024 46 2022 40 2050 41 621 2002 46 2053 40 2039 44 2054 61 304 41 621 2002 46 2020 40 2015 44 2032 41 2002 46 2019 40 2015 44 2034 44 2054 61 304 41 348 2055 40 2002 44 2015 44 2021 44 2056 44 2057 61 303 41 58 2013 61 2002 46 2003 91 2015 44 2021 93 2013 46 2056 61 123 638 2013 46 2056 44 638 2056 125 392 2057 58 385 2058 398 2057 58 392 2058 422 398 2056 58 2013 46 2056 46 2022 40 2058 44 302 41 2002 46 2019 40 2015 44 2021 44 2054 61 304 41 348 2059 40 2002 44 2015 44 2021 44 2060 41 58 2013 61 2002 46 2003 91 2015 44 2021 93 2013 46 2060 61 411 40 2060 41 2002 46 2019 40 2015 44 2021 44 2054 61 304 41 348 2061 40 2002 44 2015 44 2021 44 2062 44 2063 41 58 2013 61 2002 46 2003 91 2015 44 2021 93 2013 46 2056 91 2062 93 61 91 42 2013 46 2056 91 2062 93 44 2063 93 2002 46 2019 40 2015 44 2021 44 2054 61 304 41 348 2064 40 2002 44 2015 44 2021 44 2062 44 2065 41 58 2013 61 2002 46 2003 91 2015 44 2021 93 2066 61 2013 46 2056 91 2062 93 2013 46 2056 91 2062 93 61 91 2063 385 2063 398 2066 392 2063 46 2036 631 2065 93 2002 46 2019 40 2015 44 2021 44 2054 61 304 41 348 2067 40 2002 44 2015 44 2021 44 2068 41 58 2002 46 2061 40 2015 44 2021 44 648 44 2068 41 348 2069 40 2002 44 2015 44 2021 44 2070 41 58 2002 46 2064 40 2015 44 2021 44 648 44 2070 41 348 2071 40 2002 44 2015 44 2021 44 2072 41 58 2002 46 2061 40 2015 44 2021 44 648 44 2072 41 348 2073 40 2002 44 2015 44 2021 44 2074 41 58 2002 46 2064 40 2015 44 2021 44 648 44 2074 41 348 2075 40 2002 44 2015 44 2021 44 2036 44 2040 44 2076 41 58 621 392 422 2076 58 2040 61 2040 46 335 40 41 2040 46 349 61 2077 360 58 2040 61 2040 2014 61 2015 44 2021 2002 46 2003 91 2014 93 46 2048 91 2036 93 61 2040 392 2002 46 2008 407 422 303 58 2002 46 2078 40 2014 44 2036 44 2040 41 621 2054 61 422 2040 46 2079 2002 46 2019 40 42 2014 44 2054 61 2054 41 348 2080 40 2002 44 2015 44 2021 44 2036 41 58 2014 61 2015 44 2021 2013 61 2002 46 2003 91 2014 93 2081 61 2013 46 2048 46 2022 40 2036 41 392 2002 46 2008 407 422 303 58 2002 46 2078 40 2014 44 2036 44 2081 41 621 2054 61 422 2081 46 2079 2002 46 2019 40 42 2014 44 2054 61 2054 41 348 2082 40 2002 44 2015 44 2021 44 2036 44 2040 44 2076 41 58 392 422 2076 58 2040 61 2040 46 335 40 41 2040 46 349 61 2077 360 58 2040 61 2040 2014 61 2015 44 2021 2048 61 2002 46 2003 91 2014 93 46 2048 392 2002 46 2008 407 422 303 58 2081 61 2048 46 2022 40 2036 41 392 2081 46 2079 58 2002 46 2078 40 2014 44 2036 44 2081 41 2048 91 2036 93 61 2040 392 2040 46 2079 58 2002 46 2078 40 2014 44 2036 44 2040 41 360 58 2048 91 2036 93 61 2040 621 621 621 621 2054 61 40 422 2040 46 2079 308 422 2083 40 2002 44 2014 44 40 2036 44 2040 41 41 41 2002 46 2019 40 42 2014 44 2054 61 2054 41 348 2084 40 2002 44 2015 44 2021 44 2030 44 2031 41 58 2014 61 2015 44 2021 2013 61 2002 46 2003 91 2014 93 621 2048 61 2013 46 2048 474 58 2085 61 2048 46 2022 40 2030 41 374 2086 58 440 2087 40 648 41 2048 91 2031 93 61 2085 385 2040 398 2048 46 2052 40 41 58 621 2088 61 2089 40 2040 44 648 44 303 41 392 2088 58 2040 46 2088 61 2090 40 91 2031 392 2091 614 2030 360 2091 385 2091 398 2088 93 41 621 2056 61 2013 46 2056 385 2092 398 40 648 44 648 41 58 392 2092 398 2056 58 2056 91 2092 93 61 91 91 2031 392 2093 614 2030 360 2093 385 2093 398 2094 93 385 2094 398 2056 91 2092 93 93 621 2054 61 304 2095 61 2042 40 2002 44 2014 44 40 2030 44 2085 41 41 385 42 2096 44 2040 44 2041 398 2095 58 2054 61 302 392 2041 46 2044 58 2045 44 2097 61 2041 46 2044 392 2089 40 2045 44 648 44 303 41 614 2030 58 2045 46 2098 61 2031 392 2097 58 2040 46 2097 61 2090 40 91 2031 392 2099 614 2030 360 2099 385 2099 398 2097 93 41 392 2002 46 2008 407 422 303 58 2032 61 2030 46 2033 40 41 2034 61 2031 46 2033 40 41 385 2100 398 2002 46 2008 46 2052 40 41 58 392 2032 398 2100 91 2014 93 58 2040 61 2100 91 2014 93 46 2022 40 2032 41 2040 46 2036 61 2034 2100 91 2014 93 91 2034 93 61 2040 2002 46 2019 40 42 2014 44 2054 61 2054 41 348 2101 40 2002 44 2015 44 2021 44 2054 61 302 41 58 392 2054 58 2002 46 2007 61 304 2102 61 2005 40 41 474 58 2103 61 2002 46 2026 46 2104 40 2015 44 2021 41 374 2105 58 434 360 58 621 621 392 2054 58 2102 61 2106 40 2103 41 360 58 2102 61 2107 40 2103 41 621 2013 61 2002 46 2003 91 40 2015 44 2021 41 93 621 621 2108 61 2005 40 41 385 2040 398 2013 46 2048 46 2052 40 41 58 392 2040 46 2079 58 392 2040 46 2045 46 2046 614 2109 58 344 2110 44 2111 61 2112 40 2040 46 2113 44 2015 41 2108 46 2049 40 40 2110 44 2111 46 2033 40 41 41 41 621 2102 46 2114 40 2108 41 385 2110 44 2111 398 2108 58 474 58 2115 61 2002 46 2026 46 2104 40 2110 44 2111 41 374 2105 58 434 360 58 392 2054 58 2102 46 2114 40 2106 40 2115 41 41 360 58 2102 46 2114 40 2107 40 2115 41 41 621 2102 46 2049 40 40 2015 44 2021 41 41 450 2102 348 2019 40 2002 44 2015 44 2021 44 2054 61 302 41 58 392 648 398 2002 46 2018 58 621 2102 61 2002 46 2101 40 2015 44 2021 44 2054 41 2002 46 2116 40 2102 41 348 2053 40 2002 44 2003 44 2054 61 304 41 58 392 648 398 2002 46 2018 58 621 2102 61 2005 40 41 385 2015 44 2021 398 2003 58 2102 46 2114 40 2002 46 2101 40 2015 44 2021 44 2054 41 41 2002 46 2116 40 2102 41 348 2116 40 2002 44 2102 41 58 621 497 2002 46 2026 46 2117 40 41 58 385 2110 44 2111 398 2102 58 2002 46 2026 46 2027 40 2110 44 2111 41 2118 61 91 93 621 621 621 385 2013 398 2002 46 2026 46 2119 58 392 40 2013 46 2015 44 2013 46 2016 41 398 2102 58 2118 46 2120 40 2013 41 621 385 2110 44 2111 398 2102 58 474 58 2013 61 2002 46 2003 91 2110 44 2111 93 374 2086 58 434 360 58 2118 46 2120 40 2013 41 621 2002 46 2026 46 2121 40 2118 41 348 2122 40 2002 44 2046 44 2014 44 2098 44 2040 44 2123 44 41 58 2124 61 2125 40 2046 44 42 2014 41 392 2124 91 1500 93 422 398 2002 46 2004 308 2124 398 2123 58 2124 61 2123 91 2124 93 2126 61 2002 46 2008 91 2124 93 392 2098 398 2002 46 2003 91 2014 93 46 2048 58 621 621 621 313 2098 422 398 2126 91 2014 93 2126 91 2014 93 91 2098 93 61 2040 360 58 351 2126 91 2014 93 91 2098 93 392 422 2126 91 2014 93 58 351 2126 91 2014 93 348 2078 40 2002 44 2014 44 2098 44 2040 44 2123 61 303 44 41 58 2045 61 2040 46 2045 392 422 2045 58 450 392 2123 407 303 58 2123 44 2096 61 2002 46 2127 40 41 2002 46 2122 40 2045 46 2046 44 2014 44 2098 44 2040 44 2123 44 41 2047 61 2089 40 2045 44 648 44 303 41 392 422 2047 58 450 2002 46 2122 40 2047 44 2014 44 2098 44 2040 44 2123 41 348 2017 40 2002 44 2014 44 2123 61 303 41 58 392 2123 407 303 58 2123 44 2096 61 2002 46 2127 40 41 2013 61 2002 46 2003 91 2014 93 385 2098 44 2040 398 2013 46 2048 46 2025 40 41 58 2002 46 2078 40 2014 44 2098 44 2040 44 2123 41 348 2011 40 2002 41 58 621 385 2013 398 2002 46 2003 46 2052 40 41 58 385 2098 44 2040 398 2013 46 2048 46 2025 40 41 58 2040 46 2036 61 2098 621 621 2002 46 2008 61 2128 40 2129 40 2128 44 2130 41 41 2123 44 2131 61 2002 46 2127 40 41 385 2014 398 2123 58 2002 46 2017 40 2014 44 2123 41 385 2014 398 2131 58 2002 46 2008 91 2014 93 61 2002 46 2008 91 2123 91 2014 93 93 348 2132 40 2002 44 2046 41 58 2133 44 2096 61 2002 46 2127 40 41 2014 61 2134 40 2046 41 450 2133 91 2014 93 348 2127 40 2002 41 58 2133 61 123 125 2135 61 123 125 621 385 2014 44 2013 398 2002 46 2003 46 2025 40 41 58 392 2013 46 2056 46 2136 40 648 41 58 2135 91 2014 93 61 2013 621 2133 91 2014 93 61 2002 46 2137 40 2135 44 2013 44 41 360 58 2133 91 2014 93 61 2014 450 2133 44 2135 348 2137 40 2002 44 2135 44 2013 41 58 385 320 398 2013 46 2138 58 392 422 40 2006 40 320 44 2139 41 428 2140 40 320 44 2003 46 2141 41 41 58 344 2142 61 2134 40 320 41 2143 61 2135 46 2136 40 2142 41 392 422 2143 58 621 450 2142 450 2002 46 2137 40 2135 44 2143 41 348 335 40 2002 41 58 648 2144 61 2000 40 2003 61 123 2145 58 2146 46 335 40 41 385 2145 44 2146 398 2002 46 2003 46 2025 40 41 125 44 2004 61 2002 46 2004 44 41 392 648 398 2002 46 2018 58 2144 46 2026 61 2002 46 2026 46 335 40 41 2144 46 2007 61 2002 46 2007 450 2144 348 2147 40 2002 41 58 392 2002 46 2007 308 648 398 2002 46 2018 58 351 2002 46 2018 91 648 93 64 2148 348 2026 40 2002 41 58 450 2149 40 2002 46 2004 44 2002 46 2003 41 64 2150 348 2151 40 2152 44 2026 41 58 648 2153 61 123 125 385 2046 398 2026 46 2154 40 2155 61 304 41 58 2013 61 2156 46 2157 40 2046 41 2153 91 40 2013 46 2015 44 2013 46 2016 41 93 61 2013 450 2152 40 2153 41 348 2158 40 2002 44 2159 41 58 450 2002 46 2003 614 2159 46 2003 308 2002 46 2004 614 2159 46 2004 
130898,Python,"class MigrationAutodetector:
    """"""
    Take a pair of ProjectStates and compare them to see what the first would
    need doing to make it match the second (the second usually being the
    project's current state).

    Note that this naturally operates on entire projects at a time,
    as it's likely that changes interact (for example, you can't
    add a ForeignKey without having a migration to add the table it
    depends on first). A user interface may offer single-app usage
    if it wishes, with the caveat that it may not always be possible.
    """"""

    def __init__(self, from_state, to_state, questioner=None):
        self.from_state = from_state
        self.to_state = to_state
        self.questioner = questioner or MigrationQuestioner()
        self.existing_apps = {app for app, model in from_state.models}

    def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):
        """"""
        Main entry point to produce a list of applicable changes.
        Take a graph to base names on and an optional set of apps
        to try and restrict to (restriction is not guaranteed)
        """"""
        changes = self._detect_changes(convert_apps, graph)
        changes = self.arrange_for_graph(changes, graph, migration_name)
        if trim_to_apps:
            changes = self._trim_to_apps(changes, trim_to_apps)
        return changes

    def deep_deconstruct(self, obj):
        """"""
        Recursive deconstruction for a field and its arguments.
        Used for full comparison for rename/alter; sometimes a single-level
        deconstruction will not compare correctly.
        """"""
        if isinstance(obj, list):
            return [self.deep_deconstruct(value) for value in obj]
        elif isinstance(obj, tuple):
            return tuple(self.deep_deconstruct(value) for value in obj)
        elif isinstance(obj, dict):
            return {
                key: self.deep_deconstruct(value)
                for key, value in obj.items()
            }
        elif isinstance(obj, functools.partial):
            return (obj.func, self.deep_deconstruct(obj.args), self.deep_deconstruct(obj.keywords))
        elif isinstance(obj, COMPILED_REGEX_TYPE):
            return RegexObject(obj)
        elif isinstance(obj, type):
            # If this is a type that implements 'deconstruct' as an instance method,
            # avoid treating this as being deconstructible itself - see #22951
            return obj
        elif hasattr(obj, 'deconstruct'):
            deconstructed = obj.deconstruct()
            if isinstance(obj, models.Field):
                # we have a field which also returns a name
                deconstructed = deconstructed[1:]
            path, args, kwargs = deconstructed
            return (
                path,
                [self.deep_deconstruct(value) for value in args],
                {
                    key: self.deep_deconstruct(value)
                    for key, value in kwargs.items()
                },
            )
        else:
            return obj

    def only_relation_agnostic_fields(self, fields):
        """"""
        Return a definition of the fields that ignores field names and
        what related fields actually relate to. Used for detecting renames (as
        the related fields change during renames).
        """"""
        fields_def = []
        for name, field in sorted(fields.items()):
            deconstruction = self.deep_deconstruct(field)
            if field.remote_field and field.remote_field.model:
                deconstruction[2].pop('to', None)
            fields_def.append(deconstruction)
        return fields_def

    def _detect_changes(self, convert_apps=None, graph=None):
        """"""
        Return a dict of migration plans which will achieve the
        change from from_state to to_state. The dict has app labels
        as keys and a list of migrations as values.

        The resulting migrations aren't specially named, but the names
        do matter for dependencies inside the set.

        convert_apps is the list of apps to convert to use migrations
        (i.e. to make initial migrations for, in the usual case)

        graph is an optional argument that, if provided, can help improve
        dependency generation and avoid potential circular dependencies.
        """"""
        # The first phase is generating all the operations for each app
        # and gathering them into a big per-app list.
        # Then go through that list, order it, and split into migrations to
        # resolve dependencies caused by M2Ms and FKs.
        self.generated_operations = {}
        self.altered_indexes = {}
        self.altered_constraints = {}

        # Prepare some old/new state and model lists, separating
        # proxy models and ignoring unmigrated apps.
        self.old_model_keys = set()
        self.old_proxy_keys = set()
        self.old_unmanaged_keys = set()
        self.new_model_keys = set()
        self.new_proxy_keys = set()
        self.new_unmanaged_keys = set()
        for (app_label, model_name), model_state in self.from_state.models.items():
            if not model_state.options.get('managed', True):
                self.old_unmanaged_keys.add((app_label, model_name))
            elif app_label not in self.from_state.real_apps:
                if model_state.options.get('proxy'):
                    self.old_proxy_keys.add((app_label, model_name))
                else:
                    self.old_model_keys.add((app_label, model_name))

        for (app_label, model_name), model_state in self.to_state.models.items():
            if not model_state.options.get('managed', True):
                self.new_unmanaged_keys.add((app_label, model_name))
            elif (
                app_label not in self.from_state.real_apps or
                (convert_apps and app_label in convert_apps)
            ):
                if model_state.options.get('proxy'):
                    self.new_proxy_keys.add((app_label, model_name))
                else:
                    self.new_model_keys.add((app_label, model_name))

        self.from_state.resolve_fields_and_relations()
        self.to_state.resolve_fields_and_relations()

        # Renames have to come first
        self.generate_renamed_models()

        # Prepare lists of fields and generate through model map
        self._prepare_field_lists()
        self._generate_through_model_map()

        # Generate non-rename model operations
        self.generate_deleted_models()
        self.generate_created_models()
        self.generate_deleted_proxies()
        self.generate_created_proxies()
        self.generate_altered_options()
        self.generate_altered_managers()

        # Create the altered indexes and store them in self.altered_indexes.
        # This avoids the same computation in generate_removed_indexes()
        # and generate_added_indexes().
        self.create_altered_indexes()
        self.create_altered_constraints()
        # Generate index removal operations before field is removed
        self.generate_removed_constraints()
        self.generate_removed_indexes()
        # Generate field renaming operations.
        self.generate_renamed_fields()
        # Generate removal of foo together.
        self.generate_removed_altered_unique_together()
        self.generate_removed_altered_index_together()
        # Generate field operations.
        self.generate_removed_fields()
        self.generate_added_fields()
        self.generate_altered_fields()
        self.generate_altered_order_with_respect_to()
        self.generate_altered_unique_together()
        self.generate_altered_index_together()
        self.generate_added_indexes()
        self.generate_added_constraints()
        self.generate_altered_db_table()

        self._sort_migrations()
        self._build_migration_list(graph)
        self._optimize_migrations()

        return self.migrations

    def _prepare_field_lists(self):
        """"""
        Prepare field lists and a list of the fields that used through models
        in the old state so dependencies can be made from the through model
        deletion to the field that uses it.
        """"""
        self.kept_model_keys = self.old_model_keys & self.new_model_keys
        self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys
        self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys
        self.through_users = {}
        self.old_field_keys = {
            (app_label, model_name, field_name)
            for app_label, model_name in self.kept_model_keys
            for field_name in self.from_state.models[
                app_label,
                self.renamed_models.get((app_label, model_name), model_name)
            ].fields
        }
        self.new_field_keys = {
            (app_label, model_name, field_name)
            for app_label, model_name in self.kept_model_keys
            for field_name in self.to_state.models[app_label, model_name].fields
        }

    def _generate_through_model_map(self):
        """"""Through model map generation.""""""
        for app_label, model_name in sorted(self.old_model_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            for field_name, field in old_model_state.fields.items():
                if hasattr(field, 'remote_field') and getattr(field.remote_field, 'through', None):
                    through_key = resolve_relation(field.remote_field.through, app_label, model_name)
                    self.through_users[through_key] = (app_label, old_model_name, field_name)

    @staticmethod
    def _resolve_dependency(dependency):
        """"""
        Return the resolved dependency and a boolean denoting whether or not
        it was swappable.
        """"""
        if dependency[0] != '__setting__':
            return dependency, False
        resolved_app_label, resolved_object_name = getattr(settings, dependency[1]).split('.')
        return (resolved_app_label, resolved_object_name.lower()) + dependency[2:], True

    def _build_migration_list(self, graph=None):
        """"""
        Chop the lists of operations up into migrations with dependencies on
        each other. Do this by going through an app's list of operations until
        one is found that has an outgoing dependency that isn't in another
        app's migration yet (hasn't been chopped off its list). Then chop off
        the operations before it into a migration and move onto the next app.
        If the loops completes without doing anything, there's a circular
        dependency (which _should_ be impossible as the operations are
        all split at this point so they can't depend and be depended on).
        """"""
        self.migrations = {}
        num_ops = sum(len(x) for x in self.generated_operations.values())
        chop_mode = False
        while num_ops:
            # On every iteration, we step through all the apps and see if there
            # is a completed set of operations.
            # If we find that a subset of the operations are complete we can
            # try to chop it off from the rest and continue, but we only
            # do this if we've already been through the list once before
            # without any chopping and nothing has changed.
            for app_label in sorted(self.generated_operations):
                chopped = []
                dependencies = set()
                for operation in list(self.generated_operations[app_label]):
                    deps_satisfied = True
                    operation_dependencies = set()
                    for dep in operation._auto_deps:
                        # Temporarily resolve the swappable dependency to
                        # prevent circular references. While keeping the
                        # dependency checks on the resolved model, add the
                        # swappable dependencies.
                        original_dep = dep
                        dep, is_swappable_dep = self._resolve_dependency(dep)
                        if dep[0] != app_label:
                            # External app dependency. See if it's not yet
                            # satisfied.
                            for other_operation in self.generated_operations.get(dep[0], []):
                                if self.check_dependency(other_operation, dep):
                                    deps_satisfied = False
                                    break
                            if not deps_satisfied:
                                break
                            else:
                                if is_swappable_dep:
                                    operation_dependencies.add((original_dep[0], original_dep[1]))
                                elif dep[0] in self.migrations:
                                    operation_dependencies.add((dep[0], self.migrations[dep[0]][-1].name))
                                else:
                                    # If we can't find the other app, we add a first/last dependency,
                                    # but only if we've already been through once and checked everything
                                    if chop_mode:
                                        # If the app already exists, we add a dependency on the last migration,
                                        # as we don't know which migration contains the target field.
                                        # If it's not yet migrated or has no migrations, we use __first__
                                        if graph and graph.leaf_nodes(dep[0]):
                                            operation_dependencies.add(graph.leaf_nodes(dep[0])[0])
                                        else:
                                            operation_dependencies.add((dep[0], ""__first__""))
                                    else:
                                        deps_satisfied = False
                    if deps_satisfied:
                        chopped.append(operation)
                        dependencies.update(operation_dependencies)
                        del self.generated_operations[app_label][0]
                    else:
                        break
                # Make a migration! Well, only if there's stuff to put in it
                if dependencies or chopped:
                    if not self.generated_operations[app_label] or chop_mode:
                        subclass = type(""Migration"", (Migration,), {""operations"": [], ""dependencies"": []})
                        instance = subclass(""auto_%i"" % (len(self.migrations.get(app_label, [])) + 1), app_label)
                        instance.dependencies = list(dependencies)
                        instance.operations = chopped
                        instance.initial = app_label not in self.existing_apps
                        self.migrations.setdefault(app_label, []).append(instance)
                        chop_mode = False
                    else:
                        self.generated_operations[app_label] = chopped + self.generated_operations[app_label]
            new_num_ops = sum(len(x) for x in self.generated_operations.values())
            if new_num_ops == num_ops:
                if not chop_mode:
                    chop_mode = True
                else:
                    raise ValueError(""Cannot resolve operation dependencies: %r"" % self.generated_operations)
            num_ops = new_num_ops

    def _sort_migrations(self):
        """"""
        Reorder to make things possible. Reordering may be needed so FKs work
        nicely inside the same app.
        """"""
        for app_label, ops in sorted(self.generated_operations.items()):
            # construct a dependency graph for intra-app dependencies
            dependency_graph = {op: set() for op in ops}
            for op in ops:
                for dep in op._auto_deps:
                    # Resolve intra-app dependencies to handle circular
                    # references involving a swappable model.
                    dep = self._resolve_dependency(dep)[0]
                    if dep[0] == app_label:
                        for op2 in ops:
                            if self.check_dependency(op2, dep):
                                dependency_graph[op].add(op2)

            # we use a stable sort for deterministic tests & general behavior
            self.generated_operations[app_label] = stable_topological_sort(ops, dependency_graph)

    def _optimize_migrations(self):
        # Add in internal dependencies among the migrations
        for app_label, migrations in self.migrations.items():
            for m1, m2 in zip(migrations, migrations[1:]):
                m2.dependencies.append((app_label, m1.name))

        # De-dupe dependencies
        for migrations in self.migrations.values():
            for migration in migrations:
                migration.dependencies = list(set(migration.dependencies))

        # Optimize migrations
        for app_label, migrations in self.migrations.items():
            for migration in migrations:
                migration.operations = MigrationOptimizer().optimize(migration.operations, app_label)

    def check_dependency(self, operation, dependency):
        """"""
        Return True if the given operation depends on the given dependency,
        False otherwise.
        """"""
        # Created model
        if dependency[2] is None and dependency[3] is True:
            return (
                isinstance(operation, operations.CreateModel) and
                operation.name_lower == dependency[1].lower()
            )
        # Created field
        elif dependency[2] is not None and dependency[3] is True:
            return (
                (
                    isinstance(operation, operations.CreateModel) and
                    operation.name_lower == dependency[1].lower() and
                    any(dependency[2] == x for x, y in operation.fields)
                ) or
                (
                    isinstance(operation, operations.AddField) and
                    operation.model_name_lower == dependency[1].lower() and
                    operation.name_lower == dependency[2].lower()
                )
            )
        # Removed field
        elif dependency[2] is not None and dependency[3] is False:
            return (
                isinstance(operation, operations.RemoveField) and
                operation.model_name_lower == dependency[1].lower() and
                operation.name_lower == dependency[2].lower()
            )
        # Removed model
        elif dependency[2] is None and dependency[3] is False:
            return (
                isinstance(operation, operations.DeleteModel) and
                operation.name_lower == dependency[1].lower()
            )
        # Field being altered
        elif dependency[2] is not None and dependency[3] == ""alter"":
            return (
                isinstance(operation, operations.AlterField) and
                operation.model_name_lower == dependency[1].lower() and
                operation.name_lower == dependency[2].lower()
            )
        # order_with_respect_to being unset for a field
        elif dependency[2] is not None and dependency[3] == ""order_wrt_unset"":
            return (
                isinstance(operation, operations.AlterOrderWithRespectTo) and
                operation.name_lower == dependency[1].lower() and
                (operation.order_with_respect_to or """").lower() != dependency[2].lower()
            )
        # Field is removed and part of an index/unique_together
        elif dependency[2] is not None and dependency[3] == ""foo_together_change"":
            return (
                isinstance(operation, (operations.AlterUniqueTogether,
                                       operations.AlterIndexTogether)) and
                operation.name_lower == dependency[1].lower()
            )
        # Unknown dependency. Raise an error.
        else:
            raise ValueError(""Can't handle dependency %r"" % (dependency,))

    def add_operation(self, app_label, operation, dependencies=None, beginning=False):
        # Dependencies are (app_label, model_name, field_name, create/delete as True/False)
        operation._auto_deps = dependencies or []
        if beginning:
            self.generated_operations.setdefault(app_label, []).insert(0, operation)
        else:
            self.generated_operations.setdefault(app_label, []).append(operation)

    def swappable_first_key(self, item):
        """"""
        Place potential swappable models first in lists of created models (only
        real way to solve #22783).
        """"""
        try:
            model_state = self.to_state.models[item]
            base_names = {
                base if isinstance(base, str) else base.__name__
                for base in model_state.bases
            }
            string_version = ""%s.%s"" % (item[0], item[1])
            if (
                model_state.options.get('swappable') or
                ""AbstractUser"" in base_names or
                ""AbstractBaseUser"" in base_names or
                settings.AUTH_USER_MODEL.lower() == string_version.lower()
            ):
                return (""___"" + item[0], ""___"" + item[1])
        except LookupError:
            pass
        return item

    def generate_renamed_models(self):
        """"""
        Find any renamed models, generate the operations for them, and remove
        the old entry from the model lists. Must be run before other
        model-level generation.
        """"""
        self.renamed_models = {}
        self.renamed_models_rel = {}
        added_models = self.new_model_keys - self.old_model_keys
        for app_label, model_name in sorted(added_models):
            model_state = self.to_state.models[app_label, model_name]
            model_fields_def = self.only_relation_agnostic_fields(model_state.fields)

            removed_models = self.old_model_keys - self.new_model_keys
            for rem_app_label, rem_model_name in removed_models:
                if rem_app_label == app_label:
                    rem_model_state = self.from_state.models[rem_app_label, rem_model_name]
                    rem_model_fields_def = self.only_relation_agnostic_fields(rem_model_state.fields)
                    if model_fields_def == rem_model_fields_def:
                        if self.questioner.ask_rename_model(rem_model_state, model_state):
                            dependencies = []
                            fields = list(model_state.fields.values()) + [
                                field.remote_field
                                for relations in self.to_state.relations[app_label, model_name].values()
                                for field in relations.values()
                            ]
                            for field in fields:
                                if field.is_relation:
                                    dependencies.extend(
                                        self._get_dependencies_for_foreign_key(
                                            app_label, model_name, field, self.to_state,
                                        )
                                    )
                            self.add_operation(
                                app_label,
                                operations.RenameModel(
                                    old_name=rem_model_state.name,
                                    new_name=model_state.name,
                                ),
                                dependencies=dependencies,
                            )
                            self.renamed_models[app_label, model_name] = rem_model_name
                            renamed_models_rel_key = '%s.%s' % (
                                rem_model_state.app_label,
                                rem_model_state.name_lower,
                            )
                            self.renamed_models_rel[renamed_models_rel_key] = '%s.%s' % (
                                model_state.app_label,
                                model_state.name_lower,
                            )
                            self.old_model_keys.remove((rem_app_label, rem_model_name))
                            self.old_model_keys.add((app_label, model_name))
                            break

    def generate_created_models(self):
        """"""
        Find all new models (both managed and unmanaged) and make create
        operations for them as well as separate operations to create any
        foreign key or M2M relationships (these are optimized later, if
        possible).

        Defer any model options that refer to collections of fields that might
        be deferred (e.g. unique_together, index_together).
        """"""
        old_keys = self.old_model_keys | self.old_unmanaged_keys
        added_models = self.new_model_keys - old_keys
        added_unmanaged_models = self.new_unmanaged_keys - old_keys
        all_added_models = chain(
            sorted(added_models, key=self.swappable_first_key, reverse=True),
            sorted(added_unmanaged_models, key=self.swappable_first_key, reverse=True)
        )
        for app_label, model_name in all_added_models:
            model_state = self.to_state.models[app_label, model_name]
            # Gather related fields
            related_fields = {}
            primary_key_rel = None
            for field_name, field in model_state.fields.items():
                if field.remote_field:
                    if field.remote_field.model:
                        if field.primary_key:
                            primary_key_rel = field.remote_field.model
                        elif not field.remote_field.parent_link:
                            related_fields[field_name] = field
                    if getattr(field.remote_field, 'through', None):
                        related_fields[field_name] = field

            # Are there indexes/unique|index_together to defer?
            indexes = model_state.options.pop('indexes')
            constraints = model_state.options.pop('constraints')
            unique_together = model_state.options.pop('unique_together', None)
            index_together = model_state.options.pop('index_together', None)
            order_with_respect_to = model_state.options.pop('order_with_respect_to', None)
            # Depend on the deletion of any possible proxy version of us
            dependencies = [
                (app_label, model_name, None, False),
            ]
            # Depend on all bases
            for base in model_state.bases:
                if isinstance(base, str) and ""."" in base:
                    base_app_label, base_name = base.split(""."", 1)
                    dependencies.append((base_app_label, base_name, None, True))
                    # Depend on the removal of base fields if the new model has
                    # a field with the same name.
                    old_base_model_state = self.from_state.models.get((base_app_label, base_name))
                    new_base_model_state = self.to_state.models.get((base_app_label, base_name))
                    if old_base_model_state and new_base_model_state:
                        removed_base_fields = set(old_base_model_state.fields).difference(
                            new_base_model_state.fields,
                        ).intersection(model_state.fields)
                        for removed_base_field in removed_base_fields:
                            dependencies.append((base_app_label, base_name, removed_base_field, False))
            # Depend on the other end of the primary key if it's a relation
            if primary_key_rel:
                dependencies.append(
                    resolve_relation(
                        primary_key_rel, app_label, model_name,
                    ) + (None, True)
                )
            # Generate creation operation
            self.add_operation(
                app_label,
                operations.CreateModel(
                    name=model_state.name,
                    fields=[d for d in model_state.fields.items() if d[0] not in related_fields],
                    options=model_state.options,
                    bases=model_state.bases,
                    managers=model_state.managers,
                ),
                dependencies=dependencies,
                beginning=True,
            )

            # Don't add operations which modify the database for unmanaged models
            if not model_state.options.get('managed', True):
                continue

            # Generate operations for each related field
            for name, field in sorted(related_fields.items()):
                dependencies = self._get_dependencies_for_foreign_key(
                    app_label, model_name, field, self.to_state,
                )
                # Depend on our own model being created
                dependencies.append((app_label, model_name, None, True))
                # Make operation
                self.add_operation(
                    app_label,
                    operations.AddField(
                        model_name=model_name,
                        name=name,
                        field=field,
                    ),
                    dependencies=list(set(dependencies)),
                )
            # Generate other opns
            if order_with_respect_to:
                self.add_operation(
                    app_label,
                    operations.AlterOrderWithRespectTo(
                        name=model_name,
                        order_with_respect_to=order_with_respect_to,
                    ),
                    dependencies=[
                        (app_label, model_name, order_with_respect_to, True),
                        (app_label, model_name, None, True),
                    ]
                )
            related_dependencies = [
                (app_label, model_name, name, True)
                for name in sorted(related_fields)
            ]
            related_dependencies.append((app_label, model_name, None, True))
            for index in indexes:
                self.add_operation(
                    app_label,
                    operations.AddIndex(
                        model_name=model_name,
                        index=index,
                    ),
                    dependencies=related_dependencies,
                )
            for constraint in constraints:
                self.add_operation(
                    app_label,
                    operations.AddConstraint(
                        model_name=model_name,
                        constraint=constraint,
                    ),
                    dependencies=related_dependencies,
                )
            if unique_together:
                self.add_operation(
                    app_label,
                    operations.AlterUniqueTogether(
                        name=model_name,
                        unique_together=unique_together,
                    ),
                    dependencies=related_dependencies
                )
            if index_together:
                self.add_operation(
                    app_label,
                    operations.AlterIndexTogether(
                        name=model_name,
                        index_together=index_together,
                    ),
                    dependencies=related_dependencies
                )
            # Fix relationships if the model changed from a proxy model to a
            # concrete model.
            relations = self.to_state.relations
            if (app_label, model_name) in self.old_proxy_keys:
                for related_model_key, related_fields in relations[app_label, model_name].items():
                    related_model_state = self.to_state.models[related_model_key]
                    for related_field_name, related_field in related_fields.items():
                        self.add_operation(
                            related_model_state.app_label,
                            operations.AlterField(
                                model_name=related_model_state.name,
                                name=related_field_name,
                                field=related_field,
                            ),
                            dependencies=[(app_label, model_name, None, True)],
                        )

    def generate_created_proxies(self):
        """"""
        Make CreateModel statements for proxy models. Use the same statements
        as that way there's less code duplication, but for proxy models it's
        safe to skip all the pointless field stuff and chuck out an operation.
        """"""
        added = self.new_proxy_keys - self.old_proxy_keys
        for app_label, model_name in sorted(added):
            model_state = self.to_state.models[app_label, model_name]
            assert model_state.options.get(""proxy"")
            # Depend on the deletion of any possible non-proxy version of us
            dependencies = [
                (app_label, model_name, None, False),
            ]
            # Depend on all bases
            for base in model_state.bases:
                if isinstance(base, str) and ""."" in base:
                    base_app_label, base_name = base.split(""."", 1)
                    dependencies.append((base_app_label, base_name, None, True))
            # Generate creation operation
            self.add_operation(
                app_label,
                operations.CreateModel(
                    name=model_state.name,
                    fields=[],
                    options=model_state.options,
                    bases=model_state.bases,
                    managers=model_state.managers,
                ),
                # Depend on the deletion of any possible non-proxy version of us
                dependencies=dependencies,
            )

    def generate_deleted_models(self):
        """"""
        Find all deleted models (managed and unmanaged) and make delete
        operations for them as well as separate operations to delete any
        foreign key or M2M relationships (these are optimized later, if
        possible).

        Also bring forward removal of any model options that refer to
        collections of fields - the inverse of generate_created_models().
        """"""
        new_keys = self.new_model_keys | self.new_unmanaged_keys
        deleted_models = self.old_model_keys - new_keys
        deleted_unmanaged_models = self.old_unmanaged_keys - new_keys
        all_deleted_models = chain(sorted(deleted_models), sorted(deleted_unmanaged_models))
        for app_label, model_name in all_deleted_models:
            model_state = self.from_state.models[app_label, model_name]
            # Gather related fields
            related_fields = {}
            for field_name, field in model_state.fields.items():
                if field.remote_field:
                    if field.remote_field.model:
                        related_fields[field_name] = field
                    if getattr(field.remote_field, 'through', None):
                        related_fields[field_name] = field
            # Generate option removal first
            unique_together = model_state.options.pop('unique_together', None)
            index_together = model_state.options.pop('index_together', None)
            if unique_together:
                self.add_operation(
                    app_label,
                    operations.AlterUniqueTogether(
                        name=model_name,
                        unique_together=None,
                    )
                )
            if index_together:
                self.add_operation(
                    app_label,
                    operations.AlterIndexTogether(
                        name=model_name,
                        index_together=None,
                    )
                )
            # Then remove each related field
            for name in sorted(related_fields):
                self.add_operation(
                    app_label,
                    operations.RemoveField(
                        model_name=model_name,
                        name=name,
                    )
                )
            # Finally, remove the model.
            # This depends on both the removal/alteration of all incoming fields
            # and the removal of all its own related fields, and if it's
            # a through model the field that references it.
            dependencies = []
            relations = self.from_state.relations
            for (related_object_app_label, object_name), relation_related_fields in (
                relations[app_label, model_name].items()
            ):
                for field_name, field in relation_related_fields.items():
                    dependencies.append(
                        (related_object_app_label, object_name, field_name, False),
                    )
                    if not field.many_to_many:
                        dependencies.append(
                            (related_object_app_label, object_name, field_name, 'alter'),
                        )

            for name in sorted(related_fields):
                dependencies.append((app_label, model_name, name, False))
            # We're referenced in another field's through=
            through_user = self.through_users.get((app_label, model_state.name_lower))
            if through_user:
                dependencies.append((through_user[0], through_user[1], through_user[2], False))
            # Finally, make the operation, deduping any dependencies
            self.add_operation(
                app_label,
                operations.DeleteModel(
                    name=model_state.name,
                ),
                dependencies=list(set(dependencies)),
            )

    def generate_deleted_proxies(self):
        """"""Make DeleteModel options for proxy models.""""""
        deleted = self.old_proxy_keys - self.new_proxy_keys
        for app_label, model_name in sorted(deleted):
            model_state = self.from_state.models[app_label, model_name]
            assert model_state.options.get(""proxy"")
            self.add_operation(
                app_label,
                operations.DeleteModel(
                    name=model_state.name,
                ),
            )

    def generate_renamed_fields(self):
        """"""Work out renamed fields.""""""
        self.renamed_fields = {}
        for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, old_model_name]
            field = new_model_state.get_field(field_name)
            # Scan to see if this is actually a rename!
            field_dec = self.deep_deconstruct(field)
            for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):
                if rem_app_label == app_label and rem_model_name == model_name:
                    old_field = old_model_state.get_field(rem_field_name)
                    old_field_dec = self.deep_deconstruct(old_field)
                    if field.remote_field and field.remote_field.model and 'to' in old_field_dec[2]:
                        old_rel_to = old_field_dec[2]['to']
                        if old_rel_to in self.renamed_models_rel:
                            old_field_dec[2]['to'] = self.renamed_models_rel[old_rel_to]
                    old_field.set_attributes_from_name(rem_field_name)
                    old_db_column = old_field.get_attname_column()[1]
                    if (old_field_dec == field_dec or (
                            # Was the field renamed and db_column equal to the
                            # old field's column added?
                            old_field_dec[0:2] == field_dec[0:2] and
                            dict(old_field_dec[2], db_column=old_db_column) == field_dec[2])):
                        if self.questioner.ask_rename(model_name, rem_field_name, field_name, field):
                            # A db_column mismatch requires a prior noop
                            # AlterField for the subsequent RenameField to be a
                            # noop on attempts at preserving the old name.
                            if old_field.db_column != field.db_column:
                                altered_field = field.clone()
                                altered_field.name = rem_field_name
                                self.add_operation(
                                    app_label,
                                    operations.AlterField(
                                        model_name=model_name,
                                        name=rem_field_name,
                                        field=altered_field,
                                    ),
                                )
                            self.add_operation(
                                app_label,
                                operations.RenameField(
                                    model_name=model_name,
                                    old_name=rem_field_name,
                                    new_name=field_name,
                                )
                            )
                            self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))
                            self.old_field_keys.add((app_label, model_name, field_name))
                            self.renamed_fields[app_label, model_name, field_name] = rem_field_name
                            break

    def generate_added_fields(self):
        """"""Make AddField operations.""""""
        for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
            self._generate_added_field(app_label, model_name, field_name)

    def _generate_added_field(self, app_label, model_name, field_name):
        field = self.to_state.models[app_label, model_name].get_field(field_name)
        # Fields that are foreignkeys/m2ms depend on stuff
        dependencies = []
        if field.remote_field and field.remote_field.model:
            dependencies.extend(self._get_dependencies_for_foreign_key(
                app_label, model_name, field, self.to_state,
            ))
        # You can't just add NOT NULL fields with no default or fields
        # which don't allow empty strings as default.
        time_fields = (models.DateField, models.DateTimeField, models.TimeField)
        preserve_default = (
            field.null or field.has_default() or field.many_to_many or
            (field.blank and field.empty_strings_allowed) or
            (isinstance(field, time_fields) and field.auto_now)
        )
        if not preserve_default:
            field = field.clone()
            if isinstance(field, time_fields) and field.auto_now_add:
                field.default = self.questioner.ask_auto_now_add_addition(field_name, model_name)
            else:
                field.default = self.questioner.ask_not_null_addition(field_name, model_name)
        if (
            field.unique and
            field.default is not models.NOT_PROVIDED and
            callable(field.default)
        ):
            self.questioner.ask_unique_callable_default_addition(field_name, model_name)
        self.add_operation(
            app_label,
            operations.AddField(
                model_name=model_name,
                name=field_name,
                field=field,
                preserve_default=preserve_default,
            ),
            dependencies=dependencies,
        )

    def generate_removed_fields(self):
        """"""Make RemoveField operations.""""""
        for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys):
            self._generate_removed_field(app_label, model_name, field_name)

    def _generate_removed_field(self, app_label, model_name, field_name):
        self.add_operation(
            app_label,
            operations.RemoveField(
                model_name=model_name,
                name=field_name,
            ),
            # We might need to depend on the removal of an
            # order_with_respect_to or index/unique_together operation;
            # this is safely ignored if there isn't one
            dependencies=[
                (app_label, model_name, field_name, ""order_wrt_unset""),
                (app_label, model_name, field_name, ""foo_together_change""),
            ],
        )

    def generate_altered_fields(self):
        """"""
        Make AlterField operations, or possibly RemovedField/AddField if alter
        isn't possible.
        """"""
        for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):
            # Did the field change?
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_field_name = self.renamed_fields.get((app_label, model_name, field_name), field_name)
            old_field = self.from_state.models[app_label, old_model_name].get_field(old_field_name)
            new_field = self.to_state.models[app_label, model_name].get_field(field_name)
            dependencies = []
            # Implement any model renames on relations; these are handled by RenameModel
            # so we need to exclude them from the comparison
            if hasattr(new_field, ""remote_field"") and getattr(new_field.remote_field, ""model"", None):
                rename_key = resolve_relation(new_field.remote_field.model, app_label, model_name)
                if rename_key in self.renamed_models:
                    new_field.remote_field.model = old_field.remote_field.model
                # Handle ForeignKey which can only have a single to_field.
                remote_field_name = getattr(new_field.remote_field, 'field_name', None)
                if remote_field_name:
                    to_field_rename_key = rename_key + (remote_field_name,)
                    if to_field_rename_key in self.renamed_fields:
                        # Repoint both model and field name because to_field
                        # inclusion in ForeignKey.deconstruct() is based on
                        # both.
                        new_field.remote_field.model = old_field.remote_field.model
                        new_field.remote_field.field_name = old_field.remote_field.field_name
                # Handle ForeignObjects which can have multiple from_fields/to_fields.
                from_fields = getattr(new_field, 'from_fields', None)
                if from_fields:
                    from_rename_key = (app_label, model_name)
                    new_field.from_fields = tuple([
                        self.renamed_fields.get(from_rename_key + (from_field,), from_field)
                        for from_field in from_fields
                    ])
                    new_field.to_fields = tuple([
                        self.renamed_fields.get(rename_key + (to_field,), to_field)
                        for to_field in new_field.to_fields
                    ])
                dependencies.extend(self._get_dependencies_for_foreign_key(
                    app_label, model_name, new_field, self.to_state,
                ))
            if (
                hasattr(new_field, 'remote_field') and
                getattr(new_field.remote_field, 'through', None)
            ):
                rename_key = resolve_relation(new_field.remote_field.through, app_label, model_name)
                if rename_key in self.renamed_models:
                    new_field.remote_field.through = old_field.remote_field.through
            old_field_dec = self.deep_deconstruct(old_field)
            new_field_dec = self.deep_deconstruct(new_field)
            # If the field was confirmed to be renamed it means that only
            # db_column was allowed to change which generate_renamed_fields()
            # already accounts for by adding an AlterField operation.
            if old_field_dec != new_field_dec and old_field_name == field_name:
                both_m2m = old_field.many_to_many and new_field.many_to_many
                neither_m2m = not old_field.many_to_many and not new_field.many_to_many
                if both_m2m or neither_m2m:
                    # Either both fields are m2m or neither is
                    preserve_default = True
                    if (old_field.null and not new_field.null and not new_field.has_default() and
                            not new_field.many_to_many):
                        field = new_field.clone()
                        new_default = self.questioner.ask_not_null_alteration(field_name, model_name)
                        if new_default is not models.NOT_PROVIDED:
                            field.default = new_default
                            preserve_default = False
                    else:
                        field = new_field
                    self.add_operation(
                        app_label,
                        operations.AlterField(
                            model_name=model_name,
                            name=field_name,
                            field=field,
                            preserve_default=preserve_default,
                        ),
                        dependencies=dependencies,
                    )
                else:
                    # We cannot alter between m2m and concrete fields
                    self._generate_removed_field(app_label, model_name, field_name)
                    self._generate_added_field(app_label, model_name, field_name)

    def create_altered_indexes(self):
        option_name = operations.AddIndex.option_name
        for app_label, model_name in sorted(self.kept_model_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]

            old_indexes = old_model_state.options[option_name]
            new_indexes = new_model_state.options[option_name]
            add_idx = [idx for idx in new_indexes if idx not in old_indexes]
            rem_idx = [idx for idx in old_indexes if idx not in new_indexes]

            self.altered_indexes.update({
                (app_label, model_name): {
                    'added_indexes': add_idx, 'removed_indexes': rem_idx,
                }
            })

    def generate_added_indexes(self):
        for (app_label, model_name), alt_indexes in self.altered_indexes.items():
            for index in alt_indexes['added_indexes']:
                self.add_operation(
                    app_label,
                    operations.AddIndex(
                        model_name=model_name,
                        index=index,
                    )
                )

    def generate_removed_indexes(self):
        for (app_label, model_name), alt_indexes in self.altered_indexes.items():
            for index in alt_indexes['removed_indexes']:
                self.add_operation(
                    app_label,
                    operations.RemoveIndex(
                        model_name=model_name,
                        name=index.name,
                    )
                )

    def create_altered_constraints(self):
        option_name = operations.AddConstraint.option_name
        for app_label, model_name in sorted(self.kept_model_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]

            old_constraints = old_model_state.options[option_name]
            new_constraints = new_model_state.options[option_name]
            add_constraints = [c for c in new_constraints if c not in old_constraints]
            rem_constraints = [c for c in old_constraints if c not in new_constraints]

            self.altered_constraints.update({
                (app_label, model_name): {
                    'added_constraints': add_constraints, 'removed_constraints': rem_constraints,
                }
            })

    def generate_added_constraints(self):
        for (app_label, model_name), alt_constraints in self.altered_constraints.items():
            for constraint in alt_constraints['added_constraints']:
                self.add_operation(
                    app_label,
                    operations.AddConstraint(
                        model_name=model_name,
                        constraint=constraint,
                    )
                )

    def generate_removed_constraints(self):
        for (app_label, model_name), alt_constraints in self.altered_constraints.items():
            for constraint in alt_constraints['removed_constraints']:
                self.add_operation(
                    app_label,
                    operations.RemoveConstraint(
                        model_name=model_name,
                        name=constraint.name,
                    )
                )

    @staticmethod
    def _get_dependencies_for_foreign_key(app_label, model_name, field, project_state):
        remote_field_model = None
        if hasattr(field.remote_field, 'model'):
            remote_field_model = field.remote_field.model
        else:
            relations = project_state.relations[app_label, model_name]
            for (remote_app_label, remote_model_name), fields in relations.items():
                if any(
                    field == related_field.remote_field
                    for related_field in fields.values()
                ):
                    remote_field_model = f'{remote_app_label}.{remote_model_name}'
                    break
        # Account for FKs to swappable models
        swappable_setting = getattr(field, 'swappable_setting', None)
        if swappable_setting is not None:
            dep_app_label = ""__setting__""
            dep_object_name = swappable_setting
        else:
            dep_app_label, dep_object_name = resolve_relation(
                remote_field_model, app_label, model_name,
            )
        dependencies = [(dep_app_label, dep_object_name, None, True)]
        if getattr(field.remote_field, 'through', None):
            through_app_label, through_object_name = resolve_relation(
                remote_field_model, app_label, model_name,
            )
            dependencies.append((through_app_label, through_object_name, None, True))
        return dependencies

    def _get_altered_foo_together_operations(self, option_name):
        for app_label, model_name in sorted(self.kept_model_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]

            # We run the old version through the field renames to account for those
            old_value = old_model_state.options.get(option_name)
            old_value = {
                tuple(
                    self.renamed_fields.get((app_label, model_name, n), n)
                    for n in unique
                )
                for unique in old_value
            } if old_value else set()

            new_value = new_model_state.options.get(option_name)
            new_value = set(new_value) if new_value else set()

            if old_value != new_value:
                dependencies = []
                for foo_togethers in new_value:
                    for field_name in foo_togethers:
                        field = new_model_state.get_field(field_name)
                        if field.remote_field and field.remote_field.model:
                            dependencies.extend(self._get_dependencies_for_foreign_key(
                                app_label, model_name, field, self.to_state,
                            ))
                yield (
                    old_value,
                    new_value,
                    app_label,
                    model_name,
                    dependencies,
                )

    def _generate_removed_altered_foo_together(self, operation):
        for (
            old_value,
            new_value,
            app_label,
            model_name,
            dependencies,
        ) in self._get_altered_foo_together_operations(operation.option_name):
            removal_value = new_value.intersection(old_value)
            if removal_value or old_value:
                self.add_operation(
                    app_label,
                    operation(name=model_name, **{operation.option_name: removal_value}),
                    dependencies=dependencies,
                )

    def generate_removed_altered_unique_together(self):
        self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)

    def generate_removed_altered_index_together(self):
        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)

    def _generate_altered_foo_together(self, operation):
        for (
            old_value,
            new_value,
            app_label,
            model_name,
            dependencies,
        ) in self._get_altered_foo_together_operations(operation.option_name):
            removal_value = new_value.intersection(old_value)
            if new_value != removal_value:
                self.add_operation(
                    app_label,
                    operation(name=model_name, **{operation.option_name: new_value}),
                    dependencies=dependencies,
                )

    def generate_altered_unique_together(self):
        self._generate_altered_foo_together(operations.AlterUniqueTogether)

    def generate_altered_index_together(self):
        self._generate_altered_foo_together(operations.AlterIndexTogether)

    def generate_altered_db_table(self):
        models_to_check = self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys)
        for app_label, model_name in sorted(models_to_check):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]
            old_db_table_name = old_model_state.options.get('db_table')
            new_db_table_name = new_model_state.options.get('db_table')
            if old_db_table_name != new_db_table_name:
                self.add_operation(
                    app_label,
                    operations.AlterModelTable(
                        name=model_name,
                        table=new_db_table_name,
                    )
                )

    def generate_altered_options(self):
        """"""
        Work out if any non-schema-affecting options have changed and make an
        operation to represent them in state changes (in case Python code in
        migrations needs them).
        """"""
        models_to_check = self.kept_model_keys.union(
            self.kept_proxy_keys,
            self.kept_unmanaged_keys,
            # unmanaged converted to managed
            self.old_unmanaged_keys & self.new_model_keys,
            # managed converted to unmanaged
            self.old_model_keys & self.new_unmanaged_keys,
        )

        for app_label, model_name in sorted(models_to_check):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]
            old_options = {
                key: value for key, value in old_model_state.options.items()
                if key in AlterModelOptions.ALTER_OPTION_KEYS
            }
            new_options = {
                key: value for key, value in new_model_state.options.items()
                if key in AlterModelOptions.ALTER_OPTION_KEYS
            }
            if old_options != new_options:
                self.add_operation(
                    app_label,
                    operations.AlterModelOptions(
                        name=model_name,
                        options=new_options,
                    )
                )

    def generate_altered_order_with_respect_to(self):
        for app_label, model_name in sorted(self.kept_model_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]
            if (old_model_state.options.get(""order_with_respect_to"") !=
                    new_model_state.options.get(""order_with_respect_to"")):
                # Make sure it comes second if we're adding
                # (removal dependency is part of RemoveField)
                dependencies = []
                if new_model_state.options.get(""order_with_respect_to""):
                    dependencies.append((
                        app_label,
                        model_name,
                        new_model_state.options[""order_with_respect_to""],
                        True,
                    ))
                # Actually generate the operation
                self.add_operation(
                    app_label,
                    operations.AlterOrderWithRespectTo(
                        name=model_name,
                        order_with_respect_to=new_model_state.options.get('order_with_respect_to'),
                    ),
                    dependencies=dependencies,
                )

    def generate_altered_managers(self):
        for app_label, model_name in sorted(self.kept_model_keys):
            old_model_name = self.renamed_models.get((app_label, model_name), model_name)
            old_model_state = self.from_state.models[app_label, old_model_name]
            new_model_state = self.to_state.models[app_label, model_name]
            if old_model_state.managers != new_model_state.managers:
                self.add_operation(
                    app_label,
                    operations.AlterModelManagers(
                        name=model_name,
                        managers=new_model_state.managers,
                    )
                )

    def arrange_for_graph(self, changes, graph, migration_name=None):
        """"""
        Take a result from changes() and a MigrationGraph, and fix the names
        and dependencies of the changes so they extend the graph from the leaf
        nodes for each app.
        """"""
        leaves = graph.leaf_nodes()
        name_map = {}
        for app_label, migrations in list(changes.items()):
            if not migrations:
                continue
            # Find the app label's current leaf node
            app_leaf = None
            for leaf in leaves:
                if leaf[0] == app_label:
                    app_leaf = leaf
                    break
            # Do they want an initial migration for this app?
            if app_leaf is None and not self.questioner.ask_initial(app_label):
                # They don't.
                for migration in migrations:
                    name_map[(app_label, migration.name)] = (app_label, ""__first__"")
                del changes[app_label]
                continue
            # Work out the next number in the sequence
            if app_leaf is None:
                next_number = 1
            else:
                next_number = (self.parse_number(app_leaf[1]) or 0) + 1
            # Name each migration
            for i, migration in enumerate(migrations):
                if i == 0 and app_leaf:
                    migration.dependencies.append(app_leaf)
                new_name_parts = ['%04i' % next_number]
                if migration_name:
                    new_name_parts.append(migration_name)
                elif i == 0 and not app_leaf:
                    new_name_parts.append('initial')
                else:
                    new_name_parts.append(migration.suggest_name()[:100])
                new_name = '_'.join(new_name_parts)
                name_map[(app_label, migration.name)] = (app_label, new_name)
                next_number += 1
                migration.name = new_name
        # Now fix dependencies
        for migrations in changes.values():
            for migration in migrations:
                migration.dependencies = [name_map.get(d, d) for d in migration.dependencies]
        return changes

    def _trim_to_apps(self, changes, app_labels):
        """"""
        Take changes from arrange_for_graph() and set of app labels, and return
        a modified set of changes which trims out as many migrations that are
        not in app_labels as possible. Note that some other migrations may
        still be present as they may be required dependencies.
        """"""
        # Gather other app dependencies in a first pass
        app_dependencies = {}
        for app_label, migrations in changes.items():
            for migration in migrations:
                for dep_app_label, name in migration.dependencies:
                    app_dependencies.setdefault(app_label, set()).add(dep_app_label)
        required_apps = set(app_labels)
        # Keep resolving till there's no change
        old_required_apps = None
        while old_required_apps != required_apps:
            old_required_apps = set(required_apps)
            required_apps.update(*[app_dependencies.get(app_label, ()) for app_label in required_apps])
        # Remove all migrations that aren't needed
        for app_label in list(changes):
            if app_label not in required_apps:
                del changes[app_label]
        return changes

    @classmethod
    def parse_number(cls, name):
        """"""
        Given a migration name, try to extract a number from the beginning of
        it. For a squashed migration such as '0001_squashed_0004…', return the
        second number. If no number is found, return None.
        """"""
        if squashed_match := re.search(r'.*_squashed_(\d+)', name):
            return int(squashed_match[1])
        match = re.match(r'^\d+', name)
        if match:
            return int(match[0])
        return None",1,334 2000 58 648 348 2001 40 2002 44 2003 44 2004 44 2005 61 303 41 58 2002 46 2003 61 2003 2002 46 2004 61 2004 2002 46 2005 61 2005 428 2006 40 41 2002 46 2007 61 123 2008 385 2008 44 2009 398 2003 46 2010 125 348 2011 40 2002 44 2012 44 2013 61 303 44 2014 61 303 44 2015 61 303 41 58 648 2011 61 2002 46 2016 40 2014 44 2012 41 2011 61 2002 46 2017 40 2011 44 2012 44 2015 41 392 2013 58 2011 61 2002 46 2018 40 2011 44 2013 41 450 2011 348 2019 40 2002 44 2020 41 58 648 392 2021 40 2020 44 411 41 58 450 91 2002 46 2019 40 2022 41 385 2022 398 2020 93 359 2021 40 2020 44 2023 41 58 450 2023 40 2002 46 2019 40 2022 41 385 2022 398 2020 41 359 2021 40 2020 44 2024 41 58 450 123 2025 58 2002 46 2019 40 2022 41 385 2025 44 2022 398 2020 46 2026 40 41 125 359 2021 40 2020 44 2027 46 2028 41 58 450 40 2020 46 2029 44 2002 46 2019 40 2020 46 2030 41 44 2002 46 2019 40 2020 46 2031 41 41 359 2021 40 2020 44 2032 41 58 450 2033 40 2020 41 359 2021 40 2020 44 2034 41 58 621 621 450 2020 359 2035 40 2020 44 648 41 58 2036 61 2020 46 2037 40 41 392 2021 40 2020 44 2010 46 2038 41 58 621 2036 61 2036 91 1501 58 93 2039 44 2030 44 2040 61 2036 450 40 2039 44 91 2002 46 2019 40 2022 41 385 2022 398 2030 93 44 123 2025 58 2002 46 2019 40 2022 41 385 2025 44 2022 398 2040 46 2026 40 41 125 44 41 360 58 450 2020 348 2041 40 2002 44 2042 41 58 648 2043 61 91 93 385 2044 44 2045 398 2046 40 2042 46 2026 40 41 41 58 2047 61 2002 46 2019 40 2045 41 392 2045 46 2048 308 2045 46 2048 46 2009 58 2047 91 1502 93 46 2049 40 648 44 303 41 2043 46 2050 40 2047 41 450 2043 348 2016 40 2002 44 2014 61 303 44 2012 61 303 41 58 648 621 621 621 621 2002 46 2051 61 123 125 2002 46 2052 61 123 125 2002 46 2053 61 123 125 621 621 2002 46 2054 61 2055 40 41 2002 46 2056 61 2055 40 41 2002 46 2057 61 2055 40 41 2002 46 2058 61 2055 40 41 2002 46 2059 61 2055 40 41 2002 46 2060 61 2055 40 41 385 40 2061 44 2062 41 44 2063 398 2002 46 2003 46 2010 46 2026 40 41 58 392 422 2063 46 2064 46 2065 40 648 44 304 41 58 2002 46 2057 46 2066 40 40 2061 44 2062 41 41 359 2061 422 398 2002 46 2003 46 2067 58 392 2063 46 2064 46 2065 40 648 41 58 2002 46 2056 46 2066 40 40 2061 44 2062 41 41 360 58 2002 46 2054 46 2066 40 40 2061 44 2062 41 41 385 40 2061 44 2062 41 44 2063 398 2002 46 2004 46 2010 46 2026 40 41 58 392 422 2063 46 2064 46 2065 40 648 44 304 41 58 2002 46 2060 46 2066 40 40 2061 44 2062 41 41 359 40 2061 422 398 2002 46 2003 46 2067 428 40 2014 308 2061 398 2014 41 41 58 392 2063 46 2064 46 2065 40 648 41 58 2002 46 2059 46 2066 40 40 2061 44 2062 41 41 360 58 2002 46 2058 46 2066 40 40 2061 44 2062 41 41 2002 46 2003 46 2068 40 41 2002 46 2004 46 2068 40 41 621 2002 46 2069 40 41 621 2002 46 2070 40 41 2002 46 2071 40 41 621 2002 46 2072 40 41 2002 46 2073 40 41 2002 46 2074 40 41 2002 46 2075 40 41 2002 46 2076 40 41 2002 46 2077 40 41 621 621 621 2002 46 2078 40 41 2002 46 2079 40 41 621 2002 46 2080 40 41 2002 46 2081 40 41 621 2002 46 2082 40 41 621 2002 46 2083 40 41 2002 46 2084 40 41 621 2002 46 2085 40 41 2002 46 2086 40 41 2002 46 2087 40 41 2002 46 2088 40 41 2002 46 2089 40 41 2002 46 2090 40 41 2002 46 2091 40 41 2002 46 2092 40 41 2002 46 2093 40 41 2002 46 2094 40 41 2002 46 2095 40 2012 41 2002 46 2096 40 41 450 2002 46 2097 348 2070 40 2002 41 58 648 2002 46 2098 61 2002 46 2054 38 2002 46 2058 2002 46 2099 61 2002 46 2056 38 2002 46 2059 2002 46 2100 61 2002 46 2057 38 2002 46 2060 2002 46 2101 61 123 125 2002 46 2102 61 123 40 2061 44 2062 44 2103 41 385 2061 44 2062 398 2002 46 2098 385 2103 398 2002 46 2003 46 2010 91 2061 44 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 93 46 2042 125 2002 46 2105 61 123 40 2061 44 2062 44 2103 41 385 2061 44 2062 398 2002 46 2098 385 2103 398 2002 46 2004 46 2010 91 2061 44 2062 93 46 2042 125 348 2071 40 2002 41 58 648 385 2061 44 2062 398 2046 40 2002 46 2054 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 385 2103 44 2045 398 2107 46 2042 46 2026 40 41 58 392 2035 40 2045 44 648 41 308 2108 40 2045 46 2048 44 648 44 303 41 58 2109 61 2110 40 2045 46 2048 46 2111 44 2061 44 2062 41 2002 46 2101 91 2109 93 61 40 2061 44 2106 44 2103 41 64 2112 348 2113 40 2114 41 58 648 392 2114 91 1500 93 631 648 58 450 2114 44 302 2115 44 2116 61 2108 40 2117 44 2114 91 1501 93 41 46 2118 40 648 41 450 40 2115 44 2116 46 2119 40 41 41 43 2114 91 1502 58 93 44 304 348 2095 40 2002 44 2012 61 303 41 58 648 2002 46 2097 61 123 125 2120 61 2121 40 2122 40 2123 41 385 2123 398 2002 46 2051 46 2124 40 41 41 2125 61 302 496 2120 58 621 621 621 621 621 621 385 2061 398 2046 40 2002 46 2051 41 58 2126 61 91 93 2127 61 2055 40 41 385 2128 398 411 40 2002 46 2051 91 2061 93 41 58 2129 61 304 2130 61 2055 40 41 385 2131 398 2128 46 2132 58 621 621 621 621 2133 61 2131 2131 44 2134 61 2002 46 2113 40 2131 41 392 2131 91 1500 93 631 2061 58 621 621 385 2135 398 2002 46 2051 46 2065 40 2131 91 1500 93 44 91 93 41 58 392 2002 46 2136 40 2135 44 2131 41 58 2129 61 302 325 392 422 2129 58 325 360 58 392 2134 58 2130 46 2066 40 40 2133 91 1500 93 44 2133 91 1501 93 41 41 359 2131 91 1500 93 398 2002 46 2097 58 2130 46 2066 40 40 2131 91 1500 93 44 2002 46 2097 91 2131 91 1500 93 93 91 45 1501 93 46 2044 41 41 360 58 621 621 392 2125 58 621 621 621 392 2012 308 2012 46 2137 40 2131 91 1500 93 41 58 2130 46 2066 40 2012 46 2137 40 2131 91 1500 93 41 91 1500 93 41 360 58 2130 46 2066 40 40 2131 91 1500 93 44 648 41 41 360 58 2129 61 302 392 2129 58 2126 46 2050 40 2128 41 2127 46 2138 40 2130 41 351 2002 46 2051 91 2061 93 91 1500 93 360 58 325 621 392 2127 428 2126 58 392 422 2002 46 2051 91 2061 93 428 2125 58 2139 61 2034 40 648 44 40 2140 44 41 44 123 648 58 91 93 44 648 58 91 93 125 41 2141 61 2139 40 648 37 40 2122 40 2002 46 2097 46 2065 40 2061 44 91 93 41 41 43 1501 41 44 2061 41 2141 46 2127 61 411 40 2127 41 2141 46 2142 61 2126 2141 46 2143 61 2061 422 398 2002 46 2007 2002 46 2097 46 2144 40 2061 44 91 93 41 46 2050 40 2141 41 2125 61 302 360 58 2002 46 2051 91 2061 93 61 2126 43 2002 46 2051 91 2061 93 2145 61 2121 40 2122 40 2123 41 385 2123 398 2002 46 2051 46 2124 40 41 41 392 2145 614 2120 58 392 422 2125 58 2125 61 304 360 58 440 2146 40 648 37 2002 46 2051 41 2120 61 2145 348 2094 40 2002 41 58 648 385 2061 44 2147 398 2046 40 2002 46 2051 46 2026 40 41 41 58 621 2148 61 123 2149 58 2055 40 41 385 2149 398 2147 125 385 2149 398 2147 58 385 2131 398 2149 46 2132 58 621 621 2131 61 2002 46 2113 40 2131 41 91 1500 93 392 2131 91 1500 93 614 2061 58 385 2150 398 2147 58 392 2002 46 2136 40 2150 44 2131 41 58 2148 91 2149 93 46 2066 40 2150 41 621 2002 46 2051 91 2061 93 61 2151 40 2147 44 2148 41 348 2096 40 2002 41 58 621 385 2061 44 2097 398 2002 46 2097 46 2026 40 41 58 385 2152 44 2153 398 2154 40 2097 44 2097 91 1501 58 93 41 58 2153 46 2127 46 2050 40 40 2061 44 2152 46 2044 41 41 621 385 2097 398 2002 46 2097 46 2124 40 41 58 385 2155 398 2097 58 2155 46 2127 61 411 40 2055 40 2155 46 2127 41 41 621 385 2061 44 2097 398 2002 46 2097 46 2026 40 41 58 385 2155 398 2097 58 2155 46 2142 61 2156 40 41 46 2157 40 2155 46 2142 44 2061 41 348 2136 40 2002 44 2128 44 2114 41 58 648 621 392 2114 91 1502 93 407 303 308 2114 91 1502 93 407 304 58 450 40 2021 40 2128 44 2142 46 2158 41 308 2128 46 2159 614 2114 91 1501 93 46 2119 40 41 41 621 359 2114 91 1502 93 407 422 303 308 2114 91 1502 93 407 304 58 450 40 40 2021 40 2128 44 2142 46 2158 41 308 2128 46 2159 614 2114 91 1501 93 46 2119 40 41 308 2160 40 2114 91 1502 93 614 2123 385 2123 44 2161 398 2128 46 2042 41 41 428 40 2021 40 2128 44 2142 46 2162 41 308 2128 46 2163 614 2114 91 1501 93 46 2119 40 41 308 2128 46 2159 614 2114 91 1502 93 46 2119 40 41 41 41 621 359 2114 91 1502 93 407 422 303 308 2114 91 1502 93 407 302 58 450 40 2021 40 2128 44 2142 46 2164 41 308 2128 46 2163 614 2114 91 1501 93 46 2119 40 41 308 2128 46 2159 614 2114 91 1502 93 46 2119 40 41 41 621 359 2114 91 1502 93 407 303 308 2114 91 1502 93 407 302 58 450 40 2021 40 2128 44 2142 46 2165 41 308 2128 46 2159 614 2114 91 1501 93 46 2119 40 41 41 621 359 2114 91 1502 93 407 422 303 308 2114 91 1502 93 614 648 58 450 40 2021 40 2128 44 2142 46 2166 41 308 2128 46 2163 614 2114 91 1501 93 46 2119 40 41 308 2128 46 2159 614 2114 91 1502 93 46 2119 40 41 41 621 359 2114 91 1502 93 407 422 303 308 2114 91 1502 93 614 648 58 450 40 2021 40 2128 44 2142 46 2167 41 308 2128 46 2159 614 2114 91 1501 93 46 2119 40 41 308 40 2128 46 2168 428 648 41 46 2119 40 41 631 2114 91 1502 93 46 2119 40 41 41 621 359 2114 91 1502 93 407 422 303 308 2114 91 1502 93 614 648 58 450 40 2021 40 2128 44 40 2142 46 2169 44 2142 46 2170 41 41 308 2128 46 2159 614 2114 91 1501 93 46 2119 40 41 41 621 360 58 440 2146 40 648 37 40 2114 44 41 41 348 2171 40 2002 44 2061 44 2128 44 2127 61 303 44 2172 61 302 41 58 621 2128 46 2132 61 2127 428 91 93 392 2172 58 2002 46 2051 46 2144 40 2061 44 91 93 41 46 2173 40 1500 44 2128 41 360 58 2002 46 2051 46 2144 40 2061 44 91 93 41 46 2050 40 2128 41 348 2174 40 2002 44 2175 41 58 648 474 58 2063 61 2002 46 2004 46 2010 91 2175 93 2176 61 123 320 392 2021 40 320 44 2177 41 360 320 46 2178 385 320 398 2063 46 2179 125 2180 61 648 37 40 2175 91 1500 93 44 2175 91 1501 93 41 392 40 2063 46 2064 46 2065 40 648 41 428 648 398 2176 428 648 398 2176 428 2117 46 2181 46 2119 40 41 614 2180 46 2119 40 41 41 58 450 40 648 43 2175 91 1500 93 44 648 43 2175 91 1501 93 41 374 2182 58 434 450 2175 348 2069 40 2002 41 58 648 2002 46 2104 61 123 125 2002 46 2183 61 123 125 2184 61 2002 46 2058 45 2002 46 2054 385 2061 44 2062 398 2046 40 2184 41 58 2063 61 2002 46 2004 46 2010 91 2061 44 2062 93 2185 61 2002 46 2041 40 2063 46 2042 41 2186 61 2002 46 2054 45 2002 46 2058 385 2187 44 2188 398 2186 58 392 2187 614 2061 58 2189 61 2002 46 2003 46 2010 91 2187 44 2188 93 2190 61 2002 46 2041 40 2189 46 2042 41 392 2185 614 2190 58 392 2002 46 2005 46 2191 40 2189 44 2063 41 58 2127 61 91 93 2042 61 411 40 2063 46 2042 46 2124 40 41 41 43 91 2045 46 2048 385 2192 398 2002 46 2004 46 2192 91 2061 44 2062 93 46 2124 40 41 385 2045 398 2192 46 2124 40 41 93 385 2045 398 2042 58 392 2045 46 2193 58 2127 46 2194 40 2002 46 2195 40 2061 44 2062 44 2045 44 2002 46 2004 44 41 41 2002 46 2171 40 2061 44 2142 46 2196 40 2197 61 2189 46 2044 44 2198 61 2063 46 2044 44 41 44 2127 61 2127 44 41 2002 46 2104 91 2061 44 2062 93 61 2188 2199 61 648 37 40 2189 46 2061 44 2189 46 2159 44 41 2002 46 2183 91 2199 93 61 648 37 40 2063 46 2061 44 2063 46 2159 44 41 2002 46 2054 46 2200 40 40 2187 44 2188 41 41 2002 46 2054 46 2066 40 40 2061 44 2062 41 41 325 348 2073 40 2002 41 58 648 2201 61 2002 46 2054 124 2002 46 2057 2184 61 2002 46 2058 45 2201 2202 61 2002 46 2060 45 2201 2203 61 2204 40 2046 40 2184 44 2025 61 2002 46 2174 44 2205 61 304 41 44 2046 40 2202 44 2025 61 2002 46 2174 44 2205 61 304 41 41 385 2061 44 2062 398 2203 58 2063 61 2002 46 2004 46 2010 91 2061 44 2062 93 621 2206 61 123 125 2207 61 303 385 2103 44 2045 398 2063 46 2042 46 2026 40 41 58 392 2045 46 2048 58 392 2045 46 2048 46 2009 58 392 2045 46 2208 58 2207 61 2045 46 2048 46 2009 359 422 2045 46 2048 46 2209 58 2206 91 2103 93 61 2045 392 2108 40 2045 46 2048 44 648 44 303 41 58 2206 91 2103 93 61 2045 621 2210 61 2063 46 2064 46 2049 40 648 41 2211 61 2063 46 2064 46 2049 40 648 41 2212 61 2063 46 2064 46 2049 40 648 44 303 41 2213 61 2063 46 2064 46 2049 40 648 44 303 41 2168 61 2063 46 2064 46 2049 40 648 44 303 41 621 2127 61 91 40 2061 44 2062 44 303 44 302 41 44 93 621 385 320 398 2063 46 2179 58 392 2021 40 320 44 2177 41 308 648 398 320 58 2214 44 2215 61 320 46 2118 40 648 44 1501 41 2127 46 2050 40 40 2214 44 2215 44 303 44 304 41 41 621 621 2216 61 2002 46 2003 46 2010 46 2065 40 40 2214 44 2215 41 41 2217 61 2002 46 2004 46 2010 46 2065 40 40 2214 44 2215 41 41 392 2216 308 2217 58 2218 61 2055 40 2216 46 2042 41 46 2219 40 2217 46 2042 44 41 46 2220 40 2063 46 2042 41 385 2221 398 2218 58 2127 46 2050 40 40 2214 44 2215 44 2221 44 302 41 41 621 392 2207 58 2127 46 2050 40 2110 40 2207 44 2061 44 2062 44 41 43 40 303 44 304 41 41 621 2002 46 2171 40 2061 44 2142 46 2158 40 2044 61 2063 46 2044 44 2042 61 91 2222 385 2222 398 2063 46 2042 46 2026 40 41 392 2222 91 1500 93 422 398 2206 93 44 2064 61 2063 46 2064 44 2179 61 2063 46 2179 44 2223 61 2063 46 2223 44 41 44 2127 61 2127 44 2172 61 304 44 41 621 392 422 2063 46 2064 46 2065 40 648 44 304 41 58 344 621 385 2044 44 2045 398 2046 40 2206 46 2026 40 41 41 58 2127 61 2002 46 2195 40 2061 44 2062 44 2045 44 2002 46 2004 44 41 621 2127 46 2050 40 40 2061 44 2062 44 303 44 304 41 41 621 2002 46 2171 40 2061 44 2142 46 2162 40 2062 61 2062 44 2044 61 2044 44 2045 61 2045 44 41 44 2127 61 411 40 2055 40 2127 41 41 44 41 621 392 2168 58 2002 46 2171 40 2061 44 2142 46 2167 40 2044 61 2062 44 2168 61 2168 44 41 44 2127 61 91 40 2061 44 2062 44 2168 44 304 41 44 40 2061 44 2062 44 303 44 304 41 44 93 41 2224 61 91 40 2061 44 2062 44 2044 44 304 41 385 2044 398 2046 40 2206 41 93 2224 46 2050 40 40 2061 44 2062 44 303 44 304 41 41 385 2225 398 2210 58 2002 46 2171 40 2061 44 2142 46 2226 40 2062 61 2062 44 2225 61 2225 44 41 44 2127 61 2224 44 41 385 2227 398 2211 58 2002 46 2171 40 2061 44 2142 46 2228 40 2062 61 2062 44 2227 61 2227 44 41 44 2127 61 2224 44 41 392 2212 58 2002 46 2171 40 2061 44 2142 46 2169 40 2044 61 2062 44 2212 61 2212 44 41 44 2127 61 2224 41 392 2213 58 2002 46 2171 40 2061 44 2142 46 2170 40 2044 61 2062 44 2213 61 2213 44 41 44 2127 61 2224 41 621 621 2192 61 2002 46 2004 46 2192 392 40 2061 44 2062 41 398 2002 46 2056 58 385 2229 44 2206 398 2192 91 2061 44 2062 93 46 2026 40 41 58 2230 61 2002 46 2004 46 2010 91 2229 93 385 2231 44 2232 398 2206 46 2026 40 41 58 2002 46 2171 40 2230 46 2061 44 2142 46 2166 40 2062 61 2230 46 2044 44 2044 61 2231 44 2045 61 2232 44 41 44 2127 61 91 40 2061 44 2062 44 303 44 304 41 93 44 41 348 2075 40 2002 41 58 648 2233 61 2002 46 2059 45 2002 46 2056 385 2061 44 2062 398 2046 40 2233 41 58 2063 61 2002 46 2004 46 2010 91 2061 44 2062 93 313 2063 46 2064 46 2065 40 648 41 621 2127 61 91 40 2061 44 2062 44 303 44 302 41 44 93 621 385 320 398 2063 46 2179 58 392 2021 40 320 44 2177 41 308 648 398 320 58 2214 44 2215 61 320 46 2118 40 648 44 1501 41 2127 46 2050 40 40 2214 44 2215 44 303 44 304 41 41 621 2002 46 2171 40 2061 44 2142 46 2158 40 2044 61 2063 46 2044 44 2042 61 91 93 44 2064 61 2063 46 2064 44 2179 61 2063 46 2179 44 2223 61 2063 46 2223 44 41 44 621 2127 61 2127 44 41 348 2072 40 2002 41 58 648 2234 61 2002 46 2058 124 2002 46 2060 2235 61 2002 46 2054 45 2234 2236 61 2002 46 2057 45 2234 2237 61 2204 40 2046 40 2235 41 44 2046 40 2236 41 41 385 2061 44 2062 398 2237 58 2063 61 2002 46 2003 46 2010 91 2061 44 2062 93 621 2206 61 123 125 385 2103 44 2045 398 2063 46 2042 46 2026 40 41 58 392 2045 46 2048 58 392 2045 46 2048 46 2009 58 2206 91 2103 93 61 2045 392 2108 40 2045 46 2048 44 648 44 303 41 58 2206 91 2103 93 61 2045 621 2212 61 2063 46 2064 46 2049 40 648 44 303 41 2213 61 2063 46 2064 46 2049 40 648 44 303 41 392 2212 58 2002 46 2171 40 2061 44 2142 46 2169 40 2044 61 2062 44 2212 61 303 44 41 41 392 2213 58 2002 46 2171 40 2061 44 2142 46 2170 40 2044 61 2062 44 2213 61 303 44 41 41 621 385 2044 398 2046 40 2206 41 58 2002 46 2171 40 2061 44 2142 46 2164 40 2062 61 2062 44 2044 61 2044 44 41 41 621 621 621 621 2127 61 91 93 2192 61 2002 46 2003 46 2192 385 40 2238 44 2239 41 44 2240 398 40 2192 91 2061 44 2062 93 46 2026 40 41 41 58 385 2103 44 2045 398 2240 46 2026 40 41 58 2127 46 2050 40 40 2238 44 2239 44 2103 44 302 41 44 41 392 422 2045 46 2241 58 2127 46 2050 40 40 2238 44 2239 44 2103 44 648 41 44 41 385 2044 398 2046 40 2206 41 58 2127 46 2050 40 40 2061 44 2062 44 2044 44 302 41 41 621 2242 61 2002 46 2101 46 2065 40 40 2061 44 2063 46 2159 41 41 392 2242 58 2127 46 2050 40 40 2242 91 1500 93 44 2242 91 1501 93 44 2242 91 1502 93 44 302 41 41 621 2002 46 2171 40 2061 44 2142 46 2165 40 2044 61 2063 46 2044 44 41 44 2127 61 411 40 2055 40 2127 41 41 44 41 348 2074 40 2002 41 58 648 2243 61 2002 46 2056 45 2002 46 2059 385 2061 44 2062 398 2046 40 2243 41 58 2063 61 2002 46 2003 46 2010 91 2061 44 2062 93 313 2063 46 2064 46 2065 40 648 41 2002 46 2171 40 2061 44 2142 46 2165 40 2044 61 2063 46 2044 44 41 44 41 348 2082 40 2002 41 58 648 2002 46 2244 61 123 125 385 2061 44 2062 44 2103 398 2046 40 2002 46 2105 45 2002 46 2102 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2106 93 2045 61 2245 46 2246 40 2103 41 621 2247 61 2002 46 2019 40 2045 41 385 2187 44 2188 44 2248 398 2046 40 2002 46 2102 45 2002 46 2105 41 58 392 2187 614 2061 308 2188 614 2062 58 2249 61 2107 46 2246 40 2248 41 2250 61 2002 46 2019 40 2249 41 392 2045 46 2048 308 2045 46 2048 46 2009 308 648 398 2250 91 1502 93 58 2251 61 2250 91 1502 93 91 648 93 392 2251 398 2002 46 2183 58 2250 91 1502 93 91 648 93 61 2002 46 2183 91 2251 93 2249 46 2252 40 2248 41 2253 61 2249 46 2254 40 41 91 1501 93 392 40 2250 614 2247 428 40 621 621 2250 91 1500 58 1502 93 614 2247 91 1500 58 1502 93 308 2024 40 2250 91 1502 93 44 2255 61 2253 41 614 2247 91 1502 93 41 41 58 392 2002 46 2005 46 2256 40 2062 44 2248 44 2103 44 2045 41 58 621 621 621 392 2249 46 2255 631 2045 46 2255 58 2257 61 2045 46 335 40 41 2257 46 2044 61 2248 2002 46 2171 40 2061 44 2142 46 2166 40 2062 61 2062 44 2044 61 2248 44 2045 61 2257 44 41 44 41 2002 46 2171 40 2061 44 2142 46 2258 40 2062 61 2062 44 2197 61 2248 44 2198 61 2103 44 41 41 2002 46 2102 46 2200 40 40 2187 44 2188 44 2248 41 41 2002 46 2102 46 2066 40 40 2061 44 2062 44 2103 41 41 2002 46 2244 91 2061 44 2062 44 2103 93 61 2248 325 348 2086 40 2002 41 58 648 385 2061 44 2062 44 2103 398 2046 40 2002 46 2105 45 2002 46 2102 41 58 2002 46 2259 40 2061 44 2062 44 2103 41 348 2259 40 2002 44 2061 44 2062 44 2103 41 58 2045 61 2002 46 2004 46 2010 91 2061 44 2062 93 46 2246 40 2103 41 621 2127 61 91 93 392 2045 46 2048 308 2045 46 2048 46 2009 58 2127 46 2194 40 2002 46 2195 40 2061 44 2062 44 2045 44 2002 46 2004 44 41 41 621 621 2260 61 40 2010 46 2261 44 2010 46 2262 44 2010 46 2263 41 2264 61 40 2045 46 424 428 2045 46 2265 40 41 428 2045 46 2241 428 40 2045 46 2266 308 2045 46 2267 41 428 40 2021 40 2045 44 2260 41 308 2045 46 2268 41 41 392 422 2264 58 2045 61 2045 46 335 40 41 392 2021 40 2045 44 2260 41 308 2045 46 2269 58 2045 46 349 61 2002 46 2005 46 2270 40 2103 44 2062 41 360 58 2045 46 349 61 2002 46 2005 46 2271 40 2103 44 2062 41 392 40 2045 46 2272 308 2045 46 349 407 422 2010 46 2273 308 327 40 2045 46 349 41 41 58 2002 46 2005 46 2274 40 2103 44 2062 41 2002 46 2171 40 2061 44 2142 46 2162 40 2062 61 2062 44 2044 61 2103 44 2045 61 2045 44 2264 61 2264 44 41 44 2127 61 2127 44 41 348 2085 40 2002 41 58 648 385 2061 44 2062 44 2103 398 2046 40 2002 46 2102 45 2002 46 2105 41 58 2002 46 2275 40 2061 44 2062 44 2103 41 348 2275 40 2002 44 2061 44 2062 44 2103 41 58 2002 46 2171 40 2061 44 2142 46 2164 40 2062 61 2062 44 2044 61 2103 44 41 44 621 621 621 2127 61 91 40 2061 44 2062 44 2103 44 648 41 44 40 2061 44 2062 44 2103 44 648 41 44 93 44 41 348 2087 40 2002 41 58 648 385 2061 44 2062 44 2103 398 2046 40 2002 46 2102 38 2002 46 2105 41 58 621 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2276 61 2002 46 2244 46 2065 40 40 2061 44 2062 44 2103 41 44 2103 41 2249 61 2002 46 2003 46 2010 91 2061 44 2106 93 46 2246 40 2276 41 2277 61 2002 46 2004 46 2010 91 2061 44 2062 93 46 2246 40 2103 41 2127 61 91 93 621 621 392 2035 40 2277 44 648 41 308 2108 40 2277 46 2048 44 648 44 303 41 58 2278 61 2110 40 2277 46 2048 46 2009 44 2061 44 2062 41 392 2278 398 2002 46 2104 58 2277 46 2048 46 2009 61 2249 46 2048 46 2009 621 2279 61 2108 40 2277 46 2048 44 648 44 303 41 392 2279 58 2280 61 2278 43 40 2279 44 41 392 2280 398 2002 46 2244 58 621 621 621 2277 46 2048 46 2009 61 2249 46 2048 46 2009 2277 46 2048 46 2103 61 2249 46 2048 46 2103 621 2281 61 2108 40 2277 44 648 44 303 41 392 2281 58 2282 61 40 2061 44 2062 41 2277 46 2281 61 2023 40 91 2002 46 2244 46 2065 40 2282 43 40 2283 44 41 44 2283 41 385 2283 398 2281 93 41 2277 46 2284 61 2023 40 91 2002 46 2244 46 2065 40 2278 43 40 2285 44 41 44 2285 41 385 2285 398 2277 46 2284 93 41 2127 46 2194 40 2002 46 2195 40 2061 44 2062 44 2277 44 2002 46 2004 44 41 41 392 40 2035 40 2277 44 648 41 308 2108 40 2277 46 2048 44 648 44 303 41 41 58 2278 61 2110 40 2277 46 2048 46 2111 44 2061 44 2062 41 392 2278 398 2002 46 2104 58 2277 46 2048 46 2111 61 2249 46 2048 46 2111 2250 61 2002 46 2019 40 2249 41 2286 61 2002 46 2019 40 2277 41 621 621 621 392 2250 631 2286 308 2276 614 2103 58 2287 61 2249 46 2241 308 2277 46 2241 2288 61 422 2249 46 2241 308 422 2277 46 2241 392 2287 428 2288 58 621 2264 61 304 392 40 2249 46 424 308 422 2277 46 424 308 422 2277 46 2265 40 41 308 422 2277 46 2241 41 58 2045 61 2277 46 335 40 41 2289 61 2002 46 2005 46 2290 40 2103 44 2062 41 392 2289 407 422 2010 46 2273 58 2045 46 349 61 2289 2264 61 302 360 58 2045 61 2277 2002 46 2171 40 2061 44 2142 46 2166 40 2062 61 2062 44 2044 61 2103 44 2045 61 2045 44 2264 61 2264 44 41 44 2127 61 2127 44 41 360 58 621 2002 46 2275 40 2061 44 2062 44 2103 41 2002 46 2259 40 2061 44 2062 44 2103 41 348 2078 40 2002 41 58 2291 61 2142 46 2226 46 2291 385 2061 44 2062 398 2046 40 2002 46 2098 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 2292 61 2107 46 2064 91 2291 93 2293 61 2245 46 2064 91 2291 93 2294 61 91 2295 385 2295 398 2293 392 2295 422 398 2292 93 2296 61 91 2295 385 2295 398 2292 392 2295 422 398 2293 93 2002 46 2052 46 2138 40 123 40 2061 44 2062 41 58 123 648 58 2294 44 648 58 2296 44 125 125 41 348 2091 40 2002 41 58 385 40 2061 44 2062 41 44 2297 398 2002 46 2052 46 2026 40 41 58 385 2225 398 2297 91 648 93 58 2002 46 2171 40 2061 44 2142 46 2226 40 2062 61 2062 44 2225 61 2225 44 41 41 348 2081 40 2002 41 58 385 40 2061 44 2062 41 44 2297 398 2002 46 2052 46 2026 40 41 58 385 2225 398 2297 91 648 93 58 2002 46 2171 40 2061 44 2142 46 2298 40 2062 61 2062 44 2044 61 2225 46 2044 44 41 41 348 2079 40 2002 41 58 2291 61 2142 46 2228 46 2291 385 2061 44 2062 398 2046 40 2002 46 2098 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 2299 61 2107 46 2064 91 2291 93 2300 61 2245 46 2064 91 2291 93 2301 61 91 2302 385 2302 398 2300 392 2302 422 398 2299 93 2303 61 91 2302 385 2302 398 2299 392 2302 422 398 2300 93 2002 46 2053 46 2138 40 123 40 2061 44 2062 41 58 123 648 58 2301 44 648 58 2303 44 125 125 41 348 2092 40 2002 41 58 385 40 2061 44 2062 41 44 2304 398 2002 46 2053 46 2026 40 41 58 385 2227 398 2304 91 648 93 58 2002 46 2171 40 2061 44 2142 46 2228 40 2062 61 2062 44 2227 61 2227 44 41 41 348 2080 40 2002 41 58 385 40 2061 44 2062 41 44 2304 398 2002 46 2053 46 2026 40 41 58 385 2227 398 2304 91 648 93 58 2002 46 2171 40 2061 44 2142 46 2305 40 2062 61 2062 44 2044 61 2227 46 2044 44 41 41 64 2112 348 2195 40 2061 44 2062 44 2045 44 2306 41 58 2307 61 303 392 2035 40 2045 46 2048 44 648 41 58 2307 61 2045 46 2048 46 2009 360 58 2192 61 2306 46 2192 91 2061 44 2062 93 385 40 2308 44 2309 41 44 2042 398 2192 46 2026 40 41 58 392 2160 40 2045 614 2232 46 2048 385 2232 398 2042 46 2124 40 41 41 58 2307 61 648 325 621 2310 61 2108 40 2045 44 648 44 303 41 392 2310 407 422 303 58 2311 61 648 2312 61 2310 360 58 2311 44 2312 61 2110 40 2307 44 2061 44 2062 44 41 2127 61 91 40 2311 44 2312 44 303 44 304 41 93 392 2108 40 2045 46 2048 44 648 44 303 41 58 2313 44 2314 61 2110 40 2307 44 2061 44 2062 44 41 2127 46 2050 40 40 2313 44 2314 44 303 44 304 41 41 450 2127 348 2315 40 2002 44 2291 41 58 385 2061 44 2062 398 2046 40 2002 46 2098 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 621 2316 61 2107 46 2064 46 2065 40 2291 41 2316 61 123 2023 40 2002 46 2244 46 2065 40 40 2061 44 2062 44 2317 41 44 2317 41 385 2317 398 2272 41 385 2272 398 2316 125 392 2316 360 2055 40 41 2318 61 2245 46 2064 46 2065 40 2291 41 2318 61 2055 40 2318 41 392 2318 360 2055 40 41 392 2316 631 2318 58 2127 61 91 93 385 2319 398 2318 58 385 2103 398 2319 58 2045 61 2245 46 2246 40 2103 41 392 2045 46 2048 308 2045 46 2048 46 2009 58 2127 46 2194 40 2002 46 2195 40 2061 44 2062 44 2045 44 2002 46 2004 44 41 41 500 40 2316 44 2318 44 2061 44 2062 44 2127 44 41 348 2320 40 2002 44 2128 41 58 385 40 2316 44 2318 44 2061 44 2062 44 2127 44 41 398 2002 46 2315 40 2128 46 2291 41 58 2321 61 2318 46 2220 40 2316 41 392 2321 428 2316 58 2002 46 2171 40 2061 44 2128 40 2044 61 2062 44 638 123 2128 46 2291 58 2321 125 41 44 2127 61 2127 44 41 348 2083 40 2002 41 58 2002 46 2320 40 2142 46 2169 41 348 2084 40 2002 41 58 2002 46 2320 40 2142 46 2170 41 348 2322 40 2002 44 2128 41 58 385 40 2316 44 2318 44 2061 44 2062 44 2127 44 41 398 2002 46 2315 40 2128 46 2291 41 58 2321 61 2318 46 2220 40 2316 41 392 2318 631 2321 58 2002 46 2171 40 2061 44 2128 40 2044 61 2062 44 638 123 2128 46 2291 58 2318 125 41 44 2127 61 2127 44 41 348 2089 40 2002 41 58 2002 46 2322 40 2142 46 2169 41 348 2090 40 2002 41 58 2002 46 2322 40 2142 46 2170 41 348 2093 40 2002 41 58 2323 61 2002 46 2098 46 483 40 2002 46 2099 44 2002 46 2100 41 385 2061 44 2062 398 2046 40 2323 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 2324 61 2107 46 2064 46 2065 40 648 41 2325 61 2245 46 2064 46 2065 40 648 41 392 2324 631 2325 58 2002 46 2171 40 2061 44 2142 46 2326 40 2044 61 2062 44 2327 61 2325 44 41 41 348 2076 40 2002 41 58 648 2323 61 2002 46 2098 46 483 40 2002 46 2099 44 2002 46 2100 44 621 2002 46 2057 38 2002 46 2058 44 621 2002 46 2054 38 2002 46 2060 44 41 385 2061 44 2062 398 2046 40 2323 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 2328 61 123 2025 58 2022 385 2025 44 2022 398 2107 46 2064 46 2026 40 41 392 2025 398 2329 46 2330 125 2331 61 123 2025 58 2022 385 2025 44 2022 398 2245 46 2064 46 2026 40 41 392 2025 398 2329 46 2330 125 392 2328 631 2331 58 2002 46 2171 40 2061 44 2142 46 2329 40 2044 61 2062 44 2064 61 2331 44 41 41 348 2088 40 2002 41 58 385 2061 44 2062 398 2046 40 2002 46 2098 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 392 40 2107 46 2064 46 2065 40 648 41 631 2245 46 2064 46 2065 40 648 41 41 58 621 621 2127 61 91 93 392 2245 46 2064 46 2065 40 648 41 58 2127 46 2050 40 40 2061 44 2062 44 2245 46 2064 91 648 93 44 304 44 41 41 621 2002 46 2171 40 2061 44 2142 46 2167 40 2044 61 2062 44 2168 61 2245 46 2064 46 2065 40 648 41 44 41 44 2127 61 2127 44 41 348 2077 40 2002 41 58 385 2061 44 2062 398 2046 40 2002 46 2098 41 58 2106 61 2002 46 2104 46 2065 40 40 2061 44 2062 41 44 2062 41 2107 61 2002 46 2003 46 2010 91 2061 44 2106 93 2245 61 2002 46 2004 46 2010 91 2061 44 2062 93 392 2107 46 2223 631 2245 46 2223 58 2002 46 2171 40 2061 44 2142 46 2332 40 2044 61 2062 44 2223 61 2245 46 2223 44 41 41 348 2017 40 2002 44 2011 44 2012 44 2015 61 303 41 58 648 2333 61 2012 46 2137 40 41 2334 61 123 125 385 2061 44 2097 398 411 40 2011 46 2026 40 41 41 58 392 422 2097 58 344 621 2335 61 303 385 2336 398 2333 58 392 2336 91 1500 93 614 2061 58 2335 61 2336 325 621 392 2335 407 303 308 422 2002 46 2005 46 2337 40 2061 41 58 621 385 2155 398 2097 58 2334 91 40 2061 44 2155 46 2044 41 93 61 40 2061 44 648 41 351 2011 91 2061 93 344 621 392 2335 407 303 58 2338 61 1501 360 58 2338 61 40 2002 46 2339 40 2335 91 1501 93 41 428 1500 41 43 1501 621 385 2340 44 2155 398 2341 40 2097 41 58 392 2340 614 1500 308 2335 58 2155 46 2127 46 2050 40 2335 41 2342 61 91 648 37 2338 93 392 2015 58 2342 46 2050 40 2015 41 359 2340 614 1500 308 422 2335 58 2342 46 2050 40 648 41 360 58 2342 46 2050 40 2155 46 2343 40 41 91 58 1503 93 41 2198 61 648 46 2344 40 2342 41 2334 91 40 2061 44 2155 46 2044 41 93 61 40 2061 44 2198 41 2338 636 1501 2155 46 2044 61 2198 621 385 2097 398 2011 46 2124 40 41 58 385 2155 398 2097 58 2155 46 2127 61 91 2334 46 2065 40 2222 44 2222 41 385 2222 398 2155 46 2127 93 450 2011 348 2018 40 2002 44 2011 44 2345 41 58 648 621 2346 61 123 125 385 2061 44 2097 398 2011 46 2026 40 41 58 385 2155 398 2097 58 385 2311 44 2044 398 2155 46 2127 58 2346 46 2144 40 2061 44 2055 40 41 41 46 2066 40 2311 41 2347 61 2055 40 2345 41 621 2348 61 303 496 2348 631 2347 58 2348 61 2055 40 2347 41 2347 46 2138 40 42 91 2346 46 2065 40 2061 44 40 41 41 385 2061 398 2347 93 41 621 385 2061 398 411 40 2011 41 58 392 2061 422 398 2347 58 351 2011 91 2061 93 450 2011 64 2349 348 2339 40 2350 44 2044 41 58 648 392 2351 58 61 2352 46 2353 40 648 44 2044 41 58 450 404 40 2351 91 1501 93 41 2354 61 2352 46 2354 40 648 44 2044 41 392 2354 58 450 404 40 2354 91 1500 93 41 450 303 
131030,Python,"class InteractiveMigrationQuestioner(MigrationQuestioner):

    def _boolean_input(self, question, default=None):
        result = input(""%s "" % question)
        if not result and default is not None:
            return default
        while not result or result[0].lower() not in ""yn"":
            result = input(""Please answer yes or no: "")
        return result[0].lower() == ""y""

    def _choice_input(self, question, choices):
        print(question)
        for i, choice in enumerate(choices):
            print("" %s) %s"" % (i + 1, choice))
        result = input(""Select an option: "")
        while True:
            try:
                value = int(result)
            except ValueError:
                pass
            else:
                if 0 < value <= len(choices):
                    return value
            result = input(""Please select a valid option: "")

    def _ask_default(self, default=''):
        """"""
        Prompt for a default value.

        The ``default`` argument allows providing a custom default value (as a
        string) which will be shown to the user and used as the return value
        if the user doesn't provide any other input.
        """"""
        print('Please enter the default value as valid Python.')
        if default:
            print(
                f""Accept the default '{default}' by pressing 'Enter' or ""
                f""provide another value.""
            )
        print(
            'The datetime and django.utils.timezone modules are available, so '
            'it is possible to provide e.g. timezone.now as a value.'
        )
        print(""Type 'exit' to exit this prompt"")
        while True:
            if default:
                prompt = ""[default: {}] >>> "".format(default)
            else:
                prompt = "">>> ""
            code = input(prompt)
            if not code and default:
                code = default
            if not code:
                print(""Please enter some code, or 'exit' (without quotes) to exit."")
            elif code == ""exit"":
                sys.exit(1)
            else:
                try:
                    return eval(code, {}, {'datetime': datetime, 'timezone': timezone})
                except (SyntaxError, NameError) as e:
                    print(""Invalid input: %s"" % e)

    def ask_not_null_addition(self, field_name, model_name):
        """"""Adding a NOT NULL field to a model.""""""
        if not self.dry_run:
            choice = self._choice_input(
                f""It is impossible to add a non-nullable field '{field_name}' ""
                f""to {model_name} without specifying a default. This is ""
                f""because the database needs something to populate existing ""
                f""rows.\n""
                f""Please select a fix:"",
                [
                    (""Provide a one-off default now (will be set on all existing ""
                     ""rows with a null value for this column)""),
                    'Quit and manually define a default value in models.py.',
                ]
            )
            if choice == 2:
                sys.exit(3)
            else:
                return self._ask_default()
        return None

    def ask_not_null_alteration(self, field_name, model_name):
        """"""Changing a NULL field to NOT NULL.""""""
        if not self.dry_run:
            choice = self._choice_input(
                f""It is impossible to change a nullable field '{field_name}' ""
                f""on {model_name} to non-nullable without providing a ""
                f""default. This is because the database needs something to ""
                f""populate existing rows.\n""
                f""Please select a fix:"",
                [
                    (""Provide a one-off default now (will be set on all existing ""
                     ""rows with a null value for this column)""),
                    'Ignore for now. Existing rows that contain NULL values '
                    'will have to be handled manually, for example with a '
                    'RunPython or RunSQL operation.',
                    'Quit and manually define a default value in models.py.',
                ]
            )
            if choice == 2:
                return NOT_PROVIDED
            elif choice == 3:
                sys.exit(3)
            else:
                return self._ask_default()
        return None

    def ask_rename(self, model_name, old_name, new_name, field_instance):
        """"""Was this field really renamed?""""""
        msg = 'Was %s.%s renamed to %s.%s (a %s)? [y/N]'
        return self._boolean_input(msg % (model_name, old_name, model_name, new_name,
                                          field_instance.__class__.__name__), False)

    def ask_rename_model(self, old_model_state, new_model_state):
        """"""Was this model really renamed?""""""
        msg = 'Was the model %s.%s renamed to %s? [y/N]'
        return self._boolean_input(msg % (old_model_state.app_label, old_model_state.name,
                                          new_model_state.name), False)

    def ask_merge(self, app_label):
        return self._boolean_input(
            ""\nMerging will only work if the operations printed above do not conflict\n"" +
            ""with each other (working on different fields or models)\n"" +
            'Should these migration branches be merged? [y/N]',
            False,
        )

    def ask_auto_now_add_addition(self, field_name, model_name):
        """"""Adding an auto_now_add field to a model.""""""
        if not self.dry_run:
            choice = self._choice_input(
                f""It is impossible to add the field '{field_name}' with ""
                f""'auto_now_add=True' to {model_name} without providing a ""
                f""default. This is because the database needs something to ""
                f""populate existing rows.\n"",
                [
                    'Provide a one-off default now which will be set on all '
                    'existing rows',
                    'Quit and manually define a default value in models.py.',
                ]
            )
            if choice == 2:
                sys.exit(3)
            else:
                return self._ask_default(default='timezone.now')
        return None

    def ask_unique_callable_default_addition(self, field_name, model_name):
        """"""Adding a unique field with a callable default.""""""
        if not self.dry_run:
            version = get_docs_version()
            choice = self._choice_input(
                f'Callable default on unique field {model_name}.{field_name} '
                f'will not generate unique values upon migrating.\n'
                f'Please choose how to proceed:\n',
                [
                    f'Continue making this migration as the first step in '
                    f'writing a manual migration to generate unique values '
                    f'described here: '
                    f'https://docs.djangoproject.com/en/{version}/howto/'
                    f'writing-migrations/#migrations-that-add-unique-fields.',
                    'Quit and edit field options in models.py.',
                ],
            )
            if choice == 2:
                sys.exit(3)
        return None",1,334 2000 40 2001 41 58 348 2002 40 2003 44 2004 44 349 61 303 41 58 2005 61 2006 40 648 37 2004 41 392 422 2005 308 349 407 422 303 58 450 349 496 422 2005 428 2005 91 1500 93 46 2007 40 41 422 398 648 58 2005 61 2006 40 648 41 450 2005 91 1500 93 46 2007 40 41 614 648 348 2008 40 2003 44 2004 44 2009 41 58 436 40 2004 41 385 2010 44 2011 398 2012 40 2009 41 58 436 40 648 37 40 2010 43 1501 44 2011 41 41 2005 61 2006 40 648 41 496 304 58 474 58 2013 61 404 40 2005 41 374 2014 58 434 360 58 392 1500 60 2013 620 2015 40 2009 41 58 450 2013 2005 61 2006 40 648 41 348 2016 40 2003 44 349 61 648 41 58 648 436 40 648 41 392 349 58 436 40 648 648 41 436 40 648 648 41 436 40 648 41 496 304 58 392 349 58 2017 61 648 46 2018 40 349 41 360 58 2017 61 648 2019 61 2006 40 2017 41 392 422 2019 308 349 58 2019 61 349 392 422 2019 58 436 40 648 41 359 2019 614 648 58 2020 46 375 40 1501 41 360 58 474 58 450 372 40 2019 44 123 125 44 123 648 58 2021 44 648 58 2022 125 41 374 40 2023 44 2024 41 311 2025 58 436 40 648 37 2025 41 348 2026 40 2003 44 2027 44 2028 41 58 648 392 422 2003 46 2029 58 2011 61 2003 46 2008 40 648 648 648 648 648 44 91 40 648 648 41 44 648 44 93 41 392 2011 614 1502 58 2020 46 375 40 1502 41 360 58 450 2003 46 2016 40 41 450 303 348 2030 40 2003 44 2027 44 2028 41 58 648 392 422 2003 46 2029 58 2011 61 2003 46 2008 40 648 648 648 648 648 44 91 40 648 648 41 44 648 648 648 44 648 44 93 41 392 2011 614 1502 58 450 2031 359 2011 614 1502 58 2020 46 375 40 1502 41 360 58 450 2003 46 2016 40 41 450 303 348 2032 40 2003 44 2028 44 2033 44 2034 44 2035 41 58 648 2036 61 648 450 2003 46 2002 40 2036 37 40 2028 44 2033 44 2028 44 2034 44 2035 46 2037 46 2038 41 44 302 41 348 2039 40 2003 44 2040 44 2041 41 58 648 2036 61 648 450 2003 46 2002 40 2036 37 40 2040 46 2042 44 2040 46 2043 44 2041 46 2043 41 44 302 41 348 2044 40 2003 44 2042 41 58 450 2003 46 2002 40 648 43 648 43 648 44 302 44 41 348 2045 40 2003 44 2027 44 2028 41 58 648 392 422 2003 46 2029 58 2011 61 2003 46 2008 40 648 648 648 648 44 91 648 648 44 648 44 93 41 392 2011 614 1502 58 2020 46 375 40 1502 41 360 58 450 2003 46 2016 40 349 61 648 41 450 303 348 2046 40 2003 44 2027 44 2028 41 58 648 392 422 2003 46 2029 58 2047 61 2048 40 41 2011 61 2003 46 2008 40 648 648 648 44 91 648 648 648 648 648 44 648 44 93 44 41 392 2011 614 1502 58 2020 46 375 40 1502 41 450 303 
131545,Python,"class NonAggregateAnnotationTestCase(TestCase):

    @classmethod
    def setUpTestData(cls):
        cls.a1 = Author.objects.create(name='Adrian Holovaty', age=34)
        cls.a2 = Author.objects.create(name='Jacob Kaplan-Moss', age=35)
        cls.a3 = Author.objects.create(name='Brad Dayley', age=45)
        cls.a4 = Author.objects.create(name='James Bennett', age=29)
        cls.a5 = Author.objects.create(name='Jeffrey Forcier', age=37)
        cls.a6 = Author.objects.create(name='Paul Bissex', age=29)
        cls.a7 = Author.objects.create(name='Wesley J. Chun', age=25)
        cls.a8 = Author.objects.create(name='Peter Norvig', age=57)
        cls.a9 = Author.objects.create(name='Stuart Russell', age=46)
        cls.a1.friends.add(cls.a2, cls.a4)
        cls.a2.friends.add(cls.a1, cls.a7)
        cls.a4.friends.add(cls.a1)
        cls.a5.friends.add(cls.a6, cls.a7)
        cls.a6.friends.add(cls.a5, cls.a7)
        cls.a7.friends.add(cls.a2, cls.a5, cls.a6)
        cls.a8.friends.add(cls.a9)
        cls.a9.friends.add(cls.a8)

        cls.p1 = Publisher.objects.create(name='Apress', num_awards=3)
        cls.p2 = Publisher.objects.create(name='Sams', num_awards=1)
        cls.p3 = Publisher.objects.create(name='Prentice Hall', num_awards=7)
        cls.p4 = Publisher.objects.create(name='Morgan Kaufmann', num_awards=9)
        cls.p5 = Publisher.objects.create(name=""Jonno's House of Books"", num_awards=0)

        cls.b1 = Book.objects.create(
            isbn='159059725', name='The Definitive Guide to Django: Web Development Done Right',
            pages=447, rating=4.5, price=Decimal('30.00'), contact=cls.a1, publisher=cls.p1,
            pubdate=datetime.date(2007, 12, 6)
        )
        cls.b2 = Book.objects.create(
            isbn='067232959', name='Sams Teach Yourself Django in 24 Hours',
            pages=528, rating=3.0, price=Decimal('23.09'), contact=cls.a3, publisher=cls.p2,
            pubdate=datetime.date(2008, 3, 3)
        )
        cls.b3 = Book.objects.create(
            isbn='159059996', name='Practical Django Projects',
            pages=300, rating=4.0, price=Decimal('29.69'), contact=cls.a4, publisher=cls.p1,
            pubdate=datetime.date(2008, 6, 23)
        )
        cls.b4 = Book.objects.create(
            isbn='013235613', name='Python Web Development with Django',
            pages=350, rating=4.0, price=Decimal('29.69'), contact=cls.a5, publisher=cls.p3,
            pubdate=datetime.date(2008, 11, 3)
        )
        cls.b5 = Book.objects.create(
            isbn='013790395', name='Artificial Intelligence: A Modern Approach',
            pages=1132, rating=4.0, price=Decimal('82.80'), contact=cls.a8, publisher=cls.p3,
            pubdate=datetime.date(1995, 1, 15)
        )
        cls.b6 = Book.objects.create(
            isbn='155860191', name='Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp',
            pages=946, rating=5.0, price=Decimal('75.00'), contact=cls.a8, publisher=cls.p4,
            pubdate=datetime.date(1991, 10, 15)
        )
        cls.b1.authors.add(cls.a1, cls.a2)
        cls.b2.authors.add(cls.a3)
        cls.b3.authors.add(cls.a4)
        cls.b4.authors.add(cls.a5, cls.a6, cls.a7)
        cls.b5.authors.add(cls.a8, cls.a9)
        cls.b6.authors.add(cls.a8)

        cls.s1 = Store.objects.create(
            name='Amazon.com',
            original_opening=datetime.datetime(1994, 4, 23, 9, 17, 42),
            friday_night_closing=datetime.time(23, 59, 59)
        )
        cls.s2 = Store.objects.create(
            name='Books.com',
            original_opening=datetime.datetime(2001, 3, 15, 11, 23, 37),
            friday_night_closing=datetime.time(23, 59, 59)
        )
        cls.s3 = Store.objects.create(
            name=""Mamma and Pappa's Books"",
            original_opening=datetime.datetime(1945, 4, 25, 16, 24, 14),
            friday_night_closing=datetime.time(21, 30)
        )
        cls.s1.books.add(cls.b1, cls.b2, cls.b3, cls.b4, cls.b5, cls.b6)
        cls.s2.books.add(cls.b1, cls.b3, cls.b5, cls.b6)
        cls.s3.books.add(cls.b3, cls.b4, cls.b6)

    def test_basic_annotation(self):
        books = Book.objects.annotate(is_book=Value(1))
        for book in books:
            self.assertEqual(book.is_book, 1)

    def test_basic_f_annotation(self):
        books = Book.objects.annotate(another_rating=F('rating'))
        for book in books:
            self.assertEqual(book.another_rating, book.rating)

    def test_joined_annotation(self):
        books = Book.objects.select_related('publisher').annotate(
            num_awards=F('publisher__num_awards'))
        for book in books:
            self.assertEqual(book.num_awards, book.publisher.num_awards)

    def test_joined_transformed_annotation(self):
        Employee.objects.bulk_create([
            Employee(
                first_name='John',
                last_name='Doe',
                age=18,
                store=self.s1,
                salary=15000,
            ),
            Employee(
                first_name='Jane',
                last_name='Jones',
                age=30,
                store=self.s2,
                salary=30000,
            ),
            Employee(
                first_name='Jo',
                last_name='Smith',
                age=55,
                store=self.s3,
                salary=50000,
            ),
        ])
        employees = Employee.objects.annotate(
            store_opened_year=F('store__original_opening__year'),
        )
        for employee in employees:
            self.assertEqual(
                employee.store_opened_year,
                employee.store.original_opening.year,
            )

    def test_custom_transform_annotation(self):
        with register_lookup(DecimalField, Floor):
            books = Book.objects.annotate(floor_price=F('price__floor'))

        self.assertSequenceEqual(books.values_list('pk', 'floor_price'), [
            (self.b1.pk, 30),
            (self.b2.pk, 23),
            (self.b3.pk, 29),
            (self.b4.pk, 29),
            (self.b5.pk, 82),
            (self.b6.pk, 75),
        ])

    def test_chaining_transforms(self):
        Company.objects.create(name=' Django Software Foundation  ')
        Company.objects.create(name='Yahoo')
        with register_lookup(CharField, Trim), register_lookup(CharField, Length):
            for expr in [Length('name__trim'), F('name__trim__length')]:
                with self.subTest(expr=expr):
                    self.assertCountEqual(
                        Company.objects.annotate(length=expr).values('name', 'length'),
                        [
                            {'name': ' Django Software Foundation  ', 'length': 26},
                            {'name': 'Yahoo', 'length': 5},
                        ],
                    )

    def test_mixed_type_annotation_date_interval(self):
        active = datetime.datetime(2015, 3, 20, 14, 0, 0)
        duration = datetime.timedelta(hours=1)
        expires = datetime.datetime(2015, 3, 20, 14, 0, 0) + duration
        Ticket.objects.create(active_at=active, duration=duration)
        t = Ticket.objects.annotate(
            expires=ExpressionWrapper(F('active_at') + F('duration'), output_field=DateTimeField())
        ).first()
        self.assertEqual(t.expires, expires)

    def test_mixed_type_annotation_numbers(self):
        test = self.b1
        b = Book.objects.annotate(
            combined=ExpressionWrapper(F('pages') + F('rating'), output_field=IntegerField())
        ).get(isbn=test.isbn)
        combined = int(test.pages + test.rating)
        self.assertEqual(b.combined, combined)

    def test_empty_expression_annotation(self):
        books = Book.objects.annotate(
            selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())
        )
        self.assertEqual(len(books), Book.objects.count())
        self.assertTrue(all(not book.selected for book in books))

        books = Book.objects.annotate(
            selected=ExpressionWrapper(Q(pk__in=Book.objects.none()), output_field=BooleanField())
        )
        self.assertEqual(len(books), Book.objects.count())
        self.assertTrue(all(not book.selected for book in books))

    def test_full_expression_annotation(self):
        books = Book.objects.annotate(
            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),
        )
        self.assertEqual(len(books), Book.objects.count())
        self.assertTrue(all(book.selected for book in books))

    def test_full_expression_annotation_with_aggregation(self):
        qs = Book.objects.filter(isbn='159059725').annotate(
            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),
            rating_count=Count('rating'),
        )
        self.assertEqual([book.rating_count for book in qs], [1])

    def test_aggregate_over_full_expression_annotation(self):
        qs = Book.objects.annotate(
            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),
        ).aggregate(Sum('selected'))
        self.assertEqual(qs['selected__sum'], Book.objects.count())

    def test_empty_queryset_annotation(self):
        qs = Author.objects.annotate(
            empty=Subquery(Author.objects.values('id').none())
        )
        self.assertIsNone(qs.first().empty)

    def test_annotate_with_aggregation(self):
        books = Book.objects.annotate(is_book=Value(1), rating_count=Count('rating'))
        for book in books:
            self.assertEqual(book.is_book, 1)
            self.assertEqual(book.rating_count, 1)

    def test_combined_expression_annotation_with_aggregation(self):
        book = Book.objects.annotate(
            combined=ExpressionWrapper(Value(3) * Value(4), output_field=IntegerField()),
            rating_count=Count('rating'),
        ).first()
        self.assertEqual(book.combined, 12)
        self.assertEqual(book.rating_count, 1)

    def test_combined_f_expression_annotation_with_aggregation(self):
        book = Book.objects.filter(isbn='159059725').annotate(
            combined=ExpressionWrapper(F('price') * F('pages'), output_field=FloatField()),
            rating_count=Count('rating'),
        ).first()
        self.assertEqual(book.combined, 13410.0)
        self.assertEqual(book.rating_count, 1)

    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')
    def test_q_expression_annotation_with_aggregation(self):
        book = Book.objects.filter(isbn='159059725').annotate(
            isnull_pubdate=ExpressionWrapper(
                Q(pubdate__isnull=True),
                output_field=BooleanField(),
            ),
            rating_count=Count('rating'),
        ).first()
        self.assertIs(book.isnull_pubdate, False)
        self.assertEqual(book.rating_count, 1)

    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')
    def test_grouping_by_q_expression_annotation(self):
        authors = Author.objects.annotate(
            under_40=ExpressionWrapper(Q(age__lt=40), output_field=BooleanField()),
        ).values('under_40').annotate(
            count_id=Count('id'),
        ).values('under_40', 'count_id')
        self.assertCountEqual(authors, [
            {'under_40': False, 'count_id': 3},
            {'under_40': True, 'count_id': 6},
        ])

    def test_aggregate_over_annotation(self):
        agg = Author.objects.annotate(other_age=F('age')).aggregate(otherage_sum=Sum('other_age'))
        other_agg = Author.objects.aggregate(age_sum=Sum('age'))
        self.assertEqual(agg['otherage_sum'], other_agg['age_sum'])

    @skipUnlessDBFeature('can_distinct_on_fields')
    def test_distinct_on_with_annotation(self):
        store = Store.objects.create(
            name='test store',
            original_opening=datetime.datetime.now(),
            friday_night_closing=datetime.time(21, 00, 00),
        )
        names = [
            'Theodore Roosevelt',
            'Eleanor Roosevelt',
            'Franklin Roosevelt',
            'Ned Stark',
            'Catelyn Stark',
        ]
        for name in names:
            Employee.objects.create(
                store=store,
                first_name=name.split()[0],
                last_name=name.split()[1],
                age=30, salary=2000,
            )

        people = Employee.objects.annotate(
            name_lower=Lower('last_name'),
        ).distinct('name_lower')

        self.assertEqual({p.last_name for p in people}, {'Stark', 'Roosevelt'})
        self.assertEqual(len(people), 2)

        people2 = Employee.objects.annotate(
            test_alias=F('store__name'),
        ).distinct('test_alias')
        self.assertEqual(len(people2), 1)

        lengths = Employee.objects.annotate(
            name_len=Length('first_name'),
        ).distinct('name_len').values_list('name_len', flat=True)
        self.assertCountEqual(lengths, [3, 7, 8])

    def test_filter_annotation(self):
        books = Book.objects.annotate(is_book=Value(1)).filter(is_book=1)
        for book in books:
            self.assertEqual(book.is_book, 1)

    def test_filter_annotation_with_f(self):
        books = Book.objects.annotate(
            other_rating=F('rating')
        ).filter(other_rating=3.5)
        for book in books:
            self.assertEqual(book.other_rating, 3.5)

    def test_filter_annotation_with_double_f(self):
        books = Book.objects.annotate(
            other_rating=F('rating')
        ).filter(other_rating=F('rating'))
        for book in books:
            self.assertEqual(book.other_rating, book.rating)

    def test_filter_agg_with_double_f(self):
        books = Book.objects.annotate(
            sum_rating=Sum('rating')
        ).filter(sum_rating=F('sum_rating'))
        for book in books:
            self.assertEqual(book.sum_rating, book.rating)

    def test_filter_wrong_annotation(self):
        with self.assertRaisesMessage(FieldError, ""Cannot resolve keyword 'nope' into field.""):
            list(Book.objects.annotate(
                sum_rating=Sum('rating')
            ).filter(sum_rating=F('nope')))

    def test_decimal_annotation(self):
        salary = Decimal(10) ** -Employee._meta.get_field('salary').decimal_places
        Employee.objects.create(
            first_name='Max',
            last_name='Paine',
            store=Store.objects.first(),
            age=23,
            salary=salary,
        )
        self.assertEqual(
            Employee.objects.annotate(new_salary=F('salary') / 10).get().new_salary,
            salary / 10,
        )

    def test_filter_decimal_annotation(self):
        qs = Book.objects.annotate(new_price=F('price') + 1).filter(new_price=Decimal(31)).values_list('new_price')
        self.assertEqual(qs.get(), (Decimal(31),))

    def test_combined_annotation_commutative(self):
        book1 = Book.objects.annotate(adjusted_rating=F('rating') + 2).get(pk=self.b1.pk)
        book2 = Book.objects.annotate(adjusted_rating=2 + F('rating')).get(pk=self.b1.pk)
        self.assertEqual(book1.adjusted_rating, book2.adjusted_rating)
        book1 = Book.objects.annotate(adjusted_rating=F('rating') + None).get(pk=self.b1.pk)
        book2 = Book.objects.annotate(adjusted_rating=None + F('rating')).get(pk=self.b1.pk)
        self.assertEqual(book1.adjusted_rating, book2.adjusted_rating)

    def test_update_with_annotation(self):
        book_preupdate = Book.objects.get(pk=self.b2.pk)
        Book.objects.annotate(other_rating=F('rating') - 1).update(rating=F('other_rating'))
        book_postupdate = Book.objects.get(pk=self.b2.pk)
        self.assertEqual(book_preupdate.rating - 1, book_postupdate.rating)

    def test_annotation_with_m2m(self):
        books = Book.objects.annotate(author_age=F('authors__age')).filter(pk=self.b1.pk).order_by('author_age')
        self.assertEqual(books[0].author_age, 34)
        self.assertEqual(books[1].author_age, 35)

    def test_annotation_reverse_m2m(self):
        books = Book.objects.annotate(
            store_name=F('store__name'),
        ).filter(
            name='Practical Django Projects',
        ).order_by('store_name')

        self.assertQuerysetEqual(
            books, [
                'Amazon.com',
                'Books.com',
                'Mamma and Pappa\'s Books'
            ],
            lambda b: b.store_name
        )

    def test_values_annotation(self):
        """"""
        Annotations can reference fields in a values clause,
        and contribute to an existing values clause.
        """"""
        # annotate references a field in values()
        qs = Book.objects.values('rating').annotate(other_rating=F('rating') - 1)
        book = qs.get(pk=self.b1.pk)
        self.assertEqual(book['rating'] - 1, book['other_rating'])

        # filter refs the annotated value
        book = qs.get(other_rating=4)
        self.assertEqual(book['other_rating'], 4)

        # can annotate an existing values with a new field
        book = qs.annotate(other_isbn=F('isbn')).get(other_rating=4)
        self.assertEqual(book['other_rating'], 4)
        self.assertEqual(book['other_isbn'], '155860191')

    def test_values_with_pk_annotation(self):
        # annotate references a field in values() with pk
        publishers = Publisher.objects.values('id', 'book__rating').annotate(total=Sum('book__rating'))
        for publisher in publishers.filter(pk=self.p1.pk):
            self.assertEqual(publisher['book__rating'], publisher['total'])

    @skipUnlessDBFeature('allows_group_by_pk')
    def test_rawsql_group_by_collapse(self):
        raw = RawSQL('SELECT MIN(id) FROM annotations_book', [])
        qs = Author.objects.values('id').annotate(
            min_book_id=raw,
            count_friends=Count('friends'),
        ).order_by()
        _, _, group_by = qs.query.get_compiler(using='default').pre_sql_setup()
        self.assertEqual(len(group_by), 1)
        self.assertNotEqual(raw, group_by[0])

    def test_defer_annotation(self):
        """"""
        Deferred attributes can be referenced by an annotation,
        but they are not themselves deferred, and cannot be deferred.
        """"""
        qs = Book.objects.defer('rating').annotate(other_rating=F('rating') - 1)

        with self.assertNumQueries(2):
            book = qs.get(other_rating=4)
            self.assertEqual(book.rating, 5)
            self.assertEqual(book.other_rating, 4)

        with self.assertRaisesMessage(FieldDoesNotExist, ""Book has no field named 'other_rating'""):
            book = qs.defer('other_rating').get(other_rating=4)

    def test_mti_annotations(self):
        """"""
        Fields on an inherited model can be referenced by an
        annotated field.
        """"""
        d = DepartmentStore.objects.create(
            name='Angus & Robinson',
            original_opening=datetime.date(2014, 3, 8),
            friday_night_closing=datetime.time(21, 00, 00),
            chain='Westfield'
        )

        books = Book.objects.filter(rating__gt=4)
        for b in books:
            d.books.add(b)

        qs = DepartmentStore.objects.annotate(
            other_name=F('name'),
            other_chain=F('chain'),
            is_open=Value(True, BooleanField()),
            book_isbn=F('books__isbn')
        ).order_by('book_isbn').filter(chain='Westfield')

        self.assertQuerysetEqual(
            qs, [
                ('Angus & Robinson', 'Westfield', True, '155860191'),
                ('Angus & Robinson', 'Westfield', True, '159059725')
            ],
            lambda d: (d.other_name, d.other_chain, d.is_open, d.book_isbn)
        )

    def test_null_annotation(self):
        """"""
        Annotating None onto a model round-trips
        """"""
        book = Book.objects.annotate(no_value=Value(None, output_field=IntegerField())).first()
        self.assertIsNone(book.no_value)

    def test_order_by_annotation(self):
        authors = Author.objects.annotate(other_age=F('age')).order_by('other_age')
        self.assertQuerysetEqual(
            authors, [
                25, 29, 29, 34, 35, 37, 45, 46, 57,
            ],
            lambda a: a.other_age
        )

    def test_order_by_aggregate(self):
        authors = Author.objects.values('age').annotate(age_count=Count('age')).order_by('age_count', 'age')
        self.assertQuerysetEqual(
            authors, [
                (25, 1), (34, 1), (35, 1), (37, 1), (45, 1), (46, 1), (57, 1), (29, 2),
            ],
            lambda a: (a['age'], a['age_count'])
        )

    def test_raw_sql_with_inherited_field(self):
        DepartmentStore.objects.create(
            name='Angus & Robinson',
            original_opening=datetime.date(2014, 3, 8),
            friday_night_closing=datetime.time(21),
            chain='Westfield',
            area=123,
        )
        tests = (
            ('name', 'Angus & Robinson'),
            ('surface', 123),
            (""case when name='Angus & Robinson' then chain else name end"", 'Westfield'),
        )
        for sql, expected_result in tests:
            with self.subTest(sql=sql):
                self.assertSequenceEqual(
                    DepartmentStore.objects.annotate(
                        annotation=RawSQL(sql, ()),
                    ).values_list('annotation', flat=True),
                    [expected_result],
                )

    def test_annotate_exists(self):
        authors = Author.objects.annotate(c=Count('id')).filter(c__gt=1)
        self.assertFalse(authors.exists())

    def test_column_field_ordering(self):
        """"""
        Columns are aligned in the correct order for resolve_columns. This test
        will fail on MySQL if column ordering is out. Column fields should be
        aligned as:
        1. extra_select
        2. model_fields
        3. annotation_fields
        4. model_related_fields
        """"""
        store = Store.objects.first()
        Employee.objects.create(id=1, first_name='Max', manager=True, last_name='Paine',
                                store=store, age=23, salary=Decimal(50000.00))
        Employee.objects.create(id=2, first_name='Buffy', manager=False, last_name='Summers',
                                store=store, age=18, salary=Decimal(40000.00))

        qs = Employee.objects.extra(
            select={'random_value': '42'}
        ).select_related('store').annotate(
            annotated_value=Value(17),
        )

        rows = [
            (1, 'Max', True, 42, 'Paine', 23, Decimal(50000.00), store.name, 17),
            (2, 'Buffy', False, 42, 'Summers', 18, Decimal(40000.00), store.name, 17)
        ]

        self.assertQuerysetEqual(
            qs.order_by('id'), rows,
            lambda e: (
                e.id, e.first_name, e.manager, e.random_value, e.last_name, e.age,
                e.salary, e.store.name, e.annotated_value))

    def test_column_field_ordering_with_deferred(self):
        store = Store.objects.first()
        Employee.objects.create(id=1, first_name='Max', manager=True, last_name='Paine',
                                store=store, age=23, salary=Decimal(50000.00))
        Employee.objects.create(id=2, first_name='Buffy', manager=False, last_name='Summers',
                                store=store, age=18, salary=Decimal(40000.00))

        qs = Employee.objects.extra(
            select={'random_value': '42'}
        ).select_related('store').annotate(
            annotated_value=Value(17),
        )

        rows = [
            (1, 'Max', True, 42, 'Paine', 23, Decimal(50000.00), store.name, 17),
            (2, 'Buffy', False, 42, 'Summers', 18, Decimal(40000.00), store.name, 17)
        ]

        # and we respect deferred columns!
        self.assertQuerysetEqual(
            qs.defer('age').order_by('id'), rows,
            lambda e: (
                e.id, e.first_name, e.manager, e.random_value, e.last_name, e.age,
                e.salary, e.store.name, e.annotated_value))

    def test_custom_functions(self):
        Company(name='Apple', motto=None, ticker_name='APPL', description='Beautiful Devices').save()
        Company(name='Django Software Foundation', motto=None, ticker_name=None, description=None).save()
        Company(name='Google', motto='Do No Evil', ticker_name='GOOG', description='Internet Company').save()
        Company(name='Yahoo', motto=None, ticker_name=None, description='Internet Company').save()

        qs = Company.objects.annotate(
            tagline=Func(
                F('motto'),
                F('ticker_name'),
                F('description'),
                Value('No Tag'),
                function='COALESCE'
            )
        ).order_by('name')

        self.assertQuerysetEqual(
            qs, [
                ('Apple', 'APPL'),
                ('Django Software Foundation', 'No Tag'),
                ('Google', 'Do No Evil'),
                ('Yahoo', 'Internet Company')
            ],
            lambda c: (c.name, c.tagline)
        )

    def test_custom_functions_can_ref_other_functions(self):
        Company(name='Apple', motto=None, ticker_name='APPL', description='Beautiful Devices').save()
        Company(name='Django Software Foundation', motto=None, ticker_name=None, description=None).save()
        Company(name='Google', motto='Do No Evil', ticker_name='GOOG', description='Internet Company').save()
        Company(name='Yahoo', motto=None, ticker_name=None, description='Internet Company').save()

        class Lower(Func):
            function = 'LOWER'

        qs = Company.objects.annotate(
            tagline=Func(
                F('motto'),
                F('ticker_name'),
                F('description'),
                Value('No Tag'),
                function='COALESCE',
            )
        ).annotate(
            tagline_lower=Lower(F('tagline')),
        ).order_by('name')

        # LOWER function supported by:
        # oracle, postgres, mysql, sqlite, sqlserver

        self.assertQuerysetEqual(
            qs, [
                ('Apple', 'APPL'.lower()),
                ('Django Software Foundation', 'No Tag'.lower()),
                ('Google', 'Do No Evil'.lower()),
                ('Yahoo', 'Internet Company'.lower())
            ],
            lambda c: (c.name, c.tagline_lower)
        )

    def test_boolean_value_annotation(self):
        books = Book.objects.annotate(
            is_book=Value(True, output_field=BooleanField()),
            is_pony=Value(False, output_field=BooleanField()),
            is_none=Value(None, output_field=BooleanField(null=True)),
        )
        self.assertGreater(len(books), 0)
        for book in books:
            self.assertIs(book.is_book, True)
            self.assertIs(book.is_pony, False)
            self.assertIsNone(book.is_none)

    def test_annotation_in_f_grouped_by_annotation(self):
        qs = (
            Publisher.objects.annotate(multiplier=Value(3))
            # group by option => sum of value * multiplier
            .values('name')
            .annotate(multiplied_value_sum=Sum(F('multiplier') * F('num_awards')))
            .order_by()
        )
        self.assertCountEqual(
            qs, [
                {'multiplied_value_sum': 9, 'name': 'Apress'},
                {'multiplied_value_sum': 0, 'name': ""Jonno's House of Books""},
                {'multiplied_value_sum': 27, 'name': 'Morgan Kaufmann'},
                {'multiplied_value_sum': 21, 'name': 'Prentice Hall'},
                {'multiplied_value_sum': 3, 'name': 'Sams'},
            ]
        )

    def test_arguments_must_be_expressions(self):
        msg = 'QuerySet.annotate() received non-expression(s): %s.'
        with self.assertRaisesMessage(TypeError, msg % BooleanField()):
            Book.objects.annotate(BooleanField())
        with self.assertRaisesMessage(TypeError, msg % True):
            Book.objects.annotate(is_book=True)
        with self.assertRaisesMessage(TypeError, msg % ', '.join([str(BooleanField()), 'True'])):
            Book.objects.annotate(BooleanField(), Value(False), is_book=True)

    def test_chaining_annotation_filter_with_m2m(self):
        qs = Author.objects.filter(
            name='Adrian Holovaty',
            friends__age=35,
        ).annotate(
            jacob_name=F('friends__name'),
        ).filter(
            friends__age=29,
        ).annotate(
            james_name=F('friends__name'),
        ).values('jacob_name', 'james_name')
        self.assertCountEqual(
            qs,
            [{'jacob_name': 'Jacob Kaplan-Moss', 'james_name': 'James Bennett'}],
        )

    def test_annotation_filter_with_subquery(self):
        long_books_qs = Book.objects.filter(
            publisher=OuterRef('pk'),
            pages__gt=400,
        ).values('publisher').annotate(count=Count('pk')).values('count')
        publisher_books_qs = Publisher.objects.annotate(
            total_books=Count('book'),
        ).filter(
            total_books=Subquery(long_books_qs, output_field=IntegerField()),
        ).values('name')
        self.assertCountEqual(publisher_books_qs, [{'name': 'Sams'}, {'name': 'Morgan Kaufmann'}])

    def test_annotation_exists_aggregate_values_chaining(self):
        qs = Book.objects.values('publisher').annotate(
            has_authors=Exists(Book.authors.through.objects.filter(book=OuterRef('pk'))),
            max_pubdate=Max('pubdate'),
        ).values_list('max_pubdate', flat=True).order_by('max_pubdate')
        self.assertCountEqual(qs, [
            datetime.date(1991, 10, 15),
            datetime.date(2008, 3, 3),
            datetime.date(2008, 6, 23),
            datetime.date(2008, 11, 3),
        ])

    @skipUnlessDBFeature('supports_subqueries_in_group_by')
    def test_annotation_subquery_and_aggregate_values_chaining(self):
        qs = Book.objects.annotate(
            pub_year=ExtractYear('pubdate')
        ).values('pub_year').annotate(
            top_rating=Subquery(
                Book.objects.filter(
                    pubdate__year=OuterRef('pub_year')
                ).order_by('-rating').values('rating')[:1]
            ),
            total_pages=Sum('pages'),
        ).values('pub_year', 'total_pages', 'top_rating')
        self.assertCountEqual(qs, [
            {'pub_year': 1991, 'top_rating': 5.0, 'total_pages': 946},
            {'pub_year': 1995, 'top_rating': 4.0, 'total_pages': 1132},
            {'pub_year': 2007, 'top_rating': 4.5, 'total_pages': 447},
            {'pub_year': 2008, 'top_rating': 4.0, 'total_pages': 1178},
        ])

    def test_annotation_subquery_outerref_transform(self):
        qs = Book.objects.annotate(
            top_rating_year=Subquery(
                Book.objects.filter(
                    pubdate__year=OuterRef('pubdate__year')
                ).order_by('-rating').values('rating')[:1]
            ),
        ).values('pubdate__year', 'top_rating_year')
        self.assertCountEqual(qs, [
            {'pubdate__year': 1991, 'top_rating_year': 5.0},
            {'pubdate__year': 1995, 'top_rating_year': 4.0},
            {'pubdate__year': 2007, 'top_rating_year': 4.5},
            {'pubdate__year': 2008, 'top_rating_year': 4.0},
            {'pubdate__year': 2008, 'top_rating_year': 4.0},
            {'pubdate__year': 2008, 'top_rating_year': 4.0},
        ])

    def test_annotation_aggregate_with_m2o(self):
        qs = Author.objects.filter(age__lt=30).annotate(
            max_pages=Case(
                When(book_contact_set__isnull=True, then=Value(0)),
                default=Max(F('book__pages')),
            ),
        ).values('name', 'max_pages')
        self.assertCountEqual(qs, [
            {'name': 'James Bennett', 'max_pages': 300},
            {'name': 'Paul Bissex', 'max_pages': 0},
            {'name': 'Wesley J. Chun', 'max_pages': 0},
        ])",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2011 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2012 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2013 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2014 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2015 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2016 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2017 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2018 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 41 2004 46 2005 46 2019 46 2020 40 2004 46 2011 44 2004 46 2013 41 2004 46 2011 46 2019 46 2020 40 2004 46 2005 44 2004 46 2016 41 2004 46 2013 46 2019 46 2020 40 2004 46 2005 41 2004 46 2014 46 2019 46 2020 40 2004 46 2015 44 2004 46 2016 41 2004 46 2015 46 2019 46 2020 40 2004 46 2014 44 2004 46 2016 41 2004 46 2016 46 2019 46 2020 40 2004 46 2011 44 2004 46 2014 44 2004 46 2015 41 2004 46 2017 46 2019 46 2020 40 2004 46 2018 41 2004 46 2018 46 2019 46 2020 40 2004 46 2017 41 2004 46 2021 61 2022 46 2007 46 2008 40 2009 61 648 44 2023 61 1502 41 2004 46 2024 61 2022 46 2007 46 2008 40 2009 61 648 44 2023 61 1501 41 2004 46 2025 61 2022 46 2007 46 2008 40 2009 61 648 44 2023 61 1502 41 2004 46 2026 61 2022 46 2007 46 2008 40 2009 61 648 44 2023 61 1502 41 2004 46 2027 61 2022 46 2007 46 2008 40 2009 61 648 44 2023 61 1500 41 2004 46 2028 61 2029 46 2007 46 2008 40 2030 61 648 44 2009 61 648 44 2031 61 1504 44 2032 61 1502 44 2033 61 2034 40 648 41 44 2035 61 2004 46 2005 44 2036 61 2004 46 2021 44 2037 61 2038 46 2039 40 1505 44 1503 44 1502 41 41 2004 46 2040 61 2029 46 2007 46 2008 40 2030 61 648 44 2009 61 648 44 2031 61 1504 44 2032 61 1502 44 2033 61 2034 40 648 41 44 2035 61 2004 46 2012 44 2036 61 2004 46 2024 44 2037 61 2038 46 2039 40 1505 44 1502 44 1502 41 41 2004 46 2041 61 2029 46 2007 46 2008 40 2030 61 648 44 2009 61 648 44 2031 61 1504 44 2032 61 1502 44 2033 61 2034 40 648 41 44 2035 61 2004 46 2013 44 2036 61 2004 46 2021 44 2037 61 2038 46 2039 40 1505 44 1502 44 1503 41 41 2004 46 2042 61 2029 46 2007 46 2008 40 2030 61 648 44 2009 61 648 44 2031 61 1504 44 2032 61 1502 44 2033 61 2034 40 648 41 44 2035 61 2004 46 2014 44 2036 61 2004 46 2025 44 2037 61 2038 46 2039 40 1505 44 1503 44 1502 41 41 2004 46 2043 61 2029 46 2007 46 2008 40 2030 61 648 44 2009 61 648 44 2031 61 1505 44 2032 61 1502 44 2033 61 2034 40 648 41 44 2035 61 2004 46 2017 44 2036 61 2004 46 2025 44 2037 61 2038 46 2039 40 1505 44 1501 44 1503 41 41 2004 46 2044 61 2029 46 2007 46 2008 40 2030 61 648 44 2009 61 648 44 2031 61 1504 44 2032 61 1502 44 2033 61 2034 40 648 41 44 2035 61 2004 46 2017 44 2036 61 2004 46 2026 44 2037 61 2038 46 2039 40 1505 44 1502 44 1503 41 41 2004 46 2028 46 2045 46 2020 40 2004 46 2005 44 2004 46 2011 41 2004 46 2040 46 2045 46 2020 40 2004 46 2012 41 2004 46 2041 46 2045 46 2020 40 2004 46 2013 41 2004 46 2042 46 2045 46 2020 40 2004 46 2014 44 2004 46 2015 44 2004 46 2016 41 2004 46 2043 46 2045 46 2020 40 2004 46 2017 44 2004 46 2018 41 2004 46 2044 46 2045 46 2020 40 2004 46 2017 41 2004 46 2046 61 2047 46 2007 46 2008 40 2009 61 648 44 2048 61 2038 46 2038 40 1505 44 1502 44 1503 44 1502 44 1503 44 1503 41 44 2049 61 2038 46 2050 40 1503 44 1503 44 1503 41 41 2004 46 2051 61 2047 46 2007 46 2008 40 2009 61 648 44 2048 61 2038 46 2038 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 44 2049 61 2038 46 2050 40 1503 44 1503 44 1503 41 41 2004 46 2052 61 2047 46 2007 46 2008 40 2009 61 648 44 2048 61 2038 46 2038 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 44 2049 61 2038 46 2050 40 1503 44 1503 41 41 2004 46 2046 46 2053 46 2020 40 2004 46 2028 44 2004 46 2040 44 2004 46 2041 44 2004 46 2042 44 2004 46 2043 44 2004 46 2044 41 2004 46 2051 46 2053 46 2020 40 2004 46 2028 44 2004 46 2041 44 2004 46 2043 44 2004 46 2044 41 2004 46 2052 46 2053 46 2020 40 2004 46 2041 44 2004 46 2042 44 2004 46 2044 41 348 2054 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2057 61 2058 40 1501 41 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2057 44 1501 41 348 2061 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2062 61 2063 40 648 41 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2062 44 2059 46 2032 41 348 2064 40 2055 41 58 2053 61 2029 46 2007 46 2065 40 648 41 46 2056 40 2023 61 2063 40 648 41 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2023 44 2059 46 2036 46 2023 41 348 2066 40 2055 41 58 2067 46 2007 46 2068 40 91 2067 40 2069 61 648 44 2070 61 648 44 2010 61 1503 44 2071 61 2055 46 2046 44 2072 61 1506 44 41 44 2067 40 2069 61 648 44 2070 61 648 44 2010 61 1503 44 2071 61 2055 46 2051 44 2072 61 1506 44 41 44 2067 40 2069 61 648 44 2070 61 648 44 2010 61 1503 44 2071 61 2055 46 2052 44 2072 61 1506 44 41 44 93 41 2073 61 2067 46 2007 46 2056 40 2074 61 2063 40 648 41 44 41 385 2075 398 2073 58 2055 46 2060 40 2075 46 2074 44 2075 46 2071 46 2048 46 2076 44 41 348 2077 40 2055 41 58 497 2078 40 2079 44 2080 41 58 2053 61 2029 46 2007 46 2056 40 2081 61 2063 40 648 41 41 2055 46 2082 40 2053 46 2083 40 648 44 648 41 44 91 40 2055 46 2028 46 2084 44 1503 41 44 40 2055 46 2040 46 2084 44 1503 41 44 40 2055 46 2041 46 2084 44 1503 41 44 40 2055 46 2042 46 2084 44 1503 41 44 40 2055 46 2043 46 2084 44 1503 41 44 40 2055 46 2044 46 2084 44 1503 41 44 93 41 348 2085 40 2055 41 58 2086 46 2007 46 2008 40 2009 61 648 41 2086 46 2007 46 2008 40 2009 61 648 41 497 2078 40 2087 44 2088 41 44 2078 40 2087 44 2089 41 58 385 2090 398 91 2089 40 648 41 44 2063 40 648 41 93 58 497 2055 46 2091 40 2090 61 2090 41 58 2055 46 2092 40 2086 46 2007 46 2056 40 2093 61 2090 41 46 2094 40 648 44 648 41 44 91 123 648 58 648 44 648 58 1503 125 44 123 648 58 648 44 648 58 1502 125 44 93 44 41 348 2095 40 2055 41 58 2096 61 2038 46 2038 40 1505 44 1502 44 1503 44 1503 44 1500 44 1500 41 2097 61 2038 46 2098 40 2099 61 1501 41 2100 61 2038 46 2038 40 1505 44 1502 44 1503 44 1503 44 1500 44 1500 41 43 2097 2101 46 2007 46 2008 40 2102 61 2096 44 2097 61 2097 41 2103 61 2101 46 2007 46 2056 40 2100 61 2104 40 2063 40 648 41 43 2063 40 648 41 44 2105 61 2106 40 41 41 41 46 2107 40 41 2055 46 2060 40 2103 46 2100 44 2100 41 348 2108 40 2055 41 58 2109 61 2055 46 2028 2110 61 2029 46 2007 46 2056 40 2111 61 2104 40 2063 40 648 41 43 2063 40 648 41 44 2105 61 2112 40 41 41 41 46 2113 40 2030 61 2109 46 2030 41 2111 61 404 40 2109 46 2031 43 2109 46 2032 41 2055 46 2060 40 2110 46 2111 44 2111 41 348 2114 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2115 61 2104 40 2116 40 2117 61 91 93 41 44 2105 61 2118 40 41 41 41 2055 46 2060 40 2119 40 2053 41 44 2029 46 2007 46 2120 40 41 41 2055 46 2121 40 2122 40 422 2059 46 2115 385 2059 398 2053 41 41 2053 61 2029 46 2007 46 2056 40 2115 61 2104 40 2116 40 2117 61 2029 46 2007 46 2123 40 41 41 44 2105 61 2118 40 41 41 41 2055 46 2060 40 2119 40 2053 41 44 2029 46 2007 46 2120 40 41 41 2055 46 2121 40 2122 40 422 2059 46 2115 385 2059 398 2053 41 41 348 2124 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2115 61 2104 40 126 2116 40 2117 61 91 93 41 44 2105 61 2118 40 41 41 44 41 2055 46 2060 40 2119 40 2053 41 44 2029 46 2007 46 2120 40 41 41 2055 46 2121 40 2122 40 2059 46 2115 385 2059 398 2053 41 41 348 2125 40 2055 41 58 2126 61 2029 46 2007 46 2127 40 2030 61 648 41 46 2056 40 2115 61 2104 40 126 2116 40 2117 61 91 93 41 44 2105 61 2118 40 41 41 44 2128 61 2129 40 648 41 44 41 2055 46 2060 40 91 2059 46 2128 385 2059 398 2126 93 44 91 1501 93 41 348 2130 40 2055 41 58 2126 61 2029 46 2007 46 2056 40 2115 61 2104 40 126 2116 40 2117 61 91 93 41 44 2105 61 2118 40 41 41 44 41 46 2131 40 2132 40 648 41 41 2055 46 2060 40 2126 91 648 93 44 2029 46 2007 46 2120 40 41 41 348 2133 40 2055 41 58 2126 61 2006 46 2007 46 2056 40 362 61 2134 40 2006 46 2007 46 2094 40 648 41 46 2123 40 41 41 41 2055 46 2135 40 2126 46 2107 40 41 46 362 41 348 2136 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2057 61 2058 40 1501 41 44 2128 61 2129 40 648 41 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2057 44 1501 41 2055 46 2060 40 2059 46 2128 44 1501 41 348 2137 40 2055 41 58 2059 61 2029 46 2007 46 2056 40 2111 61 2104 40 2058 40 1502 41 42 2058 40 1502 41 44 2105 61 2112 40 41 41 44 2128 61 2129 40 648 41 44 41 46 2107 40 41 2055 46 2060 40 2059 46 2111 44 1503 41 2055 46 2060 40 2059 46 2128 44 1501 41 348 2138 40 2055 41 58 2059 61 2029 46 2007 46 2127 40 2030 61 648 41 46 2056 40 2111 61 2104 40 2063 40 648 41 42 2063 40 648 41 44 2105 61 2139 40 41 41 44 2128 61 2129 40 648 41 44 41 46 2107 40 41 2055 46 2060 40 2059 46 2111 44 1506 41 2055 46 2060 40 2059 46 2128 44 1501 41 64 2140 40 648 41 348 2141 40 2055 41 58 2059 61 2029 46 2007 46 2127 40 2030 61 648 41 46 2056 40 2142 61 2104 40 2116 40 2143 61 304 41 44 2105 61 2118 40 41 44 41 44 2128 61 2129 40 648 41 44 41 46 2107 40 41 2055 46 2144 40 2059 46 2142 44 302 41 2055 46 2060 40 2059 46 2128 44 1501 41 64 2140 40 648 41 348 2145 40 2055 41 58 2045 61 2006 46 2007 46 2056 40 2146 61 2104 40 2116 40 2147 61 1503 41 44 2105 61 2118 40 41 41 44 41 46 2094 40 648 41 46 2056 40 2148 61 2129 40 648 41 44 41 46 2094 40 648 44 648 41 2055 46 2092 40 2045 44 91 123 648 58 302 44 648 58 1502 125 44 123 648 58 304 44 648 58 1502 125 44 93 41 348 2149 40 2055 41 58 2150 61 2006 46 2007 46 2056 40 2151 61 2063 40 648 41 41 46 2131 40 2152 61 2132 40 648 41 41 2153 61 2006 46 2007 46 2131 40 2154 61 2132 40 648 41 41 2055 46 2060 40 2150 91 648 93 44 2153 91 648 93 41 64 2140 40 648 41 348 2155 40 2055 41 58 2071 61 2047 46 2007 46 2008 40 2009 61 648 44 2048 61 2038 46 2038 46 2156 40 41 44 2049 61 2038 46 2050 40 1503 44 1500 44 1500 41 44 41 2157 61 91 648 44 648 44 648 44 648 44 648 44 93 385 2009 398 2157 58 2067 46 2007 46 2008 40 2071 61 2071 44 2069 61 2009 46 2158 40 41 91 1500 93 44 2070 61 2009 46 2158 40 41 91 1501 93 44 2010 61 1503 44 2072 61 1505 44 41 2159 61 2067 46 2007 46 2056 40 2160 61 2161 40 648 41 44 41 46 2162 40 648 41 2055 46 2060 40 123 2163 46 2070 385 2163 398 2159 125 44 123 648 44 648 125 41 2055 46 2060 40 2119 40 2159 41 44 1502 41 2164 61 2067 46 2007 46 2056 40 2165 61 2063 40 648 41 44 41 46 2162 40 648 41 2055 46 2060 40 2119 40 2164 41 44 1501 41 2166 61 2067 46 2007 46 2056 40 2167 61 2089 40 648 41 44 41 46 2162 40 648 41 46 2083 40 648 44 2168 61 304 41 2055 46 2092 40 2166 44 91 1502 44 1502 44 1502 93 41 348 2169 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2057 61 2058 40 1501 41 41 46 2127 40 2057 61 1501 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2057 44 1501 41 348 2170 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2171 61 2063 40 648 41 41 46 2127 40 2171 61 1502 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2171 44 1502 41 348 2172 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2171 61 2063 40 648 41 41 46 2127 40 2171 61 2063 40 648 41 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2171 44 2059 46 2032 41 348 2173 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2174 61 2132 40 648 41 41 46 2127 40 2174 61 2063 40 648 41 41 385 2059 398 2053 58 2055 46 2060 40 2059 46 2174 44 2059 46 2032 41 348 2175 40 2055 41 58 497 2055 46 2176 40 2177 44 648 41 58 411 40 2029 46 2007 46 2056 40 2174 61 2132 40 648 41 41 46 2127 40 2174 61 2063 40 648 41 41 41 348 2178 40 2055 41 58 2072 61 2034 40 1502 41 638 45 2067 46 2179 46 2180 40 648 41 46 2181 2067 46 2007 46 2008 40 2069 61 648 44 2070 61 648 44 2071 61 2047 46 2007 46 2107 40 41 44 2010 61 1503 44 2072 61 2072 44 41 2055 46 2060 40 2067 46 2007 46 2056 40 2182 61 2063 40 648 41 47 1502 41 46 2113 40 41 46 2182 44 2072 47 1502 44 41 348 2183 40 2055 41 58 2126 61 2029 46 2007 46 2056 40 2184 61 2063 40 648 41 43 1501 41 46 2127 40 2184 61 2034 40 1503 41 41 46 2083 40 648 41 2055 46 2060 40 2126 46 2113 40 41 44 40 2034 40 1503 41 44 41 41 348 2185 40 2055 41 58 2186 61 2029 46 2007 46 2056 40 2187 61 2063 40 648 41 43 1502 41 46 2113 40 2084 61 2055 46 2028 46 2084 41 2188 61 2029 46 2007 46 2056 40 2187 61 1502 43 2063 40 648 41 41 46 2113 40 2084 61 2055 46 2028 46 2084 41 2055 46 2060 40 2186 46 2187 44 2188 46 2187 41 2186 61 2029 46 2007 46 2056 40 2187 61 2063 40 648 41 43 303 41 46 2113 40 2084 61 2055 46 2028 46 2084 41 2188 61 2029 46 2007 46 2056 40 2187 61 303 43 2063 40 648 41 41 46 2113 40 2084 61 2055 46 2028 46 2084 41 2055 46 2060 40 2186 46 2187 44 2188 46 2187 41 348 2189 40 2055 41 58 2190 61 2029 46 2007 46 2113 40 2084 61 2055 46 2040 46 2084 41 2029 46 2007 46 2056 40 2171 61 2063 40 648 41 45 1501 41 46 2191 40 2032 61 2063 40 648 41 41 2192 61 2029 46 2007 46 2113 40 2084 61 2055 46 2040 46 2084 41 2055 46 2060 40 2190 46 2032 45 1501 44 2192 46 2032 41 348 2193 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2194 61 2063 40 648 41 41 46 2127 40 2084 61 2055 46 2028 46 2084 41 46 2195 40 648 41 2055 46 2060 40 2053 91 1500 93 46 2194 44 1503 41 2055 46 2060 40 2053 91 1501 93 46 2194 44 1503 41 348 2196 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2197 61 2063 40 648 41 44 41 46 2127 40 2009 61 648 44 41 46 2195 40 648 41 2055 46 2198 40 2053 44 91 648 44 648 44 648 93 44 409 2110 58 2110 46 2197 41 348 2199 40 2055 41 58 648 621 2126 61 2029 46 2007 46 2094 40 648 41 46 2056 40 2171 61 2063 40 648 41 45 1501 41 2059 61 2126 46 2113 40 2084 61 2055 46 2028 46 2084 41 2055 46 2060 40 2059 91 648 93 45 1501 44 2059 91 648 93 41 621 2059 61 2126 46 2113 40 2171 61 1502 41 2055 46 2060 40 2059 91 648 93 44 1502 41 621 2059 61 2126 46 2056 40 2200 61 2063 40 648 41 41 46 2113 40 2171 61 1502 41 2055 46 2060 40 2059 91 648 93 44 1502 41 2055 46 2060 40 2059 91 648 93 44 648 41 348 2201 40 2055 41 58 621 2202 61 2022 46 2007 46 2094 40 648 44 648 41 46 2056 40 2203 61 2132 40 648 41 41 385 2036 398 2202 46 2127 40 2084 61 2055 46 2021 46 2084 41 58 2055 46 2060 40 2036 91 648 93 44 2036 91 648 93 41 64 2140 40 648 41 348 2204 40 2055 41 58 2205 61 2206 40 648 44 91 93 41 2126 61 2006 46 2007 46 2094 40 648 41 46 2056 40 2207 61 2205 44 2208 61 2129 40 648 41 44 41 46 2195 40 41 2209 44 2209 44 2210 61 2126 46 2211 46 2212 40 489 61 648 41 46 2213 40 41 2055 46 2060 40 2119 40 2210 41 44 1501 41 2055 46 2214 40 2205 44 2210 91 1500 93 41 348 2215 40 2055 41 58 648 2126 61 2029 46 2007 46 2216 40 648 41 46 2056 40 2171 61 2063 40 648 41 45 1501 41 497 2055 46 2217 40 1502 41 58 2059 61 2126 46 2113 40 2171 61 1502 41 2055 46 2060 40 2059 46 2032 44 1502 41 2055 46 2060 40 2059 46 2171 44 1502 41 497 2055 46 2176 40 2218 44 648 41 58 2059 61 2126 46 2216 40 648 41 46 2113 40 2171 61 1502 41 348 2219 40 2055 41 58 648 2220 61 2221 46 2007 46 2008 40 2009 61 648 44 2048 61 2038 46 2039 40 1505 44 1502 44 1502 41 44 2049 61 2038 46 2050 40 1503 44 1500 44 1500 41 44 2222 61 648 41 2053 61 2029 46 2007 46 2127 40 2223 61 1502 41 385 2110 398 2053 58 2220 46 2053 46 2020 40 2110 41 2126 61 2221 46 2007 46 2056 40 2224 61 2063 40 648 41 44 2225 61 2063 40 648 41 44 2226 61 2058 40 304 44 2118 40 41 41 44 2227 61 2063 40 648 41 41 46 2195 40 648 41 46 2127 40 2222 61 648 41 2055 46 2198 40 2126 44 91 40 648 44 648 44 304 44 648 41 44 40 648 44 648 44 304 44 648 41 93 44 409 2220 58 40 2220 46 2224 44 2220 46 2225 44 2220 46 2226 44 2220 46 2227 41 41 348 2228 40 2055 41 58 648 2059 61 2029 46 2007 46 2056 40 2229 61 2058 40 303 44 2105 61 2112 40 41 41 41 46 2107 40 41 2055 46 2135 40 2059 46 2229 41 348 2230 40 2055 41 58 2045 61 2006 46 2007 46 2056 40 2151 61 2063 40 648 41 41 46 2195 40 648 41 2055 46 2198 40 2045 44 91 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 93 44 409 2231 58 2231 46 2151 41 348 2232 40 2055 41 58 2045 61 2006 46 2007 46 2094 40 648 41 46 2056 40 2233 61 2129 40 648 41 41 46 2195 40 648 44 648 41 2055 46 2198 40 2045 44 91 40 1503 44 1501 41 44 40 1503 44 1501 41 44 40 1503 44 1501 41 44 40 1503 44 1501 41 44 40 1503 44 1501 41 44 40 1503 44 1501 41 44 40 1503 44 1501 41 44 40 1503 44 1502 41 44 93 44 409 2231 58 40 2231 91 648 93 44 2231 91 648 93 41 41 348 2234 40 2055 41 58 2221 46 2007 46 2008 40 2009 61 648 44 2048 61 2038 46 2039 40 1505 44 1502 44 1502 41 44 2049 61 2038 46 2050 40 1503 41 44 2222 61 648 44 2235 61 1504 44 41 2236 61 40 40 648 44 648 41 44 40 648 44 1504 41 44 40 648 44 648 41 44 41 385 2237 44 2238 398 2236 58 497 2055 46 2091 40 2237 61 2237 41 58 2055 46 2082 40 2221 46 2007 46 2056 40 2239 61 2206 40 2237 44 40 41 41 44 41 46 2083 40 648 44 2168 61 304 41 44 91 2238 93 44 41 348 2240 40 2055 41 58 2045 61 2006 46 2007 46 2056 40 2241 61 2129 40 648 41 41 46 2127 40 2242 61 1501 41 2055 46 2243 40 2045 46 2244 40 41 41 348 2245 40 2055 41 58 648 2071 61 2047 46 2007 46 2107 40 41 2067 46 2007 46 2008 40 2246 61 1501 44 2069 61 648 44 2247 61 304 44 2070 61 648 44 2071 61 2071 44 2010 61 1503 44 2072 61 2034 40 1506 41 41 2067 46 2007 46 2008 40 2246 61 1502 44 2069 61 648 44 2247 61 302 44 2070 61 648 44 2071 61 2071 44 2010 61 1503 44 2072 61 2034 40 1506 41 41 2126 61 2067 46 2007 46 2248 40 2249 61 123 648 58 648 125 41 46 2065 40 648 41 46 2056 40 2250 61 2058 40 1503 41 44 41 2251 61 91 40 1501 44 648 44 304 44 1503 44 648 44 1503 44 2034 40 1506 41 44 2071 46 2009 44 1503 41 44 40 1502 44 648 44 302 44 1503 44 648 44 1503 44 2034 40 1506 41 44 2071 46 2009 44 1503 41 93 2055 46 2198 40 2126 46 2195 40 648 41 44 2251 44 409 2252 58 40 2252 46 2246 44 2252 46 2069 44 2252 46 2247 44 2252 46 2253 44 2252 46 2070 44 2252 46 2010 44 2252 46 2072 44 2252 46 2071 46 2009 44 2252 46 2250 41 41 348 2254 40 2055 41 58 2071 61 2047 46 2007 46 2107 40 41 2067 46 2007 46 2008 40 2246 61 1501 44 2069 61 648 44 2247 61 304 44 2070 61 648 44 2071 61 2071 44 2010 61 1503 44 2072 61 2034 40 1506 41 41 2067 46 2007 46 2008 40 2246 61 1502 44 2069 61 648 44 2247 61 302 44 2070 61 648 44 2071 61 2071 44 2010 61 1503 44 2072 61 2034 40 1506 41 41 2126 61 2067 46 2007 46 2248 40 2249 61 123 648 58 648 125 41 46 2065 40 648 41 46 2056 40 2250 61 2058 40 1503 41 44 41 2251 61 91 40 1501 44 648 44 304 44 1503 44 648 44 1503 44 2034 40 1506 41 44 2071 46 2009 44 1503 41 44 40 1502 44 648 44 302 44 1503 44 648 44 1503 44 2034 40 1506 41 44 2071 46 2009 44 1503 41 93 621 2055 46 2198 40 2126 46 2216 40 648 41 46 2195 40 648 41 44 2251 44 409 2252 58 40 2252 46 2246 44 2252 46 2069 44 2252 46 2247 44 2252 46 2253 44 2252 46 2070 44 2252 46 2010 44 2252 46 2072 44 2252 46 2071 46 2009 44 2252 46 2250 41 41 348 2255 40 2055 41 58 2086 40 2009 61 648 44 2256 61 303 44 2257 61 648 44 2258 61 648 41 46 2259 40 41 2086 40 2009 61 648 44 2256 61 303 44 2257 61 303 44 2258 61 303 41 46 2259 40 41 2086 40 2009 61 648 44 2256 61 648 44 2257 61 648 44 2258 61 648 41 46 2259 40 41 2086 40 2009 61 648 44 2256 61 303 44 2257 61 303 44 2258 61 648 41 46 2259 40 41 2126 61 2086 46 2007 46 2056 40 2260 61 2261 40 2063 40 648 41 44 2063 40 648 41 44 2063 40 648 41 44 2058 40 648 41 44 389 61 648 41 41 46 2195 40 648 41 2055 46 2198 40 2126 44 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 409 2241 58 40 2241 46 2009 44 2241 46 2260 41 41 348 2262 40 2055 41 58 2086 40 2009 61 648 44 2256 61 303 44 2257 61 648 44 2258 61 648 41 46 2259 40 41 2086 40 2009 61 648 44 2256 61 303 44 2257 61 303 44 2258 61 303 41 46 2259 40 41 2086 40 2009 61 648 44 2256 61 648 44 2257 61 648 44 2258 61 648 41 46 2259 40 41 2086 40 2009 61 648 44 2256 61 303 44 2257 61 303 44 2258 61 648 41 46 2259 40 41 334 2161 40 2261 41 58 389 61 648 2126 61 2086 46 2007 46 2056 40 2260 61 2261 40 2063 40 648 41 44 2063 40 648 41 44 2063 40 648 41 44 2058 40 648 41 44 389 61 648 44 41 41 46 2056 40 2263 61 2161 40 2063 40 648 41 41 44 41 46 2195 40 648 41 621 621 2055 46 2198 40 2126 44 91 40 648 44 648 46 2264 40 41 41 44 40 648 44 648 46 2264 40 41 41 44 40 648 44 648 46 2264 40 41 41 44 40 648 44 648 46 2264 40 41 41 93 44 409 2241 58 40 2241 46 2009 44 2241 46 2263 41 41 348 2265 40 2055 41 58 2053 61 2029 46 2007 46 2056 40 2057 61 2058 40 304 44 2105 61 2118 40 41 41 44 2266 61 2058 40 302 44 2105 61 2118 40 41 41 44 2267 61 2058 40 303 44 2105 61 2118 40 424 61 304 41 41 44 41 2055 46 2268 40 2119 40 2053 41 44 1500 41 385 2059 398 2053 58 2055 46 2144 40 2059 46 2057 44 304 41 2055 46 2144 40 2059 46 2266 44 302 41 2055 46 2135 40 2059 46 2267 41 348 2269 40 2055 41 58 2126 61 40 2022 46 2007 46 2056 40 2270 61 2058 40 1502 41 41 621 46 2094 40 648 41 46 2056 40 2271 61 2132 40 2063 40 648 41 42 2063 40 648 41 41 41 46 2195 40 41 41 2055 46 2092 40 2126 44 91 123 648 58 1502 44 648 58 648 125 44 123 648 58 1500 44 648 58 648 125 44 123 648 58 1503 44 648 58 648 125 44 123 648 58 1503 44 648 58 648 125 44 123 648 58 1502 44 648 58 648 125 44 93 41 348 2272 40 2055 41 58 2273 61 648 497 2055 46 2176 40 2274 44 2273 37 2118 40 41 41 58 2029 46 2007 46 2056 40 2118 40 41 41 497 2055 46 2176 40 2274 44 2273 37 304 41 58 2029 46 2007 46 2056 40 2057 61 304 41 497 2055 46 2176 40 2274 44 2273 37 648 46 2275 40 91 2276 40 2118 40 41 41 44 648 93 41 41 58 2029 46 2007 46 2056 40 2118 40 41 44 2058 40 302 41 44 2057 61 304 41 348 2277 40 2055 41 58 2126 61 2006 46 2007 46 2127 40 2009 61 648 44 2278 61 1503 44 41 46 2056 40 2279 61 2063 40 648 41 44 41 46 2127 40 2278 61 1503 44 41 46 2056 40 2280 61 2063 40 648 41 44 41 46 2094 40 648 44 648 41 2055 46 2092 40 2126 44 91 123 648 58 648 44 648 58 648 125 93 44 41 348 2281 40 2055 41 58 2282 61 2029 46 2007 46 2127 40 2036 61 2283 40 648 41 44 2284 61 1504 44 41 46 2094 40 648 41 46 2056 40 2120 61 2129 40 648 41 41 46 2094 40 648 41 2285 61 2022 46 2007 46 2056 40 2286 61 2129 40 648 41 44 41 46 2127 40 2286 61 2134 40 2282 44 2105 61 2112 40 41 41 44 41 46 2094 40 648 41 2055 46 2092 40 2285 44 91 123 648 58 648 125 44 123 648 58 648 125 93 41 348 2287 40 2055 41 58 2126 61 2029 46 2007 46 2094 40 648 41 46 2056 40 2288 61 2289 40 2029 46 2045 46 2290 46 2007 46 2127 40 2059 61 2283 40 648 41 41 41 44 2291 61 2292 40 648 41 44 41 46 2083 40 648 44 2168 61 304 41 46 2195 40 648 41 2055 46 2092 40 2126 44 91 2038 46 2039 40 1505 44 1502 44 1503 41 44 2038 46 2039 40 1505 44 1502 44 1502 41 44 2038 46 2039 40 1505 44 1502 44 1503 41 44 2038 46 2039 40 1505 44 1503 44 1502 41 44 93 41 64 2140 40 648 41 348 2293 40 2055 41 58 2126 61 2029 46 2007 46 2056 40 2294 61 2295 40 648 41 41 46 2094 40 648 41 46 2056 40 2296 61 2134 40 2029 46 2007 46 2127 40 2297 61 2283 40 648 41 41 46 2195 40 648 41 46 2094 40 648 41 91 58 1501 93 41 44 2298 61 2132 40 648 41 44 41 46 2094 40 648 44 648 44 648 41 2055 46 2092 40 2126 44 91 123 648 58 1505 44 648 58 1502 44 648 58 1504 125 44 123 648 58 1505 44 648 58 1502 44 648 58 1505 125 44 123 648 58 1505 44 648 58 1502 44 648 58 1504 125 44 123 648 58 1505 44 648 58 1502 44 648 58 1505 125 44 93 41 348 2299 40 2055 41 58 2126 61 2029 46 2007 46 2056 40 2300 61 2134 40 2029 46 2007 46 2127 40 2297 61 2283 40 648 41 41 46 2195 40 648 41 46 2094 40 648 41 91 58 1501 93 41 44 41 46 2094 40 648 44 648 41 2055 46 2092 40 2126 44 91 123 648 58 1505 44 648 58 1502 125 44 123 648 58 1505 44 648 58 1502 125 44 123 648 58 1505 44 648 58 1502 125 44 123 648 58 1505 44 648 58 1502 125 44 123 648 58 1505 44 648 58 1502 125 44 123 648 58 1505 44 648 58 1502 125 44 93 41 348 2301 40 2055 41 58 2126 61 2006 46 2007 46 2127 40 2147 61 1503 41 46 2056 40 2302 61 2303 40 2304 40 2305 61 304 44 2306 61 2058 40 1500 41 41 44 349 61 2292 40 2063 40 648 41 41 44 41 44 41 46 2094 40 648 44 648 41 2055 46 2092 40 2126 44 91 123 648 58 648 44 648 58 1504 125 44 123 648 58 648 44 648 58 1500 125 44 123 648 58 648 44 648 58 1500 125 44 93 41 
131761,Python,"class WriterTests(SimpleTestCase):
    """"""
    Tests the migration writer (makes migration files from Migration instances)
    """"""
    class NestedEnum(enum.IntEnum):
        A = 1
        B = 2

    class NestedChoices(models.TextChoices):
        X = 'X', 'X value'
        Y = 'Y', 'Y value'

    def safe_exec(self, string, value=None):
        d = {}
        try:
            exec(string, globals(), d)
        except Exception as e:
            if value:
                self.fail(""Could not exec %r (from value %r): %s"" % (string.strip(), value, e))
            else:
                self.fail(""Could not exec %r: %s"" % (string.strip(), e))
        return d

    def serialize_round_trip(self, value):
        string, imports = MigrationWriter.serialize(value)
        return self.safe_exec(""%s\ntest_value_result = %s"" % (""\n"".join(imports), string), value)['test_value_result']

    def assertSerializedEqual(self, value):
        self.assertEqual(self.serialize_round_trip(value), value)

    def assertSerializedResultEqual(self, value, target):
        self.assertEqual(MigrationWriter.serialize(value), target)

    def assertSerializedFieldEqual(self, value):
        new_value = self.serialize_round_trip(value)
        self.assertEqual(value.__class__, new_value.__class__)
        self.assertEqual(value.max_length, new_value.max_length)
        self.assertEqual(value.null, new_value.null)
        self.assertEqual(value.unique, new_value.unique)

    def test_serialize_numbers(self):
        self.assertSerializedEqual(1)
        self.assertSerializedEqual(1.2)
        self.assertTrue(math.isinf(self.serialize_round_trip(float(""inf""))))
        self.assertTrue(math.isinf(self.serialize_round_trip(float(""-inf""))))
        self.assertTrue(math.isnan(self.serialize_round_trip(float(""nan""))))

        self.assertSerializedEqual(decimal.Decimal('1.3'))
        self.assertSerializedResultEqual(
            decimal.Decimal('1.3'),
            (""Decimal('1.3')"", {'from decimal import Decimal'})
        )

        self.assertSerializedEqual(Money('1.3'))
        self.assertSerializedResultEqual(
            Money('1.3'),
            (""migrations.test_writer.Money('1.3')"", {'import migrations.test_writer'})
        )

    def test_serialize_constants(self):
        self.assertSerializedEqual(None)
        self.assertSerializedEqual(True)
        self.assertSerializedEqual(False)

    def test_serialize_strings(self):
        self.assertSerializedEqual(b""foobar"")
        string, imports = MigrationWriter.serialize(b""foobar"")
        self.assertEqual(string, ""b'foobar'"")
        self.assertSerializedEqual(""föobár"")
        string, imports = MigrationWriter.serialize(""foobar"")
        self.assertEqual(string, ""'foobar'"")

    def test_serialize_multiline_strings(self):
        self.assertSerializedEqual(b""foo\nbar"")
        string, imports = MigrationWriter.serialize(b""foo\nbar"")
        self.assertEqual(string, ""b'foo\\nbar'"")
        self.assertSerializedEqual(""föo\nbár"")
        string, imports = MigrationWriter.serialize(""foo\nbar"")
        self.assertEqual(string, ""'foo\\nbar'"")

    def test_serialize_collections(self):
        self.assertSerializedEqual({1: 2})
        self.assertSerializedEqual([""a"", 2, True, None])
        self.assertSerializedEqual({2, 3, ""eighty""})
        self.assertSerializedEqual({""lalalala"": [""yeah"", ""no"", ""maybe""]})
        self.assertSerializedEqual(_('Hello'))

    def test_serialize_builtin_types(self):
        self.assertSerializedEqual([list, tuple, dict, set, frozenset])
        self.assertSerializedResultEqual(
            [list, tuple, dict, set, frozenset],
            (""[list, tuple, dict, set, frozenset]"", set())
        )

    def test_serialize_lazy_objects(self):
        pattern = re.compile(r'^foo$')
        lazy_pattern = SimpleLazyObject(lambda: pattern)
        self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)

    def test_serialize_enums(self):
        self.assertSerializedResultEqual(
            TextEnum.A,
            (""migrations.test_writer.TextEnum['A']"", {'import migrations.test_writer'})
        )
        self.assertSerializedResultEqual(
            TextTranslatedEnum.A,
            (""migrations.test_writer.TextTranslatedEnum['A']"", {'import migrations.test_writer'})
        )
        self.assertSerializedResultEqual(
            BinaryEnum.A,
            (""migrations.test_writer.BinaryEnum['A']"", {'import migrations.test_writer'})
        )
        self.assertSerializedResultEqual(
            IntEnum.B,
            (""migrations.test_writer.IntEnum['B']"", {'import migrations.test_writer'})
        )
        self.assertSerializedResultEqual(
            self.NestedEnum.A,
            (
                ""migrations.test_writer.WriterTests.NestedEnum['A']"",
                {'import migrations.test_writer'},
            ),
        )
        self.assertSerializedEqual(self.NestedEnum.A)

        field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.CharField(choices=[""
            ""('a-value', migrations.test_writer.TextEnum['A']), ""
            ""('value-b', migrations.test_writer.TextEnum['B'])], ""
            ""default=migrations.test_writer.TextEnum['B'])""
        )
        field = models.CharField(
            default=TextTranslatedEnum.A,
            choices=[(m.value, m) for m in TextTranslatedEnum],
        )
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.CharField(choices=[""
            ""('a-value', migrations.test_writer.TextTranslatedEnum['A']), ""
            ""('value-b', migrations.test_writer.TextTranslatedEnum['B'])], ""
            ""default=migrations.test_writer.TextTranslatedEnum['A'])""
        )
        field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.CharField(choices=[""
            ""(b'a-value', migrations.test_writer.BinaryEnum['A']), ""
            ""(b'value-b', migrations.test_writer.BinaryEnum['B'])], ""
            ""default=migrations.test_writer.BinaryEnum['B'])""
        )
        field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.IntegerField(choices=[""
            ""(1, migrations.test_writer.IntEnum['A']), ""
            ""(2, migrations.test_writer.IntEnum['B'])], ""
            ""default=migrations.test_writer.IntEnum['A'])""
        )

    def test_serialize_choices(self):
        class TextChoices(models.TextChoices):
            A = 'A', 'A value'
            B = 'B', 'B value'

        class IntegerChoices(models.IntegerChoices):
            A = 1, 'One'
            B = 2, 'Two'

        class DateChoices(datetime.date, models.Choices):
            DATE_1 = 1969, 7, 20, 'First date'
            DATE_2 = 1969, 11, 19, 'Second date'

        self.assertSerializedResultEqual(TextChoices.A, (""'A'"", set()))
        self.assertSerializedResultEqual(IntegerChoices.A, ('1', set()))
        self.assertSerializedResultEqual(
            DateChoices.DATE_1,
            ('datetime.date(1969, 7, 20)', {'import datetime'}),
        )
        field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.CharField(choices=[('A', 'A value'), ('B', 'B value')], ""
            ""default='B')"",
        )
        field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices.choices)
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)"",
        )
        field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices.choices)
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.DateField(choices=[""
            ""(datetime.date(1969, 7, 20), 'First date'), ""
            ""(datetime.date(1969, 11, 19), 'Second date')], ""
            ""default=datetime.date(1969, 11, 19))""
        )

    def test_serialize_nested_class(self):
        for nested_cls in [self.NestedEnum, self.NestedChoices]:
            cls_name = nested_cls.__name__
            with self.subTest(cls_name):
                self.assertSerializedResultEqual(
                    nested_cls,
                    (
                        ""migrations.test_writer.WriterTests.%s"" % cls_name,
                        {'import migrations.test_writer'},
                    ),
                )

    def test_serialize_uuid(self):
        self.assertSerializedEqual(uuid.uuid1())
        self.assertSerializedEqual(uuid.uuid4())

        uuid_a = uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')
        uuid_b = uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')
        self.assertSerializedResultEqual(
            uuid_a,
            (""uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')"", {'import uuid'})
        )
        self.assertSerializedResultEqual(
            uuid_b,
            (""uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')"", {'import uuid'})
        )

        field = models.UUIDField(choices=((uuid_a, 'UUID A'), (uuid_b, 'UUID B')), default=uuid_a)
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(
            string,
            ""models.UUIDField(choices=[""
            ""(uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'), 'UUID A'), ""
            ""(uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2'), 'UUID B')], ""
            ""default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))""
        )

    def test_serialize_pathlib(self):
        # Pure path objects work in all platforms.
        self.assertSerializedEqual(pathlib.PurePosixPath())
        self.assertSerializedEqual(pathlib.PureWindowsPath())
        path = pathlib.PurePosixPath('/path/file.txt')
        expected = (""pathlib.PurePosixPath('/path/file.txt')"", {'import pathlib'})
        self.assertSerializedResultEqual(path, expected)
        path = pathlib.PureWindowsPath('A:\\File.txt')
        expected = (""pathlib.PureWindowsPath('A:/File.txt')"", {'import pathlib'})
        self.assertSerializedResultEqual(path, expected)
        # Concrete path objects work on supported platforms.
        if sys.platform == 'win32':
            self.assertSerializedEqual(pathlib.WindowsPath.cwd())
            path = pathlib.WindowsPath('A:\\File.txt')
            expected = (""pathlib.PureWindowsPath('A:/File.txt')"", {'import pathlib'})
            self.assertSerializedResultEqual(path, expected)
        else:
            self.assertSerializedEqual(pathlib.PosixPath.cwd())
            path = pathlib.PosixPath('/path/file.txt')
            expected = (""pathlib.PurePosixPath('/path/file.txt')"", {'import pathlib'})
            self.assertSerializedResultEqual(path, expected)

        field = models.FilePathField(path=pathlib.PurePosixPath('/home/user'))
        string, imports = MigrationWriter.serialize(field)
        self.assertEqual(
            string,
            ""models.FilePathField(path=pathlib.PurePosixPath('/home/user'))"",
        )
        self.assertIn('import pathlib', imports)

    def test_serialize_path_like(self):
        with os.scandir(os.path.dirname(__file__)) as entries:
            path_like = list(entries)[0]
        expected = (repr(path_like.path), {})
        self.assertSerializedResultEqual(path_like, expected)

        field = models.FilePathField(path=path_like)
        string = MigrationWriter.serialize(field)[0]
        self.assertEqual(string, 'models.FilePathField(path=%r)' % path_like.path)

    def test_serialize_functions(self):
        with self.assertRaisesMessage(ValueError, 'Cannot serialize function: lambda'):
            self.assertSerializedEqual(lambda x: 42)
        self.assertSerializedEqual(models.SET_NULL)
        string, imports = MigrationWriter.serialize(models.SET(42))
        self.assertEqual(string, 'models.SET(42)')
        self.serialize_round_trip(models.SET(42))

    def test_serialize_datetime(self):
        self.assertSerializedEqual(datetime.datetime.now())
        self.assertSerializedEqual(datetime.datetime.now)
        self.assertSerializedEqual(datetime.datetime.today())
        self.assertSerializedEqual(datetime.datetime.today)
        self.assertSerializedEqual(datetime.date.today())
        self.assertSerializedEqual(datetime.date.today)
        self.assertSerializedEqual(datetime.datetime.now().time())
        self.assertSerializedEqual(datetime.datetime(2014, 1, 1, 1, 1, tzinfo=get_default_timezone()))
        self.assertSerializedEqual(datetime.datetime(2013, 12, 31, 22, 1, tzinfo=get_fixed_timezone(180)))
        self.assertSerializedResultEqual(
            datetime.datetime(2014, 1, 1, 1, 1),
            (""datetime.datetime(2014, 1, 1, 1, 1)"", {'import datetime'})
        )
        for tzinfo in (utc, datetime.timezone.utc):
            with self.subTest(tzinfo=tzinfo):
                self.assertSerializedResultEqual(
                    datetime.datetime(2012, 1, 1, 1, 1, tzinfo=tzinfo),
                    (
                        ""datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc)"",
                        {'import datetime', 'from django.utils.timezone import utc'},
                    )
                )

        self.assertSerializedResultEqual(
            datetime.datetime(2012, 1, 1, 2, 1, tzinfo=zoneinfo.ZoneInfo('Europe/Paris')),
            (
                ""datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc)"",
                {'import datetime', 'from django.utils.timezone import utc'},
            )
        )
        if pytz:
            self.assertSerializedResultEqual(
                pytz.timezone('Europe/Paris').localize(datetime.datetime(2012, 1, 1, 2, 1)),
                (
                    ""datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc)"",
                    {'import datetime', 'from django.utils.timezone import utc'},
                )
            )

    def test_serialize_fields(self):
        self.assertSerializedFieldEqual(models.CharField(max_length=255))
        self.assertSerializedResultEqual(
            models.CharField(max_length=255),
            (""models.CharField(max_length=255)"", {""from django.db import models""})
        )
        self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))
        self.assertSerializedResultEqual(
            models.TextField(null=True, blank=True),
            (""models.TextField(blank=True, null=True)"", {'from django.db import models'})
        )

    def test_serialize_settings(self):
        self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, ""AUTH_USER_MODEL""))
        self.assertSerializedResultEqual(
            SettingsReference(""someapp.model"", ""AUTH_USER_MODEL""),
            (""settings.AUTH_USER_MODEL"", {""from django.conf import settings""})
        )

    def test_serialize_iterators(self):
        self.assertSerializedResultEqual(
            ((x, x * x) for x in range(3)),
            (""((0, 0), (1, 1), (2, 4))"", set())
        )

    def test_serialize_compiled_regex(self):
        """"""
        Make sure compiled regex can be serialized.
        """"""
        regex = re.compile(r'^\w+$')
        self.assertSerializedEqual(regex)

    def test_serialize_class_based_validators(self):
        """"""
        Ticket #22943: Test serialization of class-based validators, including
        compiled regexes.
        """"""
        validator = RegexValidator(message=""hello"")
        string = MigrationWriter.serialize(validator)[0]
        self.assertEqual(string, ""django.core.validators.RegexValidator(message='hello')"")
        self.serialize_round_trip(validator)

        # Test with a compiled regex.
        validator = RegexValidator(regex=re.compile(r'^\w+$'))
        string = MigrationWriter.serialize(validator)[0]
        self.assertEqual(string, ""django.core.validators.RegexValidator(regex=re.compile('^\\\\w+$'))"")
        self.serialize_round_trip(validator)

        # Test a string regex with flag
        validator = RegexValidator(r'^[0-9]+$', flags=re.S)
        string = MigrationWriter.serialize(validator)[0]
        self.assertEqual(string, ""django.core.validators.RegexValidator('^[0-9]+$', flags=re.RegexFlag['DOTALL'])"")
        self.serialize_round_trip(validator)

        # Test message and code
        validator = RegexValidator('^[-a-zA-Z0-9_]+$', 'Invalid', 'invalid')
        string = MigrationWriter.serialize(validator)[0]
        self.assertEqual(string, ""django.core.validators.RegexValidator('^[-a-zA-Z0-9_]+$', 'Invalid', 'invalid')"")
        self.serialize_round_trip(validator)

        # Test with a subclass.
        validator = EmailValidator(message=""hello"")
        string = MigrationWriter.serialize(validator)[0]
        self.assertEqual(string, ""django.core.validators.EmailValidator(message='hello')"")
        self.serialize_round_trip(validator)

        validator = deconstructible(path=""migrations.test_writer.EmailValidator"")(EmailValidator)(message=""hello"")
        string = MigrationWriter.serialize(validator)[0]
        self.assertEqual(string, ""migrations.test_writer.EmailValidator(message='hello')"")

        validator = deconstructible(path=""custom.EmailValidator"")(EmailValidator)(message=""hello"")
        with self.assertRaisesMessage(ImportError, ""No module named 'custom'""):
            MigrationWriter.serialize(validator)

        validator = deconstructible(path=""django.core.validators.EmailValidator2"")(EmailValidator)(message=""hello"")
        with self.assertRaisesMessage(ValueError, ""Could not find object EmailValidator2 in django.core.validators.""):
            MigrationWriter.serialize(validator)

    def test_serialize_empty_nonempty_tuple(self):
        """"""
        Ticket #22679: makemigrations generates invalid code for (an empty
        tuple) default_permissions = ()
        """"""
        empty_tuple = ()
        one_item_tuple = ('a',)
        many_items_tuple = ('a', 'b', 'c')
        self.assertSerializedEqual(empty_tuple)
        self.assertSerializedEqual(one_item_tuple)
        self.assertSerializedEqual(many_items_tuple)

    def test_serialize_range(self):
        string, imports = MigrationWriter.serialize(range(1, 5))
        self.assertEqual(string, 'range(1, 5)')
        self.assertEqual(imports, set())

    def test_serialize_builtins(self):
        string, imports = MigrationWriter.serialize(range)
        self.assertEqual(string, 'range')
        self.assertEqual(imports, set())

    def test_serialize_unbound_method_reference(self):
        """"""An unbound method used within a class body can be serialized.""""""
        self.serialize_round_trip(TestModel1.thing)

    def test_serialize_local_function_reference(self):
        """"""A reference in a local scope can't be serialized.""""""
        class TestModel2:
            def upload_to(self):
                return ""somewhere dynamic""
            thing = models.FileField(upload_to=upload_to)

        with self.assertRaisesMessage(ValueError, 'Could not find function upload_to in migrations.test_writer'):
            self.serialize_round_trip(TestModel2.thing)

    def test_serialize_managers(self):
        self.assertSerializedEqual(models.Manager())
        self.assertSerializedResultEqual(
            FoodQuerySet.as_manager(),
            ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})
        )
        self.assertSerializedEqual(FoodManager('a', 'b'))
        self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))

    def test_serialize_frozensets(self):
        self.assertSerializedEqual(frozenset())
        self.assertSerializedEqual(frozenset(""let it go""))

    def test_serialize_set(self):
        self.assertSerializedEqual(set())
        self.assertSerializedResultEqual(set(), ('set()', set()))
        self.assertSerializedEqual({'a'})
        self.assertSerializedResultEqual({'a'}, (""{'a'}"", set()))

    def test_serialize_timedelta(self):
        self.assertSerializedEqual(datetime.timedelta())
        self.assertSerializedEqual(datetime.timedelta(minutes=42))

    def test_serialize_functools_partial(self):
        value = functools.partial(datetime.timedelta, 1, seconds=2)
        result = self.serialize_round_trip(value)
        self.assertEqual(result.func, value.func)
        self.assertEqual(result.args, value.args)
        self.assertEqual(result.keywords, value.keywords)

    def test_serialize_functools_partialmethod(self):
        value = functools.partialmethod(datetime.timedelta, 1, seconds=2)
        result = self.serialize_round_trip(value)
        self.assertIsInstance(result, functools.partialmethod)
        self.assertEqual(result.func, value.func)
        self.assertEqual(result.args, value.args)
        self.assertEqual(result.keywords, value.keywords)

    def test_serialize_type_none(self):
        self.assertSerializedEqual(type(None))

    def test_serialize_type_model(self):
        self.assertSerializedEqual(models.Model)
        self.assertSerializedResultEqual(
            MigrationWriter.serialize(models.Model),
            (""('models.Model', {'from django.db import models'})"", set()),
        )

    def test_simple_migration(self):
        """"""
        Tests serializing a simple migration.
        """"""
        fields = {
            'charfield': models.DateTimeField(default=datetime.datetime.now),
            'datetimefield': models.DateTimeField(default=datetime.datetime.now),
        }

        options = {
            'verbose_name': 'My model',
            'verbose_name_plural': 'My models',
        }

        migration = type(""Migration"", (migrations.Migration,), {
            ""operations"": [
                migrations.CreateModel(""MyModel"", tuple(fields.items()), options, (models.Model,)),
                migrations.CreateModel(""MyModel2"", tuple(fields.items()), bases=(models.Model,)),
                migrations.CreateModel(
                    name=""MyModel3"", fields=tuple(fields.items()), options=options, bases=(models.Model,)
                ),
                migrations.DeleteModel(""MyModel""),
                migrations.AddField(""OtherModel"", ""datetimefield"", fields[""datetimefield""]),
            ],
            ""dependencies"": [(""testapp"", ""some_other_one"")],
        })
        writer = MigrationWriter(migration)
        output = writer.as_string()
        # We don't test the output formatting - that's too fragile.
        # Just make sure it runs for now, and that things look alright.
        result = self.safe_exec(output)
        self.assertIn(""Migration"", result)

    def test_migration_path(self):
        test_apps = [
            'migrations.migrations_test_apps.normal',
            'migrations.migrations_test_apps.with_package_model',
            'migrations.migrations_test_apps.without_init_file',
        ]

        base_dir = os.path.dirname(os.path.dirname(__file__))

        for app in test_apps:
            with self.modify_settings(INSTALLED_APPS={'append': app}):
                migration = migrations.Migration('0001_initial', app.split('.')[-1])
                expected_path = os.path.join(base_dir, *(app.split('.') + ['migrations', '0001_initial.py']))
                writer = MigrationWriter(migration)
                self.assertEqual(writer.path, expected_path)

    def test_custom_operation(self):
        migration = type(""Migration"", (migrations.Migration,), {
            ""operations"": [
                custom_migration_operations.operations.TestOperation(),
                custom_migration_operations.operations.CreateModel(),
                migrations.CreateModel(""MyModel"", (), {}, (models.Model,)),
                custom_migration_operations.more_operations.TestOperation()
            ],
            ""dependencies"": []
        })
        writer = MigrationWriter(migration)
        output = writer.as_string()
        result = self.safe_exec(output)
        self.assertIn(""custom_migration_operations"", result)
        self.assertNotEqual(
            result['custom_migration_operations'].operations.TestOperation,
            result['custom_migration_operations'].more_operations.TestOperation
        )

    def test_sorted_imports(self):
        """"""
        #24155 - Tests ordering of imports.
        """"""
        migration = type(""Migration"", (migrations.Migration,), {
            ""operations"": [
                migrations.AddField(""mymodel"", ""myfield"", models.DateTimeField(
                    default=datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),
                )),
            ]
        })
        writer = MigrationWriter(migration)
        output = writer.as_string()
        self.assertIn(
            ""import datetime\n""
            ""from django.db import migrations, models\n""
            ""from django.utils.timezone import utc\n"",
            output
        )

    def test_migration_file_header_comments(self):
        """"""
        Test comments at top of file.
        """"""
        migration = type(""Migration"", (migrations.Migration,), {
            ""operations"": []
        })
        dt = datetime.datetime(2015, 7, 31, 4, 40, 0, 0, tzinfo=utc)
        with mock.patch('django.db.migrations.writer.now', lambda: dt):
            for include_header in (True, False):
                with self.subTest(include_header=include_header):
                    writer = MigrationWriter(migration, include_header)
                    output = writer.as_string()

                    self.assertEqual(
                        include_header,
                        output.startswith(
                            ""# Generated by Django %s on 2015-07-31 04:40\n\n"" % get_version()
                        )
                    )
                    if not include_header:
                        # Make sure the output starts with something that's not
                        # a comment or indentation or blank line
                        self.assertRegex(output.splitlines(keepends=True)[0], r""^[^#\s]+"")

    def test_models_import_omitted(self):
        """"""
        django.db.models shouldn't be imported if unused.
        """"""
        migration = type(""Migration"", (migrations.Migration,), {
            ""operations"": [
                migrations.AlterModelOptions(
                    name='model',
                    options={'verbose_name': 'model', 'verbose_name_plural': 'models'},
                ),
            ]
        })
        writer = MigrationWriter(migration)
        output = writer.as_string()
        self.assertIn(""from django.db import migrations\n"", output)

    def test_deconstruct_class_arguments(self):
        # Yes, it doesn't make sense to use a class as a default for a
        # CharField. It does make sense for custom fields though, for example
        # an enumfield that takes the enum class as an argument.
        string = MigrationWriter.serialize(models.CharField(default=DeconstructibleInstances))[0]
        self.assertEqual(string, ""models.CharField(default=migrations.test_writer.DeconstructibleInstances)"")

    def test_register_serializer(self):
        class ComplexSerializer(BaseSerializer):
            def serialize(self):
                return 'complex(%r)' % self.value, {}

        MigrationWriter.register_serializer(complex, ComplexSerializer)
        self.assertSerializedEqual(complex(1, 2))
        MigrationWriter.unregister_serializer(complex)
        with self.assertRaisesMessage(ValueError, 'Cannot serialize: (1+2j)'):
            self.assertSerializedEqual(complex(1, 2))

    def test_register_non_serializer(self):
        with self.assertRaisesMessage(ValueError, ""'TestModel1' must inherit from 'BaseSerializer'.""):
            MigrationWriter.register_serializer(complex, TestModel1)",1,334 2000 40 2001 41 58 648 334 2002 40 370 46 2003 41 58 2004 61 1501 2005 61 1502 334 2006 40 2007 46 2008 41 58 2009 61 648 44 648 2010 61 648 44 648 348 2011 40 2012 44 461 44 2013 61 303 41 58 2014 61 123 125 474 58 2015 40 461 44 2016 40 41 44 2014 41 374 2017 311 2018 58 392 2013 58 2012 46 2019 40 648 37 40 461 46 2020 40 41 44 2013 44 2018 41 41 360 58 2012 46 2019 40 648 37 40 461 46 2020 40 41 44 2018 41 41 450 2014 348 2021 40 2012 44 2013 41 58 461 44 2022 61 2023 46 2024 40 2013 41 450 2012 46 2011 40 648 37 40 648 46 2025 40 2022 41 44 461 41 44 2013 41 91 648 93 348 2026 40 2012 44 2013 41 58 2012 46 2027 40 2012 46 2021 40 2013 41 44 2013 41 348 2028 40 2012 44 2013 44 2029 41 58 2012 46 2027 40 2023 46 2024 40 2013 41 44 2029 41 348 2030 40 2012 44 2013 41 58 2031 61 2012 46 2021 40 2013 41 2012 46 2027 40 2013 46 2032 44 2031 46 2032 41 2012 46 2027 40 2013 46 2033 44 2031 46 2033 41 2012 46 2027 40 2013 46 424 44 2031 46 424 41 2012 46 2027 40 2013 46 2034 44 2031 46 2034 41 348 2035 40 2012 41 58 2012 46 2026 40 1501 41 2012 46 2026 40 1502 41 2012 46 2036 40 2037 46 2038 40 2012 46 2021 40 384 40 648 41 41 41 41 2012 46 2036 40 2037 46 2038 40 2012 46 2021 40 384 40 648 41 41 41 41 2012 46 2036 40 2037 46 2039 40 2012 46 2021 40 384 40 648 41 41 41 41 2012 46 2026 40 345 46 2040 40 648 41 41 2012 46 2028 40 345 46 2040 40 648 41 44 40 648 44 123 648 125 41 41 2012 46 2026 40 2041 40 648 41 41 2012 46 2028 40 2041 40 648 41 44 40 648 44 123 648 125 41 41 348 2042 40 2012 41 58 2012 46 2026 40 303 41 2012 46 2026 40 304 41 2012 46 2026 40 302 41 348 2043 40 2012 41 58 2012 46 2026 40 648 41 461 44 2022 61 2023 46 2024 40 648 41 2012 46 2027 40 461 44 648 41 2012 46 2026 40 648 41 461 44 2022 61 2023 46 2024 40 648 41 2012 46 2027 40 461 44 648 41 348 2044 40 2012 41 58 2012 46 2026 40 648 41 461 44 2022 61 2023 46 2024 40 648 41 2012 46 2027 40 461 44 648 41 2012 46 2026 40 648 41 461 44 2022 61 2023 46 2024 40 648 41 2012 46 2027 40 461 44 648 41 348 2045 40 2012 41 58 2012 46 2026 40 123 1501 58 1502 125 41 2012 46 2026 40 91 648 44 1502 44 304 44 303 93 41 2012 46 2026 40 123 1502 44 1502 44 648 125 41 2012 46 2026 40 123 648 58 91 648 44 648 44 648 93 125 41 2012 46 2026 40 2046 40 648 41 41 348 2047 40 2012 41 58 2012 46 2026 40 91 411 44 2048 44 2049 44 2050 44 2051 93 41 2012 46 2028 40 91 411 44 2048 44 2049 44 2050 44 2051 93 44 40 648 44 2050 40 41 41 41 348 2052 40 2012 41 58 2053 61 2054 46 2055 40 648 41 2056 61 2057 40 409 58 2053 41 2012 46 2027 40 2012 46 2021 40 2056 41 44 2053 41 348 2058 40 2012 41 58 2012 46 2028 40 2059 46 2004 44 40 648 44 123 648 125 41 41 2012 46 2028 40 2060 46 2004 44 40 648 44 123 648 125 41 41 2012 46 2028 40 2061 46 2004 44 40 648 44 123 648 125 41 41 2012 46 2028 40 2003 46 2005 44 40 648 44 123 648 125 41 41 2012 46 2028 40 2012 46 2002 46 2004 44 40 648 44 123 648 125 44 41 44 41 2012 46 2026 40 2012 46 2002 46 2004 41 2062 61 2007 46 2063 40 349 61 2059 46 2005 44 2064 61 91 40 2065 46 2013 44 2065 41 385 2065 398 2059 93 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 648 648 41 2062 61 2007 46 2063 40 349 61 2060 46 2004 44 2064 61 91 40 2065 46 2013 44 2065 41 385 2065 398 2060 93 44 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 648 648 41 2062 61 2007 46 2063 40 349 61 2061 46 2005 44 2064 61 91 40 2065 46 2013 44 2065 41 385 2065 398 2061 93 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 648 648 41 2062 61 2007 46 2066 40 349 61 2003 46 2004 44 2064 61 91 40 2065 46 2013 44 2065 41 385 2065 398 2003 93 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 648 648 41 348 2067 40 2012 41 58 334 2008 40 2007 46 2008 41 58 2004 61 648 44 648 2005 61 648 44 648 334 2068 40 2007 46 2068 41 58 2004 61 1501 44 648 2005 61 1502 44 648 334 2069 40 2070 46 2071 44 2007 46 2072 41 58 2073 61 1505 44 1502 44 1503 44 648 2074 61 1505 44 1503 44 1503 44 648 2012 46 2028 40 2008 46 2004 44 40 648 44 2050 40 41 41 41 2012 46 2028 40 2068 46 2004 44 40 648 44 2050 40 41 41 41 2012 46 2028 40 2069 46 2073 44 40 648 44 123 648 125 41 44 41 2062 61 2007 46 2063 40 349 61 2008 46 2005 44 2064 61 2008 46 2064 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 44 41 2062 61 2007 46 2066 40 349 61 2068 46 2005 44 2064 61 2068 46 2064 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 44 41 2062 61 2007 46 2075 40 349 61 2069 46 2074 44 2064 61 2069 46 2064 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 648 648 41 348 2076 40 2012 41 58 385 2077 398 91 2012 46 2002 44 2012 46 2006 93 58 2078 61 2077 46 2079 497 2012 46 2080 40 2078 41 58 2012 46 2028 40 2077 44 40 648 37 2078 44 123 648 125 44 41 44 41 348 2081 40 2012 41 58 2012 46 2026 40 2082 46 2083 40 41 41 2012 46 2026 40 2082 46 2084 40 41 41 2085 61 2082 46 2086 40 648 41 2087 61 2082 46 2086 40 648 41 2012 46 2028 40 2085 44 40 648 44 123 648 125 41 41 2012 46 2028 40 2087 44 40 648 44 123 648 125 41 41 2062 61 2007 46 2088 40 2064 61 40 40 2085 44 648 41 44 40 2087 44 648 41 41 44 349 61 2085 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 648 648 648 41 348 2089 40 2012 41 58 621 2012 46 2026 40 2090 46 2091 40 41 41 2012 46 2026 40 2090 46 2092 40 41 41 2093 61 2090 46 2091 40 648 41 2094 61 40 648 44 123 648 125 41 2012 46 2028 40 2093 44 2094 41 2093 61 2090 46 2092 40 648 41 2094 61 40 648 44 123 648 125 41 2012 46 2028 40 2093 44 2094 41 621 392 2095 46 2096 614 648 58 2012 46 2026 40 2090 46 2097 46 2098 40 41 41 2093 61 2090 46 2097 40 648 41 2094 61 40 648 44 123 648 125 41 2012 46 2028 40 2093 44 2094 41 360 58 2012 46 2026 40 2090 46 2099 46 2098 40 41 41 2093 61 2090 46 2099 40 648 41 2094 61 40 648 44 123 648 125 41 2012 46 2028 40 2093 44 2094 41 2062 61 2007 46 2100 40 2093 61 2090 46 2091 40 648 41 41 461 44 2022 61 2023 46 2024 40 2062 41 2012 46 2027 40 461 44 648 44 41 2012 46 2101 40 648 44 2022 41 348 2102 40 2012 41 58 497 2103 46 2104 40 2103 46 2093 46 2105 40 2106 41 41 311 2107 58 2108 61 411 40 2107 41 91 1500 93 2094 61 40 2109 40 2108 46 2093 41 44 123 125 41 2012 46 2028 40 2108 44 2094 41 2062 61 2007 46 2100 40 2093 61 2108 41 461 61 2023 46 2024 40 2062 41 91 1500 93 2012 46 2027 40 461 44 648 37 2108 46 2093 41 348 2110 40 2012 41 58 497 2012 46 2111 40 2112 44 648 41 58 2012 46 2026 40 409 2113 58 1503 41 2012 46 2026 40 2007 46 2114 41 461 44 2022 61 2023 46 2024 40 2007 46 2115 40 1503 41 41 2012 46 2027 40 461 44 648 41 2012 46 2021 40 2007 46 2115 40 1503 41 41 348 2116 40 2012 41 58 2012 46 2026 40 2070 46 2070 46 2117 40 41 41 2012 46 2026 40 2070 46 2070 46 2117 41 2012 46 2026 40 2070 46 2070 46 2118 40 41 41 2012 46 2026 40 2070 46 2070 46 2118 41 2012 46 2026 40 2070 46 2071 46 2118 40 41 41 2012 46 2026 40 2070 46 2071 46 2118 41 2012 46 2026 40 2070 46 2070 46 2117 40 41 46 2119 40 41 41 2012 46 2026 40 2070 46 2070 40 1505 44 1501 44 1501 44 1501 44 1501 44 2120 61 2121 40 41 41 41 2012 46 2026 40 2070 46 2070 40 1505 44 1503 44 1503 44 1503 44 1501 44 2120 61 2122 40 1504 41 41 41 2012 46 2028 40 2070 46 2070 40 1505 44 1501 44 1501 44 1501 44 1501 41 44 40 648 44 123 648 125 41 41 385 2120 398 40 2123 44 2070 46 2124 46 2123 41 58 497 2012 46 2080 40 2120 61 2120 41 58 2012 46 2028 40 2070 46 2070 40 1505 44 1501 44 1501 44 1501 44 1501 44 2120 61 2120 41 44 40 648 44 123 648 44 648 125 44 41 41 2012 46 2028 40 2070 46 2070 40 1505 44 1501 44 1501 44 1502 44 1501 44 2120 61 2125 46 2126 40 648 41 41 44 40 648 44 123 648 44 648 125 44 41 41 392 2127 58 2012 46 2028 40 2127 46 2124 40 648 41 46 2128 40 2070 46 2070 40 1505 44 1501 44 1501 44 1502 44 1501 41 41 44 40 648 44 123 648 44 648 125 44 41 41 348 2129 40 2012 41 58 2012 46 2030 40 2007 46 2063 40 2033 61 1504 41 41 2012 46 2028 40 2007 46 2063 40 2033 61 1504 41 44 40 648 44 123 648 125 41 41 2012 46 2030 40 2007 46 2130 40 424 61 304 44 2131 61 304 41 41 2012 46 2028 40 2007 46 2130 40 424 61 304 44 2131 61 304 41 44 40 648 44 123 648 125 41 41 348 2132 40 2012 41 58 2012 46 2026 40 2133 40 2134 46 2135 44 648 41 41 2012 46 2028 40 2133 40 648 44 648 41 44 40 648 44 123 648 125 41 41 348 2136 40 2012 41 58 2012 46 2028 40 40 40 2113 44 2113 42 2113 41 385 2113 398 2137 40 1502 41 41 44 40 648 44 2050 40 41 41 41 348 2138 40 2012 41 58 648 2139 61 2054 46 2055 40 648 41 2012 46 2026 40 2139 41 348 2140 40 2012 41 58 648 2141 61 2142 40 2143 61 648 41 461 61 2023 46 2024 40 2141 41 91 1500 93 2012 46 2027 40 461 44 648 41 2012 46 2021 40 2141 41 621 2141 61 2142 40 2139 61 2054 46 2055 40 648 41 41 461 61 2023 46 2024 40 2141 41 91 1500 93 2012 46 2027 40 461 44 648 41 2012 46 2021 40 2141 41 621 2141 61 2142 40 648 44 2144 61 2054 46 2145 41 461 61 2023 46 2024 40 2141 41 91 1500 93 2012 46 2027 40 461 44 648 41 2012 46 2021 40 2141 41 621 2141 61 2142 40 648 44 648 44 648 41 461 61 2023 46 2024 40 2141 41 91 1500 93 2012 46 2027 40 461 44 648 41 2012 46 2021 40 2141 41 621 2141 61 2146 40 2143 61 648 41 461 61 2023 46 2024 40 2141 41 91 1500 93 2012 46 2027 40 461 44 648 41 2012 46 2021 40 2141 41 2141 61 2147 40 2093 61 648 41 40 2146 41 40 2143 61 648 41 461 61 2023 46 2024 40 2141 41 91 1500 93 2012 46 2027 40 461 44 648 41 2141 61 2147 40 2093 61 648 41 40 2146 41 40 2143 61 648 41 497 2012 46 2111 40 2148 44 648 41 58 2023 46 2024 40 2141 41 2141 61 2147 40 2093 61 648 41 40 2146 41 40 2143 61 648 41 497 2012 46 2111 40 2112 44 648 41 58 2023 46 2024 40 2141 41 348 2149 40 2012 41 58 648 2150 61 40 41 2151 61 40 648 44 41 2152 61 40 648 44 648 44 648 41 2012 46 2026 40 2150 41 2012 46 2026 40 2151 41 2012 46 2026 40 2152 41 348 2153 40 2012 41 58 461 44 2022 61 2023 46 2024 40 2137 40 1501 44 1502 41 41 2012 46 2027 40 461 44 648 41 2012 46 2027 40 2022 44 2050 40 41 41 348 2154 40 2012 41 58 461 44 2022 61 2023 46 2024 40 2137 41 2012 46 2027 40 461 44 648 41 2012 46 2027 40 2022 44 2050 40 41 41 348 2155 40 2012 41 58 648 2012 46 2021 40 2156 46 2157 41 348 2158 40 2012 41 58 648 334 2159 58 348 2160 40 2012 41 58 450 648 2157 61 2007 46 2161 40 2160 61 2160 41 497 2012 46 2111 40 2112 44 648 41 58 2012 46 2021 40 2159 46 2157 41 348 2162 40 2012 41 58 2012 46 2026 40 2007 46 2163 40 41 41 2012 46 2028 40 2164 46 2165 40 41 44 40 648 44 123 648 125 41 41 2012 46 2026 40 2166 40 648 44 648 41 41 2012 46 2026 40 2166 40 648 44 648 44 2167 61 1502 44 2014 61 1502 41 41 348 2168 40 2012 41 58 2012 46 2026 40 2051 40 41 41 2012 46 2026 40 2051 40 648 41 41 348 2169 40 2012 41 58 2012 46 2026 40 2050 40 41 41 2012 46 2028 40 2050 40 41 44 40 648 44 2050 40 41 41 41 2012 46 2026 40 123 648 125 41 2012 46 2028 40 123 648 125 44 40 648 44 2050 40 41 41 41 348 2170 40 2012 41 58 2012 46 2026 40 2070 46 2171 40 41 41 2012 46 2026 40 2070 46 2171 40 2172 61 1503 41 41 348 2173 40 2012 41 58 2013 61 2174 46 2175 40 2070 46 2171 44 1501 44 2176 61 1502 41 2177 61 2012 46 2021 40 2013 41 2012 46 2027 40 2177 46 2178 44 2013 46 2178 41 2012 46 2027 40 2177 46 2179 44 2013 46 2179 41 2012 46 2027 40 2177 46 2180 44 2013 46 2180 41 348 2181 40 2012 41 58 2013 61 2174 46 2182 40 2070 46 2171 44 1501 44 2176 61 1502 41 2177 61 2012 46 2021 40 2013 41 2012 46 2183 40 2177 44 2174 46 2182 41 2012 46 2027 40 2177 46 2178 44 2013 46 2178 41 2012 46 2027 40 2177 46 2179 44 2013 46 2179 41 2012 46 2027 40 2177 46 2180 44 2013 46 2180 41 348 2184 40 2012 41 58 2012 46 2026 40 2185 40 303 41 41 348 2186 40 2012 41 58 2012 46 2026 40 2007 46 2187 41 2012 46 2028 40 2023 46 2024 40 2007 46 2187 41 44 40 648 44 2050 40 41 41 44 41 348 2188 40 2012 41 58 648 2189 61 123 648 58 2007 46 2190 40 349 61 2070 46 2070 46 2117 41 44 648 58 2007 46 2190 40 349 61 2070 46 2070 46 2117 41 44 125 2191 61 123 648 58 648 44 648 58 648 44 125 2192 61 2185 40 648 44 40 2193 46 2194 44 41 44 123 648 58 91 2193 46 2195 40 648 44 2048 40 2189 46 2196 40 41 41 44 2191 44 40 2007 46 2187 44 41 41 44 2193 46 2195 40 648 44 2048 40 2189 46 2196 40 41 41 44 2197 61 40 2007 46 2187 44 41 41 44 2193 46 2195 40 2198 61 648 44 2189 61 2048 40 2189 46 2196 40 41 41 44 2191 61 2191 44 2197 61 40 2007 46 2187 44 41 41 44 2193 46 2199 40 648 41 44 2193 46 2200 40 648 44 648 44 2189 91 648 93 41 44 93 44 648 58 91 40 648 44 648 41 93 44 125 41 2201 61 2023 40 2192 41 2202 61 2201 46 2203 40 41 621 621 2177 61 2012 46 2011 40 2202 41 2012 46 2101 40 648 44 2177 41 348 2204 40 2012 41 58 2205 61 91 648 44 648 44 648 44 93 2206 61 2103 46 2093 46 2105 40 2103 46 2093 46 2105 40 2106 41 41 385 2207 398 2205 58 497 2012 46 2208 40 2209 61 123 648 58 2207 125 41 58 2192 61 2193 46 2194 40 648 44 2207 46 2210 40 648 41 91 45 1501 93 41 2211 61 2103 46 2093 46 2025 40 2206 44 42 40 2207 46 2210 40 648 41 43 91 648 44 648 93 41 41 2201 61 2023 40 2192 41 2012 46 2027 40 2201 46 2093 44 2211 41 348 2212 40 2012 41 58 2192 61 2185 40 648 44 40 2193 46 2194 44 41 44 123 648 58 91 2213 46 2214 46 2215 40 41 44 2213 46 2214 46 2195 40 41 44 2193 46 2195 40 648 44 40 41 44 123 125 44 40 2007 46 2187 44 41 41 44 2213 46 2216 46 2215 40 41 93 44 648 58 91 93 125 41 2201 61 2023 40 2192 41 2202 61 2201 46 2203 40 41 2177 61 2012 46 2011 40 2202 41 2012 46 2101 40 648 44 2177 41 2012 46 2217 40 2177 91 648 93 46 2214 46 2215 44 2177 91 648 93 46 2216 46 2215 41 348 2218 40 2012 41 58 648 2192 61 2185 40 648 44 40 2193 46 2194 44 41 44 123 648 58 91 2193 46 2200 40 648 44 648 44 2007 46 2190 40 349 61 2070 46 2070 40 1505 44 1501 44 1501 44 1501 44 1501 44 2120 61 2123 41 44 41 41 44 93 125 41 2201 61 2023 40 2192 41 2202 61 2201 46 2203 40 41 2012 46 2101 40 648 648 648 44 2202 41 348 2219 40 2012 41 58 648 2192 61 2185 40 648 44 40 2193 46 2194 44 41 44 123 648 58 91 93 125 41 2220 61 2070 46 2070 40 1505 44 1502 44 1503 44 1502 44 1503 44 1500 44 1500 44 2120 61 2123 41 497 2221 46 2222 40 648 44 409 58 2220 41 58 385 2223 398 40 304 44 302 41 58 497 2012 46 2080 40 2223 61 2223 41 58 2201 61 2023 40 2192 44 2223 41 2202 61 2201 46 2203 40 41 2012 46 2027 40 2223 44 2202 46 2224 40 648 37 2225 40 41 41 41 392 422 2223 58 621 621 2012 46 2226 40 2202 46 2227 40 2228 61 304 41 91 1500 93 44 648 41 348 2229 40 2012 41 58 648 2192 61 2185 40 648 44 40 2193 46 2194 44 41 44 123 648 58 91 2193 46 2230 40 2198 61 648 44 2191 61 123 648 58 648 44 648 58 648 125 44 41 44 93 125 41 2201 61 2023 40 2192 41 2202 61 2201 46 2203 40 41 2012 46 2101 40 648 44 2202 41 348 2231 40 2012 41 58 621 621 621 461 61 2023 46 2024 40 2007 46 2063 40 349 61 2232 41 41 91 1500 93 2012 46 2027 40 461 44 648 41 348 2233 40 2012 41 58 334 2234 40 2235 41 58 348 2024 40 2012 41 58 450 648 37 2012 46 2013 44 123 125 2023 46 2236 40 2237 44 2234 41 2012 46 2026 40 2237 40 1501 44 1502 41 41 2023 46 2238 40 2237 41 497 2012 46 2111 40 2112 44 648 41 58 2012 46 2026 40 2237 40 1501 44 1502 41 41 348 2239 40 2012 41 58 497 2012 46 2111 40 2112 44 648 41 58 2023 46 2236 40 2237 44 2156 41 
132036,Python,"class Migration:
    """"""
    The base class for all migrations.

    Migration files will import this from django.db.migrations.Migration
    and subclass it as a class called Migration. It will have one or more
    of the following attributes:

     - operations: A list of Operation instances, probably from django.db.migrations.operations
     - dependencies: A list of tuples of (app_path, migration_name)
     - run_before: A list of tuples of (app_path, migration_name)
     - replaces: A list of migration_names

    Note that all migrations come out of migrations and into the Loader or
    Graph as instances, having been initialized with their app label and name.
    """"""

    # Operations to apply during this migration, in order.
    operations = []

    # Other migrations that should be run before this migration.
    # Should be a list of (app, migration_name).
    dependencies = []

    # Other migrations that should be run after this one (i.e. have
    # this migration added to their dependencies). Useful to make third-party
    # apps' migrations run after your AUTH_USER replacement, for example.
    run_before = []

    # Migration names in this app that this migration replaces. If this is
    # non-empty, this migration will only be applied if all these migrations
    # are not applied.
    replaces = []

    # Is this an initial migration? Initial migrations are skipped on
    # --fake-initial if the table or fields already exist. If None, check if
    # the migration has any dependencies to determine if there are dependencies
    # to tell if db introspection needs to be done. If True, always perform
    # introspection. If False, never perform introspection.
    initial = None

    # Whether to wrap the whole migration in a transaction. Only has an effect
    # on database backends which support transactional DDL.
    atomic = True

    def __init__(self, name, app_label):
        self.name = name
        self.app_label = app_label
        # Copy dependencies & other attrs as we might mutate them at runtime
        self.operations = list(self.__class__.operations)
        self.dependencies = list(self.__class__.dependencies)
        self.run_before = list(self.__class__.run_before)
        self.replaces = list(self.__class__.replaces)

    def __eq__(self, other):
        return (
            isinstance(other, Migration) and
            self.name == other.name and
            self.app_label == other.app_label
        )

    def __repr__(self):
        return ""<Migration %s.%s>"" % (self.app_label, self.name)

    def __str__(self):
        return ""%s.%s"" % (self.app_label, self.name)

    def __hash__(self):
        return hash(""%s.%s"" % (self.app_label, self.name))

    def mutate_state(self, project_state, preserve=True):
        """"""
        Take a ProjectState and return a new one with the migration's
        operations applied to it. Preserve the original object state by
        default and return a mutated state from a copy.
        """"""
        new_state = project_state
        if preserve:
            new_state = project_state.clone()

        for operation in self.operations:
            operation.state_forwards(self.app_label, new_state)
        return new_state

    def apply(self, project_state, schema_editor, collect_sql=False):
        """"""
        Take a project_state representing all migrations prior to this one
        and a schema_editor for a live database and apply the migration
        in a forwards order.

        Return the resulting project state for efficient reuse by following
        Migrations.
        """"""
        for operation in self.operations:
            # If this operation cannot be represented as SQL, place a comment
            # there instead
            if collect_sql:
                schema_editor.collected_sql.append(""--"")
                if not operation.reduces_to_sql:
                    schema_editor.collected_sql.append(
                        ""-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:""
                    )
                schema_editor.collected_sql.append(""-- %s"" % operation.describe())
                schema_editor.collected_sql.append(""--"")
                if not operation.reduces_to_sql:
                    continue
            # Save the state before the operation has run
            old_state = project_state.clone()
            operation.state_forwards(self.app_label, project_state)
            # Run the operation
            atomic_operation = operation.atomic or (self.atomic and operation.atomic is not False)
            if not schema_editor.atomic_migration and atomic_operation:
                # Force a transaction on a non-transactional-DDL backend or an
                # atomic operation inside a non-atomic migration.
                with atomic(schema_editor.connection.alias):
                    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
            else:
                # Normal behaviour
                operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
        return project_state

    def unapply(self, project_state, schema_editor, collect_sql=False):
        """"""
        Take a project_state representing all migrations prior to this one
        and a schema_editor for a live database and apply the migration
        in a reverse order.

        The backwards migration process consists of two phases:

        1. The intermediate states from right before the first until right
           after the last operation inside this migration are preserved.
        2. The operations are applied in reverse order using the states
           recorded in step 1.
        """"""
        # Construct all the intermediate states we need for a reverse migration
        to_run = []
        new_state = project_state
        # Phase 1
        for operation in self.operations:
            # If it's irreversible, error out
            if not operation.reversible:
                raise IrreversibleError(""Operation %s in %s is not reversible"" % (operation, self))
            # Preserve new state from previous run to not tamper the same state
            # over all operations
            new_state = new_state.clone()
            old_state = new_state.clone()
            operation.state_forwards(self.app_label, new_state)
            to_run.insert(0, (operation, old_state, new_state))

        # Phase 2
        for operation, to_state, from_state in to_run:
            if collect_sql:
                schema_editor.collected_sql.append(""--"")
                if not operation.reduces_to_sql:
                    schema_editor.collected_sql.append(
                        ""-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:""
                    )
                schema_editor.collected_sql.append(""-- %s"" % operation.describe())
                schema_editor.collected_sql.append(""--"")
                if not operation.reduces_to_sql:
                    continue
            atomic_operation = operation.atomic or (self.atomic and operation.atomic is not False)
            if not schema_editor.atomic_migration and atomic_operation:
                # Force a transaction on a non-transactional-DDL backend or an
                # atomic operation inside a non-atomic migration.
                with atomic(schema_editor.connection.alias):
                    operation.database_backwards(self.app_label, schema_editor, from_state, to_state)
            else:
                # Normal behaviour
                operation.database_backwards(self.app_label, schema_editor, from_state, to_state)
        return project_state

    def suggest_name(self):
        """"""
        Suggest a name for the operations this migration might represent. Names
        are not guaranteed to be unique, but put some effort into the fallback
        name to avoid VCS conflicts if possible.
        """"""
        if self.initial:
            return 'initial'

        raw_fragments = [op.migration_name_fragment for op in self.operations]
        fragments = [name for name in raw_fragments if name]

        if not fragments or len(fragments) != len(self.operations):
            return 'auto_%s' % get_migration_name_timestamp()

        name = fragments[0]
        for fragment in fragments[1:]:
            new_name = f'{name}_{fragment}'
            if len(new_name) > 52:
                name = f'{name}_and_more'
                break
            name = new_name
        return name",1,334 2000 58 648 621 2001 61 91 93 621 621 2002 61 91 93 621 621 621 2003 61 91 93 621 621 621 2004 61 91 93 621 621 621 621 621 2005 61 303 621 621 2006 61 304 348 2007 40 2008 44 2009 44 2010 41 58 2008 46 2009 61 2009 2008 46 2010 61 2010 621 2008 46 2001 61 411 40 2008 46 2011 46 2001 41 2008 46 2002 61 411 40 2008 46 2011 46 2002 41 2008 46 2003 61 411 40 2008 46 2011 46 2003 41 2008 46 2004 61 411 40 2008 46 2011 46 2004 41 348 2012 40 2008 44 2013 41 58 450 40 2014 40 2013 44 2000 41 308 2008 46 2009 614 2013 46 2009 308 2008 46 2010 614 2013 46 2010 41 348 2015 40 2008 41 58 450 648 37 40 2008 46 2010 44 2008 46 2009 41 348 2016 40 2008 41 58 450 648 37 40 2008 46 2010 44 2008 46 2009 41 348 2017 40 2008 41 58 450 2018 40 648 37 40 2008 46 2010 44 2008 46 2009 41 41 348 2019 40 2008 44 2020 44 2021 61 304 41 58 648 2022 61 2020 392 2021 58 2022 61 2020 46 335 40 41 385 2023 398 2008 46 2001 58 2023 46 2024 40 2008 46 2010 44 2022 41 450 2022 348 2025 40 2008 44 2020 44 2026 44 2027 61 302 41 58 648 385 2023 398 2008 46 2001 58 621 621 392 2027 58 2026 46 2028 46 2029 40 648 41 392 422 2023 46 2030 58 2026 46 2028 46 2029 40 648 41 2026 46 2028 46 2029 40 648 37 2023 46 2031 40 41 41 2026 46 2028 46 2029 40 648 41 392 422 2023 46 2030 58 344 621 2032 61 2020 46 335 40 41 2023 46 2024 40 2008 46 2010 44 2020 41 621 2033 61 2023 46 2006 428 40 2008 46 2006 308 2023 46 2006 407 422 302 41 392 422 2026 46 2034 308 2033 58 621 621 497 2006 40 2026 46 2035 46 2036 41 58 2023 46 2037 40 2008 46 2010 44 2026 44 2032 44 2020 41 360 58 621 2023 46 2037 40 2008 46 2010 44 2026 44 2032 44 2020 41 450 2020 348 2038 40 2008 44 2020 44 2026 44 2027 61 302 41 58 648 621 2039 61 91 93 2022 61 2020 621 385 2023 398 2008 46 2001 58 621 392 422 2023 46 2040 58 440 2041 40 648 37 40 2023 44 2008 41 41 621 621 2022 61 2022 46 335 40 41 2032 61 2022 46 335 40 41 2023 46 2024 40 2008 46 2010 44 2022 41 2039 46 2042 40 1500 44 40 2023 44 2032 44 2022 41 41 621 385 2023 44 2043 44 2044 398 2039 58 392 2027 58 2026 46 2028 46 2029 40 648 41 392 422 2023 46 2030 58 2026 46 2028 46 2029 40 648 41 2026 46 2028 46 2029 40 648 37 2023 46 2031 40 41 41 2026 46 2028 46 2029 40 648 41 392 422 2023 46 2030 58 344 2033 61 2023 46 2006 428 40 2008 46 2006 308 2023 46 2006 407 422 302 41 392 422 2026 46 2034 308 2033 58 621 621 497 2006 40 2026 46 2035 46 2036 41 58 2023 46 2045 40 2008 46 2010 44 2026 44 2044 44 2043 41 360 58 621 2023 46 2045 40 2008 46 2010 44 2026 44 2044 44 2043 41 450 2020 348 2046 40 2008 41 58 648 392 2008 46 2005 58 450 648 2047 61 91 2048 46 2049 385 2048 398 2008 46 2001 93 2050 61 91 2009 385 2009 398 2047 392 2009 93 392 422 2050 428 2051 40 2050 41 631 2051 40 2008 46 2001 41 58 450 648 37 2052 40 41 2009 61 2050 91 1500 93 385 2053 398 2050 91 1501 58 93 58 2054 61 648 392 2051 40 2054 41 62 1503 58 2009 61 648 325 2009 61 2054 450 2009 
132884,Python,"class BaseCacheTests:
    # A common set of tests to apply to all cache backends
    factory = RequestFactory()

    # Some clients raise custom exceptions when .incr() or .decr() are called
    # with a non-integer value.
    incr_decr_type_error = TypeError

    def tearDown(self):
        cache.clear()

    def test_simple(self):
        # Simple cache set/get works
        cache.set(""key"", ""value"")
        self.assertEqual(cache.get(""key""), ""value"")

    def test_default_used_when_none_is_set(self):
        """"""If None is cached, get() returns it instead of the default.""""""
        cache.set('key_default_none', None)
        self.assertIsNone(cache.get('key_default_none', default='default'))

    def test_add(self):
        # A key can be added to a cache
        self.assertIs(cache.add(""addkey1"", ""value""), True)
        self.assertIs(cache.add(""addkey1"", ""newvalue""), False)
        self.assertEqual(cache.get(""addkey1""), ""value"")

    def test_prefix(self):
        # Test for same cache key conflicts between shared backend
        cache.set('somekey', 'value')

        # should not be set in the prefixed cache
        self.assertIs(caches['prefix'].has_key('somekey'), False)

        caches['prefix'].set('somekey', 'value2')

        self.assertEqual(cache.get('somekey'), 'value')
        self.assertEqual(caches['prefix'].get('somekey'), 'value2')

    def test_non_existent(self):
        """"""Nonexistent cache keys return as None/default.""""""
        self.assertIsNone(cache.get(""does_not_exist""))
        self.assertEqual(cache.get(""does_not_exist"", ""bang!""), ""bang!"")

    def test_get_many(self):
        # Multiple cache keys can be returned using get_many
        cache.set_many({'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd'})
        self.assertEqual(cache.get_many(['a', 'c', 'd']), {'a': 'a', 'c': 'c', 'd': 'd'})
        self.assertEqual(cache.get_many(['a', 'b', 'e']), {'a': 'a', 'b': 'b'})
        self.assertEqual(cache.get_many(iter(['a', 'b', 'e'])), {'a': 'a', 'b': 'b'})
        cache.set_many({'x': None, 'y': 1})
        self.assertEqual(cache.get_many(['x', 'y']), {'x': None, 'y': 1})

    def test_delete(self):
        # Cache keys can be deleted
        cache.set_many({'key1': 'spam', 'key2': 'eggs'})
        self.assertEqual(cache.get(""key1""), ""spam"")
        self.assertIs(cache.delete(""key1""), True)
        self.assertIsNone(cache.get(""key1""))
        self.assertEqual(cache.get(""key2""), ""eggs"")

    def test_delete_nonexistent(self):
        self.assertIs(cache.delete('nonexistent_key'), False)

    def test_has_key(self):
        # The cache can be inspected for cache keys
        cache.set(""hello1"", ""goodbye1"")
        self.assertIs(cache.has_key(""hello1""), True)
        self.assertIs(cache.has_key(""goodbye1""), False)
        cache.set(""no_expiry"", ""here"", None)
        self.assertIs(cache.has_key(""no_expiry""), True)
        cache.set('null', None)
        self.assertIs(cache.has_key('null'), True)

    def test_in(self):
        # The in operator can be used to inspect cache contents
        cache.set(""hello2"", ""goodbye2"")
        self.assertIn(""hello2"", cache)
        self.assertNotIn(""goodbye2"", cache)
        cache.set('null', None)
        self.assertIn('null', cache)

    def test_incr(self):
        # Cache values can be incremented
        cache.set('answer', 41)
        self.assertEqual(cache.incr('answer'), 42)
        self.assertEqual(cache.get('answer'), 42)
        self.assertEqual(cache.incr('answer', 10), 52)
        self.assertEqual(cache.get('answer'), 52)
        self.assertEqual(cache.incr('answer', -10), 42)
        with self.assertRaises(ValueError):
            cache.incr('does_not_exist')
        with self.assertRaises(ValueError):
            cache.incr('does_not_exist', -1)
        cache.set('null', None)
        with self.assertRaises(self.incr_decr_type_error):
            cache.incr('null')

    def test_decr(self):
        # Cache values can be decremented
        cache.set('answer', 43)
        self.assertEqual(cache.decr('answer'), 42)
        self.assertEqual(cache.get('answer'), 42)
        self.assertEqual(cache.decr('answer', 10), 32)
        self.assertEqual(cache.get('answer'), 32)
        self.assertEqual(cache.decr('answer', -10), 42)
        with self.assertRaises(ValueError):
            cache.decr('does_not_exist')
        with self.assertRaises(ValueError):
            cache.incr('does_not_exist', -1)
        cache.set('null', None)
        with self.assertRaises(self.incr_decr_type_error):
            cache.decr('null')

    def test_close(self):
        self.assertTrue(hasattr(cache, 'close'))
        cache.close()

    def test_data_types(self):
        # Many different data types can be cached
        tests = {
            'string': 'this is a string',
            'int': 42,
            'bool': True,
            'list': [1, 2, 3, 4],
            'tuple': (1, 2, 3, 4),
            'dict': {'A': 1, 'B': 2},
            'function': f,
            'class': C,
        }
        for key, value in tests.items():
            with self.subTest(key=key):
                cache.set(key, value)
                self.assertEqual(cache.get(key), value)

    def test_cache_read_for_model_instance(self):
        # Don't want fields with callable as default to be called on cache read
        expensive_calculation.num_runs = 0
        Poll.objects.all().delete()
        my_poll = Poll.objects.create(question=""Well?"")
        self.assertEqual(Poll.objects.count(), 1)
        pub_date = my_poll.pub_date
        cache.set('question', my_poll)
        cached_poll = cache.get('question')
        self.assertEqual(cached_poll.pub_date, pub_date)
        # We only want the default expensive calculation run once
        self.assertEqual(expensive_calculation.num_runs, 1)

    def test_cache_write_for_model_instance_with_deferred(self):
        # Don't want fields with callable as default to be called on cache write
        expensive_calculation.num_runs = 0
        Poll.objects.all().delete()
        Poll.objects.create(question=""What?"")
        self.assertEqual(expensive_calculation.num_runs, 1)
        defer_qs = Poll.objects.all().defer('question')
        self.assertEqual(defer_qs.count(), 1)
        self.assertEqual(expensive_calculation.num_runs, 1)
        cache.set('deferred_queryset', defer_qs)
        # cache set should not re-evaluate default functions
        self.assertEqual(expensive_calculation.num_runs, 1)

    def test_cache_read_for_model_instance_with_deferred(self):
        # Don't want fields with callable as default to be called on cache read
        expensive_calculation.num_runs = 0
        Poll.objects.all().delete()
        Poll.objects.create(question=""What?"")
        self.assertEqual(expensive_calculation.num_runs, 1)
        defer_qs = Poll.objects.all().defer('question')
        self.assertEqual(defer_qs.count(), 1)
        cache.set('deferred_queryset', defer_qs)
        self.assertEqual(expensive_calculation.num_runs, 1)
        runs_before_cache_read = expensive_calculation.num_runs
        cache.get('deferred_queryset')
        # We only want the default expensive calculation run on creation and set
        self.assertEqual(expensive_calculation.num_runs, runs_before_cache_read)

    def test_expiration(self):
        # Cache values can be set to expire
        cache.set('expire1', 'very quickly', 1)
        cache.set('expire2', 'very quickly', 1)
        cache.set('expire3', 'very quickly', 1)

        time.sleep(2)
        self.assertIsNone(cache.get(""expire1""))

        self.assertIs(cache.add(""expire2"", ""newvalue""), True)
        self.assertEqual(cache.get(""expire2""), ""newvalue"")
        self.assertIs(cache.has_key(""expire3""), False)

    def test_touch(self):
        # cache.touch() updates the timeout.
        cache.set('expire1', 'very quickly', timeout=1)
        self.assertIs(cache.touch('expire1', timeout=4), True)
        time.sleep(2)
        self.assertIs(cache.has_key('expire1'), True)
        time.sleep(3)
        self.assertIs(cache.has_key('expire1'), False)
        # cache.touch() works without the timeout argument.
        cache.set('expire1', 'very quickly', timeout=1)
        self.assertIs(cache.touch('expire1'), True)
        time.sleep(2)
        self.assertIs(cache.has_key('expire1'), True)

        self.assertIs(cache.touch('nonexistent'), False)

    def test_unicode(self):
        # Unicode values can be cached
        stuff = {
            'ascii': 'ascii_value',
            'unicode_ascii': 'Iñtërnâtiônàlizætiøn1',
            'Iñtërnâtiônàlizætiøn': 'Iñtërnâtiônàlizætiøn2',
            'ascii2': {'x': 1}
        }
        # Test `set`
        for (key, value) in stuff.items():
            with self.subTest(key=key):
                cache.set(key, value)
                self.assertEqual(cache.get(key), value)

        # Test `add`
        for (key, value) in stuff.items():
            with self.subTest(key=key):
                self.assertIs(cache.delete(key), True)
                self.assertIs(cache.add(key, value), True)
                self.assertEqual(cache.get(key), value)

        # Test `set_many`
        for (key, value) in stuff.items():
            self.assertIs(cache.delete(key), True)
        cache.set_many(stuff)
        for (key, value) in stuff.items():
            with self.subTest(key=key):
                self.assertEqual(cache.get(key), value)

    def test_binary_string(self):
        # Binary strings should be cacheable
        from zlib import compress, decompress
        value = 'value_to_be_compressed'
        compressed_value = compress(value.encode())

        # Test set
        cache.set('binary1', compressed_value)
        compressed_result = cache.get('binary1')
        self.assertEqual(compressed_value, compressed_result)
        self.assertEqual(value, decompress(compressed_result).decode())

        # Test add
        self.assertIs(cache.add('binary1-add', compressed_value), True)
        compressed_result = cache.get('binary1-add')
        self.assertEqual(compressed_value, compressed_result)
        self.assertEqual(value, decompress(compressed_result).decode())

        # Test set_many
        cache.set_many({'binary1-set_many': compressed_value})
        compressed_result = cache.get('binary1-set_many')
        self.assertEqual(compressed_value, compressed_result)
        self.assertEqual(value, decompress(compressed_result).decode())

    def test_set_many(self):
        # Multiple keys can be set using set_many
        cache.set_many({""key1"": ""spam"", ""key2"": ""eggs""})
        self.assertEqual(cache.get(""key1""), ""spam"")
        self.assertEqual(cache.get(""key2""), ""eggs"")

    def test_set_many_returns_empty_list_on_success(self):
        """"""set_many() returns an empty list when all keys are inserted.""""""
        failing_keys = cache.set_many({'key1': 'spam', 'key2': 'eggs'})
        self.assertEqual(failing_keys, [])

    def test_set_many_expiration(self):
        # set_many takes a second ``timeout`` parameter
        cache.set_many({""key1"": ""spam"", ""key2"": ""eggs""}, 1)
        time.sleep(2)
        self.assertIsNone(cache.get(""key1""))
        self.assertIsNone(cache.get(""key2""))

    def test_delete_many(self):
        # Multiple keys can be deleted using delete_many
        cache.set_many({'key1': 'spam', 'key2': 'eggs', 'key3': 'ham'})
        cache.delete_many([""key1"", ""key2""])
        self.assertIsNone(cache.get(""key1""))
        self.assertIsNone(cache.get(""key2""))
        self.assertEqual(cache.get(""key3""), ""ham"")

    def test_clear(self):
        # The cache can be emptied using clear
        cache.set_many({'key1': 'spam', 'key2': 'eggs'})
        cache.clear()
        self.assertIsNone(cache.get(""key1""))
        self.assertIsNone(cache.get(""key2""))

    def test_long_timeout(self):
        """"""
        Follow memcached's convention where a timeout greater than 30 days is
        treated as an absolute expiration timestamp instead of a relative
        offset (#12399).
        """"""
        cache.set('key1', 'eggs', 60 * 60 * 24 * 30 + 1)  # 30 days + 1 second
        self.assertEqual(cache.get('key1'), 'eggs')

        self.assertIs(cache.add('key2', 'ham', 60 * 60 * 24 * 30 + 1), True)
        self.assertEqual(cache.get('key2'), 'ham')

        cache.set_many({'key3': 'sausage', 'key4': 'lobster bisque'}, 60 * 60 * 24 * 30 + 1)
        self.assertEqual(cache.get('key3'), 'sausage')
        self.assertEqual(cache.get('key4'), 'lobster bisque')

    def test_forever_timeout(self):
        """"""
        Passing in None into timeout results in a value that is cached forever
        """"""
        cache.set('key1', 'eggs', None)
        self.assertEqual(cache.get('key1'), 'eggs')

        self.assertIs(cache.add('key2', 'ham', None), True)
        self.assertEqual(cache.get('key2'), 'ham')
        self.assertIs(cache.add('key1', 'new eggs', None), False)
        self.assertEqual(cache.get('key1'), 'eggs')

        cache.set_many({'key3': 'sausage', 'key4': 'lobster bisque'}, None)
        self.assertEqual(cache.get('key3'), 'sausage')
        self.assertEqual(cache.get('key4'), 'lobster bisque')

        cache.set('key5', 'belgian fries', timeout=1)
        self.assertIs(cache.touch('key5', timeout=None), True)
        time.sleep(2)
        self.assertEqual(cache.get('key5'), 'belgian fries')

    def test_zero_timeout(self):
        """"""
        Passing in zero into timeout results in a value that is not cached
        """"""
        cache.set('key1', 'eggs', 0)
        self.assertIsNone(cache.get('key1'))

        self.assertIs(cache.add('key2', 'ham', 0), True)
        self.assertIsNone(cache.get('key2'))

        cache.set_many({'key3': 'sausage', 'key4': 'lobster bisque'}, 0)
        self.assertIsNone(cache.get('key3'))
        self.assertIsNone(cache.get('key4'))

        cache.set('key5', 'belgian fries', timeout=5)
        self.assertIs(cache.touch('key5', timeout=0), True)
        self.assertIsNone(cache.get('key5'))

    def test_float_timeout(self):
        # Make sure a timeout given as a float doesn't crash anything.
        cache.set(""key1"", ""spam"", 100.2)
        self.assertEqual(cache.get(""key1""), ""spam"")

    def _perform_cull_test(self, cull_cache_name, initial_count, final_count):
        try:
            cull_cache = caches[cull_cache_name]
        except InvalidCacheBackendError:
            self.skipTest(""Culling isn't implemented."")

        # Create initial cache key entries. This will overflow the cache,
        # causing a cull.
        for i in range(1, initial_count):
            cull_cache.set('cull%d' % i, 'value', 1000)
        count = 0
        # Count how many keys are left in the cache.
        for i in range(1, initial_count):
            if cull_cache.has_key('cull%d' % i):
                count += 1
        self.assertEqual(count, final_count)

    def test_cull(self):
        self._perform_cull_test('cull', 50, 29)

    def test_zero_cull(self):
        self._perform_cull_test('zero_cull', 50, 19)

    def test_cull_delete_when_store_empty(self):
        try:
            cull_cache = caches['cull']
        except InvalidCacheBackendError:
            self.skipTest(""Culling isn't implemented."")
        old_max_entries = cull_cache._max_entries
        # Force _cull to delete on first cached record.
        cull_cache._max_entries = -1
        try:
            cull_cache.set('force_cull_delete', 'value', 1000)
            self.assertIs(cull_cache.has_key('force_cull_delete'), True)
        finally:
            cull_cache._max_entries = old_max_entries

    def _perform_invalid_key_test(self, key, expected_warning, key_func=None):
        """"""
        All the builtin backends should warn (except memcached that should
        error) on keys that would be refused by memcached. This encourages
        portable caching code without making it too difficult to use production
        backends with more liberal key rules. Refs #6447.
        """"""
        # mimic custom ``make_key`` method being defined since the default will
        # never show the below warnings
        def func(key, *args):
            return key

        old_func = cache.key_func
        cache.key_func = key_func or func

        tests = [
            ('add', [key, 1]),
            ('get', [key]),
            ('set', [key, 1]),
            ('incr', [key]),
            ('decr', [key]),
            ('touch', [key]),
            ('delete', [key]),
            ('get_many', [[key, 'b']]),
            ('set_many', [{key: 1, 'b': 2}]),
            ('delete_many', [[key, 'b']]),
        ]
        try:
            for operation, args in tests:
                with self.subTest(operation=operation):
                    with self.assertWarns(CacheKeyWarning) as cm:
                        getattr(cache, operation)(*args)
                    self.assertEqual(str(cm.warning), expected_warning)
        finally:
            cache.key_func = old_func

    def test_invalid_key_characters(self):
        # memcached doesn't allow whitespace or control characters in keys.
        key = 'key with spaces and 清'
        self._perform_invalid_key_test(key, KEY_ERRORS_WITH_MEMCACHED_MSG % key)

    def test_invalid_key_length(self):
        # memcached limits key length to 250.
        key = ('a' * 250) + '清'
        expected_warning = (
            'Cache key will cause errors if used with memcached: '
            '%r (longer than %s)' % (key, 250)
        )
        self._perform_invalid_key_test(key, expected_warning)

    def test_invalid_with_version_key_length(self):
        # Custom make_key() that adds a version to the key and exceeds the
        # limit.
        def key_func(key, *args):
            return key + ':1'

        key = 'a' * 249
        expected_warning = (
            'Cache key will cause errors if used with memcached: '
            '%r (longer than %s)' % (key_func(key), 250)
        )
        self._perform_invalid_key_test(key, expected_warning, key_func=key_func)

    def test_cache_versioning_get_set(self):
        # set, using default version = 1
        cache.set('answer1', 42)
        self.assertEqual(cache.get('answer1'), 42)
        self.assertEqual(cache.get('answer1', version=1), 42)
        self.assertIsNone(cache.get('answer1', version=2))

        self.assertIsNone(caches['v2'].get('answer1'))
        self.assertEqual(caches['v2'].get('answer1', version=1), 42)
        self.assertIsNone(caches['v2'].get('answer1', version=2))

        # set, default version = 1, but manually override version = 2
        cache.set('answer2', 42, version=2)
        self.assertIsNone(cache.get('answer2'))
        self.assertIsNone(cache.get('answer2', version=1))
        self.assertEqual(cache.get('answer2', version=2), 42)

        self.assertEqual(caches['v2'].get('answer2'), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertEqual(caches['v2'].get('answer2', version=2), 42)

        # v2 set, using default version = 2
        caches['v2'].set('answer3', 42)
        self.assertIsNone(cache.get('answer3'))
        self.assertIsNone(cache.get('answer3', version=1))
        self.assertEqual(cache.get('answer3', version=2), 42)

        self.assertEqual(caches['v2'].get('answer3'), 42)
        self.assertIsNone(caches['v2'].get('answer3', version=1))
        self.assertEqual(caches['v2'].get('answer3', version=2), 42)

        # v2 set, default version = 2, but manually override version = 1
        caches['v2'].set('answer4', 42, version=1)
        self.assertEqual(cache.get('answer4'), 42)
        self.assertEqual(cache.get('answer4', version=1), 42)
        self.assertIsNone(cache.get('answer4', version=2))

        self.assertIsNone(caches['v2'].get('answer4'))
        self.assertEqual(caches['v2'].get('answer4', version=1), 42)
        self.assertIsNone(caches['v2'].get('answer4', version=2))

    def test_cache_versioning_add(self):

        # add, default version = 1, but manually override version = 2
        self.assertIs(cache.add('answer1', 42, version=2), True)
        self.assertIsNone(cache.get('answer1', version=1))
        self.assertEqual(cache.get('answer1', version=2), 42)

        self.assertIs(cache.add('answer1', 37, version=2), False)
        self.assertIsNone(cache.get('answer1', version=1))
        self.assertEqual(cache.get('answer1', version=2), 42)

        self.assertIs(cache.add('answer1', 37, version=1), True)
        self.assertEqual(cache.get('answer1', version=1), 37)
        self.assertEqual(cache.get('answer1', version=2), 42)

        # v2 add, using default version = 2
        self.assertIs(caches['v2'].add('answer2', 42), True)
        self.assertIsNone(cache.get('answer2', version=1))
        self.assertEqual(cache.get('answer2', version=2), 42)

        self.assertIs(caches['v2'].add('answer2', 37), False)
        self.assertIsNone(cache.get('answer2', version=1))
        self.assertEqual(cache.get('answer2', version=2), 42)

        self.assertIs(caches['v2'].add('answer2', 37, version=1), True)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertEqual(cache.get('answer2', version=2), 42)

        # v2 add, default version = 2, but manually override version = 1
        self.assertIs(caches['v2'].add('answer3', 42, version=1), True)
        self.assertEqual(cache.get('answer3', version=1), 42)
        self.assertIsNone(cache.get('answer3', version=2))

        self.assertIs(caches['v2'].add('answer3', 37, version=1), False)
        self.assertEqual(cache.get('answer3', version=1), 42)
        self.assertIsNone(cache.get('answer3', version=2))

        self.assertIs(caches['v2'].add('answer3', 37), True)
        self.assertEqual(cache.get('answer3', version=1), 42)
        self.assertEqual(cache.get('answer3', version=2), 37)

    def test_cache_versioning_has_key(self):
        cache.set('answer1', 42)

        # has_key
        self.assertIs(cache.has_key('answer1'), True)
        self.assertIs(cache.has_key('answer1', version=1), True)
        self.assertIs(cache.has_key('answer1', version=2), False)

        self.assertIs(caches['v2'].has_key('answer1'), False)
        self.assertIs(caches['v2'].has_key('answer1', version=1), True)
        self.assertIs(caches['v2'].has_key('answer1', version=2), False)

    def test_cache_versioning_delete(self):
        cache.set('answer1', 37, version=1)
        cache.set('answer1', 42, version=2)
        self.assertIs(cache.delete('answer1'), True)
        self.assertIsNone(cache.get('answer1', version=1))
        self.assertEqual(cache.get('answer1', version=2), 42)

        cache.set('answer2', 37, version=1)
        cache.set('answer2', 42, version=2)
        self.assertIs(cache.delete('answer2', version=2), True)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertIsNone(cache.get('answer2', version=2))

        cache.set('answer3', 37, version=1)
        cache.set('answer3', 42, version=2)
        self.assertIs(caches['v2'].delete('answer3'), True)
        self.assertEqual(cache.get('answer3', version=1), 37)
        self.assertIsNone(cache.get('answer3', version=2))

        cache.set('answer4', 37, version=1)
        cache.set('answer4', 42, version=2)
        self.assertIs(caches['v2'].delete('answer4', version=1), True)
        self.assertIsNone(cache.get('answer4', version=1))
        self.assertEqual(cache.get('answer4', version=2), 42)

    def test_cache_versioning_incr_decr(self):
        cache.set('answer1', 37, version=1)
        cache.set('answer1', 42, version=2)
        self.assertEqual(cache.incr('answer1'), 38)
        self.assertEqual(cache.get('answer1', version=1), 38)
        self.assertEqual(cache.get('answer1', version=2), 42)
        self.assertEqual(cache.decr('answer1'), 37)
        self.assertEqual(cache.get('answer1', version=1), 37)
        self.assertEqual(cache.get('answer1', version=2), 42)

        cache.set('answer2', 37, version=1)
        cache.set('answer2', 42, version=2)
        self.assertEqual(cache.incr('answer2', version=2), 43)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertEqual(cache.get('answer2', version=2), 43)
        self.assertEqual(cache.decr('answer2', version=2), 42)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertEqual(cache.get('answer2', version=2), 42)

        cache.set('answer3', 37, version=1)
        cache.set('answer3', 42, version=2)
        self.assertEqual(caches['v2'].incr('answer3'), 43)
        self.assertEqual(cache.get('answer3', version=1), 37)
        self.assertEqual(cache.get('answer3', version=2), 43)
        self.assertEqual(caches['v2'].decr('answer3'), 42)
        self.assertEqual(cache.get('answer3', version=1), 37)
        self.assertEqual(cache.get('answer3', version=2), 42)

        cache.set('answer4', 37, version=1)
        cache.set('answer4', 42, version=2)
        self.assertEqual(caches['v2'].incr('answer4', version=1), 38)
        self.assertEqual(cache.get('answer4', version=1), 38)
        self.assertEqual(cache.get('answer4', version=2), 42)
        self.assertEqual(caches['v2'].decr('answer4', version=1), 37)
        self.assertEqual(cache.get('answer4', version=1), 37)
        self.assertEqual(cache.get('answer4', version=2), 42)

    def test_cache_versioning_get_set_many(self):
        # set, using default version = 1
        cache.set_many({'ford1': 37, 'arthur1': 42})
        self.assertEqual(cache.get_many(['ford1', 'arthur1']), {'ford1': 37, 'arthur1': 42})
        self.assertEqual(cache.get_many(['ford1', 'arthur1'], version=1), {'ford1': 37, 'arthur1': 42})
        self.assertEqual(cache.get_many(['ford1', 'arthur1'], version=2), {})

        self.assertEqual(caches['v2'].get_many(['ford1', 'arthur1']), {})
        self.assertEqual(caches['v2'].get_many(['ford1', 'arthur1'], version=1), {'ford1': 37, 'arthur1': 42})
        self.assertEqual(caches['v2'].get_many(['ford1', 'arthur1'], version=2), {})

        # set, default version = 1, but manually override version = 2
        cache.set_many({'ford2': 37, 'arthur2': 42}, version=2)
        self.assertEqual(cache.get_many(['ford2', 'arthur2']), {})
        self.assertEqual(cache.get_many(['ford2', 'arthur2'], version=1), {})
        self.assertEqual(cache.get_many(['ford2', 'arthur2'], version=2), {'ford2': 37, 'arthur2': 42})

        self.assertEqual(caches['v2'].get_many(['ford2', 'arthur2']), {'ford2': 37, 'arthur2': 42})
        self.assertEqual(caches['v2'].get_many(['ford2', 'arthur2'], version=1), {})
        self.assertEqual(caches['v2'].get_many(['ford2', 'arthur2'], version=2), {'ford2': 37, 'arthur2': 42})

        # v2 set, using default version = 2
        caches['v2'].set_many({'ford3': 37, 'arthur3': 42})
        self.assertEqual(cache.get_many(['ford3', 'arthur3']), {})
        self.assertEqual(cache.get_many(['ford3', 'arthur3'], version=1), {})
        self.assertEqual(cache.get_many(['ford3', 'arthur3'], version=2), {'ford3': 37, 'arthur3': 42})

        self.assertEqual(caches['v2'].get_many(['ford3', 'arthur3']), {'ford3': 37, 'arthur3': 42})
        self.assertEqual(caches['v2'].get_many(['ford3', 'arthur3'], version=1), {})
        self.assertEqual(caches['v2'].get_many(['ford3', 'arthur3'], version=2), {'ford3': 37, 'arthur3': 42})

        # v2 set, default version = 2, but manually override version = 1
        caches['v2'].set_many({'ford4': 37, 'arthur4': 42}, version=1)
        self.assertEqual(cache.get_many(['ford4', 'arthur4']), {'ford4': 37, 'arthur4': 42})
        self.assertEqual(cache.get_many(['ford4', 'arthur4'], version=1), {'ford4': 37, 'arthur4': 42})
        self.assertEqual(cache.get_many(['ford4', 'arthur4'], version=2), {})

        self.assertEqual(caches['v2'].get_many(['ford4', 'arthur4']), {})
        self.assertEqual(caches['v2'].get_many(['ford4', 'arthur4'], version=1), {'ford4': 37, 'arthur4': 42})
        self.assertEqual(caches['v2'].get_many(['ford4', 'arthur4'], version=2), {})

    def test_incr_version(self):
        cache.set('answer', 42, version=2)
        self.assertIsNone(cache.get('answer'))
        self.assertIsNone(cache.get('answer', version=1))
        self.assertEqual(cache.get('answer', version=2), 42)
        self.assertIsNone(cache.get('answer', version=3))

        self.assertEqual(cache.incr_version('answer', version=2), 3)
        self.assertIsNone(cache.get('answer'))
        self.assertIsNone(cache.get('answer', version=1))
        self.assertIsNone(cache.get('answer', version=2))
        self.assertEqual(cache.get('answer', version=3), 42)

        caches['v2'].set('answer2', 42)
        self.assertEqual(caches['v2'].get('answer2'), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertEqual(caches['v2'].get('answer2', version=2), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=3))

        self.assertEqual(caches['v2'].incr_version('answer2'), 3)
        self.assertIsNone(caches['v2'].get('answer2'))
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertIsNone(caches['v2'].get('answer2', version=2))
        self.assertEqual(caches['v2'].get('answer2', version=3), 42)

        with self.assertRaises(ValueError):
            cache.incr_version('does_not_exist')

        cache.set('null', None)
        self.assertEqual(cache.incr_version('null'), 2)

    def test_decr_version(self):
        cache.set('answer', 42, version=2)
        self.assertIsNone(cache.get('answer'))
        self.assertIsNone(cache.get('answer', version=1))
        self.assertEqual(cache.get('answer', version=2), 42)

        self.assertEqual(cache.decr_version('answer', version=2), 1)
        self.assertEqual(cache.get('answer'), 42)
        self.assertEqual(cache.get('answer', version=1), 42)
        self.assertIsNone(cache.get('answer', version=2))

        caches['v2'].set('answer2', 42)
        self.assertEqual(caches['v2'].get('answer2'), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertEqual(caches['v2'].get('answer2', version=2), 42)

        self.assertEqual(caches['v2'].decr_version('answer2'), 1)
        self.assertIsNone(caches['v2'].get('answer2'))
        self.assertEqual(caches['v2'].get('answer2', version=1), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=2))

        with self.assertRaises(ValueError):
            cache.decr_version('does_not_exist', version=2)

        cache.set('null', None, version=2)
        self.assertEqual(cache.decr_version('null', version=2), 1)

    def test_custom_key_func(self):
        # Two caches with different key functions aren't visible to each other
        cache.set('answer1', 42)
        self.assertEqual(cache.get('answer1'), 42)
        self.assertIsNone(caches['custom_key'].get('answer1'))
        self.assertIsNone(caches['custom_key2'].get('answer1'))

        caches['custom_key'].set('answer2', 42)
        self.assertIsNone(cache.get('answer2'))
        self.assertEqual(caches['custom_key'].get('answer2'), 42)
        self.assertEqual(caches['custom_key2'].get('answer2'), 42)

    @override_settings(CACHE_MIDDLEWARE_ALIAS=DEFAULT_CACHE_ALIAS)
    def test_cache_write_unpicklable_object(self):
        fetch_middleware = FetchFromCacheMiddleware(empty_response)

        request = self.factory.get('/cache/test')
        request._cache_update_cache = True
        get_cache_data = FetchFromCacheMiddleware(empty_response).process_request(request)
        self.assertIsNone(get_cache_data)

        content = 'Testing cookie serialization.'

        def get_response(req):
            response = HttpResponse(content)
            response.set_cookie('foo', 'bar')
            return response

        update_middleware = UpdateCacheMiddleware(get_response)
        response = update_middleware(request)

        get_cache_data = fetch_middleware.process_request(request)
        self.assertIsNotNone(get_cache_data)
        self.assertEqual(get_cache_data.content, content.encode())
        self.assertEqual(get_cache_data.cookies, response.cookies)

        UpdateCacheMiddleware(lambda req: get_cache_data)(request)
        get_cache_data = fetch_middleware.process_request(request)
        self.assertIsNotNone(get_cache_data)
        self.assertEqual(get_cache_data.content, content.encode())
        self.assertEqual(get_cache_data.cookies, response.cookies)

    def test_add_fail_on_pickleerror(self):
        # Shouldn't fail silently if trying to cache an unpicklable type.
        with self.assertRaises(pickle.PickleError):
            cache.add('unpicklable', Unpicklable())

    def test_set_fail_on_pickleerror(self):
        with self.assertRaises(pickle.PickleError):
            cache.set('unpicklable', Unpicklable())

    def test_get_or_set(self):
        self.assertIsNone(cache.get('projector'))
        self.assertEqual(cache.get_or_set('projector', 42), 42)
        self.assertEqual(cache.get('projector'), 42)
        self.assertIsNone(cache.get_or_set('null', None))
        # Previous get_or_set() stores None in the cache.
        self.assertIsNone(cache.get('null', 'default'))

    def test_get_or_set_callable(self):
        def my_callable():
            return 'value'

        self.assertEqual(cache.get_or_set('mykey', my_callable), 'value')
        self.assertEqual(cache.get_or_set('mykey', my_callable()), 'value')

        self.assertIsNone(cache.get_or_set('null', lambda: None))
        # Previous get_or_set() stores None in the cache.
        self.assertIsNone(cache.get('null', 'default'))

    def test_get_or_set_version(self):
        msg = ""get_or_set() missing 1 required positional argument: 'default'""
        self.assertEqual(cache.get_or_set('brian', 1979, version=2), 1979)
        with self.assertRaisesMessage(TypeError, msg):
            cache.get_or_set('brian')
        with self.assertRaisesMessage(TypeError, msg):
            cache.get_or_set('brian', version=1)
        self.assertIsNone(cache.get('brian', version=1))
        self.assertEqual(cache.get_or_set('brian', 42, version=1), 42)
        self.assertEqual(cache.get_or_set('brian', 1979, version=2), 1979)
        self.assertIsNone(cache.get('brian', version=3))

    def test_get_or_set_racing(self):
        with mock.patch('%s.%s' % (settings.CACHES['default']['BACKEND'], 'add')) as cache_add:
            # Simulate cache.add() failing to add a value. In that case, the
            # default value should be returned.
            cache_add.return_value = False
            self.assertEqual(cache.get_or_set('key', 'default'), 'default')",1,334 2000 58 621 2001 61 2002 40 41 621 621 2003 61 2004 348 2005 40 2006 41 58 2007 46 2008 40 41 348 2009 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2013 40 2006 41 58 648 2007 46 2010 40 648 44 303 41 2006 46 2014 40 2007 46 2012 40 648 44 349 61 648 41 41 348 2015 40 2006 41 58 621 2006 46 2016 40 2007 46 2017 40 648 44 648 41 44 304 41 2006 46 2016 40 2007 46 2017 40 648 44 648 41 44 302 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2018 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 621 2006 46 2016 40 2019 91 648 93 46 2020 40 648 41 44 302 41 2019 91 648 93 46 2010 40 648 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 648 41 348 2021 40 2006 41 58 648 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2012 40 648 44 648 41 44 648 41 348 2022 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 44 648 93 41 44 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 44 648 93 41 44 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2024 40 2025 40 91 648 44 648 44 648 93 41 41 44 123 648 58 648 44 648 58 648 125 41 2007 46 2023 40 123 648 58 303 44 648 58 1501 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 648 58 303 44 648 58 1501 125 41 348 2026 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 353 40 648 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2027 40 2006 41 58 2006 46 2016 40 2007 46 353 40 648 41 44 302 41 348 2028 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2006 46 2016 40 2007 46 2020 40 648 41 44 302 41 2007 46 2010 40 648 44 648 44 303 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2007 46 2010 40 648 44 303 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 348 2029 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 2006 46 2030 40 648 44 2007 41 2006 46 2031 40 648 44 2007 41 2007 46 2010 40 648 44 303 41 2006 46 2030 40 648 44 2007 41 348 2032 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2033 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2033 40 648 44 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2033 40 648 44 45 1502 41 44 1503 41 497 2006 46 2034 40 2035 41 58 2007 46 2033 40 648 41 497 2006 46 2034 40 2035 41 58 2007 46 2033 40 648 44 45 1501 41 2007 46 2010 40 648 44 303 41 497 2006 46 2034 40 2006 46 2003 41 58 2007 46 2033 40 648 41 348 2036 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 44 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 44 45 1502 41 44 1503 41 497 2006 46 2034 40 2035 41 58 2007 46 2037 40 648 41 497 2006 46 2034 40 2035 41 58 2007 46 2033 40 648 44 45 1501 41 2007 46 2010 40 648 44 303 41 497 2006 46 2034 40 2006 46 2003 41 58 2007 46 2037 40 648 41 348 2038 40 2006 41 58 2006 46 2039 40 2040 40 2007 44 648 41 41 2007 46 2041 40 41 348 2042 40 2006 41 58 621 2043 61 123 648 58 648 44 648 58 1503 44 648 58 304 44 648 58 91 1501 44 1502 44 1502 44 1502 93 44 648 58 40 1501 44 1502 44 1502 44 1502 41 44 648 58 123 648 58 1501 44 648 58 1502 125 44 648 58 2044 44 648 58 2045 44 125 385 2046 44 2047 398 2043 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2007 46 2010 40 2046 44 2047 41 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 348 2050 40 2006 41 58 621 2051 46 2052 61 1500 2053 46 2054 46 2055 40 41 46 353 40 41 2056 61 2053 46 2054 46 2057 40 2058 61 648 41 2006 46 2011 40 2053 46 2054 46 2059 40 41 44 1501 41 2060 61 2056 46 2060 2007 46 2010 40 648 44 2056 41 2061 61 2007 46 2012 40 648 41 2006 46 2011 40 2061 46 2060 44 2060 41 621 2006 46 2011 40 2051 46 2052 44 1501 41 348 2062 40 2006 41 58 621 2051 46 2052 61 1500 2053 46 2054 46 2055 40 41 46 353 40 41 2053 46 2054 46 2057 40 2058 61 648 41 2006 46 2011 40 2051 46 2052 44 1501 41 2063 61 2053 46 2054 46 2055 40 41 46 2064 40 648 41 2006 46 2011 40 2063 46 2059 40 41 44 1501 41 2006 46 2011 40 2051 46 2052 44 1501 41 2007 46 2010 40 648 44 2063 41 621 2006 46 2011 40 2051 46 2052 44 1501 41 348 2065 40 2006 41 58 621 2051 46 2052 61 1500 2053 46 2054 46 2055 40 41 46 353 40 41 2053 46 2054 46 2057 40 2058 61 648 41 2006 46 2011 40 2051 46 2052 44 1501 41 2063 61 2053 46 2054 46 2055 40 41 46 2064 40 648 41 2006 46 2011 40 2063 46 2059 40 41 44 1501 41 2007 46 2010 40 648 44 2063 41 2006 46 2011 40 2051 46 2052 44 1501 41 2066 61 2051 46 2052 2007 46 2012 40 648 41 621 2006 46 2011 40 2051 46 2052 44 2066 41 348 2067 40 2006 41 58 621 2007 46 2010 40 648 44 648 44 1501 41 2007 46 2010 40 648 44 648 44 1501 41 2007 46 2010 40 648 44 648 44 1501 41 2068 46 2069 40 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2016 40 2007 46 2017 40 648 44 648 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2020 40 648 41 44 302 41 348 2070 40 2006 41 58 621 2007 46 2010 40 648 44 648 44 2071 61 1501 41 2006 46 2016 40 2007 46 2072 40 648 44 2071 61 1502 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2016 40 2007 46 2020 40 648 41 44 302 41 621 2007 46 2010 40 648 44 648 44 2071 61 1501 41 2006 46 2016 40 2007 46 2072 40 648 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2006 46 2016 40 2007 46 2072 40 648 41 44 302 41 348 2073 40 2006 41 58 621 2074 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 123 648 58 1501 125 125 621 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2007 46 2010 40 2046 44 2047 41 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 621 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2006 46 2016 40 2007 46 353 40 2046 41 44 304 41 2006 46 2016 40 2007 46 2017 40 2046 44 2047 41 44 304 41 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 621 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 2006 46 2016 40 2007 46 353 40 2046 41 44 304 41 2007 46 2023 40 2074 41 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 348 2075 40 2006 41 58 621 388 2076 397 2077 44 2078 2047 61 648 2079 61 2077 40 2047 46 2080 40 41 41 621 2007 46 2010 40 648 44 2079 41 2081 61 2007 46 2012 40 648 41 2006 46 2011 40 2079 44 2081 41 2006 46 2011 40 2047 44 2078 40 2081 41 46 2082 40 41 41 621 2006 46 2016 40 2007 46 2017 40 648 44 2079 41 44 304 41 2081 61 2007 46 2012 40 648 41 2006 46 2011 40 2079 44 2081 41 2006 46 2011 40 2047 44 2078 40 2081 41 46 2082 40 41 41 621 2007 46 2023 40 123 648 58 2079 125 41 2081 61 2007 46 2012 40 648 41 2006 46 2011 40 2079 44 2081 41 2006 46 2011 40 2047 44 2078 40 2081 41 46 2082 40 41 41 348 2083 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2084 40 2006 41 58 648 2085 61 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2085 44 91 93 41 348 2086 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 1501 41 2068 46 2069 40 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 348 2087 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2007 46 2088 40 91 648 44 648 93 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2089 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2007 46 2008 40 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 348 2090 40 2006 41 58 648 2007 46 2010 40 648 44 648 44 1503 42 1503 42 1503 42 1503 43 1501 41 621 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 1503 42 1503 42 1503 42 1503 43 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 1503 42 1503 42 1503 42 1503 43 1501 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2091 40 2006 41 58 648 2007 46 2010 40 648 44 648 44 303 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 303 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 303 41 44 302 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 303 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2007 46 2010 40 648 44 648 44 2071 61 1501 41 2006 46 2016 40 2007 46 2072 40 648 44 2071 61 303 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2092 40 2006 41 58 648 2007 46 2010 40 648 44 648 44 1500 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 1500 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 1500 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2007 46 2010 40 648 44 648 44 2071 61 1502 41 2006 46 2016 40 2007 46 2072 40 648 44 2071 61 1500 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 41 41 348 2093 40 2006 41 58 621 2007 46 2010 40 648 44 648 44 1504 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2094 40 2006 44 2095 44 2096 44 2097 41 58 474 58 2098 61 2019 91 2095 93 374 2099 58 2006 46 2100 40 648 41 621 621 385 2101 398 2102 40 1501 44 2096 41 58 2098 46 2010 40 648 37 2101 44 648 44 1504 41 2059 61 1500 621 385 2101 398 2102 40 1501 44 2096 41 58 392 2098 46 2020 40 648 37 2101 41 58 2059 636 1501 2006 46 2011 40 2059 44 2097 41 348 2103 40 2006 41 58 2006 46 2094 40 648 44 1503 44 1503 41 348 2104 40 2006 41 58 2006 46 2094 40 648 44 1503 44 1503 41 348 2105 40 2006 41 58 474 58 2098 61 2019 91 648 93 374 2099 58 2006 46 2100 40 648 41 2106 61 2098 46 2107 621 2098 46 2107 61 45 1501 474 58 2098 46 2010 40 648 44 648 44 1504 41 2006 46 2016 40 2098 46 2020 40 648 41 44 304 41 382 58 2098 46 2107 61 2106 348 2108 40 2006 44 2046 44 2109 44 2110 61 303 41 58 648 621 621 348 2111 40 2046 44 42 2112 41 58 450 2046 2113 61 2007 46 2110 2007 46 2110 61 2110 428 2111 2043 61 91 40 648 44 91 2046 44 1501 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 44 1501 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 91 2046 44 648 93 93 41 44 40 648 44 91 123 2046 58 1501 44 648 58 1502 125 93 41 44 40 648 44 91 91 2046 44 648 93 93 41 44 93 474 58 385 2114 44 2112 398 2043 58 497 2006 46 2049 40 2114 61 2114 41 58 497 2006 46 2115 40 2116 41 311 2117 58 2118 40 2007 44 2114 41 40 42 2112 41 2006 46 2011 40 2119 40 2117 46 494 41 44 2109 41 382 58 2007 46 2110 61 2113 348 2120 40 2006 41 58 621 2046 61 648 2006 46 2108 40 2046 44 2121 37 2046 41 348 2122 40 2006 41 58 621 2046 61 40 648 42 1504 41 43 648 2109 61 40 648 648 37 40 2046 44 1504 41 41 2006 46 2108 40 2046 44 2109 41 348 2123 40 2006 41 58 621 621 348 2110 40 2046 44 42 2112 41 58 450 2046 43 648 2046 61 648 42 1504 2109 61 40 648 648 37 40 2110 40 2046 41 44 1504 41 41 2006 46 2108 40 2046 44 2109 44 2110 61 2110 41 348 2124 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 621 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2019 91 648 93 46 2010 40 648 44 1503 44 2125 61 1501 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 348 2126 40 2006 41 58 621 2006 46 2016 40 2007 46 2017 40 648 44 1503 44 2125 61 1502 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2007 46 2017 40 648 44 1503 44 2125 61 1502 41 44 302 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2007 46 2017 40 648 44 1503 44 2125 61 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 41 44 302 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 44 2125 61 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 44 2125 61 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 44 2125 61 1501 41 44 302 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 348 2127 40 2006 41 58 2007 46 2010 40 648 44 1503 41 621 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2006 46 2016 40 2007 46 2020 40 648 44 2125 61 1501 41 44 304 41 2006 46 2016 40 2007 46 2020 40 648 44 2125 61 1502 41 44 302 41 2006 46 2016 40 2019 91 648 93 46 2020 40 648 41 44 302 41 2006 46 2016 40 2019 91 648 93 46 2020 40 648 44 2125 61 1501 41 44 304 41 2006 46 2016 40 2019 91 648 93 46 2020 40 648 44 2125 61 1502 41 44 302 41 348 2128 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2007 46 353 40 648 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2007 46 353 40 648 44 2125 61 1502 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2019 91 648 93 46 353 40 648 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2019 91 648 93 46 353 40 648 44 2125 61 1501 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 348 2129 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2007 46 2033 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2007 46 2033 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2019 91 648 93 46 2033 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2037 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2019 91 648 93 46 2033 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2037 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 348 2130 40 2006 41 58 621 2007 46 2023 40 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 621 2007 46 2023 40 123 648 58 1503 44 648 58 1503 125 44 2125 61 1502 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 621 2019 91 648 93 46 2023 40 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 621 2019 91 648 93 46 2023 40 123 648 58 1503 44 648 58 1503 125 44 2125 61 1501 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 348 2131 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2007 46 2132 40 648 44 2125 61 1502 41 44 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2019 91 648 93 46 2132 40 648 41 44 1502 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 497 2006 46 2034 40 2035 41 58 2007 46 2132 40 648 41 2007 46 2010 40 648 44 303 41 2006 46 2011 40 2007 46 2132 40 648 41 44 1502 41 348 2133 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2134 40 648 44 2125 61 1502 41 44 1501 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2134 40 648 41 44 1501 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 497 2006 46 2034 40 2035 41 58 2007 46 2134 40 648 44 2125 61 1502 41 2007 46 2010 40 648 44 303 44 2125 61 1502 41 2006 46 2011 40 2007 46 2134 40 648 44 2125 61 1502 41 44 1501 41 348 2135 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 64 2136 40 2137 61 2138 41 348 2139 40 2006 41 58 2140 61 2141 40 2142 41 2143 61 2006 46 2001 46 2012 40 648 41 2143 46 2144 61 304 2145 61 2141 40 2142 41 46 2146 40 2143 41 2006 46 2014 40 2145 41 2147 61 648 348 2148 40 2149 41 58 2150 61 2151 40 2147 41 2150 46 2152 40 648 44 648 41 450 2150 2153 61 2154 40 2148 41 2150 61 2153 40 2143 41 2145 61 2140 46 2146 40 2143 41 2006 46 2155 40 2145 41 2006 46 2011 40 2145 46 2147 44 2147 46 2080 40 41 41 2006 46 2011 40 2145 46 2156 44 2150 46 2156 41 2154 40 409 2149 58 2145 41 40 2143 41 2145 61 2140 46 2146 40 2143 41 2006 46 2155 40 2145 41 2006 46 2011 40 2145 46 2147 44 2147 46 2080 40 41 41 2006 46 2011 40 2145 46 2156 44 2150 46 2156 41 348 2157 40 2006 41 58 621 497 2006 46 2034 40 2158 46 2159 41 58 2007 46 2017 40 648 44 2160 40 41 41 348 2161 40 2006 41 58 497 2006 46 2034 40 2158 46 2159 41 58 2007 46 2010 40 648 44 2160 40 41 41 348 2162 40 2006 41 58 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2163 40 648 44 1503 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2007 46 2163 40 648 44 303 41 41 621 2006 46 2014 40 2007 46 2012 40 648 44 648 41 41 348 2164 40 2006 41 58 348 2165 40 41 58 450 648 2006 46 2011 40 2007 46 2163 40 648 44 2165 41 44 648 41 2006 46 2011 40 2007 46 2163 40 648 44 2165 40 41 41 44 648 41 2006 46 2014 40 2007 46 2163 40 648 44 409 58 303 41 41 621 2006 46 2014 40 2007 46 2012 40 648 44 648 41 41 348 2166 40 2006 41 58 2167 61 648 2006 46 2011 40 2007 46 2163 40 648 44 1505 44 2125 61 1502 41 44 1505 41 497 2006 46 2168 40 2004 44 2167 41 58 2007 46 2163 40 648 41 497 2006 46 2168 40 2004 44 2167 41 58 2007 46 2163 40 648 44 2125 61 1501 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2163 40 648 44 1503 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2163 40 648 44 1505 44 2125 61 1502 41 44 1505 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 348 2169 40 2006 41 58 497 2170 46 2171 40 648 37 40 2172 46 2173 91 648 93 91 648 93 44 648 41 41 311 2174 58 621 621 2174 46 2175 61 302 2006 46 2011 40 2007 46 2163 40 648 44 648 41 44 648 41 
132404,Python,"class GISLookup(Lookup):
    sql_template = None
    transform_func = None
    distance = False
    band_rhs = None
    band_lhs = None

    def __init__(self, lhs, rhs):
        rhs, *self.rhs_params = rhs if isinstance(rhs, (list, tuple)) else [rhs]
        super().__init__(lhs, rhs)
        self.template_params = {}
        self.process_rhs_params()

    def process_rhs_params(self):
        if self.rhs_params:
            # Check if a band index was passed in the query argument.
            if len(self.rhs_params) == (2 if self.lookup_name == 'relate' else 1):
                self.process_band_indices()
            elif len(self.rhs_params) > 1:
                raise ValueError('Tuple too long for lookup %s.' % self.lookup_name)
        elif isinstance(self.lhs, RasterBandTransform):
            self.process_band_indices(only_lhs=True)

    def process_band_indices(self, only_lhs=False):
        """"""
        Extract the lhs band index from the band transform class and the rhs
        band index from the input tuple.
        """"""
        # PostGIS band indices are 1-based, so the band index needs to be
        # increased to be consistent with the GDALRaster band indices.
        if only_lhs:
            self.band_rhs = 1
            self.band_lhs = self.lhs.band_index + 1
            return

        if isinstance(self.lhs, RasterBandTransform):
            self.band_lhs = self.lhs.band_index + 1
        else:
            self.band_lhs = 1

        self.band_rhs, *self.rhs_params = self.rhs_params

    def get_db_prep_lookup(self, value, connection):
        # get_db_prep_lookup is called by process_rhs from super class
        return ('%s', [connection.ops.Adapter(value)])

    def process_rhs(self, compiler, connection):
        if isinstance(self.rhs, Query):
            # If rhs is some Query, don't touch it.
            return super().process_rhs(compiler, connection)
        if isinstance(self.rhs, Expression):
            self.rhs = self.rhs.resolve_expression(compiler.query)
        rhs, rhs_params = super().process_rhs(compiler, connection)
        placeholder = connection.ops.get_geom_placeholder(self.lhs.output_field, self.rhs, compiler)
        return placeholder % rhs, rhs_params

    def get_rhs_op(self, connection, rhs):
        # Unlike BuiltinLookup, the GIS get_rhs_op() implementation should return
        # an object (SpatialOperator) with an as_sql() method to allow for more
        # complex computations (where the lhs part can be mixed in).
        return connection.ops.gis_operators[self.lookup_name]

    def as_sql(self, compiler, connection):
        lhs_sql, lhs_params = self.process_lhs(compiler, connection)
        rhs_sql, rhs_params = self.process_rhs(compiler, connection)
        sql_params = (*lhs_params, *rhs_params)

        template_params = {'lhs': lhs_sql, 'rhs': rhs_sql, 'value': '%s', **self.template_params}
        rhs_op = self.get_rhs_op(connection, rhs_sql)
        return rhs_op.as_sql(connection, self, template_params, sql_params)",1,334 2000 40 2001 41 58 2002 61 303 2003 61 303 2004 61 302 2005 61 303 2006 61 303 348 2007 40 2008 44 2009 44 2010 41 58 2010 44 42 2008 46 2011 61 2010 392 2012 40 2010 44 40 411 44 2013 41 41 360 91 2010 93 463 40 41 46 2007 40 2009 44 2010 41 2008 46 2014 61 123 125 2008 46 2015 40 41 348 2015 40 2008 41 58 392 2008 46 2011 58 621 392 2016 40 2008 46 2011 41 614 40 1502 392 2008 46 2017 614 648 360 1501 41 58 2008 46 2018 40 41 359 2016 40 2008 46 2011 41 62 1501 58 440 2019 40 648 37 2008 46 2017 41 359 2012 40 2008 46 2009 44 2020 41 58 2008 46 2018 40 2021 61 304 41 348 2018 40 2008 44 2021 61 302 41 58 648 621 621 392 2021 58 2008 46 2005 61 1501 2008 46 2006 61 2008 46 2009 46 2022 43 1501 450 392 2012 40 2008 46 2009 44 2020 41 58 2008 46 2006 61 2008 46 2009 46 2022 43 1501 360 58 2008 46 2006 61 1501 2008 46 2005 44 42 2008 46 2011 61 2008 46 2011 348 2023 40 2008 44 2024 44 2025 41 58 621 450 40 648 44 91 2025 46 2026 46 2027 40 2024 41 93 41 348 2028 40 2008 44 2029 44 2025 41 58 392 2012 40 2008 46 2010 44 2030 41 58 621 450 463 40 41 46 2028 40 2029 44 2025 41 392 2012 40 2008 46 2010 44 2031 41 58 2008 46 2010 61 2008 46 2010 46 2032 40 2029 46 2033 41 2010 44 2011 61 463 40 41 46 2028 40 2029 44 2025 41 2034 61 2025 46 2026 46 2035 40 2008 46 2009 46 2036 44 2008 46 2010 44 2029 41 450 2034 37 2010 44 2011 348 2037 40 2008 44 2025 44 2010 41 58 621 621 621 450 2025 46 2026 46 2038 91 2008 46 2017 93 348 2039 40 2008 44 2029 44 2025 41 58 2040 44 2041 61 2008 46 2042 40 2029 44 2025 41 2043 44 2011 61 2008 46 2028 40 2029 44 2025 41 2044 61 40 42 2041 44 42 2011 41 2014 61 123 648 58 2040 44 648 58 2043 44 648 58 648 44 638 2008 46 2014 125 2045 61 2008 46 2037 40 2025 44 2043 41 450 2045 46 2039 40 2025 44 2008 44 2014 44 2044 41 
133183,Python,"class ModelFormBaseTest(TestCase):
    def test_base_form(self):
        self.assertEqual(list(BaseCategoryForm.base_fields), ['name', 'slug', 'url'])

    def test_no_model_class(self):
        class NoModelModelForm(forms.ModelForm):
            pass
        with self.assertRaisesMessage(ValueError, 'ModelForm has no model class specified.'):
            NoModelModelForm()

    def test_empty_fields_to_fields_for_model(self):
        """"""
        An argument of fields=() to fields_for_model should return an empty dictionary
        """"""
        field_dict = fields_for_model(Person, fields=())
        self.assertEqual(len(field_dict), 0)

    def test_empty_fields_on_modelform(self):
        """"""
        No fields on a ModelForm should actually result in no fields.
        """"""
        class EmptyPersonForm(forms.ModelForm):
            class Meta:
                model = Person
                fields = ()

        form = EmptyPersonForm()
        self.assertEqual(len(form.fields), 0)

    def test_empty_fields_to_construct_instance(self):
        """"""
        No fields should be set on a model instance if construct_instance receives fields=().
        """"""
        form = modelform_factory(Person, fields=""__all__"")({'name': 'John Doe'})
        self.assertTrue(form.is_valid())
        instance = construct_instance(form, Person(), fields=())
        self.assertEqual(instance.name, '')

    def test_blank_with_null_foreign_key_field(self):
        """"""
        #13776 -- ModelForm's with models having a FK set to null=False and
        required=False should be valid.
        """"""
        class FormForTestingIsValid(forms.ModelForm):
            class Meta:
                model = Student
                fields = '__all__'

            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.fields['character'].required = False

        char = Character.objects.create(username='user', last_action=datetime.datetime.today())
        data = {'study': 'Engineering'}
        data2 = {'study': 'Engineering', 'character': char.pk}

        # form is valid because required=False for field 'character'
        f1 = FormForTestingIsValid(data)
        self.assertTrue(f1.is_valid())

        f2 = FormForTestingIsValid(data2)
        self.assertTrue(f2.is_valid())
        obj = f2.save()
        self.assertEqual(obj.character, char)

    def test_blank_false_with_null_true_foreign_key_field(self):
        """"""
        A ModelForm with a model having ForeignKey(blank=False, null=True)
        and the form field set to required=False should allow the field to be
        unset.
        """"""
        class AwardForm(forms.ModelForm):
            class Meta:
                model = Award
                fields = '__all__'

            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.fields['character'].required = False

        character = Character.objects.create(username='user', last_action=datetime.datetime.today())
        award = Award.objects.create(name='Best sprinter', character=character)
        data = {'name': 'Best tester', 'character': ''}  # remove character
        form = AwardForm(data=data, instance=award)
        self.assertTrue(form.is_valid())
        award = form.save()
        self.assertIsNone(award.character)

    def test_blank_foreign_key_with_radio(self):
        class BookForm(forms.ModelForm):
            class Meta:
                model = Book
                fields = ['author']
                widgets = {'author': forms.RadioSelect()}

        writer = Writer.objects.create(name='Joe Doe')
        form = BookForm()
        self.assertEqual(list(form.fields['author'].choices), [
            ('', '---------'),
            (writer.pk, 'Joe Doe'),
        ])

    def test_non_blank_foreign_key_with_radio(self):
        class AwardForm(forms.ModelForm):
            class Meta:
                model = Award
                fields = ['character']
                widgets = {'character': forms.RadioSelect()}

        character = Character.objects.create(
            username='user',
            last_action=datetime.datetime.today(),
        )
        form = AwardForm()
        self.assertEqual(
            list(form.fields['character'].choices),
            [(character.pk, 'user')],
        )

    def test_save_blank_false_with_required_false(self):
        """"""
        A ModelForm with a model with a field set to blank=False and the form
        field set to required=False should allow the field to be unset.
        """"""
        obj = Writer.objects.create(name='test')
        form = CustomWriterForm(data={'name': ''}, instance=obj)
        self.assertTrue(form.is_valid())
        obj = form.save()
        self.assertEqual(obj.name, '')

    def test_save_blank_null_unique_charfield_saves_null(self):
        form_class = modelform_factory(model=NullableUniqueCharFieldModel, fields='__all__')
        empty_value = '' if connection.features.interprets_empty_strings_as_nulls else None
        data = {
            'codename': '',
            'email': '',
            'slug': '',
            'url': '',
        }
        form = form_class(data=data)
        self.assertTrue(form.is_valid())
        form.save()
        self.assertEqual(form.instance.codename, empty_value)
        self.assertEqual(form.instance.email, empty_value)
        self.assertEqual(form.instance.slug, empty_value)
        self.assertEqual(form.instance.url, empty_value)

        # Save a second form to verify there isn't a unique constraint violation.
        form = form_class(data=data)
        self.assertTrue(form.is_valid())
        form.save()
        self.assertEqual(form.instance.codename, empty_value)
        self.assertEqual(form.instance.email, empty_value)
        self.assertEqual(form.instance.slug, empty_value)
        self.assertEqual(form.instance.url, empty_value)

    def test_missing_fields_attribute(self):
        message = (
            ""Creating a ModelForm without either the 'fields' attribute ""
            ""or the 'exclude' attribute is prohibited; form ""
            ""MissingFieldsForm needs updating.""
        )
        with self.assertRaisesMessage(ImproperlyConfigured, message):
            class MissingFieldsForm(forms.ModelForm):
                class Meta:
                    model = Category

    def test_extra_fields(self):
        class ExtraFields(BaseCategoryForm):
            some_extra_field = forms.BooleanField()

        self.assertEqual(list(ExtraFields.base_fields),
                         ['name', 'slug', 'url', 'some_extra_field'])

    def test_extra_field_model_form(self):
        with self.assertRaisesMessage(FieldError, 'no-field'):
            class ExtraPersonForm(forms.ModelForm):
                """""" ModelForm with an extra field """"""
                age = forms.IntegerField()

                class Meta:
                    model = Person
                    fields = ('name', 'no-field')

    def test_extra_declared_field_model_form(self):
        class ExtraPersonForm(forms.ModelForm):
            """""" ModelForm with an extra field """"""
            age = forms.IntegerField()

            class Meta:
                model = Person
                fields = ('name', 'age')

    def test_extra_field_modelform_factory(self):
        with self.assertRaisesMessage(FieldError, 'Unknown field(s) (no-field) specified for Person'):
            modelform_factory(Person, fields=['no-field', 'name'])

    def test_replace_field(self):
        class ReplaceField(forms.ModelForm):
            url = forms.BooleanField()

            class Meta:
                model = Category
                fields = '__all__'

        self.assertIsInstance(ReplaceField.base_fields['url'], forms.fields.BooleanField)

    def test_replace_field_variant_2(self):
        # Should have the same result as before,
        # but 'fields' attribute specified differently
        class ReplaceField(forms.ModelForm):
            url = forms.BooleanField()

            class Meta:
                model = Category
                fields = ['url']

        self.assertIsInstance(ReplaceField.base_fields['url'], forms.fields.BooleanField)

    def test_replace_field_variant_3(self):
        # Should have the same result as before,
        # but 'fields' attribute specified differently
        class ReplaceField(forms.ModelForm):
            url = forms.BooleanField()

            class Meta:
                model = Category
                fields = []  # url will still appear, since it is explicit above

        self.assertIsInstance(ReplaceField.base_fields['url'], forms.fields.BooleanField)

    def test_override_field(self):
        class WriterForm(forms.ModelForm):
            book = forms.CharField(required=False)

            class Meta:
                model = Writer
                fields = '__all__'

        wf = WriterForm({'name': 'Richard Lockridge'})
        self.assertTrue(wf.is_valid())

    def test_limit_nonexistent_field(self):
        expected_msg = 'Unknown field(s) (nonexistent) specified for Category'
        with self.assertRaisesMessage(FieldError, expected_msg):
            class InvalidCategoryForm(forms.ModelForm):
                class Meta:
                    model = Category
                    fields = ['nonexistent']

    def test_limit_fields_with_string(self):
        expected_msg = ""CategoryForm.Meta.fields cannot be a string. Did you mean to type: ('url',)?""
        with self.assertRaisesMessage(TypeError, expected_msg):
            class CategoryForm(forms.ModelForm):
                class Meta:
                    model = Category
                    fields = ('url')  # note the missing comma

    def test_exclude_fields(self):
        class ExcludeFields(forms.ModelForm):
            class Meta:
                model = Category
                exclude = ['url']

        self.assertEqual(list(ExcludeFields.base_fields), ['name', 'slug'])

    def test_exclude_nonexistent_field(self):
        class ExcludeFields(forms.ModelForm):
            class Meta:
                model = Category
                exclude = ['nonexistent']

        self.assertEqual(list(ExcludeFields.base_fields), ['name', 'slug', 'url'])

    def test_exclude_fields_with_string(self):
        expected_msg = ""CategoryForm.Meta.exclude cannot be a string. Did you mean to type: ('url',)?""
        with self.assertRaisesMessage(TypeError, expected_msg):
            class CategoryForm(forms.ModelForm):
                class Meta:
                    model = Category
                    exclude = ('url')  # note the missing comma

    def test_exclude_and_validation(self):
        # This Price instance generated by this form is not valid because the quantity
        # field is required, but the form is valid because the field is excluded from
        # the form. This is for backwards compatibility.
        class PriceFormWithoutQuantity(forms.ModelForm):
            class Meta:
                model = Price
                exclude = ('quantity',)

        form = PriceFormWithoutQuantity({'price': '6.00'})
        self.assertTrue(form.is_valid())
        price = form.save(commit=False)
        msg = ""{'quantity': ['This field cannot be null.']}""
        with self.assertRaisesMessage(ValidationError, msg):
            price.full_clean()

        # The form should not validate fields that it doesn't contain even if they are
        # specified using 'fields', not 'exclude'.
        class PriceFormWithoutQuantity(forms.ModelForm):
            class Meta:
                model = Price
                fields = ('price',)
        form = PriceFormWithoutQuantity({'price': '6.00'})
        self.assertTrue(form.is_valid())

        # The form should still have an instance of a model that is not complete and
        # not saved into a DB yet.
        self.assertEqual(form.instance.price, Decimal('6.00'))
        self.assertIsNone(form.instance.quantity)
        self.assertIsNone(form.instance.pk)

    def test_confused_form(self):
        class ConfusedForm(forms.ModelForm):
            """""" Using 'fields' *and* 'exclude'. Not sure why you'd want to do
            this, but uh, ""be liberal in what you accept"" and all.
            """"""
            class Meta:
                model = Category
                fields = ['name', 'url']
                exclude = ['url']

        self.assertEqual(list(ConfusedForm.base_fields),
                         ['name'])

    def test_mixmodel_form(self):
        class MixModelForm(BaseCategoryForm):
            """""" Don't allow more than one 'model' definition in the
            inheritance hierarchy.  Technically, it would generate a valid
            form, but the fact that the resulting save method won't deal with
            multiple objects is likely to trip up people not familiar with the
            mechanics.
            """"""
            class Meta:
                model = Article
                fields = '__all__'
            # MixModelForm is now an Article-related thing, because MixModelForm.Meta
            # overrides BaseCategoryForm.Meta.

        self.assertEqual(
            list(MixModelForm.base_fields),
            ['headline', 'slug', 'pub_date', 'writer', 'article', 'categories', 'status']
        )

    def test_article_form(self):
        self.assertEqual(
            list(ArticleForm.base_fields),
            ['headline', 'slug', 'pub_date', 'writer', 'article', 'categories', 'status']
        )

    def test_bad_form(self):
        # First class with a Meta class wins...
        class BadForm(ArticleForm, BaseCategoryForm):
            pass

        self.assertEqual(
            list(BadForm.base_fields),
            ['headline', 'slug', 'pub_date', 'writer', 'article', 'categories', 'status']
        )

    def test_invalid_meta_model(self):
        class InvalidModelForm(forms.ModelForm):
            class Meta:
                pass  # no model

        # Can't create new form
        msg = 'ModelForm has no model class specified.'
        with self.assertRaisesMessage(ValueError, msg):
            InvalidModelForm()

        # Even if you provide a model instance
        with self.assertRaisesMessage(ValueError, msg):
            InvalidModelForm(instance=Category)

    def test_subcategory_form(self):
        class SubCategoryForm(BaseCategoryForm):
            """""" Subclassing without specifying a Meta on the class will use
            the parent's Meta (or the first parent in the MRO if there are
            multiple parent classes).
            """"""
            pass

        self.assertEqual(list(SubCategoryForm.base_fields), ['name', 'slug', 'url'])

    def test_subclassmeta_form(self):
        class SomeCategoryForm(forms.ModelForm):
            checkbox = forms.BooleanField()

            class Meta:
                model = Category
                fields = '__all__'

        class SubclassMeta(SomeCategoryForm):
            """""" We can also subclass the Meta inner class to change the fields
            list.
            """"""
            class Meta(SomeCategoryForm.Meta):
                exclude = ['url']

        self.assertHTMLEqual(
            str(SubclassMeta()),
            """"""<tr><th><label for=""id_name"">Name:</label></th>
<td><input id=""id_name"" type=""text"" name=""name"" maxlength=""20"" required></td></tr>
<tr><th><label for=""id_slug"">Slug:</label></th>
<td><input id=""id_slug"" type=""text"" name=""slug"" maxlength=""20"" required></td></tr>
<tr><th><label for=""id_checkbox"">Checkbox:</label></th>
<td><input type=""checkbox"" name=""checkbox"" id=""id_checkbox"" required></td></tr>""""""
        )

    def test_orderfields_form(self):
        class OrderFields(forms.ModelForm):
            class Meta:
                model = Category
                fields = ['url', 'name']

        self.assertEqual(list(OrderFields.base_fields),
                         ['url', 'name'])
        self.assertHTMLEqual(
            str(OrderFields()),
            """"""<tr><th><label for=""id_url"">The URL:</label></th>
<td><input id=""id_url"" type=""text"" name=""url"" maxlength=""40"" required></td></tr>
<tr><th><label for=""id_name"">Name:</label></th>
<td><input id=""id_name"" type=""text"" name=""name"" maxlength=""20"" required></td></tr>""""""
        )

    def test_orderfields2_form(self):
        class OrderFields2(forms.ModelForm):
            class Meta:
                model = Category
                fields = ['slug', 'url', 'name']
                exclude = ['url']

        self.assertEqual(list(OrderFields2.base_fields), ['slug', 'name'])

    def test_default_populated_on_optional_field(self):
        class PubForm(forms.ModelForm):
            mode = forms.CharField(max_length=255, required=False)

            class Meta:
                model = PublicationDefaults
                fields = ('mode',)

        # Empty data uses the model field default.
        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.mode, 'di')
        self.assertEqual(m1._meta.get_field('mode').get_default(), 'di')

        # Blank data doesn't use the model field default.
        mf2 = PubForm({'mode': ''})
        self.assertEqual(mf2.errors, {})
        m2 = mf2.save(commit=False)
        self.assertEqual(m2.mode, '')

    def test_default_not_populated_on_non_empty_value_in_cleaned_data(self):
        class PubForm(forms.ModelForm):
            mode = forms.CharField(max_length=255, required=False)
            mocked_mode = None

            def clean(self):
                self.cleaned_data['mode'] = self.mocked_mode
                return self.cleaned_data

            class Meta:
                model = PublicationDefaults
                fields = ('mode',)

        pub_form = PubForm({})
        pub_form.mocked_mode = 'de'
        pub = pub_form.save(commit=False)
        self.assertEqual(pub.mode, 'de')
        # Default should be populated on an empty value in cleaned_data.
        default_mode = 'di'
        for empty_value in pub_form.fields['mode'].empty_values:
            with self.subTest(empty_value=empty_value):
                pub_form = PubForm({})
                pub_form.mocked_mode = empty_value
                pub = pub_form.save(commit=False)
                self.assertEqual(pub.mode, default_mode)

    def test_default_not_populated_on_optional_checkbox_input(self):
        class PubForm(forms.ModelForm):
            class Meta:
                model = PublicationDefaults
                fields = ('active',)

        # Empty data doesn't use the model default because CheckboxInput
        # doesn't have a value in HTML form submission.
        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertIs(m1.active, False)
        self.assertIsInstance(mf1.fields['active'].widget, forms.CheckboxInput)
        self.assertIs(m1._meta.get_field('active').get_default(), True)

    def test_default_not_populated_on_checkboxselectmultiple(self):
        class PubForm(forms.ModelForm):
            mode = forms.CharField(required=False, widget=forms.CheckboxSelectMultiple)

            class Meta:
                model = PublicationDefaults
                fields = ('mode',)

        # Empty data doesn't use the model default because an unchecked
        # CheckboxSelectMultiple doesn't have a value in HTML form submission.
        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.mode, '')
        self.assertEqual(m1._meta.get_field('mode').get_default(), 'di')

    def test_default_not_populated_on_selectmultiple(self):
        class PubForm(forms.ModelForm):
            mode = forms.CharField(required=False, widget=forms.SelectMultiple)

            class Meta:
                model = PublicationDefaults
                fields = ('mode',)

        # Empty data doesn't use the model default because an unselected
        # SelectMultiple doesn't have a value in HTML form submission.
        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.mode, '')
        self.assertEqual(m1._meta.get_field('mode').get_default(), 'di')

    def test_prefixed_form_with_default_field(self):
        class PubForm(forms.ModelForm):
            prefix = 'form-prefix'

            class Meta:
                model = PublicationDefaults
                fields = ('mode',)

        mode = 'de'
        self.assertNotEqual(mode, PublicationDefaults._meta.get_field('mode').get_default())

        mf1 = PubForm({'form-prefix-mode': mode})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.mode, mode)

    def test_renderer_kwarg(self):
        custom = object()
        self.assertIs(ProductForm(renderer=custom).renderer, custom)

    def test_default_splitdatetime_field(self):
        class PubForm(forms.ModelForm):
            datetime_published = forms.SplitDateTimeField(required=False)

            class Meta:
                model = PublicationDefaults
                fields = ('datetime_published',)

        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.datetime_published, datetime.datetime(2000, 1, 1))

        mf2 = PubForm({'datetime_published_0': '2010-01-01', 'datetime_published_1': '0:00:00'})
        self.assertEqual(mf2.errors, {})
        m2 = mf2.save(commit=False)
        self.assertEqual(m2.datetime_published, datetime.datetime(2010, 1, 1))

    def test_default_filefield(self):
        class PubForm(forms.ModelForm):
            class Meta:
                model = PublicationDefaults
                fields = ('file',)

        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.file.name, 'default.txt')

        mf2 = PubForm({}, {'file': SimpleUploadedFile('name', b'foo')})
        self.assertEqual(mf2.errors, {})
        m2 = mf2.save(commit=False)
        self.assertEqual(m2.file.name, 'name')

    def test_default_selectdatewidget(self):
        class PubForm(forms.ModelForm):
            date_published = forms.DateField(required=False, widget=forms.SelectDateWidget)

            class Meta:
                model = PublicationDefaults
                fields = ('date_published',)

        mf1 = PubForm({})
        self.assertEqual(mf1.errors, {})
        m1 = mf1.save(commit=False)
        self.assertEqual(m1.date_published, datetime.date.today())

        mf2 = PubForm({'date_published_year': '2010', 'date_published_month': '1', 'date_published_day': '1'})
        self.assertEqual(mf2.errors, {})
        m2 = mf2.save(commit=False)
        self.assertEqual(m2.date_published, datetime.date(2010, 1, 1))",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 2003 46 2004 40 411 40 2005 46 2006 41 44 91 648 44 648 44 648 93 41 348 2007 40 2003 41 58 334 2008 40 2009 46 2010 41 58 434 497 2003 46 2011 40 2012 44 648 41 58 2008 40 41 348 2013 40 2003 41 58 648 2014 61 2015 40 2016 44 2017 61 40 41 41 2003 46 2004 40 2018 40 2014 41 44 1500 41 348 2019 40 2003 41 58 648 334 2020 40 2009 46 2010 41 58 334 2021 58 2022 61 2016 2017 61 40 41 2023 61 2020 40 41 2003 46 2004 40 2018 40 2023 46 2017 41 44 1500 41 348 2024 40 2003 41 58 648 2023 61 2025 40 2016 44 2017 61 648 41 40 123 648 58 648 125 41 2003 46 2026 40 2023 46 2027 40 41 41 2028 61 2029 40 2023 44 2016 40 41 44 2017 61 40 41 41 2003 46 2004 40 2028 46 2030 44 648 41 348 2031 40 2003 41 58 648 334 2032 40 2009 46 2010 41 58 334 2021 58 2022 61 2033 2017 61 648 348 2034 40 2003 44 42 2035 44 638 2036 41 58 463 40 41 46 2034 40 42 2035 44 638 2036 41 2003 46 2017 91 648 93 46 2037 61 302 330 61 2038 46 2039 46 2040 40 2041 61 648 44 2042 61 2043 46 2043 46 2044 40 41 41 2045 61 123 648 58 648 125 2046 61 123 648 58 648 44 648 58 330 46 2047 125 621 2048 61 2032 40 2045 41 2003 46 2026 40 2048 46 2027 40 41 41 2049 61 2032 40 2046 41 2003 46 2026 40 2049 46 2027 40 41 41 2050 61 2049 46 2051 40 41 2003 46 2004 40 2050 46 2052 44 330 41 348 2053 40 2003 41 58 648 334 2054 40 2009 46 2010 41 58 334 2021 58 2022 61 2055 2017 61 648 348 2034 40 2003 44 42 2035 44 638 2036 41 58 463 40 41 46 2034 40 42 2035 44 638 2036 41 2003 46 2017 91 648 93 46 2037 61 302 2052 61 2038 46 2039 46 2040 40 2041 61 648 44 2042 61 2043 46 2043 46 2044 40 41 41 2056 61 2055 46 2039 46 2040 40 2030 61 648 44 2052 61 2052 41 2045 61 123 648 58 648 44 648 58 648 125 621 2023 61 2054 40 2045 61 2045 44 2028 61 2056 41 2003 46 2026 40 2023 46 2027 40 41 41 2056 61 2023 46 2051 40 41 2003 46 2057 40 2056 46 2052 41 348 2058 40 2003 41 58 334 2059 40 2009 46 2010 41 58 334 2021 58 2022 61 2060 2017 61 91 648 93 2061 61 123 648 58 2009 46 2062 40 41 125 2063 61 2064 46 2039 46 2040 40 2030 61 648 41 2023 61 2059 40 41 2003 46 2004 40 411 40 2023 46 2017 91 648 93 46 2065 41 44 91 40 648 44 648 41 44 40 2063 46 2047 44 648 41 44 93 41 348 2066 40 2003 41 58 334 2054 40 2009 46 2010 41 58 334 2021 58 2022 61 2055 2017 61 91 648 93 2061 61 123 648 58 2009 46 2062 40 41 125 2052 61 2038 46 2039 46 2040 40 2041 61 648 44 2042 61 2043 46 2043 46 2044 40 41 44 41 2023 61 2054 40 41 2003 46 2004 40 411 40 2023 46 2017 91 648 93 46 2065 41 44 91 40 2052 46 2047 44 648 41 93 44 41 348 2067 40 2003 41 58 648 2050 61 2064 46 2039 46 2040 40 2030 61 648 41 2023 61 2068 40 2045 61 123 648 58 648 125 44 2028 61 2050 41 2003 46 2026 40 2023 46 2027 40 41 41 2050 61 2023 46 2051 40 41 2003 46 2004 40 2050 46 2030 44 648 41 348 2069 40 2003 41 58 2070 61 2025 40 2022 61 2071 44 2017 61 648 41 2072 61 648 392 2073 46 2074 46 2075 360 303 2045 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2023 61 2070 40 2045 61 2045 41 2003 46 2026 40 2023 46 2027 40 41 41 2023 46 2051 40 41 2003 46 2004 40 2023 46 2028 46 2076 44 2072 41 2003 46 2004 40 2023 46 2028 46 2077 44 2072 41 2003 46 2004 40 2023 46 2028 46 2078 44 2072 41 2003 46 2004 40 2023 46 2028 46 2079 44 2072 41 621 2023 61 2070 40 2045 61 2045 41 2003 46 2026 40 2023 46 2027 40 41 41 2023 46 2051 40 41 2003 46 2004 40 2023 46 2028 46 2076 44 2072 41 2003 46 2004 40 2023 46 2028 46 2077 44 2072 41 2003 46 2004 40 2023 46 2028 46 2078 44 2072 41 2003 46 2004 40 2023 46 2028 46 2079 44 2072 41 348 2080 40 2003 41 58 2081 61 40 648 648 648 41 497 2003 46 2011 40 2082 44 2081 41 58 334 2083 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 348 2085 40 2003 41 58 334 2086 40 2005 41 58 2087 61 2009 46 2088 40 41 2003 46 2004 40 411 40 2086 46 2006 41 44 91 648 44 648 44 648 44 648 93 41 348 2089 40 2003 41 58 497 2003 46 2011 40 2090 44 648 41 58 334 2091 40 2009 46 2010 41 58 648 2092 61 2009 46 2093 40 41 334 2021 58 2022 61 2016 2017 61 40 648 44 648 41 348 2094 40 2003 41 58 334 2091 40 2009 46 2010 41 58 648 2092 61 2009 46 2093 40 41 334 2021 58 2022 61 2016 2017 61 40 648 44 648 41 348 2095 40 2003 41 58 497 2003 46 2011 40 2090 44 648 41 58 2025 40 2016 44 2017 61 91 648 44 648 93 41 348 2096 40 2003 41 58 334 2097 40 2009 46 2010 41 58 2079 61 2009 46 2088 40 41 334 2021 58 2022 61 2084 2017 61 648 2003 46 2098 40 2097 46 2006 91 648 93 44 2009 46 2017 46 2088 41 348 2099 40 2003 41 58 621 621 334 2097 40 2009 46 2010 41 58 2079 61 2009 46 2088 40 41 334 2021 58 2022 61 2084 2017 61 91 648 93 2003 46 2098 40 2097 46 2006 91 648 93 44 2009 46 2017 46 2088 41 348 2100 40 2003 41 58 621 621 334 2097 40 2009 46 2010 41 58 2079 61 2009 46 2088 40 41 334 2021 58 2022 61 2084 2017 61 91 93 621 2003 46 2098 40 2097 46 2006 91 648 93 44 2009 46 2017 46 2088 41 348 2101 40 2003 41 58 334 2102 40 2009 46 2010 41 58 2103 61 2009 46 2104 40 2037 61 302 41 334 2021 58 2022 61 2064 2017 61 648 2105 61 2102 40 123 648 58 648 125 41 2003 46 2026 40 2105 46 2027 40 41 41 348 2106 40 2003 41 58 2107 61 648 497 2003 46 2011 40 2090 44 2107 41 58 334 2108 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2017 61 91 648 93 348 2109 40 2003 41 58 2107 61 648 497 2003 46 2011 40 2110 44 2107 41 58 334 2111 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2017 61 40 648 41 621 348 2112 40 2003 41 58 334 2113 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2114 61 91 648 93 2003 46 2004 40 411 40 2113 46 2006 41 44 91 648 44 648 93 41 348 2115 40 2003 41 58 334 2113 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2114 61 91 648 93 2003 46 2004 40 411 40 2113 46 2006 41 44 91 648 44 648 44 648 93 41 348 2116 40 2003 41 58 2107 61 648 497 2003 46 2011 40 2110 44 2107 41 58 334 2111 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2114 61 40 648 41 621 348 2117 40 2003 41 58 621 621 621 334 2118 40 2009 46 2010 41 58 334 2021 58 2022 61 2119 2114 61 40 648 44 41 2023 61 2118 40 123 648 58 648 125 41 2003 46 2026 40 2023 46 2027 40 41 41 2120 61 2023 46 2051 40 2121 61 302 41 2122 61 648 497 2003 46 2011 40 2123 44 2122 41 58 2120 46 2124 40 41 621 621 334 2118 40 2009 46 2010 41 58 334 2021 58 2022 61 2119 2017 61 40 648 44 41 2023 61 2118 40 123 648 58 648 125 41 2003 46 2026 40 2023 46 2027 40 41 41 621 621 2003 46 2004 40 2023 46 2028 46 2120 44 2125 40 648 41 41 2003 46 2057 40 2023 46 2028 46 2126 41 2003 46 2057 40 2023 46 2028 46 2047 41 348 2127 40 2003 41 58 334 2128 40 2009 46 2010 41 58 648 334 2021 58 2022 61 2084 2017 61 91 648 44 648 93 2114 61 91 648 93 2003 46 2004 40 411 40 2128 46 2006 41 44 91 648 93 41 348 2129 40 2003 41 58 334 2130 40 2005 41 58 648 334 2021 58 2022 61 2131 2017 61 648 621 621 2003 46 2004 40 411 40 2130 46 2006 41 44 91 648 44 648 44 648 44 648 44 648 44 648 44 648 93 41 348 2132 40 2003 41 58 2003 46 2004 40 411 40 2133 46 2006 41 44 91 648 44 648 44 648 44 648 44 648 44 648 44 648 93 41 348 2134 40 2003 41 58 621 334 2135 40 2133 44 2005 41 58 434 2003 46 2004 40 411 40 2135 46 2006 41 44 91 648 44 648 44 648 44 648 44 648 44 648 44 648 93 41 348 2136 40 2003 41 58 334 2137 40 2009 46 2010 41 58 334 2021 58 434 621 621 2122 61 648 497 2003 46 2011 40 2012 44 2122 41 58 2137 40 41 621 497 2003 46 2011 40 2012 44 2122 41 58 2137 40 2028 61 2084 41 348 2138 40 2003 41 58 334 2139 40 2005 41 58 648 434 2003 46 2004 40 411 40 2139 46 2006 41 44 91 648 44 648 44 648 93 41 348 2140 40 2003 41 58 334 2141 40 2009 46 2010 41 58 2142 61 2009 46 2088 40 41 334 2021 58 2022 61 2084 2017 61 648 334 2143 40 2141 41 58 648 334 2021 40 2141 46 2021 41 58 2114 61 91 648 93 2003 46 2144 40 2145 40 2143 40 41 41 44 648 41 348 2146 40 2003 41 58 334 2147 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2017 61 91 648 44 648 93 2003 46 2004 40 411 40 2147 46 2006 41 44 91 648 44 648 93 41 2003 46 2144 40 2145 40 2147 40 41 41 44 648 41 348 2148 40 2003 41 58 334 2149 40 2009 46 2010 41 58 334 2021 58 2022 61 2084 2017 61 91 648 44 648 44 648 93 2114 61 91 648 93 2003 46 2004 40 411 40 2149 46 2006 41 44 91 648 44 648 93 41 348 2150 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2152 61 2009 46 2104 40 2153 61 1504 44 2037 61 302 41 334 2021 58 2022 61 2154 2017 61 40 648 44 41 621 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2152 44 648 41 2003 46 2004 40 2157 46 2158 46 2159 40 648 41 46 2160 40 41 44 648 41 621 2161 61 2151 40 123 648 58 648 125 41 2003 46 2004 40 2161 46 2156 44 123 125 41 2162 61 2161 46 2051 40 2121 61 302 41 2003 46 2004 40 2162 46 2152 44 648 41 348 2163 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2152 61 2009 46 2104 40 2153 61 1504 44 2037 61 302 41 2164 61 303 348 2165 40 2003 41 58 2003 46 2166 91 648 93 61 2003 46 2164 450 2003 46 2166 334 2021 58 2022 61 2154 2017 61 40 648 44 41 2167 61 2151 40 123 125 41 2167 46 2164 61 648 2168 61 2167 46 2051 40 2121 61 302 41 2003 46 2004 40 2168 46 2152 44 648 41 621 2169 61 648 385 2072 398 2167 46 2017 91 648 93 46 2170 58 497 2003 46 2171 40 2072 61 2072 41 58 2167 61 2151 40 123 125 41 2167 46 2164 61 2072 2168 61 2167 46 2051 40 2121 61 302 41 2003 46 2004 40 2168 46 2152 44 2169 41 348 2172 40 2003 41 58 334 2151 40 2009 46 2010 41 58 334 2021 58 2022 61 2154 2017 61 40 648 44 41 621 621 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2173 40 2157 46 2174 44 302 41 2003 46 2098 40 2155 46 2017 91 648 93 46 2175 44 2009 46 2176 41 2003 46 2173 40 2157 46 2158 46 2159 40 648 41 46 2160 40 41 44 304 41 348 2177 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2152 61 2009 46 2104 40 2037 61 302 44 2175 61 2009 46 2178 41 334 2021 58 2022 61 2154 2017 61 40 648 44 41 621 621 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2152 44 648 41 2003 46 2004 40 2157 46 2158 46 2159 40 648 41 46 2160 40 41 44 648 41 348 2179 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2152 61 2009 46 2104 40 2037 61 302 44 2175 61 2009 46 2180 41 334 2021 58 2022 61 2154 2017 61 40 648 44 41 621 621 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2152 44 648 41 2003 46 2004 40 2157 46 2158 46 2159 40 648 41 46 2160 40 41 44 648 41 348 2181 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2182 61 648 334 2021 58 2022 61 2154 2017 61 40 648 44 41 2152 61 648 2003 46 2183 40 2152 44 2154 46 2158 46 2159 40 648 41 46 2160 40 41 41 2155 61 2151 40 123 648 58 2152 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2152 44 2152 41 348 2184 40 2003 41 58 2185 61 426 40 41 2003 46 2173 40 2186 40 2187 61 2185 41 46 2187 44 2185 41 348 2188 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2189 61 2009 46 2190 40 2037 61 302 41 334 2021 58 2022 61 2154 2017 61 40 648 44 41 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2189 44 2043 46 2043 40 1505 44 1501 44 1501 41 41 2161 61 2151 40 123 648 58 648 44 648 58 648 125 41 2003 46 2004 40 2161 46 2156 44 123 125 41 2162 61 2161 46 2051 40 2121 61 302 41 2003 46 2004 40 2162 46 2189 44 2043 46 2043 40 1505 44 1501 44 1501 41 41 348 2191 40 2003 41 58 334 2151 40 2009 46 2010 41 58 334 2021 58 2022 61 2154 2017 61 40 648 44 41 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2192 46 2030 44 648 41 2161 61 2151 40 123 125 44 123 648 58 2193 40 648 44 648 41 125 41 2003 46 2004 40 2161 46 2156 44 123 125 41 2162 61 2161 46 2051 40 2121 61 302 41 2003 46 2004 40 2162 46 2192 46 2030 44 648 41 348 2194 40 2003 41 58 334 2151 40 2009 46 2010 41 58 2195 61 2009 46 2196 40 2037 61 302 44 2175 61 2009 46 2197 41 334 2021 58 2022 61 2154 2017 61 40 648 44 41 2155 61 2151 40 123 125 41 2003 46 2004 40 2155 46 2156 44 123 125 41 2157 61 2155 46 2051 40 2121 61 302 41 2003 46 2004 40 2157 46 2195 44 2043 46 2198 46 2044 40 41 41 2161 61 2151 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2004 40 2161 46 2156 44 123 125 41 2162 61 2161 46 2051 40 2121 61 302 41 2003 46 2004 40 2162 46 2195 44 2043 46 2198 40 1505 44 1501 44 1501 41 41 
132765,Python,"class ChangeListTests(TestCase):
    factory = RequestFactory()

    @classmethod
    def setUpTestData(cls):
        cls.superuser = User.objects.create_superuser(username='super', email='a@b.com', password='xxx')

    def _create_superuser(self, username):
        return User.objects.create_superuser(username=username, email='a@b.com', password='xxx')

    def _mocked_authenticated_request(self, url, user):
        request = self.factory.get(url)
        request.user = user
        return request

    def test_repr(self):
        m = ChildAdmin(Child, custom_site)
        request = self.factory.get('/child/')
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(repr(cl), '<ChangeList: model=Child model_admin=ChildAdmin>')

    def test_specified_ordering_by_f_expression(self):
        class OrderedByFBandAdmin(admin.ModelAdmin):
            list_display = ['name', 'genres', 'nr_of_members']
            ordering = (
                F('nr_of_members').desc(nulls_last=True),
                Upper(F('name')).asc(),
                F('genres').asc(),
            )

        m = OrderedByFBandAdmin(Band, custom_site)
        request = self.factory.get('/band/')
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.get_ordering_field_columns(), {3: 'desc', 2: 'asc'})

    def test_specified_ordering_by_f_expression_without_asc_desc(self):
        class OrderedByFBandAdmin(admin.ModelAdmin):
            list_display = ['name', 'genres', 'nr_of_members']
            ordering = (F('nr_of_members'), Upper('name'), F('genres'))

        m = OrderedByFBandAdmin(Band, custom_site)
        request = self.factory.get('/band/')
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.get_ordering_field_columns(), {3: 'asc', 2: 'asc'})

    def test_select_related_preserved(self):
        """"""
        Regression test for #10348: ChangeList.get_queryset() shouldn't
        overwrite a custom select_related provided by ModelAdmin.get_queryset().
        """"""
        m = ChildAdmin(Child, custom_site)
        request = self.factory.get('/child/')
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.query.select_related, {'parent': {}})

    def test_select_related_preserved_when_multi_valued_in_search_fields(self):
        parent = Parent.objects.create(name='Mary')
        Child.objects.create(parent=parent, name='Danielle')
        Child.objects.create(parent=parent, name='Daniel')

        m = ParentAdmin(Parent, custom_site)
        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel'})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 1)
        # select_related is preserved.
        self.assertEqual(cl.queryset.query.select_related, {'child': {}})

    def test_select_related_as_tuple(self):
        ia = InvitationAdmin(Invitation, custom_site)
        request = self.factory.get('/invitation/')
        request.user = self.superuser
        cl = ia.get_changelist_instance(request)
        self.assertEqual(cl.queryset.query.select_related, {'player': {}})

    def test_select_related_as_empty_tuple(self):
        ia = InvitationAdmin(Invitation, custom_site)
        ia.list_select_related = ()
        request = self.factory.get('/invitation/')
        request.user = self.superuser
        cl = ia.get_changelist_instance(request)
        self.assertIs(cl.queryset.query.select_related, False)

    def test_get_select_related_custom_method(self):
        class GetListSelectRelatedAdmin(admin.ModelAdmin):
            list_display = ('band', 'player')

            def get_list_select_related(self, request):
                return ('band', 'player')

        ia = GetListSelectRelatedAdmin(Invitation, custom_site)
        request = self.factory.get('/invitation/')
        request.user = self.superuser
        cl = ia.get_changelist_instance(request)
        self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})

    def test_many_search_terms(self):
        parent = Parent.objects.create(name='Mary')
        Child.objects.create(parent=parent, name='Danielle')
        Child.objects.create(parent=parent, name='Daniel')

        m = ParentAdmin(Parent, custom_site)
        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 80})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        with CaptureQueriesContext(connection) as context:
            object_count = cl.queryset.count()
        self.assertEqual(object_count, 1)
        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)

    def test_related_field_multiple_search_terms(self):
        """"""
        Searches over multi-valued relationships return rows from related
        models only when all searched fields match that row.
        """"""
        parent = Parent.objects.create(name='Mary')
        Child.objects.create(parent=parent, name='Danielle', age=18)
        Child.objects.create(parent=parent, name='Daniel', age=19)

        m = ParentAdminTwoSearchFields(Parent, custom_site)

        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle 19'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 0)

        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel 19'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 1)

    def test_result_list_empty_changelist_value(self):
        """"""
        Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored
        for relationship fields
        """"""
        new_child = Child.objects.create(name='name', parent=None)
        request = self.factory.get('/child/')
        request.user = self.superuser
        m = ChildAdmin(Child, custom_site)
        cl = m.get_changelist_instance(request)
        cl.formset = None
        template = Template('{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}')
        context = Context({'cl': cl, 'opts': Child._meta})
        table_output = template.render(context)
        link = reverse('admin:admin_changelist_child_change', args=(new_child.id,))
        row_html = build_tbody_html(new_child.id, link, '<td class=""field-parent nowrap"">-</td>')
        self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)

    def test_result_list_set_empty_value_display_on_admin_site(self):
        """"""
        Empty value display can be set on AdminSite.
        """"""
        new_child = Child.objects.create(name='name', parent=None)
        request = self.factory.get('/child/')
        request.user = self.superuser
        # Set a new empty display value on AdminSite.
        admin.site.empty_value_display = '???'
        m = ChildAdmin(Child, admin.site)
        cl = m.get_changelist_instance(request)
        cl.formset = None
        template = Template('{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}')
        context = Context({'cl': cl, 'opts': Child._meta})
        table_output = template.render(context)
        link = reverse('admin:admin_changelist_child_change', args=(new_child.id,))
        row_html = build_tbody_html(new_child.id, link, '<td class=""field-parent nowrap"">???</td>')
        self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)

    def test_result_list_set_empty_value_display_in_model_admin(self):
        """"""
        Empty value display can be set in ModelAdmin or individual fields.
        """"""
        new_child = Child.objects.create(name='name', parent=None)
        request = self.factory.get('/child/')
        request.user = self.superuser
        m = EmptyValueChildAdmin(Child, admin.site)
        cl = m.get_changelist_instance(request)
        cl.formset = None
        template = Template('{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}')
        context = Context({'cl': cl, 'opts': Child._meta})
        table_output = template.render(context)
        link = reverse('admin:admin_changelist_child_change', args=(new_child.id,))
        row_html = build_tbody_html(
            new_child.id,
            link,
            '<td class=""field-age_display"">&amp;dagger;</td>'
            '<td class=""field-age"">-empty-</td>'
        )
        self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)

    def test_result_list_html(self):
        """"""
        Inclusion tag result_list generates a table when with default
        ModelAdmin settings.
        """"""
        new_parent = Parent.objects.create(name='parent')
        new_child = Child.objects.create(name='name', parent=new_parent)
        request = self.factory.get('/child/')
        request.user = self.superuser
        m = ChildAdmin(Child, custom_site)
        cl = m.get_changelist_instance(request)
        cl.formset = None
        template = Template('{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}')
        context = Context({'cl': cl, 'opts': Child._meta})
        table_output = template.render(context)
        link = reverse('admin:admin_changelist_child_change', args=(new_child.id,))
        row_html = build_tbody_html(new_child.id, link, '<td class=""field-parent nowrap"">%s</td>' % new_parent)
        self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)

    def test_result_list_editable_html(self):
        """"""
        Regression tests for #11791: Inclusion tag result_list generates a
        table and this checks that the items are nested within the table
        element tags.
        Also a regression test for #13599, verifies that hidden fields
        when list_editable is enabled are rendered in a div outside the
        table.
        """"""
        new_parent = Parent.objects.create(name='parent')
        new_child = Child.objects.create(name='name', parent=new_parent)
        request = self.factory.get('/child/')
        request.user = self.superuser
        m = ChildAdmin(Child, custom_site)

        # Test with list_editable fields
        m.list_display = ['id', 'name', 'parent']
        m.list_display_links = ['id']
        m.list_editable = ['name']
        cl = m.get_changelist_instance(request)
        FormSet = m.get_changelist_formset(request)
        cl.formset = FormSet(queryset=cl.result_list)
        template = Template('{% load admin_list %}{% spaceless %}{% result_list cl %}{% endspaceless %}')
        context = Context({'cl': cl, 'opts': Child._meta})
        table_output = template.render(context)
        # make sure that hidden fields are in the correct place
        hiddenfields_div = (
            '<div class=""hiddenfields"">'
            '<input type=""hidden"" name=""form-0-id"" value=""%d"" id=""id_form-0-id"">'
            '</div>'
        ) % new_child.id
        self.assertInHTML(hiddenfields_div, table_output, msg_prefix='Failed to find hidden fields')

        # make sure that list editable fields are rendered in divs correctly
        editable_name_field = (
            '<input name=""form-0-name"" value=""name"" class=""vTextField"" '
            'maxlength=""30"" type=""text"" id=""id_form-0-name"">'
        )
        self.assertInHTML(
            '<td class=""field-name"">%s</td>' % editable_name_field,
            table_output,
            msg_prefix='Failed to find ""name"" list_editable field',
        )

    def test_result_list_editable(self):
        """"""
        Regression test for #14312: list_editable with pagination
        """"""
        new_parent = Parent.objects.create(name='parent')
        for i in range(1, 201):
            Child.objects.create(name='name %s' % i, parent=new_parent)
        request = self.factory.get('/child/', data={'p': -1})  # Anything outside range
        request.user = self.superuser
        m = ChildAdmin(Child, custom_site)

        # Test with list_editable fields
        m.list_display = ['id', 'name', 'parent']
        m.list_display_links = ['id']
        m.list_editable = ['name']
        with self.assertRaises(IncorrectLookupParameters):
            m.get_changelist_instance(request)

    def test_custom_paginator(self):
        new_parent = Parent.objects.create(name='parent')
        for i in range(1, 201):
            Child.objects.create(name='name %s' % i, parent=new_parent)

        request = self.factory.get('/child/')
        request.user = self.superuser
        m = CustomPaginationAdmin(Child, custom_site)

        cl = m.get_changelist_instance(request)
        cl.get_results(request)
        self.assertIsInstance(cl.paginator, CustomPaginator)

    def test_no_duplicates_for_m2m_in_list_filter(self):
        """"""
        Regression test for #13902: When using a ManyToMany in list_filter,
        results shouldn't appear more than once. Basic ManyToMany.
        """"""
        blues = Genre.objects.create(name='Blues')
        band = Band.objects.create(name='B.B. King Review', nr_of_members=11)

        band.genres.add(blues)
        band.genres.add(blues)

        m = BandAdmin(Band, custom_site)
        request = self.factory.get('/band/', data={'genres': blues.pk})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        cl.get_results(request)

        # There's only one Group instance
        self.assertEqual(cl.result_count, 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_no_duplicates_for_through_m2m_in_list_filter(self):
        """"""
        Regression test for #13902: When using a ManyToMany in list_filter,
        results shouldn't appear more than once. With an intermediate model.
        """"""
        lead = Musician.objects.create(name='Vox')
        band = Group.objects.create(name='The Hype')
        Membership.objects.create(group=band, music=lead, role='lead voice')
        Membership.objects.create(group=band, music=lead, role='bass player')

        m = GroupAdmin(Group, custom_site)
        request = self.factory.get('/group/', data={'members': lead.pk})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        cl.get_results(request)

        # There's only one Group instance
        self.assertEqual(cl.result_count, 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_no_duplicates_for_through_m2m_at_second_level_in_list_filter(self):
        """"""
        When using a ManyToMany in list_filter at the second level behind a
        ForeignKey, results shouldn't appear more than once.
        """"""
        lead = Musician.objects.create(name='Vox')
        band = Group.objects.create(name='The Hype')
        Concert.objects.create(name='Woodstock', group=band)
        Membership.objects.create(group=band, music=lead, role='lead voice')
        Membership.objects.create(group=band, music=lead, role='bass player')

        m = ConcertAdmin(Concert, custom_site)
        request = self.factory.get('/concert/', data={'group__members': lead.pk})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        cl.get_results(request)

        # There's only one Concert instance
        self.assertEqual(cl.result_count, 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_no_duplicates_for_inherited_m2m_in_list_filter(self):
        """"""
        Regression test for #13902: When using a ManyToMany in list_filter,
        results shouldn't appear more than once. Model managed in the
        admin inherits from the one that defines the relationship.
        """"""
        lead = Musician.objects.create(name='John')
        four = Quartet.objects.create(name='The Beatles')
        Membership.objects.create(group=four, music=lead, role='lead voice')
        Membership.objects.create(group=four, music=lead, role='guitar player')

        m = QuartetAdmin(Quartet, custom_site)
        request = self.factory.get('/quartet/', data={'members': lead.pk})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        cl.get_results(request)

        # There's only one Quartet instance
        self.assertEqual(cl.result_count, 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_no_duplicates_for_m2m_to_inherited_in_list_filter(self):
        """"""
        Regression test for #13902: When using a ManyToMany in list_filter,
        results shouldn't appear more than once. Target of the relationship
        inherits from another.
        """"""
        lead = ChordsMusician.objects.create(name='Player A')
        three = ChordsBand.objects.create(name='The Chords Trio')
        Invitation.objects.create(band=three, player=lead, instrument='guitar')
        Invitation.objects.create(band=three, player=lead, instrument='bass')

        m = ChordsBandAdmin(ChordsBand, custom_site)
        request = self.factory.get('/chordsband/', data={'members': lead.pk})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        cl.get_results(request)

        # There's only one ChordsBand instance
        self.assertEqual(cl.result_count, 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_no_duplicates_for_non_unique_related_object_in_list_filter(self):
        """"""
        Regressions tests for #15819: If a field listed in list_filters is a
        non-unique related object, results shouldn't appear more than once.
        """"""
        parent = Parent.objects.create(name='Mary')
        # Two children with the same name
        Child.objects.create(parent=parent, name='Daniel')
        Child.objects.create(parent=parent, name='Daniel')

        m = ParentAdmin(Parent, custom_site)
        request = self.factory.get('/parent/', data={'child__name': 'Daniel'})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        # Exists() is applied.
        self.assertEqual(cl.queryset.count(), 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_changelist_search_form_validation(self):
        m = ConcertAdmin(Concert, custom_site)
        tests = [
            ({SEARCH_VAR: '\x00'}, 'Null characters are not allowed.'),
            ({SEARCH_VAR: 'some\x00thing'}, 'Null characters are not allowed.'),
        ]
        for case, error in tests:
            with self.subTest(case=case):
                request = self.factory.get('/concert/', case)
                request.user = self.superuser
                request._messages = CookieStorage(request)
                m.get_changelist_instance(request)
                messages = [m.message for m in request._messages]
                self.assertEqual(1, len(messages))
                self.assertEqual(error, messages[0])

    def test_no_duplicates_for_non_unique_related_object_in_search_fields(self):
        """"""
        Regressions tests for #15819: If a field listed in search_fields
        is a non-unique related object, Exists() must be applied.
        """"""
        parent = Parent.objects.create(name='Mary')
        Child.objects.create(parent=parent, name='Danielle')
        Child.objects.create(parent=parent, name='Daniel')

        m = ParentAdmin(Parent, custom_site)
        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel'})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        # Exists() is applied.
        self.assertEqual(cl.queryset.count(), 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_no_duplicates_for_many_to_many_at_second_level_in_search_fields(self):
        """"""
        When using a ManyToMany in search_fields at the second level behind a
        ForeignKey, Exists() must be applied and results shouldn't appear more
        than once.
        """"""
        lead = Musician.objects.create(name='Vox')
        band = Group.objects.create(name='The Hype')
        Concert.objects.create(name='Woodstock', group=band)
        Membership.objects.create(group=band, music=lead, role='lead voice')
        Membership.objects.create(group=band, music=lead, role='bass player')

        m = ConcertAdmin(Concert, custom_site)
        request = self.factory.get('/concert/', data={SEARCH_VAR: 'vox'})
        request.user = self.superuser

        cl = m.get_changelist_instance(request)
        # There's only one Concert instance
        self.assertEqual(cl.queryset.count(), 1)
        # Queryset must be deletable.
        self.assertIs(cl.queryset.query.distinct, False)
        cl.queryset.delete()
        self.assertEqual(cl.queryset.count(), 0)

    def test_multiple_search_fields(self):
        """"""
        All rows containing each of the searched words are returned, where each
        word must be in one of search_fields.
        """"""
        band_duo = Group.objects.create(name='Duo')
        band_hype = Group.objects.create(name='The Hype')
        mary = Musician.objects.create(name='Mary Halvorson')
        jonathan = Musician.objects.create(name='Jonathan Finlayson')
        band_duo.members.set([mary, jonathan])
        Concert.objects.create(name='Tiny desk concert', group=band_duo)
        Concert.objects.create(name='Woodstock concert', group=band_hype)
        # FK lookup.
        concert_model_admin = ConcertAdmin(Concert, custom_site)
        concert_model_admin.search_fields = ['group__name', 'name']
        # Reverse FK lookup.
        group_model_admin = GroupAdmin(Group, custom_site)
        group_model_admin.search_fields = ['name', 'concert__name', 'members__name']
        for search_string, result_count in (
            ('Duo Concert', 1),
            ('Tiny Desk Concert', 1),
            ('Concert', 2),
            ('Other Concert', 0),
            ('Duo Woodstock', 0),
        ):
            with self.subTest(search_string=search_string):
                # FK lookup.
                request = self.factory.get('/concert/', data={SEARCH_VAR: search_string})
                request.user = self.superuser
                concert_changelist = concert_model_admin.get_changelist_instance(request)
                self.assertEqual(concert_changelist.queryset.count(), result_count)
                # Reverse FK lookup.
                request = self.factory.get('/group/', data={SEARCH_VAR: search_string})
                request.user = self.superuser
                group_changelist = group_model_admin.get_changelist_instance(request)
                self.assertEqual(group_changelist.queryset.count(), result_count)
        # Many-to-many lookup.
        for search_string, result_count in (
            ('Finlayson Duo Tiny', 1),
            ('Finlayson', 1),
            ('Finlayson Hype', 0),
            ('Jonathan Finlayson Duo', 1),
            ('Mary Jonathan Duo', 0),
            ('Oscar Finlayson Duo', 0),
        ):
            with self.subTest(search_string=search_string):
                request = self.factory.get('/group/', data={SEARCH_VAR: search_string})
                request.user = self.superuser
                group_changelist = group_model_admin.get_changelist_instance(request)
                self.assertEqual(group_changelist.queryset.count(), result_count)

    def test_pk_in_search_fields(self):
        band = Group.objects.create(name='The Hype')
        Concert.objects.create(name='Woodstock', group=band)

        m = ConcertAdmin(Concert, custom_site)
        m.search_fields = ['group__pk']

        request = self.factory.get('/concert/', data={SEARCH_VAR: band.pk})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 1)

        request = self.factory.get('/concert/', data={SEARCH_VAR: band.pk + 5})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 0)

    def test_builtin_lookup_in_search_fields(self):
        band = Group.objects.create(name='The Hype')
        concert = Concert.objects.create(name='Woodstock', group=band)

        m = ConcertAdmin(Concert, custom_site)
        m.search_fields = ['name__iexact']

        request = self.factory.get('/', data={SEARCH_VAR: 'woodstock'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertCountEqual(cl.queryset, [concert])

        request = self.factory.get('/', data={SEARCH_VAR: 'wood'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertCountEqual(cl.queryset, [])

    def test_custom_lookup_in_search_fields(self):
        band = Group.objects.create(name='The Hype')
        concert = Concert.objects.create(name='Woodstock', group=band)

        m = ConcertAdmin(Concert, custom_site)
        m.search_fields = ['group__name__cc']
        with register_lookup(Field, Contains, lookup_name='cc'):
            request = self.factory.get('/', data={SEARCH_VAR: 'Hype'})
            request.user = self.superuser
            cl = m.get_changelist_instance(request)
            self.assertCountEqual(cl.queryset, [concert])

            request = self.factory.get('/', data={SEARCH_VAR: 'Woodstock'})
            request.user = self.superuser
            cl = m.get_changelist_instance(request)
            self.assertCountEqual(cl.queryset, [])

    def test_spanning_relations_with_custom_lookup_in_search_fields(self):
        hype = Group.objects.create(name='The Hype')
        concert = Concert.objects.create(name='Woodstock', group=hype)
        vox = Musician.objects.create(name='Vox', age=20)
        Membership.objects.create(music=vox, group=hype)
        # Register a custom lookup on IntegerField to ensure that field
        # traversing logic in ModelAdmin.get_search_results() works.
        with register_lookup(IntegerField, Exact, lookup_name='exactly'):
            m = ConcertAdmin(Concert, custom_site)
            m.search_fields = ['group__members__age__exactly']

            request = self.factory.get('/', data={SEARCH_VAR: '20'})
            request.user = self.superuser
            cl = m.get_changelist_instance(request)
            self.assertCountEqual(cl.queryset, [concert])

            request = self.factory.get('/', data={SEARCH_VAR: '21'})
            request.user = self.superuser
            cl = m.get_changelist_instance(request)
            self.assertCountEqual(cl.queryset, [])

    def test_custom_lookup_with_pk_shortcut(self):
        self.assertEqual(CharPK._meta.pk.name, 'char_pk')  # Not equal to 'pk'.
        m = admin.ModelAdmin(CustomIdUser, custom_site)

        abc = CharPK.objects.create(char_pk='abc')
        abcd = CharPK.objects.create(char_pk='abcd')
        m = admin.ModelAdmin(CharPK, custom_site)
        m.search_fields = ['pk__exact']

        request = self.factory.get('/', data={SEARCH_VAR: 'abc'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertCountEqual(cl.queryset, [abc])

        request = self.factory.get('/', data={SEARCH_VAR: 'abcd'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertCountEqual(cl.queryset, [abcd])

    def test_no_exists_for_m2m_in_list_filter_without_params(self):
        """"""
        If a ManyToManyField is in list_filter but isn't in any lookup params,
        the changelist's query shouldn't have Exists().
        """"""
        m = BandAdmin(Band, custom_site)
        for lookup_params in ({}, {'name': 'test'}):
            request = self.factory.get('/band/', lookup_params)
            request.user = self.superuser
            cl = m.get_changelist_instance(request)
            self.assertNotIn(' EXISTS', str(cl.queryset.query))

        # A ManyToManyField in params does have Exists() applied.
        request = self.factory.get('/band/', {'genres': '0'})
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        self.assertIn(' EXISTS', str(cl.queryset.query))

    def test_pagination(self):
        """"""
        Regression tests for #12893: Pagination in admins changelist doesn't
        use queryset set by modeladmin.
        """"""
        parent = Parent.objects.create(name='anything')
        for i in range(1, 31):
            Child.objects.create(name='name %s' % i, parent=parent)
            Child.objects.create(name='filtered %s' % i, parent=parent)

        request = self.factory.get('/child/')
        request.user = self.superuser

        # Test default queryset
        m = ChildAdmin(Child, custom_site)
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 60)
        self.assertEqual(cl.paginator.count, 60)
        self.assertEqual(list(cl.paginator.page_range), [1, 2, 3, 4, 5, 6])

        # Test custom queryset
        m = FilteredChildAdmin(Child, custom_site)
        cl = m.get_changelist_instance(request)
        self.assertEqual(cl.queryset.count(), 30)
        self.assertEqual(cl.paginator.count, 30)
        self.assertEqual(list(cl.paginator.page_range), [1, 2, 3])

    def test_computed_list_display_localization(self):
        """"""
        Regression test for #13196: output of functions should be  localized
        in the changelist.
        """"""
        self.client.force_login(self.superuser)
        event = Event.objects.create(date=datetime.date.today())
        response = self.client.get(reverse('admin:admin_changelist_event_changelist'))
        self.assertContains(response, formats.localize(event.date))
        self.assertNotContains(response, str(event.date))

    def test_dynamic_list_display(self):
        """"""
        Regression tests for #14206: dynamic list_display support.
        """"""
        parent = Parent.objects.create(name='parent')
        for i in range(10):
            Child.objects.create(name='child %s' % i, parent=parent)

        user_noparents = self._create_superuser('noparents')
        user_parents = self._create_superuser('parents')

        # Test with user 'noparents'
        m = custom_site._registry[Child]
        request = self._mocked_authenticated_request('/child/', user_noparents)
        response = m.changelist_view(request)
        self.assertNotContains(response, 'Parent object')

        list_display = m.get_list_display(request)
        list_display_links = m.get_list_display_links(request, list_display)
        self.assertEqual(list_display, ['name', 'age'])
        self.assertEqual(list_display_links, ['name'])

        # Test with user 'parents'
        m = DynamicListDisplayChildAdmin(Child, custom_site)
        request = self._mocked_authenticated_request('/child/', user_parents)
        response = m.changelist_view(request)
        self.assertContains(response, 'Parent object')

        custom_site.unregister(Child)

        list_display = m.get_list_display(request)
        list_display_links = m.get_list_display_links(request, list_display)
        self.assertEqual(list_display, ('parent', 'name', 'age'))
        self.assertEqual(list_display_links, ['parent'])

        # Test default implementation
        custom_site.register(Child, ChildAdmin)
        m = custom_site._registry[Child]
        request = self._mocked_authenticated_request('/child/', user_noparents)
        response = m.changelist_view(request)
        self.assertContains(response, 'Parent object')

    def test_show_all(self):
        parent = Parent.objects.create(name='anything')
        for i in range(1, 31):
            Child.objects.create(name='name %s' % i, parent=parent)
            Child.objects.create(name='filtered %s' % i, parent=parent)

        # Add ""show all"" parameter to request
        request = self.factory.get('/child/', data={ALL_VAR: ''})
        request.user = self.superuser

        # Test valid ""show all"" request (number of total objects is under max)
        m = ChildAdmin(Child, custom_site)
        m.list_max_show_all = 200
        # 200 is the max we'll pass to ChangeList
        cl = m.get_changelist_instance(request)
        cl.get_results(request)
        self.assertEqual(len(cl.result_list), 60)

        # Test invalid ""show all"" request (number of total objects over max)
        # falls back to paginated pages
        m = ChildAdmin(Child, custom_site)
        m.list_max_show_all = 30
        # 30 is the max we'll pass to ChangeList for this test
        cl = m.get_changelist_instance(request)
        cl.get_results(request)
        self.assertEqual(len(cl.result_list), 10)

    def test_dynamic_list_display_links(self):
        """"""
        Regression tests for #16257: dynamic list_display_links support.
        """"""
        parent = Parent.objects.create(name='parent')
        for i in range(1, 10):
            Child.objects.create(id=i, name='child %s' % i, parent=parent, age=i)

        m = DynamicListDisplayLinksChildAdmin(Child, custom_site)
        superuser = self._create_superuser('superuser')
        request = self._mocked_authenticated_request('/child/', superuser)
        response = m.changelist_view(request)
        for i in range(1, 10):
            link = reverse('admin:admin_changelist_child_change', args=(i,))
            self.assertContains(response, '<a href=""%s"">%s</a>' % (link, i))

        list_display = m.get_list_display(request)
        list_display_links = m.get_list_display_links(request, list_display)
        self.assertEqual(list_display, ('parent', 'name', 'age'))
        self.assertEqual(list_display_links, ['age'])

    def test_no_list_display_links(self):
        """"""#15185 -- Allow no links from the 'change list' view grid.""""""
        p = Parent.objects.create(name='parent')
        m = NoListDisplayLinksParentAdmin(Parent, custom_site)
        superuser = self._create_superuser('superuser')
        request = self._mocked_authenticated_request('/parent/', superuser)
        response = m.changelist_view(request)
        link = reverse('admin:admin_changelist_parent_change', args=(p.pk,))
        self.assertNotContains(response, '<a href=""%s"">' % link)

    def test_clear_all_filters_link(self):
        self.client.force_login(self.superuser)
        url = reverse('admin:auth_user_changelist')
        response = self.client.get(url)
        self.assertNotContains(response, '&#10006; Clear all filters')
        link = '<a href=""%s"">&#10006; Clear all filters</a>'
        for data, href in (
            ({'is_staff__exact': '0'}, '?'),
            (
                {'is_staff__exact': '0', 'username__startswith': 'test'},
                '?username__startswith=test',
            ),
            (
                {'is_staff__exact': '0', SEARCH_VAR: 'test'},
                '?%s=test' % SEARCH_VAR,
            ),
            (
                {'is_staff__exact': '0', IS_POPUP_VAR: 'id'},
                '?%s=id' % IS_POPUP_VAR,
            ),
        ):
            with self.subTest(data=data):
                response = self.client.get(url, data=data)
                self.assertContains(response, link % href)

    def test_clear_all_filters_link_callable_filter(self):
        self.client.force_login(self.superuser)
        url = reverse('admin:admin_changelist_band_changelist')
        response = self.client.get(url)
        self.assertNotContains(response, '&#10006; Clear all filters')
        link = '<a href=""%s"">&#10006; Clear all filters</a>'
        for data, href in (
            ({'nr_of_members_partition': '5'}, '?'),
            (
                {'nr_of_members_partition': 'more', 'name__startswith': 'test'},
                '?name__startswith=test',
            ),
            (
                {'nr_of_members_partition': '5', IS_POPUP_VAR: 'id'},
                '?%s=id' % IS_POPUP_VAR,
            ),
        ):
            with self.subTest(data=data):
                response = self.client.get(url, data=data)
                self.assertContains(response, link % href)

    def test_no_clear_all_filters_link(self):
        self.client.force_login(self.superuser)
        url = reverse('admin:auth_user_changelist')
        link = '>&#10006; Clear all filters</a>'
        for data in (
            {SEARCH_VAR: 'test'},
            {ORDER_VAR: '-1'},
            {TO_FIELD_VAR: 'id'},
            {PAGE_VAR: '1'},
            {IS_POPUP_VAR: '1'},
            {'username__startswith': 'test'},
        ):
            with self.subTest(data=data):
                response = self.client.get(url, data=data)
                self.assertNotContains(response, link)

    def test_tuple_list_display(self):
        swallow = Swallow.objects.create(origin='Africa', load='12.34', speed='22.2')
        swallow2 = Swallow.objects.create(origin='Africa', load='12.34', speed='22.2')
        swallow_o2o = SwallowOneToOne.objects.create(swallow=swallow2)

        model_admin = SwallowAdmin(Swallow, custom_site)
        superuser = self._create_superuser('superuser')
        request = self._mocked_authenticated_request('/swallow/', superuser)
        response = model_admin.changelist_view(request)
        # just want to ensure it doesn't blow up during rendering
        self.assertContains(response, str(swallow.origin))
        self.assertContains(response, str(swallow.load))
        self.assertContains(response, str(swallow.speed))
        # Reverse one-to-one relations should work.
        self.assertContains(response, '<td class=""field-swallowonetoone"">-</td>')
        self.assertContains(response, '<td class=""field-swallowonetoone"">%s</td>' % swallow_o2o)

    def test_multiuser_edit(self):
        """"""
        Simultaneous edits of list_editable fields on the changelist by
        different users must not result in one user's edits creating a new
        object instead of modifying the correct existing object (#11313).
        """"""
        # To replicate this issue, simulate the following steps:
        # 1. User1 opens an admin changelist with list_editable fields.
        # 2. User2 edits object ""Foo"" such that it moves to another page in
        #    the pagination order and saves.
        # 3. User1 edits object ""Foo"" and saves.
        # 4. The edit made by User1 does not get applied to object ""Foo"" but
        #    instead is used to create a new object (bug).

        # For this test, order the changelist by the 'speed' attribute and
        # display 3 objects per page (SwallowAdmin.list_per_page = 3).

        # Setup the test to reflect the DB state after step 2 where User2 has
        # edited the first swallow object's speed from '4' to '1'.
        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)
        b = Swallow.objects.create(origin='Swallow B', load=2, speed=2)
        c = Swallow.objects.create(origin='Swallow C', load=5, speed=5)
        d = Swallow.objects.create(origin='Swallow D', load=9, speed=9)

        superuser = self._create_superuser('superuser')
        self.client.force_login(superuser)
        changelist_url = reverse('admin:admin_changelist_swallow_changelist')

        # Send the POST from User1 for step 3. It's still using the changelist
        # ordering from before User2's edits in step 2.
        data = {
            'form-TOTAL_FORMS': '3',
            'form-INITIAL_FORMS': '3',
            'form-MIN_NUM_FORMS': '0',
            'form-MAX_NUM_FORMS': '1000',
            'form-0-uuid': str(d.pk),
            'form-1-uuid': str(c.pk),
            'form-2-uuid': str(a.pk),
            'form-0-load': '9.0',
            'form-0-speed': '9.0',
            'form-1-load': '5.0',
            'form-1-speed': '5.0',
            'form-2-load': '5.0',
            'form-2-speed': '4.0',
            '_save': 'Save',
        }
        response = self.client.post(changelist_url, data, follow=True, extra={'o': '-2'})

        # The object User1 edited in step 3 is displayed on the changelist and
        # has the correct edits applied.
        self.assertContains(response, '1 swallow was changed successfully.')
        self.assertContains(response, a.origin)
        a.refresh_from_db()
        self.assertEqual(a.load, float(data['form-2-load']))
        self.assertEqual(a.speed, float(data['form-2-speed']))
        b.refresh_from_db()
        self.assertEqual(b.load, 2)
        self.assertEqual(b.speed, 2)
        c.refresh_from_db()
        self.assertEqual(c.load, float(data['form-1-load']))
        self.assertEqual(c.speed, float(data['form-1-speed']))
        d.refresh_from_db()
        self.assertEqual(d.load, float(data['form-0-load']))
        self.assertEqual(d.speed, float(data['form-0-speed']))
        # No new swallows were created.
        self.assertEqual(len(Swallow.objects.all()), 4)

    def test_get_edited_object_ids(self):
        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)
        b = Swallow.objects.create(origin='Swallow B', load=2, speed=2)
        c = Swallow.objects.create(origin='Swallow C', load=5, speed=5)
        superuser = self._create_superuser('superuser')
        self.client.force_login(superuser)
        changelist_url = reverse('admin:admin_changelist_swallow_changelist')
        m = SwallowAdmin(Swallow, custom_site)
        data = {
            'form-TOTAL_FORMS': '3',
            'form-INITIAL_FORMS': '3',
            'form-MIN_NUM_FORMS': '0',
            'form-MAX_NUM_FORMS': '1000',
            'form-0-uuid': str(a.pk),
            'form-1-uuid': str(b.pk),
            'form-2-uuid': str(c.pk),
            'form-0-load': '9.0',
            'form-0-speed': '9.0',
            'form-1-load': '5.0',
            'form-1-speed': '5.0',
            'form-2-load': '5.0',
            'form-2-speed': '4.0',
            '_save': 'Save',
        }
        request = self.factory.post(changelist_url, data=data)
        pks = m._get_edited_object_pks(request, prefix='form')
        self.assertEqual(sorted(pks), sorted([str(a.pk), str(b.pk), str(c.pk)]))

    def test_get_list_editable_queryset(self):
        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)
        Swallow.objects.create(origin='Swallow B', load=2, speed=2)
        data = {
            'form-TOTAL_FORMS': '2',
            'form-INITIAL_FORMS': '2',
            'form-MIN_NUM_FORMS': '0',
            'form-MAX_NUM_FORMS': '1000',
            'form-0-uuid': str(a.pk),
            'form-0-load': '10',
            '_save': 'Save',
        }
        superuser = self._create_superuser('superuser')
        self.client.force_login(superuser)
        changelist_url = reverse('admin:admin_changelist_swallow_changelist')
        m = SwallowAdmin(Swallow, custom_site)
        request = self.factory.post(changelist_url, data=data)
        queryset = m._get_list_editable_queryset(request, prefix='form')
        self.assertEqual(queryset.count(), 1)
        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'
        # The unfiltered queryset is returned if there's invalid data.
        request = self.factory.post(changelist_url, data=data)
        queryset = m._get_list_editable_queryset(request, prefix='form')
        self.assertEqual(queryset.count(), 2)

    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):
        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)
        Swallow.objects.create(origin='Swallow B', load=2, speed=2)
        data = {
            'form$-TOTAL_FORMS': '2',
            'form$-INITIAL_FORMS': '2',
            'form$-MIN_NUM_FORMS': '0',
            'form$-MAX_NUM_FORMS': '1000',
            'form$-0-uuid': str(a.pk),
            'form$-0-load': '10',
            '_save': 'Save',
        }
        superuser = self._create_superuser('superuser')
        self.client.force_login(superuser)
        changelist_url = reverse('admin:admin_changelist_swallow_changelist')
        m = SwallowAdmin(Swallow, custom_site)
        request = self.factory.post(changelist_url, data=data)
        queryset = m._get_list_editable_queryset(request, prefix='form$')
        self.assertEqual(queryset.count(), 1)

    def test_changelist_view_list_editable_changed_objects_uses_filter(self):
        """"""list_editable edits use a filtered queryset to limit memory usage.""""""
        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)
        Swallow.objects.create(origin='Swallow B', load=2, speed=2)
        data = {
            'form-TOTAL_FORMS': '2',
            'form-INITIAL_FORMS': '2',
            'form-MIN_NUM_FORMS': '0',
            'form-MAX_NUM_FORMS': '1000',
            'form-0-uuid': str(a.pk),
            'form-0-load': '10',
            '_save': 'Save',
        }
        superuser = self._create_superuser('superuser')
        self.client.force_login(superuser)
        changelist_url = reverse('admin:admin_changelist_swallow_changelist')
        with CaptureQueriesContext(connection) as context:
            response = self.client.post(changelist_url, data=data)
            self.assertEqual(response.status_code, 200)
            self.assertIn('WHERE', context.captured_queries[4]['sql'])
            self.assertIn('IN', context.captured_queries[4]['sql'])
            # Check only the first few characters since the UUID may have dashes.
            self.assertIn(str(a.pk)[:8], context.captured_queries[4]['sql'])

    def test_deterministic_order_for_unordered_model(self):
        """"""
        The primary key is used in the ordering of the changelist's results to
        guarantee a deterministic order, even when the model doesn't have any
        default ordering defined (#17198).
        """"""
        superuser = self._create_superuser('superuser')

        for counter in range(1, 51):
            UnorderedObject.objects.create(id=counter, bool=True)

        class UnorderedObjectAdmin(admin.ModelAdmin):
            list_per_page = 10

        def check_results_order(ascending=False):
            custom_site.register(UnorderedObject, UnorderedObjectAdmin)
            model_admin = UnorderedObjectAdmin(UnorderedObject, custom_site)
            counter = 0 if ascending else 51
            for page in range(1, 6):
                request = self._mocked_authenticated_request('/unorderedobject/?p=%s' % page, superuser)
                response = model_admin.changelist_view(request)
                for result in response.context_data['cl'].result_list:
                    counter += 1 if ascending else -1
                    self.assertEqual(result.id, counter)
            custom_site.unregister(UnorderedObject)

        # When no order is defined at all, everything is ordered by '-pk'.
        check_results_order()

        # When an order field is defined but multiple records have the same
        # value for that field, make sure everything gets ordered by -pk as well.
        UnorderedObjectAdmin.ordering = ['bool']
        check_results_order()

        # When order fields are defined, including the pk itself, use them.
        UnorderedObjectAdmin.ordering = ['bool', '-pk']
        check_results_order()
        UnorderedObjectAdmin.ordering = ['bool', 'pk']
        check_results_order(ascending=True)
        UnorderedObjectAdmin.ordering = ['-id', 'bool']
        check_results_order()
        UnorderedObjectAdmin.ordering = ['id', 'bool']
        check_results_order(ascending=True)

    def test_deterministic_order_for_model_ordered_by_its_manager(self):
        """"""
        The primary key is used in the ordering of the changelist's results to
        guarantee a deterministic order, even when the model has a manager that
        defines a default ordering (#17198).
        """"""
        superuser = self._create_superuser('superuser')

        for counter in range(1, 51):
            OrderedObject.objects.create(id=counter, bool=True, number=counter)

        class OrderedObjectAdmin(admin.ModelAdmin):
            list_per_page = 10

        def check_results_order(ascending=False):
            custom_site.register(OrderedObject, OrderedObjectAdmin)
            model_admin = OrderedObjectAdmin(OrderedObject, custom_site)
            counter = 0 if ascending else 51
            for page in range(1, 6):
                request = self._mocked_authenticated_request('/orderedobject/?p=%s' % page, superuser)
                response = model_admin.changelist_view(request)
                for result in response.context_data['cl'].result_list:
                    counter += 1 if ascending else -1
                    self.assertEqual(result.id, counter)
            custom_site.unregister(OrderedObject)

        # When no order is defined at all, use the model's default ordering (i.e. 'number')
        check_results_order(ascending=True)

        # When an order field is defined but multiple records have the same
        # value for that field, make sure everything gets ordered by -pk as well.
        OrderedObjectAdmin.ordering = ['bool']
        check_results_order()

        # When order fields are defined, including the pk itself, use them.
        OrderedObjectAdmin.ordering = ['bool', '-pk']
        check_results_order()
        OrderedObjectAdmin.ordering = ['bool', 'pk']
        check_results_order(ascending=True)
        OrderedObjectAdmin.ordering = ['-id', 'bool']
        check_results_order()
        OrderedObjectAdmin.ordering = ['id', 'bool']
        check_results_order(ascending=True)

    @isolate_apps('admin_changelist')
    def test_total_ordering_optimization(self):
        class Related(models.Model):
            unique_field = models.BooleanField(unique=True)

            class Meta:
                ordering = ('unique_field',)

        class Model(models.Model):
            unique_field = models.BooleanField(unique=True)
            unique_nullable_field = models.BooleanField(unique=True, null=True)
            related = models.ForeignKey(Related, models.CASCADE)
            other_related = models.ForeignKey(Related, models.CASCADE)
            related_unique = models.OneToOneField(Related, models.CASCADE)
            field = models.BooleanField()
            other_field = models.BooleanField()
            null_field = models.BooleanField(null=True)

            class Meta:
                unique_together = {
                    ('field', 'other_field'),
                    ('field', 'null_field'),
                    ('related', 'other_related_id'),
                }

        class ModelAdmin(admin.ModelAdmin):
            def get_queryset(self, request):
                return Model.objects.none()

        request = self._mocked_authenticated_request('/', self.superuser)
        site = admin.AdminSite(name='admin')
        model_admin = ModelAdmin(Model, site)
        change_list = model_admin.get_changelist_instance(request)
        tests = (
            ([], ['-pk']),
            # Unique non-nullable field.
            (['unique_field'], ['unique_field']),
            (['-unique_field'], ['-unique_field']),
            # Unique nullable field.
            (['unique_nullable_field'], ['unique_nullable_field', '-pk']),
            # Field.
            (['field'], ['field', '-pk']),
            # Related field introspection is not implemented.
            (['related__unique_field'], ['related__unique_field', '-pk']),
            # Related attname unique.
            (['related_unique_id'], ['related_unique_id']),
            # Related ordering introspection is not implemented.
            (['related_unique'], ['related_unique', '-pk']),
            # Composite unique.
            (['field', '-other_field'], ['field', '-other_field']),
            # Composite unique nullable.
            (['-field', 'null_field'], ['-field', 'null_field', '-pk']),
            # Composite unique and nullable.
            (['-field', 'null_field', 'other_field'], ['-field', 'null_field', 'other_field']),
            # Composite unique attnames.
            (['related_id', '-other_related_id'], ['related_id', '-other_related_id']),
            # Composite unique names.
            (['related', '-other_related_id'], ['related', '-other_related_id', '-pk']),
        )
        # F() objects composite unique.
        total_ordering = [F('field'), F('other_field').desc(nulls_last=True)]
        # F() objects composite unique nullable.
        non_total_ordering = [F('field'), F('null_field').desc(nulls_last=True)]
        tests += (
            (total_ordering, total_ordering),
            (non_total_ordering, non_total_ordering + ['-pk']),
        )
        for ordering, expected in tests:
            with self.subTest(ordering=ordering):
                self.assertEqual(change_list._get_deterministic_ordering(ordering), expected)

    @isolate_apps('admin_changelist')
    def test_total_ordering_optimization_meta_constraints(self):
        class Related(models.Model):
            unique_field = models.BooleanField(unique=True)

            class Meta:
                ordering = ('unique_field',)

        class Model(models.Model):
            field_1 = models.BooleanField()
            field_2 = models.BooleanField()
            field_3 = models.BooleanField()
            field_4 = models.BooleanField()
            field_5 = models.BooleanField()
            field_6 = models.BooleanField()
            nullable_1 = models.BooleanField(null=True)
            nullable_2 = models.BooleanField(null=True)
            related_1 = models.ForeignKey(Related, models.CASCADE)
            related_2 = models.ForeignKey(Related, models.CASCADE)
            related_3 = models.ForeignKey(Related, models.CASCADE)
            related_4 = models.ForeignKey(Related, models.CASCADE)

            class Meta:
                constraints = [
                    *[
                        models.UniqueConstraint(fields=fields, name=''.join(fields))
                        for fields in (
                            ['field_1'],
                            ['nullable_1'],
                            ['related_1'],
                            ['related_2_id'],
                            ['field_2', 'field_3'],
                            ['field_2', 'nullable_2'],
                            ['field_2', 'related_3'],
                            ['field_3', 'related_4_id'],
                        )
                    ],
                    models.CheckConstraint(check=models.Q(id__gt=0), name='foo'),
                    models.UniqueConstraint(
                        fields=['field_5'],
                        condition=models.Q(id__gt=10),
                        name='total_ordering_1',
                    ),
                    models.UniqueConstraint(
                        fields=['field_6'],
                        condition=models.Q(),
                        name='total_ordering',
                    ),
                ]

        class ModelAdmin(admin.ModelAdmin):
            def get_queryset(self, request):
                return Model.objects.none()

        request = self._mocked_authenticated_request('/', self.superuser)
        site = admin.AdminSite(name='admin')
        model_admin = ModelAdmin(Model, site)
        change_list = model_admin.get_changelist_instance(request)
        tests = (
            # Unique non-nullable field.
            (['field_1'], ['field_1']),
            # Unique nullable field.
            (['nullable_1'], ['nullable_1', '-pk']),
            # Related attname unique.
            (['related_1_id'], ['related_1_id']),
            (['related_2_id'], ['related_2_id']),
            # Related ordering introspection is not implemented.
            (['related_1'], ['related_1', '-pk']),
            # Composite unique.
            (['-field_2', 'field_3'], ['-field_2', 'field_3']),
            # Composite unique nullable.
            (['field_2', '-nullable_2'], ['field_2', '-nullable_2', '-pk']),
            # Composite unique and nullable.
            (
                ['field_2', '-nullable_2', 'field_3'],
                ['field_2', '-nullable_2', 'field_3'],
            ),
            # Composite field and related field name.
            (['field_2', '-related_3'], ['field_2', '-related_3', '-pk']),
            (['field_3', 'related_4'], ['field_3', 'related_4', '-pk']),
            # Composite field and related field attname.
            (['field_2', 'related_3_id'], ['field_2', 'related_3_id']),
            (['field_3', '-related_4_id'], ['field_3', '-related_4_id']),
            # Partial unique constraint is ignored.
            (['field_5'], ['field_5', '-pk']),
            # Unique constraint with an empty condition.
            (['field_6'], ['field_6']),
        )
        for ordering, expected in tests:
            with self.subTest(ordering=ordering):
                self.assertEqual(change_list._get_deterministic_ordering(ordering), expected)

    def test_dynamic_list_filter(self):
        """"""
        Regression tests for ticket #17646: dynamic list_filter support.
        """"""
        parent = Parent.objects.create(name='parent')
        for i in range(10):
            Child.objects.create(name='child %s' % i, parent=parent)

        user_noparents = self._create_superuser('noparents')
        user_parents = self._create_superuser('parents')

        # Test with user 'noparents'
        m = DynamicListFilterChildAdmin(Child, custom_site)
        request = self._mocked_authenticated_request('/child/', user_noparents)
        response = m.changelist_view(request)
        self.assertEqual(response.context_data['cl'].list_filter, ['name', 'age'])

        # Test with user 'parents'
        m = DynamicListFilterChildAdmin(Child, custom_site)
        request = self._mocked_authenticated_request('/child/', user_parents)
        response = m.changelist_view(request)
        self.assertEqual(response.context_data['cl'].list_filter, ('parent', 'name', 'age'))

    def test_dynamic_search_fields(self):
        child = self._create_superuser('child')
        m = DynamicSearchFieldsChildAdmin(Child, custom_site)
        request = self._mocked_authenticated_request('/child/', child)
        response = m.changelist_view(request)
        self.assertEqual(response.context_data['cl'].search_fields, ('name', 'age'))

    def test_pagination_page_range(self):
        """"""
        Regression tests for ticket #15653: ensure the number of pages
        generated for changelist views are correct.
        """"""
        # instantiating and setting up ChangeList object
        m = GroupAdmin(Group, custom_site)
        request = self.factory.get('/group/')
        request.user = self.superuser
        cl = m.get_changelist_instance(request)
        cl.list_per_page = 10

        ELLIPSIS = cl.paginator.ELLIPSIS
        for number, pages, expected in [
            (1, 1, []),
            (1, 2, [1, 2]),
            (6, 11, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
            (6, 12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
            (6, 13, [1, 2, 3, 4, 5, 6, 7, 8, 9, ELLIPSIS, 12, 13]),
            (7, 12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
            (7, 13, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]),
            (7, 14, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ELLIPSIS, 13, 14]),
            (8, 13, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, 12, 13]),
            (8, 14, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
            (8, 15, [1, 2, ELLIPSIS, 5, 6, 7, 8, 9, 10, 11, ELLIPSIS, 14, 15]),
        ]:
            with self.subTest(number=number, pages=pages):
                # assuming exactly `pages * cl.list_per_page` objects
                Group.objects.all().delete()
                for i in range(pages * cl.list_per_page):
                    Group.objects.create(name='test band')

                # setting page number and calculating page range
                cl.page_num = number
                cl.get_results(request)
                self.assertEqual(list(pagination(cl)['page_range']), expected)

    def test_object_tools_displayed_no_add_permission(self):
        """"""
        When ModelAdmin.has_add_permission() returns False, the object-tools
        block is still shown.
        """"""
        superuser = self._create_superuser('superuser')
        m = EventAdmin(Event, custom_site)
        request = self._mocked_authenticated_request('/event/', superuser)
        self.assertFalse(m.has_add_permission(request))
        response = m.changelist_view(request)
        self.assertIn('<ul class=""object-tools"">', response.rendered_content)
        # The ""Add"" button inside the object-tools shouldn't appear.
        self.assertNotIn('Add ', response.rendered_content)

    def test_search_help_text(self):
        superuser = self._create_superuser('superuser')
        m = BandAdmin(Band, custom_site)
        # search_fields without search_help_text.
        m.search_fields = ['name']
        request = self._mocked_authenticated_request('/band/', superuser)
        response = m.changelist_view(request)
        self.assertIsNone(response.context_data['cl'].search_help_text)
        self.assertNotContains(response, '<div class=""help"">')
        # search_fields with search_help_text.
        m.search_help_text = 'Search help text'
        request = self._mocked_authenticated_request('/band/', superuser)
        response = m.changelist_view(request)
        self.assertEqual(response.context_data['cl'].search_help_text, 'Search help text')
        self.assertContains(response, '<div class=""help"">Search help text</div>')


class GetAdminLogTests(TestCase):

    def test_custom_user_pk_not_named_id(self):
        """"""
        {% get_admin_log %} works if the user model's primary key isn't named
        'id'.
        """"""
        context = Context({'user': CustomIdUser()})
        template = Template('{% load log %}{% get_admin_log 10 as admin_log for_user user %}')
        # This template tag just logs.
        self.assertEqual(template.render(context), '')

    def test_no_user(self):
        """"""{% get_admin_log %} works without specifying a user.""""""
        user = User(username='jondoe', password='secret', email='super@example.com')
        user.save()
        ct = ContentType.objects.get_for_model(User)
        LogEntry.objects.log_action(user.pk, ct.pk, user.pk, repr(user), 1)
        t = Template(
            '{% load log %}'
            '{% get_admin_log 100 as admin_log %}'
            '{% for entry in admin_log %}'
            '{{ entry|safe }}'
            '{% endfor %}'
        )
        self.assertEqual(t.render(Context({})), 'Added “<User: jondoe>”.')

    def test_missing_args(self):
        msg = ""'get_admin_log' statements require two arguments""
        with self.assertRaisesMessage(TemplateSyntaxError, msg):
            Template('{% load log %}{% get_admin_log 10 as %}')

    def test_non_integer_limit(self):
        msg = ""First argument to 'get_admin_log' must be an integer""
        with self.assertRaisesMessage(TemplateSyntaxError, msg):
            Template('{% load log %}{% get_admin_log ""10"" as admin_log for_user user %}')

    def test_without_as(self):
        msg = ""Second argument to 'get_admin_log' must be 'as'""
        with self.assertRaisesMessage(TemplateSyntaxError, msg):
            Template('{% load log %}{% get_admin_log 10 ad admin_log for_user user %}')

    def test_without_for_user(self):
        msg = ""Fourth argument to 'get_admin_log' must be 'for_user'""
        with self.assertRaisesMessage(TemplateSyntaxError, msg):
            Template('{% load log %}{% get_admin_log 10 as admin_log foruser user %}')


@override_settings(ROOT_URLCONF='admin_changelist.urls')
class SeleniumTests(AdminSeleniumTestCase):

    available_apps = ['admin_changelist'] + AdminSeleniumTestCase.available_apps

    def setUp(self):
        User.objects.create_superuser(username='super', password='secret', email=None)

    def test_add_row_selection(self):
        """"""
        The status line for selected rows gets updated correctly (#22038).
        """"""
        from selenium.webdriver.common.by import By
        self.admin_login(username='super', password='secret')
        self.selenium.get(self.live_server_url + reverse('admin:auth_user_changelist'))

        form_id = '#changelist-form'

        # Test amount of rows in the Changelist
        rows = self.selenium.find_elements(
            By.CSS_SELECTOR,
            '%s #result_list tbody tr' % form_id
        )
        self.assertEqual(len(rows), 1)
        row = rows[0]

        selection_indicator = self.selenium.find_element(
            By.CSS_SELECTOR,
            '%s .action-counter' % form_id
        )
        all_selector = self.selenium.find_element(By.ID, 'action-toggle')
        row_selector = self.selenium.find_element(
            By.CSS_SELECTOR,
            '%s #result_list tbody tr:first-child .action-select' % form_id
        )

        # Test current selection
        self.assertEqual(selection_indicator.text, ""0 of 1 selected"")
        self.assertIs(all_selector.get_property('checked'), False)
        self.assertEqual(row.get_attribute('class'), '')

        # Select a row and check again
        row_selector.click()
        self.assertEqual(selection_indicator.text, ""1 of 1 selected"")
        self.assertIs(all_selector.get_property('checked'), True)
        self.assertEqual(row.get_attribute('class'), 'selected')

        # Deselect a row and check again
        row_selector.click()
        self.assertEqual(selection_indicator.text, ""0 of 1 selected"")
        self.assertIs(all_selector.get_property('checked'), False)
        self.assertEqual(row.get_attribute('class'), '')

    def test_modifier_allows_multiple_section(self):
        """"""
        Selecting a row and then selecting another row whilst holding shift
        should select all rows in-between.
        """"""
        from selenium.webdriver.common.action_chains import ActionChains
        from selenium.webdriver.common.by import By
        from selenium.webdriver.common.keys import Keys

        Parent.objects.bulk_create([Parent(name='parent%d' % i) for i in range(5)])
        self.admin_login(username='super', password='secret')
        self.selenium.get(self.live_server_url + reverse('admin:admin_changelist_parent_changelist'))
        checkboxes = self.selenium.find_elements(By.CSS_SELECTOR, 'tr input.action-select')
        self.assertEqual(len(checkboxes), 5)
        for c in checkboxes:
            self.assertIs(c.get_property('checked'), False)
        # Check first row. Hold-shift and check next-to-last row.
        checkboxes[0].click()
        ActionChains(self.selenium).key_down(Keys.SHIFT).click(checkboxes[-2]).key_up(Keys.SHIFT).perform()
        for c in checkboxes[:-2]:
            self.assertIs(c.get_property('checked'), True)
        self.assertIs(checkboxes[-1].get_property('checked'), False)

    def test_select_all_across_pages(self):
        from selenium.webdriver.common.by import By
        Parent.objects.bulk_create([Parent(name='parent%d' % i) for i in range(101)])
        self.admin_login(username='super', password='secret')
        self.selenium.get(self.live_server_url + reverse('admin:admin_changelist_parent_changelist'))

        selection_indicator = self.selenium.find_element(By.CSS_SELECTOR, '.action-counter')
        select_all_indicator = self.selenium.find_element(By.CSS_SELECTOR, '.actions .all')
        question = self.selenium.find_element(By.CSS_SELECTOR, '.actions > .question')
        clear = self.selenium.find_element(By.CSS_SELECTOR, '.actions > .clear')
        select_all = self.selenium.find_element(By.ID, 'action-toggle')
        select_across = self.selenium.find_elements(By.NAME, 'select_across')

        self.assertIs(question.is_displayed(), False)
        self.assertIs(clear.is_displayed(), False)
        self.assertIs(select_all.get_property('checked'), False)
        for hidden_input in select_across:
            self.assertEqual(hidden_input.get_property('value'), '0')
        self.assertIs(selection_indicator.is_displayed(), True)
        self.assertEqual(selection_indicator.text, '0 of 100 selected')
        self.assertIs(select_all_indicator.is_displayed(), False)

        select_all.click()
        self.assertIs(question.is_displayed(), True)
        self.assertIs(clear.is_displayed(), False)
        self.assertIs(select_all.get_property('checked'), True)
        for hidden_input in select_across:
            self.assertEqual(hidden_input.get_property('value'), '0')
        self.assertIs(selection_indicator.is_displayed(), True)
        self.assertEqual(selection_indicator.text, '100 of 100 selected')
        self.assertIs(select_all_indicator.is_displayed(), False)

        question.click()
        self.assertIs(question.is_displayed(), False)
        self.assertIs(clear.is_displayed(), True)
        self.assertIs(select_all.get_property('checked'), True)
        for hidden_input in select_across:
            self.assertEqual(hidden_input.get_property('value'), '1')
        self.assertIs(selection_indicator.is_displayed(), False)
        self.assertIs(select_all_indicator.is_displayed(), True)

        clear.click()
        self.assertIs(question.is_displayed(), False)
        self.assertIs(clear.is_displayed(), False)
        self.assertIs(select_all.get_property('checked'), False)
        for hidden_input in select_across:
            self.assertEqual(hidden_input.get_property('value'), '0')
        self.assertIs(selection_indicator.is_displayed(), True)
        self.assertEqual(selection_indicator.text, '0 of 100 selected')
        self.assertIs(select_all_indicator.is_displayed(), False)

    def test_actions_warn_on_pending_edits(self):
        from selenium.webdriver.common.by import By
        Parent.objects.create(name='foo')

        self.admin_login(username='super', password='secret')
        self.selenium.get(self.live_server_url + reverse('admin:admin_changelist_parent_changelist'))

        name_input = self.selenium.find_element(By.ID, 'id_form-0-name')
        name_input.clear()
        name_input.send_keys('bar')
        self.selenium.find_element(By.ID, 'action-toggle').click()
        self.selenium.find_element(By.NAME, 'index').click()  # Go
        alert = self.selenium.switch_to.alert
        try:
            self.assertEqual(
                alert.text,
                'You have unsaved changes on individual editable fields. If you '
                'run an action, your unsaved changes will be lost.'
            )
        finally:
            alert.dismiss()

    def test_save_with_changes_warns_on_pending_action(self):
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import Select

        Parent.objects.create(name='parent')

        self.admin_login(username='super', password='secret')
        self.selenium.get(self.live_server_url + reverse('admin:admin_changelist_parent_changelist'))

        name_input = self.selenium.find_element(By.ID, 'id_form-0-name')
        name_input.clear()
        name_input.send_keys('other name')
        Select(
            self.selenium.find_element(By.NAME, 'action')
        ).select_by_value('delete_selected')
        self.selenium.find_element(By.NAME, '_save').click()
        alert = self.selenium.switch_to.alert
        try:
            self.assertEqual(
                alert.text,
                'You have selected an action, but you haven’t saved your '
                'changes to individual fields yet. Please click OK to save. '
                'You’ll need to re-run the action.',
            )
        finally:
            alert.dismiss()

    def test_save_without_changes_warns_on_pending_action(self):
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import Select

        Parent.objects.create(name='parent')

        self.admin_login(username='super', password='secret')
        self.selenium.get(self.live_server_url + reverse('admin:admin_changelist_parent_changelist'))

        Select(
            self.selenium.find_element(By.NAME, 'action')
        ).select_by_value('delete_selected')
        self.selenium.find_element(By.NAME, '_save').click()
        alert = self.selenium.switch_to.alert
        try:
            self.assertEqual(
                alert.text,
                'You have selected an action, and you haven’t made any '
                'changes on individual fields. You’re probably looking for '
                'the Go button rather than the Save button.',
            )
        finally:
            alert.dismiss()",1,334 2000 40 2001 41 58 2002 61 2003 40 41 64 2004 348 2005 40 2006 41 58 2006 46 2007 61 2008 46 2009 46 2010 40 2011 61 648 44 2012 61 648 44 2013 61 648 41 348 2014 40 2015 44 2011 41 58 450 2008 46 2009 46 2010 40 2011 61 2011 44 2012 61 648 44 2013 61 648 41 348 2016 40 2015 44 2017 44 2018 41 58 2019 61 2015 46 2002 46 2020 40 2017 41 2019 46 2018 61 2018 450 2019 348 2021 40 2015 41 58 2022 61 2023 40 2024 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2029 40 2026 41 44 648 41 348 2030 40 2015 41 58 334 2031 40 2032 46 2033 41 58 2034 61 91 648 44 648 44 648 93 2035 61 40 2036 40 648 41 46 2037 40 2038 61 304 41 44 2039 40 2036 40 648 41 41 46 2040 40 41 44 2036 40 648 41 46 2040 40 41 44 41 2022 61 2031 40 2041 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2042 40 41 44 123 1502 58 648 44 1502 58 648 125 41 348 2043 40 2015 41 58 334 2031 40 2032 46 2033 41 58 2034 61 91 648 44 648 44 648 93 2035 61 40 2036 40 648 41 44 2039 40 648 41 44 2036 40 648 41 41 2022 61 2031 40 2041 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2042 40 41 44 123 1502 58 648 44 1502 58 648 125 41 348 2044 40 2015 41 58 648 2022 61 2023 40 2024 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2046 46 2047 44 123 648 58 123 125 125 41 348 2048 40 2015 41 58 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2022 61 2053 40 2050 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1501 41 621 2015 46 2028 40 2026 46 2045 46 2046 46 2047 44 123 648 58 123 125 125 41 348 2057 40 2015 41 58 2058 61 2059 40 2060 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2058 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2046 46 2047 44 123 648 58 123 125 125 41 348 2061 40 2015 41 58 2058 61 2059 40 2060 44 2025 41 2058 46 2062 61 40 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2058 46 2027 40 2019 41 2015 46 2063 40 2026 46 2045 46 2046 46 2047 44 302 41 348 2064 40 2015 41 58 334 2065 40 2032 46 2033 41 58 2034 61 40 648 44 648 41 348 2066 40 2015 44 2019 41 58 450 40 648 44 648 41 2058 61 2065 40 2060 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2058 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2046 46 2047 44 123 648 58 123 125 44 648 58 123 125 125 41 348 2067 40 2015 41 58 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2022 61 2053 40 2050 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 42 1503 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 497 2068 40 2069 41 311 2070 58 2071 61 2026 46 2045 46 2056 40 41 2015 46 2028 40 2071 44 1501 41 2015 46 2028 40 2070 46 2072 91 1500 93 91 648 93 46 2056 40 648 41 44 1501 41 348 2073 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 44 2074 61 1503 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 44 2074 61 1503 41 2022 61 2075 40 2050 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1501 41 348 2076 40 2015 41 58 648 2077 61 2024 46 2009 46 2051 40 2052 61 648 44 2049 61 303 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2022 61 2023 40 2024 44 2025 41 2026 61 2022 46 2027 40 2019 41 2026 46 2078 61 303 466 61 2079 40 648 41 2070 61 2080 40 123 648 58 2026 44 648 58 2024 46 2081 125 41 2082 61 466 46 2083 40 2070 41 2084 61 2085 40 648 44 2086 61 40 2077 46 2087 44 41 41 2088 61 2089 40 2077 46 2087 44 2084 44 648 41 2015 46 2090 40 2082 46 2091 40 2088 41 44 45 1501 44 648 37 2082 41 348 2092 40 2015 41 58 648 2077 61 2024 46 2009 46 2051 40 2052 61 648 44 2049 61 303 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 621 2032 46 2093 46 2094 61 648 2022 61 2023 40 2024 44 2032 46 2093 41 2026 61 2022 46 2027 40 2019 41 2026 46 2078 61 303 466 61 2079 40 648 41 2070 61 2080 40 123 648 58 2026 44 648 58 2024 46 2081 125 41 2082 61 466 46 2083 40 2070 41 2084 61 2085 40 648 44 2086 61 40 2077 46 2087 44 41 41 2088 61 2089 40 2077 46 2087 44 2084 44 648 41 2015 46 2090 40 2082 46 2091 40 2088 41 44 45 1501 44 648 37 2082 41 348 2095 40 2015 41 58 648 2077 61 2024 46 2009 46 2051 40 2052 61 648 44 2049 61 303 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2022 61 2096 40 2024 44 2032 46 2093 41 2026 61 2022 46 2027 40 2019 41 2026 46 2078 61 303 466 61 2079 40 648 41 2070 61 2080 40 123 648 58 2026 44 648 58 2024 46 2081 125 41 2082 61 466 46 2083 40 2070 41 2084 61 2085 40 648 44 2086 61 40 2077 46 2087 44 41 41 2088 61 2089 40 2077 46 2087 44 2084 44 648 648 41 2015 46 2090 40 2082 46 2091 40 2088 41 44 45 1501 44 648 37 2082 41 348 2097 40 2015 41 58 648 2098 61 2050 46 2009 46 2051 40 2052 61 648 41 2077 61 2024 46 2009 46 2051 40 2052 61 648 44 2049 61 2098 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2022 61 2023 40 2024 44 2025 41 2026 61 2022 46 2027 40 2019 41 2026 46 2078 61 303 466 61 2079 40 648 41 2070 61 2080 40 123 648 58 2026 44 648 58 2024 46 2081 125 41 2082 61 466 46 2083 40 2070 41 2084 61 2085 40 648 44 2086 61 40 2077 46 2087 44 41 41 2088 61 2089 40 2077 46 2087 44 2084 44 648 37 2098 41 2015 46 2090 40 2082 46 2091 40 2088 41 44 45 1501 44 648 37 2082 41 348 2099 40 2015 41 58 648 2098 61 2050 46 2009 46 2051 40 2052 61 648 41 2077 61 2024 46 2009 46 2051 40 2052 61 648 44 2049 61 2098 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2022 61 2023 40 2024 44 2025 41 621 2022 46 2034 61 91 648 44 648 44 648 93 2022 46 2100 61 91 648 93 2022 46 2101 61 91 648 93 2026 61 2022 46 2027 40 2019 41 2102 61 2022 46 2103 40 2019 41 2026 46 2078 61 2102 40 2045 61 2026 46 2104 41 466 61 2079 40 648 41 2070 61 2080 40 123 648 58 2026 44 648 58 2024 46 2081 125 41 2082 61 466 46 2083 40 2070 41 621 2105 61 40 648 648 648 41 37 2077 46 2087 2015 46 2106 40 2105 44 2082 44 2107 61 648 41 621 2108 61 40 648 648 41 2015 46 2106 40 648 37 2108 44 2082 44 2107 61 648 44 41 348 2109 40 2015 41 58 648 2098 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1501 44 1504 41 58 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2098 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 45 1501 125 41 621 2019 46 2018 61 2015 46 2007 2022 61 2023 40 2024 44 2025 41 621 2022 46 2034 61 91 648 44 648 44 648 93 2022 46 2100 61 91 648 93 2022 46 2101 61 91 648 93 497 2015 46 2112 40 2113 41 58 2022 46 2027 40 2019 41 348 2114 40 2015 41 58 2098 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1501 44 1504 41 58 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2098 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2022 61 2115 40 2024 44 2025 41 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 2015 46 2117 40 2026 46 2118 44 2119 41 348 2120 40 2015 41 58 648 2121 61 2122 46 2009 46 2051 40 2052 61 648 41 2123 61 2041 46 2009 46 2051 40 2052 61 648 44 2124 61 1503 41 2123 46 2125 46 2126 40 2121 41 2123 46 2125 46 2126 40 2121 41 2022 61 2127 40 2041 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 2121 46 2128 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 621 2015 46 2028 40 2026 46 2129 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2131 40 2015 41 58 648 2132 61 2133 46 2009 46 2051 40 2052 61 648 41 2123 61 2134 46 2009 46 2051 40 2052 61 648 41 2135 46 2009 46 2051 40 2136 61 2123 44 2137 61 2132 44 2138 61 648 41 2135 46 2009 46 2051 40 2136 61 2123 44 2137 61 2132 44 2138 61 648 41 2022 61 2139 40 2134 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 2132 46 2128 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 621 2015 46 2028 40 2026 46 2129 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2140 40 2015 41 58 648 2132 61 2133 46 2009 46 2051 40 2052 61 648 41 2123 61 2134 46 2009 46 2051 40 2052 61 648 41 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2123 41 2135 46 2009 46 2051 40 2136 61 2123 44 2137 61 2132 44 2138 61 648 41 2135 46 2009 46 2051 40 2136 61 2123 44 2137 61 2132 44 2138 61 648 41 2022 61 2142 40 2141 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 2132 46 2128 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 621 2015 46 2028 40 2026 46 2129 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2143 40 2015 41 58 648 2132 61 2133 46 2009 46 2051 40 2052 61 648 41 2144 61 2145 46 2009 46 2051 40 2052 61 648 41 2135 46 2009 46 2051 40 2136 61 2144 44 2137 61 2132 44 2138 61 648 41 2135 46 2009 46 2051 40 2136 61 2144 44 2137 61 2132 44 2138 61 648 41 2022 61 2146 40 2145 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 2132 46 2128 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 621 2015 46 2028 40 2026 46 2129 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2147 40 2015 41 58 648 2132 61 2148 46 2009 46 2051 40 2052 61 648 41 2149 61 2150 46 2009 46 2051 40 2052 61 648 41 2060 46 2009 46 2051 40 2123 61 2149 44 2151 61 2132 44 2152 61 648 41 2060 46 2009 46 2051 40 2123 61 2149 44 2151 61 2132 44 2152 61 648 41 2022 61 2153 40 2150 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 2132 46 2128 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 621 2015 46 2028 40 2026 46 2129 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2154 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 621 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2022 61 2053 40 2050 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 648 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 621 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2155 40 2015 41 58 2022 61 2142 40 2141 44 2025 41 2156 61 91 40 123 2055 58 648 125 44 648 41 44 40 123 2055 58 648 125 44 648 41 44 93 385 328 44 371 398 2156 58 497 2015 46 2157 40 328 61 328 41 58 2019 61 2015 46 2002 46 2020 40 648 44 328 41 2019 46 2018 61 2015 46 2007 2019 46 2158 61 2159 40 2019 41 2022 46 2027 40 2019 41 2160 61 91 2022 46 2161 385 2022 398 2019 46 2158 93 2015 46 2028 40 1501 44 2162 40 2160 41 41 2015 46 2028 40 371 44 2160 91 1500 93 41 348 2163 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2024 46 2009 46 2051 40 2049 61 2049 44 2052 61 648 41 2022 61 2053 40 2050 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 621 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2164 40 2015 41 58 648 2132 61 2133 46 2009 46 2051 40 2052 61 648 41 2123 61 2134 46 2009 46 2051 40 2052 61 648 41 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2123 41 2135 46 2009 46 2051 40 2136 61 2123 44 2137 61 2132 44 2138 61 648 41 2135 46 2009 46 2051 40 2136 61 2123 44 2137 61 2132 44 2138 61 648 41 2022 61 2142 40 2141 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 621 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1501 41 621 2015 46 2063 40 2026 46 2045 46 2046 46 2130 44 302 41 2026 46 2045 46 353 40 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2165 40 2015 41 58 648 2166 61 2134 46 2009 46 2051 40 2052 61 648 41 2167 61 2134 46 2009 46 2051 40 2052 61 648 41 2168 61 2133 46 2009 46 2051 40 2052 61 648 41 2169 61 2133 46 2009 46 2051 40 2052 61 648 41 2166 46 2170 46 2171 40 91 2168 44 2169 93 41 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2166 41 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2167 41 621 2172 61 2142 40 2141 44 2025 41 2172 46 2173 61 91 648 44 648 93 621 2174 61 2139 40 2134 44 2025 41 2174 46 2173 61 91 648 44 648 44 648 93 385 2175 44 2129 398 40 40 648 44 1501 41 44 40 648 44 1501 41 44 40 648 44 1502 41 44 40 648 44 1500 41 44 40 648 44 1500 41 44 41 58 497 2015 46 2157 40 2175 61 2175 41 58 621 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 2175 125 41 2019 46 2018 61 2015 46 2007 2176 61 2172 46 2027 40 2019 41 2015 46 2028 40 2176 46 2045 46 2056 40 41 44 2129 41 621 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 2175 125 41 2019 46 2018 61 2015 46 2007 2177 61 2174 46 2027 40 2019 41 2015 46 2028 40 2177 46 2045 46 2056 40 41 44 2129 41 621 385 2175 44 2129 398 40 40 648 44 1501 41 44 40 648 44 1501 41 44 40 648 44 1500 41 44 40 648 44 1501 41 44 40 648 44 1500 41 44 40 648 44 1500 41 44 41 58 497 2015 46 2157 40 2175 61 2175 41 58 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 2175 125 41 2019 46 2018 61 2015 46 2007 2177 61 2174 46 2027 40 2019 41 2015 46 2028 40 2177 46 2045 46 2056 40 41 44 2129 41 348 2178 40 2015 41 58 2123 61 2134 46 2009 46 2051 40 2052 61 648 41 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2123 41 2022 61 2142 40 2141 44 2025 41 2022 46 2173 61 91 648 93 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 2123 46 2128 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1501 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 2123 46 2128 43 1502 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1500 41 348 2179 40 2015 41 58 2123 61 2134 46 2009 46 2051 40 2052 61 648 41 2180 61 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2123 41 2022 61 2142 40 2141 44 2025 41 2022 46 2173 61 91 648 93 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 2180 93 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 93 41 348 2182 40 2015 41 58 2123 61 2134 46 2009 46 2051 40 2052 61 648 41 2180 61 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2123 41 2022 61 2142 40 2141 44 2025 41 2022 46 2173 61 91 648 93 497 2183 40 2184 44 2185 44 2186 61 648 41 58 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 2180 93 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 93 41 348 2187 40 2015 41 58 2188 61 2134 46 2009 46 2051 40 2052 61 648 41 2180 61 2141 46 2009 46 2051 40 2052 61 648 44 2136 61 2188 41 2189 61 2133 46 2009 46 2051 40 2052 61 648 44 2074 61 1503 41 2135 46 2009 46 2051 40 2137 61 2189 44 2136 61 2188 41 621 621 497 2183 40 2190 44 2191 44 2186 61 648 41 58 2022 61 2142 40 2141 44 2025 41 2022 46 2173 61 91 648 93 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 2180 93 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 93 41 348 2192 40 2015 41 58 2015 46 2028 40 2193 46 2081 46 2128 46 2052 44 648 41 621 2022 61 2032 46 2033 40 2194 44 2025 41 2195 61 2193 46 2009 46 2051 40 2196 61 648 41 2197 61 2193 46 2009 46 2051 40 2196 61 648 41 2022 61 2032 46 2033 40 2193 44 2025 41 2022 46 2173 61 91 648 93 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 2195 93 41 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2055 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2181 40 2026 46 2045 44 91 2197 93 41 348 2198 40 2015 41 58 648 2022 61 2127 40 2041 44 2025 41 385 2199 398 40 123 125 44 123 648 58 648 125 41 58 2019 61 2015 46 2002 46 2020 40 648 44 2199 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2200 40 648 44 2201 40 2026 46 2045 46 2046 41 41 621 2019 61 2015 46 2002 46 2020 40 648 44 123 648 58 648 125 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2015 46 2202 40 648 44 2201 40 2026 46 2045 46 2046 41 41 348 2203 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1501 44 1503 41 58 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2049 41 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2049 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 621 2022 61 2023 40 2024 44 2025 41 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1503 41 2015 46 2028 40 2026 46 2118 46 2056 44 1503 41 2015 46 2028 40 411 40 2026 46 2118 46 2204 41 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 93 41 621 2022 61 2205 40 2024 44 2025 41 2026 61 2022 46 2027 40 2019 41 2015 46 2028 40 2026 46 2045 46 2056 40 41 44 1503 41 2015 46 2028 40 2026 46 2118 46 2056 44 1503 41 2015 46 2028 40 411 40 2026 46 2118 46 2204 41 44 91 1501 44 1502 44 1502 93 41 348 2206 40 2015 41 58 648 2015 46 2207 46 2208 40 2015 46 2007 41 373 61 2209 46 2009 46 2051 40 2210 61 2211 46 2210 46 2212 40 41 41 2213 61 2015 46 2207 46 2020 40 2085 40 648 41 41 2015 46 2214 40 2213 44 2215 46 2216 40 373 46 2210 41 41 2015 46 2217 40 2213 44 2201 40 373 46 2210 41 41 348 2218 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1502 41 58 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2049 41 2219 61 2015 46 2014 40 648 41 2220 61 2015 46 2014 40 648 41 621 2022 61 2025 46 2221 91 2024 93 2019 61 2015 46 2016 40 648 44 2219 41 2213 61 2022 46 2222 40 2019 41 2015 46 2217 40 2213 44 648 41 2034 61 2022 46 2223 40 2019 41 2100 61 2022 46 2224 40 2019 44 2034 41 2015 46 2028 40 2034 44 91 648 44 648 93 41 2015 46 2028 40 2100 44 91 648 93 41 621 2022 61 2225 40 2024 44 2025 41 2019 61 2015 46 2016 40 648 44 2220 41 2213 61 2022 46 2222 40 2019 41 2015 46 2214 40 2213 44 648 41 2025 46 2226 40 2024 41 2034 61 2022 46 2223 40 2019 41 2100 61 2022 46 2224 40 2019 44 2034 41 2015 46 2028 40 2034 44 40 648 44 648 44 648 41 41 2015 46 2028 40 2100 44 91 648 93 41 621 2025 46 444 40 2024 44 2023 41 2022 61 2025 46 2221 91 2024 93 2019 61 2015 46 2016 40 648 44 2219 41 2213 61 2022 46 2222 40 2019 41 2015 46 2214 40 2213 44 648 41 348 2227 40 2015 41 58 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1501 44 1503 41 58 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2049 41 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2049 41 621 2019 61 2015 46 2002 46 2020 40 648 44 2054 61 123 2228 58 648 125 41 2019 46 2018 61 2015 46 2007 621 2022 61 2023 40 2024 44 2025 41 2022 46 2229 61 1504 621 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 2015 46 2028 40 2162 40 2026 46 2104 41 44 1503 41 621 621 2022 61 2023 40 2024 44 2025 41 2022 46 2229 61 1503 621 2026 61 2022 46 2027 40 2019 41 2026 46 2116 40 2019 41 2015 46 2028 40 2162 40 2026 46 2104 41 44 1502 41 348 2230 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1501 44 1502 41 58 2024 46 2009 46 2051 40 2087 61 2110 44 2052 61 648 37 2110 44 2049 61 2049 44 2074 61 2110 41 2022 61 2231 40 2024 44 2025 41 2007 61 2015 46 2014 40 648 41 2019 61 2015 46 2016 40 648 44 2007 41 2213 61 2022 46 2222 40 2019 41 385 2110 398 2111 40 1501 44 1502 41 58 2084 61 2085 40 648 44 2086 61 40 2110 44 41 41 2015 46 2214 40 2213 44 648 37 40 2084 44 2110 41 41 2034 61 2022 46 2223 40 2019 41 2100 61 2022 46 2224 40 2019 44 2034 41 2015 46 2028 40 2034 44 40 648 44 648 44 648 41 41 2015 46 2028 40 2100 44 91 648 93 41 348 2232 40 2015 41 58 648 2233 61 2050 46 2009 46 2051 40 2052 61 648 41 2022 61 2234 40 2050 44 2025 41 2007 61 2015 46 2014 40 648 41 2019 61 2015 46 2016 40 648 44 2007 41 2213 61 2022 46 2222 40 2019 41 2084 61 2085 40 648 44 2086 61 40 2233 46 2128 44 41 41 2015 46 2217 40 2213 44 648 37 2084 41 348 2235 40 2015 41 58 2015 46 2207 46 2208 40 2015 46 2007 41 2017 61 2085 40 648 41 2213 61 2015 46 2207 46 2020 40 2017 41 2015 46 2217 40 2213 44 648 41 2084 61 648 385 2054 44 2236 398 40 40 123 648 58 648 125 44 648 41 44 40 123 648 58 648 44 648 58 648 125 44 648 44 41 44 40 123 648 58 648 44 2055 58 648 125 44 648 37 2055 44 41 44 40 123 648 58 648 44 2237 58 648 125 44 648 37 2237 44 41 44 41 58 497 2015 46 2157 40 2054 61 2054 41 58 2213 61 2015 46 2207 46 2020 40 2017 44 2054 61 2054 41 2015 46 2214 40 2213 44 2084 37 2236 41 348 2238 40 2015 41 58 2015 46 2207 46 2208 40 2015 46 2007 41 2017 61 2085 40 648 41 2213 61 2015 46 2207 46 2020 40 2017 41 2015 46 2217 40 2213 44 648 41 2084 61 648 385 2054 44 2236 398 40 40 123 648 58 648 125 44 648 41 44 40 123 648 58 648 44 648 58 648 125 44 648 44 41 44 40 123 648 58 648 44 2237 58 648 125 44 648 37 2237 44 41 44 41 58 497 2015 46 2157 40 2054 61 2054 41 58 2213 61 2015 46 2207 46 2020 40 2017 44 2054 61 2054 41 2015 46 2214 40 2213 44 2084 37 2236 41 348 2239 40 2015 41 58 2015 46 2207 46 2208 40 2015 46 2007 41 2017 61 2085 40 648 41 2084 61 648 385 2054 398 40 123 2055 58 648 125 44 123 2240 58 648 125 44 123 2241 58 648 125 44 123 2242 58 648 125 44 123 2237 58 648 125 44 123 648 58 648 125 44 41 58 497 2015 46 2157 40 2054 61 2054 41 58 2213 61 2015 46 2207 46 2020 40 2017 44 2054 61 2054 41 2015 46 2217 40 2213 44 2084 41 348 2243 40 2015 41 58 2244 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 648 44 2248 61 648 41 2249 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 648 44 2248 61 648 41 2250 61 2251 46 2009 46 2051 40 2244 61 2249 41 2252 61 2253 40 2245 44 2025 41 2007 61 2015 46 2014 40 648 41 2019 61 2015 46 2016 40 648 44 2007 41 2213 61 2252 46 2222 40 2019 41 621 2015 46 2214 40 2213 44 2201 40 2244 46 2246 41 41 2015 46 2214 40 2213 44 2201 40 2244 46 2247 41 41 2015 46 2214 40 2213 44 2201 40 2244 46 2248 41 41 621 2015 46 2214 40 2213 44 648 41 2015 46 2214 40 2213 44 648 37 2250 41 348 2254 40 2015 41 58 648 621 621 621 621 621 621 621 621 621 621 621 2255 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1501 41 2256 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2257 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2258 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2007 61 2015 46 2014 40 648 41 2015 46 2207 46 2208 40 2007 41 2259 61 2085 40 648 41 621 621 2054 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 2201 40 2258 46 2128 41 44 648 58 2201 40 2257 46 2128 41 44 648 58 2201 40 2255 46 2128 41 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2213 61 2015 46 2207 46 2260 40 2259 44 2054 44 2261 61 304 44 2262 61 123 648 58 648 125 41 621 621 2015 46 2214 40 2213 44 648 41 2015 46 2214 40 2213 44 2255 46 2246 41 2255 46 2263 40 41 2015 46 2028 40 2255 46 2247 44 384 40 2054 91 648 93 41 41 2015 46 2028 40 2255 46 2248 44 384 40 2054 91 648 93 41 41 2256 46 2263 40 41 2015 46 2028 40 2256 46 2247 44 1502 41 2015 46 2028 40 2256 46 2248 44 1502 41 2257 46 2263 40 41 2015 46 2028 40 2257 46 2247 44 384 40 2054 91 648 93 41 41 2015 46 2028 40 2257 46 2248 44 384 40 2054 91 648 93 41 41 2258 46 2263 40 41 2015 46 2028 40 2258 46 2247 44 384 40 2054 91 648 93 41 41 2015 46 2028 40 2258 46 2248 44 384 40 2054 91 648 93 41 41 621 2015 46 2028 40 2162 40 2245 46 2009 46 2264 40 41 41 44 1502 41 348 2265 40 2015 41 58 2255 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1501 41 2256 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2257 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2007 61 2015 46 2014 40 648 41 2015 46 2207 46 2208 40 2007 41 2259 61 2085 40 648 41 2022 61 2253 40 2245 44 2025 41 2054 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 2201 40 2255 46 2128 41 44 648 58 2201 40 2256 46 2128 41 44 648 58 2201 40 2257 46 2128 41 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2019 61 2015 46 2002 46 2260 40 2259 44 2054 61 2054 41 2266 61 2022 46 2267 40 2019 44 2268 61 648 41 2015 46 2028 40 2269 40 2266 41 44 2269 40 91 2201 40 2255 46 2128 41 44 2201 40 2256 46 2128 41 44 2201 40 2257 46 2128 41 93 41 41 348 2270 40 2015 41 58 2255 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1501 41 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2054 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 2201 40 2255 46 2128 41 44 648 58 648 44 648 58 648 44 125 2007 61 2015 46 2014 40 648 41 2015 46 2207 46 2208 40 2007 41 2259 61 2085 40 648 41 2022 61 2253 40 2245 44 2025 41 2019 61 2015 46 2002 46 2260 40 2259 44 2054 61 2054 41 2045 61 2022 46 2271 40 2019 44 2268 61 648 41 2015 46 2028 40 2045 46 2056 40 41 44 1501 41 2054 91 648 93 61 648 621 2019 61 2015 46 2002 46 2260 40 2259 44 2054 61 2054 41 2045 61 2022 46 2271 40 2019 44 2268 61 648 41 2015 46 2028 40 2045 46 2056 40 41 44 1502 41 348 2272 40 2015 41 58 2255 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1501 41 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2054 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 2201 40 2255 46 2128 41 44 648 58 648 44 648 58 648 44 125 2007 61 2015 46 2014 40 648 41 2015 46 2207 46 2208 40 2007 41 2259 61 2085 40 648 41 2022 61 2253 40 2245 44 2025 41 2019 61 2015 46 2002 46 2260 40 2259 44 2054 61 2054 41 2045 61 2022 46 2271 40 2019 44 2268 61 648 41 2015 46 2028 40 2045 46 2056 40 41 44 1501 41 348 2273 40 2015 41 58 648 2255 61 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1501 41 2245 46 2009 46 2051 40 2246 61 648 44 2247 61 1502 44 2248 61 1502 41 2054 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 2201 40 2255 46 2128 41 44 648 58 648 44 648 58 648 44 125 2007 61 2015 46 2014 40 648 41 2015 46 2207 46 2208 40 2007 41 2259 61 2085 40 648 41 497 2068 40 2069 41 311 2070 58 2213 61 2015 46 2207 46 2260 40 2259 44 2054 61 2054 41 2015 46 2028 40 2213 46 2274 44 1504 41 2015 46 2202 40 648 44 2070 46 2072 91 1502 93 91 648 93 41 2015 46 2202 40 648 44 2070 46 2072 91 1502 93 91 648 93 41 621 2015 46 2202 40 2201 40 2255 46 2128 41 91 58 1502 93 44 2070 46 2072 91 1502 93 91 648 93 41 348 2275 40 2015 41 58 648 2007 61 2015 46 2014 40 648 41 385 2276 398 2111 40 1501 44 1503 41 58 2277 46 2009 46 2051 40 2087 61 2276 44 323 61 304 41 334 2278 40 2032 46 2033 41 58 2279 61 1502 348 2280 40 2281 61 302 41 58 2025 46 444 40 2277 44 2278 41 2252 61 2278 40 2277 44 2025 41 2276 61 1500 392 2281 360 1503 385 2282 398 2111 40 1501 44 1502 41 58 2019 61 2015 46 2016 40 648 37 2282 44 2007 41 2213 61 2252 46 2222 40 2019 41 385 2283 398 2213 46 2284 91 648 93 46 2104 58 2276 636 1501 392 2281 360 45 1501 2015 46 2028 40 2283 46 2087 44 2276 41 2025 46 2226 40 2277 41 621 2280 40 41 621 621 2278 46 2035 61 91 648 93 2280 40 41 621 2278 46 2035 61 91 648 44 648 93 2280 40 41 2278 46 2035 61 91 648 44 648 93 2280 40 2281 61 304 41 2278 46 2035 61 91 648 44 648 93 2280 40 41 2278 46 2035 61 91 648 44 648 93 2280 40 2281 61 304 41 348 2285 40 2015 41 58 648 2007 61 2015 46 2014 40 648 41 385 2276 398 2111 40 1501 44 1503 41 58 2286 46 2009 46 2051 40 2087 61 2276 44 323 61 304 44 2287 61 2276 41 334 2288 40 2032 46 2033 41 58 2279 61 1502 348 2280 40 2281 61 302 41 58 2025 46 444 40 2286 44 2288 41 2252 61 2288 40 2286 44 2025 41 2276 61 1500 392 2281 360 1503 385 2282 398 2111 40 1501 44 1502 41 58 2019 61 2015 46 2016 40 648 37 2282 44 2007 41 2213 61 2252 46 2222 40 2019 41 385 2283 398 2213 46 2284 91 648 93 46 2104 58 2276 636 1501 392 2281 360 45 1501 2015 46 2028 40 2283 46 2087 44 2276 41 2025 46 2226 40 2286 41 621 2280 40 2281 61 304 41 621 621 2288 46 2035 61 91 648 93 2280 40 41 621 2288 46 2035 61 91 648 44 648 93 2280 40 41 2288 46 2035 61 91 648 44 648 93 2280 40 2281 61 304 41 2288 46 2035 61 91 648 44 648 93 2280 40 41 2288 46 2035 61 91 648 44 648 93 2280 40 2281 61 304 41 64 2289 40 648 41 348 2290 40 2015 41 58 334 2291 40 2292 46 2293 41 58 2294 61 2292 46 2295 40 2296 61 304 41 334 2297 58 2035 61 40 648 44 41 334 2293 40 2292 46 2293 41 58 2294 61 2292 46 2295 40 2296 61 304 41 2298 61 2292 46 2295 40 2296 61 304 44 424 61 304 41 2299 61 2292 46 2300 40 2291 44 2292 46 2301 41 2302 61 2292 46 2300 40 2291 44 2292 46 2301 41 2303 61 2292 46 2304 40 2291 44 2292 46 2301 41 2305 61 2292 46 2295 40 41 2306 61 2292 46 2295 40 41 2307 61 2292 46 2295 40 424 61 304 41 334 2297 58 2308 61 123 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 125 334 2033 40 2032 46 2033 41 58 348 2309 40 2015 44 2019 41 58 450 2293 46 2009 46 2310 40 41 2019 61 2015 46 2016 40 648 44 2015 46 2007 41 2093 61 2032 46 2311 40 2052 61 648 41 2252 61 2033 40 2293 44 2093 41 2312 61 2252 46 2027 40 2019 41 2156 61 40 40 91 93 44 91 648 93 41 44 621 40 91 648 93 44 91 648 93 41 44 40 91 648 93 44 91 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 93 44 91 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 44 648 93 41 44 621 40 91 648 44 648 44 648 93 44 91 648 44 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 44 648 93 41 44 41 621 2313 61 91 2036 40 648 41 44 2036 40 648 41 46 2037 40 2038 61 304 41 93 621 2314 61 91 2036 40 648 41 44 2036 40 648 41 46 2037 40 2038 61 304 41 93 2156 636 40 40 2313 44 2313 41 44 40 2314 44 2314 43 91 648 93 41 44 41 385 2035 44 2315 398 2156 58 497 2015 46 2157 40 2035 61 2035 41 58 2015 46 2028 40 2312 46 2316 40 2035 41 44 2315 41 64 2289 40 648 41 348 2317 40 2015 41 58 334 2291 40 2292 46 2293 41 58 2294 61 2292 46 2295 40 2296 61 304 41 334 2297 58 2035 61 40 648 44 41 334 2293 40 2292 46 2293 41 58 2318 61 2292 46 2295 40 41 2319 61 2292 46 2295 40 41 2320 61 2292 46 2295 40 41 2321 61 2292 46 2295 40 41 2322 61 2292 46 2295 40 41 2323 61 2292 46 2295 40 41 2324 61 2292 46 2295 40 424 61 304 41 2325 61 2292 46 2295 40 424 61 304 41 2326 61 2292 46 2300 40 2291 44 2292 46 2301 41 2327 61 2292 46 2300 40 2291 44 2292 46 2301 41 2328 61 2292 46 2300 40 2291 44 2292 46 2301 41 2329 61 2292 46 2300 40 2291 44 2292 46 2301 41 334 2297 58 2330 61 91 42 91 2292 46 2331 40 2332 61 2332 44 2052 61 648 46 2333 40 2332 41 41 385 2332 398 40 91 648 93 44 91 648 93 44 91 648 93 44 91 648 93 44 91 648 44 648 93 44 91 648 44 648 93 44 91 648 44 648 93 44 91 648 44 648 93 44 41 93 44 2292 46 2334 40 2335 61 2292 46 2336 40 2337 61 1500 41 44 2052 61 648 41 44 2292 46 2331 40 2332 61 91 648 93 44 2338 61 2292 46 2336 40 2337 61 1502 41 44 2052 61 648 44 41 44 2292 46 2331 40 2332 61 91 648 93 44 2338 61 2292 46 2336 40 41 44 2052 61 648 44 41 44 93 334 2033 40 2032 46 2033 41 58 348 2309 40 2015 44 2019 41 58 450 2293 46 2009 46 2310 40 41 2019 61 2015 46 2016 40 648 44 2015 46 2007 41 2093 61 2032 46 2311 40 2052 61 648 41 2252 61 2033 40 2293 44 2093 41 2312 61 2252 46 2027 40 2019 41 2156 61 40 621 40 91 648 93 44 91 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 93 44 91 648 93 41 44 40 91 648 93 44 91 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 44 648 93 41 44 621 40 91 648 44 648 44 648 93 44 91 648 44 648 44 648 93 44 41 44 621 40 91 648 44 648 93 44 91 648 44 648 44 648 93 41 44 40 91 648 44 648 93 44 91 648 44 648 44 648 93 41 44 621 40 91 648 44 648 93 44 91 648 44 648 93 41 44 40 91 648 44 648 93 44 91 648 44 648 93 41 44 621 40 91 648 93 44 91 648 44 648 93 41 44 621 40 91 648 93 44 91 648 93 41 44 41 385 2035 44 2315 398 2156 58 497 2015 46 2157 40 2035 61 2035 41 58 2015 46 2028 40 2312 46 2316 40 2035 41 44 2315 41 348 2339 40 2015 41 58 648 2049 61 2050 46 2009 46 2051 40 2052 61 648 41 385 2110 398 2111 40 1502 41 58 2024 46 2009 46 2051 40 2052 61 648 37 2110 44 2049 61 2049 41 2219 61 2015 46 2014 40 648 41 2220 61 2015 46 2014 40 648 41 621 2022 61 2340 40 2024 44 2025 41 2019 61 2015 46 2016 40 648 44 2219 41 2213 61 2022 46 2222 40 2019 41 2015 46 2028 40 2213 46 2284 91 648 93 46 2341 44 91 648 44 648 93 41 621 2022 61 2340 40 2024 44 2025 41 2019 61 2015 46 2016 40 648 44 2220 41 2213 61 2022 46 2222 40 2019 41 2015 46 2028 40 2213 46 2284 91 648 93 46 2341 44 40 648 44 648 44 648 41 41 348 2342 40 2015 41 58 2343 61 2015 46 2014 40 648 41 2022 61 2344 40 2024 44 2025 41 2019 61 2015 46 2016 40 648 44 2343 41 2213 61 2022 46 2222 40 2019 41 2015 46 2028 40 2213 46 2284 91 648 93 46 2173 44 40 648 44 648 41 41 348 2345 40 2015 41 58 648 621 2022 61 2139 40 2134 44 2025 41 2019 61 2015 46 2002 46 2020 40 648 41 2019 46 2018 61 2015 46 2007 2026 61 2022 46 2027 40 2019 41 2026 46 2279 61 1502 2346 61 2026 46 2118 46 2346 385 2287 44 2347 44 2315 398 91 40 1501 44 1501 44 91 93 41 44 40 1501 44 1502 44 91 1501 44 1502 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 2346 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 2346 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 2346 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 2346 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 1503 44 1503 44 1503 93 41 44 40 1502 44 1503 44 91 1501 44 1502 44 2346 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 2346 44 1503 44 1503 93 41 44 93 58 497 2015 46 2157 40 2287 61 2287 44 2347 61 2347 41 58 621 2134 46 2009 46 2264 40 41 46 353 40 41 385 2110 398 2111 40 2347 42 2026 46 2279 41 58 2134 46 2009 46 2051 40 2052 61 648 41 621 2026 46 2348 61 2287 2026 46 2116 40 2019 41 2015 46 2028 40 411 40 2349 40 2026 41 91 648 93 41 44 2315 41 348 2350 40 2015 41 58 648 2007 61 2015 46 2014 40 648 41 2022 61 2351 40 2209 44 2025 41 2019 61 2015 46 2016 40 648 44 2007 41 2015 46 2352 40 2022 46 2353 40 2019 41 41 2213 61 2022 46 2222 40 2019 41 2015 46 2202 40 648 44 2213 46 2354 41 621 2015 46 2200 40 648 44 2213 46 2354 41 348 2355 40 2015 41 58 2007 61 2015 46 2014 40 648 41 2022 61 2127 40 2041 44 2025 41 621 2022 46 2173 61 91 648 93 2019 61 2015 46 2016 40 648 44 2007 41 2213 61 2022 46 2222 40 2019 41 2015 46 2356 40 2213 46 2284 91 648 93 46 2357 41 2015 46 2217 40 2213 44 648 41 621 2022 46 2357 61 648 2019 61 2015 46 2016 40 648 44 2007 41 2213 61 2022 46 2222 40 2019 41 2015 46 2028 40 2213 46 2284 91 648 93 46 2357 44 648 41 2015 46 2214 40 2213 44 648 41 334 2358 40 2001 41 58 348 2359 40 2015 41 58 648 2070 61 2080 40 123 648 58 2194 40 41 125 41 466 61 2079 40 648 41 621 2015 46 2028 40 466 46 2083 40 2070 41 44 648 41 348 2360 40 2015 41 58 648 2018 61 2008 40 2011 61 648 44 2013 61 648 44 2012 61 648 41 2018 46 2361 40 41 2362 61 2363 46 2009 46 2364 40 2008 41 2365 46 2009 46 2366 40 2018 46 2128 44 2362 46 2128 44 2018 46 2128 44 2029 40 2018 41 44 1501 41 2367 61 2079 40 648 648 648 648 648 41 2015 46 2028 40 2367 46 2083 40 2080 40 123 125 41 41 44 648 41 348 2368 40 2015 41 58 2369 61 648 497 2015 46 2370 40 2371 44 2369 41 58 2079 40 648 41 348 2372 40 2015 41 58 2369 61 648 497 2015 46 2370 40 2371 44 2369 41 58 2079 40 648 41 348 2373 40 2015 41 58 2369 61 648 497 2015 46 2370 40 2371 44 2369 41 58 2079 40 648 41 348 2374 40 2015 41 58 2369 61 648 497 2015 46 2370 40 2371 44 2369 41 58 2079 40 648 41 64 2375 40 2376 61 648 41 334 2377 40 2378 41 58 2379 61 91 648 93 43 2378 46 2379 348 2380 40 2015 41 58 2008 46 2009 46 2010 40 2011 61 648 44 2013 61 648 44 2012 61 303 41 348 2381 40 2015 41 58 648 388 2382 46 2383 46 2384 46 2385 397 2386 2015 46 2387 40 2011 61 648 44 2013 61 648 41 2015 46 2382 46 2020 40 2015 46 2388 43 2085 40 648 41 41 2389 61 648 621 2390 61 2015 46 2382 46 2391 40 2386 46 2392 44 648 37 2389 41 2015 46 2028 40 2162 40 2390 41 44 1501 41 2393 61 2390 91 1500 93 2394 61 2015 46 2382 46 2395 40 2386 46 2392 44 648 37 2389 41 2396 61 2015 46 2382 46 2395 40 2386 46 2397 44 648 41 2398 61 2015 46 2382 46 2395 40 2386 46 2392 44 648 37 2389 41 621 2015 46 2028 40 2394 46 2399 44 648 41 2015 46 2063 40 2396 46 2400 40 648 41 44 302 41 2015 46 2028 40 2393 46 2401 40 648 41 44 648 41 621 2398 46 2402 40 41 2015 46 2028 40 2394 46 2399 44 648 41 2015 46 2063 40 2396 46 2400 40 648 41 44 304 41 2015 46 2028 40 2393 46 2401 40 648 41 44 648 41 621 2398 46 2402 40 41 2015 46 2028 40 2394 46 2399 44 648 41 2015 46 2063 40 2396 46 2400 40 648 41 44 302 41 2015 46 2028 40 2393 46 2401 40 648 41 44 648 41 348 2403 40 2015 41 58 648 388 2382 46 2383 46 2384 46 2404 397 2405 388 2382 46 2383 46 2384 46 2385 397 2386 388 2382 46 2383 46 2384 46 2406 397 2407 2050 46 2009 46 2408 40 91 2050 40 2052 61 648 37 2110 41 385 2110 398 2111 40 1502 41 93 41 2015 46 2387 40 2011 61 648 44 2013 61 648 41 2015 46 2382 46 2020 40 2015 46 2388 43 2085 40 648 41 41 2409 61 2015 46 2382 46 2391 40 2386 46 2392 44 648 41 2015 46 2028 40 2162 40 2409 41 44 1502 41 385 2257 398 2409 58 2015 46 2063 40 2257 46 2400 40 648 41 44 302 41 621 2409 91 1500 93 46 2402 40 41 2405 40 2015 46 2382 41 46 2410 40 2407 46 2411 41 46 2402 40 2409 91 45 1502 93 41 46 2412 40 2407 46 2411 41 46 2413 40 41 385 2257 398 2409 91 58 45 1502 93 58 2015 46 2063 40 2257 46 2400 40 648 41 44 304 41 2015 46 2063 40 2409 91 45 1501 93 46 2400 40 648 41 44 302 41 348 2414 40 2015 41 58 388 2382 46 2383 46 2384 46 2385 397 2386 2050 46 2009 46 2408 40 91 2050 40 2052 61 648 37 2110 41 385 2110 398 2111 40 1504 41 93 41 2015 46 2387 40 2011 61 648 44 2013 61 648 41 2015 46 2382 46 2020 40 2015 46 2388 43 2085 40 648 41 41 2394 61 2015 46 2382 46 2395 40 2386 46 2392 44 648 41 2415 61 2015 46 2382 46 2395 40 2386 46 2392 44 648 41 2416 61 2015 46 2382 46 2395 40 2386 46 2392 44 648 41 2417 61 2015 46 2382 46 2395 40 2386 46 2392 44 648 41 2418 61 2015 46 2382 46 2395 40 2386 46 2397 44 648 41 2419 61 2015 46 2382 46 2391 40 2386 46 2420 44 648 41 2015 46 2063 40 2416 46 2421 40 41 44 302 41 2015 46 2063 40 2417 46 2421 40 41 44 302 41 2015 46 2063 40 2418 46 2400 40 648 41 44 302 41 385 2422 398 2419 58 2015 46 2028 40 2422 46 2400 40 648 41 44 648 41 2015 46 2063 40 2394 46 2421 40 41 44 304 41 2015 46 2028 40 2394 46 2399 44 648 41 2015 46 2063 40 2415 46 2421 40 41 44 302 41 2418 46 2402 40 41 2015 46 2063 40 2416 46 2421 40 41 44 304 41 2015 46 2063 40 2417 46 2421 40 41 44 302 41 2015 46 2063 40 2418 46 2400 40 648 41 44 304 41 385 2422 398 2419 58 2015 46 2028 40 2422 46 2400 40 648 41 44 648 41 2015 46 2063 40 2394 46 2421 40 41 44 304 41 2015 46 2028 40 2394 46 2399 44 648 41 2015 46 2063 40 2415 46 2421 40 41 44 302 41 2416 46 2402 40 41 2015 46 2063 40 2416 46 2421 40 41 44 302 41 2015 46 2063 40 2417 46 2421 40 41 44 304 41 2015 46 2063 40 2418 46 2400 40 648 41 44 304 41 385 2422 398 2419 58 2015 46 2028 40 2422 46 2400 40 648 41 44 648 41 2015 46 2063 40 2394 46 2421 40 41 44 302 41 2015 46 2063 40 2415 46 2421 40 41 44 304 41 2417 46 2402 40 41 2015 46 2063 40 2416 46 2421 40 41 44 302 41 2015 46 2063 40 2417 46 2421 40 41 44 302 41 2015 46 2063 40 2418 46 2400 40 648 41 44 302 41 385 2422 398 2419 58 2015 46 2028 40 2422 46 2400 40 648 41 44 648 41 2015 46 2063 40 2394 46 2421 40 41 44 304 41 2015 46 2028 40 2394 46 2399 44 648 41 2015 46 2063 40 2415 46 2421 40 41 44 302 41 348 2423 40 2015 41 58 388 2382 46 2383 46 2384 46 2385 397 2386 2050 46 2009 46 2051 40 2052 61 648 41 2015 46 2387 40 2011 61 648 44 2013 61 648 41 2015 46 2382 46 2020 40 2015 46 2388 43 2085 40 648 41 41 2424 61 2015 46 2382 46 2395 40 2386 46 2397 44 648 41 2424 46 2417 40 41 2424 46 2425 40 648 41 2015 46 2382 46 2395 40 2386 46 2397 44 648 41 46 2402 40 41 2015 46 2382 46 2395 40 2386 46 2420 44 648 41 46 2402 40 41 621 2426 61 2015 46 2382 46 2427 46 2426 474 58 2015 46 2028 40 2426 46 2399 44 648 648 41 382 58 2426 46 2428 40 41 348 2429 40 2015 41 58 388 2382 46 2383 46 2384 46 2385 397 2386 388 2382 46 2383 46 2430 46 2431 397 2432 2050 46 2009 46 2051 40 2052 61 648 41 2015 46 2387 40 2011 61 648 44 2013 61 648 41 2015 46 2382 46 2020 40 2015 46 2388 43 2085 40 648 41 41 2424 61 2015 46 2382 46 2395 40 2386 46 2397 44 648 41 2424 46 2417 40 41 2424 46 2425 40 648 41 2432 40 2015 46 2382 46 2395 40 2386 46 2420 44 648 41 41 46 2433 40 648 41 2015 46 2382 46 2395 40 2386 46 2420 44 648 41 46 2402 40 41 2426 61 2015 46 2382 46 2427 46 2426 474 58 2015 46 2028 40 2426 46 2399 44 648 648 648 44 41 382 58 2426 46 2428 40 41 348 2434 40 2015 41 58 388 2382 46 2383 46 2384 46 2385 397 2386 388 2382 46 2383 46 2430 46 2431 397 2432 2050 46 2009 46 2051 40 2052 61 648 41 2015 46 2387 40 2011 61 648 44 2013 61 648 41 2015 46 2382 46 2020 40 2015 46 2388 43 2085 40 648 41 41 2432 40 2015 46 2382 46 2395 40 2386 46 2420 44 648 41 41 46 2433 40 648 41 2015 46 2382 46 2395 40 2386 46 2420 44 648 41 46 2402 40 41 2426 61 2015 46 2382 46 2427 46 2426 474 58 2015 46 2028 40 2426 46 2399 44 648 648 648 44 41 382 58 2426 46 2428 40 41 
133529,Python,"class MigrationExecutor:
    """"""
    End-to-end migration execution - load migrations and run them up or down
    to a specified set of targets.
    """"""

    def __init__(self, connection, progress_callback=None):
        self.connection = connection
        self.loader = MigrationLoader(self.connection)
        self.recorder = MigrationRecorder(self.connection)
        self.progress_callback = progress_callback

    def migration_plan(self, targets, clean_start=False):
        """"""
        Given a set of targets, return a list of (Migration instance, backwards?).
        """"""
        plan = []
        if clean_start:
            applied = {}
        else:
            applied = dict(self.loader.applied_migrations)
        for target in targets:
            # If the target is (app_label, None), that means unmigrate everything
            if target[1] is None:
                for root in self.loader.graph.root_nodes():
                    if root[0] == target[0]:
                        for migration in self.loader.graph.backwards_plan(root):
                            if migration in applied:
                                plan.append((self.loader.graph.nodes[migration], True))
                                applied.pop(migration)
            # If the migration is already applied, do backwards mode,
            # otherwise do forwards mode.
            elif target in applied:
                # If the target is missing, it's likely a replaced migration.
                # Reload the graph without replacements.
                if (
                    self.loader.replace_migrations and
                    target not in self.loader.graph.node_map
                ):
                    self.loader.replace_migrations = False
                    self.loader.build_graph()
                    return self.migration_plan(targets, clean_start=clean_start)
                # Don't migrate backwards all the way to the target node (that
                # may roll back dependencies in other apps that don't need to
                # be rolled back); instead roll back through target's immediate
                # child(ren) in the same app, and no further.
                next_in_app = sorted(
                    n for n in
                    self.loader.graph.node_map[target].children
                    if n[0] == target[0]
                )
                for node in next_in_app:
                    for migration in self.loader.graph.backwards_plan(node):
                        if migration in applied:
                            plan.append((self.loader.graph.nodes[migration], True))
                            applied.pop(migration)
            else:
                for migration in self.loader.graph.forwards_plan(target):
                    if migration not in applied:
                        plan.append((self.loader.graph.nodes[migration], False))
                        applied[migration] = self.loader.graph.nodes[migration]
        return plan

    def _create_project_state(self, with_applied_migrations=False):
        """"""
        Create a project state including all the applications without
        migrations and applied migrations if with_applied_migrations=True.
        """"""
        state = ProjectState(real_apps=self.loader.unmigrated_apps)
        if with_applied_migrations:
            # Create the forwards plan Django would follow on an empty database
            full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)
            applied_migrations = {
                self.loader.graph.nodes[key] for key in self.loader.applied_migrations
                if key in self.loader.graph.nodes
            }
            for migration, _ in full_plan:
                if migration in applied_migrations:
                    migration.mutate_state(state, preserve=False)
        return state

    def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False):
        """"""
        Migrate the database up to the given targets.

        Django first needs to create all project states before a migration is
        (un)applied and in a second step run all the database operations.
        """"""
        # The django_migrations table must be present to record applied
        # migrations.
        self.recorder.ensure_schema()

        if plan is None:
            plan = self.migration_plan(targets)
        # Create the forwards plan Django would follow on an empty database
        full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)

        all_forwards = all(not backwards for mig, backwards in plan)
        all_backwards = all(backwards for mig, backwards in plan)

        if not plan:
            if state is None:
                # The resulting state should include applied migrations.
                state = self._create_project_state(with_applied_migrations=True)
        elif all_forwards == all_backwards:
            # This should only happen if there's a mixed plan
            raise InvalidMigrationPlan(
                ""Migration plans with both forwards and backwards migrations ""
                ""are not supported. Please split your migration process into ""
                ""separate plans of only forwards OR backwards migrations."",
                plan
            )
        elif all_forwards:
            if state is None:
                # The resulting state should still include applied migrations.
                state = self._create_project_state(with_applied_migrations=True)
            state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)
        else:
            # No need to check for `elif all_backwards` here, as that condition
            # would always evaluate to true.
            state = self._migrate_all_backwards(plan, full_plan, fake=fake)

        self.check_replacements()

        return state

    def _migrate_all_forwards(self, state, plan, full_plan, fake, fake_initial):
        """"""
        Take a list of 2-tuples of the form (migration instance, False) and
        apply them in the order they occur in the full_plan.
        """"""
        migrations_to_run = {m[0] for m in plan}
        for migration, _ in full_plan:
            if not migrations_to_run:
                # We remove every migration that we applied from these sets so
                # that we can bail out once the last migration has been applied
                # and don't always run until the very end of the migration
                # process.
                break
            if migration in migrations_to_run:
                if 'apps' not in state.__dict__:
                    if self.progress_callback:
                        self.progress_callback(""render_start"")
                    state.apps  # Render all -- performance critical
                    if self.progress_callback:
                        self.progress_callback(""render_success"")
                state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)
                migrations_to_run.remove(migration)

        return state

    def _migrate_all_backwards(self, plan, full_plan, fake):
        """"""
        Take a list of 2-tuples of the form (migration instance, True) and
        unapply them in reverse order they occur in the full_plan.

        Since unapplying a migration requires the project state prior to that
        migration, Django will compute the migration states before each of them
        in a first run over the plan and then unapply them in a second run over
        the plan.
        """"""
        migrations_to_run = {m[0] for m in plan}
        # Holds all migration states prior to the migrations being unapplied
        states = {}
        state = self._create_project_state()
        applied_migrations = {
            self.loader.graph.nodes[key] for key in self.loader.applied_migrations
            if key in self.loader.graph.nodes
        }
        if self.progress_callback:
            self.progress_callback(""render_start"")
        for migration, _ in full_plan:
            if not migrations_to_run:
                # We remove every migration that we applied from this set so
                # that we can bail out once the last migration has been applied
                # and don't always run until the very end of the migration
                # process.
                break
            if migration in migrations_to_run:
                if 'apps' not in state.__dict__:
                    state.apps  # Render all -- performance critical
                # The state before this migration
                states[migration] = state
                # The old state keeps as-is, we continue with the new state
                state = migration.mutate_state(state, preserve=True)
                migrations_to_run.remove(migration)
            elif migration in applied_migrations:
                # Only mutate the state if the migration is actually applied
                # to make sure the resulting state doesn't include changes
                # from unrelated migrations.
                migration.mutate_state(state, preserve=False)
        if self.progress_callback:
            self.progress_callback(""render_success"")

        for migration, _ in plan:
            self.unapply_migration(states[migration], migration, fake=fake)
            applied_migrations.remove(migration)

        # Generate the post migration state by starting from the state before
        # the last migration is unapplied and mutating it to include all the
        # remaining applied migrations.
        last_unapplied_migration = plan[-1][0]
        state = states[last_unapplied_migration]
        for index, (migration, _) in enumerate(full_plan):
            if migration == last_unapplied_migration:
                for migration, _ in full_plan[index:]:
                    if migration in applied_migrations:
                        migration.mutate_state(state, preserve=False)
                break

        return state

    def apply_migration(self, state, migration, fake=False, fake_initial=False):
        """"""Run a migration forwards.""""""
        migration_recorded = False
        if self.progress_callback:
            self.progress_callback(""apply_start"", migration, fake)
        if not fake:
            if fake_initial:
                # Test to see if this is an already-applied initial migration
                applied, state = self.detect_soft_applied(state, migration)
                if applied:
                    fake = True
            if not fake:
                # Alright, do it normally
                with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
                    state = migration.apply(state, schema_editor)
                    if not schema_editor.deferred_sql:
                        self.record_migration(migration)
                        migration_recorded = True
        if not migration_recorded:
            self.record_migration(migration)
        # Report progress
        if self.progress_callback:
            self.progress_callback(""apply_success"", migration, fake)
        return state

    def record_migration(self, migration):
        # For replacement migrations, record individual statuses
        if migration.replaces:
            for app_label, name in migration.replaces:
                self.recorder.record_applied(app_label, name)
        else:
            self.recorder.record_applied(migration.app_label, migration.name)

    def unapply_migration(self, state, migration, fake=False):
        """"""Run a migration backwards.""""""
        if self.progress_callback:
            self.progress_callback(""unapply_start"", migration, fake)
        if not fake:
            with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
                state = migration.unapply(state, schema_editor)
        # For replacement migrations, also record individual statuses.
        if migration.replaces:
            for app_label, name in migration.replaces:
                self.recorder.record_unapplied(app_label, name)
        self.recorder.record_unapplied(migration.app_label, migration.name)
        # Report progress
        if self.progress_callback:
            self.progress_callback(""unapply_success"", migration, fake)
        return state

    def check_replacements(self):
        """"""
        Mark replacement migrations applied if their replaced set all are.

        Do this unconditionally on every migrate, rather than just when
        migrations are applied or unapplied, to correctly handle the case
        when a new squash migration is pushed to a deployment that already had
        all its replaced migrations applied. In this case no new migration will
        be applied, but the applied state of the squashed migration must be
        maintained.
        """"""
        applied = self.recorder.applied_migrations()
        for key, migration in self.loader.replacements.items():
            all_applied = all(m in applied for m in migration.replaces)
            if all_applied and key not in applied:
                self.recorder.record_applied(*key)

    def detect_soft_applied(self, project_state, migration):
        """"""
        Test whether a migration has been implicitly applied - that the
        tables or columns it would create exist. This is intended only for use
        on initial migrations (as it only looks for CreateModel and AddField).
        """"""
        def should_skip_detecting_model(migration, model):
            """"""
            No need to detect tables for proxy models, unmanaged models, or
            models that can't be migrated on the current database.
            """"""
            return (
                model._meta.proxy or not model._meta.managed or not
                router.allow_migrate(
                    self.connection.alias, migration.app_label,
                    model_name=model._meta.model_name,
                )
            )

        if migration.initial is None:
            # Bail if the migration isn't the first one in its app
            if any(app == migration.app_label for app, name in migration.dependencies):
                return False, project_state
        elif migration.initial is False:
            # Bail if it's NOT an initial migration
            return False, project_state

        if project_state is None:
            after_state = self.loader.project_state((migration.app_label, migration.name), at_end=True)
        else:
            after_state = migration.mutate_state(project_state)
        apps = after_state.apps
        found_create_model_migration = False
        found_add_field_migration = False
        fold_identifier_case = self.connection.features.ignores_table_name_case
        with self.connection.cursor() as cursor:
            existing_table_names = set(self.connection.introspection.table_names(cursor))
            if fold_identifier_case:
                existing_table_names = {name.casefold() for name in existing_table_names}
        # Make sure all create model and add field operations are done
        for operation in migration.operations:
            if isinstance(operation, migrations.CreateModel):
                model = apps.get_model(migration.app_label, operation.name)
                if model._meta.swapped:
                    # We have to fetch the model to test with from the
                    # main app cache, as it's not a direct dependency.
                    model = global_apps.get_model(model._meta.swapped)
                if should_skip_detecting_model(migration, model):
                    continue
                db_table = model._meta.db_table
                if fold_identifier_case:
                    db_table = db_table.casefold()
                if db_table not in existing_table_names:
                    return False, project_state
                found_create_model_migration = True
            elif isinstance(operation, migrations.AddField):
                model = apps.get_model(migration.app_label, operation.model_name)
                if model._meta.swapped:
                    # We have to fetch the model to test with from the
                    # main app cache, as it's not a direct dependency.
                    model = global_apps.get_model(model._meta.swapped)
                if should_skip_detecting_model(migration, model):
                    continue

                table = model._meta.db_table
                field = model._meta.get_field(operation.name)

                # Handle implicit many-to-many tables created by AddField.
                if field.many_to_many:
                    through_db_table = field.remote_field.through._meta.db_table
                    if fold_identifier_case:
                        through_db_table = through_db_table.casefold()
                    if through_db_table not in existing_table_names:
                        return False, project_state
                    else:
                        found_add_field_migration = True
                        continue
                with self.connection.cursor() as cursor:
                    columns = self.connection.introspection.get_table_description(cursor, table)
                for column in columns:
                    field_column = field.column
                    column_name = column.name
                    if fold_identifier_case:
                        column_name = column_name.casefold()
                        field_column = field_column.casefold()
                    if column_name == field_column:
                        found_add_field_migration = True
                        break
                else:
                    return False, project_state
        # If we get this far and we found at least one CreateModel or AddField migration,
        # the migration is considered implicitly applied.
        return (found_create_model_migration or found_add_field_migration), after_state",1,334 2000 58 648 348 2001 40 2002 44 2003 44 2004 61 303 41 58 2002 46 2003 61 2003 2002 46 2005 61 2006 40 2002 46 2003 41 2002 46 2007 61 2008 40 2002 46 2003 41 2002 46 2004 61 2004 348 2009 40 2002 44 2010 44 2011 61 302 41 58 648 2012 61 91 93 392 2011 58 2013 61 123 125 360 58 2013 61 2014 40 2002 46 2005 46 2015 41 385 2016 398 2010 58 621 392 2016 91 1501 93 407 303 58 385 2017 398 2002 46 2005 46 2018 46 2019 40 41 58 392 2017 91 1500 93 614 2016 91 1500 93 58 385 2020 398 2002 46 2005 46 2018 46 2021 40 2017 41 58 392 2020 398 2013 58 2012 46 2022 40 40 2002 46 2005 46 2018 46 2023 91 2020 93 44 304 41 41 2013 46 2024 40 2020 41 621 621 359 2016 398 2013 58 621 621 392 40 2002 46 2005 46 2025 308 2016 422 398 2002 46 2005 46 2018 46 2026 41 58 2002 46 2005 46 2025 61 302 2002 46 2005 46 2027 40 41 450 2002 46 2009 40 2010 44 2011 61 2011 41 621 621 621 621 2028 61 2029 40 2030 385 2030 398 2002 46 2005 46 2018 46 2026 91 2016 93 46 2031 392 2030 91 1500 93 614 2016 91 1500 93 41 385 2032 398 2028 58 385 2020 398 2002 46 2005 46 2018 46 2021 40 2032 41 58 392 2020 398 2013 58 2012 46 2022 40 40 2002 46 2005 46 2018 46 2023 91 2020 93 44 304 41 41 2013 46 2024 40 2020 41 360 58 385 2020 398 2002 46 2005 46 2018 46 2033 40 2016 41 58 392 2020 422 398 2013 58 2012 46 2022 40 40 2002 46 2005 46 2018 46 2023 91 2020 93 44 302 41 41 2013 91 2020 93 61 2002 46 2005 46 2018 46 2023 91 2020 93 450 2012 348 2034 40 2002 44 2035 61 302 41 58 648 2036 61 2037 40 2038 61 2002 46 2005 46 2039 41 392 2035 58 621 2040 61 2002 46 2009 40 2002 46 2005 46 2018 46 2041 40 41 44 2011 61 304 41 2015 61 123 2002 46 2005 46 2018 46 2023 91 2042 93 385 2042 398 2002 46 2005 46 2015 392 2042 398 2002 46 2005 46 2018 46 2023 125 385 2020 44 2043 398 2040 58 392 2020 398 2015 58 2020 46 2044 40 2036 44 2045 61 302 41 450 2036 348 2046 40 2002 44 2010 44 2012 61 303 44 2036 61 303 44 2047 61 302 44 2048 61 302 41 58 648 621 621 2002 46 2007 46 2049 40 41 392 2012 407 303 58 2012 61 2002 46 2009 40 2010 41 621 2040 61 2002 46 2009 40 2002 46 2005 46 2018 46 2041 40 41 44 2011 61 304 41 2050 61 2051 40 422 2052 385 2053 44 2052 398 2012 41 2054 61 2051 40 2052 385 2053 44 2052 398 2012 41 392 422 2012 58 392 2036 407 303 58 621 2036 61 2002 46 2034 40 2035 61 304 41 359 2050 614 2054 58 621 440 2055 40 648 648 648 44 2012 41 359 2050 58 392 2036 407 303 58 621 2036 61 2002 46 2034 40 2035 61 304 41 2036 61 2002 46 2056 40 2036 44 2012 44 2040 44 2047 61 2047 44 2048 61 2048 41 360 58 621 621 2036 61 2002 46 2057 40 2012 44 2040 44 2047 61 2047 41 2002 46 2058 40 41 450 2036 348 2056 40 2002 44 2036 44 2012 44 2040 44 2047 44 2048 41 58 648 2059 61 123 2060 91 1500 93 385 2060 398 2012 125 385 2020 44 2043 398 2040 58 392 422 2059 58 621 621 621 621 325 392 2020 398 2059 58 392 648 422 398 2036 46 2061 58 392 2002 46 2004 58 2002 46 2004 40 648 41 2036 46 2062 621 392 2002 46 2004 58 2002 46 2004 40 648 41 2036 61 2002 46 2063 40 2036 44 2020 44 2047 61 2047 44 2048 61 2048 41 2059 46 2064 40 2020 41 450 2036 348 2057 40 2002 44 2012 44 2040 44 2047 41 58 648 2059 61 123 2060 91 1500 93 385 2060 398 2012 125 621 2065 61 123 125 2036 61 2002 46 2034 40 41 2015 61 123 2002 46 2005 46 2018 46 2023 91 2042 93 385 2042 398 2002 46 2005 46 2015 392 2042 398 2002 46 2005 46 2018 46 2023 125 392 2002 46 2004 58 2002 46 2004 40 648 41 385 2020 44 2043 398 2040 58 392 422 2059 58 621 621 621 621 325 392 2020 398 2059 58 392 648 422 398 2036 46 2061 58 2036 46 2062 621 621 2065 91 2020 93 61 2036 621 2036 61 2020 46 2044 40 2036 44 2045 61 304 41 2059 46 2064 40 2020 41 359 2020 398 2015 58 621 621 621 2020 46 2044 40 2036 44 2045 61 302 41 392 2002 46 2004 58 2002 46 2004 40 648 41 385 2020 44 2043 398 2012 58 2002 46 2066 40 2065 91 2020 93 44 2020 44 2047 61 2047 41 2015 46 2064 40 2020 41 621 621 621 2067 61 2012 91 45 1501 93 91 1500 93 2036 61 2065 91 2067 93 385 2068 44 40 2020 44 2043 41 398 2069 40 2040 41 58 392 2020 614 2067 58 385 2020 44 2043 398 2040 91 2068 58 93 58 392 2020 398 2015 58 2020 46 2044 40 2036 44 2045 61 302 41 325 450 2036 348 2063 40 2002 44 2036 44 2020 44 2047 61 302 44 2048 61 302 41 58 648 2070 61 302 392 2002 46 2004 58 2002 46 2004 40 648 44 2020 44 2047 41 392 422 2047 58 392 2048 58 621 2013 44 2036 61 2002 46 2071 40 2036 44 2020 41 392 2013 58 2047 61 304 392 422 2047 58 621 497 2002 46 2003 46 2072 40 2073 61 2020 46 2073 41 311 2072 58 2036 61 2020 46 2074 40 2036 44 2072 41 392 422 2072 46 2075 58 2002 46 2076 40 2020 41 2070 61 304 392 422 2070 58 2002 46 2076 40 2020 41 621 392 2002 46 2004 58 2002 46 2004 40 648 44 2020 44 2047 41 450 2036 348 2076 40 2002 44 2020 41 58 621 392 2020 46 2077 58 385 2078 44 2079 398 2020 46 2077 58 2002 46 2007 46 2080 40 2078 44 2079 41 360 58 2002 46 2007 46 2080 40 2020 46 2078 44 2020 46 2079 41 348 2066 40 2002 44 2036 44 2020 44 2047 61 302 41 58 648 392 2002 46 2004 58 2002 46 2004 40 648 44 2020 44 2047 41 392 422 2047 58 497 2002 46 2003 46 2072 40 2073 61 2020 46 2073 41 311 2072 58 2036 61 2020 46 2081 40 2036 44 2072 41 621 392 2020 46 2077 58 385 2078 44 2079 398 2020 46 2077 58 2002 46 2007 46 2082 40 2078 44 2079 41 2002 46 2007 46 2082 40 2020 46 2078 44 2020 46 2079 41 621 392 2002 46 2004 58 2002 46 2004 40 648 44 2020 44 2047 41 450 2036 348 2058 40 2002 41 58 648 2013 61 2002 46 2007 46 2015 40 41 385 2042 44 2020 398 2002 46 2005 46 2083 46 2084 40 41 58 2085 61 2051 40 2060 398 2013 385 2060 398 2020 46 2077 41 392 2085 308 2042 422 398 2013 58 2002 46 2007 46 2080 40 42 2042 41 348 2071 40 2002 44 2086 44 2020 41 58 648 348 2087 40 2020 44 2088 41 58 648 450 40 2088 46 2089 46 2090 428 422 2088 46 2089 46 2091 428 422 2092 46 2093 40 2002 46 2003 46 2094 44 2020 46 2078 44 2095 61 2088 46 2089 46 2095 44 41 41 392 2020 46 2096 407 303 58 621 392 2097 40 2098 614 2020 46 2078 385 2098 44 2079 398 2020 46 2099 41 58 450 302 44 2086 359 2020 46 2096 407 302 58 621 450 302 44 2086 392 2086 407 303 58 2100 61 2002 46 2005 46 2086 40 40 2020 46 2078 44 2020 46 2079 41 44 2101 61 304 41 360 58 2100 61 2020 46 2044 40 2086 41 2062 61 2100 46 2062 2102 61 302 2103 61 302 2104 61 2002 46 2003 46 2105 46 2106 497 2002 46 2003 46 2107 40 41 311 2107 58 2108 61 2109 40 2002 46 2003 46 2110 46 2111 40 2107 41 41 392 2104 58 2108 61 123 2079 46 2112 40 41 385 2079 398 2108 125 621 385 2113 398 2020 46 2114 58 392 2115 40 2113 44 2116 46 2117 41 58 2088 61 2062 46 2118 40 2020 46 2078 44 2113 46 2079 41 392 2088 46 2089 46 2119 58 621 621 2088 61 2120 46 2118 40 2088 46 2089 46 2119 41 392 2087 40 2020 44 2088 41 58 344 2121 61 2088 46 2089 46 2121 392 2104 58 2121 61 2121 46 2112 40 41 392 2121 422 398 2108 58 450 302 44 2086 2102 61 304 359 2115 40 2113 44 2116 46 2122 41 58 2088 61 2062 46 2118 40 2020 46 2078 44 2113 46 2095 41 392 2088 46 2089 46 2119 58 621 621 2088 61 2120 46 2118 40 2088 46 2089 46 2119 41 392 2087 40 2020 44 2088 41 58 344 2123 61 2088 46 2089 46 2121 2124 61 2088 46 2089 46 2125 40 2113 46 2079 41 621 392 2124 46 2126 58 2127 61 2124 46 2128 46 2129 46 2089 46 2121 392 2104 58 2127 61 2127 46 2112 40 41 392 2127 422 398 2108 58 450 302 44 2086 360 58 2103 61 304 344 497 2002 46 2003 46 2107 40 41 311 2107 58 2130 61 2002 46 2003 46 2110 46 2131 40 2107 44 2123 41 385 2132 398 2130 58 2133 61 2124 46 2132 2134 61 2132 46 2079 392 2104 58 2134 61 2134 46 2112 40 41 2133 61 2133 46 2112 40 41 392 2134 614 2133 58 2103 61 304 325 360 58 450 302 44 2086 621 621 450 40 2102 428 2103 41 44 2100 
134872,Python,"class TestQuerying(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.primitives = [True, False, 'yes', 7, 9.6]
        values = [
            None,
            [],
            {},
            {'a': 'b', 'c': 14},
            {
                'a': 'b',
                'c': 14,
                'd': ['e', {'f': 'g'}],
                'h': True,
                'i': False,
                'j': None,
                'k': {'l': 'm'},
                'n': [None, True, False],
                'o': '""quoted""',
                'p': 4.2,
                'r': {'s': True, 't': False},
            },
            [1, [2]],
            {'k': True, 'l': False, 'foo': 'bax'},
            {
                'foo': 'bar',
                'baz': {'a': 'b', 'c': 'd'},
                'bar': ['foo', 'bar'],
                'bax': {'foo': 'bar'},
            },
        ]
        cls.objs = [
            NullableJSONModel.objects.create(value=value)
            for value in values
        ]
        if connection.features.supports_primitives_in_json_field:
            cls.objs.extend([
                NullableJSONModel.objects.create(value=value)
                for value in cls.primitives
            ])
        cls.raw_sql = '%s::jsonb' if connection.vendor == 'postgresql' else '%s'

    def test_exact(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__exact={}),
            [self.objs[2]],
        )

    def test_exact_complex(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__exact={'a': 'b', 'c': 14}),
            [self.objs[3]],
        )

    def test_icontains(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__icontains='BaX'),
            self.objs[6:8],
        )

    def test_isnull(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__isnull=True),
            [self.objs[0]],
        )

    def test_ordering_by_transform(self):
        mariadb = connection.vendor == 'mysql' and connection.mysql_is_mariadb
        values = [
            {'ord': 93, 'name': 'bar'},
            {'ord': 22.1, 'name': 'foo'},
            {'ord': -1, 'name': 'baz'},
            {'ord': 21.931902, 'name': 'spam'},
            {'ord': -100291029, 'name': 'eggs'},
        ]
        for field_name in ['value', 'value_custom']:
            with self.subTest(field=field_name):
                objs = [
                    NullableJSONModel.objects.create(**{field_name: value})
                    for value in values
                ]
                query = NullableJSONModel.objects.filter(
                    **{'%s__name__isnull' % field_name: False},
                ).order_by('%s__ord' % field_name)
                expected = [objs[4], objs[2], objs[3], objs[1], objs[0]]
                if mariadb or connection.vendor == 'oracle':
                    # MariaDB and Oracle return JSON values as strings.
                    expected = [objs[2], objs[4], objs[3], objs[1], objs[0]]
                self.assertSequenceEqual(query, expected)

    def test_ordering_grouping_by_key_transform(self):
        base_qs = NullableJSONModel.objects.filter(value__d__0__isnull=False)
        for qs in (
            base_qs.order_by('value__d__0'),
            base_qs.annotate(key=KeyTransform('0', KeyTransform('d', 'value'))).order_by('key'),
        ):
            self.assertSequenceEqual(qs, [self.objs[4]])
        qs = NullableJSONModel.objects.filter(value__isnull=False)
        self.assertQuerysetEqual(
            qs.filter(value__isnull=False).annotate(
                key=KeyTextTransform('f', KeyTransform('1', KeyTransform('d', 'value'))),
            ).values('key').annotate(count=Count('key')).order_by('count'),
            [(None, 0), ('g', 1)],
            operator.itemgetter('key', 'count'),
        )

    def test_ordering_grouping_by_count(self):
        qs = NullableJSONModel.objects.filter(
            value__isnull=False,
        ).values('value__d__0').annotate(count=Count('value__d__0')).order_by('count')
        self.assertQuerysetEqual(qs, [0, 1], operator.itemgetter('count'))

    def test_order_grouping_custom_decoder(self):
        NullableJSONModel.objects.create(value_custom={'a': 'b'})
        qs = NullableJSONModel.objects.filter(value_custom__isnull=False)
        self.assertSequenceEqual(
            qs.values(
                'value_custom__a',
            ).annotate(
                count=Count('id'),
            ).order_by('value_custom__a'),
            [{'value_custom__a': 'b', 'count': 1}],
        )

    def test_key_transform_raw_expression(self):
        expr = RawSQL(self.raw_sql, ['{""x"": ""bar""}'])
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__foo=KeyTransform('x', expr)),
            [self.objs[7]],
        )

    def test_nested_key_transform_raw_expression(self):
        expr = RawSQL(self.raw_sql, ['{""x"": {""y"": ""bar""}}'])
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__foo=KeyTransform('y', KeyTransform('x', expr))),
            [self.objs[7]],
        )

    def test_key_transform_expression(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=KeyTransform('d', 'value'),
                chain=KeyTransform('0', 'key'),
                expr=KeyTransform('0', Cast('key', models.JSONField())),
            ).filter(chain=F('expr')),
            [self.objs[4]],
        )

    def test_key_transform_annotation_expression(self):
        obj = NullableJSONModel.objects.create(value={'d': ['e', 'e']})
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=F('value__d'),
                chain=F('key__0'),
                expr=Cast('key', models.JSONField()),
            ).filter(chain=F('expr__1')),
            [obj],
        )

    def test_nested_key_transform_expression(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=KeyTransform('d', 'value'),
                chain=KeyTransform('f', KeyTransform('1', 'key')),
                expr=KeyTransform('f', KeyTransform('1', Cast('key', models.JSONField()))),
            ).filter(chain=F('expr')),
            [self.objs[4]],
        )

    def test_nested_key_transform_annotation_expression(self):
        obj = NullableJSONModel.objects.create(
            value={'d': ['e', {'f': 'g'}, {'f': 'g'}]},
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=F('value__d'),
                chain=F('key__1__f'),
                expr=Cast('key', models.JSONField()),
            ).filter(chain=F('expr__2__f')),
            [obj],
        )

    def test_nested_key_transform_on_subquery(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                subquery_value=Subquery(
                    NullableJSONModel.objects.filter(pk=OuterRef('pk')).values('value')
                ),
                key=KeyTransform('d', 'subquery_value'),
                chain=KeyTransform('f', KeyTransform('1', 'key')),
            ).filter(chain='g'),
            [self.objs[4]],
        )

    def test_expression_wrapper_key_transform(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.annotate(
                expr=ExpressionWrapper(
                    KeyTransform('c', 'value'),
                    output_field=IntegerField(),
                ),
            ).filter(expr__isnull=False),
            self.objs[3:5],
        )

    def test_has_key(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_key='a'),
            [self.objs[3], self.objs[4]],
        )

    def test_has_key_null_value(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_key='j'),
            [self.objs[4]],
        )

    def test_has_key_deep(self):
        tests = [
            (Q(value__baz__has_key='a'), self.objs[7]),
            (Q(value__has_key=KeyTransform('a', KeyTransform('baz', 'value'))), self.objs[7]),
            (Q(value__has_key=F('value__baz__a')), self.objs[7]),
            (Q(value__has_key=KeyTransform('c', KeyTransform('baz', 'value'))), self.objs[7]),
            (Q(value__has_key=F('value__baz__c')), self.objs[7]),
            (Q(value__d__1__has_key='f'), self.objs[4]),
            (
                Q(value__has_key=KeyTransform('f', KeyTransform('1', KeyTransform('d', 'value')))),
                self.objs[4],
            ),
            (Q(value__has_key=F('value__d__1__f')), self.objs[4]),
        ]
        for condition, expected in tests:
            with self.subTest(condition=condition):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(condition),
                    [expected],
                )

    def test_has_key_list(self):
        obj = NullableJSONModel.objects.create(value=[{'a': 1}, {'b': 'x'}])
        tests = [
            Q(value__1__has_key='b'),
            Q(value__has_key=KeyTransform('b', KeyTransform(1, 'value'))),
            Q(value__has_key=KeyTransform('b', KeyTransform('1', 'value'))),
            Q(value__has_key=F('value__1__b')),
        ]
        for condition in tests:
            with self.subTest(condition=condition):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(condition),
                    [obj],
                )

    def test_has_keys(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_keys=['a', 'c', 'h']),
            [self.objs[4]],
        )

    def test_has_any_keys(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_any_keys=['c', 'l']),
            [self.objs[3], self.objs[4], self.objs[6]],
        )

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_contains(self):
        tests = [
            ({}, self.objs[2:5] + self.objs[6:8]),
            ({'baz': {'a': 'b', 'c': 'd'}}, [self.objs[7]]),
            ({'baz': {'a': 'b'}}, [self.objs[7]]),
            ({'baz': {'c': 'd'}}, [self.objs[7]]),
            ({'k': True, 'l': False}, [self.objs[6]]),
            ({'d': ['e', {'f': 'g'}]}, [self.objs[4]]),
            ({'d': ['e']}, [self.objs[4]]),
            ({'d': [{'f': 'g'}]}, [self.objs[4]]),
            ([1, [2]], [self.objs[5]]),
            ([1], [self.objs[5]]),
            ([[2]], [self.objs[5]]),
            ({'n': [None, True, False]}, [self.objs[4]]),
            ({'j': None}, [self.objs[4]]),
        ]
        for value, expected in tests:
            with self.subTest(value=value):
                qs = NullableJSONModel.objects.filter(value__contains=value)
                self.assertSequenceEqual(qs, expected)

    @skipIfDBFeature('supports_json_field_contains')
    def test_contains_unsupported(self):
        msg = 'contains lookup is not supported on this database backend.'
        with self.assertRaisesMessage(NotSupportedError, msg):
            NullableJSONModel.objects.filter(
                value__contains={'baz': {'a': 'b', 'c': 'd'}},
            ).get()

    @skipUnlessDBFeature(
        'supports_primitives_in_json_field',
        'supports_json_field_contains',
    )
    def test_contains_primitives(self):
        for value in self.primitives:
            with self.subTest(value=value):
                qs = NullableJSONModel.objects.filter(value__contains=value)
                self.assertIs(qs.exists(), True)

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_contained_by(self):
        qs = NullableJSONModel.objects.filter(value__contained_by={'a': 'b', 'c': 14, 'h': True})
        self.assertSequenceEqual(qs, self.objs[2:4])

    @skipIfDBFeature('supports_json_field_contains')
    def test_contained_by_unsupported(self):
        msg = 'contained_by lookup is not supported on this database backend.'
        with self.assertRaisesMessage(NotSupportedError, msg):
            NullableJSONModel.objects.filter(value__contained_by={'a': 'b'}).get()

    def test_deep_values(self):
        qs = NullableJSONModel.objects.values_list('value__k__l')
        expected_objs = [(None,)] * len(self.objs)
        expected_objs[4] = ('m',)
        self.assertSequenceEqual(qs, expected_objs)

    @skipUnlessDBFeature('can_distinct_on_fields')
    def test_deep_distinct(self):
        query = NullableJSONModel.objects.distinct('value__k__l').values_list('value__k__l')
        self.assertSequenceEqual(query, [('m',), (None,)])

    def test_isnull_key(self):
        # key__isnull=False works the same as has_key='key'.
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a__isnull=True),
            self.objs[:3] + self.objs[5:],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__j__isnull=True),
            self.objs[:4] + self.objs[5:],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a__isnull=False),
            [self.objs[3], self.objs[4]],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__j__isnull=False),
            [self.objs[4]],
        )

    def test_isnull_key_or_none(self):
        obj = NullableJSONModel.objects.create(value={'a': None})
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),
            self.objs[:3] + self.objs[5:] + [obj],
        )

    def test_none_key(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__j=None),
            [self.objs[4]],
        )

    def test_none_key_exclude(self):
        obj = NullableJSONModel.objects.create(value={'j': 1})
        if connection.vendor == 'oracle':
            # Oracle supports filtering JSON objects with NULL keys, but the
            # current implementation doesn't support it.
            self.assertSequenceEqual(
                NullableJSONModel.objects.exclude(value__j=None),
                self.objs[1:4] + self.objs[5:] + [obj],
            )
        else:
            self.assertSequenceEqual(NullableJSONModel.objects.exclude(value__j=None), [obj])

    def test_shallow_list_lookup(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__0=1),
            [self.objs[5]],
        )

    def test_shallow_obj_lookup(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a='b'),
            [self.objs[3], self.objs[4]],
        )

    def test_obj_subquery_lookup(self):
        qs = NullableJSONModel.objects.annotate(
            field=Subquery(NullableJSONModel.objects.filter(pk=OuterRef('pk')).values('value')),
        ).filter(field__a='b')
        self.assertSequenceEqual(qs, [self.objs[3], self.objs[4]])

    def test_deep_lookup_objs(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__k__l='m'),
            [self.objs[4]],
        )

    def test_shallow_lookup_obj_target(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__k={'l': 'm'}),
            [self.objs[4]],
        )

    def test_deep_lookup_array(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__1__0=2),
            [self.objs[5]],
        )

    def test_deep_lookup_mixed(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__1__f='g'),
            [self.objs[4]],
        )

    def test_deep_lookup_transform(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__c__gt=2),
            [self.objs[3], self.objs[4]],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__c__gt=2.33),
            [self.objs[3], self.objs[4]],
        )
        self.assertIs(NullableJSONModel.objects.filter(value__c__lt=5).exists(), False)

    def test_lookup_exclude(self):
        tests = [
            (Q(value__a='b'), [self.objs[0]]),
            (Q(value__foo='bax'), [self.objs[0], self.objs[7]]),
        ]
        for condition, expected in tests:
            self.assertSequenceEqual(
                NullableJSONModel.objects.exclude(condition),
                expected,
            )
            self.assertSequenceEqual(
                NullableJSONModel.objects.filter(~condition),
                expected,
            )

    def test_lookup_exclude_nonexistent_key(self):
        # Values without the key are ignored.
        condition = Q(value__foo='bax')
        objs_with_value = [self.objs[6]]
        objs_with_different_value = [self.objs[0], self.objs[7]]
        self.assertSequenceEqual(
            NullableJSONModel.objects.exclude(condition),
            objs_with_different_value,
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.exclude(~condition),
            objs_with_value,
        )
        self.assertCountEqual(
            NullableJSONModel.objects.filter(condition | ~condition),
            objs_with_value + objs_with_different_value,
        )
        self.assertCountEqual(
            NullableJSONModel.objects.exclude(condition & ~condition),
            objs_with_value + objs_with_different_value,
        )
        # Add the __isnull lookup to get an exhaustive set.
        self.assertSequenceEqual(
            NullableJSONModel.objects.exclude(condition & Q(value__foo__isnull=False)),
            self.objs[0:6] + self.objs[7:],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(condition & Q(value__foo__isnull=False)),
            objs_with_value,
        )

    def test_usage_in_subquery(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(
                id__in=NullableJSONModel.objects.filter(value__c=14),
            ),
            self.objs[3:5],
        )

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_array_key_contains(self):
        tests = [
            ([], [self.objs[7]]),
            ('bar', [self.objs[7]]),
            (['bar'], [self.objs[7]]),
            ('ar', []),
        ]
        for value, expected in tests:
            with self.subTest(value=value):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(value__bar__contains=value),
                    expected,
                )

    def test_key_iexact(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='""BaR""').exists(), False)

    def test_key_in(self):
        tests = [
            ('value__c__in', [14], self.objs[3:5]),
            ('value__c__in', [14, 15], self.objs[3:5]),
            ('value__0__in', [1], [self.objs[5]]),
            ('value__0__in', [1, 3], [self.objs[5]]),
            ('value__foo__in', ['bar'], [self.objs[7]]),
            (
                'value__foo__in',
                [KeyTransform('foo', KeyTransform('bax', 'value'))],
                [self.objs[7]],
            ),
            ('value__foo__in', [F('value__bax__foo')], [self.objs[7]]),
            (
                'value__foo__in',
                [KeyTransform('foo', KeyTransform('bax', 'value')), 'baz'],
                [self.objs[7]],
            ),
            ('value__foo__in', [F('value__bax__foo'), 'baz'], [self.objs[7]]),
            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),
            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),
            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),
            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),
            ('value__h__in', [True, 'foo'], [self.objs[4]]),
            ('value__i__in', [False, 'foo'], [self.objs[4]]),
        ]
        for lookup, value, expected in tests:
            with self.subTest(lookup=lookup, value=value):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(**{lookup: value}),
                    expected,
                )

    def test_key_values(self):
        qs = NullableJSONModel.objects.filter(value__h=True)
        tests = [
            ('value__a', 'b'),
            ('value__c', 14),
            ('value__d', ['e', {'f': 'g'}]),
            ('value__h', True),
            ('value__i', False),
            ('value__j', None),
            ('value__k', {'l': 'm'}),
            ('value__n', [None, True, False]),
            ('value__p', 4.2),
            ('value__r', {'s': True, 't': False}),
        ]
        for lookup, expected in tests:
            with self.subTest(lookup=lookup):
                self.assertEqual(qs.values_list(lookup, flat=True).get(), expected)

    def test_key_values_boolean(self):
        qs = NullableJSONModel.objects.filter(value__h=True, value__i=False)
        tests = [
            ('value__h', True),
            ('value__i', False),
        ]
        for lookup, expected in tests:
            with self.subTest(lookup=lookup):
                self.assertIs(qs.values_list(lookup, flat=True).get(), expected)

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_key_contains(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)
        self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)

    def test_key_icontains(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)

    def test_key_startswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)

    def test_key_istartswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__istartswith='B').exists(), True)

    def test_key_endswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__endswith='r').exists(), True)

    def test_key_iendswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iendswith='R').exists(), True)

    def test_key_regex(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__regex=r'^bar$').exists(), True)

    def test_key_iregex(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iregex=r'^bAr$').exists(), True)

    def test_key_quoted_string(self):
        self.assertEqual(
            NullableJSONModel.objects.filter(value__o='""quoted""').get(),
            self.objs[4],
        )

    @skipUnlessDBFeature('has_json_operators')
    def test_key_sql_injection(self):
        with CaptureQueriesContext(connection) as queries:
            self.assertIs(
                NullableJSONModel.objects.filter(**{
                    """"""value__test' = '""a""') OR 1 = 1 OR ('d"""""": 'x',
                }).exists(),
                False,
            )
        self.assertIn(
            """""".""value"" -> 'test'' = ''""a""'') OR 1 = 1 OR (''d') = '""x""' """""",
            queries[0]['sql'],
        )

    @skipIfDBFeature('has_json_operators')
    def test_key_sql_injection_escape(self):
        query = str(JSONModel.objects.filter(**{
            """"""value__test"") = '""a""' OR 1 = 1 OR (""d"""""": 'x',
        }).query)
        self.assertIn('""test\\""', query)
        self.assertIn('\\""d', query)

    def test_key_escape(self):
        obj = NullableJSONModel.objects.create(value={'%total': 10})
        self.assertEqual(NullableJSONModel.objects.filter(**{'value__%total': 10}).get(), obj)

    def test_none_key_and_exact_lookup(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a='b', value__j=None),
            [self.objs[4]],
        )

    def test_lookups_with_key_transform(self):
        tests = (
            ('value__baz__has_key', 'c'),
            ('value__baz__has_keys', ['a', 'c']),
            ('value__baz__has_any_keys', ['a', 'x']),
            ('value__has_key', KeyTextTransform('foo', 'value')),
        )
        for lookup, value in tests:
            with self.subTest(lookup=lookup):
                self.assertIs(NullableJSONModel.objects.filter(
                    **{lookup: value},
                ).exists(), True)

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_contains_contained_by_with_key_transform(self):
        tests = [
            ('value__d__contains', 'e'),
            ('value__d__contains', [{'f': 'g'}]),
            ('value__contains', KeyTransform('bax', 'value')),
            ('value__contains', F('value__bax')),
            ('value__baz__contains', {'a': 'b'}),
            ('value__baz__contained_by', {'a': 'b', 'c': 'd', 'e': 'f'}),
            (
                'value__contained_by',
                KeyTransform('x', RawSQL(
                    self.raw_sql,
                    ['{""x"": {""a"": ""b"", ""c"": 1, ""d"": ""e""}}'],
                )),
            ),
        ]
        # For databases where {'f': 'g'} (without surrounding []) matches
        # [{'f': 'g'}].
        if not connection.features.json_key_contains_list_matching_requires_list:
            tests.append(('value__d__contains', {'f': 'g'}))
        for lookup, value in tests:
            with self.subTest(lookup=lookup, value=value):
                self.assertIs(NullableJSONModel.objects.filter(
                    **{lookup: value},
                ).exists(), True)

    def test_join_key_transform_annotation_expression(self):
        related_obj = RelatedJSONModel.objects.create(
            value={'d': ['f', 'e']},
            json_model=self.objs[4],
        )
        RelatedJSONModel.objects.create(
            value={'d': ['e', 'f']},
            json_model=self.objs[4],
        )
        self.assertSequenceEqual(
            RelatedJSONModel.objects.annotate(
                key=F('value__d'),
                related_key=F('json_model__value__d'),
                chain=F('key__1'),
                expr=Cast('key', models.JSONField()),
            ).filter(chain=F('related_key__0')),
            [related_obj],
        )",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 91 304 44 302 44 648 44 1502 44 1502 93 2006 61 91 303 44 91 93 44 123 125 44 123 648 58 648 44 648 58 1503 125 44 123 648 58 648 44 648 58 1503 44 648 58 91 648 44 123 648 58 648 125 93 44 648 58 304 44 648 58 302 44 648 58 303 44 648 58 123 648 58 648 125 44 648 58 91 303 44 304 44 302 93 44 648 58 648 44 648 58 1502 44 648 58 123 648 58 304 44 648 58 302 125 44 125 44 91 1501 44 91 1502 93 93 44 123 648 58 304 44 648 58 302 44 648 58 648 125 44 123 648 58 648 44 648 58 123 648 58 648 44 648 58 648 125 44 648 58 91 648 44 648 93 44 648 58 123 648 58 648 125 44 125 44 93 2004 46 2007 61 91 2008 46 2009 46 2010 40 2011 61 2011 41 385 2011 398 2006 93 392 2012 46 2013 46 2014 58 2004 46 2007 46 2015 40 91 2008 46 2009 46 2010 40 2011 61 2011 41 385 2011 398 2004 46 2005 93 41 2004 46 2016 61 648 392 2012 46 2017 614 648 360 648 348 2018 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2022 61 123 125 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2023 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2022 61 123 648 58 648 44 648 58 1503 125 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2024 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2025 61 648 41 44 2019 46 2007 91 1502 58 1502 93 44 41 348 2026 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2027 61 304 41 44 91 2019 46 2007 91 1500 93 93 44 41 348 2028 40 2019 41 58 2029 61 2012 46 2017 614 648 308 2012 46 2030 2006 61 91 123 648 58 1503 44 648 58 648 125 44 123 648 58 1503 44 648 58 648 125 44 123 648 58 45 1501 44 648 58 648 125 44 123 648 58 1503 44 648 58 648 125 44 123 648 58 45 1510 44 648 58 648 125 44 93 385 2031 398 91 648 44 648 93 58 497 2019 46 2032 40 2033 61 2031 41 58 2007 61 91 2008 46 2009 46 2010 40 638 123 2031 58 2011 125 41 385 2011 398 2006 93 2034 61 2008 46 2009 46 2021 40 638 123 648 37 2031 58 302 125 44 41 46 2035 40 648 37 2031 41 2036 61 91 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1501 93 44 2007 91 1500 93 93 392 2029 428 2012 46 2017 614 648 58 621 2036 61 91 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1501 93 44 2007 91 1500 93 93 2019 46 2020 40 2034 44 2036 41 348 2037 40 2019 41 58 2038 61 2008 46 2009 46 2021 40 2039 61 302 41 385 2040 398 40 2038 46 2035 40 648 41 44 2038 46 2041 40 2042 61 2043 40 648 44 2043 40 648 44 648 41 41 41 46 2035 40 648 41 44 41 58 2019 46 2020 40 2040 44 91 2019 46 2007 91 1502 93 93 41 2040 61 2008 46 2009 46 2021 40 2027 61 302 41 2019 46 2044 40 2040 46 2021 40 2027 61 302 41 46 2041 40 2042 61 2045 40 648 44 2043 40 648 44 2043 40 648 44 648 41 41 41 44 41 46 2006 40 648 41 46 2041 40 2046 61 2047 40 648 41 41 46 2035 40 648 41 44 91 40 303 44 1500 41 44 40 648 44 1501 41 93 44 427 46 2048 40 648 44 648 41 44 41 348 2049 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2027 61 302 44 41 46 2006 40 648 41 46 2041 40 2046 61 2047 40 648 41 41 46 2035 40 648 41 2019 46 2044 40 2040 44 91 1500 44 1501 93 44 427 46 2048 40 648 41 41 348 2050 40 2019 41 58 2008 46 2009 46 2010 40 2051 61 123 648 58 648 125 41 2040 61 2008 46 2009 46 2021 40 2052 61 302 41 2019 46 2020 40 2040 46 2006 40 648 44 41 46 2041 40 2046 61 2047 40 648 41 44 41 46 2035 40 648 41 44 91 123 648 58 648 44 648 58 1501 125 93 44 41 348 2053 40 2019 41 58 2054 61 2055 40 2019 46 2016 44 91 648 93 41 2019 46 2020 40 2008 46 2009 46 2021 40 2056 61 2043 40 648 44 2054 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2057 40 2019 41 58 2054 61 2055 40 2019 46 2016 44 91 648 93 41 2019 46 2020 40 2008 46 2009 46 2021 40 2056 61 2043 40 648 44 2043 40 648 44 2054 41 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2058 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2043 40 648 44 648 41 44 2059 61 2043 40 648 44 648 41 44 2054 61 2043 40 648 44 2060 40 648 44 2061 46 2062 40 41 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2064 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 648 93 125 41 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2063 40 648 41 44 2059 61 2063 40 648 41 44 2054 61 2060 40 648 44 2061 46 2062 40 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2065 93 44 41 348 2066 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2043 40 648 44 648 41 44 2059 61 2043 40 648 44 2043 40 648 44 648 41 41 44 2054 61 2043 40 648 44 2043 40 648 44 2060 40 648 44 2061 46 2062 40 41 41 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2067 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 123 648 58 648 125 44 123 648 58 648 125 93 125 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2063 40 648 41 44 2059 61 2063 40 648 41 44 2054 61 2060 40 648 44 2061 46 2062 40 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2065 93 44 41 348 2068 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2069 61 2070 40 2008 46 2009 46 2021 40 2071 61 2072 40 648 41 41 46 2006 40 648 41 41 44 2042 61 2043 40 648 44 648 41 44 2059 61 2043 40 648 44 2043 40 648 44 648 41 41 44 41 46 2021 40 2059 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2073 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2041 40 2054 61 2074 40 2043 40 648 44 648 41 44 2075 61 2076 40 41 44 41 44 41 46 2021 40 2077 61 302 41 44 2019 46 2007 91 1502 58 1502 93 44 41 348 2078 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2079 61 648 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 348 2080 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2079 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2081 40 2019 41 58 2082 61 91 40 2083 40 2084 61 648 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2043 40 648 44 2043 40 648 44 648 41 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2063 40 648 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2043 40 648 44 2043 40 648 44 648 41 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2063 40 648 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2085 61 648 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2043 40 648 44 2043 40 648 44 2043 40 648 44 648 41 41 41 41 44 2019 46 2007 91 1502 93 44 41 44 40 2083 40 2079 61 2063 40 648 41 41 44 2019 46 2007 91 1502 93 41 44 93 385 2086 44 2036 398 2082 58 497 2019 46 2032 40 2086 61 2086 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2086 41 44 91 2036 93 44 41 348 2087 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 91 123 648 58 1501 125 44 123 648 58 648 125 93 41 2082 61 91 2083 40 2088 61 648 41 44 2083 40 2079 61 2043 40 648 44 2043 40 1501 44 648 41 41 41 44 2083 40 2079 61 2043 40 648 44 2043 40 648 44 648 41 41 41 44 2083 40 2079 61 2063 40 648 41 41 44 93 385 2086 398 2082 58 497 2019 46 2032 40 2086 61 2086 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2086 41 44 91 2065 93 44 41 348 2089 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2090 61 91 648 44 648 44 648 93 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2091 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2092 61 91 648 44 648 93 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 64 2093 40 648 41 348 2094 40 2019 41 58 2082 61 91 40 123 125 44 2019 46 2007 91 1502 58 1502 93 43 2019 46 2007 91 1502 58 1502 93 41 44 40 123 648 58 123 648 58 648 44 648 58 648 125 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 123 648 58 648 125 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 123 648 58 648 125 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 304 44 648 58 302 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 648 44 123 648 58 648 125 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 648 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 123 648 58 648 125 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 1501 44 91 1502 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 1501 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 91 1502 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 303 44 304 44 302 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 303 125 44 91 2019 46 2007 91 1502 93 93 41 44 93 385 2011 44 2036 398 2082 58 497 2019 46 2032 40 2011 61 2011 41 58 2040 61 2008 46 2009 46 2021 40 2095 61 2011 41 2019 46 2020 40 2040 44 2036 41 64 2096 40 648 41 348 2097 40 2019 41 58 2098 61 648 497 2019 46 2099 40 2100 44 2098 41 58 2008 46 2009 46 2021 40 2095 61 123 648 58 123 648 58 648 44 648 58 648 125 125 44 41 46 2101 40 41 64 2093 40 648 44 648 44 41 348 2102 40 2019 41 58 385 2011 398 2019 46 2005 58 497 2019 46 2032 40 2011 61 2011 41 58 2040 61 2008 46 2009 46 2021 40 2095 61 2011 41 2019 46 2103 40 2040 46 2104 40 41 44 304 41 64 2093 40 648 41 348 2105 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2106 61 123 648 58 648 44 648 58 1503 44 648 58 304 125 41 2019 46 2020 40 2040 44 2019 46 2007 91 1502 58 1502 93 41 64 2096 40 648 41 348 2107 40 2019 41 58 2098 61 648 497 2019 46 2099 40 2100 44 2098 41 58 2008 46 2009 46 2021 40 2106 61 123 648 58 648 125 41 46 2101 40 41 348 2108 40 2019 41 58 2040 61 2008 46 2009 46 2109 40 648 41 2110 61 91 40 303 44 41 93 42 2111 40 2019 46 2007 41 2110 91 1502 93 61 40 648 44 41 2019 46 2020 40 2040 44 2110 41 64 2093 40 648 41 348 2112 40 2019 41 58 2034 61 2008 46 2009 46 2113 40 648 41 46 2109 40 648 41 2019 46 2020 40 2034 44 91 40 648 44 41 44 40 303 44 41 93 41 348 2114 40 2019 41 58 621 2019 46 2020 40 2008 46 2009 46 2021 40 2115 61 304 41 44 2019 46 2007 91 58 1502 93 43 2019 46 2007 91 1502 58 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2116 61 304 41 44 2019 46 2007 91 58 1502 93 43 2019 46 2007 91 1502 58 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2115 61 302 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2116 61 302 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2117 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 303 125 41 2019 46 2020 40 2008 46 2009 46 2021 40 2083 40 2115 61 304 41 124 2083 40 2118 61 303 41 41 44 2019 46 2007 91 58 1502 93 43 2019 46 2007 91 1502 58 93 43 91 2065 93 44 41 348 2119 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2120 61 303 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2121 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 1501 125 41 392 2012 46 2017 614 648 58 621 621 2019 46 2020 40 2008 46 2009 46 2122 40 2120 61 303 41 44 2019 46 2007 91 1501 58 1502 93 43 2019 46 2007 91 1502 58 93 43 91 2065 93 44 41 360 58 2019 46 2020 40 2008 46 2009 46 2122 40 2120 61 303 41 44 91 2065 93 41 348 2123 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2124 61 1501 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2125 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2118 61 648 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 348 2126 40 2019 41 58 2040 61 2008 46 2009 46 2041 40 2033 61 2070 40 2008 46 2009 46 2021 40 2071 61 2072 40 648 41 41 46 2006 40 648 41 41 44 41 46 2021 40 2127 61 648 41 2019 46 2020 40 2040 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 41 348 2128 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2129 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2130 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2131 61 123 648 58 648 125 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2132 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2133 61 1502 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2134 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2135 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2136 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2137 61 1502 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2137 61 1502 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 2019 46 2103 40 2008 46 2009 46 2021 40 2138 61 1502 41 46 2104 40 41 44 302 41 348 2139 40 2019 41 58 2082 61 91 40 2083 40 2118 61 648 41 44 91 2019 46 2007 91 1500 93 93 41 44 40 2083 40 2056 61 648 41 44 91 2019 46 2007 91 1500 93 44 2019 46 2007 91 1502 93 93 41 44 93 385 2086 44 2036 398 2082 58 2019 46 2020 40 2008 46 2009 46 2122 40 2086 41 44 2036 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 126 2086 41 44 2036 44 41 348 2140 40 2019 41 58 621 2086 61 2083 40 2056 61 648 41 2141 61 91 2019 46 2007 91 1502 93 93 2142 61 91 2019 46 2007 91 1500 93 44 2019 46 2007 91 1502 93 93 2019 46 2020 40 2008 46 2009 46 2122 40 2086 41 44 2142 44 41 2019 46 2020 40 2008 46 2009 46 2122 40 126 2086 41 44 2141 44 41 2019 46 2143 40 2008 46 2009 46 2021 40 2086 124 126 2086 41 44 2141 43 2142 44 41 2019 46 2143 40 2008 46 2009 46 2122 40 2086 38 126 2086 41 44 2141 43 2142 44 41 621 2019 46 2020 40 2008 46 2009 46 2122 40 2086 38 2083 40 2144 61 302 41 41 44 2019 46 2007 91 1500 58 1502 93 43 2019 46 2007 91 1502 58 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2086 38 2083 40 2144 61 302 41 41 44 2141 44 41 348 2145 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2146 61 2008 46 2009 46 2021 40 2147 61 1503 41 44 41 44 2019 46 2007 91 1502 58 1502 93 44 41 64 2093 40 648 41 348 2148 40 2019 41 58 2082 61 91 40 91 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 93 41 44 93 385 2011 44 2036 398 2082 58 497 2019 46 2032 40 2011 61 2011 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2149 61 2011 41 44 2036 44 41 348 2150 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2151 61 648 41 46 2104 40 41 44 304 41 2019 46 2103 40 2008 46 2009 46 2021 40 2151 61 648 41 46 2104 40 41 44 302 41 348 2152 40 2019 41 58 2082 61 91 40 648 44 91 1503 93 44 2019 46 2007 91 1502 58 1502 93 41 44 40 648 44 91 1503 44 1503 93 44 2019 46 2007 91 1502 58 1502 93 41 44 40 648 44 91 1501 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 1501 44 1502 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 2043 40 648 44 2043 40 648 44 648 41 41 93 44 91 2019 46 2007 91 1502 93 93 44 41 44 40 648 44 91 2063 40 648 41 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 2043 40 648 44 2043 40 648 44 648 41 41 44 648 93 44 91 2019 46 2007 91 1502 93 93 44 41 44 40 648 44 91 2063 40 648 41 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 648 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 91 648 44 648 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 91 648 44 648 93 44 91 648 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 123 648 58 648 125 44 123 648 58 648 125 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 304 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 302 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 93 385 2153 44 2011 44 2036 398 2082 58 497 2019 46 2032 40 2153 61 2153 44 2011 61 2011 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 638 123 2153 58 2011 125 41 44 2036 44 41 348 2154 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2155 61 304 41 2082 61 91 40 648 44 648 41 44 40 648 44 1503 41 44 40 648 44 91 648 44 123 648 58 648 125 93 41 44 40 648 44 304 41 44 40 648 44 302 41 44 40 648 44 303 41 44 40 648 44 123 648 58 648 125 41 44 40 648 44 91 303 44 304 44 302 93 41 44 40 648 44 1502 41 44 40 648 44 123 648 58 304 44 648 58 302 125 41 44 93 385 2153 44 2036 398 2082 58 497 2019 46 2032 40 2153 61 2153 41 58 2019 46 2156 40 2040 46 2109 40 2153 44 2157 61 304 41 46 2101 40 41 44 2036 41 348 2158 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2155 61 304 44 2159 61 302 41 2082 61 91 40 648 44 304 41 44 40 648 44 302 41 44 93 385 2153 44 2036 398 2082 58 497 2019 46 2032 40 2153 61 2153 41 58 2019 46 2103 40 2040 46 2109 40 2153 44 2157 61 304 41 46 2101 40 41 44 2036 41 64 2093 40 648 41 348 2160 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2161 61 648 41 46 2104 40 41 44 302 41 2019 46 2103 40 2008 46 2009 46 2021 40 2161 61 648 41 46 2104 40 41 44 304 41 348 2162 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2163 61 648 41 46 2104 40 41 44 304 41 348 2164 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2165 61 648 41 46 2104 40 41 44 304 41 348 2166 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2167 61 648 41 46 2104 40 41 44 304 41 348 2168 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2169 61 648 41 46 2104 40 41 44 304 41 348 2170 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2171 61 648 41 46 2104 40 41 44 304 41 348 2172 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2173 61 648 41 46 2104 40 41 44 304 41 348 2174 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2175 61 648 41 46 2104 40 41 44 304 41 348 2176 40 2019 41 58 2019 46 2156 40 2008 46 2009 46 2021 40 2177 61 648 41 46 2101 40 41 44 2019 46 2007 91 1502 93 44 41 64 2093 40 648 41 348 2178 40 2019 41 58 497 2179 40 2012 41 311 2180 58 2019 46 2103 40 2008 46 2009 46 2021 40 638 123 648 58 648 44 125 41 46 2104 40 41 44 302 44 41 2019 46 2181 40 648 44 2180 91 1500 93 91 648 93 44 41 64 2096 40 648 41 348 2182 40 2019 41 58 2034 61 2183 40 2184 46 2009 46 2021 40 638 123 648 58 648 44 125 41 46 2034 41 2019 46 2181 40 648 44 2034 41 2019 46 2181 40 648 44 2034 41 348 2185 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 1502 125 41 2019 46 2156 40 2008 46 2009 46 2021 40 638 123 648 58 1502 125 41 46 2101 40 41 44 2065 41 348 2186 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2118 61 648 44 2120 61 303 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2187 40 2019 41 58 2082 61 40 40 648 44 648 41 44 40 648 44 91 648 44 648 93 41 44 40 648 44 91 648 44 648 93 41 44 40 648 44 2045 40 648 44 648 41 41 44 41 385 2153 44 2011 398 2082 58 497 2019 46 2032 40 2153 61 2153 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 638 123 2153 58 2011 125 44 41 46 2104 40 41 44 304 41 64 2093 40 648 41 348 2188 40 2019 41 58 2082 61 91 40 648 44 648 41 44 40 648 44 91 123 648 58 648 125 93 41 44 40 648 44 2043 40 648 44 648 41 41 44 40 648 44 2063 40 648 41 41 44 40 648 44 123 648 58 648 125 41 44 40 648 44 123 648 58 648 44 648 58 648 44 648 58 648 125 41 44 40 648 44 2043 40 648 44 2055 40 2019 46 2016 44 91 648 93 44 41 41 44 41 44 93 621 621 392 422 2012 46 2013 46 2189 58 2082 46 2190 40 40 648 44 123 648 58 648 125 41 41 385 2153 44 2011 398 2082 58 497 2019 46 2032 40 2153 61 2153 44 2011 61 2011 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 638 123 2153 58 2011 125 44 41 46 2104 40 41 44 304 41 348 2191 40 2019 41 58 2192 61 2193 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 648 93 125 44 2194 61 2019 46 2007 91 1502 93 44 41 2193 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 648 93 125 44 2194 61 2019 46 2007 91 1502 93 44 41 2019 46 2020 40 2193 46 2009 46 2041 40 2042 61 2063 40 648 41 44 2195 61 2063 40 648 41 44 2059 61 2063 40 648 41 44 2054 61 2060 40 648 44 2061 46 2062 40 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2192 93 44 41 
134901,Python,"class Queries1Tests(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.nc1 = generic = NamedCategory.objects.create(name=""Generic"")
        cls.t1 = Tag.objects.create(name='t1', category=generic)
        cls.t2 = Tag.objects.create(name='t2', parent=cls.t1, category=generic)
        cls.t3 = Tag.objects.create(name='t3', parent=cls.t1)
        cls.t4 = Tag.objects.create(name='t4', parent=cls.t3)
        cls.t5 = Tag.objects.create(name='t5', parent=cls.t3)

        cls.n1 = Note.objects.create(note='n1', misc='foo', id=1)
        cls.n2 = Note.objects.create(note='n2', misc='bar', id=2)
        cls.n3 = Note.objects.create(note='n3', misc='foo', id=3, negate=False)

        cls.ann1 = Annotation.objects.create(name='a1', tag=cls.t1)
        cls.ann1.notes.add(cls.n1)
        ann2 = Annotation.objects.create(name='a2', tag=cls.t4)
        ann2.notes.add(cls.n2, cls.n3)

        # Create these out of order so that sorting by 'id' will be different to sorting
        # by 'info'. Helps detect some problems later.
        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)
        e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)

        cls.a1 = Author.objects.create(name='a1', num=1001, extra=e1)
        cls.a2 = Author.objects.create(name='a2', num=2002, extra=e1)
        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)
        cls.a4 = Author.objects.create(name='a4', num=4004, extra=cls.e2)

        cls.time1 = datetime.datetime(2007, 12, 19, 22, 25, 0)
        cls.time2 = datetime.datetime(2007, 12, 19, 21, 0, 0)
        time3 = datetime.datetime(2007, 12, 20, 22, 25, 0)
        time4 = datetime.datetime(2007, 12, 20, 21, 0, 0)
        cls.i1 = Item.objects.create(name='one', created=cls.time1, modified=cls.time1, creator=cls.a1, note=cls.n3)
        cls.i1.tags.set([cls.t1, cls.t2])
        cls.i2 = Item.objects.create(name='two', created=cls.time2, creator=cls.a2, note=cls.n2)
        cls.i2.tags.set([cls.t1, cls.t3])
        cls.i3 = Item.objects.create(name='three', created=time3, creator=cls.a2, note=cls.n3)
        cls.i4 = Item.objects.create(name='four', created=time4, creator=cls.a4, note=cls.n3)
        cls.i4.tags.set([cls.t4])

        cls.r1 = Report.objects.create(name='r1', creator=cls.a1)
        cls.r2 = Report.objects.create(name='r2', creator=cls.a3)
        cls.r3 = Report.objects.create(name='r3')

        # Ordering by 'rank' gives us rank2, rank1, rank3. Ordering by the Meta.ordering
        # will be rank3, rank2, rank1.
        cls.rank1 = Ranking.objects.create(rank=2, author=cls.a2)

        cls.c1 = Cover.objects.create(title=""first"", item=cls.i4)
        cls.c2 = Cover.objects.create(title=""second"", item=cls.i2)

    def test_subquery_condition(self):
        qs1 = Tag.objects.filter(pk__lte=0)
        qs2 = Tag.objects.filter(parent__in=qs1)
        qs3 = Tag.objects.filter(parent__in=qs2)
        self.assertEqual(qs3.query.subq_aliases, {'T', 'U', 'V'})
        self.assertIn('v0', str(qs3.query).lower())
        qs4 = qs3.filter(parent__in=qs1)
        self.assertEqual(qs4.query.subq_aliases, {'T', 'U', 'V'})
        # It is possible to reuse U for the second subquery, no need to use W.
        self.assertNotIn('w0', str(qs4.query).lower())
        # So, 'U0.""id""' is referenced in SELECT and WHERE twice.
        self.assertEqual(str(qs4.query).lower().count('u0.'), 4)

    def test_ticket1050(self):
        self.assertSequenceEqual(
            Item.objects.filter(tags__isnull=True),
            [self.i3],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__id__isnull=True),
            [self.i3],
        )

    def test_ticket1801(self):
        self.assertSequenceEqual(
            Author.objects.filter(item=self.i2),
            [self.a2],
        )
        self.assertSequenceEqual(
            Author.objects.filter(item=self.i3),
            [self.a2],
        )
        self.assertSequenceEqual(
            Author.objects.filter(item=self.i2) & Author.objects.filter(item=self.i3),
            [self.a2],
        )

    def test_ticket2306(self):
        # Checking that no join types are ""left outer"" joins.
        query = Item.objects.filter(tags=self.t2).query
        self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])

        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1)).order_by('name'),
            [self.i1, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1)).filter(Q(tags=self.t2)),
            [self.i1],
        )
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1)).filter(Q(creator__name='fred') | Q(tags=self.t2)),
            [self.i1],
        )

        # Each filter call is processed ""at once"" against a single table, so this is
        # different from the previous example as it tries to find tags that are two
        # things at once (rather than two tags).
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1) & Q(tags=self.t2)),
            []
        )
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1), Q(creator__name='fred') | Q(tags=self.t2)),
            []
        )

        qs = Author.objects.filter(ranking__rank=2, ranking__id=self.rank1.id)
        self.assertSequenceEqual(list(qs), [self.a2])
        self.assertEqual(2, qs.query.count_active_tables(), 2)
        qs = Author.objects.filter(ranking__rank=2).filter(ranking__id=self.rank1.id)
        self.assertEqual(qs.query.count_active_tables(), 3)

    def test_ticket4464(self):
        self.assertSequenceEqual(
            Item.objects.filter(tags=self.t1).filter(tags=self.t2),
            [self.i1],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).distinct().order_by('name'),
            [self.i1, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).filter(tags=self.t3),
            [self.i2],
        )

        # Make sure .distinct() works with slicing (this was broken in Oracle).
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).order_by('name')[:3],
            [self.i1, self.i1, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).distinct().order_by('name')[:3],
            [self.i1, self.i2],
        )

    def test_tickets_2080_3592(self):
        self.assertSequenceEqual(
            Author.objects.filter(item__name='one') | Author.objects.filter(name='a3'),
            [self.a1, self.a3],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(item__name='one') | Q(name='a3')),
            [self.a1, self.a3],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(name='a3') | Q(item__name='one')),
            [self.a1, self.a3],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(item__name='three') | Q(report__name='r3')),
            [self.a2],
        )

    def test_ticket6074(self):
        # Merging two empty result sets shouldn't leave a queryset with no constraints
        # (which would match everything).
        self.assertSequenceEqual(Author.objects.filter(Q(id__in=[])), [])
        self.assertSequenceEqual(
            Author.objects.filter(Q(id__in=[]) | Q(id__in=[])),
            []
        )

    def test_tickets_1878_2939(self):
        self.assertEqual(Item.objects.values('creator').distinct().count(), 3)

        # Create something with a duplicate 'name' so that we can test multi-column
        # cases (which require some tricky SQL transformations under the covers).
        xx = Item(name='four', created=self.time1, creator=self.a2, note=self.n1)
        xx.save()
        self.assertEqual(
            Item.objects.exclude(name='two').values('creator', 'name').distinct().count(),
            4
        )
        self.assertEqual(
            (
                Item.objects
                .exclude(name='two')
                .extra(select={'foo': '%s'}, select_params=(1,))
                .values('creator', 'name', 'foo')
                .distinct()
                .count()
            ),
            4
        )
        self.assertEqual(
            (
                Item.objects
                .exclude(name='two')
                .extra(select={'foo': '%s'}, select_params=(1,))
                .values('creator', 'name')
                .distinct()
                .count()
            ),
            4
        )
        xx.delete()

    def test_ticket7323(self):
        self.assertEqual(Item.objects.values('creator', 'name').count(), 4)

    def test_ticket2253(self):
        q1 = Item.objects.order_by('name')
        q2 = Item.objects.filter(id=self.i1.id)
        self.assertSequenceEqual(q1, [self.i4, self.i1, self.i3, self.i2])
        self.assertSequenceEqual(q2, [self.i1])
        self.assertSequenceEqual(
            (q1 | q2).order_by('name'),
            [self.i4, self.i1, self.i3, self.i2],
        )
        self.assertSequenceEqual((q1 & q2).order_by('name'), [self.i1])

        q1 = Item.objects.filter(tags=self.t1)
        q2 = Item.objects.filter(note=self.n3, tags=self.t2)
        q3 = Item.objects.filter(creator=self.a4)
        self.assertSequenceEqual(
            ((q1 & q2) | q3).order_by('name'),
            [self.i4, self.i1],
        )

    def test_order_by_tables(self):
        q1 = Item.objects.order_by('name')
        q2 = Item.objects.filter(id=self.i1.id)
        list(q2)
        combined_query = (q1 & q2).order_by('name').query
        self.assertEqual(len([
            t for t in combined_query.alias_map if combined_query.alias_refcount[t]
        ]), 1)

    def test_order_by_join_unref(self):
        """"""
        This test is related to the above one, testing that there aren't
        old JOINs in the query.
        """"""
        qs = Celebrity.objects.order_by('greatest_fan__fan_of')
        self.assertIn('OUTER JOIN', str(qs.query))
        qs = qs.order_by('id')
        self.assertNotIn('OUTER JOIN', str(qs.query))

    def test_get_clears_ordering(self):
        """"""
        get() should clear ordering for optimization purposes.
        """"""
        with CaptureQueriesContext(connection) as captured_queries:
            Author.objects.order_by('name').get(pk=self.a1.pk)
        self.assertNotIn('order by', captured_queries[0]['sql'].lower())

    def test_tickets_4088_4306(self):
        self.assertSequenceEqual(Report.objects.filter(creator=1001), [self.r1])
        self.assertSequenceEqual(
            Report.objects.filter(creator__num=1001),
            [self.r1]
        )
        self.assertSequenceEqual(Report.objects.filter(creator__id=1001), [])
        self.assertSequenceEqual(
            Report.objects.filter(creator__id=self.a1.id),
            [self.r1]
        )
        self.assertSequenceEqual(
            Report.objects.filter(creator__name='a1'),
            [self.r1]
        )

    def test_ticket4510(self):
        self.assertSequenceEqual(
            Author.objects.filter(report__name='r1'),
            [self.a1],
        )

    def test_ticket7378(self):
        self.assertSequenceEqual(self.a1.report_set.all(), [self.r1])

    def test_tickets_5324_6704(self):
        self.assertSequenceEqual(
            Item.objects.filter(tags__name='t4'),
            [self.i4],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t4').order_by('name').distinct(),
            [self.i1, self.i3, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t4').order_by('name').distinct().reverse(),
            [self.i2, self.i3, self.i1],
        )
        self.assertSequenceEqual(
            Author.objects.exclude(item__name='one').distinct().order_by('name'),
            [self.a2, self.a3, self.a4],
        )

        # Excluding across a m2m relation when there is more than one related
        # object associated was problematic.
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t1').order_by('name'),
            [self.i4, self.i3],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t1').exclude(tags__name='t4'),
            [self.i3],
        )

        # Excluding from a relation that cannot be NULL should not use outer joins.
        query = Item.objects.exclude(creator__in=[self.a1, self.a2]).query
        self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])

        # Similarly, when one of the joins cannot possibly, ever, involve NULL
        # values (Author -> ExtraInfo, in the following), it should never be
        # promoted to a left outer join. So the following query should only
        # involve one ""left outer"" join (Author -> Item is 0-to-many).
        qs = Author.objects.filter(id=self.a1.id).filter(Q(extra__note=self.n1) | Q(item__note=self.n3))
        self.assertEqual(
            len([
                x for x in qs.query.alias_map.values()
                if x.join_type == LOUTER and qs.query.alias_refcount[x.table_alias]
            ]),
            1
        )

        # The previous changes shouldn't affect nullable foreign key joins.
        self.assertSequenceEqual(
            Tag.objects.filter(parent__isnull=True).order_by('name'),
            [self.t1]
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(parent__isnull=True).order_by('name'),
            [self.t2, self.t3, self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(Q(parent__name='t1') | Q(parent__isnull=True)).order_by('name'),
            [self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(Q(parent__isnull=True) | Q(parent__name='t1')).order_by('name'),
            [self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(Q(parent__parent__isnull=True)).order_by('name'),
            [self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.filter(~Q(parent__parent__isnull=True)).order_by('name'),
            [self.t4, self.t5],
        )

    def test_ticket2091(self):
        t = Tag.objects.get(name='t4')
        self.assertSequenceEqual(Item.objects.filter(tags__in=[t]), [self.i4])

    def test_avoid_infinite_loop_on_too_many_subqueries(self):
        x = Tag.objects.filter(pk=1)
        local_recursion_limit = sys.getrecursionlimit() // 16
        msg = 'Maximum recursion depth exceeded: too many subqueries.'
        with self.assertRaisesMessage(RecursionError, msg):
            for i in range(local_recursion_limit + 2):
                x = Tag.objects.filter(pk__in=x)

    def test_reasonable_number_of_subq_aliases(self):
        x = Tag.objects.filter(pk=1)
        for _ in range(20):
            x = Tag.objects.filter(pk__in=x)
        self.assertEqual(
            x.query.subq_aliases, {
                'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD',
                'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN',
            }
        )

    def test_heterogeneous_qs_combination(self):
        # Combining querysets built on different models should behave in a well-defined
        # fashion. We raise an error.
        msg = 'Cannot combine queries on two different base models.'
        with self.assertRaisesMessage(TypeError, msg):
            Author.objects.all() & Tag.objects.all()
        with self.assertRaisesMessage(TypeError, msg):
            Author.objects.all() | Tag.objects.all()

    def test_ticket3141(self):
        self.assertEqual(Author.objects.extra(select={'foo': '1'}).count(), 4)
        self.assertEqual(
            Author.objects.extra(select={'foo': '%s'}, select_params=(1,)).count(),
            4
        )

    def test_ticket2400(self):
        self.assertSequenceEqual(
            Author.objects.filter(item__isnull=True),
            [self.a3],
        )
        self.assertSequenceEqual(
            Tag.objects.filter(item__isnull=True),
            [self.t5],
        )

    def test_ticket2496(self):
        self.assertSequenceEqual(
            Item.objects.extra(tables=['queries_author']).select_related().order_by('name')[:1],
            [self.i4],
        )

    def test_error_raised_on_filter_with_dictionary(self):
        with self.assertRaisesMessage(FieldError, 'Cannot parse keyword query as dict'):
            Note.objects.filter({'note': 'n1', 'misc': 'foo'})

    def test_tickets_2076_7256(self):
        # Ordering on related tables should be possible, even if the table is
        # not otherwise involved.
        self.assertSequenceEqual(
            Item.objects.order_by('note__note', 'name'),
            [self.i2, self.i4, self.i1, self.i3],
        )

        # Ordering on a related field should use the remote model's default
        # ordering as a final step.
        self.assertSequenceEqual(
            Author.objects.order_by('extra', '-name'),
            [self.a2, self.a1, self.a4, self.a3],
        )

        # Using remote model default ordering can span multiple models (in this
        # case, Cover is ordered by Item's default, which uses Note's default).
        self.assertSequenceEqual(Cover.objects.all(), [self.c1, self.c2])

        # If the remote model does not have a default ordering, we order by its 'id'
        # field.
        self.assertSequenceEqual(
            Item.objects.order_by('creator', 'name'),
            [self.i1, self.i3, self.i2, self.i4],
        )

        # Ordering by a many-valued attribute (e.g. a many-to-many or reverse
        # ForeignKey) is legal, but the results might not make sense. That
        # isn't Django's problem. Garbage in, garbage out.
        self.assertSequenceEqual(
            Item.objects.filter(tags__isnull=False).order_by('tags', 'id'),
            [self.i1, self.i2, self.i1, self.i2, self.i4],
        )

        # If we replace the default ordering, Django adjusts the required
        # tables automatically. Item normally requires a join with Note to do
        # the default ordering, but that isn't needed here.
        qs = Item.objects.order_by('name')
        self.assertSequenceEqual(qs, [self.i4, self.i1, self.i3, self.i2])
        self.assertEqual(len(qs.query.alias_map), 1)

    def test_tickets_2874_3002(self):
        qs = Item.objects.select_related().order_by('note__note', 'name')
        self.assertQuerysetEqual(qs, [self.i2, self.i4, self.i1, self.i3])

        # This is also a good select_related() test because there are multiple
        # Note entries in the SQL. The two Note items should be different.
        self.assertEqual(repr(qs[0].note), '<Note: n2>')
        self.assertEqual(repr(qs[0].creator.extra.note), '<Note: n1>')

    def test_ticket3037(self):
        self.assertSequenceEqual(
            Item.objects.filter(Q(creator__name='a3', name='two') | Q(creator__name='a4', name='four')),
            [self.i4],
        )

    def test_tickets_5321_7070(self):
        # Ordering columns must be included in the output columns. Note that
        # this means results that might otherwise be distinct are not (if there
        # are multiple values in the ordering cols), as in this example. This
        # isn't a bug; it's a warning to be careful with the selection of
        # ordering columns.
        self.assertSequenceEqual(
            Note.objects.values('misc').distinct().order_by('note', '-misc'),
            [{'misc': 'foo'}, {'misc': 'bar'}, {'misc': 'foo'}]
        )

    def test_ticket4358(self):
        # If you don't pass any fields to values(), relation fields are
        # returned as ""foo_id"" keys, not ""foo"". For consistency, you should be
        # able to pass ""foo_id"" in the fields list and have it work, too. We
        # actually allow both ""foo"" and ""foo_id"".
        # The *_id version is returned by default.
        self.assertIn('note_id', ExtraInfo.objects.values()[0])
        # You can also pass it in explicitly.
        self.assertSequenceEqual(ExtraInfo.objects.values('note_id'), [{'note_id': 1}, {'note_id': 2}])
        # ...or use the field name.
        self.assertSequenceEqual(ExtraInfo.objects.values('note'), [{'note': 1}, {'note': 2}])

    def test_ticket6154(self):
        # Multiple filter statements are joined using ""AND"" all the time.

        self.assertSequenceEqual(
            Author.objects.filter(id=self.a1.id).filter(Q(extra__note=self.n1) | Q(item__note=self.n3)),
            [self.a1],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(extra__note=self.n1) | Q(item__note=self.n3)).filter(id=self.a1.id),
            [self.a1],
        )

    def test_ticket6981(self):
        self.assertSequenceEqual(
            Tag.objects.select_related('parent').order_by('name'),
            [self.t1, self.t2, self.t3, self.t4, self.t5],
        )

    def test_ticket9926(self):
        self.assertSequenceEqual(
            Tag.objects.select_related(""parent"", ""category"").order_by('name'),
            [self.t1, self.t2, self.t3, self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.select_related('parent', ""parent__category"").order_by('name'),
            [self.t1, self.t2, self.t3, self.t4, self.t5],
        )

    def test_tickets_6180_6203(self):
        # Dates with limits and/or counts
        self.assertEqual(Item.objects.count(), 4)
        self.assertEqual(Item.objects.datetimes('created', 'month').count(), 1)
        self.assertEqual(Item.objects.datetimes('created', 'day').count(), 2)
        self.assertEqual(len(Item.objects.datetimes('created', 'day')), 2)
        self.assertEqual(Item.objects.datetimes('created', 'day')[0], datetime.datetime(2007, 12, 19, 0, 0))

    def test_tickets_7087_12242(self):
        # Dates with extra select columns
        self.assertSequenceEqual(
            Item.objects.datetimes('created', 'day').extra(select={'a': 1}),
            [datetime.datetime(2007, 12, 19, 0, 0), datetime.datetime(2007, 12, 20, 0, 0)],
        )
        self.assertSequenceEqual(
            Item.objects.extra(select={'a': 1}).datetimes('created', 'day'),
            [datetime.datetime(2007, 12, 19, 0, 0), datetime.datetime(2007, 12, 20, 0, 0)],
        )

        name = ""one""
        self.assertSequenceEqual(
            Item.objects.datetimes('created', 'day').extra(where=['name=%s'], params=[name]),
            [datetime.datetime(2007, 12, 19, 0, 0)],
        )

        self.assertSequenceEqual(
            Item.objects.extra(where=['name=%s'], params=[name]).datetimes('created', 'day'),
            [datetime.datetime(2007, 12, 19, 0, 0)],
        )

    def test_ticket7155(self):
        # Nullable dates
        self.assertSequenceEqual(
            Item.objects.datetimes('modified', 'day'),
            [datetime.datetime(2007, 12, 19, 0, 0)],
        )

    def test_order_by_rawsql(self):
        self.assertSequenceEqual(
            Item.objects.values('note__note').order_by(
                RawSQL('queries_note.note', ()),
                'id',
            ),
            [
                {'note__note': 'n2'},
                {'note__note': 'n3'},
                {'note__note': 'n3'},
                {'note__note': 'n3'},
            ],
        )

    def test_ticket7096(self):
        # Make sure exclude() with multiple conditions continues to work.
        self.assertSequenceEqual(
            Tag.objects.filter(parent=self.t1, name='t3').order_by('name'),
            [self.t3],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(parent=self.t1, name='t3').order_by('name'),
            [self.t1, self.t2, self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t1', name='one').order_by('name').distinct(),
            [self.i4, self.i3, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(name__in=['three', 'four']).exclude(tags__name='t1').order_by('name'),
            [self.i4, self.i3],
        )

        # More twisted cases, involving nested negations.
        self.assertSequenceEqual(
            Item.objects.exclude(~Q(tags__name='t1', name='one')),
            [self.i1],
        )
        self.assertSequenceEqual(
            Item.objects.filter(~Q(tags__name='t1', name='one'), name='two'),
            [self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(~Q(tags__name='t1', name='one'), name='two'),
            [self.i4, self.i1, self.i3],
        )

    def test_tickets_7204_7506(self):
        # Make sure querysets with related fields can be pickled. If this
        # doesn't crash, it's a Good Thing.
        pickle.dumps(Item.objects.all())

    def test_ticket7813(self):
        # We should also be able to pickle things that use select_related().
        # The only tricky thing here is to ensure that we do the related
        # selections properly after unpickling.
        qs = Item.objects.select_related()
        query = qs.query.get_compiler(qs.db).as_sql()[0]
        query2 = pickle.loads(pickle.dumps(qs.query))
        self.assertEqual(
            query2.get_compiler(qs.db).as_sql()[0],
            query
        )

    def test_deferred_load_qs_pickling(self):
        # Check pickling of deferred-loading querysets
        qs = Item.objects.defer('name', 'creator')
        q2 = pickle.loads(pickle.dumps(qs))
        self.assertEqual(list(qs), list(q2))
        q3 = pickle.loads(pickle.dumps(qs, pickle.HIGHEST_PROTOCOL))
        self.assertEqual(list(qs), list(q3))

    def test_ticket7277(self):
        self.assertSequenceEqual(
            self.n1.annotation_set.filter(
                Q(tag=self.t5) | Q(tag__children=self.t5) | Q(tag__children__children=self.t5)
            ),
            [self.ann1],
        )

    def test_tickets_7448_7707(self):
        # Complex objects should be converted to strings before being used in
        # lookups.
        self.assertSequenceEqual(
            Item.objects.filter(created__in=[self.time1, self.time2]),
            [self.i1, self.i2],
        )

    def test_ticket7235(self):
        # An EmptyQuerySet should not raise exceptions if it is filtered.
        Eaten.objects.create(meal='m')
        q = Eaten.objects.none()
        with self.assertNumQueries(0):
            self.assertQuerysetEqual(q.all(), [])
            self.assertQuerysetEqual(q.filter(meal='m'), [])
            self.assertQuerysetEqual(q.exclude(meal='m'), [])
            self.assertQuerysetEqual(q.complex_filter({'pk': 1}), [])
            self.assertQuerysetEqual(q.select_related('food'), [])
            self.assertQuerysetEqual(q.annotate(Count('food')), [])
            self.assertQuerysetEqual(q.order_by('meal', 'food'), [])
            self.assertQuerysetEqual(q.distinct(), [])
            self.assertQuerysetEqual(
                q.extra(select={'foo': ""1""}),
                []
            )
            self.assertQuerysetEqual(q.reverse(), [])
            q.query.low_mark = 1
            msg = 'Cannot change a query once a slice has been taken.'
            with self.assertRaisesMessage(TypeError, msg):
                q.extra(select={'foo': ""1""})
            self.assertQuerysetEqual(q.defer('meal'), [])
            self.assertQuerysetEqual(q.only('meal'), [])

    def test_ticket7791(self):
        # There were ""issues"" when ordering and distinct-ing on fields related
        # via ForeignKeys.
        self.assertEqual(
            len(Note.objects.order_by('extrainfo__info').distinct()),
            3
        )

        # Pickling of QuerySets using datetimes() should work.
        qs = Item.objects.datetimes('created', 'month')
        pickle.loads(pickle.dumps(qs))

    def test_ticket9997(self):
        # If a ValuesList or Values queryset is passed as an inner query, we
        # make sure it's only requesting a single value and use that as the
        # thing to select.
        self.assertSequenceEqual(
            Tag.objects.filter(name__in=Tag.objects.filter(parent=self.t1).values('name')),
            [self.t2, self.t3],
        )

        # Multi-valued values() and values_list() querysets should raise errors.
        with self.assertRaisesMessage(TypeError, 'Cannot use multi-field values as a filter value.'):
            Tag.objects.filter(name__in=Tag.objects.filter(parent=self.t1).values('name', 'id'))
        with self.assertRaisesMessage(TypeError, 'Cannot use multi-field values as a filter value.'):
            Tag.objects.filter(name__in=Tag.objects.filter(parent=self.t1).values_list('name', 'id'))

    def test_ticket9985(self):
        # qs.values_list(...).values(...) combinations should work.
        self.assertSequenceEqual(
            Note.objects.values_list(""note"", flat=True).values(""id"").order_by(""id""),
            [{'id': 1}, {'id': 2}, {'id': 3}]
        )
        self.assertSequenceEqual(
            Annotation.objects.filter(notes__in=Note.objects.filter(note=""n1"").values_list('note').values('id')),
            [self.ann1],
        )

    def test_ticket10205(self):
        # When bailing out early because of an empty ""__in"" filter, we need
        # to set things up correctly internally so that subqueries can continue properly.
        self.assertEqual(Tag.objects.filter(name__in=()).update(name=""foo""), 0)

    def test_ticket10432(self):
        # Testing an empty ""__in"" filter with a generator as the value.
        def f():
            return iter([])
        n_obj = Note.objects.all()[0]

        def g():
            yield n_obj.pk
        self.assertQuerysetEqual(Note.objects.filter(pk__in=f()), [])
        self.assertEqual(list(Note.objects.filter(pk__in=g())), [n_obj])

    def test_ticket10742(self):
        # Queries used in an __in clause don't execute subqueries

        subq = Author.objects.filter(num__lt=3000)
        qs = Author.objects.filter(pk__in=subq)
        self.assertSequenceEqual(qs, [self.a1, self.a2])

        # The subquery result cache should not be populated
        self.assertIsNone(subq._result_cache)

        subq = Author.objects.filter(num__lt=3000)
        qs = Author.objects.exclude(pk__in=subq)
        self.assertSequenceEqual(qs, [self.a3, self.a4])

        # The subquery result cache should not be populated
        self.assertIsNone(subq._result_cache)

        subq = Author.objects.filter(num__lt=3000)
        self.assertSequenceEqual(
            Author.objects.filter(Q(pk__in=subq) & Q(name='a1')),
            [self.a1],
        )

        # The subquery result cache should not be populated
        self.assertIsNone(subq._result_cache)

    def test_ticket7076(self):
        # Excluding shouldn't eliminate NULL entries.
        self.assertSequenceEqual(
            Item.objects.exclude(modified=self.time1).order_by('name'),
            [self.i4, self.i3, self.i2],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(parent__name=self.t1.name),
            [self.t1, self.t4, self.t5],
        )

    def test_ticket7181(self):
        # Ordering by related tables should accommodate nullable fields (this
        # test is a little tricky, since NULL ordering is database dependent.
        # Instead, we just count the number of results).
        self.assertEqual(len(Tag.objects.order_by('parent__name')), 5)

        # Empty querysets can be merged with others.
        self.assertSequenceEqual(
            Note.objects.none() | Note.objects.all(),
            [self.n1, self.n2, self.n3],
        )
        self.assertSequenceEqual(
            Note.objects.all() | Note.objects.none(),
            [self.n1, self.n2, self.n3],
        )
        self.assertSequenceEqual(Note.objects.none() & Note.objects.all(), [])
        self.assertSequenceEqual(Note.objects.all() & Note.objects.none(), [])

    def test_ticket8439(self):
        # Complex combinations of conjunctions, disjunctions and nullable
        # relations.
        self.assertSequenceEqual(
            Author.objects.filter(Q(item__note__extrainfo=self.e2) | Q(report=self.r1, name='xyz')),
            [self.a2],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(report=self.r1, name='xyz') | Q(item__note__extrainfo=self.e2)),
            [self.a2],
        )
        self.assertSequenceEqual(
            Annotation.objects.filter(Q(tag__parent=self.t1) | Q(notes__note='n1', name='a1')),
            [self.ann1],
        )
        xx = ExtraInfo.objects.create(info='xx', note=self.n3)
        self.assertSequenceEqual(
            Note.objects.filter(Q(extrainfo__author=self.a1) | Q(extrainfo=xx)),
            [self.n1, self.n3],
        )
        q = Note.objects.filter(Q(extrainfo__author=self.a1) | Q(extrainfo=xx)).query
        self.assertEqual(
            len([x for x in q.alias_map.values() if x.join_type == LOUTER and q.alias_refcount[x.table_alias]]),
            1
        )

    def test_ticket17429(self):
        """"""
        Meta.ordering=None works the same as Meta.ordering=[]
        """"""
        original_ordering = Tag._meta.ordering
        Tag._meta.ordering = None
        try:
            self.assertCountEqual(
                Tag.objects.all(),
                [self.t1, self.t2, self.t3, self.t4, self.t5],
            )
        finally:
            Tag._meta.ordering = original_ordering

    def test_exclude(self):
        self.assertQuerysetEqual(
            Item.objects.exclude(tags__name='t4'),
            Item.objects.filter(~Q(tags__name='t4')))
        self.assertQuerysetEqual(
            Item.objects.exclude(Q(tags__name='t4') | Q(tags__name='t3')),
            Item.objects.filter(~(Q(tags__name='t4') | Q(tags__name='t3'))))
        self.assertQuerysetEqual(
            Item.objects.exclude(Q(tags__name='t4') | ~Q(tags__name='t3')),
            Item.objects.filter(~(Q(tags__name='t4') | ~Q(tags__name='t3'))))

    def test_nested_exclude(self):
        self.assertQuerysetEqual(
            Item.objects.exclude(~Q(tags__name='t4')),
            Item.objects.filter(~~Q(tags__name='t4')))

    def test_double_exclude(self):
        self.assertQuerysetEqual(
            Item.objects.filter(Q(tags__name='t4')),
            Item.objects.filter(~~Q(tags__name='t4')))
        self.assertQuerysetEqual(
            Item.objects.filter(Q(tags__name='t4')),
            Item.objects.filter(~Q(~Q(tags__name='t4'))))

    def test_exclude_in(self):
        self.assertQuerysetEqual(
            Item.objects.exclude(Q(tags__name__in=['t4', 't3'])),
            Item.objects.filter(~Q(tags__name__in=['t4', 't3'])))
        self.assertQuerysetEqual(
            Item.objects.filter(Q(tags__name__in=['t4', 't3'])),
            Item.objects.filter(~~Q(tags__name__in=['t4', 't3'])))

    def test_ticket_10790_1(self):
        # Querying direct fields with isnull should trim the left outer join.
        # It also should not create INNER JOIN.
        q = Tag.objects.filter(parent__isnull=True)

        self.assertSequenceEqual(q, [self.t1])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.filter(parent__isnull=False)

        self.assertSequenceEqual(q, [self.t2, self.t3, self.t4, self.t5])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.exclude(parent__isnull=True)
        self.assertSequenceEqual(q, [self.t2, self.t3, self.t4, self.t5])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.exclude(parent__isnull=False)
        self.assertSequenceEqual(q, [self.t1])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.exclude(parent__parent__isnull=False)

        self.assertSequenceEqual(q, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        self.assertNotIn('INNER JOIN', str(q.query))

    def test_ticket_10790_2(self):
        # Querying across several tables should strip only the last outer join,
        # while preserving the preceding inner joins.
        q = Tag.objects.filter(parent__parent__isnull=False)

        self.assertSequenceEqual(q, [self.t4, self.t5])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)

        # Querying without isnull should not convert anything to left outer join.
        q = Tag.objects.filter(parent__parent=self.t1)
        self.assertSequenceEqual(q, [self.t4, self.t5])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)

    def test_ticket_10790_3(self):
        # Querying via indirect fields should populate the left outer join
        q = NamedCategory.objects.filter(tag__isnull=True)
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        # join to dumbcategory ptr_id
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)
        self.assertSequenceEqual(q, [])

        # Querying across several tables should strip only the last join, while
        # preserving the preceding left outer joins.
        q = NamedCategory.objects.filter(tag__parent__isnull=True)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        self.assertSequenceEqual(q, [self.nc1])

    def test_ticket_10790_4(self):
        # Querying across m2m field should not strip the m2m table from join.
        q = Author.objects.filter(item__tags__isnull=True)
        self.assertSequenceEqual(q, [self.a2, self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 2)
        self.assertNotIn('INNER JOIN', str(q.query))

        q = Author.objects.filter(item__tags__parent__isnull=True)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a2, self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 3)
        self.assertNotIn('INNER JOIN', str(q.query))

    def test_ticket_10790_5(self):
        # Querying with isnull=False across m2m field should not create outer joins
        q = Author.objects.filter(item__tags__isnull=False)
        self.assertSequenceEqual(q, [self.a1, self.a1, self.a2, self.a2, self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 2)

        q = Author.objects.filter(item__tags__parent__isnull=False)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 3)

        q = Author.objects.filter(item__tags__parent__parent__isnull=False)
        self.assertSequenceEqual(q, [self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 4)

    def test_ticket_10790_6(self):
        # Querying with isnull=True across m2m field should not create inner joins
        # and strip last outer join
        q = Author.objects.filter(item__tags__parent__parent__isnull=True)
        self.assertSequenceEqual(
            q,
            [self.a1, self.a1, self.a2, self.a2, self.a2, self.a3],
        )
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 4)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

        q = Author.objects.filter(item__tags__parent__isnull=True)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a2, self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 3)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

    def test_ticket_10790_7(self):
        # Reverse querying with isnull should not strip the join
        q = Author.objects.filter(item__isnull=True)
        self.assertSequenceEqual(q, [self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

        q = Author.objects.filter(item__isnull=False)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a2, self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)

    def test_ticket_10790_8(self):
        # Querying with combined q-objects should also strip the left outer join
        q = Tag.objects.filter(Q(parent__isnull=True) | Q(parent=self.t1))
        self.assertSequenceEqual(q, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

    def test_ticket_10790_combine(self):
        # Combining queries should not re-populate the left outer join
        q1 = Tag.objects.filter(parent__isnull=True)
        q2 = Tag.objects.filter(parent__isnull=False)

        q3 = q1 | q2
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3, self.t4, self.t5])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q3 = q1 & q2
        self.assertSequenceEqual(q3, [])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q2 = Tag.objects.filter(parent=self.t1)
        q3 = q1 | q2
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q3 = q2 | q1
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q1 = Tag.objects.filter(parent__isnull=True)
        q2 = Tag.objects.filter(parent__parent__isnull=True)

        q3 = q1 | q2
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 1)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q3 = q2 | q1
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 1)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

    def test_ticket19672(self):
        self.assertSequenceEqual(
            Report.objects.filter(Q(creator__isnull=False) & ~Q(creator__extra__value=41)),
            [self.r1],
        )

    def test_ticket_20250(self):
        # A negated Q along with an annotated queryset failed in Django 1.4
        qs = Author.objects.annotate(Count('item'))
        qs = qs.filter(~Q(extra__value=0)).order_by('name')

        self.assertIn('SELECT', str(qs.query))
        self.assertSequenceEqual(qs, [self.a1, self.a2, self.a3, self.a4])

    def test_lookup_constraint_fielderror(self):
        msg = (
            ""Cannot resolve keyword 'unknown_field' into field. Choices are: ""
            ""annotation, category, category_id, children, id, item, ""
            ""managedmodel, name, note, parent, parent_id""
        )
        with self.assertRaisesMessage(FieldError, msg):
            Tag.objects.filter(unknown_field__name='generic')

    def test_common_mixed_case_foreign_keys(self):
        """"""
        Valid query should be generated when fields fetched from joined tables
        include FKs whose names only differ by case.
        """"""
        c1 = SimpleCategory.objects.create(name='c1')
        c2 = SimpleCategory.objects.create(name='c2')
        c3 = SimpleCategory.objects.create(name='c3')
        category = CategoryItem.objects.create(category=c1)
        mixed_case_field_category = MixedCaseFieldCategoryItem.objects.create(CaTeGoRy=c2)
        mixed_case_db_column_category = MixedCaseDbColumnCategoryItem.objects.create(category=c3)
        CommonMixedCaseForeignKeys.objects.create(
            category=category,
            mixed_case_field_category=mixed_case_field_category,
            mixed_case_db_column_category=mixed_case_db_column_category,
        )
        qs = CommonMixedCaseForeignKeys.objects.values(
            'category',
            'mixed_case_field_category',
            'mixed_case_db_column_category',
            'category__category',
            'mixed_case_field_category__CaTeGoRy',
            'mixed_case_db_column_category__category',
        )
        self.assertTrue(qs.first())

    def test_excluded_intermediary_m2m_table_joined(self):
        self.assertSequenceEqual(
            Note.objects.filter(~Q(tag__annotation__name=F('note'))),
            [self.n1, self.n2, self.n3],
        )
        self.assertSequenceEqual(
            Note.objects.filter(tag__annotation__name='a1').filter(~Q(tag__annotation__name=F('note'))),
            [],
        )

    def test_field_with_filterable(self):
        self.assertSequenceEqual(
            Author.objects.filter(extra=self.e2),
            [self.a3, self.a4],
        )

    def test_negate_field(self):
        self.assertSequenceEqual(
            Note.objects.filter(negate=True),
            [self.n1, self.n2],
        )
        self.assertSequenceEqual(Note.objects.exclude(negate=True), [self.n3])",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 61 2007 46 2008 46 2009 40 2010 61 648 41 2004 46 2011 61 2012 46 2008 46 2009 40 2010 61 648 44 2013 61 2006 41 2004 46 2014 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2011 44 2013 61 2006 41 2004 46 2016 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2011 41 2004 46 2017 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2016 41 2004 46 2018 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2016 41 2004 46 2019 61 2020 46 2008 46 2009 40 2021 61 648 44 2022 61 648 44 2023 61 1501 41 2004 46 2024 61 2020 46 2008 46 2009 40 2021 61 648 44 2022 61 648 44 2023 61 1502 41 2004 46 2025 61 2020 46 2008 46 2009 40 2021 61 648 44 2022 61 648 44 2023 61 1502 44 2026 61 302 41 2004 46 2027 61 2028 46 2008 46 2009 40 2010 61 648 44 2029 61 2004 46 2011 41 2004 46 2027 46 2030 46 2031 40 2004 46 2019 41 2032 61 2028 46 2008 46 2009 40 2010 61 648 44 2029 61 2004 46 2017 41 2032 46 2030 46 2031 40 2004 46 2024 44 2004 46 2025 41 621 621 2004 46 2033 61 2034 46 2008 46 2009 40 2035 61 648 44 2021 61 2004 46 2024 44 2036 61 1503 44 2037 61 302 41 2038 61 2034 46 2008 46 2009 40 2035 61 648 44 2021 61 2004 46 2019 44 2036 61 1503 41 2004 46 2039 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2038 41 2004 46 2043 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2038 41 2004 46 2044 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2004 46 2033 41 2004 46 2045 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2004 46 2033 41 2004 46 2046 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1503 44 1500 41 2004 46 2048 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1500 44 1500 41 2049 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1503 44 1500 41 2050 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1500 44 1500 41 2004 46 2051 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2004 46 2046 44 2054 61 2004 46 2046 44 2055 61 2004 46 2039 44 2021 61 2004 46 2025 41 2004 46 2051 46 2056 46 2057 40 91 2004 46 2011 44 2004 46 2014 93 41 2004 46 2058 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2004 46 2048 44 2055 61 2004 46 2043 44 2021 61 2004 46 2024 41 2004 46 2058 46 2056 46 2057 40 91 2004 46 2011 44 2004 46 2016 93 41 2004 46 2059 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2049 44 2055 61 2004 46 2043 44 2021 61 2004 46 2025 41 2004 46 2060 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2050 44 2055 61 2004 46 2045 44 2021 61 2004 46 2025 41 2004 46 2060 46 2056 46 2057 40 91 2004 46 2017 93 41 2004 46 2061 61 2062 46 2008 46 2009 40 2010 61 648 44 2055 61 2004 46 2039 41 2004 46 2063 61 2062 46 2008 46 2009 40 2010 61 648 44 2055 61 2004 46 2044 41 2004 46 2064 61 2062 46 2008 46 2009 40 2010 61 648 41 621 621 2004 46 2065 61 2066 46 2008 46 2009 40 2067 61 1502 44 2068 61 2004 46 2043 41 2004 46 2069 61 2070 46 2008 46 2009 40 2071 61 648 44 2072 61 2004 46 2060 41 2004 46 2073 61 2070 46 2008 46 2009 40 2071 61 648 44 2072 61 2004 46 2058 41 348 2074 40 2075 41 58 2076 61 2012 46 2008 46 2077 40 2078 61 1500 41 2079 61 2012 46 2008 46 2077 40 2080 61 2076 41 2081 61 2012 46 2008 46 2077 40 2080 61 2079 41 2075 46 2082 40 2081 46 2083 46 2084 44 123 648 44 648 44 648 125 41 2075 46 2085 40 648 44 2086 40 2081 46 2083 41 46 2087 40 41 41 2088 61 2081 46 2077 40 2080 61 2076 41 2075 46 2082 40 2088 46 2083 46 2084 44 123 648 44 648 44 648 125 41 621 2075 46 2089 40 648 44 2086 40 2088 46 2083 41 46 2087 40 41 41 621 2075 46 2082 40 2086 40 2088 46 2083 41 46 2087 40 41 46 2090 40 648 41 44 1502 41 348 2091 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2093 61 304 41 44 91 2075 46 2059 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2094 61 304 41 44 91 2075 46 2059 93 44 41 348 2095 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2072 61 2075 46 2058 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2072 61 2075 46 2059 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2072 61 2075 46 2058 41 38 2040 46 2008 46 2077 40 2072 61 2075 46 2059 41 44 91 2075 46 2043 93 44 41 348 2096 40 2075 41 58 621 2083 61 2052 46 2008 46 2077 40 2056 61 2075 46 2014 41 46 2083 2075 46 2089 40 2097 44 91 2098 46 2099 385 2098 398 2083 46 2100 46 2101 40 41 93 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 41 46 2103 40 648 41 44 91 2075 46 2051 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 41 46 2077 40 2102 40 2056 61 2075 46 2014 41 41 44 91 2075 46 2051 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 41 46 2077 40 2102 40 2104 61 648 41 124 2102 40 2056 61 2075 46 2014 41 41 44 91 2075 46 2051 93 44 41 621 621 621 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 38 2102 40 2056 61 2075 46 2014 41 41 44 91 93 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 44 2102 40 2104 61 648 41 124 2102 40 2056 61 2075 46 2014 41 41 44 91 93 41 2105 61 2040 46 2008 46 2077 40 2106 61 1502 44 2107 61 2075 46 2065 46 2023 41 2075 46 2092 40 411 40 2105 41 44 91 2075 46 2043 93 41 2075 46 2082 40 1502 44 2105 46 2083 46 2108 40 41 44 1502 41 2105 61 2040 46 2008 46 2077 40 2106 61 1502 41 46 2077 40 2107 61 2075 46 2065 46 2023 41 2075 46 2082 40 2105 46 2083 46 2108 40 41 44 1502 41 348 2109 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2056 61 2075 46 2011 41 46 2077 40 2056 61 2075 46 2014 41 44 91 2075 46 2051 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2111 40 41 46 2103 40 648 41 44 91 2075 46 2051 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2077 40 2056 61 2075 46 2016 41 44 91 2075 46 2058 93 44 41 621 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2103 40 648 41 91 58 1502 93 44 91 2075 46 2051 44 2075 46 2051 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2111 40 41 46 2103 40 648 41 91 58 1502 93 44 91 2075 46 2051 44 2075 46 2058 93 44 41 348 2112 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2113 61 648 41 124 2040 46 2008 46 2077 40 2010 61 648 41 44 91 2075 46 2039 44 2075 46 2044 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2113 61 648 41 124 2102 40 2010 61 648 41 41 44 91 2075 46 2039 44 2075 46 2044 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2010 61 648 41 124 2102 40 2113 61 648 41 41 44 91 2075 46 2039 44 2075 46 2044 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2113 61 648 41 124 2102 40 2114 61 648 41 41 44 91 2075 46 2043 93 44 41 348 2115 40 2075 41 58 621 621 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2116 61 91 93 41 41 44 91 93 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2116 61 91 93 41 124 2102 40 2116 61 91 93 41 41 44 91 93 41 348 2117 40 2075 41 58 2075 46 2082 40 2052 46 2008 46 2101 40 648 41 46 2111 40 41 46 2090 40 41 44 1502 41 621 621 2118 61 2052 40 2010 61 648 44 2053 61 2075 46 2046 44 2055 61 2075 46 2043 44 2021 61 2075 46 2019 41 2118 46 2119 40 41 2075 46 2082 40 2052 46 2008 46 2120 40 2010 61 648 41 46 2101 40 648 44 648 41 46 2111 40 41 46 2090 40 41 44 1502 41 2075 46 2082 40 40 2052 46 2008 46 2120 40 2010 61 648 41 46 2042 40 2121 61 123 648 58 648 125 44 2122 61 40 1501 44 41 41 46 2101 40 648 44 648 44 648 41 46 2111 40 41 46 2090 40 41 41 44 1502 41 2075 46 2082 40 40 2052 46 2008 46 2120 40 2010 61 648 41 46 2042 40 2121 61 123 648 58 648 125 44 2122 61 40 1501 44 41 41 46 2101 40 648 44 648 41 46 2111 40 41 46 2090 40 41 41 44 1502 41 2118 46 353 40 41 348 2123 40 2075 41 58 2075 46 2082 40 2052 46 2008 46 2101 40 648 44 648 41 46 2090 40 41 44 1502 41 348 2124 40 2075 41 58 2125 61 2052 46 2008 46 2103 40 648 41 2126 61 2052 46 2008 46 2077 40 2023 61 2075 46 2051 46 2023 41 2075 46 2092 40 2125 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 41 2075 46 2092 40 2126 44 91 2075 46 2051 93 41 2075 46 2092 40 40 2125 124 2126 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 40 2125 38 2126 41 46 2103 40 648 41 44 91 2075 46 2051 93 41 2125 61 2052 46 2008 46 2077 40 2056 61 2075 46 2011 41 2126 61 2052 46 2008 46 2077 40 2021 61 2075 46 2025 44 2056 61 2075 46 2014 41 2127 61 2052 46 2008 46 2077 40 2055 61 2075 46 2045 41 2075 46 2092 40 40 40 2125 38 2126 41 124 2127 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2051 93 44 41 348 2128 40 2075 41 58 2125 61 2052 46 2008 46 2103 40 648 41 2126 61 2052 46 2008 46 2077 40 2023 61 2075 46 2051 46 2023 41 411 40 2126 41 2129 61 40 2125 38 2126 41 46 2103 40 648 41 46 2083 2075 46 2082 40 2130 40 91 2131 385 2131 398 2129 46 2100 392 2129 46 2132 91 2131 93 93 41 44 1501 41 348 2133 40 2075 41 58 648 2105 61 2134 46 2008 46 2103 40 648 41 2075 46 2085 40 648 44 2086 40 2105 46 2083 41 41 2105 61 2105 46 2103 40 648 41 2075 46 2089 40 648 44 2086 40 2105 46 2083 41 41 348 2135 40 2075 41 58 648 497 2136 40 2137 41 311 2138 58 2040 46 2008 46 2103 40 648 41 46 2139 40 2140 61 2075 46 2039 46 2140 41 2075 46 2089 40 648 44 2138 91 1500 93 91 648 93 46 2087 40 41 41 348 2141 40 2075 41 58 2075 46 2092 40 2062 46 2008 46 2077 40 2055 61 1505 41 44 91 2075 46 2061 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2142 61 1505 41 44 91 2075 46 2061 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2143 61 1505 41 44 91 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2143 61 2075 46 2039 46 2023 41 44 91 2075 46 2061 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2104 61 648 41 44 91 2075 46 2061 93 41 348 2144 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2114 61 648 41 44 91 2075 46 2039 93 44 41 348 2145 40 2075 41 58 2075 46 2092 40 2075 46 2039 46 2146 46 2147 40 41 44 91 2075 46 2061 93 41 348 2148 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2149 61 648 41 44 91 2075 46 2060 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2103 40 648 41 46 2111 40 41 44 91 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2103 40 648 41 46 2111 40 41 46 2150 40 41 44 91 2075 46 2058 44 2075 46 2059 44 2075 46 2051 93 44 41 2075 46 2092 40 2040 46 2008 46 2120 40 2113 61 648 41 46 2111 40 41 46 2103 40 648 41 44 91 2075 46 2043 44 2075 46 2044 44 2075 46 2045 93 44 41 621 621 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2059 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2120 40 2149 61 648 41 44 91 2075 46 2059 93 44 41 621 2083 61 2052 46 2008 46 2120 40 2151 61 91 2075 46 2039 44 2075 46 2043 93 41 46 2083 2075 46 2089 40 2097 44 91 2098 46 2099 385 2098 398 2083 46 2100 46 2101 40 41 93 41 621 621 621 621 2105 61 2040 46 2008 46 2077 40 2023 61 2075 46 2039 46 2023 41 46 2077 40 2102 40 2152 61 2075 46 2019 41 124 2102 40 2153 61 2075 46 2025 41 41 2075 46 2082 40 2130 40 91 2098 385 2098 398 2105 46 2083 46 2100 46 2101 40 41 392 2098 46 2099 614 2097 308 2105 46 2083 46 2132 91 2098 46 2154 93 93 41 44 1501 41 621 2075 46 2092 40 2012 46 2008 46 2077 40 2155 61 304 41 46 2103 40 648 41 44 91 2075 46 2011 93 41 2075 46 2092 40 2012 46 2008 46 2120 40 2155 61 304 41 46 2103 40 648 41 44 91 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2102 40 2156 61 648 41 124 2102 40 2155 61 304 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2102 40 2155 61 304 41 124 2102 40 2156 61 648 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2102 40 2157 61 304 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2077 40 126 2102 40 2157 61 304 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 348 2158 40 2075 41 58 2131 61 2012 46 2008 46 2139 40 2010 61 648 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2131 93 41 44 91 2075 46 2060 93 41 348 2159 40 2075 41 58 2098 61 2012 46 2008 46 2077 40 2140 61 1501 41 2160 61 2161 46 2162 40 41 610 1503 2163 61 648 497 2075 46 2164 40 2165 44 2163 41 58 385 2166 398 2167 40 2160 43 1502 41 58 2098 61 2012 46 2008 46 2077 40 2168 61 2098 41 348 2169 40 2075 41 58 2098 61 2012 46 2008 46 2077 40 2140 61 1501 41 385 2170 398 2167 40 1503 41 58 2098 61 2012 46 2008 46 2077 40 2168 61 2098 41 2075 46 2082 40 2098 46 2083 46 2084 44 123 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 125 41 348 2171 40 2075 41 58 621 621 2163 61 648 497 2075 46 2164 40 2172 44 2163 41 58 2040 46 2008 46 2147 40 41 38 2012 46 2008 46 2147 40 41 497 2075 46 2164 40 2172 44 2163 41 58 2040 46 2008 46 2147 40 41 124 2012 46 2008 46 2147 40 41 348 2173 40 2075 41 58 2075 46 2082 40 2040 46 2008 46 2042 40 2121 61 123 648 58 648 125 41 46 2090 40 41 44 1502 41 2075 46 2082 40 2040 46 2008 46 2042 40 2121 61 123 648 58 648 125 44 2122 61 40 1501 44 41 41 46 2090 40 41 44 1502 41 348 2174 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2175 61 304 41 44 91 2075 46 2044 93 44 41 2075 46 2092 40 2012 46 2008 46 2077 40 2175 61 304 41 44 91 2075 46 2018 93 44 41 348 2176 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2042 40 2177 61 91 648 93 41 46 2178 40 41 46 2103 40 648 41 91 58 1501 93 44 91 2075 46 2060 93 44 41 348 2179 40 2075 41 58 497 2075 46 2164 40 2180 44 648 41 58 2020 46 2008 46 2077 40 123 648 58 648 44 648 58 648 125 41 348 2181 40 2075 41 58 621 621 2075 46 2092 40 2052 46 2008 46 2103 40 648 44 648 41 44 91 2075 46 2058 44 2075 46 2060 44 2075 46 2051 44 2075 46 2059 93 44 41 621 621 2075 46 2092 40 2040 46 2008 46 2103 40 648 44 648 41 44 91 2075 46 2043 44 2075 46 2039 44 2075 46 2045 44 2075 46 2044 93 44 41 621 621 2075 46 2092 40 2070 46 2008 46 2147 40 41 44 91 2075 46 2069 44 2075 46 2073 93 41 621 621 2075 46 2092 40 2052 46 2008 46 2103 40 648 44 648 41 44 91 2075 46 2051 44 2075 46 2059 44 2075 46 2058 44 2075 46 2060 93 44 41 621 621 621 2075 46 2092 40 2052 46 2008 46 2077 40 2093 61 302 41 46 2103 40 648 44 648 41 44 91 2075 46 2051 44 2075 46 2058 44 2075 46 2051 44 2075 46 2058 44 2075 46 2060 93 44 41 621 621 621 2105 61 2052 46 2008 46 2103 40 648 41 2075 46 2092 40 2105 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 41 2075 46 2082 40 2130 40 2105 46 2083 46 2100 41 44 1501 41 348 2182 40 2075 41 58 2105 61 2052 46 2008 46 2178 40 41 46 2103 40 648 44 648 41 2075 46 2183 40 2105 44 91 2075 46 2058 44 2075 46 2060 44 2075 46 2051 44 2075 46 2059 93 41 621 621 2075 46 2082 40 2184 40 2105 91 1500 93 46 2021 41 44 648 41 2075 46 2082 40 2184 40 2105 91 1500 93 46 2055 46 2042 46 2021 41 44 648 41 348 2185 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2104 61 648 44 2010 61 648 41 124 2102 40 2104 61 648 44 2010 61 648 41 41 44 91 2075 46 2060 93 44 41 348 2186 40 2075 41 58 621 621 621 621 621 2075 46 2092 40 2020 46 2008 46 2101 40 648 41 46 2111 40 41 46 2103 40 648 44 648 41 44 91 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 93 41 348 2187 40 2075 41 58 621 621 621 621 621 2075 46 2085 40 648 44 2034 46 2008 46 2101 40 41 91 1500 93 41 621 2075 46 2092 40 2034 46 2008 46 2101 40 648 41 44 91 123 648 58 1501 125 44 123 648 58 1502 125 93 41 621 2075 46 2092 40 2034 46 2008 46 2101 40 648 41 44 91 123 648 58 1501 125 44 123 648 58 1502 125 93 41 348 2188 40 2075 41 58 621 2075 46 2092 40 2040 46 2008 46 2077 40 2023 61 2075 46 2039 46 2023 41 46 2077 40 2102 40 2152 61 2075 46 2019 41 124 2102 40 2153 61 2075 46 2025 41 41 44 91 2075 46 2039 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2152 61 2075 46 2019 41 124 2102 40 2153 61 2075 46 2025 41 41 46 2077 40 2023 61 2075 46 2039 46 2023 41 44 91 2075 46 2039 93 44 41 348 2189 40 2075 41 58 2075 46 2092 40 2012 46 2008 46 2178 40 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 348 2190 40 2075 41 58 2075 46 2092 40 2012 46 2008 46 2178 40 648 44 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2178 40 648 44 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 348 2191 40 2075 41 58 621 2075 46 2082 40 2052 46 2008 46 2090 40 41 44 1502 41 2075 46 2082 40 2052 46 2008 46 2192 40 648 44 648 41 46 2090 40 41 44 1501 41 2075 46 2082 40 2052 46 2008 46 2192 40 648 44 648 41 46 2090 40 41 44 1502 41 2075 46 2082 40 2130 40 2052 46 2008 46 2192 40 648 44 648 41 41 44 1502 41 2075 46 2082 40 2052 46 2008 46 2192 40 648 44 648 41 91 1500 93 44 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 41 348 2193 40 2075 41 58 621 2075 46 2092 40 2052 46 2008 46 2192 40 648 44 648 41 46 2042 40 2121 61 123 648 58 1501 125 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 44 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 2075 46 2092 40 2052 46 2008 46 2042 40 2121 61 123 648 58 1501 125 41 46 2192 40 648 44 648 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 44 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 2010 61 648 2075 46 2092 40 2052 46 2008 46 2192 40 648 44 648 41 46 2042 40 2194 61 91 648 93 44 433 61 91 2010 93 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 2075 46 2092 40 2052 46 2008 46 2042 40 2194 61 91 648 93 44 433 61 91 2010 93 41 46 2192 40 648 44 648 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 348 2195 40 2075 41 58 621 2075 46 2092 40 2052 46 2008 46 2192 40 648 44 648 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 348 2196 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2101 40 648 41 46 2103 40 2197 40 648 44 40 41 41 44 648 44 41 44 91 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 44 93 44 41 348 2198 40 2075 41 58 621 2075 46 2092 40 2012 46 2008 46 2077 40 2015 61 2075 46 2011 44 2010 61 648 41 46 2103 40 648 41 44 91 2075 46 2016 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2015 61 2075 46 2011 44 2010 61 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 44 2010 61 648 41 46 2103 40 648 41 46 2111 40 41 44 91 2075 46 2060 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2199 61 91 648 44 648 93 41 46 2120 40 2149 61 648 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2059 93 44 41 621 2075 46 2092 40 2052 46 2008 46 2120 40 126 2102 40 2149 61 648 44 2010 61 648 41 41 44 91 2075 46 2051 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 126 2102 40 2149 61 648 44 2010 61 648 41 44 2010 61 648 41 44 91 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 126 2102 40 2149 61 648 44 2010 61 648 41 44 2010 61 648 41 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 93 44 41 348 2200 40 2075 41 58 621 621 2201 46 2202 40 2052 46 2008 46 2147 40 41 41 348 2203 40 2075 41 58 621 621 621 2105 61 2052 46 2008 46 2178 40 41 2083 61 2105 46 2083 46 2204 40 2105 46 2205 41 46 2206 40 41 91 1500 93 2207 61 2201 46 2208 40 2201 46 2202 40 2105 46 2083 41 41 2075 46 2082 40 2207 46 2204 40 2105 46 2205 41 46 2206 40 41 91 1500 93 44 2083 41 348 2209 40 2075 41 58 621 2105 61 2052 46 2008 46 2210 40 648 44 648 41 2126 61 2201 46 2208 40 2201 46 2202 40 2105 41 41 2075 46 2082 40 411 40 2105 41 44 411 40 2126 41 41 2127 61 2201 46 2208 40 2201 46 2202 40 2105 44 2201 46 2211 41 41 2075 46 2082 40 411 40 2105 41 44 411 40 2127 41 41 348 2212 40 2075 41 58 2075 46 2092 40 2075 46 2019 46 2213 46 2077 40 2102 40 2029 61 2075 46 2018 41 124 2102 40 2214 61 2075 46 2018 41 124 2102 40 2215 61 2075 46 2018 41 41 44 91 2075 46 2027 93 44 41 348 2216 40 2075 41 58 621 621 2075 46 2092 40 2052 46 2008 46 2077 40 2217 61 91 2075 46 2046 44 2075 46 2048 93 41 44 91 2075 46 2051 44 2075 46 2058 93 44 41 348 2218 40 2075 41 58 621 2219 46 2008 46 2009 40 2220 61 648 41 2221 61 2219 46 2008 46 2222 40 41 497 2075 46 2223 40 1500 41 58 2075 46 2183 40 2221 46 2147 40 41 44 91 93 41 2075 46 2183 40 2221 46 2077 40 2220 61 648 41 44 91 93 41 2075 46 2183 40 2221 46 2120 40 2220 61 648 41 44 91 93 41 2075 46 2183 40 2221 46 2224 40 123 648 58 1501 125 41 44 91 93 41 2075 46 2183 40 2221 46 2178 40 648 41 44 91 93 41 2075 46 2183 40 2221 46 2225 40 2226 40 648 41 41 44 91 93 41 2075 46 2183 40 2221 46 2103 40 648 44 648 41 44 91 93 41 2075 46 2183 40 2221 46 2111 40 41 44 91 93 41 2075 46 2183 40 2221 46 2042 40 2121 61 123 648 58 648 125 41 44 91 93 41 2075 46 2183 40 2221 46 2150 40 41 44 91 93 41 2221 46 2083 46 2227 61 1501 2163 61 648 497 2075 46 2164 40 2172 44 2163 41 58 2221 46 2042 40 2121 61 123 648 58 648 125 41 2075 46 2183 40 2221 46 2210 40 648 41 44 91 93 41 2075 46 2183 40 2221 46 2228 40 648 41 44 91 93 41 348 2229 40 2075 41 58 621 621 2075 46 2082 40 2130 40 2020 46 2008 46 2103 40 648 41 46 2111 40 41 41 44 1502 41 621 2105 61 2052 46 2008 46 2192 40 648 44 648 41 2201 46 2208 40 2201 46 2202 40 2105 41 41 348 2230 40 2075 41 58 621 621 621 2075 46 2092 40 2012 46 2008 46 2077 40 2199 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 46 2101 40 648 41 41 44 91 2075 46 2014 44 2075 46 2016 93 44 41 621 497 2075 46 2164 40 2172 44 648 41 58 2012 46 2008 46 2077 40 2199 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 46 2101 40 648 44 648 41 41 497 2075 46 2164 40 2172 44 648 41 58 2012 46 2008 46 2077 40 2199 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 46 2231 40 648 44 648 41 41 348 2232 40 2075 41 58 621 2075 46 2092 40 2020 46 2008 46 2231 40 648 44 2233 61 304 41 46 2101 40 648 41 46 2103 40 648 41 44 91 123 648 58 1501 125 44 123 648 58 1502 125 44 123 648 58 1502 125 93 41 2075 46 2092 40 2028 46 2008 46 2077 40 2234 61 2020 46 2008 46 2077 40 2021 61 648 41 46 2231 40 648 41 46 2101 40 648 41 41 44 91 2075 46 2027 93 44 41 348 2235 40 2075 41 58 621 621 2075 46 2082 40 2012 46 2008 46 2077 40 2199 61 40 41 41 46 2236 40 2010 61 648 41 44 1500 41 348 2237 40 2075 41 58 621 348 2238 40 41 58 450 2239 40 91 93 41 2240 61 2020 46 2008 46 2147 40 41 91 1500 93 348 2241 40 41 58 500 2240 46 2140 2075 46 2183 40 2020 46 2008 46 2077 40 2168 61 2238 40 41 41 44 91 93 41 2075 46 2082 40 411 40 2020 46 2008 46 2077 40 2168 61 2241 40 41 41 41 44 91 2240 93 41 348 2242 40 2075 41 58 621 2243 61 2040 46 2008 46 2077 40 2244 61 1505 41 2105 61 2040 46 2008 46 2077 40 2168 61 2243 41 2075 46 2092 40 2105 44 91 2075 46 2039 44 2075 46 2043 93 41 621 2075 46 2245 40 2243 46 2246 41 2243 61 2040 46 2008 46 2077 40 2244 61 1505 41 2105 61 2040 46 2008 46 2120 40 2168 61 2243 41 2075 46 2092 40 2105 44 91 2075 46 2044 44 2075 46 2045 93 41 621 2075 46 2245 40 2243 46 2246 41 2243 61 2040 46 2008 46 2077 40 2244 61 1505 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2168 61 2243 41 38 2102 40 2010 61 648 41 41 44 91 2075 46 2039 93 44 41 621 2075 46 2245 40 2243 46 2246 41 348 2247 40 2075 41 58 621 2075 46 2092 40 2052 46 2008 46 2120 40 2054 61 2075 46 2046 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2156 61 2075 46 2011 46 2010 41 44 91 2075 46 2011 44 2075 46 2017 44 2075 46 2018 93 44 41 348 2248 40 2075 41 58 621 621 621 2075 46 2082 40 2130 40 2012 46 2008 46 2103 40 648 41 41 44 1502 41 621 2075 46 2092 40 2020 46 2008 46 2222 40 41 124 2020 46 2008 46 2147 40 41 44 91 2075 46 2019 44 2075 46 2024 44 2075 46 2025 93 44 41 2075 46 2092 40 2020 46 2008 46 2147 40 41 124 2020 46 2008 46 2222 40 41 44 91 2075 46 2019 44 2075 46 2024 44 2075 46 2025 93 44 41 2075 46 2092 40 2020 46 2008 46 2222 40 41 38 2020 46 2008 46 2147 40 41 44 91 93 41 2075 46 2092 40 2020 46 2008 46 2147 40 41 38 2020 46 2008 46 2222 40 41 44 91 93 41 348 2249 40 2075 41 58 621 621 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2250 61 2075 46 2033 41 124 2102 40 2251 61 2075 46 2061 44 2010 61 648 41 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2251 61 2075 46 2061 44 2010 61 648 41 124 2102 40 2250 61 2075 46 2033 41 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2028 46 2008 46 2077 40 2102 40 2252 61 2075 46 2011 41 124 2102 40 2253 61 648 44 2010 61 648 41 41 44 91 2075 46 2027 93 44 41 2118 61 2034 46 2008 46 2009 40 2035 61 648 44 2021 61 2075 46 2025 41 2075 46 2092 40 2020 46 2008 46 2077 40 2102 40 2254 61 2075 46 2039 41 124 2102 40 2255 61 2118 41 41 44 91 2075 46 2019 44 2075 46 2025 93 44 41 2221 61 2020 46 2008 46 2077 40 2102 40 2254 61 2075 46 2039 41 124 2102 40 2255 61 2118 41 41 46 2083 2075 46 2082 40 2130 40 91 2098 385 2098 398 2221 46 2100 46 2101 40 41 392 2098 46 2099 614 2097 308 2221 46 2132 91 2098 46 2154 93 93 41 44 1501 41 348 2256 40 2075 41 58 648 2257 61 2012 46 2258 46 2259 2012 46 2258 46 2259 61 303 474 58 2075 46 2260 40 2012 46 2008 46 2147 40 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 382 58 2012 46 2258 46 2259 61 2257 348 2261 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2120 40 2149 61 648 41 44 2052 46 2008 46 2077 40 126 2102 40 2149 61 648 41 41 41 2075 46 2183 40 2052 46 2008 46 2120 40 2102 40 2149 61 648 41 124 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 40 2102 40 2149 61 648 41 124 2102 40 2149 61 648 41 41 41 41 2075 46 2183 40 2052 46 2008 46 2120 40 2102 40 2149 61 648 41 124 126 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 40 2102 40 2149 61 648 41 124 126 2102 40 2149 61 648 41 41 41 41 348 2262 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2120 40 126 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 126 2102 40 2149 61 648 41 41 41 348 2263 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2077 40 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 126 2102 40 2149 61 648 41 41 41 2075 46 2183 40 2052 46 2008 46 2077 40 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 2102 40 126 2102 40 2149 61 648 41 41 41 41 348 2264 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2120 40 2102 40 2265 61 91 648 44 648 93 41 41 44 2052 46 2008 46 2077 40 126 2102 40 2265 61 91 648 44 648 93 41 41 41 2075 46 2183 40 2052 46 2008 46 2077 40 2102 40 2265 61 91 648 44 648 93 41 41 44 2052 46 2008 46 2077 40 126 126 2102 40 2265 61 91 648 44 648 93 41 41 41 348 2266 40 2075 41 58 621 621 2221 61 2012 46 2008 46 2077 40 2155 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2011 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2077 40 2155 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2120 40 2155 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2120 40 2155 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2011 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2120 40 2157 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 348 2267 40 2075 41 58 621 621 2221 61 2012 46 2008 46 2077 40 2157 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2017 44 2075 46 2018 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 621 2221 61 2012 46 2008 46 2077 40 2268 61 2075 46 2011 41 2075 46 2092 40 2221 44 91 2075 46 2017 44 2075 46 2018 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 348 2269 40 2075 41 58 621 2221 61 2007 46 2008 46 2077 40 2270 61 304 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 621 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2092 40 2221 44 91 93 41 621 621 2221 61 2007 46 2008 46 2077 40 2271 61 304 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2092 40 2221 44 91 2075 46 2005 93 41 348 2272 40 2075 41 58 621 2221 61 2040 46 2008 46 2077 40 2273 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2043 44 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2040 46 2008 46 2077 40 2274 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 348 2275 40 2075 41 58 621 2221 61 2040 46 2008 46 2077 40 2273 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2221 61 2040 46 2008 46 2077 40 2274 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2221 61 2040 46 2008 46 2077 40 2276 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 348 2277 40 2075 41 58 621 621 2221 61 2040 46 2008 46 2077 40 2276 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2043 44 2075 46 2044 93 44 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2221 61 2040 46 2008 46 2077 40 2274 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 348 2278 40 2075 41 58 621 2221 61 2040 46 2008 46 2077 40 2175 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2221 61 2040 46 2008 46 2077 40 2175 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 348 2279 40 2075 41 58 621 2221 61 2012 46 2008 46 2077 40 2102 40 2155 61 304 41 124 2102 40 2015 61 2075 46 2011 41 41 2075 46 2092 40 2221 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 348 2280 40 2075 41 58 621 2125 61 2012 46 2008 46 2077 40 2155 61 304 41 2126 61 2012 46 2008 46 2077 40 2155 61 302 41 2127 61 2125 124 2126 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2127 61 2125 38 2126 2075 46 2092 40 2127 44 91 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2126 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 2127 61 2125 124 2126 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2127 61 2126 124 2125 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2125 61 2012 46 2008 46 2077 40 2155 61 304 41 2126 61 2012 46 2008 46 2077 40 2157 61 304 41 2127 61 2125 124 2126 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2127 61 2126 124 2125 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 348 2281 40 2075 41 58 2075 46 2092 40 2062 46 2008 46 2077 40 2102 40 2282 61 302 41 38 126 2102 40 2283 61 1503 41 41 44 91 2075 46 2061 93 44 41 348 2284 40 2075 41 58 621 2105 61 2040 46 2008 46 2225 40 2226 40 648 41 41 2105 61 2105 46 2077 40 126 2102 40 2285 61 1500 41 41 46 2103 40 648 41 2075 46 2085 40 648 44 2086 40 2105 46 2083 41 41 2075 46 2092 40 2105 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2044 44 2075 46 2045 93 41 348 2286 40 2075 41 58 2163 61 40 648 648 648 41 497 2075 46 2164 40 2180 44 2163 41 58 2012 46 2008 46 2077 40 2287 61 648 41 348 2288 40 2075 41 58 648 2069 61 2289 46 2008 46 2009 40 2010 61 648 41 2073 61 2289 46 2008 46 2009 40 2010 61 648 41 2290 61 2289 46 2008 46 2009 40 2010 61 648 41 2013 61 2291 46 2008 46 2009 40 2013 61 2069 41 2292 61 2293 46 2008 46 2009 40 2294 61 2073 41 2295 61 2296 46 2008 46 2009 40 2013 61 2290 41 2297 46 2008 46 2009 40 2013 61 2013 44 2292 61 2292 44 2295 61 2295 44 41 2105 61 2297 46 2008 46 2101 40 648 44 648 44 648 44 648 44 648 44 648 44 41 2075 46 2298 40 2105 46 2299 40 41 41 348 2300 40 2075 41 58 2075 46 2092 40 2020 46 2008 46 2077 40 126 2102 40 2301 61 2302 40 648 41 41 41 44 91 2075 46 2019 44 2075 46 2024 44 2075 46 2025 93 44 41 2075 46 2092 40 2020 46 2008 46 2077 40 2301 61 648 41 46 2077 40 126 2102 40 2301 61 2302 40 648 41 41 41 44 91 93 44 41 348 2303 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2042 61 2075 46 2033 41 44 91 2075 46 2044 44 2075 46 2045 93 44 41 348 2304 40 2075 41 58 2075 46 2092 40 2020 46 2008 46 2077 40 2026 61 304 41 44 91 2075 46 2019 44 2075 46 2024 93 44 41 2075 46 2092 40 2020 46 2008 46 2120 40 2026 61 304 41 44 91 2075 46 2025 93 41 
128860,Python,"class Parser (Recognizer):

    # self field maps from the serialized ATN string to the deserialized {@link ATN} with
    # bypass alternatives.
    #
    # @see ATNDeserializationOptions#isGenerateRuleBypassTransitions()
    #
    bypassAltsAtnCache = dict()

    def __init__(self, input, output=sys.stdout):
        super(Parser, self).__init__()
        # The input stream.
        self._input = None
        self._output = output
        # The error handling strategy for the parser. The default value is a new
        # instance of {@link DefaultErrorStrategy}.
        self._errHandler = DefaultErrorStrategy()
        self._precedenceStack = list()
        self._precedenceStack.append(0)
        # The {@link ParserRuleContext} object for the currently executing rule.
        # self is always non-null during the parsing process.
        self._ctx = None
        # Specifies whether or not the parser should construct a parse tree during
        # the parsing process. The default value is {@code true}.
        self.buildParseTrees = True
        # When {@link #setTrace}{@code (true)} is called, a reference to the
        # {@link TraceListener} is stored here so it can be easily removed in a
        # later call to {@link #setTrace}{@code (false)}. The listener itself is
        # implemented as a parser listener so self field is not directly used by
        # other parser methods.
        self._tracer = None
        # The list of {@link ParseTreeListener} listeners registered to receive
        # events during the parse.
        self._parseListeners = None
        # The number of syntax errors reported during parsing. self value is
        # incremented each time {@link #notifyErrorListeners} is called.
        self._syntaxErrors = 0
        self.setInputStream(input)

    # reset the parser's state#
    def reset(self):
        if self._input is not None:
            self._input.seek(0)
        self._errHandler.reset(self)
        self._ctx = None
        self._syntaxErrors = 0
        self.setTrace(False)
        self._precedenceStack = list()
        self._precedenceStack.append(0)
        if self._interp is not None:
            self._interp.reset()

    # Match current input symbol against {@code ttype}. If the symbol type
    # matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are
    # called to complete the match process.
    #
    # <p>If the symbol type does not match,
    # {@link ANTLRErrorStrategy#recoverInline} is called on the current error
    # strategy to attempt recovery. If {@link #getBuildParseTree} is
    # {@code true} and the token index of the symbol returned by
    # {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
    # the parse tree by calling {@link ParserRuleContext#addErrorNode}.</p>
    #
    # @param ttype the token type to match
    # @return the matched symbol
    # @throws RecognitionException if the current input symbol did not match
    # {@code ttype} and the error strategy could not recover from the
    # mismatched symbol

    def match(self, ttype):
        t = self.getCurrentToken()
        if t.type==ttype:
            self._errHandler.reportMatch(self)
            self.consume()
        else:
            t = self._errHandler.recoverInline(self)
            if self.buildParseTrees and t.tokenIndex==-1:
                # we must have conjured up a new token during single token insertion
                # if it's not the current symbol
                self._ctx.addErrorNode(t)
        return t

    # Match current input symbol as a wildcard. If the symbol type matches
    # (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}
    # and {@link #consume} are called to complete the match process.
    #
    # <p>If the symbol type does not match,
    # {@link ANTLRErrorStrategy#recoverInline} is called on the current error
    # strategy to attempt recovery. If {@link #getBuildParseTree} is
    # {@code true} and the token index of the symbol returned by
    # {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
    # the parse tree by calling {@link ParserRuleContext#addErrorNode}.</p>
    #
    # @return the matched symbol
    # @throws RecognitionException if the current input symbol did not match
    # a wildcard and the error strategy could not recover from the mismatched
    # symbol

    def matchWildcard(self):
        t = self.getCurrentToken()
        if t.type > 0:
            self._errHandler.reportMatch(self)
            self.consume()
        else:
            t = self._errHandler.recoverInline(self)
            if self.buildParseTrees and t.tokenIndex == -1:
                # we must have conjured up a new token during single token insertion
                # if it's not the current symbol
                self._ctx.addErrorNode(t)

        return t

    def getParseListeners(self):
        return list() if self._parseListeners is None else self._parseListeners

    # Registers {@code listener} to receive events during the parsing process.
    #
    # <p>To support output-preserving grammar transformations (including but not
    # limited to left-recursion removal, automated left-factoring, and
    # optimized code generation), calls to listener methods during the parse
    # may differ substantially from calls made by
    # {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In
    # particular, rule entry and exit events may occur in a different order
    # during the parse than after the parser. In addition, calls to certain
    # rule entry methods may be omitted.</p>
    #
    # <p>With the following specific exceptions, calls to listener events are
    # <em>deterministic</em>, i.e. for identical input the calls to listener
    # methods will be the same.</p>
    #
    # <ul>
    # <li>Alterations to the grammar used to generate code may change the
    # behavior of the listener calls.</li>
    # <li>Alterations to the command line options passed to ANTLR 4 when
    # generating the parser may change the behavior of the listener calls.</li>
    # <li>Changing the version of the ANTLR Tool used to generate the parser
    # may change the behavior of the listener calls.</li>
    # </ul>
    #
    # @param listener the listener to add
    #
    # @throws NullPointerException if {@code} listener is {@code null}
    #
    def addParseListener(self, listener):
        if listener is None:
            raise ReferenceError(""listener"")
        if self._parseListeners is None:
            self._parseListeners = []
        self._parseListeners.append(listener)

    #
    # Remove {@code listener} from the list of parse listeners.
    #
    # <p>If {@code listener} is {@code null} or has not been added as a parse
    # listener, self method does nothing.</p>
    # @param listener the listener to remove
    #
    def removeParseListener(self, listener):
        if self._parseListeners is not None:
            self._parseListeners.remove(listener)
            if len(self._parseListeners)==0:
                    self._parseListeners = None

    # Remove all parse listeners.
    def removeParseListeners(self):
        self._parseListeners = None

    # Notify any parse listeners of an enter rule event.
    def triggerEnterRuleEvent(self):
        if self._parseListeners is not None:
            for listener in self._parseListeners:
                listener.enterEveryRule(self._ctx)
                self._ctx.enterRule(listener)

    #
    # Notify any parse listeners of an exit rule event.
    #
    # @see #addParseListener
    #
    def triggerExitRuleEvent(self):
        if self._parseListeners is not None:
            # reverse order walk of listeners
            for listener in reversed(self._parseListeners):
                self._ctx.exitRule(listener)
                listener.exitEveryRule(self._ctx)

    # Gets the number of syntax errors reported during parsing. This value is
    # incremented each time {@link #notifyErrorListeners} is called.
    #
    # @see #notifyErrorListeners
    #
    def getNumberOfSyntaxErrors(self):
        return self._syntaxErrors

    def getTokenFactory(self):
        return self._input.tokenSource._factory

    # Tell our token source and error strategy about a new way to create tokens.#
    def setTokenFactory(self, factory):
        self._input.tokenSource._factory = factory

    # The ATN with bypass alternatives is expensive to create so we create it
    # lazily.
    #
    # @throws UnsupportedOperationException if the current parser does not
    # implement the {@link #getSerializedATN()} method.
    #
    def getATNWithBypassAlts(self):
        serializedAtn = self.getSerializedATN()
        if serializedAtn is None:
            raise UnsupportedOperationException(""The current parser does not support an ATN with bypass alternatives."")
        result = self.bypassAltsAtnCache.get(serializedAtn, None)
        if result is None:
            deserializationOptions = ATNDeserializationOptions()
            deserializationOptions.generateRuleBypassTransitions = True
            result = ATNDeserializer(deserializationOptions).deserialize(serializedAtn)
            self.bypassAltsAtnCache[serializedAtn] = result
        return result

    # The preferred method of getting a tree pattern. For example, here's a
    # sample use:
    #
    # <pre>
    # ParseTree t = parser.expr();
    # ParseTreePattern p = parser.compileParseTreePattern(""&lt;ID&gt;+0"", MyParser.RULE_expr);
    # ParseTreeMatch m = p.match(t);
    # String id = m.get(""ID"");
    # </pre>
    #
    def compileParseTreePattern(self, pattern, patternRuleIndex, lexer = None):
        if lexer is None:
            if self.getTokenStream() is not None:
                tokenSource = self.getTokenStream().tokenSource
                if isinstance( tokenSource, Lexer ):
                    lexer = tokenSource
        if lexer is None:
            raise UnsupportedOperationException(""Parser can't discover a lexer to use"")

        m = ParseTreePatternMatcher(lexer, self)
        return m.compile(pattern, patternRuleIndex)


    def getInputStream(self):
        return self.getTokenStream()

    def setInputStream(self, input):
        self.setTokenStream(input)

    def getTokenStream(self):
        return self._input

    # Set the token stream and reset the parser.#
    def setTokenStream(self, input):
        self._input = None
        self.reset()
        self._input = input

    # Match needs to return the current input symbol, which gets put
    #  into the label for the associated token ref; e.g., x=ID.
    #
    def getCurrentToken(self):
        return self._input.LT(1)

    def notifyErrorListeners(self, msg, offendingToken = None, e = None):
        if offendingToken is None:
            offendingToken = self.getCurrentToken()
        self._syntaxErrors += 1
        line = offendingToken.line
        column = offendingToken.column
        listener = self.getErrorListenerDispatch()
        listener.syntaxError(self, offendingToken, line, column, msg, e)

    #
    # Consume and return the {@linkplain #getCurrentToken current symbol}.
    #
    # <p>E.g., given the following input with {@code A} being the current
    # lookahead symbol, self function moves the cursor to {@code B} and returns
    # {@code A}.</p>
    #
    # <pre>
    #  A B
    #  ^
    # </pre>
    #
    # If the parser is not in error recovery mode, the consumed symbol is added
    # to the parse tree using {@link ParserRuleContext#addChild(Token)}, and
    # {@link ParseTreeListener#visitTerminal} is called on any parse listeners.
    # If the parser <em>is</em> in error recovery mode, the consumed symbol is
    # added to the parse tree using
    # {@link ParserRuleContext#addErrorNode(Token)}, and
    # {@link ParseTreeListener#visitErrorNode} is called on any parse
    # listeners.
    #
    def consume(self):
        o = self.getCurrentToken()
        if o.type != Token.EOF:
            self.getInputStream().consume()
        hasListener = self._parseListeners is not None and len(self._parseListeners)>0
        if self.buildParseTrees or hasListener:
            if self._errHandler.inErrorRecoveryMode(self):
                node = self._ctx.addErrorNode(o)
            else:
                node = self._ctx.addTokenNode(o)
            if hasListener:
                for listener in self._parseListeners:
                    if isinstance(node, ErrorNode):
                        listener.visitErrorNode(node)
                    elif isinstance(node, TerminalNode):
                        listener.visitTerminal(node)
        return o

    def addContextToParseTree(self):
        # add current context to parent if we have a parent
        if self._ctx.parentCtx is not None:
            self._ctx.parentCtx.addChild(self._ctx)

    # Always called by generated parsers upon entry to a rule. Access field
    # {@link #_ctx} get the current context.
    #
    def enterRule(self, localctx , state , ruleIndex ):
        self.state = state
        self._ctx = localctx
        self._ctx.start = self._input.LT(1)
        if self.buildParseTrees:
            self.addContextToParseTree()
        if self._parseListeners  is not None:
            self.triggerEnterRuleEvent()

    def exitRule(self):
        self._ctx.stop = self._input.LT(-1)
        # trigger event on _ctx, before it reverts to parent
        if self._parseListeners is not None:
            self.triggerExitRuleEvent()
        self.state = self._ctx.invokingState
        self._ctx = self._ctx.parentCtx

    def enterOuterAlt(self, localctx, altNum):
        localctx.setAltNumber(altNum)
        # if we have new localctx, make sure we replace existing ctx
        # that is previous child of parse tree
        if self.buildParseTrees and self._ctx != localctx:
            if self._ctx.parentCtx is not None:
                self._ctx.parentCtx.removeLastChild()
                self._ctx.parentCtx.addChild(localctx)
        self._ctx = localctx

    # Get the precedence level for the top-most precedence rule.
    #
    # @return The precedence level for the top-most precedence rule, or -1 if
    # the parser context is not nested within a precedence rule.
    #
    def getPrecedence(self):
        if len(self._precedenceStack)==0:
            return -1
        else:
            return self._precedenceStack[-1]

    def enterRecursionRule(self, localctx, state, ruleIndex, precedence):
        self.state = state
        self._precedenceStack.append(precedence)
        self._ctx = localctx
        self._ctx.start = self._input.LT(1)
        if self._parseListeners is not None:
            self.triggerEnterRuleEvent() # simulates rule entry for left-recursive rules

    #
    # Like {@link #enterRule} but for recursive rules.
    #
    def pushNewRecursionContext(self, localctx, state, ruleIndex):
        previous = self._ctx
        previous.parentCtx = localctx
        previous.invokingState = state
        previous.stop = self._input.LT(-1)

        self._ctx = localctx
        self._ctx.start = previous.start
        if self.buildParseTrees:
            self._ctx.addChild(previous)

        if self._parseListeners is not None:
            self.triggerEnterRuleEvent() # simulates rule entry for left-recursive rules

    def unrollRecursionContexts(self, parentCtx):
        self._precedenceStack.pop()
        self._ctx.stop = self._input.LT(-1)
        retCtx = self._ctx # save current ctx (return value)
        # unroll so _ctx is as it was before call to recursive method
        if self._parseListeners is not None:
            while self._ctx is not parentCtx:
                self.triggerExitRuleEvent()
                self._ctx = self._ctx.parentCtx
        else:
            self._ctx = parentCtx

        # hook into tree
        retCtx.parentCtx = parentCtx

        if self.buildParseTrees and parentCtx is not None:
            # add return ctx into invoking rule's tree
            parentCtx.addChild(retCtx)

    def getInvokingContext(self, ruleIndex):
        ctx = self._ctx
        while ctx is not None:
            if ctx.ruleIndex == ruleIndex:
                return ctx
            ctx = ctx.parentCtx
        return None


    def precpred(self, localctx , precedence):
        return precedence >= self._precedenceStack[-1]

    def inContext(self, context):
        # TODO: useful in parser?
        return False

    #
    # Checks whether or not {@code symbol} can follow the current state in the
    # ATN. The behavior of self method is equivalent to the following, but is
    # implemented such that the complete context-sensitive follow set does not
    # need to be explicitly constructed.
    #
    # <pre>
    # return getExpectedTokens().contains(symbol);
    # </pre>
    #
    # @param symbol the symbol type to check
    # @return {@code true} if {@code symbol} can follow the current state in
    # the ATN, otherwise {@code false}.
    #
    def isExpectedToken(self, symbol):
        atn = self._interp.atn
        ctx = self._ctx
        s = atn.states[self.state]
        following = atn.nextTokens(s)
        if symbol in following:
            return True
        if not Token.EPSILON in following:
            return False

        while ctx is not None and ctx.invokingState>=0 and Token.EPSILON in following:
            invokingState = atn.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            following = atn.nextTokens(rt.followState)
            if symbol in following:
                return True
            ctx = ctx.parentCtx

        if Token.EPSILON in following and symbol == Token.EOF:
            return True
        else:
            return False

    # Computes the set of input symbols which could follow the current parser
    # state and context, as given by {@link #getState} and {@link #getContext},
    # respectively.
    #
    # @see ATN#getExpectedTokens(int, RuleContext)
    #
    def getExpectedTokens(self):
        return self._interp.atn.getExpectedTokens(self.state, self._ctx)

    def getExpectedTokensWithinCurrentRule(self):
        atn = self._interp.atn
        s = atn.states[self.state]
        return atn.nextTokens(s)

    # Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.#
    def getRuleIndex(self, ruleName):
        ruleIndex = self.getRuleIndexMap().get(ruleName, None)
        if ruleIndex is not None:
            return ruleIndex
        else:
            return -1

    # Return List&lt;String&gt; of the rule names in your parser instance
    #  leading up to a call to the current rule.  You could override if
    #  you want more details such as the file/line info of where
    #  in the ATN a rule is invoked.
    #
    #  this is very useful for error messages.
    #
    def getRuleInvocationStack(self, p=None):
        if p is None:
            p = self._ctx
        stack = list()
        while p is not None:
            # compute what follows who invoked us
            ruleIndex = p.getRuleIndex()
            if ruleIndex<0:
                stack.append(""n/a"")
            else:
                stack.append(self.ruleNames[ruleIndex])
            p = p.parentCtx
        return stack

    # For debugging and other purposes.#
    def getDFAStrings(self):
        return [ unicode(dfa) for dfa in self._interp.decisionToDFA]

    # For debugging and other purposes.#
    def dumpDFA(self):
        seenOne = False
        for i in range(0, len(self._interp.decisionToDFA)):
            dfa = self._interp.decisionToDFA[i]
            if len(dfa.states)>0:
                if seenOne:
                    print(file=self._output)
                print(""Decision "" + str(dfa.decision) + "":"", file=self._output)
                print(dfa.toString(self.literalNames, self.symbolicNames), end='', file=self._output)
                seenOne = True


    def getSourceName(self):
        return self._input.sourceName

    # During a parse is sometimes useful to listen in on the rule entry and exit
    #  events as well as token matches. self is for quick and dirty debugging.
    #
    def setTrace(self, trace):
        if not trace:
            self.removeParseListener(self._tracer)
            self._tracer = None
        else:
            if self._tracer is not None:
                self.removeParseListener(self._tracer)
            self._tracer = TraceListener(self)
            self.addParseListener(self._tracer)",1,334 2000 40 2001 41 58 621 621 621 621 621 2002 61 2003 40 41 348 2004 40 2005 44 2006 44 2007 61 2008 46 2009 41 58 463 40 2000 44 2005 41 46 2004 40 41 621 2005 46 2010 61 303 2005 46 2011 61 2007 621 621 2005 46 2012 61 2013 40 41 2005 46 2014 61 411 40 41 2005 46 2014 46 2015 40 1500 41 621 621 2005 46 2016 61 303 621 621 2005 46 2017 61 304 621 621 621 621 621 2005 46 2018 61 303 621 621 2005 46 2019 61 303 621 621 2005 46 2020 61 1500 2005 46 2021 40 2006 41 621 348 2022 40 2005 41 58 392 2005 46 2010 407 422 303 58 2005 46 2010 46 2023 40 1500 41 2005 46 2012 46 2022 40 2005 41 2005 46 2016 61 303 2005 46 2020 61 1500 2005 46 2024 40 302 41 2005 46 2014 61 411 40 41 2005 46 2014 46 2015 40 1500 41 392 2005 46 2025 407 422 303 58 2005 46 2025 46 2022 40 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2026 40 2005 44 2027 41 58 2028 61 2005 46 2029 40 41 392 2028 46 2030 614 2027 58 2005 46 2012 46 2031 40 2005 41 2005 46 2032 40 41 360 58 2028 61 2005 46 2012 46 2033 40 2005 41 392 2005 46 2017 308 2028 46 2034 614 45 1501 58 621 621 2005 46 2016 46 2035 40 2028 41 450 2028 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2036 40 2005 41 58 2028 61 2005 46 2029 40 41 392 2028 46 2030 62 1500 58 2005 46 2012 46 2031 40 2005 41 2005 46 2032 40 41 360 58 2028 61 2005 46 2012 46 2033 40 2005 41 392 2005 46 2017 308 2028 46 2034 614 45 1501 58 621 621 2005 46 2016 46 2035 40 2028 41 450 2028 348 2037 40 2005 41 58 450 411 40 41 392 2005 46 2019 407 303 360 2005 46 2019 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2038 40 2005 44 2039 41 58 392 2039 407 303 58 440 2040 40 648 41 392 2005 46 2019 407 303 58 2005 46 2019 61 91 93 2005 46 2019 46 2015 40 2039 41 621 621 621 621 621 621 621 348 2041 40 2005 44 2039 41 58 392 2005 46 2019 407 422 303 58 2005 46 2019 46 2042 40 2039 41 392 2043 40 2005 46 2019 41 614 1500 58 2005 46 2019 61 303 621 348 2044 40 2005 41 58 2005 46 2019 61 303 621 348 2045 40 2005 41 58 392 2005 46 2019 407 422 303 58 385 2039 398 2005 46 2019 58 2039 46 2046 40 2005 46 2016 41 2005 46 2016 46 2047 40 2039 41 621 621 621 621 621 348 2048 40 2005 41 58 392 2005 46 2019 407 422 303 58 621 385 2039 398 2049 40 2005 46 2019 41 58 2005 46 2016 46 2050 40 2039 41 2039 46 2051 40 2005 46 2016 41 621 621 621 621 621 348 2052 40 2005 41 58 450 2005 46 2020 348 2053 40 2005 41 58 450 2005 46 2010 46 2054 46 2055 621 348 2056 40 2005 44 2057 41 58 2005 46 2010 46 2054 46 2055 61 2057 621 621 621 621 621 621 348 2058 40 2005 41 58 2059 61 2005 46 2060 40 41 392 2059 407 303 58 440 2061 40 648 41 2062 61 2005 46 2002 46 2063 40 2059 44 303 41 392 2062 407 303 58 2064 61 2065 40 41 2064 46 2066 61 304 2062 61 2067 40 2064 41 46 2068 40 2059 41 2005 46 2002 91 2059 93 61 2062 450 2062 621 621 621 621 621 621 621 621 621 621 348 2069 40 2005 44 2070 44 2071 44 2072 61 303 41 58 392 2072 407 303 58 392 2005 46 2073 40 41 407 422 303 58 2054 61 2005 46 2073 40 41 46 2054 392 2074 40 2054 44 2075 41 58 2072 61 2054 392 2072 407 303 58 440 2061 40 648 41 2076 61 2077 40 2072 44 2005 41 450 2076 46 2078 40 2070 44 2071 41 348 2079 40 2005 41 58 450 2005 46 2073 40 41 348 2021 40 2005 44 2006 41 58 2005 46 2080 40 2006 41 348 2073 40 2005 41 58 450 2005 46 2010 621 348 2080 40 2005 44 2006 41 58 2005 46 2010 61 303 2005 46 2022 40 41 2005 46 2010 61 2006 621 621 621 348 2029 40 2005 41 58 450 2005 46 2010 46 2081 40 1501 41 348 2082 40 2005 44 2083 44 2084 61 303 44 2085 61 303 41 58 392 2084 407 303 58 2084 61 2005 46 2029 40 41 2005 46 2020 636 1501 410 61 2084 46 410 2086 61 2084 46 2086 2039 61 2005 46 2087 40 41 2039 46 2088 40 2005 44 2084 44 410 44 2086 44 2083 44 2085 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2032 40 2005 41 58 2089 61 2005 46 2029 40 41 392 2089 46 2030 631 2090 46 2091 58 2005 46 2079 40 41 46 2032 40 41 2092 61 2005 46 2019 407 422 303 308 2043 40 2005 46 2019 41 62 1500 392 2005 46 2017 428 2092 58 392 2005 46 2012 46 2093 40 2005 41 58 2094 61 2005 46 2016 46 2035 40 2089 41 360 58 2094 61 2005 46 2016 46 2095 40 2089 41 392 2092 58 385 2039 398 2005 46 2019 58 392 2074 40 2094 44 2096 41 58 2039 46 2097 40 2094 41 359 2074 40 2094 44 2098 41 58 2039 46 2099 40 2094 41 450 2089 348 2100 40 2005 41 58 621 392 2005 46 2016 46 2101 407 422 303 58 2005 46 2016 46 2101 46 2102 40 2005 46 2016 41 621 621 621 348 2047 40 2005 44 2103 44 2104 44 2105 41 58 2005 46 2104 61 2104 2005 46 2016 61 2103 2005 46 2016 46 2106 61 2005 46 2010 46 2081 40 1501 41 392 2005 46 2017 58 2005 46 2100 40 41 392 2005 46 2019 407 422 303 58 2005 46 2045 40 41 348 2050 40 2005 41 58 2005 46 2016 46 2107 61 2005 46 2010 46 2081 40 45 1501 41 621 392 2005 46 2019 407 422 303 58 2005 46 2048 40 41 2005 46 2104 61 2005 46 2016 46 2108 2005 46 2016 61 2005 46 2016 46 2101 348 2109 40 2005 44 2103 44 2110 41 58 2103 46 2111 40 2110 41 621 621 392 2005 46 2017 308 2005 46 2016 631 2103 58 392 2005 46 2016 46 2101 407 422 303 58 2005 46 2016 46 2101 46 2112 40 41 2005 46 2016 46 2101 46 2102 40 2103 41 2005 46 2016 61 2103 621 621 621 621 621 348 2113 40 2005 41 58 392 2043 40 2005 46 2014 41 614 1500 58 450 45 1501 360 58 450 2005 46 2014 91 45 1501 93 348 2114 40 2005 44 2103 44 2104 44 2105 44 2115 41 58 2005 46 2104 61 2104 2005 46 2014 46 2015 40 2115 41 2005 46 2016 61 2103 2005 46 2016 46 2106 61 2005 46 2010 46 2081 40 1501 41 392 2005 46 2019 407 422 303 58 2005 46 2045 40 41 621 621 621 621 348 2116 40 2005 44 2103 44 2104 44 2105 41 58 2117 61 2005 46 2016 2117 46 2101 61 2103 2117 46 2108 61 2104 2117 46 2107 61 2005 46 2010 46 2081 40 45 1501 41 2005 46 2016 61 2103 2005 46 2016 46 2106 61 2117 46 2106 392 2005 46 2017 58 2005 46 2016 46 2102 40 2117 41 392 2005 46 2019 407 422 303 58 2005 46 2045 40 41 621 348 2118 40 2005 44 2101 41 58 2005 46 2014 46 2119 40 41 2005 46 2016 46 2107 61 2005 46 2010 46 2081 40 45 1501 41 2120 61 2005 46 2016 621 621 392 2005 46 2019 407 422 303 58 496 2005 46 2016 407 422 2101 58 2005 46 2048 40 41 2005 46 2016 61 2005 46 2016 46 2101 360 58 2005 46 2016 61 2101 621 2120 46 2101 61 2101 392 2005 46 2017 308 2101 407 422 303 58 621 2101 46 2102 40 2120 41 348 2121 40 2005 44 2105 41 58 2122 61 2005 46 2016 496 2122 407 422 303 58 392 2122 46 2105 614 2105 58 450 2122 2122 61 2122 46 2101 450 303 348 2123 40 2005 44 2103 44 2115 41 58 450 2115 615 2005 46 2014 91 45 1501 93 348 2124 40 2005 44 2125 41 58 621 450 302 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2126 40 2005 44 2127 41 58 2128 61 2005 46 2025 46 2128 2122 61 2005 46 2016 2129 61 2128 46 2130 91 2005 46 2104 93 2131 61 2128 46 2132 40 2129 41 392 2127 398 2131 58 450 304 392 422 2090 46 2133 398 2131 58 450 302 496 2122 407 422 303 308 2122 46 2108 615 1500 308 2090 46 2133 398 2131 58 2108 61 2128 46 2130 91 2122 46 2108 93 2134 61 2108 46 2135 91 1500 93 2131 61 2128 46 2132 40 2134 46 2136 41 392 2127 398 2131 58 450 304 2122 61 2122 46 2101 392 2090 46 2133 398 2131 308 2127 614 2090 46 2091 58 450 304 360 58 450 302 621 621 621 621 621 621 348 2137 40 2005 41 58 450 2005 46 2025 46 2128 46 2137 40 2005 46 2104 44 2005 46 2016 41 348 2138 40 2005 41 58 2128 61 2005 46 2025 46 2128 2129 61 2128 46 2130 91 2005 46 2104 93 450 2128 46 2132 40 2129 41 621 348 2139 40 2005 44 2140 41 58 2105 61 2005 46 2141 40 41 46 2063 40 2140 44 303 41 392 2105 407 422 303 58 450 2105 360 58 450 45 1501 621 621 621 621 621 621 621 348 2142 40 2005 44 2143 61 303 41 58 392 2143 407 303 58 2143 61 2005 46 2016 2144 61 411 40 41 496 2143 407 422 303 58 621 2105 61 2143 46 2139 40 41 392 2105 60 1500 58 2144 46 2015 40 648 41 360 58 2144 46 2015 40 2005 46 2145 91 2105 93 41 2143 61 2143 46 2101 450 2144 621 348 2146 40 2005 41 58 450 91 2147 40 2148 41 385 2148 398 2005 46 2025 46 2149 93 621 348 2150 40 2005 41 58 2151 61 302 385 2152 398 2153 40 1500 44 2043 40 2005 46 2025 46 2149 41 41 58 2148 61 2005 46 2025 46 2149 91 2152 93 392 2043 40 2148 46 2130 41 62 1500 58 392 2151 58 436 40 2154 61 2005 46 2011 41 436 40 648 43 2155 40 2148 46 2156 41 43 648 44 2154 61 2005 46 2011 41 436 40 2148 46 2157 40 2005 46 2158 44 2005 46 2159 41 44 2160 61 648 44 2154 61 2005 46 2011 41 2151 61 304 348 2161 40 2005 41 58 450 2005 46 2010 46 2162 621 621 621 348 2024 40 2005 44 2163 41 58 392 422 2163 58 2005 46 2041 40 2005 46 2018 41 2005 46 2018 61 303 360 58 392 2005 46 2018 407 422 303 58 2005 46 2041 40 2005 46 2018 41 2005 46 2018 61 2164 40 2005 41 2005 46 2038 40 2005 46 2018 41 
128660,Python,"class Lexer(Recognizer, TokenSource):
    __slots__ = (
        '_input', '_output', '_factory', '_tokenFactorySourcePair', '_token',
        '_tokenStartCharIndex', '_tokenStartLine', '_tokenStartColumn',
        '_hitEOF', '_channel', '_type', '_modeStack', '_mode', '_text'
    )

    DEFAULT_MODE = 0
    MORE = -2
    SKIP = -3

    DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL
    HIDDEN = Token.HIDDEN_CHANNEL
    MIN_CHAR_VALUE = 0x0000
    MAX_CHAR_VALUE = 0x10FFFF

    def __init__(self, input:InputStream, output:TextIO = sys.stdout):
        super().__init__()
        self._input = input
        self._output = output
        self._factory = CommonTokenFactory.DEFAULT
        self._tokenFactorySourcePair = (self, input)

        self._interp = None # child classes must populate this

        # The goal of all lexer rules/methods is to create a token object.
        #  self is an instance variable as multiple rules may collaborate to
        #  create a single token.  nextToken will return self object after
        #  matching lexer rule(s).  If you subclass to allow multiple token
        #  emissions, then set self to the last token to be matched or
        #  something nonnull so that the auto token emit mechanism will not
        #  emit another token.
        self._token = None

        # What character index in the stream did the current token start at?
        #  Needed, for example, to get the text for current token.  Set at
        #  the start of nextToken.
        self._tokenStartCharIndex = -1

        # The line on which the first character of the token resides#/
        self._tokenStartLine = -1

        # The character position of first character within the line#/
        self._tokenStartColumn = -1

        # Once we see EOF on char stream, next token will be EOF.
        #  If you have DONE : EOF ; then you see DONE EOF.
        self._hitEOF = False

        # The channel number for the current token#/
        self._channel = Token.DEFAULT_CHANNEL

        # The token type for the current token#/
        self._type = Token.INVALID_TYPE

        self._modeStack = []
        self._mode = self.DEFAULT_MODE

        # You can set the text for the current token to override what is in
        #  the input char buffer.  Use setText() or can set self instance var.
        #/
        self._text = None


    def reset(self):
        # wack Lexer state variables
        if self._input is not None:
            self._input.seek(0) # rewind the input
        self._token = None
        self._type = Token.INVALID_TYPE
        self._channel = Token.DEFAULT_CHANNEL
        self._tokenStartCharIndex = -1
        self._tokenStartColumn = -1
        self._tokenStartLine = -1
        self._text = None

        self._hitEOF = False
        self._mode = Lexer.DEFAULT_MODE
        self._modeStack = []

        self._interp.reset()

    # Return a token from self source; i.e., match a token on the char
    #  stream.
    def nextToken(self):
        if self._input is None:
            raise IllegalStateException(""nextToken requires a non-null input stream."")

        # Mark start location in char stream so unbuffered streams are
        # guaranteed at least have text of current token
        tokenStartMarker = self._input.mark()
        try:
            while True:
                if self._hitEOF:
                    self.emitEOF()
                    return self._token
                self._token = None
                self._channel = Token.DEFAULT_CHANNEL
                self._tokenStartCharIndex = self._input.index
                self._tokenStartColumn = self._interp.column
                self._tokenStartLine = self._interp.line
                self._text = None
                continueOuter = False
                while True:
                    self._type = Token.INVALID_TYPE
                    ttype = self.SKIP
                    try:
                        ttype = self._interp.match(self._input, self._mode)
                    except LexerNoViableAltException as e:
                        self.notifyListeners(e)		# report error
                        self.recover(e)
                    if self._input.LA(1)==Token.EOF:
                        self._hitEOF = True
                    if self._type == Token.INVALID_TYPE:
                        self._type = ttype
                    if self._type == self.SKIP:
                        continueOuter = True
                        break
                    if self._type!=self.MORE:
                        break
                if continueOuter:
                    continue
                if self._token is None:
                    self.emit()
                return self._token
        finally:
            # make sure we release marker after match or
            # unbuffered char stream will keep buffering
            self._input.release(tokenStartMarker)

    # Instruct the lexer to skip creating a token for current lexer rule
    #  and look for another token.  nextToken() knows to keep looking when
    #  a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
    #  if token==null at end of any token rule, it creates one for you
    #  and emits it.
    #/
    def skip(self):
        self._type = self.SKIP

    def more(self):
        self._type = self.MORE

    def mode(self, m:int):
        self._mode = m

    def pushMode(self, m:int):
        if self._interp.debug:
            print(""pushMode "" + str(m), file=self._output)
        self._modeStack.append(self._mode)
        self.mode(m)

    def popMode(self):
        if len(self._modeStack)==0:
            raise Exception(""Empty Stack"")
        if self._interp.debug:
            print(""popMode back to ""+ self._modeStack[:-1], file=self._output)
        self.mode( self._modeStack.pop() )
        return self._mode

    # Set the char stream and reset the lexer#/
    @property
    def inputStream(self):
        return self._input

    @inputStream.setter
    def inputStream(self, input:InputStream):
        self._input = None
        self._tokenFactorySourcePair = (self, self._input)
        self.reset()
        self._input = input
        self._tokenFactorySourcePair = (self, self._input)

    @property
    def sourceName(self):
        return self._input.sourceName

    # By default does not support multiple emits per nextToken invocation
    #  for efficiency reasons.  Subclass and override self method, nextToken,
    #  and getToken (to push tokens into a list and pull from that list
    #  rather than a single variable as self implementation does).
    #/
    def emitToken(self, token:Token):
        self._token = token

    # The standard method called to automatically emit a token at the
    #  outermost lexical rule.  The token object should point into the
    #  char buffer start..stop.  If there is a text override in 'text',
    #  use that to set the token's text.  Override self method to emit
    #  custom Token objects or provide a new factory.
    #/
    def emit(self):
        t = self._factory.create(self._tokenFactorySourcePair, self._type, self._text, self._channel, self._tokenStartCharIndex,
                                 self.getCharIndex()-1, self._tokenStartLine, self._tokenStartColumn)
        self.emitToken(t)
        return t

    def emitEOF(self):
        cpos = self.column
        lpos = self.line
        eof = self._factory.create(self._tokenFactorySourcePair, Token.EOF, None, Token.DEFAULT_CHANNEL, self._input.index,
                                   self._input.index-1, lpos, cpos)
        self.emitToken(eof)
        return eof

    @property
    def type(self):
        return self._type

    @type.setter
    def type(self, type:int):
        self._type = type

    @property
    def line(self):
        return self._interp.line

    @line.setter
    def line(self, line:int):
        self._interp.line = line

    @property
    def column(self):
        return self._interp.column

    @column.setter
    def column(self, column:int):
        self._interp.column = column

    # What is the index of the current character of lookahead?#/
    def getCharIndex(self):
        return self._input.index

    # Return the text matched so far for the current token or any
    #  text override.
    @property
    def text(self):
        if self._text is not None:
            return self._text
        else:
            return self._interp.getText(self._input)

    # Set the complete text of self token; it wipes any previous
    #  changes to the text.
    @text.setter
    def text(self, txt:str):
        self._text = txt

    # Return a list of all Token objects in input char stream.
    #  Forces load of all tokens. Does not include EOF token.
    #/
    def getAllTokens(self):
        tokens = []
        t = self.nextToken()
        while t.type!=Token.EOF:
            tokens.append(t)
            t = self.nextToken()
        return tokens

    def notifyListeners(self, e:LexerNoViableAltException):
        start = self._tokenStartCharIndex
        stop = self._input.index
        text = self._input.getText(start, stop)
        msg = ""token recognition error at: '"" + self.getErrorDisplay(text) + ""'""
        listener = self.getErrorListenerDispatch()
        listener.syntaxError(self, None, self._tokenStartLine, self._tokenStartColumn, msg, e)

    def getErrorDisplay(self, s:str):
        with StringIO() as buf:
            for c in s:
                buf.write(self.getErrorDisplayForChar(c))
            return buf.getvalue()

    def getErrorDisplayForChar(self, c:str):
        if ord(c[0])==Token.EOF:
            return ""<EOF>""
        elif c=='\n':
            return ""\\n""
        elif c=='\t':
            return ""\\t""
        elif c=='\r':
            return ""\\r""
        else:
            return c

    def getCharErrorDisplay(self, c:str):
        return ""'"" + self.getErrorDisplayForChar(c) + ""'""

    # Lexers can normally match any char in it's vocabulary after matching
    #  a token, so do the easy thing and just kill a character and hope
    #  it all works out.  You can instead use the rule invocation stack
    #  to do sophisticated error recovery if you are in a fragment rule.
    #/
    def recover(self, re:RecognitionException):
        if self._input.LA(1) != Token.EOF:
            if isinstance(re, LexerNoViableAltException):
                    # skip a char and try again
                    self._interp.consume(self._input)
            else:
                # TODO: Do we lose character or line position information?
                self._input.consume()",1,334 2000 40 2001 44 2002 41 58 2003 61 40 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 41 2004 61 1500 2005 61 45 1502 2006 61 45 1502 2007 61 2008 46 2009 2010 61 2008 46 2011 2012 61 1500 2013 61 1508 348 2014 40 2015 44 2016 58 2017 44 2018 58 2019 61 2020 46 2021 41 58 463 40 41 46 2014 40 41 2015 46 2022 61 2016 2015 46 2023 61 2018 2015 46 2024 61 2025 46 2026 2015 46 2027 61 40 2015 44 2016 41 2015 46 2028 61 303 621 621 621 621 621 621 621 621 2015 46 2029 61 303 621 621 621 2015 46 2030 61 45 1501 621 2015 46 2031 61 45 1501 621 2015 46 2032 61 45 1501 621 621 2015 46 2033 61 302 621 2015 46 2034 61 2008 46 2009 621 2015 46 2035 61 2008 46 2036 2015 46 2037 61 91 93 2015 46 2038 61 2015 46 2004 621 621 621 2015 46 2039 61 303 348 2040 40 2015 41 58 621 392 2015 46 2022 407 422 303 58 2015 46 2022 46 2041 40 1500 41 621 2015 46 2029 61 303 2015 46 2035 61 2008 46 2036 2015 46 2034 61 2008 46 2009 2015 46 2030 61 45 1501 2015 46 2032 61 45 1501 2015 46 2031 61 45 1501 2015 46 2039 61 303 2015 46 2033 61 302 2015 46 2038 61 2000 46 2004 2015 46 2037 61 91 93 2015 46 2028 46 2040 40 41 621 621 348 2042 40 2015 41 58 392 2015 46 2022 407 303 58 440 2043 40 648 41 621 621 2044 61 2015 46 2022 46 2045 40 41 474 58 496 304 58 392 2015 46 2033 58 2015 46 2046 40 41 450 2015 46 2029 2015 46 2029 61 303 2015 46 2034 61 2008 46 2009 2015 46 2030 61 2015 46 2022 46 2047 2015 46 2032 61 2015 46 2028 46 2048 2015 46 2031 61 2015 46 2028 46 410 2015 46 2039 61 303 2049 61 302 496 304 58 2015 46 2035 61 2008 46 2036 2050 61 2015 46 2006 474 58 2050 61 2015 46 2028 46 2051 40 2015 46 2022 44 2015 46 2038 41 374 2052 311 2053 58 2015 46 2054 40 2053 41 621 2015 46 2055 40 2053 41 392 2015 46 2022 46 2056 40 1501 41 614 2008 46 2057 58 2015 46 2033 61 304 392 2015 46 2035 614 2008 46 2036 58 2015 46 2035 61 2050 392 2015 46 2035 614 2015 46 2006 58 2049 61 304 325 392 2015 46 2035 631 2015 46 2005 58 325 392 2049 58 344 392 2015 46 2029 407 303 58 2015 46 2058 40 41 450 2015 46 2029 382 58 621 621 2015 46 2022 46 2059 40 2044 41 621 621 621 621 621 621 348 2060 40 2015 41 58 2015 46 2035 61 2015 46 2006 348 2061 40 2015 41 58 2015 46 2035 61 2015 46 2005 348 2062 40 2015 44 2063 58 404 41 58 2015 46 2038 61 2063 348 2064 40 2015 44 2063 58 404 41 58 392 2015 46 2028 46 2065 58 436 40 648 43 2066 40 2063 41 44 2067 61 2015 46 2023 41 2015 46 2037 46 2068 40 2015 46 2038 41 2015 46 2062 40 2063 41 348 2069 40 2015 41 58 392 2070 40 2015 46 2037 41 614 1500 58 440 2071 40 648 41 392 2015 46 2028 46 2065 58 436 40 648 43 2015 46 2037 91 58 45 1501 93 44 2067 61 2015 46 2023 41 2015 46 2062 40 2015 46 2037 46 2072 40 41 41 450 2015 46 2038 621 64 2073 348 2074 40 2015 41 58 450 2015 46 2022 64 2074 46 2075 348 2074 40 2015 44 2016 58 2017 41 58 2015 46 2022 61 303 2015 46 2027 61 40 2015 44 2015 46 2022 41 2015 46 2040 40 41 2015 46 2022 61 2016 2015 46 2027 61 40 2015 44 2015 46 2022 41 64 2073 348 2076 40 2015 41 58 450 2015 46 2022 46 2076 621 621 621 621 621 348 2077 40 2015 44 2078 58 2008 41 58 2015 46 2029 61 2078 621 621 621 621 621 621 348 2058 40 2015 41 58 2079 61 2015 46 2024 46 2080 40 2015 46 2027 44 2015 46 2035 44 2015 46 2039 44 2015 46 2034 44 2015 46 2030 44 2015 46 2081 40 41 45 1501 44 2015 46 2031 44 2015 46 2032 41 2015 46 2077 40 2079 41 450 2079 348 2046 40 2015 41 58 2082 61 2015 46 2048 2083 61 2015 46 410 2084 61 2015 46 2024 46 2080 40 2015 46 2027 44 2008 46 2057 44 303 44 2008 46 2009 44 2015 46 2022 46 2047 44 2015 46 2022 46 2047 45 1501 44 2083 44 2082 41 2015 46 2077 40 2084 41 450 2084 64 2073 348 2085 40 2015 41 58 450 2015 46 2035 64 2085 46 2075 348 2085 40 2015 44 2085 58 404 41 58 2015 46 2035 61 2085 64 2073 348 410 40 2015 41 58 450 2015 46 2028 46 410 64 410 46 2075 348 410 40 2015 44 410 58 404 41 58 2015 46 2028 46 410 61 410 64 2073 348 2048 40 2015 41 58 450 2015 46 2028 46 2048 64 2048 46 2075 348 2048 40 2015 44 2048 58 404 41 58 2015 46 2028 46 2048 61 2048 621 348 2081 40 2015 41 58 450 2015 46 2022 46 2047 621 621 64 2073 348 2086 40 2015 41 58 392 2015 46 2039 407 422 303 58 450 2015 46 2039 360 58 450 2015 46 2028 46 2087 40 2015 46 2022 41 621 621 64 2086 46 2075 348 2086 40 2015 44 2088 58 2066 41 58 2015 46 2039 61 2088 621 621 621 348 2089 40 2015 41 58 2090 61 91 93 2079 61 2015 46 2042 40 41 496 2079 46 2085 631 2008 46 2057 58 2090 46 2068 40 2079 41 2079 61 2015 46 2042 40 41 450 2090 348 2054 40 2015 44 2053 58 2052 41 58 2091 61 2015 46 2030 2092 61 2015 46 2022 46 2047 2086 61 2015 46 2022 46 2087 40 2091 44 2092 41 2093 61 648 43 2015 46 2094 40 2086 41 43 648 2095 61 2015 46 2096 40 41 2095 46 2097 40 2015 44 303 44 2015 46 2031 44 2015 46 2032 44 2093 44 2053 41 348 2094 40 2015 44 2098 58 2066 41 58 497 2099 40 41 311 2100 58 385 2101 398 2098 58 2100 46 2102 40 2015 46 2103 40 2101 41 41 450 2100 46 2104 40 41 348 2103 40 2015 44 2101 58 2066 41 58 392 2105 40 2101 91 1500 93 41 614 2008 46 2057 58 450 648 359 2101 614 648 58 450 648 359 2101 614 648 58 450 648 359 2101 614 648 58 450 648 360 58 450 2101 348 2106 40 2015 44 2101 58 2066 41 58 450 648 43 2015 46 2103 40 2101 41 43 648 621 621 621 621 621 348 2055 40 2015 44 2107 58 2108 41 58 392 2015 46 2022 46 2056 40 1501 41 631 2008 46 2057 58 392 2109 40 2107 44 2052 41 58 621 2015 46 2028 46 2110 40 2015 46 2022 41 360 58 621 2015 46 2022 46 2110 40 41 
128591,Python,"class Lexer(Recognizer, TokenSource):

    DEFAULT_MODE = 0
    MORE = -2
    SKIP = -3

    DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL
    HIDDEN = Token.HIDDEN_CHANNEL
    MIN_CHAR_VALUE = 0x0000
    MAX_CHAR_VALUE = 0x10FFFF

    def __init__(self, input, output=sys.stdout):
        super(Lexer, self).__init__()
        self._input = input
        self._output = output
        self._factory = CommonTokenFactory.DEFAULT
        self._tokenFactorySourcePair = (self, input)

        self._interp = None # child classes must populate this

        # The goal of all lexer rules/methods is to create a token object.
        #  self is an instance variable as multiple rules may collaborate to
        #  create a single token.  nextToken will return self object after
        #  matching lexer rule(s).  If you subclass to allow multiple token
        #  emissions, then set self to the last token to be matched or
        #  something nonnull so that the auto token emit mechanism will not
        #  emit another token.
        self._token = None

        # What character index in the stream did the current token start at?
        #  Needed, for example, to get the text for current token.  Set at
        #  the start of nextToken.
        self._tokenStartCharIndex = -1

        # The line on which the first character of the token resides#/
        self._tokenStartLine = -1

        # The character position of first character within the line#/
        self._tokenStartColumn = -1

        # Once we see EOF on char stream, next token will be EOF.
        #  If you have DONE : EOF ; then you see DONE EOF.
        self._hitEOF = False

        # The channel number for the current token#/
        self._channel = Token.DEFAULT_CHANNEL

        # The token type for the current token#/
        self._type = Token.INVALID_TYPE

        self._modeStack = []
        self._mode = self.DEFAULT_MODE

        # You can set the text for the current token to override what is in
        #  the input char buffer.  Use setText() or can set self instance var.
        #/
        self._text = None


    def reset(self):
        # wack Lexer state variables
        if self._input is not None:
            self._input.seek(0) # rewind the input
        self._token = None
        self._type = Token.INVALID_TYPE
        self._channel = Token.DEFAULT_CHANNEL
        self._tokenStartCharIndex = -1
        self._tokenStartColumn = -1
        self._tokenStartLine = -1
        self._text = None

        self._hitEOF = False
        self._mode = Lexer.DEFAULT_MODE
        self._modeStack = []

        self._interp.reset()

    # Return a token from self source; i.e., match a token on the char
    #  stream.
    def nextToken(self):
        if self._input is None:
            raise IllegalStateException(""nextToken requires a non-null input stream."")

        # Mark start location in char stream so unbuffered streams are
        # guaranteed at least have text of current token
        tokenStartMarker = self._input.mark()
        try:
            while True:
                if self._hitEOF:
                    self.emitEOF()
                    return self._token
                self._token = None
                self._channel = Token.DEFAULT_CHANNEL
                self._tokenStartCharIndex = self._input.index
                self._tokenStartColumn = self._interp.column
                self._tokenStartLine = self._interp.line
                self._text = None
                continueOuter = False
                while True:
                    self._type = Token.INVALID_TYPE
                    ttype = self.SKIP
                    try:
                        ttype = self._interp.match(self._input, self._mode)
                    except LexerNoViableAltException as e:
                        self.notifyListeners(e)		# report error
                        self.recover(e)
                    if self._input.LA(1)==Token.EOF:
                        self._hitEOF = True
                    if self._type == Token.INVALID_TYPE:
                        self._type = ttype
                    if self._type == self.SKIP:
                        continueOuter = True
                        break
                    if self._type!=self.MORE:
                        break
                if continueOuter:
                    continue
                if self._token is None:
                    self.emit()
                return self._token
        finally:
            # make sure we release marker after match or
            # unbuffered char stream will keep buffering
            self._input.release(tokenStartMarker)

    # Instruct the lexer to skip creating a token for current lexer rule
    #  and look for another token.  nextToken() knows to keep looking when
    #  a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
    #  if token==null at end of any token rule, it creates one for you
    #  and emits it.
    #/
    def skip(self):
        self._type = self.SKIP

    def more(self):
        self._type = self.MORE

    def mode(self, m):
        self._mode = m

    def pushMode(self, m):
        if self._interp.debug:
            print(""pushMode "" + str(m), file=self._output)
        self._modeStack.append(self._mode)
        self.mode(m)

    def popMode(self):
        if len(self._modeStack)==0:
            raise Exception(""Empty Stack"")
        if self._interp.debug:
            print(""popMode back to ""+ self._modeStack[:-1], file=self._output)
        self.mode( self._modeStack.pop() )
        return self._mode

    # Set the char stream and reset the lexer#/
    @property
    def inputStream(self):
        return self._input

    @inputStream.setter
    def inputStream(self, input):
        self._input = None
        self._tokenFactorySourcePair = (self, self._input)
        self.reset()
        self._input = input
        self._tokenFactorySourcePair = (self, self._input)

    @property
    def sourceName(self):
        return self._input.sourceName

    # By default does not support multiple emits per nextToken invocation
    #  for efficiency reasons.  Subclass and override self method, nextToken,
    #  and getToken (to push tokens into a list and pull from that list
    #  rather than a single variable as self implementation does).
    #/
    def emitToken(self, token):
        self._token = token

    # The standard method called to automatically emit a token at the
    #  outermost lexical rule.  The token object should point into the
    #  char buffer start..stop.  If there is a text override in 'text',
    #  use that to set the token's text.  Override self method to emit
    #  custom Token objects or provide a new factory.
    #/
    def emit(self):
        t = self._factory.create(self._tokenFactorySourcePair, self._type, self._text, self._channel, self._tokenStartCharIndex,
                                 self.getCharIndex()-1, self._tokenStartLine, self._tokenStartColumn)
        self.emitToken(t)
        return t

    def emitEOF(self):
        cpos = self.column
        lpos = self.line
        eof = self._factory.create(self._tokenFactorySourcePair, Token.EOF, None, Token.DEFAULT_CHANNEL, self._input.index,
                                   self._input.index-1, lpos, cpos)
        self.emitToken(eof)
        return eof

    @property
    def type(self):
        return self._type

    @type.setter
    def type(self, type):
        self._type = type

    @property
    def line(self):
        return self._interp.line

    @line.setter
    def line(self, line):
        self._interp.line = line

    @property
    def column(self):
        return self._interp.column

    @column.setter
    def column(self, column):
        self._interp.column = column

    # What is the index of the current character of lookahead?#/
    def getCharIndex(self):
        return self._input.index

    # Return the text matched so far for the current token or any
    #  text override.
    @property
    def text(self):
        if self._text is not None:
            return self._text
        else:
            return self._interp.getText(self._input)

    # Set the complete text of self token; it wipes any previous
    #  changes to the text.
    @text.setter
    def text(self, txt):
        self._text = txt

    # Return a list of all Token objects in input char stream.
    #  Forces load of all tokens. Does not include EOF token.
    #/
    def getAllTokens(self):
        tokens = []
        t = self.nextToken()
        while t.type!=Token.EOF:
            tokens.append(t)
            t = self.nextToken()
        return tokens

    def notifyListeners(self, e):
        start = self._tokenStartCharIndex
        stop = self._input.index
        text = self._input.getText(start, stop)
        msg = u""token recognition error at: '"" + self.getErrorDisplay(text) + u""'""
        listener = self.getErrorListenerDispatch()
        listener.syntaxError(self, None, self._tokenStartLine, self._tokenStartColumn, msg, e)

    def getErrorDisplay(self, s):
        with StringIO() as buf:
            for c in s:
                buf.write(unicode(self.getErrorDisplayForChar(c)))
            return buf.getvalue()

    def getErrorDisplayForChar(self, c):
        if ord(c[0])==Token.EOF:
            return ""<EOF>""
        elif c==u'\n':
            return u""\\n""
        elif c==u'\t':
            return u""\\t""
        elif c==u'\r':
            return u""\\r""
        else:
            return c

    def getCharErrorDisplay(self, c):
        return u""'"" + self.getErrorDisplayForChar(c) + u""'""

    # Lexers can normally match any char in it's vocabulary after matching
    #  a token, so do the easy thing and just kill a character and hope
    #  it all works out.  You can instead use the rule invocation stack
    #  to do sophisticated error recovery if you are in a fragment rule.
    #/
    def recover(self, re):
        if self._input.LA(1) != Token.EOF:
            if isinstance(re, LexerNoViableAltException):
                    # skip a char and try again
                    self._interp.consume(self._input)
            else:
                # TODO: Do we lose character or line position information?
                self._input.consume()",1,334 2000 40 2001 44 2002 41 58 2003 61 1500 2004 61 45 1502 2005 61 45 1502 2006 61 2007 46 2008 2009 61 2007 46 2010 2011 61 1500 2012 61 1508 348 2013 40 2014 44 2015 44 2016 61 2017 46 2018 41 58 463 40 2000 44 2014 41 46 2013 40 41 2014 46 2019 61 2015 2014 46 2020 61 2016 2014 46 2021 61 2022 46 2023 2014 46 2024 61 40 2014 44 2015 41 2014 46 2025 61 303 621 621 621 621 621 621 621 621 2014 46 2026 61 303 621 621 621 2014 46 2027 61 45 1501 621 2014 46 2028 61 45 1501 621 2014 46 2029 61 45 1501 621 621 2014 46 2030 61 302 621 2014 46 2031 61 2007 46 2008 621 2014 46 2032 61 2007 46 2033 2014 46 2034 61 91 93 2014 46 2035 61 2014 46 2003 621 621 621 2014 46 2036 61 303 348 2037 40 2014 41 58 621 392 2014 46 2019 407 422 303 58 2014 46 2019 46 2038 40 1500 41 621 2014 46 2026 61 303 2014 46 2032 61 2007 46 2033 2014 46 2031 61 2007 46 2008 2014 46 2027 61 45 1501 2014 46 2029 61 45 1501 2014 46 2028 61 45 1501 2014 46 2036 61 303 2014 46 2030 61 302 2014 46 2035 61 2000 46 2003 2014 46 2034 61 91 93 2014 46 2025 46 2037 40 41 621 621 348 2039 40 2014 41 58 392 2014 46 2019 407 303 58 440 2040 40 648 41 621 621 2041 61 2014 46 2019 46 2042 40 41 474 58 496 304 58 392 2014 46 2030 58 2014 46 2043 40 41 450 2014 46 2026 2014 46 2026 61 303 2014 46 2031 61 2007 46 2008 2014 46 2027 61 2014 46 2019 46 2044 2014 46 2029 61 2014 46 2025 46 2045 2014 46 2028 61 2014 46 2025 46 410 2014 46 2036 61 303 2046 61 302 496 304 58 2014 46 2032 61 2007 46 2033 2047 61 2014 46 2005 474 58 2047 61 2014 46 2025 46 2048 40 2014 46 2019 44 2014 46 2035 41 374 2049 311 2050 58 2014 46 2051 40 2050 41 621 2014 46 2052 40 2050 41 392 2014 46 2019 46 2053 40 1501 41 614 2007 46 2054 58 2014 46 2030 61 304 392 2014 46 2032 614 2007 46 2033 58 2014 46 2032 61 2047 392 2014 46 2032 614 2014 46 2005 58 2046 61 304 325 392 2014 46 2032 631 2014 46 2004 58 325 392 2046 58 344 392 2014 46 2026 407 303 58 2014 46 2055 40 41 450 2014 46 2026 382 58 621 621 2014 46 2019 46 2056 40 2041 41 621 621 621 621 621 621 348 2057 40 2014 41 58 2014 46 2032 61 2014 46 2005 348 2058 40 2014 41 58 2014 46 2032 61 2014 46 2004 348 2059 40 2014 44 2060 41 58 2014 46 2035 61 2060 348 2061 40 2014 44 2060 41 58 392 2014 46 2025 46 2062 58 436 40 648 43 2063 40 2060 41 44 2064 61 2014 46 2020 41 2014 46 2034 46 2065 40 2014 46 2035 41 2014 46 2059 40 2060 41 348 2066 40 2014 41 58 392 2067 40 2014 46 2034 41 614 1500 58 440 2068 40 648 41 392 2014 46 2025 46 2062 58 436 40 648 43 2014 46 2034 91 58 45 1501 93 44 2064 61 2014 46 2020 41 2014 46 2059 40 2014 46 2034 46 2069 40 41 41 450 2014 46 2035 621 64 2070 348 2071 40 2014 41 58 450 2014 46 2019 64 2071 46 2072 348 2071 40 2014 44 2015 41 58 2014 46 2019 61 303 2014 46 2024 61 40 2014 44 2014 46 2019 41 2014 46 2037 40 41 2014 46 2019 61 2015 2014 46 2024 61 40 2014 44 2014 46 2019 41 64 2070 348 2073 40 2014 41 58 450 2014 46 2019 46 2073 621 621 621 621 621 348 2074 40 2014 44 2075 41 58 2014 46 2026 61 2075 621 621 621 621 621 621 348 2055 40 2014 41 58 2076 61 2014 46 2021 46 2077 40 2014 46 2024 44 2014 46 2032 44 2014 46 2036 44 2014 46 2031 44 2014 46 2027 44 2014 46 2078 40 41 45 1501 44 2014 46 2028 44 2014 46 2029 41 2014 46 2074 40 2076 41 450 2076 348 2043 40 2014 41 58 2079 61 2014 46 2045 2080 61 2014 46 410 2081 61 2014 46 2021 46 2077 40 2014 46 2024 44 2007 46 2054 44 303 44 2007 46 2008 44 2014 46 2019 46 2044 44 2014 46 2019 46 2044 45 1501 44 2080 44 2079 41 2014 46 2074 40 2081 41 450 2081 64 2070 348 2082 40 2014 41 58 450 2014 46 2032 64 2082 46 2072 348 2082 40 2014 44 2082 41 58 2014 46 2032 61 2082 64 2070 348 410 40 2014 41 58 450 2014 46 2025 46 410 64 410 46 2072 348 410 40 2014 44 410 41 58 2014 46 2025 46 410 61 410 64 2070 348 2045 40 2014 41 58 450 2014 46 2025 46 2045 64 2045 46 2072 348 2045 40 2014 44 2045 41 58 2014 46 2025 46 2045 61 2045 621 348 2078 40 2014 41 58 450 2014 46 2019 46 2044 621 621 64 2070 348 2083 40 2014 41 58 392 2014 46 2036 407 422 303 58 450 2014 46 2036 360 58 450 2014 46 2025 46 2084 40 2014 46 2019 41 621 621 64 2083 46 2072 348 2083 40 2014 44 2085 41 58 2014 46 2036 61 2085 621 621 621 348 2086 40 2014 41 58 2087 61 91 93 2076 61 2014 46 2039 40 41 496 2076 46 2082 631 2007 46 2054 58 2087 46 2065 40 2076 41 2076 61 2014 46 2039 40 41 450 2087 348 2051 40 2014 44 2050 41 58 2088 61 2014 46 2027 2089 61 2014 46 2019 46 2044 2083 61 2014 46 2019 46 2084 40 2088 44 2089 41 2090 61 648 43 2014 46 2091 40 2083 41 43 648 2092 61 2014 46 2093 40 41 2092 46 2094 40 2014 44 303 44 2014 46 2028 44 2014 46 2029 44 2090 44 2050 41 348 2091 40 2014 44 2095 41 58 497 2096 40 41 311 2097 58 385 2098 398 2095 58 2097 46 2099 40 2100 40 2014 46 2101 40 2098 41 41 41 450 2097 46 2102 40 41 348 2101 40 2014 44 2098 41 58 392 2103 40 2098 91 1500 93 41 614 2007 46 2054 58 450 648 359 2098 614 648 58 450 648 359 2098 614 648 58 450 648 359 2098 614 648 58 450 648 360 58 450 2098 348 2104 40 2014 44 2098 41 58 450 648 43 2014 46 2101 40 2098 41 43 648 621 621 621 621 621 348 2052 40 2014 44 2105 41 58 392 2014 46 2019 46 2053 40 1501 41 631 2007 46 2054 58 392 2106 40 2105 44 2049 41 58 621 2014 46 2025 46 2107 40 2014 46 2019 41 360 58 621 2014 46 2019 46 2107 40 41 
128807,Python,"class ATNDeserializer (object):
    __slots__ = ('deserializationOptions', 'data', 'pos', 'uuid')

    def __init__(self, options : ATNDeserializationOptions = None):
        if options is None:
            options = ATNDeserializationOptions.defaultOptions
        self.deserializationOptions = options

    # Determines if a particular serialized representation of an ATN supports
    # a particular feature, identified by the {@link UUID} used for serializing
    # the ATN at the time the feature was first introduced.
    #
    # @param feature The {@link UUID} marking the first time the feature was
    # supported in the serialized ATN.
    # @param actualUuid The {@link UUID} of the actual serialized ATN which is
    # currently being deserialized.
    # @return {@code true} if the {@code actualUuid} value represents a
    # serialized ATN at or after the feature identified by {@code feature} was
    # introduced; otherwise, {@code false}.

    def isFeatureSupported(self, feature : UUID , actualUuid : UUID ):
        idx1 = SUPPORTED_UUIDS.index(feature)
        if idx1<0:
            return False
        idx2 = SUPPORTED_UUIDS.index(actualUuid)
        return idx2 >= idx1

    def deserialize(self, data : str):
        self.reset(data)
        self.checkVersion()
        self.checkUUID()
        atn = self.readATN()
        self.readStates(atn)
        self.readRules(atn)
        self.readModes(atn)
        sets = []
        # First, read all sets with 16-bit Unicode code points <= U+FFFF.
        self.readSets(atn, sets, self.readInt)
        # Next, if the ATN was serialized with the Unicode SMP feature,
        # deserialize sets with 32-bit arguments <= U+10FFFF.
        if self.isFeatureSupported(ADDED_UNICODE_SMP, self.uuid):
            self.readSets(atn, sets, self.readInt32)
        self.readEdges(atn, sets)
        self.readDecisions(atn)
        self.readLexerActions(atn)
        self.markPrecedenceDecisions(atn)
        self.verifyATN(atn)
        if self.deserializationOptions.generateRuleBypassTransitions \
                and atn.grammarType == ATNType.PARSER:
            self.generateRuleBypassTransitions(atn)
            # re-verify after modification
            self.verifyATN(atn)
        return atn

    def reset(self, data:str):
        def adjust(c):
            v = ord(c)
            return v-2 if v>1 else v + 65533
        temp = [ adjust(c) for c in data ]
        # don't adjust the first value since that's the version number
        temp[0] = ord(data[0])
        self.data = temp
        self.pos = 0

    def checkVersion(self):
        version = self.readInt()
        if version != SERIALIZED_VERSION:
            raise Exception(""Could not deserialize ATN with version "" + str(version) + "" (expected "" + str(SERIALIZED_VERSION) + "")."")

    def checkUUID(self):
        uuid = self.readUUID()
        if not uuid in SUPPORTED_UUIDS:
            raise Exception(""Could not deserialize ATN with UUID: "" + str(uuid) + \
                            "" (expected "" + str(SERIALIZED_UUID) + "" or a legacy UUID)."", uuid, SERIALIZED_UUID)
        self.uuid = uuid

    def readATN(self):
        idx = self.readInt()
        grammarType = ATNType.fromOrdinal(idx)
        maxTokenType = self.readInt()
        return ATN(grammarType, maxTokenType)

    def readStates(self, atn:ATN):
        loopBackStateNumbers = []
        endStateNumbers = []
        nstates = self.readInt()
        for i in range(0, nstates):
            stype = self.readInt()
            # ignore bad type of states
            if stype==ATNState.INVALID_TYPE:
                atn.addState(None)
                continue
            ruleIndex = self.readInt()
            if ruleIndex == 0xFFFF:
                ruleIndex = -1

            s = self.stateFactory(stype, ruleIndex)
            if stype == ATNState.LOOP_END: # special case
                loopBackStateNumber = self.readInt()
                loopBackStateNumbers.append((s, loopBackStateNumber))
            elif isinstance(s, BlockStartState):
                endStateNumber = self.readInt()
                endStateNumbers.append((s, endStateNumber))

            atn.addState(s)

        # delay the assignment of loop back and end states until we know all the state instances have been initialized
        for pair in loopBackStateNumbers:
            pair[0].loopBackState = atn.states[pair[1]]

        for pair in endStateNumbers:
            pair[0].endState = atn.states[pair[1]]

        numNonGreedyStates = self.readInt()
        for i in range(0, numNonGreedyStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].nonGreedy = True

        numPrecedenceStates = self.readInt()
        for i in range(0, numPrecedenceStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].isPrecedenceRule = True

    def readRules(self, atn:ATN):
        nrules = self.readInt()
        if atn.grammarType == ATNType.LEXER:
            atn.ruleToTokenType = [0] * nrules

        atn.ruleToStartState = [0] * nrules
        for i in range(0, nrules):
            s = self.readInt()
            startState = atn.states[s]
            atn.ruleToStartState[i] = startState
            if atn.grammarType == ATNType.LEXER:
                tokenType = self.readInt()
                if tokenType == 0xFFFF:
                    tokenType = Token.EOF

                atn.ruleToTokenType[i] = tokenType

        atn.ruleToStopState = [0] * nrules
        for state in atn.states:
            if not isinstance(state, RuleStopState):
                continue
            atn.ruleToStopState[state.ruleIndex] = state
            atn.ruleToStartState[state.ruleIndex].stopState = state

    def readModes(self, atn:ATN):
        nmodes = self.readInt()
        for i in range(0, nmodes):
            s = self.readInt()
            atn.modeToStartState.append(atn.states[s])

    def readSets(self, atn:ATN, sets:list, readUnicode:Callable[[], int]):
        m = self.readInt()
        for i in range(0, m):
            iset = IntervalSet()
            sets.append(iset)
            n = self.readInt()
            containsEof = self.readInt()
            if containsEof!=0:
                iset.addOne(-1)
            for j in range(0, n):
                i1 = readUnicode()
                i2 = readUnicode()
                iset.addRange(range(i1, i2 + 1)) # range upper limit is exclusive

    def readEdges(self, atn:ATN, sets:list):
        nedges = self.readInt()
        for i in range(0, nedges):
            src = self.readInt()
            trg = self.readInt()
            ttype = self.readInt()
            arg1 = self.readInt()
            arg2 = self.readInt()
            arg3 = self.readInt()
            trans = self.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets)
            srcState = atn.states[src]
            srcState.addTransition(trans)

        # edges for rule stop states can be derived, so they aren't serialized
        for state in atn.states:
            for i in range(0, len(state.transitions)):
                t = state.transitions[i]
                if not isinstance(t, RuleTransition):
                    continue
                outermostPrecedenceReturn = -1
                if atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule:
                    if t.precedence == 0:
                        outermostPrecedenceReturn = t.target.ruleIndex
                trans = EpsilonTransition(t.followState, outermostPrecedenceReturn)
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans)

        for state in atn.states:
            if isinstance(state, BlockStartState):
                # we need to know the end state to set its start state
                if state.endState is None:
                    raise Exception(""IllegalState"")
                # block end states can only be associated to a single block start state
                if state.endState.startState is not None:
                    raise Exception(""IllegalState"")
                state.endState.startState = state

            if isinstance(state, PlusLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, PlusBlockStartState):
                        target.loopBackState = state
            elif isinstance(state, StarLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, StarLoopEntryState):
                        target.loopBackState = state

    def readDecisions(self, atn:ATN):
        ndecisions = self.readInt()
        for i in range(0, ndecisions):
            s = self.readInt()
            decState = atn.states[s]
            atn.decisionToState.append(decState)
            decState.decision = i

    def readLexerActions(self, atn:ATN):
        if atn.grammarType == ATNType.LEXER:
            count = self.readInt()
            atn.lexerActions = [ None ] * count
            for i in range(0, count):
                actionType = self.readInt()
                data1 = self.readInt()
                if data1 == 0xFFFF:
                    data1 = -1
                data2 = self.readInt()
                if data2 == 0xFFFF:
                    data2 = -1
                lexerAction = self.lexerActionFactory(actionType, data1, data2)
                atn.lexerActions[i] = lexerAction

    def generateRuleBypassTransitions(self, atn:ATN):

        count = len(atn.ruleToStartState)
        atn.ruleToTokenType = [ 0 ] * count
        for i in range(0, count):
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1

        for i in range(0, count):
            self.generateRuleBypassTransition(atn, i)

    def generateRuleBypassTransition(self, atn:ATN, idx:int):

        bypassStart = BasicBlockStartState()
        bypassStart.ruleIndex = idx
        atn.addState(bypassStart)

        bypassStop = BlockEndState()
        bypassStop.ruleIndex = idx
        atn.addState(bypassStop)

        bypassStart.endState = bypassStop
        atn.defineDecisionState(bypassStart)

        bypassStop.startState = bypassStart

        excludeTransition = None

        if atn.ruleToStartState[idx].isPrecedenceRule:
            # wrap from the beginning of the rule to the StarLoopEntryState
            endState = None
            for state in atn.states:
                if self.stateIsEndStateFor(state, idx):
                    endState = state
                    excludeTransition = state.loopBackState.transitions[0]
                    break

            if excludeTransition is None:
                raise Exception(""Couldn't identify final state of the precedence rule prefix section."")

        else:

            endState = atn.ruleToStopState[idx]

        # all non-excluded transitions that currently target end state need to target blockEnd instead
        for state in atn.states:
            for transition in state.transitions:
                if transition == excludeTransition:
                    continue
                if transition.target == endState:
                    transition.target = bypassStop

        # all transitions leaving the rule start state need to leave blockStart instead
        ruleToStartState = atn.ruleToStartState[idx]
        count = len(ruleToStartState.transitions)
        while count > 0:
            bypassStart.addTransition(ruleToStartState.transitions[count-1])
            del ruleToStartState.transitions[-1]

        # link the new states
        atn.ruleToStartState[idx].addTransition(EpsilonTransition(bypassStart))
        bypassStop.addTransition(EpsilonTransition(endState))

        matchState = BasicState()
        atn.addState(matchState)
        matchState.addTransition(AtomTransition(bypassStop, atn.ruleToTokenType[idx]))
        bypassStart.addTransition(EpsilonTransition(matchState))


    def stateIsEndStateFor(self, state:ATNState, idx:int):
        if state.ruleIndex != idx:
            return None
        if not isinstance(state, StarLoopEntryState):
            return None

        maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
        if not isinstance(maybeLoopEndState, LoopEndState):
            return None

        if maybeLoopEndState.epsilonOnlyTransitions and \
                isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
            return state
        else:
            return None


    #
    # Analyze the {@link StarLoopEntryState} states in the specified ATN to set
    # the {@link StarLoopEntryState#isPrecedenceDecision} field to the
    # correct value.
    #
    # @param atn The ATN.
    #
    def markPrecedenceDecisions(self, atn:ATN):
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue

            # We analyze the ATN to determine if this ATN decision state is the
            # decision for the closure block that determines whether a
            # precedence rule should continue or complete.
            #
            if atn.ruleToStartState[state.ruleIndex].isPrecedenceRule:
                maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
                if isinstance(maybeLoopEndState, LoopEndState):
                    if maybeLoopEndState.epsilonOnlyTransitions and \
                            isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
                        state.isPrecedenceDecision = True

    def verifyATN(self, atn:ATN):
        if not self.deserializationOptions.verifyATN:
            return
        # verify assumptions
        for state in atn.states:
            if state is None:
                continue

            self.checkCondition(state.epsilonOnlyTransitions or len(state.transitions) <= 1)

            if isinstance(state, PlusBlockStartState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, StarLoopEntryState):
                self.checkCondition(state.loopBackState is not None)
                self.checkCondition(len(state.transitions) == 2)

                if isinstance(state.transitions[0].target, StarBlockStartState):
                    self.checkCondition(isinstance(state.transitions[1].target, LoopEndState))
                    self.checkCondition(not state.nonGreedy)
                elif isinstance(state.transitions[0].target, LoopEndState):
                    self.checkCondition(isinstance(state.transitions[1].target, StarBlockStartState))
                    self.checkCondition(state.nonGreedy)
                else:
                    raise Exception(""IllegalState"")

            if isinstance(state, StarLoopbackState):
                self.checkCondition(len(state.transitions) == 1)
                self.checkCondition(isinstance(state.transitions[0].target, StarLoopEntryState))

            if isinstance(state, LoopEndState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, RuleStartState):
                self.checkCondition(state.stopState is not None)

            if isinstance(state, BlockStartState):
                self.checkCondition(state.endState is not None)

            if isinstance(state, BlockEndState):
                self.checkCondition(state.startState is not None)

            if isinstance(state, DecisionState):
                self.checkCondition(len(state.transitions) <= 1 or state.decision >= 0)
            else:
                self.checkCondition(len(state.transitions) <= 1 or isinstance(state, RuleStopState))

    def checkCondition(self, condition:bool, message=None):
        if not condition:
            if message is None:
                message = ""IllegalState""
            raise Exception(message)

    def readInt(self):
        i = self.data[self.pos]
        self.pos += 1
        return i

    def readInt32(self):
        low = self.readInt()
        high = self.readInt()
        return low | (high << 16)

    def readLong(self):
        low = self.readInt32()
        high = self.readInt32()
        return (low & 0x00000000FFFFFFFF) | (high << 32)

    def readUUID(self):
        low = self.readLong()
        high = self.readLong()
        allBits = (low & 0xFFFFFFFFFFFFFFFF) | (high << 64)
        return UUID(int=allBits)

    edgeFactories = [ lambda args : None,
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : EpsilonTransition(target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        RangeTransition(target, Token.EOF, arg2) if arg3 != 0 else RangeTransition(target, arg1, arg2),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        RuleTransition(atn.states[arg1], arg2, arg3, target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        PredicateTransition(target, arg1, arg2, arg3 != 0),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        AtomTransition(target, Token.EOF) if arg3 != 0 else AtomTransition(target, arg1),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        ActionTransition(target, arg1, arg2, arg3 != 0),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        SetTransition(target, sets[arg1]),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        NotSetTransition(target, sets[arg1]),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        WildcardTransition(target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        PrecedencePredicateTransition(target, arg1)
                      ]

    def edgeFactory(self, atn:ATN, type:int, src:int, trg:int, arg1:int, arg2:int, arg3:int, sets:list):
        target = atn.states[trg]
        if type > len(self.edgeFactories) or self.edgeFactories[type] is None:
            raise Exception(""The specified transition type: "" + str(type) + "" is not valid."")
        else:
            return self.edgeFactories[type](atn, src, trg, arg1, arg2, arg3, sets, target)

    stateFactories = [  lambda : None,
                        lambda : BasicState(),
                        lambda : RuleStartState(),
                        lambda : BasicBlockStartState(),
                        lambda : PlusBlockStartState(),
                        lambda : StarBlockStartState(),
                        lambda : TokensStartState(),
                        lambda : RuleStopState(),
                        lambda : BlockEndState(),
                        lambda : StarLoopbackState(),
                        lambda : StarLoopEntryState(),
                        lambda : PlusLoopbackState(),
                        lambda : LoopEndState()
                    ]

    def stateFactory(self, type:int, ruleIndex:int):
        if type> len(self.stateFactories) or self.stateFactories[type] is None:
            raise Exception(""The specified state type "" + str(type) + "" is not valid."")
        else:
            s = self.stateFactories[type]()
            if s is not None:
                s.ruleIndex = ruleIndex
        return s

    CHANNEL = 0     #The type of a {@link LexerChannelAction} action.
    CUSTOM = 1      #The type of a {@link LexerCustomAction} action.
    MODE = 2        #The type of a {@link LexerModeAction} action.
    MORE = 3        #The type of a {@link LexerMoreAction} action.
    POP_MODE = 4    #The type of a {@link LexerPopModeAction} action.
    PUSH_MODE = 5   #The type of a {@link LexerPushModeAction} action.
    SKIP = 6        #The type of a {@link LexerSkipAction} action.
    TYPE = 7        #The type of a {@link LexerTypeAction} action.

    actionFactories = [ lambda data1, data2: LexerChannelAction(data1),
                        lambda data1, data2: LexerCustomAction(data1, data2),
                        lambda data1, data2: LexerModeAction(data1),
                        lambda data1, data2: LexerMoreAction.INSTANCE,
                        lambda data1, data2: LexerPopModeAction.INSTANCE,
                        lambda data1, data2: LexerPushModeAction(data1),
                        lambda data1, data2: LexerSkipAction.INSTANCE,
                        lambda data1, data2: LexerTypeAction(data1)
                      ]

    def lexerActionFactory(self, type:int, data1:int, data2:int):

        if type > len(self.actionFactories) or self.actionFactories[type] is None:
            raise Exception(""The specified lexer action type "" + str(type) + "" is not valid."")
        else:
            return self.actionFactories[type](data1, data2)",1,334 2000 40 426 41 58 2001 61 40 648 44 648 44 648 44 648 41 348 2002 40 2003 44 2004 58 2005 61 303 41 58 392 2004 407 303 58 2004 61 2005 46 2006 2003 46 2007 61 2004 621 621 621 621 621 621 621 621 621 621 621 348 2008 40 2003 44 2009 58 2010 44 2011 58 2010 41 58 2012 61 2013 46 2014 40 2009 41 392 2012 60 1500 58 450 302 2015 61 2013 46 2014 40 2011 41 450 2015 615 2012 348 2016 40 2003 44 2017 58 2018 41 58 2003 46 2019 40 2017 41 2003 46 2020 40 41 2003 46 2021 40 41 2022 61 2003 46 2023 40 41 2003 46 2024 40 2022 41 2003 46 2025 40 2022 41 2003 46 2026 40 2022 41 2027 61 91 93 621 2003 46 2028 40 2022 44 2027 44 2003 46 2029 41 621 621 392 2003 46 2008 40 2030 44 2003 46 2031 41 58 2003 46 2028 40 2022 44 2027 44 2003 46 2032 41 2003 46 2033 40 2022 44 2027 41 2003 46 2034 40 2022 41 2003 46 2035 40 2022 41 2003 46 2036 40 2022 41 2003 46 2037 40 2022 41 392 2003 46 2007 46 2038 92 308 2022 46 2039 614 2040 46 2041 58 2003 46 2038 40 2022 41 621 2003 46 2037 40 2022 41 450 2022 348 2019 40 2003 44 2017 58 2018 41 58 348 2042 40 2043 41 58 2044 61 2045 40 2043 41 450 2044 45 1502 392 2044 62 1501 360 2044 43 1506 2046 61 91 2042 40 2043 41 385 2043 398 2017 93 621 2046 91 1500 93 61 2045 40 2017 91 1500 93 41 2003 46 2017 61 2046 2003 46 2047 61 1500 348 2020 40 2003 41 58 2048 61 2003 46 2029 40 41 392 2048 631 2049 58 440 2050 40 648 43 2018 40 2048 41 43 648 43 2018 40 2049 41 43 648 41 348 2021 40 2003 41 58 2031 61 2003 46 2051 40 41 392 422 2031 398 2013 58 440 2050 40 648 43 2018 40 2031 41 43 92 648 43 2018 40 2052 41 43 648 44 2031 44 2052 41 2003 46 2031 61 2031 348 2023 40 2003 41 58 2053 61 2003 46 2029 40 41 2039 61 2040 46 2054 40 2053 41 2055 61 2003 46 2029 40 41 450 2056 40 2039 44 2055 41 348 2024 40 2003 44 2022 58 2056 41 58 2057 61 91 93 2058 61 91 93 2059 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2059 41 58 2062 61 2003 46 2029 40 41 621 392 2062 614 2063 46 2064 58 2022 46 2065 40 303 41 344 2066 61 2003 46 2029 40 41 392 2066 614 1506 58 2066 61 45 1501 2067 61 2003 46 2068 40 2062 44 2066 41 392 2062 614 2063 46 2069 58 621 2070 61 2003 46 2029 40 41 2057 46 2071 40 40 2067 44 2070 41 41 359 2072 40 2067 44 2073 41 58 2074 61 2003 46 2029 40 41 2058 46 2071 40 40 2067 44 2074 41 41 2022 46 2065 40 2067 41 621 385 2075 398 2057 58 2075 91 1500 93 46 2076 61 2022 46 2077 91 2075 91 1501 93 93 385 2075 398 2058 58 2075 91 1500 93 46 2078 61 2022 46 2077 91 2075 91 1501 93 93 2079 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2079 41 58 2080 61 2003 46 2029 40 41 2022 46 2077 91 2080 93 46 2081 61 304 2082 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2082 41 58 2080 61 2003 46 2029 40 41 2022 46 2077 91 2080 93 46 2083 61 304 348 2025 40 2003 44 2022 58 2056 41 58 2084 61 2003 46 2029 40 41 392 2022 46 2039 614 2040 46 2085 58 2022 46 2086 61 91 1500 93 42 2084 2022 46 2087 61 91 1500 93 42 2084 385 2060 398 2061 40 1500 44 2084 41 58 2067 61 2003 46 2029 40 41 2088 61 2022 46 2077 91 2067 93 2022 46 2087 91 2060 93 61 2088 392 2022 46 2039 614 2040 46 2085 58 2089 61 2003 46 2029 40 41 392 2089 614 1506 58 2089 61 2090 46 2091 2022 46 2086 91 2060 93 61 2089 2022 46 2092 61 91 1500 93 42 2084 385 2093 398 2022 46 2077 58 392 422 2072 40 2093 44 2094 41 58 344 2022 46 2092 91 2093 46 2066 93 61 2093 2022 46 2087 91 2093 46 2066 93 46 2095 61 2093 348 2026 40 2003 44 2022 58 2056 41 58 2096 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2096 41 58 2067 61 2003 46 2029 40 41 2022 46 2097 46 2071 40 2022 46 2077 91 2067 93 41 348 2028 40 2003 44 2022 58 2056 44 2027 58 411 44 2098 58 2099 91 91 93 44 404 93 41 58 2100 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2100 41 58 2101 61 2102 40 41 2027 46 2071 40 2101 41 2103 61 2003 46 2029 40 41 2104 61 2003 46 2029 40 41 392 2104 631 1500 58 2101 46 2105 40 45 1501 41 385 2106 398 2061 40 1500 44 2103 41 58 2107 61 2098 40 41 2108 61 2098 40 41 2101 46 2109 40 2061 40 2107 44 2108 43 1501 41 41 621 348 2033 40 2003 44 2022 58 2056 44 2027 58 411 41 58 2110 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2110 41 58 2111 61 2003 46 2029 40 41 2112 61 2003 46 2029 40 41 2113 61 2003 46 2029 40 41 2114 61 2003 46 2029 40 41 2115 61 2003 46 2029 40 41 2116 61 2003 46 2029 40 41 2117 61 2003 46 2118 40 2022 44 2113 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 41 2119 61 2022 46 2077 91 2111 93 2119 46 2120 40 2117 41 621 385 2093 398 2022 46 2077 58 385 2060 398 2061 40 1500 44 2121 40 2093 46 2122 41 41 58 2123 61 2093 46 2122 91 2060 93 392 422 2072 40 2123 44 2124 41 58 344 2125 61 45 1501 392 2022 46 2087 91 2123 46 2126 46 2066 93 46 2083 58 392 2123 46 2127 614 1500 58 2125 61 2123 46 2126 46 2066 2117 61 2128 40 2123 46 2129 44 2125 41 2022 46 2092 91 2123 46 2126 46 2066 93 46 2120 40 2117 41 385 2093 398 2022 46 2077 58 392 2072 40 2093 44 2073 41 58 621 392 2093 46 2078 407 303 58 440 2050 40 648 41 621 392 2093 46 2078 46 2088 407 422 303 58 440 2050 40 648 41 2093 46 2078 46 2088 61 2093 392 2072 40 2093 44 2130 41 58 385 2060 398 2061 40 1500 44 2121 40 2093 46 2122 41 41 58 2126 61 2093 46 2122 91 2060 93 46 2126 392 2072 40 2126 44 2131 41 58 2126 46 2076 61 2093 359 2072 40 2093 44 2132 41 58 385 2060 398 2061 40 1500 44 2121 40 2093 46 2122 41 41 58 2126 61 2093 46 2122 91 2060 93 46 2126 392 2072 40 2126 44 2133 41 58 2126 46 2076 61 2093 348 2034 40 2003 44 2022 58 2056 41 58 2134 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2134 41 58 2067 61 2003 46 2029 40 41 2135 61 2022 46 2077 91 2067 93 2022 46 2136 46 2071 40 2135 41 2135 46 2137 61 2060 348 2035 40 2003 44 2022 58 2056 41 58 392 2022 46 2039 614 2040 46 2085 58 2138 61 2003 46 2029 40 41 2022 46 2139 61 91 303 93 42 2138 385 2060 398 2061 40 1500 44 2138 41 58 2140 61 2003 46 2029 40 41 2141 61 2003 46 2029 40 41 392 2141 614 1506 58 2141 61 45 1501 2142 61 2003 46 2029 40 41 392 2142 614 1506 58 2142 61 45 1501 2143 61 2003 46 2144 40 2140 44 2141 44 2142 41 2022 46 2139 91 2060 93 61 2143 348 2038 40 2003 44 2022 58 2056 41 58 2138 61 2121 40 2022 46 2087 41 2022 46 2086 61 91 1500 93 42 2138 385 2060 398 2061 40 1500 44 2138 41 58 2022 46 2086 91 2060 93 61 2022 46 2055 43 2060 43 1501 385 2060 398 2061 40 1500 44 2138 41 58 2003 46 2145 40 2022 44 2060 41 348 2145 40 2003 44 2022 58 2056 44 2053 58 404 41 58 2146 61 2147 40 41 2146 46 2066 61 2053 2022 46 2065 40 2146 41 2148 61 2149 40 41 2148 46 2066 61 2053 2022 46 2065 40 2148 41 2146 46 2078 61 2148 2022 46 2150 40 2146 41 2148 46 2088 61 2146 2151 61 303 392 2022 46 2087 91 2053 93 46 2083 58 621 2078 61 303 385 2093 398 2022 46 2077 58 392 2003 46 2152 40 2093 44 2053 41 58 2078 61 2093 2151 61 2093 46 2076 46 2122 91 1500 93 325 392 2151 407 303 58 440 2050 40 648 41 360 58 2078 61 2022 46 2092 91 2053 93 621 385 2093 398 2022 46 2077 58 385 2153 398 2093 46 2122 58 392 2153 614 2151 58 344 392 2153 46 2126 614 2078 58 2153 46 2126 61 2148 621 2087 61 2022 46 2087 91 2053 93 2138 61 2121 40 2087 46 2122 41 496 2138 62 1500 58 2146 46 2120 40 2087 46 2122 91 2138 45 1501 93 41 351 2087 46 2122 91 45 1501 93 621 2022 46 2087 91 2053 93 46 2120 40 2128 40 2146 41 41 2148 46 2120 40 2128 40 2078 41 41 2154 61 2155 40 41 2022 46 2065 40 2154 41 2154 46 2120 40 2156 40 2148 44 2022 46 2086 91 2053 93 41 41 2146 46 2120 40 2128 40 2154 41 41 348 2152 40 2003 44 2093 58 2063 44 2053 58 404 41 58 392 2093 46 2066 631 2053 58 450 303 392 422 2072 40 2093 44 2133 41 58 450 303 2157 61 2093 46 2122 91 2121 40 2093 46 2122 41 45 1501 93 46 2126 392 422 2072 40 2157 44 2158 41 58 450 303 392 2157 46 2159 308 92 2072 40 2157 46 2122 91 1500 93 46 2126 44 2094 41 58 450 2093 360 58 450 303 621 621 621 621 621 621 621 348 2036 40 2003 44 2022 58 2056 41 58 385 2093 398 2022 46 2077 58 392 422 2072 40 2093 44 2133 41 58 344 621 621 621 621 392 2022 46 2087 91 2093 46 2066 93 46 2083 58 2157 61 2093 46 2122 91 2121 40 2093 46 2122 41 45 1501 93 46 2126 392 2072 40 2157 44 2158 41 58 392 2157 46 2159 308 92 2072 40 2157 46 2122 91 1500 93 46 2126 44 2094 41 58 2093 46 2160 61 304 348 2037 40 2003 44 2022 58 2056 41 58 392 422 2003 46 2007 46 2037 58 450 621 385 2093 398 2022 46 2077 58 392 2093 407 303 58 344 2003 46 2161 40 2093 46 2159 428 2121 40 2093 46 2122 41 620 1501 41 392 2072 40 2093 44 2131 41 58 2003 46 2161 40 2093 46 2076 407 422 303 41 392 2072 40 2093 44 2133 41 58 2003 46 2161 40 2093 46 2076 407 422 303 41 2003 46 2161 40 2121 40 2093 46 2122 41 614 1502 41 392 2072 40 2093 46 2122 91 1500 93 46 2126 44 2162 41 58 2003 46 2161 40 2072 40 2093 46 2122 91 1501 93 46 2126 44 2158 41 41 2003 46 2161 40 422 2093 46 2081 41 359 2072 40 2093 46 2122 91 1500 93 46 2126 44 2158 41 58 2003 46 2161 40 2072 40 2093 46 2122 91 1501 93 46 2126 44 2162 41 41 2003 46 2161 40 2093 46 2081 41 360 58 440 2050 40 648 41 392 2072 40 2093 44 2132 41 58 2003 46 2161 40 2121 40 2093 46 2122 41 614 1501 41 2003 46 2161 40 2072 40 2093 46 2122 91 1500 93 46 2126 44 2133 41 41 392 2072 40 2093 44 2158 41 58 2003 46 2161 40 2093 46 2076 407 422 303 41 392 2072 40 2093 44 2163 41 58 2003 46 2161 40 2093 46 2095 407 422 303 41 392 2072 40 2093 44 2073 41 58 2003 46 2161 40 2093 46 2078 407 422 303 41 392 2072 40 2093 44 2149 41 58 2003 46 2161 40 2093 46 2088 407 422 303 41 392 2072 40 2093 44 2164 41 58 2003 46 2161 40 2121 40 2093 46 2122 41 620 1501 428 2093 46 2137 615 1500 41 360 58 2003 46 2161 40 2121 40 2093 46 2122 41 620 1501 428 2072 40 2093 44 2094 41 41 348 2161 40 2003 44 2165 58 323 44 2166 61 303 41 58 392 422 2165 58 392 2166 407 303 58 2166 61 648 440 2050 40 2166 41 348 2029 40 2003 41 58 2060 61 2003 46 2017 91 2003 46 2047 93 2003 46 2047 636 1501 450 2060 348 2032 40 2003 41 58 2167 61 2003 46 2029 40 41 2168 61 2003 46 2029 40 41 450 2167 124 40 2168 622 1503 41 348 2169 40 2003 41 58 2167 61 2003 46 2032 40 41 2168 61 2003 46 2032 40 41 450 40 2167 38 1511 41 124 40 2168 622 1503 41 348 2051 40 2003 41 58 2167 61 2003 46 2169 40 41 2168 61 2003 46 2169 40 41 2170 61 40 2167 38 1521 41 124 40 2168 622 1503 41 450 2010 40 404 61 2170 41 2171 61 91 409 2172 58 303 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 2128 40 2126 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2173 40 2126 44 2090 46 2091 44 2115 41 392 2116 631 1500 360 2173 40 2126 44 2114 44 2115 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2124 40 2022 46 2077 91 2114 93 44 2115 44 2116 44 2126 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2174 40 2126 44 2114 44 2115 44 2116 631 1500 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2156 40 2126 44 2090 46 2091 41 392 2116 631 1500 360 2156 40 2126 44 2114 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2175 40 2126 44 2114 44 2115 44 2116 631 1500 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2176 40 2126 44 2027 91 2114 93 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2177 40 2126 44 2027 91 2114 93 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2178 40 2126 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2179 40 2126 44 2114 41 93 348 2118 40 2003 44 2022 58 2056 44 2180 58 404 44 2111 58 404 44 2112 58 404 44 2114 58 404 44 2115 58 404 44 2116 58 404 44 2027 58 411 41 58 2126 61 2022 46 2077 91 2112 93 392 2180 62 2121 40 2003 46 2171 41 428 2003 46 2171 91 2180 93 407 303 58 440 2050 40 648 43 2018 40 2180 41 43 648 41 360 58 450 2003 46 2171 91 2180 93 40 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 41 2181 61 91 409 58 303 44 409 58 2155 40 41 44 409 58 2163 40 41 44 409 58 2147 40 41 44 409 58 2131 40 41 44 409 58 2162 40 41 44 409 58 2182 40 41 44 409 58 2094 40 41 44 409 58 2149 40 41 44 409 58 2132 40 41 44 409 58 2133 40 41 44 409 58 2130 40 41 44 409 58 2158 40 41 93 348 2068 40 2003 44 2180 58 404 44 2066 58 404 41 58 392 2180 62 2121 40 2003 46 2181 41 428 2003 46 2181 91 2180 93 407 303 58 440 2050 40 648 43 2018 40 2180 41 43 648 41 360 58 2067 61 2003 46 2181 91 2180 93 40 41 392 2067 407 422 303 58 2067 46 2066 61 2066 450 2067 2183 61 1500 621 2184 61 1501 621 2185 61 1502 621 2186 61 1502 621 2187 61 1502 621 2188 61 1502 621 2189 61 1502 621 2190 61 1502 621 2191 61 91 409 2141 44 2142 58 2192 40 2141 41 44 409 2141 44 2142 58 2193 40 2141 44 2142 41 44 409 2141 44 2142 58 2194 40 2141 41 44 409 2141 44 2142 58 2195 46 2196 44 409 2141 44 2142 58 2197 46 2196 44 409 2141 44 2142 58 2198 40 2141 41 44 409 2141 44 2142 58 2199 46 2196 44 409 2141 44 2142 58 2200 40 2141 41 93 348 2144 40 2003 44 2180 58 404 44 2141 58 404 44 2142 58 404 41 58 392 2180 62 2121 40 2003 46 2191 41 428 2003 46 2191 91 2180 93 407 303 58 440 2050 40 648 43 2018 40 2180 41 43 648 41 360 58 450 2003 46 2191 91 2180 93 40 2141 44 2142 41 
128664,Python,"class ATNDeserializer (object):

    def __init__(self, options = None):
        if options is None:
            options = ATNDeserializationOptions.defaultOptions
        self.deserializationOptions = options
        self.edgeFactories = None
        self.stateFactories = None
        self.actionFactories = None

    # Determines if a particular serialized representation of an ATN supports
    # a particular feature, identified by the {@link UUID} used for serializing
    # the ATN at the time the feature was first introduced.
    #
    # @param feature The {@link UUID} marking the first time the feature was
    # supported in the serialized ATN.
    # @param actualUuid The {@link UUID} of the actual serialized ATN which is
    # currently being deserialized.
    # @return {@code true} if the {@code actualUuid} value represents a
    # serialized ATN at or after the feature identified by {@code feature} was
    # introduced; otherwise, {@code false}.

    def isFeatureSupported(self, feature, actualUuid):
        idx1 = SUPPORTED_UUIDS.index(feature)
        if idx1<0:
            return False
        idx2 = SUPPORTED_UUIDS.index(actualUuid)
        return idx2 >= idx1

    def deserialize(self, data):
        self.reset(data)
        self.checkVersion()
        self.checkUUID()
        atn = self.readATN()
        self.readStates(atn)
        self.readRules(atn)
        self.readModes(atn)
        sets = []
        # First, read all sets with 16-bit Unicode code points <= U+FFFF.
        self.readSets(atn, sets, self.readInt)
        # Next, if the ATN was serialized with the Unicode SMP feature,
        # deserialize sets with 32-bit arguments <= U+10FFFF.
        if self.isFeatureSupported(ADDED_UNICODE_SMP, self.uuid):
            self.readSets(atn, sets, self.readInt32)
        self.readEdges(atn, sets)
        self.readDecisions(atn)
        self.readLexerActions(atn)
        self.markPrecedenceDecisions(atn)
        self.verifyATN(atn)
        if self.deserializationOptions.generateRuleBypassTransitions \
                and atn.grammarType == ATNType.PARSER:
            self.generateRuleBypassTransitions(atn)
            # re-verify after modification
            self.verifyATN(atn)
        return atn

    def reset(self, data):
        def adjust(c):
            v = ord(c)
            return v-2 if v>1 else v + 65533
        temp = [ adjust(c) for c in data ]
        # don't adjust the first value since that's the version number
        temp[0] = ord(data[0])
        self.data = temp
        self.pos = 0

    def checkVersion(self):
        version = self.readInt()
        if version != SERIALIZED_VERSION:
            raise Exception(""Could not deserialize ATN with version "" + str(version) + "" (expected "" + str(SERIALIZED_VERSION) + "")."")

    def checkUUID(self):
        uuid = self.readUUID()
        if not uuid in SUPPORTED_UUIDS:
            raise Exception(""Could not deserialize ATN with UUID: "" + str(uuid) + \
                            "" (expected "" + str(SERIALIZED_UUID) + "" or a legacy UUID)."", uuid, SERIALIZED_UUID)
        self.uuid = uuid

    def readATN(self):
        grammarType = self.readInt()
        maxTokenType = self.readInt()
        return ATN(grammarType, maxTokenType)

    def readStates(self, atn):
        loopBackStateNumbers = []
        endStateNumbers = []
        nstates = self.readInt()
        for i in range(0, nstates):
            stype = self.readInt()
            # ignore bad type of states
            if stype==ATNState.INVALID_TYPE:
                atn.addState(None)
                continue
            ruleIndex = self.readInt()
            if ruleIndex == 0xFFFF:
                ruleIndex = -1

            s = self.stateFactory(stype, ruleIndex)
            if stype == ATNState.LOOP_END: # special case
                loopBackStateNumber = self.readInt()
                loopBackStateNumbers.append((s, loopBackStateNumber))
            elif isinstance(s, BlockStartState):
                endStateNumber = self.readInt()
                endStateNumbers.append((s, endStateNumber))

            atn.addState(s)

        # delay the assignment of loop back and end states until we know all the state instances have been initialized
        for pair in loopBackStateNumbers:
            pair[0].loopBackState = atn.states[pair[1]]

        for pair in endStateNumbers:
            pair[0].endState = atn.states[pair[1]]

        numNonGreedyStates = self.readInt()
        for i in range(0, numNonGreedyStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].nonGreedy = True

        numPrecedenceStates = self.readInt()
        for i in range(0, numPrecedenceStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].isPrecedenceRule = True

    def readRules(self, atn):
        nrules = self.readInt()
        if atn.grammarType == ATNType.LEXER:
            atn.ruleToTokenType = [0] * nrules

        atn.ruleToStartState = [0] * nrules
        for i in range(0, nrules):
            s = self.readInt()
            startState = atn.states[s]
            atn.ruleToStartState[i] = startState
            if atn.grammarType == ATNType.LEXER:
                tokenType = self.readInt()
                if tokenType == 0xFFFF:
                    tokenType = Token.EOF

                atn.ruleToTokenType[i] = tokenType

        atn.ruleToStopState = [0] * nrules
        for state in atn.states:
            if not isinstance(state, RuleStopState):
                continue
            atn.ruleToStopState[state.ruleIndex] = state
            atn.ruleToStartState[state.ruleIndex].stopState = state

    def readModes(self, atn):
        nmodes = self.readInt()
        for i in range(0, nmodes):
            s = self.readInt()
            atn.modeToStartState.append(atn.states[s])

    def readSets(self, atn, sets, readUnicode):
        m = self.readInt()
        for i in range(0, m):
            iset = IntervalSet()
            sets.append(iset)
            n = self.readInt()
            containsEof = self.readInt()
            if containsEof!=0:
                iset.addOne(-1)
            for j in range(0, n):
                i1 = readUnicode()
                i2 = readUnicode()
                iset.addRange(Interval(i1, i2 + 1)) # range upper limit is exclusive

    def readEdges(self, atn, sets):
        nedges = self.readInt()
        for i in range(0, nedges):
            src = self.readInt()
            trg = self.readInt()
            ttype = self.readInt()
            arg1 = self.readInt()
            arg2 = self.readInt()
            arg3 = self.readInt()
            trans = self.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets)
            srcState = atn.states[src]
            srcState.addTransition(trans)

        # edges for rule stop states can be derived, so they aren't serialized
        for state in atn.states:
            for i in range(0, len(state.transitions)):
                t = state.transitions[i]
                if not isinstance(t, RuleTransition):
                    continue
                outermostPrecedenceReturn = -1
                if atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule:
                    if t.precedence == 0:
                        outermostPrecedenceReturn = t.target.ruleIndex
                trans = EpsilonTransition(t.followState, outermostPrecedenceReturn)
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans)

        for state in atn.states:
            if isinstance(state, BlockStartState):
                # we need to know the end state to set its start state
                if state.endState is None:
                    raise Exception(""IllegalState"")
                # block end states can only be associated to a single block start state
                if state.endState.startState is not None:
                    raise Exception(""IllegalState"")
                state.endState.startState = state

            elif isinstance(state, PlusLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, PlusBlockStartState):
                        target.loopBackState = state
            elif isinstance(state, StarLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, StarLoopEntryState):
                        target.loopBackState = state

    def readDecisions(self, atn):
        ndecisions = self.readInt()
        for i in range(0, ndecisions):
            s = self.readInt()
            decState = atn.states[s]
            atn.decisionToState.append(decState)
            decState.decision = i

    def readLexerActions(self, atn):
        if atn.grammarType == ATNType.LEXER:
            count = self.readInt()
            atn.lexerActions = [ None ] * count
            for i in range(0, count):
                actionType = self.readInt()
                data1 = self.readInt()
                if data1 == 0xFFFF:
                    data1 = -1
                data2 = self.readInt()
                if data2 == 0xFFFF:
                    data2 = -1
                lexerAction = self.lexerActionFactory(actionType, data1, data2)
                atn.lexerActions[i] = lexerAction

    def generateRuleBypassTransitions(self, atn):

        count = len(atn.ruleToStartState)
        atn.ruleToTokenType = [ 0 ] * count
        for i in range(0, count):
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1

        for i in range(0, count):
            self.generateRuleBypassTransition(atn, i)

    def generateRuleBypassTransition(self, atn, idx):

        bypassStart = BasicBlockStartState()
        bypassStart.ruleIndex = idx
        atn.addState(bypassStart)

        bypassStop = BlockEndState()
        bypassStop.ruleIndex = idx
        atn.addState(bypassStop)

        bypassStart.endState = bypassStop
        atn.defineDecisionState(bypassStart)

        bypassStop.startState = bypassStart

        excludeTransition = None

        if atn.ruleToStartState[idx].isPrecedenceRule:
            # wrap from the beginning of the rule to the StarLoopEntryState
            endState = None
            for state in atn.states:
                if self.stateIsEndStateFor(state, idx):
                    endState = state
                    excludeTransition = state.loopBackState.transitions[0]
                    break

            if excludeTransition is None:
                raise Exception(""Couldn't identify final state of the precedence rule prefix section."")

        else:

            endState = atn.ruleToStopState[idx]

        # all non-excluded transitions that currently target end state need to target blockEnd instead
        for state in atn.states:
            for transition in state.transitions:
                if transition == excludeTransition:
                    continue
                if transition.target == endState:
                    transition.target = bypassStop

        # all transitions leaving the rule start state need to leave blockStart instead
        ruleToStartState = atn.ruleToStartState[idx]
        count = len(ruleToStartState.transitions)
        while count > 0:
            bypassStart.addTransition(ruleToStartState.transitions[count-1])
            del ruleToStartState.transitions[-1]

        # link the new states
        atn.ruleToStartState[idx].addTransition(EpsilonTransition(bypassStart))
        bypassStop.addTransition(EpsilonTransition(endState))

        matchState = BasicState()
        atn.addState(matchState)
        matchState.addTransition(AtomTransition(bypassStop, atn.ruleToTokenType[idx]))
        bypassStart.addTransition(EpsilonTransition(matchState))


    def stateIsEndStateFor(self, state, idx):
        if state.ruleIndex != idx:
            return None
        if not isinstance(state, StarLoopEntryState):
            return None

        maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
        if not isinstance(maybeLoopEndState, LoopEndState):
            return None

        if maybeLoopEndState.epsilonOnlyTransitions and \
                isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
            return state
        else:
            return None


    #
    # Analyze the {@link StarLoopEntryState} states in the specified ATN to set
    # the {@link StarLoopEntryState#isPrecedenceDecision} field to the
    # correct value.
    #
    # @param atn The ATN.
    #
    def markPrecedenceDecisions(self, atn):
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue

            # We analyze the ATN to determine if this ATN decision state is the
            # decision for the closure block that determines whether a
            # precedence rule should continue or complete.
            #
            if atn.ruleToStartState[state.ruleIndex].isPrecedenceRule:
                maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
                if isinstance(maybeLoopEndState, LoopEndState):
                    if maybeLoopEndState.epsilonOnlyTransitions and \
                            isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
                        state.isPrecedenceDecision = True

    def verifyATN(self, atn):
        if not self.deserializationOptions.verifyATN:
            return
        # verify assumptions
        for state in atn.states:
            if state is None:
                continue

            self.checkCondition(state.epsilonOnlyTransitions or len(state.transitions) <= 1)

            if isinstance(state, PlusBlockStartState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, StarLoopEntryState):
                self.checkCondition(state.loopBackState is not None)
                self.checkCondition(len(state.transitions) == 2)

                if isinstance(state.transitions[0].target, StarBlockStartState):
                    self.checkCondition(isinstance(state.transitions[1].target, LoopEndState))
                    self.checkCondition(not state.nonGreedy)
                elif isinstance(state.transitions[0].target, LoopEndState):
                    self.checkCondition(isinstance(state.transitions[1].target, StarBlockStartState))
                    self.checkCondition(state.nonGreedy)
                else:
                    raise Exception(""IllegalState"")

            if isinstance(state, StarLoopbackState):
                self.checkCondition(len(state.transitions) == 1)
                self.checkCondition(isinstance(state.transitions[0].target, StarLoopEntryState))

            if isinstance(state, LoopEndState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, RuleStartState):
                self.checkCondition(state.stopState is not None)

            if isinstance(state, BlockStartState):
                self.checkCondition(state.endState is not None)

            if isinstance(state, BlockEndState):
                self.checkCondition(state.startState is not None)

            if isinstance(state, DecisionState):
                self.checkCondition(len(state.transitions) <= 1 or state.decision >= 0)
            else:
                self.checkCondition(len(state.transitions) <= 1 or isinstance(state, RuleStopState))

    def checkCondition(self, condition, message=None):
        if not condition:
            if message is None:
                message = ""IllegalState""
            raise Exception(message)

    def readInt(self):
        i = self.data[self.pos]
        self.pos += 1
        return i

    def readInt32(self):
        low = self.readInt()
        high = self.readInt()
        return low | (high << 16)

    def readLong(self):
        low = self.readInt32()
        high = self.readInt32()
        return (low & 0x00000000FFFFFFFF) | (high << 32)

    def readUUID(self):
        low = self.readLong()
        high = self.readLong()
        allBits = (low & 0xFFFFFFFFFFFFFFFF) | (high << 64)
        return UUID(int=allBits)

    def edgeFactory(self, atn, type, src, trg, arg1, arg2, arg3, sets):
        target = atn.states[trg]
        if self.edgeFactories is None:
            ef = [None] * 11
            ef[0] = lambda args : None
            ef[Transition.EPSILON] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                EpsilonTransition(target)
            ef[Transition.RANGE] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                RangeTransition(target, Token.EOF, arg2) if arg3 != 0 else RangeTransition(target, arg1, arg2)
            ef[Transition.RULE] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                RuleTransition(atn.states[arg1], arg2, arg3, target)
            ef[Transition.PREDICATE] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                PredicateTransition(target, arg1, arg2, arg3 != 0)
            ef[Transition.PRECEDENCE] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                PrecedencePredicateTransition(target, arg1)
            ef[Transition.ATOM] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                AtomTransition(target, Token.EOF) if arg3 != 0 else AtomTransition(target, arg1)
            ef[Transition.ACTION] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                ActionTransition(target, arg1, arg2, arg3 != 0)
            ef[Transition.SET] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                SetTransition(target, sets[arg1])
            ef[Transition.NOT_SET] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                NotSetTransition(target, sets[arg1])
            ef[Transition.WILDCARD] = lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                WildcardTransition(target)
            self.edgeFactories = ef

        if type> len(self.edgeFactories) or self.edgeFactories[type] is None:
            raise Exception(""The specified transition type: "" + str(type) + "" is not valid."")
        else:
            return self.edgeFactories[type](atn, src, trg, arg1, arg2, arg3, sets, target)

    def stateFactory(self, type, ruleIndex):
        if self.stateFactories is None:
            sf = [None] * 13
            sf[ATNState.INVALID_TYPE] = lambda : None
            sf[ATNState.BASIC] = lambda : BasicState()
            sf[ATNState.RULE_START] = lambda : RuleStartState()
            sf[ATNState.BLOCK_START] = lambda : BasicBlockStartState()
            sf[ATNState.PLUS_BLOCK_START] = lambda : PlusBlockStartState()
            sf[ATNState.STAR_BLOCK_START] = lambda : StarBlockStartState()
            sf[ATNState.TOKEN_START] = lambda : TokensStartState()
            sf[ATNState.RULE_STOP] = lambda : RuleStopState()
            sf[ATNState.BLOCK_END] = lambda : BlockEndState()
            sf[ATNState.STAR_LOOP_BACK] = lambda : StarLoopbackState()
            sf[ATNState.STAR_LOOP_ENTRY] = lambda : StarLoopEntryState()
            sf[ATNState.PLUS_LOOP_BACK] = lambda : PlusLoopbackState()
            sf[ATNState.LOOP_END] = lambda : LoopEndState()
            self.stateFactories = sf

        if type> len(self.stateFactories) or self.stateFactories[type] is None:
            raise Exception(""The specified state type "" + str(type) + "" is not valid."")
        else:
            s = self.stateFactories[type]()
            if s is not None:
                s.ruleIndex = ruleIndex
            return s

    def lexerActionFactory(self, type, data1, data2):
        if self.actionFactories is None:
            af = [ None ] * 8
            af[LexerActionType.CHANNEL] = lambda data1, data2: LexerChannelAction(data1)
            af[LexerActionType.CUSTOM] = lambda data1, data2: LexerCustomAction(data1, data2)
            af[LexerActionType.MODE] = lambda data1, data2: LexerModeAction(data1)
            af[LexerActionType.MORE] = lambda data1, data2: LexerMoreAction.INSTANCE
            af[LexerActionType.POP_MODE] = lambda data1, data2: LexerPopModeAction.INSTANCE
            af[LexerActionType.PUSH_MODE] = lambda data1, data2: LexerPushModeAction(data1)
            af[LexerActionType.SKIP] = lambda data1, data2: LexerSkipAction.INSTANCE
            af[LexerActionType.TYPE] = lambda data1, data2: LexerTypeAction(data1)
            self.actionFactories = af

        if type> len(self.actionFactories) or self.actionFactories[type] is None:
            raise Exception(""The specified lexer action type "" + str(type) + "" is not valid."")
        else:
            return self.actionFactories[type](data1, data2)",1,334 2000 40 426 41 58 348 2001 40 2002 44 2003 61 303 41 58 392 2003 407 303 58 2003 61 2004 46 2005 2002 46 2006 61 2003 2002 46 2007 61 303 2002 46 2008 61 303 2002 46 2009 61 303 621 621 621 621 621 621 621 621 621 621 621 348 2010 40 2002 44 2011 44 2012 41 58 2013 61 2014 46 2015 40 2011 41 392 2013 60 1500 58 450 302 2016 61 2014 46 2015 40 2012 41 450 2016 615 2013 348 2017 40 2002 44 2018 41 58 2002 46 2019 40 2018 41 2002 46 2020 40 41 2002 46 2021 40 41 2022 61 2002 46 2023 40 41 2002 46 2024 40 2022 41 2002 46 2025 40 2022 41 2002 46 2026 40 2022 41 2027 61 91 93 621 2002 46 2028 40 2022 44 2027 44 2002 46 2029 41 621 621 392 2002 46 2010 40 2030 44 2002 46 2031 41 58 2002 46 2028 40 2022 44 2027 44 2002 46 2032 41 2002 46 2033 40 2022 44 2027 41 2002 46 2034 40 2022 41 2002 46 2035 40 2022 41 2002 46 2036 40 2022 41 2002 46 2037 40 2022 41 392 2002 46 2006 46 2038 92 308 2022 46 2039 614 2040 46 2041 58 2002 46 2038 40 2022 41 621 2002 46 2037 40 2022 41 450 2022 348 2019 40 2002 44 2018 41 58 348 2042 40 2043 41 58 2044 61 2045 40 2043 41 450 2044 45 1502 392 2044 62 1501 360 2044 43 1506 2046 61 91 2042 40 2043 41 385 2043 398 2018 93 621 2046 91 1500 93 61 2045 40 2018 91 1500 93 41 2002 46 2018 61 2046 2002 46 2047 61 1500 348 2020 40 2002 41 58 2048 61 2002 46 2029 40 41 392 2048 631 2049 58 440 2050 40 648 43 2051 40 2048 41 43 648 43 2051 40 2049 41 43 648 41 348 2021 40 2002 41 58 2031 61 2002 46 2052 40 41 392 422 2031 398 2014 58 440 2050 40 648 43 2051 40 2031 41 43 92 648 43 2051 40 2053 41 43 648 44 2031 44 2053 41 2002 46 2031 61 2031 348 2023 40 2002 41 58 2039 61 2002 46 2029 40 41 2054 61 2002 46 2029 40 41 450 2055 40 2039 44 2054 41 348 2024 40 2002 44 2022 41 58 2056 61 91 93 2057 61 91 93 2058 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2058 41 58 2061 61 2002 46 2029 40 41 621 392 2061 614 2062 46 2063 58 2022 46 2064 40 303 41 344 2065 61 2002 46 2029 40 41 392 2065 614 1506 58 2065 61 45 1501 2066 61 2002 46 2067 40 2061 44 2065 41 392 2061 614 2062 46 2068 58 621 2069 61 2002 46 2029 40 41 2056 46 2070 40 40 2066 44 2069 41 41 359 2071 40 2066 44 2072 41 58 2073 61 2002 46 2029 40 41 2057 46 2070 40 40 2066 44 2073 41 41 2022 46 2064 40 2066 41 621 385 2074 398 2056 58 2074 91 1500 93 46 2075 61 2022 46 2076 91 2074 91 1501 93 93 385 2074 398 2057 58 2074 91 1500 93 46 2077 61 2022 46 2076 91 2074 91 1501 93 93 2078 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2078 41 58 2079 61 2002 46 2029 40 41 2022 46 2076 91 2079 93 46 2080 61 304 2081 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2081 41 58 2079 61 2002 46 2029 40 41 2022 46 2076 91 2079 93 46 2082 61 304 348 2025 40 2002 44 2022 41 58 2083 61 2002 46 2029 40 41 392 2022 46 2039 614 2040 46 2084 58 2022 46 2085 61 91 1500 93 42 2083 2022 46 2086 61 91 1500 93 42 2083 385 2059 398 2060 40 1500 44 2083 41 58 2066 61 2002 46 2029 40 41 2087 61 2022 46 2076 91 2066 93 2022 46 2086 91 2059 93 61 2087 392 2022 46 2039 614 2040 46 2084 58 2088 61 2002 46 2029 40 41 392 2088 614 1506 58 2088 61 2089 46 2090 2022 46 2085 91 2059 93 61 2088 2022 46 2091 61 91 1500 93 42 2083 385 2092 398 2022 46 2076 58 392 422 2071 40 2092 44 2093 41 58 344 2022 46 2091 91 2092 46 2065 93 61 2092 2022 46 2086 91 2092 46 2065 93 46 2094 61 2092 348 2026 40 2002 44 2022 41 58 2095 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2095 41 58 2066 61 2002 46 2029 40 41 2022 46 2096 46 2070 40 2022 46 2076 91 2066 93 41 348 2028 40 2002 44 2022 44 2027 44 2097 41 58 2098 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2098 41 58 2099 61 2100 40 41 2027 46 2070 40 2099 41 2101 61 2002 46 2029 40 41 2102 61 2002 46 2029 40 41 392 2102 631 1500 58 2099 46 2103 40 45 1501 41 385 2104 398 2060 40 1500 44 2101 41 58 2105 61 2097 40 41 2106 61 2097 40 41 2099 46 2107 40 2108 40 2105 44 2106 43 1501 41 41 621 348 2033 40 2002 44 2022 44 2027 41 58 2109 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2109 41 58 2110 61 2002 46 2029 40 41 2111 61 2002 46 2029 40 41 2112 61 2002 46 2029 40 41 2113 61 2002 46 2029 40 41 2114 61 2002 46 2029 40 41 2115 61 2002 46 2029 40 41 2116 61 2002 46 2117 40 2022 44 2112 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 41 2118 61 2022 46 2076 91 2110 93 2118 46 2119 40 2116 41 621 385 2092 398 2022 46 2076 58 385 2059 398 2060 40 1500 44 2120 40 2092 46 2121 41 41 58 2122 61 2092 46 2121 91 2059 93 392 422 2071 40 2122 44 2123 41 58 344 2124 61 45 1501 392 2022 46 2086 91 2122 46 2125 46 2065 93 46 2082 58 392 2122 46 2126 614 1500 58 2124 61 2122 46 2125 46 2065 2116 61 2127 40 2122 46 2128 44 2124 41 2022 46 2091 91 2122 46 2125 46 2065 93 46 2119 40 2116 41 385 2092 398 2022 46 2076 58 392 2071 40 2092 44 2072 41 58 621 392 2092 46 2077 407 303 58 440 2050 40 648 41 621 392 2092 46 2077 46 2087 407 422 303 58 440 2050 40 648 41 2092 46 2077 46 2087 61 2092 359 2071 40 2092 44 2129 41 58 385 2059 398 2060 40 1500 44 2120 40 2092 46 2121 41 41 58 2125 61 2092 46 2121 91 2059 93 46 2125 392 2071 40 2125 44 2130 41 58 2125 46 2075 61 2092 359 2071 40 2092 44 2131 41 58 385 2059 398 2060 40 1500 44 2120 40 2092 46 2121 41 41 58 2125 61 2092 46 2121 91 2059 93 46 2125 392 2071 40 2125 44 2132 41 58 2125 46 2075 61 2092 348 2034 40 2002 44 2022 41 58 2133 61 2002 46 2029 40 41 385 2059 398 2060 40 1500 44 2133 41 58 2066 61 2002 46 2029 40 41 2134 61 2022 46 2076 91 2066 93 2022 46 2135 46 2070 40 2134 41 2134 46 2136 61 2059 348 2035 40 2002 44 2022 41 58 392 2022 46 2039 614 2040 46 2084 58 2137 61 2002 46 2029 40 41 2022 46 2138 61 91 303 93 42 2137 385 2059 398 2060 40 1500 44 2137 41 58 2139 61 2002 46 2029 40 41 2140 61 2002 46 2029 40 41 392 2140 614 1506 58 2140 61 45 1501 2141 61 2002 46 2029 40 41 392 2141 614 1506 58 2141 61 45 1501 2142 61 2002 46 2143 40 2139 44 2140 44 2141 41 2022 46 2138 91 2059 93 61 2142 348 2038 40 2002 44 2022 41 58 2137 61 2120 40 2022 46 2086 41 2022 46 2085 61 91 1500 93 42 2137 385 2059 398 2060 40 1500 44 2137 41 58 2022 46 2085 91 2059 93 61 2022 46 2054 43 2059 43 1501 385 2059 398 2060 40 1500 44 2137 41 58 2002 46 2144 40 2022 44 2059 41 348 2144 40 2002 44 2022 44 2145 41 58 2146 61 2147 40 41 2146 46 2065 61 2145 2022 46 2064 40 2146 41 2148 61 2149 40 41 2148 46 2065 61 2145 2022 46 2064 40 2148 41 2146 46 2077 61 2148 2022 46 2150 40 2146 41 2148 46 2087 61 2146 2151 61 303 392 2022 46 2086 91 2145 93 46 2082 58 621 2077 61 303 385 2092 398 2022 46 2076 58 392 2002 46 2152 40 2092 44 2145 41 58 2077 61 2092 2151 61 2092 46 2075 46 2121 91 1500 93 325 392 2151 407 303 58 440 2050 40 648 41 360 58 2077 61 2022 46 2091 91 2145 93 621 385 2092 398 2022 46 2076 58 385 2153 398 2092 46 2121 58 392 2153 614 2151 58 344 392 2153 46 2125 614 2077 58 2153 46 2125 61 2148 621 2086 61 2022 46 2086 91 2145 93 2137 61 2120 40 2086 46 2121 41 496 2137 62 1500 58 2146 46 2119 40 2086 46 2121 91 2137 45 1501 93 41 351 2086 46 2121 91 45 1501 93 621 2022 46 2086 91 2145 93 46 2119 40 2127 40 2146 41 41 2148 46 2119 40 2127 40 2077 41 41 2154 61 2155 40 41 2022 46 2064 40 2154 41 2154 46 2119 40 2156 40 2148 44 2022 46 2085 91 2145 93 41 41 2146 46 2119 40 2127 40 2154 41 41 348 2152 40 2002 44 2092 44 2145 41 58 392 2092 46 2065 631 2145 58 450 303 392 422 2071 40 2092 44 2132 41 58 450 303 2157 61 2092 46 2121 91 2120 40 2092 46 2121 41 45 1501 93 46 2125 392 422 2071 40 2157 44 2158 41 58 450 303 392 2157 46 2159 308 92 2071 40 2157 46 2121 91 1500 93 46 2125 44 2093 41 58 450 2092 360 58 450 303 621 621 621 621 621 621 621 348 2036 40 2002 44 2022 41 58 385 2092 398 2022 46 2076 58 392 422 2071 40 2092 44 2132 41 58 344 621 621 621 621 392 2022 46 2086 91 2092 46 2065 93 46 2082 58 2157 61 2092 46 2121 91 2120 40 2092 46 2121 41 45 1501 93 46 2125 392 2071 40 2157 44 2158 41 58 392 2157 46 2159 308 92 2071 40 2157 46 2121 91 1500 93 46 2125 44 2093 41 58 2092 46 2160 61 304 348 2037 40 2002 44 2022 41 58 392 422 2002 46 2006 46 2037 58 450 621 385 2092 398 2022 46 2076 58 392 2092 407 303 58 344 2002 46 2161 40 2092 46 2159 428 2120 40 2092 46 2121 41 620 1501 41 392 2071 40 2092 44 2130 41 58 2002 46 2161 40 2092 46 2075 407 422 303 41 392 2071 40 2092 44 2132 41 58 2002 46 2161 40 2092 46 2075 407 422 303 41 2002 46 2161 40 2120 40 2092 46 2121 41 614 1502 41 392 2071 40 2092 46 2121 91 1500 93 46 2125 44 2162 41 58 2002 46 2161 40 2071 40 2092 46 2121 91 1501 93 46 2125 44 2158 41 41 2002 46 2161 40 422 2092 46 2080 41 359 2071 40 2092 46 2121 91 1500 93 46 2125 44 2158 41 58 2002 46 2161 40 2071 40 2092 46 2121 91 1501 93 46 2125 44 2162 41 41 2002 46 2161 40 2092 46 2080 41 360 58 440 2050 40 648 41 392 2071 40 2092 44 2131 41 58 2002 46 2161 40 2120 40 2092 46 2121 41 614 1501 41 2002 46 2161 40 2071 40 2092 46 2121 91 1500 93 46 2125 44 2132 41 41 392 2071 40 2092 44 2158 41 58 2002 46 2161 40 2092 46 2075 407 422 303 41 392 2071 40 2092 44 2163 41 58 2002 46 2161 40 2092 46 2094 407 422 303 41 392 2071 40 2092 44 2072 41 58 2002 46 2161 40 2092 46 2077 407 422 303 41 392 2071 40 2092 44 2149 41 58 2002 46 2161 40 2092 46 2087 407 422 303 41 392 2071 40 2092 44 2164 41 58 2002 46 2161 40 2120 40 2092 46 2121 41 620 1501 428 2092 46 2136 615 1500 41 360 58 2002 46 2161 40 2120 40 2092 46 2121 41 620 1501 428 2071 40 2092 44 2093 41 41 348 2161 40 2002 44 2165 44 2166 61 303 41 58 392 422 2165 58 392 2166 407 303 58 2166 61 648 440 2050 40 2166 41 348 2029 40 2002 41 58 2059 61 2002 46 2018 91 2002 46 2047 93 2002 46 2047 636 1501 450 2059 348 2032 40 2002 41 58 2167 61 2002 46 2029 40 41 2168 61 2002 46 2029 40 41 450 2167 124 40 2168 622 1503 41 348 2169 40 2002 41 58 2167 61 2002 46 2032 40 41 2168 61 2002 46 2032 40 41 450 40 2167 38 1511 41 124 40 2168 622 1503 41 348 2052 40 2002 41 58 2167 61 2002 46 2169 40 41 2168 61 2002 46 2169 40 41 2170 61 40 2167 38 1521 41 124 40 2168 622 1503 41 450 2171 40 404 61 2170 41 348 2117 40 2002 44 2022 44 2172 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 41 58 2125 61 2022 46 2076 91 2111 93 392 2002 46 2007 407 303 58 2173 61 91 303 93 42 1503 2173 91 1500 93 61 409 2174 58 303 2173 91 2175 46 2176 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2127 40 2125 41 2173 91 2175 46 2177 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2178 40 2125 44 2089 46 2090 44 2114 41 392 2115 631 1500 360 2178 40 2125 44 2113 44 2114 41 2173 91 2175 46 2179 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2123 40 2022 46 2076 91 2113 93 44 2114 44 2115 44 2125 41 2173 91 2175 46 2180 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2181 40 2125 44 2113 44 2114 44 2115 631 1500 41 2173 91 2175 46 2182 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2183 40 2125 44 2113 41 2173 91 2175 46 2184 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2156 40 2125 44 2089 46 2090 41 392 2115 631 1500 360 2156 40 2125 44 2113 41 2173 91 2175 46 2185 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2186 40 2125 44 2113 44 2114 44 2115 631 1500 41 2173 91 2175 46 2187 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2188 40 2125 44 2027 91 2113 93 41 2173 91 2175 46 2189 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2190 40 2125 44 2027 91 2113 93 41 2173 91 2175 46 2191 93 61 409 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 58 92 2192 40 2125 41 2002 46 2007 61 2173 392 2172 62 2120 40 2002 46 2007 41 428 2002 46 2007 91 2172 93 407 303 58 440 2050 40 648 43 2051 40 2172 41 43 648 41 360 58 450 2002 46 2007 91 2172 93 40 2022 44 2110 44 2111 44 2113 44 2114 44 2115 44 2027 44 2125 41 348 2067 40 2002 44 2172 44 2065 41 58 392 2002 46 2008 407 303 58 2193 61 91 303 93 42 1503 2193 91 2062 46 2063 93 61 409 58 303 2193 91 2062 46 2194 93 61 409 58 2155 40 41 2193 91 2062 46 2195 93 61 409 58 2163 40 41 2193 91 2062 46 2196 93 61 409 58 2147 40 41 2193 91 2062 46 2197 93 61 409 58 2130 40 41 2193 91 2062 46 2198 93 61 409 58 2162 40 41 2193 91 2062 46 2199 93 61 409 58 2200 40 41 2193 91 2062 46 2201 93 61 409 58 2093 40 41 2193 91 2062 46 2202 93 61 409 58 2149 40 41 2193 91 2062 46 2203 93 61 409 58 2131 40 41 2193 91 2062 46 2204 93 61 409 58 2132 40 41 2193 91 2062 46 2205 93 61 409 58 2129 40 41 2193 91 2062 46 2068 93 61 409 58 2158 40 41 2002 46 2008 61 2193 392 2172 62 2120 40 2002 46 2008 41 428 2002 46 2008 91 2172 93 407 303 58 440 2050 40 648 43 2051 40 2172 41 43 648 41 360 58 2066 61 2002 46 2008 91 2172 93 40 41 392 2066 407 422 303 58 2066 46 2065 61 2065 450 2066 348 2143 40 2002 44 2172 44 2140 44 2141 41 58 392 2002 46 2009 407 303 58 2206 61 91 303 93 42 1502 2206 91 2207 46 2208 93 61 409 2140 44 2141 58 2209 40 2140 41 2206 91 2207 46 2210 93 61 409 2140 44 2141 58 2211 40 2140 44 2141 41 2206 91 2207 46 2212 93 61 409 2140 44 2141 58 2213 40 2140 41 2206 91 2207 46 2214 93 61 409 2140 44 2141 58 2215 46 2216 2206 91 2207 46 2217 93 61 409 2140 44 2141 58 2218 46 2216 2206 91 2207 46 2219 93 61 409 2140 44 2141 58 2220 40 2140 41 2206 91 2207 46 2221 93 61 409 2140 44 2141 58 2222 46 2216 2206 91 2207 46 2223 93 61 409 2140 44 2141 58 2224 40 2140 41 2002 46 2009 61 2206 392 2172 62 2120 40 2002 46 2009 41 428 2002 46 2009 91 2172 93 407 303 58 440 2050 40 648 43 2051 40 2172 41 43 648 41 360 58 450 2002 46 2009 91 2172 93 40 2140 44 2141 41 
128717,Python,"class BufferedTokenStream(TokenStream):

    def __init__(self, tokenSource):
        # The {@link TokenSource} from which tokens for this stream are fetched.
        self.tokenSource = tokenSource

        # A collection of all tokens fetched from the token source. The list is
        # considered a complete view of the input once {@link #fetchedEOF} is set
        # to {@code true}.
        self.tokens = []

        # The index into {@link #tokens} of the current token (next token to
        # {@link #consume}). {@link #tokens}{@code [}{@link #p}{@code ]} should be
        # {@link #LT LT(1)}.
        #
        # <p>This field is set to -1 when the stream is first constructed or when
        # {@link #setTokenSource} is called, indicating that the first token has
        # not yet been fetched from the token source. For additional information,
        # see the documentation of {@link IntStream} for a description of
        # Initializing Methods.</p>
        self.index = -1

        # Indicates whether the {@link Token#EOF} token has been fetched from
        # {@link #tokenSource} and added to {@link #tokens}. This field improves
        # performance for the following cases:
        #
        # <ul>
        # <li>{@link #consume}: The lookahead check in {@link #consume} to prevent
        # consuming the EOF symbol is optimized by checking the values of
        # {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.</li>
        # <li>{@link #fetch}: The check to prevent adding multiple EOF symbols into
        # {@link #tokens} is trivial with this field.</li>
        # <ul>
        self.fetchedEOF = False

    def mark(self):
        return 0

    def release(self, marker):
        # no resources to release
        pass

    def reset(self):
        self.seek(0)

    def seek(self, index):
        self.lazyInit()
        self.index = self.adjustSeekIndex(index)

    def get(self, index):
        self.lazyInit()
        return self.tokens[index]

    def consume(self):
        skipEofCheck = False
        if self.index >= 0:
            if self.fetchedEOF:
                # the last token in tokens is EOF. skip check if p indexes any
                # fetched token except the last.
                skipEofCheck = self.index < len(self.tokens) - 1
            else:
                # no EOF token in tokens. skip check if p indexes a fetched token.
                skipEofCheck = self.index < len(self.tokens)
        else:
            # not yet initialized
            skipEofCheck = False

        if not skipEofCheck and self.LA(1) == Token.EOF:
            raise IllegalStateException(""cannot consume EOF"")

        if self.sync(self.index + 1):
            self.index = self.adjustSeekIndex(self.index + 1)

    # Make sure index {@code i} in tokens has a token.
    #
    # @return {@code true} if a token is located at index {@code i}, otherwise
    #    {@code false}.
    # @see #get(int i)
    #/
    def sync(self, i):
        n = i - len(self.tokens) + 1 # how many more elements we need?
        if n > 0 :
            fetched = self.fetch(n)
            return fetched >= n
        return True

    # Add {@code n} elements to buffer.
    #
    # @return The actual number of elements added to the buffer.
    #/
    def fetch(self, n):
        if self.fetchedEOF:
            return 0
        for i in range(0, n):
            t = self.tokenSource.nextToken()
            t.tokenIndex = len(self.tokens)
            self.tokens.append(t)
            if t.type==Token.EOF:
                self.fetchedEOF = True
                return i + 1
        return n


    # Get all tokens from start..stop inclusively#/
    def getTokens(self, start, stop, types=None):
        if start<0 or stop<0:
            return None
        self.lazyInit()
        subset = []
        if stop >= len(self.tokens):
            stop = len(self.tokens)-1
        for i in range(start, stop):
            t = self.tokens[i]
            if t.type==Token.EOF:
                break
            if types is None or t.type in types:
                subset.append(t)
        return subset

    def LA(self, i):
        return self.LT(i).type

    def LB(self, k):
        if (self.index-k) < 0:
            return None
        return self.tokens[self.index-k]

    def LT(self, k):
        self.lazyInit()
        if k==0:
            return None
        if k < 0:
            return self.LB(-k)
        i = self.index + k - 1
        self.sync(i)
        if i >= len(self.tokens): # return EOF token
            # EOF must be last token
            return self.tokens[len(self.tokens)-1]
        return self.tokens[i]

    # Allowed derived classes to modify the behavior of operations which change
    # the current stream position by adjusting the target token index of a seek
    # operation. The default implementation simply returns {@code i}. If an
    # exception is thrown in this method, the current stream index should not be
    # changed.
    #
    # <p>For example, {@link CommonTokenStream} overrides this method to ensure that
    # the seek target is always an on-channel token.</p>
    #
    # @param i The target token index.
    # @return The adjusted target token index.

    def adjustSeekIndex(self, i):
        return i

    def lazyInit(self):
        if self.index == -1:
            self.setup()

    def setup(self):
        self.sync(0)
        self.index = self.adjustSeekIndex(0)

    # Reset this token stream by setting its token source.#/
    def setTokenSource(self, tokenSource):
        self.tokenSource = tokenSource
        self.tokens = []
        self.index = -1
        self.fetchedEOF = False


    # Given a starting index, return the index of the next token on channel.
    #  Return i if tokens[i] is on channel.  Return the index of the EOF toekn
    #  if there are no tokens on channel between i and EOF.
    #/
    def nextTokenOnChannel(self, i, channel):
        self.sync(i)
        if i>=len(self.tokens):
            return len(self.tokens) - 1
        token = self.tokens[i]
        while token.channel!=channel:
            if token.type==Token.EOF:
                return i
            i += 1
            self.sync(i)
            token = self.tokens[i]
        return i

    # Given a starting index, return the index of the previous token on channel.
    #  Return i if tokens[i] is on channel. Return -1 if there are no tokens
    #  on channel between i and 0.
    def previousTokenOnChannel(self, i, channel):
        while i>=0 and self.tokens[i].channel!=channel:
            i -= 1
        return i

    # Collect all tokens on specified channel to the right of
    #  the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
    #  EOF. If channel is -1, find any non default channel token.
    def getHiddenTokensToRight(self, tokenIndex, channel=-1):
        self.lazyInit()
        if tokenIndex<0 or tokenIndex>=len(self.tokens):
            raise Exception(str(tokenIndex) + "" not in 0.."" + str(len(self.tokens)-1))
        from antlr4.Lexer import Lexer
        nextOnChannel = self.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL)
        from_ = tokenIndex+1
        # if none onchannel to right, nextOnChannel=-1 so set to = last token
        to = (len(self.tokens)-1) if nextOnChannel==-1 else nextOnChannel
        return self.filterForChannel(from_, to, channel)


    # Collect all tokens on specified channel to the left of
    #  the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
    #  If channel is -1, find any non default channel token.
    def getHiddenTokensToLeft(self, tokenIndex, channel=-1):
        self.lazyInit()
        if tokenIndex<0 or tokenIndex>=len(self.tokens):
            raise Exception(str(tokenIndex) + "" not in 0.."" + str(len(self.tokens)-1))
        from antlr4.Lexer import Lexer
        prevOnChannel = self.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL)
        if prevOnChannel == tokenIndex - 1:
            return None
        # if none on channel to left, prevOnChannel=-1 then from=0
        from_ = prevOnChannel+1
        to = tokenIndex-1
        return self.filterForChannel(from_, to, channel)


    def filterForChannel(self, left, right, channel):
        hidden = []
        for i in range(left, right+1):
            t = self.tokens[i]
            if channel==-1:
                from antlr4.Lexer import Lexer
                if t.channel!= Lexer.DEFAULT_TOKEN_CHANNEL:
                    hidden.append(t)
            elif t.channel==channel:
                    hidden.append(t)
        if len(hidden)==0:
            return None
        return hidden

    def getSourceName(self):
        return self.tokenSource.getSourceName()

    def getText(self, start=None, stop=None):
        """"""
        Get the text of all tokens in this buffer.
        :return: string
        """"""
        self.lazyInit()
        self.fill()
        if isinstance(start, Token):
            start = start.tokenIndex
        elif start is None:
            start = 0
        if isinstance(stop, Token):
            stop = stop.tokenIndex
        elif stop is None or stop >= len(self.tokens):
            stop = len(self.tokens) - 1
        if start < 0 or stop < 0 or stop<start:
            return u""""
        with StringIO() as buf:
            for i in xrange(start, stop+1):
                t = self.tokens[i]
                if t.type==Token.EOF:
                    break
                buf.write(t.text)
            return buf.getvalue()


    def fill(self):
        """"""
        Get all tokens from lexer until EOF

        :return: None
        """"""
        self.lazyInit()
        while self.fetch(1000)==1000:
            pass",1,334 2000 40 2001 41 58 348 2002 40 2003 44 2004 41 58 621 2003 46 2004 61 2004 621 621 621 2003 46 2005 61 91 93 621 621 621 621 621 621 621 621 621 2003 46 2006 61 45 1501 621 621 621 621 621 621 621 621 621 621 621 2003 46 2007 61 302 348 2008 40 2003 41 58 450 1500 348 2009 40 2003 44 2010 41 58 621 434 348 2011 40 2003 41 58 2003 46 2012 40 1500 41 348 2012 40 2003 44 2006 41 58 2003 46 2013 40 41 2003 46 2006 61 2003 46 2014 40 2006 41 348 2015 40 2003 44 2006 41 58 2003 46 2013 40 41 450 2003 46 2005 91 2006 93 348 2016 40 2003 41 58 2017 61 302 392 2003 46 2006 615 1500 58 392 2003 46 2007 58 621 621 2017 61 2003 46 2006 60 2018 40 2003 46 2005 41 45 1501 360 58 621 2017 61 2003 46 2006 60 2018 40 2003 46 2005 41 360 58 621 2017 61 302 392 422 2017 308 2003 46 2019 40 1501 41 614 2020 46 2021 58 440 2022 40 648 41 392 2003 46 2023 40 2003 46 2006 43 1501 41 58 2003 46 2006 61 2003 46 2014 40 2003 46 2006 43 1501 41 621 621 621 621 621 621 348 2023 40 2003 44 2024 41 58 2025 61 2024 45 2018 40 2003 46 2005 41 43 1501 621 392 2025 62 1500 58 2026 61 2003 46 2027 40 2025 41 450 2026 615 2025 450 304 621 621 621 621 348 2027 40 2003 44 2025 41 58 392 2003 46 2007 58 450 1500 385 2024 398 2028 40 1500 44 2025 41 58 2029 61 2003 46 2004 46 2030 40 41 2029 46 2031 61 2018 40 2003 46 2005 41 2003 46 2005 46 2032 40 2029 41 392 2029 46 2033 614 2020 46 2021 58 2003 46 2007 61 304 450 2024 43 1501 450 2025 621 348 2034 40 2003 44 2035 44 2036 44 2037 61 303 41 58 392 2035 60 1500 428 2036 60 1500 58 450 303 2003 46 2013 40 41 2038 61 91 93 392 2036 615 2018 40 2003 46 2005 41 58 2036 61 2018 40 2003 46 2005 41 45 1501 385 2024 398 2028 40 2035 44 2036 41 58 2029 61 2003 46 2005 91 2024 93 392 2029 46 2033 614 2020 46 2021 58 325 392 2037 407 303 428 2029 46 2033 398 2037 58 2038 46 2032 40 2029 41 450 2038 348 2019 40 2003 44 2024 41 58 450 2003 46 2039 40 2024 41 46 2033 348 2040 40 2003 44 2041 41 58 392 40 2003 46 2006 45 2041 41 60 1500 58 450 303 450 2003 46 2005 91 2003 46 2006 45 2041 93 348 2039 40 2003 44 2041 41 58 2003 46 2013 40 41 392 2041 614 1500 58 450 303 392 2041 60 1500 58 450 2003 46 2040 40 45 2041 41 2024 61 2003 46 2006 43 2041 45 1501 2003 46 2023 40 2024 41 392 2024 615 2018 40 2003 46 2005 41 58 621 621 450 2003 46 2005 91 2018 40 2003 46 2005 41 45 1501 93 450 2003 46 2005 91 2024 93 621 621 621 621 621 621 621 621 621 621 621 348 2014 40 2003 44 2024 41 58 450 2024 348 2013 40 2003 41 58 392 2003 46 2006 614 45 1501 58 2003 46 2042 40 41 348 2042 40 2003 41 58 2003 46 2023 40 1500 41 2003 46 2006 61 2003 46 2014 40 1500 41 621 348 2043 40 2003 44 2004 41 58 2003 46 2004 61 2004 2003 46 2005 61 91 93 2003 46 2006 61 45 1501 2003 46 2007 61 302 621 621 621 621 348 2044 40 2003 44 2024 44 2045 41 58 2003 46 2023 40 2024 41 392 2024 615 2018 40 2003 46 2005 41 58 450 2018 40 2003 46 2005 41 45 1501 2046 61 2003 46 2005 91 2024 93 496 2046 46 2045 631 2045 58 392 2046 46 2033 614 2020 46 2021 58 450 2024 2024 636 1501 2003 46 2023 40 2024 41 2046 61 2003 46 2005 91 2024 93 450 2024 621 621 621 348 2047 40 2003 44 2024 44 2045 41 58 496 2024 615 1500 308 2003 46 2005 91 2024 93 46 2045 631 2045 58 2024 628 1501 450 2024 621 621 621 348 2048 40 2003 44 2031 44 2045 61 45 1501 41 58 2003 46 2013 40 41 392 2031 60 1500 428 2031 615 2018 40 2003 46 2005 41 58 440 2049 40 2050 40 2031 41 43 648 43 2050 40 2018 40 2003 46 2005 41 45 1501 41 41 388 2051 46 2052 397 2052 2053 61 2003 46 2044 40 2031 43 1501 44 2052 46 2054 41 2055 61 2031 43 1501 621 2056 61 40 2018 40 2003 46 2005 41 45 1501 41 392 2053 614 45 1501 360 2053 450 2003 46 2057 40 2055 44 2056 44 2045 41 621 621 621 348 2058 40 2003 44 2031 44 2045 61 45 1501 41 58 2003 46 2013 40 41 392 2031 60 1500 428 2031 615 2018 40 2003 46 2005 41 58 440 2049 40 2050 40 2031 41 43 648 43 2050 40 2018 40 2003 46 2005 41 45 1501 41 41 388 2051 46 2052 397 2052 2059 61 2003 46 2047 40 2031 45 1501 44 2052 46 2054 41 392 2059 614 2031 45 1501 58 450 303 621 2055 61 2059 43 1501 2056 61 2031 45 1501 450 2003 46 2057 40 2055 44 2056 44 2045 41 348 2057 40 2003 44 2060 44 2061 44 2045 41 58 2062 61 91 93 385 2024 398 2028 40 2060 44 2061 43 1501 41 58 2029 61 2003 46 2005 91 2024 93 392 2045 614 45 1501 58 388 2051 46 2052 397 2052 392 2029 46 2045 631 2052 46 2054 58 2062 46 2032 40 2029 41 359 2029 46 2045 614 2045 58 2062 46 2032 40 2029 41 392 2018 40 2062 41 614 1500 58 450 303 450 2062 348 2063 40 2003 41 58 450 2003 46 2004 46 2063 40 41 348 2064 40 2003 44 2035 61 303 44 2036 61 303 41 58 648 2003 46 2013 40 41 2003 46 2065 40 41 392 2066 40 2035 44 2020 41 58 2035 61 2035 46 2031 359 2035 407 303 58 2035 61 1500 392 2066 40 2036 44 2020 41 58 2036 61 2036 46 2031 359 2036 407 303 428 2036 615 2018 40 2003 46 2005 41 58 2036 61 2018 40 2003 46 2005 41 45 1501 392 2035 60 1500 428 2036 60 1500 428 2036 60 2035 58 450 648 497 2067 40 41 311 2068 58 385 2024 398 2069 40 2035 44 2036 43 1501 41 58 2029 61 2003 46 2005 91 2024 93 392 2029 46 2033 614 2020 46 2021 58 325 2068 46 2070 40 2029 46 2071 41 450 2068 46 2072 40 41 348 2065 40 2003 41 58 648 2003 46 2013 40 41 496 2003 46 2027 40 1504 41 614 1504 58 434 
128814,Python,"class LL1Analyzer (object):

    #* Special value added to the lookahead sets to indicate that we hit
    #  a predicate during analysis if {@code seeThruPreds==false}.
    #/
    HIT_PRED = Token.INVALID_TYPE

    def __init__(self, atn):
        self.atn = atn

    #*
    # Calculates the SLL(1) expected lookahead set for each outgoing transition
    # of an {@link ATNState}. The returned array has one element for each
    # outgoing transition in {@code s}. If the closure from transition
    # <em>i</em> leads to a semantic predicate before matching a symbol, the
    # element at index <em>i</em> of the result will be {@code null}.
    #
    # @param s the ATN state
    # @return the expected symbols for each outgoing transition of {@code s}.
    #/
    def getDecisionLookahead(self, s):
        if s is None:
            return None

        count = len(s.transitions)
        look = [] * count
        for alt in range(0, count):
            look[alt] = set()
            lookBusy = set()
            seeThruPreds = False # fail to get lookahead upon pred
            self._LOOK(s.transition(alt).target, None, PredictionContext.EMPTY, \
                  look[alt], lookBusy, set(), seeThruPreds, False)
            # Wipe out lookahead for this alternative if we found nothing
            # or we had a predicate when we !seeThruPreds
            if len(look[alt])==0 or self.HIT_PRED in look[alt]:
                look[alt] = None
        return look

    #*
    # Compute set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #
    # <p>If {@code ctx} is {@code null} and the end of the rule containing
    # {@code s} is reached, {@link Token#EPSILON} is added to the result set.
    # If {@code ctx} is not {@code null} and the end of the outermost rule is
    # reached, {@link Token#EOF} is added to the result set.</p>
    #
    # @param s the ATN state
    # @param stopState the ATN state to stop at. This can be a
    # {@link BlockEndState} to detect epsilon paths through a closure.
    # @param ctx the complete parser context, or {@code null} if the context
    # should be ignored
    #
    # @return The set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #/
    def LOOK(self, s, stopState=None, ctx=None):
        r = IntervalSet()
        seeThruPreds = True # ignore preds; get all lookahead
        lookContext = PredictionContextFromRuleContext(s.atn, ctx) if ctx is not None else None
        self._LOOK(s, stopState, lookContext, r, set(), set(), seeThruPreds, True)
        return r

    #*
    # Compute set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #
    # <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
    # rule containing {@code s} is reached, {@link Token#EPSILON} is added to
    # the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
    # {@code true} and {@code stopState} or the end of the outermost rule is
    # reached, {@link Token#EOF} is added to the result set.</p>
    #
    # @param s the ATN state.
    # @param stopState the ATN state to stop at. This can be a
    # {@link BlockEndState} to detect epsilon paths through a closure.
    # @param ctx The outer context, or {@code null} if the outer context should
    # not be used.
    # @param look The result lookahead set.
    # @param lookBusy A set used for preventing epsilon closures in the ATN
    # from causing a stack overflow. Outside code should pass
    # {@code new HashSet<ATNConfig>} for this argument.
    # @param calledRuleStack A set used for preventing left recursion in the
    # ATN from causing a stack overflow. Outside code should pass
    # {@code new BitSet()} for this argument.
    # @param seeThruPreds {@code true} to true semantic predicates as
    # implicitly {@code true} and ""see through them"", otherwise {@code false}
    # to treat semantic predicates as opaque and add {@link #HIT_PRED} to the
    # result if one is encountered.
    # @param addEOF Add {@link Token#EOF} to the result if the end of the
    # outermost context is reached. This parameter has no effect if {@code ctx}
    # is {@code null}.
    #/
    def _LOOK(self, s, stopState , ctx, look, lookBusy, \
                     calledRuleStack, seeThruPreds, addEOF):
        c = ATNConfig(s, 0, ctx)

        if c in lookBusy:
            return
        lookBusy.add(c)

        if s == stopState:
            if ctx is None:
                look.addOne(Token.EPSILON)
                return
            elif ctx.isEmpty() and addEOF:
                look.addOne(Token.EOF)
                return

        if isinstance(s, RuleStopState ):
            if ctx is None:
                look.addOne(Token.EPSILON)
                return
            elif ctx.isEmpty() and addEOF:
                look.addOne(Token.EOF)
                return

            if ctx != PredictionContext.EMPTY:
                removed = s.ruleIndex in calledRuleStack
                try:
                    calledRuleStack.discard(s.ruleIndex)
                    # run thru all possible stack tops in ctx
                    for i in range(0, len(ctx)):
                        returnState = self.atn.states[ctx.getReturnState(i)]
                        self._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                finally:
                    if removed:
                        calledRuleStack.add(s.ruleIndex)
                return

        for t in s.transitions:
            if type(t) == RuleTransition:
                if t.target.ruleIndex in calledRuleStack:
                    continue

                newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber)

                try:
                    calledRuleStack.add(t.target.ruleIndex)
                    self._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                finally:
                    calledRuleStack.remove(t.target.ruleIndex)
            elif isinstance(t, AbstractPredicateTransition ):
                if seeThruPreds:
                    self._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                else:
                    look.addOne(self.HIT_PRED)
            elif t.isEpsilon:
                self._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
            elif type(t) == WildcardTransition:
                look.addRange( Interval(Token.MIN_USER_TOKEN_TYPE, self.atn.maxTokenType + 1) )
            else:
                set_ = t.label
                if set_ is not None:
                    if isinstance(t, NotSetTransition):
                        set_ = set_.complement(Token.MIN_USER_TOKEN_TYPE, self.atn.maxTokenType)
                    look.addSet(set_)",1,334 2000 40 426 41 58 621 621 621 2001 61 2002 46 2003 348 2004 40 2005 44 2006 41 58 2005 46 2006 61 2006 621 621 621 621 621 621 621 621 621 621 348 2007 40 2005 44 2008 41 58 392 2008 407 303 58 450 303 2009 61 2010 40 2008 46 2011 41 2012 61 91 93 42 2009 385 2013 398 2014 40 1500 44 2009 41 58 2012 91 2013 93 61 2015 40 41 2016 61 2015 40 41 2017 61 302 621 2005 46 2018 40 2008 46 2019 40 2013 41 46 2020 44 303 44 2021 46 2022 44 92 2012 91 2013 93 44 2016 44 2015 40 41 44 2017 44 302 41 621 621 392 2010 40 2012 91 2013 93 41 614 1500 428 2005 46 2001 398 2012 91 2013 93 58 2012 91 2013 93 61 303 450 2012 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2023 40 2005 44 2008 44 2024 61 303 44 2025 61 303 41 58 2026 61 2027 40 41 2017 61 304 621 2028 61 2029 40 2008 46 2006 44 2025 41 392 2025 407 422 303 360 303 2005 46 2018 40 2008 44 2024 44 2028 44 2026 44 2015 40 41 44 2015 40 41 44 2017 44 304 41 450 2026 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2018 40 2005 44 2008 44 2024 44 2025 44 2012 44 2016 44 92 2030 44 2017 44 2031 41 58 2032 61 2033 40 2008 44 1500 44 2025 41 392 2032 398 2016 58 450 2016 46 2034 40 2032 41 392 2008 614 2024 58 392 2025 407 303 58 2012 46 2035 40 2002 46 2036 41 450 359 2025 46 2037 40 41 308 2031 58 2012 46 2035 40 2002 46 2038 41 450 392 2039 40 2008 44 2040 41 58 392 2025 407 303 58 2012 46 2035 40 2002 46 2036 41 450 359 2025 46 2037 40 41 308 2031 58 2012 46 2035 40 2002 46 2038 41 450 392 2025 631 2021 46 2022 58 2041 61 2008 46 2042 398 2030 474 58 2030 46 2043 40 2008 46 2042 41 621 385 2044 398 2014 40 1500 44 2010 40 2025 41 41 58 2045 61 2005 46 2006 46 2046 91 2025 46 2047 40 2044 41 93 2005 46 2018 40 2045 44 2024 44 2025 46 2048 40 2044 41 44 2012 44 2016 44 2030 44 2017 44 2031 41 382 58 392 2041 58 2030 46 2034 40 2008 46 2042 41 450 385 2049 398 2008 46 2011 58 392 2050 40 2049 41 614 2051 58 392 2049 46 2020 46 2042 398 2030 58 344 2052 61 2053 46 2054 40 2025 44 2049 46 2055 46 2056 41 474 58 2030 46 2034 40 2049 46 2020 46 2042 41 2005 46 2018 40 2049 46 2020 44 2024 44 2052 44 2012 44 2016 44 2030 44 2017 44 2031 41 382 58 2030 46 2057 40 2049 46 2020 46 2042 41 359 2039 40 2049 44 2058 41 58 392 2017 58 2005 46 2018 40 2049 46 2020 44 2024 44 2025 44 2012 44 2016 44 2030 44 2017 44 2031 41 360 58 2012 46 2035 40 2005 46 2001 41 359 2049 46 2059 58 2005 46 2018 40 2049 46 2020 44 2024 44 2025 44 2012 44 2016 44 2030 44 2017 44 2031 41 359 2050 40 2049 41 614 2060 58 2012 46 2061 40 2062 40 2002 46 2063 44 2005 46 2006 46 2064 43 1501 41 41 360 58 2065 61 2049 46 2066 392 2065 407 422 303 58 392 2039 40 2049 44 2067 41 58 2065 61 2065 46 2068 40 2002 46 2063 44 2005 46 2006 46 2064 41 2012 46 2069 40 2065 41 
129009,Python,"class Trees(object):

     # Print out a whole tree in LISP form. {@link #getNodeText} is used on the
    #  node payloads to get the text for the nodes.  Detect
    #  parse trees and extract data appropriately.
    @classmethod
    def toStringTree(cls, t:Tree, ruleNames:list=None, recog:Parser=None):
        if recog is not None:
            ruleNames = recog.ruleNames
        s = escapeWhitespace(cls.getNodeText(t, ruleNames), False)
        if t.getChildCount()==0:
            return s
        with StringIO() as buf:
            buf.write(""("")
            buf.write(s)
            buf.write(' ')
            for i in range(0, t.getChildCount()):
                if i > 0:
                    buf.write(' ')
                buf.write(cls.toStringTree(t.getChild(i), ruleNames))
            buf.write("")"")
            return buf.getvalue()

    @classmethod
    def getNodeText(cls, t:Tree, ruleNames:list=None, recog:Parser=None):
        if recog is not None:
            ruleNames = recog.ruleNames
        if ruleNames is not None:
            if isinstance(t, RuleNode):
                if t.getAltNumber()!=0: # should use ATN.INVALID_ALT_NUMBER but won't compile
                    return ruleNames[t.getRuleIndex()]+"":""+str(t.getAltNumber())
                return ruleNames[t.getRuleIndex()]
            elif isinstance( t, ErrorNode):
                return str(t)
            elif isinstance(t, TerminalNode):
                if t.symbol is not None:
                    return t.symbol.text
        # no recog for rule names
        payload = t.getPayload()
        if isinstance(payload, Token ):
            return payload.text
        return str(t.getPayload())


    # Return ordered list of all children of this node
    @classmethod
    def getChildren(cls, t:Tree):
        return [ t.getChild(i) for i in range(0, t.getChildCount()) ]

    # Return a list of all ancestors of this node.  The first node of
    #  list is the root and the last is the parent of this node.
    #
    @classmethod
    def getAncestors(cls, t:Tree):
        ancestors = []
        t = t.getParent()
        while t is not None:
            ancestors.insert(0, t) # insert at start
            t = t.getParent()
        return ancestors

    @classmethod
    def findAllTokenNodes(cls, t:ParseTree, ttype:int):
        return cls.findAllNodes(t, ttype, True)

    @classmethod
    def findAllRuleNodes(cls, t:ParseTree, ruleIndex:int):
        return cls.findAllNodes(t, ruleIndex, False)

    @classmethod
    def findAllNodes(cls, t:ParseTree, index:int, findTokens:bool):
        nodes = []
        cls._findAllNodes(t, index, findTokens, nodes)
        return nodes

    @classmethod
    def _findAllNodes(cls, t:ParseTree, index:int, findTokens:bool, nodes:list):
        from antlr4.ParserRuleContext import ParserRuleContext
        # check this node (the root) first
        if findTokens and isinstance(t, TerminalNode):
            if t.symbol.type==index:
                nodes.append(t)
        elif not findTokens and isinstance(t, ParserRuleContext):
            if t.ruleIndex == index:
                nodes.append(t)
        # check children
        for i in range(0, t.getChildCount()):
            cls._findAllNodes(t.getChild(i), index, findTokens, nodes)

    @classmethod
    def descendants(cls, t:ParseTree):
        nodes = [t]
        for i in range(0, t.getChildCount()):
            nodes.extend(cls.descendants(t.getChild(i)))
        return nodes",1,334 2000 40 426 41 58 621 621 621 64 2001 348 2002 40 2003 44 2004 58 2005 44 2006 58 411 61 303 44 2007 58 2008 61 303 41 58 392 2007 407 422 303 58 2006 61 2007 46 2006 2009 61 2010 40 2003 46 2011 40 2004 44 2006 41 44 302 41 392 2004 46 2012 40 41 614 1500 58 450 2009 497 2013 40 41 311 2014 58 2014 46 2015 40 648 41 2014 46 2015 40 2009 41 2014 46 2015 40 648 41 385 2016 398 2017 40 1500 44 2004 46 2012 40 41 41 58 392 2016 62 1500 58 2014 46 2015 40 648 41 2014 46 2015 40 2003 46 2002 40 2004 46 2018 40 2016 41 44 2006 41 41 2014 46 2015 40 648 41 450 2014 46 2019 40 41 64 2001 348 2011 40 2003 44 2004 58 2005 44 2006 58 411 61 303 44 2007 58 2008 61 303 41 58 392 2007 407 422 303 58 2006 61 2007 46 2006 392 2006 407 422 303 58 392 2020 40 2004 44 2021 41 58 392 2004 46 2022 40 41 631 1500 58 621 450 2006 91 2004 46 2023 40 41 93 43 648 43 2024 40 2004 46 2022 40 41 41 450 2006 91 2004 46 2023 40 41 93 359 2020 40 2004 44 2025 41 58 450 2024 40 2004 41 359 2020 40 2004 44 2026 41 58 392 2004 46 2027 407 422 303 58 450 2004 46 2027 46 2028 621 2029 61 2004 46 2030 40 41 392 2020 40 2029 44 2031 41 58 450 2029 46 2028 450 2024 40 2004 46 2030 40 41 41 621 64 2001 348 2032 40 2003 44 2004 58 2005 41 58 450 91 2004 46 2018 40 2016 41 385 2016 398 2017 40 1500 44 2004 46 2012 40 41 41 93 621 621 621 64 2001 348 2033 40 2003 44 2004 58 2005 41 58 2034 61 91 93 2004 61 2004 46 2035 40 41 496 2004 407 422 303 58 2034 46 2036 40 1500 44 2004 41 621 2004 61 2004 46 2035 40 41 450 2034 64 2001 348 2037 40 2003 44 2004 58 2038 44 2039 58 404 41 58 450 2003 46 2040 40 2004 44 2039 44 304 41 64 2001 348 2041 40 2003 44 2004 58 2038 44 2042 58 404 41 58 450 2003 46 2040 40 2004 44 2042 44 302 41 64 2001 348 2040 40 2003 44 2004 58 2038 44 2043 58 404 44 2044 58 323 41 58 2045 61 91 93 2003 46 2046 40 2004 44 2043 44 2044 44 2045 41 450 2045 64 2001 348 2046 40 2003 44 2004 58 2038 44 2043 58 404 44 2044 58 323 44 2045 58 411 41 58 388 2047 46 2048 397 2048 621 392 2044 308 2020 40 2004 44 2026 41 58 392 2004 46 2027 46 2049 614 2043 58 2045 46 2050 40 2004 41 359 422 2044 308 2020 40 2004 44 2048 41 58 392 2004 46 2042 614 2043 58 2045 46 2050 40 2004 41 621 385 2016 398 2017 40 1500 44 2004 46 2012 40 41 41 58 2003 46 2046 40 2004 46 2018 40 2016 41 44 2043 44 2044 44 2045 41 64 2001 348 2051 40 2003 44 2004 58 2038 41 58 2045 61 91 2004 93 385 2016 398 2017 40 1500 44 2004 46 2012 40 41 41 58 2045 46 2052 40 2003 46 2051 40 2004 46 2018 40 2016 41 41 41 450 2045 
131780,Python,"class TransactionTestCase(SimpleTestCase):

    # Subclasses can ask for resetting of auto increment sequence before each
    # test case
    reset_sequences = False

    # Subclasses can enable only a subset of apps for faster tests
    available_apps = None

    # Subclasses can define fixtures which will be automatically installed.
    fixtures = None

    databases = {DEFAULT_DB_ALIAS}
    _disallowed_database_msg = (
        'Database %(operation)s to %(alias)r are not allowed in this test. '
        'Add %(alias)r to %(test)s.databases to ensure proper test isolation '
        'and silence this failure.'
    )

    # If transactions aren't available, Django will serialize the database
    # contents into a fixture during setup and flush and reload them
    # during teardown (as flush does not restore data from migrations).
    # This can be slow; this flag allows enabling on a per-case basis.
    serialized_rollback = False

    def _pre_setup(self):
        """"""
        Perform pre-test setup:
        * If the class has an 'available_apps' attribute, restrict the app
          registry to these applications, then fire the post_migrate signal --
          it must run with the correct set of applications for the test case.
        * If the class has a 'fixtures' attribute, install those fixtures.
        """"""
        super()._pre_setup()
        if self.available_apps is not None:
            apps.set_available_apps(self.available_apps)
            setting_changed.send(
                sender=settings._wrapped.__class__,
                setting='INSTALLED_APPS',
                value=self.available_apps,
                enter=True,
            )
            for db_name in self._databases_names(include_mirrors=False):
                emit_post_migrate_signal(verbosity=0, interactive=False, db=db_name)
        try:
            self._fixture_setup()
        except Exception:
            if self.available_apps is not None:
                apps.unset_available_apps()
                setting_changed.send(
                    sender=settings._wrapped.__class__,
                    setting='INSTALLED_APPS',
                    value=settings.INSTALLED_APPS,
                    enter=False,
                )
            raise
        # Clear the queries_log so that it's less likely to overflow (a single
        # test probably won't execute 9K queries). If queries_log overflows,
        # then assertNumQueries() doesn't work.
        for db_name in self._databases_names(include_mirrors=False):
            connections[db_name].queries_log.clear()

    @classmethod
    def _databases_names(cls, include_mirrors=True):
        # Only consider allowed database aliases, including mirrors or not.
        return [
            alias for alias in connections
            if alias in cls.databases and (
                include_mirrors or not connections[alias].settings_dict['TEST']['MIRROR']
            )
        ]

    def _reset_sequences(self, db_name):
        conn = connections[db_name]
        if conn.features.supports_sequence_reset:
            sql_list = conn.ops.sequence_reset_by_name_sql(
                no_style(), conn.introspection.sequence_list())
            if sql_list:
                with transaction.atomic(using=db_name):
                    with conn.cursor() as cursor:
                        for sql in sql_list:
                            cursor.execute(sql)

    def _fixture_setup(self):
        for db_name in self._databases_names(include_mirrors=False):
            # Reset sequences
            if self.reset_sequences:
                self._reset_sequences(db_name)

            # Provide replica initial data from migrated apps, if needed.
            if self.serialized_rollback and hasattr(connections[db_name], ""_test_serialized_contents""):
                if self.available_apps is not None:
                    apps.unset_available_apps()
                connections[db_name].creation.deserialize_db_from_string(
                    connections[db_name]._test_serialized_contents
                )
                if self.available_apps is not None:
                    apps.set_available_apps(self.available_apps)

            if self.fixtures:
                # We have to use this slightly awkward syntax due to the fact
                # that we're using *args and **kwargs together.
                call_command('loaddata', *self.fixtures,
                             **{'verbosity': 0, 'database': db_name})

    def _should_reload_connections(self):
        return True

    def _post_teardown(self):
        """"""
        Perform post-test things:
        * Flush the contents of the database to leave a clean slate. If the
          class has an 'available_apps' attribute, don't fire post_migrate.
        * Force-close the connection so the next test gets a clean cursor.
        """"""
        try:
            self._fixture_teardown()
            super()._post_teardown()
            if self._should_reload_connections():
                # Some DB cursors include SQL statements as part of cursor
                # creation. If you have a test that does a rollback, the effect
                # of these statements is lost, which can affect the operation of
                # tests (e.g., losing a timezone setting causing objects to be
                # created with the wrong time). To make sure this doesn't
                # happen, get a clean connection at the start of every test.
                for conn in connections.all():
                    conn.close()
        finally:
            if self.available_apps is not None:
                apps.unset_available_apps()
                setting_changed.send(sender=settings._wrapped.__class__,
                                     setting='INSTALLED_APPS',
                                     value=settings.INSTALLED_APPS,
                                     enter=False)

    def _fixture_teardown(self):
        # Allow TRUNCATE ... CASCADE and don't emit the post_migrate signal
        # when flushing only a subset of the apps
        for db_name in self._databases_names(include_mirrors=False):
            # Flush the database
            inhibit_post_migrate = (
                self.available_apps is not None or
                (   # Inhibit the post_migrate signal when using serialized
                    # rollback to avoid trying to recreate the serialized data.
                    self.serialized_rollback and
                    hasattr(connections[db_name], '_test_serialized_contents')
                )
            )
            call_command('flush', verbosity=0, interactive=False,
                         database=db_name, reset_sequences=False,
                         allow_cascade=self.available_apps is not None,
                         inhibit_post_migrate=inhibit_post_migrate)

    def assertQuerysetEqual(self, qs, values, transform=None, ordered=True, msg=None):
        values = list(values)
        items = qs
        if transform is not None:
            items = map(transform, items)
        if not ordered:
            return self.assertDictEqual(Counter(items), Counter(values), msg=msg)
        # For example qs.iterator() could be passed as qs, but it does not
        # have 'ordered' attribute.
        if len(values) > 1 and hasattr(qs, 'ordered') and not qs.ordered:
            raise ValueError(
                'Trying to compare non-ordered queryset against more than one '
                'ordered value.'
            )
        return self.assertEqual(list(items), values, msg=msg)

    def assertNumQueries(self, num, func=None, *args, using=DEFAULT_DB_ALIAS, **kwargs):
        conn = connections[using]

        context = _AssertNumQueriesContext(self, num, conn)
        if func is None:
            return context

        with context:
            func(*args, **kwargs)",1,334 2000 40 2001 41 58 621 621 2002 61 302 621 2003 61 303 621 2004 61 303 2005 61 123 2006 125 2007 61 40 648 648 648 41 621 621 621 621 2008 61 302 348 2009 40 2010 41 58 648 463 40 41 46 2009 40 41 392 2010 46 2003 407 422 303 58 2011 46 2012 40 2010 46 2003 41 2013 46 2014 40 2015 61 2016 46 2017 46 2018 44 2019 61 648 44 2020 61 2010 46 2003 44 2021 61 304 44 41 385 2022 398 2010 46 2023 40 2024 61 302 41 58 2025 40 2026 61 1500 44 2027 61 302 44 2028 61 2022 41 474 58 2010 46 2029 40 41 374 2030 58 392 2010 46 2003 407 422 303 58 2011 46 2031 40 41 2013 46 2014 40 2015 61 2016 46 2017 46 2018 44 2019 61 648 44 2020 61 2016 46 2032 44 2021 61 302 44 41 440 621 621 621 385 2022 398 2010 46 2023 40 2024 61 302 41 58 2033 91 2022 93 46 2034 46 2035 40 41 64 2036 348 2023 40 2037 44 2024 61 304 41 58 621 450 91 2038 385 2038 398 2033 392 2038 398 2037 46 2005 308 40 2024 428 422 2033 91 2038 93 46 2039 91 648 93 91 648 93 41 93 348 2040 40 2010 44 2022 41 58 2041 61 2033 91 2022 93 392 2041 46 2042 46 2043 58 2044 61 2041 46 2045 46 2046 40 2047 40 41 44 2041 46 2048 46 2049 40 41 41 392 2044 58 497 2050 46 2051 40 489 61 2022 41 58 497 2041 46 2052 40 41 311 2052 58 385 2053 398 2044 58 2052 46 2054 40 2053 41 348 2029 40 2010 41 58 385 2022 398 2010 46 2023 40 2024 61 302 41 58 621 392 2010 46 2002 58 2010 46 2040 40 2022 41 621 392 2010 46 2008 308 2055 40 2033 91 2022 93 44 648 41 58 392 2010 46 2003 407 422 303 58 2011 46 2031 40 41 2033 91 2022 93 46 2056 46 2057 40 2033 91 2022 93 46 2058 41 392 2010 46 2003 407 422 303 58 2011 46 2012 40 2010 46 2003 41 392 2010 46 2004 58 621 621 2059 40 648 44 42 2010 46 2004 44 638 123 648 58 1500 44 648 58 2022 125 41 348 2060 40 2010 41 58 450 304 348 2061 40 2010 41 58 648 474 58 2010 46 2062 40 41 463 40 41 46 2061 40 41 392 2010 46 2060 40 41 58 621 621 621 621 621 621 385 2041 398 2033 46 2063 40 41 58 2041 46 2064 40 41 382 58 392 2010 46 2003 407 422 303 58 2011 46 2031 40 41 2013 46 2014 40 2015 61 2016 46 2017 46 2018 44 2019 61 648 44 2020 61 2016 46 2032 44 2021 61 302 41 348 2062 40 2010 41 58 621 621 385 2022 398 2010 46 2023 40 2024 61 302 41 58 621 2065 61 40 2010 46 2003 407 422 303 428 40 621 621 2010 46 2008 308 2055 40 2033 91 2022 93 44 648 41 41 41 2059 40 648 44 2026 61 1500 44 2027 61 302 44 2066 61 2022 44 2002 61 302 44 2067 61 2010 46 2003 407 422 303 44 2065 61 2065 41 348 2068 40 2010 44 2069 44 2070 44 2071 61 303 44 2072 61 304 44 2073 61 303 41 58 2070 61 411 40 2070 41 2074 61 2069 392 2071 407 422 303 58 2074 61 2075 40 2071 44 2074 41 392 422 2072 58 450 2010 46 2076 40 2077 40 2074 41 44 2077 40 2070 41 44 2073 61 2073 41 621 621 392 2078 40 2070 41 62 1501 308 2055 40 2069 44 648 41 308 422 2069 46 2072 58 440 2079 40 648 648 41 450 2010 46 2080 40 411 40 2074 41 44 2070 44 2073 61 2073 41 348 2081 40 2010 44 2082 44 2083 61 303 44 42 2084 44 489 61 2006 44 638 2085 41 58 2041 61 2033 91 489 93 2086 61 2087 40 2010 44 2082 44 2041 41 392 2083 407 303 58 450 2086 497 2086 58 2083 40 42 2084 44 638 2085 41 
128638,Python,"class Trees(object):

    # Print out a whole tree in LISP form. {@link #getNodeText} is used on the
    #  node payloads to get the text for the nodes.  Detect
    #  parse trees and extract data appropriately.
    @classmethod
    def toStringTree(cls, t, ruleNames=None, recog=None):
        if recog is not None:
            ruleNames = recog.ruleNames
        s = escapeWhitespace(cls.getNodeText(t, ruleNames), False)
        if t.getChildCount()==0:
            return s
        with StringIO() as buf:
            buf.write(u""("")
            buf.write(s)
            buf.write(u' ')
            for i in range(0, t.getChildCount()):
                if i > 0:
                    buf.write(u' ')
                buf.write(cls.toStringTree(t.getChild(i), ruleNames))
            buf.write(u"")"")
            return buf.getvalue()

    @classmethod
    def getNodeText(cls, t, ruleNames=None, recog=None):
        if recog is not None:
            ruleNames = recog.ruleNames
        if ruleNames is not None:
            if isinstance(t, RuleNode):
                if t.getAltNumber()!=ATN.INVALID_ALT_NUMBER:
                    return ruleNames[t.getRuleIndex()]+"":""+str(t.getAltNumber())
                return ruleNames[t.getRuleIndex()]
            elif isinstance( t, ErrorNode):
                return unicode(t)
            elif isinstance(t, TerminalNode):
                if t.symbol is not None:
                    return t.symbol.text
        # no recog for rule names
        payload = t.getPayload()
        if isinstance(payload, Token ):
            return payload.text
        return unicode(t.getPayload())


    # Return ordered list of all children of this node
    @classmethod
    def getChildren(cls, t):
        return [ t.getChild(i) for i in range(0, t.getChildCount()) ]

    # Return a list of all ancestors of this node.  The first node of
    #  list is the root and the last is the parent of this node.
    #
    @classmethod
    def getAncestors(cls, t):
        ancestors = []
        t = t.getParent()
        while t is not None:
            ancestors.append(0, t) # insert at start
            t = t.getParent()
        return ancestors

    @classmethod
    def findAllTokenNodes(cls, t, ttype):
        return cls.findAllNodes(t, ttype, True)

    @classmethod
    def findAllRuleNodes(cls, t, ruleIndex):
        return cls.findAllNodes(t, ruleIndex, False)

    @classmethod
    def findAllNodes(cls, t, index, findTokens):
        nodes = []
        cls._findAllNodes(t, index, findTokens, nodes)
        return nodes

    @classmethod
    def _findAllNodes(cls, t, index, findTokens, nodes):
        from antlr4.ParserRuleContext import ParserRuleContext
        # check this node (the root) first
        if findTokens and isinstance(t, TerminalNode):
            if t.symbol.type==index:
                nodes.append(t)
        elif not findTokens and isinstance(t, ParserRuleContext):
            if t.ruleIndex == index:
                nodes.append(t)
        # check children
        for i in range(0, t.getChildCount()):
            cls._findAllNodes(t.getChild(i), index, findTokens, nodes)

    @classmethod
    def descendants(cls, t):
        nodes = [t]
        for i in range(0, t.getChildCount()):
            nodes.extend(cls.descendants(t.getChild(i)))
        return nodes",1,334 2000 40 426 41 58 621 621 621 64 2001 348 2002 40 2003 44 2004 44 2005 61 303 44 2006 61 303 41 58 392 2006 407 422 303 58 2005 61 2006 46 2005 2007 61 2008 40 2003 46 2009 40 2004 44 2005 41 44 302 41 392 2004 46 2010 40 41 614 1500 58 450 2007 497 2011 40 41 311 2012 58 2012 46 2013 40 648 41 2012 46 2013 40 2007 41 2012 46 2013 40 648 41 385 2014 398 2015 40 1500 44 2004 46 2010 40 41 41 58 392 2014 62 1500 58 2012 46 2013 40 648 41 2012 46 2013 40 2003 46 2002 40 2004 46 2016 40 2014 41 44 2005 41 41 2012 46 2013 40 648 41 450 2012 46 2017 40 41 64 2001 348 2009 40 2003 44 2004 44 2005 61 303 44 2006 61 303 41 58 392 2006 407 422 303 58 2005 61 2006 46 2005 392 2005 407 422 303 58 392 2018 40 2004 44 2019 41 58 392 2004 46 2020 40 41 631 2021 46 2022 58 450 2005 91 2004 46 2023 40 41 93 43 648 43 2024 40 2004 46 2020 40 41 41 450 2005 91 2004 46 2023 40 41 93 359 2018 40 2004 44 2025 41 58 450 2026 40 2004 41 359 2018 40 2004 44 2027 41 58 392 2004 46 2028 407 422 303 58 450 2004 46 2028 46 2029 621 2030 61 2004 46 2031 40 41 392 2018 40 2030 44 2032 41 58 450 2030 46 2029 450 2026 40 2004 46 2031 40 41 41 621 64 2001 348 2033 40 2003 44 2004 41 58 450 91 2004 46 2016 40 2014 41 385 2014 398 2015 40 1500 44 2004 46 2010 40 41 41 93 621 621 621 64 2001 348 2034 40 2003 44 2004 41 58 2035 61 91 93 2004 61 2004 46 2036 40 41 496 2004 407 422 303 58 2035 46 2037 40 1500 44 2004 41 621 2004 61 2004 46 2036 40 41 450 2035 64 2001 348 2038 40 2003 44 2004 44 2039 41 58 450 2003 46 2040 40 2004 44 2039 44 304 41 64 2001 348 2041 40 2003 44 2004 44 2042 41 58 450 2003 46 2040 40 2004 44 2042 44 302 41 64 2001 348 2040 40 2003 44 2004 44 2043 44 2044 41 58 2045 61 91 93 2003 46 2046 40 2004 44 2043 44 2044 44 2045 41 450 2045 64 2001 348 2046 40 2003 44 2004 44 2043 44 2044 44 2045 41 58 388 2047 46 2048 397 2048 621 392 2044 308 2018 40 2004 44 2027 41 58 392 2004 46 2028 46 2049 614 2043 58 2045 46 2037 40 2004 41 359 422 2044 308 2018 40 2004 44 2048 41 58 392 2004 46 2042 614 2043 58 2045 46 2037 40 2004 41 621 385 2014 398 2015 40 1500 44 2004 46 2010 40 41 41 58 2003 46 2046 40 2004 46 2016 40 2014 41 44 2043 44 2044 44 2045 41 64 2001 348 2050 40 2003 44 2004 41 58 2045 61 91 2004 93 385 2014 398 2015 40 1500 44 2004 46 2010 40 41 41 58 2045 46 2051 40 2003 46 2050 40 2004 46 2016 40 2014 41 41 41 450 2045 
128666,Python,"class DefaultErrorStrategy(ErrorStrategy):

    def __init__(self):
        super().__init__()
        # Indicates whether the error strategy is currently ""recovering from an
        # error"". This is used to suppress reporting multiple error messages while
        # attempting to recover from a detected syntax error.
        #
        # @see #inErrorRecoveryMode
        #
        self.errorRecoveryMode = False

        # The index into the input stream where the last error occurred.
        # 	This is used to prevent infinite loops where an error is found
        #  but no token is consumed during recovery...another error is found,
        #  ad nauseum.  This is a failsafe mechanism to guarantee that at least
        #  one token/tree node is consumed for two errors.
        #
        self.lastErrorIndex = -1
        self.lastErrorStates = None
        self.nextTokensContext = None
        self.nextTokenState = 0

    # <p>The default implementation simply calls {@link #endErrorCondition} to
    # ensure that the handler is not in error recovery mode.</p>
    def reset(self, recognizer:Parser):
        self.endErrorCondition(recognizer)

    #
    # This method is called to enter error recovery mode when a recognition
    # exception is reported.
    #
    # @param recognizer the parser instance
    #
    def beginErrorCondition(self, recognizer:Parser):
        self.errorRecoveryMode = True

    def inErrorRecoveryMode(self, recognizer:Parser):
        return self.errorRecoveryMode

    #
    # This method is called to leave error recovery mode after recovering from
    # a recognition exception.
    #
    # @param recognizer
    #
    def endErrorCondition(self, recognizer:Parser):
        self.errorRecoveryMode = False
        self.lastErrorStates = None
        self.lastErrorIndex = -1

    #
    # {@inheritDoc}
    #
    # <p>The default implementation simply calls {@link #endErrorCondition}.</p>
    #
    def reportMatch(self, recognizer:Parser):
        self.endErrorCondition(recognizer)

    #
    # {@inheritDoc}
    #
    # <p>The default implementation returns immediately if the handler is already
    # in error recovery mode. Otherwise, it calls {@link #beginErrorCondition}
    # and dispatches the reporting task based on the runtime type of {@code e}
    # according to the following table.</p>
    #
    # <ul>
    # <li>{@link NoViableAltException}: Dispatches the call to
    # {@link #reportNoViableAlternative}</li>
    # <li>{@link InputMismatchException}: Dispatches the call to
    # {@link #reportInputMismatch}</li>
    # <li>{@link FailedPredicateException}: Dispatches the call to
    # {@link #reportFailedPredicate}</li>
    # <li>All other types: calls {@link Parser#notifyErrorListeners} to report
    # the exception</li>
    # </ul>
    #
    def reportError(self, recognizer:Parser, e:RecognitionException):
       # if we've already reported an error and have not matched a token
       # yet successfully, don't report any errors.
        if self.inErrorRecoveryMode(recognizer):
            return # don't report spurious errors
        self.beginErrorCondition(recognizer)
        if isinstance( e, NoViableAltException ):
            self.reportNoViableAlternative(recognizer, e)
        elif isinstance( e, InputMismatchException ):
            self.reportInputMismatch(recognizer, e)
        elif isinstance( e, FailedPredicateException ):
            self.reportFailedPredicate(recognizer, e)
        else:
            print(""unknown recognition error type: "" + type(e).__name__)
            recognizer.notifyErrorListeners(e.message, e.offendingToken, e)

    #
    # {@inheritDoc}
    #
    # <p>The default implementation resynchronizes the parser by consuming tokens
    # until we find one in the resynchronization set--loosely the set of tokens
    # that can follow the current rule.</p>
    #
    def recover(self, recognizer:Parser, e:RecognitionException):
        if self.lastErrorIndex==recognizer.getInputStream().index \
            and self.lastErrorStates is not None \
            and recognizer.state in self.lastErrorStates:
           # uh oh, another error at same token index and previously-visited
           # state in ATN; must be a case where LT(1) is in the recovery
           # token set so nothing got consumed. Consume a single token
           # at least to prevent an infinite loop; this is a failsafe.
            recognizer.consume()

        self.lastErrorIndex = recognizer._input.index
        if self.lastErrorStates is None:
            self.lastErrorStates = []
        self.lastErrorStates.append(recognizer.state)
        followSet = self.getErrorRecoverySet(recognizer)
        self.consumeUntil(recognizer, followSet)

    # The default implementation of {@link ANTLRErrorStrategy#sync} makes sure
    # that the current lookahead symbol is consistent with what were expecting
    # at this point in the ATN. You can call this anytime but ANTLR only
    # generates code to check before subrules/loops and each iteration.
    #
    # <p>Implements Jim Idle's magic sync mechanism in closures and optional
    # subrules. E.g.,</p>
    #
    # <pre>
    # a : sync ( stuff sync )* ;
    # sync : {consume to what can follow sync} ;
    # </pre>
    #
    # At the start of a sub rule upon error, {@link #sync} performs single
    # token deletion, if possible. If it can't do that, it bails on the current
    # rule and uses the default error recovery, which consumes until the
    # resynchronization set of the current rule.
    #
    # <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
    # with an empty alternative), then the expected set includes what follows
    # the subrule.</p>
    #
    # <p>During loop iteration, it consumes until it sees a token that can start a
    # sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
    # stay in the loop as long as possible.</p>
    #
    # <p><strong>ORIGINS</strong></p>
    #
    # <p>Previous versions of ANTLR did a poor job of their recovery within loops.
    # A single mismatch token or missing token would force the parser to bail
    # out of the entire rules surrounding the loop. So, for rule</p>
    #
    # <pre>
    # classDef : 'class' ID '{' member* '}'
    # </pre>
    #
    # input with an extra token between members would force the parser to
    # consume until it found the next class definition rather than the next
    # member definition of the current class.
    #
    # <p>This functionality cost a little bit of effort because the parser has to
    # compare token set at the start of the loop and at each iteration. If for
    # some reason speed is suffering for you, you can turn off this
    # functionality by simply overriding this method as a blank { }.</p>
    #
    def sync(self, recognizer:Parser):
        # If already recovering, don't try to sync
        if self.inErrorRecoveryMode(recognizer):
            return

        s = recognizer._interp.atn.states[recognizer.state]
        la = recognizer.getTokenStream().LA(1)
        # try cheaper subset first; might get lucky. seems to shave a wee bit off
        nextTokens = recognizer.atn.nextTokens(s)
        if la in nextTokens:
            self.nextTokensContext = None
            self.nextTokenState = ATNState.INVALID_STATE_NUMBER
            return
        elif Token.EPSILON in nextTokens:
            if self.nextTokensContext is None:
                # It's possible the next token won't match information tracked
                # by sync is restricted for performance.
                self.nextTokensContext = recognizer._ctx
                self.nextTokensState = recognizer._stateNumber
            return

        if s.stateType in [ATNState.BLOCK_START, ATNState.STAR_BLOCK_START,
                                ATNState.PLUS_BLOCK_START, ATNState.STAR_LOOP_ENTRY]:
           # report error and recover if possible
            if self.singleTokenDeletion(recognizer)is not None:
                return
            else:
                raise InputMismatchException(recognizer)

        elif s.stateType in [ATNState.PLUS_LOOP_BACK, ATNState.STAR_LOOP_BACK]:
            self.reportUnwantedToken(recognizer)
            expecting = recognizer.getExpectedTokens()
            whatFollowsLoopIterationOrRule = expecting.addSet(self.getErrorRecoverySet(recognizer))
            self.consumeUntil(recognizer, whatFollowsLoopIterationOrRule)

        else:
           # do nothing if we can't identify the exact kind of ATN state
           pass

    # This is called by {@link #reportError} when the exception is a
    # {@link NoViableAltException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportNoViableAlternative(self, recognizer:Parser, e:NoViableAltException):
        tokens = recognizer.getTokenStream()
        if tokens is not None:
            if e.startToken.type==Token.EOF:
                input = ""<EOF>""
            else:
                input = tokens.getText(e.startToken, e.offendingToken)
        else:
            input = ""<unknown input>""
        msg = ""no viable alternative at input "" + self.escapeWSAndQuote(input)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    #
    # This is called by {@link #reportError} when the exception is an
    # {@link InputMismatchException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportInputMismatch(self, recognizer:Parser, e:InputMismatchException):
        msg = ""mismatched input "" + self.getTokenErrorDisplay(e.offendingToken) \
              + "" expecting "" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    #
    # This is called by {@link #reportError} when the exception is a
    # {@link FailedPredicateException}.
    #
    # @see #reportError
    #
    # @param recognizer the parser instance
    # @param e the recognition exception
    #
    def reportFailedPredicate(self, recognizer, e):
        ruleName = recognizer.ruleNames[recognizer._ctx.getRuleIndex()]
        msg = ""rule "" + ruleName + "" "" + e.message
        recognizer.notifyErrorListeners(msg, e.offendingToken, e)

    # This method is called to report a syntax error which requires the removal
    # of a token from the input stream. At the time this method is called, the
    # erroneous symbol is current {@code LT(1)} symbol and has not yet been
    # removed from the input stream. When this method returns,
    # {@code recognizer} is in error recovery mode.
    #
    # <p>This method is called when {@link #singleTokenDeletion} identifies
    # single-token deletion as a viable recovery strategy for a mismatched
    # input error.</p>
    #
    # <p>The default implementation simply returns if the handler is already in
    # error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
    # enter error recovery mode, followed by calling
    # {@link Parser#notifyErrorListeners}.</p>
    #
    # @param recognizer the parser instance
    #
    def reportUnwantedToken(self, recognizer:Parser):
        if self.inErrorRecoveryMode(recognizer):
            return

        self.beginErrorCondition(recognizer)
        t = recognizer.getCurrentToken()
        tokenName = self.getTokenErrorDisplay(t)
        expecting = self.getExpectedTokens(recognizer)
        msg = ""extraneous input "" + tokenName + "" expecting "" \
            + expecting.toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, t, None)

    # This method is called to report a syntax error which requires the
    # insertion of a missing token into the input stream. At the time this
    # method is called, the missing token has not yet been inserted. When this
    # method returns, {@code recognizer} is in error recovery mode.
    #
    # <p>This method is called when {@link #singleTokenInsertion} identifies
    # single-token insertion as a viable recovery strategy for a mismatched
    # input error.</p>
    #
    # <p>The default implementation simply returns if the handler is already in
    # error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
    # enter error recovery mode, followed by calling
    # {@link Parser#notifyErrorListeners}.</p>
    #
    # @param recognizer the parser instance
    #
    def reportMissingToken(self, recognizer:Parser):
        if self.inErrorRecoveryMode(recognizer):
            return
        self.beginErrorCondition(recognizer)
        t = recognizer.getCurrentToken()
        expecting = self.getExpectedTokens(recognizer)
        msg = ""missing "" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) \
              + "" at "" + self.getTokenErrorDisplay(t)
        recognizer.notifyErrorListeners(msg, t, None)

    # <p>The default implementation attempts to recover from the mismatched input
    # by using single token insertion and deletion as described below. If the
    # recovery attempt fails, this method throws an
    # {@link InputMismatchException}.</p>
    #
    # <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
    #
    # <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
    # right token, however, then assume {@code LA(1)} is some extra spurious
    # token and delete it. Then consume and return the next token (which was
    # the {@code LA(2)} token) as the successful result of the match operation.</p>
    #
    # <p>This recovery strategy is implemented by {@link #singleTokenDeletion}.</p>
    #
    # <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
    #
    # <p>If current token (at {@code LA(1)}) is consistent with what could come
    # after the expected {@code LA(1)} token, then assume the token is missing
    # and use the parser's {@link TokenFactory} to create it on the fly. The
    # ""insertion"" is performed by returning the created token as the successful
    # result of the match operation.</p>
    #
    # <p>This recovery strategy is implemented by {@link #singleTokenInsertion}.</p>
    #
    # <p><strong>EXAMPLE</strong></p>
    #
    # <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
    # the parser returns from the nested call to {@code expr}, it will have
    # call chain:</p>
    #
    # <pre>
    # stat &rarr; expr &rarr; atom
    # </pre>
    #
    # and it will be trying to match the {@code ')'} at this point in the
    # derivation:
    #
    # <pre>
    # =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
    #                    ^
    # </pre>
    #
    # The attempt to match {@code ')'} will fail when it sees {@code ';'} and
    # call {@link #recoverInline}. To recover, it sees that {@code LA(1)==';'}
    # is in the set of tokens that can follow the {@code ')'} token reference
    # in rule {@code atom}. It can assume that you forgot the {@code ')'}.
    #
    def recoverInline(self, recognizer:Parser):
        # SINGLE TOKEN DELETION
        matchedSymbol = self.singleTokenDeletion(recognizer)
        if matchedSymbol is not None:
            # we have deleted the extra token.
            # now, move past ttype token as if all were ok
            recognizer.consume()
            return matchedSymbol

        # SINGLE TOKEN INSERTION
        if self.singleTokenInsertion(recognizer):
            return self.getMissingSymbol(recognizer)

        # even that didn't work; must throw the exception
        raise InputMismatchException(recognizer)

    #
    # This method implements the single-token insertion inline error recovery
    # strategy. It is called by {@link #recoverInline} if the single-token
    # deletion strategy fails to recover from the mismatched input. If this
    # method returns {@code true}, {@code recognizer} will be in error recovery
    # mode.
    #
    # <p>This method determines whether or not single-token insertion is viable by
    # checking if the {@code LA(1)} input symbol could be successfully matched
    # if it were instead the {@code LA(2)} symbol. If this method returns
    # {@code true}, the caller is responsible for creating and inserting a
    # token with the correct type to produce this behavior.</p>
    #
    # @param recognizer the parser instance
    # @return {@code true} if single-token insertion is a viable recovery
    # strategy for the current mismatched input, otherwise {@code false}
    #
    def singleTokenInsertion(self, recognizer:Parser):
        currentSymbolType = recognizer.getTokenStream().LA(1)
        # if current token is consistent with what could come after current
        # ATN state, then we know we're missing a token; error recovery
        # is free to conjure up and insert the missing token
        atn = recognizer._interp.atn
        currentState = atn.states[recognizer.state]
        next = currentState.transitions[0].target
        expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)
        if currentSymbolType in expectingAtLL2:
            self.reportMissingToken(recognizer)
            return True
        else:
            return False

    # This method implements the single-token deletion inline error recovery
    # strategy. It is called by {@link #recoverInline} to attempt to recover
    # from mismatched input. If this method returns null, the parser and error
    # handler state will not have changed. If this method returns non-null,
    # {@code recognizer} will <em>not</em> be in error recovery mode since the
    # returned token was a successful match.
    #
    # <p>If the single-token deletion is successful, this method calls
    # {@link #reportUnwantedToken} to report the error, followed by
    # {@link Parser#consume} to actually ""delete"" the extraneous token. Then,
    # before returning {@link #reportMatch} is called to signal a successful
    # match.</p>
    #
    # @param recognizer the parser instance
    # @return the successfully matched {@link Token} instance if single-token
    # deletion successfully recovers from the mismatched input, otherwise
    # {@code null}
    #
    def singleTokenDeletion(self, recognizer:Parser):
        nextTokenType = recognizer.getTokenStream().LA(2)
        expecting = self.getExpectedTokens(recognizer)
        if nextTokenType in expecting:
            self.reportUnwantedToken(recognizer)
            # print(""recoverFromMismatchedToken deleting "" \
            #     + str(recognizer.getTokenStream().LT(1)) \
            #     + "" since "" + str(recognizer.getTokenStream().LT(2)) \
            #     + "" is what we want"", file=sys.stderr)
            recognizer.consume() # simply delete extra token
            # we want to return the token we're actually matching
            matchedSymbol = recognizer.getCurrentToken()
            self.reportMatch(recognizer) # we know current token is correct
            return matchedSymbol
        else:
            return None

    # Conjure up a missing token during error recovery.
    #
    #  The recognizer attempts to recover from single missing
    #  symbols. But, actions might refer to that missing symbol.
    #  For example, x=ID {f($x);}. The action clearly assumes
    #  that there has been an identifier matched previously and that
    #  $x points at that token. If that token is missing, but
    #  the next token in the stream is what we want we assume that
    #  this token is missing and we keep going. Because we
    #  have to return some token to replace the missing token,
    #  we have to conjure one up. This method gives the user control
    #  over the tokens returned for missing tokens. Mostly,
    #  you will want to create something special for identifier
    #  tokens. For literals such as '{' and ',', the default
    #  action in the parser or tree parser works. It simply creates
    #  a CommonToken of the appropriate type. The text will be the token.
    #  If you change what tokens must be created by the lexer,
    #  override this method to create the appropriate tokens.
    #
    def getMissingSymbol(self, recognizer:Parser):
        currentSymbol = recognizer.getCurrentToken()
        expecting = self.getExpectedTokens(recognizer)
        expectedTokenType = expecting[0] # get any element
        if expectedTokenType==Token.EOF:
            tokenText = ""<missing EOF>""
        else:
            name = None
            if expectedTokenType < len(recognizer.literalNames):
                name = recognizer.literalNames[expectedTokenType]
            if name is None and expectedTokenType < len(recognizer.symbolicNames):
                name = recognizer.symbolicNames[expectedTokenType]
            tokenText = ""<missing "" + str(name) + "">""
        current = currentSymbol
        lookback = recognizer.getTokenStream().LT(-1)
        if current.type==Token.EOF and lookback is not None:
            current = lookback
        return recognizer.getTokenFactory().create(current.source,
            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
            -1, -1, current.line, current.column)

    def getExpectedTokens(self, recognizer:Parser):
        return recognizer.getExpectedTokens()

    # How should a token be displayed in an error message? The default
    #  is to display just the text, but during development you might
    #  want to have a lot of information spit out.  Override in that case
    #  to use t.toString() (which, for CommonToken, dumps everything about
    #  the token). This is better than forcing you to override a method in
    #  your token objects because you don't have to go modify your lexer
    #  so that it creates a new Java type.
    #
    def getTokenErrorDisplay(self, t:Token):
        if t is None:
            return ""<no token>""
        s = t.text
        if s is None:
            if t.type==Token.EOF:
                s = ""<EOF>""
            else:
                s = ""<"" + str(t.type) + "">""
        return self.escapeWSAndQuote(s)

    def escapeWSAndQuote(self, s:str):
        s = s.replace(""\n"",""\\n"")
        s = s.replace(""\r"",""\\r"")
        s = s.replace(""\t"",""\\t"")
        return ""'"" + s + ""'""

    #  Compute the error recovery set for the current rule.  During
    #  rule invocation, the parser pushes the set of tokens that can
    #  follow that rule reference on the stack; this amounts to
    #  computing FIRST of what follows the rule reference in the
    #  enclosing rule. See LinearApproximator.FIRST().
    #  This local follow set only includes tokens
    #  from within the rule; i.e., the FIRST computation done by
    #  ANTLR stops at the end of a rule.
    #
    #  EXAMPLE
    #
    #  When you find a ""no viable alt exception"", the input is not
    #  consistent with any of the alternatives for rule r.  The best
    #  thing to do is to consume tokens until you see something that
    #  can legally follow a call to r#or* any rule that called r.
    #  You don't want the exact set of viable next tokens because the
    #  input might just be missing a token--you might consume the
    #  rest of the input looking for one of the missing tokens.
    #
    #  Consider grammar:
    #
    #  a : '[' b ']'
    #    | '(' b ')'
    #    ;
    #  b : c '^' INT ;
    #  c : ID
    #    | INT
    #    ;
    #
    #  At each rule invocation, the set of tokens that could follow
    #  that rule is pushed on a stack.  Here are the various
    #  context-sensitive follow sets:
    #
    #  FOLLOW(b1_in_a) = FIRST(']') = ']'
    #  FOLLOW(b2_in_a) = FIRST(')') = ')'
    #  FOLLOW(c_in_b) = FIRST('^') = '^'
    #
    #  Upon erroneous input ""[]"", the call chain is
    #
    #  a -> b -> c
    #
    #  and, hence, the follow context stack is:
    #
    #  depth     follow set       start of rule execution
    #    0         <EOF>                    a (from main())
    #    1          ']'                     b
    #    2          '^'                     c
    #
    #  Notice that ')' is not included, because b would have to have
    #  been called from a different context in rule a for ')' to be
    #  included.
    #
    #  For error recovery, we cannot consider FOLLOW(c)
    #  (context-sensitive or otherwise).  We need the combined set of
    #  all context-sensitive FOLLOW sets--the set of all tokens that
    #  could follow any reference in the call chain.  We need to
    #  resync to one of those tokens.  Note that FOLLOW(c)='^' and if
    #  we resync'd to that token, we'd consume until EOF.  We need to
    #  sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
    #  In this case, for input ""[]"", LA(1) is ']' and in the set, so we would
    #  not consume anything. After printing an error, rule c would
    #  return normally.  Rule b would not find the required '^' though.
    #  At this point, it gets a mismatched token error and throws an
    #  exception (since LA(1) is not in the viable following token
    #  set).  The rule exception handler tries to recover, but finds
    #  the same recovery set and doesn't consume anything.  Rule b
    #  exits normally returning to rule a.  Now it finds the ']' (and
    #  with the successful match exits errorRecovery mode).
    #
    #  So, you can see that the parser walks up the call chain looking
    #  for the token that was a member of the recovery set.
    #
    #  Errors are not generated in errorRecovery mode.
    #
    #  ANTLR's error recovery mechanism is based upon original ideas:
    #
    #  ""Algorithms + Data Structures = Programs"" by Niklaus Wirth
    #
    #  and
    #
    #  ""A note on error recovery in recursive descent parsers"":
    #  http:#portal.acm.org/citation.cfm?id=947902.947905
    #
    #  Later, Josef Grosch had some good ideas:
    #
    #  ""Efficient and Comfortable Error Recovery in Recursive Descent
    #  Parsers"":
    #  ftp:#www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
    #
    #  Like Grosch I implement context-sensitive FOLLOW sets that are combined
    #  at run-time upon error to avoid overhead during parsing.
    #
    def getErrorRecoverySet(self, recognizer:Parser):
        atn = recognizer._interp.atn
        ctx = recognizer._ctx
        recoverSet = IntervalSet()
        while ctx is not None and ctx.invokingState>=0:
            # compute what follows who invoked us
            invokingState = atn.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            follow = atn.nextTokens(rt.followState)
            recoverSet.addSet(follow)
            ctx = ctx.parentCtx
        recoverSet.removeOne(Token.EPSILON)
        return recoverSet

    # Consume tokens until one matches the given token set.#
    def consumeUntil(self, recognizer:Parser, set_:set):
        ttype = recognizer.getTokenStream().LA(1)
        while ttype != Token.EOF and not ttype in set_:
            recognizer.consume()
            ttype = recognizer.getTokenStream().LA(1)",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 463 40 41 46 2002 40 41 621 621 621 621 621 621 2003 46 2004 61 302 621 621 621 621 621 621 2003 46 2005 61 45 1501 2003 46 2006 61 303 2003 46 2007 61 303 2003 46 2008 61 1500 621 621 348 2009 40 2003 44 2010 58 2011 41 58 2003 46 2012 40 2010 41 621 621 621 621 621 621 348 2013 40 2003 44 2010 58 2011 41 58 2003 46 2004 61 304 348 2014 40 2003 44 2010 58 2011 41 58 450 2003 46 2004 621 621 621 621 621 621 348 2012 40 2003 44 2010 58 2011 41 58 2003 46 2004 61 302 2003 46 2006 61 303 2003 46 2005 61 45 1501 621 621 621 621 621 348 2015 40 2003 44 2010 58 2011 41 58 2003 46 2012 40 2010 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2016 40 2003 44 2010 58 2011 44 2017 58 2018 41 58 621 621 392 2003 46 2014 40 2010 41 58 450 621 2003 46 2013 40 2010 41 392 2019 40 2017 44 2020 41 58 2003 46 2021 40 2010 44 2017 41 359 2019 40 2017 44 2022 41 58 2003 46 2023 40 2010 44 2017 41 359 2019 40 2017 44 2024 41 58 2003 46 2025 40 2010 44 2017 41 360 58 436 40 648 43 2026 40 2017 41 46 2027 41 2010 46 2028 40 2017 46 2029 44 2017 46 2030 44 2017 41 621 621 621 621 621 621 621 348 2031 40 2003 44 2010 58 2011 44 2017 58 2018 41 58 392 2003 46 2005 614 2010 46 2032 40 41 46 2033 92 308 2003 46 2006 407 422 303 92 308 2010 46 2034 398 2003 46 2006 58 621 621 621 621 2010 46 2035 40 41 2003 46 2005 61 2010 46 2036 46 2033 392 2003 46 2006 407 303 58 2003 46 2006 61 91 93 2003 46 2006 46 2037 40 2010 46 2034 41 2038 61 2003 46 2039 40 2010 41 2003 46 2040 40 2010 44 2038 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2041 40 2003 44 2010 58 2011 41 58 621 392 2003 46 2014 40 2010 41 58 450 2042 61 2010 46 2043 46 2044 46 2045 91 2010 46 2034 93 2046 61 2010 46 2047 40 41 46 2048 40 1501 41 621 2049 61 2010 46 2044 46 2049 40 2042 41 392 2046 398 2049 58 2003 46 2007 61 303 2003 46 2008 61 2050 46 2051 450 359 2052 46 2053 398 2049 58 392 2003 46 2007 407 303 58 621 621 2003 46 2007 61 2010 46 2054 2003 46 2055 61 2010 46 2056 450 392 2042 46 2057 398 91 2050 46 2058 44 2050 46 2059 44 2050 46 2060 44 2050 46 2061 93 58 621 392 2003 46 2062 40 2010 41 407 422 303 58 450 360 58 440 2022 40 2010 41 359 2042 46 2057 398 91 2050 46 2063 44 2050 46 2064 93 58 2003 46 2065 40 2010 41 2066 61 2010 46 2067 40 41 2068 61 2066 46 2069 40 2003 46 2039 40 2010 41 41 2003 46 2040 40 2010 44 2068 41 360 58 621 434 621 621 621 621 621 621 621 621 348 2021 40 2003 44 2010 58 2011 44 2017 58 2020 41 58 2070 61 2010 46 2047 40 41 392 2070 407 422 303 58 392 2017 46 2071 46 2026 614 2052 46 2072 58 2073 61 648 360 58 2073 61 2070 46 2074 40 2017 46 2071 44 2017 46 2030 41 360 58 2073 61 648 2075 61 648 43 2003 46 2076 40 2073 41 2010 46 2028 40 2075 44 2017 46 2030 44 2017 41 621 621 621 621 621 621 621 621 621 348 2023 40 2003 44 2010 58 2011 44 2017 58 2022 41 58 2075 61 648 43 2003 46 2077 40 2017 46 2030 41 92 43 648 43 2017 46 2067 40 41 46 2078 40 2010 46 2079 44 2010 46 2080 41 2010 46 2028 40 2075 44 2017 46 2030 44 2017 41 621 621 621 621 621 621 621 621 621 348 2025 40 2003 44 2010 44 2017 41 58 2081 61 2010 46 2082 91 2010 46 2054 46 2083 40 41 93 2075 61 648 43 2081 43 648 43 2017 46 2029 2010 46 2028 40 2075 44 2017 46 2030 44 2017 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2065 40 2003 44 2010 58 2011 41 58 392 2003 46 2014 40 2010 41 58 450 2003 46 2013 40 2010 41 2084 61 2010 46 2085 40 41 2086 61 2003 46 2077 40 2084 41 2066 61 2003 46 2067 40 2010 41 2075 61 648 43 2086 43 648 92 43 2066 46 2078 40 2010 46 2079 44 2010 46 2080 41 2010 46 2028 40 2075 44 2084 44 303 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2087 40 2003 44 2010 58 2011 41 58 392 2003 46 2014 40 2010 41 58 450 2003 46 2013 40 2010 41 2084 61 2010 46 2085 40 41 2066 61 2003 46 2067 40 2010 41 2075 61 648 43 2066 46 2078 40 2010 46 2079 44 2010 46 2080 41 92 43 648 43 2003 46 2077 40 2084 41 2010 46 2028 40 2075 44 2084 44 303 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2088 40 2003 44 2010 58 2011 41 58 621 2089 61 2003 46 2062 40 2010 41 392 2089 407 422 303 58 621 621 2010 46 2035 40 41 450 2089 621 392 2003 46 2090 40 2010 41 58 450 2003 46 2091 40 2010 41 621 440 2022 40 2010 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2090 40 2003 44 2010 58 2011 41 58 2092 61 2010 46 2047 40 41 46 2048 40 1501 41 621 621 621 2044 61 2010 46 2043 46 2044 2093 61 2044 46 2045 91 2010 46 2034 93 2094 61 2093 46 2095 91 1500 93 46 2096 2097 61 2044 46 2049 40 2094 44 2010 46 2054 41 392 2092 398 2097 58 2003 46 2087 40 2010 41 450 304 360 58 450 302 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2062 40 2003 44 2010 58 2011 41 58 2098 61 2010 46 2047 40 41 46 2048 40 1502 41 2066 61 2003 46 2067 40 2010 41 392 2098 398 2066 58 2003 46 2065 40 2010 41 621 621 621 621 2010 46 2035 40 41 621 621 2089 61 2010 46 2085 40 41 2003 46 2015 40 2010 41 621 450 2089 360 58 450 303 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2091 40 2003 44 2010 58 2011 41 58 2099 61 2010 46 2085 40 41 2066 61 2003 46 2067 40 2010 41 2100 61 2066 91 1500 93 621 392 2100 614 2052 46 2072 58 2101 61 648 360 58 2102 61 303 392 2100 60 2103 40 2010 46 2079 41 58 2102 61 2010 46 2079 91 2100 93 392 2102 407 303 308 2100 60 2103 40 2010 46 2080 41 58 2102 61 2010 46 2080 91 2100 93 2101 61 648 43 2104 40 2102 41 43 648 2105 61 2099 2106 61 2010 46 2047 40 41 46 2107 40 45 1501 41 392 2105 46 2026 614 2052 46 2072 308 2106 407 422 303 58 2105 61 2106 450 2010 46 2108 40 41 46 2109 40 2105 46 2110 44 2100 44 2101 44 2052 46 2111 44 45 1501 44 45 1501 44 2105 46 410 44 2105 46 2112 41 348 2067 40 2003 44 2010 58 2011 41 58 450 2010 46 2067 40 41 621 621 621 621 621 621 621 621 348 2077 40 2003 44 2084 58 2052 41 58 392 2084 407 303 58 450 648 2042 61 2084 46 2113 392 2042 407 303 58 392 2084 46 2026 614 2052 46 2072 58 2042 61 648 360 58 2042 61 648 43 2104 40 2084 46 2026 41 43 648 450 2003 46 2076 40 2042 41 348 2076 40 2003 44 2042 58 2104 41 58 2042 61 2042 46 2114 40 648 44 648 41 2042 61 2042 46 2114 40 648 44 648 41 2042 61 2042 46 2114 40 648 44 648 41 450 648 43 2042 43 648 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2039 40 2003 44 2010 58 2011 41 58 2044 61 2010 46 2043 46 2044 2115 61 2010 46 2054 2116 61 2117 40 41 496 2115 407 422 303 308 2115 46 2118 615 1500 58 621 2118 61 2044 46 2045 91 2115 46 2118 93 2119 61 2118 46 2095 91 1500 93 2120 61 2044 46 2049 40 2119 46 2121 41 2116 46 2069 40 2120 41 2115 61 2115 46 2122 2116 46 2123 40 2052 46 2053 41 450 2116 621 348 2040 40 2003 44 2010 58 2011 44 2124 58 2125 41 58 2126 61 2010 46 2047 40 41 46 2048 40 1501 41 496 2126 631 2052 46 2072 308 422 2126 398 2124 58 2010 46 2035 40 41 2126 61 2010 46 2047 40 41 46 2048 40 1501 41 
128874,Python,"class ParserInterpreter(Parser):
    __slots__ = (
        'grammarFileName', 'atn', 'tokenNames', 'ruleNames', 'decisionToDFA',
        'sharedContextCache', '_parentContextStack',
        'pushRecursionContextStates'
    )

    def __init__(self, grammarFileName:str, tokenNames:list, ruleNames:list, atn:ATN, input:TokenStream):
        super().__init__(input)
        self.grammarFileName = grammarFileName
        self.atn = atn
        self.tokenNames = tokenNames
        self.ruleNames = ruleNames
        self.decisionToDFA = [ DFA(state) for state in atn.decisionToState ]
        self.sharedContextCache = PredictionContextCache()
        self._parentContextStack = list()
        # identify the ATN states where pushNewRecursionContext must be called
        self.pushRecursionContextStates = set()
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue
            if state.isPrecedenceDecision:
                self.pushRecursionContextStates.add(state.stateNumber)
        # get atn simulator that knows how to do predictions
        self._interp = ParserATNSimulator(self, atn, self.decisionToDFA, self.sharedContextCache)

    # Begin parsing at startRuleIndex#
    def parse(self, startRuleIndex:int):
        startRuleStartState = self.atn.ruleToStartState[startRuleIndex]
        rootContext = InterpreterRuleContext(None, ATNState.INVALID_STATE_NUMBER, startRuleIndex)
        if startRuleStartState.isPrecedenceRule:
            self.enterRecursionRule(rootContext, startRuleStartState.stateNumber, startRuleIndex, 0)
        else:
            self.enterRule(rootContext, startRuleStartState.stateNumber, startRuleIndex)
        while True:
            p = self.getATNState()
            if p.stateType==ATNState.RULE_STOP :
                # pop; return from rule
                if len(self._ctx)==0:
                    if startRuleStartState.isPrecedenceRule:
                        result = self._ctx
                        parentContext = self._parentContextStack.pop()
                        self.unrollRecursionContexts(parentContext.a)
                        return result
                    else:
                        self.exitRule()
                        return rootContext
                self.visitRuleStopState(p)

            else:
                try:
                    self.visitState(p)
                except RecognitionException as e:
                    self.state = self.atn.ruleToStopState[p.ruleIndex].stateNumber
                    self._ctx.exception = e
                    self._errHandler.reportError(self, e)
                    self._errHandler.recover(self, e)

    def enterRecursionRule(self, localctx:ParserRuleContext, state:int, ruleIndex:int, precedence:int):
        self._parentContextStack.append((self._ctx, localctx.invokingState))
        super().enterRecursionRule(localctx, state, ruleIndex, precedence)

    def getATNState(self):
        return self.atn.states[self.state]

    def visitState(self, p:ATNState):
        edge = 0
        if len(p.transitions) > 1:
            self._errHandler.sync(self)
            edge = self._interp.adaptivePredict(self._input, p.decision, self._ctx)
        else:
            edge = 1

        transition = p.transitions[edge - 1]
        tt = transition.serializationType
        if tt==Transition.EPSILON:

            if self.pushRecursionContextStates[p.stateNumber] and not isinstance(transition.target, LoopEndState):
                t = self._parentContextStack[-1]
                ctx = InterpreterRuleContext(t[0], t[1], self._ctx.ruleIndex)
                self.pushNewRecursionContext(ctx, self.atn.ruleToStartState[p.ruleIndex].stateNumber, self._ctx.ruleIndex)

        elif tt==Transition.ATOM:

            self.match(transition.label)

        elif tt in [ Transition.RANGE, Transition.SET, Transition.NOT_SET]:

            if not transition.matches(self._input.LA(1), Token.MIN_USER_TOKEN_TYPE, Lexer.MAX_CHAR_VALUE):
                self._errHandler.recoverInline(self)
            self.matchWildcard()

        elif tt==Transition.WILDCARD:

            self.matchWildcard()

        elif tt==Transition.RULE:

            ruleStartState = transition.target
            ruleIndex = ruleStartState.ruleIndex
            ctx = InterpreterRuleContext(self._ctx, p.stateNumber, ruleIndex)
            if ruleStartState.isPrecedenceRule:
                self.enterRecursionRule(ctx, ruleStartState.stateNumber, ruleIndex, transition.precedence)
            else:
                self.enterRule(ctx, transition.target.stateNumber, ruleIndex)

        elif tt==Transition.PREDICATE:

            if not self.sempred(self._ctx, transition.ruleIndex, transition.predIndex):
                raise FailedPredicateException(self)

        elif tt==Transition.ACTION:

            self.action(self._ctx, transition.ruleIndex, transition.actionIndex)

        elif tt==Transition.PRECEDENCE:

            if not self.precpred(self._ctx, transition.precedence):
                msg = ""precpred(_ctx, "" + str(transition.precedence) + "")""
                raise FailedPredicateException(self, msg)

        else:
            raise UnsupportedOperationException(""Unrecognized ATN transition type."")

        self.state = transition.target.stateNumber

    def visitRuleStopState(self, p:ATNState):
        ruleStartState = self.atn.ruleToStartState[p.ruleIndex]
        if ruleStartState.isPrecedenceRule:
            parentContext = self._parentContextStack.pop()
            self.unrollRecursionContexts(parentContext.a)
            self.state = parentContext[1]
        else:
            self.exitRule()

        ruleTransition = self.atn.states[self.state].transitions[0]
        self.state = ruleTransition.followState.stateNumber",1,334 2000 40 2001 41 58 2002 61 40 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 41 348 2003 40 2004 44 2005 58 2006 44 2007 58 411 44 2008 58 411 44 2009 58 2010 44 2011 58 2012 41 58 463 40 41 46 2003 40 2011 41 2004 46 2005 61 2005 2004 46 2009 61 2009 2004 46 2007 61 2007 2004 46 2008 61 2008 2004 46 2013 61 91 2014 40 2015 41 385 2015 398 2009 46 2016 93 2004 46 2017 61 2018 40 41 2004 46 2019 61 411 40 41 621 2004 46 2020 61 2021 40 41 385 2015 398 2009 46 2022 58 392 422 2023 40 2015 44 2024 41 58 344 392 2015 46 2025 58 2004 46 2020 46 2026 40 2015 46 2027 41 621 2004 46 2028 61 2029 40 2004 44 2009 44 2004 46 2013 44 2004 46 2017 41 621 348 2030 40 2004 44 2031 58 404 41 58 2032 61 2004 46 2009 46 2033 91 2031 93 2034 61 2035 40 303 44 2036 46 2037 44 2031 41 392 2032 46 2038 58 2004 46 2039 40 2034 44 2032 46 2027 44 2031 44 1500 41 360 58 2004 46 2040 40 2034 44 2032 46 2027 44 2031 41 496 304 58 2041 61 2004 46 2042 40 41 392 2041 46 2043 614 2036 46 2044 58 621 392 2045 40 2004 46 2046 41 614 1500 58 392 2032 46 2038 58 2047 61 2004 46 2046 2048 61 2004 46 2019 46 2049 40 41 2004 46 2050 40 2048 46 2051 41 450 2047 360 58 2004 46 2052 40 41 450 2034 2004 46 2053 40 2041 41 360 58 474 58 2004 46 2054 40 2041 41 374 2055 311 2056 58 2004 46 2015 61 2004 46 2009 46 2057 91 2041 46 2058 93 46 2027 2004 46 2046 46 2059 61 2056 2004 46 2060 46 2061 40 2004 44 2056 41 2004 46 2060 46 2062 40 2004 44 2056 41 348 2039 40 2004 44 2063 58 2064 44 2015 58 404 44 2058 58 404 44 2065 58 404 41 58 2004 46 2019 46 2066 40 40 2004 46 2046 44 2063 46 2067 41 41 463 40 41 46 2039 40 2063 44 2015 44 2058 44 2065 41 348 2042 40 2004 41 58 450 2004 46 2009 46 2022 91 2004 46 2015 93 348 2054 40 2004 44 2041 58 2036 41 58 2068 61 1500 392 2045 40 2041 46 2069 41 62 1501 58 2004 46 2060 46 2070 40 2004 41 2068 61 2004 46 2028 46 2071 40 2004 46 2072 44 2041 46 2073 44 2004 46 2046 41 360 58 2068 61 1501 2074 61 2041 46 2069 91 2068 45 1501 93 2075 61 2074 46 2076 392 2075 614 2077 46 2078 58 392 2004 46 2020 91 2041 46 2027 93 308 422 2023 40 2074 46 2079 44 2080 41 58 2081 61 2004 46 2019 91 45 1501 93 2082 61 2035 40 2081 91 1500 93 44 2081 91 1501 93 44 2004 46 2046 46 2058 41 2004 46 2083 40 2082 44 2004 46 2009 46 2033 91 2041 46 2058 93 46 2027 44 2004 46 2046 46 2058 41 359 2075 614 2077 46 2084 58 2004 46 2085 40 2074 46 2086 41 359 2075 398 91 2077 46 2087 44 2077 46 2088 44 2077 46 2089 93 58 392 422 2074 46 2090 40 2004 46 2072 46 2091 40 1501 41 44 2092 46 2093 44 2094 46 2095 41 58 2004 46 2060 46 2096 40 2004 41 2004 46 2097 40 41 359 2075 614 2077 46 2098 58 2004 46 2097 40 41 359 2075 614 2077 46 2099 58 2100 61 2074 46 2079 2058 61 2100 46 2058 2082 61 2035 40 2004 46 2046 44 2041 46 2027 44 2058 41 392 2100 46 2038 58 2004 46 2039 40 2082 44 2100 46 2027 44 2058 44 2074 46 2065 41 360 58 2004 46 2040 40 2082 44 2074 46 2079 46 2027 44 2058 41 359 2075 614 2077 46 2101 58 392 422 2004 46 2102 40 2004 46 2046 44 2074 46 2058 44 2074 46 2103 41 58 440 2104 40 2004 41 359 2075 614 2077 46 2105 58 2004 46 2106 40 2004 46 2046 44 2074 46 2058 44 2074 46 2107 41 359 2075 614 2077 46 2108 58 392 422 2004 46 2109 40 2004 46 2046 44 2074 46 2065 41 58 2110 61 648 43 2006 40 2074 46 2065 41 43 648 440 2104 40 2004 44 2110 41 360 58 440 2111 40 648 41 2004 46 2015 61 2074 46 2079 46 2027 348 2053 40 2004 44 2041 58 2036 41 58 2100 61 2004 46 2009 46 2033 91 2041 46 2058 93 392 2100 46 2038 58 2048 61 2004 46 2019 46 2049 40 41 2004 46 2050 40 2048 46 2051 41 2004 46 2015 61 2048 91 1501 93 360 58 2004 46 2052 40 41 2112 61 2004 46 2009 46 2022 91 2004 46 2015 93 46 2069 91 1500 93 2004 46 2015 61 2112 46 2113 46 2027 
129045,Python,"class ExprParser ( Parser ):

    grammarFileName = ""Expr.g4""

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ ""<INVALID>"", ""'def'"", ""'('"", ""','"", ""')'"", ""'{'"", ""'}'"", 
                     ""';'"", ""'='"", ""'*'"", ""'/'"", ""'+'"", ""'-'"", ""'return'"" ]

    symbolicNames = [ ""<INVALID>"", ""<INVALID>"", ""<INVALID>"", ""<INVALID>"", 
                      ""<INVALID>"", ""<INVALID>"", ""<INVALID>"", ""<INVALID>"", 
                      ""<INVALID>"", ""MUL"", ""DIV"", ""ADD"", ""SUB"", ""RETURN"", 
                      ""ID"", ""INT"", ""NEWLINE"", ""WS"" ]

    RULE_prog = 0
    RULE_func = 1
    RULE_body = 2
    RULE_arg = 3
    RULE_stat = 4
    RULE_expr = 5
    RULE_primary = 6

    ruleNames =  [ ""prog"", ""func"", ""body"", ""arg"", ""stat"", ""expr"", ""primary"" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    MUL=9
    DIV=10
    ADD=11
    SUB=12
    RETURN=13
    ID=14
    INT=15
    NEWLINE=16
    WS=17

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion(""4.9"")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ProgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExprParser.FuncContext)
            else:
                return self.getTypedRuleContext(ExprParser.FuncContext,i)


        def getRuleIndex(self):
            return ExprParser.RULE_prog




    def prog(self):

        localctx = ExprParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 15 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 14
                self.func()
                self.state = 17 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ExprParser.T__0):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExprParser.ID, 0)

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExprParser.ArgContext)
            else:
                return self.getTypedRuleContext(ExprParser.ArgContext,i)


        def body(self):
            return self.getTypedRuleContext(ExprParser.BodyContext,0)


        def getRuleIndex(self):
            return ExprParser.RULE_func




    def func(self):

        localctx = ExprParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 19
            self.match(ExprParser.T__0)
            self.state = 20
            self.match(ExprParser.ID)
            self.state = 21
            self.match(ExprParser.T__1)
            self.state = 22
            self.arg()
            self.state = 27
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ExprParser.T__2:
                self.state = 23
                self.match(ExprParser.T__2)
                self.state = 24
                self.arg()
                self.state = 29
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 30
            self.match(ExprParser.T__3)
            self.state = 31
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExprParser.StatContext)
            else:
                return self.getTypedRuleContext(ExprParser.StatContext,i)


        def getRuleIndex(self):
            return ExprParser.RULE_body




    def body(self):

        localctx = ExprParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 33
            self.match(ExprParser.T__4)
            self.state = 35 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 34
                self.stat()
                self.state = 37 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ExprParser.T__1) | (1 << ExprParser.T__6) | (1 << ExprParser.RETURN) | (1 << ExprParser.ID) | (1 << ExprParser.INT))) != 0)):
                    break

            self.state = 39
            self.match(ExprParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ExprParser.ID, 0)

        def getRuleIndex(self):
            return ExprParser.RULE_arg




    def arg(self):

        localctx = ExprParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 41
            self.match(ExprParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ExprParser.RULE_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RetContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(ExprParser.RETURN, 0)
        def expr(self):
            return self.getTypedRuleContext(ExprParser.ExprContext,0)



    class BlankContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)



    class PrintExprContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(ExprParser.ExprContext,0)



    class AssignContext(StatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.StatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self):
            return self.getToken(ExprParser.ID, 0)
        def expr(self):
            return self.getTypedRuleContext(ExprParser.ExprContext,0)




    def stat(self):

        localctx = ExprParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stat)
        try:
            self.state = 56
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                localctx = ExprParser.PrintExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 43
                self.expr(0)
                self.state = 44
                self.match(ExprParser.T__6)
                pass

            elif la_ == 2:
                localctx = ExprParser.AssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 46
                self.match(ExprParser.ID)
                self.state = 47
                self.match(ExprParser.T__7)
                self.state = 48
                self.expr(0)
                self.state = 49
                self.match(ExprParser.T__6)
                pass

            elif la_ == 3:
                localctx = ExprParser.RetContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 51
                self.match(ExprParser.RETURN)
                self.state = 52
                self.expr(0)
                self.state = 53
                self.match(ExprParser.T__6)
                pass

            elif la_ == 4:
                localctx = ExprParser.BlankContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 55
                self.match(ExprParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ExprParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PrimContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(ExprParser.PrimaryContext,0)



    class MulDivContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExprParser.ExprContext)
            else:
                return self.getTypedRuleContext(ExprParser.ExprContext,i)

        def MUL(self):
            return self.getToken(ExprParser.MUL, 0)
        def DIV(self):
            return self.getToken(ExprParser.DIV, 0)


    class AddSubContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ExprParser.ExprContext)
            else:
                return self.getTypedRuleContext(ExprParser.ExprContext,i)

        def ADD(self):
            return self.getToken(ExprParser.ADD, 0)
        def SUB(self):
            return self.getToken(ExprParser.SUB, 0)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ExprParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = ExprParser.PrimContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 59
            self.primary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 69
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 67
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                    if la_ == 1:
                        localctx = ExprParser.MulDivContext(self, ExprParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 61
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, ""self.precpred(self._ctx, 3)"")
                        self.state = 62
                        _la = self._input.LA(1)
                        if not(_la==ExprParser.MUL or _la==ExprParser.DIV):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 63
                        self.expr(4)
                        pass

                    elif la_ == 2:
                        localctx = ExprParser.AddSubContext(self, ExprParser.ExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 64
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, ""self.precpred(self._ctx, 2)"")
                        self.state = 65
                        _la = self._input.LA(1)
                        if not(_la==ExprParser.ADD or _la==ExprParser.SUB):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 66
                        self.expr(3)
                        pass

             
                self.state = 71
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ExprParser.RULE_primary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ParensContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(ExprParser.ExprContext,0)



    class IdContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ID(self):
            return self.getToken(ExprParser.ID, 0)


    class IntContext(PrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ExprParser.PrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INT(self):
            return self.getToken(ExprParser.INT, 0)



    def primary(self):

        localctx = ExprParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_primary)
        try:
            self.state = 78
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ExprParser.INT]:
                localctx = ExprParser.IntContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 72
                self.match(ExprParser.INT)
                pass
            elif token in [ExprParser.ID]:
                localctx = ExprParser.IdContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 73
                self.match(ExprParser.ID)
                pass
            elif token in [ExprParser.T__1]:
                localctx = ExprParser.ParensContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 74
                self.match(ExprParser.T__1)
                self.state = 75
                self.expr(0)
                self.state = 76
                self.match(ExprParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception(""No predicate with index:"" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 2)",1,334 2000 40 2001 41 58 2002 61 648 2003 61 2004 40 41 46 2005 40 2006 40 41 41 2007 61 91 2008 40 2009 44 2010 41 385 2010 44 2009 398 2011 40 2003 46 2012 41 93 2013 61 2014 40 41 2015 61 91 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 93 2016 61 91 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 93 2017 61 1500 2018 61 1501 2019 61 1502 2020 61 1502 2021 61 1502 2022 61 1502 2023 61 1502 2024 61 91 648 44 648 44 648 44 648 44 648 44 648 44 648 93 2025 61 2026 46 2025 2027 61 1501 2028 61 1502 2029 61 1502 2030 61 1502 2031 61 1502 2032 61 1502 2033 61 1502 2034 61 1502 2035 61 1502 2036 61 1502 2037 61 1503 2038 61 1503 2039 61 1503 2040 61 1503 2041 61 1503 2042 61 1503 2043 61 1503 348 2044 40 2045 44 2046 58 2047 44 2048 58 2049 61 2050 46 2051 41 58 463 40 41 46 2044 40 2046 44 2048 41 2045 46 2052 40 648 41 2045 46 2053 61 2054 40 2045 44 2045 46 2003 44 2045 46 2007 44 2045 46 2013 41 2045 46 2055 61 303 334 2056 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2061 40 2045 44 2010 58 404 61 303 41 58 392 2010 407 303 58 450 2045 46 2062 40 2000 46 2063 41 360 58 450 2045 46 2064 40 2000 46 2063 44 2010 41 348 2065 40 2045 41 58 450 2000 46 2017 348 2066 40 2045 41 58 2067 61 2000 46 2056 40 2045 44 2045 46 2068 44 2045 46 2069 41 2045 46 2070 40 2067 44 1500 44 2045 46 2017 41 2045 46 2071 61 1500 621 474 58 2045 46 2072 40 2067 44 1501 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2071 61 2045 46 2075 46 2076 40 1501 41 496 304 58 2045 46 2069 61 1503 2045 46 2061 40 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2071 61 2045 46 2075 46 2076 40 1501 41 392 422 40 2071 614 2000 46 2027 41 58 325 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2082 40 41 450 2067 334 2063 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2040 40 2045 41 58 450 2045 46 2083 40 2000 46 2040 44 1500 41 348 2084 40 2045 44 2010 58 404 61 303 41 58 392 2010 407 303 58 450 2045 46 2062 40 2000 46 2085 41 360 58 450 2045 46 2064 40 2000 46 2085 44 2010 41 348 2086 40 2045 41 58 450 2045 46 2064 40 2000 46 2087 44 1500 41 348 2065 40 2045 41 58 450 2000 46 2018 348 2061 40 2045 41 58 2067 61 2000 46 2063 40 2045 44 2045 46 2068 44 2045 46 2069 41 2045 46 2070 40 2067 44 1502 44 2045 46 2018 41 2045 46 2071 61 1500 621 474 58 2045 46 2072 40 2067 44 1501 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2027 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2040 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2028 41 2045 46 2069 61 1503 2045 46 2084 40 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2071 61 2045 46 2075 46 2076 40 1501 41 496 2071 614 2000 46 2029 58 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2029 41 2045 46 2069 61 1503 2045 46 2084 40 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2071 61 2045 46 2075 46 2076 40 1501 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2030 41 2045 46 2069 61 1503 2045 46 2086 40 41 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2082 40 41 450 2067 334 2087 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2089 40 2045 44 2010 58 404 61 303 41 58 392 2010 407 303 58 450 2045 46 2062 40 2000 46 2090 41 360 58 450 2045 46 2064 40 2000 46 2090 44 2010 41 348 2065 40 2045 41 58 450 2000 46 2019 348 2086 40 2045 41 58 2067 61 2000 46 2087 40 2045 44 2045 46 2068 44 2045 46 2069 41 2045 46 2070 40 2067 44 1502 44 2045 46 2019 41 2045 46 2071 61 1500 621 474 58 2045 46 2072 40 2067 44 1501 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2031 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2071 61 2045 46 2075 46 2076 40 1501 41 496 304 58 2045 46 2069 61 1503 2045 46 2089 40 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2071 61 2045 46 2075 46 2076 40 1501 41 392 422 40 40 40 40 2071 41 38 126 1503 41 614 1500 308 40 40 1501 622 2071 41 38 40 40 1501 622 2000 46 2028 41 124 40 1501 622 2000 46 2033 41 124 40 1501 622 2000 46 2039 41 124 40 1501 622 2000 46 2040 41 124 40 1501 622 2000 46 2041 41 41 41 631 1500 41 41 58 325 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2032 41 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2082 40 41 450 2067 334 2085 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2040 40 2045 41 58 450 2045 46 2083 40 2000 46 2040 44 1500 41 348 2065 40 2045 41 58 450 2000 46 2020 348 2084 40 2045 41 58 2067 61 2000 46 2085 40 2045 44 2045 46 2068 44 2045 46 2069 41 2045 46 2070 40 2067 44 1502 44 2045 46 2020 41 474 58 2045 46 2072 40 2067 44 1501 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2040 41 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2082 40 41 450 2067 334 2090 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2065 40 2045 41 58 450 2000 46 2021 348 2091 40 2045 44 2092 58 2057 41 58 463 40 41 46 2091 40 2092 41 334 2093 40 2090 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2039 40 2045 41 58 450 2045 46 2083 40 2000 46 2039 44 1500 41 348 2094 40 2045 41 58 450 2045 46 2064 40 2000 46 2095 44 1500 41 334 2096 40 2090 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 334 2097 40 2090 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2094 40 2045 41 58 450 2045 46 2064 40 2000 46 2095 44 1500 41 334 2098 40 2090 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2040 40 2045 41 58 450 2045 46 2083 40 2000 46 2040 44 1500 41 348 2094 40 2045 41 58 450 2045 46 2064 40 2000 46 2095 44 1500 41 348 2089 40 2045 41 58 2067 61 2000 46 2090 40 2045 44 2045 46 2068 44 2045 46 2069 41 2045 46 2070 40 2067 44 1502 44 2045 46 2021 41 474 58 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2099 61 2045 46 2053 46 2100 40 2045 46 2075 44 1502 44 2045 46 2068 41 392 2099 614 1501 58 2067 61 2000 46 2097 40 2045 44 2067 41 2045 46 2072 40 2067 44 1501 41 2045 46 2069 61 1503 2045 46 2094 40 1500 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2033 41 434 359 2099 614 1502 58 2067 61 2000 46 2098 40 2045 44 2067 41 2045 46 2072 40 2067 44 1502 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2040 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2034 41 2045 46 2069 61 1503 2045 46 2094 40 1500 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2033 41 434 359 2099 614 1502 58 2067 61 2000 46 2093 40 2045 44 2067 41 2045 46 2072 40 2067 44 1502 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2039 41 2045 46 2069 61 1503 2045 46 2094 40 1500 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2033 41 434 359 2099 614 1502 58 2067 61 2000 46 2096 40 2045 44 2067 41 2045 46 2072 40 2067 44 1502 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2033 41 434 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2082 40 41 450 2067 334 2095 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2065 40 2045 41 58 450 2000 46 2022 348 2091 40 2045 44 2092 58 2057 41 58 463 40 41 46 2091 40 2092 41 334 2101 40 2095 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2102 40 2045 41 58 450 2045 46 2064 40 2000 46 2103 44 1500 41 334 2104 40 2095 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2094 40 2045 44 2010 58 404 61 303 41 58 392 2010 407 303 58 450 2045 46 2062 40 2000 46 2095 41 360 58 450 2045 46 2064 40 2000 46 2095 44 2010 41 348 2035 40 2045 41 58 450 2045 46 2083 40 2000 46 2035 44 1500 41 348 2036 40 2045 41 58 450 2045 46 2083 40 2000 46 2036 44 1500 41 334 2105 40 2095 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2094 40 2045 44 2010 58 404 61 303 41 58 392 2010 407 303 58 450 2045 46 2062 40 2000 46 2095 41 360 58 450 2045 46 2064 40 2000 46 2095 44 2010 41 348 2037 40 2045 41 58 450 2045 46 2083 40 2000 46 2037 44 1500 41 348 2038 40 2045 41 58 450 2045 46 2083 40 2000 46 2038 44 1500 41 348 2094 40 2045 44 2106 58 404 61 1500 41 58 2107 61 2045 46 2068 2108 61 2045 46 2069 2067 61 2000 46 2095 40 2045 44 2045 46 2068 44 2108 41 2109 61 2067 2110 61 1502 2045 46 2111 40 2067 44 1502 44 2045 46 2022 44 2106 41 2045 46 2071 61 1500 621 474 58 2045 46 2072 40 2067 44 1501 41 2067 61 2000 46 2101 40 2045 44 2067 41 2045 46 2068 61 2067 2109 61 2067 2045 46 2069 61 1503 2045 46 2102 40 41 2045 46 2068 46 2112 61 2045 46 2075 46 2113 40 45 1501 41 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2114 61 2045 46 2053 46 2100 40 2045 46 2075 44 1502 44 2045 46 2068 41 496 2114 631 1502 308 2114 631 2115 46 2116 58 392 2114 614 1501 58 392 2045 46 2117 407 422 303 58 2045 46 2118 40 41 2109 61 2067 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2099 61 2045 46 2053 46 2100 40 2045 46 2075 44 1502 44 2045 46 2068 41 392 2099 614 1501 58 2067 61 2000 46 2104 40 2045 44 2000 46 2095 40 2045 44 2107 44 2108 41 41 2045 46 2119 40 2067 44 2110 44 2045 46 2022 41 2045 46 2069 61 1503 392 422 2045 46 2120 40 2045 46 2068 44 1502 41 58 388 2121 46 371 46 2122 397 2123 440 2123 40 2045 44 648 41 2045 46 2069 61 1503 2071 61 2045 46 2075 46 2076 40 1501 41 392 422 40 2071 614 2000 46 2035 428 2071 614 2000 46 2036 41 58 2045 46 2073 46 2124 40 2045 41 360 58 2045 46 2073 46 2125 40 2045 41 2045 46 2126 40 41 2045 46 2069 61 1503 2045 46 2094 40 1502 41 434 359 2099 614 1502 58 2067 61 2000 46 2105 40 2045 44 2000 46 2095 40 2045 44 2107 44 2108 41 41 2045 46 2119 40 2067 44 2110 44 2045 46 2022 41 2045 46 2069 61 1503 392 422 2045 46 2120 40 2045 46 2068 44 1502 41 58 388 2121 46 371 46 2122 397 2123 440 2123 40 2045 44 648 41 2045 46 2069 61 1503 2071 61 2045 46 2075 46 2076 40 1501 41 392 422 40 2071 614 2000 46 2037 428 2071 614 2000 46 2038 41 58 2045 46 2073 46 2124 40 2045 41 360 58 2045 46 2073 46 2125 40 2045 41 2045 46 2126 40 41 2045 46 2069 61 1503 2045 46 2094 40 1502 41 434 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2114 61 2045 46 2053 46 2100 40 2045 46 2075 44 1502 44 2045 46 2068 41 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2127 40 2107 41 450 2067 334 2103 40 2057 41 58 348 2044 40 2045 44 2058 44 2059 58 2057 61 303 44 2060 58 404 61 45 1501 41 58 463 40 41 46 2044 40 2059 44 2060 41 2045 46 2058 61 2058 348 2065 40 2045 41 58 450 2000 46 2023 348 2091 40 2045 44 2092 58 2057 41 58 463 40 41 46 2091 40 2092 41 334 2128 40 2103 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2094 40 2045 41 58 450 2045 46 2064 40 2000 46 2095 44 1500 41 334 2129 40 2103 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2040 40 2045 41 58 450 2045 46 2083 40 2000 46 2040 44 1500 41 334 2130 40 2103 41 58 348 2044 40 2045 44 2058 44 2092 58 2057 41 58 621 463 40 41 46 2044 40 2058 41 2045 46 2091 40 2092 41 348 2041 40 2045 41 58 450 2045 46 2083 40 2000 46 2041 44 1500 41 348 2102 40 2045 41 58 2067 61 2000 46 2103 40 2045 44 2045 46 2068 44 2045 46 2069 41 2045 46 2070 40 2067 44 1503 44 2045 46 2023 41 474 58 2045 46 2069 61 1503 2045 46 2073 46 2074 40 2045 41 2131 61 2045 46 2075 46 2076 40 1501 41 392 2131 398 91 2000 46 2041 93 58 2067 61 2000 46 2130 40 2045 44 2067 41 2045 46 2072 40 2067 44 1501 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2041 41 434 359 2131 398 91 2000 46 2040 93 58 2067 61 2000 46 2129 40 2045 44 2067 41 2045 46 2072 40 2067 44 1502 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2040 41 434 359 2131 398 91 2000 46 2028 93 58 2067 61 2000 46 2128 40 2045 44 2067 41 2045 46 2072 40 2067 44 1502 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2028 41 2045 46 2069 61 1503 2045 46 2094 40 1500 41 2045 46 2069 61 1503 2045 46 2088 40 2000 46 2030 41 434 360 58 440 2132 40 2045 41 374 2077 311 2078 58 2067 46 2079 61 2078 2045 46 2073 46 2080 40 2045 44 2078 41 2045 46 2073 46 2081 40 2045 44 2078 41 382 58 2045 46 2082 40 41 450 2067 348 2133 40 2045 44 2067 58 2134 44 2135 58 404 44 2136 58 404 41 58 392 2045 46 2055 614 303 58 2045 46 2055 61 2137 40 41 2045 46 2055 91 1502 93 61 2045 46 2138 2139 61 2045 46 2055 46 2140 40 2135 44 303 41 392 2139 407 303 58 440 2141 40 648 43 2142 40 2135 41 41 360 58 450 2139 40 2067 44 2136 41 348 2138 40 2045 44 2067 58 2095 44 2136 58 404 41 58 392 2136 614 1500 58 450 2045 46 2120 40 2045 46 2068 44 1502 41 392 2136 614 1501 58 450 2045 46 2120 40 2045 46 2068 44 1502 41 
128770,Python,"class TraceListener(ParseTreeListener):
    __slots__ = '_parser'

    def __init__(self, parser):
        self._parser = parser

    def enterEveryRule(self, ctx):
        print(""enter   "" + self._parser.ruleNames[ctx.getRuleIndex()] + "", LT(1)="" + self._parser._input.LT(1).text, file=self._parser._output)

    def visitTerminal(self, node):

        print(""consume "" + str(node.symbol) + "" rule "" + self._parser.ruleNames[self._parser._ctx.getRuleIndex()], file=self._parser._output)

    def visitErrorNode(self, node):
        pass


    def exitEveryRule(self, ctx):
        print(""exit    "" + self._parser.ruleNames[ctx.getRuleIndex()] + "", LT(1)="" + self._parser._input.LT(1).text, file=self._parser._output)


# self is all the parsing support code essentially; most of it is error recovery stuff.#
class Parser (Recognizer):
    __slots__ = (
        '_input', '_output', '_errHandler', '_precedenceStack', '_ctx',
        'buildParseTrees', '_tracer', '_parseListeners', '_syntaxErrors'

    )
    # self field maps from the serialized ATN string to the deserialized {@link ATN} with
    # bypass alternatives.
    #
    # @see ATNDeserializationOptions#isGenerateRuleBypassTransitions()
    #
    bypassAltsAtnCache = dict()

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__()
        # The input stream.
        self._input = None
        self._output = output
        # The error handling strategy for the parser. The default value is a new
        # instance of {@link DefaultErrorStrategy}.
        self._errHandler = DefaultErrorStrategy()
        self._precedenceStack = list()
        self._precedenceStack.append(0)
        # The {@link ParserRuleContext} object for the currently executing rule.
        # self is always non-null during the parsing process.
        self._ctx = None
        # Specifies whether or not the parser should construct a parse tree during
        # the parsing process. The default value is {@code true}.
        self.buildParseTrees = True
        # When {@link #setTrace}{@code (true)} is called, a reference to the
        # {@link TraceListener} is stored here so it can be easily removed in a
        # later call to {@link #setTrace}{@code (false)}. The listener itself is
        # implemented as a parser listener so self field is not directly used by
        # other parser methods.
        self._tracer = None
        # The list of {@link ParseTreeListener} listeners registered to receive
        # events during the parse.
        self._parseListeners = None
        # The number of syntax errors reported during parsing. self value is
        # incremented each time {@link #notifyErrorListeners} is called.
        self._syntaxErrors = 0
        self.setInputStream(input)

    # reset the parser's state#
    def reset(self):
        if self._input is not None:
            self._input.seek(0)
        self._errHandler.reset(self)
        self._ctx = None
        self._syntaxErrors = 0
        self.setTrace(False)
        self._precedenceStack = list()
        self._precedenceStack.append(0)
        if self._interp is not None:
            self._interp.reset()

    # Match current input symbol against {@code ttype}. If the symbol type
    # matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are
    # called to complete the match process.
    #
    # <p>If the symbol type does not match,
    # {@link ANTLRErrorStrategy#recoverInline} is called on the current error
    # strategy to attempt recovery. If {@link #getBuildParseTree} is
    # {@code true} and the token index of the symbol returned by
    # {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
    # the parse tree by calling {@link ParserRuleContext#addErrorNode}.</p>
    #
    # @param ttype the token type to match
    # @return the matched symbol
    # @throws RecognitionException if the current input symbol did not match
    # {@code ttype} and the error strategy could not recover from the
    # mismatched symbol

    def match(self, ttype:int):
        t = self.getCurrentToken()
        if t.type==ttype:
            self._errHandler.reportMatch(self)
            self.consume()
        else:
            t = self._errHandler.recoverInline(self)
            if self.buildParseTrees and t.tokenIndex==-1:
                # we must have conjured up a new token during single token insertion
                # if it's not the current symbol
                self._ctx.addErrorNode(t)
        return t

    # Match current input symbol as a wildcard. If the symbol type matches
    # (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}
    # and {@link #consume} are called to complete the match process.
    #
    # <p>If the symbol type does not match,
    # {@link ANTLRErrorStrategy#recoverInline} is called on the current error
    # strategy to attempt recovery. If {@link #getBuildParseTree} is
    # {@code true} and the token index of the symbol returned by
    # {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
    # the parse tree by calling {@link ParserRuleContext#addErrorNode}.</p>
    #
    # @return the matched symbol
    # @throws RecognitionException if the current input symbol did not match
    # a wildcard and the error strategy could not recover from the mismatched
    # symbol

    def matchWildcard(self):
        t = self.getCurrentToken()
        if t.type > 0:
            self._errHandler.reportMatch(self)
            self.consume()
        else:
            t = self._errHandler.recoverInline(self)
            if self.buildParseTrees and t.tokenIndex == -1:
                # we must have conjured up a new token during single token insertion
                # if it's not the current symbol
                self._ctx.addErrorNode(t)

        return t

    def getParseListeners(self):
        return list() if self._parseListeners is None else self._parseListeners

    # Registers {@code listener} to receive events during the parsing process.
    #
    # <p>To support output-preserving grammar transformations (including but not
    # limited to left-recursion removal, automated left-factoring, and
    # optimized code generation), calls to listener methods during the parse
    # may differ substantially from calls made by
    # {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In
    # particular, rule entry and exit events may occur in a different order
    # during the parse than after the parser. In addition, calls to certain
    # rule entry methods may be omitted.</p>
    #
    # <p>With the following specific exceptions, calls to listener events are
    # <em>deterministic</em>, i.e. for identical input the calls to listener
    # methods will be the same.</p>
    #
    # <ul>
    # <li>Alterations to the grammar used to generate code may change the
    # behavior of the listener calls.</li>
    # <li>Alterations to the command line options passed to ANTLR 4 when
    # generating the parser may change the behavior of the listener calls.</li>
    # <li>Changing the version of the ANTLR Tool used to generate the parser
    # may change the behavior of the listener calls.</li>
    # </ul>
    #
    # @param listener the listener to add
    #
    # @throws NullPointerException if {@code} listener is {@code null}
    #
    def addParseListener(self, listener:ParseTreeListener):
        if listener is None:
            raise ReferenceError(""listener"")
        if self._parseListeners is None:
            self._parseListeners = []
        self._parseListeners.append(listener)

    #
    # Remove {@code listener} from the list of parse listeners.
    #
    # <p>If {@code listener} is {@code null} or has not been added as a parse
    # listener, self method does nothing.</p>
    # @param listener the listener to remove
    #
    def removeParseListener(self, listener:ParseTreeListener):
        if self._parseListeners is not None:
            self._parseListeners.remove(listener)
            if len(self._parseListeners)==0:
                    self._parseListeners = None

    # Remove all parse listeners.
    def removeParseListeners(self):
        self._parseListeners = None

    # Notify any parse listeners of an enter rule event.
    def triggerEnterRuleEvent(self):
        if self._parseListeners is not None:
            for listener in self._parseListeners:
                listener.enterEveryRule(self._ctx)
                self._ctx.enterRule(listener)

    #
    # Notify any parse listeners of an exit rule event.
    #
    # @see #addParseListener
    #
    def triggerExitRuleEvent(self):
        if self._parseListeners is not None:
            # reverse order walk of listeners
            for listener in reversed(self._parseListeners):
                self._ctx.exitRule(listener)
                listener.exitEveryRule(self._ctx)


    # Gets the number of syntax errors reported during parsing. This value is
    # incremented each time {@link #notifyErrorListeners} is called.
    #
    # @see #notifyErrorListeners
    #
    def getNumberOfSyntaxErrors(self):
        return self._syntaxErrors

    def getTokenFactory(self):
        return self._input.tokenSource._factory

    # Tell our token source and error strategy about a new way to create tokens.#
    def setTokenFactory(self, factory:TokenFactory):
        self._input.tokenSource._factory = factory

    # The ATN with bypass alternatives is expensive to create so we create it
    # lazily.
    #
    # @throws UnsupportedOperationException if the current parser does not
    # implement the {@link #getSerializedATN()} method.
    #
    def getATNWithBypassAlts(self):
        serializedAtn = self.getSerializedATN()
        if serializedAtn is None:
            raise UnsupportedOperationException(""The current parser does not support an ATN with bypass alternatives."")
        result = self.bypassAltsAtnCache.get(serializedAtn, None)
        if result is None:
            deserializationOptions = ATNDeserializationOptions()
            deserializationOptions.generateRuleBypassTransitions = True
            result = ATNDeserializer(deserializationOptions).deserialize(serializedAtn)
            self.bypassAltsAtnCache[serializedAtn] = result
        return result

    # The preferred method of getting a tree pattern. For example, here's a
    # sample use:
    #
    # <pre>
    # ParseTree t = parser.expr();
    # ParseTreePattern p = parser.compileParseTreePattern(""&lt;ID&gt;+0"", MyParser.RULE_expr);
    # ParseTreeMatch m = p.match(t);
    # String id = m.get(""ID"");
    # </pre>
    #
    def compileParseTreePattern(self, pattern:str, patternRuleIndex:int, lexer:Lexer = None):
        if lexer is None:
            if self.getTokenStream() is not None:
                tokenSource = self.getTokenStream().tokenSource
                if isinstance( tokenSource, Lexer ):
                    lexer = tokenSource
        if lexer is None:
            raise UnsupportedOperationException(""Parser can't discover a lexer to use"")

        m = ParseTreePatternMatcher(lexer, self)
        return m.compile(pattern, patternRuleIndex)


    def getInputStream(self):
        return self.getTokenStream()

    def setInputStream(self, input:InputStream):
        self.setTokenStream(input)

    def getTokenStream(self):
        return self._input

    # Set the token stream and reset the parser.#
    def setTokenStream(self, input:TokenStream):
        self._input = None
        self.reset()
        self._input = input

    # Match needs to return the current input symbol, which gets put
    #  into the label for the associated token ref; e.g., x=ID.
    #
    def getCurrentToken(self):
        return self._input.LT(1)

    def notifyErrorListeners(self, msg:str, offendingToken:Token = None, e:RecognitionException = None):
        if offendingToken is None:
            offendingToken = self.getCurrentToken()
        self._syntaxErrors += 1
        line = offendingToken.line
        column = offendingToken.column
        listener = self.getErrorListenerDispatch()
        listener.syntaxError(self, offendingToken, line, column, msg, e)

    #
    # Consume and return the {@linkplain #getCurrentToken current symbol}.
    #
    # <p>E.g., given the following input with {@code A} being the current
    # lookahead symbol, self function moves the cursor to {@code B} and returns
    # {@code A}.</p>
    #
    # <pre>
    #  A B
    #  ^
    # </pre>
    #
    # If the parser is not in error recovery mode, the consumed symbol is added
    # to the parse tree using {@link ParserRuleContext#addChild(Token)}, and
    # {@link ParseTreeListener#visitTerminal} is called on any parse listeners.
    # If the parser <em>is</em> in error recovery mode, the consumed symbol is
    # added to the parse tree using
    # {@link ParserRuleContext#addErrorNode(Token)}, and
    # {@link ParseTreeListener#visitErrorNode} is called on any parse
    # listeners.
    #
    def consume(self):
        o = self.getCurrentToken()
        if o.type != Token.EOF:
            self.getInputStream().consume()
        hasListener = self._parseListeners is not None and len(self._parseListeners)>0
        if self.buildParseTrees or hasListener:
            if self._errHandler.inErrorRecoveryMode(self):
                node = self._ctx.addErrorNode(o)
            else:
                node = self._ctx.addTokenNode(o)
            if hasListener:
                for listener in self._parseListeners:
                    if isinstance(node, ErrorNode):
                        listener.visitErrorNode(node)
                    elif isinstance(node, TerminalNode):
                        listener.visitTerminal(node)
        return o

    def addContextToParseTree(self):
        # add current context to parent if we have a parent
        if self._ctx.parentCtx is not None:
            self._ctx.parentCtx.addChild(self._ctx)

    # Always called by generated parsers upon entry to a rule. Access field
    # {@link #_ctx} get the current context.
    #
    def enterRule(self, localctx:ParserRuleContext , state:int , ruleIndex:int):
        self.state = state
        self._ctx = localctx
        self._ctx.start = self._input.LT(1)
        if self.buildParseTrees:
            self.addContextToParseTree()
        if self._parseListeners  is not None:
            self.triggerEnterRuleEvent()

    def exitRule(self):
        self._ctx.stop = self._input.LT(-1)
        # trigger event on _ctx, before it reverts to parent
        if self._parseListeners is not None:
            self.triggerExitRuleEvent()
        self.state = self._ctx.invokingState
        self._ctx = self._ctx.parentCtx

    def enterOuterAlt(self, localctx:ParserRuleContext, altNum:int):
        localctx.setAltNumber(altNum)
        # if we have new localctx, make sure we replace existing ctx
        # that is previous child of parse tree
        if self.buildParseTrees and self._ctx != localctx:
            if self._ctx.parentCtx is not None:
                self._ctx.parentCtx.removeLastChild()
                self._ctx.parentCtx.addChild(localctx)
        self._ctx = localctx

    # Get the precedence level for the top-most precedence rule.
    #
    # @return The precedence level for the top-most precedence rule, or -1 if
    # the parser context is not nested within a precedence rule.
    #
    def getPrecedence(self):
        if len(self._precedenceStack)==0:
            return -1
        else:
            return self._precedenceStack[-1]

    def enterRecursionRule(self, localctx:ParserRuleContext, state:int, ruleIndex:int, precedence:int):
        self.state = state
        self._precedenceStack.append(precedence)
        self._ctx = localctx
        self._ctx.start = self._input.LT(1)
        if self._parseListeners is not None:
            self.triggerEnterRuleEvent() # simulates rule entry for left-recursive rules

    #
    # Like {@link #enterRule} but for recursive rules.
    #
    def pushNewRecursionContext(self, localctx:ParserRuleContext, state:int, ruleIndex:int):
        previous = self._ctx
        previous.parentCtx = localctx
        previous.invokingState = state
        previous.stop = self._input.LT(-1)

        self._ctx = localctx
        self._ctx.start = previous.start
        if self.buildParseTrees:
            self._ctx.addChild(previous)

        if self._parseListeners is not None:
            self.triggerEnterRuleEvent() # simulates rule entry for left-recursive rules

    def unrollRecursionContexts(self, parentCtx:ParserRuleContext):
        self._precedenceStack.pop()
        self._ctx.stop = self._input.LT(-1)
        retCtx = self._ctx # save current ctx (return value)
        # unroll so _ctx is as it was before call to recursive method
        if self._parseListeners is not None:
            while self._ctx is not parentCtx:
                self.triggerExitRuleEvent()
                self._ctx = self._ctx.parentCtx
        else:
            self._ctx = parentCtx

        # hook into tree
        retCtx.parentCtx = parentCtx

        if self.buildParseTrees and parentCtx is not None:
            # add return ctx into invoking rule's tree
            parentCtx.addChild(retCtx)

    def getInvokingContext(self, ruleIndex:int):
        ctx = self._ctx
        while ctx is not None:
            if ctx.getRuleIndex() == ruleIndex:
                return ctx
            ctx = ctx.parentCtx
        return None


    def precpred(self, localctx:RuleContext , precedence:int):
        return precedence >= self._precedenceStack[-1]

    def inContext(self, context:str):
        # TODO: useful in parser?
        return False

    #
    # Checks whether or not {@code symbol} can follow the current state in the
    # ATN. The behavior of self method is equivalent to the following, but is
    # implemented such that the complete context-sensitive follow set does not
    # need to be explicitly constructed.
    #
    # <pre>
    # return getExpectedTokens().contains(symbol);
    # </pre>
    #
    # @param symbol the symbol type to check
    # @return {@code true} if {@code symbol} can follow the current state in
    # the ATN, otherwise {@code false}.
    #
    def isExpectedToken(self, symbol:int):
        atn = self._interp.atn
        ctx = self._ctx
        s = atn.states[self.state]
        following = atn.nextTokens(s)
        if symbol in following:
            return True
        if not Token.EPSILON in following:
            return False

        while ctx is not None and ctx.invokingState>=0 and Token.EPSILON in following:
            invokingState = atn.states[ctx.invokingState]
            rt = invokingState.transitions[0]
            following = atn.nextTokens(rt.followState)
            if symbol in following:
                return True
            ctx = ctx.parentCtx

        if Token.EPSILON in following and symbol == Token.EOF:
            return True
        else:
            return False

    # Computes the set of input symbols which could follow the current parser
    # state and context, as given by {@link #getState} and {@link #getContext},
    # respectively.
    #
    # @see ATN#getExpectedTokens(int, RuleContext)
    #
    def getExpectedTokens(self):
        return self._interp.atn.getExpectedTokens(self.state, self._ctx)

    def getExpectedTokensWithinCurrentRule(self):
        atn = self._interp.atn
        s = atn.states[self.state]
        return atn.nextTokens(s)

    # Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.#
    def getRuleIndex(self, ruleName:str):
        ruleIndex = self.getRuleIndexMap().get(ruleName, None)
        if ruleIndex is not None:
            return ruleIndex
        else:
            return -1

    # Return List&lt;String&gt; of the rule names in your parser instance
    #  leading up to a call to the current rule.  You could override if
    #  you want more details such as the file/line info of where
    #  in the ATN a rule is invoked.
    #
    #  this is very useful for error messages.
    #
    def getRuleInvocationStack(self, p:RuleContext=None):
        if p is None:
            p = self._ctx
        stack = list()
        while p is not None:
            # compute what follows who invoked us
            ruleIndex = p.getRuleIndex()
            if ruleIndex<0:
                stack.append(""n/a"")
            else:
                stack.append(self.ruleNames[ruleIndex])
            p = p.parentCtx
        return stack

    # For debugging and other purposes.#
    def getDFAStrings(self):
        return [ str(dfa) for dfa in self._interp.decisionToDFA]

    # For debugging and other purposes.#
    def dumpDFA(self):
        seenOne = False
        for i in range(0, len(self._interp.decisionToDFA)):
            dfa = self._interp.decisionToDFA[i]
            if len(dfa.states)>0:
                if seenOne:
                    print(file=self._output)
                print(""Decision "" + str(dfa.decision) + "":"", file=self._output)
                print(dfa.toString(self.literalNames, self.symbolicNames), end='', file=self._output)
                seenOne = True


    def getSourceName(self):
        return self._input.sourceName

    # During a parse is sometimes useful to listen in on the rule entry and exit
    #  events as well as token matches. self is for quick and dirty debugging.
    #
    def setTrace(self, trace:bool):
        if not trace:
            self.removeParseListener(self._tracer)
            self._tracer = None
        else:
            if self._tracer is not None:
                self.removeParseListener(self._tracer)
            self._tracer = TraceListener(self)
            self.addParseListener(self._tracer)",1,334 2000 40 2001 41 58 2002 61 648 348 2003 40 2004 44 2005 41 58 2004 46 2006 61 2005 348 2007 40 2004 44 2008 41 58 436 40 648 43 2004 46 2006 46 2009 91 2008 46 2010 40 41 93 43 648 43 2004 46 2006 46 2011 46 2012 40 1501 41 46 2013 44 2014 61 2004 46 2006 46 2015 41 348 2016 40 2004 44 2017 41 58 436 40 648 43 2018 40 2017 46 2019 41 43 648 43 2004 46 2006 46 2009 91 2004 46 2006 46 2020 46 2010 40 41 93 44 2014 61 2004 46 2006 46 2015 41 348 2021 40 2004 44 2017 41 58 434 348 2022 40 2004 44 2008 41 58 436 40 648 43 2004 46 2006 46 2009 91 2008 46 2010 40 41 93 43 648 43 2004 46 2006 46 2011 46 2012 40 1501 41 46 2013 44 2014 61 2004 46 2006 46 2015 41 621 334 2023 40 2024 41 58 2002 61 40 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 41 621 621 621 621 621 2025 61 2026 40 41 348 2003 40 2004 44 2027 58 2028 44 2029 58 2030 61 2031 46 2032 41 58 463 40 41 46 2003 40 41 621 2004 46 2011 61 303 2004 46 2015 61 2029 621 621 2004 46 2033 61 2034 40 41 2004 46 2035 61 411 40 41 2004 46 2035 46 2036 40 1500 41 621 621 2004 46 2020 61 303 621 621 2004 46 2037 61 304 621 621 621 621 621 2004 46 2038 61 303 621 621 2004 46 2039 61 303 621 621 2004 46 2040 61 1500 2004 46 2041 40 2027 41 621 348 2042 40 2004 41 58 392 2004 46 2011 407 422 303 58 2004 46 2011 46 2043 40 1500 41 2004 46 2033 46 2042 40 2004 41 2004 46 2020 61 303 2004 46 2040 61 1500 2004 46 2044 40 302 41 2004 46 2035 61 411 40 41 2004 46 2035 46 2036 40 1500 41 392 2004 46 2045 407 422 303 58 2004 46 2045 46 2042 40 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2046 40 2004 44 2047 58 404 41 58 2048 61 2004 46 2049 40 41 392 2048 46 2050 614 2047 58 2004 46 2033 46 2051 40 2004 41 2004 46 2052 40 41 360 58 2048 61 2004 46 2033 46 2053 40 2004 41 392 2004 46 2037 308 2048 46 2054 614 45 1501 58 621 621 2004 46 2020 46 2055 40 2048 41 450 2048 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2056 40 2004 41 58 2048 61 2004 46 2049 40 41 392 2048 46 2050 62 1500 58 2004 46 2033 46 2051 40 2004 41 2004 46 2052 40 41 360 58 2048 61 2004 46 2033 46 2053 40 2004 41 392 2004 46 2037 308 2048 46 2054 614 45 1501 58 621 621 2004 46 2020 46 2055 40 2048 41 450 2048 348 2057 40 2004 41 58 450 411 40 41 392 2004 46 2039 407 303 360 2004 46 2039 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2058 40 2004 44 2059 58 2001 41 58 392 2059 407 303 58 440 2060 40 648 41 392 2004 46 2039 407 303 58 2004 46 2039 61 91 93 2004 46 2039 46 2036 40 2059 41 621 621 621 621 621 621 621 348 2061 40 2004 44 2059 58 2001 41 58 392 2004 46 2039 407 422 303 58 2004 46 2039 46 2062 40 2059 41 392 2063 40 2004 46 2039 41 614 1500 58 2004 46 2039 61 303 621 348 2064 40 2004 41 58 2004 46 2039 61 303 621 348 2065 40 2004 41 58 392 2004 46 2039 407 422 303 58 385 2059 398 2004 46 2039 58 2059 46 2007 40 2004 46 2020 41 2004 46 2020 46 2066 40 2059 41 621 621 621 621 621 348 2067 40 2004 41 58 392 2004 46 2039 407 422 303 58 621 385 2059 398 2068 40 2004 46 2039 41 58 2004 46 2020 46 2069 40 2059 41 2059 46 2022 40 2004 46 2020 41 621 621 621 621 621 348 2070 40 2004 41 58 450 2004 46 2040 348 2071 40 2004 41 58 450 2004 46 2011 46 2072 46 2073 621 348 2074 40 2004 44 2075 58 2076 41 58 2004 46 2011 46 2072 46 2073 61 2075 621 621 621 621 621 621 348 2077 40 2004 41 58 2078 61 2004 46 2079 40 41 392 2078 407 303 58 440 2080 40 648 41 2081 61 2004 46 2025 46 2082 40 2078 44 303 41 392 2081 407 303 58 2083 61 2084 40 41 2083 46 2085 61 304 2081 61 2086 40 2083 41 46 2087 40 2078 41 2004 46 2025 91 2078 93 61 2081 450 2081 621 621 621 621 621 621 621 621 621 621 348 2088 40 2004 44 2089 58 2018 44 2090 58 404 44 2091 58 2092 61 303 41 58 392 2091 407 303 58 392 2004 46 2093 40 41 407 422 303 58 2072 61 2004 46 2093 40 41 46 2072 392 2094 40 2072 44 2092 41 58 2091 61 2072 392 2091 407 303 58 440 2080 40 648 41 2095 61 2096 40 2091 44 2004 41 450 2095 46 2097 40 2089 44 2090 41 348 2098 40 2004 41 58 450 2004 46 2093 40 41 348 2041 40 2004 44 2027 58 2099 41 58 2004 46 2100 40 2027 41 348 2093 40 2004 41 58 450 2004 46 2011 621 348 2100 40 2004 44 2027 58 2028 41 58 2004 46 2011 61 303 2004 46 2042 40 41 2004 46 2011 61 2027 621 621 621 348 2049 40 2004 41 58 450 2004 46 2011 46 2012 40 1501 41 348 2101 40 2004 44 2102 58 2018 44 2103 58 2104 61 303 44 2105 58 2106 61 303 41 58 392 2103 407 303 58 2103 61 2004 46 2049 40 41 2004 46 2040 636 1501 410 61 2103 46 410 2107 61 2103 46 2107 2059 61 2004 46 2108 40 41 2059 46 2109 40 2004 44 2103 44 410 44 2107 44 2102 44 2105 41 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2052 40 2004 41 58 2110 61 2004 46 2049 40 41 392 2110 46 2050 631 2104 46 2111 58 2004 46 2098 40 41 46 2052 40 41 2112 61 2004 46 2039 407 422 303 308 2063 40 2004 46 2039 41 62 1500 392 2004 46 2037 428 2112 58 392 2004 46 2033 46 2113 40 2004 41 58 2017 61 2004 46 2020 46 2055 40 2110 41 360 58 2017 61 2004 46 2020 46 2114 40 2110 41 392 2112 58 385 2059 398 2004 46 2039 58 392 2094 40 2017 44 2115 41 58 2059 46 2021 40 2017 41 359 2094 40 2017 44 2116 41 58 2059 46 2016 40 2017 41 450 2110 348 2117 40 2004 41 58 621 392 2004 46 2020 46 2118 407 422 303 58 2004 46 2020 46 2118 46 2119 40 2004 46 2020 41 621 621 621 348 2066 40 2004 44 2120 58 2121 44 2122 58 404 44 2123 58 404 41 58 2004 46 2122 61 2122 2004 46 2020 61 2120 2004 46 2020 46 2124 61 2004 46 2011 46 2012 40 1501 41 392 2004 46 2037 58 2004 46 2117 40 41 392 2004 46 2039 407 422 303 58 2004 46 2065 40 41 348 2069 40 2004 41 58 2004 46 2020 46 2125 61 2004 46 2011 46 2012 40 45 1501 41 621 392 2004 46 2039 407 422 303 58 2004 46 2067 40 41 2004 46 2122 61 2004 46 2020 46 2126 2004 46 2020 61 2004 46 2020 46 2118 348 2127 40 2004 44 2120 58 2121 44 2128 58 404 41 58 2120 46 2129 40 2128 41 621 621 392 2004 46 2037 308 2004 46 2020 631 2120 58 392 2004 46 2020 46 2118 407 422 303 58 2004 46 2020 46 2118 46 2130 40 41 2004 46 2020 46 2118 46 2119 40 2120 41 2004 46 2020 61 2120 621 621 621 621 621 348 2131 40 2004 41 58 392 2063 40 2004 46 2035 41 614 1500 58 450 45 1501 360 58 450 2004 46 2035 91 45 1501 93 348 2132 40 2004 44 2120 58 2121 44 2122 58 404 44 2123 58 404 44 2133 58 404 41 58 2004 46 2122 61 2122 2004 46 2035 46 2036 40 2133 41 2004 46 2020 61 2120 2004 46 2020 46 2124 61 2004 46 2011 46 2012 40 1501 41 392 2004 46 2039 407 422 303 58 2004 46 2065 40 41 621 621 621 621 348 2134 40 2004 44 2120 58 2121 44 2122 58 404 44 2123 58 404 41 58 2135 61 2004 46 2020 2135 46 2118 61 2120 2135 46 2126 61 2122 2135 46 2125 61 2004 46 2011 46 2012 40 45 1501 41 2004 46 2020 61 2120 2004 46 2020 46 2124 61 2135 46 2124 392 2004 46 2037 58 2004 46 2020 46 2119 40 2135 41 392 2004 46 2039 407 422 303 58 2004 46 2065 40 41 621 348 2136 40 2004 44 2118 58 2121 41 58 2004 46 2035 46 2137 40 41 2004 46 2020 46 2125 61 2004 46 2011 46 2012 40 45 1501 41 2138 61 2004 46 2020 621 621 392 2004 46 2039 407 422 303 58 496 2004 46 2020 407 422 2118 58 2004 46 2067 40 41 2004 46 2020 61 2004 46 2020 46 2118 360 58 2004 46 2020 61 2118 621 2138 46 2118 61 2118 392 2004 46 2037 308 2118 407 422 303 58 621 2118 46 2119 40 2138 41 348 2139 40 2004 44 2123 58 404 41 58 2008 61 2004 46 2020 496 2008 407 422 303 58 392 2008 46 2010 40 41 614 2123 58 450 2008 2008 61 2008 46 2118 450 303 348 2140 40 2004 44 2120 58 2141 44 2133 58 404 41 58 450 2133 615 2004 46 2035 91 45 1501 93 348 2142 40 2004 44 2143 58 2018 41 58 621 450 302 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2144 40 2004 44 2019 58 404 41 58 2145 61 2004 46 2045 46 2145 2008 61 2004 46 2020 2146 61 2145 46 2147 91 2004 46 2122 93 2148 61 2145 46 2149 40 2146 41 392 2019 398 2148 58 450 304 392 422 2104 46 2150 398 2148 58 450 302 496 2008 407 422 303 308 2008 46 2126 615 1500 308 2104 46 2150 398 2148 58 2126 61 2145 46 2147 91 2008 46 2126 93 2151 61 2126 46 2152 91 1500 93 2148 61 2145 46 2149 40 2151 46 2153 41 392 2019 398 2148 58 450 304 2008 61 2008 46 2118 392 2104 46 2150 398 2148 308 2019 614 2104 46 2111 58 450 304 360 58 450 302 621 621 621 621 621 621 348 2154 40 2004 41 58 450 2004 46 2045 46 2145 46 2154 40 2004 46 2122 44 2004 46 2020 41 348 2155 40 2004 41 58 2145 61 2004 46 2045 46 2145 2146 61 2145 46 2147 91 2004 46 2122 93 450 2145 46 2149 40 2146 41 621 348 2010 40 2004 44 2156 58 2018 41 58 2123 61 2004 46 2157 40 41 46 2082 40 2156 44 303 41 392 2123 407 422 303 58 450 2123 360 58 450 45 1501 621 621 621 621 621 621 621 348 2158 40 2004 44 2159 58 2141 61 303 41 58 392 2159 407 303 58 2159 61 2004 46 2020 2160 61 411 40 41 496 2159 407 422 303 58 621 2123 61 2159 46 2010 40 41 392 2123 60 1500 58 2160 46 2036 40 648 41 360 58 2160 46 2036 40 2004 46 2009 91 2123 93 41 2159 61 2159 46 2118 450 2160 621 348 2161 40 2004 41 58 450 91 2018 40 2162 41 385 2162 398 2004 46 2045 46 2163 93 621 348 2164 40 2004 41 58 2165 61 302 385 2166 398 2167 40 1500 44 2063 40 2004 46 2045 46 2163 41 41 58 2162 61 2004 46 2045 46 2163 91 2166 93 392 2063 40 2162 46 2147 41 62 1500 58 392 2165 58 436 40 2014 61 2004 46 2015 41 436 40 648 43 2018 40 2162 46 2168 41 43 648 44 2014 61 2004 46 2015 41 436 40 2162 46 2169 40 2004 46 2170 44 2004 46 2171 41 44 2172 61 648 44 2014 61 2004 46 2015 41 2165 61 304 348 2173 40 2004 41 58 450 2004 46 2011 46 2174 621 621 621 348 2044 40 2004 44 2175 58 323 41 58 392 422 2175 58 2004 46 2061 40 2004 46 2038 41 2004 46 2038 61 303 360 58 392 2004 46 2038 407 422 303 58 2004 46 2061 40 2004 46 2038 41 2004 46 2038 61 2000 40 2004 41 2004 46 2058 40 2004 46 2038 41 
128605,Python,"class TestTokenStreamRewriter(unittest.TestCase):
    def testInsertBeforeIndexZero(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)
        rewriter.insertBeforeIndex(0, '0')

        self.assertEqual(rewriter.getDefaultText(), '0abc')

    def testInsertAfterLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)
        rewriter.insertAfter(10, 'x')

        self.assertEqual(rewriter.getDefaultText(), 'abcx')

    def test2InsertBeforeAfterMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertAfter(1, 'x')

        self.assertEqual(rewriter.getDefaultText(), 'axbxc')

    def testReplaceIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(0, 'x')

        self.assertEqual(rewriter.getDefaultText(), 'xbc')

    def testReplaceLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'x')

        self.assertEqual(rewriter.getDefaultText(), 'abx')

    def testReplaceMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(1, 'x')

        self.assertEqual(rewriter.getDefaultText(), 'axc')

    def testToStringStartStop(self):
        input = InputStream('x = 3 * 0;')
        lexer = TestLexer2(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(4, 8, '0')

        self.assertEqual(rewriter.getDefaultText(), 'x = 0;')
        self.assertEqual(rewriter.getText('default', 0, 9), 'x = 0;')
        self.assertEqual(rewriter.getText('default', 4, 8), '0')

    def testToStringStartStop2(self):
        input = InputStream('x = 3 * 0 + 2 * 0;')
        lexer = TestLexer2(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        self.assertEqual('x = 3 * 0 + 2 * 0;', rewriter.getDefaultText())

        # replace 3 * 0 with 0
        rewriter.replaceRange(4, 8, '0')
        self.assertEqual('x = 0 + 2 * 0;', rewriter.getDefaultText())
        self.assertEqual('x = 0 + 2 * 0;', rewriter.getText('default', 0, 17))
        self.assertEqual('0', rewriter.getText('default', 4, 8))
        self.assertEqual('x = 0', rewriter.getText('default', 0, 8))
        self.assertEqual('2 * 0', rewriter.getText('default', 12, 16))

        rewriter.insertAfter(17, ""// comment"")
        self.assertEqual('2 * 0;// comment', rewriter.getText('default', 12, 18))

        self.assertEqual('x = 0', rewriter.getText('default', 0, 8))

    def test2ReplaceMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(1, 'x')
        rewriter.replaceIndex(1, 'y')

        self.assertEqual('ayc', rewriter.getDefaultText())

    def test2ReplaceMiddleIndex1InsertBefore(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, ""_"")
        rewriter.replaceIndex(1, 'x')
        rewriter.replaceIndex(1, 'y')

        self.assertEqual('_ayc', rewriter.getDefaultText())

    def test2InsertMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertBeforeIndex(1, 'y')

        self.assertEqual('ayxbc', rewriter.getDefaultText())

    def testReplaceThenDeleteMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 2, 'x')
        rewriter.insertBeforeIndex(1, '0')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        self.assertEqual(
            'insert op <InsertBeforeOp@[@1,1:1=\'b\',<2>,1:1]:""0""> within boundaries of previous <ReplaceOp@[@0,0:0=\'a\',<1>,1:0]..[@2,2:2=\'c\',<3>,1:2]:""x"">',
            str(ctx.exception)
        )

    def testInsertThenReplaceSameIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, '0')
        rewriter.replaceIndex(0, 'x')

        self.assertEqual('0xbc', rewriter.getDefaultText())

    def test2InsertThenReplaceIndex0(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, 'x')
        rewriter.insertBeforeIndex(0, 'y')
        rewriter.replaceIndex(0, 'z')

        self.assertEqual('yxzbc', rewriter.getDefaultText())

    def testReplaceThenInsertBeforeLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'x')
        rewriter.insertBeforeIndex(2, 'y')

        self.assertEqual('abyx', rewriter.getDefaultText())

    def testReplaceThenInsertAfterLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'x')
        rewriter.insertAfter(2, 'y')

        self.assertEqual('abxy', rewriter.getDefaultText())

    def testReplaceRangeThenInsertAtLeftEdge(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'x')
        rewriter.insertBeforeIndex(2, 'y')

        self.assertEqual('abyxba', rewriter.getDefaultText())

    def testReplaceRangeThenInsertAtRightEdge(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'x')
        rewriter.insertBeforeIndex(4, 'y')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        msg = str(ctx.exception)
        self.assertEqual(
            ""insert op <InsertBeforeOp@[@4,4:4='c',<3>,1:4]:\""y\""> within boundaries of previous <ReplaceOp@[@2,2:2='c',<3>,1:2]..[@4,4:4='c',<3>,1:4]:\""x\"">"",
            msg
        )

    def testReplaceRangeThenInsertAfterRightEdge(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'x')
        rewriter.insertAfter(4, 'y')

        self.assertEqual('abxyba', rewriter.getDefaultText())

    def testReplaceAll(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 6, 'x')

        self.assertEqual('x', rewriter.getDefaultText())

    def testReplaceSubsetThenFetch(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'xyz')

        self.assertEqual('abxyzba', rewriter.getDefaultText())

    def testReplaceThenReplaceSuperset(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'xyz')
        rewriter.replaceRange(3, 5, 'foo')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        msg = str(ctx.exception)
        self.assertEqual(
            """"""replace op boundaries of <ReplaceOp@[@3,3:3='c',<3>,1:3]..[@5,5:5='b',<2>,1:5]:""foo""> overlap with previous <ReplaceOp@[@2,2:2='c',<3>,1:2]..[@4,4:4='c',<3>,1:4]:""xyz"">"""""",
            msg
        )

    def testReplaceThenReplaceLowerIndexedSuperset(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'xyz')
        rewriter.replaceRange(1, 3, 'foo')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        msg = str(ctx.exception)
        self.assertEqual(
            """"""replace op boundaries of <ReplaceOp@[@1,1:1='b',<2>,1:1]..[@3,3:3='c',<3>,1:3]:""foo""> overlap with previous <ReplaceOp@[@2,2:2='c',<3>,1:2]..[@4,4:4='c',<3>,1:4]:""xyz"">"""""",
            msg
        )

    def testReplaceSingleMiddleThenOverlappingSuperset(self):
        input = InputStream('abcba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'xyz')
        rewriter.replaceRange(0, 3, 'foo')

        self.assertEqual('fooa', rewriter.getDefaultText())

    def testCombineInserts(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, 'x')
        rewriter.insertBeforeIndex(0, 'y')

        self.assertEqual('yxabc', rewriter.getDefaultText())

    def testCombine3Inserts(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertBeforeIndex(0, 'y')
        rewriter.insertBeforeIndex(1, 'z')

        self.assertEqual('yazxbc', rewriter.getDefaultText())

    def testCombineInsertOnLeftWithReplace(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 2, 'foo')
        rewriter.insertBeforeIndex(0, 'z')

        self.assertEqual('zfoo', rewriter.getDefaultText())

    def testCombineInsertOnLeftWithDelete(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.delete('default', 0, 2)
        rewriter.insertBeforeIndex(0, 'z')

        self.assertEqual('z', rewriter.getDefaultText())

    def testDisjointInserts(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertBeforeIndex(2, 'y')
        rewriter.insertBeforeIndex(0, 'z')

        self.assertEqual('zaxbyc', rewriter.getDefaultText())

    def testOverlappingReplace(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(0, 3, 'bar')

        self.assertEqual('bar', rewriter.getDefaultText())

    def testOverlappingReplace2(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 3, 'bar')
        rewriter.replaceRange(1, 2, 'foo')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()

        self.assertEqual(
            """"""replace op boundaries of <ReplaceOp@[@1,1:1='b',<2>,1:1]..[@2,2:2='c',<3>,1:2]:""foo""> overlap with previous <ReplaceOp@[@0,0:0='a',<1>,1:0]..[@3,3:2='<EOF>',<-1>,1:3]:""bar"">"""""",
            str(ctx.exception)
        )

    def testOverlappingReplace3(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(0, 2, 'bar')

        self.assertEqual('barc', rewriter.getDefaultText())

    def testOverlappingReplace4(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(1, 3, 'bar')

        self.assertEqual('abar', rewriter.getDefaultText())

    def testDropIdenticalReplace(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(1, 2, 'foo')

        self.assertEqual('afooc', rewriter.getDefaultText())

    def testDropPrevCoveredInsert(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'foo')
        rewriter.replaceRange(1, 2, 'foo')

        self.assertEqual('afoofoo', rewriter.getDefaultText())

    def testLeaveAloneDisjointInsert(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.replaceRange(2, 3, 'foo')

        self.assertEqual('axbfoo', rewriter.getDefaultText())

    def testLeaveAloneDisjointInsert2(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 3, 'foo')
        rewriter.insertBeforeIndex(1, 'x')

        self.assertEqual('axbfoo', rewriter.getDefaultText())

    def testInsertBeforeTokenThenDeleteThatToken(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'foo')
        rewriter.replaceRange(1, 2, 'foo')

        self.assertEqual('afoofoo', rewriter.getDefaultText())

    def testPreservesOrderOfContiguousInserts(self):
        """"""
        Test for fix for: https://github.com/antlr/antlr4/issues/550
        """"""
        input = InputStream('aa')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, '<b>')
        rewriter.insertAfter(0, '</b>')
        rewriter.insertBeforeIndex(1, '<b>')
        rewriter.insertAfter(1, '</b>')

        self.assertEqual('<b>a</b><b>a</b>', rewriter.getDefaultText())",1,334 2000 40 2001 46 2002 41 58 348 2003 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2018 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2019 40 1502 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2020 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2019 40 1501 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2021 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1500 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2023 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2024 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1501 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2025 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2026 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 2004 46 2016 40 2012 46 2028 40 648 44 1500 44 1502 41 44 648 41 2004 46 2016 40 2012 46 2028 40 648 44 1502 44 1502 41 44 648 41 348 2029 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2026 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 621 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1500 44 1503 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1502 44 1502 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1500 44 1502 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1503 44 1503 41 41 2012 46 2019 40 1503 44 648 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1503 44 1503 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1500 44 1502 41 41 348 2030 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1501 44 648 41 2012 46 2022 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2031 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2022 40 1501 44 648 41 2012 46 2022 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2032 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2015 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2033 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2012 46 2015 40 1501 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2004 46 2016 40 648 44 2037 40 2036 46 2038 41 41 348 2039 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2022 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2040 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2015 40 1500 44 648 41 2012 46 2022 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2041 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2012 46 2015 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2042 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2012 46 2019 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2043 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2015 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2044 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2015 40 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2045 61 2037 40 2036 46 2038 41 2004 46 2016 40 648 44 2045 41 348 2046 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2019 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2047 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2048 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2049 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2027 40 1502 44 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2045 61 2037 40 2036 46 2038 41 2004 46 2016 40 648 44 2045 41 348 2050 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2045 61 2037 40 2036 46 2038 41 2004 46 2016 40 648 44 2045 41 348 2051 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2052 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2053 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2015 40 1500 44 648 41 2012 46 2015 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2054 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2055 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 353 40 648 44 1500 44 1502 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2056 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2015 40 1502 44 648 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2057 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2058 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2004 46 2016 40 648 44 2037 40 2036 46 2038 41 41 348 2059 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2060 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2061 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2062 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2063 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2064 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2015 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2065 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2066 40 2004 41 58 648 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2019 40 1500 44 648 41 2012 46 2015 40 1501 44 648 41 2012 46 2019 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 
131033,Python,"class MigrationLoader:
    """"""
    Load migration files from disk and their status from the database.

    Migration files are expected to live in the ""migrations"" directory of
    an app. Their names are entirely unimportant from a code perspective,
    but will probably follow the 1234_name.py convention.

    On initialization, this class will scan those directories, and open and
    read the Python files, looking for a class called Migration, which should
    inherit from django.db.migrations.Migration. See
    django.db.migrations.migration for what that looks like.

    Some migrations will be marked as ""replacing"" another set of migrations.
    These are loaded into a separate set of migrations away from the main ones.
    If all the migrations they replace are either unapplied or missing from
    disk, then they are injected into the main set, replacing the named migrations.
    Any dependency pointers to the replaced migrations are re-pointed to the
    new migration.

    This does mean that this class MUST also talk to the database as well as
    to disk, but this is probably fine. We're already not just operating
    in memory.
    """"""

    def __init__(
        self, connection, load=True, ignore_no_migrations=False,
        replace_migrations=True,
    ):
        self.connection = connection
        self.disk_migrations = None
        self.applied_migrations = None
        self.ignore_no_migrations = ignore_no_migrations
        self.replace_migrations = replace_migrations
        if load:
            self.build_graph()

    @classmethod
    def migrations_module(cls, app_label):
        """"""
        Return the path to the migrations module for the specified app_label
        and a boolean indicating if the module is specified in
        settings.MIGRATION_MODULE.
        """"""
        if app_label in settings.MIGRATION_MODULES:
            return settings.MIGRATION_MODULES[app_label], True
        else:
            app_package_name = apps.get_app_config(app_label).name
            return '%s.%s' % (app_package_name, MIGRATIONS_MODULE_NAME), False

    def load_disk(self):
        """"""Load the migrations from all INSTALLED_APPS from disk.""""""
        self.disk_migrations = {}
        self.unmigrated_apps = set()
        self.migrated_apps = set()
        for app_config in apps.get_app_configs():
            # Get the migrations module directory
            module_name, explicit = self.migrations_module(app_config.label)
            if module_name is None:
                self.unmigrated_apps.add(app_config.label)
                continue
            was_loaded = module_name in sys.modules
            try:
                module = import_module(module_name)
            except ModuleNotFoundError as e:
                if (
                    (explicit and self.ignore_no_migrations) or
                    (not explicit and MIGRATIONS_MODULE_NAME in e.name.split('.'))
                ):
                    self.unmigrated_apps.add(app_config.label)
                    continue
                raise
            else:
                # Module is not a package (e.g. migrations.py).
                if not hasattr(module, '__path__'):
                    self.unmigrated_apps.add(app_config.label)
                    continue
                # Empty directories are namespaces. Namespace packages have no
                # __file__ and don't use a list for __path__. See
                # https://docs.python.org/3/reference/import.html#namespace-packages
                if (
                    getattr(module, '__file__', None) is None and
                    not isinstance(module.__path__, list)
                ):
                    self.unmigrated_apps.add(app_config.label)
                    continue
                # Force a reload if it's already loaded (tests need this)
                if was_loaded:
                    reload(module)
            self.migrated_apps.add(app_config.label)
            migration_names = {
                name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
                if not is_pkg and name[0] not in '_~'
            }
            # Load migrations
            for migration_name in migration_names:
                migration_path = '%s.%s' % (module_name, migration_name)
                try:
                    migration_module = import_module(migration_path)
                except ImportError as e:
                    if 'bad magic number' in str(e):
                        raise ImportError(
                            ""Couldn't import %r as it appears to be a stale ""
                            "".pyc file."" % migration_path
                        ) from e
                    else:
                        raise
                if not hasattr(migration_module, ""Migration""):
                    raise BadMigrationError(
                        ""Migration %s in app %s has no Migration class"" % (migration_name, app_config.label)
                    )
                self.disk_migrations[app_config.label, migration_name] = migration_module.Migration(
                    migration_name,
                    app_config.label,
                )

    def get_migration(self, app_label, name_prefix):
        """"""Return the named migration or raise NodeNotFoundError.""""""
        return self.graph.nodes[app_label, name_prefix]

    def get_migration_by_prefix(self, app_label, name_prefix):
        """"""
        Return the migration(s) which match the given app label and name_prefix.
        """"""
        # Do the search
        results = []
        for migration_app_label, migration_name in self.disk_migrations:
            if migration_app_label == app_label and migration_name.startswith(name_prefix):
                results.append((migration_app_label, migration_name))
        if len(results) > 1:
            raise AmbiguityError(
                ""There is more than one migration for '%s' with the prefix '%s'"" % (app_label, name_prefix)
            )
        elif not results:
            raise KeyError(
                f""There is no migration for '{app_label}' with the prefix ""
                f""'{name_prefix}'""
            )
        else:
            return self.disk_migrations[results[0]]

    def check_key(self, key, current_app):
        if (key[1] != ""__first__"" and key[1] != ""__latest__"") or key in self.graph:
            return key
        # Special-case __first__, which means ""the first migration"" for
        # migrated apps, and is ignored for unmigrated apps. It allows
        # makemigrations to declare dependencies on apps before they even have
        # migrations.
        if key[0] == current_app:
            # Ignore __first__ references to the same app (#22325)
            return
        if key[0] in self.unmigrated_apps:
            # This app isn't migrated, but something depends on it.
            # The models will get auto-added into the state, though
            # so we're fine.
            return
        if key[0] in self.migrated_apps:
            try:
                if key[1] == ""__first__"":
                    return self.graph.root_nodes(key[0])[0]
                else:  # ""__latest__""
                    return self.graph.leaf_nodes(key[0])[0]
            except IndexError:
                if self.ignore_no_migrations:
                    return None
                else:
                    raise ValueError(""Dependency on app with no migrations: %s"" % key[0])
        raise ValueError(""Dependency on unknown app: %s"" % key[0])

    def add_internal_dependencies(self, key, migration):
        """"""
        Internal dependencies need to be added first to ensure `__first__`
        dependencies find the correct root node.
        """"""
        for parent in migration.dependencies:
            # Ignore __first__ references to the same app.
            if parent[0] == key[0] and parent[1] != '__first__':
                self.graph.add_dependency(migration, key, parent, skip_validation=True)

    def add_external_dependencies(self, key, migration):
        for parent in migration.dependencies:
            # Skip internal dependencies
            if key[0] == parent[0]:
                continue
            parent = self.check_key(parent, key[0])
            if parent is not None:
                self.graph.add_dependency(migration, key, parent, skip_validation=True)
        for child in migration.run_before:
            child = self.check_key(child, key[0])
            if child is not None:
                self.graph.add_dependency(migration, child, key, skip_validation=True)

    def build_graph(self):
        """"""
        Build a migration dependency graph using both the disk and database.
        You'll need to rebuild the graph if you apply migrations. This isn't
        usually a problem as generally migration stuff runs in a one-shot process.
        """"""
        # Load disk data
        self.load_disk()
        # Load database data
        if self.connection is None:
            self.applied_migrations = {}
        else:
            recorder = MigrationRecorder(self.connection)
            self.applied_migrations = recorder.applied_migrations()
        # To start, populate the migration graph with nodes for ALL migrations
        # and their dependencies. Also make note of replacing migrations at this step.
        self.graph = MigrationGraph()
        self.replacements = {}
        for key, migration in self.disk_migrations.items():
            self.graph.add_node(key, migration)
            # Replacing migrations.
            if migration.replaces:
                self.replacements[key] = migration
        for key, migration in self.disk_migrations.items():
            # Internal (same app) dependencies.
            self.add_internal_dependencies(key, migration)
        # Add external dependencies now that the internal ones have been resolved.
        for key, migration in self.disk_migrations.items():
            self.add_external_dependencies(key, migration)
        # Carry out replacements where possible and if enabled.
        if self.replace_migrations:
            for key, migration in self.replacements.items():
                # Get applied status of each of this migration's replacement
                # targets.
                applied_statuses = [(target in self.applied_migrations) for target in migration.replaces]
                # The replacing migration is only marked as applied if all of
                # its replacement targets are.
                if all(applied_statuses):
                    self.applied_migrations[key] = migration
                else:
                    self.applied_migrations.pop(key, None)
                # A replacing migration can be used if either all or none of
                # its replacement targets have been applied.
                if all(applied_statuses) or (not any(applied_statuses)):
                    self.graph.remove_replaced_nodes(key, migration.replaces)
                else:
                    # This replacing migration cannot be used because it is
                    # partially applied. Remove it from the graph and remap
                    # dependencies to it (#25945).
                    self.graph.remove_replacement_node(key, migration.replaces)
        # Ensure the graph is consistent.
        try:
            self.graph.validate_consistency()
        except NodeNotFoundError as exc:
            # Check if the missing node could have been replaced by any squash
            # migration but wasn't because the squash migration was partially
            # applied before. In that case raise a more understandable exception
            # (#23556).
            # Get reverse replacements.
            reverse_replacements = {}
            for key, migration in self.replacements.items():
                for replaced in migration.replaces:
                    reverse_replacements.setdefault(replaced, set()).add(key)
            # Try to reraise exception with more detail.
            if exc.node in reverse_replacements:
                candidates = reverse_replacements.get(exc.node, set())
                is_replaced = any(candidate in self.graph.nodes for candidate in candidates)
                if not is_replaced:
                    tries = ', '.join('%s.%s' % c for c in candidates)
                    raise NodeNotFoundError(
                        ""Migration {0} depends on nonexistent node ('{1}', '{2}'). ""
                        ""Django tried to replace migration {1}.{2} with any of [{3}] ""
                        ""but wasn't able to because some of the replaced migrations ""
                        ""are already applied."".format(
                            exc.origin, exc.node[0], exc.node[1], tries
                        ),
                        exc.node
                    ) from exc
            raise
        self.graph.ensure_not_cyclic()

    def check_consistent_history(self, connection):
        """"""
        Raise InconsistentMigrationHistory if any applied migrations have
        unapplied dependencies.
        """"""
        recorder = MigrationRecorder(connection)
        applied = recorder.applied_migrations()
        for migration in applied:
            # If the migration is unknown, skip it.
            if migration not in self.graph.nodes:
                continue
            for parent in self.graph.node_map[migration].parents:
                if parent not in applied:
                    # Skip unapplied squashed migrations that have all of their
                    # `replaces` applied.
                    if parent in self.replacements:
                        if all(m in applied for m in self.replacements[parent].replaces):
                            continue
                    raise InconsistentMigrationHistory(
                        ""Migration {}.{} is applied before its dependency ""
                        ""{}.{} on database '{}'."".format(
                            migration[0], migration[1], parent[0], parent[1],
                            connection.alias,
                        )
                    )

    def detect_conflicts(self):
        """"""
        Look through the loaded graph and detect any conflicts - apps
        with more than one leaf migration. Return a dict of the app labels
        that conflict with the migration names that conflict.
        """"""
        seen_apps = {}
        conflicting_apps = set()
        for app_label, migration_name in self.graph.leaf_nodes():
            if app_label in seen_apps:
                conflicting_apps.add(app_label)
            seen_apps.setdefault(app_label, set()).add(migration_name)
        return {app_label: sorted(seen_apps[app_label]) for app_label in conflicting_apps}

    def project_state(self, nodes=None, at_end=True):
        """"""
        Return a ProjectState object representing the most recent state
        that the loaded migrations represent.

        See graph.make_state() for the meaning of ""nodes"" and ""at_end"".
        """"""
        return self.graph.make_state(nodes=nodes, at_end=at_end, real_apps=self.unmigrated_apps)

    def collect_sql(self, plan):
        """"""
        Take a migration plan and return a list of collected SQL statements
        that represent the best-efforts version of that plan.
        """"""
        statements = []
        state = None
        for migration, backwards in plan:
            with self.connection.schema_editor(collect_sql=True, atomic=migration.atomic) as schema_editor:
                if state is None:
                    state = self.project_state((migration.app_label, migration.name), at_end=False)
                if not backwards:
                    state = migration.apply(state, schema_editor, collect_sql=True)
                else:
                    state = migration.unapply(state, schema_editor, collect_sql=True)
            statements.extend(schema_editor.collected_sql)
        return statements",1,334 2000 58 648 348 2001 40 2002 44 2003 44 2004 61 304 44 2005 61 302 44 2006 61 304 44 41 58 2002 46 2003 61 2003 2002 46 2007 61 303 2002 46 2008 61 303 2002 46 2005 61 2005 2002 46 2006 61 2006 392 2004 58 2002 46 2009 40 41 64 2010 348 2011 40 2012 44 2013 41 58 648 392 2013 398 2014 46 2015 58 450 2014 46 2015 91 2013 93 44 304 360 58 2016 61 2017 46 2018 40 2013 41 46 2019 450 648 37 40 2016 44 2020 41 44 302 348 2021 40 2002 41 58 648 2002 46 2007 61 123 125 2002 46 2022 61 2023 40 41 2002 46 2024 61 2023 40 41 385 2025 398 2017 46 2026 40 41 58 621 2027 44 376 61 2002 46 2011 40 2025 46 2028 41 392 2027 407 303 58 2002 46 2022 46 2029 40 2025 46 2028 41 344 2030 61 2027 398 2031 46 2032 474 58 414 61 2033 40 2027 41 374 2034 311 2035 58 392 40 40 376 308 2002 46 2005 41 428 40 422 376 308 2020 398 2035 46 2019 46 2036 40 648 41 41 41 58 2002 46 2022 46 2029 40 2025 46 2028 41 344 440 360 58 621 392 422 2037 40 414 44 648 41 58 2002 46 2022 46 2029 40 2025 46 2028 41 344 621 621 621 392 40 2038 40 414 44 648 44 303 41 407 303 308 422 2039 40 414 46 2040 44 411 41 41 58 2002 46 2022 46 2029 40 2025 46 2028 41 344 621 392 2030 58 2041 40 414 41 2002 46 2024 46 2029 40 2025 46 2028 41 2042 61 123 2019 385 2043 44 2019 44 2044 398 2045 46 2046 40 414 46 2040 41 392 422 2044 308 2019 91 1500 93 422 398 648 125 621 385 2047 398 2042 58 2048 61 648 37 40 2027 44 2047 41 474 58 2049 61 2033 40 2048 41 374 2050 311 2035 58 392 648 398 2051 40 2035 41 58 440 2050 40 648 648 37 2048 41 388 2035 360 58 440 392 422 2037 40 2049 44 648 41 58 440 2052 40 648 37 40 2047 44 2025 46 2028 41 41 2002 46 2007 91 2025 46 2028 44 2047 93 61 2049 46 2053 40 2047 44 2025 46 2028 44 41 348 2054 40 2002 44 2013 44 2055 41 58 648 450 2002 46 2056 46 2057 91 2013 44 2055 93 348 2058 40 2002 44 2013 44 2055 41 58 648 621 2059 61 91 93 385 2060 44 2047 398 2002 46 2007 58 392 2060 614 2013 308 2047 46 2061 40 2055 41 58 2059 46 2062 40 40 2060 44 2047 41 41 392 2063 40 2059 41 62 1501 58 440 2064 40 648 37 40 2013 44 2055 41 41 359 422 2059 58 440 2065 40 648 648 41 360 58 450 2002 46 2007 91 2059 91 1500 93 93 348 2066 40 2002 44 2067 44 2068 41 58 392 40 2067 91 1501 93 631 648 308 2067 91 1501 93 631 648 41 428 2067 398 2002 46 2056 58 450 2067 621 621 621 621 392 2067 91 1500 93 614 2068 58 621 450 392 2067 91 1500 93 398 2002 46 2022 58 621 621 621 450 392 2067 91 1500 93 398 2002 46 2024 58 474 58 392 2067 91 1501 93 614 648 58 450 2002 46 2056 46 2069 40 2067 91 1500 93 41 91 1500 93 360 58 621 450 2002 46 2056 46 2070 40 2067 91 1500 93 41 91 1500 93 374 2071 58 392 2002 46 2005 58 450 303 360 58 440 2072 40 648 37 2067 91 1500 93 41 440 2072 40 648 37 2067 91 1500 93 41 348 2073 40 2002 44 2067 44 2074 41 58 648 385 2075 398 2074 46 2076 58 621 392 2075 91 1500 93 614 2067 91 1500 93 308 2075 91 1501 93 631 648 58 2002 46 2056 46 2077 40 2074 44 2067 44 2075 44 2078 61 304 41 348 2079 40 2002 44 2067 44 2074 41 58 385 2075 398 2074 46 2076 58 621 392 2067 91 1500 93 614 2075 91 1500 93 58 344 2075 61 2002 46 2066 40 2075 44 2067 91 1500 93 41 392 2075 407 422 303 58 2002 46 2056 46 2077 40 2074 44 2067 44 2075 44 2078 61 304 41 385 2080 398 2074 46 2081 58 2080 61 2002 46 2066 40 2080 44 2067 91 1500 93 41 392 2080 407 422 303 58 2002 46 2056 46 2077 40 2074 44 2080 44 2067 44 2078 61 304 41 348 2009 40 2002 41 58 648 621 2002 46 2021 40 41 621 392 2002 46 2003 407 303 58 2002 46 2008 61 123 125 360 58 2082 61 2083 40 2002 46 2003 41 2002 46 2008 61 2082 46 2008 40 41 621 621 2002 46 2056 61 2084 40 41 2002 46 2085 61 123 125 385 2067 44 2074 398 2002 46 2007 46 2086 40 41 58 2002 46 2056 46 2087 40 2067 44 2074 41 621 392 2074 46 2088 58 2002 46 2085 91 2067 93 61 2074 385 2067 44 2074 398 2002 46 2007 46 2086 40 41 58 621 2002 46 2073 40 2067 44 2074 41 621 385 2067 44 2074 398 2002 46 2007 46 2086 40 41 58 2002 46 2079 40 2067 44 2074 41 621 392 2002 46 2006 58 385 2067 44 2074 398 2002 46 2085 46 2086 40 41 58 621 621 2089 61 91 40 2090 398 2002 46 2008 41 385 2090 398 2074 46 2088 93 621 621 392 2091 40 2089 41 58 2002 46 2008 91 2067 93 61 2074 360 58 2002 46 2008 46 2092 40 2067 44 303 41 621 621 392 2091 40 2089 41 428 40 422 2093 40 2089 41 41 58 2002 46 2056 46 2094 40 2067 44 2074 46 2088 41 360 58 621 621 621 2002 46 2056 46 2095 40 2067 44 2074 46 2088 41 621 474 58 2002 46 2056 46 2096 40 41 374 2097 311 2098 58 621 621 621 621 621 2099 61 123 125 385 2067 44 2074 398 2002 46 2085 46 2086 40 41 58 385 2100 398 2074 46 2088 58 2099 46 2101 40 2100 44 2023 40 41 41 46 2029 40 2067 41 621 392 2098 46 2102 398 2099 58 2103 61 2099 46 2104 40 2098 46 2102 44 2023 40 41 41 2105 61 2093 40 2106 398 2002 46 2056 46 2057 385 2106 398 2103 41 392 422 2105 58 2107 61 648 46 2108 40 648 37 2109 385 2109 398 2103 41 440 2097 40 648 648 648 648 46 2110 40 2098 46 2111 44 2098 46 2102 91 1500 93 44 2098 46 2102 91 1501 93 44 2107 41 44 2098 46 2102 41 388 2098 440 2002 46 2056 46 2112 40 41 348 2113 40 2002 44 2003 41 58 648 2082 61 2083 40 2003 41 2114 61 2082 46 2008 40 41 385 2074 398 2114 58 621 392 2074 422 398 2002 46 2056 46 2057 58 344 385 2075 398 2002 46 2056 46 2115 91 2074 93 46 2116 58 392 2075 422 398 2114 58 621 621 392 2075 398 2002 46 2085 58 392 2091 40 2117 398 2114 385 2117 398 2002 46 2085 91 2075 93 46 2088 41 58 344 440 2118 40 648 648 46 2110 40 2074 91 1500 93 44 2074 91 1501 93 44 2075 91 1500 93 44 2075 91 1501 93 44 2003 46 2119 44 41 41 348 2120 40 2002 41 58 648 2121 61 123 125 2122 61 2023 40 41 385 2013 44 2047 398 2002 46 2056 46 2070 40 41 58 392 2013 398 2121 58 2122 46 2029 40 2013 41 2121 46 2101 40 2013 44 2023 40 41 41 46 2029 40 2047 41 450 123 2013 58 2123 40 2121 91 2013 93 41 385 2013 398 2122 125 348 2124 40 2002 44 2057 61 303 44 2125 61 304 41 58 648 450 2002 46 2056 46 2126 40 2057 61 2057 44 2125 61 2125 44 2127 61 2002 46 2022 41 348 2128 40 2002 44 2129 41 58 648 2130 61 91 93 2131 61 303 385 2074 44 2132 398 2129 58 497 2002 46 2003 46 2133 40 2128 61 304 44 2134 61 2074 46 2134 41 311 2133 58 392 2131 407 303 58 2131 61 2002 46 2124 40 40 2074 46 2013 44 2074 46 2019 41 44 2125 61 302 41 392 422 2132 58 2131 61 2074 46 2135 40 2131 44 2133 44 2128 61 304 41 360 58 2131 61 2074 46 2136 40 2131 44 2133 44 2128 61 304 41 2130 46 2137 40 2133 46 2138 41 450 2130 
134341,Python,"class ManyToOneTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        # Create a few Reporters.
        cls.r = Reporter(first_name='John', last_name='Smith', email='john@example.com')
        cls.r.save()
        cls.r2 = Reporter(first_name='Paul', last_name='Jones', email='paul@example.com')
        cls.r2.save()
        # Create an Article.
        cls.a = Article(headline='This is a test', pub_date=datetime.date(2005, 7, 27), reporter=cls.r)
        cls.a.save()

    def test_get(self):
        # Article objects have access to their related Reporter objects.
        r = self.a.reporter
        self.assertEqual(r.id, self.r.id)
        self.assertEqual((r.first_name, self.r.last_name), ('John', 'Smith'))

    def test_create(self):
        # You can also instantiate an Article by passing the Reporter's ID
        # instead of a Reporter object.
        a3 = Article(headline=""Third article"", pub_date=datetime.date(2005, 7, 27), reporter_id=self.r.id)
        a3.save()
        self.assertEqual(a3.reporter.id, self.r.id)

        # Similarly, the reporter ID can be a string.
        a4 = Article(headline=""Fourth article"", pub_date=datetime.date(2005, 7, 27), reporter_id=str(self.r.id))
        a4.save()
        self.assertEqual(repr(a4.reporter), ""<Reporter: John Smith>"")

    def test_add(self):
        # Create an Article via the Reporter object.
        new_article = self.r.article_set.create(headline=""John's second story"", pub_date=datetime.date(2005, 7, 29))
        self.assertEqual(repr(new_article), ""<Article: John's second story>"")
        self.assertEqual(new_article.reporter.id, self.r.id)

        # Create a new article, and add it to the article set.
        new_article2 = Article(headline=""Paul's story"", pub_date=datetime.date(2006, 1, 17))
        msg = ""<Article: Paul's story> instance isn't saved. Use bulk=False or save the object first.""
        with self.assertRaisesMessage(ValueError, msg):
            self.r.article_set.add(new_article2)

        self.r.article_set.add(new_article2, bulk=False)
        self.assertEqual(new_article2.reporter.id, self.r.id)
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article, new_article2, self.a],
        )

        # Add the same article to a different article set - check that it moves.
        self.r2.article_set.add(new_article2)
        self.assertEqual(new_article2.reporter.id, self.r2.id)
        self.assertSequenceEqual(self.r2.article_set.all(), [new_article2])

        # Adding an object of the wrong type raises TypeError.
        with transaction.atomic():
            with self.assertRaisesMessage(TypeError, ""'Article' instance expected, got <Reporter:""):
                self.r.article_set.add(self.r2)
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article, self.a],
        )

    def test_set(self):
        new_article = self.r.article_set.create(headline=""John's second story"", pub_date=datetime.date(2005, 7, 29))
        new_article2 = self.r2.article_set.create(headline=""Paul's story"", pub_date=datetime.date(2006, 1, 17))

        # Assign the article to the reporter.
        new_article2.reporter = self.r
        new_article2.save()
        self.assertEqual(repr(new_article2.reporter), ""<Reporter: John Smith>"")
        self.assertEqual(new_article2.reporter.id, self.r.id)
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article, new_article2, self.a],
        )
        self.assertSequenceEqual(self.r2.article_set.all(), [])

        # Set the article back again.
        self.r2.article_set.set([new_article, new_article2])
        self.assertSequenceEqual(self.r.article_set.all(), [self.a])
        self.assertSequenceEqual(
            self.r2.article_set.all(),
            [new_article, new_article2],
        )

        # Funny case - because the ForeignKey cannot be null,
        # existing members of the set must remain.
        self.r.article_set.set([new_article])
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article, self.a],
        )
        self.assertSequenceEqual(self.r2.article_set.all(), [new_article2])

    def test_reverse_assignment_deprecation(self):
        msg = (
            ""Direct assignment to the reverse side of a related set is ""
            ""prohibited. Use article_set.set() instead.""
        )
        with self.assertRaisesMessage(TypeError, msg):
            self.r2.article_set = []

    def test_assign(self):
        new_article = self.r.article_set.create(headline=""John's second story"", pub_date=datetime.date(2005, 7, 29))
        new_article2 = self.r2.article_set.create(headline=""Paul's story"", pub_date=datetime.date(2006, 1, 17))

        # Assign the article to the reporter directly using the descriptor.
        new_article2.reporter = self.r
        new_article2.save()
        self.assertEqual(repr(new_article2.reporter), ""<Reporter: John Smith>"")
        self.assertEqual(new_article2.reporter.id, self.r.id)
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article, new_article2, self.a],
        )
        self.assertSequenceEqual(self.r2.article_set.all(), [])

        # Set the article back again using set() method.
        self.r2.article_set.set([new_article, new_article2])
        self.assertSequenceEqual(self.r.article_set.all(), [self.a])
        self.assertSequenceEqual(
            self.r2.article_set.all(),
            [new_article, new_article2],
        )

        # Because the ForeignKey cannot be null, existing members of the set
        # must remain.
        self.r.article_set.set([new_article])
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article, self.a],
        )
        self.assertSequenceEqual(self.r2.article_set.all(), [new_article2])
        # Reporter cannot be null - there should not be a clear or remove method
        self.assertFalse(hasattr(self.r2.article_set, 'remove'))
        self.assertFalse(hasattr(self.r2.article_set, 'clear'))

    def test_assign_fk_id_value(self):
        parent = Parent.objects.create(name='jeff')
        child1 = Child.objects.create(name='frank', parent=parent)
        child2 = Child.objects.create(name='randy', parent=parent)
        parent.bestchild = child1
        parent.save()
        parent.bestchild_id = child2.pk
        parent.save()
        self.assertEqual(parent.bestchild_id, child2.pk)
        self.assertFalse(Parent.bestchild.is_cached(parent))
        self.assertEqual(parent.bestchild, child2)
        self.assertTrue(Parent.bestchild.is_cached(parent))
        # Reassigning the same value doesn't clear cached instance.
        parent.bestchild_id = child2.pk
        self.assertTrue(Parent.bestchild.is_cached(parent))

    def test_assign_fk_id_none(self):
        parent = Parent.objects.create(name='jeff')
        child = Child.objects.create(name='frank', parent=parent)
        parent.bestchild = child
        parent.save()
        parent.bestchild_id = None
        parent.save()
        self.assertIsNone(parent.bestchild_id)
        self.assertFalse(Parent.bestchild.is_cached(parent))
        self.assertIsNone(parent.bestchild)
        self.assertTrue(Parent.bestchild.is_cached(parent))

    def test_selects(self):
        new_article1 = self.r.article_set.create(
            headline=""John's second story"",
            pub_date=datetime.date(2005, 7, 29),
        )
        new_article2 = self.r2.article_set.create(
            headline=""Paul's story"",
            pub_date=datetime.date(2006, 1, 17),
        )
        # Reporter objects have access to their related Article objects.
        self.assertSequenceEqual(
            self.r.article_set.all(),
            [new_article1, self.a],
        )
        self.assertSequenceEqual(self.r.article_set.filter(headline__startswith='This'), [self.a])
        self.assertEqual(self.r.article_set.count(), 2)
        self.assertEqual(self.r2.article_set.count(), 1)
        # Get articles by id
        self.assertSequenceEqual(Article.objects.filter(id__exact=self.a.id), [self.a])
        self.assertSequenceEqual(Article.objects.filter(pk=self.a.id), [self.a])
        # Query on an article property
        self.assertSequenceEqual(Article.objects.filter(headline__startswith='This'), [self.a])
        # The API automatically follows relationships as far as you need.
        # Use double underscores to separate relationships.
        # This works as many levels deep as you want. There's no limit.
        # Find all Articles for any Reporter whose first name is ""John"".
        self.assertSequenceEqual(
            Article.objects.filter(reporter__first_name__exact='John'),
            [new_article1, self.a],
        )
        # Implied __exact also works
        self.assertSequenceEqual(
            Article.objects.filter(reporter__first_name='John'),
            [new_article1, self.a],
        )
        # Query twice over the related field.
        self.assertSequenceEqual(
            Article.objects.filter(reporter__first_name__exact='John', reporter__last_name__exact='Smith'),
            [new_article1, self.a],
        )
        # The underlying query only makes one join when a related table is referenced twice.
        queryset = Article.objects.filter(reporter__first_name__exact='John', reporter__last_name__exact='Smith')
        self.assertNumQueries(1, list, queryset)
        self.assertEqual(queryset.query.get_compiler(queryset.db).as_sql()[0].count('INNER JOIN'), 1)

        # The automatically joined table has a predictable name.
        self.assertSequenceEqual(
            Article.objects.filter(reporter__first_name__exact='John').extra(
                where=[""many_to_one_reporter.last_name='Smith'""]),
            [new_article1, self.a],
        )
        # ... and should work fine with the string that comes out of forms.Form.cleaned_data
        self.assertQuerysetEqual(
            (Article.objects
                .filter(reporter__first_name__exact='John')
                .extra(where=[""many_to_one_reporter.last_name='%s'"" % 'Smith'])),
            [new_article1, self.a]
        )
        # Find all Articles for a Reporter.
        # Use direct ID check, pk check, and object comparison
        self.assertSequenceEqual(
            Article.objects.filter(reporter__id__exact=self.r.id),
            [new_article1, self.a],
        )
        self.assertSequenceEqual(
            Article.objects.filter(reporter__pk=self.r.id),
            [new_article1, self.a],
        )
        self.assertSequenceEqual(
            Article.objects.filter(reporter=self.r.id),
            [new_article1, self.a],
        )
        self.assertSequenceEqual(
            Article.objects.filter(reporter=self.r),
            [new_article1, self.a],
        )
        self.assertSequenceEqual(
            Article.objects.filter(reporter__in=[self.r.id, self.r2.id]).distinct(),
            [new_article1, new_article2, self.a],
        )
        self.assertSequenceEqual(
            Article.objects.filter(reporter__in=[self.r, self.r2]).distinct(),
            [new_article1, new_article2, self.a],
        )
        # You can also use a queryset instead of a literal list of instances.
        # The queryset must be reduced to a list of values using values(),
        # then converted into a query
        self.assertSequenceEqual(
            Article.objects.filter(
                reporter__in=Reporter.objects.filter(first_name='John').values('pk').query
            ).distinct(),
            [new_article1, self.a],
        )

    def test_reverse_selects(self):
        a3 = Article.objects.create(
            headline=""Third article"",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=self.r.id,
        )
        Article.objects.create(
            headline=""Fourth article"",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=self.r.id,
        )
        john_smith = [self.r]
        # Reporters can be queried
        self.assertSequenceEqual(Reporter.objects.filter(id__exact=self.r.id), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(pk=self.r.id), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(first_name__startswith='John'), john_smith)
        # Reporters can query in opposite direction of ForeignKey definition
        self.assertSequenceEqual(Reporter.objects.filter(article__id__exact=self.a.id), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(article__pk=self.a.id), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(article=self.a.id), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(article=self.a), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(article__in=[self.a.id, a3.id]).distinct(), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(article__in=[self.a.id, a3]).distinct(), john_smith)
        self.assertSequenceEqual(Reporter.objects.filter(article__in=[self.a, a3]).distinct(), john_smith)
        self.assertCountEqual(
            Reporter.objects.filter(article__headline__startswith='T'),
            [self.r, self.r],
        )
        self.assertSequenceEqual(Reporter.objects.filter(article__headline__startswith='T').distinct(), john_smith)

        # Counting in the opposite direction works in conjunction with distinct()
        self.assertEqual(Reporter.objects.filter(article__headline__startswith='T').count(), 2)
        self.assertEqual(Reporter.objects.filter(article__headline__startswith='T').distinct().count(), 1)

        # Queries can go round in circles.
        self.assertCountEqual(
            Reporter.objects.filter(article__reporter__first_name__startswith='John'),
            [self.r, self.r, self.r],
        )
        self.assertSequenceEqual(
            Reporter.objects.filter(article__reporter__first_name__startswith='John').distinct(),
            john_smith
        )
        self.assertSequenceEqual(Reporter.objects.filter(article__reporter__exact=self.r).distinct(), john_smith)

        # Implied __exact also works.
        self.assertSequenceEqual(Reporter.objects.filter(article__reporter=self.r).distinct(), john_smith)

        # It's possible to use values() calls across many-to-one relations.
        # (Note, too, that we clear the ordering here so as not to drag the
        # 'headline' field into the columns being used to determine uniqueness)
        d = {'reporter__first_name': 'John', 'reporter__last_name': 'Smith'}
        qs = Article.objects.filter(
            reporter=self.r,
        ).distinct().order_by().values('reporter__first_name', 'reporter__last_name')
        self.assertEqual([d], list(qs))

    def test_select_related(self):
        # Article.objects.select_related().dates() works properly when there
        # are multiple Articles with the same date but different foreign-key
        # objects (Reporters).
        r1 = Reporter.objects.create(first_name='Mike', last_name='Royko', email='royko@suntimes.com')
        r2 = Reporter.objects.create(first_name='John', last_name='Kass', email='jkass@tribune.com')
        Article.objects.create(headline='First', pub_date=datetime.date(1980, 4, 23), reporter=r1)
        Article.objects.create(headline='Second', pub_date=datetime.date(1980, 4, 23), reporter=r2)
        self.assertEqual(
            list(Article.objects.select_related().dates('pub_date', 'day')),
            [datetime.date(1980, 4, 23), datetime.date(2005, 7, 27)]
        )
        self.assertEqual(
            list(Article.objects.select_related().dates('pub_date', 'month')),
            [datetime.date(1980, 4, 1), datetime.date(2005, 7, 1)]
        )
        self.assertEqual(
            list(Article.objects.select_related().dates('pub_date', 'year')),
            [datetime.date(1980, 1, 1), datetime.date(2005, 1, 1)]
        )

    def test_delete(self):
        new_article1 = self.r.article_set.create(
            headline=""John's second story"",
            pub_date=datetime.date(2005, 7, 29),
        )
        new_article2 = self.r2.article_set.create(
            headline=""Paul's story"",
            pub_date=datetime.date(2006, 1, 17),
        )
        new_article3 = Article.objects.create(
            headline=""Third article"",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=self.r.id,
        )
        new_article4 = Article.objects.create(
            headline=""Fourth article"",
            pub_date=datetime.date(2005, 7, 27),
            reporter_id=str(self.r.id),
        )
        # If you delete a reporter, their articles will be deleted.
        self.assertSequenceEqual(
            Article.objects.all(),
            [new_article4, new_article1, new_article2, new_article3, self.a],
        )
        self.assertSequenceEqual(
            Reporter.objects.order_by('first_name'),
            [self.r, self.r2],
        )
        self.r2.delete()
        self.assertSequenceEqual(
            Article.objects.all(),
            [new_article4, new_article1, new_article3, self.a],
        )
        self.assertSequenceEqual(Reporter.objects.order_by('first_name'), [self.r])
        # You can delete using a JOIN in the query.
        Reporter.objects.filter(article__headline__startswith='This').delete()
        self.assertSequenceEqual(Reporter.objects.all(), [])
        self.assertSequenceEqual(Article.objects.all(), [])

    def test_explicit_fk(self):
        # Create a new Article with get_or_create using an explicit value
        # for a ForeignKey.
        a2, created = Article.objects.get_or_create(
            headline=""John's second test"",
            pub_date=datetime.date(2011, 5, 7),
            reporter_id=self.r.id,
        )
        self.assertTrue(created)
        self.assertEqual(a2.reporter.id, self.r.id)

        # You can specify filters containing the explicit FK value.
        self.assertSequenceEqual(
            Article.objects.filter(reporter_id__exact=self.r.id),
            [a2, self.a],
        )

        # Create an Article by Paul for the same date.
        a3 = Article.objects.create(
            headline=""Paul's commentary"",
            pub_date=datetime.date(2011, 5, 7),
            reporter_id=self.r2.id,
        )
        self.assertEqual(a3.reporter.id, self.r2.id)

        # Get should respect explicit foreign keys as well.
        msg = 'get() returned more than one Article -- it returned 2!'
        with self.assertRaisesMessage(MultipleObjectsReturned, msg):
            Article.objects.get(reporter_id=self.r.id)
        self.assertEqual(
            repr(a3),
            repr(Article.objects.get(reporter_id=self.r2.id, pub_date=datetime.date(2011, 5, 7)))
        )

    def test_deepcopy_and_circular_references(self):
        # Regression for #12876 -- Model methods that include queries that
        # recursive don't cause recursion depth problems under deepcopy.
        self.r.cached_query = Article.objects.filter(reporter=self.r)
        self.assertEqual(repr(deepcopy(self.r)), ""<Reporter: John Smith>"")

    def test_manager_class_caching(self):
        r1 = Reporter.objects.create(first_name='Mike')
        r2 = Reporter.objects.create(first_name='John')

        # Same twice
        self.assertIs(r1.article_set.__class__, r1.article_set.__class__)

        # Same as each other
        self.assertIs(r1.article_set.__class__, r2.article_set.__class__)

    def test_create_relation_with_gettext_lazy(self):
        reporter = Reporter.objects.create(first_name='John', last_name='Smith', email='john.smith@example.com')
        lazy = gettext_lazy('test')
        reporter.article_set.create(headline=lazy, pub_date=datetime.date(2011, 6, 10))
        notlazy = str(lazy)
        article = reporter.article_set.get()
        self.assertEqual(article.headline, notlazy)

    def test_values_list_exception(self):
        expected_message = ""Cannot resolve keyword 'notafield' into field. Choices are: %s""
        reporter_fields = ', '.join(sorted(f.name for f in Reporter._meta.get_fields()))
        with self.assertRaisesMessage(FieldError, expected_message % reporter_fields):
            Article.objects.values_list('reporter__notafield')
        article_fields = ', '.join(['EXTRA'] + sorted(f.name for f in Article._meta.get_fields()))
        with self.assertRaisesMessage(FieldError, expected_message % article_fields):
            Article.objects.extra(select={'EXTRA': 'EXTRA_SELECT'}).values_list('notafield')

    def test_fk_assignment_and_related_object_cache(self):
        # Tests of ForeignKey assignment and the related-object cache (see #6886).

        p = Parent.objects.create(name=""Parent"")
        c = Child.objects.create(name=""Child"", parent=p)

        # Look up the object again so that we get a ""fresh"" object.
        c = Child.objects.get(name=""Child"")
        p = c.parent

        # Accessing the related object again returns the exactly same object.
        self.assertIs(c.parent, p)

        # But if we kill the cache, we get a new object.
        del c._state.fields_cache['parent']
        self.assertIsNot(c.parent, p)

        # Assigning a new object results in that object getting cached immediately.
        p2 = Parent.objects.create(name=""Parent 2"")
        c.parent = p2
        self.assertIs(c.parent, p2)

        # Assigning None succeeds if field is null=True.
        p.bestchild = None
        self.assertIsNone(p.bestchild)

        # bestchild should still be None after saving.
        p.save()
        self.assertIsNone(p.bestchild)

        # bestchild should still be None after fetching the object again.
        p = Parent.objects.get(name=""Parent"")
        self.assertIsNone(p.bestchild)

        # Assigning None will not fail: Child.parent is null=False.
        setattr(c, ""parent"", None)

        # You also can't assign an object of the wrong type here
        msg = (
            'Cannot assign ""<First: First object (1)>"": ""Child.parent"" must '
            'be a ""Parent"" instance.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            setattr(c, ""parent"", First(id=1, second=1))

        # You can assign None to Child.parent during object creation.
        Child(name='xyzzy', parent=None)

        # But when trying to save a Child with parent=None, the database will
        # raise IntegrityError.
        with self.assertRaises(IntegrityError), transaction.atomic():
            Child.objects.create(name='xyzzy', parent=None)

        # Creation using keyword argument should cache the related object.
        p = Parent.objects.get(name=""Parent"")
        c = Child(parent=p)
        self.assertIs(c.parent, p)

        # Creation using keyword argument and unsaved related instance (#8070).
        p = Parent()
        msg = ""save() prohibited to prevent data loss due to unsaved related object 'parent'.""
        with self.assertRaisesMessage(ValueError, msg):
            Child.objects.create(parent=p)

        msg = ""save() prohibited to prevent data loss due to unsaved related object 'parent'.""
        with self.assertRaisesMessage(ValueError, msg):
            ToFieldChild.objects.create(parent=p)

        # Creation using attname keyword argument and an id will cause the
        # related object to be fetched.
        p = Parent.objects.get(name=""Parent"")
        c = Child(parent_id=p.id)
        self.assertIsNot(c.parent, p)
        self.assertEqual(c.parent, p)

    def test_save_nullable_fk_after_parent(self):
        parent = Parent()
        child = ChildNullableParent(parent=parent)
        parent.save()
        child.save()
        child.refresh_from_db()
        self.assertEqual(child.parent, parent)

    def test_save_nullable_fk_after_parent_with_to_field(self):
        parent = Parent(name='jeff')
        child = ToFieldChild(parent=parent)
        parent.save()
        child.save()
        child.refresh_from_db()
        self.assertEqual(child.parent, parent)
        self.assertEqual(child.parent_id, parent.name)

    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):
        parent = ParentStringPrimaryKey()
        child = ChildStringPrimaryKeyParent(parent=parent)
        child.parent.name = 'jeff'
        parent.save()
        child.save()
        child.refresh_from_db()
        self.assertEqual(child.parent, parent)
        self.assertEqual(child.parent_id, parent.name)

    def test_fk_to_bigautofield(self):
        ch = City.objects.create(name='Chicago')
        District.objects.create(city=ch, name='Far South')
        District.objects.create(city=ch, name='North')

        ny = City.objects.create(name='New York', id=2 ** 33)
        District.objects.create(city=ny, name='Brooklyn')
        District.objects.create(city=ny, name='Manhattan')

    def test_fk_to_smallautofield(self):
        us = Country.objects.create(name='United States')
        City.objects.create(country=us, name='Chicago')
        City.objects.create(country=us, name='New York')

        uk = Country.objects.create(name='United Kingdom', id=2 ** 11)
        City.objects.create(country=uk, name='London')
        City.objects.create(country=uk, name='Edinburgh')

    def test_multiple_foreignkeys(self):
        # Test of multiple ForeignKeys to the same model (bug #7125).
        c1 = Category.objects.create(name='First')
        c2 = Category.objects.create(name='Second')
        c3 = Category.objects.create(name='Third')
        r1 = Record.objects.create(category=c1)
        r2 = Record.objects.create(category=c1)
        r3 = Record.objects.create(category=c2)
        r4 = Record.objects.create(category=c2)
        r5 = Record.objects.create(category=c3)
        Relation.objects.create(left=r1, right=r2)
        Relation.objects.create(left=r3, right=r4)
        rel = Relation.objects.create(left=r1, right=r3)
        Relation.objects.create(left=r5, right=r2)
        Relation.objects.create(left=r3, right=r2)

        q1 = Relation.objects.filter(left__category__name__in=['First'], right__category__name__in=['Second'])
        self.assertSequenceEqual(q1, [rel])

        q2 = Category.objects.filter(record__left_set__right__category__name='Second').order_by('name')
        self.assertSequenceEqual(q2, [c1, c2])

        p = Parent.objects.create(name=""Parent"")
        c = Child.objects.create(name=""Child"", parent=p)
        msg = 'Cannot assign ""%r"": ""Child.parent"" must be a ""Parent"" instance.' % c
        with self.assertRaisesMessage(ValueError, msg):
            Child.objects.create(name=""Grandchild"", parent=c)

    def test_fk_instantiation_outside_model(self):
        # Regression for #12190 -- Should be able to instantiate a FK outside
        # of a model, and interrogate its related field.
        cat = models.ForeignKey(Category, models.CASCADE)
        self.assertEqual('id', cat.remote_field.get_related_field().name)

    def test_relation_unsaved(self):
        # The <field>_set manager does not join on Null value fields (#17541)
        Third.objects.create(name='Third 1')
        Third.objects.create(name='Third 2')
        th = Third(name=""testing"")
        # The object isn't saved and thus the relation field is null - we won't even
        # execute a query in this case.
        with self.assertNumQueries(0):
            self.assertEqual(th.child_set.count(), 0)
        th.save()
        # Now the model is saved, so we will need to execute a query.
        with self.assertNumQueries(1):
            self.assertEqual(th.child_set.count(), 0)

    def test_related_object(self):
        public_school = School.objects.create(is_public=True)
        public_student = Student.objects.create(school=public_school)

        private_school = School.objects.create(is_public=False)
        private_student = Student.objects.create(school=private_school)

        # Only one school is available via all() due to the custom default manager.
        self.assertSequenceEqual(School.objects.all(), [public_school])

        self.assertEqual(public_student.school, public_school)

        # Make sure the base manager is used so that a student can still access
        # its related school even if the default manager doesn't normally
        # allow it.
        self.assertEqual(private_student.school, private_school)

        School._meta.base_manager_name = 'objects'
        School._meta._expire_cache()
        try:
            private_student = Student.objects.get(pk=private_student.pk)
            with self.assertRaises(School.DoesNotExist):
                private_student.school
        finally:
            School._meta.base_manager_name = None
            School._meta._expire_cache()

    def test_hasattr_related_object(self):
        # The exception raised on attribute access when a related object
        # doesn't exist should be an instance of a subclass of `AttributeError`
        # refs #21563
        self.assertFalse(hasattr(Article(), 'reporter'))

    def test_clear_after_prefetch(self):
        c = City.objects.create(name='Musical City')
        d = District.objects.create(name='Ladida', city=c)
        city = City.objects.prefetch_related('districts').get(id=c.id)
        self.assertSequenceEqual(city.districts.all(), [d])
        city.districts.clear()
        self.assertSequenceEqual(city.districts.all(), [])

    def test_remove_after_prefetch(self):
        c = City.objects.create(name='Musical City')
        d = District.objects.create(name='Ladida', city=c)
        city = City.objects.prefetch_related('districts').get(id=c.id)
        self.assertSequenceEqual(city.districts.all(), [d])
        city.districts.remove(d)
        self.assertSequenceEqual(city.districts.all(), [])

    def test_add_after_prefetch(self):
        c = City.objects.create(name='Musical City')
        District.objects.create(name='Ladida', city=c)
        d2 = District.objects.create(name='Ladidu')
        city = City.objects.prefetch_related('districts').get(id=c.id)
        self.assertEqual(city.districts.count(), 1)
        city.districts.add(d2)
        self.assertEqual(city.districts.count(), 2)

    def test_set_after_prefetch(self):
        c = City.objects.create(name='Musical City')
        District.objects.create(name='Ladida', city=c)
        d2 = District.objects.create(name='Ladidu')
        city = City.objects.prefetch_related('districts').get(id=c.id)
        self.assertEqual(city.districts.count(), 1)
        city.districts.set([d2])
        self.assertSequenceEqual(city.districts.all(), [d2])

    def test_add_then_remove_after_prefetch(self):
        c = City.objects.create(name='Musical City')
        District.objects.create(name='Ladida', city=c)
        d2 = District.objects.create(name='Ladidu')
        city = City.objects.prefetch_related('districts').get(id=c.id)
        self.assertEqual(city.districts.count(), 1)
        city.districts.add(d2)
        self.assertEqual(city.districts.count(), 2)
        city.districts.remove(d2)
        self.assertEqual(city.districts.count(), 1)

    def test_cached_relation_invalidated_on_save(self):
        """"""
        Model.save() invalidates stale ForeignKey relations after a primary key
        assignment.
        """"""
        self.assertEqual(self.a.reporter, self.r)  # caches a.reporter
        self.a.reporter_id = self.r2.pk
        self.a.save()
        self.assertEqual(self.a.reporter, self.r2)

    def test_cached_foreign_key_with_to_field_not_cleared_by_save(self):
        parent = Parent.objects.create(name='a')
        child = ToFieldChild.objects.create(parent=parent)
        with self.assertNumQueries(0):
            self.assertIs(child.parent, parent)

    def test_reverse_foreign_key_instance_to_field_caching(self):
        parent = Parent.objects.create(name='a')
        ToFieldChild.objects.create(parent=parent)
        child = parent.to_field_children.get()
        with self.assertNumQueries(0):
            self.assertIs(child.parent, parent)

    def test_add_remove_set_by_pk_raises(self):
        usa = Country.objects.create(name='United States')
        chicago = City.objects.create(name='Chicago')
        msg = ""'City' instance expected, got %s"" % chicago.pk
        with self.assertRaisesMessage(TypeError, msg):
            usa.cities.add(chicago.pk)
        with self.assertRaisesMessage(TypeError, msg):
            usa.cities.remove(chicago.pk)
        with self.assertRaisesMessage(TypeError, msg):
            usa.cities.set([chicago.pk])",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 621 2004 46 2005 61 2006 40 2007 61 648 44 2008 61 648 44 2009 61 648 41 2004 46 2005 46 2010 40 41 2004 46 2011 61 2006 40 2007 61 648 44 2008 61 648 44 2009 61 648 41 2004 46 2011 46 2010 40 41 621 2004 46 2012 61 2013 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2018 61 2004 46 2005 41 2004 46 2012 46 2010 40 41 348 2019 40 2020 41 58 621 2005 61 2020 46 2012 46 2018 2020 46 2021 40 2005 46 2022 44 2020 46 2005 46 2022 41 2020 46 2021 40 40 2005 46 2007 44 2020 46 2005 46 2008 41 44 40 648 44 648 41 41 348 2023 40 2020 41 58 621 621 2024 61 2013 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2025 61 2020 46 2005 46 2022 41 2024 46 2010 40 41 2020 46 2021 40 2024 46 2018 46 2022 44 2020 46 2005 46 2022 41 621 2026 61 2013 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2025 61 2027 40 2020 46 2005 46 2022 41 41 2026 46 2010 40 41 2020 46 2021 40 2028 40 2026 46 2018 41 44 648 41 348 2029 40 2020 41 58 621 2030 61 2020 46 2005 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 41 2020 46 2021 40 2028 40 2030 41 44 648 41 2020 46 2021 40 2030 46 2018 46 2022 44 2020 46 2005 46 2022 41 621 2033 61 2013 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1501 44 1503 41 41 2034 61 648 497 2020 46 2035 40 2036 44 2034 41 58 2020 46 2005 46 2031 46 2037 40 2033 41 2020 46 2005 46 2031 46 2037 40 2033 44 2038 61 302 41 2020 46 2021 40 2033 46 2018 46 2022 44 2020 46 2005 46 2022 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2030 44 2033 44 2020 46 2012 93 44 41 621 2020 46 2011 46 2031 46 2037 40 2033 41 2020 46 2021 40 2033 46 2018 46 2022 44 2020 46 2011 46 2022 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 2033 93 41 621 497 2041 46 2042 40 41 58 497 2020 46 2035 40 2043 44 648 41 58 2020 46 2005 46 2031 46 2037 40 2020 46 2011 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2030 44 2020 46 2012 93 44 41 348 2044 40 2020 41 58 2030 61 2020 46 2005 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 41 2033 61 2020 46 2011 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1501 44 1503 41 41 621 2033 46 2018 61 2020 46 2005 2033 46 2010 40 41 2020 46 2021 40 2028 40 2033 46 2018 41 44 648 41 2020 46 2021 40 2033 46 2018 46 2022 44 2020 46 2005 46 2022 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2030 44 2033 44 2020 46 2012 93 44 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 93 41 621 2020 46 2011 46 2031 46 2045 40 91 2030 44 2033 93 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2020 46 2012 93 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 2030 44 2033 93 44 41 621 621 2020 46 2005 46 2031 46 2045 40 91 2030 93 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2030 44 2020 46 2012 93 44 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 2033 93 41 348 2046 40 2020 41 58 2034 61 40 648 648 41 497 2020 46 2035 40 2043 44 2034 41 58 2020 46 2011 46 2031 61 91 93 348 2047 40 2020 41 58 2030 61 2020 46 2005 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 41 2033 61 2020 46 2011 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1501 44 1503 41 41 621 2033 46 2018 61 2020 46 2005 2033 46 2010 40 41 2020 46 2021 40 2028 40 2033 46 2018 41 44 648 41 2020 46 2021 40 2033 46 2018 46 2022 44 2020 46 2005 46 2022 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2030 44 2033 44 2020 46 2012 93 44 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 93 41 621 2020 46 2011 46 2031 46 2045 40 91 2030 44 2033 93 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2020 46 2012 93 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 2030 44 2033 93 44 41 621 621 2020 46 2005 46 2031 46 2045 40 91 2030 93 41 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2030 44 2020 46 2012 93 44 41 2020 46 2039 40 2020 46 2011 46 2031 46 2040 40 41 44 91 2033 93 41 621 2020 46 2048 40 2049 40 2020 46 2011 46 2031 44 648 41 41 2020 46 2048 40 2049 40 2020 46 2011 46 2031 44 648 41 41 348 2050 40 2020 41 58 2051 61 2052 46 2053 46 2032 40 2054 61 648 41 2055 61 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 2051 41 2057 61 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 2051 41 2051 46 2058 61 2055 2051 46 2010 40 41 2051 46 2059 61 2057 46 2060 2051 46 2010 40 41 2020 46 2021 40 2051 46 2059 44 2057 46 2060 41 2020 46 2048 40 2052 46 2058 46 2061 40 2051 41 41 2020 46 2021 40 2051 46 2058 44 2057 41 2020 46 2062 40 2052 46 2058 46 2061 40 2051 41 41 621 2051 46 2059 61 2057 46 2060 2020 46 2062 40 2052 46 2058 46 2061 40 2051 41 41 348 2063 40 2020 41 58 2051 61 2052 46 2053 46 2032 40 2054 61 648 41 2064 61 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 2051 41 2051 46 2058 61 2064 2051 46 2010 40 41 2051 46 2059 61 303 2051 46 2010 40 41 2020 46 2065 40 2051 46 2059 41 2020 46 2048 40 2052 46 2058 46 2061 40 2051 41 41 2020 46 2065 40 2051 46 2058 41 2020 46 2062 40 2052 46 2058 46 2061 40 2051 41 41 348 2066 40 2020 41 58 2067 61 2020 46 2005 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 41 2033 61 2020 46 2011 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1501 44 1503 41 44 41 621 2020 46 2039 40 2020 46 2005 46 2031 46 2040 40 41 44 91 2067 44 2020 46 2012 93 44 41 2020 46 2039 40 2020 46 2005 46 2031 46 2068 40 2069 61 648 41 44 91 2020 46 2012 93 41 2020 46 2021 40 2020 46 2005 46 2031 46 2070 40 41 44 1502 41 2020 46 2021 40 2020 46 2011 46 2031 46 2070 40 41 44 1501 41 621 2020 46 2039 40 2013 46 2053 46 2068 40 2071 61 2020 46 2012 46 2022 41 44 91 2020 46 2012 93 41 2020 46 2039 40 2013 46 2053 46 2068 40 2060 61 2020 46 2012 46 2022 41 44 91 2020 46 2012 93 41 621 2020 46 2039 40 2013 46 2053 46 2068 40 2069 61 648 41 44 91 2020 46 2012 93 41 621 621 621 621 2020 46 2039 40 2013 46 2053 46 2068 40 2072 61 648 41 44 91 2067 44 2020 46 2012 93 44 41 621 2020 46 2039 40 2013 46 2053 46 2068 40 2073 61 648 41 44 91 2067 44 2020 46 2012 93 44 41 621 2020 46 2039 40 2013 46 2053 46 2068 40 2072 61 648 44 2074 61 648 41 44 91 2067 44 2020 46 2012 93 44 41 621 2075 61 2013 46 2053 46 2068 40 2072 61 648 44 2074 61 648 41 2020 46 2076 40 1501 44 411 44 2075 41 2020 46 2021 40 2075 46 2077 46 2078 40 2075 46 2079 41 46 2080 40 41 91 1500 93 46 2070 40 648 41 44 1501 41 621 2020 46 2039 40 2013 46 2053 46 2068 40 2072 61 648 41 46 2081 40 2082 61 91 648 93 41 44 91 2067 44 2020 46 2012 93 44 41 621 2020 46 2083 40 40 2013 46 2053 46 2068 40 2072 61 648 41 46 2081 40 2082 61 91 648 37 648 93 41 41 44 91 2067 44 2020 46 2012 93 41 621 621 2020 46 2039 40 2013 46 2053 46 2068 40 2084 61 2020 46 2005 46 2022 41 44 91 2067 44 2020 46 2012 93 44 41 2020 46 2039 40 2013 46 2053 46 2068 40 2085 61 2020 46 2005 46 2022 41 44 91 2067 44 2020 46 2012 93 44 41 2020 46 2039 40 2013 46 2053 46 2068 40 2018 61 2020 46 2005 46 2022 41 44 91 2067 44 2020 46 2012 93 44 41 2020 46 2039 40 2013 46 2053 46 2068 40 2018 61 2020 46 2005 41 44 91 2067 44 2020 46 2012 93 44 41 2020 46 2039 40 2013 46 2053 46 2068 40 2086 61 91 2020 46 2005 46 2022 44 2020 46 2011 46 2022 93 41 46 2087 40 41 44 91 2067 44 2033 44 2020 46 2012 93 44 41 2020 46 2039 40 2013 46 2053 46 2068 40 2086 61 91 2020 46 2005 44 2020 46 2011 93 41 46 2087 40 41 44 91 2067 44 2033 44 2020 46 2012 93 44 41 621 621 621 2020 46 2039 40 2013 46 2053 46 2068 40 2086 61 2006 46 2053 46 2068 40 2007 61 648 41 46 2088 40 648 41 46 2077 41 46 2087 40 41 44 91 2067 44 2020 46 2012 93 44 41 348 2089 40 2020 41 58 2024 61 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2025 61 2020 46 2005 46 2022 44 41 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2025 61 2020 46 2005 46 2022 44 41 2090 61 91 2020 46 2005 93 621 2020 46 2039 40 2006 46 2053 46 2068 40 2071 61 2020 46 2005 46 2022 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2060 61 2020 46 2005 46 2022 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2091 61 648 41 44 2090 41 621 2020 46 2039 40 2006 46 2053 46 2068 40 2092 61 2020 46 2012 46 2022 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2093 61 2020 46 2012 46 2022 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2094 61 2020 46 2012 46 2022 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2094 61 2020 46 2012 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2095 61 91 2020 46 2012 46 2022 44 2024 46 2022 93 41 46 2087 40 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2095 61 91 2020 46 2012 46 2022 44 2024 93 41 46 2087 40 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2095 61 91 2020 46 2012 44 2024 93 41 46 2087 40 41 44 2090 41 2020 46 2096 40 2006 46 2053 46 2068 40 2097 61 648 41 44 91 2020 46 2005 44 2020 46 2005 93 44 41 2020 46 2039 40 2006 46 2053 46 2068 40 2097 61 648 41 46 2087 40 41 44 2090 41 621 2020 46 2021 40 2006 46 2053 46 2068 40 2097 61 648 41 46 2070 40 41 44 1502 41 2020 46 2021 40 2006 46 2053 46 2068 40 2097 61 648 41 46 2087 40 41 46 2070 40 41 44 1501 41 621 2020 46 2096 40 2006 46 2053 46 2068 40 2098 61 648 41 44 91 2020 46 2005 44 2020 46 2005 44 2020 46 2005 93 44 41 2020 46 2039 40 2006 46 2053 46 2068 40 2098 61 648 41 46 2087 40 41 44 2090 41 2020 46 2039 40 2006 46 2053 46 2068 40 2099 61 2020 46 2005 41 46 2087 40 41 44 2090 41 621 2020 46 2039 40 2006 46 2053 46 2068 40 2100 61 2020 46 2005 41 46 2087 40 41 44 2090 41 621 621 621 2101 61 123 648 58 648 44 648 58 648 125 2102 61 2013 46 2053 46 2068 40 2018 61 2020 46 2005 44 41 46 2087 40 41 46 2103 40 41 46 2088 40 648 44 648 41 2020 46 2021 40 91 2101 93 44 411 40 2102 41 41 348 2104 40 2020 41 58 621 621 621 2105 61 2006 46 2053 46 2032 40 2007 61 648 44 2008 61 648 44 2009 61 648 41 2011 61 2006 46 2053 46 2032 40 2007 61 648 44 2008 61 648 44 2009 61 648 41 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2018 61 2105 41 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2018 61 2011 41 2020 46 2021 40 411 40 2013 46 2053 46 2106 40 41 46 2107 40 648 44 648 41 41 44 91 2016 46 2017 40 1505 44 1502 44 1503 41 44 2016 46 2017 40 1505 44 1502 44 1503 41 93 41 2020 46 2021 40 411 40 2013 46 2053 46 2106 40 41 46 2107 40 648 44 648 41 41 44 91 2016 46 2017 40 1505 44 1502 44 1501 41 44 2016 46 2017 40 1505 44 1502 44 1501 41 93 41 2020 46 2021 40 411 40 2013 46 2053 46 2106 40 41 46 2107 40 648 44 648 41 41 44 91 2016 46 2017 40 1505 44 1501 44 1501 41 44 2016 46 2017 40 1505 44 1501 44 1501 41 93 41 348 2108 40 2020 41 58 2067 61 2020 46 2005 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 41 2033 61 2020 46 2011 46 2031 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1501 44 1503 41 44 41 2109 61 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2025 61 2020 46 2005 46 2022 44 41 2110 61 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1503 41 44 2025 61 2027 40 2020 46 2005 46 2022 41 44 41 621 2020 46 2039 40 2013 46 2053 46 2040 40 41 44 91 2110 44 2067 44 2033 44 2109 44 2020 46 2012 93 44 41 2020 46 2039 40 2006 46 2053 46 2103 40 648 41 44 91 2020 46 2005 44 2020 46 2011 93 44 41 2020 46 2011 46 353 40 41 2020 46 2039 40 2013 46 2053 46 2040 40 41 44 91 2110 44 2067 44 2109 44 2020 46 2012 93 44 41 2020 46 2039 40 2006 46 2053 46 2103 40 648 41 44 91 2020 46 2005 93 41 621 2006 46 2053 46 2068 40 2097 61 648 41 46 353 40 41 2020 46 2039 40 2006 46 2053 46 2040 40 41 44 91 93 41 2020 46 2039 40 2013 46 2053 46 2040 40 41 44 91 93 41 348 2111 40 2020 41 58 621 621 2112 44 2113 61 2013 46 2053 46 2114 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1502 41 44 2025 61 2020 46 2005 46 2022 44 41 2020 46 2062 40 2113 41 2020 46 2021 40 2112 46 2018 46 2022 44 2020 46 2005 46 2022 41 621 2020 46 2039 40 2013 46 2053 46 2068 40 2115 61 2020 46 2005 46 2022 41 44 91 2112 44 2020 46 2012 93 44 41 621 2024 61 2013 46 2053 46 2032 40 2014 61 648 44 2015 61 2016 46 2017 40 1505 44 1502 44 1502 41 44 2025 61 2020 46 2011 46 2022 44 41 2020 46 2021 40 2024 46 2018 46 2022 44 2020 46 2011 46 2022 41 621 2034 61 648 497 2020 46 2035 40 2116 44 2034 41 58 2013 46 2053 46 2117 40 2025 61 2020 46 2005 46 2022 41 2020 46 2021 40 2028 40 2024 41 44 2028 40 2013 46 2053 46 2117 40 2025 61 2020 46 2011 46 2022 44 2015 61 2016 46 2017 40 1505 44 1502 44 1502 41 41 41 41 348 2118 40 2020 41 58 621 621 2020 46 2005 46 2119 61 2013 46 2053 46 2068 40 2018 61 2020 46 2005 41 2020 46 2021 40 2028 40 2120 40 2020 46 2005 41 41 44 648 41 348 2121 40 2020 41 58 2105 61 2006 46 2053 46 2032 40 2007 61 648 41 2011 61 2006 46 2053 46 2032 40 2007 61 648 41 621 2020 46 2122 40 2105 46 2031 46 2123 44 2105 46 2031 46 2123 41 621 2020 46 2122 40 2105 46 2031 46 2123 44 2011 46 2031 46 2123 41 348 2124 40 2020 41 58 2018 61 2006 46 2053 46 2032 40 2007 61 648 44 2008 61 648 44 2009 61 648 41 2125 61 2126 40 648 41 2018 46 2031 46 2032 40 2014 61 2125 44 2015 61 2016 46 2017 40 1505 44 1502 44 1502 41 41 2127 61 2027 40 2125 41 2094 61 2018 46 2031 46 2117 40 41 2020 46 2021 40 2094 46 2014 44 2127 41 348 2128 40 2020 41 58 2129 61 648 2130 61 648 46 2131 40 2132 40 2133 46 2054 385 2133 398 2006 46 2134 46 2135 40 41 41 41 497 2020 46 2035 40 2136 44 2129 37 2130 41 58 2013 46 2053 46 2137 40 648 41 2138 61 648 46 2131 40 91 648 93 43 2132 40 2133 46 2054 385 2133 398 2013 46 2134 46 2135 40 41 41 41 497 2020 46 2035 40 2136 44 2129 37 2138 41 58 2013 46 2053 46 2081 40 2139 61 123 648 58 648 125 41 46 2137 40 648 41 348 2140 40 2020 41 58 621 2141 61 2052 46 2053 46 2032 40 2054 61 648 41 2142 61 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 2141 41 621 2142 61 2056 46 2053 46 2117 40 2054 61 648 41 2141 61 2142 46 2051 621 2020 46 2122 40 2142 46 2051 44 2141 41 621 351 2142 46 2143 46 2144 91 648 93 2020 46 2145 40 2142 46 2051 44 2141 41 621 2146 61 2052 46 2053 46 2032 40 2054 61 648 41 2142 46 2051 61 2146 2020 46 2122 40 2142 46 2051 44 2146 41 621 2141 46 2058 61 303 2020 46 2065 40 2141 46 2058 41 621 2141 46 2010 40 41 2020 46 2065 40 2141 46 2058 41 621 2141 61 2052 46 2053 46 2117 40 2054 61 648 41 2020 46 2065 40 2141 46 2058 41 621 2147 40 2142 44 648 44 303 41 621 2034 61 40 648 648 41 497 2020 46 2035 40 2036 44 2034 41 58 2147 40 2142 44 648 44 2148 40 2022 61 1501 44 2149 61 1501 41 41 621 2056 40 2054 61 648 44 2051 61 303 41 621 621 497 2020 46 2150 40 2151 41 44 2041 46 2042 40 41 58 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 303 41 621 2141 61 2052 46 2053 46 2117 40 2054 61 648 41 2142 61 2056 40 2051 61 2141 41 2020 46 2122 40 2142 46 2051 44 2141 41 621 2141 61 2052 40 41 2034 61 648 497 2020 46 2035 40 2036 44 2034 41 58 2056 46 2053 46 2032 40 2051 61 2141 41 2034 61 648 497 2020 46 2035 40 2036 44 2034 41 58 2152 46 2053 46 2032 40 2051 61 2141 41 621 621 2141 61 2052 46 2053 46 2117 40 2054 61 648 41 2142 61 2056 40 2153 61 2141 46 2022 41 2020 46 2145 40 2142 46 2051 44 2141 41 2020 46 2021 40 2142 46 2051 44 2141 41 348 2154 40 2020 41 58 2051 61 2052 40 41 2064 61 2155 40 2051 61 2051 41 2051 46 2010 40 41 2064 46 2010 40 41 2064 46 2156 40 41 2020 46 2021 40 2064 46 2051 44 2051 41 348 2157 40 2020 41 58 2051 61 2052 40 2054 61 648 41 2064 61 2152 40 2051 61 2051 41 2051 46 2010 40 41 2064 46 2010 40 41 2064 46 2156 40 41 2020 46 2021 40 2064 46 2051 44 2051 41 2020 46 2021 40 2064 46 2153 44 2051 46 2054 41 348 2158 40 2020 41 58 2051 61 2159 40 41 2064 61 2160 40 2051 61 2051 41 2064 46 2051 46 2054 61 648 2051 46 2010 40 41 2064 46 2010 40 41 2064 46 2156 40 41 2020 46 2021 40 2064 46 2051 44 2051 41 2020 46 2021 40 2064 46 2153 44 2051 46 2054 41 348 2161 40 2020 41 58 2162 61 2163 46 2053 46 2032 40 2054 61 648 41 2164 46 2053 46 2032 40 2165 61 2162 44 2054 61 648 41 2164 46 2053 46 2032 40 2165 61 2162 44 2054 61 648 41 2166 61 2163 46 2053 46 2032 40 2054 61 648 44 2022 61 1502 638 1503 41 2164 46 2053 46 2032 40 2165 61 2166 44 2054 61 648 41 2164 46 2053 46 2032 40 2165 61 2166 44 2054 61 648 41 348 2167 40 2020 41 58 2168 61 2169 46 2053 46 2032 40 2054 61 648 41 2163 46 2053 46 2032 40 2170 61 2168 44 2054 61 648 41 2163 46 2053 46 2032 40 2170 61 2168 44 2054 61 648 41 2171 61 2169 46 2053 46 2032 40 2054 61 648 44 2022 61 1502 638 1503 41 2163 46 2053 46 2032 40 2170 61 2171 44 2054 61 648 41 2163 46 2053 46 2032 40 2170 61 2171 44 2054 61 648 41 348 2172 40 2020 41 58 621 2173 61 2174 46 2053 46 2032 40 2054 61 648 41 2175 61 2174 46 2053 46 2032 40 2054 61 648 41 2176 61 2174 46 2053 46 2032 40 2054 61 648 41 2105 61 2177 46 2053 46 2032 40 2178 61 2173 41 2011 61 2177 46 2053 46 2032 40 2178 61 2173 41 2179 61 2177 46 2053 46 2032 40 2178 61 2175 41 2180 61 2177 46 2053 46 2032 40 2178 61 2175 41 2181 61 2177 46 2053 46 2032 40 2178 61 2176 41 2182 46 2053 46 2032 40 2183 61 2105 44 2184 61 2011 41 2182 46 2053 46 2032 40 2183 61 2179 44 2184 61 2180 41 2185 61 2182 46 2053 46 2032 40 2183 61 2105 44 2184 61 2179 41 2182 46 2053 46 2032 40 2183 61 2181 44 2184 61 2011 41 2182 46 2053 46 2032 40 2183 61 2179 44 2184 61 2011 41 2186 61 2182 46 2053 46 2068 40 2187 61 91 648 93 44 2188 61 91 648 93 41 2020 46 2039 40 2186 44 91 2185 93 41 2189 61 2174 46 2053 46 2068 40 2190 61 648 41 46 2103 40 648 41 2020 46 2039 40 2189 44 91 2173 44 2175 93 41 2141 61 2052 46 2053 46 2032 40 2054 61 648 41 2142 61 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 2141 41 2034 61 648 37 2142 497 2020 46 2035 40 2036 44 2034 41 58 2056 46 2053 46 2032 40 2054 61 648 44 2051 61 2142 41 348 2191 40 2020 41 58 621 621 2192 61 2193 46 2194 40 2174 44 2193 46 2195 41 2020 46 2021 40 648 44 2192 46 2196 46 2197 40 41 46 2054 41 348 2198 40 2020 41 58 621 2199 46 2053 46 2032 40 2054 61 648 41 2199 46 2053 46 2032 40 2054 61 648 41 2200 61 2199 40 2054 61 648 41 621 621 497 2020 46 2076 40 1500 41 58 2020 46 2021 40 2200 46 2201 46 2070 40 41 44 1500 41 2200 46 2010 40 41 621 497 2020 46 2076 40 1501 41 58 2020 46 2021 40 2200 46 2201 46 2070 40 41 44 1500 41 348 2202 40 2020 41 58 2203 61 2204 46 2053 46 2032 40 2205 61 304 41 2206 61 2207 46 2053 46 2032 40 2208 61 2203 41 2209 61 2204 46 2053 46 2032 40 2205 61 302 41 2210 61 2207 46 2053 46 2032 40 2208 61 2209 41 621 2020 46 2039 40 2204 46 2053 46 2040 40 41 44 91 2203 93 41 2020 46 2021 40 2206 46 2208 44 2203 41 621 621 621 2020 46 2021 40 2210 46 2208 44 2209 41 2204 46 2134 46 2211 61 648 2204 46 2134 46 2212 40 41 474 58 2210 61 2207 46 2053 46 2117 40 2060 61 2210 46 2060 41 497 2020 46 2150 40 2204 46 2213 41 58 2210 46 2208 382 58 2204 46 2134 46 2211 61 303 2204 46 2134 46 2212 40 41 348 2214 40 2020 41 58 621 621 621 2020 46 2048 40 2049 40 2013 40 41 44 648 41 41 348 2215 40 2020 41 58 2142 61 2163 46 2053 46 2032 40 2054 61 648 41 2101 61 2164 46 2053 46 2032 40 2054 61 648 44 2165 61 2142 41 2165 61 2163 46 2053 46 2216 40 648 41 46 2117 40 2022 61 2142 46 2022 41 2020 46 2039 40 2165 46 2217 46 2040 40 41 44 91 2101 93 41 2165 46 2217 46 2218 40 41 2020 46 2039 40 2165 46 2217 46 2040 40 41 44 91 93 41 348 2219 40 2020 41 58 2142 61 2163 46 2053 46 2032 40 2054 61 648 41 2101 61 2164 46 2053 46 2032 40 2054 61 648 44 2165 61 2142 41 2165 61 2163 46 2053 46 2216 40 648 41 46 2117 40 2022 61 2142 46 2022 41 2020 46 2039 40 2165 46 2217 46 2040 40 41 44 91 2101 93 41 2165 46 2217 46 2220 40 2101 41 2020 46 2039 40 2165 46 2217 46 2040 40 41 44 91 93 41 348 2221 40 2020 41 58 2142 61 2163 46 2053 46 2032 40 2054 61 648 41 2164 46 2053 46 2032 40 2054 61 648 44 2165 61 2142 41 2222 61 2164 46 2053 46 2032 40 2054 61 648 41 2165 61 2163 46 2053 46 2216 40 648 41 46 2117 40 2022 61 2142 46 2022 41 2020 46 2021 40 2165 46 2217 46 2070 40 41 44 1501 41 2165 46 2217 46 2037 40 2222 41 2020 46 2021 40 2165 46 2217 46 2070 40 41 44 1502 41 348 2223 40 2020 41 58 2142 61 2163 46 2053 46 2032 40 2054 61 648 41 2164 46 2053 46 2032 40 2054 61 648 44 2165 61 2142 41 2222 61 2164 46 2053 46 2032 40 2054 61 648 41 2165 61 2163 46 2053 46 2216 40 648 41 46 2117 40 2022 61 2142 46 2022 41 2020 46 2021 40 2165 46 2217 46 2070 40 41 44 1501 41 2165 46 2217 46 2045 40 91 2222 93 41 2020 46 2039 40 2165 46 2217 46 2040 40 41 44 91 2222 93 41 348 2224 40 2020 41 58 2142 61 2163 46 2053 46 2032 40 2054 61 648 41 2164 46 2053 46 2032 40 2054 61 648 44 2165 61 2142 41 2222 61 2164 46 2053 46 2032 40 2054 61 648 41 2165 61 2163 46 2053 46 2216 40 648 41 46 2117 40 2022 61 2142 46 2022 41 2020 46 2021 40 2165 46 2217 46 2070 40 41 44 1501 41 2165 46 2217 46 2037 40 2222 41 2020 46 2021 40 2165 46 2217 46 2070 40 41 44 1502 41 2165 46 2217 46 2220 40 2222 41 2020 46 2021 40 2165 46 2217 46 2070 40 41 44 1501 41 348 2225 40 2020 41 58 648 2020 46 2021 40 2020 46 2012 46 2018 44 2020 46 2005 41 621 2020 46 2012 46 2025 61 2020 46 2011 46 2060 2020 46 2012 46 2010 40 41 2020 46 2021 40 2020 46 2012 46 2018 44 2020 46 2011 41 348 2226 40 2020 41 58 2051 61 2052 46 2053 46 2032 40 2054 61 648 41 2064 61 2152 46 2053 46 2032 40 2051 61 2051 41 497 2020 46 2076 40 1500 41 58 2020 46 2122 40 2064 46 2051 44 2051 41 348 2227 40 2020 41 58 2051 61 2052 46 2053 46 2032 40 2054 61 648 41 2152 46 2053 46 2032 40 2051 61 2051 41 2064 61 2051 46 2228 46 2117 40 41 497 2020 46 2076 40 1500 41 58 2020 46 2122 40 2064 46 2051 44 2051 41 348 2229 40 2020 41 58 2230 61 2169 46 2053 46 2032 40 2054 61 648 41 2231 61 2163 46 2053 46 2032 40 2054 61 648 41 2034 61 648 37 2231 46 2060 497 2020 46 2035 40 2043 44 2034 41 58 2230 46 2232 46 2037 40 2231 46 2060 41 497 2020 46 2035 40 2043 44 2034 41 58 2230 46 2232 46 2220 40 2231 46 2060 41 497 2020 46 2035 40 2043 44 2034 41 58 2230 46 2232 46 2045 40 91 2231 46 2060 93 41 
129023,Python,"class ParserInterpreter(Parser):

    def __init__(self, grammarFileName, tokenNames, ruleNames, atn, input):
        super(ParserInterpreter, self).__init__(input)
        self.grammarFileName = grammarFileName
        self.atn = atn
        self.tokenNames = tokenNames
        self.ruleNames = ruleNames
        self.decisionToDFA = [ DFA(state) for state in atn.decisionToState ]
        self.sharedContextCache = PredictionContextCache()
        self._parentContextStack = list()
        # identify the ATN states where pushNewRecursionContext must be called
        self.pushRecursionContextStates = set()
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue
            if state.isPrecedenceDecision:
                self.pushRecursionContextStates.add(state.stateNumber)
        # get atn simulator that knows how to do predictions
        self._interp = ParserATNSimulator(self, atn, self.decisionToDFA, self.sharedContextCache)

    # Begin parsing at startRuleIndex#
    def parse(self, startRuleIndex):
        startRuleStartState = self.atn.ruleToStartState[startRuleIndex]
        rootContext = InterpreterRuleContext(None, ATNState.INVALID_STATE_NUMBER, startRuleIndex)
        if startRuleStartState.isPrecedenceRule:
            self.enterRecursionRule(rootContext, startRuleStartState.stateNumber, startRuleIndex, 0)
        else:
            self.enterRule(rootContext, startRuleStartState.stateNumber, startRuleIndex)
        while True:
            p = self.getATNState()
            if p.stateType==ATNState.RULE_STOP :
                # pop; return from rule
                if len(self._ctx)==0:
                    if startRuleStartState.isPrecedenceRule:
                        result = self._ctx
                        parentContext = self._parentContextStack.pop()
                        self.unrollRecursionContexts(parentContext.a)
                        return result
                    else:
                        self.exitRule()
                        return rootContext
                self.visitRuleStopState(p)

            else:
                try:
                    self.visitState(p)
                except RecognitionException as e:
                    self.state = self.atn.ruleToStopState[p.ruleIndex].stateNumber
                    self._ctx.exception = e
                    self._errHandler.reportError(self, e)
                    self._errHandler.recover(self, e)

    def enterRecursionRule(self, localctx, state, ruleIndex, precedence):
        self._parentContextStack.append((self._ctx, localctx.invokingState))
        super(ParserInterpreter, self).enterRecursionRule(localctx, state, ruleIndex, precedence)

    def getATNState(self):
        return self.atn.states[self.state]

    def visitState(self, p):
        edge = 0
        if len(p.transitions) > 1:
            self._errHandler.sync(self)
            edge = self._interp.adaptivePredict(self._input, p.decision, self._ctx)
        else:
            edge = 1

        transition = p.transitions[edge - 1]
        tt = transition.serializationType
        if tt==Transition.EPSILON:

            if self.pushRecursionContextStates[p.stateNumber] and not isinstance(transition.target, LoopEndState):
                t = self._parentContextStack[-1]
                ctx = InterpreterRuleContext(t[0], t[1], self._ctx.ruleIndex)
                self.pushNewRecursionContext(ctx, self.atn.ruleToStartState[p.ruleIndex].stateNumber, self._ctx.ruleIndex)

        elif tt==Transition.ATOM:

            self.match(transition.label)

        elif tt in [ Transition.RANGE, Transition.SET, Transition.NOT_SET]:

            if not transition.matches(self._input.LA(1), Token.MIN_USER_TOKEN_TYPE, Lexer.MAX_CHAR_VALUE):
                self._errHandler.recoverInline(self)
            self.matchWildcard()

        elif tt==Transition.WILDCARD:

            self.matchWildcard()

        elif tt==Transition.RULE:

            ruleStartState = transition.target
            ruleIndex = ruleStartState.ruleIndex
            ctx = InterpreterRuleContext(self._ctx, p.stateNumber, ruleIndex)
            if ruleStartState.isPrecedenceRule:
                self.enterRecursionRule(ctx, ruleStartState.stateNumber, ruleIndex, transition.precedence)
            else:
                self.enterRule(ctx, transition.target.stateNumber, ruleIndex)

        elif tt==Transition.PREDICATE:

            if not self.sempred(self._ctx, transition.ruleIndex, transition.predIndex):
                raise FailedPredicateException(self)

        elif tt==Transition.ACTION:

            self.action(self._ctx, transition.ruleIndex, transition.actionIndex)

        elif tt==Transition.PRECEDENCE:

            if not self.precpred(self._ctx, transition.precedence):
                msg = ""precpred(_ctx, "" + str(transition.precedence) + "")""
                raise FailedPredicateException(self, msg)

        else:
            raise UnsupportedOperationException(""Unrecognized ATN transition type."")

        self.state = transition.target.stateNumber

    def visitRuleStopState(self, p):
        ruleStartState = self.atn.ruleToStartState[p.ruleIndex]
        if ruleStartState.isPrecedenceRule:
            parentContext = self._parentContextStack.pop()
            self.unrollRecursionContexts(parentContext.a)
            self.state = parentContext[1]
        else:
            self.exitRule()

        ruleTransition = self.atn.states[self.state].transitions[0]
        self.state = ruleTransition.followState.stateNumber",1,334 2000 40 2001 41 58 348 2002 40 2003 44 2004 44 2005 44 2006 44 2007 44 2008 41 58 463 40 2000 44 2003 41 46 2002 40 2008 41 2003 46 2004 61 2004 2003 46 2007 61 2007 2003 46 2005 61 2005 2003 46 2006 61 2006 2003 46 2009 61 91 2010 40 2011 41 385 2011 398 2007 46 2012 93 2003 46 2013 61 2014 40 41 2003 46 2015 61 411 40 41 621 2003 46 2016 61 2017 40 41 385 2011 398 2007 46 2018 58 392 422 2019 40 2011 44 2020 41 58 344 392 2011 46 2021 58 2003 46 2016 46 2022 40 2011 46 2023 41 621 2003 46 2024 61 2025 40 2003 44 2007 44 2003 46 2009 44 2003 46 2013 41 621 348 2026 40 2003 44 2027 41 58 2028 61 2003 46 2007 46 2029 91 2027 93 2030 61 2031 40 303 44 2032 46 2033 44 2027 41 392 2028 46 2034 58 2003 46 2035 40 2030 44 2028 46 2023 44 2027 44 1500 41 360 58 2003 46 2036 40 2030 44 2028 46 2023 44 2027 41 496 304 58 2037 61 2003 46 2038 40 41 392 2037 46 2039 614 2032 46 2040 58 621 392 2041 40 2003 46 2042 41 614 1500 58 392 2028 46 2034 58 2043 61 2003 46 2042 2044 61 2003 46 2015 46 2045 40 41 2003 46 2046 40 2044 46 2047 41 450 2043 360 58 2003 46 2048 40 41 450 2030 2003 46 2049 40 2037 41 360 58 474 58 2003 46 2050 40 2037 41 374 2051 311 2052 58 2003 46 2011 61 2003 46 2007 46 2053 91 2037 46 2054 93 46 2023 2003 46 2042 46 2055 61 2052 2003 46 2056 46 2057 40 2003 44 2052 41 2003 46 2056 46 2058 40 2003 44 2052 41 348 2035 40 2003 44 2059 44 2011 44 2054 44 2060 41 58 2003 46 2015 46 2061 40 40 2003 46 2042 44 2059 46 2062 41 41 463 40 2000 44 2003 41 46 2035 40 2059 44 2011 44 2054 44 2060 41 348 2038 40 2003 41 58 450 2003 46 2007 46 2018 91 2003 46 2011 93 348 2050 40 2003 44 2037 41 58 2063 61 1500 392 2041 40 2037 46 2064 41 62 1501 58 2003 46 2056 46 2065 40 2003 41 2063 61 2003 46 2024 46 2066 40 2003 46 2067 44 2037 46 2068 44 2003 46 2042 41 360 58 2063 61 1501 2069 61 2037 46 2064 91 2063 45 1501 93 2070 61 2069 46 2071 392 2070 614 2072 46 2073 58 392 2003 46 2016 91 2037 46 2023 93 308 422 2019 40 2069 46 2074 44 2075 41 58 2076 61 2003 46 2015 91 45 1501 93 2077 61 2031 40 2076 91 1500 93 44 2076 91 1501 93 44 2003 46 2042 46 2054 41 2003 46 2078 40 2077 44 2003 46 2007 46 2029 91 2037 46 2054 93 46 2023 44 2003 46 2042 46 2054 41 359 2070 614 2072 46 2079 58 2003 46 2080 40 2069 46 2081 41 359 2070 398 91 2072 46 2082 44 2072 46 2083 44 2072 46 2084 93 58 392 422 2069 46 2085 40 2003 46 2067 46 2086 40 1501 41 44 2087 46 2088 44 2089 46 2090 41 58 2003 46 2056 46 2091 40 2003 41 2003 46 2092 40 41 359 2070 614 2072 46 2093 58 2003 46 2092 40 41 359 2070 614 2072 46 2094 58 2095 61 2069 46 2074 2054 61 2095 46 2054 2077 61 2031 40 2003 46 2042 44 2037 46 2023 44 2054 41 392 2095 46 2034 58 2003 46 2035 40 2077 44 2095 46 2023 44 2054 44 2069 46 2060 41 360 58 2003 46 2036 40 2077 44 2069 46 2074 46 2023 44 2054 41 359 2070 614 2072 46 2096 58 392 422 2003 46 2097 40 2003 46 2042 44 2069 46 2054 44 2069 46 2098 41 58 440 2099 40 2003 41 359 2070 614 2072 46 2100 58 2003 46 2101 40 2003 46 2042 44 2069 46 2054 44 2069 46 2102 41 359 2070 614 2072 46 2103 58 392 422 2003 46 2104 40 2003 46 2042 44 2069 46 2060 41 58 2105 61 648 43 2106 40 2069 46 2060 41 43 648 440 2099 40 2003 44 2105 41 360 58 440 2107 40 648 41 2003 46 2011 61 2069 46 2074 46 2023 348 2049 40 2003 44 2037 41 58 2095 61 2003 46 2007 46 2029 91 2037 46 2054 93 392 2095 46 2034 58 2044 61 2003 46 2015 46 2045 40 41 2003 46 2046 40 2044 46 2047 41 2003 46 2011 61 2044 91 1501 93 360 58 2003 46 2048 40 41 2108 61 2003 46 2007 46 2018 91 2003 46 2011 93 46 2064 91 1500 93 2003 46 2011 61 2108 46 2109 46 2023 
133969,Python,"class StateTests(SimpleTestCase):
    """"""
    Tests state construction, rendering and modification by operations.
    """"""

    def test_create(self):
        """"""
        Tests making a ProjectState from an Apps
        """"""

        new_apps = Apps([""migrations""])

        class Author(models.Model):
            name = models.CharField(max_length=255)
            bio = models.TextField()
            age = models.IntegerField(blank=True, null=True)

            class Meta:
                app_label = ""migrations""
                apps = new_apps
                unique_together = [""name"", ""bio""]
                index_together = [""bio"", ""age""]

        class AuthorProxy(Author):
            class Meta:
                app_label = ""migrations""
                apps = new_apps
                proxy = True
                ordering = [""name""]

        class SubAuthor(Author):
            width = models.FloatField(null=True)

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class Book(models.Model):
            title = models.CharField(max_length=1000)
            author = models.ForeignKey(Author, models.CASCADE)
            contributors = models.ManyToManyField(Author)

            class Meta:
                app_label = ""migrations""
                apps = new_apps
                verbose_name = ""tome""
                db_table = ""test_tome""
                indexes = [models.Index(fields=['title'])]

        class Food(models.Model):

            food_mgr = FoodManager('a', 'b')
            food_qs = FoodQuerySet.as_manager()
            food_no_mgr = NoMigrationFoodManager('x', 'y')

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class FoodNoManagers(models.Model):

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class FoodNoDefaultManager(models.Model):

            food_no_mgr = NoMigrationFoodManager('x', 'y')
            food_mgr = FoodManager('a', 'b')
            food_qs = FoodQuerySet.as_manager()

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        mgr1 = FoodManager('a', 'b')
        mgr2 = FoodManager('x', 'y', c=3, d=4)

        class FoodOrderedManagers(models.Model):
            # The managers on this model should be ordered by their creation
            # counter and not by the order in model body

            food_no_mgr = NoMigrationFoodManager('x', 'y')
            food_mgr2 = mgr2
            food_mgr1 = mgr1

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        project_state = ProjectState.from_apps(new_apps)
        author_state = project_state.models['migrations', 'author']
        author_proxy_state = project_state.models['migrations', 'authorproxy']
        sub_author_state = project_state.models['migrations', 'subauthor']
        book_state = project_state.models['migrations', 'book']
        food_state = project_state.models['migrations', 'food']
        food_no_managers_state = project_state.models['migrations', 'foodnomanagers']
        food_no_default_manager_state = project_state.models['migrations', 'foodnodefaultmanager']
        food_order_manager_state = project_state.models['migrations', 'foodorderedmanagers']
        book_index = models.Index(fields=['title'])
        book_index.set_name_with_model(Book)

        self.assertEqual(author_state.app_label, ""migrations"")
        self.assertEqual(author_state.name, ""Author"")
        self.assertEqual(list(author_state.fields), [""id"", ""name"", ""bio"", ""age""])
        self.assertEqual(author_state.fields['name'].max_length, 255)
        self.assertIs(author_state.fields['bio'].null, False)
        self.assertIs(author_state.fields['age'].null, True)
        self.assertEqual(
            author_state.options,
            {
                ""unique_together"": {(""name"", ""bio"")},
                ""index_together"": {(""bio"", ""age"")},
                ""indexes"": [],
                ""constraints"": [],
            }
        )
        self.assertEqual(author_state.bases, (models.Model,))

        self.assertEqual(book_state.app_label, ""migrations"")
        self.assertEqual(book_state.name, ""Book"")
        self.assertEqual(list(book_state.fields), [""id"", ""title"", ""author"", ""contributors""])
        self.assertEqual(book_state.fields['title'].max_length, 1000)
        self.assertIs(book_state.fields['author'].null, False)
        self.assertEqual(book_state.fields['contributors'].__class__.__name__, 'ManyToManyField')
        self.assertEqual(
            book_state.options,
            {""verbose_name"": ""tome"", ""db_table"": ""test_tome"", ""indexes"": [book_index], ""constraints"": []},
        )
        self.assertEqual(book_state.bases, (models.Model,))

        self.assertEqual(author_proxy_state.app_label, ""migrations"")
        self.assertEqual(author_proxy_state.name, ""AuthorProxy"")
        self.assertEqual(author_proxy_state.fields, {})
        self.assertEqual(
            author_proxy_state.options,
            {""proxy"": True, ""ordering"": [""name""], ""indexes"": [], ""constraints"": []},
        )
        self.assertEqual(author_proxy_state.bases, (""migrations.author"",))

        self.assertEqual(sub_author_state.app_label, ""migrations"")
        self.assertEqual(sub_author_state.name, ""SubAuthor"")
        self.assertEqual(len(sub_author_state.fields), 2)
        self.assertEqual(sub_author_state.bases, (""migrations.author"",))

        # The default manager is used in migrations
        self.assertEqual([name for name, mgr in food_state.managers], ['food_mgr'])
        self.assertTrue(all(isinstance(name, str) for name, mgr in food_state.managers))
        self.assertEqual(food_state.managers[0][1].args, ('a', 'b', 1, 2))

        # No explicit managers defined. Migrations will fall back to the default
        self.assertEqual(food_no_managers_state.managers, [])

        # food_mgr is used in migration but isn't the default mgr, hence add the
        # default
        self.assertEqual([name for name, mgr in food_no_default_manager_state.managers],
                         ['food_no_mgr', 'food_mgr'])
        self.assertTrue(all(isinstance(name, str) for name, mgr in food_no_default_manager_state.managers))
        self.assertEqual(food_no_default_manager_state.managers[0][1].__class__, models.Manager)
        self.assertIsInstance(food_no_default_manager_state.managers[1][1], FoodManager)

        self.assertEqual([name for name, mgr in food_order_manager_state.managers],
                         ['food_mgr1', 'food_mgr2'])
        self.assertTrue(all(isinstance(name, str) for name, mgr in food_order_manager_state.managers))
        self.assertEqual([mgr.args for name, mgr in food_order_manager_state.managers],
                         [('a', 'b', 1, 2), ('x', 'y', 3, 4)])

    def test_custom_default_manager_added_to_the_model_state(self):
        """"""
        When the default manager of the model is a custom manager,
        it needs to be added to the model state.
        """"""
        new_apps = Apps(['migrations'])
        custom_manager = models.Manager()

        class Author(models.Model):
            objects = models.TextField()
            authors = custom_manager

            class Meta:
                app_label = 'migrations'
                apps = new_apps

        project_state = ProjectState.from_apps(new_apps)
        author_state = project_state.models['migrations', 'author']
        self.assertEqual(author_state.managers, [('authors', custom_manager)])

    def test_custom_default_manager_named_objects_with_false_migration_flag(self):
        """"""
        When a manager is added with a name of 'objects' but it does not
        have `use_in_migrations = True`, no migration should be added to the
        model state (#26643).
        """"""
        new_apps = Apps(['migrations'])

        class Author(models.Model):
            objects = models.Manager()

            class Meta:
                app_label = 'migrations'
                apps = new_apps

        project_state = ProjectState.from_apps(new_apps)
        author_state = project_state.models['migrations', 'author']
        self.assertEqual(author_state.managers, [])

    def test_no_duplicate_managers(self):
        """"""
        When a manager is added with `use_in_migrations = True` and a parent
        model had a manager with the same name and `use_in_migrations = True`,
        the parent's manager shouldn't appear in the model state (#26881).
        """"""
        new_apps = Apps(['migrations'])

        class PersonManager(models.Manager):
            use_in_migrations = True

        class Person(models.Model):
            objects = PersonManager()

            class Meta:
                abstract = True

        class BossManager(PersonManager):
            use_in_migrations = True

        class Boss(Person):
            objects = BossManager()

            class Meta:
                app_label = 'migrations'
                apps = new_apps

        project_state = ProjectState.from_apps(new_apps)
        boss_state = project_state.models['migrations', 'boss']
        self.assertEqual(boss_state.managers, [('objects', Boss.objects)])

    def test_custom_default_manager(self):
        new_apps = Apps(['migrations'])

        class Author(models.Model):
            manager1 = models.Manager()
            manager2 = models.Manager()

            class Meta:
                app_label = 'migrations'
                apps = new_apps
                default_manager_name = 'manager2'

        project_state = ProjectState.from_apps(new_apps)
        author_state = project_state.models['migrations', 'author']
        self.assertEqual(author_state.options['default_manager_name'], 'manager2')
        self.assertEqual(author_state.managers, [('manager2', Author.manager1)])

    def test_custom_base_manager(self):
        new_apps = Apps(['migrations'])

        class Author(models.Model):
            manager1 = models.Manager()
            manager2 = models.Manager()

            class Meta:
                app_label = 'migrations'
                apps = new_apps
                base_manager_name = 'manager2'

        class Author2(models.Model):
            manager1 = models.Manager()
            manager2 = models.Manager()

            class Meta:
                app_label = 'migrations'
                apps = new_apps
                base_manager_name = 'manager1'

        project_state = ProjectState.from_apps(new_apps)

        author_state = project_state.models['migrations', 'author']
        self.assertEqual(author_state.options['base_manager_name'], 'manager2')
        self.assertEqual(author_state.managers, [
            ('manager1', Author.manager1),
            ('manager2', Author.manager2),
        ])

        author2_state = project_state.models['migrations', 'author2']
        self.assertEqual(author2_state.options['base_manager_name'], 'manager1')
        self.assertEqual(author2_state.managers, [
            ('manager1', Author2.manager1),
        ])

    def test_apps_bulk_update(self):
        """"""
        StateApps.bulk_update() should update apps.ready to False and reset
        the value afterward.
        """"""
        project_state = ProjectState()
        apps = project_state.apps
        with apps.bulk_update():
            self.assertFalse(apps.ready)
        self.assertTrue(apps.ready)
        with self.assertRaises(ValueError):
            with apps.bulk_update():
                self.assertFalse(apps.ready)
                raise ValueError()
        self.assertTrue(apps.ready)

    def test_render(self):
        """"""
        Tests rendering a ProjectState into an Apps.
        """"""
        project_state = ProjectState()
        project_state.add_model(ModelState(
            app_label=""migrations"",
            name=""Tag"",
            fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""name"", models.CharField(max_length=100)),
                (""hidden"", models.BooleanField()),
            ],
        ))
        project_state.add_model(ModelState(
            app_label=""migrations"",
            name=""SubTag"",
            fields=[
                ('tag_ptr', models.OneToOneField(
                    'migrations.Tag',
                    models.CASCADE,
                    auto_created=True,
                    parent_link=True,
                    primary_key=True,
                    to_field='id',
                    serialize=False,
                )),
                (""awesome"", models.BooleanField()),
            ],
            bases=(""migrations.Tag"",),
        ))

        base_mgr = models.Manager()
        mgr1 = FoodManager('a', 'b')
        mgr2 = FoodManager('x', 'y', c=3, d=4)
        project_state.add_model(ModelState(
            app_label=""migrations"",
            name=""Food"",
            fields=[
                (""id"", models.AutoField(primary_key=True)),
            ],
            managers=[
                # The ordering we really want is objects, mgr1, mgr2
                ('default', base_mgr),
                ('food_mgr2', mgr2),
                ('food_mgr1', mgr1),
            ]
        ))

        new_apps = project_state.apps
        self.assertEqual(new_apps.get_model(""migrations"", ""Tag"")._meta.get_field(""name"").max_length, 100)
        self.assertIs(new_apps.get_model(""migrations"", ""Tag"")._meta.get_field(""hidden"").null, False)

        self.assertEqual(len(new_apps.get_model(""migrations"", ""SubTag"")._meta.local_fields), 2)

        Food = new_apps.get_model(""migrations"", ""Food"")
        self.assertEqual([mgr.name for mgr in Food._meta.managers],
                         ['default', 'food_mgr1', 'food_mgr2'])
        self.assertTrue(all(isinstance(mgr.name, str) for mgr in Food._meta.managers))
        self.assertEqual([mgr.__class__ for mgr in Food._meta.managers],
                         [models.Manager, FoodManager, FoodManager])

    def test_render_model_inheritance(self):
        class Book(models.Model):
            title = models.CharField(max_length=1000)

            class Meta:
                app_label = ""migrations""
                apps = Apps()

        class Novel(Book):
            class Meta:
                app_label = ""migrations""
                apps = Apps()

        # First, test rendering individually
        apps = Apps([""migrations""])

        # We shouldn't be able to render yet
        ms = ModelState.from_model(Novel)
        with self.assertRaises(InvalidBasesError):
            ms.render(apps)

        # Once the parent model is in the app registry, it should be fine
        ModelState.from_model(Book).render(apps)
        ModelState.from_model(Novel).render(apps)

    def test_render_model_with_multiple_inheritance(self):
        class Foo(models.Model):
            class Meta:
                app_label = ""migrations""
                apps = Apps()

        class Bar(models.Model):
            class Meta:
                app_label = ""migrations""
                apps = Apps()

        class FooBar(Foo, Bar):
            class Meta:
                app_label = ""migrations""
                apps = Apps()

        class AbstractSubFooBar(FooBar):
            class Meta:
                abstract = True
                apps = Apps()

        class SubFooBar(AbstractSubFooBar):
            class Meta:
                app_label = ""migrations""
                apps = Apps()

        apps = Apps([""migrations""])

        # We shouldn't be able to render yet
        ms = ModelState.from_model(FooBar)
        with self.assertRaises(InvalidBasesError):
            ms.render(apps)

        # Once the parent models are in the app registry, it should be fine
        ModelState.from_model(Foo).render(apps)
        self.assertSequenceEqual(ModelState.from_model(Foo).bases, [models.Model])
        ModelState.from_model(Bar).render(apps)
        self.assertSequenceEqual(ModelState.from_model(Bar).bases, [models.Model])
        ModelState.from_model(FooBar).render(apps)
        self.assertSequenceEqual(ModelState.from_model(FooBar).bases, ['migrations.foo', 'migrations.bar'])
        ModelState.from_model(SubFooBar).render(apps)
        self.assertSequenceEqual(ModelState.from_model(SubFooBar).bases, ['migrations.foobar'])

    def test_render_project_dependencies(self):
        """"""
        The ProjectState render method correctly renders models
        to account for inter-model base dependencies.
        """"""
        new_apps = Apps()

        class A(models.Model):
            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class B(A):
            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class C(B):
            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class D(A):
            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class E(B):
            class Meta:
                app_label = ""migrations""
                apps = new_apps
                proxy = True

        class F(D):
            class Meta:
                app_label = ""migrations""
                apps = new_apps
                proxy = True

        # Make a ProjectState and render it
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        project_state.add_model(ModelState.from_model(B))
        project_state.add_model(ModelState.from_model(C))
        project_state.add_model(ModelState.from_model(D))
        project_state.add_model(ModelState.from_model(E))
        project_state.add_model(ModelState.from_model(F))
        final_apps = project_state.apps
        self.assertEqual(len(final_apps.get_models()), 6)

        # Now make an invalid ProjectState and make sure it fails
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        project_state.add_model(ModelState.from_model(B))
        project_state.add_model(ModelState.from_model(C))
        project_state.add_model(ModelState.from_model(F))
        with self.assertRaises(InvalidBasesError):
            project_state.apps

    def test_render_unique_app_labels(self):
        """"""
        The ProjectState render method doesn't raise an
        ImproperlyConfigured exception about unique labels if two dotted app
        names have the same last part.
        """"""
        class A(models.Model):
            class Meta:
                app_label = ""django.contrib.auth""

        class B(models.Model):
            class Meta:
                app_label = ""vendor.auth""

        # Make a ProjectState and render it
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        project_state.add_model(ModelState.from_model(B))
        self.assertEqual(len(project_state.apps.get_models()), 2)

    def test_reload_related_model_on_non_relational_fields(self):
        """"""
        The model is reloaded even on changes that are not involved in
        relations. Other models pointing to or from it are also reloaded.
        """"""
        project_state = ProjectState()
        project_state.apps  # Render project state.
        project_state.add_model(ModelState('migrations', 'A', []))
        project_state.add_model(ModelState('migrations', 'B', [
            ('a', models.ForeignKey('A', models.CASCADE)),
        ]))
        project_state.add_model(ModelState('migrations', 'C', [
            ('b', models.ForeignKey('B', models.CASCADE)),
            ('name', models.TextField()),
        ]))
        project_state.add_model(ModelState('migrations', 'D', [
            ('a', models.ForeignKey('A', models.CASCADE)),
        ]))
        operation = AlterField(
            model_name='C',
            name='name',
            field=models.TextField(blank=True),
        )
        operation.state_forwards('migrations', project_state)
        project_state.reload_model('migrations', 'a', delay=True)
        A = project_state.apps.get_model('migrations.A')
        B = project_state.apps.get_model('migrations.B')
        D = project_state.apps.get_model('migrations.D')
        self.assertIs(B._meta.get_field('a').related_model, A)
        self.assertIs(D._meta.get_field('a').related_model, A)

    def test_reload_model_relationship_consistency(self):
        project_state = ProjectState()
        project_state.add_model(ModelState('migrations', 'A', []))
        project_state.add_model(ModelState('migrations', 'B', [
            ('a', models.ForeignKey('A', models.CASCADE)),
        ]))
        project_state.add_model(ModelState('migrations', 'C', [
            ('b', models.ForeignKey('B', models.CASCADE)),
        ]))
        A = project_state.apps.get_model('migrations.A')
        B = project_state.apps.get_model('migrations.B')
        C = project_state.apps.get_model('migrations.C')
        self.assertEqual([r.related_model for r in A._meta.related_objects], [B])
        self.assertEqual([r.related_model for r in B._meta.related_objects], [C])
        self.assertEqual([r.related_model for r in C._meta.related_objects], [])

        project_state.reload_model('migrations', 'a', delay=True)
        A = project_state.apps.get_model('migrations.A')
        B = project_state.apps.get_model('migrations.B')
        C = project_state.apps.get_model('migrations.C')
        self.assertEqual([r.related_model for r in A._meta.related_objects], [B])
        self.assertEqual([r.related_model for r in B._meta.related_objects], [C])
        self.assertEqual([r.related_model for r in C._meta.related_objects], [])

    def test_add_relations(self):
        """"""
        #24573 - Adding relations to existing models should reload the
        referenced models too.
        """"""
        new_apps = Apps()

        class A(models.Model):
            class Meta:
                app_label = 'something'
                apps = new_apps

        class B(A):
            class Meta:
                app_label = 'something'
                apps = new_apps

        class C(models.Model):
            class Meta:
                app_label = 'something'
                apps = new_apps

        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        project_state.add_model(ModelState.from_model(B))
        project_state.add_model(ModelState.from_model(C))

        project_state.apps  # We need to work with rendered models

        old_state = project_state.clone()
        model_a_old = old_state.apps.get_model('something', 'A')
        model_b_old = old_state.apps.get_model('something', 'B')
        model_c_old = old_state.apps.get_model('something', 'C')
        # The relations between the old models are correct
        self.assertIs(model_a_old._meta.get_field('b').related_model, model_b_old)
        self.assertIs(model_b_old._meta.get_field('a_ptr').related_model, model_a_old)

        operation = AddField('c', 'to_a', models.OneToOneField(
            'something.A',
            models.CASCADE,
            related_name='from_c',
        ))
        operation.state_forwards('something', project_state)
        model_a_new = project_state.apps.get_model('something', 'A')
        model_b_new = project_state.apps.get_model('something', 'B')
        model_c_new = project_state.apps.get_model('something', 'C')

        # All models have changed
        self.assertIsNot(model_a_old, model_a_new)
        self.assertIsNot(model_b_old, model_b_new)
        self.assertIsNot(model_c_old, model_c_new)
        # The relations between the old models still hold
        self.assertIs(model_a_old._meta.get_field('b').related_model, model_b_old)
        self.assertIs(model_b_old._meta.get_field('a_ptr').related_model, model_a_old)
        # The relations between the new models correct
        self.assertIs(model_a_new._meta.get_field('b').related_model, model_b_new)
        self.assertIs(model_b_new._meta.get_field('a_ptr').related_model, model_a_new)
        self.assertIs(model_a_new._meta.get_field('from_c').related_model, model_c_new)
        self.assertIs(model_c_new._meta.get_field('to_a').related_model, model_a_new)

    def test_remove_relations(self):
        """"""
        #24225 - Relations between models are updated while
        remaining the relations and references for models of an old state.
        """"""
        new_apps = Apps()

        class A(models.Model):
            class Meta:
                app_label = ""something""
                apps = new_apps

        class B(models.Model):
            to_a = models.ForeignKey(A, models.CASCADE)

            class Meta:
                app_label = ""something""
                apps = new_apps

        def get_model_a(state):
            return [mod for mod in state.apps.get_models() if mod._meta.model_name == 'a'][0]

        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        project_state.add_model(ModelState.from_model(B))
        self.assertEqual(len(get_model_a(project_state)._meta.related_objects), 1)
        old_state = project_state.clone()

        operation = RemoveField(""b"", ""to_a"")
        operation.state_forwards(""something"", project_state)
        # Model from old_state still has the relation
        model_a_old = get_model_a(old_state)
        model_a_new = get_model_a(project_state)
        self.assertIsNot(model_a_old, model_a_new)
        self.assertEqual(len(model_a_old._meta.related_objects), 1)
        self.assertEqual(len(model_a_new._meta.related_objects), 0)

        # Same test for deleted model
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        project_state.add_model(ModelState.from_model(B))
        old_state = project_state.clone()

        operation = DeleteModel(""b"")
        operation.state_forwards(""something"", project_state)
        model_a_old = get_model_a(old_state)
        model_a_new = get_model_a(project_state)
        self.assertIsNot(model_a_old, model_a_new)
        self.assertEqual(len(model_a_old._meta.related_objects), 1)
        self.assertEqual(len(model_a_new._meta.related_objects), 0)

    def test_self_relation(self):
        """"""
        #24513 - Modifying an object pointing to itself would cause it to be
        rendered twice and thus breaking its related M2M through objects.
        """"""
        class A(models.Model):
            to_a = models.ManyToManyField('something.A', symmetrical=False)

            class Meta:
                app_label = ""something""

        def get_model_a(state):
            return [mod for mod in state.apps.get_models() if mod._meta.model_name == 'a'][0]

        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(A))
        self.assertEqual(len(get_model_a(project_state)._meta.related_objects), 1)
        old_state = project_state.clone()

        operation = AlterField(
            model_name=""a"",
            name=""to_a"",
            field=models.ManyToManyField(""something.A"", symmetrical=False, blank=True)
        )
        # At this point the model would be rendered twice causing its related
        # M2M through objects to point to an old copy and thus breaking their
        # attribute lookup.
        operation.state_forwards(""something"", project_state)

        model_a_old = get_model_a(old_state)
        model_a_new = get_model_a(project_state)
        self.assertIsNot(model_a_old, model_a_new)

        # The old model's _meta is still consistent
        field_to_a_old = model_a_old._meta.get_field(""to_a"")
        self.assertEqual(field_to_a_old.m2m_field_name(), ""from_a"")
        self.assertEqual(field_to_a_old.m2m_reverse_field_name(), ""to_a"")
        self.assertIs(field_to_a_old.related_model, model_a_old)
        self.assertIs(field_to_a_old.remote_field.through._meta.get_field('to_a').related_model, model_a_old)
        self.assertIs(field_to_a_old.remote_field.through._meta.get_field('from_a').related_model, model_a_old)

        # The new model's _meta is still consistent
        field_to_a_new = model_a_new._meta.get_field(""to_a"")
        self.assertEqual(field_to_a_new.m2m_field_name(), ""from_a"")
        self.assertEqual(field_to_a_new.m2m_reverse_field_name(), ""to_a"")
        self.assertIs(field_to_a_new.related_model, model_a_new)
        self.assertIs(field_to_a_new.remote_field.through._meta.get_field('to_a').related_model, model_a_new)
        self.assertIs(field_to_a_new.remote_field.through._meta.get_field('from_a').related_model, model_a_new)

    def test_equality(self):
        """"""
        == and != are implemented correctly.
        """"""
        # Test two things that should be equal
        project_state = ProjectState()
        project_state.add_model(ModelState(
            ""migrations"",
            ""Tag"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""name"", models.CharField(max_length=100)),
                (""hidden"", models.BooleanField()),
            ],
            {},
            None,
        ))
        project_state.apps  # Fill the apps cached property
        other_state = project_state.clone()
        self.assertEqual(project_state, project_state)
        self.assertEqual(project_state, other_state)
        self.assertIs(project_state != project_state, False)
        self.assertIs(project_state != other_state, False)
        self.assertNotEqual(project_state.apps, other_state.apps)

        # Make a very small change (max_len 99) and see if that affects it
        project_state = ProjectState()
        project_state.add_model(ModelState(
            ""migrations"",
            ""Tag"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""name"", models.CharField(max_length=99)),
                (""hidden"", models.BooleanField()),
            ],
            {},
            None,
        ))
        self.assertNotEqual(project_state, other_state)
        self.assertIs(project_state == other_state, False)

    def test_dangling_references_throw_error(self):
        new_apps = Apps()

        class Author(models.Model):
            name = models.TextField()

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class Publisher(models.Model):
            name = models.TextField()

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class Book(models.Model):
            author = models.ForeignKey(Author, models.CASCADE)
            publisher = models.ForeignKey(Publisher, models.CASCADE)

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class Magazine(models.Model):
            authors = models.ManyToManyField(Author)

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        # Make a valid ProjectState and render it
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(Author))
        project_state.add_model(ModelState.from_model(Publisher))
        project_state.add_model(ModelState.from_model(Book))
        project_state.add_model(ModelState.from_model(Magazine))
        self.assertEqual(len(project_state.apps.get_models()), 4)

        # now make an invalid one with a ForeignKey
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(Book))
        msg = (
            ""The field migrations.Book.author was declared with a lazy reference ""
            ""to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\n""
            ""The field migrations.Book.publisher was declared with a lazy reference ""
            ""to 'migrations.publisher', but app 'migrations' doesn't provide model 'publisher'.""
        )
        with self.assertRaisesMessage(ValueError, msg):
            project_state.apps

        # And another with ManyToManyField.
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(Magazine))
        msg = (
            ""The field migrations.Magazine.authors was declared with a lazy reference ""
            ""to 'migrations.author\', but app 'migrations' doesn't provide model 'author'.\n""
            ""The field migrations.Magazine_authors.author was declared with a lazy reference ""
            ""to \'migrations.author\', but app 'migrations' doesn't provide model 'author'.""
        )
        with self.assertRaisesMessage(ValueError, msg):
            project_state.apps

        # And now with multiple models and multiple fields.
        project_state.add_model(ModelState.from_model(Book))
        msg = (
            ""The field migrations.Book.author was declared with a lazy reference ""
            ""to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\n""
            ""The field migrations.Book.publisher was declared with a lazy reference ""
            ""to 'migrations.publisher', but app 'migrations' doesn't provide model 'publisher'.\n""
            ""The field migrations.Magazine.authors was declared with a lazy reference ""
            ""to 'migrations.author', but app 'migrations' doesn't provide model 'author'.\n""
            ""The field migrations.Magazine_authors.author was declared with a lazy reference ""
            ""to 'migrations.author', but app 'migrations' doesn't provide model 'author'.""
        )
        with self.assertRaisesMessage(ValueError, msg):
            project_state.apps

    def test_reference_mixed_case_app_label(self):
        new_apps = Apps()

        class Author(models.Model):
            class Meta:
                app_label = 'MiXedCase_migrations'
                apps = new_apps

        class Book(models.Model):
            author = models.ForeignKey(Author, models.CASCADE)

            class Meta:
                app_label = 'MiXedCase_migrations'
                apps = new_apps

        class Magazine(models.Model):
            authors = models.ManyToManyField(Author)

            class Meta:
                app_label = 'MiXedCase_migrations'
                apps = new_apps

        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(Author))
        project_state.add_model(ModelState.from_model(Book))
        project_state.add_model(ModelState.from_model(Magazine))
        self.assertEqual(len(project_state.apps.get_models()), 3)

    def test_real_apps(self):
        """"""
        Including real apps can resolve dangling FK errors.
        This test relies on the fact that contenttypes is always loaded.
        """"""
        new_apps = Apps()

        class TestModel(models.Model):
            ct = models.ForeignKey(""contenttypes.ContentType"", models.CASCADE)

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        # If we just stick it into an empty state it should fail
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(TestModel))
        with self.assertRaises(ValueError):
            project_state.apps

        # If we include the real app it should succeed
        project_state = ProjectState(real_apps={'contenttypes'})
        project_state.add_model(ModelState.from_model(TestModel))
        rendered_state = project_state.apps
        self.assertEqual(
            len([x for x in rendered_state.get_models() if x._meta.app_label == ""migrations""]),
            1,
        )

    def test_real_apps_non_set(self):
        with self.assertRaises(AssertionError):
            ProjectState(real_apps=['contenttypes'])

    def test_ignore_order_wrt(self):
        """"""
        Makes sure ProjectState doesn't include OrderWrt fields when
        making from existing models.
        """"""
        new_apps = Apps()

        class Author(models.Model):
            name = models.TextField()

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        class Book(models.Model):
            author = models.ForeignKey(Author, models.CASCADE)

            class Meta:
                app_label = ""migrations""
                apps = new_apps
                order_with_respect_to = ""author""

        # Make a valid ProjectState and render it
        project_state = ProjectState()
        project_state.add_model(ModelState.from_model(Author))
        project_state.add_model(ModelState.from_model(Book))
        self.assertEqual(
            list(project_state.models['migrations', 'book'].fields),
            [""id"", ""author""],
        )

    def test_manager_refer_correct_model_version(self):
        """"""
        #24147 - Managers refer to the correct version of a
        historical model
        """"""
        project_state = ProjectState()
        project_state.add_model(ModelState(
            app_label=""migrations"",
            name=""Tag"",
            fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""hidden"", models.BooleanField()),
            ],
            managers=[
                ('food_mgr', FoodManager('a', 'b')),
                ('food_qs', FoodQuerySet.as_manager()),
            ]
        ))

        old_model = project_state.apps.get_model('migrations', 'tag')

        new_state = project_state.clone()
        operation = RemoveField(""tag"", ""hidden"")
        operation.state_forwards(""migrations"", new_state)

        new_model = new_state.apps.get_model('migrations', 'tag')

        self.assertIsNot(old_model, new_model)
        self.assertIs(old_model, old_model.food_mgr.model)
        self.assertIs(old_model, old_model.food_qs.model)
        self.assertIs(new_model, new_model.food_mgr.model)
        self.assertIs(new_model, new_model.food_qs.model)
        self.assertIsNot(old_model.food_mgr, new_model.food_mgr)
        self.assertIsNot(old_model.food_qs, new_model.food_qs)
        self.assertIsNot(old_model.food_mgr.model, new_model.food_mgr.model)
        self.assertIsNot(old_model.food_qs.model, new_model.food_qs.model)

    def test_choices_iterator(self):
        """"""
        #24483 - ProjectState.from_apps should not destructively consume
        Field.choices iterators.
        """"""
        new_apps = Apps([""migrations""])
        choices = [('a', 'A'), ('b', 'B')]

        class Author(models.Model):
            name = models.CharField(max_length=255)
            choice = models.CharField(max_length=255, choices=iter(choices))

            class Meta:
                app_label = ""migrations""
                apps = new_apps

        ProjectState.from_apps(new_apps)
        choices_field = Author._meta.get_field('choice')
        self.assertEqual(list(choices_field.choices), choices)",1,334 2000 40 2001 41 58 648 348 2002 40 2003 41 58 648 2004 61 2005 40 91 648 93 41 334 2006 40 2007 46 2008 41 58 2009 61 2007 46 2010 40 2011 61 1504 41 2012 61 2007 46 2013 40 41 2014 61 2007 46 2015 40 2016 61 304 44 424 61 304 41 334 2017 58 2018 61 648 2019 61 2004 2020 61 91 648 44 648 93 2021 61 91 648 44 648 93 334 2022 40 2006 41 58 334 2017 58 2018 61 648 2019 61 2004 2023 61 304 2024 61 91 648 93 334 2025 40 2006 41 58 2026 61 2007 46 2027 40 424 61 304 41 334 2017 58 2018 61 648 2019 61 2004 334 2028 40 2007 46 2008 41 58 2029 61 2007 46 2010 40 2011 61 1504 41 2030 61 2007 46 2031 40 2006 44 2007 46 2032 41 2033 61 2007 46 2034 40 2006 41 334 2017 58 2018 61 648 2019 61 2004 2035 61 648 2036 61 648 2037 61 91 2007 46 2038 40 2039 61 91 648 93 41 93 334 2040 40 2007 46 2008 41 58 2041 61 2042 40 648 44 648 41 2043 61 2044 46 2045 40 41 2046 61 2047 40 648 44 648 41 334 2017 58 2018 61 648 2019 61 2004 334 2048 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2049 40 2007 46 2008 41 58 2046 61 2047 40 648 44 648 41 2041 61 2042 40 648 44 648 41 2043 61 2044 46 2045 40 41 334 2017 58 2018 61 648 2019 61 2004 2050 61 2042 40 648 44 648 41 2051 61 2042 40 648 44 648 44 2052 61 1502 44 2053 61 1502 41 334 2054 40 2007 46 2008 41 58 621 621 2046 61 2047 40 648 44 648 41 2055 61 2051 2056 61 2050 334 2017 58 2018 61 648 2019 61 2004 2057 61 2058 46 2059 40 2004 41 2060 61 2057 46 2007 91 648 44 648 93 2061 61 2057 46 2007 91 648 44 648 93 2062 61 2057 46 2007 91 648 44 648 93 2063 61 2057 46 2007 91 648 44 648 93 2064 61 2057 46 2007 91 648 44 648 93 2065 61 2057 46 2007 91 648 44 648 93 2066 61 2057 46 2007 91 648 44 648 93 2067 61 2057 46 2007 91 648 44 648 93 2068 61 2007 46 2038 40 2039 61 91 648 93 41 2068 46 2069 40 2028 41 2003 46 2070 40 2060 46 2018 44 648 41 2003 46 2070 40 2060 46 2009 44 648 41 2003 46 2070 40 411 40 2060 46 2039 41 44 91 648 44 648 44 648 44 648 93 41 2003 46 2070 40 2060 46 2039 91 648 93 46 2011 44 1504 41 2003 46 2071 40 2060 46 2039 91 648 93 46 424 44 302 41 2003 46 2071 40 2060 46 2039 91 648 93 46 424 44 304 41 2003 46 2070 40 2060 46 2072 44 123 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 648 58 91 93 44 648 58 91 93 44 125 41 2003 46 2070 40 2060 46 2073 44 40 2007 46 2008 44 41 41 2003 46 2070 40 2063 46 2018 44 648 41 2003 46 2070 40 2063 46 2009 44 648 41 2003 46 2070 40 411 40 2063 46 2039 41 44 91 648 44 648 44 648 44 648 93 41 2003 46 2070 40 2063 46 2039 91 648 93 46 2011 44 1504 41 2003 46 2071 40 2063 46 2039 91 648 93 46 424 44 302 41 2003 46 2070 40 2063 46 2039 91 648 93 46 2074 46 2075 44 648 41 2003 46 2070 40 2063 46 2072 44 123 648 58 648 44 648 58 648 44 648 58 91 2068 93 44 648 58 91 93 125 44 41 2003 46 2070 40 2063 46 2073 44 40 2007 46 2008 44 41 41 2003 46 2070 40 2061 46 2018 44 648 41 2003 46 2070 40 2061 46 2009 44 648 41 2003 46 2070 40 2061 46 2039 44 123 125 41 2003 46 2070 40 2061 46 2072 44 123 648 58 304 44 648 58 91 648 93 44 648 58 91 93 44 648 58 91 93 125 44 41 2003 46 2070 40 2061 46 2073 44 40 648 44 41 41 2003 46 2070 40 2062 46 2018 44 648 41 2003 46 2070 40 2062 46 2009 44 648 41 2003 46 2070 40 2076 40 2062 46 2039 41 44 1502 41 2003 46 2070 40 2062 46 2073 44 40 648 44 41 41 621 2003 46 2070 40 91 2009 385 2009 44 2077 398 2064 46 2078 93 44 91 648 93 41 2003 46 2079 40 2080 40 2081 40 2009 44 2082 41 385 2009 44 2077 398 2064 46 2078 41 41 2003 46 2070 40 2064 46 2078 91 1500 93 91 1501 93 46 2083 44 40 648 44 648 44 1501 44 1502 41 41 621 2003 46 2070 40 2065 46 2078 44 91 93 41 621 621 2003 46 2070 40 91 2009 385 2009 44 2077 398 2066 46 2078 93 44 91 648 44 648 93 41 2003 46 2079 40 2080 40 2081 40 2009 44 2082 41 385 2009 44 2077 398 2066 46 2078 41 41 2003 46 2070 40 2066 46 2078 91 1500 93 91 1501 93 46 2074 44 2007 46 2084 41 2003 46 2085 40 2066 46 2078 91 1501 93 91 1501 93 44 2042 41 2003 46 2070 40 91 2009 385 2009 44 2077 398 2067 46 2078 93 44 91 648 44 648 93 41 2003 46 2079 40 2080 40 2081 40 2009 44 2082 41 385 2009 44 2077 398 2067 46 2078 41 41 2003 46 2070 40 91 2077 46 2083 385 2009 44 2077 398 2067 46 2078 93 44 91 40 648 44 648 44 1501 44 1502 41 44 40 648 44 648 44 1502 44 1502 41 93 41 348 2086 40 2003 41 58 648 2004 61 2005 40 91 648 93 41 2087 61 2007 46 2084 40 41 334 2006 40 2007 46 2008 41 58 2088 61 2007 46 2013 40 41 2089 61 2087 334 2017 58 2018 61 648 2019 61 2004 2057 61 2058 46 2059 40 2004 41 2060 61 2057 46 2007 91 648 44 648 93 2003 46 2070 40 2060 46 2078 44 91 40 648 44 2087 41 93 41 348 2090 40 2003 41 58 648 2004 61 2005 40 91 648 93 41 334 2006 40 2007 46 2008 41 58 2088 61 2007 46 2084 40 41 334 2017 58 2018 61 648 2019 61 2004 2057 61 2058 46 2059 40 2004 41 2060 61 2057 46 2007 91 648 44 648 93 2003 46 2070 40 2060 46 2078 44 91 93 41 348 2091 40 2003 41 58 648 2004 61 2005 40 91 648 93 41 334 2092 40 2007 46 2084 41 58 2093 61 304 334 2094 40 2007 46 2008 41 58 2088 61 2092 40 41 334 2017 58 305 61 304 334 2095 40 2092 41 58 2093 61 304 334 2096 40 2094 41 58 2088 61 2095 40 41 334 2017 58 2018 61 648 2019 61 2004 2057 61 2058 46 2059 40 2004 41 2097 61 2057 46 2007 91 648 44 648 93 2003 46 2070 40 2097 46 2078 44 91 40 648 44 2096 46 2088 41 93 41 348 2098 40 2003 41 58 2004 61 2005 40 91 648 93 41 334 2006 40 2007 46 2008 41 58 2099 61 2007 46 2084 40 41 2100 61 2007 46 2084 40 41 334 2017 58 2018 61 648 2019 61 2004 2101 61 648 2057 61 2058 46 2059 40 2004 41 2060 61 2057 46 2007 91 648 44 648 93 2003 46 2070 40 2060 46 2072 91 648 93 44 648 41 2003 46 2070 40 2060 46 2078 44 91 40 648 44 2006 46 2099 41 93 41 348 2102 40 2003 41 58 2004 61 2005 40 91 648 93 41 334 2006 40 2007 46 2008 41 58 2099 61 2007 46 2084 40 41 2100 61 2007 46 2084 40 41 334 2017 58 2018 61 648 2019 61 2004 2103 61 648 334 2104 40 2007 46 2008 41 58 2099 61 2007 46 2084 40 41 2100 61 2007 46 2084 40 41 334 2017 58 2018 61 648 2019 61 2004 2103 61 648 2057 61 2058 46 2059 40 2004 41 2060 61 2057 46 2007 91 648 44 648 93 2003 46 2070 40 2060 46 2072 91 648 93 44 648 41 2003 46 2070 40 2060 46 2078 44 91 40 648 44 2006 46 2099 41 44 40 648 44 2006 46 2100 41 44 93 41 2105 61 2057 46 2007 91 648 44 648 93 2003 46 2070 40 2105 46 2072 91 648 93 44 648 41 2003 46 2070 40 2105 46 2078 44 91 40 648 44 2104 46 2099 41 44 93 41 348 2106 40 2003 41 58 648 2057 61 2058 40 41 2019 61 2057 46 2019 497 2019 46 2107 40 41 58 2003 46 2108 40 2019 46 2109 41 2003 46 2079 40 2019 46 2109 41 497 2003 46 2110 40 2111 41 58 497 2019 46 2107 40 41 58 2003 46 2108 40 2019 46 2109 41 440 2111 40 41 2003 46 2079 40 2019 46 2109 41 348 2112 40 2003 41 58 648 2057 61 2058 40 41 2057 46 2113 40 2114 40 2018 61 648 44 2009 61 648 44 2039 61 91 40 648 44 2007 46 2115 40 2116 61 304 41 41 44 40 648 44 2007 46 2010 40 2011 61 1503 41 41 44 40 648 44 2007 46 2117 40 41 41 44 93 44 41 41 2057 46 2113 40 2114 40 2018 61 648 44 2009 61 648 44 2039 61 91 40 648 44 2007 46 2118 40 648 44 2007 46 2032 44 2119 61 304 44 2120 61 304 44 2116 61 304 44 2121 61 648 44 2122 61 302 44 41 41 44 40 648 44 2007 46 2117 40 41 41 44 93 44 2073 61 40 648 44 41 44 41 41 2123 61 2007 46 2084 40 41 2050 61 2042 40 648 44 648 41 2051 61 2042 40 648 44 648 44 2052 61 1502 44 2053 61 1502 41 2057 46 2113 40 2114 40 2018 61 648 44 2009 61 648 44 2039 61 91 40 648 44 2007 46 2115 40 2116 61 304 41 41 44 93 44 2078 61 91 621 40 648 44 2123 41 44 40 648 44 2051 41 44 40 648 44 2050 41 44 93 41 41 2004 61 2057 46 2019 2003 46 2070 40 2004 46 2124 40 648 44 648 41 46 2125 46 2126 40 648 41 46 2011 44 1503 41 2003 46 2071 40 2004 46 2124 40 648 44 648 41 46 2125 46 2126 40 648 41 46 424 44 302 41 2003 46 2070 40 2076 40 2004 46 2124 40 648 44 648 41 46 2125 46 2127 41 44 1502 41 2040 61 2004 46 2124 40 648 44 648 41 2003 46 2070 40 91 2077 46 2009 385 2077 398 2040 46 2125 46 2078 93 44 91 648 44 648 44 648 93 41 2003 46 2079 40 2080 40 2081 40 2077 46 2009 44 2082 41 385 2077 398 2040 46 2125 46 2078 41 41 2003 46 2070 40 91 2077 46 2074 385 2077 398 2040 46 2125 46 2078 93 44 91 2007 46 2084 44 2042 44 2042 93 41 348 2128 40 2003 41 58 334 2028 40 2007 46 2008 41 58 2029 61 2007 46 2010 40 2011 61 1504 41 334 2017 58 2018 61 648 2019 61 2005 40 41 334 2129 40 2028 41 58 334 2017 58 2018 61 648 2019 61 2005 40 41 621 2019 61 2005 40 91 648 93 41 621 2130 61 2114 46 2131 40 2129 41 497 2003 46 2110 40 2132 41 58 2130 46 2133 40 2019 41 621 2114 46 2131 40 2028 41 46 2133 40 2019 41 2114 46 2131 40 2129 41 46 2133 40 2019 41 348 2134 40 2003 41 58 334 2135 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2005 40 41 334 2136 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2005 40 41 334 2137 40 2135 44 2136 41 58 334 2017 58 2018 61 648 2019 61 2005 40 41 334 2138 40 2137 41 58 334 2017 58 305 61 304 2019 61 2005 40 41 334 2139 40 2138 41 58 334 2017 58 2018 61 648 2019 61 2005 40 41 2019 61 2005 40 91 648 93 41 621 2130 61 2114 46 2131 40 2137 41 497 2003 46 2110 40 2132 41 58 2130 46 2133 40 2019 41 621 2114 46 2131 40 2135 41 46 2133 40 2019 41 2003 46 2140 40 2114 46 2131 40 2135 41 46 2073 44 91 2007 46 2008 93 41 2114 46 2131 40 2136 41 46 2133 40 2019 41 2003 46 2140 40 2114 46 2131 40 2136 41 46 2073 44 91 2007 46 2008 93 41 2114 46 2131 40 2137 41 46 2133 40 2019 41 2003 46 2140 40 2114 46 2131 40 2137 41 46 2073 44 91 648 44 648 93 41 2114 46 2131 40 2139 41 46 2133 40 2019 41 2003 46 2140 40 2114 46 2131 40 2139 41 46 2073 44 91 648 93 41 348 2141 40 2003 41 58 648 2004 61 2005 40 41 334 2142 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2143 40 2142 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2144 40 2143 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2145 40 2142 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2146 40 2143 41 58 334 2017 58 2018 61 648 2019 61 2004 2023 61 304 334 2147 40 2145 41 58 334 2017 58 2018 61 648 2019 61 2004 2023 61 304 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2057 46 2113 40 2114 46 2131 40 2143 41 41 2057 46 2113 40 2114 46 2131 40 2144 41 41 2057 46 2113 40 2114 46 2131 40 2145 41 41 2057 46 2113 40 2114 46 2131 40 2146 41 41 2057 46 2113 40 2114 46 2131 40 2147 41 41 2148 61 2057 46 2019 2003 46 2070 40 2076 40 2148 46 2149 40 41 41 44 1502 41 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2057 46 2113 40 2114 46 2131 40 2143 41 41 2057 46 2113 40 2114 46 2131 40 2144 41 41 2057 46 2113 40 2114 46 2131 40 2147 41 41 497 2003 46 2110 40 2132 41 58 2057 46 2019 348 2150 40 2003 41 58 648 334 2142 40 2007 46 2008 41 58 334 2017 58 2018 61 648 334 2143 40 2007 46 2008 41 58 334 2017 58 2018 61 648 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2057 46 2113 40 2114 46 2131 40 2143 41 41 2003 46 2070 40 2076 40 2057 46 2019 46 2149 40 41 41 44 1502 41 348 2151 40 2003 41 58 648 2057 61 2058 40 41 2057 46 2019 621 2057 46 2113 40 2114 40 648 44 648 44 91 93 41 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2031 40 648 44 2007 46 2032 41 41 44 93 41 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2031 40 648 44 2007 46 2032 41 41 44 40 648 44 2007 46 2013 40 41 41 44 93 41 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2031 40 648 44 2007 46 2032 41 41 44 93 41 41 2152 61 2153 40 2154 61 648 44 2009 61 648 44 2155 61 2007 46 2013 40 2016 61 304 41 44 41 2152 46 2156 40 648 44 2057 41 2057 46 2157 40 648 44 648 44 2158 61 304 41 2142 61 2057 46 2019 46 2124 40 648 41 2143 61 2057 46 2019 46 2124 40 648 41 2145 61 2057 46 2019 46 2124 40 648 41 2003 46 2071 40 2143 46 2125 46 2126 40 648 41 46 2159 44 2142 41 2003 46 2071 40 2145 46 2125 46 2126 40 648 41 46 2159 44 2142 41 348 2160 40 2003 41 58 2057 61 2058 40 41 2057 46 2113 40 2114 40 648 44 648 44 91 93 41 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2031 40 648 44 2007 46 2032 41 41 44 93 41 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2031 40 648 44 2007 46 2032 41 41 44 93 41 41 2142 61 2057 46 2019 46 2124 40 648 41 2143 61 2057 46 2019 46 2124 40 648 41 2144 61 2057 46 2019 46 2124 40 648 41 2003 46 2070 40 91 2161 46 2159 385 2161 398 2142 46 2125 46 2162 93 44 91 2143 93 41 2003 46 2070 40 91 2161 46 2159 385 2161 398 2143 46 2125 46 2162 93 44 91 2144 93 41 2003 46 2070 40 91 2161 46 2159 385 2161 398 2144 46 2125 46 2162 93 44 91 93 41 2057 46 2157 40 648 44 648 44 2158 61 304 41 2142 61 2057 46 2019 46 2124 40 648 41 2143 61 2057 46 2019 46 2124 40 648 41 2144 61 2057 46 2019 46 2124 40 648 41 2003 46 2070 40 91 2161 46 2159 385 2161 398 2142 46 2125 46 2162 93 44 91 2143 93 41 2003 46 2070 40 91 2161 46 2159 385 2161 398 2143 46 2125 46 2162 93 44 91 2144 93 41 2003 46 2070 40 91 2161 46 2159 385 2161 398 2144 46 2125 46 2162 93 44 91 93 41 348 2163 40 2003 41 58 648 2004 61 2005 40 41 334 2142 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2143 40 2142 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2144 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2004 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2057 46 2113 40 2114 46 2131 40 2143 41 41 2057 46 2113 40 2114 46 2131 40 2144 41 41 2057 46 2019 621 2164 61 2057 46 335 40 41 2165 61 2164 46 2019 46 2124 40 648 44 648 41 2166 61 2164 46 2019 46 2124 40 648 44 648 41 2167 61 2164 46 2019 46 2124 40 648 44 648 41 621 2003 46 2071 40 2165 46 2125 46 2126 40 648 41 46 2159 44 2166 41 2003 46 2071 40 2166 46 2125 46 2126 40 648 41 46 2159 44 2165 41 2152 61 2168 40 648 44 648 44 2007 46 2118 40 648 44 2007 46 2032 44 2169 61 648 44 41 41 2152 46 2156 40 648 44 2057 41 2170 61 2057 46 2019 46 2124 40 648 44 648 41 2171 61 2057 46 2019 46 2124 40 648 44 648 41 2172 61 2057 46 2019 46 2124 40 648 44 648 41 621 2003 46 2173 40 2165 44 2170 41 2003 46 2173 40 2166 44 2171 41 2003 46 2173 40 2167 44 2172 41 621 2003 46 2071 40 2165 46 2125 46 2126 40 648 41 46 2159 44 2166 41 2003 46 2071 40 2166 46 2125 46 2126 40 648 41 46 2159 44 2165 41 621 2003 46 2071 40 2170 46 2125 46 2126 40 648 41 46 2159 44 2171 41 2003 46 2071 40 2171 46 2125 46 2126 40 648 41 46 2159 44 2170 41 2003 46 2071 40 2170 46 2125 46 2126 40 648 41 46 2159 44 2172 41 2003 46 2071 40 2172 46 2125 46 2126 40 648 41 46 2159 44 2170 41 348 2174 40 2003 41 58 648 2004 61 2005 40 41 334 2142 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2143 40 2007 46 2008 41 58 2175 61 2007 46 2031 40 2142 44 2007 46 2032 41 334 2017 58 2018 61 648 2019 61 2004 348 2176 40 2177 41 58 450 91 2178 385 2178 398 2177 46 2019 46 2149 40 41 392 2178 46 2125 46 2154 614 648 93 91 1500 93 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2057 46 2113 40 2114 46 2131 40 2143 41 41 2003 46 2070 40 2076 40 2176 40 2057 41 46 2125 46 2162 41 44 1501 41 2164 61 2057 46 335 40 41 2152 61 2179 40 648 44 648 41 2152 46 2156 40 648 44 2057 41 621 2165 61 2176 40 2164 41 2170 61 2176 40 2057 41 2003 46 2173 40 2165 44 2170 41 2003 46 2070 40 2076 40 2165 46 2125 46 2162 41 44 1501 41 2003 46 2070 40 2076 40 2170 46 2125 46 2162 41 44 1500 41 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2057 46 2113 40 2114 46 2131 40 2143 41 41 2164 61 2057 46 335 40 41 2152 61 2180 40 648 41 2152 46 2156 40 648 44 2057 41 2165 61 2176 40 2164 41 2170 61 2176 40 2057 41 2003 46 2173 40 2165 44 2170 41 2003 46 2070 40 2076 40 2165 46 2125 46 2162 41 44 1501 41 2003 46 2070 40 2076 40 2170 46 2125 46 2162 41 44 1500 41 348 2181 40 2003 41 58 648 334 2142 40 2007 46 2008 41 58 2175 61 2007 46 2034 40 648 44 2182 61 302 41 334 2017 58 2018 61 648 348 2176 40 2177 41 58 450 91 2178 385 2178 398 2177 46 2019 46 2149 40 41 392 2178 46 2125 46 2154 614 648 93 91 1500 93 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2142 41 41 2003 46 2070 40 2076 40 2176 40 2057 41 46 2125 46 2162 41 44 1501 41 2164 61 2057 46 335 40 41 2152 61 2153 40 2154 61 648 44 2009 61 648 44 2155 61 2007 46 2034 40 648 44 2182 61 302 44 2016 61 304 41 41 621 621 621 2152 46 2156 40 648 44 2057 41 2165 61 2176 40 2164 41 2170 61 2176 40 2057 41 2003 46 2173 40 2165 44 2170 41 621 2183 61 2165 46 2125 46 2126 40 648 41 2003 46 2070 40 2183 46 2184 40 41 44 648 41 2003 46 2070 40 2183 46 2185 40 41 44 648 41 2003 46 2071 40 2183 46 2159 44 2165 41 2003 46 2071 40 2183 46 2186 46 2187 46 2125 46 2126 40 648 41 46 2159 44 2165 41 2003 46 2071 40 2183 46 2186 46 2187 46 2125 46 2126 40 648 41 46 2159 44 2165 41 621 2188 61 2170 46 2125 46 2126 40 648 41 2003 46 2070 40 2188 46 2184 40 41 44 648 41 2003 46 2070 40 2188 46 2185 40 41 44 648 41 2003 46 2071 40 2188 46 2159 44 2170 41 2003 46 2071 40 2188 46 2186 46 2187 46 2125 46 2126 40 648 41 46 2159 44 2170 41 2003 46 2071 40 2188 46 2186 46 2187 46 2125 46 2126 40 648 41 46 2159 44 2170 41 348 2189 40 2003 41 58 648 621 2057 61 2058 40 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2115 40 2116 61 304 41 41 44 40 648 44 2007 46 2010 40 2011 61 1503 41 41 44 40 648 44 2007 46 2117 40 41 41 44 93 44 123 125 44 303 44 41 41 2057 46 2019 621 2190 61 2057 46 335 40 41 2003 46 2070 40 2057 44 2057 41 2003 46 2070 40 2057 44 2190 41 2003 46 2071 40 2057 631 2057 44 302 41 2003 46 2071 40 2057 631 2190 44 302 41 2003 46 2191 40 2057 46 2019 44 2190 46 2019 41 621 2057 61 2058 40 41 2057 46 2113 40 2114 40 648 44 648 44 91 40 648 44 2007 46 2115 40 2116 61 304 41 41 44 40 648 44 2007 46 2010 40 2011 61 1503 41 41 44 40 648 44 2007 46 2117 40 41 41 44 93 44 123 125 44 303 44 41 41 2003 46 2191 40 2057 44 2190 41 2003 46 2071 40 2057 614 2190 44 302 41 348 2192 40 2003 41 58 2004 61 2005 40 41 334 2006 40 2007 46 2008 41 58 2009 61 2007 46 2013 40 41 334 2017 58 2018 61 648 2019 61 2004 334 2193 40 2007 46 2008 41 58 2009 61 2007 46 2013 40 41 334 2017 58 2018 61 648 2019 61 2004 334 2028 40 2007 46 2008 41 58 2030 61 2007 46 2031 40 2006 44 2007 46 2032 41 2194 61 2007 46 2031 40 2193 44 2007 46 2032 41 334 2017 58 2018 61 648 2019 61 2004 334 2195 40 2007 46 2008 41 58 2089 61 2007 46 2034 40 2006 41 334 2017 58 2018 61 648 2019 61 2004 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2006 41 41 2057 46 2113 40 2114 46 2131 40 2193 41 41 2057 46 2113 40 2114 46 2131 40 2028 41 41 2057 46 2113 40 2114 46 2131 40 2195 41 41 2003 46 2070 40 2076 40 2057 46 2019 46 2149 40 41 41 44 1502 41 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2028 41 41 2196 61 40 648 648 648 648 41 497 2003 46 2197 40 2111 44 2196 41 58 2057 46 2019 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2195 41 41 2196 61 40 648 648 648 648 41 497 2003 46 2197 40 2111 44 2196 41 58 2057 46 2019 621 2057 46 2113 40 2114 46 2131 40 2028 41 41 2196 61 40 648 648 648 648 648 648 648 648 41 497 2003 46 2197 40 2111 44 2196 41 58 2057 46 2019 348 2198 40 2003 41 58 2004 61 2005 40 41 334 2006 40 2007 46 2008 41 58 334 2017 58 2018 61 648 2019 61 2004 334 2028 40 2007 46 2008 41 58 2030 61 2007 46 2031 40 2006 44 2007 46 2032 41 334 2017 58 2018 61 648 2019 61 2004 334 2195 40 2007 46 2008 41 58 2089 61 2007 46 2034 40 2006 41 334 2017 58 2018 61 648 2019 61 2004 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2006 41 41 2057 46 2113 40 2114 46 2131 40 2028 41 41 2057 46 2113 40 2114 46 2131 40 2195 41 41 2003 46 2070 40 2076 40 2057 46 2019 46 2149 40 41 41 44 1502 41 348 2199 40 2003 41 58 648 2004 61 2005 40 41 334 2200 40 2007 46 2008 41 58 2201 61 2007 46 2031 40 648 44 2007 46 2032 41 334 2017 58 2018 61 648 2019 61 2004 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2200 41 41 497 2003 46 2110 40 2111 41 58 2057 46 2019 621 2057 61 2058 40 2202 61 123 648 125 41 2057 46 2113 40 2114 46 2131 40 2200 41 41 2203 61 2057 46 2019 2003 46 2070 40 2076 40 91 2204 385 2204 398 2203 46 2149 40 41 392 2204 46 2125 46 2018 614 648 93 41 44 1501 44 41 348 2205 40 2003 41 58 497 2003 46 2110 40 2206 41 58 2058 40 2202 61 91 648 93 41 348 2207 40 2003 41 58 648 2004 61 2005 40 41 334 2006 40 2007 46 2008 41 58 2009 61 2007 46 2013 40 41 334 2017 58 2018 61 648 2019 61 2004 334 2028 40 2007 46 2008 41 58 2030 61 2007 46 2031 40 2006 44 2007 46 2032 41 334 2017 58 2018 61 648 2019 61 2004 2208 61 648 621 2057 61 2058 40 41 2057 46 2113 40 2114 46 2131 40 2006 41 41 2057 46 2113 40 2114 46 2131 40 2028 41 41 2003 46 2070 40 411 40 2057 46 2007 91 648 44 648 93 46 2039 41 44 91 648 44 648 93 44 41 348 2209 40 2003 41 58 648 2057 61 2058 40 41 2057 46 2113 40 2114 40 2018 61 648 44 2009 61 648 44 2039 61 91 40 648 44 2007 46 2115 40 2116 61 304 41 41 44 40 648 44 2007 46 2117 40 41 41 44 93 44 2078 61 91 40 648 44 2042 40 648 44 648 41 41 44 40 648 44 2044 46 2045 40 41 41 44 93 41 41 2210 61 2057 46 2019 46 2124 40 648 44 648 41 2211 61 2057 46 335 40 41 2152 61 2179 40 648 44 648 41 2152 46 2156 40 648 44 2211 41 2212 61 2211 46 2019 46 2124 40 648 44 648 41 2003 46 2173 40 2210 44 2212 41 2003 46 2071 40 2210 44 2210 46 2041 46 2213 41 2003 46 2071 40 2210 44 2210 46 2043 46 2213 41 2003 46 2071 40 2212 44 2212 46 2041 46 2213 41 2003 46 2071 40 2212 44 2212 46 2043 46 2213 41 2003 46 2173 40 2210 46 2041 44 2212 46 2041 41 2003 46 2173 40 2210 46 2043 44 2212 46 2043 41 2003 46 2173 40 2210 46 2041 46 2213 44 2212 46 2041 46 2213 41 2003 46 2173 40 2210 46 2043 46 2213 44 2212 46 2043 46 2213 41 348 2214 40 2003 41 58 648 2004 61 2005 40 91 648 93 41 2215 61 91 40 648 44 648 41 44 40 648 44 648 41 93 334 2006 40 2007 46 2008 41 58 2009 61 2007 46 2010 40 2011 61 1504 41 2216 61 2007 46 2010 40 2011 61 1504 44 2215 61 2217 40 2215 41 41 334 2017 58 2018 61 648 2019 61 2004 2058 46 2059 40 2004 41 2218 61 2006 46 2125 46 2126 40 648 41 2003 46 2070 40 411 40 2218 46 2215 41 44 2215 41 
130886,Python,"class WindowFunctionTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        Employee.objects.bulk_create([
            Employee(
                name=e[0],
                salary=e[1],
                department=e[2],
                hire_date=e[3],
                age=e[4],
                bonus=Decimal(e[1]) / 400,
            )
            for e in [
                ('Jones', 45000, 'Accounting', datetime.datetime(2005, 11, 1), 20),
                ('Williams', 37000, 'Accounting', datetime.datetime(2009, 6, 1), 20),
                ('Jenson', 45000, 'Accounting', datetime.datetime(2008, 4, 1), 20),
                ('Adams', 50000, 'Accounting', datetime.datetime(2013, 7, 1), 50),
                ('Smith', 55000, 'Sales', datetime.datetime(2007, 6, 1), 30),
                ('Brown', 53000, 'Sales', datetime.datetime(2009, 9, 1), 30),
                ('Johnson', 40000, 'Marketing', datetime.datetime(2012, 3, 1), 30),
                ('Smith', 38000, 'Marketing', datetime.datetime(2009, 10, 1), 20),
                ('Wilkinson', 60000, 'IT', datetime.datetime(2011, 3, 1), 40),
                ('Moore', 34000, 'IT', datetime.datetime(2013, 8, 1), 40),
                ('Miller', 100000, 'Management', datetime.datetime(2005, 6, 1), 40),
                ('Johnson', 80000, 'Management', datetime.datetime(2005, 7, 1), 50),
            ]
        ])

    def test_dense_rank(self):
        tests = [
            ExtractYear(F('hire_date')).asc(),
            F('hire_date__year').asc(),
            'hire_date__year',
        ]
        for order_by in tests:
            with self.subTest(order_by=order_by):
                qs = Employee.objects.annotate(
                    rank=Window(expression=DenseRank(), order_by=order_by),
                )
                self.assertQuerysetEqual(qs, [
                    ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 1),
                    ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 1),
                    ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 1),
                    ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 2),
                    ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 3),
                    ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 4),
                    ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 4),
                    ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 4),
                    ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 5),
                    ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 6),
                    ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 7),
                    ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 7),
                ], lambda entry: (
                    entry.name,
                    entry.salary,
                    entry.department,
                    entry.hire_date,
                    entry.rank,
                ), ordered=False)

    def test_department_salary(self):
        qs = Employee.objects.annotate(department_sum=Window(
            expression=Sum('salary'),
            partition_by=F('department'),
            order_by=[F('hire_date').asc()],
        )).order_by('department', 'department_sum')
        self.assertQuerysetEqual(qs, [
            ('Jones', 'Accounting', 45000, 45000),
            ('Jenson', 'Accounting', 45000, 90000),
            ('Williams', 'Accounting', 37000, 127000),
            ('Adams', 'Accounting', 50000, 177000),
            ('Wilkinson', 'IT', 60000, 60000),
            ('Moore', 'IT', 34000, 94000),
            ('Miller', 'Management', 100000, 100000),
            ('Johnson', 'Management', 80000, 180000),
            ('Smith', 'Marketing', 38000, 38000),
            ('Johnson', 'Marketing', 40000, 78000),
            ('Smith', 'Sales', 55000, 55000),
            ('Brown', 'Sales', 53000, 108000),
        ], lambda entry: (entry.name, entry.department, entry.salary, entry.department_sum))

    def test_rank(self):
        """"""
        Rank the employees based on the year they're were hired. Since there
        are multiple employees hired in different years, this will contain
        gaps.
        """"""
        qs = Employee.objects.annotate(rank=Window(
            expression=Rank(),
            order_by=F('hire_date__year').asc(),
        ))
        self.assertQuerysetEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 1),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 1),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 1),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 4),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 5),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 6),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 6),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 6),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 9),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 10),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 11),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 11),
        ], lambda entry: (entry.name, entry.salary, entry.department, entry.hire_date, entry.rank), ordered=False)

    def test_row_number(self):
        """"""
        The row number window function computes the number based on the order
        in which the tuples were inserted. Depending on the backend,

        Oracle requires an ordering-clause in the Window expression.
        """"""
        qs = Employee.objects.annotate(row_number=Window(
            expression=RowNumber(),
            order_by=F('pk').asc(),
        )).order_by('pk')
        self.assertQuerysetEqual(qs, [
            ('Jones', 'Accounting', 1),
            ('Williams', 'Accounting', 2),
            ('Jenson', 'Accounting', 3),
            ('Adams', 'Accounting', 4),
            ('Smith', 'Sales', 5),
            ('Brown', 'Sales', 6),
            ('Johnson', 'Marketing', 7),
            ('Smith', 'Marketing', 8),
            ('Wilkinson', 'IT', 9),
            ('Moore', 'IT', 10),
            ('Miller', 'Management', 11),
            ('Johnson', 'Management', 12),
        ], lambda entry: (entry.name, entry.department, entry.row_number))

    def test_row_number_no_ordering(self):
        """"""
        The row number window function computes the number based on the order
        in which the tuples were inserted.
        """"""
        # Add a default ordering for consistent results across databases.
        qs = Employee.objects.annotate(row_number=Window(
            expression=RowNumber(),
        )).order_by('pk')
        self.assertQuerysetEqual(qs, [
            ('Jones', 'Accounting', 1),
            ('Williams', 'Accounting', 2),
            ('Jenson', 'Accounting', 3),
            ('Adams', 'Accounting', 4),
            ('Smith', 'Sales', 5),
            ('Brown', 'Sales', 6),
            ('Johnson', 'Marketing', 7),
            ('Smith', 'Marketing', 8),
            ('Wilkinson', 'IT', 9),
            ('Moore', 'IT', 10),
            ('Miller', 'Management', 11),
            ('Johnson', 'Management', 12),
        ], lambda entry: (entry.name, entry.department, entry.row_number))

    def test_avg_salary_department(self):
        qs = Employee.objects.annotate(avg_salary=Window(
            expression=Avg('salary'),
            order_by=F('department').asc(),
            partition_by='department',
        )).order_by('department', '-salary', 'name')
        self.assertQuerysetEqual(qs, [
            ('Adams', 50000, 'Accounting', 44250.00),
            ('Jenson', 45000, 'Accounting', 44250.00),
            ('Jones', 45000, 'Accounting', 44250.00),
            ('Williams', 37000, 'Accounting', 44250.00),
            ('Wilkinson', 60000, 'IT', 47000.00),
            ('Moore', 34000, 'IT', 47000.00),
            ('Miller', 100000, 'Management', 90000.00),
            ('Johnson', 80000, 'Management', 90000.00),
            ('Johnson', 40000, 'Marketing', 39000.00),
            ('Smith', 38000, 'Marketing', 39000.00),
            ('Smith', 55000, 'Sales', 54000.00),
            ('Brown', 53000, 'Sales', 54000.00),
        ], transform=lambda row: (row.name, row.salary, row.department, row.avg_salary))

    def test_lag(self):
        """"""
        Compute the difference between an employee's salary and the next
        highest salary in the employee's department. Return None if the
        employee has the lowest salary.
        """"""
        qs = Employee.objects.annotate(lag=Window(
            expression=Lag(expression='salary', offset=1),
            partition_by=F('department'),
            order_by=[F('salary').asc(), F('name').asc()],
        )).order_by('department', F('salary').asc(), F('name').asc())
        self.assertQuerysetEqual(qs, [
            ('Williams', 37000, 'Accounting', None),
            ('Jenson', 45000, 'Accounting', 37000),
            ('Jones', 45000, 'Accounting', 45000),
            ('Adams', 50000, 'Accounting', 45000),
            ('Moore', 34000, 'IT', None),
            ('Wilkinson', 60000, 'IT', 34000),
            ('Johnson', 80000, 'Management', None),
            ('Miller', 100000, 'Management', 80000),
            ('Smith', 38000, 'Marketing', None),
            ('Johnson', 40000, 'Marketing', 38000),
            ('Brown', 53000, 'Sales', None),
            ('Smith', 55000, 'Sales', 53000),
        ], transform=lambda row: (row.name, row.salary, row.department, row.lag))

    def test_lag_decimalfield(self):
        qs = Employee.objects.annotate(lag=Window(
            expression=Lag(expression='bonus', offset=1),
            partition_by=F('department'),
            order_by=[F('bonus').asc(), F('name').asc()],
        )).order_by('department', F('bonus').asc(), F('name').asc())
        self.assertQuerysetEqual(qs, [
            ('Williams', 92.5, 'Accounting', None),
            ('Jenson', 112.5, 'Accounting', 92.5),
            ('Jones', 112.5, 'Accounting', 112.5),
            ('Adams', 125, 'Accounting', 112.5),
            ('Moore', 85, 'IT', None),
            ('Wilkinson', 150, 'IT', 85),
            ('Johnson', 200, 'Management', None),
            ('Miller', 250, 'Management', 200),
            ('Smith', 95, 'Marketing', None),
            ('Johnson', 100, 'Marketing', 95),
            ('Brown', 132.5, 'Sales', None),
            ('Smith', 137.5, 'Sales', 132.5),
        ], transform=lambda row: (row.name, row.bonus, row.department, row.lag))

    def test_first_value(self):
        qs = Employee.objects.annotate(first_value=Window(
            expression=FirstValue('salary'),
            partition_by=F('department'),
            order_by=F('hire_date').asc(),
        )).order_by('department', 'hire_date')
        self.assertQuerysetEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 45000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 45000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 45000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 45000),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 60000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 60000),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 100000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 100000),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 38000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 38000),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 55000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 55000),
        ], lambda row: (row.name, row.salary, row.department, row.hire_date, row.first_value))

    def test_last_value(self):
        qs = Employee.objects.annotate(last_value=Window(
            expression=LastValue('hire_date'),
            partition_by=F('department'),
            order_by=F('hire_date').asc(),
        ))
        self.assertQuerysetEqual(qs, [
            ('Adams', 'Accounting', datetime.date(2013, 7, 1), 50000, datetime.date(2013, 7, 1)),
            ('Jenson', 'Accounting', datetime.date(2008, 4, 1), 45000, datetime.date(2008, 4, 1)),
            ('Jones', 'Accounting', datetime.date(2005, 11, 1), 45000, datetime.date(2005, 11, 1)),
            ('Williams', 'Accounting', datetime.date(2009, 6, 1), 37000, datetime.date(2009, 6, 1)),
            ('Moore', 'IT', datetime.date(2013, 8, 1), 34000, datetime.date(2013, 8, 1)),
            ('Wilkinson', 'IT', datetime.date(2011, 3, 1), 60000, datetime.date(2011, 3, 1)),
            ('Miller', 'Management', datetime.date(2005, 6, 1), 100000, datetime.date(2005, 6, 1)),
            ('Johnson', 'Management', datetime.date(2005, 7, 1), 80000, datetime.date(2005, 7, 1)),
            ('Johnson', 'Marketing', datetime.date(2012, 3, 1), 40000, datetime.date(2012, 3, 1)),
            ('Smith', 'Marketing', datetime.date(2009, 10, 1), 38000, datetime.date(2009, 10, 1)),
            ('Brown', 'Sales', datetime.date(2009, 9, 1), 53000, datetime.date(2009, 9, 1)),
            ('Smith', 'Sales', datetime.date(2007, 6, 1), 55000, datetime.date(2007, 6, 1)),
        ], transform=lambda row: (row.name, row.department, row.hire_date, row.salary, row.last_value), ordered=False)

    def test_function_list_of_values(self):
        qs = Employee.objects.annotate(lead=Window(
            expression=Lead(expression='salary'),
            order_by=[F('hire_date').asc(), F('name').desc()],
            partition_by='department',
        )).values_list('name', 'salary', 'department', 'hire_date', 'lead') \
          .order_by('department', F('hire_date').asc(), F('name').desc())
        self.assertNotIn('GROUP BY', str(qs.query))
        self.assertSequenceEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 45000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 37000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 50000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), None),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 34000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), None),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 80000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), None),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 40000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), None),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 53000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), None),
        ])

    def test_min_department(self):
        """"""An alternative way to specify a query for FirstValue.""""""
        qs = Employee.objects.annotate(min_salary=Window(
            expression=Min('salary'),
            partition_by=F('department'),
            order_by=[F('salary').asc(), F('name').asc()]
        )).order_by('department', 'salary', 'name')
        self.assertQuerysetEqual(qs, [
            ('Williams', 'Accounting', 37000, 37000),
            ('Jenson', 'Accounting', 45000, 37000),
            ('Jones', 'Accounting', 45000, 37000),
            ('Adams', 'Accounting', 50000, 37000),
            ('Moore', 'IT', 34000, 34000),
            ('Wilkinson', 'IT', 60000, 34000),
            ('Johnson', 'Management', 80000, 80000),
            ('Miller', 'Management', 100000, 80000),
            ('Smith', 'Marketing', 38000, 38000),
            ('Johnson', 'Marketing', 40000, 38000),
            ('Brown', 'Sales', 53000, 53000),
            ('Smith', 'Sales', 55000, 53000),
        ], lambda row: (row.name, row.department, row.salary, row.min_salary))

    def test_max_per_year(self):
        """"""
        Find the maximum salary awarded in the same year as the
        employee was hired, regardless of the department.
        """"""
        qs = Employee.objects.annotate(max_salary_year=Window(
            expression=Max('salary'),
            order_by=ExtractYear('hire_date').asc(),
            partition_by=ExtractYear('hire_date')
        )).order_by(ExtractYear('hire_date'), 'salary')
        self.assertQuerysetEqual(qs, [
            ('Jones', 'Accounting', 45000, 2005, 100000),
            ('Johnson', 'Management', 80000, 2005, 100000),
            ('Miller', 'Management', 100000, 2005, 100000),
            ('Smith', 'Sales', 55000, 2007, 55000),
            ('Jenson', 'Accounting', 45000, 2008, 45000),
            ('Williams', 'Accounting', 37000, 2009, 53000),
            ('Smith', 'Marketing', 38000, 2009, 53000),
            ('Brown', 'Sales', 53000, 2009, 53000),
            ('Wilkinson', 'IT', 60000, 2011, 60000),
            ('Johnson', 'Marketing', 40000, 2012, 40000),
            ('Moore', 'IT', 34000, 2013, 50000),
            ('Adams', 'Accounting', 50000, 2013, 50000),
        ], lambda row: (row.name, row.department, row.salary, row.hire_date.year, row.max_salary_year))

    def test_cume_dist(self):
        """"""
        Compute the cumulative distribution for the employees based on the
        salary in increasing order. Equal to rank/total number of rows (12).
        """"""
        qs = Employee.objects.annotate(cume_dist=Window(
            expression=CumeDist(),
            order_by=F('salary').asc(),
        )).order_by('salary', 'name')
        # Round result of cume_dist because Oracle uses greater precision.
        self.assertQuerysetEqual(qs, [
            ('Moore', 'IT', 34000, 0.0833333333),
            ('Williams', 'Accounting', 37000, 0.1666666667),
            ('Smith', 'Marketing', 38000, 0.25),
            ('Johnson', 'Marketing', 40000, 0.3333333333),
            ('Jenson', 'Accounting', 45000, 0.5),
            ('Jones', 'Accounting', 45000, 0.5),
            ('Adams', 'Accounting', 50000, 0.5833333333),
            ('Brown', 'Sales', 53000, 0.6666666667),
            ('Smith', 'Sales', 55000, 0.75),
            ('Wilkinson', 'IT', 60000, 0.8333333333),
            ('Johnson', 'Management', 80000, 0.9166666667),
            ('Miller', 'Management', 100000, 1),
        ], lambda row: (row.name, row.department, row.salary, round(row.cume_dist, 10)))

    def test_nthvalue(self):
        qs = Employee.objects.annotate(
            nth_value=Window(expression=NthValue(
                expression='salary', nth=2),
                order_by=[F('hire_date').asc(), F('name').desc()],
                partition_by=F('department'),
            )
        ).order_by('department', 'hire_date', 'name')
        self.assertQuerysetEqual(qs, [
            ('Jones', 'Accounting', datetime.date(2005, 11, 1), 45000, None),
            ('Jenson', 'Accounting', datetime.date(2008, 4, 1), 45000, 45000),
            ('Williams', 'Accounting', datetime.date(2009, 6, 1), 37000, 45000),
            ('Adams', 'Accounting', datetime.date(2013, 7, 1), 50000, 45000),
            ('Wilkinson', 'IT', datetime.date(2011, 3, 1), 60000, None),
            ('Moore', 'IT', datetime.date(2013, 8, 1), 34000, 34000),
            ('Miller', 'Management', datetime.date(2005, 6, 1), 100000, None),
            ('Johnson', 'Management', datetime.date(2005, 7, 1), 80000, 80000),
            ('Smith', 'Marketing', datetime.date(2009, 10, 1), 38000, None),
            ('Johnson', 'Marketing', datetime.date(2012, 3, 1), 40000, 40000),
            ('Smith', 'Sales', datetime.date(2007, 6, 1), 55000, None),
            ('Brown', 'Sales', datetime.date(2009, 9, 1), 53000, 53000),
        ], lambda row: (row.name, row.department, row.hire_date, row.salary, row.nth_value))

    def test_lead(self):
        """"""
        Determine what the next person hired in the same department makes.
        Because the dataset is ambiguous, the name is also part of the
        ordering clause. No default is provided, so None/NULL should be
        returned.
        """"""
        qs = Employee.objects.annotate(lead=Window(
            expression=Lead(expression='salary'),
            order_by=[F('hire_date').asc(), F('name').desc()],
            partition_by='department',
        )).order_by('department', F('hire_date').asc(), F('name').desc())
        self.assertQuerysetEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 45000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 37000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 50000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), None),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 34000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), None),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 80000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), None),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 40000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), None),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 53000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), None),
        ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.lead))

    def test_lead_offset(self):
        """"""
        Determine what the person hired after someone makes. Due to
        ambiguity, the name is also included in the ordering.
        """"""
        qs = Employee.objects.annotate(lead=Window(
            expression=Lead('salary', offset=2),
            partition_by='department',
            order_by=F('hire_date').asc(),
        ))
        self.assertQuerysetEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 37000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 50000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), None),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), None),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), None),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), None),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), None),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), None),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), None),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), None),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), None),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), None),
        ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.lead),
            ordered=False
        )

    @skipUnlessDBFeature('supports_default_in_lead_lag')
    def test_lead_default(self):
        qs = Employee.objects.annotate(lead_default=Window(
            expression=Lead(expression='salary', offset=5, default=60000),
            partition_by=F('department'),
            order_by=F('department').asc(),
        ))
        self.assertEqual(list(qs.values_list('lead_default', flat=True).distinct()), [60000])

    def test_ntile(self):
        """"""
        Compute the group for each of the employees across the entire company,
        based on how high the salary is for them. There are twelve employees
        so it divides evenly into four groups.
        """"""
        qs = Employee.objects.annotate(ntile=Window(
            expression=Ntile(num_buckets=4),
            order_by='-salary',
        )).order_by('ntile', '-salary', 'name')
        self.assertQuerysetEqual(qs, [
            ('Miller', 'Management', 100000, 1),
            ('Johnson', 'Management', 80000, 1),
            ('Wilkinson', 'IT', 60000, 1),
            ('Smith', 'Sales', 55000, 2),
            ('Brown', 'Sales', 53000, 2),
            ('Adams', 'Accounting', 50000, 2),
            ('Jenson', 'Accounting', 45000, 3),
            ('Jones', 'Accounting', 45000, 3),
            ('Johnson', 'Marketing', 40000, 3),
            ('Smith', 'Marketing', 38000, 4),
            ('Williams', 'Accounting', 37000, 4),
            ('Moore', 'IT', 34000, 4),
        ], lambda x: (x.name, x.department, x.salary, x.ntile))

    def test_percent_rank(self):
        """"""
        Calculate the percentage rank of the employees across the entire
        company based on salary and name (in case of ambiguity).
        """"""
        qs = Employee.objects.annotate(percent_rank=Window(
            expression=PercentRank(),
            order_by=[F('salary').asc(), F('name').asc()],
        )).order_by('percent_rank')
        # Round to account for precision differences among databases.
        self.assertQuerysetEqual(qs, [
            ('Moore', 'IT', 34000, 0.0),
            ('Williams', 'Accounting', 37000, 0.0909090909),
            ('Smith', 'Marketing', 38000, 0.1818181818),
            ('Johnson', 'Marketing', 40000, 0.2727272727),
            ('Jenson', 'Accounting', 45000, 0.3636363636),
            ('Jones', 'Accounting', 45000, 0.4545454545),
            ('Adams', 'Accounting', 50000, 0.5454545455),
            ('Brown', 'Sales', 53000, 0.6363636364),
            ('Smith', 'Sales', 55000, 0.7272727273),
            ('Wilkinson', 'IT', 60000, 0.8181818182),
            ('Johnson', 'Management', 80000, 0.9090909091),
            ('Miller', 'Management', 100000, 1.0),
        ], transform=lambda row: (row.name, row.department, row.salary, round(row.percent_rank, 10)))

    def test_nth_returns_null(self):
        """"""
        Find the nth row of the data set. None is returned since there are
        fewer than 20 rows in the test data.
        """"""
        qs = Employee.objects.annotate(nth_value=Window(
            expression=NthValue('salary', nth=20),
            order_by=F('salary').asc()
        ))
        self.assertEqual(list(qs.values_list('nth_value', flat=True).distinct()), [None])

    def test_multiple_partitioning(self):
        """"""
        Find the maximum salary for each department for people hired in the
        same year.
        """"""
        qs = Employee.objects.annotate(max=Window(
            expression=Max('salary'),
            partition_by=[F('department'), F('hire_date__year')],
        )).order_by('department', 'hire_date', 'name')
        self.assertQuerysetEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 45000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 45000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 37000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 50000),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 60000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 34000),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 100000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 100000),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 38000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 40000),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 55000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 53000),
        ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.max))

    def test_multiple_ordering(self):
        """"""
        Accumulate the salaries over the departments based on hire_date.
        If two people were hired on the same date in the same department, the
        ordering clause will render a different result for those people.
        """"""
        qs = Employee.objects.annotate(sum=Window(
            expression=Sum('salary'),
            partition_by='department',
            order_by=[F('hire_date').asc(), F('name').asc()],
        )).order_by('department', 'sum')
        self.assertQuerysetEqual(qs, [
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 45000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 90000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 127000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 177000),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 60000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 94000),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 100000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 180000),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 38000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 78000),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 55000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 108000),
        ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.sum))

    def test_related_ordering_with_count(self):
        qs = Employee.objects.annotate(department_sum=Window(
            expression=Sum('salary'),
            partition_by=F('department'),
            order_by=['classification__code'],
        ))
        self.assertEqual(qs.count(), 12)

    @skipUnlessDBFeature('supports_frame_range_fixed_distance')
    def test_range_n_preceding_and_following(self):
        qs = Employee.objects.annotate(sum=Window(
            expression=Sum('salary'),
            order_by=F('salary').asc(),
            partition_by='department',
            frame=ValueRange(start=-2, end=2),
        ))
        self.assertIn('RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING', str(qs.query))
        self.assertQuerysetEqual(qs, [
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 37000),
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 90000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 90000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 50000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 53000),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 55000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 40000),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 38000),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 60000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 34000),
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 100000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 80000),
        ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.sum), ordered=False)

    def test_range_unbound(self):
        """"""A query with RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING.""""""
        qs = Employee.objects.annotate(sum=Window(
            expression=Sum('salary'),
            partition_by='age',
            order_by=[F('age').asc()],
            frame=ValueRange(start=None, end=None),
        )).order_by('department', 'hire_date', 'name')
        self.assertIn('RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING', str(qs.query))
        self.assertQuerysetEqual(qs, [
            ('Jones', 'Accounting', 45000, datetime.date(2005, 11, 1), 165000),
            ('Jenson', 'Accounting', 45000, datetime.date(2008, 4, 1), 165000),
            ('Williams', 'Accounting', 37000, datetime.date(2009, 6, 1), 165000),
            ('Adams', 'Accounting', 50000, datetime.date(2013, 7, 1), 130000),
            ('Wilkinson', 'IT', 60000, datetime.date(2011, 3, 1), 194000),
            ('Moore', 'IT', 34000, datetime.date(2013, 8, 1), 194000),
            ('Miller', 'Management', 100000, datetime.date(2005, 6, 1), 194000),
            ('Johnson', 'Management', 80000, datetime.date(2005, 7, 1), 130000),
            ('Smith', 'Marketing', 38000, datetime.date(2009, 10, 1), 165000),
            ('Johnson', 'Marketing', 40000, datetime.date(2012, 3, 1), 148000),
            ('Smith', 'Sales', 55000, datetime.date(2007, 6, 1), 148000),
            ('Brown', 'Sales', 53000, datetime.date(2009, 9, 1), 148000)
        ], transform=lambda row: (row.name, row.department, row.salary, row.hire_date, row.sum))

    def test_subquery_row_range_rank(self):
        qs = Employee.objects.annotate(
            highest_avg_salary_date=Subquery(
                Employee.objects.filter(
                    department=OuterRef('department'),
                ).annotate(
                    avg_salary=Window(
                        expression=Avg('salary'),
                        order_by=[F('hire_date').asc()],
                        frame=RowRange(start=-1, end=1),
                    ),
                ).order_by('-avg_salary', 'hire_date').values('hire_date')[:1],
            ),
        ).order_by('department', 'name')
        self.assertQuerysetEqual(qs, [
            ('Adams', 'Accounting', datetime.date(2005, 11, 1)),
            ('Jenson', 'Accounting', datetime.date(2005, 11, 1)),
            ('Jones', 'Accounting', datetime.date(2005, 11, 1)),
            ('Williams', 'Accounting', datetime.date(2005, 11, 1)),
            ('Moore', 'IT', datetime.date(2011, 3, 1)),
            ('Wilkinson', 'IT', datetime.date(2011, 3, 1)),
            ('Johnson', 'Management', datetime.date(2005, 6, 1)),
            ('Miller', 'Management', datetime.date(2005, 6, 1)),
            ('Johnson', 'Marketing', datetime.date(2009, 10, 1)),
            ('Smith', 'Marketing', datetime.date(2009, 10, 1)),
            ('Brown', 'Sales', datetime.date(2007, 6, 1)),
            ('Smith', 'Sales', datetime.date(2007, 6, 1)),
        ], transform=lambda row: (row.name, row.department, row.highest_avg_salary_date))

    def test_row_range_rank(self):
        """"""
        A query with ROWS BETWEEN UNBOUNDED PRECEDING AND 3 FOLLOWING.
        The resulting sum is the sum of the three next (if they exist) and all
        previous rows according to the ordering clause.
        """"""
        qs = Employee.objects.annotate(sum=Window(
            expression=Sum('salary'),
            order_by=[F('hire_date').asc(), F('name').desc()],
            frame=RowRange(start=None, end=3),
        )).order_by('sum', 'hire_date')
        self.assertIn('ROWS BETWEEN UNBOUNDED PRECEDING AND 3 FOLLOWING', str(qs.query))
        self.assertQuerysetEqual(qs, [
            ('Miller', 100000, 'Management', datetime.date(2005, 6, 1), 280000),
            ('Johnson', 80000, 'Management', datetime.date(2005, 7, 1), 325000),
            ('Jones', 45000, 'Accounting', datetime.date(2005, 11, 1), 362000),
            ('Smith', 55000, 'Sales', datetime.date(2007, 6, 1), 415000),
            ('Jenson', 45000, 'Accounting', datetime.date(2008, 4, 1), 453000),
            ('Williams', 37000, 'Accounting', datetime.date(2009, 6, 1), 513000),
            ('Brown', 53000, 'Sales', datetime.date(2009, 9, 1), 553000),
            ('Smith', 38000, 'Marketing', datetime.date(2009, 10, 1), 603000),
            ('Wilkinson', 60000, 'IT', datetime.date(2011, 3, 1), 637000),
            ('Johnson', 40000, 'Marketing', datetime.date(2012, 3, 1), 637000),
            ('Adams', 50000, 'Accounting', datetime.date(2013, 7, 1), 637000),
            ('Moore', 34000, 'IT', datetime.date(2013, 8, 1), 637000),
        ], transform=lambda row: (row.name, row.salary, row.department, row.hire_date, row.sum))

    @skipUnlessDBFeature('can_distinct_on_fields')
    def test_distinct_window_function(self):
        """"""
        Window functions are not aggregates, and hence a query to filter out
        duplicates may be useful.
        """"""
        qs = Employee.objects.annotate(
            sum=Window(
                expression=Sum('salary'),
                partition_by=ExtractYear('hire_date'),
                order_by=ExtractYear('hire_date')
            ),
            year=ExtractYear('hire_date'),
        ).values('year', 'sum').distinct('year').order_by('year')
        results = [
            {'year': 2005, 'sum': 225000}, {'year': 2007, 'sum': 55000},
            {'year': 2008, 'sum': 45000}, {'year': 2009, 'sum': 128000},
            {'year': 2011, 'sum': 60000}, {'year': 2012, 'sum': 40000},
            {'year': 2013, 'sum': 84000},
        ]
        for idx, val in zip(range(len(results)), results):
            with self.subTest(result=val):
                self.assertEqual(qs[idx], val)

    def test_fail_update(self):
        """"""Window expressions can't be used in an UPDATE statement.""""""
        msg = (
            'Window expressions are not allowed in this query (salary=<Window: '
            'Max(Col(expressions_window_employee, expressions_window.Employee.salary)) '
            'OVER (PARTITION BY Col(expressions_window_employee, '
            'expressions_window.Employee.department))>).'
        )
        with self.assertRaisesMessage(FieldError, msg):
            Employee.objects.filter(department='Management').update(
                salary=Window(expression=Max('salary'), partition_by='department'),
            )

    def test_fail_insert(self):
        """"""Window expressions can't be used in an INSERT statement.""""""
        msg = (
            'Window expressions are not allowed in this query (salary=<Window: '
            'Sum(Value(10000), order_by=OrderBy(F(pk), descending=False)) OVER ()'
        )
        with self.assertRaisesMessage(FieldError, msg):
            Employee.objects.create(
                name='Jameson', department='Management', hire_date=datetime.date(2007, 7, 1),
                salary=Window(expression=Sum(Value(10000), order_by=F('pk').asc())),
            )

    def test_window_expression_within_subquery(self):
        subquery_qs = Employee.objects.annotate(
            highest=Window(FirstValue('id'), partition_by=F('department'), order_by=F('salary').desc())
        ).values('highest')
        highest_salary = Employee.objects.filter(pk__in=subquery_qs)
        self.assertCountEqual(highest_salary.values('department', 'salary'), [
            {'department': 'Accounting', 'salary': 50000},
            {'department': 'Sales', 'salary': 55000},
            {'department': 'Marketing', 'salary': 40000},
            {'department': 'IT', 'salary': 60000},
            {'department': 'Management', 'salary': 100000}
        ])

    @skipUnlessDBFeature('supports_json_field')
    def test_key_transform(self):
        Detail.objects.bulk_create([
            Detail(value={'department': 'IT', 'name': 'Smith', 'salary': 37000}),
            Detail(value={'department': 'IT', 'name': 'Nowak', 'salary': 32000}),
            Detail(value={'department': 'HR', 'name': 'Brown', 'salary': 50000}),
            Detail(value={'department': 'HR', 'name': 'Smith', 'salary': 55000}),
            Detail(value={'department': 'PR', 'name': 'Moore', 'salary': 90000}),
        ])
        tests = [
            (KeyTransform('department', 'value'), KeyTransform('name', 'value')),
            (F('value__department'), F('value__name')),
        ]
        for partition_by, order_by in tests:
            with self.subTest(partition_by=partition_by, order_by=order_by):
                qs = Detail.objects.annotate(department_sum=Window(
                    expression=Sum(Cast(
                        KeyTextTransform('salary', 'value'),
                        output_field=IntegerField(),
                    )),
                    partition_by=[partition_by],
                    order_by=[order_by],
                )).order_by('value__department', 'department_sum')
                self.assertQuerysetEqual(qs, [
                    ('Brown', 'HR', 50000, 50000),
                    ('Smith', 'HR', 55000, 105000),
                    ('Nowak', 'IT', 32000, 32000),
                    ('Smith', 'IT', 37000, 69000),
                    ('Moore', 'PR', 90000, 90000),
                ], lambda entry: (
                    entry.value['name'],
                    entry.value['department'],
                    entry.value['salary'],
                    entry.department_sum,
                ))

    def test_invalid_start_value_range(self):
        msg = ""start argument must be a negative integer, zero, or None, but got '3'.""
        with self.assertRaisesMessage(ValueError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                order_by=F('hire_date').asc(),
                frame=ValueRange(start=3),
            )))

    def test_invalid_end_value_range(self):
        msg = ""end argument must be a positive integer, zero, or None, but got '-3'.""
        with self.assertRaisesMessage(ValueError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                order_by=F('hire_date').asc(),
                frame=ValueRange(end=-3),
            )))

    def test_invalid_type_end_value_range(self):
        msg = ""end argument must be a positive integer, zero, or None, but got 'a'.""
        with self.assertRaisesMessage(ValueError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                order_by=F('hire_date').asc(),
                frame=ValueRange(end='a'),
            )))

    def test_invalid_type_start_value_range(self):
        msg = ""start argument must be a negative integer, zero, or None, but got 'a'.""
        with self.assertRaisesMessage(ValueError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                frame=ValueRange(start='a'),
            )))

    def test_invalid_type_end_row_range(self):
        msg = ""end argument must be a positive integer, zero, or None, but got 'a'.""
        with self.assertRaisesMessage(ValueError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                frame=RowRange(end='a'),
            )))

    @skipUnlessDBFeature('only_supports_unbounded_with_preceding_and_following')
    def test_unsupported_range_frame_start(self):
        msg = '%s only supports UNBOUNDED together with PRECEDING and FOLLOWING.' % connection.display_name
        with self.assertRaisesMessage(NotSupportedError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                order_by=F('hire_date').asc(),
                frame=ValueRange(start=-1),
            )))

    @skipUnlessDBFeature('only_supports_unbounded_with_preceding_and_following')
    def test_unsupported_range_frame_end(self):
        msg = '%s only supports UNBOUNDED together with PRECEDING and FOLLOWING.' % connection.display_name
        with self.assertRaisesMessage(NotSupportedError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                order_by=F('hire_date').asc(),
                frame=ValueRange(end=1),
            )))

    def test_invalid_type_start_row_range(self):
        msg = ""start argument must be a negative integer, zero, or None, but got 'a'.""
        with self.assertRaisesMessage(ValueError, msg):
            list(Employee.objects.annotate(test=Window(
                expression=Sum('salary'),
                order_by=F('hire_date').asc(),
                frame=RowRange(start='a'),
            )))",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2005 46 2006 46 2007 40 91 2005 40 2008 61 2009 91 1500 93 44 2010 61 2009 91 1501 93 44 2011 61 2009 91 1502 93 44 2012 61 2009 91 1502 93 44 2013 61 2009 91 1502 93 44 2014 61 2015 40 2009 91 1501 93 41 47 1504 44 41 385 2009 398 91 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1503 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2016 40 1505 44 1502 44 1501 41 44 1503 41 44 93 93 41 348 2017 40 2018 41 58 2019 61 91 2020 40 2021 40 648 41 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 44 648 44 93 385 2023 398 2019 58 497 2018 46 2024 40 2023 61 2023 41 58 2025 61 2005 46 2006 46 2026 40 2027 61 2028 40 2029 61 2030 40 41 44 2023 61 2023 41 44 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1501 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1501 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1501 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 93 44 409 2033 58 40 2033 46 2008 44 2033 46 2010 44 2033 46 2011 44 2033 46 2012 44 2033 46 2027 44 41 44 2034 61 302 41 348 2035 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2036 61 2028 40 2029 61 2037 40 648 41 44 2038 61 2021 40 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 93 44 41 41 46 2023 40 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1507 41 44 40 648 44 648 44 1506 44 1507 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1507 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1507 41 44 93 44 409 2033 58 40 2033 46 2008 44 2033 46 2011 44 2033 46 2010 44 2033 46 2036 41 41 348 2039 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2027 61 2028 40 2029 61 2040 40 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1501 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1501 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1501 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1502 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1503 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1503 41 44 93 44 409 2033 58 40 2033 46 2008 44 2033 46 2010 44 2033 46 2011 44 2033 46 2012 44 2033 46 2027 41 44 2034 61 302 41 348 2041 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2042 61 2028 40 2029 61 2043 40 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 46 2023 40 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1501 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1503 41 44 40 648 44 648 44 1503 41 44 93 44 409 2033 58 40 2033 46 2008 44 2033 46 2011 44 2033 46 2042 41 41 348 2044 40 2018 41 58 648 621 2025 61 2005 46 2006 46 2026 40 2042 61 2028 40 2029 61 2043 40 41 44 41 41 46 2023 40 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1501 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1502 41 44 40 648 44 648 44 1503 41 44 40 648 44 648 44 1503 41 44 93 44 409 2033 58 40 2033 46 2008 44 2033 46 2011 44 2033 46 2042 41 41 348 2045 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2046 61 2028 40 2029 61 2047 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2038 61 648 44 41 41 46 2023 40 648 44 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2046 41 41 348 2050 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2051 61 2028 40 2029 61 2052 40 2029 61 648 44 2053 61 1501 41 44 2038 61 2021 40 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 93 44 41 41 46 2023 40 648 44 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 303 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 303 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 303 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 303 41 44 40 648 44 1506 44 648 44 1506 41 44 40 648 44 1506 44 648 44 303 41 44 40 648 44 1506 44 648 44 1506 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2051 41 41 348 2054 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2051 61 2028 40 2029 61 2052 40 2029 61 648 44 2053 61 1501 41 44 2038 61 2021 40 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 93 44 41 41 46 2023 40 648 44 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 41 2018 46 2031 40 2025 44 91 40 648 44 1503 44 648 44 303 41 44 40 648 44 1504 44 648 44 1503 41 44 40 648 44 1504 44 648 44 1504 41 44 40 648 44 1504 44 648 44 1504 41 44 40 648 44 1503 44 648 44 303 41 44 40 648 44 1504 44 648 44 1503 41 44 40 648 44 1504 44 648 44 303 41 44 40 648 44 1504 44 648 44 1504 41 44 40 648 44 1503 44 648 44 303 41 44 40 648 44 1503 44 648 44 1503 41 44 40 648 44 1504 44 648 44 303 41 44 40 648 44 1504 44 648 44 1504 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2014 44 2049 46 2011 44 2049 46 2051 41 41 348 2055 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2056 61 2028 40 2029 61 2057 40 648 41 44 2038 61 2021 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 46 2023 40 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 93 44 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2056 41 41 348 2058 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2059 61 2028 40 2029 61 2060 40 648 41 44 2038 61 2021 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1503 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2012 44 2049 46 2010 44 2049 46 2059 41 44 2034 61 302 41 348 2061 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2062 61 2028 40 2029 61 2063 40 2029 61 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2064 40 41 93 44 2038 61 648 44 41 41 46 2065 40 648 44 648 44 648 44 648 44 648 41 92 46 2023 40 648 44 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2064 40 41 41 2018 46 2066 40 648 44 2067 40 2025 46 2068 41 41 2018 46 2069 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 93 41 348 2070 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2071 61 2028 40 2029 61 2072 40 648 41 44 2038 61 2021 40 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 93 41 41 46 2023 40 648 44 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 93 44 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2010 44 2049 46 2071 41 41 348 2073 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2074 61 2028 40 2029 61 2075 40 648 41 44 2023 61 2020 40 648 41 46 2022 40 41 44 2038 61 2020 40 648 41 41 41 46 2023 40 2020 40 648 41 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 40 648 44 648 44 1506 44 1505 44 1506 41 44 93 44 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2010 44 2049 46 2012 46 2076 44 2049 46 2074 41 41 348 2077 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2078 61 2028 40 2029 61 2079 40 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 46 2023 40 648 44 648 41 621 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1498 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1501 41 44 93 44 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2010 44 2080 40 2049 46 2078 44 1502 41 41 41 348 2081 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2082 61 2028 40 2029 61 2083 40 2029 61 648 44 2084 61 1502 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2064 40 41 93 44 2038 61 2021 40 648 41 44 41 41 46 2023 40 648 44 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 44 303 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 303 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 303 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 303 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 303 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 44 1506 41 44 93 44 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2012 44 2049 46 2010 44 2049 46 2082 41 41 348 2085 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2062 61 2028 40 2029 61 2063 40 2029 61 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2064 40 41 93 44 2038 61 648 44 41 41 46 2023 40 648 44 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2064 40 41 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2062 41 41 348 2086 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2062 61 2028 40 2029 61 2063 40 648 44 2053 61 1502 41 44 2038 61 648 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 303 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2062 41 44 2034 61 302 41 64 2087 40 648 41 348 2088 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2089 61 2028 40 2029 61 2063 40 2029 61 648 44 2053 61 1502 44 349 61 1506 41 44 2038 61 2021 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 41 41 2018 46 2090 40 411 40 2025 46 2065 40 648 44 2091 61 304 41 46 2092 40 41 41 44 91 1506 93 41 348 2093 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2094 61 2028 40 2029 61 2095 40 2096 61 1502 41 44 2023 61 648 44 41 41 46 2023 40 648 44 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1501 41 44 40 648 44 648 44 1506 44 1501 41 44 40 648 44 648 44 1506 44 1501 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 40 648 44 648 44 1506 44 1502 41 44 93 44 409 2097 58 40 2097 46 2008 44 2097 46 2011 44 2097 46 2010 44 2097 46 2094 41 41 348 2098 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2099 61 2028 40 2029 61 2100 40 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 93 44 41 41 46 2023 40 648 41 621 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1500 41 44 40 648 44 648 44 1506 44 1498 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1499 41 44 40 648 44 648 44 1506 44 1501 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2010 44 2080 40 2049 46 2099 44 1502 41 41 41 348 2101 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2082 61 2028 40 2029 61 2083 40 648 44 2084 61 1503 41 44 2023 61 2021 40 648 41 46 2022 40 41 41 41 2018 46 2090 40 411 40 2025 46 2065 40 648 44 2091 61 304 41 46 2092 40 41 41 44 91 303 93 41 348 2102 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2103 61 2028 40 2029 61 2075 40 648 41 44 2038 61 91 2021 40 648 41 44 2021 40 648 41 93 44 41 41 46 2023 40 648 44 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2103 41 41 348 2104 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2105 61 2028 40 2029 61 2037 40 648 41 44 2038 61 648 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2022 40 41 93 44 41 41 46 2023 40 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2105 41 41 348 2106 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2036 61 2028 40 2029 61 2037 40 648 41 44 2038 61 2021 40 648 41 44 2023 61 91 648 93 44 41 41 2018 46 2090 40 2025 46 2107 40 41 44 1503 41 64 2087 40 648 41 348 2108 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2105 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2038 61 648 44 2109 61 2110 40 2111 61 45 1502 44 2112 61 1502 41 44 41 41 2018 46 2113 40 648 44 2067 40 2025 46 2068 41 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1506 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2105 41 44 2034 61 302 41 348 2114 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2105 61 2028 40 2029 61 2037 40 648 41 44 2038 61 648 44 2023 61 91 2021 40 648 41 46 2022 40 41 93 44 2109 61 2110 40 2111 61 303 44 2112 61 303 41 44 41 41 46 2023 40 648 44 648 44 648 41 2018 46 2113 40 648 44 2067 40 2025 46 2068 41 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 648 44 1506 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2010 44 2049 46 2012 44 2049 46 2105 41 41 348 2115 40 2018 41 58 2025 61 2005 46 2006 46 2026 40 2116 61 2117 40 2005 46 2006 46 2118 40 2011 61 2119 40 648 41 44 41 46 2026 40 2046 61 2028 40 2029 61 2047 40 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 93 44 2109 61 2120 40 2111 61 45 1501 44 2112 61 1501 41 44 41 44 41 46 2023 40 648 44 648 41 46 2121 40 648 41 91 58 1501 93 44 41 44 41 46 2023 40 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 40 648 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2011 44 2049 46 2116 41 41 348 2122 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2105 61 2028 40 2029 61 2037 40 648 41 44 2023 61 91 2021 40 648 41 46 2022 40 41 44 2021 40 648 41 46 2064 40 41 93 44 2109 61 2120 40 2111 61 303 44 2112 61 1502 41 44 41 41 46 2023 40 648 44 648 41 2018 46 2113 40 648 44 2067 40 2025 46 2068 41 41 2018 46 2031 40 2025 44 91 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1503 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 40 648 44 1506 44 648 44 2016 46 2032 40 1505 44 1502 44 1501 41 44 1507 41 44 93 44 2048 61 409 2049 58 40 2049 46 2008 44 2049 46 2010 44 2049 46 2011 44 2049 46 2012 44 2049 46 2105 41 41 64 2087 40 648 41 348 2123 40 2018 41 58 648 2025 61 2005 46 2006 46 2026 40 2105 61 2028 40 2029 61 2037 40 648 41 44 2038 61 2020 40 648 41 44 2023 61 2020 40 648 41 41 44 2076 61 2020 40 648 41 44 41 46 2121 40 648 44 648 41 46 2092 40 648 41 46 2023 40 648 41 2124 61 91 123 648 58 1505 44 648 58 1507 125 44 123 648 58 1505 44 648 58 1506 125 44 123 648 58 1505 44 648 58 1506 125 44 123 648 58 1505 44 648 58 1507 125 44 123 648 58 1505 44 648 58 1506 125 44 123 648 58 1505 44 648 58 1506 125 44 123 648 58 1505 44 648 58 1506 125 44 93 385 2125 44 2126 398 2127 40 2128 40 2129 40 2124 41 41 44 2124 41 58 497 2018 46 2024 40 2130 61 2126 41 58 2018 46 2090 40 2025 91 2125 93 44 2126 41 348 2131 40 2018 41 58 648 2132 61 40 648 648 648 648 41 497 2018 46 2133 40 2134 44 2132 41 58 2005 46 2006 46 2118 40 2011 61 648 41 46 2135 40 2010 61 2028 40 2029 61 2075 40 648 41 44 2038 61 648 41 44 41 348 2136 40 2018 41 58 648 2132 61 40 648 648 41 497 2018 46 2133 40 2134 44 2132 41 58 2005 46 2006 46 2137 40 2008 61 648 44 2011 61 648 44 2012 61 2016 46 2032 40 1505 44 1502 44 1501 41 44 2010 61 2028 40 2029 61 2037 40 2138 40 1505 41 44 2023 61 2021 40 648 41 46 2022 40 41 41 41 44 41 348 2139 40 2018 41 58 2140 61 2005 46 2006 46 2026 40 2141 61 2028 40 2057 40 648 41 44 2038 61 2021 40 648 41 44 2023 61 2021 40 648 41 46 2064 40 41 41 41 46 2121 40 648 41 2142 61 2005 46 2006 46 2118 40 2143 61 2140 41 2018 46 2144 40 2142 46 2121 40 648 44 648 41 44 91 123 648 58 648 44 648 58 1506 125 44 123 648 58 648 44 648 58 1506 125 44 123 648 58 648 44 648 58 1506 125 44 123 648 58 648 44 648 58 1506 125 44 123 648 58 648 44 648 58 1506 125 93 41 64 2087 40 648 41 348 2145 40 2018 41 58 2146 46 2006 46 2007 40 91 2146 40 2147 61 123 648 58 648 44 648 58 648 44 648 58 1506 125 41 44 2146 40 2147 61 123 648 58 648 44 648 58 648 44 648 58 1506 125 41 44 2146 40 2147 61 123 648 58 648 44 648 58 648 44 648 58 1506 125 41 44 2146 40 2147 61 123 648 58 648 44 648 58 648 44 648 58 1506 125 41 44 2146 40 2147 61 123 648 58 648 44 648 58 648 44 648 58 1506 125 41 44 93 41 2019 61 91 40 2148 40 648 44 648 41 44 2148 40 648 44 648 41 41 44 40 2021 40 648 41 44 2021 40 648 41 41 44 93 385 2038 44 2023 398 2019 58 497 2018 46 2024 40 2038 61 2038 44 2023 61 2023 41 58 2025 61 2146 46 2006 46 2026 40 2036 61 2028 40 2029 61 2037 40 2149 40 2150 40 648 44 648 41 44 2151 61 2152 40 41 44 41 41 44 2038 61 91 2038 93 44 2023 61 91 2023 93 44 41 41 46 2023 40 648 44 648 41 2018 46 2031 40 2025 44 91 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1507 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 40 648 44 648 44 1506 44 1506 41 44 93 44 409 2033 58 40 2033 46 2147 91 648 93 44 2033 46 2147 91 648 93 44 2033 46 2147 91 648 93 44 2033 46 2036 44 41 41 348 2153 40 2018 41 58 2132 61 648 497 2018 46 2133 40 2154 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2109 61 2110 40 2111 61 1502 41 44 41 41 41 348 2156 40 2018 41 58 2132 61 648 497 2018 46 2133 40 2154 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2109 61 2110 40 2112 61 45 1502 41 44 41 41 41 348 2157 40 2018 41 58 2132 61 648 497 2018 46 2133 40 2154 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2109 61 2110 40 2112 61 648 41 44 41 41 41 348 2158 40 2018 41 58 2132 61 648 497 2018 46 2133 40 2154 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2109 61 2110 40 2111 61 648 41 44 41 41 41 348 2159 40 2018 41 58 2132 61 648 497 2018 46 2133 40 2154 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2109 61 2120 40 2112 61 648 41 44 41 41 41 64 2087 40 648 41 348 2160 40 2018 41 58 2132 61 648 37 2161 46 2162 497 2018 46 2133 40 2163 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2109 61 2110 40 2111 61 45 1501 41 44 41 41 41 64 2087 40 648 41 348 2164 40 2018 41 58 2132 61 648 37 2161 46 2162 497 2018 46 2133 40 2163 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2109 61 2110 40 2112 61 1501 41 44 41 41 41 348 2165 40 2018 41 58 2132 61 648 497 2018 46 2133 40 2154 44 2132 41 58 411 40 2005 46 2006 46 2026 40 2155 61 2028 40 2029 61 2037 40 648 41 44 2023 61 2021 40 648 41 46 2022 40 41 44 2109 61 2120 40 2111 61 648 41 44 41 41 41 
134295,Python,"class CaseExpressionTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')
        O2OCaseTestModel.objects.create(o2o=o, integer=1)
        FKCaseTestModel.objects.create(fk=o, integer=1)

        o = CaseTestModel.objects.create(integer=2, integer2=3, string='2')
        O2OCaseTestModel.objects.create(o2o=o, integer=2)
        FKCaseTestModel.objects.create(fk=o, integer=2)
        FKCaseTestModel.objects.create(fk=o, integer=3)

        o = CaseTestModel.objects.create(integer=3, integer2=4, string='3')
        O2OCaseTestModel.objects.create(o2o=o, integer=3)
        FKCaseTestModel.objects.create(fk=o, integer=3)
        FKCaseTestModel.objects.create(fk=o, integer=4)

        o = CaseTestModel.objects.create(integer=2, integer2=2, string='2')
        O2OCaseTestModel.objects.create(o2o=o, integer=2)
        FKCaseTestModel.objects.create(fk=o, integer=2)
        FKCaseTestModel.objects.create(fk=o, integer=3)

        o = CaseTestModel.objects.create(integer=3, integer2=4, string='3')
        O2OCaseTestModel.objects.create(o2o=o, integer=3)
        FKCaseTestModel.objects.create(fk=o, integer=3)
        FKCaseTestModel.objects.create(fk=o, integer=4)

        o = CaseTestModel.objects.create(integer=3, integer2=3, string='3')
        O2OCaseTestModel.objects.create(o2o=o, integer=3)
        FKCaseTestModel.objects.create(fk=o, integer=3)
        FKCaseTestModel.objects.create(fk=o, integer=4)

        o = CaseTestModel.objects.create(integer=4, integer2=5, string='4')
        O2OCaseTestModel.objects.create(o2o=o, integer=1)
        FKCaseTestModel.objects.create(fk=o, integer=5)

        cls.group_by_fields = [
            f.name for f in CaseTestModel._meta.get_fields()
            if not (f.is_relation and f.auto_created) and
            (
                connection.features.allows_group_by_lob or
                not isinstance(f, (BinaryField, TextField))
            )
        ]

    def test_annotate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(test=Case(
                When(integer=1, then=Value('one')),
                When(integer=2, then=Value('two')),
                default=Value('other'),
            )).order_by('pk'),
            [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],
            transform=attrgetter('integer', 'test')
        )

    def test_annotate_without_default(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(test=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            )).order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'test')
        )

    def test_annotate_with_expression_as_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(f_test=Case(
                When(integer=1, then=F('integer') + 1),
                When(integer=2, then=F('integer') + 3),
                default='integer',
            )).order_by('pk'),
            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 4)],
            transform=attrgetter('integer', 'f_test')
        )

    def test_annotate_with_expression_as_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(f_test=Case(
                When(integer2=F('integer'), then=Value('equal')),
                When(integer2=F('integer') + 1, then=Value('+1')),
            )).order_by('pk'),
            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],
            transform=attrgetter('integer', 'f_test')
        )

    def test_annotate_with_join_in_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(join_test=Case(
                When(integer=1, then=F('o2o_rel__integer') + 1),
                When(integer=2, then=F('o2o_rel__integer') + 3),
                default='o2o_rel__integer',
            )).order_by('pk'),
            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 1)],
            transform=attrgetter('integer', 'join_test')
        )

    def test_annotate_with_in_clause(self):
        fk_rels = FKCaseTestModel.objects.filter(integer__in=[5])
        self.assertQuerysetEqual(
            CaseTestModel.objects.only('pk', 'integer').annotate(in_test=Sum(Case(
                When(fk_rel__in=fk_rels, then=F('fk_rel__integer')),
                default=Value(0),
            ))).order_by('pk'),
            [(1, 0), (2, 0), (3, 0), (2, 0), (3, 0), (3, 0), (4, 5)],
            transform=attrgetter('integer', 'in_test')
        )

    def test_annotate_with_join_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(join_test=Case(
                When(integer2=F('o2o_rel__integer'), then=Value('equal')),
                When(integer2=F('o2o_rel__integer') + 1, then=Value('+1')),
                default=Value('other'),
            )).order_by('pk'),
            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, 'other')],
            transform=attrgetter('integer', 'join_test')
        )

    def test_annotate_with_join_in_predicate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(join_test=Case(
                When(o2o_rel__integer=1, then=Value('one')),
                When(o2o_rel__integer=2, then=Value('two')),
                When(o2o_rel__integer=3, then=Value('three')),
                default=Value('other'),
            )).order_by('pk'),
            [(1, 'one'), (2, 'two'), (3, 'three'), (2, 'two'), (3, 'three'), (3, 'three'), (4, 'one')],
            transform=attrgetter('integer', 'join_test')
        )

    def test_annotate_with_annotation_in_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                f_plus_1=F('integer') + 1,
                f_plus_3=F('integer') + 3,
            ).annotate(
                f_test=Case(
                    When(integer=1, then='f_plus_1'),
                    When(integer=2, then='f_plus_3'),
                    default='integer',
                ),
            ).order_by('pk'),
            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 4)],
            transform=attrgetter('integer', 'f_test')
        )

    def test_annotate_with_annotation_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                f_plus_1=F('integer') + 1,
            ).annotate(
                f_test=Case(
                    When(integer2=F('integer'), then=Value('equal')),
                    When(integer2=F('f_plus_1'), then=Value('+1')),
                ),
            ).order_by('pk'),
            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],
            transform=attrgetter('integer', 'f_test')
        )

    def test_annotate_with_annotation_in_predicate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                f_minus_2=F('integer') - 2,
            ).annotate(
                test=Case(
                    When(f_minus_2=-1, then=Value('negative one')),
                    When(f_minus_2=0, then=Value('zero')),
                    When(f_minus_2=1, then=Value('one')),
                    default=Value('other'),
                ),
            ).order_by('pk'),
            [(1, 'negative one'), (2, 'zero'), (3, 'one'), (2, 'zero'), (3, 'one'), (3, 'one'), (4, 'other')],
            transform=attrgetter('integer', 'test')
        )

    def test_annotate_with_aggregation_in_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                min=Min('fk_rel__integer'),
                max=Max('fk_rel__integer'),
            ).annotate(
                test=Case(
                    When(integer=2, then='min'),
                    When(integer=3, then='max'),
                ),
            ).order_by('pk'),
            [(1, None, 1, 1), (2, 2, 2, 3), (3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4), (3, 4, 3, 4), (4, None, 5, 5)],
            transform=itemgetter('integer', 'test', 'min', 'max')
        )

    def test_annotate_with_aggregation_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                min=Min('fk_rel__integer'),
                max=Max('fk_rel__integer'),
            ).annotate(
                test=Case(
                    When(integer2=F('min'), then=Value('min')),
                    When(integer2=F('max'), then=Value('max')),
                ),
            ).order_by('pk'),
            [(1, 1, 'min'), (2, 3, 'max'), (3, 4, 'max'), (2, 2, 'min'), (3, 4, 'max'), (3, 3, 'min'), (4, 5, 'min')],
            transform=itemgetter('integer', 'integer2', 'test')
        )

    def test_annotate_with_aggregation_in_predicate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                max=Max('fk_rel__integer'),
            ).annotate(
                test=Case(
                    When(max=3, then=Value('max = 3')),
                    When(max=4, then=Value('max = 4')),
                    default=Value(''),
                ),
            ).order_by('pk'),
            [(1, 1, ''), (2, 3, 'max = 3'), (3, 4, 'max = 4'), (2, 3, 'max = 3'),
             (3, 4, 'max = 4'), (3, 4, 'max = 4'), (4, 5, '')],
            transform=itemgetter('integer', 'max', 'test')
        )

    def test_annotate_exclude(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(test=Case(
                When(integer=1, then=Value('one')),
                When(integer=2, then=Value('two')),
                default=Value('other'),
            )).exclude(test='other').order_by('pk'),
            [(1, 'one'), (2, 'two'), (2, 'two')],
            transform=attrgetter('integer', 'test')
        )

    def test_annotate_filter_decimal(self):
        obj = CaseTestModel.objects.create(integer=0, decimal=Decimal('1'))
        qs = CaseTestModel.objects.annotate(
            x=Case(When(integer=0, then=F('decimal'))),
            y=Case(When(integer=0, then=Value(Decimal('1')))),
        )
        self.assertSequenceEqual(qs.filter(Q(x=1) & Q(x=Decimal('1'))), [obj])
        self.assertSequenceEqual(qs.filter(Q(y=1) & Q(y=Decimal('1'))), [obj])

    def test_annotate_values_not_in_order_by(self):
        self.assertEqual(
            list(CaseTestModel.objects.annotate(test=Case(
                When(integer=1, then=Value('one')),
                When(integer=2, then=Value('two')),
                When(integer=3, then=Value('three')),
                default=Value('other'),
            )).order_by('test').values_list('integer', flat=True)),
            [1, 4, 3, 3, 3, 2, 2]
        )

    def test_annotate_with_empty_when(self):
        objects = CaseTestModel.objects.annotate(
            selected=Case(
                When(pk__in=[], then=Value('selected')),
                default=Value('not selected'),
            )
        )
        self.assertEqual(len(objects), CaseTestModel.objects.count())
        self.assertTrue(all(obj.selected == 'not selected' for obj in objects))

    def test_combined_expression(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                test=Case(
                    When(integer=1, then=2),
                    When(integer=2, then=1),
                    default=3,
                ) + 1,
            ).order_by('pk'),
            [(1, 3), (2, 2), (3, 4), (2, 2), (3, 4), (3, 4), (4, 4)],
            transform=attrgetter('integer', 'test')
        )

    def test_in_subquery(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(
                pk__in=CaseTestModel.objects.annotate(
                    test=Case(
                        When(integer=F('integer2'), then='pk'),
                        When(integer=4, then='pk'),
                    ),
                ).values('test')).order_by('pk'),
            [(1, 1), (2, 2), (3, 3), (4, 5)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_condition_with_lookups(self):
        qs = CaseTestModel.objects.annotate(
            test=Case(
                When(Q(integer2=1), string='2', then=Value(False)),
                When(Q(integer2=1), string='1', then=Value(True)),
                default=Value(False),
                output_field=BooleanField(),
            ),
        )
        self.assertIs(qs.get(integer=1).test, True)

    def test_case_reuse(self):
        SOME_CASE = Case(
            When(pk=0, then=Value('0')),
            default=Value('1'),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk'),
            CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk').values_list('pk', 'somecase'),
            lambda x: (x.pk, x.somecase)
        )

    def test_aggregate(self):
        self.assertEqual(
            CaseTestModel.objects.aggregate(
                one=Sum(Case(
                    When(integer=1, then=1),
                )),
                two=Sum(Case(
                    When(integer=2, then=1),
                )),
                three=Sum(Case(
                    When(integer=3, then=1),
                )),
                four=Sum(Case(
                    When(integer=4, then=1),
                )),
            ),
            {'one': 1, 'two': 2, 'three': 3, 'four': 1}
        )

    def test_aggregate_with_expression_as_value(self):
        self.assertEqual(
            CaseTestModel.objects.aggregate(
                one=Sum(Case(When(integer=1, then='integer'))),
                two=Sum(Case(When(integer=2, then=F('integer') - 1))),
                three=Sum(Case(When(integer=3, then=F('integer') + 1))),
            ),
            {'one': 1, 'two': 2, 'three': 12}
        )

    def test_aggregate_with_expression_as_condition(self):
        self.assertEqual(
            CaseTestModel.objects.aggregate(
                equal=Sum(Case(
                    When(integer2=F('integer'), then=1),
                )),
                plus_one=Sum(Case(
                    When(integer2=F('integer') + 1, then=1),
                )),
            ),
            {'equal': 3, 'plus_one': 4}
        )

    def test_filter(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer2=Case(
                When(integer=2, then=3),
                When(integer=3, then=4),
                default=1,
            )).order_by('pk'),
            [(1, 1), (2, 3), (3, 4), (3, 4)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_without_default(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer2=Case(
                When(integer=2, then=3),
                When(integer=3, then=4),
            )).order_by('pk'),
            [(2, 3), (3, 4), (3, 4)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_expression_as_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer2=Case(
                When(integer=2, then=F('integer') + 1),
                When(integer=3, then=F('integer')),
                default='integer',
            )).order_by('pk'),
            [(1, 1), (2, 3), (3, 3)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_expression_as_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(string=Case(
                When(integer2=F('integer'), then=Value('2')),
                When(integer2=F('integer') + 1, then=Value('3')),
            )).order_by('pk'),
            [(3, 4, '3'), (2, 2, '2'), (3, 4, '3')],
            transform=attrgetter('integer', 'integer2', 'string')
        )

    def test_filter_with_join_in_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer2=Case(
                When(integer=2, then=F('o2o_rel__integer') + 1),
                When(integer=3, then=F('o2o_rel__integer')),
                default='o2o_rel__integer',
            )).order_by('pk'),
            [(1, 1), (2, 3), (3, 3)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_join_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer=Case(
                When(integer2=F('o2o_rel__integer') + 1, then=2),
                When(integer2=F('o2o_rel__integer'), then=3),
            )).order_by('pk'),
            [(2, 3), (3, 3)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_join_in_predicate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer2=Case(
                When(o2o_rel__integer=1, then=1),
                When(o2o_rel__integer=2, then=3),
                When(o2o_rel__integer=3, then=4),
            )).order_by('pk'),
            [(1, 1), (2, 3), (3, 4), (3, 4)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_annotation_in_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                f=F('integer'),
                f_plus_1=F('integer') + 1,
            ).filter(
                integer2=Case(
                    When(integer=2, then='f_plus_1'),
                    When(integer=3, then='f'),
                ),
            ).order_by('pk'),
            [(2, 3), (3, 3)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_annotation_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                f_plus_1=F('integer') + 1,
            ).filter(
                integer=Case(
                    When(integer2=F('integer'), then=2),
                    When(integer2=F('f_plus_1'), then=3),
                ),
            ).order_by('pk'),
            [(3, 4), (2, 2), (3, 4)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_annotation_in_predicate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                f_plus_1=F('integer') + 1,
            ).filter(
                integer2=Case(
                    When(f_plus_1=3, then=3),
                    When(f_plus_1=4, then=4),
                    default=1,
                ),
            ).order_by('pk'),
            [(1, 1), (2, 3), (3, 4), (3, 4)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_filter_with_aggregation_in_value(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                min=Min('fk_rel__integer'),
                max=Max('fk_rel__integer'),
            ).filter(
                integer2=Case(
                    When(integer=2, then='min'),
                    When(integer=3, then='max'),
                ),
            ).order_by('pk'),
            [(3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4)],
            transform=itemgetter('integer', 'integer2', 'min', 'max')
        )

    def test_filter_with_aggregation_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                min=Min('fk_rel__integer'),
                max=Max('fk_rel__integer'),
            ).filter(
                integer=Case(
                    When(integer2=F('min'), then=2),
                    When(integer2=F('max'), then=3),
                ),
            ).order_by('pk'),
            [(3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4)],
            transform=itemgetter('integer', 'integer2', 'min', 'max')
        )

    def test_filter_with_aggregation_in_predicate(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                max=Max('fk_rel__integer'),
            ).filter(
                integer=Case(
                    When(max=3, then=2),
                    When(max=4, then=3),
                ),
            ).order_by('pk'),
            [(2, 3, 3), (3, 4, 4), (2, 2, 3), (3, 4, 4), (3, 3, 4)],
            transform=itemgetter('integer', 'integer2', 'max')
        )

    def test_update(self):
        CaseTestModel.objects.update(
            string=Case(
                When(integer=1, then=Value('one')),
                When(integer=2, then=Value('two')),
                default=Value('other'),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],
            transform=attrgetter('integer', 'string')
        )

    def test_update_without_default(self):
        CaseTestModel.objects.update(
            integer2=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'integer2')
        )

    def test_update_with_expression_as_value(self):
        CaseTestModel.objects.update(
            integer=Case(
                When(integer=1, then=F('integer') + 1),
                When(integer=2, then=F('integer') + 3),
                default='integer',
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [('1', 2), ('2', 5), ('3', 3), ('2', 5), ('3', 3), ('3', 3), ('4', 4)],
            transform=attrgetter('string', 'integer')
        )

    def test_update_with_expression_as_condition(self):
        CaseTestModel.objects.update(
            string=Case(
                When(integer2=F('integer'), then=Value('equal')),
                When(integer2=F('integer') + 1, then=Value('+1')),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],
            transform=attrgetter('integer', 'string')
        )

    def test_update_with_join_in_condition_raise_field_error(self):
        with self.assertRaisesMessage(FieldError, 'Joined field references are not permitted in this query'):
            CaseTestModel.objects.update(
                integer=Case(
                    When(integer2=F('o2o_rel__integer') + 1, then=2),
                    When(integer2=F('o2o_rel__integer'), then=3),
                ),
            )

    def test_update_with_join_in_predicate_raise_field_error(self):
        with self.assertRaisesMessage(FieldError, 'Joined field references are not permitted in this query'):
            CaseTestModel.objects.update(
                string=Case(
                    When(o2o_rel__integer=1, then=Value('one')),
                    When(o2o_rel__integer=2, then=Value('two')),
                    When(o2o_rel__integer=3, then=Value('three')),
                    default=Value('other'),
                ),
            )

    def test_update_big_integer(self):
        CaseTestModel.objects.update(
            big_integer=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'big_integer')
        )

    def test_update_binary(self):
        CaseTestModel.objects.update(
            binary=Case(
                When(integer=1, then=b'one'),
                When(integer=2, then=b'two'),
                default=b'',
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, b'one'), (2, b'two'), (3, b''), (2, b'two'), (3, b''), (3, b''), (4, b'')],
            transform=lambda o: (o.integer, bytes(o.binary))
        )

    def test_update_boolean(self):
        CaseTestModel.objects.update(
            boolean=Case(
                When(integer=1, then=True),
                When(integer=2, then=True),
                default=False,
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, True), (2, True), (3, False), (2, True), (3, False), (3, False), (4, False)],
            transform=attrgetter('integer', 'boolean')
        )

    def test_update_date(self):
        CaseTestModel.objects.update(
            date=Case(
                When(integer=1, then=date(2015, 1, 1)),
                When(integer=2, then=date(2015, 1, 2)),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [
                (1, date(2015, 1, 1)), (2, date(2015, 1, 2)), (3, None), (2, date(2015, 1, 2)),
                (3, None), (3, None), (4, None)
            ],
            transform=attrgetter('integer', 'date')
        )

    def test_update_date_time(self):
        CaseTestModel.objects.update(
            date_time=Case(
                When(integer=1, then=datetime(2015, 1, 1)),
                When(integer=2, then=datetime(2015, 1, 2)),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [
                (1, datetime(2015, 1, 1)), (2, datetime(2015, 1, 2)), (3, None), (2, datetime(2015, 1, 2)),
                (3, None), (3, None), (4, None)
            ],
            transform=attrgetter('integer', 'date_time')
        )

    def test_update_decimal(self):
        CaseTestModel.objects.update(
            decimal=Case(
                When(integer=1, then=Decimal('1.1')),
                When(integer=2, then=Value(Decimal('2.2'), output_field=DecimalField())),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [
                (1, Decimal('1.1')),
                (2, Decimal('2.2')),
                (3, None),
                (2, Decimal('2.2')),
                (3, None),
                (3, None),
                (4, None)
            ],
            transform=attrgetter('integer', 'decimal')
        )

    def test_update_duration(self):
        CaseTestModel.objects.update(
            duration=Case(
                When(integer=1, then=timedelta(1)),
                When(integer=2, then=timedelta(2)),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, timedelta(1)), (2, timedelta(2)), (3, None), (2, timedelta(2)), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'duration')
        )

    def test_update_email(self):
        CaseTestModel.objects.update(
            email=Case(
                When(integer=1, then=Value('1@example.com')),
                When(integer=2, then=Value('2@example.com')),
                default=Value(''),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '1@example.com'), (2, '2@example.com'), (3, ''), (2, '2@example.com'), (3, ''), (3, ''), (4, '')],
            transform=attrgetter('integer', 'email')
        )

    def test_update_file(self):
        CaseTestModel.objects.update(
            file=Case(
                When(integer=1, then=Value('~/1')),
                When(integer=2, then=Value('~/2')),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],
            transform=lambda o: (o.integer, str(o.file))
        )

    def test_update_file_path(self):
        CaseTestModel.objects.update(
            file_path=Case(
                When(integer=1, then=Value('~/1')),
                When(integer=2, then=Value('~/2')),
                default=Value(''),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],
            transform=attrgetter('integer', 'file_path')
        )

    def test_update_float(self):
        CaseTestModel.objects.update(
            float=Case(
                When(integer=1, then=1.1),
                When(integer=2, then=2.2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1.1), (2, 2.2), (3, None), (2, 2.2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'float')
        )

    @unittest.skipUnless(Image, ""Pillow not installed"")
    def test_update_image(self):
        CaseTestModel.objects.update(
            image=Case(
                When(integer=1, then=Value('~/1')),
                When(integer=2, then=Value('~/2')),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],
            transform=lambda o: (o.integer, str(o.image))
        )

    def test_update_generic_ip_address(self):
        CaseTestModel.objects.update(
            generic_ip_address=Case(
                When(integer=1, then=Value('1.1.1.1')),
                When(integer=2, then=Value('2.2.2.2')),
                output_field=GenericIPAddressField(),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '1.1.1.1'), (2, '2.2.2.2'), (3, None), (2, '2.2.2.2'), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'generic_ip_address')
        )

    def test_update_null_boolean(self):
        CaseTestModel.objects.update(
            null_boolean=Case(
                When(integer=1, then=True),
                When(integer=2, then=False),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, True), (2, False), (3, None), (2, False), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'null_boolean')
        )

    def test_update_positive_big_integer(self):
        CaseTestModel.objects.update(
            positive_big_integer=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'positive_big_integer')
        )

    def test_update_positive_integer(self):
        CaseTestModel.objects.update(
            positive_integer=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'positive_integer')
        )

    def test_update_positive_small_integer(self):
        CaseTestModel.objects.update(
            positive_small_integer=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'positive_small_integer')
        )

    def test_update_slug(self):
        CaseTestModel.objects.update(
            slug=Case(
                When(integer=1, then=Value('1')),
                When(integer=2, then=Value('2')),
                default=Value(''),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '1'), (2, '2'), (3, ''), (2, '2'), (3, ''), (3, ''), (4, '')],
            transform=attrgetter('integer', 'slug')
        )

    def test_update_small_integer(self):
        CaseTestModel.objects.update(
            small_integer=Case(
                When(integer=1, then=1),
                When(integer=2, then=2),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'small_integer')
        )

    def test_update_string(self):
        CaseTestModel.objects.filter(string__in=['1', '2']).update(
            string=Case(
                When(integer=1, then=Value('1')),
                When(integer=2, then=Value('2')),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(string__in=['1', '2']).order_by('pk'),
            [(1, '1'), (2, '2'), (2, '2')],
            transform=attrgetter('integer', 'string')
        )

    def test_update_text(self):
        CaseTestModel.objects.update(
            text=Case(
                When(integer=1, then=Value('1')),
                When(integer=2, then=Value('2')),
                default=Value(''),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, '1'), (2, '2'), (3, ''), (2, '2'), (3, ''), (3, ''), (4, '')],
            transform=attrgetter('integer', 'text')
        )

    def test_update_time(self):
        CaseTestModel.objects.update(
            time=Case(
                When(integer=1, then=time(1)),
                When(integer=2, then=time(2)),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, time(1)), (2, time(2)), (3, None), (2, time(2)), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'time')
        )

    def test_update_url(self):
        CaseTestModel.objects.update(
            url=Case(
                When(integer=1, then=Value('http://1.example.com/')),
                When(integer=2, then=Value('http://2.example.com/')),
                default=Value(''),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [
                (1, 'http://1.example.com/'), (2, 'http://2.example.com/'), (3, ''), (2, 'http://2.example.com/'),
                (3, ''), (3, ''), (4, '')
            ],
            transform=attrgetter('integer', 'url')
        )

    def test_update_uuid(self):
        CaseTestModel.objects.update(
            uuid=Case(
                When(integer=1, then=UUID('11111111111111111111111111111111')),
                When(integer=2, then=UUID('22222222222222222222222222222222')),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [
                (1, UUID('11111111111111111111111111111111')),
                (2, UUID('22222222222222222222222222222222')),
                (3, None),
                (2, UUID('22222222222222222222222222222222')),
                (3, None),
                (3, None),
                (4, None),
            ],
            transform=attrgetter('integer', 'uuid')
        )

    def test_update_fk(self):
        obj1, obj2 = CaseTestModel.objects.all()[:2]

        CaseTestModel.objects.update(
            fk=Case(
                When(integer=1, then=obj1.pk),
                When(integer=2, then=obj2.pk),
            ),
        )
        self.assertQuerysetEqual(
            CaseTestModel.objects.all().order_by('pk'),
            [(1, obj1.pk), (2, obj2.pk), (3, None), (2, obj2.pk), (3, None), (3, None), (4, None)],
            transform=attrgetter('integer', 'fk_id')
        )

    def test_lookup_in_condition(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                test=Case(
                    When(integer__lt=2, then=Value('less than 2')),
                    When(integer__gt=2, then=Value('greater than 2')),
                    default=Value('equal to 2'),
                ),
            ).order_by('pk'),
            [
                (1, 'less than 2'), (2, 'equal to 2'), (3, 'greater than 2'), (2, 'equal to 2'), (3, 'greater than 2'),
                (3, 'greater than 2'), (4, 'greater than 2')
            ],
            transform=attrgetter('integer', 'test')
        )

    def test_lookup_different_fields(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                test=Case(
                    When(integer=2, integer2=3, then=Value('when')),
                    default=Value('default'),
                ),
            ).order_by('pk'),
            [
                (1, 1, 'default'), (2, 3, 'when'), (3, 4, 'default'), (2, 2, 'default'), (3, 4, 'default'),
                (3, 3, 'default'), (4, 5, 'default')
            ],
            transform=attrgetter('integer', 'integer2', 'test')
        )

    def test_combined_q_object(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.annotate(
                test=Case(
                    When(Q(integer=2) | Q(integer2=3), then=Value('when')),
                    default=Value('default'),
                ),
            ).order_by('pk'),
            [
                (1, 1, 'default'), (2, 3, 'when'), (3, 4, 'default'), (2, 2, 'when'), (3, 4, 'default'),
                (3, 3, 'when'), (4, 5, 'default')
            ],
            transform=attrgetter('integer', 'integer2', 'test')
        )

    def test_order_by_conditional_implicit(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer__lte=2).annotate(test=Case(
                When(integer=1, then=2),
                When(integer=2, then=1),
                default=3,
            )).order_by('test', 'pk'),
            [(2, 1), (2, 1), (1, 2)],
            transform=attrgetter('integer', 'test')
        )

    def test_order_by_conditional_explicit(self):
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(integer__lte=2).annotate(test=Case(
                When(integer=1, then=2),
                When(integer=2, then=1),
                default=3,
            )).order_by(F('test').asc(), 'pk'),
            [(2, 1), (2, 1), (1, 2)],
            transform=attrgetter('integer', 'test')
        )

    def test_join_promotion(self):
        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')
        # Testing that:
        # 1. There isn't any object on the remote side of the fk_rel
        #    relation. If the query used inner joins, then the join to fk_rel
        #    would remove o from the results. So, in effect we are testing that
        #    we are promoting the fk_rel join to a left outer join here.
        # 2. The default value of 3 is generated for the case expression.
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(pk=o.pk).annotate(
                foo=Case(
                    When(fk_rel__pk=1, then=2),
                    default=3,
                ),
            ),
            [(o, 3)],
            lambda x: (x, x.foo)
        )
        # Now 2 should be generated, as the fk_rel is null.
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(pk=o.pk).annotate(
                foo=Case(
                    When(fk_rel__isnull=True, then=2),
                    default=3,
                ),
            ),
            [(o, 2)],
            lambda x: (x, x.foo)
        )

    def test_join_promotion_multiple_annotations(self):
        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')
        # Testing that:
        # 1. There isn't any object on the remote side of the fk_rel
        #    relation. If the query used inner joins, then the join to fk_rel
        #    would remove o from the results. So, in effect we are testing that
        #    we are promoting the fk_rel join to a left outer join here.
        # 2. The default value of 3 is generated for the case expression.
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(pk=o.pk).annotate(
                foo=Case(
                    When(fk_rel__pk=1, then=2),
                    default=3,
                ),
                bar=Case(
                    When(fk_rel__pk=1, then=4),
                    default=5,
                ),
            ),
            [(o, 3, 5)],
            lambda x: (x, x.foo, x.bar)
        )
        # Now 2 should be generated, as the fk_rel is null.
        self.assertQuerysetEqual(
            CaseTestModel.objects.filter(pk=o.pk).annotate(
                foo=Case(
                    When(fk_rel__isnull=True, then=2),
                    default=3,
                ),
                bar=Case(
                    When(fk_rel__isnull=True, then=4),
                    default=5,
                ),
            ),
            [(o, 2, 4)],
            lambda x: (x, x.foo, x.bar)
        )

    def test_m2m_exclude(self):
        CaseTestModel.objects.create(integer=10, integer2=1, string='1')
        qs = CaseTestModel.objects.values_list('id', 'integer').annotate(
            cnt=Sum(
                Case(When(~Q(fk_rel__integer=1), then=1), default=2),
            ),
        ).order_by('integer')
        # The first o has 2 as its fk_rel__integer=1, thus it hits the
        # default=2 case. The other ones have 2 as the result as they have 2
        # fk_rel objects, except for integer=4 and integer=10 (created above).
        # The integer=4 case has one integer, thus the result is 1, and
        # integer=10 doesn't have any and this too generates 1 (instead of 0)
        # as ~Q() also matches nulls.
        self.assertQuerysetEqual(
            qs,
            [(1, 2), (2, 2), (2, 2), (3, 2), (3, 2), (3, 2), (4, 1), (10, 1)],
            lambda x: x[1:]
        )

    def test_m2m_reuse(self):
        CaseTestModel.objects.create(integer=10, integer2=1, string='1')
        # Need to use values before annotate so that Oracle will not group
        # by fields it isn't capable of grouping by.
        qs = CaseTestModel.objects.values_list('id', 'integer').annotate(
            cnt=Sum(
                Case(When(~Q(fk_rel__integer=1), then=1), default=2),
            ),
        ).annotate(
            cnt2=Sum(
                Case(When(~Q(fk_rel__integer=1), then=1), default=2),
            ),
        ).order_by('integer')
        self.assertEqual(str(qs.query).count(' JOIN '), 1)
        self.assertQuerysetEqual(
            qs,
            [(1, 2, 2), (2, 2, 2), (2, 2, 2), (3, 2, 2), (3, 2, 2), (3, 2, 2), (4, 1, 1), (10, 1, 1)],
            lambda x: x[1:]
        )

    def test_aggregation_empty_cases(self):
        tests = [
            # Empty cases and default.
            (Case(output_field=IntegerField()), None),
            # Empty cases and a constant default.
            (Case(default=Value('empty')), 'empty'),
            # Empty cases and column in the default.
            (Case(default=F('url')), ''),
        ]
        for case, value in tests:
            with self.subTest(case=case):
                self.assertQuerysetEqual(
                    CaseTestModel.objects.values('string').annotate(
                        case=case,
                        integer_sum=Sum('integer'),
                    ).order_by('string'),
                    [
                        ('1', value, 1),
                        ('2', value, 4),
                        ('3', value, 9),
                        ('4', value, 4),
                    ],
                    transform=itemgetter('string', 'case', 'integer_sum'),
                )",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2005 61 2006 46 2007 46 2008 40 2009 61 1501 44 2010 61 1501 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1501 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1501 41 2005 61 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1502 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2005 61 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1502 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2005 61 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1502 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2005 61 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1502 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2005 61 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1502 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2005 61 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1502 44 461 61 648 41 2011 46 2007 46 2008 40 2012 61 2005 44 2009 61 1501 41 2013 46 2007 46 2008 40 2014 61 2005 44 2009 61 1502 41 2004 46 2015 61 91 2016 46 2017 385 2016 398 2006 46 2018 46 2019 40 41 392 422 40 2016 46 2020 308 2016 46 2021 41 308 40 2022 46 2023 46 2024 428 422 2025 40 2016 44 40 2026 44 2027 41 41 41 93 348 2028 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2040 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2041 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2042 61 2033 40 2034 40 2009 61 1501 44 2035 61 2043 40 648 41 43 1501 41 44 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 43 1502 41 44 349 61 648 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2044 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2042 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 2036 40 648 41 41 44 41 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2045 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2046 61 2033 40 2034 40 2009 61 1501 44 2035 61 2043 40 648 41 43 1501 41 44 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 43 1502 41 44 349 61 648 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1501 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2047 40 2029 41 58 2048 61 2013 46 2007 46 2049 40 2050 61 91 1502 93 41 2029 46 2030 40 2006 46 2007 46 2051 40 648 44 648 41 46 2031 40 2052 61 2053 40 2033 40 2034 40 2054 61 2048 44 2035 61 2043 40 648 41 41 44 349 61 2036 40 1500 41 44 41 41 41 46 2037 40 648 41 44 91 40 1501 44 1500 41 44 40 1502 44 1500 41 44 40 1502 44 1500 41 44 40 1502 44 1500 41 44 40 1502 44 1500 41 44 40 1502 44 1500 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2055 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2046 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2056 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2046 61 2033 40 2034 40 2057 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2057 61 1502 44 2035 61 2036 40 648 41 41 44 2034 40 2057 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2058 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2059 61 2043 40 648 41 43 1501 44 2060 61 2043 40 648 41 43 1502 44 41 46 2031 40 2042 61 2033 40 2034 40 2009 61 1501 44 2035 61 648 41 44 2034 40 2009 61 1502 44 2035 61 648 41 44 349 61 648 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2061 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2059 61 2043 40 648 41 43 1501 44 41 46 2031 40 2042 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2062 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2063 61 2043 40 648 41 45 1502 44 41 46 2031 40 2032 61 2033 40 2034 40 2063 61 45 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2063 61 1500 44 2035 61 2036 40 648 41 41 44 2034 40 2063 61 1501 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2064 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 42 2029 46 2015 41 46 2031 40 2066 61 2067 40 648 41 44 2068 61 2069 40 648 41 44 41 46 2031 40 2032 61 2033 40 2034 40 2009 61 1502 44 2035 61 648 41 44 2034 40 2009 61 1502 44 2035 61 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 303 44 1501 44 1501 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 303 44 1502 44 1502 41 93 44 2038 61 2070 40 648 44 648 44 648 44 648 41 41 348 2071 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 42 2029 46 2015 41 46 2031 40 2066 61 2067 40 648 41 44 2068 61 2069 40 648 41 44 41 46 2031 40 2032 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 1501 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 93 44 2038 61 2070 40 648 44 648 44 648 41 41 348 2072 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 42 2029 46 2015 41 46 2031 40 2068 61 2069 40 648 41 44 41 46 2031 40 2032 61 2033 40 2034 40 2068 61 1502 44 2035 61 2036 40 648 41 41 44 2034 40 2068 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 1501 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 93 44 2038 61 2070 40 648 44 648 44 648 41 41 348 2073 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 41 46 2074 40 2032 61 648 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2075 40 2029 41 58 2076 61 2006 46 2007 46 2008 40 2009 61 1500 44 345 61 2077 40 648 41 41 2078 61 2006 46 2007 46 2031 40 2079 61 2033 40 2034 40 2009 61 1500 44 2035 61 2043 40 648 41 41 41 44 2080 61 2033 40 2034 40 2009 61 1500 44 2035 61 2036 40 2077 40 648 41 41 41 41 44 41 2029 46 2081 40 2078 46 2049 40 2082 40 2079 61 1501 41 38 2082 40 2079 61 2077 40 648 41 41 41 44 91 2076 93 41 2029 46 2081 40 2078 46 2049 40 2082 40 2080 61 1501 41 38 2082 40 2080 61 2077 40 648 41 41 41 44 91 2076 93 41 348 2083 40 2029 41 58 2029 46 2084 40 411 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 41 46 2037 40 648 41 46 2085 40 648 44 2086 61 304 41 41 44 91 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 93 41 348 2087 40 2029 41 58 2007 61 2006 46 2007 46 2031 40 2088 61 2033 40 2034 40 2089 61 91 93 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 41 2029 46 2084 40 2090 40 2007 41 44 2006 46 2007 46 2091 40 41 41 2029 46 2092 40 2093 40 2076 46 2088 614 648 385 2076 398 2007 41 41 348 2094 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 1502 41 44 2034 40 2009 61 1502 44 2035 61 1501 41 44 349 61 1502 44 41 43 1501 44 41 46 2037 40 648 41 44 91 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2095 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2089 61 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 2043 40 648 41 44 2035 61 648 41 44 2034 40 2009 61 1502 44 2035 61 648 41 44 41 44 41 46 2065 40 648 41 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2096 40 2029 41 58 2078 61 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2082 40 2010 61 1501 41 44 461 61 648 44 2035 61 2036 40 302 41 41 44 2034 40 2082 40 2010 61 1501 41 44 461 61 648 44 2035 61 2036 40 304 41 41 44 349 61 2036 40 302 41 44 2097 61 2098 40 41 44 41 44 41 2029 46 2099 40 2078 46 2100 40 2009 61 1501 41 46 2032 44 304 41 348 2101 40 2029 41 58 2102 61 2033 40 2034 40 2103 61 1500 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 2029 46 2030 40 2006 46 2007 46 2031 40 2104 61 2102 41 46 2037 40 648 41 44 2006 46 2007 46 2031 40 2104 61 2102 41 46 2037 40 648 41 46 2085 40 648 44 648 41 44 409 2079 58 40 2079 46 2103 44 2079 46 2104 41 41 348 2105 40 2029 41 58 2029 46 2084 40 2006 46 2007 46 2106 40 2107 61 2053 40 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 41 41 44 2108 61 2053 40 2033 40 2034 40 2009 61 1502 44 2035 61 1501 41 44 41 41 44 2109 61 2053 40 2033 40 2034 40 2009 61 1502 44 2035 61 1501 41 44 41 41 44 2110 61 2053 40 2033 40 2034 40 2009 61 1502 44 2035 61 1501 41 44 41 41 44 41 44 123 648 58 1501 44 648 58 1502 44 648 58 1502 44 648 58 1501 125 41 348 2111 40 2029 41 58 2029 46 2084 40 2006 46 2007 46 2106 40 2107 61 2053 40 2033 40 2034 40 2009 61 1501 44 2035 61 648 41 41 41 44 2108 61 2053 40 2033 40 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 45 1501 41 41 41 44 2109 61 2053 40 2033 40 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 43 1501 41 41 41 44 41 44 123 648 58 1501 44 648 58 1502 44 648 58 1503 125 41 348 2112 40 2029 41 58 2029 46 2084 40 2006 46 2007 46 2106 40 2113 61 2053 40 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 1501 41 44 41 41 44 2114 61 2053 40 2033 40 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 1501 41 44 41 41 44 41 44 123 648 58 1502 44 648 58 1502 125 41 348 2115 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2010 61 2033 40 2034 40 2009 61 1502 44 2035 61 1502 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 349 61 1501 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2116 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2010 61 2033 40 2034 40 2009 61 1502 44 2035 61 1502 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 41 46 2037 40 648 41 44 91 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2117 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2010 61 2033 40 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 43 1501 41 44 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 41 44 349 61 648 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2118 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 461 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 2036 40 648 41 41 44 41 41 46 2037 40 648 41 44 91 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 44 648 41 41 348 2119 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2010 61 2033 40 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 43 1501 41 44 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 41 44 349 61 648 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2120 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2009 61 2033 40 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 1502 41 44 2034 40 2010 61 2043 40 648 41 44 2035 61 1502 41 44 41 41 46 2037 40 648 41 44 91 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2121 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2010 61 2033 40 2034 40 2057 61 1501 44 2035 61 1501 41 44 2034 40 2057 61 1502 44 2035 61 1502 41 44 2034 40 2057 61 1502 44 2035 61 1502 41 44 41 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2122 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2016 61 2043 40 648 41 44 2059 61 2043 40 648 41 43 1501 44 41 46 2049 40 2010 61 2033 40 2034 40 2009 61 1502 44 2035 61 648 41 44 2034 40 2009 61 1502 44 2035 61 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2123 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2059 61 2043 40 648 41 43 1501 44 41 46 2049 40 2009 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 1502 41 44 2034 40 2010 61 2043 40 648 41 44 2035 61 1502 41 44 41 44 41 46 2037 40 648 41 44 91 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2124 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2059 61 2043 40 648 41 43 1501 44 41 46 2049 40 2010 61 2033 40 2034 40 2059 61 1502 44 2035 61 1502 41 44 2034 40 2059 61 1502 44 2035 61 1502 41 44 349 61 1501 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2125 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 42 2029 46 2015 41 46 2031 40 2066 61 2067 40 648 41 44 2068 61 2069 40 648 41 44 41 46 2049 40 2010 61 2033 40 2034 40 2009 61 1502 44 2035 61 648 41 44 2034 40 2009 61 1502 44 2035 61 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 93 44 2038 61 2070 40 648 44 648 44 648 44 648 41 41 348 2126 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 42 2029 46 2015 41 46 2031 40 2066 61 2067 40 648 41 44 2068 61 2069 40 648 41 44 41 46 2049 40 2009 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 1502 41 44 2034 40 2010 61 2043 40 648 41 44 2035 61 1502 41 44 41 44 41 46 2037 40 648 41 44 91 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 44 1502 41 93 44 2038 61 2070 40 648 44 648 44 648 44 648 41 41 348 2127 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 42 2029 46 2015 41 46 2031 40 2068 61 2069 40 648 41 44 41 46 2049 40 2009 61 2033 40 2034 40 2068 61 1502 44 2035 61 1502 41 44 2034 40 2068 61 1502 44 2035 61 1502 41 44 41 44 41 46 2037 40 648 41 44 91 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 93 44 2038 61 2070 40 648 44 648 44 648 41 41 348 2128 40 2029 41 58 2006 46 2007 46 2129 40 461 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2130 40 2029 41 58 2006 46 2007 46 2129 40 2010 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2131 40 2029 41 58 2006 46 2007 46 2129 40 2009 61 2033 40 2034 40 2009 61 1501 44 2035 61 2043 40 648 41 43 1501 41 44 2034 40 2009 61 1502 44 2035 61 2043 40 648 41 43 1502 41 44 349 61 648 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2132 40 2029 41 58 2006 46 2007 46 2129 40 461 61 2033 40 2034 40 2010 61 2043 40 648 41 44 2035 61 2036 40 648 41 41 44 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 2036 40 648 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2133 40 2029 41 58 497 2029 46 2134 40 2135 44 648 41 58 2006 46 2007 46 2129 40 2009 61 2033 40 2034 40 2010 61 2043 40 648 41 43 1501 44 2035 61 1502 41 44 2034 40 2010 61 2043 40 648 41 44 2035 61 1502 41 44 41 44 41 348 2136 40 2029 41 58 497 2029 46 2134 40 2135 44 648 41 58 2006 46 2007 46 2129 40 461 61 2033 40 2034 40 2057 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2057 61 1502 44 2035 61 2036 40 648 41 41 44 2034 40 2057 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 348 2137 40 2029 41 58 2006 46 2007 46 2129 40 2138 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2139 40 2029 41 58 2006 46 2007 46 2129 40 2140 61 2033 40 2034 40 2009 61 1501 44 2035 61 648 41 44 2034 40 2009 61 1502 44 2035 61 648 41 44 349 61 648 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 409 2005 58 40 2005 46 2009 44 2141 40 2005 46 2140 41 41 41 348 2142 40 2029 41 58 2006 46 2007 46 2129 40 324 61 2033 40 2034 40 2009 61 1501 44 2035 61 304 41 44 2034 40 2009 61 1502 44 2035 61 304 41 44 349 61 302 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 304 41 44 40 1502 44 304 41 44 40 1502 44 302 41 44 40 1502 44 304 41 44 40 1502 44 302 41 44 40 1502 44 302 41 44 40 1502 44 302 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2143 40 2029 41 58 2006 46 2007 46 2129 40 2144 61 2033 40 2034 40 2009 61 1501 44 2035 61 2144 40 1505 44 1501 44 1501 41 41 44 2034 40 2009 61 1502 44 2035 61 2144 40 1505 44 1501 44 1502 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2144 40 1505 44 1501 44 1501 41 41 44 40 1502 44 2144 40 1505 44 1501 44 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 2144 40 1505 44 1501 44 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2145 40 2029 41 58 2006 46 2007 46 2129 40 2146 61 2033 40 2034 40 2009 61 1501 44 2035 61 2147 40 1505 44 1501 44 1501 41 41 44 2034 40 2009 61 1502 44 2035 61 2147 40 1505 44 1501 44 1502 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2147 40 1505 44 1501 44 1501 41 41 44 40 1502 44 2147 40 1505 44 1501 44 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 2147 40 1505 44 1501 44 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2148 40 2029 41 58 2006 46 2007 46 2129 40 345 61 2033 40 2034 40 2009 61 1501 44 2035 61 2077 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 2077 40 648 41 44 2097 61 2149 40 41 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2077 40 648 41 41 44 40 1502 44 2077 40 648 41 41 44 40 1502 44 303 41 44 40 1502 44 2077 40 648 41 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2150 40 2029 41 58 2006 46 2007 46 2129 40 2151 61 2033 40 2034 40 2009 61 1501 44 2035 61 2152 40 1501 41 41 44 2034 40 2009 61 1502 44 2035 61 2152 40 1502 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2152 40 1501 41 41 44 40 1502 44 2152 40 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 2152 40 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2153 40 2029 41 58 2006 46 2007 46 2129 40 2154 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2155 40 2029 41 58 2006 46 2007 46 2129 40 2156 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 409 2005 58 40 2005 46 2009 44 2157 40 2005 46 2156 41 41 41 348 2158 40 2029 41 58 2006 46 2007 46 2129 40 2159 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2160 40 2029 41 58 2006 46 2007 46 2129 40 384 61 2033 40 2034 40 2009 61 1501 44 2035 61 1502 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 64 2161 46 2162 40 2163 44 648 41 348 2164 40 2029 41 58 2006 46 2007 46 2129 40 2165 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 409 2005 58 40 2005 46 2009 44 2157 40 2005 46 2165 41 41 41 348 2166 40 2029 41 58 2006 46 2007 46 2129 40 2167 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 2097 61 2168 40 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 303 41 44 40 1502 44 648 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2169 40 2029 41 58 2006 46 2007 46 2129 40 2170 61 2033 40 2034 40 2009 61 1501 44 2035 61 304 41 44 2034 40 2009 61 1502 44 2035 61 302 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 304 41 44 40 1502 44 302 41 44 40 1502 44 303 41 44 40 1502 44 302 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2171 40 2029 41 58 2006 46 2007 46 2129 40 2172 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2173 40 2029 41 58 2006 46 2007 46 2129 40 2174 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2175 40 2029 41 58 2006 46 2007 46 2129 40 2176 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2177 40 2029 41 58 2006 46 2007 46 2129 40 2178 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2179 40 2029 41 58 2006 46 2007 46 2129 40 2180 61 2033 40 2034 40 2009 61 1501 44 2035 61 1501 41 44 2034 40 2009 61 1502 44 2035 61 1502 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 1501 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 1502 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2181 40 2029 41 58 2006 46 2007 46 2049 40 2182 61 91 648 44 648 93 41 46 2129 40 461 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2049 40 2182 61 91 648 44 648 93 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2183 40 2029 41 58 2006 46 2007 46 2129 40 2184 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2185 40 2029 41 58 2006 46 2007 46 2129 40 2186 61 2033 40 2034 40 2009 61 1501 44 2035 61 2186 40 1501 41 41 44 2034 40 2009 61 1502 44 2035 61 2186 40 1502 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2186 40 1501 41 41 44 40 1502 44 2186 40 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 2186 40 1502 41 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2187 40 2029 41 58 2006 46 2007 46 2129 40 2188 61 2033 40 2034 40 2009 61 1501 44 2035 61 2036 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2189 40 2029 41 58 2006 46 2007 46 2129 40 2190 61 2033 40 2034 40 2009 61 1501 44 2035 61 2191 40 648 41 41 44 2034 40 2009 61 1502 44 2035 61 2191 40 648 41 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2191 40 648 41 41 44 40 1502 44 2191 40 648 41 41 44 40 1502 44 303 41 44 40 1502 44 2191 40 648 41 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 93 44 2038 61 2039 40 648 44 648 41 41 348 2192 40 2029 41 58 2193 44 2194 61 2006 46 2007 46 2093 40 41 91 58 1502 93 2006 46 2007 46 2129 40 2014 61 2033 40 2034 40 2009 61 1501 44 2035 61 2193 46 2103 41 44 2034 40 2009 61 1502 44 2035 61 2194 46 2103 41 44 41 44 41 2029 46 2030 40 2006 46 2007 46 2093 40 41 46 2037 40 648 41 44 91 40 1501 44 2193 46 2103 41 44 40 1502 44 2194 46 2103 41 44 40 1502 44 303 41 44 40 1502 44 2194 46 2103 41 44 40 1502 44 303 41 44 40 1502 44 303 41 44 40 1502 44 303 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2195 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2196 61 1502 44 2035 61 2036 40 648 41 41 44 2034 40 2197 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2198 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2009 61 1502 44 2010 61 1502 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 1501 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 44 648 41 41 348 2199 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2031 40 2032 61 2033 40 2034 40 2082 40 2009 61 1502 41 124 2082 40 2010 61 1502 41 44 2035 61 2036 40 648 41 41 44 349 61 2036 40 648 41 44 41 44 41 46 2037 40 648 41 44 91 40 1501 44 1501 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 44 40 1502 44 1502 44 648 41 93 44 2038 61 2039 40 648 44 648 44 648 41 41 348 2200 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2201 61 1502 41 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 1502 41 44 2034 40 2009 61 1502 44 2035 61 1501 41 44 349 61 1502 44 41 41 46 2037 40 648 44 648 41 44 91 40 1502 44 1501 41 44 40 1502 44 1501 41 44 40 1501 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2202 40 2029 41 58 2029 46 2030 40 2006 46 2007 46 2049 40 2201 61 1502 41 46 2031 40 2032 61 2033 40 2034 40 2009 61 1501 44 2035 61 1502 41 44 2034 40 2009 61 1502 44 2035 61 1501 41 44 349 61 1502 44 41 41 46 2037 40 2043 40 648 41 46 2203 40 41 44 648 41 44 91 40 1502 44 1501 41 44 40 1502 44 1501 41 44 40 1501 44 1502 41 93 44 2038 61 2039 40 648 44 648 41 41 348 2204 40 2029 41 58 2005 61 2006 46 2007 46 2008 40 2009 61 1501 44 2010 61 1501 44 461 61 648 41 621 621 621 621 621 621 2029 46 2030 40 2006 46 2007 46 2049 40 2103 61 2005 46 2103 41 46 2031 40 2205 61 2033 40 2034 40 2206 61 1501 44 2035 61 1502 41 44 349 61 1502 44 41 44 41 44 91 40 2005 44 1502 41 93 44 409 2079 58 40 2079 44 2079 46 2205 41 41 621 2029 46 2030 40 2006 46 2007 46 2049 40 2103 61 2005 46 2103 41 46 2031 40 2205 61 2033 40 2034 40 2207 61 304 44 2035 61 1502 41 44 349 61 1502 44 41 44 41 44 91 40 2005 44 1502 41 93 44 409 2079 58 40 2079 44 2079 46 2205 41 41 348 2208 40 2029 41 58 2005 61 2006 46 2007 46 2008 40 2009 61 1501 44 2010 61 1501 44 461 61 648 41 621 621 621 621 621 621 2029 46 2030 40 2006 46 2007 46 2049 40 2103 61 2005 46 2103 41 46 2031 40 2205 61 2033 40 2034 40 2206 61 1501 44 2035 61 1502 41 44 349 61 1502 44 41 44 2209 61 2033 40 2034 40 2206 61 1501 44 2035 61 1502 41 44 349 61 1502 44 41 44 41 44 91 40 2005 44 1502 44 1502 41 93 44 409 2079 58 40 2079 44 2079 46 2205 44 2079 46 2209 41 41 621 2029 46 2030 40 2006 46 2007 46 2049 40 2103 61 2005 46 2103 41 46 2031 40 2205 61 2033 40 2034 40 2207 61 304 44 2035 61 1502 41 44 349 61 1502 44 41 44 2209 61 2033 40 2034 40 2207 61 304 44 2035 61 1502 41 44 349 61 1502 44 41 44 41 44 91 40 2005 44 1502 44 1502 41 93 44 409 2079 58 40 2079 44 2079 46 2205 44 2079 46 2209 41 41 348 2210 40 2029 41 58 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1501 44 461 61 648 41 2078 61 2006 46 2007 46 2085 40 648 44 648 41 46 2031 40 2211 61 2053 40 2033 40 2034 40 126 2082 40 2212 61 1501 41 44 2035 61 1501 41 44 349 61 1502 41 44 41 44 41 46 2037 40 648 41 621 621 621 621 621 621 2029 46 2030 40 2078 44 91 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1501 41 44 40 1502 44 1501 41 93 44 409 2079 58 2079 91 1501 58 93 41 348 2213 40 2029 41 58 2006 46 2007 46 2008 40 2009 61 1502 44 2010 61 1501 44 461 61 648 41 621 621 2078 61 2006 46 2007 46 2085 40 648 44 648 41 46 2031 40 2211 61 2053 40 2033 40 2034 40 126 2082 40 2212 61 1501 41 44 2035 61 1501 41 44 349 61 1502 41 44 41 44 41 46 2031 40 2214 61 2053 40 2033 40 2034 40 126 2082 40 2212 61 1501 41 44 2035 61 1501 41 44 349 61 1502 41 44 41 44 41 46 2037 40 648 41 2029 46 2084 40 2157 40 2078 46 2215 41 46 2091 40 648 41 44 1501 41 2029 46 2030 40 2078 44 91 40 1501 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1502 44 1502 41 44 40 1502 44 1501 44 1501 41 44 40 1502 44 1501 44 1501 41 93 44 409 2079 58 2079 91 1501 58 93 41 348 2216 40 2029 41 58 2217 61 91 621 40 2033 40 2097 61 2218 40 41 41 44 303 41 44 621 40 2033 40 349 61 2036 40 648 41 41 44 648 41 44 621 40 2033 40 349 61 2043 40 648 41 41 44 648 41 44 93 385 328 44 2219 398 2217 58 497 2029 46 2220 40 328 61 328 41 58 2029 46 2030 40 2006 46 2007 46 2065 40 648 41 46 2031 40 328 61 328 44 2221 61 2053 40 648 41 44 41 46 2037 40 648 41 44 91 40 648 44 2219 44 1501 41 44 40 648 44 2219 44 1502 41 44 40 648 44 2219 44 1502 41 44 40 648 44 2219 44 1502 41 44 93 44 2038 61 2070 40 648 44 648 44 648 41 44 41 
128815,Python,"class TestTokenStreamRewriter(unittest.TestCase):
    def testInsertBeforeIndexZero(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)
        rewriter.insertBeforeIndex(0, '0')

        self.assertEquals(rewriter.getDefaultText(), '0abc')

    def testInsertAfterLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)
        rewriter.insertAfter(10, 'x')

        self.assertEquals(rewriter.getDefaultText(), 'abcx')

    def test2InsertBeforeAfterMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertAfter(1, 'x')

        self.assertEquals(rewriter.getDefaultText(), 'axbxc')

    def testReplaceIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(0, 'x')

        self.assertEquals(rewriter.getDefaultText(), 'xbc')

    def testReplaceLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'x')

        self.assertEquals(rewriter.getDefaultText(), 'abx')

    def testReplaceMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(1, 'x')

        self.assertEquals(rewriter.getDefaultText(), 'axc')

    def testToStringStartStop(self):
        input = InputStream('x = 3 * 0;')
        lexer = TestLexer2(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(4, 8, '0')

        self.assertEquals(rewriter.getDefaultText(), 'x = 0;')
        self.assertEquals(rewriter.getText('default', 0, 9), 'x = 0;')
        self.assertEquals(rewriter.getText('default', 4, 8), '0')

    def testToStringStartStop2(self):
        input = InputStream('x = 3 * 0 + 2 * 0;')
        lexer = TestLexer2(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        self.assertEquals('x = 3 * 0 + 2 * 0;', rewriter.getDefaultText())

        # replace 3 * 0 with 0
        rewriter.replaceRange(4, 8, '0')
        self.assertEquals('x = 0 + 2 * 0;', rewriter.getDefaultText())
        self.assertEquals('x = 0 + 2 * 0;', rewriter.getText('default', 0, 17))
        self.assertEquals('0', rewriter.getText('default', 4, 8))
        self.assertEquals('x = 0', rewriter.getText('default', 0, 8))
        self.assertEquals('2 * 0', rewriter.getText('default', 12, 16))

        rewriter.insertAfter(17, ""// comment"")
        self.assertEquals('2 * 0;// comment', rewriter.getText('default', 12, 18))

        self.assertEquals('x = 0', rewriter.getText('default', 0, 8))

    def test2ReplaceMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(1, 'x')
        rewriter.replaceIndex(1, 'y')

        self.assertEquals('ayc', rewriter.getDefaultText())

    def test2ReplaceMiddleIndex1InsertBefore(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, ""_"")
        rewriter.replaceIndex(1, 'x')
        rewriter.replaceIndex(1, 'y')

        self.assertEquals('_ayc', rewriter.getDefaultText())

    def test2InsertMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertBeforeIndex(1, 'y')

        self.assertEquals('ayxbc', rewriter.getDefaultText())

    def testReplaceThenDeleteMiddleIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 2, 'x')
        rewriter.insertBeforeIndex(1, '0')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        self.assertEquals(
            'insert op <InsertBeforeOp@[@1,1:1=\'b\',<2>,1:1]:""0""> within boundaries of previous <ReplaceOp@[@0,0:0=\'a\',<1>,1:0]..[@2,2:2=\'c\',<3>,1:2]:""x"">',
            ctx.exception.message
        )

    def testInsertThenReplaceSameIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, '0')
        rewriter.replaceIndex(0, 'x')

        self.assertEquals('0xbc', rewriter.getDefaultText())

    def test2InsertThenReplaceIndex0(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, 'x')
        rewriter.insertBeforeIndex(0, 'y')
        rewriter.replaceIndex(0, 'z')

        self.assertEquals('yxzbc', rewriter.getDefaultText())

    def testReplaceThenInsertBeforeLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'x')
        rewriter.insertBeforeIndex(2, 'y')

        self.assertEquals('abyx', rewriter.getDefaultText())

    def testReplaceThenInsertAfterLastIndex(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'x')
        rewriter.insertAfter(2, 'y')

        self.assertEquals('abxy', rewriter.getDefaultText())

    def testReplaceRangeThenInsertAtLeftEdge(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'x')
        rewriter.insertBeforeIndex(2, 'y')

        self.assertEquals('abyxba', rewriter.getDefaultText())

    def testReplaceRangeThenInsertAtRightEdge(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'x')
        rewriter.insertBeforeIndex(4, 'y')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        msg = ctx.exception.message
        self.assertEquals(
            ""insert op <InsertBeforeOp@[@4,4:4='c',<3>,1:4]:\""y\""> within boundaries of previous <ReplaceOp@[@2,2:2='c',<3>,1:2]..[@4,4:4='c',<3>,1:4]:\""x\"">"",
            msg
        )

    def testReplaceRangeThenInsertAfterRightEdge(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'x')
        rewriter.insertAfter(4, 'y')

        self.assertEquals('abxyba', rewriter.getDefaultText())

    def testReplaceAll(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 6, 'x')

        self.assertEquals('x', rewriter.getDefaultText())

    def testReplaceSubsetThenFetch(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'xyz')

        self.assertEquals('abxyzba', rewriter.getDefaultText())

    def testReplaceThenReplaceSuperset(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'xyz')
        rewriter.replaceRange(3, 5, 'foo')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        msg = ctx.exception.message
        self.assertEquals(
            """"""replace op boundaries of <ReplaceOp@[@3,3:3='c',<3>,1:3]..[@5,5:5='b',<2>,1:5]:""foo""> overlap with previous <ReplaceOp@[@2,2:2='c',<3>,1:2]..[@4,4:4='c',<3>,1:4]:""xyz"">"""""",
            msg
        )

    def testReplaceThenReplaceLowerIndexedSuperset(self):
        input = InputStream('abcccba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 4, 'xyz')
        rewriter.replaceRange(1, 3, 'foo')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()
        msg = ctx.exception.message
        self.assertEquals(
            """"""replace op boundaries of <ReplaceOp@[@1,1:1='b',<2>,1:1]..[@3,3:3='c',<3>,1:3]:""foo""> overlap with previous <ReplaceOp@[@2,2:2='c',<3>,1:2]..[@4,4:4='c',<3>,1:4]:""xyz"">"""""",
            msg
        )

    def testReplaceSingleMiddleThenOverlappingSuperset(self):
        input = InputStream('abcba')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceIndex(2, 'xyz')
        rewriter.replaceRange(0, 3, 'foo')

        self.assertEquals('fooa', rewriter.getDefaultText())

    def testCombineInserts(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, 'x')
        rewriter.insertBeforeIndex(0, 'y')

        self.assertEquals('yxabc', rewriter.getDefaultText())

    def testCombine3Inserts(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertBeforeIndex(0, 'y')
        rewriter.insertBeforeIndex(1, 'z')

        self.assertEquals('yazxbc', rewriter.getDefaultText())

    def testCombineInsertOnLeftWithReplace(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 2, 'foo')
        rewriter.insertBeforeIndex(0, 'z')

        self.assertEquals('zfoo', rewriter.getDefaultText())

    def testCombineInsertOnLeftWithDelete(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.delete('default', 0, 2)
        rewriter.insertBeforeIndex(0, 'z')

        self.assertEquals('z', rewriter.getDefaultText())

    def testDisjointInserts(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.insertBeforeIndex(2, 'y')
        rewriter.insertBeforeIndex(0, 'z')

        self.assertEquals('zaxbyc', rewriter.getDefaultText())

    def testOverlappingReplace(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(0, 3, 'bar')

        self.assertEquals('bar', rewriter.getDefaultText())

    def testOverlappingReplace2(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(0, 3, 'bar')
        rewriter.replaceRange(1, 2, 'foo')

        with self.assertRaises(ValueError) as ctx:
            rewriter.getDefaultText()

        self.assertEquals(
            """"""replace op boundaries of <ReplaceOp@[@1,1:1='b',<2>,1:1]..[@2,2:2='c',<3>,1:2]:""foo""> overlap with previous <ReplaceOp@[@0,0:0='a',<1>,1:0]..[@3,3:2='<EOF>',<-1>,1:3]:""bar"">"""""",
            ctx.exception.message
        )

    def testOverlappingReplace3(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(0, 2, 'bar')

        self.assertEquals('barc', rewriter.getDefaultText())

    def testOverlappingReplace4(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(1, 3, 'bar')

        self.assertEquals('abar', rewriter.getDefaultText())

    def testDropIdenticalReplace(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(1, 2, 'foo')
        rewriter.replaceRange(1, 2, 'foo')

        self.assertEquals('afooc', rewriter.getDefaultText())

    def testDropPrevCoveredInsert(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'foo')
        rewriter.replaceRange(1, 2, 'foo')

        self.assertEquals('afoofoo', rewriter.getDefaultText())

    def testLeaveAloneDisjointInsert(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'x')
        rewriter.replaceRange(2, 3, 'foo')

        self.assertEquals('axbfoo', rewriter.getDefaultText())

    def testLeaveAloneDisjointInsert2(self):
        input = InputStream('abcc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.replaceRange(2, 3, 'foo')
        rewriter.insertBeforeIndex(1, 'x')

        self.assertEquals('axbfoo', rewriter.getDefaultText())

    def testInsertBeforeTokenThenDeleteThatToken(self):
        input = InputStream('abc')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(1, 'foo')
        rewriter.replaceRange(1, 2, 'foo')

        self.assertEquals('afoofoo', rewriter.getDefaultText())

    def testPreservesOrderOfContiguousInserts(self):
        """"""
        Test for fix for: https://github.com/antlr/antlr4/issues/550
        """"""
        input = InputStream('aa')
        lexer = TestLexer(input)
        stream = CommonTokenStream(lexer=lexer)
        stream.fill()
        rewriter = TokenStreamRewriter(tokens=stream)

        rewriter.insertBeforeIndex(0, '<b>')
        rewriter.insertAfter(0, '</b>')
        rewriter.insertBeforeIndex(1, '<b>')
        rewriter.insertAfter(1, '</b>')

        self.assertEquals('<b>a</b><b>a</b>', rewriter.getDefaultText())",1,334 2000 40 2001 46 2002 41 58 348 2003 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2018 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2019 40 1502 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2020 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2019 40 1501 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2021 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1500 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2023 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2024 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1501 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 348 2025 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2026 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 2012 46 2017 40 41 44 648 41 2004 46 2016 40 2012 46 2028 40 648 44 1500 44 1502 41 44 648 41 2004 46 2016 40 2012 46 2028 40 648 44 1502 44 1502 41 44 648 41 348 2029 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2026 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 621 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1500 44 1503 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1502 44 1502 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1500 44 1502 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1503 44 1503 41 41 2012 46 2019 40 1503 44 648 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1503 44 1503 41 41 2004 46 2016 40 648 44 2012 46 2028 40 648 44 1500 44 1502 41 41 348 2030 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1501 44 648 41 2012 46 2022 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2031 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2022 40 1501 44 648 41 2012 46 2022 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2032 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2015 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2033 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2012 46 2015 40 1501 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2004 46 2016 40 648 44 2036 46 2037 46 2038 41 348 2039 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2022 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2040 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2015 40 1500 44 648 41 2012 46 2022 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2041 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2012 46 2015 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2042 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2012 46 2019 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2043 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2015 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2044 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2015 40 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2045 61 2036 46 2037 46 2038 2004 46 2016 40 648 44 2045 41 348 2046 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2019 40 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2047 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2048 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2049 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2027 40 1502 44 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2045 61 2036 46 2037 46 2038 2004 46 2016 40 648 44 2045 41 348 2050 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2045 61 2036 46 2037 46 2038 2004 46 2016 40 648 44 2045 41 348 2051 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2022 40 1502 44 648 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2052 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2053 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2015 40 1500 44 648 41 2012 46 2015 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2054 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2055 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 353 40 648 44 1500 44 1502 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2056 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2015 40 1502 44 648 41 2012 46 2015 40 1500 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2057 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2058 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1500 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 497 2004 46 2034 40 2035 41 311 2036 58 2012 46 2017 40 41 2004 46 2016 40 648 44 2036 46 2037 46 2038 41 348 2059 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1500 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2060 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2061 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1501 44 1502 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2062 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2063 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2027 40 1502 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2064 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2027 40 1502 44 1502 44 648 41 2012 46 2015 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2065 40 2004 41 58 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1501 44 648 41 2012 46 2027 40 1501 44 1502 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 348 2066 40 2004 41 58 648 2005 61 2006 40 648 41 2007 61 2008 40 2005 41 2009 61 2010 40 2007 61 2007 41 2009 46 2011 40 41 2012 61 2013 40 2014 61 2009 41 2012 46 2015 40 1500 44 648 41 2012 46 2019 40 1500 44 648 41 2012 46 2015 40 1501 44 648 41 2012 46 2019 40 1501 44 648 41 2004 46 2016 40 648 44 2012 46 2017 40 41 41 
128788,Python,"class LL1Analyzer (object):
    __slots__ = 'atn'

    #* Special value added to the lookahead sets to indicate that we hit
    #  a predicate during analysis if {@code seeThruPreds==false}.
    #/
    HIT_PRED = Token.INVALID_TYPE

    def __init__(self, atn:ATN):
        self.atn = atn

    #*
    # Calculates the SLL(1) expected lookahead set for each outgoing transition
    # of an {@link ATNState}. The returned array has one element for each
    # outgoing transition in {@code s}. If the closure from transition
    # <em>i</em> leads to a semantic predicate before matching a symbol, the
    # element at index <em>i</em> of the result will be {@code null}.
    #
    # @param s the ATN state
    # @return the expected symbols for each outgoing transition of {@code s}.
    #/
    def getDecisionLookahead(self, s:ATNState):
        if s is None:
            return None

        count = len(s.transitions)
        look = [] * count
        for alt in range(0, count):
            look[alt] = set()
            lookBusy = set()
            seeThruPreds = False # fail to get lookahead upon pred
            self._LOOK(s.transition(alt).target, None, PredictionContext.EMPTY,
                  look[alt], lookBusy, set(), seeThruPreds, False)
            # Wipe out lookahead for this alternative if we found nothing
            # or we had a predicate when we !seeThruPreds
            if len(look[alt])==0 or self.HIT_PRED in look[alt]:
                look[alt] = None
        return look

    #*
    # Compute set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #
    # <p>If {@code ctx} is {@code null} and the end of the rule containing
    # {@code s} is reached, {@link Token#EPSILON} is added to the result set.
    # If {@code ctx} is not {@code null} and the end of the outermost rule is
    # reached, {@link Token#EOF} is added to the result set.</p>
    #
    # @param s the ATN state
    # @param stopState the ATN state to stop at. This can be a
    # {@link BlockEndState} to detect epsilon paths through a closure.
    # @param ctx the complete parser context, or {@code null} if the context
    # should be ignored
    #
    # @return The set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #/
    def LOOK(self, s:ATNState, stopState:ATNState=None, ctx:RuleContext=None):
        r = IntervalSet()
        seeThruPreds = True # ignore preds; get all lookahead
        lookContext = PredictionContextFromRuleContext(s.atn, ctx) if ctx is not None else None
        self._LOOK(s, stopState, lookContext, r, set(), set(), seeThruPreds, True)
        return r

    #*
    # Compute set of tokens that can follow {@code s} in the ATN in the
    # specified {@code ctx}.
    #
    # <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
    # rule containing {@code s} is reached, {@link Token#EPSILON} is added to
    # the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
    # {@code true} and {@code stopState} or the end of the outermost rule is
    # reached, {@link Token#EOF} is added to the result set.</p>
    #
    # @param s the ATN state.
    # @param stopState the ATN state to stop at. This can be a
    # {@link BlockEndState} to detect epsilon paths through a closure.
    # @param ctx The outer context, or {@code null} if the outer context should
    # not be used.
    # @param look The result lookahead set.
    # @param lookBusy A set used for preventing epsilon closures in the ATN
    # from causing a stack overflow. Outside code should pass
    # {@code new HashSet<ATNConfig>} for this argument.
    # @param calledRuleStack A set used for preventing left recursion in the
    # ATN from causing a stack overflow. Outside code should pass
    # {@code new BitSet()} for this argument.
    # @param seeThruPreds {@code true} to true semantic predicates as
    # implicitly {@code true} and ""see through them"", otherwise {@code false}
    # to treat semantic predicates as opaque and add {@link #HIT_PRED} to the
    # result if one is encountered.
    # @param addEOF Add {@link Token#EOF} to the result if the end of the
    # outermost context is reached. This parameter has no effect if {@code ctx}
    # is {@code null}.
    #/
    def _LOOK(self, s:ATNState, stopState:ATNState , ctx:PredictionContext, look:IntervalSet, lookBusy:set,
                     calledRuleStack:set, seeThruPreds:bool, addEOF:bool):
        c = ATNConfig(s, 0, ctx)

        if c in lookBusy:
            return
        lookBusy.add(c)

        if s == stopState:
            if ctx is None:
                look.addOne(Token.EPSILON)
                return
            elif ctx.isEmpty() and addEOF:
                look.addOne(Token.EOF)
                return

        if isinstance(s, RuleStopState ):
            if ctx is None:
                look.addOne(Token.EPSILON)
                return
            elif ctx.isEmpty() and addEOF:
                look.addOne(Token.EOF)
                return

            if ctx != PredictionContext.EMPTY:
                removed = s.ruleIndex in calledRuleStack
                try:
                    calledRuleStack.discard(s.ruleIndex)
                    # run thru all possible stack tops in ctx
                    for i in range(0, len(ctx)):
                        returnState = self.atn.states[ctx.getReturnState(i)]
                        self._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                finally:
                    if removed:
                        calledRuleStack.add(s.ruleIndex)
                return

        for t in s.transitions:
            if type(t) == RuleTransition:
                if t.target.ruleIndex in calledRuleStack:
                    continue

                newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber)

                try:
                    calledRuleStack.add(t.target.ruleIndex)
                    self._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                finally:
                    calledRuleStack.remove(t.target.ruleIndex)
            elif isinstance(t, AbstractPredicateTransition ):
                if seeThruPreds:
                    self._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                else:
                    look.addOne(self.HIT_PRED)
            elif t.isEpsilon:
                self._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
            elif type(t) == WildcardTransition:
                look.addRange( range(Token.MIN_USER_TOKEN_TYPE, self.atn.maxTokenType + 1) )
            else:
                set_ = t.label
                if set_ is not None:
                    if isinstance(t, NotSetTransition):
                        set_ = set_.complement(Token.MIN_USER_TOKEN_TYPE, self.atn.maxTokenType)
                    look.addSet(set_)",1,334 2000 40 426 41 58 2001 61 648 621 621 621 2002 61 2003 46 2004 348 2005 40 2006 44 2007 58 2008 41 58 2006 46 2007 61 2007 621 621 621 621 621 621 621 621 621 621 348 2009 40 2006 44 2010 58 2011 41 58 392 2010 407 303 58 450 303 2012 61 2013 40 2010 46 2014 41 2015 61 91 93 42 2012 385 2016 398 2017 40 1500 44 2012 41 58 2015 91 2016 93 61 2018 40 41 2019 61 2018 40 41 2020 61 302 621 2006 46 2021 40 2010 46 2022 40 2016 41 46 2023 44 303 44 2024 46 2025 44 2015 91 2016 93 44 2019 44 2018 40 41 44 2020 44 302 41 621 621 392 2013 40 2015 91 2016 93 41 614 1500 428 2006 46 2002 398 2015 91 2016 93 58 2015 91 2016 93 61 303 450 2015 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2026 40 2006 44 2010 58 2011 44 2027 58 2011 61 303 44 2028 58 2029 61 303 41 58 2030 61 2031 40 41 2020 61 304 621 2032 61 2033 40 2010 46 2007 44 2028 41 392 2028 407 422 303 360 303 2006 46 2021 40 2010 44 2027 44 2032 44 2030 44 2018 40 41 44 2018 40 41 44 2020 44 304 41 450 2030 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 621 348 2021 40 2006 44 2010 58 2011 44 2027 58 2011 44 2028 58 2024 44 2015 58 2031 44 2019 58 2018 44 2034 58 2018 44 2020 58 323 44 2035 58 323 41 58 2036 61 2037 40 2010 44 1500 44 2028 41 392 2036 398 2019 58 450 2019 46 2038 40 2036 41 392 2010 614 2027 58 392 2028 407 303 58 2015 46 2039 40 2003 46 2040 41 450 359 2028 46 2041 40 41 308 2035 58 2015 46 2039 40 2003 46 2042 41 450 392 2043 40 2010 44 2044 41 58 392 2028 407 303 58 2015 46 2039 40 2003 46 2040 41 450 359 2028 46 2041 40 41 308 2035 58 2015 46 2039 40 2003 46 2042 41 450 392 2028 631 2024 46 2025 58 2045 61 2010 46 2046 398 2034 474 58 2034 46 2047 40 2010 46 2046 41 621 385 2048 398 2017 40 1500 44 2013 40 2028 41 41 58 2049 61 2006 46 2007 46 2050 91 2028 46 2051 40 2048 41 93 2006 46 2021 40 2049 44 2027 44 2028 46 2052 40 2048 41 44 2015 44 2019 44 2034 44 2020 44 2035 41 382 58 392 2045 58 2034 46 2038 40 2010 46 2046 41 450 385 2053 398 2010 46 2014 58 392 2054 40 2053 41 614 2055 58 392 2053 46 2023 46 2046 398 2034 58 344 2056 61 2057 46 2058 40 2028 44 2053 46 2059 46 2060 41 474 58 2034 46 2038 40 2053 46 2023 46 2046 41 2006 46 2021 40 2053 46 2023 44 2027 44 2056 44 2015 44 2019 44 2034 44 2020 44 2035 41 382 58 2034 46 2061 40 2053 46 2023 46 2046 41 359 2043 40 2053 44 2062 41 58 392 2020 58 2006 46 2021 40 2053 46 2023 44 2027 44 2028 44 2015 44 2019 44 2034 44 2020 44 2035 41 360 58 2015 46 2039 40 2006 46 2002 41 359 2053 46 2063 58 2006 46 2021 40 2053 46 2023 44 2027 44 2028 44 2015 44 2019 44 2034 44 2020 44 2035 41 359 2054 40 2053 41 614 2064 58 2015 46 2065 40 2017 40 2003 46 2066 44 2006 46 2007 46 2067 43 1501 41 41 360 58 2068 61 2053 46 2069 392 2068 407 422 303 58 392 2043 40 2053 44 2070 41 58 2068 61 2068 46 2071 40 2003 46 2066 44 2006 46 2007 46 2067 41 2015 46 2072 40 2068 41 
128655,Python,"class TokenStreamRewriter(object):
    __slots__ = ('tokens', 'programs', 'lastRewriteTokenIndexes')

    DEFAULT_PROGRAM_NAME = ""default""
    PROGRAM_INIT_SIZE = 100
    MIN_TOKEN_INDEX = 0

    def __init__(self, tokens):
        """"""
        :type  tokens: antlr4.BufferedTokenStream.BufferedTokenStream
        :param tokens:
        :return:
        """"""
        super(TokenStreamRewriter, self).__init__()
        self.tokens = tokens
        self.programs = {self.DEFAULT_PROGRAM_NAME: []}
        self.lastRewriteTokenIndexes = {}

    def getTokenStream(self):
        return self.tokens

    def rollback(self, instruction_index, program_name):
        ins = self.programs.get(program_name, None)
        if ins:
            self.programs[program_name] = ins[self.MIN_TOKEN_INDEX: instruction_index]

    def deleteProgram(self, program_name=DEFAULT_PROGRAM_NAME):
        self.rollback(self.MIN_TOKEN_INDEX, program_name)

    def insertAfterToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertAfter(token.tokenIndex, text, program_name)

    def insertAfter(self, index, text, program_name=DEFAULT_PROGRAM_NAME):
        op = self.InsertAfterOp(self.tokens, index + 1, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def insertBeforeIndex(self, index, text):
        self.insertBefore(self.DEFAULT_PROGRAM_NAME, index, text)

    def insertBeforeToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertBefore(program_name, token.tokenIndex, text)

    def insertBefore(self, program_name, index, text):
        op = self.InsertBeforeOp(self.tokens, index, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def replaceIndex(self, index, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, index, index, text)

    def replaceRange(self, from_idx, to_idx, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, from_idx, to_idx, text)

    def replaceSingleToken(self, token, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, token.tokenIndex, token.tokenIndex, text)

    def replaceRangeTokens(self, from_token, to_token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.replace(program_name, from_token.tokenIndex, to_token.tokenIndex, text)

    def replace(self, program_name, from_idx, to_idx, text):
        if any((from_idx > to_idx, from_idx < 0, to_idx < 0, to_idx >= len(self.tokens.tokens))):
            raise ValueError(
                'replace: range invalid: {}..{}(size={})'.format(from_idx, to_idx, len(self.tokens.tokens)))
        op = self.ReplaceOp(from_idx, to_idx, self.tokens, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def deleteToken(self, token):
        self.delete(self.DEFAULT_PROGRAM_NAME, token, token)

    def deleteIndex(self, index):
        self.delete(self.DEFAULT_PROGRAM_NAME, index, index)

    def delete(self, program_name, from_idx, to_idx):
        if isinstance(from_idx, Token):
            self.replace(program_name, from_idx.tokenIndex, to_idx.tokenIndex, """")
        else:
            self.replace(program_name, from_idx, to_idx, """")

    def lastRewriteTokenIndex(self, program_name=DEFAULT_PROGRAM_NAME):
        return self.lastRewriteTokenIndexes.get(program_name, -1)

    def setLastRewriteTokenIndex(self, program_name, i):
        self.lastRewriteTokenIndexes[program_name] = i

    def getProgram(self, program_name):
        return self.programs.setdefault(program_name, [])

    def getDefaultText(self):
        return self.getText(self.DEFAULT_PROGRAM_NAME, 0, len(self.tokens.tokens) - 1)

    def getText(self, program_name, start:int, stop:int):
        """"""
        :return: the text in tokens[start, stop](closed interval)
        """"""
        rewrites = self.programs.get(program_name)

        # ensure start/end are in range
        if stop > len(self.tokens.tokens) - 1:
            stop = len(self.tokens.tokens) - 1
        if start < 0:
            start = 0

        # if no instructions to execute
        if not rewrites: return self.tokens.getText(start, stop)
        buf = StringIO()
        indexToOp = self._reduceToSingleOperationPerIndex(rewrites)
        i = start
        while all((i <= stop, i < len(self.tokens.tokens))):
            op = indexToOp.pop(i, None)
            token = self.tokens.get(i)
            if op is None:
                if token.type != Token.EOF: buf.write(token.text)
                i += 1
            else:
                i = op.execute(buf)

        if stop == len(self.tokens.tokens)-1:
            for op in indexToOp.values():
                if op.index >= len(self.tokens.tokens)-1: buf.write(op.text)

        return buf.getvalue()

    def _reduceToSingleOperationPerIndex(self, rewrites):
        # Walk replaces
        for i, rop in enumerate(rewrites):
            if any((rop is None, not isinstance(rop, TokenStreamRewriter.ReplaceOp))):
                continue
            # Wipe prior inserts within range
            inserts = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.InsertBeforeOp)]
            for iop in inserts:
                if iop.index == rop.index:
                    rewrites[iop.instructionIndex] = None
                    rop.text = '{}{}'.format(iop.text, rop.text)
                elif all((iop.index > rop.index, iop.index <= rop.last_index)):
                    rewrites[iop.instructionIndex] = None

            # Drop any prior replaces contained within
            prevReplaces = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.ReplaceOp)]
            for prevRop in prevReplaces:
                if all((prevRop.index >= rop.index, prevRop.last_index <= rop.last_index)):
                    rewrites[prevRop.instructionIndex] = None
                    continue
                isDisjoint = any((prevRop.last_index<rop.index, prevRop.index>rop.last_index))
                if all((prevRop.text is None, rop.text is None, not isDisjoint)):
                    rewrites[prevRop.instructionIndex] = None
                    rop.index = min(prevRop.index, rop.index)
                    rop.last_index = min(prevRop.last_index, rop.last_index)
                    print('New rop {}'.format(rop))
                elif (not(isDisjoint)):
                    raise ValueError(""replace op boundaries of {} overlap with previous {}"".format(rop, prevRop))

        # Walk inserts
        for i, iop in enumerate(rewrites):
            if any((iop is None, not isinstance(iop, TokenStreamRewriter.InsertBeforeOp))):
                continue
            prevInserts = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.InsertBeforeOp)]
            for prev_index, prevIop in enumerate(prevInserts):
                if prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertBeforeOp:
                    iop.text += prevIop.text
                    rewrites[prev_index] = None
                elif prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertAfterOp:
                    iop.text = prevIop.text + iop.text
                    rewrites[prev_index] = None
            # look for replaces where iop.index is in range; error
            prevReplaces = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.ReplaceOp)]
            for rop in prevReplaces:
                if iop.index == rop.index:
                    rop.text = iop.text + rop.text
                    rewrites[i] = None
                    continue
                if all((iop.index >= rop.index, iop.index <= rop.last_index)):
                    raise ValueError(""insert op {} within boundaries of previous {}"".format(iop, rop))

        reduced = {}
        for i, op in enumerate(rewrites):
            if op is None: continue
            if reduced.get(op.index): raise ValueError('should be only one op per index')
            reduced[op.index] = op

        return reduced

    class RewriteOperation(object):
        __slots__ = ('tokens', 'index', 'text', 'instructionIndex')

        def __init__(self, tokens, index, text=""""):
            """"""
            :type tokens: CommonTokenStream
            :param tokens:
            :param index:
            :param text:
            :return:
            """"""
            self.tokens = tokens
            self.index = index
            self.text = text
            self.instructionIndex = 0

        def execute(self, buf):
            """"""
            :type buf: StringIO.StringIO
            :param buf:
            :return:
            """"""
            return self.index

        def __str__(self):
            return '<{}@{}:""{}"">'.format(self.__class__.__name__, self.tokens.get(self.index), self.text)

    class InsertBeforeOp(RewriteOperation):

        def __init__(self, tokens, index, text=""""):
            super(TokenStreamRewriter.InsertBeforeOp, self).__init__(tokens, index, text)

        def execute(self, buf):
            buf.write(self.text)
            if self.tokens.get(self.index).type != Token.EOF:
                buf.write(self.tokens.get(self.index).text)
            return self.index + 1

    class InsertAfterOp(InsertBeforeOp):
        pass

    class ReplaceOp(RewriteOperation):
        __slots__ = 'last_index'

        def __init__(self, from_idx, to_idx, tokens, text):
            super(TokenStreamRewriter.ReplaceOp, self).__init__(tokens, from_idx, text)
            self.last_index = to_idx

        def execute(self, buf):
            if self.text:
                buf.write(self.text)
            return self.last_index + 1

        def __str__(self):
            if self.text:
                return '<ReplaceOp@{}..{}:""{}"">'.format(self.tokens.get(self.index), self.tokens.get(self.last_index),
                                                        self.text)",1,334 2000 40 426 41 58 2001 61 40 648 44 648 44 648 41 2002 61 648 2003 61 1503 2004 61 1500 348 2005 40 2006 44 2007 41 58 648 463 40 2000 44 2006 41 46 2005 40 41 2006 46 2007 61 2007 2006 46 2008 61 123 2006 46 2002 58 91 93 125 2006 46 2009 61 123 125 348 2010 40 2006 41 58 450 2006 46 2007 348 2011 40 2006 44 2012 44 2013 41 58 2014 61 2006 46 2008 46 2015 40 2013 44 303 41 392 2014 58 2006 46 2008 91 2013 93 61 2014 91 2006 46 2004 58 2012 93 348 2016 40 2006 44 2013 61 2002 41 58 2006 46 2011 40 2006 46 2004 44 2013 41 348 2017 40 2006 44 2018 44 2019 44 2013 61 2002 41 58 2006 46 2020 40 2018 46 2021 44 2019 44 2013 41 348 2020 40 2006 44 2022 44 2019 44 2013 61 2002 41 58 2023 61 2006 46 2024 40 2006 46 2007 44 2022 43 1501 44 2019 41 2025 61 2006 46 2026 40 2013 41 2023 46 2027 61 2028 40 2025 41 2025 46 2029 40 2023 41 348 2030 40 2006 44 2022 44 2019 41 58 2006 46 2031 40 2006 46 2002 44 2022 44 2019 41 348 2032 40 2006 44 2018 44 2019 44 2013 61 2002 41 58 2006 46 2031 40 2013 44 2018 46 2021 44 2019 41 348 2031 40 2006 44 2013 44 2022 44 2019 41 58 2023 61 2006 46 2033 40 2006 46 2007 44 2022 44 2019 41 2025 61 2006 46 2026 40 2013 41 2023 46 2027 61 2028 40 2025 41 2025 46 2029 40 2023 41 348 2034 40 2006 44 2022 44 2019 41 58 2006 46 2035 40 2006 46 2002 44 2022 44 2022 44 2019 41 348 2036 40 2006 44 2037 44 2038 44 2019 41 58 2006 46 2035 40 2006 46 2002 44 2037 44 2038 44 2019 41 348 2039 40 2006 44 2018 44 2019 41 58 2006 46 2035 40 2006 46 2002 44 2018 46 2021 44 2018 46 2021 44 2019 41 348 2040 40 2006 44 2041 44 2042 44 2019 44 2013 61 2002 41 58 2006 46 2035 40 2013 44 2041 46 2021 44 2042 46 2021 44 2019 41 348 2035 40 2006 44 2013 44 2037 44 2038 44 2019 41 58 392 2043 40 40 2037 62 2038 44 2037 60 1500 44 2038 60 1500 44 2038 615 2028 40 2006 46 2007 46 2007 41 41 41 58 440 2044 40 648 46 2045 40 2037 44 2038 44 2028 40 2006 46 2007 46 2007 41 41 41 2023 61 2006 46 2046 40 2037 44 2038 44 2006 46 2007 44 2019 41 2025 61 2006 46 2026 40 2013 41 2023 46 2027 61 2028 40 2025 41 2025 46 2029 40 2023 41 348 2047 40 2006 44 2018 41 58 2006 46 353 40 2006 46 2002 44 2018 44 2018 41 348 2048 40 2006 44 2022 41 58 2006 46 353 40 2006 46 2002 44 2022 44 2022 41 348 353 40 2006 44 2013 44 2037 44 2038 41 58 392 2049 40 2037 44 2050 41 58 2006 46 2035 40 2013 44 2037 46 2021 44 2038 46 2021 44 648 41 360 58 2006 46 2035 40 2013 44 2037 44 2038 44 648 41 348 2051 40 2006 44 2013 61 2002 41 58 450 2006 46 2009 46 2015 40 2013 44 45 1501 41 348 2052 40 2006 44 2013 44 2053 41 58 2006 46 2009 91 2013 93 61 2053 348 2026 40 2006 44 2013 41 58 450 2006 46 2008 46 2054 40 2013 44 91 93 41 348 2055 40 2006 41 58 450 2006 46 2056 40 2006 46 2002 44 1500 44 2028 40 2006 46 2007 46 2007 41 45 1501 41 348 2056 40 2006 44 2013 44 2057 58 404 44 2058 58 404 41 58 648 2025 61 2006 46 2008 46 2015 40 2013 41 621 392 2058 62 2028 40 2006 46 2007 46 2007 41 45 1501 58 2058 61 2028 40 2006 46 2007 46 2007 41 45 1501 392 2057 60 1500 58 2057 61 1500 621 392 422 2025 58 450 2006 46 2007 46 2056 40 2057 44 2058 41 2059 61 2060 40 41 2061 61 2006 46 2062 40 2025 41 2053 61 2057 496 2063 40 40 2053 620 2058 44 2053 60 2028 40 2006 46 2007 46 2007 41 41 41 58 2023 61 2061 46 2064 40 2053 44 303 41 2018 61 2006 46 2007 46 2015 40 2053 41 392 2023 407 303 58 392 2018 46 2065 631 2050 46 2066 58 2059 46 2067 40 2018 46 2019 41 2053 636 1501 360 58 2053 61 2023 46 2068 40 2059 41 392 2058 614 2028 40 2006 46 2007 46 2007 41 45 1501 58 385 2023 398 2061 46 2069 40 41 58 392 2023 46 2022 615 2028 40 2006 46 2007 46 2007 41 45 1501 58 2059 46 2067 40 2023 46 2019 41 450 2059 46 2070 40 41 348 2062 40 2006 44 2025 41 58 621 385 2053 44 2071 398 2072 40 2025 41 58 392 2043 40 40 2071 407 303 44 422 2049 40 2071 44 2000 46 2046 41 41 41 58 344 621 2073 61 91 2023 385 2023 398 2025 91 58 2053 93 392 2049 40 2023 44 2000 46 2033 41 93 385 2074 398 2073 58 392 2074 46 2022 614 2071 46 2022 58 2025 91 2074 46 2027 93 61 303 2071 46 2019 61 648 46 2045 40 2074 46 2019 44 2071 46 2019 41 359 2063 40 40 2074 46 2022 62 2071 46 2022 44 2074 46 2022 620 2071 46 2075 41 41 58 2025 91 2074 46 2027 93 61 303 621 2076 61 91 2023 385 2023 398 2025 91 58 2053 93 392 2049 40 2023 44 2000 46 2046 41 93 385 2077 398 2076 58 392 2063 40 40 2077 46 2022 615 2071 46 2022 44 2077 46 2075 620 2071 46 2075 41 41 58 2025 91 2077 46 2027 93 61 303 344 2078 61 2043 40 40 2077 46 2075 60 2071 46 2022 44 2077 46 2022 62 2071 46 2075 41 41 392 2063 40 40 2077 46 2019 407 303 44 2071 46 2019 407 303 44 422 2078 41 41 58 2025 91 2077 46 2027 93 61 303 2071 46 2022 61 2079 40 2077 46 2022 44 2071 46 2022 41 2071 46 2075 61 2079 40 2077 46 2075 44 2071 46 2075 41 436 40 648 46 2045 40 2071 41 41 359 40 422 40 2078 41 41 58 440 2044 40 648 46 2045 40 2071 44 2077 41 41 621 385 2053 44 2074 398 2072 40 2025 41 58 392 2043 40 40 2074 407 303 44 422 2049 40 2074 44 2000 46 2033 41 41 41 58 344 2080 61 91 2023 385 2023 398 2025 91 58 2053 93 392 2049 40 2023 44 2000 46 2033 41 93 385 2081 44 2082 398 2072 40 2080 41 58 392 2082 46 2022 614 2074 46 2022 308 2065 40 2082 41 407 2000 46 2033 58 2074 46 2019 636 2082 46 2019 2025 91 2081 93 61 303 359 2082 46 2022 614 2074 46 2022 308 2065 40 2082 41 407 2000 46 2024 58 2074 46 2019 61 2082 46 2019 43 2074 46 2019 2025 91 2081 93 61 303 621 2076 61 91 2023 385 2023 398 2025 91 58 2053 93 392 2049 40 2023 44 2000 46 2046 41 93 385 2071 398 2076 58 392 2074 46 2022 614 2071 46 2022 58 2071 46 2019 61 2074 46 2019 43 2071 46 2019 2025 91 2053 93 61 303 344 392 2063 40 40 2074 46 2022 615 2071 46 2022 44 2074 46 2022 620 2071 46 2075 41 41 58 440 2044 40 648 46 2045 40 2074 44 2071 41 41 2083 61 123 125 385 2053 44 2023 398 2072 40 2025 41 58 392 2023 407 303 58 344 392 2083 46 2015 40 2023 46 2022 41 58 440 2044 40 648 41 2083 91 2023 46 2022 93 61 2023 450 2083 334 2084 40 426 41 58 2001 61 40 648 44 648 44 648 44 648 41 348 2005 40 2006 44 2007 44 2022 44 2019 61 648 41 58 648 2006 46 2007 61 2007 2006 46 2022 61 2022 2006 46 2019 61 2019 2006 46 2027 61 1500 348 2068 40 2006 44 2059 41 58 648 450 2006 46 2022 348 2085 40 2006 41 58 450 648 46 2045 40 2006 46 2086 46 2087 44 2006 46 2007 46 2015 40 2006 46 2022 41 44 2006 46 2019 41 334 2033 40 2084 41 58 348 2005 40 2006 44 2007 44 2022 44 2019 61 648 41 58 463 40 2000 46 2033 44 2006 41 46 2005 40 2007 44 2022 44 2019 41 348 2068 40 2006 44 2059 41 58 2059 46 2067 40 2006 46 2019 41 392 2006 46 2007 46 2015 40 2006 46 2022 41 46 2065 631 2050 46 2066 58 2059 46 2067 40 2006 46 2007 46 2015 40 2006 46 2022 41 46 2019 41 450 2006 46 2022 43 1501 334 2024 40 2033 41 58 434 334 2046 40 2084 41 58 2001 61 648 348 2005 40 2006 44 2037 44 2038 44 2007 44 2019 41 58 463 40 2000 46 2046 44 2006 41 46 2005 40 2007 44 2037 44 2019 41 2006 46 2075 61 2038 348 2068 40 2006 44 2059 41 58 392 2006 46 2019 58 2059 46 2067 40 2006 46 2019 41 450 2006 46 2075 43 1501 348 2085 40 2006 41 58 392 2006 46 2019 58 450 648 46 2045 40 2006 46 2007 46 2015 40 2006 46 2022 41 44 2006 46 2007 46 2015 40 2006 46 2075 41 44 2006 46 2019 41 
132325,Python,"class ModelAdminTests(TestCase):

    @classmethod
    def setUpTestData(cls):
        cls.band = Band.objects.create(
            name='The Doors',
            bio='',
            sign_date=date(1965, 1, 1),
        )

    def setUp(self):
        self.site = AdminSite()

    def test_modeladmin_str(self):
        ma = ModelAdmin(Band, self.site)
        self.assertEqual(str(ma), 'modeladmin.ModelAdmin')

    # form/fields/fieldsets interaction ##############################

    def test_default_fields(self):
        ma = ModelAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name', 'bio', 'sign_date'])
        self.assertEqual(list(ma.get_fields(request)), ['name', 'bio', 'sign_date'])
        self.assertEqual(list(ma.get_fields(request, self.band)), ['name', 'bio', 'sign_date'])
        self.assertIsNone(ma.get_exclude(request, self.band))

    def test_default_fieldsets(self):
        # fieldsets_add and fieldsets_change should return a special data structure that
        # is used in the templates. They should generate the ""right thing"" whether we
        # have specified a custom form, the fields argument, or nothing at all.
        #
        # Here's the default case. There are no custom form_add/form_change methods,
        # no fields argument, and no fieldsets argument.
        ma = ModelAdmin(Band, self.site)
        self.assertEqual(ma.get_fieldsets(request), [(None, {'fields': ['name', 'bio', 'sign_date']})])
        self.assertEqual(ma.get_fieldsets(request, self.band), [(None, {'fields': ['name', 'bio', 'sign_date']})])

    def test_get_fieldsets(self):
        # get_fieldsets() is called when figuring out form fields (#18681).
        class BandAdmin(ModelAdmin):
            def get_fieldsets(self, request, obj=None):
                return [(None, {'fields': ['name', 'bio']})]

        ma = BandAdmin(Band, self.site)
        form = ma.get_form(None)
        self.assertEqual(form._meta.fields, ['name', 'bio'])

        class InlineBandAdmin(TabularInline):
            model = Concert
            fk_name = 'main_band'
            can_delete = False

            def get_fieldsets(self, request, obj=None):
                return [(None, {'fields': ['day', 'transport']})]

        ma = InlineBandAdmin(Band, self.site)
        form = ma.get_formset(None).form
        self.assertEqual(form._meta.fields, ['day', 'transport'])

    def test_lookup_allowed_allows_nonexistent_lookup(self):
        """"""
        A lookup_allowed allows a parameter whose field lookup doesn't exist.
        (#21129).
        """"""
        class BandAdmin(ModelAdmin):
            fields = ['name']

        ma = BandAdmin(Band, self.site)
        self.assertTrue(ma.lookup_allowed('name__nonexistent', 'test_value'))

    @isolate_apps('modeladmin')
    def test_lookup_allowed_onetoone(self):
        class Department(models.Model):
            code = models.CharField(max_length=4, unique=True)

        class Employee(models.Model):
            department = models.ForeignKey(Department, models.CASCADE, to_field=""code"")

        class EmployeeProfile(models.Model):
            employee = models.OneToOneField(Employee, models.CASCADE)

        class EmployeeInfo(models.Model):
            employee = models.OneToOneField(Employee, models.CASCADE)
            description = models.CharField(max_length=100)

        class EmployeeProfileAdmin(ModelAdmin):
            list_filter = [
                'employee__employeeinfo__description',
                'employee__department__code',
            ]

        ma = EmployeeProfileAdmin(EmployeeProfile, self.site)
        # Reverse OneToOneField
        self.assertIs(ma.lookup_allowed('employee__employeeinfo__description', 'test_value'), True)
        # OneToOneField and ForeignKey
        self.assertIs(ma.lookup_allowed('employee__department__code', 'test_value'), True)

    def test_field_arguments(self):
        # If fields is specified, fieldsets_add and fieldsets_change should
        # just stick the fields into a formsets structure and return it.
        class BandAdmin(ModelAdmin):
            fields = ['name']

        ma = BandAdmin(Band, self.site)

        self.assertEqual(list(ma.get_fields(request)), ['name'])
        self.assertEqual(list(ma.get_fields(request, self.band)), ['name'])
        self.assertEqual(ma.get_fieldsets(request), [(None, {'fields': ['name']})])
        self.assertEqual(ma.get_fieldsets(request, self.band), [(None, {'fields': ['name']})])

    def test_field_arguments_restricted_on_form(self):
        # If fields or fieldsets is specified, it should exclude fields on the
        # Form class to the fields specified. This may cause errors to be
        # raised in the db layer if required model fields aren't in fields/
        # fieldsets, but that's preferable to ghost errors where a field in the
        # Form class isn't being displayed because it's not in fields/fieldsets.

        # Using `fields`.
        class BandAdmin(ModelAdmin):
            fields = ['name']

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name'])
        self.assertEqual(list(ma.get_form(request, self.band).base_fields), ['name'])

        # Using `fieldsets`.
        class BandAdmin(ModelAdmin):
            fieldsets = [(None, {'fields': ['name']})]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name'])
        self.assertEqual(list(ma.get_form(request, self.band).base_fields), ['name'])

        # Using `exclude`.
        class BandAdmin(ModelAdmin):
            exclude = ['bio']

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name', 'sign_date'])

        # You can also pass a tuple to `exclude`.
        class BandAdmin(ModelAdmin):
            exclude = ('bio',)

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name', 'sign_date'])

        # Using `fields` and `exclude`.
        class BandAdmin(ModelAdmin):
            fields = ['name', 'bio']
            exclude = ['bio']

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name'])

    def test_custom_form_meta_exclude_with_readonly(self):
        """"""
        The custom ModelForm's `Meta.exclude` is respected when used in
        conjunction with `ModelAdmin.readonly_fields` and when no
        `ModelAdmin.exclude` is defined (#14496).
        """"""
        # With ModelAdmin
        class AdminBandForm(forms.ModelForm):
            class Meta:
                model = Band
                exclude = ['bio']

        class BandAdmin(ModelAdmin):
            readonly_fields = ['name']
            form = AdminBandForm

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['sign_date'])

        # With InlineModelAdmin
        class AdminConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                exclude = ['day']

        class ConcertInline(TabularInline):
            readonly_fields = ['transport']
            form = AdminConcertForm
            fk_name = 'main_band'
            model = Concert

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(
            list(list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields),
            ['main_band', 'opening_band', 'id', 'DELETE'])

    def test_custom_formfield_override_readonly(self):
        class AdminBandForm(forms.ModelForm):
            name = forms.CharField()

            class Meta:
                exclude = ()
                model = Band

        class BandAdmin(ModelAdmin):
            form = AdminBandForm
            readonly_fields = ['name']

        ma = BandAdmin(Band, self.site)

        # `name` shouldn't appear in base_fields because it's part of
        # readonly_fields.
        self.assertEqual(
            list(ma.get_form(request).base_fields),
            ['bio', 'sign_date']
        )
        # But it should appear in get_fields()/fieldsets() so it can be
        # displayed as read-only.
        self.assertEqual(
            list(ma.get_fields(request)),
            ['bio', 'sign_date', 'name']
        )
        self.assertEqual(
            list(ma.get_fieldsets(request)),
            [(None, {'fields': ['bio', 'sign_date', 'name']})]
        )

    def test_custom_form_meta_exclude(self):
        """"""
        The custom ModelForm's `Meta.exclude` is overridden if
        `ModelAdmin.exclude` or `InlineModelAdmin.exclude` are defined (#14496).
        """"""
        # With ModelAdmin
        class AdminBandForm(forms.ModelForm):
            class Meta:
                model = Band
                exclude = ['bio']

        class BandAdmin(ModelAdmin):
            exclude = ['name']
            form = AdminBandForm

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['bio', 'sign_date'])

        # With InlineModelAdmin
        class AdminConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                exclude = ['day']

        class ConcertInline(TabularInline):
            exclude = ['transport']
            form = AdminConcertForm
            fk_name = 'main_band'
            model = Concert

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(
            list(list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields),
            ['main_band', 'opening_band', 'day', 'id', 'DELETE']
        )

    def test_overriding_get_exclude(self):
        class BandAdmin(ModelAdmin):
            def get_exclude(self, request, obj=None):
                return ['name']

        self.assertEqual(
            list(BandAdmin(Band, self.site).get_form(request).base_fields),
            ['bio', 'sign_date']
        )

    def test_get_exclude_overrides_exclude(self):
        class BandAdmin(ModelAdmin):
            exclude = ['bio']

            def get_exclude(self, request, obj=None):
                return ['name']

        self.assertEqual(
            list(BandAdmin(Band, self.site).get_form(request).base_fields),
            ['bio', 'sign_date']
        )

    def test_get_exclude_takes_obj(self):
        class BandAdmin(ModelAdmin):
            def get_exclude(self, request, obj=None):
                if obj:
                    return ['sign_date']
                return ['name']

        self.assertEqual(
            list(BandAdmin(Band, self.site).get_form(request, self.band).base_fields),
            ['name', 'bio']
        )

    def test_custom_form_validation(self):
        # If a form is specified, it should use it allowing custom validation
        # to work properly. This won't break any of the admin widgets or media.
        class AdminBandForm(forms.ModelForm):
            delete = forms.BooleanField()

        class BandAdmin(ModelAdmin):
            form = AdminBandForm

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name', 'bio', 'sign_date', 'delete'])
        self.assertEqual(type(ma.get_form(request).base_fields['sign_date'].widget), AdminDateWidget)

    def test_form_exclude_kwarg_override(self):
        """"""
        The `exclude` kwarg passed to `ModelAdmin.get_form()` overrides all
        other declarations (#8999).
        """"""
        class AdminBandForm(forms.ModelForm):
            class Meta:
                model = Band
                exclude = ['name']

        class BandAdmin(ModelAdmin):
            exclude = ['sign_date']
            form = AdminBandForm

            def get_form(self, request, obj=None, **kwargs):
                kwargs['exclude'] = ['bio']
                return super().get_form(request, obj, **kwargs)

        ma = BandAdmin(Band, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['name', 'sign_date'])

    def test_formset_exclude_kwarg_override(self):
        """"""
        The `exclude` kwarg passed to `InlineModelAdmin.get_formset()`
        overrides all other declarations (#8999).
        """"""
        class AdminConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                exclude = ['day']

        class ConcertInline(TabularInline):
            exclude = ['transport']
            form = AdminConcertForm
            fk_name = 'main_band'
            model = Concert

            def get_formset(self, request, obj=None, **kwargs):
                kwargs['exclude'] = ['opening_band']
                return super().get_formset(request, obj, **kwargs)

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(
            list(list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields),
            ['main_band', 'day', 'transport', 'id', 'DELETE']
        )

    def test_formset_overriding_get_exclude_with_form_fields(self):
        class AdminConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                fields = ['main_band', 'opening_band', 'day', 'transport']

        class ConcertInline(TabularInline):
            form = AdminConcertForm
            fk_name = 'main_band'
            model = Concert

            def get_exclude(self, request, obj=None):
                return ['opening_band']

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(
            list(list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields),
            ['main_band', 'day', 'transport', 'id', 'DELETE']
        )

    def test_formset_overriding_get_exclude_with_form_exclude(self):
        class AdminConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                exclude = ['day']

        class ConcertInline(TabularInline):
            form = AdminConcertForm
            fk_name = 'main_band'
            model = Concert

            def get_exclude(self, request, obj=None):
                return ['opening_band']

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(
            list(list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields),
            ['main_band', 'day', 'transport', 'id', 'DELETE']
        )

    def test_raw_id_fields_widget_override(self):
        """"""
        The autocomplete_fields, raw_id_fields, and radio_fields widgets may
        overridden by specifying a widget in get_formset().
        """"""
        class ConcertInline(TabularInline):
            model = Concert
            fk_name = 'main_band'
            raw_id_fields = ('opening_band',)

            def get_formset(self, request, obj=None, **kwargs):
                kwargs['widgets'] = {'opening_band': Select}
                return super().get_formset(request, obj, **kwargs)

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        band_widget = list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields['opening_band'].widget
        # Without the override this would be ForeignKeyRawIdWidget.
        self.assertIsInstance(band_widget, Select)

    def test_queryset_override(self):
        # If the queryset of a ModelChoiceField in a custom form is overridden,
        # RelatedFieldWidgetWrapper doesn't mess that up.
        band2 = Band.objects.create(name='The Beatles', bio='', sign_date=date(1962, 1, 1))

        ma = ModelAdmin(Concert, self.site)
        form = ma.get_form(request)()

        self.assertHTMLEqual(
            str(form[""main_band""]),
            '<div class=""related-widget-wrapper"">'
            '<select name=""main_band"" id=""id_main_band"" required>'
            '<option value="""" selected>---------</option>'
            '<option value=""%d"">The Beatles</option>'
            '<option value=""%d"">The Doors</option>'
            '</select></div>' % (band2.id, self.band.id)
        )

        class AdminConcertForm(forms.ModelForm):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.fields[""main_band""].queryset = Band.objects.filter(name='The Doors')

        class ConcertAdminWithForm(ModelAdmin):
            form = AdminConcertForm

        ma = ConcertAdminWithForm(Concert, self.site)
        form = ma.get_form(request)()

        self.assertHTMLEqual(
            str(form[""main_band""]),
            '<div class=""related-widget-wrapper"">'
            '<select name=""main_band"" id=""id_main_band"" required>'
            '<option value="""" selected>---------</option>'
            '<option value=""%d"">The Doors</option>'
            '</select></div>' % self.band.id
        )

    def test_regression_for_ticket_15820(self):
        """"""
        `obj` is passed from `InlineModelAdmin.get_fieldsets()` to
        `InlineModelAdmin.get_formset()`.
        """"""
        class CustomConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                fields = ['day']

        class ConcertInline(TabularInline):
            model = Concert
            fk_name = 'main_band'

            def get_formset(self, request, obj=None, **kwargs):
                if obj:
                    kwargs['form'] = CustomConcertForm
                return super().get_formset(request, obj, **kwargs)

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        Concert.objects.create(main_band=self.band, opening_band=self.band, day=1)
        ma = BandAdmin(Band, self.site)
        inline_instances = ma.get_inline_instances(request)
        fieldsets = list(inline_instances[0].get_fieldsets(request))
        self.assertEqual(fieldsets[0][1]['fields'], ['main_band', 'opening_band', 'day', 'transport'])
        fieldsets = list(inline_instances[0].get_fieldsets(request, inline_instances[0].model))
        self.assertEqual(fieldsets[0][1]['fields'], ['day'])

    # radio_fields behavior ###########################################

    def test_default_foreign_key_widget(self):
        # First, without any radio_fields specified, the widgets for ForeignKey
        # and fields with choices specified ought to be a basic Select widget.
        # ForeignKey widgets in the admin are wrapped with RelatedFieldWidgetWrapper so
        # they need to be handled properly when type checking. For Select fields, all of
        # the choices lists have a first entry of dashes.
        cma = ModelAdmin(Concert, self.site)
        cmafa = cma.get_form(request)

        self.assertEqual(type(cmafa.base_fields['main_band'].widget.widget), Select)
        self.assertEqual(
            list(cmafa.base_fields['main_band'].widget.choices),
            [('', '---------'), (self.band.id, 'The Doors')])

        self.assertEqual(type(cmafa.base_fields['opening_band'].widget.widget), Select)
        self.assertEqual(
            list(cmafa.base_fields['opening_band'].widget.choices),
            [('', '---------'), (self.band.id, 'The Doors')]
        )
        self.assertEqual(type(cmafa.base_fields['day'].widget), Select)
        self.assertEqual(
            list(cmafa.base_fields['day'].widget.choices),
            [('', '---------'), (1, 'Fri'), (2, 'Sat')]
        )
        self.assertEqual(type(cmafa.base_fields['transport'].widget), Select)
        self.assertEqual(
            list(cmafa.base_fields['transport'].widget.choices),
            [('', '---------'), (1, 'Plane'), (2, 'Train'), (3, 'Bus')])

    def test_foreign_key_as_radio_field(self):
        # Now specify all the fields as radio_fields.  Widgets should now be
        # RadioSelect, and the choices list should have a first entry of 'None' if
        # blank=True for the model field.  Finally, the widget should have the
        # 'radiolist' attr, and 'inline' as well if the field is specified HORIZONTAL.
        class ConcertAdmin(ModelAdmin):
            radio_fields = {
                'main_band': HORIZONTAL,
                'opening_band': VERTICAL,
                'day': VERTICAL,
                'transport': HORIZONTAL,
            }

        cma = ConcertAdmin(Concert, self.site)
        cmafa = cma.get_form(request)

        self.assertEqual(type(cmafa.base_fields['main_band'].widget.widget), AdminRadioSelect)
        self.assertEqual(cmafa.base_fields['main_band'].widget.attrs, {'class': 'radiolist inline'})
        self.assertEqual(
            list(cmafa.base_fields['main_band'].widget.choices),
            [(self.band.id, 'The Doors')]
        )

        self.assertEqual(type(cmafa.base_fields['opening_band'].widget.widget), AdminRadioSelect)
        self.assertEqual(cmafa.base_fields['opening_band'].widget.attrs, {'class': 'radiolist'})
        self.assertEqual(
            list(cmafa.base_fields['opening_band'].widget.choices),
            [('', 'None'), (self.band.id, 'The Doors')]
        )
        self.assertEqual(type(cmafa.base_fields['day'].widget), AdminRadioSelect)
        self.assertEqual(cmafa.base_fields['day'].widget.attrs, {'class': 'radiolist'})
        self.assertEqual(list(cmafa.base_fields['day'].widget.choices), [(1, 'Fri'), (2, 'Sat')])

        self.assertEqual(type(cmafa.base_fields['transport'].widget), AdminRadioSelect)
        self.assertEqual(cmafa.base_fields['transport'].widget.attrs, {'class': 'radiolist inline'})
        self.assertEqual(
            list(cmafa.base_fields['transport'].widget.choices),
            [('', 'None'), (1, 'Plane'), (2, 'Train'), (3, 'Bus')]
        )

        class AdminConcertForm(forms.ModelForm):
            class Meta:
                model = Concert
                exclude = ('transport',)

        class ConcertAdmin(ModelAdmin):
            form = AdminConcertForm

        ma = ConcertAdmin(Concert, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['main_band', 'opening_band', 'day'])

        class AdminConcertForm(forms.ModelForm):
            extra = forms.CharField()

            class Meta:
                model = Concert
                fields = ['extra', 'transport']

        class ConcertAdmin(ModelAdmin):
            form = AdminConcertForm

        ma = ConcertAdmin(Concert, self.site)
        self.assertEqual(list(ma.get_form(request).base_fields), ['extra', 'transport'])

        class ConcertInline(TabularInline):
            form = AdminConcertForm
            model = Concert
            fk_name = 'main_band'
            can_delete = True

        class BandAdmin(ModelAdmin):
            inlines = [ConcertInline]

        ma = BandAdmin(Band, self.site)
        self.assertEqual(
            list(list(ma.get_formsets_with_inlines(request))[0][0]().forms[0].fields),
            ['extra', 'transport', 'id', 'DELETE', 'main_band']
        )

    def test_log_actions(self):
        ma = ModelAdmin(Band, self.site)
        mock_request = MockRequest()
        mock_request.user = User.objects.create(username='bill')
        content_type = get_content_type_for_model(self.band)
        tests = (
            (ma.log_addition, ADDITION, {'added': {}}),
            (ma.log_change, CHANGE, {'changed': {'fields': ['name', 'bio']}}),
            (ma.log_deletion, DELETION, str(self.band)),
        )
        for method, flag, message in tests:
            with self.subTest(name=method.__name__):
                created = method(mock_request, self.band, message)
                fetched = LogEntry.objects.filter(action_flag=flag).latest('id')
                self.assertEqual(created, fetched)
                self.assertEqual(fetched.action_flag, flag)
                self.assertEqual(fetched.content_type, content_type)
                self.assertEqual(fetched.object_id, str(self.band.pk))
                self.assertEqual(fetched.user, mock_request.user)
                if flag == DELETION:
                    self.assertEqual(fetched.change_message, '')
                    self.assertEqual(fetched.object_repr, message)
                else:
                    self.assertEqual(fetched.change_message, str(message))
                    self.assertEqual(fetched.object_repr, str(self.band))

    def test_get_autocomplete_fields(self):
        class NameAdmin(ModelAdmin):
            search_fields = ['name']

        class SongAdmin(ModelAdmin):
            autocomplete_fields = ['featuring']
            fields = ['featuring', 'band']

        class OtherSongAdmin(SongAdmin):
            def get_autocomplete_fields(self, request):
                return ['band']

        self.site.register(Band, NameAdmin)
        try:
            # Uses autocomplete_fields if not overridden.
            model_admin = SongAdmin(Song, self.site)
            form = model_admin.get_form(request)()
            self.assertIsInstance(form.fields['featuring'].widget.widget, AutocompleteSelectMultiple)
            # Uses overridden get_autocomplete_fields
            model_admin = OtherSongAdmin(Song, self.site)
            form = model_admin.get_form(request)()
            self.assertIsInstance(form.fields['band'].widget.widget, AutocompleteSelect)
        finally:
            self.site.unregister(Band)

    def test_get_deleted_objects(self):
        mock_request = MockRequest()
        mock_request.user = User.objects.create_superuser(username='bob', email='bob@test.com', password='test')
        self.site.register(Band, ModelAdmin)
        ma = self.site._registry[Band]
        deletable_objects, model_count, perms_needed, protected = ma.get_deleted_objects([self.band], request)
        self.assertEqual(deletable_objects, ['Band: The Doors'])
        self.assertEqual(model_count, {'bands': 1})
        self.assertEqual(perms_needed, set())
        self.assertEqual(protected, [])

    def test_get_deleted_objects_with_custom_has_delete_permission(self):
        """"""
        ModelAdmin.get_deleted_objects() uses ModelAdmin.has_delete_permission()
        for permissions checking.
        """"""
        mock_request = MockRequest()
        mock_request.user = User.objects.create_superuser(username='bob', email='bob@test.com', password='test')

        class TestModelAdmin(ModelAdmin):
            def has_delete_permission(self, request, obj=None):
                return False

        self.site.register(Band, TestModelAdmin)
        ma = self.site._registry[Band]
        deletable_objects, model_count, perms_needed, protected = ma.get_deleted_objects([self.band], request)
        self.assertEqual(deletable_objects, ['Band: The Doors'])
        self.assertEqual(model_count, {'bands': 1})
        self.assertEqual(perms_needed, {'band'})
        self.assertEqual(protected, [])

    def test_modeladmin_repr(self):
        ma = ModelAdmin(Band, self.site)
        self.assertEqual(
            repr(ma),
            ""<ModelAdmin: model=Band site=AdminSite(name='admin')>"",
        )",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 648 44 2011 61 2012 40 1505 44 1501 44 1501 41 44 41 348 2013 40 2014 41 58 2014 46 2015 61 2016 40 41 348 2017 40 2014 41 58 2018 61 2019 40 2006 44 2014 46 2015 41 2014 46 2020 40 2021 40 2018 41 44 648 41 621 348 2022 40 2014 41 58 2018 61 2019 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 44 648 93 41 2014 46 2020 40 411 40 2018 46 2026 40 2024 41 41 44 91 648 44 648 44 648 93 41 2014 46 2020 40 411 40 2018 46 2026 40 2024 44 2014 46 2005 41 41 44 91 648 44 648 44 648 93 41 2014 46 2027 40 2018 46 2028 40 2024 44 2014 46 2005 41 41 348 2029 40 2014 41 58 621 621 621 621 621 621 2018 61 2019 40 2006 44 2014 46 2015 41 2014 46 2020 40 2018 46 2030 40 2024 41 44 91 40 303 44 123 648 58 91 648 44 648 44 648 93 125 41 93 41 2014 46 2020 40 2018 46 2030 40 2024 44 2014 46 2005 41 44 91 40 303 44 123 648 58 91 648 44 648 44 648 93 125 41 93 41 348 2031 40 2014 41 58 621 334 2032 40 2019 41 58 348 2030 40 2014 44 2024 44 2033 61 303 41 58 450 91 40 303 44 123 648 58 91 648 44 648 93 125 41 93 2018 61 2032 40 2006 44 2014 46 2015 41 2034 61 2018 46 2023 40 303 41 2014 46 2020 40 2034 46 2035 46 2036 44 91 648 44 648 93 41 334 2037 40 2038 41 58 2039 61 2040 2041 61 648 2042 61 302 348 2030 40 2014 44 2024 44 2033 61 303 41 58 450 91 40 303 44 123 648 58 91 648 44 648 93 125 41 93 2018 61 2037 40 2006 44 2014 46 2015 41 2034 61 2018 46 2043 40 303 41 46 2034 2014 46 2020 40 2034 46 2035 46 2036 44 91 648 44 648 93 41 348 2044 40 2014 41 58 648 334 2032 40 2019 41 58 2036 61 91 648 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2045 40 2018 46 2046 40 648 44 648 41 41 64 2047 40 648 41 348 2048 40 2014 41 58 334 2049 40 2050 46 2051 41 58 2052 61 2050 46 2053 40 2054 61 1502 44 2055 61 304 41 334 2056 40 2050 46 2051 41 58 2057 61 2050 46 2058 40 2049 44 2050 46 2059 44 2060 61 648 41 334 2061 40 2050 46 2051 41 58 2062 61 2050 46 2063 40 2056 44 2050 46 2059 41 334 2064 40 2050 46 2051 41 58 2062 61 2050 46 2063 40 2056 44 2050 46 2059 41 2065 61 2050 46 2053 40 2054 61 1503 41 334 2066 40 2019 41 58 2067 61 91 648 44 648 44 93 2018 61 2066 40 2061 44 2014 46 2015 41 621 2014 46 2068 40 2018 46 2046 40 648 44 648 41 44 304 41 621 2014 46 2068 40 2018 46 2046 40 648 44 648 41 44 304 41 348 2069 40 2014 41 58 621 621 334 2032 40 2019 41 58 2036 61 91 648 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2026 40 2024 41 41 44 91 648 93 41 2014 46 2020 40 411 40 2018 46 2026 40 2024 44 2014 46 2005 41 41 44 91 648 93 41 2014 46 2020 40 2018 46 2030 40 2024 41 44 91 40 303 44 123 648 58 91 648 93 125 41 93 41 2014 46 2020 40 2018 46 2030 40 2024 44 2014 46 2005 41 44 91 40 303 44 123 648 58 91 648 93 125 41 93 41 348 2070 40 2014 41 58 621 621 621 621 621 621 334 2032 40 2019 41 58 2036 61 91 648 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 93 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 44 2014 46 2005 41 46 2025 41 44 91 648 93 41 621 334 2032 40 2019 41 58 2071 61 91 40 303 44 123 648 58 91 648 93 125 41 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 93 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 44 2014 46 2005 41 46 2025 41 44 91 648 93 41 621 334 2032 40 2019 41 58 2072 61 91 648 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 621 334 2032 40 2019 41 58 2072 61 40 648 44 41 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 621 334 2032 40 2019 41 58 2036 61 91 648 44 648 93 2072 61 91 648 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 93 41 348 2073 40 2014 41 58 648 621 334 2074 40 2075 46 2076 41 58 334 2077 58 2039 61 2006 2072 61 91 648 93 334 2032 40 2019 41 58 2078 61 91 648 93 2034 61 2074 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 93 41 621 334 2079 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2072 61 91 648 93 334 2080 40 2038 41 58 2078 61 91 648 93 2034 61 2079 2041 61 648 2039 61 2040 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 41 44 91 648 44 648 44 648 44 648 93 41 348 2083 40 2014 41 58 334 2074 40 2075 46 2076 41 58 2009 61 2075 46 2053 40 41 334 2077 58 2072 61 40 41 2039 61 2006 334 2032 40 2019 41 58 2034 61 2074 2078 61 91 648 93 2018 61 2032 40 2006 44 2014 46 2015 41 621 621 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 621 621 2014 46 2020 40 411 40 2018 46 2026 40 2024 41 41 44 91 648 44 648 44 648 93 41 2014 46 2020 40 411 40 2018 46 2030 40 2024 41 41 44 91 40 303 44 123 648 58 91 648 44 648 44 648 93 125 41 93 41 348 2084 40 2014 41 58 648 621 334 2074 40 2075 46 2076 41 58 334 2077 58 2039 61 2006 2072 61 91 648 93 334 2032 40 2019 41 58 2072 61 91 648 93 2034 61 2074 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 621 334 2079 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2072 61 91 648 93 334 2080 40 2038 41 58 2072 61 91 648 93 2034 61 2079 2041 61 648 2039 61 2040 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 41 44 91 648 44 648 44 648 44 648 44 648 93 41 348 2085 40 2014 41 58 334 2032 40 2019 41 58 348 2028 40 2014 44 2024 44 2033 61 303 41 58 450 91 648 93 2014 46 2020 40 411 40 2032 40 2006 44 2014 46 2015 41 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 348 2086 40 2014 41 58 334 2032 40 2019 41 58 2072 61 91 648 93 348 2028 40 2014 44 2024 44 2033 61 303 41 58 450 91 648 93 2014 46 2020 40 411 40 2032 40 2006 44 2014 46 2015 41 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 348 2087 40 2014 41 58 334 2032 40 2019 41 58 348 2028 40 2014 44 2024 44 2033 61 303 41 58 392 2033 58 450 91 648 93 450 91 648 93 2014 46 2020 40 411 40 2032 40 2006 44 2014 46 2015 41 46 2023 40 2024 44 2014 46 2005 41 46 2025 41 44 91 648 44 648 93 41 348 2088 40 2014 41 58 621 621 334 2074 40 2075 46 2076 41 58 353 61 2075 46 2089 40 41 334 2032 40 2019 41 58 2034 61 2074 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 44 648 44 648 93 41 2014 46 2020 40 2090 40 2018 46 2023 40 2024 41 46 2025 91 648 93 46 2091 41 44 2092 41 348 2093 40 2014 41 58 648 334 2074 40 2075 46 2076 41 58 334 2077 58 2039 61 2006 2072 61 91 648 93 334 2032 40 2019 41 58 2072 61 91 648 93 2034 61 2074 348 2023 40 2014 44 2024 44 2033 61 303 44 638 2094 41 58 2094 91 648 93 61 91 648 93 450 463 40 41 46 2023 40 2024 44 2033 44 638 2094 41 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 348 2095 40 2014 41 58 648 334 2079 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2072 61 91 648 93 334 2080 40 2038 41 58 2072 61 91 648 93 2034 61 2079 2041 61 648 2039 61 2040 348 2043 40 2014 44 2024 44 2033 61 303 44 638 2094 41 58 2094 91 648 93 61 91 648 93 450 463 40 41 46 2043 40 2024 44 2033 44 638 2094 41 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 41 44 91 648 44 648 44 648 44 648 44 648 93 41 348 2096 40 2014 41 58 334 2079 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2036 61 91 648 44 648 44 648 44 648 93 334 2080 40 2038 41 58 2034 61 2079 2041 61 648 2039 61 2040 348 2028 40 2014 44 2024 44 2033 61 303 41 58 450 91 648 93 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 41 44 91 648 44 648 44 648 44 648 44 648 93 41 348 2097 40 2014 41 58 334 2079 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2072 61 91 648 93 334 2080 40 2038 41 58 2034 61 2079 2041 61 648 2039 61 2040 348 2028 40 2014 44 2024 44 2033 61 303 41 58 450 91 648 93 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 41 44 91 648 44 648 44 648 44 648 44 648 93 41 348 2098 40 2014 41 58 648 334 2080 40 2038 41 58 2039 61 2040 2041 61 648 2099 61 40 648 44 41 348 2043 40 2014 44 2024 44 2033 61 303 44 638 2094 41 58 2094 91 648 93 61 123 648 58 2100 125 450 463 40 41 46 2043 40 2024 44 2033 44 638 2094 41 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2101 61 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 91 648 93 46 2091 621 2014 46 2102 40 2101 44 2100 41 348 2103 40 2014 41 58 621 621 2104 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 648 44 2011 61 2012 40 1505 44 1501 44 1501 41 41 2018 61 2019 40 2040 44 2014 46 2015 41 2034 61 2018 46 2023 40 2024 41 40 41 2014 46 2105 40 2021 40 2034 91 648 93 41 44 648 648 648 648 648 648 37 40 2104 46 2106 44 2014 46 2005 46 2106 41 41 334 2079 40 2075 46 2076 41 58 348 2107 40 2014 44 42 2108 44 638 2094 41 58 463 40 41 46 2107 40 42 2108 44 638 2094 41 2014 46 2036 91 648 93 46 2109 61 2006 46 2007 46 2110 40 2009 61 648 41 334 2111 40 2019 41 58 2034 61 2079 2018 61 2111 40 2040 44 2014 46 2015 41 2034 61 2018 46 2023 40 2024 41 40 41 2014 46 2105 40 2021 40 2034 91 648 93 41 44 648 648 648 648 648 37 2014 46 2005 46 2106 41 348 2112 40 2014 41 58 648 334 2113 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2036 61 91 648 93 334 2080 40 2038 41 58 2039 61 2040 2041 61 648 348 2043 40 2014 44 2024 44 2033 61 303 44 638 2094 41 58 392 2033 58 2094 91 648 93 61 2113 450 463 40 41 46 2043 40 2024 44 2033 44 638 2094 41 334 2032 40 2019 41 58 2081 61 91 2080 93 2040 46 2007 46 2008 40 2114 61 2014 46 2005 44 2115 61 2014 46 2005 44 2116 61 1501 41 2018 61 2032 40 2006 44 2014 46 2015 41 2117 61 2018 46 2118 40 2024 41 2071 61 411 40 2117 91 1500 93 46 2030 40 2024 41 41 2014 46 2020 40 2071 91 1500 93 91 1501 93 91 648 93 44 91 648 44 648 44 648 44 648 93 41 2071 61 411 40 2117 91 1500 93 46 2030 40 2024 44 2117 91 1500 93 46 2039 41 41 2014 46 2020 40 2071 91 1500 93 91 1501 93 91 648 93 44 91 648 93 41 621 348 2119 40 2014 41 58 621 621 621 621 621 2120 61 2019 40 2040 44 2014 46 2015 41 2121 61 2120 46 2023 40 2024 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 46 2091 41 44 2100 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 648 44 648 41 44 40 2014 46 2005 46 2106 44 648 41 93 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 46 2091 41 44 2100 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 648 44 648 41 44 40 2014 46 2005 46 2106 44 648 41 93 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 41 44 2100 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 648 44 648 41 44 40 1501 44 648 41 44 40 1502 44 648 41 93 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 41 44 2100 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 648 44 648 41 44 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 41 348 2123 40 2014 41 58 621 621 621 621 334 2124 40 2019 41 58 2125 61 123 648 58 2126 44 648 58 2127 44 648 58 2127 44 648 58 2126 44 125 2120 61 2124 40 2040 44 2014 46 2015 41 2121 61 2120 46 2023 40 2024 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 46 2091 41 44 2128 41 2014 46 2020 40 2121 46 2025 91 648 93 46 2091 46 2129 44 123 648 58 648 125 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 2014 46 2005 46 2106 44 648 41 93 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 46 2091 41 44 2128 41 2014 46 2020 40 2121 46 2025 91 648 93 46 2091 46 2129 44 123 648 58 648 125 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 648 44 648 41 44 40 2014 46 2005 46 2106 44 648 41 93 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 41 44 2128 41 2014 46 2020 40 2121 46 2025 91 648 93 46 2091 46 2129 44 123 648 58 648 125 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 1501 44 648 41 44 40 1502 44 648 41 93 41 2014 46 2020 40 2090 40 2121 46 2025 91 648 93 46 2091 41 44 2128 41 2014 46 2020 40 2121 46 2025 91 648 93 46 2091 46 2129 44 123 648 58 648 125 41 2014 46 2020 40 411 40 2121 46 2025 91 648 93 46 2091 46 2122 41 44 91 40 648 44 648 41 44 40 1501 44 648 41 44 40 1502 44 648 41 44 40 1502 44 648 41 93 41 334 2079 40 2075 46 2076 41 58 334 2077 58 2039 61 2040 2072 61 40 648 44 41 334 2124 40 2019 41 58 2034 61 2079 2018 61 2124 40 2040 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 44 648 93 41 334 2079 40 2075 46 2076 41 58 2130 61 2075 46 2053 40 41 334 2077 58 2039 61 2040 2036 61 91 648 44 648 93 334 2124 40 2019 41 58 2034 61 2079 2018 61 2124 40 2040 44 2014 46 2015 41 2014 46 2020 40 411 40 2018 46 2023 40 2024 41 46 2025 41 44 91 648 44 648 93 41 334 2080 40 2038 41 58 2034 61 2079 2039 61 2040 2041 61 648 2042 61 304 334 2032 40 2019 41 58 2081 61 91 2080 93 2018 61 2032 40 2006 44 2014 46 2015 41 2014 46 2020 40 411 40 411 40 2018 46 2082 40 2024 41 41 91 1500 93 91 1500 93 40 41 46 2075 91 1500 93 46 2036 41 44 91 648 44 648 44 648 44 648 44 648 93 41 348 2131 40 2014 41 58 2018 61 2019 40 2006 44 2014 46 2015 41 2132 61 2133 40 41 2132 46 2134 61 2135 46 2007 46 2008 40 2136 61 648 41 2137 61 2138 40 2014 46 2005 41 2139 61 40 40 2018 46 2140 44 2141 44 123 648 58 123 125 125 41 44 40 2018 46 2142 44 2143 44 123 648 58 123 648 58 91 648 44 648 93 125 125 41 44 40 2018 46 2144 44 2145 44 2021 40 2014 46 2005 41 41 44 41 385 2146 44 2147 44 2148 398 2139 58 497 2014 46 2149 40 2009 61 2146 46 2150 41 58 2151 61 2146 40 2132 44 2014 46 2005 44 2148 41 2152 61 2153 46 2007 46 2110 40 2154 61 2147 41 46 2155 40 648 41 2014 46 2020 40 2151 44 2152 41 2014 46 2020 40 2152 46 2154 44 2147 41 2014 46 2020 40 2152 46 2137 44 2137 41 2014 46 2020 40 2152 46 2156 44 2021 40 2014 46 2005 46 2157 41 41 2014 46 2020 40 2152 46 2134 44 2132 46 2134 41 392 2147 614 2145 58 2014 46 2020 40 2152 46 2158 44 648 41 2014 46 2020 40 2152 46 2159 44 2148 41 360 58 2014 46 2020 40 2152 46 2158 44 2021 40 2148 41 41 2014 46 2020 40 2152 46 2159 44 2021 40 2014 46 2005 41 41 348 2160 40 2014 41 58 334 2161 40 2019 41 58 2162 61 91 648 93 334 2163 40 2019 41 58 2164 61 91 648 93 2036 61 91 648 44 648 93 334 2165 40 2163 41 58 348 2166 40 2014 44 2024 41 58 450 91 648 93 2014 46 2015 46 444 40 2006 44 2161 41 474 58 621 2167 61 2163 40 2168 44 2014 46 2015 41 2034 61 2167 46 2023 40 2024 41 40 41 2014 46 2102 40 2034 46 2036 91 648 93 46 2091 46 2091 44 2169 41 621 2167 61 2165 40 2168 44 2014 46 2015 41 2034 61 2167 46 2023 40 2024 41 40 41 2014 46 2102 40 2034 46 2036 91 648 93 46 2091 46 2091 44 2170 41 382 58 2014 46 2015 46 2171 40 2006 41 348 2172 40 2014 41 58 2132 61 2133 40 41 2132 46 2134 61 2135 46 2007 46 2173 40 2136 61 648 44 2174 61 648 44 2175 61 648 41 2014 46 2015 46 444 40 2006 44 2019 41 2018 61 2014 46 2015 46 2176 91 2006 93 2177 44 2178 44 2179 44 438 61 2018 46 2180 40 91 2014 46 2005 93 44 2024 41 2014 46 2020 40 2177 44 91 648 93 41 2014 46 2020 40 2178 44 123 648 58 1501 125 41 2014 46 2020 40 2179 44 2181 40 41 41 2014 46 2020 40 438 44 91 93 41 348 2182 40 2014 41 58 648 2132 61 2133 40 41 2132 46 2134 61 2135 46 2007 46 2173 40 2136 61 648 44 2174 61 648 44 2175 61 648 41 334 2183 40 2019 41 58 348 2184 40 2014 44 2024 44 2033 61 303 41 58 450 302 2014 46 2015 46 444 40 2006 44 2183 41 2018 61 2014 46 2015 46 2176 91 2006 93 2177 44 2178 44 2179 44 438 61 2018 46 2180 40 91 2014 46 2005 93 44 2024 41 2014 46 2020 40 2177 44 91 648 93 41 2014 46 2020 40 2178 44 123 648 58 1501 125 41 2014 46 2020 40 2179 44 123 648 125 41 2014 46 2020 40 438 44 91 93 41 348 2185 40 2014 41 58 2018 61 2019 40 2006 44 2014 46 2015 41 2014 46 2020 40 2186 40 2018 41 44 648 44 41 
131073,Python,"class FormsFormsetTestCase(SimpleTestCase):

    def make_choiceformset(
            self, formset_data=None, formset_class=ChoiceFormSet,
            total_forms=None, initial_forms=0, max_num_forms=0, min_num_forms=0, **kwargs):
        """"""
        Make a ChoiceFormset from the given formset_data.
        The data should be given as a list of (choice, votes) tuples.
        """"""
        kwargs.setdefault('prefix', 'choices')
        kwargs.setdefault('auto_id', False)

        if formset_data is None:
            return formset_class(**kwargs)

        if total_forms is None:
            total_forms = len(formset_data)

        def prefixed(*args):
            args = (kwargs['prefix'],) + args
            return '-'.join(args)

        data = {
            prefixed('TOTAL_FORMS'): str(total_forms),
            prefixed('INITIAL_FORMS'): str(initial_forms),
            prefixed('MAX_NUM_FORMS'): str(max_num_forms),
            prefixed('MIN_NUM_FORMS'): str(min_num_forms),
        }
        for i, (choice, votes) in enumerate(formset_data):
            data[prefixed(str(i), 'choice')] = choice
            data[prefixed(str(i), 'votes')] = votes

        return formset_class(data, **kwargs)

    def test_basic_formset(self):
        """"""
        A FormSet constructor takes the same arguments as Form. Create a
        FormSet for adding data. By default, it displays 1 blank form.
        """"""
        formset = self.make_choiceformset()
        self.assertHTMLEqual(
            str(formset),
            """"""<input type=""hidden"" name=""choices-TOTAL_FORMS"" value=""1"">
<input type=""hidden"" name=""choices-INITIAL_FORMS"" value=""0"">
<input type=""hidden"" name=""choices-MIN_NUM_FORMS"" value=""0"">
<input type=""hidden"" name=""choices-MAX_NUM_FORMS"" value=""1000"">
<tr><th>Choice:</th><td><input type=""text"" name=""choices-0-choice""></td></tr>
<tr><th>Votes:</th><td><input type=""number"" name=""choices-0-votes""></td></tr>""""""
        )
        # FormSet are treated similarly to Forms. FormSet has an is_valid()
        # method, and a cleaned_data or errors attribute depending on whether
        # all the forms passed validation. However, unlike a Form, cleaned_data
        # and errors will be a list of dicts rather than a single dict.
        formset = self.make_choiceformset([('Calexico', '100')])
        self.assertTrue(formset.is_valid())
        self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}])

        # If a FormSet wasn't passed any data, is_valid() and has_changed()
        # return False.
        formset = self.make_choiceformset()
        self.assertFalse(formset.is_valid())
        self.assertFalse(formset.has_changed())

    def test_form_kwargs_formset(self):
        """"""
        Custom kwargs set on the formset instance are passed to the
        underlying forms.
        """"""
        FormSet = formset_factory(CustomKwargForm, extra=2)
        formset = FormSet(form_kwargs={'custom_kwarg': 1})
        for form in formset:
            self.assertTrue(hasattr(form, 'custom_kwarg'))
            self.assertEqual(form.custom_kwarg, 1)

    def test_form_kwargs_formset_dynamic(self):
        """"""Form kwargs can be passed dynamically in a formset.""""""
        class DynamicBaseFormSet(BaseFormSet):
            def get_form_kwargs(self, index):
                return {'custom_kwarg': index}

        DynamicFormSet = formset_factory(CustomKwargForm, formset=DynamicBaseFormSet, extra=2)
        formset = DynamicFormSet(form_kwargs={'custom_kwarg': 'ignored'})
        for i, form in enumerate(formset):
            self.assertTrue(hasattr(form, 'custom_kwarg'))
            self.assertEqual(form.custom_kwarg, i)

    def test_form_kwargs_empty_form(self):
        FormSet = formset_factory(CustomKwargForm)
        formset = FormSet(form_kwargs={'custom_kwarg': 1})
        self.assertTrue(hasattr(formset.empty_form, 'custom_kwarg'))
        self.assertEqual(formset.empty_form.custom_kwarg, 1)

    def test_formset_validation(self):
        # FormSet instances can also have an error attribute if validation failed for
        # any of the forms.
        formset = self.make_choiceformset([('Calexico', '')])
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.errors, [{'votes': ['This field is required.']}])

    def test_formset_validation_count(self):
        """"""
        A formset's ManagementForm is validated once per FormSet.is_valid()
        call and each form of the formset is cleaned once.
        """"""
        def make_method_counter(func):
            """"""Add a counter to func for the number of times it's called.""""""
            counter = Counter()
            counter.call_count = 0

            def mocked_func(*args, **kwargs):
                counter.call_count += 1
                return func(*args, **kwargs)

            return mocked_func, counter

        mocked_is_valid, is_valid_counter = make_method_counter(formsets.ManagementForm.is_valid)
        mocked_full_clean, full_clean_counter = make_method_counter(BaseForm.full_clean)
        formset = self.make_choiceformset([('Calexico', '100'), ('Any1', '42'), ('Any2', '101')])

        with mock.patch('django.forms.formsets.ManagementForm.is_valid', mocked_is_valid), \
                mock.patch('django.forms.forms.BaseForm.full_clean', mocked_full_clean):
            self.assertTrue(formset.is_valid())
        self.assertEqual(is_valid_counter.call_count, 1)
        self.assertEqual(full_clean_counter.call_count, 4)

    def test_formset_has_changed(self):
        """"""
        FormSet.has_changed() is True if any data is passed to its forms, even
        if the formset didn't validate.
        """"""
        blank_formset = self.make_choiceformset([('', '')])
        self.assertFalse(blank_formset.has_changed())
        # invalid formset
        invalid_formset = self.make_choiceformset([('Calexico', '')])
        self.assertFalse(invalid_formset.is_valid())
        self.assertTrue(invalid_formset.has_changed())
        # valid formset
        valid_formset = self.make_choiceformset([('Calexico', '100')])
        self.assertTrue(valid_formset.is_valid())
        self.assertTrue(valid_formset.has_changed())

    def test_formset_initial_data(self):
        """"""
        A FormSet can be prefilled with existing data by providing a list of
        dicts to the `initial` argument. By default, an extra blank form is
        included.
        """"""
        formset = self.make_choiceformset(initial=[{'choice': 'Calexico', 'votes': 100}])
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice"" value=""Calexico""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes"" value=""100""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes""></li>""""""
        )

    def test_blank_form_unfilled(self):
        """"""A form that's displayed as blank may be submitted as blank.""""""
        formset = self.make_choiceformset([('Calexico', '100'), ('', '')], initial_forms=1)
        self.assertTrue(formset.is_valid())
        self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}])

    def test_second_form_partially_filled(self):
        """"""
        If at least one field is filled out on a blank form, it will be
        validated.
        """"""
        formset = self.make_choiceformset([('Calexico', '100'), ('The Decemberists', '')], initial_forms=1)
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.errors, [{}, {'votes': ['This field is required.']}])

    def test_delete_prefilled_data(self):
        """"""
        Deleting prefilled data is an error. Removing data from form fields
        isn't the proper way to delete it.
        """"""
        formset = self.make_choiceformset([('', ''), ('', '')], initial_forms=1)
        self.assertFalse(formset.is_valid())
        self.assertEqual(
            formset.errors,
            [{'votes': ['This field is required.'], 'choice': ['This field is required.']}, {}]
        )

    def test_displaying_more_than_one_blank_form(self):
        """"""
        More than 1 empty form can be displayed using formset_factory's
        `extra` argument.
        """"""
        ChoiceFormSet = formset_factory(Choice, extra=3)
        formset = ChoiceFormSet(auto_id=False, prefix='choices')
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes""></li>
<li>Choice: <input type=""text"" name=""choices-2-choice""></li>
<li>Votes: <input type=""number"" name=""choices-2-votes""></li>""""""
        )
        # Since every form was displayed as blank, they are also accepted as
        # blank. This may seem a little strange, but min_num is used to require
        # a minimum number of forms to be completed.
        data = {
            'choices-TOTAL_FORMS': '3',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': '',
            'choices-0-votes': '',
            'choices-1-choice': '',
            'choices-1-votes': '',
            'choices-2-choice': '',
            'choices-2-votes': '',
        }
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual([form.cleaned_data for form in formset.forms], [{}, {}, {}])

    def test_min_num_displaying_more_than_one_blank_form(self):
        """"""
        More than 1 empty form can also be displayed using formset_factory's
        min_num argument. It will (essentially) increment the extra argument.
        """"""
        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=1)
        formset = ChoiceFormSet(auto_id=False, prefix='choices')
        # Min_num forms are required; extra forms can be empty.
        self.assertFalse(formset.forms[0].empty_permitted)
        self.assertTrue(formset.forms[1].empty_permitted)
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes""></li>""""""
        )

    def test_min_num_displaying_more_than_one_blank_form_with_zero_extra(self):
        """"""More than 1 empty form can be displayed using min_num.""""""
        ChoiceFormSet = formset_factory(Choice, extra=0, min_num=3)
        formset = ChoiceFormSet(auto_id=False, prefix='choices')
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes""></li>
<li>Choice: <input type=""text"" name=""choices-2-choice""></li>
<li>Votes: <input type=""number"" name=""choices-2-votes""></li>""""""
        )

    def test_single_form_completed(self):
        """"""Just one form may be completed.""""""
        data = {
            'choices-TOTAL_FORMS': '3',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
            'choices-1-choice': '',
            'choices-1-votes': '',
            'choices-2-choice': '',
            'choices-2-votes': '',
        }
        ChoiceFormSet = formset_factory(Choice, extra=3)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])

    def test_formset_validate_max_flag(self):
        """"""
        If validate_max is set and max_num is less than TOTAL_FORMS in the
        data, a ValidationError is raised. MAX_NUM_FORMS in the data is
        irrelevant here (it's output as a hint for the client but its value
        in the returned data is not checked).
        """"""
        data = {
            'choices-TOTAL_FORMS': '2',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '2',  # max number of forms - should be ignored
            'choices-0-choice': 'Zero',
            'choices-0-votes': '0',
            'choices-1-choice': 'One',
            'choices-1-votes': '1',
        }
        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])
        self.assertEqual(
            str(formset.non_form_errors()),
            '<ul class=""errorlist nonform""><li>Please submit at most 1 form.</li></ul>',
        )

    def test_formset_validate_min_flag(self):
        """"""
        If validate_min is set and min_num is more than TOTAL_FORMS in the
        data, a ValidationError is raised. MIN_NUM_FORMS in the data is
        irrelevant here (it's output as a hint for the client but its value
        in the returned data is not checked).
        """"""
        data = {
            'choices-TOTAL_FORMS': '2',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms - should be ignored
            'choices-0-choice': 'Zero',
            'choices-0-votes': '0',
            'choices-1-choice': 'One',
            'choices-1-votes': '1',
        }
        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])
        self.assertEqual(
            str(formset.non_form_errors()),
            '<ul class=""errorlist nonform""><li>'
            'Please submit at least 3 forms.</li></ul>',
        )

    def test_formset_validate_min_unchanged_forms(self):
        """"""
        min_num validation doesn't consider unchanged forms with initial data
        as ""empty"".
        """"""
        initial = [
            {'choice': 'Zero', 'votes': 0},
            {'choice': 'One', 'votes': 0},
        ]
        data = {
            'choices-TOTAL_FORMS': '2',
            'choices-INITIAL_FORMS': '2',
            'choices-MIN_NUM_FORMS': '0',
            'choices-MAX_NUM_FORMS': '2',
            'choices-0-choice': 'Zero',
            'choices-0-votes': '0',
            'choices-1-choice': 'One',
            'choices-1-votes': '1',  # changed from initial
        }
        ChoiceFormSet = formset_factory(Choice, min_num=2, validate_min=True)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices', initial=initial)
        self.assertFalse(formset.forms[0].has_changed())
        self.assertTrue(formset.forms[1].has_changed())
        self.assertTrue(formset.is_valid())

    def test_formset_validate_min_excludes_empty_forms(self):
        data = {
            'choices-TOTAL_FORMS': '2',
            'choices-INITIAL_FORMS': '0',
        }
        ChoiceFormSet = formset_factory(Choice, extra=2, min_num=1, validate_min=True, can_delete=True)
        formset = ChoiceFormSet(data, prefix='choices')
        self.assertFalse(formset.has_changed())
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.non_form_errors(), ['Please submit at least 1 form.'])

    def test_second_form_partially_filled_2(self):
        """"""A partially completed form is invalid.""""""
        data = {
            'choices-TOTAL_FORMS': '3',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
            'choices-1-choice': 'The Decemberists',
            'choices-1-votes': '',  # missing value
            'choices-2-choice': '',
            'choices-2-votes': '',
        }
        ChoiceFormSet = formset_factory(Choice, extra=3)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.errors, [{}, {'votes': ['This field is required.']}, {}])

    def test_more_initial_data(self):
        """"""
        The extra argument works when the formset is pre-filled with initial
        data.
        """"""
        initial = [{'choice': 'Calexico', 'votes': 100}]
        ChoiceFormSet = formset_factory(Choice, extra=3)
        formset = ChoiceFormSet(initial=initial, auto_id=False, prefix='choices')
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice"" value=""Calexico""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes"" value=""100""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes""></li>
<li>Choice: <input type=""text"" name=""choices-2-choice""></li>
<li>Votes: <input type=""number"" name=""choices-2-votes""></li>
<li>Choice: <input type=""text"" name=""choices-3-choice""></li>
<li>Votes: <input type=""number"" name=""choices-3-votes""></li>""""""
        )
        # Retrieving an empty form works. Tt shows up in the form list.
        self.assertTrue(formset.empty_form.empty_permitted)
        self.assertHTMLEqual(
            formset.empty_form.as_ul(),
            """"""<li>Choice: <input type=""text"" name=""choices-__prefix__-choice""></li>
<li>Votes: <input type=""number"" name=""choices-__prefix__-votes""></li>""""""
        )

    def test_formset_with_deletion(self):
        """"""
        formset_factory's can_delete argument adds a boolean ""delete"" field to
        each form. When that boolean field is True, the form will be in
        formset.deleted_forms.
        """"""
        ChoiceFormSet = formset_factory(Choice, can_delete=True)
        initial = [{'choice': 'Calexico', 'votes': 100}, {'choice': 'Fergie', 'votes': 900}]
        formset = ChoiceFormSet(initial=initial, auto_id=False, prefix='choices')
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice"" value=""Calexico""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes"" value=""100""></li>
<li>Delete: <input type=""checkbox"" name=""choices-0-DELETE""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice"" value=""Fergie""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes"" value=""900""></li>
<li>Delete: <input type=""checkbox"" name=""choices-1-DELETE""></li>
<li>Choice: <input type=""text"" name=""choices-2-choice""></li>
<li>Votes: <input type=""number"" name=""choices-2-votes""></li>
<li>Delete: <input type=""checkbox"" name=""choices-2-DELETE""></li>""""""
        )
        # To delete something, set that form's special delete field to 'on'.
        # Let's go ahead and delete Fergie.
        data = {
            'choices-TOTAL_FORMS': '3',  # the number of forms rendered
            'choices-INITIAL_FORMS': '2',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
            'choices-0-DELETE': '',
            'choices-1-choice': 'Fergie',
            'choices-1-votes': '900',
            'choices-1-DELETE': 'on',
            'choices-2-choice': '',
            'choices-2-votes': '',
            'choices-2-DELETE': '',
        }
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual(
            [form.cleaned_data for form in formset.forms],
            [
                {'votes': 100, 'DELETE': False, 'choice': 'Calexico'},
                {'votes': 900, 'DELETE': True, 'choice': 'Fergie'},
                {},
            ]
        )
        self.assertEqual(
            [form.cleaned_data for form in formset.deleted_forms],
            [{'votes': 900, 'DELETE': True, 'choice': 'Fergie'}]
        )

    def test_formset_with_deletion_remove_deletion_flag(self):
        """"""
        If a form is filled with something and can_delete is also checked, that
        form's errors shouldn't make the entire formset invalid since it's
        going to be deleted.
        """"""
        class CheckForm(Form):
            field = IntegerField(min_value=100)

        data = {
            'check-TOTAL_FORMS': '3',  # the number of forms rendered
            'check-INITIAL_FORMS': '2',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'check-MAX_NUM_FORMS': '0',  # max number of forms
            'check-0-field': '200',
            'check-0-DELETE': '',
            'check-1-field': '50',
            'check-1-DELETE': 'on',
            'check-2-field': '',
            'check-2-DELETE': '',
        }
        CheckFormSet = formset_factory(CheckForm, can_delete=True)
        formset = CheckFormSet(data, prefix='check')
        self.assertTrue(formset.is_valid())
        # If the deletion flag is removed, validation is enabled.
        data['check-1-DELETE'] = ''
        formset = CheckFormSet(data, prefix='check')
        self.assertFalse(formset.is_valid())

    def test_formset_with_deletion_invalid_deleted_form(self):
        """"""
        deleted_forms works on a valid formset even if a deleted form would
        have been invalid.
        """"""
        FavoriteDrinkFormset = formset_factory(form=FavoriteDrinkForm, can_delete=True)
        formset = FavoriteDrinkFormset({
            'form-0-name': '',
            'form-0-DELETE': 'on',  # no name!
            'form-TOTAL_FORMS': 1,
            'form-INITIAL_FORMS': 1,
            'form-MIN_NUM_FORMS': 0,
            'form-MAX_NUM_FORMS': 1,
        })
        self.assertTrue(formset.is_valid())
        self.assertEqual(formset._errors, [])
        self.assertEqual(len(formset.deleted_forms), 1)

    def test_formset_with_deletion_custom_widget(self):
        class DeletionAttributeFormSet(BaseFormSet):
            deletion_widget = HiddenInput

        class DeletionMethodFormSet(BaseFormSet):
            def get_deletion_widget(self):
                return HiddenInput(attrs={'class': 'deletion'})

        tests = [
            (DeletionAttributeFormSet, '<input type=""hidden"" name=""form-0-DELETE"">'),
            (
                DeletionMethodFormSet,
                '<input class=""deletion"" type=""hidden"" name=""form-0-DELETE"">',
            ),
        ]
        for formset_class, delete_html in tests:
            with self.subTest(formset_class=formset_class.__name__):
                ArticleFormSet = formset_factory(
                    ArticleForm,
                    formset=formset_class,
                    can_delete=True,
                )
                formset = ArticleFormSet(auto_id=False)
                self.assertHTMLEqual(
                    '\n'.join([form.as_ul() for form in formset.forms]),
                    (
                        f'<li>Title: <input type=""text"" name=""form-0-title""></li>'
                        f'<li>Pub date: <input type=""text"" name=""form-0-pub_date"">'
                        f'{delete_html}</li>'
                    ),
                )

    def test_formsets_with_ordering(self):
        """"""
        formset_factory's can_order argument adds an integer field to each
        form. When form validation succeeds, [form.cleaned_data for form in formset.forms]
        will have the data in the correct order specified by the ordering
        fields. If a number is duplicated in the set of ordering fields, for
        instance form 0 and form 3 are both marked as 1, then the form index
        used as a secondary ordering criteria. In order to put something at the
        front of the list, you'd need to set its order to 0.
        """"""
        ChoiceFormSet = formset_factory(Choice, can_order=True)
        initial = [{'choice': 'Calexico', 'votes': 100}, {'choice': 'Fergie', 'votes': 900}]
        formset = ChoiceFormSet(initial=initial, auto_id=False, prefix='choices')
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice"" value=""Calexico""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes"" value=""100""></li>
<li>Order: <input type=""number"" name=""choices-0-ORDER"" value=""1""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice"" value=""Fergie""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes"" value=""900""></li>
<li>Order: <input type=""number"" name=""choices-1-ORDER"" value=""2""></li>
<li>Choice: <input type=""text"" name=""choices-2-choice""></li>
<li>Votes: <input type=""number"" name=""choices-2-votes""></li>
<li>Order: <input type=""number"" name=""choices-2-ORDER""></li>""""""
        )
        data = {
            'choices-TOTAL_FORMS': '3',  # the number of forms rendered
            'choices-INITIAL_FORMS': '2',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
            'choices-0-ORDER': '1',
            'choices-1-choice': 'Fergie',
            'choices-1-votes': '900',
            'choices-1-ORDER': '2',
            'choices-2-choice': 'The Decemberists',
            'choices-2-votes': '500',
            'choices-2-ORDER': '0',
        }
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual(
            [form.cleaned_data for form in formset.ordered_forms],
            [
                {'votes': 500, 'ORDER': 0, 'choice': 'The Decemberists'},
                {'votes': 100, 'ORDER': 1, 'choice': 'Calexico'},
                {'votes': 900, 'ORDER': 2, 'choice': 'Fergie'},
            ],
        )

    def test_formsets_with_ordering_custom_widget(self):
        class OrderingAttributeFormSet(BaseFormSet):
            ordering_widget = HiddenInput

        class OrderingMethodFormSet(BaseFormSet):
            def get_ordering_widget(self):
                return HiddenInput(attrs={'class': 'ordering'})

        tests = (
            (OrderingAttributeFormSet, '<input type=""hidden"" name=""form-0-ORDER"">'),
            (OrderingMethodFormSet, '<input class=""ordering"" type=""hidden"" name=""form-0-ORDER"">'),
        )
        for formset_class, order_html in tests:
            with self.subTest(formset_class=formset_class.__name__):
                ArticleFormSet = formset_factory(ArticleForm, formset=formset_class, can_order=True)
                formset = ArticleFormSet(auto_id=False)
                self.assertHTMLEqual(
                    '\n'.join(form.as_ul() for form in formset.forms),
                    (
                        '<li>Title: <input type=""text"" name=""form-0-title""></li>'
                        '<li>Pub date: <input type=""text"" name=""form-0-pub_date"">'
                        '%s</li>' % order_html
                    ),
                )

    def test_empty_ordered_fields(self):
        """"""
        Ordering fields are allowed to be left blank. If they are left blank,
        they'll be sorted below everything else.
        """"""
        data = {
            'choices-TOTAL_FORMS': '4',  # the number of forms rendered
            'choices-INITIAL_FORMS': '3',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
            'choices-0-ORDER': '1',
            'choices-1-choice': 'Fergie',
            'choices-1-votes': '900',
            'choices-1-ORDER': '2',
            'choices-2-choice': 'The Decemberists',
            'choices-2-votes': '500',
            'choices-2-ORDER': '',
            'choices-3-choice': 'Basia Bulat',
            'choices-3-votes': '50',
            'choices-3-ORDER': '',
        }
        ChoiceFormSet = formset_factory(Choice, can_order=True)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual(
            [form.cleaned_data for form in formset.ordered_forms],
            [
                {'votes': 100, 'ORDER': 1, 'choice': 'Calexico'},
                {'votes': 900, 'ORDER': 2, 'choice': 'Fergie'},
                {'votes': 500, 'ORDER': None, 'choice': 'The Decemberists'},
                {'votes': 50, 'ORDER': None, 'choice': 'Basia Bulat'},
            ],
        )

    def test_ordering_blank_fieldsets(self):
        """"""Ordering works with blank fieldsets.""""""
        data = {
            'choices-TOTAL_FORMS': '3',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
        }
        ChoiceFormSet = formset_factory(Choice, can_order=True)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual(formset.ordered_forms, [])

    def test_formset_with_ordering_and_deletion(self):
        """"""FormSets with ordering + deletion.""""""
        ChoiceFormSet = formset_factory(Choice, can_order=True, can_delete=True)
        initial = [
            {'choice': 'Calexico', 'votes': 100},
            {'choice': 'Fergie', 'votes': 900},
            {'choice': 'The Decemberists', 'votes': 500},
        ]
        formset = ChoiceFormSet(initial=initial, auto_id=False, prefix='choices')
        self.assertHTMLEqual(
            '\n'.join(form.as_ul() for form in formset.forms),
            """"""<li>Choice: <input type=""text"" name=""choices-0-choice"" value=""Calexico""></li>
<li>Votes: <input type=""number"" name=""choices-0-votes"" value=""100""></li>
<li>Order: <input type=""number"" name=""choices-0-ORDER"" value=""1""></li>
<li>Delete: <input type=""checkbox"" name=""choices-0-DELETE""></li>
<li>Choice: <input type=""text"" name=""choices-1-choice"" value=""Fergie""></li>
<li>Votes: <input type=""number"" name=""choices-1-votes"" value=""900""></li>
<li>Order: <input type=""number"" name=""choices-1-ORDER"" value=""2""></li>
<li>Delete: <input type=""checkbox"" name=""choices-1-DELETE""></li>
<li>Choice: <input type=""text"" name=""choices-2-choice"" value=""The Decemberists""></li>
<li>Votes: <input type=""number"" name=""choices-2-votes"" value=""500""></li>
<li>Order: <input type=""number"" name=""choices-2-ORDER"" value=""3""></li>
<li>Delete: <input type=""checkbox"" name=""choices-2-DELETE""></li>
<li>Choice: <input type=""text"" name=""choices-3-choice""></li>
<li>Votes: <input type=""number"" name=""choices-3-votes""></li>
<li>Order: <input type=""number"" name=""choices-3-ORDER""></li>
<li>Delete: <input type=""checkbox"" name=""choices-3-DELETE""></li>""""""
        )
        # Let's delete Fergie, and put The Decemberists ahead of Calexico.
        data = {
            'choices-TOTAL_FORMS': '4',  # the number of forms rendered
            'choices-INITIAL_FORMS': '3',  # the number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
            'choices-0-ORDER': '1',
            'choices-0-DELETE': '',
            'choices-1-choice': 'Fergie',
            'choices-1-votes': '900',
            'choices-1-ORDER': '2',
            'choices-1-DELETE': 'on',
            'choices-2-choice': 'The Decemberists',
            'choices-2-votes': '500',
            'choices-2-ORDER': '0',
            'choices-2-DELETE': '',
            'choices-3-choice': '',
            'choices-3-votes': '',
            'choices-3-ORDER': '',
            'choices-3-DELETE': '',
        }
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertEqual(
            [form.cleaned_data for form in formset.ordered_forms],
            [
                {'votes': 500, 'DELETE': False, 'ORDER': 0, 'choice': 'The Decemberists'},
                {'votes': 100, 'DELETE': False, 'ORDER': 1, 'choice': 'Calexico'},
            ],
        )
        self.assertEqual(
            [form.cleaned_data for form in formset.deleted_forms],
            [{'votes': 900, 'DELETE': True, 'ORDER': 2, 'choice': 'Fergie'}]
        )

    def test_invalid_deleted_form_with_ordering(self):
        """"""
        Can get ordered_forms from a valid formset even if a deleted form
        would have been invalid.
        """"""
        FavoriteDrinkFormset = formset_factory(form=FavoriteDrinkForm, can_delete=True, can_order=True)
        formset = FavoriteDrinkFormset({
            'form-0-name': '',
            'form-0-DELETE': 'on',  # no name!
            'form-TOTAL_FORMS': 1,
            'form-INITIAL_FORMS': 1,
            'form-MIN_NUM_FORMS': 0,
            'form-MAX_NUM_FORMS': 1
        })
        self.assertTrue(formset.is_valid())
        self.assertEqual(formset.ordered_forms, [])

    def test_clean_hook(self):
        """"""
        FormSets have a clean() hook for doing extra validation that isn't tied
        to any form. It follows the same pattern as the clean() hook on Forms.
        """"""
        # Start out with a some duplicate data.
        data = {
            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered
            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data
            'drinks-MIN_NUM_FORMS': '0',  # min number of forms
            'drinks-MAX_NUM_FORMS': '0',  # max number of forms
            'drinks-0-name': 'Gin and Tonic',
            'drinks-1-name': 'Gin and Tonic',
        }
        formset = FavoriteDrinksFormSet(data, prefix='drinks')
        self.assertFalse(formset.is_valid())
        # Any errors raised by formset.clean() are available via the
        # formset.non_form_errors() method.
        for error in formset.non_form_errors():
            self.assertEqual(str(error), 'You may only specify a drink once.')
        # The valid case still works.
        data['drinks-1-name'] = 'Bloody Mary'
        formset = FavoriteDrinksFormSet(data, prefix='drinks')
        self.assertTrue(formset.is_valid())
        self.assertEqual(formset.non_form_errors(), [])

    def test_limiting_max_forms(self):
        """"""Limiting the maximum number of forms with max_num.""""""
        # When not passed, max_num will take a high default value, leaving the
        # number of forms only controlled by the value of the extra parameter.
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3)
        formset = LimitedFavoriteDrinkFormSet()
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th>
<td><input type=""text"" name=""form-0-name"" id=""id_form-0-name""></td></tr>
<tr><th><label for=""id_form-1-name"">Name:</label></th>
<td><input type=""text"" name=""form-1-name"" id=""id_form-1-name""></td></tr>
<tr><th><label for=""id_form-2-name"">Name:</label></th>
<td><input type=""text"" name=""form-2-name"" id=""id_form-2-name""></td></tr>""""""
        )
        # If max_num is 0 then no form is rendered at all.
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3, max_num=0)
        formset = LimitedFavoriteDrinkFormSet()
        self.assertEqual(formset.forms, [])

    def test_limited_max_forms_two(self):
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=5, max_num=2)
        formset = LimitedFavoriteDrinkFormSet()
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th><td>
<input type=""text"" name=""form-0-name"" id=""id_form-0-name""></td></tr>
<tr><th><label for=""id_form-1-name"">Name:</label></th>
<td><input type=""text"" name=""form-1-name"" id=""id_form-1-name""></td></tr>""""""
        )

    def test_limiting_extra_lest_than_max_num(self):
        """"""max_num has no effect when extra is less than max_num.""""""
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=1, max_num=2)
        formset = LimitedFavoriteDrinkFormSet()
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th>
<td><input type=""text"" name=""form-0-name"" id=""id_form-0-name""></td></tr>""""""
        )

    def test_max_num_with_initial_data(self):
        # When not passed, max_num will take a high default value, leaving the
        # number of forms only controlled by the value of the initial and extra
        # parameters.
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=1)
        formset = LimitedFavoriteDrinkFormSet(initial=[{'name': 'Fernet and Coke'}])
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th>
<td><input type=""text"" name=""form-0-name"" value=""Fernet and Coke"" id=""id_form-0-name""></td></tr>
<tr><th><label for=""id_form-1-name"">Name:</label></th>
<td><input type=""text"" name=""form-1-name"" id=""id_form-1-name""></td></tr>""""""
        )

    def test_max_num_zero(self):
        """"""
        If max_num is 0 then no form is rendered at all, regardless of extra,
        unless initial data is present.
        """"""
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=1, max_num=0)
        formset = LimitedFavoriteDrinkFormSet()
        self.assertEqual(formset.forms, [])

    def test_max_num_zero_with_initial(self):
        # initial trumps max_num
        initial = [
            {'name': 'Fernet and Coke'},
            {'name': 'Bloody Mary'},
        ]
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=1, max_num=0)
        formset = LimitedFavoriteDrinkFormSet(initial=initial)
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th>
<td><input id=""id_form-0-name"" name=""form-0-name"" type=""text"" value=""Fernet and Coke""></td></tr>
<tr><th><label for=""id_form-1-name"">Name:</label></th>
<td><input id=""id_form-1-name"" name=""form-1-name"" type=""text"" value=""Bloody Mary""></td></tr>""""""
        )

    def test_more_initial_than_max_num(self):
        """"""
        More initial forms than max_num results in all initial forms being
        displayed (but no extra forms).
        """"""
        initial = [
            {'name': 'Gin Tonic'},
            {'name': 'Bloody Mary'},
            {'name': 'Jack and Coke'},
        ]
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=1, max_num=2)
        formset = LimitedFavoriteDrinkFormSet(initial=initial)
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th>
<td><input id=""id_form-0-name"" name=""form-0-name"" type=""text"" value=""Gin Tonic""></td></tr>
<tr><th><label for=""id_form-1-name"">Name:</label></th>
<td><input id=""id_form-1-name"" name=""form-1-name"" type=""text"" value=""Bloody Mary""></td></tr>
<tr><th><label for=""id_form-2-name"">Name:</label></th>
<td><input id=""id_form-2-name"" name=""form-2-name"" type=""text"" value=""Jack and Coke""></td></tr>""""""
        )

    def test_default_absolute_max(self):
        # absolute_max defaults to 2 * DEFAULT_MAX_NUM if max_num is None.
        data = {
            'form-TOTAL_FORMS': 2001,
            'form-INITIAL_FORMS': '0',
            'form-MAX_NUM_FORMS': '0',
        }
        formset = FavoriteDrinksFormSet(data=data)
        self.assertIs(formset.is_valid(), False)
        self.assertEqual(
            formset.non_form_errors(),
            ['Please submit at most 1000 forms.'],
        )
        self.assertEqual(formset.absolute_max, 2000)

    def test_absolute_max(self):
        data = {
            'form-TOTAL_FORMS': '2001',
            'form-INITIAL_FORMS': '0',
            'form-MAX_NUM_FORMS': '0',
        }
        AbsoluteMaxFavoriteDrinksFormSet = formset_factory(
            FavoriteDrinkForm,
            absolute_max=3000,
        )
        formset = AbsoluteMaxFavoriteDrinksFormSet(data=data)
        self.assertIs(formset.is_valid(), True)
        self.assertEqual(len(formset.forms), 2001)
        # absolute_max provides a hard limit.
        data['form-TOTAL_FORMS'] = '3001'
        formset = AbsoluteMaxFavoriteDrinksFormSet(data=data)
        self.assertIs(formset.is_valid(), False)
        self.assertEqual(len(formset.forms), 3000)
        self.assertEqual(
            formset.non_form_errors(),
            ['Please submit at most 1000 forms.'],
        )

    def test_absolute_max_with_max_num(self):
        data = {
            'form-TOTAL_FORMS': '1001',
            'form-INITIAL_FORMS': '0',
            'form-MAX_NUM_FORMS': '0',
        }
        LimitedFavoriteDrinksFormSet = formset_factory(
            FavoriteDrinkForm,
            max_num=30,
            absolute_max=1000,
        )
        formset = LimitedFavoriteDrinksFormSet(data=data)
        self.assertIs(formset.is_valid(), False)
        self.assertEqual(len(formset.forms), 1000)
        self.assertEqual(
            formset.non_form_errors(),
            ['Please submit at most 30 forms.'],
        )

    def test_absolute_max_invalid(self):
        msg = ""'absolute_max' must be greater or equal to 'max_num'.""
        for max_num in [None, 31]:
            with self.subTest(max_num=max_num):
                with self.assertRaisesMessage(ValueError, msg):
                    formset_factory(FavoriteDrinkForm, max_num=max_num, absolute_max=30)

    def test_more_initial_form_result_in_one(self):
        """"""
        One form from initial and extra=3 with max_num=2 results in the one
        initial form and one extra.
        """"""
        LimitedFavoriteDrinkFormSet = formset_factory(FavoriteDrinkForm, extra=3, max_num=2)
        formset = LimitedFavoriteDrinkFormSet(initial=[{'name': 'Gin Tonic'}])
        self.assertHTMLEqual(
            '\n'.join(str(form) for form in formset.forms),
            """"""<tr><th><label for=""id_form-0-name"">Name:</label></th>
<td><input type=""text"" name=""form-0-name"" value=""Gin Tonic"" id=""id_form-0-name""></td></tr>
<tr><th><label for=""id_form-1-name"">Name:</label></th>
<td><input type=""text"" name=""form-1-name"" id=""id_form-1-name""></td></tr>""""""
        )

    def test_management_form_field_names(self):
        """"""The management form class has field names matching the constants.""""""
        self.assertCountEqual(
            ManagementForm.base_fields,
            [
                TOTAL_FORM_COUNT,
                INITIAL_FORM_COUNT,
                MIN_NUM_FORM_COUNT,
                MAX_NUM_FORM_COUNT,
            ],
        )

    def test_management_form_prefix(self):
        """"""The management form has the correct prefix.""""""
        formset = FavoriteDrinksFormSet()
        self.assertEqual(formset.management_form.prefix, 'form')
        data = {
            'form-TOTAL_FORMS': '2',
            'form-INITIAL_FORMS': '0',
            'form-MIN_NUM_FORMS': '0',
            'form-MAX_NUM_FORMS': '0',
        }
        formset = FavoriteDrinksFormSet(data=data)
        self.assertEqual(formset.management_form.prefix, 'form')
        formset = FavoriteDrinksFormSet(initial={})
        self.assertEqual(formset.management_form.prefix, 'form')

    def test_non_form_errors(self):
        data = {
            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered
            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data
            'drinks-MIN_NUM_FORMS': '0',  # min number of forms
            'drinks-MAX_NUM_FORMS': '0',  # max number of forms
            'drinks-0-name': 'Gin and Tonic',
            'drinks-1-name': 'Gin and Tonic',
        }
        formset = FavoriteDrinksFormSet(data, prefix='drinks')
        self.assertFalse(formset.is_valid())
        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])
        self.assertEqual(
            str(formset.non_form_errors()),
            '<ul class=""errorlist nonform""><li>'
            'You may only specify a drink once.</li></ul>',
        )

    def test_formset_iteration(self):
        """"""Formset instances are iterable.""""""
        ChoiceFormset = formset_factory(Choice, extra=3)
        formset = ChoiceFormset()
        # An iterated formset yields formset.forms.
        forms = list(formset)
        self.assertEqual(forms, formset.forms)
        self.assertEqual(len(formset), len(forms))
        # A formset may be indexed to retrieve its forms.
        self.assertEqual(formset[0], forms[0])
        with self.assertRaises(IndexError):
            formset[3]

        # Formsets can override the default iteration order
        class BaseReverseFormSet(BaseFormSet):
            def __iter__(self):
                return reversed(self.forms)

            def __getitem__(self, idx):
                return super().__getitem__(len(self) - idx - 1)

        ReverseChoiceFormset = formset_factory(Choice, BaseReverseFormSet, extra=3)
        reverse_formset = ReverseChoiceFormset()
        # __iter__() modifies the rendering order.
        # Compare forms from ""reverse"" formset with forms from original formset
        self.assertEqual(str(reverse_formset[0]), str(forms[-1]))
        self.assertEqual(str(reverse_formset[1]), str(forms[-2]))
        self.assertEqual(len(reverse_formset), len(forms))

    def test_formset_nonzero(self):
        """"""A formsets without any forms evaluates as True.""""""
        ChoiceFormset = formset_factory(Choice, extra=0)
        formset = ChoiceFormset()
        self.assertEqual(len(formset.forms), 0)
        self.assertTrue(formset)

    def test_formset_splitdatetimefield(self):
        """"""
        Formset works with SplitDateTimeField(initial=datetime.datetime.now).
        """"""
        class SplitDateTimeForm(Form):
            when = SplitDateTimeField(initial=datetime.datetime.now)

        SplitDateTimeFormSet = formset_factory(SplitDateTimeForm)
        data = {
            'form-TOTAL_FORMS': '1',
            'form-INITIAL_FORMS': '0',
            'form-0-when_0': '1904-06-16',
            'form-0-when_1': '15:51:33',
        }
        formset = SplitDateTimeFormSet(data)
        self.assertTrue(formset.is_valid())

    def test_formset_error_class(self):
        """"""Formset's forms use the formset's error_class.""""""
        class CustomErrorList(ErrorList):
            pass

        formset = FavoriteDrinksFormSet(error_class=CustomErrorList)
        self.assertEqual(formset.forms[0].error_class, CustomErrorList)

    def test_formset_calls_forms_is_valid(self):
        """"""Formsets call is_valid() on each form.""""""
        class AnotherChoice(Choice):
            def is_valid(self):
                self.is_valid_called = True
                return super().is_valid()

        AnotherChoiceFormSet = formset_factory(AnotherChoice)
        data = {
            'choices-TOTAL_FORMS': '1',  # number of forms rendered
            'choices-INITIAL_FORMS': '0',  # number of forms with initial data
            'choices-MIN_NUM_FORMS': '0',  # min number of forms
            'choices-MAX_NUM_FORMS': '0',  # max number of forms
            'choices-0-choice': 'Calexico',
            'choices-0-votes': '100',
        }
        formset = AnotherChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertTrue(formset.is_valid())
        self.assertTrue(all(form.is_valid_called for form in formset.forms))

    def test_hard_limit_on_instantiated_forms(self):
        """"""A formset has a hard limit on the number of forms instantiated.""""""
        # reduce the default limit of 1000 temporarily for testing
        _old_DEFAULT_MAX_NUM = formsets.DEFAULT_MAX_NUM
        try:
            formsets.DEFAULT_MAX_NUM = 2
            ChoiceFormSet = formset_factory(Choice, max_num=1)
            # someone fiddles with the mgmt form data...
            formset = ChoiceFormSet(
                {
                    'choices-TOTAL_FORMS': '4',
                    'choices-INITIAL_FORMS': '0',
                    'choices-MIN_NUM_FORMS': '0',  # min number of forms
                    'choices-MAX_NUM_FORMS': '4',
                    'choices-0-choice': 'Zero',
                    'choices-0-votes': '0',
                    'choices-1-choice': 'One',
                    'choices-1-votes': '1',
                    'choices-2-choice': 'Two',
                    'choices-2-votes': '2',
                    'choices-3-choice': 'Three',
                    'choices-3-votes': '3',
                },
                prefix='choices',
            )
            # But we still only instantiate 3 forms
            self.assertEqual(len(formset.forms), 3)
            # and the formset isn't valid
            self.assertFalse(formset.is_valid())
        finally:
            formsets.DEFAULT_MAX_NUM = _old_DEFAULT_MAX_NUM

    def test_increase_hard_limit(self):
        """"""Can increase the built-in forms limit via a higher max_num.""""""
        # reduce the default limit of 1000 temporarily for testing
        _old_DEFAULT_MAX_NUM = formsets.DEFAULT_MAX_NUM
        try:
            formsets.DEFAULT_MAX_NUM = 3
            # for this form, we want a limit of 4
            ChoiceFormSet = formset_factory(Choice, max_num=4)
            formset = ChoiceFormSet(
                {
                    'choices-TOTAL_FORMS': '4',
                    'choices-INITIAL_FORMS': '0',
                    'choices-MIN_NUM_FORMS': '0',  # min number of forms
                    'choices-MAX_NUM_FORMS': '4',
                    'choices-0-choice': 'Zero',
                    'choices-0-votes': '0',
                    'choices-1-choice': 'One',
                    'choices-1-votes': '1',
                    'choices-2-choice': 'Two',
                    'choices-2-votes': '2',
                    'choices-3-choice': 'Three',
                    'choices-3-votes': '3',
                },
                prefix='choices',
            )
            # Four forms are instantiated and no exception is raised
            self.assertEqual(len(formset.forms), 4)
        finally:
            formsets.DEFAULT_MAX_NUM = _old_DEFAULT_MAX_NUM

    def test_non_form_errors_run_full_clean(self):
        """"""
        If non_form_errors() is called without calling is_valid() first,
        it should ensure that full_clean() is called.
        """"""
        class BaseCustomFormSet(BaseFormSet):
            def clean(self):
                raise ValidationError(""This is a non-form error"")

        ChoiceFormSet = formset_factory(Choice, formset=BaseCustomFormSet)
        data = {
            'choices-TOTAL_FORMS': '1',
            'choices-INITIAL_FORMS': '0',
        }
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertIsInstance(formset.non_form_errors(), ErrorList)
        self.assertEqual(list(formset.non_form_errors()), ['This is a non-form error'])

    def test_validate_max_ignores_forms_marked_for_deletion(self):
        class CheckForm(Form):
            field = IntegerField()

        data = {
            'check-TOTAL_FORMS': '2',
            'check-INITIAL_FORMS': '0',
            'check-MAX_NUM_FORMS': '1',
            'check-0-field': '200',
            'check-0-DELETE': '',
            'check-1-field': '50',
            'check-1-DELETE': 'on',
        }
        CheckFormSet = formset_factory(CheckForm, max_num=1, validate_max=True, can_delete=True)
        formset = CheckFormSet(data, prefix='check')
        self.assertTrue(formset.is_valid())

    def test_formset_total_error_count(self):
        """"""A valid formset should have 0 total errors.""""""
        data = [  # formset_data, expected error count
            ([('Calexico', '100')], 0),
            ([('Calexico', '')], 1),
            ([('', 'invalid')], 2),
            ([('Calexico', '100'), ('Calexico', '')], 1),
            ([('Calexico', ''), ('Calexico', '')], 2),
        ]
        for formset_data, expected_error_count in data:
            formset = self.make_choiceformset(formset_data)
            self.assertEqual(formset.total_error_count(), expected_error_count)

    def test_formset_total_error_count_with_non_form_errors(self):
        data = {
            'choices-TOTAL_FORMS': '2',  # the number of forms rendered
            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data
            'choices-MAX_NUM_FORMS': '2',  # max number of forms - should be ignored
            'choices-0-choice': 'Zero',
            'choices-0-votes': '0',
            'choices-1-choice': 'One',
            'choices-1-votes': '1',
        }
        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertEqual(formset.total_error_count(), 1)
        data['choices-1-votes'] = ''
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertEqual(formset.total_error_count(), 2)

    def test_html_safe(self):
        formset = self.make_choiceformset()
        self.assertTrue(hasattr(formset, '__html__'))
        self.assertEqual(str(formset), formset.__html__())

    def test_can_delete_extra_formset_forms(self):
        ChoiceFormFormset = formset_factory(form=Choice, can_delete=True, extra=2)
        formset = ChoiceFormFormset()
        self.assertEqual(len(formset), 2)
        self.assertIn('DELETE', formset.forms[0].fields)
        self.assertIn('DELETE', formset.forms[1].fields)

    def test_disable_delete_extra_formset_forms(self):
        ChoiceFormFormset = formset_factory(
            form=Choice,
            can_delete=True,
            can_delete_extra=False,
            extra=2,
        )
        formset = ChoiceFormFormset()
        self.assertEqual(len(formset), 2)
        self.assertNotIn('DELETE', formset.forms[0].fields)
        self.assertNotIn('DELETE', formset.forms[1].fields)

        formset = ChoiceFormFormset(initial=[{'choice': 'Zero', 'votes': '1'}])
        self.assertEqual(len(formset), 3)
        self.assertIn('DELETE', formset.forms[0].fields)
        self.assertNotIn('DELETE', formset.forms[1].fields)
        self.assertNotIn('DELETE', formset.forms[2].fields)

        formset = ChoiceFormFormset(data={
            'form-0-choice': 'Zero',
            'form-0-votes': '0',
            'form-0-DELETE': 'on',
            'form-1-choice': 'One',
            'form-1-votes': '1',
            'form-2-choice': '',
            'form-2-votes': '',
            'form-TOTAL_FORMS': '3',
            'form-INITIAL_FORMS': '1',
        }, initial=[{'choice': 'Zero', 'votes': '1'}])
        self.assertEqual(formset.cleaned_data, [
            {'choice': 'Zero', 'votes': 0, 'DELETE': True},
            {'choice': 'One', 'votes': 1},
            {},
        ])
        self.assertIs(formset._should_delete_form(formset.forms[0]), True)
        self.assertIs(formset._should_delete_form(formset.forms[1]), False)
        self.assertIs(formset._should_delete_form(formset.forms[2]), False)

    def test_custom_renderer(self):
        """"""
        A custom renderer passed to a formset_factory() is passed to all forms
        and ErrorList.
        """"""
        from django.forms.renderers import Jinja2
        renderer = Jinja2()
        data = {
            'choices-TOTAL_FORMS': '2',
            'choices-INITIAL_FORMS': '0',
            'choices-MIN_NUM_FORMS': '0',
            'choices-0-choice': 'Zero',
            'choices-0-votes': '',
            'choices-1-choice': 'One',
            'choices-1-votes': '',
        }
        ChoiceFormSet = formset_factory(Choice, renderer=renderer)
        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
        self.assertEqual(formset.renderer, renderer)
        self.assertEqual(formset.forms[0].renderer, renderer)
        self.assertEqual(formset.management_form.renderer, renderer)
        self.assertEqual(formset.non_form_errors().renderer, renderer)
        self.assertEqual(formset.empty_form.renderer, renderer)

    def test_repr(self):
        valid_formset = self.make_choiceformset([('test', 1)])
        valid_formset.full_clean()
        invalid_formset = self.make_choiceformset([('test', '')])
        invalid_formset.full_clean()
        partially_invalid_formset = self.make_choiceformset(
            [('test', '1'), ('test', '')],
        )
        partially_invalid_formset.full_clean()
        invalid_formset_non_form_errors_only = self.make_choiceformset(
            [('test', '')],
            formset_class=ChoiceFormsetWithNonFormError,
        )
        invalid_formset_non_form_errors_only.full_clean()

        cases = [
            (
                self.make_choiceformset(),
                '<ChoiceFormSet: bound=False valid=Unknown total_forms=1>',
            ),
            (
                self.make_choiceformset(
                    formset_class=formset_factory(Choice, extra=10),
                ),
                '<ChoiceFormSet: bound=False valid=Unknown total_forms=10>',
            ),
            (
                self.make_choiceformset([]),
                '<ChoiceFormSet: bound=True valid=Unknown total_forms=0>',
            ),
            (
                self.make_choiceformset([('test', 1)]),
                '<ChoiceFormSet: bound=True valid=Unknown total_forms=1>',
            ),
            (valid_formset, '<ChoiceFormSet: bound=True valid=True total_forms=1>'),
            (invalid_formset, '<ChoiceFormSet: bound=True valid=False total_forms=1>'),
            (
                partially_invalid_formset,
                '<ChoiceFormSet: bound=True valid=False total_forms=2>',
            ),
            (
                invalid_formset_non_form_errors_only,
                '<ChoiceFormsetWithNonFormError: bound=True valid=False total_forms=1>',
            ),
        ]
        for formset, expected_repr in cases:
            with self.subTest(expected_repr=expected_repr):
                self.assertEqual(repr(formset), expected_repr)

    def test_repr_do_not_trigger_validation(self):
        formset = self.make_choiceformset([('test', 1)])
        with mock.patch.object(formset, 'full_clean') as mocked_full_clean:
            repr(formset)
            mocked_full_clean.assert_not_called()
            formset.is_valid()
            mocked_full_clean.assert_called()",1,334 2000 40 2001 41 58 348 2002 40 2003 44 2004 61 303 44 2005 61 2006 44 2007 61 303 44 2008 61 1500 44 2009 61 1500 44 2010 61 1500 44 638 2011 41 58 648 2011 46 2012 40 648 44 648 41 2011 46 2012 40 648 44 302 41 392 2004 407 303 58 450 2005 40 638 2011 41 392 2007 407 303 58 2007 61 2013 40 2004 41 348 2014 40 42 2015 41 58 2015 61 40 2011 91 648 93 44 41 43 2015 450 648 46 2016 40 2015 41 2017 61 123 2014 40 648 41 58 2018 40 2007 41 44 2014 40 648 41 58 2018 40 2008 41 44 2014 40 648 41 58 2018 40 2009 41 44 2014 40 648 41 58 2018 40 2010 41 44 125 385 2019 44 40 2020 44 2021 41 398 2022 40 2004 41 58 2017 91 2014 40 2018 40 2019 41 44 648 41 93 61 2020 2017 91 2014 40 2018 40 2019 41 44 648 41 93 61 2021 450 2005 40 2017 44 638 2011 41 348 2023 40 2003 41 58 648 2024 61 2003 46 2002 40 41 2003 46 2025 40 2018 40 2024 41 44 648 41 621 621 621 621 2024 61 2003 46 2002 40 91 40 648 44 648 41 93 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2031 93 44 91 123 648 58 1503 44 648 58 648 125 93 41 621 621 2024 61 2003 46 2002 40 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2032 40 2024 46 2033 40 41 41 348 2034 40 2003 41 58 648 2035 61 2036 40 2037 44 2038 61 1502 41 2024 61 2035 40 2039 61 123 648 58 1501 125 41 385 2029 398 2024 58 2003 46 2026 40 2040 40 2029 44 648 41 41 2003 46 2028 40 2029 46 2041 44 1501 41 348 2042 40 2003 41 58 648 334 2043 40 2044 41 58 348 2045 40 2003 44 2046 41 58 450 123 648 58 2046 125 2047 61 2036 40 2037 44 2024 61 2043 44 2038 61 1502 41 2024 61 2047 40 2039 61 123 648 58 648 125 41 385 2019 44 2029 398 2022 40 2024 41 58 2003 46 2026 40 2040 40 2029 44 648 41 41 2003 46 2028 40 2029 46 2041 44 2019 41 348 2048 40 2003 41 58 2035 61 2036 40 2037 41 2024 61 2035 40 2039 61 123 648 58 1501 125 41 2003 46 2026 40 2040 40 2024 46 2049 44 648 41 41 2003 46 2028 40 2024 46 2049 46 2041 44 1501 41 348 2050 40 2003 41 58 621 621 2024 61 2003 46 2002 40 91 40 648 44 648 41 93 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2051 44 91 123 648 58 91 648 93 125 93 41 348 2052 40 2003 41 58 648 348 2053 40 2054 41 58 648 2055 61 2056 40 41 2055 46 2057 61 1500 348 2058 40 42 2015 44 638 2011 41 58 2055 46 2057 636 1501 450 2054 40 42 2015 44 638 2011 41 450 2058 44 2055 2059 44 2060 61 2053 40 2061 46 2062 46 2027 41 2063 44 2064 61 2053 40 2065 46 2066 41 2024 61 2003 46 2002 40 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 497 2067 46 2068 40 648 44 2059 41 44 92 2067 46 2068 40 648 44 2063 41 58 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 2060 46 2057 44 1501 41 2003 46 2028 40 2064 46 2057 44 1502 41 348 2069 40 2003 41 58 648 2070 61 2003 46 2002 40 91 40 648 44 648 41 93 41 2003 46 2032 40 2070 46 2033 40 41 41 621 2071 61 2003 46 2002 40 91 40 648 44 648 41 93 41 2003 46 2032 40 2071 46 2027 40 41 41 2003 46 2026 40 2071 46 2033 40 41 41 621 2072 61 2003 46 2002 40 91 40 648 44 648 41 93 41 2003 46 2026 40 2072 46 2027 40 41 41 2003 46 2026 40 2072 46 2033 40 41 41 348 2073 40 2003 41 58 648 2024 61 2003 46 2002 40 2074 61 91 123 648 58 648 44 648 58 1503 125 93 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 348 2076 40 2003 41 58 648 2024 61 2003 46 2002 40 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2008 61 1501 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2031 93 44 91 123 648 58 1503 44 648 58 648 125 44 123 125 93 41 348 2077 40 2003 41 58 648 2024 61 2003 46 2002 40 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2008 61 1501 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2051 44 91 123 125 44 123 648 58 91 648 93 125 93 41 348 2078 40 2003 41 58 648 2024 61 2003 46 2002 40 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2008 61 1501 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2051 44 91 123 648 58 91 648 93 44 648 58 91 648 93 125 44 123 125 93 41 348 2079 40 2003 41 58 648 2006 61 2036 40 2080 44 2038 61 1502 41 2024 61 2006 40 2081 61 302 44 2082 61 648 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 621 621 621 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2031 93 44 91 123 125 44 123 125 44 123 125 93 41 348 2083 40 2003 41 58 648 2006 61 2036 40 2080 44 2038 61 1501 44 2084 61 1501 41 2024 61 2006 40 2081 61 302 44 2082 61 648 41 621 2003 46 2032 40 2024 46 2031 91 1500 93 46 2085 41 2003 46 2026 40 2024 46 2031 91 1501 93 46 2085 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 348 2086 40 2003 41 58 648 2006 61 2036 40 2080 44 2038 61 1500 44 2084 61 1502 41 2024 61 2006 40 2081 61 302 44 2082 61 648 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 348 2087 40 2003 41 58 648 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2038 61 1502 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2031 93 44 91 123 648 58 1503 44 648 58 648 125 44 123 125 44 123 125 93 41 348 2088 40 2003 41 58 648 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2038 61 1501 44 2089 61 1501 44 2090 61 304 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 41 2003 46 2028 40 2018 40 2024 46 2091 40 41 41 44 648 44 41 348 2092 40 2003 41 58 648 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2038 61 1501 44 2084 61 1502 44 2093 61 304 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 41 2003 46 2028 40 2018 40 2024 46 2091 40 41 41 44 648 648 44 41 348 2094 40 2003 41 58 648 2074 61 91 123 648 58 648 44 648 58 1500 125 44 123 648 58 648 44 648 58 1500 125 44 93 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 621 125 2006 61 2036 40 2080 44 2084 61 1502 44 2093 61 304 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 44 2074 61 2074 41 2003 46 2032 40 2024 46 2031 91 1500 93 46 2033 40 41 41 2003 46 2026 40 2024 46 2031 91 1501 93 46 2033 40 41 41 2003 46 2026 40 2024 46 2027 40 41 41 348 2095 40 2003 41 58 2017 61 123 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2038 61 1502 44 2084 61 1501 44 2093 61 304 44 2096 61 304 41 2024 61 2006 40 2017 44 2082 61 648 41 2003 46 2032 40 2024 46 2033 40 41 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 41 348 2097 40 2003 41 58 648 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 621 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2038 61 1502 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2051 44 91 123 125 44 123 648 58 91 648 93 125 44 123 125 93 41 348 2098 40 2003 41 58 648 2074 61 91 123 648 58 648 44 648 58 1503 125 93 2006 61 2036 40 2080 44 2038 61 1502 41 2024 61 2006 40 2074 61 2074 44 2081 61 302 44 2082 61 648 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 621 2003 46 2026 40 2024 46 2049 46 2085 41 2003 46 2025 40 2024 46 2049 46 2075 40 41 44 648 41 348 2099 40 2003 41 58 648 2006 61 2036 40 2080 44 2096 61 304 41 2074 61 91 123 648 58 648 44 648 58 1503 125 44 123 648 58 648 44 648 58 1504 125 93 2024 61 2006 40 2074 61 2074 44 2081 61 302 44 2082 61 648 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 621 621 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2031 93 44 91 123 648 58 1503 44 648 58 302 44 648 58 648 125 44 123 648 58 1504 44 648 58 304 44 648 58 648 125 44 123 125 44 93 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2100 93 44 91 123 648 58 1504 44 648 58 304 44 648 58 648 125 93 41 348 2101 40 2003 41 58 648 334 2102 40 2103 41 58 2104 61 2105 40 2106 61 1503 41 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2107 61 2036 40 2102 44 2096 61 304 41 2024 61 2107 40 2017 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 621 2017 91 648 93 61 648 2024 61 2107 40 2017 44 2082 61 648 41 2003 46 2032 40 2024 46 2027 40 41 41 348 2108 40 2003 41 58 648 2109 61 2036 40 2029 61 2110 44 2096 61 304 41 2024 61 2109 40 123 648 58 648 44 648 58 648 44 621 648 58 1501 44 648 58 1501 44 648 58 1500 44 648 58 1501 44 125 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2111 44 91 93 41 2003 46 2028 40 2013 40 2024 46 2100 41 44 1501 41 348 2112 40 2003 41 58 334 2113 40 2044 41 58 2114 61 2115 334 2116 40 2044 41 58 348 2117 40 2003 41 58 450 2115 40 2118 61 123 648 58 648 125 41 2119 61 91 40 2113 44 648 41 44 40 2116 44 648 44 41 44 93 385 2005 44 2120 398 2119 58 497 2003 46 2121 40 2005 61 2005 46 2122 41 58 2123 61 2036 40 2124 44 2024 61 2005 44 2096 61 304 44 41 2024 61 2123 40 2081 61 302 41 2003 46 2025 40 648 46 2016 40 91 2029 46 2075 40 41 385 2029 398 2024 46 2031 93 41 44 40 648 648 648 41 44 41 348 2125 40 2003 41 58 648 2006 61 2036 40 2080 44 2126 61 304 41 2074 61 91 123 648 58 648 44 648 58 1503 125 44 123 648 58 648 44 648 58 1504 125 93 2024 61 2006 40 2074 61 2074 44 2081 61 302 44 2082 61 648 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2127 93 44 91 123 648 58 1504 44 648 58 1500 44 648 58 648 125 44 123 648 58 1503 44 648 58 1501 44 648 58 648 125 44 123 648 58 1504 44 648 58 1502 44 648 58 648 125 44 93 44 41 348 2128 40 2003 41 58 334 2129 40 2044 41 58 2130 61 2115 334 2131 40 2044 41 58 348 2132 40 2003 41 58 450 2115 40 2118 61 123 648 58 648 125 41 2119 61 40 40 2129 44 648 41 44 40 2131 44 648 41 44 41 385 2005 44 2133 398 2119 58 497 2003 46 2121 40 2005 61 2005 46 2122 41 58 2123 61 2036 40 2124 44 2024 61 2005 44 2126 61 304 41 2024 61 2123 40 2081 61 302 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 40 648 648 648 37 2133 41 44 41 348 2134 40 2003 41 58 648 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2126 61 304 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2127 93 44 91 123 648 58 1503 44 648 58 1501 44 648 58 648 125 44 123 648 58 1504 44 648 58 1502 44 648 58 648 125 44 123 648 58 1504 44 648 58 303 44 648 58 648 125 44 123 648 58 1503 44 648 58 303 44 648 58 648 125 44 93 44 41 348 2135 40 2003 41 58 648 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 125 2006 61 2036 40 2080 44 2126 61 304 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2127 44 91 93 41 348 2136 40 2003 41 58 648 2006 61 2036 40 2080 44 2126 61 304 44 2096 61 304 41 2074 61 91 123 648 58 648 44 648 58 1503 125 44 123 648 58 648 44 648 58 1504 125 44 123 648 58 648 44 648 58 1504 125 44 93 2024 61 2006 40 2074 61 2074 44 2081 61 302 44 2082 61 648 41 2003 46 2025 40 648 46 2016 40 2029 46 2075 40 41 385 2029 398 2024 46 2031 41 44 648 41 621 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2127 93 44 91 123 648 58 1504 44 648 58 302 44 648 58 1500 44 648 58 648 125 44 123 648 58 1503 44 648 58 302 44 648 58 1501 44 648 58 648 125 44 93 44 41 2003 46 2028 40 91 2029 46 2030 385 2029 398 2024 46 2100 93 44 91 123 648 58 1504 44 648 58 304 44 648 58 1502 44 648 58 648 125 93 41 348 2137 40 2003 41 58 648 2109 61 2036 40 2029 61 2110 44 2096 61 304 44 2126 61 304 41 2024 61 2109 40 123 648 58 648 44 648 58 648 44 621 648 58 1501 44 648 58 1501 44 648 58 1500 44 648 58 1501 125 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2127 44 91 93 41 348 2138 40 2003 41 58 648 621 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 125 2024 61 2139 40 2017 44 2082 61 648 41 2003 46 2032 40 2024 46 2027 40 41 41 621 621 385 371 398 2024 46 2091 40 41 58 2003 46 2028 40 2018 40 371 41 44 648 41 621 2017 91 648 93 61 648 2024 61 2139 40 2017 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2091 40 41 44 91 93 41 348 2140 40 2003 41 58 648 621 621 2141 61 2036 40 2110 44 2038 61 1502 41 2024 61 2141 40 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 621 2141 61 2036 40 2110 44 2038 61 1502 44 2089 61 1500 41 2024 61 2141 40 41 2003 46 2028 40 2024 46 2031 44 91 93 41 348 2142 40 2003 41 58 2141 61 2036 40 2110 44 2038 61 1502 44 2089 61 1502 41 2024 61 2141 40 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 348 2143 40 2003 41 58 648 2141 61 2036 40 2110 44 2038 61 1501 44 2089 61 1502 41 2024 61 2141 40 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 348 2144 40 2003 41 58 621 621 621 2141 61 2036 40 2110 44 2038 61 1501 41 2024 61 2141 40 2074 61 91 123 648 58 648 125 93 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 348 2145 40 2003 41 58 648 2141 61 2036 40 2110 44 2038 61 1501 44 2089 61 1500 41 2024 61 2141 40 41 2003 46 2028 40 2024 46 2031 44 91 93 41 348 2146 40 2003 41 58 621 2074 61 91 123 648 58 648 125 44 123 648 58 648 125 44 93 2141 61 2036 40 2110 44 2038 61 1501 44 2089 61 1500 41 2024 61 2141 40 2074 61 2074 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 348 2147 40 2003 41 58 648 2074 61 91 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 44 93 2141 61 2036 40 2110 44 2038 61 1501 44 2089 61 1502 41 2024 61 2141 40 2074 61 2074 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 348 2148 40 2003 41 58 621 2017 61 123 648 58 1505 44 648 58 648 44 648 58 648 44 125 2024 61 2139 40 2017 61 2017 41 2003 46 2149 40 2024 46 2027 40 41 44 302 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 44 41 2003 46 2028 40 2024 46 2150 44 1505 41 348 2151 40 2003 41 58 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 125 2152 61 2036 40 2110 44 2150 61 1505 44 41 2024 61 2152 40 2017 61 2017 41 2003 46 2149 40 2024 46 2027 40 41 44 304 41 2003 46 2028 40 2013 40 2024 46 2031 41 44 1505 41 621 2017 91 648 93 61 648 2024 61 2152 40 2017 61 2017 41 2003 46 2149 40 2024 46 2027 40 41 44 302 41 2003 46 2028 40 2013 40 2024 46 2031 41 44 1505 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 44 41 348 2153 40 2003 41 58 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 125 2154 61 2036 40 2110 44 2089 61 1503 44 2150 61 1504 44 41 2024 61 2154 40 2017 61 2017 41 2003 46 2149 40 2024 46 2027 40 41 44 302 41 2003 46 2028 40 2013 40 2024 46 2031 41 44 1504 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 44 41 348 2155 40 2003 41 58 2156 61 648 385 2089 398 91 303 44 1503 93 58 497 2003 46 2121 40 2089 61 2089 41 58 497 2003 46 2157 40 2158 44 2156 41 58 2036 40 2110 44 2089 61 2089 44 2150 61 1503 41 348 2159 40 2003 41 58 648 2141 61 2036 40 2110 44 2038 61 1502 44 2089 61 1502 41 2024 61 2141 40 2074 61 91 123 648 58 648 125 93 41 2003 46 2025 40 648 46 2016 40 2018 40 2029 41 385 2029 398 2024 46 2031 41 44 648 41 348 2160 40 2003 41 58 648 2003 46 2161 40 2062 46 2162 44 91 2163 44 2164 44 2165 44 2166 44 93 44 41 348 2167 40 2003 41 58 648 2024 61 2139 40 41 2003 46 2028 40 2024 46 2168 46 2082 44 648 41 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2024 61 2139 40 2017 61 2017 41 2003 46 2028 40 2024 46 2168 46 2082 44 648 41 2024 61 2139 40 2074 61 123 125 41 2003 46 2028 40 2024 46 2168 46 2082 44 648 41 348 2169 40 2003 41 58 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 125 2024 61 2139 40 2017 44 2082 61 648 41 2003 46 2032 40 2024 46 2027 40 41 41 2003 46 2028 40 2024 46 2091 40 41 44 91 648 93 41 2003 46 2028 40 2018 40 2024 46 2091 40 41 41 44 648 648 44 41 348 2170 40 2003 41 58 648 2171 61 2036 40 2080 44 2038 61 1502 41 2024 61 2171 40 41 621 2031 61 411 40 2024 41 2003 46 2028 40 2031 44 2024 46 2031 41 2003 46 2028 40 2013 40 2024 41 44 2013 40 2031 41 41 621 2003 46 2028 40 2024 91 1500 93 44 2031 91 1500 93 41 497 2003 46 2172 40 2173 41 58 2024 91 1502 93 621 334 2174 40 2044 41 58 348 2175 40 2003 41 58 450 2176 40 2003 46 2031 41 348 2177 40 2003 44 2178 41 58 450 463 40 41 46 2177 40 2013 40 2003 41 45 2178 45 1501 41 2179 61 2036 40 2080 44 2174 44 2038 61 1502 41 2180 61 2179 40 41 621 621 2003 46 2028 40 2018 40 2180 91 1500 93 41 44 2018 40 2031 91 45 1501 93 41 41 2003 46 2028 40 2018 40 2180 91 1501 93 41 44 2018 40 2031 91 45 1502 93 41 41 2003 46 2028 40 2013 40 2180 41 44 2013 40 2031 41 41 348 2181 40 2003 41 58 648 2171 61 2036 40 2080 44 2038 61 1500 41 2024 61 2171 40 41 2003 46 2028 40 2013 40 2024 46 2031 41 44 1500 41 2003 46 2026 40 2024 41 348 2182 40 2003 41 58 648 334 2183 40 2103 41 58 2184 61 2185 40 2074 61 2186 46 2186 46 2187 41 2188 61 2036 40 2183 41 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2024 61 2188 40 2017 41 2003 46 2026 40 2024 46 2027 40 41 41 348 2189 40 2003 41 58 648 334 2190 40 2191 41 58 434 2024 61 2139 40 2192 61 2190 41 2003 46 2028 40 2024 46 2031 91 1500 93 46 2192 44 2190 41 348 2193 40 2003 41 58 648 334 2194 40 2080 41 58 348 2027 40 2003 41 58 2003 46 2195 61 304 450 463 40 41 46 2027 40 41 2196 61 2036 40 2194 41 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 125 2024 61 2196 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 2003 46 2026 40 2197 40 2029 46 2195 385 2029 398 2024 46 2031 41 41 348 2198 40 2003 41 58 648 621 2199 61 2061 46 2200 474 58 2061 46 2200 61 1502 2006 61 2036 40 2080 44 2089 61 1501 41 621 2024 61 2006 40 123 648 58 648 44 648 58 648 44 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2082 61 648 44 41 621 2003 46 2028 40 2013 40 2024 46 2031 41 44 1502 41 621 2003 46 2032 40 2024 46 2027 40 41 41 382 58 2061 46 2200 61 2199 348 2201 40 2003 41 58 648 621 2199 61 2061 46 2200 474 58 2061 46 2200 61 1502 621 2006 61 2036 40 2080 44 2089 61 1502 41 2024 61 2006 40 123 648 58 648 44 648 58 648 44 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2082 61 648 44 41 621 2003 46 2028 40 2013 40 2024 46 2031 41 44 1502 41 382 58 2061 46 2200 61 2199 348 2202 40 2003 41 58 648 334 2203 40 2044 41 58 348 2204 40 2003 41 58 440 2205 40 648 41 2006 61 2036 40 2080 44 2024 61 2203 41 2017 61 123 648 58 648 44 648 58 648 44 125 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2206 40 2024 46 2091 40 41 44 2191 41 2003 46 2028 40 411 40 2024 46 2091 40 41 41 44 91 648 93 41 348 2207 40 2003 41 58 334 2102 40 2103 41 58 2104 61 2105 40 41 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2107 61 2036 40 2102 44 2089 61 1501 44 2090 61 304 44 2096 61 304 41 2024 61 2107 40 2017 44 2082 61 648 41 2003 46 2026 40 2024 46 2027 40 41 41 348 2208 40 2003 41 58 648 2017 61 91 621 40 91 40 648 44 648 41 93 44 1500 41 44 40 91 40 648 44 648 41 93 44 1501 41 44 40 91 40 648 44 648 41 93 44 1502 41 44 40 91 40 648 44 648 41 44 40 648 44 648 41 93 44 1501 41 44 40 91 40 648 44 648 41 44 40 648 44 648 41 93 44 1502 41 44 93 385 2004 44 2209 398 2017 58 2024 61 2003 46 2002 40 2004 41 2003 46 2028 40 2024 46 2210 40 41 44 2209 41 348 2211 40 2003 41 58 2017 61 123 648 58 648 44 621 648 58 648 44 621 648 58 648 44 621 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2038 61 1501 44 2089 61 1501 44 2090 61 304 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2028 40 2024 46 2210 40 41 44 1501 41 2017 91 648 93 61 648 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2028 40 2024 46 2210 40 41 44 1502 41 348 2212 40 2003 41 58 2024 61 2003 46 2002 40 41 2003 46 2026 40 2040 40 2024 44 648 41 41 2003 46 2028 40 2018 40 2024 41 44 2024 46 2213 40 41 41 348 2214 40 2003 41 58 2215 61 2036 40 2029 61 2080 44 2096 61 304 44 2038 61 1502 41 2024 61 2215 40 41 2003 46 2028 40 2013 40 2024 41 44 1502 41 2003 46 2216 40 648 44 2024 46 2031 91 1500 93 46 2217 41 2003 46 2216 40 648 44 2024 46 2031 91 1501 93 46 2217 41 348 2218 40 2003 41 58 2215 61 2036 40 2029 61 2080 44 2096 61 304 44 2219 61 302 44 2038 61 1502 44 41 2024 61 2215 40 41 2003 46 2028 40 2013 40 2024 41 44 1502 41 2003 46 2220 40 648 44 2024 46 2031 91 1500 93 46 2217 41 2003 46 2220 40 648 44 2024 46 2031 91 1501 93 46 2217 41 2024 61 2215 40 2074 61 91 123 648 58 648 44 648 58 648 125 93 41 2003 46 2028 40 2013 40 2024 41 44 1502 41 2003 46 2216 40 648 44 2024 46 2031 91 1500 93 46 2217 41 2003 46 2220 40 648 44 2024 46 2031 91 1501 93 46 2217 41 2003 46 2220 40 648 44 2024 46 2031 91 1502 93 46 2217 41 2024 61 2215 40 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2074 61 91 123 648 58 648 44 648 58 648 125 93 41 2003 46 2028 40 2024 46 2030 44 91 123 648 58 648 44 648 58 1500 44 648 58 304 125 44 123 648 58 648 44 648 58 1501 125 44 123 125 44 93 41 2003 46 2149 40 2024 46 2221 40 2024 46 2031 91 1500 93 41 44 304 41 2003 46 2149 40 2024 46 2221 40 2024 46 2031 91 1501 93 41 44 302 41 2003 46 2149 40 2024 46 2221 40 2024 46 2031 91 1502 93 41 44 302 41 348 2222 40 2003 41 58 648 388 2223 46 2031 46 2224 397 2225 2226 61 2225 40 41 2017 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2006 61 2036 40 2080 44 2226 61 2226 41 2024 61 2006 40 2017 44 2081 61 302 44 2082 61 648 41 2003 46 2028 40 2024 46 2226 44 2226 41 2003 46 2028 40 2024 46 2031 91 1500 93 46 2226 44 2226 41 2003 46 2028 40 2024 46 2168 46 2226 44 2226 41 2003 46 2028 40 2024 46 2091 40 41 46 2226 44 2226 41 2003 46 2028 40 2024 46 2049 46 2226 44 2226 41 348 2227 40 2003 41 58 2072 61 2003 46 2002 40 91 40 648 44 1501 41 93 41 2072 46 2066 40 41 2071 61 2003 46 2002 40 91 40 648 44 648 41 93 41 2071 46 2066 40 41 2228 61 2003 46 2002 40 91 40 648 44 648 41 44 40 648 44 648 41 93 44 41 2228 46 2066 40 41 2229 61 2003 46 2002 40 91 40 648 44 648 41 93 44 2005 61 2230 44 41 2229 46 2066 40 41 2231 61 91 40 2003 46 2002 40 41 44 648 44 41 44 40 2003 46 2002 40 2005 61 2036 40 2080 44 2038 61 1502 41 44 41 44 648 44 41 44 40 2003 46 2002 40 91 93 41 44 648 44 41 44 40 2003 46 2002 40 91 40 648 44 1501 41 93 41 44 648 44 41 44 40 2072 44 648 41 44 40 2071 44 648 41 44 40 2228 44 648 44 41 44 40 2229 44 648 44 41 44 93 385 2024 44 2232 398 2231 58 497 2003 46 2121 40 2232 61 2232 41 58 2003 46 2028 40 2233 40 2024 41 44 2232 41 348 2234 40 2003 41 58 2024 61 2003 46 2002 40 91 40 648 44 1501 41 93 41 497 2067 46 2068 46 426 40 2024 44 648 41 311 2063 58 2233 40 2024 41 2063 46 2235 40 41 2024 46 2027 40 41 2063 46 2236 40 41 
131065,Python,"class RelativeFieldTests(SimpleTestCase):

    def test_valid_foreign_key_without_accessor(self):
        class Target(models.Model):
            # There would be a clash if Model.field installed an accessor.
            model = models.IntegerField()

        class Model(models.Model):
            field = models.ForeignKey(Target, models.CASCADE, related_name='+')

        field = Model._meta.get_field('field')
        self.assertEqual(field.check(), [])

    def test_foreign_key_to_missing_model(self):
        # Model names are resolved when a model is being created, so we cannot
        # test relative fields in isolation and we need to attach them to a
        # model.
        class Model(models.Model):
            foreign_key = models.ForeignKey('Rel1', models.CASCADE)

        field = Model._meta.get_field('foreign_key')
        self.assertEqual(field.check(), [
            Error(
                ""Field defines a relation with model 'Rel1', ""
                ""which is either not installed, or is abstract."",
                obj=field,
                id='fields.E300',
            ),
        ])

    @isolate_apps('invalid_models_tests')
    def test_foreign_key_to_isolate_apps_model(self):
        """"""
        #25723 - Referenced model registration lookup should be run against the
        field's model registry.
        """"""
        class OtherModel(models.Model):
            pass

        class Model(models.Model):
            foreign_key = models.ForeignKey('OtherModel', models.CASCADE)

        field = Model._meta.get_field('foreign_key')
        self.assertEqual(field.check(from_model=Model), [])

    def test_many_to_many_to_missing_model(self):
        class Model(models.Model):
            m2m = models.ManyToManyField(""Rel2"")

        field = Model._meta.get_field('m2m')
        self.assertEqual(field.check(from_model=Model), [
            Error(
                ""Field defines a relation with model 'Rel2', ""
                ""which is either not installed, or is abstract."",
                obj=field,
                id='fields.E300',
            ),
        ])

    @isolate_apps('invalid_models_tests')
    def test_many_to_many_to_isolate_apps_model(self):
        """"""
        #25723 - Referenced model registration lookup should be run against the
        field's model registry.
        """"""
        class OtherModel(models.Model):
            pass

        class Model(models.Model):
            m2m = models.ManyToManyField('OtherModel')

        field = Model._meta.get_field('m2m')
        self.assertEqual(field.check(from_model=Model), [])

    def test_many_to_many_with_useless_options(self):
        class Model(models.Model):
            name = models.CharField(max_length=20)

        class ModelM2M(models.Model):
            m2m = models.ManyToManyField(Model, null=True, validators=[lambda x: x])

        field = ModelM2M._meta.get_field('m2m')
        self.assertEqual(ModelM2M.check(), [
            DjangoWarning(
                'null has no effect on ManyToManyField.',
                obj=field,
                id='fields.W340',
            ),
            DjangoWarning(
                'ManyToManyField does not support validators.',
                obj=field,
                id='fields.W341',
            ),
        ])

    def test_many_to_many_with_useless_related_name(self):
        class ModelM2M(models.Model):
            m2m = models.ManyToManyField('self', related_name='children')

        field = ModelM2M._meta.get_field('m2m')
        self.assertEqual(ModelM2M.check(), [
            DjangoWarning(
                'related_name has no effect on ManyToManyField with '
                'a symmetrical relationship, e.g. to ""self"".',
                obj=field,
                id='fields.W345',
            ),
        ])

    def test_ambiguous_relationship_model_from(self):
        class Person(models.Model):
            pass

        class Group(models.Model):
            field = models.ManyToManyField('Person', through='AmbiguousRelationship')

        class AmbiguousRelationship(models.Model):
            person = models.ForeignKey(Person, models.CASCADE)
            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')
            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')

        field = Group._meta.get_field('field')
        self.assertEqual(field.check(from_model=Group), [
            Error(
                ""The model is used as an intermediate model by ""
                ""'invalid_models_tests.Group.field', but it has more than one ""
                ""foreign key from 'Group', which is ambiguous. You must ""
                ""specify which foreign key Django should use via the ""
                ""through_fields keyword argument."",
                hint=(
                    'If you want to create a recursive relationship, use '
                    'ManyToManyField(""self"", through=""AmbiguousRelationship"").'
                ),
                obj=field,
                id='fields.E334',
            ),
        ])

    def test_ambiguous_relationship_model_to(self):

        class Person(models.Model):
            pass

        class Group(models.Model):
            field = models.ManyToManyField('Person', through=""AmbiguousRelationship"", related_name='tertiary')

        class AmbiguousRelationship(models.Model):
            # Too much foreign keys to Person.
            first_person = models.ForeignKey(Person, models.CASCADE, related_name=""first"")
            second_person = models.ForeignKey(Person, models.CASCADE, related_name=""second"")
            second_model = models.ForeignKey(Group, models.CASCADE)

        field = Group._meta.get_field('field')
        self.assertEqual(field.check(from_model=Group), [
            Error(
                ""The model is used as an intermediate model by ""
                ""'invalid_models_tests.Group.field', but it has more than one ""
                ""foreign key to 'Person', which is ambiguous. You must specify ""
                ""which foreign key Django should use via the through_fields ""
                ""keyword argument."",
                hint=(
                    'If you want to create a recursive relationship, use '
                    'ManyToManyField(""self"", through=""AmbiguousRelationship"").'
                ),
                obj=field,
                id='fields.E335',
            ),
        ])

    def test_relationship_model_with_foreign_key_to_wrong_model(self):
        class WrongModel(models.Model):
            pass

        class Person(models.Model):
            pass

        class Group(models.Model):
            members = models.ManyToManyField('Person', through=""InvalidRelationship"")

        class InvalidRelationship(models.Model):
            person = models.ForeignKey(Person, models.CASCADE)
            wrong_foreign_key = models.ForeignKey(WrongModel, models.CASCADE)
            # The last foreign key should point to Group model.

        field = Group._meta.get_field('members')
        self.assertEqual(field.check(from_model=Group), [
            Error(
                ""The model is used as an intermediate model by ""
                ""'invalid_models_tests.Group.members', but it does not ""
                ""have a foreign key to 'Group' or 'Person'."",
                obj=InvalidRelationship,
                id='fields.E336',
            ),
        ])

    def test_relationship_model_missing_foreign_key(self):
        class Person(models.Model):
            pass

        class Group(models.Model):
            members = models.ManyToManyField('Person', through=""InvalidRelationship"")

        class InvalidRelationship(models.Model):
            group = models.ForeignKey(Group, models.CASCADE)
            # No foreign key to Person

        field = Group._meta.get_field('members')
        self.assertEqual(field.check(from_model=Group), [
            Error(
                ""The model is used as an intermediate model by ""
                ""'invalid_models_tests.Group.members', but it does not have ""
                ""a foreign key to 'Group' or 'Person'."",
                obj=InvalidRelationship,
                id='fields.E336',
            ),
        ])

    def test_missing_relationship_model(self):
        class Person(models.Model):
            pass

        class Group(models.Model):
            members = models.ManyToManyField('Person', through=""MissingM2MModel"")

        field = Group._meta.get_field('members')
        self.assertEqual(field.check(from_model=Group), [
            Error(
                ""Field specifies a many-to-many relation through model ""
                ""'MissingM2MModel', which has not been installed."",
                obj=field,
                id='fields.E331',
            ),
        ])

    def test_missing_relationship_model_on_model_check(self):
        class Person(models.Model):
            pass

        class Group(models.Model):
            members = models.ManyToManyField('Person', through='MissingM2MModel')

        self.assertEqual(Group.check(), [
            Error(
                ""Field specifies a many-to-many relation through model ""
                ""'MissingM2MModel', which has not been installed."",
                obj=Group._meta.get_field('members'),
                id='fields.E331',
            ),
        ])

    @isolate_apps('invalid_models_tests')
    def test_many_to_many_through_isolate_apps_model(self):
        """"""
        #25723 - Through model registration lookup should be run against the
        field's model registry.
        """"""
        class GroupMember(models.Model):
            person = models.ForeignKey('Person', models.CASCADE)
            group = models.ForeignKey('Group', models.CASCADE)

        class Person(models.Model):
            pass

        class Group(models.Model):
            members = models.ManyToManyField('Person', through='GroupMember')

        field = Group._meta.get_field('members')
        self.assertEqual(field.check(from_model=Group), [])

    def test_too_many_foreign_keys_in_self_referential_model(self):
        class Person(models.Model):
            friends = models.ManyToManyField('self', through=""InvalidRelationship"", symmetrical=False)

        class InvalidRelationship(models.Model):
            first = models.ForeignKey(Person, models.CASCADE, related_name=""rel_from_set_2"")
            second = models.ForeignKey(Person, models.CASCADE, related_name=""rel_to_set_2"")
            third = models.ForeignKey(Person, models.CASCADE, related_name=""too_many_by_far"")

        field = Person._meta.get_field('friends')
        self.assertEqual(field.check(from_model=Person), [
            Error(
                ""The model is used as an intermediate model by ""
                ""'invalid_models_tests.Person.friends', but it has more than two ""
                ""foreign keys to 'Person', which is ambiguous. You must specify ""
                ""which two foreign keys Django should use via the through_fields ""
                ""keyword argument."",
                hint='Use through_fields to specify which two foreign keys Django should use.',
                obj=InvalidRelationship,
                id='fields.E333',
            ),
        ])

    def test_foreign_key_to_abstract_model(self):
        class AbstractModel(models.Model):
            class Meta:
                abstract = True

        class Model(models.Model):
            rel_string_foreign_key = models.ForeignKey('AbstractModel', models.CASCADE)
            rel_class_foreign_key = models.ForeignKey(AbstractModel, models.CASCADE)

        fields = [
            Model._meta.get_field('rel_string_foreign_key'),
            Model._meta.get_field('rel_class_foreign_key'),
        ]
        expected_error = Error(
            ""Field defines a relation with model 'AbstractModel', ""
            ""which is either not installed, or is abstract."",
            id='fields.E300',
        )
        for field in fields:
            expected_error.obj = field
            self.assertEqual(field.check(), [expected_error])

    def test_m2m_to_abstract_model(self):
        class AbstractModel(models.Model):
            class Meta:
                abstract = True

        class Model(models.Model):
            rel_string_m2m = models.ManyToManyField('AbstractModel')
            rel_class_m2m = models.ManyToManyField(AbstractModel)

        fields = [
            Model._meta.get_field('rel_string_m2m'),
            Model._meta.get_field('rel_class_m2m'),
        ]
        expected_error = Error(
            ""Field defines a relation with model 'AbstractModel', ""
            ""which is either not installed, or is abstract."",
            id='fields.E300',
        )
        for field in fields:
            expected_error.obj = field
            self.assertEqual(field.check(from_model=Model), [expected_error])

    def test_unique_m2m(self):
        class Person(models.Model):
            name = models.CharField(max_length=5)

        class Group(models.Model):
            members = models.ManyToManyField('Person', unique=True)

        field = Group._meta.get_field('members')
        self.assertEqual(field.check(from_model=Group), [
            Error(
                'ManyToManyFields cannot be unique.',
                obj=field,
                id='fields.E330',
            ),
        ])

    def test_foreign_key_to_non_unique_field(self):
        class Target(models.Model):
            bad = models.IntegerField()  # No unique=True

        class Model(models.Model):
            foreign_key = models.ForeignKey('Target', models.CASCADE, to_field='bad')

        field = Model._meta.get_field('foreign_key')
        self.assertEqual(field.check(), [
            Error(
                ""'Target.bad' must be unique because it is referenced by a foreign key."",
                hint=(
                    'Add unique=True to this field or add a UniqueConstraint '
                    '(without condition) in the model Meta.constraints.'
                ),
                obj=field,
                id='fields.E311',
            ),
        ])

    def test_foreign_key_to_non_unique_field_under_explicit_model(self):
        class Target(models.Model):
            bad = models.IntegerField()

        class Model(models.Model):
            field = models.ForeignKey(Target, models.CASCADE, to_field='bad')

        field = Model._meta.get_field('field')
        self.assertEqual(field.check(), [
            Error(
                ""'Target.bad' must be unique because it is referenced by a foreign key."",
                hint=(
                    'Add unique=True to this field or add a UniqueConstraint '
                    '(without condition) in the model Meta.constraints.'
                ),
                obj=field,
                id='fields.E311',
            ),
        ])

    def test_foreign_key_to_partially_unique_field(self):
        class Target(models.Model):
            source = models.IntegerField()

            class Meta:
                constraints = [
                    models.UniqueConstraint(
                        fields=['source'],
                        name='tfktpuf_partial_unique',
                        condition=models.Q(pk__gt=2),
                    ),
                ]

        class Model(models.Model):
            field = models.ForeignKey(Target, models.CASCADE, to_field='source')

        field = Model._meta.get_field('field')
        self.assertEqual(field.check(), [
            Error(
                ""'Target.source' must be unique because it is referenced by a ""
                ""foreign key."",
                hint=(
                    'Add unique=True to this field or add a UniqueConstraint '
                    '(without condition) in the model Meta.constraints.'
                ),
                obj=field,
                id='fields.E311',
            ),
        ])

    def test_foreign_key_to_unique_field_with_meta_constraint(self):
        class Target(models.Model):
            source = models.IntegerField()

            class Meta:
                constraints = [
                    models.UniqueConstraint(
                        fields=['source'],
                        name='tfktufwmc_unique',
                    ),
                ]

        class Model(models.Model):
            field = models.ForeignKey(Target, models.CASCADE, to_field='source')

        field = Model._meta.get_field('field')
        self.assertEqual(field.check(), [])

    def test_foreign_object_to_non_unique_fields(self):
        class Person(models.Model):
            # Note that both fields are not unique.
            country_id = models.IntegerField()
            city_id = models.IntegerField()

        class MMembership(models.Model):
            person_country_id = models.IntegerField()
            person_city_id = models.IntegerField()

            person = models.ForeignObject(
                Person,
                on_delete=models.CASCADE,
                from_fields=['person_country_id', 'person_city_id'],
                to_fields=['country_id', 'city_id'],
            )

        field = MMembership._meta.get_field('person')
        self.assertEqual(field.check(), [
            Error(
                ""No subset of the fields 'country_id', 'city_id' on model 'Person' is unique."",
                hint=(
                    'Mark a single field as unique=True or add a set of '
                    'fields to a unique constraint (via unique_together or a '
                    'UniqueConstraint (without condition) in the model '
                    'Meta.constraints).'
                ),
                obj=field,
                id='fields.E310',
            )
        ])

    def test_foreign_object_to_partially_unique_field(self):
        class Person(models.Model):
            country_id = models.IntegerField()
            city_id = models.IntegerField()

            class Meta:
                constraints = [
                    models.UniqueConstraint(
                        fields=['country_id', 'city_id'],
                        name='tfotpuf_partial_unique',
                        condition=models.Q(pk__gt=2),
                    ),
                ]

        class MMembership(models.Model):
            person_country_id = models.IntegerField()
            person_city_id = models.IntegerField()
            person = models.ForeignObject(
                Person,
                on_delete=models.CASCADE,
                from_fields=['person_country_id', 'person_city_id'],
                to_fields=['country_id', 'city_id'],
            )

        field = MMembership._meta.get_field('person')
        self.assertEqual(field.check(), [
            Error(
                ""No subset of the fields 'country_id', 'city_id' on model ""
                ""'Person' is unique."",
                hint=(
                    'Mark a single field as unique=True or add a set of '
                    'fields to a unique constraint (via unique_together or a '
                    'UniqueConstraint (without condition) in the model '
                    'Meta.constraints).'
                ),
                obj=field,
                id='fields.E310',
            ),
        ])

    def test_foreign_object_to_unique_field_with_meta_constraint(self):
        class Person(models.Model):
            country_id = models.IntegerField()
            city_id = models.IntegerField()

            class Meta:
                constraints = [
                    models.UniqueConstraint(
                        fields=['country_id', 'city_id'],
                        name='tfotpuf_unique',
                    ),
                ]

        class MMembership(models.Model):
            person_country_id = models.IntegerField()
            person_city_id = models.IntegerField()
            person = models.ForeignObject(
                Person,
                on_delete=models.CASCADE,
                from_fields=['person_country_id', 'person_city_id'],
                to_fields=['country_id', 'city_id'],
            )

        field = MMembership._meta.get_field('person')
        self.assertEqual(field.check(), [])

    def test_on_delete_set_null_on_non_nullable_field(self):
        class Person(models.Model):
            pass

        class Model(models.Model):
            foreign_key = models.ForeignKey('Person', models.SET_NULL)

        field = Model._meta.get_field('foreign_key')
        self.assertEqual(field.check(), [
            Error(
                'Field specifies on_delete=SET_NULL, but cannot be null.',
                hint='Set null=True argument on the field, or change the on_delete rule.',
                obj=field,
                id='fields.E320',
            ),
        ])

    def test_on_delete_set_default_without_default_value(self):
        class Person(models.Model):
            pass

        class Model(models.Model):
            foreign_key = models.ForeignKey('Person', models.SET_DEFAULT)

        field = Model._meta.get_field('foreign_key')
        self.assertEqual(field.check(), [
            Error(
                'Field specifies on_delete=SET_DEFAULT, but has no default value.',
                hint='Set a default value, or change the on_delete rule.',
                obj=field,
                id='fields.E321',
            ),
        ])

    def test_nullable_primary_key(self):
        class Model(models.Model):
            field = models.IntegerField(primary_key=True, null=True)

        field = Model._meta.get_field('field')
        with mock.patch.object(connection.features, 'interprets_empty_strings_as_nulls', False):
            results = field.check()
        self.assertEqual(results, [
            Error(
                'Primary keys must not have null=True.',
                hint='Set null=False on the field, or remove primary_key=True argument.',
                obj=field,
                id='fields.E007',
            ),
        ])

    def test_not_swapped_model(self):
        class SwappableModel(models.Model):
            # A model that can be, but isn't swapped out. References to this
            # model should *not* raise any validation error.
            class Meta:
                swappable = 'TEST_SWAPPABLE_MODEL'

        class Model(models.Model):
            explicit_fk = models.ForeignKey(
                SwappableModel,
                models.CASCADE,
                related_name='explicit_fk',
            )
            implicit_fk = models.ForeignKey(
                'invalid_models_tests.SwappableModel',
                models.CASCADE,
                related_name='implicit_fk',
            )
            explicit_m2m = models.ManyToManyField(SwappableModel, related_name='explicit_m2m')
            implicit_m2m = models.ManyToManyField(
                'invalid_models_tests.SwappableModel',
                related_name='implicit_m2m',
            )

        explicit_fk = Model._meta.get_field('explicit_fk')
        self.assertEqual(explicit_fk.check(), [])

        implicit_fk = Model._meta.get_field('implicit_fk')
        self.assertEqual(implicit_fk.check(), [])

        explicit_m2m = Model._meta.get_field('explicit_m2m')
        self.assertEqual(explicit_m2m.check(from_model=Model), [])

        implicit_m2m = Model._meta.get_field('implicit_m2m')
        self.assertEqual(implicit_m2m.check(from_model=Model), [])

    @override_settings(TEST_SWAPPED_MODEL='invalid_models_tests.Replacement')
    def test_referencing_to_swapped_model(self):
        class Replacement(models.Model):
            pass

        class SwappedModel(models.Model):
            class Meta:
                swappable = 'TEST_SWAPPED_MODEL'

        class Model(models.Model):
            explicit_fk = models.ForeignKey(
                SwappedModel,
                models.CASCADE,
                related_name='explicit_fk',
            )
            implicit_fk = models.ForeignKey(
                'invalid_models_tests.SwappedModel',
                models.CASCADE,
                related_name='implicit_fk',
            )
            explicit_m2m = models.ManyToManyField(SwappedModel, related_name='explicit_m2m')
            implicit_m2m = models.ManyToManyField(
                'invalid_models_tests.SwappedModel',
                related_name='implicit_m2m',
            )

        fields = [
            Model._meta.get_field('explicit_fk'),
            Model._meta.get_field('implicit_fk'),
            Model._meta.get_field('explicit_m2m'),
            Model._meta.get_field('implicit_m2m'),
        ]

        expected_error = Error(
            (""Field defines a relation with the model ""
             ""'invalid_models_tests.SwappedModel', which has been swapped out.""),
            hint=""Update the relation to point at 'settings.TEST_SWAPPED_MODEL'."",
            id='fields.E301',
        )

        for field in fields:
            expected_error.obj = field
            self.assertEqual(field.check(from_model=Model), [expected_error])

    def test_related_field_has_invalid_related_name(self):
        digit = 0
        illegal_non_alphanumeric = '!'
        whitespace = '\t'

        invalid_related_names = [
            '%s_begins_with_digit' % digit,
            '%s_begins_with_illegal_non_alphanumeric' % illegal_non_alphanumeric,
            '%s_begins_with_whitespace' % whitespace,
            'contains_%s_illegal_non_alphanumeric' % illegal_non_alphanumeric,
            'contains_%s_whitespace' % whitespace,
            'ends_with_with_illegal_non_alphanumeric_%s' % illegal_non_alphanumeric,
            'ends_with_whitespace_%s' % whitespace,
            'with',  # a Python keyword
            'related_name\n',
            '',
            '，',  # non-ASCII
        ]

        class Parent(models.Model):
            pass

        for invalid_related_name in invalid_related_names:
            Child = type('Child%s' % invalid_related_name, (models.Model,), {
                'parent': models.ForeignKey('Parent', models.CASCADE, related_name=invalid_related_name),
                '__module__': Parent.__module__,
            })

            field = Child._meta.get_field('parent')
            self.assertEqual(Child.check(), [
                Error(
                    ""The name '%s' is invalid related_name for field Child%s.parent""
                    % (invalid_related_name, invalid_related_name),
                    hint=""Related name must be a valid Python identifier or end with a '+'"",
                    obj=field,
                    id='fields.E306',
                ),
            ])

    def test_related_field_has_valid_related_name(self):
        lowercase = 'a'
        uppercase = 'A'
        digit = 0

        related_names = [
            '%s_starts_with_lowercase' % lowercase,
            '%s_tarts_with_uppercase' % uppercase,
            '_starts_with_underscore',
            'contains_%s_digit' % digit,
            'ends_with_plus+',
            '_+',
            '+',
            '試',
            '試驗+',
        ]

        class Parent(models.Model):
            pass

        for related_name in related_names:
            Child = type('Child%s' % related_name, (models.Model,), {
                'parent': models.ForeignKey('Parent', models.CASCADE, related_name=related_name),
                '__module__': Parent.__module__,
            })
            self.assertEqual(Child.check(), [])

    def test_to_fields_exist(self):
        class Parent(models.Model):
            pass

        class Child(models.Model):
            a = models.PositiveIntegerField()
            b = models.PositiveIntegerField()
            parent = models.ForeignObject(
                Parent,
                on_delete=models.SET_NULL,
                from_fields=('a', 'b'),
                to_fields=('a', 'b'),
            )

        field = Child._meta.get_field('parent')
        self.assertEqual(field.check(), [
            Error(
                ""The to_field 'a' doesn't exist on the related model 'invalid_models_tests.Parent'."",
                obj=field,
                id='fields.E312',
            ),
            Error(
                ""The to_field 'b' doesn't exist on the related model 'invalid_models_tests.Parent'."",
                obj=field,
                id='fields.E312',
            ),
        ])

    def test_to_fields_not_checked_if_related_model_doesnt_exist(self):
        class Child(models.Model):
            a = models.PositiveIntegerField()
            b = models.PositiveIntegerField()
            parent = models.ForeignObject(
                'invalid_models_tests.Parent',
                on_delete=models.SET_NULL,
                from_fields=('a', 'b'),
                to_fields=('a', 'b'),
            )

        field = Child._meta.get_field('parent')
        self.assertEqual(field.check(), [
            Error(
                ""Field defines a relation with model 'invalid_models_tests.Parent', ""
                ""which is either not installed, or is abstract."",
                id='fields.E300',
                obj=field,
            ),
        ])

    def test_invalid_related_query_name(self):
        class Target(models.Model):
            pass

        class Model(models.Model):
            first = models.ForeignKey(Target, models.CASCADE, related_name='contains__double')
            second = models.ForeignKey(Target, models.CASCADE, related_query_name='ends_underscore_')

        self.assertEqual(Model.check(), [
            Error(
                ""Reverse query name 'contains__double' must not contain '__'."",
                hint=(""Add or change a related_name or related_query_name ""
                      ""argument for this field.""),
                obj=Model._meta.get_field('first'),
                id='fields.E309',
            ),
            Error(
                ""Reverse query name 'ends_underscore_' must not end with an ""
                ""underscore."",
                hint=(""Add or change a related_name or related_query_name ""
                      ""argument for this field.""),
                obj=Model._meta.get_field('second'),
                id='fields.E308',
            ),
        ])",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 334 2004 40 2005 46 2006 41 58 621 2007 61 2005 46 2008 40 41 334 2006 40 2005 46 2006 41 58 2009 61 2005 46 2010 40 2004 44 2005 46 2011 44 2012 61 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 93 41 348 2017 40 2003 41 58 621 621 621 334 2006 40 2005 46 2006 41 58 2018 61 2005 46 2010 40 648 44 2005 46 2011 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 64 2022 40 648 41 348 2023 40 2003 41 58 648 334 2024 40 2005 46 2006 41 58 434 334 2006 40 2005 46 2006 41 58 2018 61 2005 46 2010 40 648 44 2005 46 2011 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2006 41 44 91 93 41 348 2026 40 2003 41 58 334 2006 40 2005 46 2006 41 58 2027 61 2005 46 2028 40 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2006 41 44 91 2019 40 648 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 64 2022 40 648 41 348 2029 40 2003 41 58 648 334 2024 40 2005 46 2006 41 58 434 334 2006 40 2005 46 2006 41 58 2027 61 2005 46 2028 40 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2006 41 44 91 93 41 348 2030 40 2003 41 58 334 2006 40 2005 46 2006 41 58 2031 61 2005 46 2032 40 2033 61 1503 41 334 2034 40 2005 46 2006 41 58 2027 61 2005 46 2028 40 2006 44 424 61 304 44 2035 61 91 409 2036 58 2036 93 41 2009 61 2034 46 2013 46 2014 40 648 41 2003 46 2015 40 2034 46 2016 40 41 44 91 2037 40 648 44 2020 61 2009 44 2021 61 648 44 41 44 2037 40 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2038 40 2003 41 58 334 2034 40 2005 46 2006 41 58 2027 61 2005 46 2028 40 648 44 2012 61 648 41 2009 61 2034 46 2013 46 2014 40 648 41 2003 46 2015 40 2034 46 2016 40 41 44 91 2037 40 648 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2039 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2009 61 2005 46 2028 40 648 44 2042 61 648 41 334 2043 40 2005 46 2006 41 58 2044 61 2005 46 2010 40 2040 44 2005 46 2011 41 2045 61 2005 46 2010 40 2041 44 2005 46 2011 44 2012 61 648 41 2046 61 2005 46 2010 40 2041 44 2005 46 2011 44 2012 61 648 41 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 2019 40 648 648 648 648 648 44 2047 61 40 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2048 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2009 61 2005 46 2028 40 648 44 2042 61 648 44 2012 61 648 41 334 2043 40 2005 46 2006 41 58 621 2049 61 2005 46 2010 40 2040 44 2005 46 2011 44 2012 61 648 41 2050 61 2005 46 2010 40 2040 44 2005 46 2011 44 2012 61 648 41 2051 61 2005 46 2010 40 2041 44 2005 46 2011 41 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 2019 40 648 648 648 648 648 44 2047 61 40 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2052 40 2003 41 58 334 2053 40 2005 46 2006 41 58 434 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2054 61 2005 46 2028 40 648 44 2042 61 648 41 334 2055 40 2005 46 2006 41 58 2044 61 2005 46 2010 40 2040 44 2005 46 2011 41 2056 61 2005 46 2010 40 2053 44 2005 46 2011 41 621 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 2019 40 648 648 648 44 2020 61 2055 44 2021 61 648 44 41 44 93 41 348 2057 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2054 61 2005 46 2028 40 648 44 2042 61 648 41 334 2055 40 2005 46 2006 41 58 2058 61 2005 46 2010 40 2041 44 2005 46 2011 41 621 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 2019 40 648 648 648 44 2020 61 2055 44 2021 61 648 44 41 44 93 41 348 2059 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2054 61 2005 46 2028 40 648 44 2042 61 648 41 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 2019 40 648 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2060 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2054 61 2005 46 2028 40 648 44 2042 61 648 41 2003 46 2015 40 2041 46 2016 40 41 44 91 2019 40 648 648 44 2020 61 2041 46 2013 46 2014 40 648 41 44 2021 61 648 44 41 44 93 41 64 2022 40 648 41 348 2061 40 2003 41 58 648 334 2062 40 2005 46 2006 41 58 2044 61 2005 46 2010 40 648 44 2005 46 2011 41 2058 61 2005 46 2010 40 648 44 2005 46 2011 41 334 2040 40 2005 46 2006 41 58 434 334 2041 40 2005 46 2006 41 58 2054 61 2005 46 2028 40 648 44 2042 61 648 41 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 93 41 348 2063 40 2003 41 58 334 2040 40 2005 46 2006 41 58 2064 61 2005 46 2028 40 648 44 2042 61 648 44 2065 61 302 41 334 2055 40 2005 46 2006 41 58 2066 61 2005 46 2010 40 2040 44 2005 46 2011 44 2012 61 648 41 2067 61 2005 46 2010 40 2040 44 2005 46 2011 44 2012 61 648 41 2068 61 2005 46 2010 40 2040 44 2005 46 2011 44 2012 61 648 41 2009 61 2040 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2040 41 44 91 2019 40 648 648 648 648 648 44 2047 61 648 44 2020 61 2055 44 2021 61 648 44 41 44 93 41 348 2069 40 2003 41 58 334 2070 40 2005 46 2006 41 58 334 2071 58 305 61 304 334 2006 40 2005 46 2006 41 58 2072 61 2005 46 2010 40 648 44 2005 46 2011 41 2073 61 2005 46 2010 40 2070 44 2005 46 2011 41 2074 61 91 2006 46 2013 46 2014 40 648 41 44 2006 46 2013 46 2014 40 648 41 44 93 2075 61 2019 40 648 648 44 2021 61 648 44 41 385 2009 398 2074 58 2075 46 2020 61 2009 2003 46 2015 40 2009 46 2016 40 41 44 91 2075 93 41 348 2076 40 2003 41 58 334 2070 40 2005 46 2006 41 58 334 2071 58 305 61 304 334 2006 40 2005 46 2006 41 58 2077 61 2005 46 2028 40 648 41 2078 61 2005 46 2028 40 2070 41 2074 61 91 2006 46 2013 46 2014 40 648 41 44 2006 46 2013 46 2014 40 648 41 44 93 2075 61 2019 40 648 648 44 2021 61 648 44 41 385 2009 398 2074 58 2075 46 2020 61 2009 2003 46 2015 40 2009 46 2016 40 2025 61 2006 41 44 91 2075 93 41 348 2079 40 2003 41 58 334 2040 40 2005 46 2006 41 58 2031 61 2005 46 2032 40 2033 61 1502 41 334 2041 40 2005 46 2006 41 58 2054 61 2005 46 2028 40 648 44 2080 61 304 41 2009 61 2041 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 2025 61 2041 41 44 91 2019 40 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2081 40 2003 41 58 334 2004 40 2005 46 2006 41 58 2082 61 2005 46 2008 40 41 621 334 2006 40 2005 46 2006 41 58 2018 61 2005 46 2010 40 648 44 2005 46 2011 44 2083 61 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 44 2047 61 40 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2084 40 2003 41 58 334 2004 40 2005 46 2006 41 58 2082 61 2005 46 2008 40 41 334 2006 40 2005 46 2006 41 58 2009 61 2005 46 2010 40 2004 44 2005 46 2011 44 2083 61 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 44 2047 61 40 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2085 40 2003 41 58 334 2004 40 2005 46 2006 41 58 2086 61 2005 46 2008 40 41 334 2071 58 2087 61 91 2005 46 2088 40 2074 61 91 648 93 44 2031 61 648 44 2089 61 2005 46 2090 40 2091 61 1502 41 44 41 44 93 334 2006 40 2005 46 2006 41 58 2009 61 2005 46 2010 40 2004 44 2005 46 2011 44 2083 61 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 648 44 2047 61 40 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2092 40 2003 41 58 334 2004 40 2005 46 2006 41 58 2086 61 2005 46 2008 40 41 334 2071 58 2087 61 91 2005 46 2088 40 2074 61 91 648 93 44 2031 61 648 44 41 44 93 334 2006 40 2005 46 2006 41 58 2009 61 2005 46 2010 40 2004 44 2005 46 2011 44 2083 61 648 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 93 41 348 2093 40 2003 41 58 334 2040 40 2005 46 2006 41 58 621 2094 61 2005 46 2008 40 41 2095 61 2005 46 2008 40 41 334 2096 40 2005 46 2006 41 58 2097 61 2005 46 2008 40 41 2098 61 2005 46 2008 40 41 2044 61 2005 46 2099 40 2040 44 2100 61 2005 46 2011 44 2101 61 91 648 44 648 93 44 2102 61 91 648 44 648 93 44 41 2009 61 2096 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 44 2047 61 40 648 648 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 93 41 348 2103 40 2003 41 58 334 2040 40 2005 46 2006 41 58 2094 61 2005 46 2008 40 41 2095 61 2005 46 2008 40 41 334 2071 58 2087 61 91 2005 46 2088 40 2074 61 91 648 44 648 93 44 2031 61 648 44 2089 61 2005 46 2090 40 2091 61 1502 41 44 41 44 93 334 2096 40 2005 46 2006 41 58 2097 61 2005 46 2008 40 41 2098 61 2005 46 2008 40 41 2044 61 2005 46 2099 40 2040 44 2100 61 2005 46 2011 44 2101 61 91 648 44 648 93 44 2102 61 91 648 44 648 93 44 41 2009 61 2096 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 648 44 2047 61 40 648 648 648 648 41 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2104 40 2003 41 58 334 2040 40 2005 46 2006 41 58 2094 61 2005 46 2008 40 41 2095 61 2005 46 2008 40 41 334 2071 58 2087 61 91 2005 46 2088 40 2074 61 91 648 44 648 93 44 2031 61 648 44 41 44 93 334 2096 40 2005 46 2006 41 58 2097 61 2005 46 2008 40 41 2098 61 2005 46 2008 40 41 2044 61 2005 46 2099 40 2040 44 2100 61 2005 46 2011 44 2101 61 91 648 44 648 93 44 2102 61 91 648 44 648 93 44 41 2009 61 2096 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 93 41 348 2105 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2006 40 2005 46 2006 41 58 2018 61 2005 46 2010 40 648 44 2005 46 2106 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 44 2047 61 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2107 40 2003 41 58 334 2040 40 2005 46 2006 41 58 434 334 2006 40 2005 46 2006 41 58 2018 61 2005 46 2010 40 648 44 2005 46 2108 41 2009 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 44 2047 61 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2109 40 2003 41 58 334 2006 40 2005 46 2006 41 58 2009 61 2005 46 2008 40 2110 61 304 44 424 61 304 41 2009 61 2006 46 2013 46 2014 40 648 41 497 2111 46 2112 46 426 40 2113 46 2114 44 648 44 302 41 58 2115 61 2009 46 2016 40 41 2003 46 2015 40 2115 44 91 2019 40 648 44 2047 61 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2116 40 2003 41 58 334 2117 40 2005 46 2006 41 58 621 621 334 2071 58 2118 61 648 334 2006 40 2005 46 2006 41 58 2119 61 2005 46 2010 40 2117 44 2005 46 2011 44 2012 61 648 44 41 2120 61 2005 46 2010 40 648 44 2005 46 2011 44 2012 61 648 44 41 2121 61 2005 46 2028 40 2117 44 2012 61 648 41 2122 61 2005 46 2028 40 648 44 2012 61 648 44 41 2119 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2119 46 2016 40 41 44 91 93 41 2120 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2120 46 2016 40 41 44 91 93 41 2121 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2121 46 2016 40 2025 61 2006 41 44 91 93 41 2122 61 2006 46 2013 46 2014 40 648 41 2003 46 2015 40 2122 46 2016 40 2025 61 2006 41 44 91 93 41 64 2123 40 2124 61 648 41 348 2125 40 2003 41 58 334 2126 40 2005 46 2006 41 58 434 334 2127 40 2005 46 2006 41 58 334 2071 58 2118 61 648 334 2006 40 2005 46 2006 41 58 2119 61 2005 46 2010 40 2127 44 2005 46 2011 44 2012 61 648 44 41 2120 61 2005 46 2010 40 648 44 2005 46 2011 44 2012 61 648 44 41 2121 61 2005 46 2028 40 2127 44 2012 61 648 41 2122 61 2005 46 2028 40 648 44 2012 61 648 44 41 2074 61 91 2006 46 2013 46 2014 40 648 41 44 2006 46 2013 46 2014 40 648 41 44 2006 46 2013 46 2014 40 648 41 44 2006 46 2013 46 2014 40 648 41 44 93 2075 61 2019 40 40 648 648 41 44 2047 61 648 44 2021 61 648 44 41 385 2009 398 2074 58 2075 46 2020 61 2009 2003 46 2015 40 2009 46 2016 40 2025 61 2006 41 44 91 2075 93 41 348 2128 40 2003 41 58 2129 61 1500 2130 61 648 2131 61 648 2132 61 91 648 37 2129 44 648 37 2130 44 648 37 2131 44 648 37 2130 44 648 37 2131 44 648 37 2130 44 648 37 2131 44 648 44 621 648 44 648 44 648 44 621 93 334 2133 40 2005 46 2006 41 58 434 385 2134 398 2132 58 2135 61 2136 40 648 37 2134 44 40 2005 46 2006 44 41 44 123 648 58 2005 46 2010 40 648 44 2005 46 2011 44 2012 61 2134 41 44 648 58 2133 46 2137 44 125 41 2009 61 2135 46 2013 46 2014 40 648 41 2003 46 2015 40 2135 46 2016 40 41 44 91 2019 40 648 37 40 2134 44 2134 41 44 2047 61 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2138 40 2003 41 58 2139 61 648 2140 61 648 2129 61 1500 2141 61 91 648 37 2139 44 648 37 2140 44 648 44 648 37 2129 44 648 44 648 44 648 44 648 44 648 44 93 334 2133 40 2005 46 2006 41 58 434 385 2012 398 2141 58 2135 61 2136 40 648 37 2012 44 40 2005 46 2006 44 41 44 123 648 58 2005 46 2010 40 648 44 2005 46 2011 44 2012 61 2012 41 44 648 58 2133 46 2137 44 125 41 2003 46 2015 40 2135 46 2016 40 41 44 91 93 41 348 2142 40 2003 41 58 334 2133 40 2005 46 2006 41 58 434 334 2135 40 2005 46 2006 41 58 2143 61 2005 46 2144 40 41 2145 61 2005 46 2144 40 41 2146 61 2005 46 2099 40 2133 44 2100 61 2005 46 2106 44 2101 61 40 648 44 648 41 44 2102 61 40 648 44 648 41 44 41 2009 61 2135 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 44 2020 61 2009 44 2021 61 648 44 41 44 2019 40 648 44 2020 61 2009 44 2021 61 648 44 41 44 93 41 348 2147 40 2003 41 58 334 2135 40 2005 46 2006 41 58 2143 61 2005 46 2144 40 41 2145 61 2005 46 2144 40 41 2146 61 2005 46 2099 40 648 44 2100 61 2005 46 2106 44 2101 61 40 648 44 648 41 44 2102 61 40 648 44 648 41 44 41 2009 61 2135 46 2013 46 2014 40 648 41 2003 46 2015 40 2009 46 2016 40 41 44 91 2019 40 648 648 44 2021 61 648 44 2020 61 2009 44 41 44 93 41 348 2148 40 2003 41 58 334 2004 40 2005 46 2006 41 58 434 334 2006 40 2005 46 2006 41 58 2066 61 2005 46 2010 40 2004 44 2005 46 2011 44 2012 61 648 41 2067 61 2005 46 2010 40 2004 44 2005 46 2011 44 2149 61 648 41 2003 46 2015 40 2006 46 2016 40 41 44 91 2019 40 648 44 2047 61 40 648 648 41 44 2020 61 2006 46 2013 46 2014 40 648 41 44 2021 61 648 44 41 44 2019 40 648 648 44 2047 61 40 648 648 41 44 2020 61 2006 46 2013 46 2014 40 648 41 44 2021 61 648 44 41 44 93 41 
134726,Python,"class FormsTestCase(SimpleTestCase):
    # A Form is a collection of Fields. It knows how to validate a set of data and it
    # knows how to render itself in a couple of default ways (e.g., an HTML table).
    # You can pass it data in __init__(), as a dictionary.

    def test_form(self):
        # Pass a dictionary to a Form's __init__().
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'})

        self.assertTrue(p.is_bound)
        self.assertEqual(p.errors, {})
        self.assertIsInstance(p.errors, dict)
        self.assertTrue(p.is_valid())
        self.assertHTMLEqual(p.errors.as_ul(), '')
        self.assertEqual(p.errors.as_text(), '')
        self.assertEqual(p.cleaned_data[""first_name""], 'John')
        self.assertEqual(p.cleaned_data[""last_name""], 'Lennon')
        self.assertEqual(p.cleaned_data[""birthday""], datetime.date(1940, 10, 9))
        self.assertHTMLEqual(
            str(p['first_name']),
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['last_name']),
            '<input type=""text"" name=""last_name"" value=""Lennon"" id=""id_last_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['birthday']),
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required>'
        )

        msg = ""Key 'nonexistentfield' not found in 'Person'. Choices are: birthday, first_name, last_name.""
        with self.assertRaisesMessage(KeyError, msg):
            p['nonexistentfield']

        form_output = []

        for boundfield in p:
            form_output.append(str(boundfield))

        self.assertHTMLEqual(
            '\n'.join(form_output),
            """"""<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required>
<input type=""text"" name=""last_name"" value=""Lennon"" id=""id_last_name"" required>
<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required>""""""
        )

        form_output = []

        for boundfield in p:
            form_output.append([boundfield.label, boundfield.data])

        self.assertEqual(form_output, [
            ['First name', 'John'],
            ['Last name', 'Lennon'],
            ['Birthday', '1940-10-9']
        ])
        self.assertHTMLEqual(
            str(p),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" value=""Lennon"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></td></tr>""""""
        )

    def test_empty_dict(self):
        # Empty dictionaries are valid, too.
        p = Person({})
        self.assertTrue(p.is_bound)
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['last_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])
        self.assertFalse(p.is_valid())
        self.assertEqual(p.cleaned_data, {})
        self.assertHTMLEqual(
            str(p),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
<label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
<label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
<label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist""><li>This field is required.</li></ul>
<p><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></p>
<ul class=""errorlist""><li>This field is required.</li></ul>
<p><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></p>
<ul class=""errorlist""><li>This field is required.</li></ul>
<p><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></p>""""""
        )

    def test_empty_querydict_args(self):
        data = QueryDict()
        files = QueryDict()
        p = Person(data, files)
        self.assertIs(p.data, data)
        self.assertIs(p.files, files)

    def test_unbound_form(self):
        # If you don't pass any values to the Form's __init__(), or if you pass None,
        # the Form will be considered unbound and won't do any validation. Form.errors
        # will be an empty dictionary *but* Form.is_valid() will return False.
        p = Person()
        self.assertFalse(p.is_bound)
        self.assertEqual(p.errors, {})
        self.assertFalse(p.is_valid())
        with self.assertRaises(AttributeError):
            p.cleaned_data

        self.assertHTMLEqual(
            str(p),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></li>
<li><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></li>
<li><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></p>
<p><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></p>
<p><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></p>""""""
        )

    def test_unicode_values(self):
        # Unicode values are handled properly.
        p = Person({
            'first_name': 'John',
            'last_name': '\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111',
            'birthday': '1940-10-9'
        })
        self.assertHTMLEqual(
            p.as_table(),
            '<tr><th><label for=""id_first_name"">First name:</label></th><td>'
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></td></tr>\n'
            '<tr><th><label for=""id_last_name"">Last name:</label>'
            '</th><td><input type=""text"" name=""last_name"" '
            'value=""\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111""'
            'id=""id_last_name"" required></td></tr>\n'
            '<tr><th><label for=""id_birthday"">Birthday:</label></th><td>'
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></td></tr>'
        )
        self.assertHTMLEqual(
            p.as_ul(),
            '<li><label for=""id_first_name"">First name:</label> '
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></li>\n'
            '<li><label for=""id_last_name"">Last name:</label> '
            '<input type=""text"" name=""last_name"" '
            'value=""\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111"" id=""id_last_name"" required></li>\n'
            '<li><label for=""id_birthday"">Birthday:</label> '
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></li>'
        )
        self.assertHTMLEqual(
            p.as_p(),
            '<p><label for=""id_first_name"">First name:</label> '
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></p>\n'
            '<p><label for=""id_last_name"">Last name:</label> '
            '<input type=""text"" name=""last_name"" '
            'value=""\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111"" id=""id_last_name"" required></p>\n'
            '<p><label for=""id_birthday"">Birthday:</label> '
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></p>'
        )

        p = Person({'last_name': 'Lennon'})
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])
        self.assertFalse(p.is_valid())
        self.assertEqual(
            p.errors,
            {'birthday': ['This field is required.'], 'first_name': ['This field is required.']}
        )
        self.assertEqual(p.cleaned_data, {'last_name': 'Lennon'})
        self.assertEqual(p['first_name'].errors, ['This field is required.'])
        self.assertHTMLEqual(
            p['first_name'].errors.as_ul(),
            '<ul class=""errorlist""><li>This field is required.</li></ul>'
        )
        self.assertEqual(p['first_name'].errors.as_text(), '* This field is required.')

        p = Person()
        self.assertHTMLEqual(
            str(p['first_name']),
            '<input type=""text"" name=""first_name"" id=""id_first_name"" required>',
        )
        self.assertHTMLEqual(str(p['last_name']), '<input type=""text"" name=""last_name"" id=""id_last_name"" required>')
        self.assertHTMLEqual(str(p['birthday']), '<input type=""text"" name=""birthday"" id=""id_birthday"" required>')

    def test_cleaned_data_only_fields(self):
        # cleaned_data will always *only* contain a key for fields defined in the
        # Form, even if you pass extra data when you define the Form. In this
        # example, we pass a bunch of extra fields to the form constructor,
        # but cleaned_data contains only the form's fields.
        data = {
            'first_name': 'John',
            'last_name': 'Lennon',
            'birthday': '1940-10-9',
            'extra1': 'hello',
            'extra2': 'hello',
        }
        p = Person(data)
        self.assertTrue(p.is_valid())
        self.assertEqual(p.cleaned_data['first_name'], 'John')
        self.assertEqual(p.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p.cleaned_data['birthday'], datetime.date(1940, 10, 9))

    def test_optional_data(self):
        # cleaned_data will include a key and value for *all* fields defined in the Form,
        # even if the Form's data didn't include a value for fields that are not
        # required. In this example, the data dictionary doesn't include a value for the
        # ""nick_name"" field, but cleaned_data includes it. For CharFields, it's set to the
        # empty string.
        class OptionalPersonForm(Form):
            first_name = CharField()
            last_name = CharField()
            nick_name = CharField(required=False)

        data = {'first_name': 'John', 'last_name': 'Lennon'}
        f = OptionalPersonForm(data)
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['nick_name'], '')
        self.assertEqual(f.cleaned_data['first_name'], 'John')
        self.assertEqual(f.cleaned_data['last_name'], 'Lennon')

        # For DateFields, it's set to None.
        class OptionalPersonForm(Form):
            first_name = CharField()
            last_name = CharField()
            birth_date = DateField(required=False)

        data = {'first_name': 'John', 'last_name': 'Lennon'}
        f = OptionalPersonForm(data)
        self.assertTrue(f.is_valid())
        self.assertIsNone(f.cleaned_data['birth_date'])
        self.assertEqual(f.cleaned_data['first_name'], 'John')
        self.assertEqual(f.cleaned_data['last_name'], 'Lennon')

    def test_auto_id(self):
        # ""auto_id"" tells the Form to add an ""id"" attribute to each form element.
        # If it's a string that contains '%s', Django will use that as a format string
        # into which the field's name will be inserted. It will also put a <label> around
        # the human-readable labels for a field.
        p = Person(auto_id='%s_id')
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""first_name_id"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""first_name_id"" required></td></tr>
<tr><th><label for=""last_name_id"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""last_name_id"" required></td></tr>
<tr><th><label for=""birthday_id"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""birthday_id"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name_id"">First name:</label>
<input type=""text"" name=""first_name"" id=""first_name_id"" required></li>
<li><label for=""last_name_id"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name_id"" required></li>
<li><label for=""birthday_id"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday_id"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p><label for=""first_name_id"">First name:</label>
<input type=""text"" name=""first_name"" id=""first_name_id"" required></p>
<p><label for=""last_name_id"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name_id"" required></p>
<p><label for=""birthday_id"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday_id"" required></p>""""""
        )

    def test_auto_id_true(self):
        # If auto_id is any True value whose str() does not contain '%s', the ""id""
        # attribute will be the name of the field.
        p = Person(auto_id=True)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""first_name"" required></li>
<li><label for=""last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name"" required></li>
<li><label for=""birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday"" required></li>""""""
        )

    def test_auto_id_false(self):
        # If auto_id is any False value, an ""id"" attribute won't be output unless it
        # was manually entered.
        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>""""""
        )

    def test_id_on_field(self):
        # In this example, auto_id is False, but the ""id"" attribute for the ""first_name""
        # field is given. Also note that field gets a <label>, while the others don't.
        p = PersonNew(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name_id"">First name:</label>
<input type=""text"" id=""first_name_id"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>""""""
        )

    def test_auto_id_on_form_and_field(self):
        # If the ""id"" attribute is specified in the Form and auto_id is True, the ""id""
        # attribute in the Form gets precedence.
        p = PersonNew(auto_id=True)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name_id"">First name:</label>
<input type=""text"" id=""first_name_id"" name=""first_name"" required></li>
<li><label for=""last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name"" required></li>
<li><label for=""birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday"" required></li>""""""
        )

    def test_various_boolean_values(self):
        class SignupForm(Form):
            email = EmailField()
            get_spam = BooleanField()

        f = SignupForm(auto_id=False)
        self.assertHTMLEqual(str(f['email']), '<input type=""email"" name=""email"" required>')
        self.assertHTMLEqual(str(f['get_spam']), '<input type=""checkbox"" name=""get_spam"" required>')

        f = SignupForm({'email': 'test@example.com', 'get_spam': True}, auto_id=False)
        self.assertHTMLEqual(str(f['email']), '<input type=""email"" name=""email"" value=""test@example.com"" required>')
        self.assertHTMLEqual(
            str(f['get_spam']),
            '<input checked type=""checkbox"" name=""get_spam"" required>',
        )

        # 'True' or 'true' should be rendered without a value attribute
        f = SignupForm({'email': 'test@example.com', 'get_spam': 'True'}, auto_id=False)
        self.assertHTMLEqual(
            str(f['get_spam']),
            '<input checked type=""checkbox"" name=""get_spam"" required>',
        )

        f = SignupForm({'email': 'test@example.com', 'get_spam': 'true'}, auto_id=False)
        self.assertHTMLEqual(
            str(f['get_spam']), '<input checked type=""checkbox"" name=""get_spam"" required>')

        # A value of 'False' or 'false' should be rendered unchecked
        f = SignupForm({'email': 'test@example.com', 'get_spam': 'False'}, auto_id=False)
        self.assertHTMLEqual(str(f['get_spam']), '<input type=""checkbox"" name=""get_spam"" required>')

        f = SignupForm({'email': 'test@example.com', 'get_spam': 'false'}, auto_id=False)
        self.assertHTMLEqual(str(f['get_spam']), '<input type=""checkbox"" name=""get_spam"" required>')

        # A value of '0' should be interpreted as a True value (#16820)
        f = SignupForm({'email': 'test@example.com', 'get_spam': '0'})
        self.assertTrue(f.is_valid())
        self.assertTrue(f.cleaned_data.get('get_spam'))

    def test_widget_output(self):
        # Any Field can have a Widget class passed to its constructor:
        class ContactForm(Form):
            subject = CharField()
            message = CharField(widget=Textarea)

        f = ContactForm(auto_id=False)
        self.assertHTMLEqual(str(f['subject']), '<input type=""text"" name=""subject"" required>')
        self.assertHTMLEqual(str(f['message']), '<textarea name=""message"" rows=""10"" cols=""40"" required></textarea>')

        # as_textarea(), as_text() and as_hidden() are shortcuts for changing the output
        # widget type:
        self.assertHTMLEqual(
            f['subject'].as_textarea(),
            '<textarea name=""subject"" rows=""10"" cols=""40"" required></textarea>',
        )
        self.assertHTMLEqual(f['message'].as_text(), '<input type=""text"" name=""message"" required>')
        self.assertHTMLEqual(f['message'].as_hidden(), '<input type=""hidden"" name=""message"">')

        # The 'widget' parameter to a Field can also be an instance:
        class ContactForm(Form):
            subject = CharField()
            message = CharField(widget=Textarea(attrs={'rows': 80, 'cols': 20}))

        f = ContactForm(auto_id=False)
        self.assertHTMLEqual(str(f['message']), '<textarea name=""message"" rows=""80"" cols=""20"" required></textarea>')

        # Instance-level attrs are *not* carried over to as_textarea(), as_text() and
        # as_hidden():
        self.assertHTMLEqual(f['message'].as_text(), '<input type=""text"" name=""message"" required>')
        f = ContactForm({'subject': 'Hello', 'message': 'I love you.'}, auto_id=False)
        self.assertHTMLEqual(
            f['subject'].as_textarea(),
            '<textarea rows=""10"" cols=""40"" name=""subject"" required>Hello</textarea>'
        )
        self.assertHTMLEqual(
            f['message'].as_text(),
            '<input type=""text"" name=""message"" value=""I love you."" required>',
        )
        self.assertHTMLEqual(f['message'].as_hidden(), '<input type=""hidden"" name=""message"" value=""I love you."">')

    def test_forms_with_choices(self):
        # For a form with a <select>, use ChoiceField:
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")
        f = FrameworkForm({'name': 'Django', 'language': 'P'}, auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
<option value=""P"" selected>Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # A subtlety: If one of the choices' value is the empty string and the form is
        # unbound, then the <option> for the empty-string choice will get selected.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(choices=[('', '------'), ('P', 'Python'), ('J', 'Java')])

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"" required>
<option value="""" selected>------</option>
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # You can specify widget attributes in the Widget constructor.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')], widget=Select(attrs={'class': 'foo'}))

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")
        f = FrameworkForm({'name': 'Django', 'language': 'P'}, auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"" selected>Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # When passing a custom widget instance to ChoiceField, note that setting
        # 'choices' on the widget is meaningless. The widget will use the choices
        # defined on the Field, not the ones defined on the Widget.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(
                choices=[('P', 'Python'), ('J', 'Java')],
                widget=Select(choices=[('R', 'Ruby'), ('P', 'Perl')], attrs={'class': 'foo'}),
            )

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")
        f = FrameworkForm({'name': 'Django', 'language': 'P'}, auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"" selected>Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # You can set a ChoiceField's choices after the fact.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField()

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
</select>"""""")
        f.fields['language'].choices = [('P', 'Python'), ('J', 'Java')]
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")

    def test_forms_with_radio(self):
        # Add widget=RadioSelect to use that widget with a ChoiceField.
        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<div>
<div><label><input type=""radio"" name=""language"" value=""P"" required> Python</label></div>
<div><label><input type=""radio"" name=""language"" value=""J"" required> Java</label></div>
</div>"""""")
        self.assertHTMLEqual(f.as_table(), """"""<tr><th>Name:</th><td><input type=""text"" name=""name"" required></td></tr>
<tr><th>Language:</th><td><div>
<div><label><input type=""radio"" name=""language"" value=""P"" required> Python</label></div>
<div><label><input type=""radio"" name=""language"" value=""J"" required> Java</label></div>
</div></td></tr>"""""")
        self.assertHTMLEqual(f.as_ul(), """"""<li>Name: <input type=""text"" name=""name"" required></li>
<li>Language: <div>
<div><label><input type=""radio"" name=""language"" value=""P"" required> Python</label></div>
<div><label><input type=""radio"" name=""language"" value=""J"" required> Java</label></div>
</div></li>"""""")

        # Regarding auto_id and <label>, RadioSelect is a special case. Each radio button
        # gets a distinct ID, formed by appending an underscore plus the button's
        # zero-based index.
        f = FrameworkForm(auto_id='id_%s')
        self.assertHTMLEqual(
            str(f['language']),
            """"""<div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div>""""""
        )

        # When RadioSelect is used with auto_id, and the whole form is printed
        # using either as_table() or as_ul(), the label for the RadioSelect
        # will **not** point to the ID of the *first* radio button to improve
        # accessibility for screen reader users.
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th><label for=""id_name"">Name:</label></th><td><input type=""text"" name=""name"" id=""id_name"" required></td></tr>
<tr><th><label>Language:</label></th><td><div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div></td></tr>""""""
        )
        self.assertHTMLEqual(
            f.as_ul(),
            """"""<li><label for=""id_name"">Name:</label> <input type=""text"" name=""name"" id=""id_name"" required></li>
<li><label>Language:</label> <div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div></li>""""""
        )
        self.assertHTMLEqual(
            f.as_p(),
            """"""<p><label for=""id_name"">Name:</label> <input type=""text"" name=""name"" id=""id_name"" required></p>
<p><label>Language:</label> <div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div></p>""""""
        )

    def test_form_with_iterable_boundfield(self):
        class BeatleForm(Form):
            name = ChoiceField(
                choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],
                widget=RadioSelect,
            )

        f = BeatleForm(auto_id=False)
        self.assertHTMLEqual(
            '\n'.join(str(bf) for bf in f['name']),
            """"""<label><input type=""radio"" name=""name"" value=""john"" required> John</label>
<label><input type=""radio"" name=""name"" value=""paul"" required> Paul</label>
<label><input type=""radio"" name=""name"" value=""george"" required> George</label>
<label><input type=""radio"" name=""name"" value=""ringo"" required> Ringo</label>""""""
        )
        self.assertHTMLEqual(
            '\n'.join('<div>%s</div>' % bf for bf in f['name']),
            """"""<div><label><input type=""radio"" name=""name"" value=""john"" required> John</label></div>
<div><label><input type=""radio"" name=""name"" value=""paul"" required> Paul</label></div>
<div><label><input type=""radio"" name=""name"" value=""george"" required> George</label></div>
<div><label><input type=""radio"" name=""name"" value=""ringo"" required> Ringo</label></div>""""""
        )

    def test_form_with_iterable_boundfield_id(self):
        class BeatleForm(Form):
            name = ChoiceField(
                choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],
                widget=RadioSelect,
            )
        fields = list(BeatleForm()['name'])
        self.assertEqual(len(fields), 4)

        self.assertEqual(fields[0].id_for_label, 'id_name_0')
        self.assertEqual(fields[0].choice_label, 'John')
        self.assertHTMLEqual(
            fields[0].tag(),
            '<input type=""radio"" name=""name"" value=""john"" id=""id_name_0"" required>'
        )
        self.assertHTMLEqual(
            str(fields[0]),
            '<label for=""id_name_0""><input type=""radio"" name=""name"" '
            'value=""john"" id=""id_name_0"" required> John</label>'
        )

        self.assertEqual(fields[1].id_for_label, 'id_name_1')
        self.assertEqual(fields[1].choice_label, 'Paul')
        self.assertHTMLEqual(
            fields[1].tag(),
            '<input type=""radio"" name=""name"" value=""paul"" id=""id_name_1"" required>'
        )
        self.assertHTMLEqual(
            str(fields[1]),
            '<label for=""id_name_1""><input type=""radio"" name=""name"" '
            'value=""paul"" id=""id_name_1"" required> Paul</label>'
        )

    def test_iterable_boundfield_select(self):
        class BeatleForm(Form):
            name = ChoiceField(choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')])
        fields = list(BeatleForm(auto_id=False)['name'])
        self.assertEqual(len(fields), 4)

        self.assertEqual(fields[0].id_for_label, None)
        self.assertEqual(fields[0].choice_label, 'John')
        self.assertHTMLEqual(fields[0].tag(), '<option value=""john"">John</option>')
        self.assertHTMLEqual(str(fields[0]), '<option value=""john"">John</option>')

    def test_form_with_noniterable_boundfield(self):
        # You can iterate over any BoundField, not just those with widget=RadioSelect.
        class BeatleForm(Form):
            name = CharField()

        f = BeatleForm(auto_id=False)
        self.assertHTMLEqual('\n'.join(str(bf) for bf in f['name']), '<input type=""text"" name=""name"" required>')

    def test_boundfield_slice(self):
        class BeatleForm(Form):
            name = ChoiceField(
                choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],
                widget=RadioSelect,
            )

        f = BeatleForm()
        bf = f['name']
        self.assertEqual(
            [str(item) for item in bf[1:]],
            [str(bf[1]), str(bf[2]), str(bf[3])],
        )

    def test_boundfield_invalid_index(self):
        class TestForm(Form):
            name = ChoiceField(choices=[])

        field = TestForm()['name']
        msg = 'BoundField indices must be integers or slices, not str.'
        with self.assertRaisesMessage(TypeError, msg):
            field['foo']

    def test_boundfield_bool(self):
        """"""BoundField without any choices (subwidgets) evaluates to True.""""""
        class TestForm(Form):
            name = ChoiceField(choices=[])

        self.assertIs(bool(TestForm()['name']), True)

    def test_forms_with_multiple_choice(self):
        # MultipleChoiceField is a special case, as its data is required to be a list:
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField()

        f = SongForm(auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<select multiple name=""composers"" required>
</select>"""""")

        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')])

        f = SongForm(auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<select multiple name=""composers"" required>
<option value=""J"">John Lennon</option>
<option value=""P"">Paul McCartney</option>
</select>"""""")
        f = SongForm({'name': 'Yesterday', 'composers': ['P']}, auto_id=False)
        self.assertHTMLEqual(str(f['name']), '<input type=""text"" name=""name"" value=""Yesterday"" required>')
        self.assertHTMLEqual(str(f['composers']), """"""<select multiple name=""composers"" required>
<option value=""J"">John Lennon</option>
<option value=""P"" selected>Paul McCartney</option>
</select>"""""")

    def test_form_with_disabled_fields(self):
        class PersonForm(Form):
            name = CharField()
            birthday = DateField(disabled=True)

        class PersonFormFieldInitial(Form):
            name = CharField()
            birthday = DateField(disabled=True, initial=datetime.date(1974, 8, 16))

        # Disabled fields are generally not transmitted by user agents.
        # The value from the form's initial data is used.
        f1 = PersonForm({'name': 'John Doe'}, initial={'birthday': datetime.date(1974, 8, 16)})
        f2 = PersonFormFieldInitial({'name': 'John Doe'})
        for form in (f1, f2):
            self.assertTrue(form.is_valid())
            self.assertEqual(
                form.cleaned_data,
                {'birthday': datetime.date(1974, 8, 16), 'name': 'John Doe'}
            )

        # Values provided in the form's data are ignored.
        data = {'name': 'John Doe', 'birthday': '1984-11-10'}
        f1 = PersonForm(data, initial={'birthday': datetime.date(1974, 8, 16)})
        f2 = PersonFormFieldInitial(data)
        for form in (f1, f2):
            self.assertTrue(form.is_valid())
            self.assertEqual(
                form.cleaned_data,
                {'birthday': datetime.date(1974, 8, 16), 'name': 'John Doe'}
            )

        # Initial data remains present on invalid forms.
        data = {}
        f1 = PersonForm(data, initial={'birthday': datetime.date(1974, 8, 16)})
        f2 = PersonFormFieldInitial(data)
        for form in (f1, f2):
            self.assertFalse(form.is_valid())
            self.assertEqual(form['birthday'].value(), datetime.date(1974, 8, 16))

    def test_hidden_data(self):
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')])

        # MultipleChoiceField rendered as_hidden() is a special case. Because it can
        # have multiple values, its as_hidden() renders multiple <input type=""hidden"">
        # tags.
        f = SongForm({'name': 'Yesterday', 'composers': ['P']}, auto_id=False)
        self.assertHTMLEqual(f['composers'].as_hidden(), '<input type=""hidden"" name=""composers"" value=""P"">')
        f = SongForm({'name': 'From Me To You', 'composers': ['P', 'J']}, auto_id=False)
        self.assertHTMLEqual(f['composers'].as_hidden(), """"""<input type=""hidden"" name=""composers"" value=""P"">
<input type=""hidden"" name=""composers"" value=""J"">"""""")

        # DateTimeField rendered as_hidden() is special too
        class MessageForm(Form):
            when = SplitDateTimeField()

        f = MessageForm({'when_0': '1992-01-01', 'when_1': '01:01'})
        self.assertTrue(f.is_valid())
        self.assertHTMLEqual(
            str(f['when']),
            '<input type=""text"" name=""when_0"" value=""1992-01-01"" id=""id_when_0"" required>'
            '<input type=""text"" name=""when_1"" value=""01:01"" id=""id_when_1"" required>'
        )
        self.assertHTMLEqual(
            f['when'].as_hidden(),
            '<input type=""hidden"" name=""when_0"" value=""1992-01-01"" id=""id_when_0"">'
            '<input type=""hidden"" name=""when_1"" value=""01:01"" id=""id_when_1"">'
        )

    def test_multiple_choice_checkbox(self):
        # MultipleChoiceField can also be used with the CheckboxSelectMultiple widget.
        f = SongForm(auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<div>
<div><label><input type=""checkbox"" name=""composers"" value=""J""> John Lennon</label></div>
<div><label><input type=""checkbox"" name=""composers"" value=""P""> Paul McCartney</label></div>
</div>"""""")
        f = SongForm({'composers': ['J']}, auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<div>
<div><label><input checked type=""checkbox"" name=""composers"" value=""J""> John Lennon</label></div>
<div><label><input type=""checkbox"" name=""composers"" value=""P""> Paul McCartney</label></div>
</div>"""""")
        f = SongForm({'composers': ['J', 'P']}, auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<div>
<div><label><input checked type=""checkbox"" name=""composers"" value=""J""> John Lennon</label></div>
<div><label><input checked type=""checkbox"" name=""composers"" value=""P""> Paul McCartney</label></div>
</div>"""""")

    def test_checkbox_auto_id(self):
        # Regarding auto_id, CheckboxSelectMultiple is a special case. Each checkbox
        # gets a distinct ID, formed by appending an underscore plus the checkbox's
        # zero-based index.
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=CheckboxSelectMultiple,
            )

        f = SongForm(auto_id='%s_id')
        self.assertHTMLEqual(
            str(f['composers']),
            """"""<div id=""composers_id"">
<div><label for=""composers_id_0"">
<input type=""checkbox"" name=""composers"" value=""J"" id=""composers_id_0""> John Lennon</label></div>
<div><label for=""composers_id_1"">
<input type=""checkbox"" name=""composers"" value=""P"" id=""composers_id_1""> Paul McCartney</label></div>
</div>""""""
        )

    def test_multiple_choice_list_data(self):
        # Data for a MultipleChoiceField should be a list. QueryDict and
        # MultiValueDict conveniently work with this.
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=CheckboxSelectMultiple,
            )

        data = {'name': 'Yesterday', 'composers': ['J', 'P']}
        f = SongForm(data)
        self.assertEqual(f.errors, {})

        data = QueryDict('name=Yesterday&composers=J&composers=P')
        f = SongForm(data)
        self.assertEqual(f.errors, {})

        data = MultiValueDict({'name': ['Yesterday'], 'composers': ['J', 'P']})
        f = SongForm(data)
        self.assertEqual(f.errors, {})

        # SelectMultiple uses ducktyping so that MultiValueDictLike.getlist()
        # is called.
        f = SongForm(MultiValueDictLike({'name': 'Yesterday', 'composers': 'J'}))
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J'])

    def test_multiple_hidden(self):
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=CheckboxSelectMultiple,
            )

        # The MultipleHiddenInput widget renders multiple values as hidden fields.
        class SongFormHidden(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=MultipleHiddenInput,
            )

        f = SongFormHidden(MultiValueDict({'name': ['Yesterday'], 'composers': ['J', 'P']}), auto_id=False)
        self.assertHTMLEqual(
            f.as_ul(),
            """"""<li>Name: <input type=""text"" name=""name"" value=""Yesterday"" required>
<input type=""hidden"" name=""composers"" value=""J"">
<input type=""hidden"" name=""composers"" value=""P""></li>""""""
        )

        # When using CheckboxSelectMultiple, the framework expects a list of input and
        # returns a list of input.
        f = SongForm({'name': 'Yesterday'}, auto_id=False)
        self.assertEqual(f.errors['composers'], ['This field is required.'])
        f = SongForm({'name': 'Yesterday', 'composers': ['J']}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J'])
        self.assertEqual(f.cleaned_data['name'], 'Yesterday')
        f = SongForm({'name': 'Yesterday', 'composers': ['J', 'P']}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J', 'P'])
        self.assertEqual(f.cleaned_data['name'], 'Yesterday')

        # MultipleHiddenInput uses ducktyping so that
        # MultiValueDictLike.getlist() is called.
        f = SongForm(MultiValueDictLike({'name': 'Yesterday', 'composers': 'J'}))
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J'])

    def test_escaping(self):
        # Validation errors are HTML-escaped when output as HTML.
        class EscapingForm(Form):
            special_name = CharField(label=""<em>Special</em> Field"")
            special_safe_name = CharField(label=mark_safe(""<em>Special</em> Field""))

            def clean_special_name(self):
                raise ValidationError(""Something's wrong with '%s'"" % self.cleaned_data['special_name'])

            def clean_special_safe_name(self):
                raise ValidationError(
                    mark_safe(""'<b>%s</b>' is a safe string"" % self.cleaned_data['special_safe_name'])
                )

        f = EscapingForm({
            'special_name':
            ""Nothing to escape"",
            'special_safe_name': ""Nothing to escape"",
        }, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td>
<ul class=""errorlist""><li>Something&#x27;s wrong with &#x27;Nothing to escape&#x27;</li></ul>
<input type=""text"" name=""special_name"" value=""Nothing to escape"" required></td></tr>
<tr><th><em>Special</em> Field:</th><td>
<ul class=""errorlist""><li>'<b>Nothing to escape</b>' is a safe string</li></ul>
<input type=""text"" name=""special_safe_name"" value=""Nothing to escape"" required></td></tr>""""""
        )
        f = EscapingForm({
            'special_name': ""Should escape < & > and <script>alert('xss')</script>"",
            'special_safe_name': ""<i>Do not escape</i>""
        }, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td>
<ul class=""errorlist""><li>Something&#x27;s wrong with &#x27;Should escape &lt; &amp; &gt; and
&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&#x27;</li></ul>
<input type=""text"" name=""special_name""
value=""Should escape &lt; &amp; &gt; and &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;"" required></td></tr>
<tr><th><em>Special</em> Field:</th><td>
<ul class=""errorlist""><li>'<b><i>Do not escape</i></b>' is a safe string</li></ul>
<input type=""text"" name=""special_safe_name"" value=""&lt;i&gt;Do not escape&lt;/i&gt;"" required></td></tr>""""""
        )

    def test_validating_multiple_fields(self):
        # There are a couple of ways to do multiple-field validation. If you want the
        # validation message to be associated with a particular field, implement the
        # clean_XXX() method on the Form, where XXX is the field name. As in
        # Field.clean(), the clean_XXX() method should return the cleaned value. In the
        # clean_XXX() method, you have access to self.cleaned_data, which is a dictionary
        # of all the data that has been cleaned *so far*, in order by the fields,
        # including the current field (e.g., the field XXX if you're in clean_XXX()).
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password1 = CharField(widget=PasswordInput)
            password2 = CharField(widget=PasswordInput)

            def clean_password2(self):
                if (self.cleaned_data.get('password1') and self.cleaned_data.get('password2') and
                        self.cleaned_data['password1'] != self.cleaned_data['password2']):
                    raise ValidationError('Please make sure your passwords match.')

                return self.cleaned_data['password2']

        f = UserRegistration(auto_id=False)
        self.assertEqual(f.errors, {})
        f = UserRegistration({}, auto_id=False)
        self.assertEqual(f.errors['username'], ['This field is required.'])
        self.assertEqual(f.errors['password1'], ['This field is required.'])
        self.assertEqual(f.errors['password2'], ['This field is required.'])
        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'bar'}, auto_id=False)
        self.assertEqual(f.errors['password2'], ['Please make sure your passwords match.'])
        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'foo'}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['username'], 'adrian')
        self.assertEqual(f.cleaned_data['password1'], 'foo')
        self.assertEqual(f.cleaned_data['password2'], 'foo')

        # Another way of doing multiple-field validation is by implementing the
        # Form's clean() method. Usually ValidationError raised by that method
        # will not be associated with a particular field and will have a
        # special-case association with the field named '__all__'. It's
        # possible to associate the errors to particular field with the
        # Form.add_error() method or by passing a dictionary that maps each
        # field to one or more errors.
        #
        # Note that in Form.clean(), you have access to self.cleaned_data, a
        # dictionary of all the fields/values that have *not* raised a
        # ValidationError. Also note Form.clean() is required to return a
        # dictionary of all clean data.
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password1 = CharField(widget=PasswordInput)
            password2 = CharField(widget=PasswordInput)

            def clean(self):
                # Test raising a ValidationError as NON_FIELD_ERRORS.
                if (self.cleaned_data.get('password1') and self.cleaned_data.get('password2') and
                        self.cleaned_data['password1'] != self.cleaned_data['password2']):
                    raise ValidationError('Please make sure your passwords match.')

                # Test raising ValidationError that targets multiple fields.
                errors = {}
                if self.cleaned_data.get('password1') == 'FORBIDDEN_VALUE':
                    errors['password1'] = 'Forbidden value.'
                if self.cleaned_data.get('password2') == 'FORBIDDEN_VALUE':
                    errors['password2'] = ['Forbidden value.']
                if errors:
                    raise ValidationError(errors)

                # Test Form.add_error()
                if self.cleaned_data.get('password1') == 'FORBIDDEN_VALUE2':
                    self.add_error(None, 'Non-field error 1.')
                    self.add_error('password1', 'Forbidden value 2.')
                if self.cleaned_data.get('password2') == 'FORBIDDEN_VALUE2':
                    self.add_error('password2', 'Forbidden value 2.')
                    raise ValidationError('Non-field error 2.')

                return self.cleaned_data

        f = UserRegistration(auto_id=False)
        self.assertEqual(f.errors, {})

        f = UserRegistration({}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th>Username:</th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""username"" maxlength=""10"" required></td></tr>
<tr><th>Password1:</th><td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""password"" name=""password1"" required></td></tr>
<tr><th>Password2:</th><td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""password"" name=""password2"" required></td></tr>""""""
        )
        self.assertEqual(f.errors['username'], ['This field is required.'])
        self.assertEqual(f.errors['password1'], ['This field is required.'])
        self.assertEqual(f.errors['password2'], ['This field is required.'])

        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'bar'}, auto_id=False)
        self.assertEqual(f.errors['__all__'], ['Please make sure your passwords match.'])
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><td colspan=""2"">
<ul class=""errorlist nonfield""><li>Please make sure your passwords match.</li></ul></td></tr>
<tr><th>Username:</th><td><input type=""text"" name=""username"" value=""adrian"" maxlength=""10"" required></td></tr>
<tr><th>Password1:</th><td><input type=""password"" name=""password1"" required></td></tr>
<tr><th>Password2:</th><td><input type=""password"" name=""password2"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            f.as_ul(),
            """"""<li><ul class=""errorlist nonfield"">
<li>Please make sure your passwords match.</li></ul></li>
<li>Username: <input type=""text"" name=""username"" value=""adrian"" maxlength=""10"" required></li>
<li>Password1: <input type=""password"" name=""password1"" required></li>
<li>Password2: <input type=""password"" name=""password2"" required></li>""""""
        )

        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'foo'}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['username'], 'adrian')
        self.assertEqual(f.cleaned_data['password1'], 'foo')
        self.assertEqual(f.cleaned_data['password2'], 'foo')

        f = UserRegistration({
            'username': 'adrian',
            'password1': 'FORBIDDEN_VALUE',
            'password2': 'FORBIDDEN_VALUE',
        }, auto_id=False)
        self.assertEqual(f.errors['password1'], ['Forbidden value.'])
        self.assertEqual(f.errors['password2'], ['Forbidden value.'])

        f = UserRegistration({
            'username': 'adrian',
            'password1': 'FORBIDDEN_VALUE2',
            'password2': 'FORBIDDEN_VALUE2',
        }, auto_id=False)
        self.assertEqual(f.errors['__all__'], ['Non-field error 1.', 'Non-field error 2.'])
        self.assertEqual(f.errors['password1'], ['Forbidden value 2.'])
        self.assertEqual(f.errors['password2'], ['Forbidden value 2.'])

        with self.assertRaisesMessage(ValueError, ""has no field named""):
            f.add_error('missing_field', 'Some error.')

    def test_update_error_dict(self):
        class CodeForm(Form):
            code = CharField(max_length=10)

            def clean(self):
                try:
                    raise ValidationError({'code': [ValidationError('Code error 1.')]})
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError({'code': [ValidationError('Code error 2.')]})
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError({'code': forms.ErrorList(['Code error 3.'])})
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError('Non-field error 1.')
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError([ValidationError('Non-field error 2.')])
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                # The newly added list of errors is an instance of ErrorList.
                for field, error_list in self._errors.items():
                    if not isinstance(error_list, self.error_class):
                        self._errors[field] = self.error_class(error_list)

        form = CodeForm({'code': 'hello'})
        # Trigger validation.
        self.assertFalse(form.is_valid())

        # update_error_dict didn't lose track of the ErrorDict type.
        self.assertIsInstance(form._errors, forms.ErrorDict)

        self.assertEqual(dict(form.errors), {
            'code': ['Code error 1.', 'Code error 2.', 'Code error 3.'],
            NON_FIELD_ERRORS: ['Non-field error 1.', 'Non-field error 2.'],
        })

    def test_has_error(self):
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password1 = CharField(widget=PasswordInput, min_length=5)
            password2 = CharField(widget=PasswordInput)

            def clean(self):
                if (self.cleaned_data.get('password1') and self.cleaned_data.get('password2') and
                        self.cleaned_data['password1'] != self.cleaned_data['password2']):
                    raise ValidationError(
                        'Please make sure your passwords match.',
                        code='password_mismatch',
                    )

        f = UserRegistration(data={})
        self.assertTrue(f.has_error('password1'))
        self.assertTrue(f.has_error('password1', 'required'))
        self.assertFalse(f.has_error('password1', 'anything'))

        f = UserRegistration(data={'password1': 'Hi', 'password2': 'Hi'})
        self.assertTrue(f.has_error('password1'))
        self.assertTrue(f.has_error('password1', 'min_length'))
        self.assertFalse(f.has_error('password1', 'anything'))
        self.assertFalse(f.has_error('password2'))
        self.assertFalse(f.has_error('password2', 'anything'))

        f = UserRegistration(data={'password1': 'Bonjour', 'password2': 'Hello'})
        self.assertFalse(f.has_error('password1'))
        self.assertFalse(f.has_error('password1', 'required'))
        self.assertTrue(f.has_error(NON_FIELD_ERRORS))
        self.assertTrue(f.has_error(NON_FIELD_ERRORS, 'password_mismatch'))
        self.assertFalse(f.has_error(NON_FIELD_ERRORS, 'anything'))

    def test_html_output_with_hidden_input_field_errors(self):
        class TestForm(Form):
            hidden_input = CharField(widget=HiddenInput)

            def clean(self):
                self.add_error(None, 'Form error')

        f = TestForm(data={})
        error_dict = {
            'hidden_input': ['This field is required.'],
            '__all__': ['Form error'],
        }
        self.assertEqual(f.errors, error_dict)
        f.as_table()
        self.assertEqual(f.errors, error_dict)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><td colspan=""2""><ul class=""errorlist nonfield""><li>Form error</li>'
            '<li>(Hidden field hidden_input) This field is required.</li></ul>'
            '<input type=""hidden"" name=""hidden_input"" id=""id_hidden_input""></td></tr>',
        )
        self.assertHTMLEqual(
            f.as_ul(),
            '<li><ul class=""errorlist nonfield""><li>Form error</li>'
            '<li>(Hidden field hidden_input) This field is required.</li></ul>'
            '<input type=""hidden"" name=""hidden_input"" id=""id_hidden_input""></li>',
        )
        self.assertHTMLEqual(
            f.as_p(),
            '<ul class=""errorlist nonfield""><li>Form error</li>'
            '<li>(Hidden field hidden_input) This field is required.</li></ul>'
            '<p><input type=""hidden"" name=""hidden_input"" id=""id_hidden_input""></p>',
        )

    def test_dynamic_construction(self):
        # It's possible to construct a Form dynamically by adding to the self.fields
        # dictionary in __init__(). Don't forget to call Form.__init__() within the
        # subclass' __init__().
        class Person(Form):
            first_name = CharField()
            last_name = CharField()

            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.fields['birthday'] = DateField()

        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th>First name:</th><td><input type=""text"" name=""first_name"" required></td></tr>
<tr><th>Last name:</th><td><input type=""text"" name=""last_name"" required></td></tr>
<tr><th>Birthday:</th><td><input type=""text"" name=""birthday"" required></td></tr>""""""
        )

        # Instances of a dynamic Form do not persist fields from one Form instance to
        # the next.
        class MyForm(Form):
            def __init__(self, data=None, auto_id=False, field_list=[]):
                Form.__init__(self, data, auto_id=auto_id)

                for field in field_list:
                    self.fields[field[0]] = field[1]

        field_list = [('field1', CharField()), ('field2', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Field1:</th><td><input type=""text"" name=""field1"" required></td></tr>
<tr><th>Field2:</th><td><input type=""text"" name=""field2"" required></td></tr>""""""
        )
        field_list = [('field3', CharField()), ('field4', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Field3:</th><td><input type=""text"" name=""field3"" required></td></tr>
<tr><th>Field4:</th><td><input type=""text"" name=""field4"" required></td></tr>""""""
        )

        class MyForm(Form):
            default_field_1 = CharField()
            default_field_2 = CharField()

            def __init__(self, data=None, auto_id=False, field_list=[]):
                Form.__init__(self, data, auto_id=auto_id)

                for field in field_list:
                    self.fields[field[0]] = field[1]

        field_list = [('field1', CharField()), ('field2', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Default field 1:</th><td><input type=""text"" name=""default_field_1"" required></td></tr>
<tr><th>Default field 2:</th><td><input type=""text"" name=""default_field_2"" required></td></tr>
<tr><th>Field1:</th><td><input type=""text"" name=""field1"" required></td></tr>
<tr><th>Field2:</th><td><input type=""text"" name=""field2"" required></td></tr>""""""
        )
        field_list = [('field3', CharField()), ('field4', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Default field 1:</th><td><input type=""text"" name=""default_field_1"" required></td></tr>
<tr><th>Default field 2:</th><td><input type=""text"" name=""default_field_2"" required></td></tr>
<tr><th>Field3:</th><td><input type=""text"" name=""field3"" required></td></tr>
<tr><th>Field4:</th><td><input type=""text"" name=""field4"" required></td></tr>""""""
        )

        # Similarly, changes to field attributes do not persist from one Form instance
        # to the next.
        class Person(Form):
            first_name = CharField(required=False)
            last_name = CharField(required=False)

            def __init__(self, names_required=False, *args, **kwargs):
                super().__init__(*args, **kwargs)

                if names_required:
                    self.fields['first_name'].required = True
                    self.fields['first_name'].widget.attrs['class'] = 'required'
                    self.fields['last_name'].required = True
                    self.fields['last_name'].widget.attrs['class'] = 'required'

        f = Person(names_required=False)
        self.assertEqual(f['first_name'].field.required, f['last_name'].field.required, (False, False))
        self.assertEqual(f['first_name'].field.widget.attrs, f['last_name'].field.widget.attrs, ({}, {}))
        f = Person(names_required=True)
        self.assertEqual(f['first_name'].field.required, f['last_name'].field.required, (True, True))
        self.assertEqual(
            f['first_name'].field.widget.attrs,
            f['last_name'].field.widget.attrs,
            ({'class': 'reuired'}, {'class': 'required'})
        )
        f = Person(names_required=False)
        self.assertEqual(f['first_name'].field.required, f['last_name'].field.required, (False, False))
        self.assertEqual(f['first_name'].field.widget.attrs, f['last_name'].field.widget.attrs, ({}, {}))

        class Person(Form):
            first_name = CharField(max_length=30)
            last_name = CharField(max_length=30)

            def __init__(self, name_max_length=None, *args, **kwargs):
                super().__init__(*args, **kwargs)

                if name_max_length:
                    self.fields['first_name'].max_length = name_max_length
                    self.fields['last_name'].max_length = name_max_length

        f = Person(name_max_length=None)
        self.assertEqual(f['first_name'].field.max_length, f['last_name'].field.max_length, (30, 30))
        f = Person(name_max_length=20)
        self.assertEqual(f['first_name'].field.max_length, f['last_name'].field.max_length, (20, 20))
        f = Person(name_max_length=None)
        self.assertEqual(f['first_name'].field.max_length, f['last_name'].field.max_length, (30, 30))

        # Similarly, choices do not persist from one Form instance to the next.
        # Refs #15127.
        class Person(Form):
            first_name = CharField(required=False)
            last_name = CharField(required=False)
            gender = ChoiceField(choices=(('f', 'Female'), ('m', 'Male')))

            def __init__(self, allow_unspec_gender=False, *args, **kwargs):
                super().__init__(*args, **kwargs)

                if allow_unspec_gender:
                    self.fields['gender'].choices += (('u', 'Unspecified'),)

        f = Person()
        self.assertEqual(f['gender'].field.choices, [('f', 'Female'), ('m', 'Male')])
        f = Person(allow_unspec_gender=True)
        self.assertEqual(f['gender'].field.choices, [('f', 'Female'), ('m', 'Male'), ('u', 'Unspecified')])
        f = Person()
        self.assertEqual(f['gender'].field.choices, [('f', 'Female'), ('m', 'Male')])

    def test_validators_independence(self):
        """"""
        The list of form field validators can be modified without polluting
        other forms.
        """"""
        class MyForm(Form):
            myfield = CharField(max_length=25)

        f1 = MyForm()
        f2 = MyForm()

        f1.fields['myfield'].validators[0] = MaxValueValidator(12)
        self.assertNotEqual(f1.fields['myfield'].validators[0], f2.fields['myfield'].validators[0])

    def test_hidden_widget(self):
        # HiddenInput widgets are displayed differently in the as_table(), as_ul())
        # and as_p() output of a Form -- their verbose names are not displayed, and a
        # separate row is not displayed. They're displayed in the last row of the
        # form, directly after that row's form element.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            hidden_text = CharField(widget=HiddenInput)
            birthday = DateField()

        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th>First name:</th><td><input type=""text"" name=""first_name"" required></td></tr>
<tr><th>Last name:</th><td><input type=""text"" name=""last_name"" required></td></tr>
<tr><th>Birthday:</th>
<td><input type=""text"" name=""birthday"" required><input type=""hidden"" name=""hidden_text""></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required><input type=""hidden"" name=""hidden_text""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(), """"""<p>First name: <input type=""text"" name=""first_name"" required></p>
<p>Last name: <input type=""text"" name=""last_name"" required></p>
<p>Birthday: <input type=""text"" name=""birthday"" required><input type=""hidden"" name=""hidden_text""></p>""""""
        )

        # With auto_id set, a HiddenInput still gets an ID, but it doesn't get a label.
        p = Person(auto_id='id_%s')
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""id_birthday"" required>
<input type=""hidden"" name=""hidden_text"" id=""id_hidden_text""></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></li>
<li><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></li>
<li><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required>
<input type=""hidden"" name=""hidden_text"" id=""id_hidden_text""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></p>
<p><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></p>
<p><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required>
<input type=""hidden"" name=""hidden_text"" id=""id_hidden_text""></p>""""""
        )

        # If a field with a HiddenInput has errors, the as_table() and as_ul() output
        # will include the error message(s) with the text ""(Hidden field [fieldname]) ""
        # prepended. This message is displayed at the top of the output, regardless of
        # its field's order in the form.
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><td colspan=""2"">
<ul class=""errorlist nonfield""><li>(Hidden field hidden_text) This field is required.</li></ul></td></tr>
<tr><th>First name:</th><td><input type=""text"" name=""first_name"" value=""John"" required></td></tr>
<tr><th>Last name:</th><td><input type=""text"" name=""last_name"" value=""Lennon"" required></td></tr>
<tr><th>Birthday:</th><td><input type=""text"" name=""birthday"" value=""1940-10-9"" required>
<input type=""hidden"" name=""hidden_text""></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist nonfield""><li>(Hidden field hidden_text) This field is required.</li></ul></li>
<li>First name: <input type=""text"" name=""first_name"" value=""John"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" value=""Lennon"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" value=""1940-10-9"" required>
<input type=""hidden"" name=""hidden_text""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist nonfield""><li>(Hidden field hidden_text) This field is required.</li></ul>
<p>First name: <input type=""text"" name=""first_name"" value=""John"" required></p>
<p>Last name: <input type=""text"" name=""last_name"" value=""Lennon"" required></p>
<p>Birthday: <input type=""text"" name=""birthday"" value=""1940-10-9"" required>
<input type=""hidden"" name=""hidden_text""></p>""""""
        )

        # A corner case: It's possible for a form to have only HiddenInputs.
        class TestForm(Form):
            foo = CharField(widget=HiddenInput)
            bar = CharField(widget=HiddenInput)

        p = TestForm(auto_id=False)
        self.assertHTMLEqual(p.as_table(), '<input type=""hidden"" name=""foo""><input type=""hidden"" name=""bar"">')
        self.assertHTMLEqual(p.as_ul(), '<input type=""hidden"" name=""foo""><input type=""hidden"" name=""bar"">')
        self.assertHTMLEqual(p.as_p(), '<input type=""hidden"" name=""foo""><input type=""hidden"" name=""bar"">')

    def test_field_order(self):
        # A Form's fields are displayed in the same order in which they were defined.
        class TestForm(Form):
            field1 = CharField()
            field2 = CharField()
            field3 = CharField()
            field4 = CharField()
            field5 = CharField()
            field6 = CharField()
            field7 = CharField()
            field8 = CharField()
            field9 = CharField()
            field10 = CharField()
            field11 = CharField()
            field12 = CharField()
            field13 = CharField()
            field14 = CharField()

        p = TestForm(auto_id=False)
        self.assertHTMLEqual(p.as_table(), """"""<tr><th>Field1:</th><td><input type=""text"" name=""field1"" required></td></tr>
<tr><th>Field2:</th><td><input type=""text"" name=""field2"" required></td></tr>
<tr><th>Field3:</th><td><input type=""text"" name=""field3"" required></td></tr>
<tr><th>Field4:</th><td><input type=""text"" name=""field4"" required></td></tr>
<tr><th>Field5:</th><td><input type=""text"" name=""field5"" required></td></tr>
<tr><th>Field6:</th><td><input type=""text"" name=""field6"" required></td></tr>
<tr><th>Field7:</th><td><input type=""text"" name=""field7"" required></td></tr>
<tr><th>Field8:</th><td><input type=""text"" name=""field8"" required></td></tr>
<tr><th>Field9:</th><td><input type=""text"" name=""field9"" required></td></tr>
<tr><th>Field10:</th><td><input type=""text"" name=""field10"" required></td></tr>
<tr><th>Field11:</th><td><input type=""text"" name=""field11"" required></td></tr>
<tr><th>Field12:</th><td><input type=""text"" name=""field12"" required></td></tr>
<tr><th>Field13:</th><td><input type=""text"" name=""field13"" required></td></tr>
<tr><th>Field14:</th><td><input type=""text"" name=""field14"" required></td></tr>"""""")

    def test_explicit_field_order(self):
        class TestFormParent(Form):
            field1 = CharField()
            field2 = CharField()
            field4 = CharField()
            field5 = CharField()
            field6 = CharField()
            field_order = ['field6', 'field5', 'field4', 'field2', 'field1']

        class TestForm(TestFormParent):
            field3 = CharField()
            field_order = ['field2', 'field4', 'field3', 'field5', 'field6']

        class TestFormRemove(TestForm):
            field1 = None

        class TestFormMissing(TestForm):
            field_order = ['field2', 'field4', 'field3', 'field5', 'field6', 'field1']
            field1 = None

        class TestFormInit(TestFormParent):
            field3 = CharField()
            field_order = None

            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.order_fields(field_order=TestForm.field_order)

        p = TestFormParent()
        self.assertEqual(list(p.fields), TestFormParent.field_order)
        p = TestFormRemove()
        self.assertEqual(list(p.fields), TestForm.field_order)
        p = TestFormMissing()
        self.assertEqual(list(p.fields), TestForm.field_order)
        p = TestForm()
        self.assertEqual(list(p.fields), TestFormMissing.field_order)
        p = TestFormInit()
        order = [*TestForm.field_order, 'field1']
        self.assertEqual(list(p.fields), order)
        TestForm.field_order = ['unknown']
        p = TestForm()
        self.assertEqual(list(p.fields), ['field1', 'field2', 'field4', 'field5', 'field6', 'field3'])

    def test_form_html_attributes(self):
        # Some Field classes have an effect on the HTML attributes of their associated
        # Widget. If you set max_length in a CharField and its associated widget is
        # either a TextInput or PasswordInput, then the widget's rendered HTML will
        # include the ""maxlength"" attribute.
        class UserRegistration(Form):
            username = CharField(max_length=10)                   # uses TextInput by default
            password = CharField(max_length=10, widget=PasswordInput)
            realname = CharField(max_length=10, widget=TextInput)  # redundantly define widget, just to test
            address = CharField()                                 # no max_length defined here

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" maxlength=""10"" required></li>
<li>Realname: <input type=""text"" name=""realname"" maxlength=""10"" required></li>
<li>Address: <input type=""text"" name=""address"" required></li>""""""
        )

        # If you specify a custom ""attrs"" that includes the ""maxlength"" attribute,
        # the Field's max_length attribute will override whatever ""maxlength"" you specify
        # in ""attrs"".
        class UserRegistration(Form):
            username = CharField(max_length=10, widget=TextInput(attrs={'maxlength': 20}))
            password = CharField(max_length=10, widget=PasswordInput)

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" maxlength=""10"" required></li>""""""
        )

    def test_specifying_labels(self):
        # You can specify the label for a field by using the 'label' argument to a Field
        # class. If you don't specify 'label', Django will use the field name with
        # underscores converted to spaces, and the initial letter capitalized.
        class UserRegistration(Form):
            username = CharField(max_length=10, label='Your username')
            password1 = CharField(widget=PasswordInput)
            password2 = CharField(widget=PasswordInput, label='Contraseña (de nuevo)')

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Your username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password1: <input type=""password"" name=""password1"" required></li>
<li>Contraseña (de nuevo): <input type=""password"" name=""password2"" required></li>""""""
        )

        # Labels for as_* methods will only end in a colon if they don't end in other
        # punctuation already.
        class Questions(Form):
            q1 = CharField(label='The first question')
            q2 = CharField(label='What is your name?')
            q3 = CharField(label='The answer to life is:')
            q4 = CharField(label='Answer this question!')
            q5 = CharField(label='The last question. Period.')

        self.assertHTMLEqual(
            Questions(auto_id=False).as_p(),
            """"""<p>The first question: <input type=""text"" name=""q1"" required></p>
<p>What is your name? <input type=""text"" name=""q2"" required></p>
<p>The answer to life is: <input type=""text"" name=""q3"" required></p>
<p>Answer this question! <input type=""text"" name=""q4"" required></p>
<p>The last question. Period. <input type=""text"" name=""q5"" required></p>""""""
        )
        self.assertHTMLEqual(
            Questions().as_p(),
            """"""<p><label for=""id_q1"">The first question:</label> <input type=""text"" name=""q1"" id=""id_q1"" required></p>
<p><label for=""id_q2"">What is your name?</label> <input type=""text"" name=""q2"" id=""id_q2"" required></p>
<p><label for=""id_q3"">The answer to life is:</label> <input type=""text"" name=""q3"" id=""id_q3"" required></p>
<p><label for=""id_q4"">Answer this question!</label> <input type=""text"" name=""q4"" id=""id_q4"" required></p>
<p><label for=""id_q5"">The last question. Period.</label> <input type=""text"" name=""q5"" id=""id_q5"" required></p>""""""
        )

        # If a label is set to the empty string for a field, that field won't get a label.
        class UserRegistration(Form):
            username = CharField(max_length=10, label='')
            password = CharField(widget=PasswordInput)

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(p.as_ul(), """"""<li> <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>"""""")
        p = UserRegistration(auto_id='id_%s')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li> <input id=""id_username"" type=""text"" name=""username"" maxlength=""10"" required></li>
<li><label for=""id_password"">Password:</label>
<input type=""password"" name=""password"" id=""id_password"" required></li>""""""
        )

        # If label is None, Django will auto-create the label from the field name. This
        # is default behavior.
        class UserRegistration(Form):
            username = CharField(max_length=10, label=None)
            password = CharField(widget=PasswordInput)

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration(auto_id='id_%s')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_username"">Username:</label>
<input id=""id_username"" type=""text"" name=""username"" maxlength=""10"" required></li>
<li><label for=""id_password"">Password:</label>
<input type=""password"" name=""password"" id=""id_password"" required></li>""""""
        )

    def test_label_suffix(self):
        # You can specify the 'label_suffix' argument to a Form class to modify the
        # punctuation symbol used at the end of a label.  By default, the colon (:) is
        # used, and is only appended to the label if the label doesn't already end with a
        # punctuation symbol: ., !, ? or :.  If you specify a different suffix, it will
        # be appended regardless of the last character of the label.
        class FavoriteForm(Form):
            color = CharField(label='Favorite color?')
            animal = CharField(label='Favorite animal')
            answer = CharField(label='Secret answer', label_suffix=' =')

        f = FavoriteForm(auto_id=False)
        self.assertHTMLEqual(f.as_ul(), """"""<li>Favorite color? <input type=""text"" name=""color"" required></li>
<li>Favorite animal: <input type=""text"" name=""animal"" required></li>
<li>Secret answer = <input type=""text"" name=""answer"" required></li>"""""")

        f = FavoriteForm(auto_id=False, label_suffix='?')
        self.assertHTMLEqual(f.as_ul(), """"""<li>Favorite color? <input type=""text"" name=""color"" required></li>
<li>Favorite animal? <input type=""text"" name=""animal"" required></li>
<li>Secret answer = <input type=""text"" name=""answer"" required></li>"""""")

        f = FavoriteForm(auto_id=False, label_suffix='')
        self.assertHTMLEqual(f.as_ul(), """"""<li>Favorite color? <input type=""text"" name=""color"" required></li>
<li>Favorite animal <input type=""text"" name=""animal"" required></li>
<li>Secret answer = <input type=""text"" name=""answer"" required></li>"""""")

        f = FavoriteForm(auto_id=False, label_suffix='\u2192')
        self.assertHTMLEqual(
            f.as_ul(),
            '<li>Favorite color? <input type=""text"" name=""color"" required></li>\n'
            '<li>Favorite animal\u2192 <input type=""text"" name=""animal"" required></li>\n'
            '<li>Secret answer = <input type=""text"" name=""answer"" required></li>'
        )

    def test_initial_data(self):
        # You can specify initial data for a field by using the 'initial' argument to a
        # Field class. This initial data is displayed when a Form is rendered with *no*
        # data. It is not displayed when a Form is rendered with any data (including an
        # empty dictionary). Also, the initial value is *not* used if data for a
        # particular required field isn't provided.
        class UserRegistration(Form):
            username = CharField(max_length=10, initial='django')
            password = CharField(widget=PasswordInput)

        # Here, we're not submitting any data, so the initial value will be displayed.)
        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # Here, we're submitting data, so the initial value will *not* be displayed.
        p = UserRegistration({}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': ''}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': 'foo'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # An 'initial' value is *not* used as a fallback if data is not provided. In this
        # example, we don't provide a value for 'username', and the form raises a
        # validation error rather than using the initial value for 'username'.
        p = UserRegistration({'password': 'secret'})
        self.assertEqual(p.errors['username'], ['This field is required.'])
        self.assertFalse(p.is_valid())

    def test_dynamic_initial_data(self):
        # The previous technique dealt with ""hard-coded"" initial data, but it's also
        # possible to specify initial data after you've already created the Form class
        # (i.e., at runtime). Use the 'initial' parameter to the Form constructor. This
        # should be a dictionary containing initial values for one or more fields in the
        # form, keyed by field name.
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

        # Here, we're not submitting any data, so the initial value will be displayed.)
        p = UserRegistration(initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration(initial={'username': 'stephane'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""stephane"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # The 'initial' parameter is meaningless if you pass data.
        p = UserRegistration({}, initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': ''}, initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': 'foo'}, initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(), """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # A dynamic 'initial' value is *not* used as a fallback if data is not provided.
        # In this example, we don't provide a value for 'username', and the form raises a
        # validation error rather than using the initial value for 'username'.
        p = UserRegistration({'password': 'secret'}, initial={'username': 'django'})
        self.assertEqual(p.errors['username'], ['This field is required.'])
        self.assertFalse(p.is_valid())

        # If a Form defines 'initial' *and* 'initial' is passed as a parameter to Form(),
        # then the latter will get precedence.
        class UserRegistration(Form):
            username = CharField(max_length=10, initial='django')
            password = CharField(widget=PasswordInput)

        p = UserRegistration(initial={'username': 'babik'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""babik"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )

    def test_callable_initial_data(self):
        # The previous technique dealt with raw values as initial data, but it's also
        # possible to specify callable data.
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)
            options = MultipleChoiceField(choices=[('f', 'foo'), ('b', 'bar'), ('w', 'whiz')])

        # We need to define functions that get called later.)
        def initial_django():
            return 'django'

        def initial_stephane():
            return 'stephane'

        def initial_options():
            return ['f', 'b']

        def initial_other_options():
            return ['b', 'w']

        # Here, we're not submitting any data, so the initial value will be displayed.)
        p = UserRegistration(initial={'username': initial_django, 'options': initial_options}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"" selected>foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )

        # The 'initial' parameter is meaningless if you pass data.
        p = UserRegistration({}, initial={'username': initial_django, 'options': initial_options}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Options: <select multiple name=""options"" required>
<option value=""f"">foo</option>
<option value=""b"">bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )
        p = UserRegistration({'username': ''}, initial={'username': initial_django}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
            Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Options: <select multiple name=""options"" required>
<option value=""f"">foo</option>
<option value=""b"">bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )
        p = UserRegistration(
            {'username': 'foo', 'options': ['f', 'b']}, initial={'username': initial_django}, auto_id=False
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"" selected>foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )

        # A callable 'initial' value is *not* used as a fallback if data is not provided.
        # In this example, we don't provide a value for 'username', and the form raises a
        # validation error rather than using the initial value for 'username'.
        p = UserRegistration({'password': 'secret'}, initial={'username': initial_django, 'options': initial_options})
        self.assertEqual(p.errors['username'], ['This field is required.'])
        self.assertFalse(p.is_valid())

        # If a Form defines 'initial' *and* 'initial' is passed as a parameter to Form(),
        # then the latter will get precedence.
        class UserRegistration(Form):
            username = CharField(max_length=10, initial=initial_django)
            password = CharField(widget=PasswordInput)
            options = MultipleChoiceField(
                choices=[('f', 'foo'), ('b', 'bar'), ('w', 'whiz')],
                initial=initial_other_options,
            )

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"">foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"" selected>whiz</option>
</select></li>""""""
        )
        p = UserRegistration(initial={'username': initial_stephane, 'options': initial_options}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""stephane"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"" selected>foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )

    def test_get_initial_for_field(self):
        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)

        class PersonForm(Form):
            first_name = CharField(initial='John')
            last_name = CharField(initial='Doe')
            age = IntegerField()
            occupation = CharField(initial=lambda: 'Unknown')
            dt_fixed = DateTimeField(initial=now)
            dt_callable = DateTimeField(initial=lambda: now)

        form = PersonForm(initial={'first_name': 'Jane'})
        cases = [
            ('age', None),
            ('last_name', 'Doe'),
            # Form.initial overrides Field.initial.
            ('first_name', 'Jane'),
            # Callables are evaluated.
            ('occupation', 'Unknown'),
            # Microseconds are removed from datetimes.
            ('dt_fixed', datetime.datetime(2006, 10, 25, 14, 30, 45)),
            ('dt_callable', datetime.datetime(2006, 10, 25, 14, 30, 45)),
        ]
        for field_name, expected in cases:
            with self.subTest(field_name=field_name):
                field = form.fields[field_name]
                actual = form.get_initial_for_field(field, field_name)
                self.assertEqual(actual, expected)

    def test_changed_data(self):
        class Person(Form):
            first_name = CharField(initial='Hans')
            last_name = CharField(initial='Greatel')
            birthday = DateField(initial=datetime.date(1974, 8, 16))

        p = Person(data={'first_name': 'Hans', 'last_name': 'Scrmbl', 'birthday': '1974-08-16'})
        self.assertTrue(p.is_valid())
        self.assertNotIn('first_name', p.changed_data)
        self.assertIn('last_name', p.changed_data)
        self.assertNotIn('birthday', p.changed_data)

        # A field raising ValidationError is always in changed_data
        class PedanticField(forms.Field):
            def to_python(self, value):
                raise ValidationError('Whatever')

        class Person2(Person):
            pedantic = PedanticField(initial='whatever', show_hidden_initial=True)

        p = Person2(data={
            'first_name': 'Hans', 'last_name': 'Scrmbl', 'birthday': '1974-08-16',
            'initial-pedantic': 'whatever',
        })
        self.assertFalse(p.is_valid())
        self.assertIn('pedantic', p.changed_data)

    def test_boundfield_values(self):
        # It's possible to get to the value which would be used for rendering
        # the widget for a field by using the BoundField's value method.

        class UserRegistration(Form):
            username = CharField(max_length=10, initial='djangonaut')
            password = CharField(widget=PasswordInput)

        unbound = UserRegistration()
        bound = UserRegistration({'password': 'foo'})
        self.assertIsNone(bound['username'].value())
        self.assertEqual(unbound['username'].value(), 'djangonaut')
        self.assertEqual(bound['password'].value(), 'foo')
        self.assertIsNone(unbound['password'].value())

    def test_boundfield_initial_called_once(self):
        """"""
        Multiple calls to BoundField().value() in an unbound form should return
        the same result each time (#24391).
        """"""
        class MyForm(Form):
            name = CharField(max_length=10, initial=uuid.uuid4)

        form = MyForm()
        name = form['name']
        self.assertEqual(name.value(), name.value())
        # BoundField is also cached
        self.assertIs(form['name'], name)

    def test_boundfield_value_disabled_callable_initial(self):
        class PersonForm(Form):
            name = CharField(initial=lambda: 'John Doe', disabled=True)

        # Without form data.
        form = PersonForm()
        self.assertEqual(form['name'].value(), 'John Doe')

        # With form data. As the field is disabled, the value should not be
        # affected by the form data.
        form = PersonForm({})
        self.assertEqual(form['name'].value(), 'John Doe')

    def test_custom_boundfield(self):
        class CustomField(CharField):
            def get_bound_field(self, form, name):
                return (form, name)

        class SampleForm(Form):
            name = CustomField()

        f = SampleForm()
        self.assertEqual(f['name'], (f, 'name'))

    def test_initial_datetime_values(self):
        now = datetime.datetime.now()
        # Nix microseconds (since they should be ignored). #22502
        now_no_ms = now.replace(microsecond=0)
        if now == now_no_ms:
            now = now.replace(microsecond=1)

        def delayed_now():
            return now

        def delayed_now_time():
            return now.time()

        class HiddenInputWithoutMicrosec(HiddenInput):
            supports_microseconds = False

        class TextInputWithoutMicrosec(TextInput):
            supports_microseconds = False

        class DateTimeForm(Form):
            # Test a non-callable.
            fixed = DateTimeField(initial=now)
            auto_timestamp = DateTimeField(initial=delayed_now)
            auto_time_only = TimeField(initial=delayed_now_time)
            supports_microseconds = DateTimeField(initial=delayed_now, widget=TextInput)
            hi_default_microsec = DateTimeField(initial=delayed_now, widget=HiddenInput)
            hi_without_microsec = DateTimeField(initial=delayed_now, widget=HiddenInputWithoutMicrosec)
            ti_without_microsec = DateTimeField(initial=delayed_now, widget=TextInputWithoutMicrosec)

        unbound = DateTimeForm()
        cases = [
            ('fixed', now_no_ms),
            ('auto_timestamp', now_no_ms),
            ('auto_time_only', now_no_ms.time()),
            ('supports_microseconds', now),
            ('hi_default_microsec', now),
            ('hi_without_microsec', now_no_ms),
            ('ti_without_microsec', now_no_ms),
        ]
        for field_name, expected in cases:
            with self.subTest(field_name=field_name):
                actual = unbound[field_name].value()
                self.assertEqual(actual, expected)
                # Also check get_initial_for_field().
                field = unbound.fields[field_name]
                actual = unbound.get_initial_for_field(field, field_name)
                self.assertEqual(actual, expected)

    def get_datetime_form_with_callable_initial(self, disabled, microseconds=0):
        class FakeTime:
            def __init__(self):
                self.elapsed_seconds = 0

            def now(self):
                self.elapsed_seconds += 1
                return datetime.datetime(
                    2006, 10, 25, 14, 30, 45 + self.elapsed_seconds,
                    microseconds,
                )

        class DateTimeForm(forms.Form):
            dt = DateTimeField(initial=FakeTime().now, disabled=disabled)

        return DateTimeForm({})

    def test_datetime_clean_disabled_callable_initial_microseconds(self):
        """"""
        Cleaning a form with a disabled DateTimeField and callable initial
        removes microseconds.
        """"""
        form = self.get_datetime_form_with_callable_initial(
            disabled=True, microseconds=123456,
        )
        self.assertEqual(form.errors, {})
        self.assertEqual(form.cleaned_data, {
            'dt': datetime.datetime(2006, 10, 25, 14, 30, 46),
        })

    def test_datetime_clean_disabled_callable_initial_bound_field(self):
        """"""
        The cleaned value for a form with a disabled DateTimeField and callable
        initial matches the bound field's cached initial value.
        """"""
        form = self.get_datetime_form_with_callable_initial(disabled=True)
        self.assertEqual(form.errors, {})
        cleaned = form.cleaned_data['dt']
        self.assertEqual(cleaned, datetime.datetime(2006, 10, 25, 14, 30, 46))
        bf = form['dt']
        self.assertEqual(cleaned, bf.initial)

    def test_datetime_changed_data_callable_with_microseconds(self):
        class DateTimeForm(forms.Form):
            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)

        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})
        self.assertEqual(form.changed_data, [])

    def test_help_text(self):
        # You can specify descriptive text for a field by using the 'help_text' argument)
        class UserRegistration(Form):
            username = CharField(max_length=10, help_text='e.g., user@example.com')
            password = CharField(widget=PasswordInput, help_text='Wählen Sie mit Bedacht.')

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></li>
<li>Password: <input type=""password"" name=""password"" required>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p>Username: <input type=""text"" name=""username"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></p>
<p>Password: <input type=""password"" name=""password"" required>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></p>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th>Username:</th><td><input type=""text"" name=""username"" maxlength=""10"" required><br>
<span class=""helptext"">e.g., user@example.com</span></td></tr>
<tr><th>Password:</th><td><input type=""password"" name=""password"" required><br>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></td></tr>""""""
        )

        # The help text is displayed whether or not data is provided for the form.
        p = UserRegistration({'username': 'foo'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></li>""""""
        )

        # help_text is not displayed for hidden fields. It can be used for documentation
        # purposes, though.
        class UserRegistration(Form):
            username = CharField(max_length=10, help_text='e.g., user@example.com')
            password = CharField(widget=PasswordInput)
            next = CharField(widget=HiddenInput, initial='/', help_text='Redirect destination')

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></li>
<li>Password: <input type=""password"" name=""password"" required>
<input type=""hidden"" name=""next"" value=""/""></li>""""""
        )

    def test_subclassing_forms(self):
        # You can subclass a Form to add fields. The resulting form subclass will have
        # all of the fields of the parent Form, plus whichever fields you define in the
        # subclass.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

        class Musician(Person):
            instrument = CharField()

        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>""""""
        )
        m = Musician(auto_id=False)
        self.assertHTMLEqual(
            m.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>
<li>Instrument: <input type=""text"" name=""instrument"" required></li>""""""
        )

        # Yes, you can subclass multiple forms. The fields are added in the order in
        # which the parent classes are listed.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

        class Instrument(Form):
            instrument = CharField()

        class Beatle(Person, Instrument):
            haircut_type = CharField()

        b = Beatle(auto_id=False)
        self.assertHTMLEqual(b.as_ul(), """"""<li>Instrument: <input type=""text"" name=""instrument"" required></li>
<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>
<li>Haircut type: <input type=""text"" name=""haircut_type"" required></li>"""""")

    def test_forms_with_prefixes(self):
        # Sometimes it's necessary to have multiple forms display on the same HTML page,
        # or multiple copies of the same form. We can accomplish this with form prefixes.
        # Pass the keyword argument 'prefix' to the Form constructor to use this feature.
        # This value will be prepended to each HTML form field name. One way to think
        # about this is ""namespaces for HTML forms"". Notice that in the data argument,
        # each field's key has the prefix, in this case 'person1', prepended to the
        # actual field name.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

        data = {
            'person1-first_name': 'John',
            'person1-last_name': 'Lennon',
            'person1-birthday': '1940-10-9'
        }
        p = Person(data, prefix='person1')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_person1-first_name"">First name:</label>
<input type=""text"" name=""person1-first_name"" value=""John"" id=""id_person1-first_name"" required></li>
<li><label for=""id_person1-last_name"">Last name:</label>
<input type=""text"" name=""person1-last_name"" value=""Lennon"" id=""id_person1-last_name"" required></li>
<li><label for=""id_person1-birthday"">Birthday:</label>
<input type=""text"" name=""person1-birthday"" value=""1940-10-9"" id=""id_person1-birthday"" required></li>""""""
        )
        self.assertHTMLEqual(
            str(p['first_name']),
            '<input type=""text"" name=""person1-first_name"" value=""John"" id=""id_person1-first_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['last_name']),
            '<input type=""text"" name=""person1-last_name"" value=""Lennon"" id=""id_person1-last_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['birthday']),
            '<input type=""text"" name=""person1-birthday"" value=""1940-10-9"" id=""id_person1-birthday"" required>'
        )
        self.assertEqual(p.errors, {})
        self.assertTrue(p.is_valid())
        self.assertEqual(p.cleaned_data['first_name'], 'John')
        self.assertEqual(p.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p.cleaned_data['birthday'], datetime.date(1940, 10, 9))

        # Let's try submitting some bad data to make sure form.errors and field.errors
        # work as expected.
        data = {
            'person1-first_name': '',
            'person1-last_name': '',
            'person1-birthday': ''
        }
        p = Person(data, prefix='person1')
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['last_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])
        self.assertEqual(p['first_name'].errors, ['This field is required.'])
        # Accessing a nonexistent field.
        with self.assertRaises(KeyError):
            p['person1-first_name'].errors

        # In this example, the data doesn't have a prefix, but the form requires it, so
        # the form doesn't ""see"" the fields.
        data = {
            'first_name': 'John',
            'last_name': 'Lennon',
            'birthday': '1940-10-9'
        }
        p = Person(data, prefix='person1')
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['last_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])

        # With prefixes, a single data dictionary can hold data for multiple instances
        # of the same form.
        data = {
            'person1-first_name': 'John',
            'person1-last_name': 'Lennon',
            'person1-birthday': '1940-10-9',
            'person2-first_name': 'Jim',
            'person2-last_name': 'Morrison',
            'person2-birthday': '1943-12-8'
        }
        p1 = Person(data, prefix='person1')
        self.assertTrue(p1.is_valid())
        self.assertEqual(p1.cleaned_data['first_name'], 'John')
        self.assertEqual(p1.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p1.cleaned_data['birthday'], datetime.date(1940, 10, 9))
        p2 = Person(data, prefix='person2')
        self.assertTrue(p2.is_valid())
        self.assertEqual(p2.cleaned_data['first_name'], 'Jim')
        self.assertEqual(p2.cleaned_data['last_name'], 'Morrison')
        self.assertEqual(p2.cleaned_data['birthday'], datetime.date(1943, 12, 8))

        # By default, forms append a hyphen between the prefix and the field name, but a
        # form can alter that behavior by implementing the add_prefix() method. This
        # method takes a field name and returns the prefixed field, according to
        # self.prefix.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

            def add_prefix(self, field_name):
                return '%s-prefix-%s' % (self.prefix, field_name) if self.prefix else field_name

        p = Person(prefix='foo')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_foo-prefix-first_name"">First name:</label>
<input type=""text"" name=""foo-prefix-first_name"" id=""id_foo-prefix-first_name"" required></li>
<li><label for=""id_foo-prefix-last_name"">Last name:</label>
<input type=""text"" name=""foo-prefix-last_name"" id=""id_foo-prefix-last_name"" required></li>
<li><label for=""id_foo-prefix-birthday"">Birthday:</label>
<input type=""text"" name=""foo-prefix-birthday"" id=""id_foo-prefix-birthday"" required></li>""""""
        )
        data = {
            'foo-prefix-first_name': 'John',
            'foo-prefix-last_name': 'Lennon',
            'foo-prefix-birthday': '1940-10-9'
        }
        p = Person(data, prefix='foo')
        self.assertTrue(p.is_valid())
        self.assertEqual(p.cleaned_data['first_name'], 'John')
        self.assertEqual(p.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p.cleaned_data['birthday'], datetime.date(1940, 10, 9))

    def test_class_prefix(self):
        # Prefix can be also specified at the class level.
        class Person(Form):
            first_name = CharField()
            prefix = 'foo'

        p = Person()
        self.assertEqual(p.prefix, 'foo')

        p = Person(prefix='bar')
        self.assertEqual(p.prefix, 'bar')

    def test_forms_with_null_boolean(self):
        # NullBooleanField is a bit of a special case because its presentation (widget)
        # is different than its data. This is handled transparently, though.
        class Person(Form):
            name = CharField()
            is_cool = NullBooleanField()

        p = Person({'name': 'Joe'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': '1'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': '2'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"" selected>Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': '3'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"" selected>No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': True}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"" selected>Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': False}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"" selected>No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': 'unknown'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': 'true'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"" selected>Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': 'false'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"" selected>No</option>
</select>"""""")

    def test_forms_with_file_fields(self):
        # FileFields are a special case because they take their data from the request.FILES,
        # not request.POST.
        class FileForm(Form):
            file1 = FileField()

        f = FileForm(auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1"" required></td></tr>',
        )

        f = FileForm(data={}, files={}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<ul class=""errorlist""><li>This field is required.</li></ul>'
            '<input type=""file"" name=""file1"" required></td></tr>'
        )

        f = FileForm(data={}, files={'file1': SimpleUploadedFile('name', b'')}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<ul class=""errorlist""><li>The submitted file is empty.</li></ul>'
            '<input type=""file"" name=""file1"" required></td></tr>'
        )

        f = FileForm(data={}, files={'file1': 'something that is not a file'}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<ul class=""errorlist""><li>No file was submitted. Check the '
            'encoding type on the form.</li></ul>'
            '<input type=""file"" name=""file1"" required></td></tr>'
        )

        f = FileForm(data={}, files={'file1': SimpleUploadedFile('name', b'some content')}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1"" required></td></tr>',
        )
        self.assertTrue(f.is_valid())

        file1 = SimpleUploadedFile('我隻氣墊船裝滿晒鱔.txt', 'मेरी मँडराने वाली नाव सर्पमीनों से भरी ह'.encode())
        f = FileForm(data={}, files={'file1': file1}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1"" required></td></tr>',
        )

        # A required file field with initial data should not contain the
        # required HTML attribute. The file input is left blank by the user to
        # keep the existing, initial value.
        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1""></td></tr>',
        )

    def test_filefield_initial_callable(self):
        class FileForm(forms.Form):
            file1 = forms.FileField(initial=lambda: 'resume.txt')

        f = FileForm({})
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['file1'], 'resume.txt')

    def test_filefield_with_fileinput_required(self):
        class FileForm(Form):
            file1 = forms.FileField(widget=FileInput)

        f = FileForm(auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<input type=""file"" name=""file1"" required></td></tr>',
        )
        # A required file field with initial data doesn't contain the required
        # HTML attribute. The file input is left blank by the user to keep the
        # existing, initial value.
        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1""></td></tr>',
        )

    def test_empty_permitted(self):
        # Sometimes (pretty much in formsets) we want to allow a form to pass validation
        # if it is completely empty. We can accomplish this by using the empty_permitted
        # argument to a form constructor.
        class SongForm(Form):
            artist = CharField()
            name = CharField()

        # First let's show what happens id empty_permitted=False (the default):
        data = {'artist': '', 'song': ''}
        form = SongForm(data, empty_permitted=False)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {'name': ['This field is required.'], 'artist': ['This field is required.']})
        self.assertEqual(form.cleaned_data, {})

        # Now let's show what happens when empty_permitted=True and the form is empty.
        form = SongForm(data, empty_permitted=True, use_required_attribute=False)
        self.assertTrue(form.is_valid())
        self.assertEqual(form.errors, {})
        self.assertEqual(form.cleaned_data, {})

        # But if we fill in data for one of the fields, the form is no longer empty and
        # the whole thing must pass validation.
        data = {'artist': 'The Doors', 'song': ''}
        form = SongForm(data, empty_permitted=False)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {'name': ['This field is required.']})
        self.assertEqual(form.cleaned_data, {'artist': 'The Doors'})

        # If a field is not given in the data then None is returned for its data. Lets
        # make sure that when checking for empty_permitted that None is treated
        # accordingly.
        data = {'artist': None, 'song': ''}
        form = SongForm(data, empty_permitted=True, use_required_attribute=False)
        self.assertTrue(form.is_valid())

        # However, we *really* need to be sure we are checking for None as any data in
        # initial that returns False on a boolean call needs to be treated literally.
        class PriceForm(Form):
            amount = FloatField()
            qty = IntegerField()

        data = {'amount': '0.0', 'qty': ''}
        form = PriceForm(data, initial={'amount': 0.0}, empty_permitted=True, use_required_attribute=False)
        self.assertTrue(form.is_valid())

    def test_empty_permitted_and_use_required_attribute(self):
        msg = (
            'The empty_permitted and use_required_attribute arguments may not '
            'both be True.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            Person(empty_permitted=True, use_required_attribute=True)

    def test_extracting_hidden_and_visible(self):
        class SongForm(Form):
            token = CharField(widget=HiddenInput)
            artist = CharField()
            name = CharField()

        form = SongForm()
        self.assertEqual([f.name for f in form.hidden_fields()], ['token'])
        self.assertEqual([f.name for f in form.visible_fields()], ['artist', 'name'])

    def test_hidden_initial_gets_id(self):
        class MyForm(Form):
            field1 = CharField(max_length=50, show_hidden_initial=True)

        self.assertHTMLEqual(
            MyForm().as_table(),
            '<tr><th><label for=""id_field1"">Field1:</label></th>'
            '<td><input id=""id_field1"" type=""text"" name=""field1"" maxlength=""50"" required>'
            '<input type=""hidden"" name=""initial-field1"" id=""initial-id_field1""></td></tr>'
        )

    def test_error_html_required_html_classes(self):
        class Person(Form):
            name = CharField()
            is_cool = NullBooleanField()
            email = EmailField(required=False)
            age = IntegerField()

        p = Person({})
        p.error_css_class = 'error'
        p.required_css_class = 'required'

        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li class=""required error""><ul class=""errorlist""><li>This field is required.</li></ul>
<label class=""required"" for=""id_name"">Name:</label> <input type=""text"" name=""name"" id=""id_name"" required></li>
<li class=""required""><label class=""required"" for=""id_is_cool"">Is cool:</label>
<select name=""is_cool"" id=""id_is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select></li>
<li><label for=""id_email"">Email:</label> <input type=""email"" name=""email"" id=""id_email""></li>
<li class=""required error""><ul class=""errorlist""><li>This field is required.</li></ul>
<label class=""required"" for=""id_age"">Age:</label> <input type=""number"" name=""age"" id=""id_age"" required></li>""""""
        )

        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist""><li>This field is required.</li></ul>
<p class=""required error""><label class=""required"" for=""id_name"">Name:</label>
<input type=""text"" name=""name"" id=""id_name"" required></p>
<p class=""required""><label class=""required"" for=""id_is_cool"">Is cool:</label>
<select name=""is_cool"" id=""id_is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select></p>
<p><label for=""id_email"">Email:</label> <input type=""email"" name=""email"" id=""id_email""></p>
<ul class=""errorlist""><li>This field is required.</li></ul>
<p class=""required error""><label class=""required"" for=""id_age"">Age:</label>
<input type=""number"" name=""age"" id=""id_age"" required></p>""""""
        )

        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr class=""required error"">
<th><label class=""required"" for=""id_name"">Name:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""name"" id=""id_name"" required></td></tr>
<tr class=""required""><th><label class=""required"" for=""id_is_cool"">Is cool:</label></th>
<td><select name=""is_cool"" id=""id_is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select></td></tr>
<tr><th><label for=""id_email"">Email:</label></th><td>
<input type=""email"" name=""email"" id=""id_email""></td></tr>
<tr class=""required error""><th><label class=""required"" for=""id_age"">Age:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""number"" name=""age"" id=""id_age"" required></td></tr>""""""
        )

    def test_label_has_required_css_class(self):
        """"""
        required_css_class is added to label_tag() and legend_tag() of required
        fields.
        """"""
        class SomeForm(Form):
            required_css_class = 'required'
            field = CharField(max_length=10)
            field2 = IntegerField(required=False)

        f = SomeForm({'field': 'test'})
        self.assertHTMLEqual(f['field'].label_tag(), '<label for=""id_field"" class=""required"">Field:</label>')
        self.assertHTMLEqual(
            f['field'].legend_tag(),
            '<legend for=""id_field"" class=""required"">Field:</legend>',
        )
        self.assertHTMLEqual(
            f['field'].label_tag(attrs={'class': 'foo'}),
            '<label for=""id_field"" class=""foo required"">Field:</label>'
        )
        self.assertHTMLEqual(
            f['field'].legend_tag(attrs={'class': 'foo'}),
            '<legend for=""id_field"" class=""foo required"">Field:</legend>'
        )
        self.assertHTMLEqual(f['field2'].label_tag(), '<label for=""id_field2"">Field2:</label>')
        self.assertHTMLEqual(
            f['field2'].legend_tag(),
            '<legend for=""id_field2"">Field2:</legend>',
        )

    def test_label_split_datetime_not_displayed(self):
        class EventForm(Form):
            happened_at = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)

        form = EventForm()
        self.assertHTMLEqual(
            form.as_ul(),
            '<input type=""hidden"" name=""happened_at_0"" id=""id_happened_at_0"">'
            '<input type=""hidden"" name=""happened_at_1"" id=""id_happened_at_1"">'
        )

    def test_multivalue_field_validation(self):
        def bad_names(value):
            if value == 'bad value':
                raise ValidationError('bad value not allowed')

        class NameField(MultiValueField):
            def __init__(self, fields=(), *args, **kwargs):
                fields = (CharField(label='First name', max_length=10),
                          CharField(label='Last name', max_length=10))
                super().__init__(fields=fields, *args, **kwargs)

            def compress(self, data_list):
                return ' '.join(data_list)

        class NameForm(Form):
            name = NameField(validators=[bad_names])

        form = NameForm(data={'name': ['bad', 'value']})
        form.full_clean()
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {'name': ['bad value not allowed']})
        form = NameForm(data={'name': ['should be overly', 'long for the field names']})
        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors, {
                'name': [
                    'Ensure this value has at most 10 characters (it has 16).',
                    'Ensure this value has at most 10 characters (it has 24).',
                ],
            }
        )
        form = NameForm(data={'name': ['fname', 'lname']})
        self.assertTrue(form.is_valid())
        self.assertEqual(form.cleaned_data, {'name': 'fname lname'})

    def test_multivalue_deep_copy(self):
        """"""
        #19298 -- MultiValueField needs to override the default as it needs
        to deep-copy subfields:
        """"""
        class ChoicesField(MultiValueField):
            def __init__(self, fields=(), *args, **kwargs):
                fields = (
                    ChoiceField(label='Rank', choices=((1, 1), (2, 2))),
                    CharField(label='Name', max_length=10),
                )
                super().__init__(fields=fields, *args, **kwargs)

        field = ChoicesField()
        field2 = copy.deepcopy(field)
        self.assertIsInstance(field2, ChoicesField)
        self.assertIsNot(field2.fields, field.fields)
        self.assertIsNot(field2.fields[0].choices, field.fields[0].choices)

    def test_multivalue_initial_data(self):
        """"""
        #23674 -- invalid initial data should not break form.changed_data()
        """"""
        class DateAgeField(MultiValueField):
            def __init__(self, fields=(), *args, **kwargs):
                fields = (DateField(label=""Date""), IntegerField(label=""Age""))
                super().__init__(fields=fields, *args, **kwargs)

        class DateAgeForm(Form):
            date_age = DateAgeField()

        data = {""date_age"": [""1998-12-06"", 16]}
        form = DateAgeForm(data, initial={""date_age"": [""200-10-10"", 14]})
        self.assertTrue(form.has_changed())

    def test_multivalue_optional_subfields(self):
        class PhoneField(MultiValueField):
            def __init__(self, *args, **kwargs):
                fields = (
                    CharField(label='Country Code', validators=[
                        RegexValidator(r'^\+[0-9]{1,2}$', message='Enter a valid country code.')]),
                    CharField(label='Phone Number'),
                    CharField(label='Extension', error_messages={'incomplete': 'Enter an extension.'}),
                    CharField(label='Label', required=False, help_text='E.g. home, work.'),
                )
                super().__init__(fields, *args, **kwargs)

            def compress(self, data_list):
                if data_list:
                    return '%s.%s ext. %s (label: %s)' % tuple(data_list)
                return None

        # An empty value for any field will raise a `required` error on a
        # required `MultiValueField`.
        f = PhoneField()
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean('')
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(None)
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean([])
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(['+61'])
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(['+61', '287654321', '123'])
        self.assertEqual('+61.287654321 ext. 123 (label: Home)', f.clean(['+61', '287654321', '123', 'Home']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

        # Empty values for fields will NOT raise a `required` error on an
        # optional `MultiValueField`
        f = PhoneField(required=False)
        self.assertIsNone(f.clean(''))
        self.assertIsNone(f.clean(None))
        self.assertIsNone(f.clean([]))
        self.assertEqual('+61. ext.  (label: )', f.clean(['+61']))
        self.assertEqual('+61.287654321 ext. 123 (label: )', f.clean(['+61', '287654321', '123']))
        self.assertEqual('+61.287654321 ext. 123 (label: Home)', f.clean(['+61', '287654321', '123', 'Home']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

        # For a required `MultiValueField` with `require_all_fields=False`, a
        # `required` error will only be raised if all fields are empty. Fields
        # can individually be required or optional. An empty value for any
        # required field will raise an `incomplete` error.
        f = PhoneField(require_all_fields=False)
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean('')
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(None)
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean([])
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.'""):
            f.clean(['+61'])
        self.assertEqual('+61.287654321 ext. 123 (label: )', f.clean(['+61', '287654321', '123']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.', 'Enter an extension.'""):
            f.clean(['', '', '', 'Home'])
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

        # For an optional `MultiValueField` with `require_all_fields=False`, we
        # don't get any `required` error but we still get `incomplete` errors.
        f = PhoneField(required=False, require_all_fields=False)
        self.assertIsNone(f.clean(''))
        self.assertIsNone(f.clean(None))
        self.assertIsNone(f.clean([]))
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.'""):
            f.clean(['+61'])
        self.assertEqual('+61.287654321 ext. 123 (label: )', f.clean(['+61', '287654321', '123']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.', 'Enter an extension.'""):
            f.clean(['', '', '', 'Home'])
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

    def test_multivalue_optional_subfields_rendering(self):
        class PhoneWidget(MultiWidget):
            def __init__(self, attrs=None):
                widgets = [TextInput(), TextInput()]
                super().__init__(widgets, attrs)

            def decompress(self, value):
                return [None, None]

        class PhoneField(MultiValueField):
            def __init__(self, *args, **kwargs):
                fields = [CharField(), CharField(required=False)]
                super().__init__(fields, *args, **kwargs)

        class PhoneForm(Form):
            phone1 = PhoneField(widget=PhoneWidget)
            phone2 = PhoneField(widget=PhoneWidget, required=False)
            phone3 = PhoneField(widget=PhoneWidget, require_all_fields=False)
            phone4 = PhoneField(
                widget=PhoneWidget, required=False, require_all_fields=False,
            )

        form = PhoneForm(auto_id=False)
        self.assertHTMLEqual(
            form.as_p(),
            """"""
            <p>Phone1:<input type=""text"" name=""phone1_0"" required><input type=""text"" name=""phone1_1"" required></p>
            <p>Phone2:<input type=""text"" name=""phone2_0""><input type=""text"" name=""phone2_1""></p>
            <p>Phone3:<input type=""text"" name=""phone3_0"" required><input type=""text"" name=""phone3_1""></p>
            <p>Phone4:<input type=""text"" name=""phone4_0""><input type=""text"" name=""phone4_1""></p>
            """""",
        )

    def test_custom_empty_values(self):
        """"""
        Form fields can customize what is considered as an empty value
        for themselves (#19997).
        """"""
        class CustomJSONField(CharField):
            empty_values = [None, '']

            def to_python(self, value):
                # Fake json.loads
                if value == '{}':
                    return {}
                return super().to_python(value)

        class JSONForm(forms.Form):
            json = CustomJSONField()

        form = JSONForm(data={'json': '{}'})
        form.full_clean()
        self.assertEqual(form.cleaned_data, {'json': {}})

    def test_boundfield_label_tag(self):
        class SomeForm(Form):
            field = CharField()
        boundfield = SomeForm()['field']

        testcases = [  # (args, kwargs, expected)
            # without anything: just print the <label>
            ((), {}, '<%(tag)s for=""id_field"">Field:</%(tag)s>'),

            # passing just one argument: overrides the field's label
            (('custom',), {}, '<%(tag)s for=""id_field"">custom:</%(tag)s>'),

            # the overridden label is escaped
            (('custom&',), {}, '<%(tag)s for=""id_field"">custom&amp;:</%(tag)s>'),
            ((mark_safe('custom&'),), {}, '<%(tag)s for=""id_field"">custom&:</%(tag)s>'),

            # Passing attrs to add extra attributes on the <label>
            (
                (),
                {'attrs': {'class': 'pretty'}},
                '<%(tag)s for=""id_field"" class=""pretty"">Field:</%(tag)s>',
            ),
        ]

        for args, kwargs, expected in testcases:
            with self.subTest(args=args, kwargs=kwargs):
                self.assertHTMLEqual(
                    boundfield.label_tag(*args, **kwargs),
                    expected % {'tag': 'label'},
                )
                self.assertHTMLEqual(
                    boundfield.legend_tag(*args, **kwargs),
                    expected % {'tag': 'legend'},
                )

    def test_boundfield_label_tag_no_id(self):
        """"""
        If a widget has no id, label_tag() and legend_tag() return the text
        with no surrounding <label>.
        """"""
        class SomeForm(Form):
            field = CharField()
        boundfield = SomeForm(auto_id='')['field']

        self.assertHTMLEqual(boundfield.label_tag(), 'Field:')
        self.assertHTMLEqual(boundfield.legend_tag(), 'Field:')
        self.assertHTMLEqual(boundfield.label_tag('Custom&'), 'Custom&amp;:')
        self.assertHTMLEqual(boundfield.legend_tag('Custom&'), 'Custom&amp;:')

    def test_boundfield_label_tag_custom_widget_id_for_label(self):
        class CustomIdForLabelTextInput(TextInput):
            def id_for_label(self, id):
                return 'custom_' + id

        class EmptyIdForLabelTextInput(TextInput):
            def id_for_label(self, id):
                return None

        class SomeForm(Form):
            custom = CharField(widget=CustomIdForLabelTextInput)
            empty = CharField(widget=EmptyIdForLabelTextInput)

        form = SomeForm()
        self.assertHTMLEqual(form['custom'].label_tag(), '<label for=""custom_id_custom"">Custom:</label>')
        self.assertHTMLEqual(
            form['custom'].legend_tag(),
            '<legend for=""custom_id_custom"">Custom:</legend>',
        )
        self.assertHTMLEqual(form['empty'].label_tag(), '<label>Empty:</label>')
        self.assertHTMLEqual(form['empty'].legend_tag(), '<legend>Empty:</legend>')

    def test_boundfield_empty_label(self):
        class SomeForm(Form):
            field = CharField(label='')
        boundfield = SomeForm()['field']

        self.assertHTMLEqual(boundfield.label_tag(), '<label for=""id_field""></label>')
        self.assertHTMLEqual(
            boundfield.legend_tag(),
            '<legend for=""id_field""></legend>',
        )

    def test_boundfield_id_for_label(self):
        class SomeForm(Form):
            field = CharField(label='')

        self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')

    def test_boundfield_id_for_label_override_by_attrs(self):
        """"""
        If an id is provided in `Widget.attrs`, it overrides the generated ID,
        unless it is `None`.
        """"""
        class SomeForm(Form):
            field = CharField(widget=TextInput(attrs={'id': 'myCustomID'}))
            field_none = CharField(widget=TextInput(attrs={'id': None}))

        form = SomeForm()
        self.assertEqual(form['field'].id_for_label, 'myCustomID')
        self.assertEqual(form['field_none'].id_for_label, 'id_field_none')

    def test_boundfield_subwidget_id_for_label(self):
        """"""
        If auto_id is provided when initializing the form, the generated ID in
        subwidgets must reflect that prefix.
        """"""
        class SomeForm(Form):
            field = MultipleChoiceField(
                choices=[('a', 'A'), ('b', 'B')],
                widget=CheckboxSelectMultiple,
            )

        form = SomeForm(auto_id='prefix_%s')
        subwidgets = form['field'].subwidgets
        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')
        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')

    def test_boundfield_widget_type(self):
        class SomeForm(Form):
            first_name = CharField()
            birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)

        f = SomeForm()
        self.assertEqual(f['first_name'].widget_type, 'text')
        self.assertEqual(f['birthday'].widget_type, 'splithiddendatetime')

    def test_boundfield_css_classes(self):
        form = Person()
        field = form['first_name']
        self.assertEqual(field.css_classes(), '')
        self.assertEqual(field.css_classes(extra_classes=''), '')
        self.assertEqual(field.css_classes(extra_classes='test'), 'test')
        self.assertEqual(field.css_classes(extra_classes='test test'), 'test')

    def test_label_suffix_override(self):
        """"""
        BoundField label_suffix (if provided) overrides Form label_suffix
        """"""
        class SomeForm(Form):
            field = CharField()
        boundfield = SomeForm(label_suffix='!')['field']

        self.assertHTMLEqual(boundfield.label_tag(label_suffix='$'), '<label for=""id_field"">Field$</label>')
        self.assertHTMLEqual(
            boundfield.legend_tag(label_suffix='$'),
            '<legend for=""id_field"">Field$</legend>',
        )

    def test_error_dict(self):
        class MyForm(Form):
            foo = CharField()
            bar = CharField()

            def clean(self):
                raise ValidationError('Non-field error.', code='secret', params={'a': 1, 'b': 2})

        form = MyForm({})
        self.assertIs(form.is_valid(), False)

        errors = form.errors.as_text()
        control = [
            '* foo\n  * This field is required.',
            '* bar\n  * This field is required.',
            '* __all__\n  * Non-field error.',
        ]
        for error in control:
            self.assertIn(error, errors)

        errors = form.errors.as_ul()
        control = [
            '<li>foo<ul class=""errorlist""><li>This field is required.</li></ul></li>',
            '<li>bar<ul class=""errorlist""><li>This field is required.</li></ul></li>',
            '<li>__all__<ul class=""errorlist nonfield""><li>Non-field error.</li></ul></li>',
        ]
        for error in control:
            self.assertInHTML(error, errors)

        errors = form.errors.get_json_data()
        control = {
            'foo': [{'code': 'required', 'message': 'This field is required.'}],
            'bar': [{'code': 'required', 'message': 'This field is required.'}],
            '__all__': [{'code': 'secret', 'message': 'Non-field error.'}]
        }
        self.assertEqual(errors, control)
        self.assertEqual(json.dumps(errors), form.errors.as_json())

    def test_error_dict_as_json_escape_html(self):
        """"""#21962 - adding html escape flag to ErrorDict""""""
        class MyForm(Form):
            foo = CharField()
            bar = CharField()

            def clean(self):
                raise ValidationError(
                    '<p>Non-field error.</p>',
                    code='secret',
                    params={'a': 1, 'b': 2},
                )

        control = {
            'foo': [{'code': 'required', 'message': 'This field is required.'}],
            'bar': [{'code': 'required', 'message': 'This field is required.'}],
            '__all__': [{'code': 'secret', 'message': '<p>Non-field error.</p>'}]
        }

        form = MyForm({})
        self.assertFalse(form.is_valid())

        errors = json.loads(form.errors.as_json())
        self.assertEqual(errors, control)

        escaped_error = '&lt;p&gt;Non-field error.&lt;/p&gt;'
        self.assertEqual(
            form.errors.get_json_data(escape_html=True)['__all__'][0]['message'],
            escaped_error
        )
        errors = json.loads(form.errors.as_json(escape_html=True))
        control['__all__'][0]['message'] = escaped_error
        self.assertEqual(errors, control)

    def test_error_list(self):
        e = ErrorList()
        e.append('Foo')
        e.append(ValidationError('Foo%(bar)s', code='foobar', params={'bar': 'bar'}))

        self.assertIsInstance(e, list)
        self.assertIn('Foo', e)
        self.assertIn('Foo', ValidationError(e))

        self.assertEqual(
            e.as_text(),
            '* Foo\n* Foobar'
        )

        self.assertEqual(
            e.as_ul(),
            '<ul class=""errorlist""><li>Foo</li><li>Foobar</li></ul>'
        )

        errors = e.get_json_data()
        self.assertEqual(
            errors,
            [{""message"": ""Foo"", ""code"": """"}, {""message"": ""Foobar"", ""code"": ""foobar""}]
        )
        self.assertEqual(json.dumps(errors), e.as_json())

    def test_error_list_class_not_specified(self):
        e = ErrorList()
        e.append('Foo')
        e.append(ValidationError('Foo%(bar)s', code='foobar', params={'bar': 'bar'}))
        self.assertEqual(
            e.as_ul(),
            '<ul class=""errorlist""><li>Foo</li><li>Foobar</li></ul>'
        )

    def test_error_list_class_has_one_class_specified(self):
        e = ErrorList(error_class='foobar-error-class')
        e.append('Foo')
        e.append(ValidationError('Foo%(bar)s', code='foobar', params={'bar': 'bar'}))
        self.assertEqual(
            e.as_ul(),
            '<ul class=""errorlist foobar-error-class""><li>Foo</li><li>Foobar</li></ul>'
        )

    def test_error_list_with_hidden_field_errors_has_correct_class(self):
        class Person(Form):
            first_name = CharField()
            last_name = CharField(widget=HiddenInput)

        p = Person({'first_name': 'John'})
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist nonfield"">
<li>(Hidden field last_name) This field is required.</li></ul></li><li>
<label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required>
<input id=""id_last_name"" name=""last_name"" type=""hidden""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist nonfield""><li>(Hidden field last_name) This field is required.</li></ul>
<p><label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required>
<input id=""id_last_name"" name=""last_name"" type=""hidden""></p>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><td colspan=""2""><ul class=""errorlist nonfield"">
<li>(Hidden field last_name) This field is required.</li></ul></td></tr>
<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required>
<input id=""id_last_name"" name=""last_name"" type=""hidden""></td></tr>""""""
        )

    def test_error_list_with_non_field_errors_has_correct_class(self):
        class Person(Form):
            first_name = CharField()
            last_name = CharField()

            def clean(self):
                raise ValidationError('Generic validation error')

        p = Person({'first_name': 'John', 'last_name': 'Lennon'})
        self.assertHTMLEqual(
            str(p.non_field_errors()),
            '<ul class=""errorlist nonfield""><li>Generic validation error</li></ul>'
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>
<ul class=""errorlist nonfield""><li>Generic validation error</li></ul></li>
<li><label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required></li>
<li><label for=""id_last_name"">Last name:</label>
<input id=""id_last_name"" name=""last_name"" type=""text"" value=""Lennon"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.non_field_errors().as_text(),
            '* Generic validation error'
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist nonfield""><li>Generic validation error</li></ul>
<p><label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required></p>
<p><label for=""id_last_name"">Last name:</label>
<input id=""id_last_name"" name=""last_name"" type=""text"" value=""Lennon"" required></p>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><td colspan=""2""><ul class=""errorlist nonfield""><li>Generic validation error</li></ul></td></tr>
<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input id=""id_last_name"" name=""last_name"" type=""text"" value=""Lennon"" required></td></tr>""""""
        )

    def test_error_escaping(self):
        class TestForm(Form):
            hidden = CharField(widget=HiddenInput(), required=False)
            visible = CharField()

            def clean_hidden(self):
                raise ValidationError('Foo & ""bar""!')

            clean_visible = clean_hidden

        form = TestForm({'hidden': 'a', 'visible': 'b'})
        form.is_valid()
        self.assertHTMLEqual(
            form.as_ul(),
            '<li><ul class=""errorlist nonfield""><li>(Hidden field hidden) Foo &amp; &quot;bar&quot;!</li></ul></li>'
            '<li><ul class=""errorlist""><li>Foo &amp; &quot;bar&quot;!</li></ul>'
            '<label for=""id_visible"">Visible:</label> '
            '<input type=""text"" name=""visible"" value=""b"" id=""id_visible"" required>'
            '<input type=""hidden"" name=""hidden"" value=""a"" id=""id_hidden""></li>'
        )

    def test_baseform_repr(self):
        """"""
        BaseForm.__repr__() should contain some basic information about the
        form.
        """"""
        p = Person()
        self.assertEqual(repr(p), ""<Person bound=False, valid=Unknown, fields=(first_name;last_name;birthday)>"")
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'})
        self.assertEqual(repr(p), ""<Person bound=True, valid=Unknown, fields=(first_name;last_name;birthday)>"")
        p.is_valid()
        self.assertEqual(repr(p), ""<Person bound=True, valid=True, fields=(first_name;last_name;birthday)>"")
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': 'fakedate'})
        p.is_valid()
        self.assertEqual(repr(p), ""<Person bound=True, valid=False, fields=(first_name;last_name;birthday)>"")

    def test_baseform_repr_dont_trigger_validation(self):
        """"""
        BaseForm.__repr__() shouldn't trigger the form validation.
        """"""
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': 'fakedate'})
        repr(p)
        with self.assertRaises(AttributeError):
            p.cleaned_data
        self.assertFalse(p.is_valid())
        self.assertEqual(p.cleaned_data, {'first_name': 'John', 'last_name': 'Lennon'})

    def test_accessing_clean(self):
        class UserForm(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

            def clean(self):
                data = self.cleaned_data

                if not self.errors:
                    data['username'] = data['username'].lower()

                return data

        f = UserForm({'username': 'SirRobin', 'password': 'blue'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['username'], 'sirrobin')

    def test_changing_cleaned_data_nothing_returned(self):
        class UserForm(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

            def clean(self):
                self.cleaned_data['username'] = self.cleaned_data['username'].lower()
                # don't return anything

        f = UserForm({'username': 'SirRobin', 'password': 'blue'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['username'], 'sirrobin')

    def test_changing_cleaned_data_in_clean(self):
        class UserForm(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

            def clean(self):
                data = self.cleaned_data

                # Return a different dict. We have not changed self.cleaned_data.
                return {
                    'username': data['username'].lower(),
                    'password': 'this_is_not_a_secret',
                }

        f = UserForm({'username': 'SirRobin', 'password': 'blue'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['username'], 'sirrobin')

    def test_multipart_encoded_form(self):
        class FormWithoutFile(Form):
            username = CharField()

        class FormWithFile(Form):
            username = CharField()
            file = FileField()

        class FormWithImage(Form):
            image = ImageField()

        self.assertFalse(FormWithoutFile().is_multipart())
        self.assertTrue(FormWithFile().is_multipart())
        self.assertTrue(FormWithImage().is_multipart())

    def test_html_safe(self):
        class SimpleForm(Form):
            username = CharField()

        form = SimpleForm()
        self.assertTrue(hasattr(SimpleForm, '__html__'))
        self.assertEqual(str(form), form.__html__())
        self.assertTrue(hasattr(form['username'], '__html__'))
        self.assertEqual(str(form['username']), form['username'].__html__())

    def test_use_required_attribute_true(self):
        class MyForm(Form):
            use_required_attribute = True
            f1 = CharField(max_length=30)
            f2 = CharField(max_length=30, required=False)
            f3 = CharField(widget=Textarea)
            f4 = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])

        form = MyForm()
        self.assertHTMLEqual(
            form.as_p(),
            '<p><label for=""id_f1"">F1:</label> <input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text"" required></p>'
            '<p><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></p>'
            '<p><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"" required>'
            '</textarea></p>'
            '<p><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></p>',
        )
        self.assertHTMLEqual(
            form.as_ul(),
            '<li><label for=""id_f1"">F1:</label> '
            '<input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text"" required></li>'
            '<li><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></li>'
            '<li><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"" required>'
            '</textarea></li>'
            '<li><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></li>',
        )
        self.assertHTMLEqual(
            form.as_table(),
            '<tr><th><label for=""id_f1"">F1:</label></th>'
            '<td><input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text"" required></td></tr>'
            '<tr><th><label for=""id_f2"">F2:</label></th>'
            '<td><input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></td></tr>'
            '<tr><th><label for=""id_f3"">F3:</label></th>'
            '<td><textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"" required>'
            '</textarea></td></tr>'
            '<tr><th><label for=""id_f4"">F4:</label></th><td><select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></td></tr>',
        )

    def test_use_required_attribute_false(self):
        class MyForm(Form):
            use_required_attribute = False
            f1 = CharField(max_length=30)
            f2 = CharField(max_length=30, required=False)
            f3 = CharField(widget=Textarea)
            f4 = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])

        form = MyForm()
        self.assertHTMLEqual(
            form.as_p(),
            '<p><label for=""id_f1"">F1:</label> <input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text""></p>'
            '<p><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></p>'
            '<p><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"">'
            '</textarea></p>'
            '<p><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></p>',
        )
        self.assertHTMLEqual(
            form.as_ul(),
            '<li><label for=""id_f1"">F1:</label> <input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text""></li>'
            '<li><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></li>'
            '<li><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"">'
            '</textarea></li>'
            '<li><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></li>',
        )
        self.assertHTMLEqual(
            form.as_table(),
            '<tr><th><label for=""id_f1"">F1:</label></th>'
            '<td><input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text""></td></tr>'
            '<tr><th><label for=""id_f2"">F2:</label></th>'
            '<td><input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></td></tr>'
            '<tr><th><label for=""id_f3"">F3:</label></th><td><textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"">'
            '</textarea></td></tr>'
            '<tr><th><label for=""id_f4"">F4:</label></th><td><select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></td></tr>',
        )

    def test_only_hidden_fields(self):
        # A form with *only* hidden fields that has errors is going to be very unusual.
        class HiddenForm(Form):
            data = IntegerField(widget=HiddenInput)

        f = HiddenForm({})
        self.assertHTMLEqual(
            f.as_p(),
            '<ul class=""errorlist nonfield"">'
            '<li>(Hidden field data) This field is required.</li></ul>\n<p> '
            '<input type=""hidden"" name=""data"" id=""id_data""></p>'
        )
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><td colspan=""2""><ul class=""errorlist nonfield"">'
            '<li>(Hidden field data) This field is required.</li></ul>'
            '<input type=""hidden"" name=""data"" id=""id_data""></td></tr>'
        )

    def test_field_named_data(self):
        class DataForm(Form):
            data = CharField(max_length=10)

        f = DataForm({'data': 'xyzzy'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})

    def test_empty_data_files_multi_value_dict(self):
        p = Person()
        self.assertIsInstance(p.data, MultiValueDict)
        self.assertIsInstance(p.files, MultiValueDict)

    def test_field_deep_copy_error_messages(self):
        class CustomCharField(CharField):
            def __init__(self, **kwargs):
                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}
                super().__init__(**kwargs)

        field = CustomCharField()
        field_copy = copy.deepcopy(field)
        self.assertIsInstance(field_copy, CustomCharField)
        self.assertIsNot(field_copy.error_messages, field.error_messages)

    def test_label_does_not_include_new_line(self):
        form = Person()
        field = form['first_name']
        self.assertEqual(field.label_tag(), '<label for=""id_first_name"">First name:</label>')
        self.assertEqual(
            field.legend_tag(),
            '<legend for=""id_first_name"">First name:</legend>',
        )

    @override_settings(USE_THOUSAND_SEPARATOR=True)
    def test_label_attrs_not_localized(self):
        form = Person()
        field = form['first_name']
        self.assertHTMLEqual(
            field.label_tag(attrs={'number': 9999}),
            '<label number=""9999"" for=""id_first_name"">First name:</label>',
        )
        self.assertHTMLEqual(
            field.legend_tag(attrs={'number': 9999}),
            '<legend number=""9999"" for=""id_first_name"">First name:</legend>',
        )",1,334 2000 40 2001 41 58 621 621 621 348 2002 40 2003 41 58 621 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2004 46 2007 41 2003 46 2008 40 2004 46 2009 44 123 125 41 2003 46 2010 40 2004 46 2009 44 2011 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2013 40 2004 46 2009 46 2014 40 41 44 648 41 2003 46 2008 40 2004 46 2009 46 2015 40 41 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2020 61 648 497 2003 46 2021 40 2022 44 2020 41 58 2004 91 648 93 2023 61 91 93 385 2024 398 2004 58 2023 46 2025 40 2019 40 2024 41 41 2003 46 2013 40 648 46 2026 40 2023 41 44 648 41 2023 61 91 93 385 2024 398 2004 58 2023 46 2025 40 91 2024 46 2027 44 2024 46 2028 93 41 2003 46 2008 40 2023 44 91 91 648 44 648 93 44 91 648 44 648 93 44 91 648 44 648 93 93 41 2003 46 2013 40 2019 40 2004 41 44 648 41 348 2029 40 2003 41 58 621 2004 61 2005 40 123 125 41 2003 46 2006 40 2004 46 2007 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 44 123 125 41 2003 46 2013 40 2019 40 2004 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2033 40 2003 41 58 2028 61 2034 40 41 2035 61 2034 40 41 2004 61 2005 40 2028 44 2035 41 2003 46 2036 40 2004 46 2028 44 2028 41 2003 46 2036 40 2004 46 2035 44 2035 41 348 2037 40 2003 41 58 621 621 621 2004 61 2005 40 41 2003 46 2030 40 2004 46 2007 41 2003 46 2008 40 2004 46 2009 44 123 125 41 2003 46 2030 40 2004 46 2012 40 41 41 497 2003 46 2038 40 2039 41 58 2004 46 2016 2003 46 2013 40 2019 40 2004 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2040 40 2003 41 58 621 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2013 40 2004 46 2031 40 41 44 648 648 648 648 648 648 648 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 648 648 648 648 648 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 648 648 648 648 648 648 41 2004 61 2005 40 123 648 58 648 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2009 44 123 648 58 91 648 93 44 648 58 91 648 93 125 41 2003 46 2008 40 2004 46 2016 44 123 648 58 648 125 41 2003 46 2008 40 2004 91 648 93 46 2009 44 91 648 93 41 2003 46 2013 40 2004 91 648 93 46 2009 46 2014 40 41 44 648 41 2003 46 2008 40 2004 91 648 93 46 2009 46 2015 40 41 44 648 41 2004 61 2005 40 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 44 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 348 2041 40 2003 41 58 621 621 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2004 61 2005 40 2028 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 348 2042 40 2003 41 58 621 621 621 621 621 334 2043 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2048 61 2046 40 2049 61 302 41 2028 61 123 648 58 648 44 648 58 648 125 2050 61 2043 40 2028 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 621 334 2043 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2051 61 2052 40 2049 61 302 41 2028 61 123 648 58 648 44 648 58 648 125 2050 61 2043 40 2028 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2053 40 2050 46 2016 91 648 93 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2054 40 2003 41 58 621 621 621 621 2004 61 2005 40 2055 61 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2056 40 2003 41 58 621 621 2004 61 2005 40 2055 61 304 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2057 40 2003 41 58 621 621 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2058 40 2003 41 58 621 621 2004 61 2059 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2060 40 2003 41 58 621 621 2004 61 2059 40 2055 61 304 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2061 40 2003 41 58 334 2062 40 2044 41 58 2063 61 2064 40 41 2065 61 2066 40 41 2050 61 2062 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2062 40 123 648 58 648 44 648 58 304 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 44 41 621 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 44 41 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 2050 61 2062 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2006 40 2050 46 2016 46 2067 40 648 41 41 348 2068 40 2003 41 58 621 334 2069 40 2044 41 58 2070 61 2046 40 41 2071 61 2046 40 2072 61 2073 41 2050 61 2069 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 2003 46 2013 40 2050 91 648 93 46 2074 40 41 44 648 44 41 2003 46 2013 40 2050 91 648 93 46 2015 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 621 334 2069 40 2044 41 58 2070 61 2046 40 41 2071 61 2046 40 2072 61 2073 40 2076 61 123 648 58 1503 44 648 58 1503 125 41 41 2050 61 2069 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 2003 46 2013 40 2050 91 648 93 46 2015 40 41 44 648 41 2050 61 2069 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 91 648 93 46 2074 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2015 40 41 44 648 44 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 348 2077 40 2003 41 58 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2078 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2083 40 2076 61 123 648 58 648 125 41 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2078 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2083 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2076 61 123 648 58 648 125 41 44 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2078 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 46 2084 91 648 93 46 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2085 40 2003 41 58 621 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 621 621 621 2050 61 2078 40 2055 61 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 621 621 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2003 46 2013 40 2050 46 2032 40 41 44 648 41 348 2086 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2088 44 41 2050 61 2087 40 2055 61 302 41 2003 46 2013 40 648 46 2026 40 2019 40 2089 41 385 2089 398 2050 91 648 93 41 44 648 41 2003 46 2013 40 648 46 2026 40 648 37 2089 385 2089 398 2050 91 648 93 41 44 648 41 348 2090 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2088 44 41 2084 61 411 40 2087 40 41 91 648 93 41 2003 46 2008 40 2091 40 2084 41 44 1502 41 2003 46 2008 40 2084 91 1500 93 46 2092 44 648 41 2003 46 2008 40 2084 91 1500 93 46 2093 44 648 41 2003 46 2013 40 2084 91 1500 93 46 2094 40 41 44 648 41 2003 46 2013 40 2019 40 2084 91 1500 93 41 44 648 648 41 2003 46 2008 40 2084 91 1501 93 46 2092 44 648 41 2003 46 2008 40 2084 91 1501 93 46 2093 44 648 41 2003 46 2013 40 2084 91 1501 93 46 2094 40 41 44 648 41 2003 46 2013 40 2019 40 2084 91 1501 93 41 44 648 648 41 348 2095 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 2084 61 411 40 2087 40 2055 61 302 41 91 648 93 41 2003 46 2008 40 2091 40 2084 41 44 1502 41 2003 46 2008 40 2084 91 1500 93 46 2092 44 303 41 2003 46 2008 40 2084 91 1500 93 46 2093 44 648 41 2003 46 2013 40 2084 91 1500 93 46 2094 40 41 44 648 41 2003 46 2013 40 2019 40 2084 91 1500 93 41 44 648 41 348 2096 40 2003 41 58 621 334 2087 40 2044 41 58 2079 61 2046 40 41 2050 61 2087 40 2055 61 302 41 2003 46 2013 40 648 46 2026 40 2019 40 2089 41 385 2089 398 2050 91 648 93 41 44 648 41 348 2097 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2088 44 41 2050 61 2087 40 41 2089 61 2050 91 648 93 2003 46 2008 40 91 2019 40 2098 41 385 2098 398 2089 91 1501 58 93 93 44 91 2019 40 2089 91 1501 93 41 44 2019 40 2089 91 1502 93 41 44 2019 40 2089 91 1502 93 41 93 44 41 348 2099 40 2003 41 58 334 2100 40 2044 41 58 2079 61 2081 40 2082 61 91 93 41 2101 61 2100 40 41 91 648 93 2020 61 648 497 2003 46 2021 40 2102 44 2020 41 58 2101 91 648 93 348 2103 40 2003 41 58 648 334 2100 40 2044 41 58 2079 61 2081 40 2082 61 91 93 41 2003 46 2036 40 323 40 2100 40 41 91 648 93 41 44 304 41 348 2104 40 2003 41 58 621 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 41 2050 61 2105 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2105 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2108 40 2003 41 58 334 2109 40 2044 41 58 2079 61 2046 40 41 2110 61 2052 40 2111 61 304 41 334 2112 40 2044 41 58 2079 61 2046 40 41 2110 61 2052 40 2111 61 304 44 2113 61 2017 46 2018 40 1505 44 1502 44 1503 41 41 621 621 2114 61 2109 40 123 648 58 648 125 44 2113 61 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 125 41 2115 61 2112 40 123 648 58 648 125 41 385 2116 398 40 2114 44 2115 41 58 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2016 44 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 44 648 58 648 125 41 621 2028 61 123 648 58 648 44 648 58 648 125 2114 61 2109 40 2028 44 2113 61 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 125 41 2115 61 2112 40 2028 41 385 2116 398 40 2114 44 2115 41 58 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2016 44 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 44 648 58 648 125 41 621 2028 61 123 125 2114 61 2109 40 2028 44 2113 61 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 125 41 2115 61 2112 40 2028 41 385 2116 398 40 2114 44 2115 41 58 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 91 648 93 46 2117 40 41 44 2017 46 2018 40 1505 44 1502 44 1503 41 41 348 2118 40 2003 41 58 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 621 621 621 2050 61 2105 40 123 648 58 648 44 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 44 648 93 125 44 2055 61 302 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 621 334 2119 40 2044 41 58 2120 61 2121 40 41 2050 61 2119 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 648 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 648 41 348 2122 40 2003 41 58 621 2050 61 2105 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2105 40 123 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2105 40 123 648 58 91 648 44 648 93 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2123 40 2003 41 58 621 621 621 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 2050 61 2105 40 2055 61 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2125 40 2003 41 58 621 621 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 2028 61 123 648 58 648 44 648 58 91 648 44 648 93 125 2050 61 2105 40 2028 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2028 61 2034 40 648 41 2050 61 2105 40 2028 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2028 61 2126 40 123 648 58 91 648 93 44 648 58 91 648 44 648 93 125 41 2050 61 2105 40 2028 41 2003 46 2008 40 2050 46 2009 44 123 125 41 621 621 2050 61 2105 40 2127 40 123 648 58 648 44 648 58 648 125 41 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 93 41 348 2128 40 2003 41 58 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 621 334 2129 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2130 44 41 2050 61 2129 40 2126 40 123 648 58 91 648 93 44 648 58 91 648 44 648 93 125 41 44 2055 61 302 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 621 621 2050 61 2105 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 44 648 93 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 44 648 93 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 621 621 2050 61 2105 40 2127 40 123 648 58 648 44 648 58 648 125 41 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 93 41 348 2131 40 2003 41 58 621 334 2132 40 2044 41 58 2133 61 2046 40 2027 61 648 41 2134 61 2046 40 2027 61 2135 40 648 41 41 348 2136 40 2003 41 58 440 2137 40 648 37 2003 46 2016 91 648 93 41 348 2138 40 2003 41 58 440 2137 40 2135 40 648 37 2003 46 2016 91 648 93 41 41 2050 61 2132 40 123 648 58 648 44 648 58 648 44 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2050 61 2132 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 348 2139 40 2003 41 58 621 621 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2143 61 2046 40 2072 61 2144 41 2145 61 2046 40 2072 61 2144 41 348 2146 40 2003 41 58 392 40 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 91 648 93 631 2003 46 2016 91 648 93 41 58 440 2137 40 648 41 450 2003 46 2016 91 648 93 2050 61 2140 40 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2050 61 2140 40 123 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 621 621 621 621 621 621 621 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2143 61 2046 40 2072 61 2144 41 2145 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 621 392 40 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 91 648 93 631 2003 46 2016 91 648 93 41 58 440 2137 40 648 41 621 2009 61 123 125 392 2003 46 2016 46 2067 40 648 41 614 648 58 2009 91 648 93 61 648 392 2003 46 2016 46 2067 40 648 41 614 648 58 2009 91 648 93 61 91 648 93 392 2009 58 440 2137 40 2009 41 621 392 2003 46 2016 46 2067 40 648 41 614 648 58 2003 46 2148 40 303 44 648 41 2003 46 2148 40 648 44 648 41 392 2003 46 2016 46 2067 40 648 41 614 648 58 2003 46 2148 40 648 44 648 41 440 2137 40 648 41 450 2003 46 2016 2050 61 2140 40 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2050 61 2140 40 123 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 44 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 497 2003 46 2021 40 2149 44 648 41 58 2050 46 2148 40 648 44 648 41 348 2150 40 2003 41 58 334 2151 40 2044 41 58 2152 61 2046 40 2142 61 1502 41 348 2147 40 2003 41 58 474 58 440 2137 40 123 648 58 91 2137 40 648 41 93 125 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 123 648 58 91 2137 40 648 41 93 125 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 123 648 58 2156 46 2157 40 91 648 93 41 125 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 648 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 91 2137 40 648 41 93 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 621 385 2101 44 2158 398 2003 46 2154 46 2159 40 41 58 392 422 2160 40 2158 44 2003 46 2161 41 58 2003 46 2154 91 2101 93 61 2003 46 2161 40 2158 41 2116 61 2151 40 123 648 58 648 125 41 621 2003 46 2030 40 2116 46 2012 40 41 41 621 2003 46 2010 40 2116 46 2154 44 2156 46 2162 41 2003 46 2008 40 2011 40 2116 46 2009 41 44 123 648 58 91 648 44 648 44 648 93 44 2163 58 91 648 44 648 93 44 125 41 348 2164 40 2003 41 58 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2143 61 2046 40 2072 61 2144 44 2165 61 1502 41 2145 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 392 40 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 91 648 93 631 2003 46 2016 91 648 93 41 58 440 2137 40 648 44 2152 61 648 44 41 2050 61 2140 40 2028 61 123 125 41 2003 46 2006 40 2050 46 2166 40 648 41 41 2003 46 2006 40 2050 46 2166 40 648 44 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2050 61 2140 40 2028 61 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2166 40 648 41 41 2003 46 2006 40 2050 46 2166 40 648 44 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2003 46 2030 40 2050 46 2166 40 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2050 61 2140 40 2028 61 123 648 58 648 44 648 58 648 125 41 2003 46 2030 40 2050 46 2166 40 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2003 46 2006 40 2050 46 2166 40 2163 41 41 2003 46 2006 40 2050 46 2166 40 2163 44 648 41 41 2003 46 2030 40 2050 46 2166 40 2163 44 648 41 41 348 2167 40 2003 41 58 334 2100 40 2044 41 58 2168 61 2046 40 2072 61 2169 41 348 2147 40 2003 41 58 2003 46 2148 40 303 44 648 41 2050 61 2100 40 2028 61 123 125 41 2170 61 123 648 58 91 648 93 44 648 58 91 648 93 44 125 2003 46 2008 40 2050 46 2009 44 2170 41 2050 46 2031 40 41 2003 46 2008 40 2050 46 2009 44 2170 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 44 41 2003 46 2013 40 2050 46 2014 40 41 44 648 648 648 44 41 2003 46 2013 40 2050 46 2032 40 41 44 648 648 648 44 41 348 2171 40 2003 41 58 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 348 2172 40 2003 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 2003 46 2084 91 648 93 61 2052 40 41 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 621 621 334 2175 40 2044 41 58 348 2172 40 2003 44 2028 61 303 44 2055 61 302 44 2176 61 91 93 41 58 2044 46 2172 40 2003 44 2028 44 2055 61 2055 41 385 2101 398 2176 58 2003 46 2084 91 2101 91 1500 93 93 61 2101 91 1501 93 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 334 2175 40 2044 41 58 2178 61 2046 40 41 2179 61 2046 40 41 348 2172 40 2003 44 2028 61 303 44 2055 61 302 44 2176 61 91 93 41 58 2044 46 2172 40 2003 44 2028 44 2055 61 2055 41 385 2101 398 2176 58 2003 46 2084 91 2101 91 1500 93 93 61 2101 91 1501 93 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 621 621 334 2005 40 2044 41 58 2045 61 2046 40 2049 61 302 41 2047 61 2046 40 2049 61 302 41 348 2172 40 2003 44 2180 61 302 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 392 2180 58 2003 46 2084 91 648 93 46 2049 61 304 2003 46 2084 91 648 93 46 2072 46 2076 91 648 93 61 648 2003 46 2084 91 648 93 46 2049 61 304 2003 46 2084 91 648 93 46 2072 46 2076 91 648 93 61 648 2050 61 2005 40 2180 61 302 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2049 44 2050 91 648 93 46 2101 46 2049 44 40 302 44 302 41 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2072 46 2076 44 2050 91 648 93 46 2101 46 2072 46 2076 44 40 123 125 44 123 125 41 41 2050 61 2005 40 2180 61 304 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2049 44 2050 91 648 93 46 2101 46 2049 44 40 304 44 304 41 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2072 46 2076 44 2050 91 648 93 46 2101 46 2072 46 2076 44 40 123 648 58 648 125 44 123 648 58 648 125 41 41 2050 61 2005 40 2180 61 302 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2049 44 2050 91 648 93 46 2101 46 2049 44 40 302 44 302 41 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2072 46 2076 44 2050 91 648 93 46 2101 46 2072 46 2076 44 40 123 125 44 123 125 41 41 334 2005 40 2044 41 58 2045 61 2046 40 2142 61 1503 41 2047 61 2046 40 2142 61 1503 41 348 2172 40 2003 44 2181 61 303 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 392 2181 58 2003 46 2084 91 648 93 46 2142 61 2181 2003 46 2084 91 648 93 46 2142 61 2181 2050 61 2005 40 2181 61 303 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2142 44 2050 91 648 93 46 2101 46 2142 44 40 1503 44 1503 41 41 2050 61 2005 40 2181 61 1503 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2142 44 2050 91 648 93 46 2101 46 2142 44 40 1503 44 1503 41 41 2050 61 2005 40 2181 61 303 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2142 44 2050 91 648 93 46 2101 46 2142 44 40 1503 44 1503 41 41 621 621 334 2005 40 2044 41 58 2045 61 2046 40 2049 61 302 41 2047 61 2046 40 2049 61 302 41 2182 61 2081 40 2082 61 40 40 648 44 648 41 44 40 648 44 648 41 41 41 348 2172 40 2003 44 2183 61 302 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 392 2183 58 2003 46 2084 91 648 93 46 2082 636 40 40 648 44 648 41 44 41 2050 61 2005 40 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2082 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2005 40 2183 61 304 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2082 44 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2005 40 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2082 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 348 2184 40 2003 41 58 648 334 2175 40 2044 41 58 2185 61 2046 40 2142 61 1503 41 2114 61 2175 40 41 2115 61 2175 40 41 2114 46 2084 91 648 93 46 2186 91 1500 93 61 2187 40 1503 41 2003 46 2188 40 2114 46 2084 91 648 93 46 2186 91 1500 93 44 2115 46 2084 91 648 93 46 2186 91 1500 93 41 348 2189 40 2003 41 58 621 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2190 61 2046 40 2072 61 2169 41 2110 61 2052 40 41 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 621 2004 61 2005 40 2055 61 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 621 621 621 621 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 621 334 2100 40 2044 41 58 2191 61 2046 40 2072 61 2169 41 2192 61 2046 40 2072 61 2169 41 2004 61 2100 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2193 40 2003 41 58 621 334 2100 40 2044 41 58 2194 61 2046 40 41 2195 61 2046 40 41 2196 61 2046 40 41 2197 61 2046 40 41 2198 61 2046 40 41 2199 61 2046 40 41 2200 61 2046 40 41 2201 61 2046 40 41 2202 61 2046 40 41 2203 61 2046 40 41 2204 61 2046 40 41 2205 61 2046 40 41 2206 61 2046 40 41 2207 61 2046 40 41 2004 61 2100 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2208 40 2003 41 58 334 2209 40 2044 41 58 2194 61 2046 40 41 2195 61 2046 40 41 2197 61 2046 40 41 2198 61 2046 40 41 2199 61 2046 40 41 2210 61 91 648 44 648 44 648 44 648 44 648 93 334 2100 40 2209 41 58 2196 61 2046 40 41 2210 61 91 648 44 648 44 648 44 648 44 648 93 334 2211 40 2100 41 58 2194 61 303 334 2212 40 2100 41 58 2210 61 91 648 44 648 44 648 44 648 44 648 44 648 93 2194 61 303 334 2213 40 2209 41 58 2196 61 2046 40 41 2210 61 303 348 2172 40 2003 44 638 2174 41 58 463 40 41 46 2172 40 638 2174 41 2003 46 2214 40 2210 61 2100 46 2210 41 2004 61 2209 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2209 46 2210 41 2004 61 2211 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2100 46 2210 41 2004 61 2212 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2100 46 2210 41 2004 61 2100 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2212 46 2210 41 2004 61 2213 40 41 2215 61 91 42 2100 46 2210 44 648 93 2003 46 2008 40 411 40 2004 46 2084 41 44 2215 41 2100 46 2210 61 91 648 93 2004 61 2100 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 91 648 44 648 44 648 44 648 44 648 44 648 93 41 348 2216 40 2003 41 58 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 621 2217 61 2046 40 2142 61 1502 44 2072 61 2144 41 2218 61 2046 40 2142 61 1502 44 2072 61 2219 41 621 2220 61 2046 40 41 621 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2072 61 2219 40 2076 61 123 648 58 1503 125 41 41 2217 61 2046 40 2142 61 1502 44 2072 61 2144 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2221 40 2003 41 58 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2027 61 648 41 2143 61 2046 40 2072 61 2144 41 2145 61 2046 40 2072 61 2144 44 2027 61 648 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 334 2222 40 2044 41 58 2223 61 2046 40 2027 61 648 41 2224 61 2046 40 2027 61 648 41 2225 61 2046 40 2027 61 648 41 2226 61 2046 40 2027 61 648 41 2227 61 2046 40 2027 61 648 41 2003 46 2013 40 2222 40 2055 61 302 41 46 2032 40 41 44 648 41 2003 46 2013 40 2222 40 41 46 2032 40 41 44 648 41 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2027 61 648 41 2217 61 2046 40 2072 61 2144 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2055 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2027 61 303 41 2217 61 2046 40 2072 61 2144 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2055 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2228 40 2003 41 58 621 621 621 621 621 334 2229 40 2044 41 58 2230 61 2046 40 2027 61 648 41 2231 61 2046 40 2027 61 648 41 2232 61 2046 40 2027 61 648 44 2233 61 648 41 2050 61 2229 40 2055 61 302 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2229 40 2055 61 302 44 2233 61 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2229 40 2055 61 302 44 2233 61 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2229 40 2055 61 302 44 2233 61 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 648 648 41 348 2234 40 2003 41 58 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 648 41 2217 61 2046 40 2072 61 2144 41 621 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 2004 61 2140 40 123 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 2004 61 2140 40 123 648 58 648 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 348 2235 40 2003 41 58 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 621 2004 61 2140 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 2004 61 2140 40 123 125 44 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 648 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 648 41 2217 61 2046 40 2072 61 2144 41 2004 61 2140 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2236 40 2003 41 58 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 2237 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 621 348 2238 40 41 58 450 648 348 2239 40 41 58 450 648 348 2240 40 41 58 450 91 648 44 648 93 348 2241 40 41 58 450 91 648 44 648 93 621 2004 61 2140 40 2113 61 123 648 58 2238 44 648 58 2240 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 2004 61 2140 40 123 125 44 2113 61 123 648 58 2238 44 648 58 2240 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 2238 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 44 648 58 91 648 44 648 93 125 44 2113 61 123 648 58 2238 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 2238 44 648 58 2240 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 2238 41 2217 61 2046 40 2072 61 2144 41 2237 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2113 61 2241 44 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2113 61 123 648 58 2239 44 648 58 2240 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2242 40 2003 41 58 2243 61 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 1507 41 334 2109 40 2044 41 58 2045 61 2046 40 2113 61 648 41 2047 61 2046 40 2113 61 648 41 2244 61 2245 40 41 2246 61 2046 40 2113 61 409 58 648 41 2247 61 2248 40 2113 61 2243 41 2249 61 2248 40 2113 61 409 58 2243 41 2116 61 2109 40 2113 61 123 648 58 648 125 41 2250 61 91 40 648 44 303 41 44 40 648 44 648 41 44 621 40 648 44 648 41 44 621 40 648 44 648 41 44 621 40 648 44 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 44 40 648 44 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 44 93 385 2251 44 2252 398 2250 58 497 2003 46 2253 40 2251 61 2251 41 58 2101 61 2116 46 2084 91 2251 93 2254 61 2116 46 2255 40 2101 44 2251 41 2003 46 2008 40 2254 44 2252 41 348 2256 40 2003 41 58 334 2005 40 2044 41 58 2045 61 2046 40 2113 61 648 41 2047 61 2046 40 2113 61 648 41 2110 61 2052 40 2113 61 2017 46 2018 40 1505 44 1502 44 1503 41 41 2004 61 2005 40 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2257 40 648 44 2004 46 2258 41 2003 46 2259 40 648 44 2004 46 2258 41 2003 46 2257 40 648 44 2004 46 2258 41 621 334 2260 40 2156 46 2261 41 58 348 2262 40 2003 44 2117 41 58 440 2137 40 648 41 334 2263 40 2005 41 58 2264 61 2260 40 2113 61 648 44 2265 61 304 41 2004 61 2263 40 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2259 40 648 44 2004 46 2258 41 348 2266 40 2003 41 58 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 648 41 2217 61 2046 40 2072 61 2144 41 2267 61 2140 40 41 2268 61 2140 40 123 648 58 648 125 41 2003 46 2053 40 2268 91 648 93 46 2117 40 41 41 2003 46 2008 40 2267 91 648 93 46 2117 40 41 44 648 41 2003 46 2008 40 2268 91 648 93 46 2117 40 41 44 648 41 2003 46 2053 40 2267 91 648 93 46 2117 40 41 41 348 2269 40 2003 41 58 648 334 2175 40 2044 41 58 2079 61 2046 40 2142 61 1502 44 2113 61 2270 46 2271 41 2116 61 2175 40 41 2079 61 2116 91 648 93 2003 46 2008 40 2079 46 2117 40 41 44 2079 46 2117 40 41 41 621 2003 46 2036 40 2116 91 648 93 44 2079 41 348 2272 40 2003 41 58 334 2109 40 2044 41 58 2079 61 2046 40 2113 61 409 58 648 44 2111 61 304 41 621 2116 61 2109 40 41 2003 46 2008 40 2116 91 648 93 46 2117 40 41 44 648 41 621 621 2116 61 2109 40 123 125 41 2003 46 2008 40 2116 91 648 93 46 2117 40 41 44 648 41 348 2273 40 2003 41 58 334 2274 40 2046 41 58 348 2275 40 2003 44 2116 44 2079 41 58 450 40 2116 44 2079 41 334 2276 40 2044 41 58 2079 61 2274 40 41 2050 61 2276 40 41 2003 46 2008 40 2050 91 648 93 44 40 2050 44 648 41 41 348 2277 40 2003 41 58 2243 61 2017 46 2017 46 2243 40 41 621 2278 61 2243 46 2279 40 2280 61 1500 41 392 2243 614 2278 58 2243 61 2243 46 2279 40 2280 61 1501 41 348 2281 40 41 58 450 2243 348 2282 40 41 58 450 2243 46 2283 40 41 334 2284 40 2169 41 58 2285 61 302 334 2286 40 2219 41 58 2285 61 302 334 2287 40 2044 41 58 621 383 61 2248 40 2113 61 2243 41 2288 61 2248 40 2113 61 2281 41 2289 61 2290 40 2113 61 2282 41 2285 61 2248 40 2113 61 2281 44 2072 61 2219 41 2291 61 2248 40 2113 61 2281 44 2072 61 2169 41 2292 61 2248 40 2113 61 2281 44 2072 61 2284 41 2293 61 2248 40 2113 61 2281 44 2072 61 2286 41 2267 61 2287 40 41 2250 61 91 40 648 44 2278 41 44 40 648 44 2278 41 44 40 648 44 2278 46 2283 40 41 41 44 40 648 44 2243 41 44 40 648 44 2243 41 44 40 648 44 2278 41 44 40 648 44 2278 41 44 93 385 2251 44 2252 398 2250 58 497 2003 46 2253 40 2251 61 2251 41 58 2254 61 2267 91 2251 93 46 2117 40 41 2003 46 2008 40 2254 44 2252 41 621 2101 61 2267 46 2084 91 2251 93 2254 61 2267 46 2255 40 2101 44 2251 41 2003 46 2008 40 2254 44 2252 41 348 2294 40 2003 44 2111 44 2295 61 1500 41 58 334 2296 58 348 2172 40 2003 41 58 2003 46 2297 61 1500 348 2243 40 2003 41 58 2003 46 2297 636 1501 450 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 43 2003 46 2297 44 2295 44 41 334 2287 40 2156 46 2044 41 58 2298 61 2248 40 2113 61 2296 40 41 46 2243 44 2111 61 2111 41 450 2287 40 123 125 41 348 2299 40 2003 41 58 648 2116 61 2003 46 2294 40 2111 61 304 44 2295 61 1507 44 41 2003 46 2008 40 2116 46 2009 44 123 125 41 2003 46 2008 40 2116 46 2016 44 123 648 58 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 44 125 41 348 2300 40 2003 41 58 648 2116 61 2003 46 2294 40 2111 61 304 41 2003 46 2008 40 2116 46 2009 44 123 125 41 2301 61 2116 46 2016 91 648 93 2003 46 2008 40 2301 44 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 2089 61 2116 91 648 93 2003 46 2008 40 2301 44 2089 46 2113 41 348 2302 40 2003 41 58 334 2287 40 2156 46 2044 41 58 2298 61 2248 40 2113 61 409 58 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 1507 41 44 2111 61 304 41 2116 61 2287 40 123 648 58 648 125 41 2003 46 2008 40 2116 46 2258 44 91 93 41 348 2303 40 2003 41 58 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2304 61 648 41 2217 61 2046 40 2072 61 2144 44 2304 61 648 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 621 2004 61 2140 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2304 61 648 41 2217 61 2046 40 2072 61 2144 41 2305 61 2046 40 2072 61 2169 44 2113 61 648 44 2304 61 648 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2306 40 2003 41 58 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 334 2307 40 2005 41 58 2308 61 2046 40 41 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2309 61 2307 40 2055 61 302 41 2003 46 2013 40 2309 46 2014 40 41 44 648 41 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 334 2310 40 2044 41 58 2308 61 2046 40 41 334 2311 40 2005 44 2310 41 58 2312 61 2046 40 41 2313 61 2311 40 2055 61 302 41 2003 46 2013 40 2313 46 2014 40 41 44 648 41 348 2314 40 2003 41 58 621 621 621 621 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2008 40 2004 46 2009 44 123 125 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 91 648 93 46 2009 44 91 648 93 41 621 497 2003 46 2038 40 2022 41 58 2004 91 648 93 46 2009 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 125 2316 61 2005 40 2028 44 2315 61 648 41 2003 46 2006 40 2316 46 2012 40 41 41 2003 46 2008 40 2316 46 2016 91 648 93 44 648 41 2003 46 2008 40 2316 46 2016 91 648 93 44 648 41 2003 46 2008 40 2316 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 2317 61 2005 40 2028 44 2315 61 648 41 2003 46 2006 40 2317 46 2012 40 41 41 2003 46 2008 40 2317 46 2016 91 648 93 44 648 41 2003 46 2008 40 2317 46 2016 91 648 93 44 648 41 2003 46 2008 40 2317 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1503 44 1502 41 41 621 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 348 2318 40 2003 44 2251 41 58 450 648 37 40 2003 46 2315 44 2251 41 392 2003 46 2315 360 2251 2004 61 2005 40 2315 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 348 2319 40 2003 41 58 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2315 61 648 2004 61 2005 40 41 2003 46 2008 40 2004 46 2315 44 648 41 2004 61 2005 40 2315 61 648 41 2003 46 2008 40 2004 46 2315 44 648 41 348 2320 40 2003 41 58 621 621 334 2005 40 2044 41 58 2079 61 2046 40 41 2321 61 2322 40 41 2004 61 2005 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 304 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 302 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 348 2323 40 2003 41 58 621 621 334 2324 40 2044 41 58 2325 61 2326 40 41 2050 61 2324 40 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 2327 40 648 44 648 41 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 648 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 2327 40 648 44 648 41 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 2003 46 2006 40 2050 46 2012 40 41 41 2325 61 2327 40 648 44 648 46 2328 40 41 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 2325 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 621 621 621 2050 61 2324 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 348 2329 40 2003 41 58 334 2324 40 2156 46 2044 41 58 2325 61 2156 46 2326 40 2113 61 409 58 648 41 2050 61 2324 40 123 125 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2330 40 2003 41 58 334 2324 40 2044 41 58 2325 61 2156 46 2326 40 2072 61 2331 41 2050 61 2324 40 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 44 41 621 621 621 2050 61 2324 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 348 2332 40 2003 41 58 621 621 621 334 2105 40 2044 41 58 2333 61 2046 40 41 2079 61 2046 40 41 621 2028 61 123 648 58 648 44 648 58 648 125 2116 61 2105 40 2028 44 2334 61 302 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 93 44 648 58 91 648 93 125 41 2003 46 2008 40 2116 46 2016 44 123 125 41 621 2116 61 2105 40 2028 44 2334 61 304 44 2335 61 302 41 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 125 41 2003 46 2008 40 2116 46 2016 44 123 125 41 621 621 2028 61 123 648 58 648 44 648 58 648 125 2116 61 2105 40 2028 44 2334 61 302 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 93 125 41 2003 46 2008 40 2116 46 2016 44 123 648 58 648 125 41 621 621 621 2028 61 123 648 58 303 44 648 58 648 125 2116 61 2105 40 2028 44 2334 61 304 44 2335 61 302 41 2003 46 2006 40 2116 46 2012 40 41 41 621 621 334 2336 40 2044 41 58 2337 61 2338 40 41 2339 61 2245 40 41 2028 61 123 648 58 648 44 648 58 648 125 2116 61 2336 40 2028 44 2113 61 123 648 58 1500 125 44 2334 61 304 44 2335 61 302 41 2003 46 2006 40 2116 46 2012 40 41 41 348 2340 40 2003 41 58 2020 61 40 648 648 41 497 2003 46 2021 40 2149 44 2020 41 58 2005 40 2334 61 304 44 2335 61 304 41 348 2341 40 2003 41 58 334 2105 40 2044 41 58 2342 61 2046 40 2072 61 2169 41 2333 61 2046 40 41 2079 61 2046 40 41 2116 61 2105 40 41 2003 46 2008 40 91 2050 46 2079 385 2050 398 2116 46 2343 40 41 93 44 91 648 93 41 2003 46 2008 40 91 2050 46 2079 385 2050 398 2116 46 2344 40 41 93 44 91 648 44 648 93 41 348 2345 40 2003 41 58 334 2175 40 2044 41 58 2194 61 2046 40 2142 61 1503 44 2265 61 304 41 2003 46 2013 40 2175 40 41 46 2031 40 41 44 648 648 648 41 348 2346 40 2003 41 58 334 2005 40 2044 41 58 2079 61 2046 40 41 2321 61 2322 40 41 2063 61 2064 40 2049 61 302 41 2244 61 2245 40 41 2004 61 2005 40 123 125 41 2004 46 2347 61 648 2004 46 2348 61 648 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2349 40 2003 41 58 648 334 2350 40 2044 41 58 2348 61 648 2101 61 2046 40 2142 61 1502 41 2195 61 2245 40 2049 61 302 41 2050 61 2350 40 123 648 58 648 125 41 2003 46 2013 40 2050 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2352 40 41 44 648 44 41 2003 46 2013 40 2050 91 648 93 46 2351 40 2076 61 123 648 58 648 125 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2352 40 2076 61 123 648 58 648 125 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2352 40 41 44 648 44 41 348 2353 40 2003 41 58 334 2354 40 2044 41 58 2355 61 2121 40 2072 61 2356 41 2116 61 2354 40 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 41 348 2357 40 2003 41 58 348 2358 40 2117 41 58 392 2117 614 648 58 440 2137 40 648 41 334 2359 40 2360 41 58 348 2172 40 2003 44 2084 61 40 41 44 42 2173 44 638 2174 41 58 2084 61 40 2046 40 2027 61 648 44 2142 61 1502 41 44 2046 40 2027 61 648 44 2142 61 1502 41 41 463 40 41 46 2172 40 2084 61 2084 44 42 2173 44 638 2174 41 348 2361 40 2003 44 2362 41 58 450 648 46 2026 40 2362 41 334 2363 40 2044 41 58 2079 61 2359 40 2186 61 91 2358 93 41 2116 61 2363 40 2028 61 123 648 58 91 648 44 648 93 125 41 2116 46 2364 40 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 93 125 41 2116 61 2363 40 2028 61 123 648 58 91 648 44 648 93 125 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 44 648 44 93 44 125 41 2116 61 2363 40 2028 61 123 648 58 91 648 44 648 93 125 41 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2016 44 123 648 58 648 125 41 348 2365 40 2003 41 58 648 334 2366 40 2360 41 58 348 2172 40 2003 44 2084 61 40 41 44 42 2173 44 638 2174 41 58 2084 61 40 2081 40 2027 61 648 44 2082 61 40 40 1501 44 1501 41 44 40 1502 44 1502 41 41 41 44 2046 40 2027 61 648 44 2142 61 1502 41 44 41 463 40 41 46 2172 40 2084 61 2084 44 42 2173 44 638 2174 41 2101 61 2366 40 41 2195 61 2367 46 2368 40 2101 41 2003 46 2010 40 2195 44 2366 41 2003 46 2369 40 2195 46 2084 44 2101 46 2084 41 2003 46 2369 40 2195 46 2084 91 1500 93 46 2082 44 2101 46 2084 91 1500 93 46 2082 41 348 2370 40 2003 41 58 648 334 2371 40 2360 41 58 348 2172 40 2003 44 2084 61 40 41 44 42 2173 44 638 2174 41 58 2084 61 40 2052 40 2027 61 648 41 44 2245 40 2027 61 648 41 41 463 40 41 46 2172 40 2084 61 2084 44 42 2173 44 638 2174 41 334 2372 40 2044 41 58 2373 61 2371 40 41 2028 61 123 648 58 91 648 44 1503 93 125 2116 61 2372 40 2028 44 2113 61 123 648 58 91 648 44 1503 93 125 41 2003 46 2006 40 2116 46 2374 40 41 41 348 2375 40 2003 41 58 334 2376 40 2360 41 58 348 2172 40 2003 44 42 2173 44 638 2174 41 58 2084 61 40 2046 40 2027 61 648 44 2186 61 91 2377 40 648 44 2071 61 648 41 93 41 44 2046 40 2027 61 648 41 44 2046 40 2027 61 648 44 2378 61 123 648 58 648 125 41 44 2046 40 2027 61 648 44 2049 61 302 44 2304 61 648 41 44 41 463 40 41 46 2172 40 2084 44 42 2173 44 638 2174 41 348 2361 40 2003 44 2362 41 58 392 2362 58 450 648 37 2379 40 2362 41 450 303 621 621 2050 61 2376 40 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 648 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 303 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 93 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 621 621 2050 61 2376 40 2049 61 302 41 2003 46 2053 40 2050 46 2147 40 648 41 41 2003 46 2053 40 2050 46 2147 40 303 41 41 2003 46 2053 40 2050 46 2147 40 91 93 41 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 93 41 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 93 41 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 621 621 621 621 2050 61 2376 40 2380 61 302 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 648 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 303 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 93 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 621 621 2050 61 2376 40 2049 61 302 44 2380 61 302 41 2003 46 2053 40 2050 46 2147 40 648 41 41 2003 46 2053 40 2050 46 2147 40 303 41 41 2003 46 2053 40 2050 46 2147 40 91 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 93 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 348 2381 40 2003 41 58 334 2382 40 2383 41 58 348 2172 40 2003 44 2076 61 303 41 58 2384 61 91 2219 40 41 44 2219 40 41 93 463 40 41 46 2172 40 2384 44 2076 41 348 2385 40 2003 44 2117 41 58 450 91 303 44 303 93 334 2376 40 2360 41 58 348 2172 40 2003 44 42 2173 44 638 2174 41 58 2084 61 91 2046 40 41 44 2046 40 2049 61 302 41 93 463 40 41 46 2172 40 2084 44 42 2173 44 638 2174 41 334 2386 40 2044 41 58 2387 61 2376 40 2072 61 2382 41 2388 61 2376 40 2072 61 2382 44 2049 61 302 41 2389 61 2376 40 2072 61 2382 44 2380 61 302 41 2390 61 2376 40 2072 61 2382 44 2049 61 302 44 2380 61 302 44 41 2116 61 2386 40 2055 61 302 41 2003 46 2013 40 2116 46 2032 40 41 44 648 44 41 348 2391 40 2003 41 58 648 334 2392 40 2046 41 58 2393 61 91 303 44 648 93 348 2262 40 2003 44 2117 41 58 621 392 2117 614 648 58 450 123 125 450 463 40 41 46 2262 40 2117 41 334 2394 40 2156 46 2044 41 58 2395 61 2392 40 41 2116 61 2394 40 2028 61 123 648 58 648 125 41 2116 46 2364 40 41 2003 46 2008 40 2116 46 2016 44 123 648 58 123 125 125 41 348 2396 40 2003 41 58 334 2350 40 2044 41 58 2101 61 2046 40 41 2024 61 2350 40 41 91 648 93 2397 61 91 621 621 40 40 41 44 123 125 44 648 41 44 621 40 40 648 44 41 44 123 125 44 648 41 44 621 40 40 648 44 41 44 123 125 44 648 41 44 40 40 2135 40 648 41 44 41 44 123 125 44 648 41 44 621 40 40 41 44 123 648 58 123 648 58 648 125 125 44 648 44 41 44 93 385 2173 44 2174 44 2252 398 2397 58 497 2003 46 2253 40 2173 61 2173 44 2174 61 2174 41 58 2003 46 2013 40 2024 46 2351 40 42 2173 44 638 2174 41 44 2252 37 123 648 58 648 125 44 41 2003 46 2013 40 2024 46 2352 40 42 2173 44 638 2174 41 44 2252 37 123 648 58 648 125 44 41 348 2398 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2046 40 41 2024 61 2350 40 2055 61 648 41 91 648 93 2003 46 2013 40 2024 46 2351 40 41 44 648 41 2003 46 2013 40 2024 46 2352 40 41 44 648 41 2003 46 2013 40 2024 46 2351 40 648 41 44 648 41 2003 46 2013 40 2024 46 2352 40 648 41 44 648 41 348 2399 40 2003 41 58 334 2400 40 2219 41 58 348 2092 40 2003 44 2401 41 58 450 648 43 2401 334 2402 40 2219 41 58 348 2092 40 2003 44 2401 41 58 450 303 334 2350 40 2044 41 58 2403 61 2046 40 2072 61 2400 41 362 61 2046 40 2072 61 2402 41 2116 61 2350 40 41 2003 46 2013 40 2116 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2116 91 648 93 46 2352 40 41 44 648 44 41 2003 46 2013 40 2116 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2116 91 648 93 46 2352 40 41 44 648 41 348 2404 40 2003 41 58 334 2350 40 2044 41 58 2101 61 2046 40 2027 61 648 41 2024 61 2350 40 41 91 648 93 2003 46 2013 40 2024 46 2351 40 41 44 648 41 2003 46 2013 40 2024 46 2352 40 41 44 648 44 41 348 2405 40 2003 41 58 334 2350 40 2044 41 58 2101 61 2046 40 2027 61 648 41 2003 46 2008 40 2350 40 41 91 648 93 46 2092 44 648 41 348 2406 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2046 40 2072 61 2219 40 2076 61 123 648 58 648 125 41 41 2407 61 2046 40 2072 61 2219 40 2076 61 123 648 58 303 125 41 41 2116 61 2350 40 41 2003 46 2008 40 2116 91 648 93 46 2092 44 648 41 2003 46 2008 40 2116 91 648 93 46 2092 44 648 41 348 2408 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 2116 61 2350 40 2055 61 648 41 2409 61 2116 91 648 93 46 2409 2003 46 2008 40 2409 91 1500 93 46 2092 44 648 41 2003 46 2008 40 2409 91 1501 93 46 2092 44 648 41 348 2410 40 2003 41 58 334 2350 40 2044 41 58 2045 61 2046 40 41 2110 61 2121 40 2072 61 2356 41 2050 61 2350 40 41 2003 46 2008 40 2050 91 648 93 46 2411 44 648 41 2003 46 2008 40 2050 91 648 93 46 2411 44 648 41 348 2412 40 2003 41 58 2116 61 2005 40 41 2101 61 2116 91 648 93 2003 46 2008 40 2101 46 2413 40 41 44 648 41 2003 46 2008 40 2101 46 2413 40 2414 61 648 41 44 648 41 2003 46 2008 40 2101 46 2413 40 2414 61 648 41 44 648 41 2003 46 2008 40 2101 46 2413 40 2414 61 648 41 44 648 41 348 2415 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2046 40 41 2024 61 2350 40 2233 61 648 41 91 648 93 2003 46 2013 40 2024 46 2351 40 2233 61 648 41 44 648 41 2003 46 2013 40 2024 46 2352 40 2233 61 648 41 44 648 44 41 348 2416 40 2003 41 58 334 2175 40 2044 41 58 2191 61 2046 40 41 2192 61 2046 40 41 348 2147 40 2003 41 58 440 2137 40 648 44 2152 61 648 44 433 61 123 648 58 1501 44 648 58 1502 125 41 2116 61 2175 40 123 125 41 2003 46 2036 40 2116 46 2012 40 41 44 302 41 2009 61 2116 46 2009 46 2015 40 41 2417 61 91 648 44 648 44 648 44 93 385 371 398 2417 58 2003 46 2259 40 371 44 2009 41 2009 61 2116 46 2009 46 2014 40 41 2417 61 91 648 44 648 44 648 44 93 385 371 398 2417 58 2003 46 2418 40 371 44 2009 41 2009 61 2116 46 2009 46 2419 40 41 2417 61 123 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 125 2003 46 2008 40 2009 44 2417 41 2003 46 2008 40 2395 46 2420 40 2009 41 44 2116 46 2009 46 2421 40 41 41 348 2422 40 2003 41 58 648 334 2175 40 2044 41 58 2191 61 2046 40 41 2192 61 2046 40 41 348 2147 40 2003 41 58 440 2137 40 648 44 2152 61 648 44 433 61 123 648 58 1501 44 648 58 1502 125 44 41 2417 61 123 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 125 2116 61 2175 40 123 125 41 2003 46 2030 40 2116 46 2012 40 41 41 2009 61 2395 46 2423 40 2116 46 2009 46 2421 40 41 41 2003 46 2008 40 2009 44 2417 41 2424 61 648 2003 46 2008 40 2116 46 2009 46 2419 40 2425 61 304 41 91 648 93 91 1500 93 91 648 93 44 2424 41 2009 61 2395 46 2423 40 2116 46 2009 46 2421 40 2425 61 304 41 41 2417 91 648 93 91 1500 93 91 648 93 61 2424 2003 46 2008 40 2009 44 2417 41 348 2426 40 2003 41 58 2153 61 2157 40 41 2153 46 2025 40 648 41 2153 46 2025 40 2137 40 648 44 2152 61 648 44 433 61 123 648 58 648 125 41 41 2003 46 2010 40 2153 44 411 41 2003 46 2259 40 648 44 2153 41 2003 46 2259 40 648 44 2137 40 2153 41 41 2003 46 2008 40 2153 46 2015 40 41 44 648 41 2003 46 2008 40 2153 46 2014 40 41 44 648 41 2009 61 2153 46 2419 40 41 2003 46 2008 40 2009 44 91 123 648 58 648 44 648 58 648 125 44 123 648 58 648 44 648 58 648 125 93 41 2003 46 2008 40 2395 46 2420 40 2009 41 44 2153 46 2421 40 41 41 348 2427 40 2003 41 58 2153 61 2157 40 41 2153 46 2025 40 648 41 2153 46 2025 40 2137 40 648 44 2152 61 648 44 433 61 123 648 58 648 125 41 41 2003 46 2008 40 2153 46 2014 40 41 44 648 41 348 2428 40 2003 41 58 2153 61 2157 40 2161 61 648 41 2153 46 2025 40 648 41 2153 46 2025 40 2137 40 648 44 2152 61 648 44 433 61 123 648 58 648 125 41 41 2003 46 2008 40 2153 46 2014 40 41 44 648 41 348 2429 40 2003 41 58 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 2072 61 2169 41 2004 61 2005 40 123 648 58 648 125 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2430 40 2003 41 58 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 348 2147 40 2003 41 58 440 2137 40 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 41 2003 46 2013 40 2019 40 2004 46 2431 40 41 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2431 40 41 46 2015 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2432 40 2003 41 58 334 2100 40 2044 41 58 2433 61 2046 40 2072 61 2169 40 41 44 2049 61 302 41 2434 61 2046 40 41 348 2435 40 2003 41 58 440 2137 40 648 41 2436 61 2435 2116 61 2100 40 123 648 58 648 44 648 58 648 125 41 2116 46 2012 40 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 648 648 648 41 348 2437 40 2003 41 58 648 2004 61 2005 40 41 2003 46 2008 40 2438 40 2004 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2008 40 2438 40 2004 41 44 648 41 2004 46 2012 40 41 2003 46 2008 40 2438 40 2004 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2004 46 2012 40 41 2003 46 2008 40 2438 40 2004 41 44 648 41 348 2439 40 2003 41 58 648 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2438 40 2004 41 497 2003 46 2038 40 2039 41 58 2004 46 2016 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 44 123 648 58 648 44 648 58 648 125 41 348 2440 40 2003 41 58 334 2441 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 2028 61 2003 46 2016 392 422 2003 46 2009 58 2028 91 648 93 61 2028 91 648 93 46 2442 40 41 450 2028 2050 61 2441 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2443 40 2003 41 58 334 2441 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 2003 46 2016 91 648 93 61 2003 46 2016 91 648 93 46 2442 40 41 621 2050 61 2441 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2444 40 2003 41 58 334 2441 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 2028 61 2003 46 2016 621 450 123 648 58 2028 91 648 93 46 2442 40 41 44 648 58 648 44 125 2050 61 2441 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2445 40 2003 41 58 334 2446 40 2044 41 58 2141 61 2046 40 41 334 2447 40 2044 41 58 2141 61 2046 40 41 2448 61 2326 40 41 334 2449 40 2044 41 58 2450 61 2451 40 41 2003 46 2030 40 2446 40 41 46 2452 40 41 41 2003 46 2006 40 2447 40 41 46 2452 40 41 41 2003 46 2006 40 2449 40 41 46 2452 40 41 41 348 2453 40 2003 41 58 334 2454 40 2044 41 58 2141 61 2046 40 41 2116 61 2454 40 41 2003 46 2006 40 2455 40 2454 44 648 41 41 2003 46 2008 40 2019 40 2116 41 44 2116 46 2456 40 41 41 2003 46 2006 40 2455 40 2116 91 648 93 44 648 41 41 2003 46 2008 40 2019 40 2116 91 648 93 41 44 2116 91 648 93 46 2456 40 41 41 348 2457 40 2003 41 58 334 2175 40 2044 41 58 2335 61 304 2114 61 2046 40 2142 61 1503 41 2115 61 2046 40 2142 61 1503 44 2049 61 302 41 2458 61 2046 40 2072 61 2073 41 2459 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2116 61 2175 40 41 2003 46 2013 40 2116 46 2032 40 41 44 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2031 40 41 44 648 648 648 648 648 648 648 648 648 648 648 44 41 348 2460 40 2003 41 58 334 2175 40 2044 41 58 2335 61 302 2114 61 2046 40 2142 61 1503 41 2115 61 2046 40 2142 61 1503 44 2049 61 302 41 2458 61 2046 40 2072 61 2073 41 2459 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2116 61 2175 40 41 2003 46 2013 40 2116 46 2032 40 41 44 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2031 40 41 44 648 648 648 648 648 648 648 648 648 648 44 41 348 2461 40 2003 41 58 621 334 2462 40 2044 41 58 2028 61 2245 40 2072 61 2169 41 2050 61 2462 40 123 125 41 2003 46 2013 40 2050 46 2032 40 41 44 648 648 648 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 41 348 2463 40 2003 41 58 334 2464 40 2044 41 58 2028 61 2046 40 2142 61 1502 41 2050 61 2464 40 123 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 44 123 648 58 648 125 41 348 2465 40 2003 41 58 2004 61 2005 40 41 2003 46 2010 40 2004 46 2028 44 2126 41 2003 46 2010 40 2004 46 2035 44 2126 41 348 2466 40 2003 41 58 334 2467 40 2046 41 58 348 2172 40 2003 44 638 2174 41 58 2174 91 648 93 61 123 648 58 648 125 463 40 41 46 2172 40 638 2174 41 2101 61 2467 40 41 2468 61 2367 46 2368 40 2101 41 2003 46 2010 40 2468 44 2467 41 2003 46 2369 40 2468 46 2378 44 2101 46 2378 41 348 2469 40 2003 41 58 2116 61 2005 40 41 2101 61 2116 91 648 93 2003 46 2008 40 2101 46 2351 40 41 44 648 41 2003 46 2008 40 2101 46 2352 40 41 44 648 44 41 64 2470 40 2471 61 304 41 348 2472 40 2003 41 58 2116 61 2005 40 41 2101 61 2116 91 648 93 2003 46 2013 40 2101 46 2351 40 2076 61 123 648 58 1505 125 41 44 648 44 41 2003 46 2013 40 2101 46 2352 40 2076 61 123 648 58 1505 125 41 44 648 44 41 
132399,Python,"class ExclusionConstraintTests(PostgreSQLTestCase):
    def get_constraints(self, table):
        """"""Get the constraints on the table using a new cursor.""""""
        with connection.cursor() as cursor:
            return connection.introspection.get_constraints(cursor, table)

    def test_invalid_condition(self):
        msg = 'ExclusionConstraint.condition must be a Q instance.'
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                index_type='GIST',
                name='exclude_invalid_condition',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
                condition=F('invalid'),
            )

    def test_invalid_index_type(self):
        msg = 'Exclusion constraints only support GiST or SP-GiST indexes.'
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                index_type='gin',
                name='exclude_invalid_index_type',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
            )

    def test_invalid_expressions(self):
        msg = 'The expressions must be a list of 2-tuples.'
        for expressions in (['foo'], [('foo')], [('foo_1', 'foo_2', 'foo_3')]):
            with self.subTest(expressions), self.assertRaisesMessage(ValueError, msg):
                ExclusionConstraint(
                    index_type='GIST',
                    name='exclude_invalid_expressions',
                    expressions=expressions,
                )

    def test_empty_expressions(self):
        msg = 'At least one expression is required to define an exclusion constraint.'
        for empty_expressions in (None, []):
            with self.subTest(empty_expressions), self.assertRaisesMessage(ValueError, msg):
                ExclusionConstraint(
                    index_type='GIST',
                    name='exclude_empty_expressions',
                    expressions=empty_expressions,
                )

    def test_invalid_deferrable(self):
        msg = 'ExclusionConstraint.deferrable must be a Deferrable instance.'
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                name='exclude_invalid_deferrable',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
                deferrable='invalid',
            )

    def test_deferrable_with_condition(self):
        msg = 'ExclusionConstraint with conditions cannot be deferred.'
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                name='exclude_invalid_condition',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
                condition=Q(cancelled=False),
                deferrable=Deferrable.DEFERRED,
            )

    def test_invalid_include_type(self):
        msg = 'ExclusionConstraint.include must be a list or tuple.'
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                name='exclude_invalid_include',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
                include='invalid',
            )

    def test_invalid_opclasses_type(self):
        msg = 'ExclusionConstraint.opclasses must be a list or tuple.'
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                name='exclude_invalid_opclasses',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
                opclasses='invalid',
            )

    def test_opclasses_and_expressions_same_length(self):
        msg = (
            'ExclusionConstraint.expressions and '
            'ExclusionConstraint.opclasses must have the same number of '
            'elements.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            ExclusionConstraint(
                name='exclude_invalid_expressions_opclasses_length',
                expressions=[(F('datespan'), RangeOperators.OVERLAPS)],
                opclasses=['foo', 'bar'],
            )

    def test_repr(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                (F('datespan'), RangeOperators.OVERLAPS),
                (F('room'), RangeOperators.EQUAL),
            ],
        )
        self.assertEqual(
            repr(constraint),
            ""<ExclusionConstraint: index_type='GIST' expressions=[""
            ""(F(datespan), '&&'), (F(room), '=')] name='exclude_overlapping'>"",
        )
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[(F('datespan'), RangeOperators.ADJACENT_TO)],
            condition=Q(cancelled=False),
            index_type='SPGiST',
        )
        self.assertEqual(
            repr(constraint),
            ""<ExclusionConstraint: index_type='SPGiST' expressions=[""
            ""(F(datespan), '-|-')] name='exclude_overlapping' ""
            ""condition=(AND: ('cancelled', False))>"",
        )
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[(F('datespan'), RangeOperators.ADJACENT_TO)],
            deferrable=Deferrable.IMMEDIATE,
        )
        self.assertEqual(
            repr(constraint),
            ""<ExclusionConstraint: index_type='GIST' expressions=[""
            ""(F(datespan), '-|-')] name='exclude_overlapping' ""
            ""deferrable=Deferrable.IMMEDIATE>"",
        )
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[(F('datespan'), RangeOperators.ADJACENT_TO)],
            include=['cancelled', 'room'],
        )
        self.assertEqual(
            repr(constraint),
            ""<ExclusionConstraint: index_type='GIST' expressions=[""
            ""(F(datespan), '-|-')] name='exclude_overlapping' ""
            ""include=('cancelled', 'room')>"",
        )
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[(F('datespan'), RangeOperators.ADJACENT_TO)],
            opclasses=['range_ops'],
        )
        self.assertEqual(
            repr(constraint),
            ""<ExclusionConstraint: index_type='GIST' expressions=[""
            ""(F(datespan), '-|-')] name='exclude_overlapping' ""
            ""opclasses=['range_ops']>"",
        )

    def test_eq(self):
        constraint_1 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                (F('datespan'), RangeOperators.OVERLAPS),
                (F('room'), RangeOperators.EQUAL),
            ],
            condition=Q(cancelled=False),
        )
        constraint_2 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
        )
        constraint_3 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[('datespan', RangeOperators.OVERLAPS)],
            condition=Q(cancelled=False),
        )
        constraint_4 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
            deferrable=Deferrable.DEFERRED,
        )
        constraint_5 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
            deferrable=Deferrable.IMMEDIATE,
        )
        constraint_6 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
            deferrable=Deferrable.IMMEDIATE,
            include=['cancelled'],
        )
        constraint_7 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
            include=['cancelled'],
        )
        constraint_8 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
            include=['cancelled'],
            opclasses=['range_ops', 'range_ops']
        )
        constraint_9 = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[
                ('datespan', RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL),
            ],
            opclasses=['range_ops', 'range_ops']
        )
        self.assertEqual(constraint_1, constraint_1)
        self.assertEqual(constraint_1, mock.ANY)
        self.assertNotEqual(constraint_1, constraint_2)
        self.assertNotEqual(constraint_1, constraint_3)
        self.assertNotEqual(constraint_1, constraint_4)
        self.assertNotEqual(constraint_2, constraint_3)
        self.assertNotEqual(constraint_2, constraint_4)
        self.assertNotEqual(constraint_2, constraint_7)
        self.assertNotEqual(constraint_2, constraint_9)
        self.assertNotEqual(constraint_4, constraint_5)
        self.assertNotEqual(constraint_5, constraint_6)
        self.assertNotEqual(constraint_7, constraint_8)
        self.assertNotEqual(constraint_1, object())

    def test_deconstruct(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[('datespan', RangeOperators.OVERLAPS), ('room', RangeOperators.EQUAL)],
        )
        path, args, kwargs = constraint.deconstruct()
        self.assertEqual(path, 'django.contrib.postgres.constraints.ExclusionConstraint')
        self.assertEqual(args, ())
        self.assertEqual(kwargs, {
            'name': 'exclude_overlapping',
            'expressions': [('datespan', RangeOperators.OVERLAPS), ('room', RangeOperators.EQUAL)],
        })

    def test_deconstruct_index_type(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            index_type='SPGIST',
            expressions=[('datespan', RangeOperators.OVERLAPS), ('room', RangeOperators.EQUAL)],
        )
        path, args, kwargs = constraint.deconstruct()
        self.assertEqual(path, 'django.contrib.postgres.constraints.ExclusionConstraint')
        self.assertEqual(args, ())
        self.assertEqual(kwargs, {
            'name': 'exclude_overlapping',
            'index_type': 'SPGIST',
            'expressions': [('datespan', RangeOperators.OVERLAPS), ('room', RangeOperators.EQUAL)],
        })

    def test_deconstruct_condition(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[('datespan', RangeOperators.OVERLAPS), ('room', RangeOperators.EQUAL)],
            condition=Q(cancelled=False),
        )
        path, args, kwargs = constraint.deconstruct()
        self.assertEqual(path, 'django.contrib.postgres.constraints.ExclusionConstraint')
        self.assertEqual(args, ())
        self.assertEqual(kwargs, {
            'name': 'exclude_overlapping',
            'expressions': [('datespan', RangeOperators.OVERLAPS), ('room', RangeOperators.EQUAL)],
            'condition': Q(cancelled=False),
        })

    def test_deconstruct_deferrable(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[('datespan', RangeOperators.OVERLAPS)],
            deferrable=Deferrable.DEFERRED,
        )
        path, args, kwargs = constraint.deconstruct()
        self.assertEqual(path, 'django.contrib.postgres.constraints.ExclusionConstraint')
        self.assertEqual(args, ())
        self.assertEqual(kwargs, {
            'name': 'exclude_overlapping',
            'expressions': [('datespan', RangeOperators.OVERLAPS)],
            'deferrable': Deferrable.DEFERRED,
        })

    def test_deconstruct_include(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[('datespan', RangeOperators.OVERLAPS)],
            include=['cancelled', 'room'],
        )
        path, args, kwargs = constraint.deconstruct()
        self.assertEqual(path, 'django.contrib.postgres.constraints.ExclusionConstraint')
        self.assertEqual(args, ())
        self.assertEqual(kwargs, {
            'name': 'exclude_overlapping',
            'expressions': [('datespan', RangeOperators.OVERLAPS)],
            'include': ('cancelled', 'room'),
        })

    def test_deconstruct_opclasses(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping',
            expressions=[('datespan', RangeOperators.OVERLAPS)],
            opclasses=['range_ops'],
        )
        path, args, kwargs = constraint.deconstruct()
        self.assertEqual(path, 'django.contrib.postgres.constraints.ExclusionConstraint')
        self.assertEqual(args, ())
        self.assertEqual(kwargs, {
            'name': 'exclude_overlapping',
            'expressions': [('datespan', RangeOperators.OVERLAPS)],
            'opclasses': ['range_ops'],
        })

    def _test_range_overlaps(self, constraint):
        # Create exclusion constraint.
        self.assertNotIn(constraint.name, self.get_constraints(HotelReservation._meta.db_table))
        with connection.schema_editor() as editor:
            editor.add_constraint(HotelReservation, constraint)
        self.assertIn(constraint.name, self.get_constraints(HotelReservation._meta.db_table))
        # Add initial reservations.
        room101 = Room.objects.create(number=101)
        room102 = Room.objects.create(number=102)
        datetimes = [
            timezone.datetime(2018, 6, 20),
            timezone.datetime(2018, 6, 24),
            timezone.datetime(2018, 6, 26),
            timezone.datetime(2018, 6, 28),
            timezone.datetime(2018, 6, 29),
        ]
        HotelReservation.objects.create(
            datespan=DateRange(datetimes[0].date(), datetimes[1].date()),
            start=datetimes[0],
            end=datetimes[1],
            room=room102,
        )
        HotelReservation.objects.create(
            datespan=DateRange(datetimes[1].date(), datetimes[3].date()),
            start=datetimes[1],
            end=datetimes[3],
            room=room102,
        )
        # Overlap dates.
        with self.assertRaises(IntegrityError), transaction.atomic():
            reservation = HotelReservation(
                datespan=(datetimes[1].date(), datetimes[2].date()),
                start=datetimes[1],
                end=datetimes[2],
                room=room102,
            )
            reservation.save()
        # Valid range.
        HotelReservation.objects.bulk_create([
            # Other room.
            HotelReservation(
                datespan=(datetimes[1].date(), datetimes[2].date()),
                start=datetimes[1],
                end=datetimes[2],
                room=room101,
            ),
            # Cancelled reservation.
            HotelReservation(
                datespan=(datetimes[1].date(), datetimes[1].date()),
                start=datetimes[1],
                end=datetimes[2],
                room=room102,
                cancelled=True,
            ),
            # Other adjacent dates.
            HotelReservation(
                datespan=(datetimes[3].date(), datetimes[4].date()),
                start=datetimes[3],
                end=datetimes[4],
                room=room102,
            ),
        ])

    def test_range_overlaps_custom(self):
        class TsTzRange(Func):
            function = 'TSTZRANGE'
            output_field = DateTimeRangeField()

        constraint = ExclusionConstraint(
            name='exclude_overlapping_reservations_custom',
            expressions=[
                (TsTzRange('start', 'end', RangeBoundary()), RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL)
            ],
            condition=Q(cancelled=False),
            opclasses=['range_ops', 'gist_int4_ops'],
        )
        self._test_range_overlaps(constraint)

    def test_range_overlaps(self):
        constraint = ExclusionConstraint(
            name='exclude_overlapping_reservations',
            expressions=[
                (F('datespan'), RangeOperators.OVERLAPS),
                ('room', RangeOperators.EQUAL)
            ],
            condition=Q(cancelled=False),
        )
        self._test_range_overlaps(constraint)

    def test_range_adjacent(self):
        constraint_name = 'ints_adjacent'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        RangesModel.objects.create(ints=(20, 50))
        with self.assertRaises(IntegrityError), transaction.atomic():
            RangesModel.objects.create(ints=(10, 20))
        RangesModel.objects.create(ints=(10, 19))
        RangesModel.objects.create(ints=(51, 60))
        # Drop the constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(RangesModel, constraint)
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    def test_expressions_with_params(self):
        constraint_name = 'scene_left_equal'
        self.assertNotIn(constraint_name, self.get_constraints(Scene._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[(Left('scene', 4), RangeOperators.EQUAL)],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(Scene, constraint)
        self.assertIn(constraint_name, self.get_constraints(Scene._meta.db_table))

    def test_expressions_with_key_transform(self):
        constraint_name = 'exclude_overlapping_reservations_smoking'
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[
                (F('datespan'), RangeOperators.OVERLAPS),
                (KeyTextTransform('smoking', 'requirements'), RangeOperators.EQUAL),
            ],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(HotelReservation, constraint)
        self.assertIn(
            constraint_name,
            self.get_constraints(HotelReservation._meta.db_table),
        )

    def test_index_transform(self):
        constraint_name = 'first_index_equal'
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('field__0', RangeOperators.EQUAL)],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(IntegerArrayModel, constraint)
        self.assertIn(
            constraint_name,
            self.get_constraints(IntegerArrayModel._meta.db_table),
        )

    def test_range_adjacent_initially_deferred(self):
        constraint_name = 'ints_adjacent_deferred'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            deferrable=Deferrable.DEFERRED,
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        RangesModel.objects.create(ints=(20, 50))
        adjacent_range = RangesModel.objects.create(ints=(10, 20))
        # Constraint behavior can be changed with SET CONSTRAINTS.
        with self.assertRaises(IntegrityError):
            with transaction.atomic(), connection.cursor() as cursor:
                quoted_name = connection.ops.quote_name(constraint_name)
                cursor.execute('SET CONSTRAINTS %s IMMEDIATE' % quoted_name)
        # Remove adjacent range before the end of transaction.
        adjacent_range.delete()
        RangesModel.objects.create(ints=(10, 19))
        RangesModel.objects.create(ints=(51, 60))

    @skipUnlessDBFeature('supports_covering_gist_indexes')
    def test_range_adjacent_gist_include(self):
        constraint_name = 'ints_adjacent_gist_include'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='gist',
            include=['decimals', 'ints'],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        RangesModel.objects.create(ints=(20, 50))
        with self.assertRaises(IntegrityError), transaction.atomic():
            RangesModel.objects.create(ints=(10, 20))
        RangesModel.objects.create(ints=(10, 19))
        RangesModel.objects.create(ints=(51, 60))

    @skipUnlessDBFeature('supports_covering_spgist_indexes')
    def test_range_adjacent_spgist_include(self):
        constraint_name = 'ints_adjacent_spgist_include'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='spgist',
            include=['decimals', 'ints'],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        RangesModel.objects.create(ints=(20, 50))
        with self.assertRaises(IntegrityError), transaction.atomic():
            RangesModel.objects.create(ints=(10, 20))
        RangesModel.objects.create(ints=(10, 19))
        RangesModel.objects.create(ints=(51, 60))

    @skipUnlessDBFeature('supports_covering_gist_indexes')
    def test_range_adjacent_gist_include_condition(self):
        constraint_name = 'ints_adjacent_gist_include_condition'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='gist',
            include=['decimals'],
            condition=Q(id__gte=100),
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    @skipUnlessDBFeature('supports_covering_spgist_indexes')
    def test_range_adjacent_spgist_include_condition(self):
        constraint_name = 'ints_adjacent_spgist_include_condition'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='spgist',
            include=['decimals'],
            condition=Q(id__gte=100),
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    @skipUnlessDBFeature('supports_covering_gist_indexes')
    def test_range_adjacent_gist_include_deferrable(self):
        constraint_name = 'ints_adjacent_gist_include_deferrable'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='gist',
            include=['decimals'],
            deferrable=Deferrable.DEFERRED,
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    @skipUnlessDBFeature('supports_covering_spgist_indexes')
    def test_range_adjacent_spgist_include_deferrable(self):
        constraint_name = 'ints_adjacent_spgist_include_deferrable'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='spgist',
            include=['decimals'],
            deferrable=Deferrable.DEFERRED,
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    def test_gist_include_not_supported(self):
        constraint_name = 'ints_adjacent_gist_include_not_supported'
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='gist',
            include=['id'],
        )
        msg = (
            'Covering exclusion constraints using a GiST index require '
            'PostgreSQL 12+.'
        )
        with connection.schema_editor() as editor:
            with mock.patch(
                'django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_gist_indexes',
                False,
            ):
                with self.assertRaisesMessage(NotSupportedError, msg):
                    editor.add_constraint(RangesModel, constraint)

    def test_spgist_include_not_supported(self):
        constraint_name = 'ints_adjacent_spgist_include_not_supported'
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='spgist',
            include=['id'],
        )
        msg = (
            'Covering exclusion constraints using an SP-GiST index require '
            'PostgreSQL 14+.'
        )
        with connection.schema_editor() as editor:
            with mock.patch(
                'django.db.backends.postgresql.features.DatabaseFeatures.'
                'supports_covering_spgist_indexes',
                False,
            ):
                with self.assertRaisesMessage(NotSupportedError, msg):
                    editor.add_constraint(RangesModel, constraint)

    def test_range_adjacent_opclasses(self):
        constraint_name = 'ints_adjacent_opclasses'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            opclasses=['range_ops'],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        RangesModel.objects.create(ints=(20, 50))
        with self.assertRaises(IntegrityError), transaction.atomic():
            RangesModel.objects.create(ints=(10, 20))
        RangesModel.objects.create(ints=(10, 19))
        RangesModel.objects.create(ints=(51, 60))
        # Drop the constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(RangesModel, constraint)
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    def test_range_adjacent_opclasses_condition(self):
        constraint_name = 'ints_adjacent_opclasses_condition'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            opclasses=['range_ops'],
            condition=Q(id__gte=100),
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    def test_range_adjacent_opclasses_deferrable(self):
        constraint_name = 'ints_adjacent_opclasses_deferrable'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            opclasses=['range_ops'],
            deferrable=Deferrable.DEFERRED,
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    @skipUnlessDBFeature('supports_covering_gist_indexes')
    def test_range_adjacent_gist_opclasses_include(self):
        constraint_name = 'ints_adjacent_gist_opclasses_include'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='gist',
            opclasses=['range_ops'],
            include=['decimals'],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    @skipUnlessDBFeature('supports_covering_spgist_indexes')
    def test_range_adjacent_spgist_opclasses_include(self):
        constraint_name = 'ints_adjacent_spgist_opclasses_include'
        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[('ints', RangeOperators.ADJACENT_TO)],
            index_type='spgist',
            opclasses=['range_ops'],
            include=['decimals'],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(RangesModel, constraint)
        self.assertIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))

    def test_range_equal_cast(self):
        constraint_name = 'exclusion_equal_room_cast'
        self.assertNotIn(constraint_name, self.get_constraints(Room._meta.db_table))
        constraint = ExclusionConstraint(
            name=constraint_name,
            expressions=[(Cast('number', IntegerField()), RangeOperators.EQUAL)],
        )
        with connection.schema_editor() as editor:
            editor.add_constraint(Room, constraint)
        self.assertIn(constraint_name, self.get_constraints(Room._meta.db_table))",1,334 2000 40 2001 41 58 348 2002 40 2003 44 2004 41 58 648 497 2005 46 2006 40 41 311 2006 58 450 2005 46 2007 46 2002 40 2006 44 2004 41 348 2008 40 2003 41 58 2009 61 648 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2013 61 648 44 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 2019 61 2016 40 648 41 44 41 348 2020 40 2003 41 58 2009 61 648 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2013 61 648 44 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 41 348 2021 40 2003 41 58 2009 61 648 385 2015 398 40 91 648 93 44 91 40 648 41 93 44 91 40 648 44 648 44 648 41 93 41 58 497 2003 46 2022 40 2015 41 44 2003 46 2010 40 2011 44 2009 41 58 2012 40 2013 61 648 44 2014 61 648 44 2015 61 2015 44 41 348 2023 40 2003 41 58 2009 61 648 385 2024 398 40 303 44 91 93 41 58 497 2003 46 2022 40 2024 41 44 2003 46 2010 40 2011 44 2009 41 58 2012 40 2013 61 648 44 2014 61 648 44 2015 61 2024 44 41 348 2025 40 2003 41 58 2009 61 648 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 2026 61 648 44 41 348 2027 40 2003 41 58 2009 61 648 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 2019 61 2028 40 2029 61 302 41 44 2026 61 2030 46 2031 44 41 348 2032 40 2003 41 58 2009 61 648 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 399 61 648 44 41 348 2033 40 2003 41 58 2009 61 648 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 2034 61 648 44 41 348 2035 40 2003 41 58 2009 61 40 648 648 648 41 497 2003 46 2010 40 2011 44 2009 41 58 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 93 44 2034 61 91 648 44 648 93 44 41 348 2036 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 44 40 2016 40 648 41 44 2017 46 2038 41 44 93 44 41 2003 46 2039 40 2040 40 2037 41 44 648 648 44 41 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2041 41 93 44 2019 61 2028 40 2029 61 302 41 44 2013 61 648 44 41 2003 46 2039 40 2040 40 2037 41 44 648 648 648 44 41 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2041 41 93 44 2026 61 2030 46 2042 44 41 2003 46 2039 40 2040 40 2037 41 44 648 648 648 44 41 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2041 41 93 44 399 61 91 648 44 648 93 44 41 2003 46 2039 40 2040 40 2037 41 44 648 648 648 44 41 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2041 41 93 44 2034 61 91 648 93 44 41 2003 46 2039 40 2040 40 2037 41 44 648 648 648 44 41 348 2043 40 2003 41 58 2044 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 44 40 2016 40 648 41 44 2017 46 2038 41 44 93 44 2019 61 2028 40 2029 61 302 41 44 41 2045 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 41 2046 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 93 44 2019 61 2028 40 2029 61 302 41 44 41 2047 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 2026 61 2030 46 2031 44 41 2048 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 2026 61 2030 46 2042 44 41 2049 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 2026 61 2030 46 2042 44 399 61 91 648 93 44 41 2050 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 399 61 91 648 93 44 41 2051 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 399 61 91 648 93 44 2034 61 91 648 44 648 93 41 2052 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 44 93 44 2034 61 91 648 44 648 93 41 2003 46 2039 40 2044 44 2044 41 2003 46 2039 40 2044 44 2053 46 2054 41 2003 46 2055 40 2044 44 2045 41 2003 46 2055 40 2044 44 2046 41 2003 46 2055 40 2044 44 2047 41 2003 46 2055 40 2045 44 2046 41 2003 46 2055 40 2045 44 2047 41 2003 46 2055 40 2045 44 2050 41 2003 46 2055 40 2045 44 2052 41 2003 46 2055 40 2047 44 2048 41 2003 46 2055 40 2048 44 2049 41 2003 46 2055 40 2050 44 2051 41 2003 46 2055 40 2044 44 426 40 41 41 348 2056 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 41 2057 44 2058 44 2059 61 2037 46 2060 40 41 2003 46 2039 40 2057 44 648 41 2003 46 2039 40 2058 44 40 41 41 2003 46 2039 40 2059 44 123 648 58 648 44 648 58 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 125 41 348 2061 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2013 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 41 2057 44 2058 44 2059 61 2037 46 2060 40 41 2003 46 2039 40 2057 44 648 41 2003 46 2039 40 2058 44 40 41 41 2003 46 2039 40 2059 44 123 648 58 648 44 648 58 648 44 648 58 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 125 41 348 2062 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 2019 61 2028 40 2029 61 302 41 44 41 2057 44 2058 44 2059 61 2037 46 2060 40 41 2003 46 2039 40 2057 44 648 41 2003 46 2039 40 2058 44 40 41 41 2003 46 2039 40 2059 44 123 648 58 648 44 648 58 91 40 648 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 648 58 2028 40 2029 61 302 41 44 125 41 348 2063 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 93 44 2026 61 2030 46 2031 44 41 2057 44 2058 44 2059 61 2037 46 2060 40 41 2003 46 2039 40 2057 44 648 41 2003 46 2039 40 2058 44 40 41 41 2003 46 2039 40 2059 44 123 648 58 648 44 648 58 91 40 648 44 2017 46 2018 41 93 44 648 58 2030 46 2031 44 125 41 348 2064 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 93 44 399 61 91 648 44 648 93 44 41 2057 44 2058 44 2059 61 2037 46 2060 40 41 2003 46 2039 40 2057 44 648 41 2003 46 2039 40 2058 44 40 41 41 2003 46 2039 40 2059 44 123 648 58 648 44 648 58 91 40 648 44 2017 46 2018 41 93 44 648 58 40 648 44 648 41 44 125 41 348 2065 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 648 44 2017 46 2018 41 93 44 2034 61 91 648 93 44 41 2057 44 2058 44 2059 61 2037 46 2060 40 41 2003 46 2039 40 2057 44 648 41 2003 46 2039 40 2058 44 40 41 41 2003 46 2039 40 2059 44 123 648 58 648 44 648 58 91 40 648 44 2017 46 2018 41 93 44 648 58 91 648 93 44 125 41 348 2066 40 2003 44 2037 41 58 621 2003 46 2067 40 2037 46 2014 44 2003 46 2002 40 2068 46 2069 46 2070 41 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2068 44 2037 41 2003 46 2074 40 2037 46 2014 44 2003 46 2002 40 2068 46 2069 46 2070 41 41 621 2075 61 2076 46 2077 46 2078 40 2079 61 1504 41 2080 61 2076 46 2077 46 2078 40 2079 61 1504 41 2081 61 91 2082 46 2083 40 1505 44 1502 44 1503 41 44 2082 46 2083 40 1505 44 1502 44 1503 41 44 2082 46 2083 40 1505 44 1502 44 1503 41 44 2082 46 2083 40 1505 44 1502 44 1503 41 44 2082 46 2083 40 1505 44 1502 44 1503 41 44 93 2068 46 2077 46 2078 40 2084 61 2085 40 2081 91 1500 93 46 2086 40 41 44 2081 91 1501 93 46 2086 40 41 41 44 2087 61 2081 91 1500 93 44 2088 61 2081 91 1501 93 44 2089 61 2080 44 41 2068 46 2077 46 2078 40 2084 61 2085 40 2081 91 1501 93 46 2086 40 41 44 2081 91 1502 93 46 2086 40 41 41 44 2087 61 2081 91 1501 93 44 2088 61 2081 91 1502 93 44 2089 61 2080 44 41 621 497 2003 46 2090 40 2091 41 44 2092 46 2093 40 41 58 2094 61 2068 40 2084 61 40 2081 91 1501 93 46 2086 40 41 44 2081 91 1502 93 46 2086 40 41 41 44 2087 61 2081 91 1501 93 44 2088 61 2081 91 1502 93 44 2089 61 2080 44 41 2094 46 2095 40 41 621 2068 46 2077 46 2096 40 91 621 2068 40 2084 61 40 2081 91 1501 93 46 2086 40 41 44 2081 91 1502 93 46 2086 40 41 41 44 2087 61 2081 91 1501 93 44 2088 61 2081 91 1502 93 44 2089 61 2075 44 41 44 621 2068 40 2084 61 40 2081 91 1501 93 46 2086 40 41 44 2081 91 1501 93 46 2086 40 41 41 44 2087 61 2081 91 1501 93 44 2088 61 2081 91 1502 93 44 2089 61 2080 44 2029 61 304 44 41 44 621 2068 40 2084 61 40 2081 91 1502 93 46 2086 40 41 44 2081 91 1502 93 46 2086 40 41 41 44 2087 61 2081 91 1502 93 44 2088 61 2081 91 1502 93 44 2089 61 2080 44 41 44 93 41 348 2097 40 2003 41 58 334 2098 40 2099 41 58 389 61 648 2100 61 2101 40 41 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2098 40 648 44 648 44 2102 40 41 41 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 2019 61 2028 40 2029 61 302 41 44 2034 61 91 648 44 648 93 44 41 2003 46 2066 40 2037 41 348 2103 40 2003 41 58 2037 61 2012 40 2014 61 648 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 44 40 648 44 2017 46 2038 41 93 44 2019 61 2028 40 2029 61 302 41 44 41 2003 46 2066 40 2037 41 348 2104 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 497 2003 46 2090 40 2091 41 44 2092 46 2093 40 41 58 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 621 497 2005 46 2071 40 41 311 2072 58 2072 46 2108 40 2106 44 2037 41 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 348 2109 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2110 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 2111 40 648 44 1502 41 44 2017 46 2038 41 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2110 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2110 46 2069 46 2070 41 41 348 2112 40 2003 41 58 2105 61 648 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 2016 40 648 41 44 2017 46 2018 41 44 40 2113 40 648 44 648 41 44 2017 46 2038 41 44 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2068 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2068 46 2069 46 2070 41 44 41 348 2114 40 2003 41 58 2105 61 648 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2038 41 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2115 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2115 46 2069 46 2070 41 44 41 348 2116 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2026 61 2030 46 2031 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 2117 61 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 621 497 2003 46 2090 40 2091 41 58 497 2092 46 2093 40 41 44 2005 46 2006 40 41 311 2006 58 2118 61 2005 46 2119 46 2120 40 2105 41 2006 46 2121 40 648 37 2118 41 621 2117 46 353 40 41 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 64 2122 40 648 41 348 2123 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 44 648 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 497 2003 46 2090 40 2091 41 44 2092 46 2093 40 41 58 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 64 2122 40 648 41 348 2124 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 44 648 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 497 2003 46 2090 40 2091 41 44 2092 46 2093 40 41 58 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 64 2122 40 648 41 348 2125 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 93 44 2019 61 2028 40 2126 61 1503 41 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 64 2122 40 648 41 348 2127 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 93 44 2019 61 2028 40 2126 61 1503 41 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 64 2122 40 648 41 348 2128 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 93 44 2026 61 2030 46 2031 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 64 2122 40 648 41 348 2129 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 93 44 2026 61 2030 46 2031 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 348 2130 40 2003 41 58 2105 61 648 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 93 44 41 2009 61 40 648 648 41 497 2005 46 2071 40 41 311 2072 58 497 2053 46 2131 40 648 44 302 44 41 58 497 2003 46 2010 40 2132 44 2009 41 58 2072 46 2073 40 2106 44 2037 41 348 2133 40 2003 41 58 2105 61 648 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 399 61 91 648 93 44 41 2009 61 40 648 648 41 497 2005 46 2071 40 41 311 2072 58 497 2053 46 2131 40 648 648 44 302 44 41 58 497 2003 46 2010 40 2132 44 2009 41 58 2072 46 2073 40 2106 44 2037 41 348 2134 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2034 61 91 648 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 497 2003 46 2090 40 2091 41 44 2092 46 2093 40 41 58 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1502 44 1503 41 41 2106 46 2077 46 2078 40 2107 61 40 1503 44 1503 41 41 621 497 2005 46 2071 40 41 311 2072 58 2072 46 2108 40 2106 44 2037 41 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 348 2135 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2034 61 91 648 93 44 2019 61 2028 40 2126 61 1503 41 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 348 2136 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2034 61 91 648 93 44 2026 61 2030 46 2031 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 64 2122 40 648 41 348 2137 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 2034 61 91 648 93 44 399 61 91 648 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 64 2122 40 648 41 348 2138 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 648 44 2017 46 2041 41 93 44 2013 61 648 44 2034 61 91 648 93 44 399 61 91 648 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2106 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2106 46 2069 46 2070 41 41 348 2139 40 2003 41 58 2105 61 648 2003 46 2067 40 2105 44 2003 46 2002 40 2076 46 2069 46 2070 41 41 2037 61 2012 40 2014 61 2105 44 2015 61 91 40 2140 40 648 44 2141 40 41 41 44 2017 46 2038 41 93 44 41 497 2005 46 2071 40 41 311 2072 58 2072 46 2073 40 2076 44 2037 41 2003 46 2074 40 2105 44 2003 46 2002 40 2076 46 2069 46 2070 41 41 
133167,Python,"class SchemaTests(TransactionTestCase):
    """"""
    Tests for the schema-alteration code.

    Be aware that these tests are more liable than most to false results,
    as sometimes the code to check if a test has worked is almost as complex
    as the code it is testing.
    """"""

    available_apps = []

    models = [
        Author, AuthorCharFieldWithIndex, AuthorTextFieldWithIndex,
        AuthorWithDefaultHeight, AuthorWithEvenLongerName, Book, BookWeak,
        BookWithLongName, BookWithO2O, BookWithSlug, IntegerPK, Node, Note,
        Tag, TagIndexed, TagM2MTest, TagUniqueRename, Thing, UniqueTest,
    ]

    # Utility functions

    def setUp(self):
        # local_models should contain test dependent model classes that will be
        # automatically removed from the app cache on test tear down.
        self.local_models = []
        # isolated_local_models contains models that are in test methods
        # decorated with @isolate_apps.
        self.isolated_local_models = []

    def tearDown(self):
        # Delete any tables made for our models
        self.delete_tables()
        new_apps.clear_cache()
        for model in new_apps.get_models():
            model._meta._expire_cache()
        if 'schema' in new_apps.all_models:
            for model in self.local_models:
                for many_to_many in model._meta.many_to_many:
                    through = many_to_many.remote_field.through
                    if through and through._meta.auto_created:
                        del new_apps.all_models['schema'][through._meta.model_name]
                del new_apps.all_models['schema'][model._meta.model_name]
        if self.isolated_local_models:
            with connection.schema_editor() as editor:
                for model in self.isolated_local_models:
                    editor.delete_model(model)

    def delete_tables(self):
        ""Deletes all model tables for our models for a clean test environment""
        converter = connection.introspection.identifier_converter
        with connection.schema_editor() as editor:
            connection.disable_constraint_checking()
            table_names = connection.introspection.table_names()
            if connection.features.ignores_table_name_case:
                table_names = [table_name.lower() for table_name in table_names]
            for model in itertools.chain(SchemaTests.models, self.local_models):
                tbl = converter(model._meta.db_table)
                if connection.features.ignores_table_name_case:
                    tbl = tbl.lower()
                if tbl in table_names:
                    editor.delete_model(model)
                    table_names.remove(tbl)
            connection.enable_constraint_checking()

    def column_classes(self, model):
        with connection.cursor() as cursor:
            columns = {
                d[0]: (connection.introspection.get_field_type(d[1], d), d)
                for d in connection.introspection.get_table_description(
                    cursor,
                    model._meta.db_table,
                )
            }
        # SQLite has a different format for field_type
        for name, (type, desc) in columns.items():
            if isinstance(type, tuple):
                columns[name] = (type[0], desc)
        return columns

    def get_primary_key(self, table):
        with connection.cursor() as cursor:
            return connection.introspection.get_primary_key_column(cursor, table)

    def get_indexes(self, table):
        """"""
        Get the indexes on the table using a new cursor.
        """"""
        with connection.cursor() as cursor:
            return [
                c['columns'][0]
                for c in connection.introspection.get_constraints(cursor, table).values()
                if c['index'] and len(c['columns']) == 1
            ]

    def get_uniques(self, table):
        with connection.cursor() as cursor:
            return [
                c['columns'][0]
                for c in connection.introspection.get_constraints(cursor, table).values()
                if c['unique'] and len(c['columns']) == 1
            ]

    def get_constraints(self, table):
        """"""
        Get the constraints on a table using a new cursor.
        """"""
        with connection.cursor() as cursor:
            return connection.introspection.get_constraints(cursor, table)

    def get_constraints_for_column(self, model, column_name):
        constraints = self.get_constraints(model._meta.db_table)
        constraints_for_column = []
        for name, details in constraints.items():
            if details['columns'] == [column_name]:
                constraints_for_column.append(name)
        return sorted(constraints_for_column)

    def check_added_field_default(self, schema_editor, model, field, field_name, expected_default,
                                  cast_function=None):
        with connection.cursor() as cursor:
            schema_editor.add_field(model, field)
            cursor.execute(""SELECT {} FROM {};"".format(field_name, model._meta.db_table))
            database_default = cursor.fetchall()[0][0]
            if cast_function and type(database_default) != type(expected_default):
                database_default = cast_function(database_default)
            self.assertEqual(database_default, expected_default)

    def get_constraints_count(self, table, column, fk_to):
        """"""
        Return a dict with keys 'fks', 'uniques, and 'indexes' indicating the
        number of foreign keys, unique constraints, and indexes on
        `table`.`column`. The `fk_to` argument is a 2-tuple specifying the
        expected foreign key relationship's (table, column).
        """"""
        with connection.cursor() as cursor:
            constraints = connection.introspection.get_constraints(cursor, table)
        counts = {'fks': 0, 'uniques': 0, 'indexes': 0}
        for c in constraints.values():
            if c['columns'] == [column]:
                if c['foreign_key'] == fk_to:
                    counts['fks'] += 1
                if c['unique']:
                    counts['uniques'] += 1
                elif c['index']:
                    counts['indexes'] += 1
        return counts

    def get_column_collation(self, table, column):
        with connection.cursor() as cursor:
            return next(
                f.collation
                for f in connection.introspection.get_table_description(cursor, table)
                if f.name == column
            )

    def assertIndexOrder(self, table, index, order):
        constraints = self.get_constraints(table)
        self.assertIn(index, constraints)
        index_orders = constraints[index]['orders']
        self.assertTrue(all(val == expected for val, expected in zip(index_orders, order)))

    def assertForeignKeyExists(self, model, column, expected_fk_table, field='id'):
        """"""
        Fail if the FK constraint on `model.Meta.db_table`.`column` to
        `expected_fk_table`.id doesn't exist.
        """"""
        constraints = self.get_constraints(model._meta.db_table)
        constraint_fk = None
        for details in constraints.values():
            if details['columns'] == [column] and details['foreign_key']:
                constraint_fk = details['foreign_key']
                break
        self.assertEqual(constraint_fk, (expected_fk_table, field))

    def assertForeignKeyNotExists(self, model, column, expected_fk_table):
        with self.assertRaises(AssertionError):
            self.assertForeignKeyExists(model, column, expected_fk_table)

    # Tests
    def test_creation_deletion(self):
        """"""
        Tries creating a model's table, and then deleting it.
        """"""
        with connection.schema_editor() as editor:
            # Create the table
            editor.create_model(Author)
            # The table is there
            list(Author.objects.all())
            # Clean up that table
            editor.delete_model(Author)
            # No deferred SQL should be left over.
            self.assertEqual(editor.deferred_sql, [])
        # The table is gone
        with self.assertRaises(DatabaseError):
            list(Author.objects.all())

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_fk(self):
        ""Creating tables out of FK order, then repointing, works""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Book)
            editor.create_model(Author)
            editor.create_model(Tag)
        # Initial tables are there
        list(Author.objects.all())
        list(Book.objects.all())
        # Make sure the FK constraint is present
        with self.assertRaises(IntegrityError):
            Book.objects.create(
                author_id=1,
                title=""Much Ado About Foreign Keys"",
                pub_date=datetime.datetime.now(),
            )
        # Repoint the FK constraint
        old_field = Book._meta.get_field(""author"")
        new_field = ForeignKey(Tag, CASCADE)
        new_field.set_attributes_from_name(""author"")
        with connection.schema_editor() as editor:
            editor.alter_field(Book, old_field, new_field, strict=True)
        self.assertForeignKeyExists(Book, 'author_id', 'schema_tag')

    @skipUnlessDBFeature('can_create_inline_fk')
    def test_inline_fk(self):
        # Create some tables.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
            editor.create_model(Note)
        self.assertForeignKeyNotExists(Note, 'book_id', 'schema_book')
        # Add a foreign key from one to the other.
        with connection.schema_editor() as editor:
            new_field = ForeignKey(Book, CASCADE)
            new_field.set_attributes_from_name('book')
            editor.add_field(Note, new_field)
        self.assertForeignKeyExists(Note, 'book_id', 'schema_book')
        # Creating a FK field with a constraint uses a single statement without
        # a deferred ALTER TABLE.
        self.assertFalse([
            sql for sql in (str(statement) for statement in editor.deferred_sql)
            if sql.startswith('ALTER TABLE') and 'ADD CONSTRAINT' in sql
        ])

    @skipUnlessDBFeature('can_create_inline_fk')
    def test_add_inline_fk_update_data(self):
        with connection.schema_editor() as editor:
            editor.create_model(Node)
        # Add an inline foreign key and update data in the same transaction.
        new_field = ForeignKey(Node, CASCADE, related_name='new_fk', null=True)
        new_field.set_attributes_from_name('new_parent_fk')
        parent = Node.objects.create()
        with connection.schema_editor() as editor:
            editor.add_field(Node, new_field)
            editor.execute('UPDATE schema_node SET new_parent_fk_id = %s;', [parent.pk])
        assertIndex = (
            self.assertIn
            if connection.features.indexes_foreign_keys
            else self.assertNotIn
        )
        assertIndex('new_parent_fk_id', self.get_indexes(Node._meta.db_table))

    @skipUnlessDBFeature(
        'can_create_inline_fk',
        'allows_multiple_constraints_on_same_fields',
    )
    @isolate_apps('schema')
    def test_add_inline_fk_index_update_data(self):
        class Node(Model):
            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Node)
        # Add an inline foreign key, update data, and an index in the same
        # transaction.
        new_field = ForeignKey(Node, CASCADE, related_name='new_fk', null=True)
        new_field.set_attributes_from_name('new_parent_fk')
        parent = Node.objects.create()
        with connection.schema_editor() as editor:
            editor.add_field(Node, new_field)
            Node._meta.add_field(new_field)
            editor.execute('UPDATE schema_node SET new_parent_fk_id = %s;', [parent.pk])
            editor.add_index(Node, Index(fields=['new_parent_fk'], name='new_parent_inline_fk_idx'))
        self.assertIn('new_parent_fk_id', self.get_indexes(Node._meta.db_table))

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_char_field_with_db_index_to_fk(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(AuthorCharFieldWithIndex)
        # Change CharField to FK
        old_field = AuthorCharFieldWithIndex._meta.get_field('char_field')
        new_field = ForeignKey(Author, CASCADE, blank=True)
        new_field.set_attributes_from_name('char_field')
        with connection.schema_editor() as editor:
            editor.alter_field(AuthorCharFieldWithIndex, old_field, new_field, strict=True)
        self.assertForeignKeyExists(AuthorCharFieldWithIndex, 'char_field_id', 'schema_author')

    @skipUnlessDBFeature('supports_foreign_keys')
    @skipUnlessDBFeature('supports_index_on_text_field')
    def test_text_field_with_db_index_to_fk(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(AuthorTextFieldWithIndex)
        # Change TextField to FK
        old_field = AuthorTextFieldWithIndex._meta.get_field('text_field')
        new_field = ForeignKey(Author, CASCADE, blank=True)
        new_field.set_attributes_from_name('text_field')
        with connection.schema_editor() as editor:
            editor.alter_field(AuthorTextFieldWithIndex, old_field, new_field, strict=True)
        self.assertForeignKeyExists(AuthorTextFieldWithIndex, 'text_field_id', 'schema_author')

    @isolate_apps('schema')
    def test_char_field_pk_to_auto_field(self):
        class Foo(Model):
            id = CharField(max_length=255, primary_key=True)

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Foo)
        self.isolated_local_models = [Foo]
        old_field = Foo._meta.get_field('id')
        new_field = AutoField(primary_key=True)
        new_field.set_attributes_from_name('id')
        new_field.model = Foo
        with connection.schema_editor() as editor:
            editor.alter_field(Foo, old_field, new_field, strict=True)

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_fk_to_proxy(self):
        ""Creating a FK to a proxy model creates database constraints.""
        class AuthorProxy(Author):
            class Meta:
                app_label = 'schema'
                apps = new_apps
                proxy = True

        class AuthorRef(Model):
            author = ForeignKey(AuthorProxy, on_delete=CASCADE)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        self.local_models = [AuthorProxy, AuthorRef]

        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(AuthorRef)
        self.assertForeignKeyExists(AuthorRef, 'author_id', 'schema_author')

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_fk_db_constraint(self):
        ""The db_constraint parameter is respected""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
            editor.create_model(Author)
            editor.create_model(BookWeak)
        # Initial tables are there
        list(Author.objects.all())
        list(Tag.objects.all())
        list(BookWeak.objects.all())
        self.assertForeignKeyNotExists(BookWeak, 'author_id', 'schema_author')
        # Make a db_constraint=False FK
        new_field = ForeignKey(Tag, CASCADE, db_constraint=False)
        new_field.set_attributes_from_name(""tag"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        self.assertForeignKeyNotExists(Author, 'tag_id', 'schema_tag')
        # Alter to one with a constraint
        new_field2 = ForeignKey(Tag, CASCADE)
        new_field2.set_attributes_from_name(""tag"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, new_field2, strict=True)
        self.assertForeignKeyExists(Author, 'tag_id', 'schema_tag')
        # Alter to one without a constraint again
        new_field2 = ForeignKey(Tag, CASCADE)
        new_field2.set_attributes_from_name(""tag"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field2, new_field, strict=True)
        self.assertForeignKeyNotExists(Author, 'tag_id', 'schema_tag')

    @isolate_apps('schema')
    def test_no_db_constraint_added_during_primary_key_change(self):
        """"""
        When a primary key that's pointed to by a ForeignKey with
        db_constraint=False is altered, a foreign key constraint isn't added.
        """"""
        class Author(Model):
            class Meta:
                app_label = 'schema'

        class BookWeak(Model):
            author = ForeignKey(Author, CASCADE, db_constraint=False)

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWeak)
        self.assertForeignKeyNotExists(BookWeak, 'author_id', 'schema_author')
        old_field = Author._meta.get_field('id')
        new_field = BigAutoField(primary_key=True)
        new_field.model = Author
        new_field.set_attributes_from_name('id')
        # @isolate_apps() and inner models are needed to have the model
        # relations populated, otherwise this doesn't act as a regression test.
        self.assertEqual(len(new_field.model._meta.related_objects), 1)
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        self.assertForeignKeyNotExists(BookWeak, 'author_id', 'schema_author')

    def _test_m2m_db_constraint(self, M2MFieldClass):
        class LocalAuthorWithM2M(Model):
            name = CharField(max_length=255)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        self.local_models = [LocalAuthorWithM2M]

        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
            editor.create_model(LocalAuthorWithM2M)
        # Initial tables are there
        list(LocalAuthorWithM2M.objects.all())
        list(Tag.objects.all())
        # Make a db_constraint=False FK
        new_field = M2MFieldClass(Tag, related_name=""authors"", db_constraint=False)
        new_field.contribute_to_class(LocalAuthorWithM2M, ""tags"")
        # Add the field
        with connection.schema_editor() as editor:
            editor.add_field(LocalAuthorWithM2M, new_field)
        self.assertForeignKeyNotExists(new_field.remote_field.through, 'tag_id', 'schema_tag')

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_m2m_db_constraint(self):
        self._test_m2m_db_constraint(ManyToManyField)

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_m2m_db_constraint_custom(self):
        self._test_m2m_db_constraint(CustomManyToManyField)

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_m2m_db_constraint_inherited(self):
        self._test_m2m_db_constraint(InheritedManyToManyField)

    def test_add_field(self):
        """"""
        Tests adding fields to models
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure there's no age field
        columns = self.column_classes(Author)
        self.assertNotIn(""age"", columns)
        # Add the new field
        new_field = IntegerField(null=True)
        new_field.set_attributes_from_name(""age"")
        with CaptureQueriesContext(connection) as ctx, connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        drop_default_sql = editor.sql_alter_column_no_default % {
            'column': editor.quote_name(new_field.name),
        }
        self.assertFalse(any(drop_default_sql in query['sql'] for query in ctx.captured_queries))
        # Table is not rebuilt.
        self.assertIs(any(
            'CREATE TABLE' in query['sql']
            for query in ctx.captured_queries
        ), False)
        self.assertIs(any(
            'DROP TABLE' in query['sql']
            for query in ctx.captured_queries
        ), False)
        columns = self.column_classes(Author)
        self.assertEqual(columns['age'][0], connection.features.introspected_field_types['IntegerField'])
        self.assertTrue(columns['age'][1][6])

    def test_add_field_remove_field(self):
        """"""
        Adding a field and removing it removes all deferred sql referring to it.
        """"""
        with connection.schema_editor() as editor:
            # Create a table with a unique constraint on the slug field.
            editor.create_model(Tag)
            # Remove the slug column.
            editor.remove_field(Tag, Tag._meta.get_field('slug'))
        self.assertEqual(editor.deferred_sql, [])

    def test_add_field_temp_default(self):
        """"""
        Tests adding fields to models with a temporary default
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure there's no age field
        columns = self.column_classes(Author)
        self.assertNotIn(""age"", columns)
        # Add some rows of data
        Author.objects.create(name=""Andrew"", height=30)
        Author.objects.create(name=""Andrea"")
        # Add a not-null field
        new_field = CharField(max_length=30, default=""Godwin"")
        new_field.set_attributes_from_name(""surname"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        columns = self.column_classes(Author)
        self.assertEqual(columns['surname'][0], connection.features.introspected_field_types['CharField'])
        self.assertEqual(columns['surname'][1][6],
                         connection.features.interprets_empty_strings_as_nulls)

    def test_add_field_temp_default_boolean(self):
        """"""
        Tests adding fields to models with a temporary default where
        the default is False. (#21783)
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure there's no age field
        columns = self.column_classes(Author)
        self.assertNotIn(""age"", columns)
        # Add some rows of data
        Author.objects.create(name=""Andrew"", height=30)
        Author.objects.create(name=""Andrea"")
        # Add a not-null field
        new_field = BooleanField(default=False)
        new_field.set_attributes_from_name(""awesome"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        columns = self.column_classes(Author)
        # BooleanField are stored as TINYINT(1) on MySQL.
        field_type = columns['awesome'][0]
        self.assertEqual(field_type, connection.features.introspected_field_types['BooleanField'])

    def test_add_field_default_transform(self):
        """"""
        Tests adding fields to models with a default that is not directly
        valid in the database (#22581)
        """"""

        class TestTransformField(IntegerField):

            # Weird field that saves the count of items in its value
            def get_default(self):
                return self.default

            def get_prep_value(self, value):
                if value is None:
                    return 0
                return len(value)

        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Add some rows of data
        Author.objects.create(name=""Andrew"", height=30)
        Author.objects.create(name=""Andrea"")
        # Add the field with a default it needs to cast (to string in this case)
        new_field = TestTransformField(default={1: 2})
        new_field.set_attributes_from_name(""thing"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        # Ensure the field is there
        columns = self.column_classes(Author)
        field_type, field_info = columns['thing']
        self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])
        # Make sure the values were transformed correctly
        self.assertEqual(Author.objects.extra(where=[""thing = 1""]).count(), 2)

    def test_add_field_binary(self):
        """"""
        Tests binary fields get a sane default (#22851)
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Add the new field
        new_field = BinaryField(blank=True)
        new_field.set_attributes_from_name(""bits"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        columns = self.column_classes(Author)
        # MySQL annoyingly uses the same backend, so it'll come back as one of
        # these two types.
        self.assertIn(columns['bits'][0], (""BinaryField"", ""TextField""))

    def test_add_field_durationfield_with_default(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        new_field = DurationField(default=datetime.timedelta(minutes=10))
        new_field.set_attributes_from_name('duration')
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        columns = self.column_classes(Author)
        self.assertEqual(
            columns['duration'][0],
            connection.features.introspected_field_types['DurationField'],
        )

    @unittest.skipUnless(connection.vendor == 'mysql', ""MySQL specific"")
    def test_add_binaryfield_mediumblob(self):
        """"""
        Test adding a custom-sized binary field on MySQL (#24846).
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Add the new field with default
        new_field = MediumBlobField(blank=True, default=b'123')
        new_field.set_attributes_from_name('bits')
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        columns = self.column_classes(Author)
        # Introspection treats BLOBs as TextFields
        self.assertEqual(columns['bits'][0], ""TextField"")

    def test_alter(self):
        """"""
        Tests simple altering of fields
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure the field is right to begin with
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], connection.features.introspected_field_types['CharField'])
        self.assertEqual(bool(columns['name'][1][6]), bool(connection.features.interprets_empty_strings_as_nulls))
        # Alter the name field to a TextField
        old_field = Author._meta.get_field(""name"")
        new_field = TextField(null=True)
        new_field.set_attributes_from_name(""name"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], ""TextField"")
        self.assertTrue(columns['name'][1][6])
        # Change nullability again
        new_field2 = TextField(null=False)
        new_field2.set_attributes_from_name(""name"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, new_field2, strict=True)
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], ""TextField"")
        self.assertEqual(bool(columns['name'][1][6]), bool(connection.features.interprets_empty_strings_as_nulls))

    def test_alter_auto_field_to_integer_field(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Change AutoField to IntegerField
        old_field = Author._meta.get_field('id')
        new_field = IntegerField(primary_key=True)
        new_field.set_attributes_from_name('id')
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        # Now that ID is an IntegerField, the database raises an error if it
        # isn't provided.
        if not connection.features.supports_unspecified_pk:
            with self.assertRaises(DatabaseError):
                Author.objects.create()

    def test_alter_auto_field_to_char_field(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Change AutoField to CharField
        old_field = Author._meta.get_field('id')
        new_field = CharField(primary_key=True, max_length=50)
        new_field.set_attributes_from_name('id')
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)

    @isolate_apps('schema')
    def test_alter_auto_field_quoted_db_column(self):
        class Foo(Model):
            id = AutoField(primary_key=True, db_column='""quoted_id""')

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Foo)
        self.isolated_local_models = [Foo]
        old_field = Foo._meta.get_field('id')
        new_field = BigAutoField(primary_key=True)
        new_field.model = Foo
        new_field.db_column = '""quoted_id""'
        new_field.set_attributes_from_name('id')
        with connection.schema_editor() as editor:
            editor.alter_field(Foo, old_field, new_field, strict=True)
        Foo.objects.create()

    def test_alter_not_unique_field_to_primary_key(self):
        # Create the table.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Change UUIDField to primary key.
        old_field = Author._meta.get_field('uuid')
        new_field = UUIDField(primary_key=True)
        new_field.set_attributes_from_name('uuid')
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.remove_field(Author, Author._meta.get_field('id'))
            editor.alter_field(Author, old_field, new_field, strict=True)
        # Redundant unique constraint is not added.
        count = self.get_constraints_count(
            Author._meta.db_table,
            Author._meta.get_field('uuid').column,
            None,
        )
        self.assertLessEqual(count['uniques'], 1)

    @isolate_apps('schema')
    def test_alter_primary_key_quoted_db_table(self):
        class Foo(Model):
            class Meta:
                app_label = 'schema'
                db_table = '""foo""'

        with connection.schema_editor() as editor:
            editor.create_model(Foo)
        self.isolated_local_models = [Foo]
        old_field = Foo._meta.get_field('id')
        new_field = BigAutoField(primary_key=True)
        new_field.model = Foo
        new_field.set_attributes_from_name('id')
        with connection.schema_editor() as editor:
            editor.alter_field(Foo, old_field, new_field, strict=True)
        Foo.objects.create()

    def test_alter_text_field(self):
        # Regression for ""BLOB/TEXT column 'info' can't have a default value"")
        # on MySQL.
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        old_field = Note._meta.get_field(""info"")
        new_field = TextField(blank=True)
        new_field.set_attributes_from_name(""info"")
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)

    def test_alter_text_field_to_not_null_with_default_value(self):
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        old_field = Note._meta.get_field('address')
        new_field = TextField(blank=True, default='', null=False)
        new_field.set_attributes_from_name('address')
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)

    @skipUnlessDBFeature('can_defer_constraint_checks', 'can_rollback_ddl')
    def test_alter_fk_checks_deferred_constraints(self):
        """"""
        #25492 - Altering a foreign key's structure and data in the same
        transaction.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Node)
        old_field = Node._meta.get_field('parent')
        new_field = ForeignKey(Node, CASCADE)
        new_field.set_attributes_from_name('parent')
        parent = Node.objects.create()
        with connection.schema_editor() as editor:
            # Update the parent FK to create a deferred constraint check.
            Node.objects.update(parent=parent)
            editor.alter_field(Node, old_field, new_field, strict=True)

    def test_alter_text_field_to_date_field(self):
        """"""
        #25002 - Test conversion of text field to date field.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        Note.objects.create(info='1988-05-05')
        old_field = Note._meta.get_field('info')
        new_field = DateField(blank=True)
        new_field.set_attributes_from_name('info')
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        # Make sure the field isn't nullable
        columns = self.column_classes(Note)
        self.assertFalse(columns['info'][1][6])

    def test_alter_text_field_to_datetime_field(self):
        """"""
        #25002 - Test conversion of text field to datetime field.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        Note.objects.create(info='1988-05-05 3:16:17.4567')
        old_field = Note._meta.get_field('info')
        new_field = DateTimeField(blank=True)
        new_field.set_attributes_from_name('info')
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        # Make sure the field isn't nullable
        columns = self.column_classes(Note)
        self.assertFalse(columns['info'][1][6])

    def test_alter_text_field_to_time_field(self):
        """"""
        #25002 - Test conversion of text field to time field.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        Note.objects.create(info='3:16:17.4567')
        old_field = Note._meta.get_field('info')
        new_field = TimeField(blank=True)
        new_field.set_attributes_from_name('info')
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        # Make sure the field isn't nullable
        columns = self.column_classes(Note)
        self.assertFalse(columns['info'][1][6])

    @skipIfDBFeature('interprets_empty_strings_as_nulls')
    def test_alter_textual_field_keep_null_status(self):
        """"""
        Changing a field type shouldn't affect the not null status.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        with self.assertRaises(IntegrityError):
            Note.objects.create(info=None)
        old_field = Note._meta.get_field(""info"")
        new_field = CharField(max_length=50)
        new_field.set_attributes_from_name(""info"")
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        with self.assertRaises(IntegrityError):
            Note.objects.create(info=None)

    @skipUnlessDBFeature('interprets_empty_strings_as_nulls')
    def test_alter_textual_field_not_null_to_null(self):
        """"""
        Nullability for textual fields is preserved on databases that
        interpret empty strings as NULLs.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        columns = self.column_classes(Author)
        # Field is nullable.
        self.assertTrue(columns['uuid'][1][6])
        # Change to NOT NULL.
        old_field = Author._meta.get_field('uuid')
        new_field = SlugField(null=False, blank=True)
        new_field.set_attributes_from_name('uuid')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        columns = self.column_classes(Author)
        # Nullability is preserved.
        self.assertTrue(columns['uuid'][1][6])

    def test_alter_numeric_field_keep_null_status(self):
        """"""
        Changing a field type shouldn't affect the not null status.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(UniqueTest)
        with self.assertRaises(IntegrityError):
            UniqueTest.objects.create(year=None, slug='aaa')
        old_field = UniqueTest._meta.get_field(""year"")
        new_field = BigIntegerField()
        new_field.set_attributes_from_name(""year"")
        with connection.schema_editor() as editor:
            editor.alter_field(UniqueTest, old_field, new_field, strict=True)
        with self.assertRaises(IntegrityError):
            UniqueTest.objects.create(year=None, slug='bbb')

    def test_alter_null_to_not_null(self):
        """"""
        #23609 - Tests handling of default values when altering from NULL to NOT NULL.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure the field is right to begin with
        columns = self.column_classes(Author)
        self.assertTrue(columns['height'][1][6])
        # Create some test data
        Author.objects.create(name='Not null author', height=12)
        Author.objects.create(name='Null author')
        # Verify null value
        self.assertEqual(Author.objects.get(name='Not null author').height, 12)
        self.assertIsNone(Author.objects.get(name='Null author').height)
        # Alter the height field to NOT NULL with default
        old_field = Author._meta.get_field(""height"")
        new_field = PositiveIntegerField(default=42)
        new_field.set_attributes_from_name(""height"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        columns = self.column_classes(Author)
        self.assertFalse(columns['height'][1][6])
        # Verify default value
        self.assertEqual(Author.objects.get(name='Not null author').height, 12)
        self.assertEqual(Author.objects.get(name='Null author').height, 42)

    def test_alter_charfield_to_null(self):
        """"""
        #24307 - Should skip an alter statement on databases with
        interprets_empty_strings_as_nulls when changing a CharField to null.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Change the CharField to null
        old_field = Author._meta.get_field('name')
        new_field = copy(old_field)
        new_field.null = True
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)

    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific')
    def test_alter_char_field_decrease_length(self):
        # Create the table.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        Author.objects.create(name='x' * 255)
        # Change max_length of CharField.
        old_field = Author._meta.get_field('name')
        new_field = CharField(max_length=254)
        new_field.set_attributes_from_name('name')
        with connection.schema_editor() as editor:
            msg = 'value too long for type character varying(254)'
            with self.assertRaisesMessage(DataError, msg):
                editor.alter_field(Author, old_field, new_field, strict=True)

    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific')
    def test_alter_field_with_custom_db_type(self):
        from django.contrib.postgres.fields import ArrayField

        class Foo(Model):
            field = ArrayField(CharField(max_length=255))

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Foo)
        self.isolated_local_models = [Foo]
        old_field = Foo._meta.get_field('field')
        new_field = ArrayField(CharField(max_length=16))
        new_field.set_attributes_from_name('field')
        new_field.model = Foo
        with connection.schema_editor() as editor:
            editor.alter_field(Foo, old_field, new_field, strict=True)

    @isolate_apps('schema')
    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific')
    def test_alter_array_field_decrease_base_field_length(self):
        from django.contrib.postgres.fields import ArrayField

        class ArrayModel(Model):
            field = ArrayField(CharField(max_length=16))

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(ArrayModel)
        self.isolated_local_models = [ArrayModel]
        ArrayModel.objects.create(field=['x' * 16])
        old_field = ArrayModel._meta.get_field('field')
        new_field = ArrayField(CharField(max_length=15))
        new_field.set_attributes_from_name('field')
        new_field.model = ArrayModel
        with connection.schema_editor() as editor:
            msg = 'value too long for type character varying(15)'
            with self.assertRaisesMessage(DataError, msg):
                editor.alter_field(ArrayModel, old_field, new_field, strict=True)

    @isolate_apps('schema')
    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific')
    def test_alter_array_field_decrease_nested_base_field_length(self):
        from django.contrib.postgres.fields import ArrayField

        class ArrayModel(Model):
            field = ArrayField(ArrayField(CharField(max_length=16)))

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(ArrayModel)
        self.isolated_local_models = [ArrayModel]
        ArrayModel.objects.create(field=[['x' * 16]])
        old_field = ArrayModel._meta.get_field('field')
        new_field = ArrayField(ArrayField(CharField(max_length=15)))
        new_field.set_attributes_from_name('field')
        new_field.model = ArrayModel
        with connection.schema_editor() as editor:
            msg = 'value too long for type character varying(15)'
            with self.assertRaisesMessage(DataError, msg):
                editor.alter_field(ArrayModel, old_field, new_field, strict=True)

    def test_alter_textfield_to_null(self):
        """"""
        #24307 - Should skip an alter statement on databases with
        interprets_empty_strings_as_nulls when changing a TextField to null.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        # Change the TextField to null
        old_field = Note._meta.get_field('info')
        new_field = copy(old_field)
        new_field.null = True
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)

    def test_alter_null_to_not_null_keeping_default(self):
        """"""
        #23738 - Can change a nullable field with default to non-nullable
        with the same default.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithDefaultHeight)
        # Ensure the field is right to begin with
        columns = self.column_classes(AuthorWithDefaultHeight)
        self.assertTrue(columns['height'][1][6])
        # Alter the height field to NOT NULL keeping the previous default
        old_field = AuthorWithDefaultHeight._meta.get_field(""height"")
        new_field = PositiveIntegerField(default=42)
        new_field.set_attributes_from_name(""height"")
        with connection.schema_editor() as editor:
            editor.alter_field(AuthorWithDefaultHeight, old_field, new_field, strict=True)
        columns = self.column_classes(AuthorWithDefaultHeight)
        self.assertFalse(columns['height'][1][6])

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_fk(self):
        """"""
        Tests altering of FKs
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        # Ensure the field is right to begin with
        columns = self.column_classes(Book)
        self.assertEqual(columns['author_id'][0], connection.features.introspected_field_types['IntegerField'])
        self.assertForeignKeyExists(Book, 'author_id', 'schema_author')
        # Alter the FK
        old_field = Book._meta.get_field(""author"")
        new_field = ForeignKey(Author, CASCADE, editable=False)
        new_field.set_attributes_from_name(""author"")
        with connection.schema_editor() as editor:
            editor.alter_field(Book, old_field, new_field, strict=True)
        columns = self.column_classes(Book)
        self.assertEqual(columns['author_id'][0], connection.features.introspected_field_types['IntegerField'])
        self.assertForeignKeyExists(Book, 'author_id', 'schema_author')

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_to_fk(self):
        """"""
        #24447 - Tests adding a FK constraint for an existing column
        """"""
        class LocalBook(Model):
            author = IntegerField()
            title = CharField(max_length=100, db_index=True)
            pub_date = DateTimeField()

            class Meta:
                app_label = 'schema'
                apps = new_apps

        self.local_models = [LocalBook]

        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(LocalBook)
        # Ensure no FK constraint exists
        constraints = self.get_constraints(LocalBook._meta.db_table)
        for details in constraints.values():
            if details['foreign_key']:
                self.fail('Found an unexpected FK constraint to %s' % details['columns'])
        old_field = LocalBook._meta.get_field(""author"")
        new_field = ForeignKey(Author, CASCADE)
        new_field.set_attributes_from_name(""author"")
        with connection.schema_editor() as editor:
            editor.alter_field(LocalBook, old_field, new_field, strict=True)
        self.assertForeignKeyExists(LocalBook, 'author_id', 'schema_author')

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_o2o_to_fk(self):
        """"""
        #24163 - Tests altering of OneToOneField to ForeignKey
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithO2O)
        # Ensure the field is right to begin with
        columns = self.column_classes(BookWithO2O)
        self.assertEqual(columns['author_id'][0], connection.features.introspected_field_types['IntegerField'])
        # Ensure the field is unique
        author = Author.objects.create(name=""Joe"")
        BookWithO2O.objects.create(author=author, title=""Django 1"", pub_date=datetime.datetime.now())
        with self.assertRaises(IntegrityError):
            BookWithO2O.objects.create(author=author, title=""Django 2"", pub_date=datetime.datetime.now())
        BookWithO2O.objects.all().delete()
        self.assertForeignKeyExists(BookWithO2O, 'author_id', 'schema_author')
        # Alter the OneToOneField to ForeignKey
        old_field = BookWithO2O._meta.get_field(""author"")
        new_field = ForeignKey(Author, CASCADE)
        new_field.set_attributes_from_name(""author"")
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithO2O, old_field, new_field, strict=True)
        columns = self.column_classes(Book)
        self.assertEqual(columns['author_id'][0], connection.features.introspected_field_types['IntegerField'])
        # Ensure the field is not unique anymore
        Book.objects.create(author=author, title=""Django 1"", pub_date=datetime.datetime.now())
        Book.objects.create(author=author, title=""Django 2"", pub_date=datetime.datetime.now())
        self.assertForeignKeyExists(Book, 'author_id', 'schema_author')

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_fk_to_o2o(self):
        """"""
        #24163 - Tests altering of ForeignKey to OneToOneField
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        # Ensure the field is right to begin with
        columns = self.column_classes(Book)
        self.assertEqual(columns['author_id'][0], connection.features.introspected_field_types['IntegerField'])
        # Ensure the field is not unique
        author = Author.objects.create(name=""Joe"")
        Book.objects.create(author=author, title=""Django 1"", pub_date=datetime.datetime.now())
        Book.objects.create(author=author, title=""Django 2"", pub_date=datetime.datetime.now())
        Book.objects.all().delete()
        self.assertForeignKeyExists(Book, 'author_id', 'schema_author')
        # Alter the ForeignKey to OneToOneField
        old_field = Book._meta.get_field(""author"")
        new_field = OneToOneField(Author, CASCADE)
        new_field.set_attributes_from_name(""author"")
        with connection.schema_editor() as editor:
            editor.alter_field(Book, old_field, new_field, strict=True)
        columns = self.column_classes(BookWithO2O)
        self.assertEqual(columns['author_id'][0], connection.features.introspected_field_types['IntegerField'])
        # Ensure the field is unique now
        BookWithO2O.objects.create(author=author, title=""Django 1"", pub_date=datetime.datetime.now())
        with self.assertRaises(IntegrityError):
            BookWithO2O.objects.create(author=author, title=""Django 2"", pub_date=datetime.datetime.now())
        self.assertForeignKeyExists(BookWithO2O, 'author_id', 'schema_author')

    def test_alter_field_fk_to_o2o(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        expected_fks = 1 if connection.features.supports_foreign_keys else 0
        expected_indexes = 1 if connection.features.indexes_foreign_keys else 0

        # Check the index is right to begin with.
        counts = self.get_constraints_count(
            Book._meta.db_table,
            Book._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        self.assertEqual(
            counts,
            {'fks': expected_fks, 'uniques': 0, 'indexes': expected_indexes},
        )

        old_field = Book._meta.get_field('author')
        new_field = OneToOneField(Author, CASCADE)
        new_field.set_attributes_from_name('author')
        with connection.schema_editor() as editor:
            editor.alter_field(Book, old_field, new_field, strict=True)

        counts = self.get_constraints_count(
            Book._meta.db_table,
            Book._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        # The index on ForeignKey is replaced with a unique constraint for OneToOneField.
        self.assertEqual(counts, {'fks': expected_fks, 'uniques': 1, 'indexes': 0})

    def test_alter_field_fk_keeps_index(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        expected_fks = 1 if connection.features.supports_foreign_keys else 0
        expected_indexes = 1 if connection.features.indexes_foreign_keys else 0

        # Check the index is right to begin with.
        counts = self.get_constraints_count(
            Book._meta.db_table,
            Book._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        self.assertEqual(
            counts,
            {'fks': expected_fks, 'uniques': 0, 'indexes': expected_indexes},
        )

        old_field = Book._meta.get_field('author')
        # on_delete changed from CASCADE.
        new_field = ForeignKey(Author, PROTECT)
        new_field.set_attributes_from_name('author')
        with connection.schema_editor() as editor:
            editor.alter_field(Book, old_field, new_field, strict=True)

        counts = self.get_constraints_count(
            Book._meta.db_table,
            Book._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        # The index remains.
        self.assertEqual(
            counts,
            {'fks': expected_fks, 'uniques': 0, 'indexes': expected_indexes},
        )

    def test_alter_field_o2o_to_fk(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithO2O)
        expected_fks = 1 if connection.features.supports_foreign_keys else 0

        # Check the unique constraint is right to begin with.
        counts = self.get_constraints_count(
            BookWithO2O._meta.db_table,
            BookWithO2O._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        self.assertEqual(counts, {'fks': expected_fks, 'uniques': 1, 'indexes': 0})

        old_field = BookWithO2O._meta.get_field('author')
        new_field = ForeignKey(Author, CASCADE)
        new_field.set_attributes_from_name('author')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithO2O, old_field, new_field, strict=True)

        counts = self.get_constraints_count(
            BookWithO2O._meta.db_table,
            BookWithO2O._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        # The unique constraint on OneToOneField is replaced with an index for ForeignKey.
        self.assertEqual(counts, {'fks': expected_fks, 'uniques': 0, 'indexes': 1})

    def test_alter_field_o2o_keeps_unique(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithO2O)
        expected_fks = 1 if connection.features.supports_foreign_keys else 0

        # Check the unique constraint is right to begin with.
        counts = self.get_constraints_count(
            BookWithO2O._meta.db_table,
            BookWithO2O._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        self.assertEqual(counts, {'fks': expected_fks, 'uniques': 1, 'indexes': 0})

        old_field = BookWithO2O._meta.get_field('author')
        # on_delete changed from CASCADE.
        new_field = OneToOneField(Author, PROTECT)
        new_field.set_attributes_from_name('author')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithO2O, old_field, new_field, strict=True)

        counts = self.get_constraints_count(
            BookWithO2O._meta.db_table,
            BookWithO2O._meta.get_field('author').column,
            (Author._meta.db_table, Author._meta.pk.column),
        )
        # The unique constraint remains.
        self.assertEqual(counts, {'fks': expected_fks, 'uniques': 1, 'indexes': 0})

    @skipUnlessDBFeature('ignores_table_name_case')
    def test_alter_db_table_case(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Alter the case of the table
        old_table_name = Author._meta.db_table
        with connection.schema_editor() as editor:
            editor.alter_db_table(Author, old_table_name, old_table_name.upper())

    def test_alter_implicit_id_to_explicit(self):
        """"""
        Should be able to convert an implicit ""id"" field to an explicit ""id""
        primary key field.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Author)

        old_field = Author._meta.get_field(""id"")
        new_field = AutoField(primary_key=True)
        new_field.set_attributes_from_name(""id"")
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        # This will fail if DROP DEFAULT is inadvertently executed on this
        # field which drops the id sequence, at least on PostgreSQL.
        Author.objects.create(name='Foo')
        Author.objects.create(name='Bar')

    def test_alter_autofield_pk_to_bigautofield_pk_sequence_owner(self):
        """"""
        Converting an implicit PK to BigAutoField(primary_key=True) should keep
        a sequence owner on PostgreSQL.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        old_field = Author._meta.get_field('id')
        new_field = BigAutoField(primary_key=True)
        new_field.set_attributes_from_name('id')
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)

        Author.objects.create(name='Foo', pk=1)
        with connection.cursor() as cursor:
            sequence_reset_sqls = connection.ops.sequence_reset_sql(no_style(), [Author])
            if sequence_reset_sqls:
                cursor.execute(sequence_reset_sqls[0])
        # Fail on PostgreSQL if sequence is missing an owner.
        self.assertIsNotNone(Author.objects.create(name='Bar'))

    def test_alter_autofield_pk_to_smallautofield_pk_sequence_owner(self):
        """"""
        Converting an implicit PK to SmallAutoField(primary_key=True) should
        keep a sequence owner on PostgreSQL.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        old_field = Author._meta.get_field('id')
        new_field = SmallAutoField(primary_key=True)
        new_field.set_attributes_from_name('id')
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)

        Author.objects.create(name='Foo', pk=1)
        with connection.cursor() as cursor:
            sequence_reset_sqls = connection.ops.sequence_reset_sql(no_style(), [Author])
            if sequence_reset_sqls:
                cursor.execute(sequence_reset_sqls[0])
        # Fail on PostgreSQL if sequence is missing an owner.
        self.assertIsNotNone(Author.objects.create(name='Bar'))

    def test_alter_int_pk_to_autofield_pk(self):
        """"""
        Should be able to rename an IntegerField(primary_key=True) to
        AutoField(primary_key=True).
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(IntegerPK)

        old_field = IntegerPK._meta.get_field('i')
        new_field = AutoField(primary_key=True)
        new_field.model = IntegerPK
        new_field.set_attributes_from_name('i')

        with connection.schema_editor() as editor:
            editor.alter_field(IntegerPK, old_field, new_field, strict=True)

        # A model representing the updated model.
        class IntegerPKToAutoField(Model):
            i = AutoField(primary_key=True)
            j = IntegerField(unique=True)

            class Meta:
                app_label = 'schema'
                apps = new_apps
                db_table = IntegerPK._meta.db_table

        # An id (i) is generated by the database.
        obj = IntegerPKToAutoField.objects.create(j=1)
        self.assertIsNotNone(obj.i)

    def test_alter_int_pk_to_bigautofield_pk(self):
        """"""
        Should be able to rename an IntegerField(primary_key=True) to
        BigAutoField(primary_key=True).
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(IntegerPK)

        old_field = IntegerPK._meta.get_field('i')
        new_field = BigAutoField(primary_key=True)
        new_field.model = IntegerPK
        new_field.set_attributes_from_name('i')

        with connection.schema_editor() as editor:
            editor.alter_field(IntegerPK, old_field, new_field, strict=True)

        # A model representing the updated model.
        class IntegerPKToBigAutoField(Model):
            i = BigAutoField(primary_key=True)
            j = IntegerField(unique=True)

            class Meta:
                app_label = 'schema'
                apps = new_apps
                db_table = IntegerPK._meta.db_table

        # An id (i) is generated by the database.
        obj = IntegerPKToBigAutoField.objects.create(j=1)
        self.assertIsNotNone(obj.i)

    @isolate_apps('schema')
    def test_alter_smallint_pk_to_smallautofield_pk(self):
        """"""
        Should be able to rename an SmallIntegerField(primary_key=True) to
        SmallAutoField(primary_key=True).
        """"""
        class SmallIntegerPK(Model):
            i = SmallIntegerField(primary_key=True)

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(SmallIntegerPK)
        self.isolated_local_models = [SmallIntegerPK]
        old_field = SmallIntegerPK._meta.get_field('i')
        new_field = SmallAutoField(primary_key=True)
        new_field.model = SmallIntegerPK
        new_field.set_attributes_from_name('i')
        with connection.schema_editor() as editor:
            editor.alter_field(SmallIntegerPK, old_field, new_field, strict=True)

    def test_alter_int_pk_to_int_unique(self):
        """"""
        Should be able to rename an IntegerField(primary_key=True) to
        IntegerField(unique=True).
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(IntegerPK)
        # Delete the old PK
        old_field = IntegerPK._meta.get_field('i')
        new_field = IntegerField(unique=True)
        new_field.model = IntegerPK
        new_field.set_attributes_from_name('i')
        with connection.schema_editor() as editor:
            editor.alter_field(IntegerPK, old_field, new_field, strict=True)
        # The primary key constraint is gone. Result depends on database:
        # 'id' for SQLite, None for others (must not be 'i').
        self.assertIn(self.get_primary_key(IntegerPK._meta.db_table), ('id', None))

        # Set up a model class as it currently stands. The original IntegerPK
        # class is now out of date and some backends make use of the whole
        # model class when modifying a field (such as sqlite3 when remaking a
        # table) so an outdated model class leads to incorrect results.
        class Transitional(Model):
            i = IntegerField(unique=True)
            j = IntegerField(unique=True)

            class Meta:
                app_label = 'schema'
                apps = new_apps
                db_table = 'INTEGERPK'

        # model requires a new PK
        old_field = Transitional._meta.get_field('j')
        new_field = IntegerField(primary_key=True)
        new_field.model = Transitional
        new_field.set_attributes_from_name('j')

        with connection.schema_editor() as editor:
            editor.alter_field(Transitional, old_field, new_field, strict=True)

        # Create a model class representing the updated model.
        class IntegerUnique(Model):
            i = IntegerField(unique=True)
            j = IntegerField(primary_key=True)

            class Meta:
                app_label = 'schema'
                apps = new_apps
                db_table = 'INTEGERPK'

        # Ensure unique constraint works.
        IntegerUnique.objects.create(i=1, j=1)
        with self.assertRaises(IntegrityError):
            IntegerUnique.objects.create(i=1, j=2)

    def test_rename(self):
        """"""
        Tests simple altering of fields
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure the field is right to begin with
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], connection.features.introspected_field_types['CharField'])
        self.assertNotIn(""display_name"", columns)
        # Alter the name field's name
        old_field = Author._meta.get_field(""name"")
        new_field = CharField(max_length=254)
        new_field.set_attributes_from_name(""display_name"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        columns = self.column_classes(Author)
        self.assertEqual(columns['display_name'][0], connection.features.introspected_field_types['CharField'])
        self.assertNotIn(""name"", columns)

    @isolate_apps('schema')
    def test_rename_referenced_field(self):
        class Author(Model):
            name = CharField(max_length=255, unique=True)

            class Meta:
                app_label = 'schema'

        class Book(Model):
            author = ForeignKey(Author, CASCADE, to_field='name')

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        new_field = CharField(max_length=255, unique=True)
        new_field.set_attributes_from_name('renamed')
        with connection.schema_editor(atomic=connection.features.supports_atomic_references_rename) as editor:
            editor.alter_field(Author, Author._meta.get_field('name'), new_field)
        # Ensure the foreign key reference was updated.
        self.assertForeignKeyExists(Book, 'author_id', 'schema_author', 'renamed')

    @skipIfDBFeature('interprets_empty_strings_as_nulls')
    def test_rename_keep_null_status(self):
        """"""
        Renaming a field shouldn't affect the not null status.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        with self.assertRaises(IntegrityError):
            Note.objects.create(info=None)
        old_field = Note._meta.get_field(""info"")
        new_field = TextField()
        new_field.set_attributes_from_name(""detail_info"")
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        columns = self.column_classes(Note)
        self.assertEqual(columns['detail_info'][0], ""TextField"")
        self.assertNotIn(""info"", columns)
        with self.assertRaises(IntegrityError):
            NoteRename.objects.create(detail_info=None)

    def _test_m2m_create(self, M2MFieldClass):
        """"""
        Tests M2M fields on models during creation
        """"""
        class LocalBookWithM2M(Model):
            author = ForeignKey(Author, CASCADE)
            title = CharField(max_length=100, db_index=True)
            pub_date = DateTimeField()
            tags = M2MFieldClass(""TagM2MTest"", related_name=""books"")

            class Meta:
                app_label = 'schema'
                apps = new_apps
        self.local_models = [LocalBookWithM2M]
        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(TagM2MTest)
            editor.create_model(LocalBookWithM2M)
        # Ensure there is now an m2m table there
        columns = self.column_classes(LocalBookWithM2M._meta.get_field(""tags"").remote_field.through)
        self.assertEqual(columns['tagm2mtest_id'][0], connection.features.introspected_field_types['IntegerField'])

    def test_m2m_create(self):
        self._test_m2m_create(ManyToManyField)

    def test_m2m_create_custom(self):
        self._test_m2m_create(CustomManyToManyField)

    def test_m2m_create_inherited(self):
        self._test_m2m_create(InheritedManyToManyField)

    def _test_m2m_create_through(self, M2MFieldClass):
        """"""
        Tests M2M fields on models during creation with through models
        """"""
        class LocalTagThrough(Model):
            book = ForeignKey(""schema.LocalBookWithM2MThrough"", CASCADE)
            tag = ForeignKey(""schema.TagM2MTest"", CASCADE)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        class LocalBookWithM2MThrough(Model):
            tags = M2MFieldClass(""TagM2MTest"", related_name=""books"", through=LocalTagThrough)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        self.local_models = [LocalTagThrough, LocalBookWithM2MThrough]

        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(LocalTagThrough)
            editor.create_model(TagM2MTest)
            editor.create_model(LocalBookWithM2MThrough)
        # Ensure there is now an m2m table there
        columns = self.column_classes(LocalTagThrough)
        self.assertEqual(columns['book_id'][0], connection.features.introspected_field_types['IntegerField'])
        self.assertEqual(columns['tag_id'][0], connection.features.introspected_field_types['IntegerField'])

    def test_m2m_create_through(self):
        self._test_m2m_create_through(ManyToManyField)

    def test_m2m_create_through_custom(self):
        self._test_m2m_create_through(CustomManyToManyField)

    def test_m2m_create_through_inherited(self):
        self._test_m2m_create_through(InheritedManyToManyField)

    def _test_m2m(self, M2MFieldClass):
        """"""
        Tests adding/removing M2M fields on models
        """"""
        class LocalAuthorWithM2M(Model):
            name = CharField(max_length=255)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        self.local_models = [LocalAuthorWithM2M]

        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(LocalAuthorWithM2M)
            editor.create_model(TagM2MTest)
        # Create an M2M field
        new_field = M2MFieldClass(""schema.TagM2MTest"", related_name=""authors"")
        new_field.contribute_to_class(LocalAuthorWithM2M, ""tags"")
        # Ensure there's no m2m table there
        with self.assertRaises(DatabaseError):
            self.column_classes(new_field.remote_field.through)
        # Add the field
        with connection.schema_editor() as editor:
            editor.add_field(LocalAuthorWithM2M, new_field)
        # Ensure there is now an m2m table there
        columns = self.column_classes(new_field.remote_field.through)
        self.assertEqual(columns['tagm2mtest_id'][0], connection.features.introspected_field_types['IntegerField'])

        # ""Alter"" the field. This should not rename the DB table to itself.
        with connection.schema_editor() as editor:
            editor.alter_field(LocalAuthorWithM2M, new_field, new_field, strict=True)

        # Remove the M2M table again
        with connection.schema_editor() as editor:
            editor.remove_field(LocalAuthorWithM2M, new_field)
        # Ensure there's no m2m table there
        with self.assertRaises(DatabaseError):
            self.column_classes(new_field.remote_field.through)

        # Make sure the model state is coherent with the table one now that
        # we've removed the tags field.
        opts = LocalAuthorWithM2M._meta
        opts.local_many_to_many.remove(new_field)
        del new_apps.all_models['schema'][new_field.remote_field.through._meta.model_name]
        opts._expire_cache()

    def test_m2m(self):
        self._test_m2m(ManyToManyField)

    def test_m2m_custom(self):
        self._test_m2m(CustomManyToManyField)

    def test_m2m_inherited(self):
        self._test_m2m(InheritedManyToManyField)

    def _test_m2m_through_alter(self, M2MFieldClass):
        """"""
        Tests altering M2Ms with explicit through models (should no-op)
        """"""
        class LocalAuthorTag(Model):
            author = ForeignKey(""schema.LocalAuthorWithM2MThrough"", CASCADE)
            tag = ForeignKey(""schema.TagM2MTest"", CASCADE)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        class LocalAuthorWithM2MThrough(Model):
            name = CharField(max_length=255)
            tags = M2MFieldClass(""schema.TagM2MTest"", related_name=""authors"", through=LocalAuthorTag)

            class Meta:
                app_label = 'schema'
                apps = new_apps

        self.local_models = [LocalAuthorTag, LocalAuthorWithM2MThrough]

        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(LocalAuthorTag)
            editor.create_model(LocalAuthorWithM2MThrough)
            editor.create_model(TagM2MTest)
        # Ensure the m2m table is there
        self.assertEqual(len(self.column_classes(LocalAuthorTag)), 3)
        # ""Alter"" the field's blankness. This should not actually do anything.
        old_field = LocalAuthorWithM2MThrough._meta.get_field(""tags"")
        new_field = M2MFieldClass(""schema.TagM2MTest"", related_name=""authors"", through=LocalAuthorTag)
        new_field.contribute_to_class(LocalAuthorWithM2MThrough, ""tags"")
        with connection.schema_editor() as editor:
            editor.alter_field(LocalAuthorWithM2MThrough, old_field, new_field, strict=True)
        # Ensure the m2m table is still there
        self.assertEqual(len(self.column_classes(LocalAuthorTag)), 3)

    def test_m2m_through_alter(self):
        self._test_m2m_through_alter(ManyToManyField)

    def test_m2m_through_alter_custom(self):
        self._test_m2m_through_alter(CustomManyToManyField)

    def test_m2m_through_alter_inherited(self):
        self._test_m2m_through_alter(InheritedManyToManyField)

    def _test_m2m_repoint(self, M2MFieldClass):
        """"""
        Tests repointing M2M fields
        """"""
        class LocalBookWithM2M(Model):
            author = ForeignKey(Author, CASCADE)
            title = CharField(max_length=100, db_index=True)
            pub_date = DateTimeField()
            tags = M2MFieldClass(""TagM2MTest"", related_name=""books"")

            class Meta:
                app_label = 'schema'
                apps = new_apps
        self.local_models = [LocalBookWithM2M]
        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(LocalBookWithM2M)
            editor.create_model(TagM2MTest)
            editor.create_model(UniqueTest)
        # Ensure the M2M exists and points to TagM2MTest
        if connection.features.supports_foreign_keys:
            self.assertForeignKeyExists(
                LocalBookWithM2M._meta.get_field(""tags"").remote_field.through,
                'tagm2mtest_id',
                'schema_tagm2mtest',
            )
        # Repoint the M2M
        old_field = LocalBookWithM2M._meta.get_field(""tags"")
        new_field = M2MFieldClass(UniqueTest)
        new_field.contribute_to_class(LocalBookWithM2M, ""uniques"")
        with connection.schema_editor() as editor:
            editor.alter_field(LocalBookWithM2M, old_field, new_field, strict=True)
        # Ensure old M2M is gone
        with self.assertRaises(DatabaseError):
            self.column_classes(LocalBookWithM2M._meta.get_field(""tags"").remote_field.through)

        # This model looks like the new model and is used for teardown.
        opts = LocalBookWithM2M._meta
        opts.local_many_to_many.remove(old_field)
        # Ensure the new M2M exists and points to UniqueTest
        if connection.features.supports_foreign_keys:
            self.assertForeignKeyExists(new_field.remote_field.through, 'uniquetest_id', 'schema_uniquetest')

    def test_m2m_repoint(self):
        self._test_m2m_repoint(ManyToManyField)

    def test_m2m_repoint_custom(self):
        self._test_m2m_repoint(CustomManyToManyField)

    def test_m2m_repoint_inherited(self):
        self._test_m2m_repoint(InheritedManyToManyField)

    @isolate_apps('schema')
    def test_m2m_rename_field_in_target_model(self):
        class LocalTagM2MTest(Model):
            title = CharField(max_length=255)

            class Meta:
                app_label = 'schema'

        class LocalM2M(Model):
            tags = ManyToManyField(LocalTagM2MTest)

            class Meta:
                app_label = 'schema'

        # Create the tables.
        with connection.schema_editor() as editor:
            editor.create_model(LocalM2M)
            editor.create_model(LocalTagM2MTest)
        self.isolated_local_models = [LocalM2M, LocalTagM2MTest]
        # Ensure the m2m table is there.
        self.assertEqual(len(self.column_classes(LocalM2M)), 1)
        # Alter a field in LocalTagM2MTest.
        old_field = LocalTagM2MTest._meta.get_field('title')
        new_field = CharField(max_length=254)
        new_field.contribute_to_class(LocalTagM2MTest, 'title1')
        # @isolate_apps() and inner models are needed to have the model
        # relations populated, otherwise this doesn't act as a regression test.
        self.assertEqual(len(new_field.model._meta.related_objects), 1)
        with connection.schema_editor() as editor:
            editor.alter_field(LocalTagM2MTest, old_field, new_field, strict=True)
        # Ensure the m2m table is still there.
        self.assertEqual(len(self.column_classes(LocalM2M)), 1)

    @skipUnlessDBFeature('supports_column_check_constraints', 'can_introspect_check_constraints')
    def test_check_constraints(self):
        """"""
        Tests creating/deleting CHECK constraints
        """"""
        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure the constraint exists
        constraints = self.get_constraints(Author._meta.db_table)
        if not any(details['columns'] == ['height'] and details['check'] for details in constraints.values()):
            self.fail(""No check constraint for height found"")
        # Alter the column to remove it
        old_field = Author._meta.get_field(""height"")
        new_field = IntegerField(null=True, blank=True)
        new_field.set_attributes_from_name(""height"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        constraints = self.get_constraints(Author._meta.db_table)
        for details in constraints.values():
            if details['columns'] == [""height""] and details['check']:
                self.fail(""Check constraint for height found"")
        # Alter the column to re-add it
        new_field2 = Author._meta.get_field(""height"")
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, new_field2, strict=True)
        constraints = self.get_constraints(Author._meta.db_table)
        if not any(details['columns'] == ['height'] and details['check'] for details in constraints.values()):
            self.fail(""No check constraint for height found"")

    @skipUnlessDBFeature('supports_column_check_constraints', 'can_introspect_check_constraints')
    @isolate_apps('schema')
    def test_check_constraint_timedelta_param(self):
        class DurationModel(Model):
            duration = DurationField()

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(DurationModel)
        self.isolated_local_models = [DurationModel]
        constraint_name = 'duration_gte_5_minutes'
        constraint = CheckConstraint(
            check=Q(duration__gt=datetime.timedelta(minutes=5)),
            name=constraint_name,
        )
        DurationModel._meta.constraints = [constraint]
        with connection.schema_editor() as editor:
            editor.add_constraint(DurationModel, constraint)
        constraints = self.get_constraints(DurationModel._meta.db_table)
        self.assertIn(constraint_name, constraints)
        with self.assertRaises(IntegrityError), atomic():
            DurationModel.objects.create(duration=datetime.timedelta(minutes=4))
        DurationModel.objects.create(duration=datetime.timedelta(minutes=10))

    @skipUnlessDBFeature('supports_column_check_constraints', 'can_introspect_check_constraints')
    def test_remove_field_check_does_not_remove_meta_constraints(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Add the custom check constraint
        constraint = CheckConstraint(check=Q(height__gte=0), name='author_height_gte_0_check')
        custom_constraint_name = constraint.name
        Author._meta.constraints = [constraint]
        with connection.schema_editor() as editor:
            editor.add_constraint(Author, constraint)
        # Ensure the constraints exist
        constraints = self.get_constraints(Author._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['height'] and details['check'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Alter the column to remove field check
        old_field = Author._meta.get_field('height')
        new_field = IntegerField(null=True, blank=True)
        new_field.set_attributes_from_name('height')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        constraints = self.get_constraints(Author._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['height'] and details['check'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 0)
        # Alter the column to re-add field check
        new_field2 = Author._meta.get_field('height')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, new_field2, strict=True)
        constraints = self.get_constraints(Author._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['height'] and details['check'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Drop the check constraint
        with connection.schema_editor() as editor:
            Author._meta.constraints = []
            editor.remove_constraint(Author, constraint)

    def test_unique(self):
        """"""
        Tests removing and adding unique constraints to a single column.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
        # Ensure the field is unique to begin with
        Tag.objects.create(title=""foo"", slug=""foo"")
        with self.assertRaises(IntegrityError):
            Tag.objects.create(title=""bar"", slug=""foo"")
        Tag.objects.all().delete()
        # Alter the slug field to be non-unique
        old_field = Tag._meta.get_field(""slug"")
        new_field = SlugField(unique=False)
        new_field.set_attributes_from_name(""slug"")
        with connection.schema_editor() as editor:
            editor.alter_field(Tag, old_field, new_field, strict=True)
        # Ensure the field is no longer unique
        Tag.objects.create(title=""foo"", slug=""foo"")
        Tag.objects.create(title=""bar"", slug=""foo"")
        Tag.objects.all().delete()
        # Alter the slug field to be unique
        new_field2 = SlugField(unique=True)
        new_field2.set_attributes_from_name(""slug"")
        with connection.schema_editor() as editor:
            editor.alter_field(Tag, new_field, new_field2, strict=True)
        # Ensure the field is unique again
        Tag.objects.create(title=""foo"", slug=""foo"")
        with self.assertRaises(IntegrityError):
            Tag.objects.create(title=""bar"", slug=""foo"")
        Tag.objects.all().delete()
        # Rename the field
        new_field3 = SlugField(unique=True)
        new_field3.set_attributes_from_name(""slug2"")
        with connection.schema_editor() as editor:
            editor.alter_field(Tag, new_field2, new_field3, strict=True)
        # Ensure the field is still unique
        TagUniqueRename.objects.create(title=""foo"", slug2=""foo"")
        with self.assertRaises(IntegrityError):
            TagUniqueRename.objects.create(title=""bar"", slug2=""foo"")
        Tag.objects.all().delete()

    def test_unique_name_quoting(self):
        old_table_name = TagUniqueRename._meta.db_table
        try:
            with connection.schema_editor() as editor:
                editor.create_model(TagUniqueRename)
                editor.alter_db_table(TagUniqueRename, old_table_name, 'unique-table')
                TagUniqueRename._meta.db_table = 'unique-table'
                # This fails if the unique index name isn't quoted.
                editor.alter_unique_together(TagUniqueRename, [], (('title', 'slug2'),))
        finally:
            TagUniqueRename._meta.db_table = old_table_name

    @isolate_apps('schema')
    @skipUnlessDBFeature('supports_foreign_keys')
    def test_unique_no_unnecessary_fk_drops(self):
        """"""
        If AlterField isn't selective about dropping foreign key constraints
        when modifying a field with a unique constraint, the AlterField
        incorrectly drops and recreates the Book.author foreign key even though
        it doesn't restrict the field being changed (#29193).
        """"""
        class Author(Model):
            name = CharField(max_length=254, unique=True)

            class Meta:
                app_label = 'schema'

        class Book(Model):
            author = ForeignKey(Author, CASCADE)

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        new_field = CharField(max_length=255, unique=True)
        new_field.model = Author
        new_field.set_attributes_from_name('name')
        with self.assertLogs('django.db.backends.schema', 'DEBUG') as cm:
            with connection.schema_editor() as editor:
                editor.alter_field(Author, Author._meta.get_field('name'), new_field)
        # One SQL statement is executed to alter the field.
        self.assertEqual(len(cm.records), 1)

    @isolate_apps('schema')
    def test_unique_and_reverse_m2m(self):
        """"""
        AlterField can modify a unique field when there's a reverse M2M
        relation on the model.
        """"""
        class Tag(Model):
            title = CharField(max_length=255)
            slug = SlugField(unique=True)

            class Meta:
                app_label = 'schema'

        class Book(Model):
            tags = ManyToManyField(Tag, related_name='books')

            class Meta:
                app_label = 'schema'

        self.isolated_local_models = [Book._meta.get_field('tags').remote_field.through]
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
            editor.create_model(Book)
        new_field = SlugField(max_length=75, unique=True)
        new_field.model = Tag
        new_field.set_attributes_from_name('slug')
        with self.assertLogs('django.db.backends.schema', 'DEBUG') as cm:
            with connection.schema_editor() as editor:
                editor.alter_field(Tag, Tag._meta.get_field('slug'), new_field)
        # One SQL statement is executed to alter the field.
        self.assertEqual(len(cm.records), 1)
        # Ensure that the field is still unique.
        Tag.objects.create(title='foo', slug='foo')
        with self.assertRaises(IntegrityError):
            Tag.objects.create(title='bar', slug='foo')

    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')
    def test_remove_field_unique_does_not_remove_meta_constraints(self):
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithUniqueName)
        # Add the custom unique constraint
        constraint = UniqueConstraint(fields=['name'], name='author_name_uniq')
        custom_constraint_name = constraint.name
        AuthorWithUniqueName._meta.constraints = [constraint]
        with connection.schema_editor() as editor:
            editor.add_constraint(AuthorWithUniqueName, constraint)
        # Ensure the constraints exist
        constraints = self.get_constraints(AuthorWithUniqueName._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name'] and details['unique'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Alter the column to remove field uniqueness
        old_field = AuthorWithUniqueName._meta.get_field('name')
        new_field = CharField(max_length=255)
        new_field.set_attributes_from_name('name')
        with connection.schema_editor() as editor:
            editor.alter_field(AuthorWithUniqueName, old_field, new_field, strict=True)
        constraints = self.get_constraints(AuthorWithUniqueName._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name'] and details['unique'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 0)
        # Alter the column to re-add field uniqueness
        new_field2 = AuthorWithUniqueName._meta.get_field('name')
        with connection.schema_editor() as editor:
            editor.alter_field(AuthorWithUniqueName, new_field, new_field2, strict=True)
        constraints = self.get_constraints(AuthorWithUniqueName._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name'] and details['unique'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Drop the unique constraint
        with connection.schema_editor() as editor:
            AuthorWithUniqueName._meta.constraints = []
            editor.remove_constraint(AuthorWithUniqueName, constraint)

    def test_unique_together(self):
        """"""
        Tests removing and adding unique_together constraints on a model.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(UniqueTest)
        # Ensure the fields are unique to begin with
        UniqueTest.objects.create(year=2012, slug=""foo"")
        UniqueTest.objects.create(year=2011, slug=""foo"")
        UniqueTest.objects.create(year=2011, slug=""bar"")
        with self.assertRaises(IntegrityError):
            UniqueTest.objects.create(year=2012, slug=""foo"")
        UniqueTest.objects.all().delete()
        # Alter the model to its non-unique-together companion
        with connection.schema_editor() as editor:
            editor.alter_unique_together(UniqueTest, UniqueTest._meta.unique_together, [])
        # Ensure the fields are no longer unique
        UniqueTest.objects.create(year=2012, slug=""foo"")
        UniqueTest.objects.create(year=2012, slug=""foo"")
        UniqueTest.objects.all().delete()
        # Alter it back
        new_field2 = SlugField(unique=True)
        new_field2.set_attributes_from_name(""slug"")
        with connection.schema_editor() as editor:
            editor.alter_unique_together(UniqueTest, [], UniqueTest._meta.unique_together)
        # Ensure the fields are unique again
        UniqueTest.objects.create(year=2012, slug=""foo"")
        with self.assertRaises(IntegrityError):
            UniqueTest.objects.create(year=2012, slug=""foo"")
        UniqueTest.objects.all().delete()

    def test_unique_together_with_fk(self):
        """"""
        Tests removing and adding unique_together constraints that include
        a foreign key.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        # Ensure the fields are unique to begin with
        self.assertEqual(Book._meta.unique_together, ())
        # Add the unique_together constraint
        with connection.schema_editor() as editor:
            editor.alter_unique_together(Book, [], [['author', 'title']])
        # Alter it back
        with connection.schema_editor() as editor:
            editor.alter_unique_together(Book, [['author', 'title']], [])

    def test_unique_together_with_fk_with_existing_index(self):
        """"""
        Tests removing and adding unique_together constraints that include
        a foreign key, where the foreign key is added after the model is
        created.
        """"""
        # Create the tables
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithoutAuthor)
            new_field = ForeignKey(Author, CASCADE)
            new_field.set_attributes_from_name('author')
            editor.add_field(BookWithoutAuthor, new_field)
        # Ensure the fields aren't unique to begin with
        self.assertEqual(Book._meta.unique_together, ())
        # Add the unique_together constraint
        with connection.schema_editor() as editor:
            editor.alter_unique_together(Book, [], [['author', 'title']])
        # Alter it back
        with connection.schema_editor() as editor:
            editor.alter_unique_together(Book, [['author', 'title']], [])

    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')
    def test_remove_unique_together_does_not_remove_meta_constraints(self):
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithUniqueNameAndBirthday)
        # Add the custom unique constraint
        constraint = UniqueConstraint(fields=['name', 'birthday'], name='author_name_birthday_uniq')
        custom_constraint_name = constraint.name
        AuthorWithUniqueNameAndBirthday._meta.constraints = [constraint]
        with connection.schema_editor() as editor:
            editor.add_constraint(AuthorWithUniqueNameAndBirthday, constraint)
        # Ensure the constraints exist
        constraints = self.get_constraints(AuthorWithUniqueNameAndBirthday._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Remove unique together
        unique_together = AuthorWithUniqueNameAndBirthday._meta.unique_together
        with connection.schema_editor() as editor:
            editor.alter_unique_together(AuthorWithUniqueNameAndBirthday, unique_together, [])
        constraints = self.get_constraints(AuthorWithUniqueNameAndBirthday._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 0)
        # Re-add unique together
        with connection.schema_editor() as editor:
            editor.alter_unique_together(AuthorWithUniqueNameAndBirthday, [], unique_together)
        constraints = self.get_constraints(AuthorWithUniqueNameAndBirthday._meta.db_table)
        self.assertIn(custom_constraint_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Drop the unique constraint
        with connection.schema_editor() as editor:
            AuthorWithUniqueNameAndBirthday._meta.constraints = []
            editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)

    def test_unique_constraint(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(fields=['name'], name='name_uq')
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(Author, constraint)
            sql = constraint.create_sql(Author, editor)
        table = Author._meta.db_table
        self.assertIs(sql.references_table(table), True)
        self.assertIs(sql.references_column(table, 'name'), True)
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(Author, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_unique_constraint(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(Author, constraint)
            sql = constraint.create_sql(Author, editor)
        table = Author._meta.db_table
        constraints = self.get_constraints(table)
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, constraint.name, ['DESC'])
        self.assertIn(constraint.name, constraints)
        self.assertIs(constraints[constraint.name]['unique'], True)
        # SQL contains a database function.
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIn('UPPER(%s)' % editor.quote_name('name'), str(sql))
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(Author, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_composite_func_unique_constraint(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithSlug)
        constraint = UniqueConstraint(
            Upper('title'),
            Lower('slug'),
            name='func_upper_lower_unq',
        )
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(BookWithSlug, constraint)
            sql = constraint.create_sql(BookWithSlug, editor)
        table = BookWithSlug._meta.db_table
        constraints = self.get_constraints(table)
        self.assertIn(constraint.name, constraints)
        self.assertIs(constraints[constraint.name]['unique'], True)
        # SQL contains database functions.
        self.assertIs(sql.references_column(table, 'title'), True)
        self.assertIs(sql.references_column(table, 'slug'), True)
        sql = str(sql)
        self.assertIn('UPPER(%s)' % editor.quote_name('title'), sql)
        self.assertIn('LOWER(%s)' % editor.quote_name('slug'), sql)
        self.assertLess(sql.index('UPPER'), sql.index('LOWER'))
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(BookWithSlug, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_unique_constraint_field_and_expression(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(
            F('height').desc(),
            'uuid',
            Lower('name').asc(),
            name='func_f_lower_field_unq',
        )
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(Author, constraint)
            sql = constraint.create_sql(Author, editor)
        table = Author._meta.db_table
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, constraint.name, ['DESC', 'ASC', 'ASC'])
        constraints = self.get_constraints(table)
        self.assertIs(constraints[constraint.name]['unique'], True)
        self.assertEqual(len(constraints[constraint.name]['columns']), 3)
        self.assertEqual(constraints[constraint.name]['columns'][1], 'uuid')
        # SQL contains database functions and columns.
        self.assertIs(sql.references_column(table, 'height'), True)
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIs(sql.references_column(table, 'uuid'), True)
        self.assertIn('LOWER(%s)' % editor.quote_name('name'), str(sql))
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(Author, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes', 'supports_partial_indexes')
    def test_func_unique_constraint_partial(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(
            Upper('name'),
            name='func_upper_cond_weight_uq',
            condition=Q(weight__isnull=False),
        )
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(Author, constraint)
            sql = constraint.create_sql(Author, editor)
        table = Author._meta.db_table
        constraints = self.get_constraints(table)
        self.assertIn(constraint.name, constraints)
        self.assertIs(constraints[constraint.name]['unique'], True)
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIn('UPPER(%s)' % editor.quote_name('name'), str(sql))
        self.assertIn(
            'WHERE %s IS NOT NULL' % editor.quote_name('weight'),
            str(sql),
        )
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(Author, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes', 'supports_covering_indexes')
    def test_func_unique_constraint_covering(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(
            Upper('name'),
            name='func_upper_covering_uq',
            include=['weight', 'height'],
        )
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(Author, constraint)
            sql = constraint.create_sql(Author, editor)
        table = Author._meta.db_table
        constraints = self.get_constraints(table)
        self.assertIn(constraint.name, constraints)
        self.assertIs(constraints[constraint.name]['unique'], True)
        self.assertEqual(
            constraints[constraint.name]['columns'],
            [None, 'weight', 'height'],
        )
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIs(sql.references_column(table, 'weight'), True)
        self.assertIs(sql.references_column(table, 'height'), True)
        self.assertIn('UPPER(%s)' % editor.quote_name('name'), str(sql))
        self.assertIn(
            'INCLUDE (%s, %s)' % (
                editor.quote_name('weight'),
                editor.quote_name('height'),
            ),
            str(sql),
        )
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(Author, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_unique_constraint_lookups(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        with register_lookup(CharField, Lower), register_lookup(IntegerField, Abs):
            constraint = UniqueConstraint(
                F('name__lower'),
                F('weight__abs'),
                name='func_lower_abs_lookup_uq',
            )
            # Add constraint.
            with connection.schema_editor() as editor:
                editor.add_constraint(Author, constraint)
                sql = constraint.create_sql(Author, editor)
        table = Author._meta.db_table
        constraints = self.get_constraints(table)
        self.assertIn(constraint.name, constraints)
        self.assertIs(constraints[constraint.name]['unique'], True)
        # SQL contains columns.
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIs(sql.references_column(table, 'weight'), True)
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(Author, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_unique_constraint_collate(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest(
                'This backend does not support case-insensitive collations.'
            )
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithSlug)
        constraint = UniqueConstraint(
            Collate(F('title'), collation=collation).desc(),
            Collate('slug', collation=collation),
            name='func_collate_uq',
        )
        # Add constraint.
        with connection.schema_editor() as editor:
            editor.add_constraint(BookWithSlug, constraint)
            sql = constraint.create_sql(BookWithSlug, editor)
        table = BookWithSlug._meta.db_table
        constraints = self.get_constraints(table)
        self.assertIn(constraint.name, constraints)
        self.assertIs(constraints[constraint.name]['unique'], True)
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, constraint.name, ['DESC', 'ASC'])
        # SQL contains columns and a collation.
        self.assertIs(sql.references_column(table, 'title'), True)
        self.assertIs(sql.references_column(table, 'slug'), True)
        self.assertIn('COLLATE %s' % editor.quote_name(collation), str(sql))
        # Remove constraint.
        with connection.schema_editor() as editor:
            editor.remove_constraint(BookWithSlug, constraint)
        self.assertNotIn(constraint.name, self.get_constraints(table))

    @skipIfDBFeature('supports_expression_indexes')
    def test_func_unique_constraint_unsupported(self):
        # UniqueConstraint is ignored on databases that don't support indexes on
        # expressions.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(F('name'), name='func_name_uq')
        with connection.schema_editor() as editor, self.assertNumQueries(0):
            self.assertIsNone(editor.add_constraint(Author, constraint))
            self.assertIsNone(editor.remove_constraint(Author, constraint))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_unique_constraint_nonexistent_field(self):
        constraint = UniqueConstraint(Lower('nonexistent'), name='func_nonexistent_uq')
        msg = (
            ""Cannot resolve keyword 'nonexistent' into field. Choices are: ""
            ""height, id, name, uuid, weight""
        )
        with self.assertRaisesMessage(FieldError, msg):
            with connection.schema_editor() as editor:
                editor.add_constraint(Author, constraint)

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_unique_constraint_nondeterministic(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        constraint = UniqueConstraint(Random(), name='func_random_uq')
        with connection.schema_editor() as editor:
            with self.assertRaises(DatabaseError):
                editor.add_constraint(Author, constraint)

    def test_index_together(self):
        """"""
        Tests removing and adding index_together constraints on a model.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
        # Ensure there's no index on the year/slug columns first
        self.assertIs(
            any(
                c[""index""]
                for c in self.get_constraints(""schema_tag"").values()
                if c['columns'] == [""slug"", ""title""]
            ),
            False,
        )
        # Alter the model to add an index
        with connection.schema_editor() as editor:
            editor.alter_index_together(Tag, [], [(""slug"", ""title"")])
        # Ensure there is now an index
        self.assertIs(
            any(
                c[""index""]
                for c in self.get_constraints(""schema_tag"").values()
                if c['columns'] == [""slug"", ""title""]
            ),
            True,
        )
        # Alter it back
        new_field2 = SlugField(unique=True)
        new_field2.set_attributes_from_name(""slug"")
        with connection.schema_editor() as editor:
            editor.alter_index_together(Tag, [(""slug"", ""title"")], [])
        # Ensure there's no index
        self.assertIs(
            any(
                c[""index""]
                for c in self.get_constraints(""schema_tag"").values()
                if c['columns'] == [""slug"", ""title""]
            ),
            False,
        )

    def test_index_together_with_fk(self):
        """"""
        Tests removing and adding index_together constraints that include
        a foreign key.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        # Ensure the fields are unique to begin with
        self.assertEqual(Book._meta.index_together, ())
        # Add the unique_together constraint
        with connection.schema_editor() as editor:
            editor.alter_index_together(Book, [], [['author', 'title']])
        # Alter it back
        with connection.schema_editor() as editor:
            editor.alter_index_together(Book, [['author', 'title']], [])

    def test_create_index_together(self):
        """"""
        Tests creating models with index_together already defined
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(TagIndexed)
        # Ensure there is an index
        self.assertIs(
            any(
                c[""index""]
                for c in self.get_constraints(""schema_tagindexed"").values()
                if c['columns'] == [""slug"", ""title""]
            ),
            True,
        )

    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')
    def test_remove_index_together_does_not_remove_meta_indexes(self):
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithIndexedNameAndBirthday)
        # Add the custom index
        index = Index(fields=['name', 'birthday'], name='author_name_birthday_idx')
        custom_index_name = index.name
        AuthorWithIndexedNameAndBirthday._meta.indexes = [index]
        with connection.schema_editor() as editor:
            editor.add_index(AuthorWithIndexedNameAndBirthday, index)
        # Ensure the indexes exist
        constraints = self.get_constraints(AuthorWithIndexedNameAndBirthday._meta.db_table)
        self.assertIn(custom_index_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name', 'birthday'] and details['index'] and name != custom_index_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Remove index together
        index_together = AuthorWithIndexedNameAndBirthday._meta.index_together
        with connection.schema_editor() as editor:
            editor.alter_index_together(AuthorWithIndexedNameAndBirthday, index_together, [])
        constraints = self.get_constraints(AuthorWithIndexedNameAndBirthday._meta.db_table)
        self.assertIn(custom_index_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name', 'birthday'] and details['index'] and name != custom_index_name
        ]
        self.assertEqual(len(other_constraints), 0)
        # Re-add index together
        with connection.schema_editor() as editor:
            editor.alter_index_together(AuthorWithIndexedNameAndBirthday, [], index_together)
        constraints = self.get_constraints(AuthorWithIndexedNameAndBirthday._meta.db_table)
        self.assertIn(custom_index_name, constraints)
        other_constraints = [
            name for name, details in constraints.items()
            if details['columns'] == ['name', 'birthday'] and details['index'] and name != custom_index_name
        ]
        self.assertEqual(len(other_constraints), 1)
        # Drop the index
        with connection.schema_editor() as editor:
            AuthorWithIndexedNameAndBirthday._meta.indexes = []
            editor.remove_index(AuthorWithIndexedNameAndBirthday, index)

    @isolate_apps('schema')
    def test_db_table(self):
        """"""
        Tests renaming of the table
        """"""
        class Author(Model):
            name = CharField(max_length=255)

            class Meta:
                app_label = 'schema'

        class Book(Model):
            author = ForeignKey(Author, CASCADE)

            class Meta:
                app_label = 'schema'

        # Create the table and one referring it.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        # Ensure the table is there to begin with
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], connection.features.introspected_field_types['CharField'])
        # Alter the table
        with connection.schema_editor(atomic=connection.features.supports_atomic_references_rename) as editor:
            editor.alter_db_table(Author, ""schema_author"", ""schema_otherauthor"")
        Author._meta.db_table = ""schema_otherauthor""
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], connection.features.introspected_field_types['CharField'])
        # Ensure the foreign key reference was updated
        self.assertForeignKeyExists(Book, ""author_id"", ""schema_otherauthor"")
        # Alter the table again
        with connection.schema_editor(atomic=connection.features.supports_atomic_references_rename) as editor:
            editor.alter_db_table(Author, ""schema_otherauthor"", ""schema_author"")
        # Ensure the table is still there
        Author._meta.db_table = ""schema_author""
        columns = self.column_classes(Author)
        self.assertEqual(columns['name'][0], connection.features.introspected_field_types['CharField'])

    def test_add_remove_index(self):
        """"""
        Tests index addition and removal
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure the table is there and has no index
        self.assertNotIn('title', self.get_indexes(Author._meta.db_table))
        # Add the index
        index = Index(fields=['name'], name='author_title_idx')
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
        self.assertIn('name', self.get_indexes(Author._meta.db_table))
        # Drop the index
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn('name', self.get_indexes(Author._meta.db_table))

    def test_remove_db_index_doesnt_remove_custom_indexes(self):
        """"""
        Changing db_index to False doesn't remove indexes from Meta.indexes.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithIndexedName)
        # Ensure the table has its index
        self.assertIn('name', self.get_indexes(AuthorWithIndexedName._meta.db_table))

        # Add the custom index
        index = Index(fields=['-name'], name='author_name_idx')
        author_index_name = index.name
        with connection.schema_editor() as editor:
            db_index_name = editor._create_index_name(
                table_name=AuthorWithIndexedName._meta.db_table,
                column_names=('name',),
            )
        try:
            AuthorWithIndexedName._meta.indexes = [index]
            with connection.schema_editor() as editor:
                editor.add_index(AuthorWithIndexedName, index)
            old_constraints = self.get_constraints(AuthorWithIndexedName._meta.db_table)
            self.assertIn(author_index_name, old_constraints)
            self.assertIn(db_index_name, old_constraints)
            # Change name field to db_index=False
            old_field = AuthorWithIndexedName._meta.get_field('name')
            new_field = CharField(max_length=255)
            new_field.set_attributes_from_name('name')
            with connection.schema_editor() as editor:
                editor.alter_field(AuthorWithIndexedName, old_field, new_field, strict=True)
            new_constraints = self.get_constraints(AuthorWithIndexedName._meta.db_table)
            self.assertNotIn(db_index_name, new_constraints)
            # The index from Meta.indexes is still in the database.
            self.assertIn(author_index_name, new_constraints)
            # Drop the index
            with connection.schema_editor() as editor:
                editor.remove_index(AuthorWithIndexedName, index)
        finally:
            AuthorWithIndexedName._meta.indexes = []

    def test_order_index(self):
        """"""
        Indexes defined with ordering (ASC/DESC) defined on column
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # The table doesn't have an index
        self.assertNotIn('title', self.get_indexes(Author._meta.db_table))
        index_name = 'author_name_idx'
        # Add the index
        index = Index(fields=['name', '-weight'], name=index_name)
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(Author._meta.db_table, index_name, ['ASC', 'DESC'])
        # Drop the index
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)

    def test_indexes(self):
        """"""
        Tests creation/altering of indexes
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        # Ensure the table is there and has the right index
        self.assertIn(
            ""title"",
            self.get_indexes(Book._meta.db_table),
        )
        # Alter to remove the index
        old_field = Book._meta.get_field(""title"")
        new_field = CharField(max_length=100, db_index=False)
        new_field.set_attributes_from_name(""title"")
        with connection.schema_editor() as editor:
            editor.alter_field(Book, old_field, new_field, strict=True)
        # Ensure the table is there and has no index
        self.assertNotIn(
            ""title"",
            self.get_indexes(Book._meta.db_table),
        )
        # Alter to re-add the index
        new_field2 = Book._meta.get_field(""title"")
        with connection.schema_editor() as editor:
            editor.alter_field(Book, new_field, new_field2, strict=True)
        # Ensure the table is there and has the index again
        self.assertIn(
            ""title"",
            self.get_indexes(Book._meta.db_table),
        )
        # Add a unique column, verify that creates an implicit index
        new_field3 = BookWithSlug._meta.get_field(""slug"")
        with connection.schema_editor() as editor:
            editor.add_field(Book, new_field3)
        self.assertIn(
            ""slug"",
            self.get_uniques(Book._meta.db_table),
        )
        # Remove the unique, check the index goes with it
        new_field4 = CharField(max_length=20, unique=False)
        new_field4.set_attributes_from_name(""slug"")
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithSlug, new_field3, new_field4, strict=True)
        self.assertNotIn(
            ""slug"",
            self.get_uniques(Book._meta.db_table),
        )

    def test_text_field_with_db_index(self):
        with connection.schema_editor() as editor:
            editor.create_model(AuthorTextFieldWithIndex)
        # The text_field index is present if the database supports it.
        assertion = self.assertIn if connection.features.supports_index_on_text_field else self.assertNotIn
        assertion('text_field', self.get_indexes(AuthorTextFieldWithIndex._meta.db_table))

    def _index_expressions_wrappers(self):
        index_expression = IndexExpression()
        index_expression.set_wrapper_classes(connection)
        return ', '.join([
            wrapper_cls.__qualname__ for wrapper_cls in index_expression.wrapper_classes
        ])

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_multiple_wrapper_references(self):
        index = Index(OrderBy(F('name').desc(), descending=True), name='name')
        msg = (
            ""Multiple references to %s can't be used in an indexed expression.""
            % self._index_expressions_wrappers()
        )
        with connection.schema_editor() as editor:
            with self.assertRaisesMessage(ValueError, msg):
                editor.add_index(Author, index)

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_invalid_topmost_expressions(self):
        index = Index(Upper(F('name').desc()), name='name')
        msg = (
            '%s must be topmost expressions in an indexed expression.'
            % self._index_expressions_wrappers()
        )
        with connection.schema_editor() as editor:
            with self.assertRaisesMessage(ValueError, msg):
                editor.add_index(Author, index)

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(Lower('name').desc(), name='func_lower_idx')
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
            sql = index.create_sql(Author, editor)
        table = Author._meta.db_table
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, index.name, ['DESC'])
        # SQL contains a database function.
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIn('LOWER(%s)' % editor.quote_name('name'), str(sql))
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_f(self):
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
        index = Index('slug', F('title').desc(), name='func_f_idx')
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Tag, index)
            sql = index.create_sql(Tag, editor)
        table = Tag._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(Tag._meta.db_table, index.name, ['ASC', 'DESC'])
        # SQL contains columns.
        self.assertIs(sql.references_column(table, 'slug'), True)
        self.assertIs(sql.references_column(table, 'title'), True)
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Tag, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_lookups(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        with register_lookup(CharField, Lower), register_lookup(IntegerField, Abs):
            index = Index(
                F('name__lower'),
                F('weight__abs'),
                name='func_lower_abs_lookup_idx',
            )
            # Add index.
            with connection.schema_editor() as editor:
                editor.add_index(Author, index)
                sql = index.create_sql(Author, editor)
        table = Author._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        # SQL contains columns.
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIs(sql.references_column(table, 'weight'), True)
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_composite_func_index(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(Lower('name'), Upper('name'), name='func_lower_upper_idx')
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
            sql = index.create_sql(Author, editor)
        table = Author._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        # SQL contains database functions.
        self.assertIs(sql.references_column(table, 'name'), True)
        sql = str(sql)
        self.assertIn('LOWER(%s)' % editor.quote_name('name'), sql)
        self.assertIn('UPPER(%s)' % editor.quote_name('name'), sql)
        self.assertLess(sql.index('LOWER'), sql.index('UPPER'))
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_composite_func_index_field_and_expression(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        index = Index(
            F('author').desc(),
            Lower('title').asc(),
            'pub_date',
            name='func_f_lower_field_idx',
        )
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Book, index)
            sql = index.create_sql(Book, editor)
        table = Book._meta.db_table
        constraints = self.get_constraints(table)
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, index.name, ['DESC', 'ASC', 'ASC'])
        self.assertEqual(len(constraints[index.name]['columns']), 3)
        self.assertEqual(constraints[index.name]['columns'][2], 'pub_date')
        # SQL contains database functions and columns.
        self.assertIs(sql.references_column(table, 'author_id'), True)
        self.assertIs(sql.references_column(table, 'title'), True)
        self.assertIs(sql.references_column(table, 'pub_date'), True)
        self.assertIn('LOWER(%s)' % editor.quote_name('title'), str(sql))
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Book, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    @isolate_apps('schema')
    def test_func_index_f_decimalfield(self):
        class Node(Model):
            value = DecimalField(max_digits=5, decimal_places=2)

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Node)
        index = Index(F('value'), name='func_f_decimalfield_idx')
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Node, index)
            sql = index.create_sql(Node, editor)
        table = Node._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        self.assertIs(sql.references_column(table, 'value'), True)
        # SQL doesn't contain casting.
        self.assertNotIn('CAST', str(sql))
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Node, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_cast(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(Cast('weight', FloatField()), name='func_cast_idx')
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
            sql = index.create_sql(Author, editor)
        table = Author._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        self.assertIs(sql.references_column(table, 'weight'), True)
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_collate(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest(
                'This backend does not support case-insensitive collations.'
            )
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(BookWithSlug)
        index = Index(
            Collate(F('title'), collation=collation).desc(),
            Collate('slug', collation=collation),
            name='func_collate_idx',
        )
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(BookWithSlug, index)
            sql = index.create_sql(BookWithSlug, editor)
        table = Book._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, index.name, ['DESC', 'ASC'])
        # SQL contains columns and a collation.
        self.assertIs(sql.references_column(table, 'title'), True)
        self.assertIs(sql.references_column(table, 'slug'), True)
        self.assertIn('COLLATE %s' % editor.quote_name(collation), str(sql))
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Book, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    @skipIfDBFeature('collate_as_index_expression')
    def test_func_index_collate_f_ordered(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest(
                'This backend does not support case-insensitive collations.'
            )
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(
            Collate(F('name').desc(), collation=collation),
            name='func_collate_f_desc_idx',
        )
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
            sql = index.create_sql(Author, editor)
        table = Author._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        if connection.features.supports_index_column_ordering:
            self.assertIndexOrder(table, index.name, ['DESC'])
        # SQL contains columns and a collation.
        self.assertIs(sql.references_column(table, 'name'), True)
        self.assertIn('COLLATE %s' % editor.quote_name(collation), str(sql))
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_calc(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(F('height') / (F('weight') + Value(5)), name='func_calc_idx')
        # Add index.
        with connection.schema_editor() as editor:
            editor.add_index(Author, index)
            sql = index.create_sql(Author, editor)
        table = Author._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        # SQL contains columns and expressions.
        self.assertIs(sql.references_column(table, 'height'), True)
        self.assertIs(sql.references_column(table, 'weight'), True)
        sql = str(sql)
        self.assertIs(
            sql.index(editor.quote_name('height')) <
            sql.index('/') <
            sql.index(editor.quote_name('weight')) <
            sql.index('+') <
            sql.index('5'),
            True,
        )
        # Remove index.
        with connection.schema_editor() as editor:
            editor.remove_index(Author, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes', 'supports_json_field')
    @isolate_apps('schema')
    def test_func_index_json_key_transform(self):
        class JSONModel(Model):
            field = JSONField()

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(JSONModel)
        self.isolated_local_models = [JSONModel]
        index = Index('field__some_key', name='func_json_key_idx')
        with connection.schema_editor() as editor:
            editor.add_index(JSONModel, index)
            sql = index.create_sql(JSONModel, editor)
        table = JSONModel._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        self.assertIs(sql.references_column(table, 'field'), True)
        with connection.schema_editor() as editor:
            editor.remove_index(JSONModel, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipUnlessDBFeature('supports_expression_indexes', 'supports_json_field')
    @isolate_apps('schema')
    def test_func_index_json_key_transform_cast(self):
        class JSONModel(Model):
            field = JSONField()

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(JSONModel)
        self.isolated_local_models = [JSONModel]
        index = Index(
            Cast(KeyTextTransform('some_key', 'field'), IntegerField()),
            name='func_json_key_cast_idx',
        )
        with connection.schema_editor() as editor:
            editor.add_index(JSONModel, index)
            sql = index.create_sql(JSONModel, editor)
        table = JSONModel._meta.db_table
        self.assertIn(index.name, self.get_constraints(table))
        self.assertIs(sql.references_column(table, 'field'), True)
        with connection.schema_editor() as editor:
            editor.remove_index(JSONModel, index)
        self.assertNotIn(index.name, self.get_constraints(table))

    @skipIfDBFeature('supports_expression_indexes')
    def test_func_index_unsupported(self):
        # Index is ignored on databases that don't support indexes on
        # expressions.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(F('name'), name='random_idx')
        with connection.schema_editor() as editor, self.assertNumQueries(0):
            self.assertIsNone(editor.add_index(Author, index))
            self.assertIsNone(editor.remove_index(Author, index))

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_nonexistent_field(self):
        index = Index(Lower('nonexistent'), name='func_nonexistent_idx')
        msg = (
            ""Cannot resolve keyword 'nonexistent' into field. Choices are: ""
            ""height, id, name, uuid, weight""
        )
        with self.assertRaisesMessage(FieldError, msg):
            with connection.schema_editor() as editor:
                editor.add_index(Author, index)

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_func_index_nondeterministic(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        index = Index(Random(), name='func_random_idx')
        with connection.schema_editor() as editor:
            with self.assertRaises(DatabaseError):
                editor.add_index(Author, index)

    def test_primary_key(self):
        """"""
        Tests altering of the primary key
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
        # Ensure the table is there and has the right PK
        self.assertEqual(self.get_primary_key(Tag._meta.db_table), 'id')
        # Alter to change the PK
        id_field = Tag._meta.get_field(""id"")
        old_field = Tag._meta.get_field(""slug"")
        new_field = SlugField(primary_key=True)
        new_field.set_attributes_from_name(""slug"")
        new_field.model = Tag
        with connection.schema_editor() as editor:
            editor.remove_field(Tag, id_field)
            editor.alter_field(Tag, old_field, new_field)
        # Ensure the PK changed
        self.assertNotIn(
            'id',
            self.get_indexes(Tag._meta.db_table),
        )
        self.assertEqual(self.get_primary_key(Tag._meta.db_table), 'slug')

    def test_context_manager_exit(self):
        """"""
        Ensures transaction is correctly closed when an error occurs
        inside a SchemaEditor context.
        """"""
        class SomeError(Exception):
            pass
        try:
            with connection.schema_editor():
                raise SomeError
        except SomeError:
            self.assertFalse(connection.in_atomic_block)

    @skipIfDBFeature('can_rollback_ddl')
    def test_unsupported_transactional_ddl_disallowed(self):
        message = (
            ""Executing DDL statements while in a transaction on databases ""
            ""that can't perform a rollback is prohibited.""
        )
        with atomic(), connection.schema_editor() as editor:
            with self.assertRaisesMessage(TransactionManagementError, message):
                editor.execute(editor.sql_create_table % {'table': 'foo', 'definition': ''})

    @skipUnlessDBFeature('supports_foreign_keys', 'indexes_foreign_keys')
    def test_foreign_key_index_long_names_regression(self):
        """"""
        Regression test for #21497.
        Only affects databases that supports foreign keys.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithEvenLongerName)
            editor.create_model(BookWithLongName)
        # Find the properly shortened column name
        column_name = connection.ops.quote_name(""author_foreign_key_with_really_long_field_name_id"")
        column_name = column_name[1:-1].lower()  # unquote, and, for Oracle, un-upcase
        # Ensure the table is there and has an index on the column
        self.assertIn(
            column_name,
            self.get_indexes(BookWithLongName._meta.db_table),
        )

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_add_foreign_key_long_names(self):
        """"""
        Regression test for #23009.
        Only affects databases that supports foreign keys.
        """"""
        # Create the initial tables
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithEvenLongerName)
            editor.create_model(BookWithLongName)
        # Add a second FK, this would fail due to long ref name before the fix
        new_field = ForeignKey(AuthorWithEvenLongerName, CASCADE, related_name=""something"")
        new_field.set_attributes_from_name(""author_other_really_long_named_i_mean_so_long_fk"")
        with connection.schema_editor() as editor:
            editor.add_field(BookWithLongName, new_field)

    @isolate_apps('schema')
    @skipUnlessDBFeature('supports_foreign_keys')
    def test_add_foreign_key_quoted_db_table(self):
        class Author(Model):
            class Meta:
                db_table = '""table_author_double_quoted""'
                app_label = 'schema'

        class Book(Model):
            author = ForeignKey(Author, CASCADE)

            class Meta:
                app_label = 'schema'

        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        if connection.vendor == 'mysql':
            self.assertForeignKeyExists(Book, 'author_id', '""table_author_double_quoted""')
        else:
            self.assertForeignKeyExists(Book, 'author_id', 'table_author_double_quoted')

    def test_add_foreign_object(self):
        with connection.schema_editor() as editor:
            editor.create_model(BookForeignObj)

        new_field = ForeignObject(Author, on_delete=CASCADE, from_fields=['author_id'], to_fields=['id'])
        new_field.set_attributes_from_name('author')
        with connection.schema_editor() as editor:
            editor.add_field(BookForeignObj, new_field)

    def test_creation_deletion_reserved_names(self):
        """"""
        Tries creating a model's table, and then deleting it when it has a
        SQL reserved name.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            try:
                editor.create_model(Thing)
            except OperationalError as e:
                self.fail(""Errors when applying initial migration for a model ""
                          ""with a table named after an SQL reserved word: %s"" % e)
        # The table is there
        list(Thing.objects.all())
        # Clean up that table
        with connection.schema_editor() as editor:
            editor.delete_model(Thing)
        # The table is gone
        with self.assertRaises(DatabaseError):
            list(Thing.objects.all())

    def test_remove_constraints_capital_letters(self):
        """"""
        #23065 - Constraint names must be quoted if they contain capital letters.
        """"""
        def get_field(*args, field_class=IntegerField, **kwargs):
            kwargs['db_column'] = ""CamelCase""
            field = field_class(*args, **kwargs)
            field.set_attributes_from_name(""CamelCase"")
            return field

        model = Author
        field = get_field()
        table = model._meta.db_table
        column = field.column
        identifier_converter = connection.introspection.identifier_converter

        with connection.schema_editor() as editor:
            editor.create_model(model)
            editor.add_field(model, field)

            constraint_name = 'CamelCaseIndex'
            expected_constraint_name = identifier_converter(constraint_name)
            editor.execute(
                editor.sql_create_index % {
                    ""table"": editor.quote_name(table),
                    ""name"": editor.quote_name(constraint_name),
                    ""using"": """",
                    ""columns"": editor.quote_name(column),
                    ""extra"": """",
                    ""condition"": """",
                    ""include"": """",
                }
            )
            self.assertIn(expected_constraint_name, self.get_constraints(model._meta.db_table))
            editor.alter_field(model, get_field(db_index=True), field, strict=True)
            self.assertNotIn(expected_constraint_name, self.get_constraints(model._meta.db_table))

            constraint_name = 'CamelCaseUniqConstraint'
            expected_constraint_name = identifier_converter(constraint_name)
            editor.execute(editor._create_unique_sql(model, [field], constraint_name))
            self.assertIn(expected_constraint_name, self.get_constraints(model._meta.db_table))
            editor.alter_field(model, get_field(unique=True), field, strict=True)
            self.assertNotIn(expected_constraint_name, self.get_constraints(model._meta.db_table))

            if editor.sql_create_fk:
                constraint_name = 'CamelCaseFKConstraint'
                expected_constraint_name = identifier_converter(constraint_name)
                editor.execute(
                    editor.sql_create_fk % {
                        ""table"": editor.quote_name(table),
                        ""name"": editor.quote_name(constraint_name),
                        ""column"": editor.quote_name(column),
                        ""to_table"": editor.quote_name(table),
                        ""to_column"": editor.quote_name(model._meta.auto_field.column),
                        ""deferrable"": connection.ops.deferrable_sql(),
                    }
                )
                self.assertIn(expected_constraint_name, self.get_constraints(model._meta.db_table))
                editor.alter_field(model, get_field(Author, CASCADE, field_class=ForeignKey), field, strict=True)
                self.assertNotIn(expected_constraint_name, self.get_constraints(model._meta.db_table))

    def test_add_field_use_effective_default(self):
        """"""
        #23987 - effective_default() should be used as the field default when
        adding a new field.
        """"""
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure there's no surname field
        columns = self.column_classes(Author)
        self.assertNotIn(""surname"", columns)
        # Create a row
        Author.objects.create(name='Anonymous1')
        # Add new CharField to ensure default will be used from effective_default
        new_field = CharField(max_length=15, blank=True)
        new_field.set_attributes_from_name(""surname"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        # Ensure field was added with the right default
        with connection.cursor() as cursor:
            cursor.execute(""SELECT surname FROM schema_author;"")
            item = cursor.fetchall()[0]
            self.assertEqual(item[0], None if connection.features.interprets_empty_strings_as_nulls else '')

    def test_add_field_default_dropped(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Ensure there's no surname field
        columns = self.column_classes(Author)
        self.assertNotIn(""surname"", columns)
        # Create a row
        Author.objects.create(name='Anonymous1')
        # Add new CharField with a default
        new_field = CharField(max_length=15, blank=True, default='surname default')
        new_field.set_attributes_from_name(""surname"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        # Ensure field was added with the right default
        with connection.cursor() as cursor:
            cursor.execute(""SELECT surname FROM schema_author;"")
            item = cursor.fetchall()[0]
            self.assertEqual(item[0], 'surname default')
            # And that the default is no longer set in the database.
            field = next(
                f for f in connection.introspection.get_table_description(cursor, ""schema_author"")
                if f.name == ""surname""
            )
            if connection.features.can_introspect_default:
                self.assertIsNone(field.default)

    def test_add_field_default_nullable(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Add new nullable CharField with a default.
        new_field = CharField(max_length=15, blank=True, null=True, default='surname')
        new_field.set_attributes_from_name('surname')
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        Author.objects.create(name='Anonymous1')
        with connection.cursor() as cursor:
            cursor.execute('SELECT surname FROM schema_author;')
            item = cursor.fetchall()[0]
            self.assertIsNone(item[0])
            field = next(
                f
                for f in connection.introspection.get_table_description(
                    cursor,
                    'schema_author',
                )
                if f.name == 'surname'
            )
            # Field is still nullable.
            self.assertTrue(field.null_ok)
            # The database default is no longer set.
            if connection.features.can_introspect_default:
                self.assertIn(field.default, ['NULL', None])

    def test_add_textfield_default_nullable(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Add new nullable TextField with a default.
        new_field = TextField(blank=True, null=True, default='text')
        new_field.set_attributes_from_name('description')
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        Author.objects.create(name='Anonymous1')
        with connection.cursor() as cursor:
            cursor.execute('SELECT description FROM schema_author;')
            item = cursor.fetchall()[0]
            self.assertIsNone(item[0])
            field = next(
                f
                for f in connection.introspection.get_table_description(
                    cursor,
                    'schema_author',
                )
                if f.name == 'description'
            )
            # Field is still nullable.
            self.assertTrue(field.null_ok)
            # The database default is no longer set.
            if connection.features.can_introspect_default:
                self.assertIn(field.default, ['NULL', None])

    def test_alter_field_default_dropped(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Create a row
        Author.objects.create(name='Anonymous1')
        self.assertIsNone(Author.objects.get().height)
        old_field = Author._meta.get_field('height')
        # The default from the new field is used in updating existing rows.
        new_field = IntegerField(blank=True, default=42)
        new_field.set_attributes_from_name('height')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        self.assertEqual(Author.objects.get().height, 42)
        # The database default should be removed.
        with connection.cursor() as cursor:
            field = next(
                f for f in connection.introspection.get_table_description(cursor, ""schema_author"")
                if f.name == ""height""
            )
            if connection.features.can_introspect_default:
                self.assertIsNone(field.default)

    def test_alter_field_default_doesnt_perform_queries(self):
        """"""
        No queries are performed if a field default changes and the field's
        not changing from null to non-null.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(AuthorWithDefaultHeight)
        old_field = AuthorWithDefaultHeight._meta.get_field('height')
        new_default = old_field.default * 2
        new_field = PositiveIntegerField(null=True, blank=True, default=new_default)
        new_field.set_attributes_from_name('height')
        with connection.schema_editor() as editor, self.assertNumQueries(0):
            editor.alter_field(AuthorWithDefaultHeight, old_field, new_field, strict=True)

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_field_fk_attributes_noop(self):
        """"""
        No queries are performed when changing field attributes that don't
        affect the schema.
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
        old_field = Book._meta.get_field('author')
        new_field = ForeignKey(
            Author,
            blank=True,
            editable=False,
            error_messages={'invalid': 'error message'},
            help_text='help text',
            limit_choices_to={'limit': 'choice'},
            on_delete=PROTECT,
            related_name='related_name',
            related_query_name='related_query_name',
            validators=[lambda x: x],
            verbose_name='verbose name',
        )
        new_field.set_attributes_from_name('author')
        with connection.schema_editor() as editor, self.assertNumQueries(0):
            editor.alter_field(Book, old_field, new_field, strict=True)
        with connection.schema_editor() as editor, self.assertNumQueries(0):
            editor.alter_field(Book, new_field, old_field, strict=True)

    def test_add_textfield_unhashable_default(self):
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Create a row
        Author.objects.create(name='Anonymous1')
        # Create a field that has an unhashable default
        new_field = TextField(default={})
        new_field.set_attributes_from_name(""info"")
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_add_indexed_charfield(self):
        field = CharField(max_length=255, db_index=True)
        field.set_attributes_from_name('nom_de_plume')
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.add_field(Author, field)
        # Should create two indexes; one for like operator.
        self.assertEqual(
            self.get_constraints_for_column(Author, 'nom_de_plume'),
            ['schema_author_nom_de_plume_7570a851', 'schema_author_nom_de_plume_7570a851_like'],
        )

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_add_unique_charfield(self):
        field = CharField(max_length=255, unique=True)
        field.set_attributes_from_name('nom_de_plume')
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.add_field(Author, field)
        # Should create two indexes; one for like operator.
        self.assertEqual(
            self.get_constraints_for_column(Author, 'nom_de_plume'),
            ['schema_author_nom_de_plume_7570a851_like', 'schema_author_nom_de_plume_key']
        )

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_add_index_to_charfield(self):
        # Create the table and verify no initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        self.assertEqual(self.get_constraints_for_column(Author, 'name'), [])
        # Alter to add db_index=True and create 2 indexes.
        old_field = Author._meta.get_field('name')
        new_field = CharField(max_length=255, db_index=True)
        new_field.set_attributes_from_name('name')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(Author, 'name'),
            ['schema_author_name_1fbc5617', 'schema_author_name_1fbc5617_like']
        )
        # Remove db_index=True to drop both indexes.
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, old_field, strict=True)
        self.assertEqual(self.get_constraints_for_column(Author, 'name'), [])

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_add_unique_to_charfield(self):
        # Create the table and verify no initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        self.assertEqual(self.get_constraints_for_column(Author, 'name'), [])
        # Alter to add unique=True and create 2 indexes.
        old_field = Author._meta.get_field('name')
        new_field = CharField(max_length=255, unique=True)
        new_field.set_attributes_from_name('name')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(Author, 'name'),
            ['schema_author_name_1fbc5617_like', 'schema_author_name_1fbc5617_uniq']
        )
        # Remove unique=True to drop both indexes.
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, old_field, strict=True)
        self.assertEqual(self.get_constraints_for_column(Author, 'name'), [])

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_add_index_to_textfield(self):
        # Create the table and verify no initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(Note)
        self.assertEqual(self.get_constraints_for_column(Note, 'info'), [])
        # Alter to add db_index=True and create 2 indexes.
        old_field = Note._meta.get_field('info')
        new_field = TextField(db_index=True)
        new_field.set_attributes_from_name('info')
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(Note, 'info'),
            ['schema_note_info_4b0ea695', 'schema_note_info_4b0ea695_like']
        )
        # Remove db_index=True to drop both indexes.
        with connection.schema_editor() as editor:
            editor.alter_field(Note, new_field, old_field, strict=True)
        self.assertEqual(self.get_constraints_for_column(Note, 'info'), [])

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_add_unique_to_charfield_with_db_index(self):
        # Create the table and verify initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(BookWithoutAuthor)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff', 'schema_book_title_2dfb2dff_like']
        )
        # Alter to add unique=True (should replace the index)
        old_field = BookWithoutAuthor._meta.get_field('title')
        new_field = CharField(max_length=100, db_index=True, unique=True)
        new_field.set_attributes_from_name('title')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithoutAuthor, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff_like', 'schema_book_title_2dfb2dff_uniq']
        )
        # Alter to remove unique=True (should drop unique index)
        new_field2 = CharField(max_length=100, db_index=True)
        new_field2.set_attributes_from_name('title')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithoutAuthor, new_field, new_field2, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff', 'schema_book_title_2dfb2dff_like']
        )

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_remove_unique_and_db_index_from_charfield(self):
        # Create the table and verify initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(BookWithoutAuthor)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff', 'schema_book_title_2dfb2dff_like']
        )
        # Alter to add unique=True (should replace the index)
        old_field = BookWithoutAuthor._meta.get_field('title')
        new_field = CharField(max_length=100, db_index=True, unique=True)
        new_field.set_attributes_from_name('title')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithoutAuthor, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff_like', 'schema_book_title_2dfb2dff_uniq']
        )
        # Alter to remove both unique=True and db_index=True (should drop all indexes)
        new_field2 = CharField(max_length=100)
        new_field2.set_attributes_from_name('title')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithoutAuthor, new_field, new_field2, strict=True)
        self.assertEqual(self.get_constraints_for_column(BookWithoutAuthor, 'title'), [])

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_swap_unique_and_db_index_with_charfield(self):
        # Create the table and verify initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(BookWithoutAuthor)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff', 'schema_book_title_2dfb2dff_like']
        )
        # Alter to set unique=True and remove db_index=True (should replace the index)
        old_field = BookWithoutAuthor._meta.get_field('title')
        new_field = CharField(max_length=100, unique=True)
        new_field.set_attributes_from_name('title')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithoutAuthor, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff_like', 'schema_book_title_2dfb2dff_uniq']
        )
        # Alter to set db_index=True and remove unique=True (should restore index)
        new_field2 = CharField(max_length=100, db_index=True)
        new_field2.set_attributes_from_name('title')
        with connection.schema_editor() as editor:
            editor.alter_field(BookWithoutAuthor, new_field, new_field2, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(BookWithoutAuthor, 'title'),
            ['schema_book_title_2dfb2dff', 'schema_book_title_2dfb2dff_like']
        )

    @unittest.skipUnless(connection.vendor == 'postgresql', ""PostgreSQL specific"")
    def test_alter_field_add_db_index_to_charfield_with_unique(self):
        # Create the table and verify initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(Tag)
        self.assertEqual(
            self.get_constraints_for_column(Tag, 'slug'),
            ['schema_tag_slug_2c418ba3_like', 'schema_tag_slug_key']
        )
        # Alter to add db_index=True
        old_field = Tag._meta.get_field('slug')
        new_field = SlugField(db_index=True, unique=True)
        new_field.set_attributes_from_name('slug')
        with connection.schema_editor() as editor:
            editor.alter_field(Tag, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(Tag, 'slug'),
            ['schema_tag_slug_2c418ba3_like', 'schema_tag_slug_key']
        )
        # Alter to remove db_index=True
        new_field2 = SlugField(unique=True)
        new_field2.set_attributes_from_name('slug')
        with connection.schema_editor() as editor:
            editor.alter_field(Tag, new_field, new_field2, strict=True)
        self.assertEqual(
            self.get_constraints_for_column(Tag, 'slug'),
            ['schema_tag_slug_2c418ba3_like', 'schema_tag_slug_key']
        )

    def test_alter_field_add_index_to_integerfield(self):
        # Create the table and verify no initial indexes.
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        self.assertEqual(self.get_constraints_for_column(Author, 'weight'), [])

        # Alter to add db_index=True and create index.
        old_field = Author._meta.get_field('weight')
        new_field = IntegerField(null=True, db_index=True)
        new_field.set_attributes_from_name('weight')
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        self.assertEqual(self.get_constraints_for_column(Author, 'weight'), ['schema_author_weight_587740f9'])

        # Remove db_index=True to drop index.
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, old_field, strict=True)
        self.assertEqual(self.get_constraints_for_column(Author, 'weight'), [])

    def test_alter_pk_with_self_referential_field(self):
        """"""
        Changing the primary key field name of a model with a self-referential
        foreign key (#26384).
        """"""
        with connection.schema_editor() as editor:
            editor.create_model(Node)
        old_field = Node._meta.get_field('node_id')
        new_field = AutoField(primary_key=True)
        new_field.set_attributes_from_name('id')
        with connection.schema_editor() as editor:
            editor.alter_field(Node, old_field, new_field, strict=True)
        self.assertForeignKeyExists(Node, 'parent_id', Node._meta.db_table)

    @mock.patch('django.db.backends.base.schema.datetime')
    @mock.patch('django.db.backends.base.schema.timezone')
    def test_add_datefield_and_datetimefield_use_effective_default(self, mocked_datetime, mocked_tz):
        """"""
        effective_default() should be used for DateField, DateTimeField, and
        TimeField if auto_now or auto_now_add is set (#25005).
        """"""
        now = datetime.datetime(month=1, day=1, year=2000, hour=1, minute=1)
        now_tz = datetime.datetime(month=1, day=1, year=2000, hour=1, minute=1, tzinfo=timezone.utc)
        mocked_datetime.now = mock.MagicMock(return_value=now)
        mocked_tz.now = mock.MagicMock(return_value=now_tz)
        # Create the table
        with connection.schema_editor() as editor:
            editor.create_model(Author)
        # Check auto_now/auto_now_add attributes are not defined
        columns = self.column_classes(Author)
        self.assertNotIn(""dob_auto_now"", columns)
        self.assertNotIn(""dob_auto_now_add"", columns)
        self.assertNotIn(""dtob_auto_now"", columns)
        self.assertNotIn(""dtob_auto_now_add"", columns)
        self.assertNotIn(""tob_auto_now"", columns)
        self.assertNotIn(""tob_auto_now_add"", columns)
        # Create a row
        Author.objects.create(name='Anonymous1')
        # Ensure fields were added with the correct defaults
        dob_auto_now = DateField(auto_now=True)
        dob_auto_now.set_attributes_from_name('dob_auto_now')
        self.check_added_field_default(
            editor, Author, dob_auto_now, 'dob_auto_now', now.date(),
            cast_function=lambda x: x.date(),
        )
        dob_auto_now_add = DateField(auto_now_add=True)
        dob_auto_now_add.set_attributes_from_name('dob_auto_now_add')
        self.check_added_field_default(
            editor, Author, dob_auto_now_add, 'dob_auto_now_add', now.date(),
            cast_function=lambda x: x.date(),
        )
        dtob_auto_now = DateTimeField(auto_now=True)
        dtob_auto_now.set_attributes_from_name('dtob_auto_now')
        self.check_added_field_default(
            editor, Author, dtob_auto_now, 'dtob_auto_now', now,
        )
        dt_tm_of_birth_auto_now_add = DateTimeField(auto_now_add=True)
        dt_tm_of_birth_auto_now_add.set_attributes_from_name('dtob_auto_now_add')
        self.check_added_field_default(
            editor, Author, dt_tm_of_birth_auto_now_add, 'dtob_auto_now_add', now,
        )
        tob_auto_now = TimeField(auto_now=True)
        tob_auto_now.set_attributes_from_name('tob_auto_now')
        self.check_added_field_default(
            editor, Author, tob_auto_now, 'tob_auto_now', now.time(),
            cast_function=lambda x: x.time(),
        )
        tob_auto_now_add = TimeField(auto_now_add=True)
        tob_auto_now_add.set_attributes_from_name('tob_auto_now_add')
        self.check_added_field_default(
            editor, Author, tob_auto_now_add, 'tob_auto_now_add', now.time(),
            cast_function=lambda x: x.time(),
        )

    def test_namespaced_db_table_create_index_name(self):
        """"""
        Table names are stripped of their namespace/schema before being used to
        generate index names.
        """"""
        with connection.schema_editor() as editor:
            max_name_length = connection.ops.max_name_length() or 200
            namespace = 'n' * max_name_length
            table_name = 't' * max_name_length
            namespaced_table_name = '""%s"".""%s""' % (namespace, table_name)
            self.assertEqual(
                editor._create_index_name(table_name, []),
                editor._create_index_name(namespaced_table_name, []),
            )

    @unittest.skipUnless(connection.vendor == 'oracle', 'Oracle specific db_table syntax')
    def test_creation_with_db_table_double_quotes(self):
        oracle_user = connection.creation._test_database_user()

        class Student(Model):
            name = CharField(max_length=30)

            class Meta:
                app_label = 'schema'
                apps = new_apps
                db_table = '""%s"".""DJANGO_STUDENT_TABLE""' % oracle_user

        class Document(Model):
            name = CharField(max_length=30)
            students = ManyToManyField(Student)

            class Meta:
                app_label = 'schema'
                apps = new_apps
                db_table = '""%s"".""DJANGO_DOCUMENT_TABLE""' % oracle_user

        self.local_models = [Student, Document]

        with connection.schema_editor() as editor:
            editor.create_model(Student)
            editor.create_model(Document)

        doc = Document.objects.create(name='Test Name')
        student = Student.objects.create(name='Some man')
        doc.students.add(student)

    @isolate_apps('schema')
    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific db_table syntax.')
    def test_namespaced_db_table_foreign_key_reference(self):
        with connection.cursor() as cursor:
            cursor.execute('CREATE SCHEMA django_schema_tests')

        def delete_schema():
            with connection.cursor() as cursor:
                cursor.execute('DROP SCHEMA django_schema_tests CASCADE')

        self.addCleanup(delete_schema)

        class Author(Model):
            class Meta:
                app_label = 'schema'

        class Book(Model):
            class Meta:
                app_label = 'schema'
                db_table = '""django_schema_tests"".""schema_book""'

        author = ForeignKey(Author, CASCADE)
        author.set_attributes_from_name('author')

        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
            editor.add_field(Book, author)

    def test_rename_table_renames_deferred_sql_references(self):
        atomic_rename = connection.features.supports_atomic_references_rename
        with connection.schema_editor(atomic=atomic_rename) as editor:
            editor.create_model(Author)
            editor.create_model(Book)
            editor.alter_db_table(Author, 'schema_author', 'schema_renamed_author')
            editor.alter_db_table(Author, 'schema_book', 'schema_renamed_book')
            try:
                self.assertGreater(len(editor.deferred_sql), 0)
                for statement in editor.deferred_sql:
                    self.assertIs(statement.references_table('schema_author'), False)
                    self.assertIs(statement.references_table('schema_book'), False)
            finally:
                editor.alter_db_table(Author, 'schema_renamed_author', 'schema_author')
                editor.alter_db_table(Author, 'schema_renamed_book', 'schema_book')

    def test_rename_column_renames_deferred_sql_references(self):
        with connection.schema_editor() as editor:
            editor.create_model(Author)
            editor.create_model(Book)
            old_title = Book._meta.get_field('title')
            new_title = CharField(max_length=100, db_index=True)
            new_title.set_attributes_from_name('renamed_title')
            editor.alter_field(Book, old_title, new_title)
            old_author = Book._meta.get_field('author')
            new_author = ForeignKey(Author, CASCADE)
            new_author.set_attributes_from_name('renamed_author')
            editor.alter_field(Book, old_author, new_author)
            self.assertGreater(len(editor.deferred_sql), 0)
            for statement in editor.deferred_sql:
                self.assertIs(statement.references_column('book', 'title'), False)
                self.assertIs(statement.references_column('book', 'author_id'), False)

    @isolate_apps('schema')
    def test_referenced_field_without_constraint_rename_inside_atomic_block(self):
        """"""
        Foreign keys without database level constraint don't prevent the field
        they reference from being renamed in an atomic block.
        """"""
        class Foo(Model):
            field = CharField(max_length=255, unique=True)

            class Meta:
                app_label = 'schema'

        class Bar(Model):
            foo = ForeignKey(Foo, CASCADE, to_field='field', db_constraint=False)

            class Meta:
                app_label = 'schema'

        self.isolated_local_models = [Foo, Bar]
        with connection.schema_editor() as editor:
            editor.create_model(Foo)
            editor.create_model(Bar)

        new_field = CharField(max_length=255, unique=True)
        new_field.set_attributes_from_name('renamed')
        with connection.schema_editor(atomic=True) as editor:
            editor.alter_field(Foo, Foo._meta.get_field('field'), new_field)

    @isolate_apps('schema')
    def test_referenced_table_without_constraint_rename_inside_atomic_block(self):
        """"""
        Foreign keys without database level constraint don't prevent the table
        they reference from being renamed in an atomic block.
        """"""
        class Foo(Model):
            field = CharField(max_length=255, unique=True)

            class Meta:
                app_label = 'schema'

        class Bar(Model):
            foo = ForeignKey(Foo, CASCADE, to_field='field', db_constraint=False)

            class Meta:
                app_label = 'schema'

        self.isolated_local_models = [Foo, Bar]
        with connection.schema_editor() as editor:
            editor.create_model(Foo)
            editor.create_model(Bar)

        new_field = CharField(max_length=255, unique=True)
        new_field.set_attributes_from_name('renamed')
        with connection.schema_editor(atomic=True) as editor:
            editor.alter_db_table(Foo, Foo._meta.db_table, 'renamed_table')
        Foo._meta.db_table = 'renamed_table'

    @isolate_apps('schema')
    @skipUnlessDBFeature('supports_collation_on_charfield')
    def test_db_collation_charfield(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest('Language collations are not supported.')

        class Foo(Model):
            field = CharField(max_length=255, db_collation=collation)

            class Meta:
                app_label = 'schema'

        self.isolated_local_models = [Foo]
        with connection.schema_editor() as editor:
            editor.create_model(Foo)

        self.assertEqual(
            self.get_column_collation(Foo._meta.db_table, 'field'),
            collation,
        )

    @isolate_apps('schema')
    @skipUnlessDBFeature('supports_collation_on_textfield')
    def test_db_collation_textfield(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest('Language collations are not supported.')

        class Foo(Model):
            field = TextField(db_collation=collation)

            class Meta:
                app_label = 'schema'

        self.isolated_local_models = [Foo]
        with connection.schema_editor() as editor:
            editor.create_model(Foo)

        self.assertEqual(
            self.get_column_collation(Foo._meta.db_table, 'field'),
            collation,
        )

    @skipUnlessDBFeature('supports_collation_on_charfield')
    def test_add_field_db_collation(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest('Language collations are not supported.')

        with connection.schema_editor() as editor:
            editor.create_model(Author)

        new_field = CharField(max_length=255, db_collation=collation)
        new_field.set_attributes_from_name('alias')
        with connection.schema_editor() as editor:
            editor.add_field(Author, new_field)
        columns = self.column_classes(Author)
        self.assertEqual(
            columns['alias'][0],
            connection.features.introspected_field_types['CharField'],
        )
        self.assertEqual(columns['alias'][1][8], collation)

    @skipUnlessDBFeature('supports_collation_on_charfield')
    def test_alter_field_db_collation(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest('Language collations are not supported.')

        with connection.schema_editor() as editor:
            editor.create_model(Author)

        old_field = Author._meta.get_field('name')
        new_field = CharField(max_length=255, db_collation=collation)
        new_field.set_attributes_from_name('name')
        new_field.model = Author
        with connection.schema_editor() as editor:
            editor.alter_field(Author, old_field, new_field, strict=True)
        self.assertEqual(
            self.get_column_collation(Author._meta.db_table, 'name'),
            collation,
        )
        with connection.schema_editor() as editor:
            editor.alter_field(Author, new_field, old_field, strict=True)
        self.assertIsNone(self.get_column_collation(Author._meta.db_table, 'name'))

    @skipUnlessDBFeature('supports_collation_on_charfield')
    def test_alter_field_type_and_db_collation(self):
        collation = connection.features.test_collations.get('non_default')
        if not collation:
            self.skipTest('Language collations are not supported.')

        with connection.schema_editor() as editor:
            editor.create_model(Note)

        old_field = Note._meta.get_field('info')
        new_field = CharField(max_length=255, db_collation=collation)
        new_field.set_attributes_from_name('info')
        new_field.model = Note
        with connection.schema_editor() as editor:
            editor.alter_field(Note, old_field, new_field, strict=True)
        columns = self.column_classes(Note)
        self.assertEqual(
            columns['info'][0],
            connection.features.introspected_field_types['CharField'],
        )
        self.assertEqual(columns['info'][1][8], collation)
        with connection.schema_editor() as editor:
            editor.alter_field(Note, new_field, old_field, strict=True)
        columns = self.column_classes(Note)
        self.assertEqual(columns['info'][0], 'TextField')
        self.assertIsNone(columns['info'][1][8])

    @skipUnlessDBFeature(
        'supports_collation_on_charfield',
        'supports_non_deterministic_collations',
    )
    def test_ci_cs_db_collation(self):
        cs_collation = connection.features.test_collations.get('cs')
        ci_collation = connection.features.test_collations.get('ci')
        try:
            if connection.vendor == 'mysql':
                cs_collation = 'latin1_general_cs'
            elif connection.vendor == 'postgresql':
                cs_collation = 'en-x-icu'
                with connection.cursor() as cursor:
                    cursor.execute(
                        ""CREATE COLLATION IF NOT EXISTS case_insensitive ""
                        ""(provider = icu, locale = 'und-u-ks-level2', ""
                        ""deterministic = false)""
                    )
                    ci_collation = 'case_insensitive'
            # Create the table.
            with connection.schema_editor() as editor:
                editor.create_model(Author)
            # Case-insensitive collation.
            old_field = Author._meta.get_field('name')
            new_field_ci = CharField(max_length=255, db_collation=ci_collation)
            new_field_ci.set_attributes_from_name('name')
            new_field_ci.model = Author
            with connection.schema_editor() as editor:
                editor.alter_field(Author, old_field, new_field_ci, strict=True)
            Author.objects.create(name='ANDREW')
            self.assertIs(Author.objects.filter(name='Andrew').exists(), True)
            # Case-sensitive collation.
            new_field_cs = CharField(max_length=255, db_collation=cs_collation)
            new_field_cs.set_attributes_from_name('name')
            new_field_cs.model = Author
            with connection.schema_editor() as editor:
                editor.alter_field(Author, new_field_ci, new_field_cs, strict=True)
            self.assertIs(Author.objects.filter(name='Andrew').exists(), False)
        finally:
            if connection.vendor == 'postgresql':
                with connection.cursor() as cursor:
                    cursor.execute('DROP COLLATION IF EXISTS case_insensitive')",1,334 2000 40 2001 41 58 648 2002 61 91 93 2003 61 91 2004 44 2005 44 2006 44 2007 44 2008 44 2009 44 2010 44 2011 44 2012 44 2013 44 2014 44 2015 44 2016 44 2017 44 2018 44 2019 44 2020 44 2021 44 2022 44 93 621 348 2023 40 2024 41 58 621 621 2024 46 2025 61 91 93 621 621 2024 46 2026 61 91 93 348 2027 40 2024 41 58 621 2024 46 2028 40 41 2029 46 2030 40 41 385 2031 398 2029 46 2032 40 41 58 2031 46 2033 46 2034 40 41 392 648 398 2029 46 2035 58 385 2031 398 2024 46 2025 58 385 2036 398 2031 46 2033 46 2036 58 2037 61 2036 46 2038 46 2037 392 2037 308 2037 46 2033 46 2039 58 351 2029 46 2035 91 648 93 91 2037 46 2033 46 2040 93 351 2029 46 2035 91 648 93 91 2031 46 2033 46 2040 93 392 2024 46 2026 58 497 2041 46 2042 40 41 311 2043 58 385 2031 398 2024 46 2026 58 2043 46 2044 40 2031 41 348 2028 40 2024 41 58 648 2045 61 2041 46 2046 46 2047 497 2041 46 2042 40 41 311 2043 58 2041 46 2048 40 41 2049 61 2041 46 2046 46 2049 40 41 392 2041 46 2050 46 2051 58 2049 61 91 2052 46 2053 40 41 385 2052 398 2049 93 385 2031 398 2054 46 2055 40 2000 46 2003 44 2024 46 2025 41 58 2056 61 2045 40 2031 46 2033 46 2057 41 392 2041 46 2050 46 2051 58 2056 61 2056 46 2053 40 41 392 2056 398 2049 58 2043 46 2044 40 2031 41 2049 46 2058 40 2056 41 2041 46 2059 40 41 348 2060 40 2024 44 2031 41 58 497 2041 46 2061 40 41 311 2061 58 2062 61 123 2063 91 1500 93 58 40 2041 46 2046 46 2064 40 2063 91 1501 93 44 2063 41 44 2063 41 385 2063 398 2041 46 2046 46 2065 40 2061 44 2031 46 2033 46 2057 44 41 125 621 385 2066 44 40 2067 44 2068 41 398 2062 46 2069 40 41 58 392 2070 40 2067 44 2071 41 58 2062 91 2066 93 61 40 2067 91 1500 93 44 2068 41 450 2062 348 2072 40 2024 44 2073 41 58 497 2041 46 2061 40 41 311 2061 58 450 2041 46 2046 46 2074 40 2061 44 2073 41 348 2075 40 2024 44 2073 41 58 648 497 2041 46 2061 40 41 311 2061 58 450 91 2076 91 648 93 91 1500 93 385 2076 398 2041 46 2046 46 2077 40 2061 44 2073 41 46 2078 40 41 392 2076 91 648 93 308 2079 40 2076 91 648 93 41 614 1501 93 348 2080 40 2024 44 2073 41 58 497 2041 46 2061 40 41 311 2061 58 450 91 2076 91 648 93 91 1500 93 385 2076 398 2041 46 2046 46 2077 40 2061 44 2073 41 46 2078 40 41 392 2076 91 648 93 308 2079 40 2076 91 648 93 41 614 1501 93 348 2077 40 2024 44 2073 41 58 648 497 2041 46 2061 40 41 311 2061 58 450 2041 46 2046 46 2077 40 2061 44 2073 41 348 2081 40 2024 44 2031 44 2082 41 58 2083 61 2024 46 2077 40 2031 46 2033 46 2057 41 2084 61 91 93 385 2066 44 2085 398 2083 46 2069 40 41 58 392 2085 91 648 93 614 91 2082 93 58 2084 46 2086 40 2066 41 450 2087 40 2084 41 348 2088 40 2024 44 2042 44 2031 44 2089 44 2090 44 2091 44 2092 61 303 41 58 497 2041 46 2061 40 41 311 2061 58 2042 46 2093 40 2031 44 2089 41 2061 46 2094 40 648 46 2095 40 2090 44 2031 46 2033 46 2057 41 41 2096 61 2061 46 2097 40 41 91 1500 93 91 1500 93 392 2092 308 2067 40 2096 41 631 2067 40 2091 41 58 2096 61 2092 40 2096 41 2024 46 2098 40 2096 44 2091 41 348 2099 40 2024 44 2073 44 2100 44 2101 41 58 648 497 2041 46 2061 40 41 311 2061 58 2083 61 2041 46 2046 46 2077 40 2061 44 2073 41 2102 61 123 648 58 1500 44 648 58 1500 44 648 58 1500 125 385 2076 398 2083 46 2078 40 41 58 392 2076 91 648 93 614 91 2100 93 58 392 2076 91 648 93 614 2101 58 2102 91 648 93 636 1501 392 2076 91 648 93 58 2102 91 648 93 636 1501 359 2076 91 648 93 58 2102 91 648 93 636 1501 450 2102 348 2103 40 2024 44 2073 44 2100 41 58 497 2041 46 2061 40 41 311 2061 58 450 2104 40 2105 46 2106 385 2105 398 2041 46 2046 46 2065 40 2061 44 2073 41 392 2105 46 2066 614 2100 41 348 2107 40 2024 44 2073 44 2108 44 2109 41 58 2083 61 2024 46 2077 40 2073 41 2024 46 2110 40 2108 44 2083 41 2111 61 2083 91 2108 93 91 648 93 2024 46 2112 40 2113 40 2114 614 2115 385 2114 44 2115 398 2116 40 2111 44 2109 41 41 41 348 2117 40 2024 44 2031 44 2100 44 2118 44 2089 61 648 41 58 648 2083 61 2024 46 2077 40 2031 46 2033 46 2057 41 2119 61 303 385 2085 398 2083 46 2078 40 41 58 392 2085 91 648 93 614 91 2100 93 308 2085 91 648 93 58 2119 61 2085 91 648 93 325 2024 46 2098 40 2119 44 40 2118 44 2089 41 41 348 2120 40 2024 44 2031 44 2100 44 2118 41 58 497 2024 46 2121 40 2122 41 58 2024 46 2117 40 2031 44 2100 44 2118 41 621 348 2123 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 621 2043 46 2124 40 2004 41 621 411 40 2004 46 2125 46 2113 40 41 41 621 2043 46 2044 40 2004 41 621 2024 46 2098 40 2043 46 2126 44 91 93 41 621 497 2024 46 2121 40 2127 41 58 411 40 2004 46 2125 46 2113 40 41 41 64 2128 40 648 41 348 2129 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2009 41 2043 46 2124 40 2004 41 2043 46 2124 40 2017 41 621 411 40 2004 46 2125 46 2113 40 41 41 411 40 2009 46 2125 46 2113 40 41 41 621 497 2024 46 2121 40 2130 41 58 2009 46 2125 46 2131 40 2132 61 1501 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 44 41 621 2137 61 2009 46 2033 46 2138 40 648 41 2139 61 2140 40 2017 44 2141 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 2024 46 2117 40 2009 44 648 44 648 41 64 2128 40 648 41 348 2145 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2043 46 2124 40 2016 41 2024 46 2120 40 2016 44 648 44 648 41 621 497 2041 46 2042 40 41 311 2043 58 2139 61 2140 40 2009 44 2141 41 2139 46 2142 40 648 41 2043 46 2093 40 2016 44 2139 41 2024 46 2117 40 2016 44 648 44 648 41 621 621 2024 46 2146 40 91 2147 385 2147 398 40 2148 40 2149 41 385 2149 398 2043 46 2126 41 392 2147 46 2150 40 648 41 308 648 398 2147 93 41 64 2128 40 648 41 348 2151 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2015 41 621 2139 61 2140 40 2015 44 2141 44 2152 61 648 44 424 61 304 41 2139 46 2142 40 648 41 2153 61 2015 46 2125 46 2131 40 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2015 44 2139 41 2043 46 2094 40 648 44 91 2153 46 2154 93 41 2155 61 40 2024 46 2110 392 2041 46 2050 46 2156 360 2024 46 2157 41 2155 40 648 44 2024 46 2075 40 2015 46 2033 46 2057 41 41 64 2128 40 648 44 648 44 41 64 2158 40 648 41 348 2159 40 2024 41 58 334 2015 40 2160 41 58 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2015 41 621 621 2139 61 2140 40 2015 44 2141 44 2152 61 648 44 424 61 304 41 2139 46 2142 40 648 41 2153 61 2015 46 2125 46 2131 40 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2015 44 2139 41 2015 46 2033 46 2093 40 2139 41 2043 46 2094 40 648 44 91 2153 46 2154 93 41 2043 46 2163 40 2015 44 2164 40 2165 61 91 648 93 44 2066 61 648 41 41 2024 46 2110 40 648 44 2024 46 2075 40 2015 46 2033 46 2057 41 41 64 2128 40 648 41 348 2166 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2005 41 621 2137 61 2005 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2141 44 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2005 44 2137 44 2139 44 2144 61 304 41 2024 46 2117 40 2005 44 648 44 648 41 64 2128 40 648 41 64 2128 40 648 41 348 2168 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2006 41 621 2137 61 2006 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2141 44 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2006 44 2137 44 2139 44 2144 61 304 41 2024 46 2117 40 2006 44 648 44 648 41 64 2158 40 648 41 348 2169 40 2024 41 58 334 2170 40 2160 41 58 2171 61 2172 40 2173 61 1504 44 2174 61 304 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2024 46 2026 61 91 2170 93 2137 61 2170 46 2033 46 2138 40 648 41 2139 61 2175 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2170 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2170 44 2137 44 2139 44 2144 61 304 41 64 2128 40 648 41 348 2176 40 2024 41 58 648 334 2177 40 2004 41 58 334 2161 58 2162 61 648 2178 61 2029 2179 61 304 334 2180 40 2160 41 58 2181 61 2140 40 2177 44 2182 61 2141 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2177 44 2180 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2180 41 2024 46 2117 40 2180 44 648 44 648 41 64 2128 40 648 41 348 2183 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 2043 46 2124 40 2004 41 2043 46 2124 40 2010 41 621 411 40 2004 46 2125 46 2113 40 41 41 411 40 2017 46 2125 46 2113 40 41 41 411 40 2010 46 2125 46 2113 40 41 41 2024 46 2120 40 2010 44 648 44 648 41 621 2139 61 2140 40 2017 44 2141 44 2184 61 302 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2024 46 2120 40 2004 44 648 44 648 41 621 2185 61 2140 40 2017 44 2141 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2185 44 2144 61 304 41 2024 46 2117 40 2004 44 648 44 648 41 621 2185 61 2140 40 2017 44 2141 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2185 44 2139 44 2144 61 304 41 2024 46 2120 40 2004 44 648 44 648 41 64 2158 40 648 41 348 2186 40 2024 41 58 648 334 2004 40 2160 41 58 334 2161 58 2162 61 648 334 2010 40 2160 41 58 2181 61 2140 40 2004 44 2141 44 2184 61 302 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2010 41 2024 46 2120 40 2010 44 648 44 648 41 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2187 40 2174 61 304 41 2139 46 2031 61 2004 2139 46 2142 40 648 41 621 621 2024 46 2098 40 2079 40 2139 46 2031 46 2033 46 2188 41 44 1501 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2024 46 2120 40 2010 44 648 44 648 41 348 2189 40 2024 44 2190 41 58 334 2191 40 2160 41 58 2066 61 2172 40 2173 61 1504 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2191 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 2043 46 2124 40 2191 41 621 411 40 2191 46 2125 46 2113 40 41 41 411 40 2017 46 2125 46 2113 40 41 41 621 2139 61 2190 40 2017 44 2152 61 648 44 2184 61 302 41 2139 46 2192 40 2191 44 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2191 44 2139 41 2024 46 2120 40 2139 46 2038 46 2037 44 648 44 648 41 64 2128 40 648 41 348 2193 40 2024 41 58 2024 46 2189 40 2194 41 64 2128 40 648 41 348 2195 40 2024 41 58 2024 46 2189 40 2196 41 64 2128 40 648 41 348 2197 40 2024 41 58 2024 46 2189 40 2198 41 348 2199 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2157 40 648 44 2062 41 621 2139 61 2200 40 424 61 304 41 2139 46 2142 40 648 41 497 2201 40 2041 41 311 2202 44 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2203 61 2043 46 2204 37 123 648 58 2043 46 2205 40 2139 46 2066 41 44 125 2024 46 2146 40 2206 40 2203 398 2207 91 648 93 385 2207 398 2202 46 2208 41 41 621 2024 46 2209 40 2206 40 648 398 2207 91 648 93 385 2207 398 2202 46 2208 41 44 302 41 2024 46 2209 40 2206 40 648 398 2207 91 648 93 385 2207 398 2202 46 2208 41 44 302 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2112 40 2062 91 648 93 91 1501 93 91 1502 93 41 348 2211 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 621 2043 46 2124 40 2017 41 621 2043 46 2212 40 2017 44 2017 46 2033 46 2138 40 648 41 41 2024 46 2098 40 2043 46 2126 44 91 93 41 348 2213 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2157 40 648 44 2062 41 621 2004 46 2125 46 2131 40 2066 61 648 44 2214 61 1503 41 2004 46 2125 46 2131 40 2066 61 648 41 621 2139 61 2172 40 2173 61 1503 44 349 61 648 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2098 40 2062 91 648 93 91 1501 93 91 1502 93 44 2041 46 2050 46 2215 41 348 2216 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2157 40 648 44 2062 41 621 2004 46 2125 46 2131 40 2066 61 648 44 2214 61 1503 41 2004 46 2125 46 2131 40 2066 61 648 41 621 2139 61 2217 40 349 61 302 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2062 61 2024 46 2060 40 2004 41 621 2218 61 2062 91 648 93 91 1500 93 2024 46 2098 40 2218 44 2041 46 2050 46 2210 91 648 93 41 348 2219 40 2024 41 58 648 334 2220 40 2200 41 58 621 348 2221 40 2024 41 58 450 2024 46 349 348 2222 40 2024 44 2223 41 58 392 2223 407 303 58 450 1500 450 2079 40 2223 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2004 46 2125 46 2131 40 2066 61 648 44 2214 61 1503 41 2004 46 2125 46 2131 40 2066 61 648 41 621 2139 61 2220 40 349 61 123 1501 58 1502 125 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 621 2062 61 2024 46 2060 40 2004 41 2218 44 2224 61 2062 91 648 93 2024 46 2098 40 2218 44 2041 46 2050 46 2210 91 648 93 41 621 2024 46 2098 40 2004 46 2125 46 2225 40 2226 61 91 648 93 41 46 2227 40 41 44 1502 41 348 2228 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2139 61 2229 40 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2062 61 2024 46 2060 40 2004 41 621 621 2024 46 2110 40 2062 91 648 93 91 1500 93 44 40 648 44 648 41 41 348 2230 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2139 61 2231 40 349 61 2135 46 2232 40 2233 61 1502 41 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 44 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2237 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2139 61 2238 40 2167 61 304 44 349 61 648 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2062 61 2024 46 2060 40 2004 41 621 2024 46 2098 40 2062 91 648 93 91 1500 93 44 648 41 348 2239 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2098 40 323 40 2062 91 648 93 91 1501 93 91 1502 93 41 44 323 40 2041 46 2050 46 2215 41 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2240 40 424 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 648 41 2024 46 2112 40 2062 91 648 93 91 1501 93 91 1502 93 41 621 2185 61 2240 40 424 61 302 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2185 44 2144 61 304 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 648 41 2024 46 2098 40 323 40 2062 91 648 93 91 1501 93 91 1502 93 41 44 323 40 2041 46 2050 46 2215 41 41 348 2241 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2200 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 621 621 392 422 2041 46 2050 46 2242 58 497 2024 46 2121 40 2127 41 58 2004 46 2125 46 2131 40 41 348 2243 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2172 40 2174 61 304 44 2173 61 1503 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 64 2158 40 648 41 348 2244 40 2024 41 58 334 2170 40 2160 41 58 2171 61 2175 40 2174 61 304 44 2245 61 648 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2024 46 2026 61 91 2170 93 2137 61 2170 46 2033 46 2138 40 648 41 2139 61 2187 40 2174 61 304 41 2139 46 2031 61 2170 2139 46 2245 61 648 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2170 44 2137 44 2139 44 2144 61 304 41 2170 46 2125 46 2131 40 41 348 2246 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2247 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2212 40 2004 44 2004 46 2033 46 2138 40 648 41 41 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 621 2227 61 2024 46 2099 40 2004 46 2033 46 2057 44 2004 46 2033 46 2138 40 648 41 46 2100 44 303 44 41 2024 46 2248 40 2227 91 648 93 44 1501 41 64 2158 40 648 41 348 2249 40 2024 41 58 334 2170 40 2160 41 58 334 2161 58 2162 61 648 2057 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2024 46 2026 61 91 2170 93 2137 61 2170 46 2033 46 2138 40 648 41 2139 61 2187 40 2174 61 304 41 2139 46 2031 61 2170 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2170 44 2137 44 2139 44 2144 61 304 41 2170 46 2125 46 2131 40 41 348 2250 40 2024 41 58 621 621 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2240 40 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 348 2251 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2240 40 2167 61 304 44 349 61 648 44 424 61 302 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 64 2128 40 648 44 648 41 348 2252 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2015 41 2137 61 2015 46 2033 46 2138 40 648 41 2139 61 2140 40 2015 44 2141 41 2139 46 2142 40 648 41 2153 61 2015 46 2125 46 2131 40 41 497 2041 46 2042 40 41 311 2043 58 621 2015 46 2125 46 2253 40 2153 61 2153 41 2043 46 2143 40 2015 44 2137 44 2139 44 2144 61 304 41 348 2254 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2016 46 2125 46 2131 40 2255 61 648 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2256 40 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 621 2062 61 2024 46 2060 40 2016 41 2024 46 2146 40 2062 91 648 93 91 1501 93 91 1502 93 41 348 2257 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2016 46 2125 46 2131 40 2255 61 648 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2258 40 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 621 2062 61 2024 46 2060 40 2016 41 2024 46 2146 40 2062 91 648 93 91 1501 93 91 1502 93 41 348 2259 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2016 46 2125 46 2131 40 2255 61 648 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2260 40 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 621 2062 61 2024 46 2060 40 2016 41 2024 46 2146 40 2062 91 648 93 91 1501 93 91 1502 93 41 64 2261 40 648 41 348 2262 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 497 2024 46 2121 40 2130 41 58 2016 46 2125 46 2131 40 2255 61 303 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1503 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 497 2024 46 2121 40 2130 41 58 2016 46 2125 46 2131 40 2255 61 303 41 64 2128 40 648 41 348 2263 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2062 61 2024 46 2060 40 2004 41 621 2024 46 2112 40 2062 91 648 93 91 1501 93 91 1502 93 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2264 40 424 61 302 44 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2004 41 621 2024 46 2112 40 2062 91 648 93 91 1501 93 91 1502 93 41 348 2265 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2022 41 497 2024 46 2121 40 2130 41 58 2022 46 2125 46 2131 40 2266 61 303 44 2267 61 648 41 2137 61 2022 46 2033 46 2138 40 648 41 2139 61 2268 40 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2022 44 2137 44 2139 44 2144 61 304 41 497 2024 46 2121 40 2130 41 58 2022 46 2125 46 2131 40 2266 61 303 44 2267 61 648 41 348 2269 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2112 40 2062 91 648 93 91 1501 93 91 1502 93 41 621 2004 46 2125 46 2131 40 2066 61 648 44 2214 61 1503 41 2004 46 2125 46 2131 40 2066 61 648 41 621 2024 46 2098 40 2004 46 2125 46 2270 40 2066 61 648 41 46 2214 44 1503 41 2024 46 2271 40 2004 46 2125 46 2270 40 2066 61 648 41 46 2214 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2272 40 349 61 1503 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2004 41 2024 46 2146 40 2062 91 648 93 91 1501 93 91 1502 93 41 621 2024 46 2098 40 2004 46 2125 46 2270 40 2066 61 648 41 46 2214 44 1503 41 2024 46 2098 40 2004 46 2125 46 2270 40 2066 61 648 41 46 2214 44 1503 41 348 2273 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2274 40 2137 41 2139 46 424 61 304 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2275 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2004 46 2125 46 2131 40 2066 61 648 42 1504 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2276 61 648 497 2024 46 2277 40 2278 44 2276 41 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2279 40 2024 41 58 388 2280 46 2281 46 2282 46 2165 397 2283 334 2170 40 2160 41 58 2089 61 2283 40 2172 40 2173 61 1504 41 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2024 46 2026 61 91 2170 93 2137 61 2170 46 2033 46 2138 40 648 41 2139 61 2283 40 2172 40 2173 61 1503 41 41 2139 46 2142 40 648 41 2139 46 2031 61 2170 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2170 44 2137 44 2139 44 2144 61 304 41 64 2158 40 648 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2284 40 2024 41 58 388 2280 46 2281 46 2282 46 2165 397 2283 334 2285 40 2160 41 58 2089 61 2283 40 2172 40 2173 61 1503 41 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2285 41 2024 46 2026 61 91 2285 93 2285 46 2125 46 2131 40 2089 61 91 648 42 1503 93 41 2137 61 2285 46 2033 46 2138 40 648 41 2139 61 2283 40 2172 40 2173 61 1503 41 41 2139 46 2142 40 648 41 2139 46 2031 61 2285 497 2041 46 2042 40 41 311 2043 58 2276 61 648 497 2024 46 2277 40 2278 44 2276 41 58 2043 46 2143 40 2285 44 2137 44 2139 44 2144 61 304 41 64 2158 40 648 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2286 40 2024 41 58 388 2280 46 2281 46 2282 46 2165 397 2283 334 2285 40 2160 41 58 2089 61 2283 40 2283 40 2172 40 2173 61 1503 41 41 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2285 41 2024 46 2026 61 91 2285 93 2285 46 2125 46 2131 40 2089 61 91 91 648 42 1503 93 93 41 2137 61 2285 46 2033 46 2138 40 648 41 2139 61 2283 40 2283 40 2172 40 2173 61 1503 41 41 41 2139 46 2142 40 648 41 2139 46 2031 61 2285 497 2041 46 2042 40 41 311 2043 58 2276 61 648 497 2024 46 2277 40 2278 44 2276 41 58 2043 46 2143 40 2285 44 2137 44 2139 44 2144 61 304 41 348 2287 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 621 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2274 40 2137 41 2139 46 424 61 304 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 348 2288 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2007 41 621 2062 61 2024 46 2060 40 2007 41 2024 46 2112 40 2062 91 648 93 91 1501 93 91 1502 93 41 621 2137 61 2007 46 2033 46 2138 40 648 41 2139 61 2272 40 349 61 1503 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2007 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2007 41 2024 46 2146 40 2062 91 648 93 91 1501 93 91 1502 93 41 64 2128 40 648 41 348 2289 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 621 2062 61 2024 46 2060 40 2009 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2117 40 2009 44 648 44 648 41 621 2137 61 2009 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2141 44 2290 61 302 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2009 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2117 40 2009 44 648 44 648 41 64 2128 40 648 41 348 2291 40 2024 41 58 648 334 2292 40 2160 41 58 2181 61 2200 40 41 2133 61 2172 40 2173 61 1503 44 2293 61 304 41 2134 61 2258 40 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2292 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2292 41 621 2083 61 2024 46 2077 40 2292 46 2033 46 2057 41 385 2085 398 2083 46 2078 40 41 58 392 2085 91 648 93 58 2024 46 2294 40 648 37 2085 91 648 93 41 2137 61 2292 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2141 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2292 44 2137 44 2139 44 2144 61 304 41 2024 46 2117 40 2292 44 648 44 648 41 64 2128 40 648 41 348 2295 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2012 41 621 2062 61 2024 46 2060 40 2012 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 2181 61 2004 46 2125 46 2131 40 2066 61 648 41 2012 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 497 2024 46 2121 40 2130 41 58 2012 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 2012 46 2125 46 2113 40 41 46 353 40 41 2024 46 2117 40 2012 44 648 44 648 41 621 2137 61 2012 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2141 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2012 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2009 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 2009 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 2009 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 2024 46 2117 40 2009 44 648 44 648 41 64 2128 40 648 41 348 2296 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 621 2062 61 2024 46 2060 40 2009 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 2181 61 2004 46 2125 46 2131 40 2066 61 648 41 2009 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 2009 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 2009 46 2125 46 2113 40 41 46 353 40 41 2024 46 2117 40 2009 44 648 44 648 41 621 2137 61 2009 46 2033 46 2138 40 648 41 2139 61 2297 40 2004 44 2141 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2012 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 2012 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 497 2024 46 2121 40 2130 41 58 2012 46 2125 46 2131 40 2181 61 2181 44 2133 61 648 44 2134 61 2135 46 2135 46 2136 40 41 41 2024 46 2117 40 2012 44 648 44 648 41 348 2298 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2299 61 1501 392 2041 46 2050 46 2300 360 1500 2301 61 1501 392 2041 46 2050 46 2156 360 1500 621 2102 61 2024 46 2099 40 2009 46 2033 46 2057 44 2009 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1500 44 648 58 2301 125 44 41 2137 61 2009 46 2033 46 2138 40 648 41 2139 61 2297 40 2004 44 2141 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 2102 61 2024 46 2099 40 2009 46 2033 46 2057 44 2009 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 621 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1501 44 648 58 1500 125 41 348 2302 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2299 61 1501 392 2041 46 2050 46 2300 360 1500 2301 61 1501 392 2041 46 2050 46 2156 360 1500 621 2102 61 2024 46 2099 40 2009 46 2033 46 2057 44 2009 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1500 44 648 58 2301 125 44 41 2137 61 2009 46 2033 46 2138 40 648 41 621 2139 61 2140 40 2004 44 2303 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 2102 61 2024 46 2099 40 2009 46 2033 46 2057 44 2009 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 621 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1500 44 648 58 2301 125 44 41 348 2304 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2012 41 2299 61 1501 392 2041 46 2050 46 2300 360 1500 621 2102 61 2024 46 2099 40 2012 46 2033 46 2057 44 2012 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1501 44 648 58 1500 125 41 2137 61 2012 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2141 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2012 44 2137 44 2139 44 2144 61 304 41 2102 61 2024 46 2099 40 2012 46 2033 46 2057 44 2012 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 621 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1500 44 648 58 1501 125 41 348 2305 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2012 41 2299 61 1501 392 2041 46 2050 46 2300 360 1500 621 2102 61 2024 46 2099 40 2012 46 2033 46 2057 44 2012 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1501 44 648 58 1500 125 41 2137 61 2012 46 2033 46 2138 40 648 41 621 2139 61 2297 40 2004 44 2303 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2012 44 2137 44 2139 44 2144 61 304 41 2102 61 2024 46 2099 40 2012 46 2033 46 2057 44 2012 46 2033 46 2138 40 648 41 46 2100 44 40 2004 46 2033 46 2057 44 2004 46 2033 46 2154 46 2100 41 44 41 621 2024 46 2098 40 2102 44 123 648 58 2299 44 648 58 1501 44 648 58 1500 125 41 64 2128 40 648 41 348 2306 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2307 61 2004 46 2033 46 2057 497 2041 46 2042 40 41 311 2043 58 2043 46 2308 40 2004 44 2307 44 2307 46 2309 40 41 41 348 2310 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2175 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 621 621 2004 46 2125 46 2131 40 2066 61 648 41 2004 46 2125 46 2131 40 2066 61 648 41 348 2311 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2187 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2004 46 2125 46 2131 40 2066 61 648 44 2154 61 1501 41 497 2041 46 2061 40 41 311 2061 58 2312 61 2041 46 2313 46 2314 40 2315 40 41 44 91 2004 93 41 392 2312 58 2061 46 2094 40 2312 91 1500 93 41 621 2024 46 2316 40 2004 46 2125 46 2131 40 2066 61 648 41 41 348 2317 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2318 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2004 46 2125 46 2131 40 2066 61 648 44 2154 61 1501 41 497 2041 46 2061 40 41 311 2061 58 2312 61 2041 46 2313 46 2314 40 2315 40 41 44 91 2004 93 41 392 2312 58 2061 46 2094 40 2312 91 1500 93 41 621 2024 46 2316 40 2004 46 2125 46 2131 40 2066 61 648 41 41 348 2319 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2014 41 2137 61 2014 46 2033 46 2138 40 648 41 2139 61 2175 40 2174 61 304 41 2139 46 2031 61 2014 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2014 44 2137 44 2139 44 2144 61 304 41 621 334 2320 40 2160 41 58 2321 61 2175 40 2174 61 304 41 2322 61 2200 40 2323 61 304 41 334 2161 58 2162 61 648 2178 61 2029 2057 61 2014 46 2033 46 2057 621 2324 61 2320 46 2125 46 2131 40 2322 61 1501 41 2024 46 2316 40 2324 46 2321 41 348 2325 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2014 41 2137 61 2014 46 2033 46 2138 40 648 41 2139 61 2187 40 2174 61 304 41 2139 46 2031 61 2014 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2014 44 2137 44 2139 44 2144 61 304 41 621 334 2326 40 2160 41 58 2321 61 2187 40 2174 61 304 41 2322 61 2200 40 2323 61 304 41 334 2161 58 2162 61 648 2178 61 2029 2057 61 2014 46 2033 46 2057 621 2324 61 2326 46 2125 46 2131 40 2322 61 1501 41 2024 46 2316 40 2324 46 2321 41 64 2158 40 648 41 348 2327 40 2024 41 58 648 334 2328 40 2160 41 58 2321 61 2329 40 2174 61 304 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2328 41 2024 46 2026 61 91 2328 93 2137 61 2328 46 2033 46 2138 40 648 41 2139 61 2318 40 2174 61 304 41 2139 46 2031 61 2328 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2328 44 2137 44 2139 44 2144 61 304 41 348 2330 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2014 41 621 2137 61 2014 46 2033 46 2138 40 648 41 2139 61 2200 40 2323 61 304 41 2139 46 2031 61 2014 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2014 44 2137 44 2139 44 2144 61 304 41 621 621 2024 46 2110 40 2024 46 2072 40 2014 46 2033 46 2057 41 44 40 648 44 303 41 41 621 621 621 621 334 2331 40 2160 41 58 2321 61 2200 40 2323 61 304 41 2322 61 2200 40 2323 61 304 41 334 2161 58 2162 61 648 2178 61 2029 2057 61 648 621 2137 61 2331 46 2033 46 2138 40 648 41 2139 61 2200 40 2174 61 304 41 2139 46 2031 61 2331 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2331 44 2137 44 2139 44 2144 61 304 41 621 334 2332 40 2160 41 58 2321 61 2200 40 2323 61 304 41 2322 61 2200 40 2174 61 304 41 334 2161 58 2162 61 648 2178 61 2029 2057 61 648 621 2332 46 2125 46 2131 40 2321 61 1501 44 2322 61 1501 41 497 2024 46 2121 40 2130 41 58 2332 46 2125 46 2131 40 2321 61 1501 44 2322 61 1502 41 348 2333 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2157 40 648 44 2062 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2157 40 648 44 2062 41 64 2158 40 648 41 348 2334 40 2024 41 58 334 2004 40 2160 41 58 2066 61 2172 40 2173 61 1504 44 2323 61 304 41 334 2161 58 2162 61 648 334 2009 40 2160 41 58 2181 61 2140 40 2004 44 2141 44 2335 61 648 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2139 61 2172 40 2173 61 1504 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 2336 61 2041 46 2050 46 2337 41 311 2043 58 2043 46 2143 40 2004 44 2004 46 2033 46 2138 40 648 41 44 2139 41 621 2024 46 2117 40 2009 44 648 44 648 44 648 41 64 2261 40 648 41 348 2338 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 497 2024 46 2121 40 2130 41 58 2016 46 2125 46 2131 40 2255 61 303 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2240 40 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2016 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 648 41 2024 46 2157 40 648 44 2062 41 497 2024 46 2121 40 2130 41 58 2339 46 2125 46 2131 40 2340 61 303 41 348 2341 40 2024 44 2190 41 58 648 334 2342 40 2160 41 58 2181 61 2140 40 2004 44 2141 41 2133 61 2172 40 2173 61 1503 44 2293 61 304 41 2134 61 2258 40 41 2343 61 2190 40 648 44 2152 61 648 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2342 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2019 41 2043 46 2124 40 2342 41 621 2062 61 2024 46 2060 40 2342 46 2033 46 2138 40 648 41 46 2038 46 2037 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 348 2344 40 2024 41 58 2024 46 2341 40 2194 41 348 2345 40 2024 41 58 2024 46 2341 40 2196 41 348 2346 40 2024 41 58 2024 46 2341 40 2198 41 348 2347 40 2024 44 2190 41 58 648 334 2348 40 2160 41 58 2349 61 2140 40 648 44 2141 41 2350 61 2140 40 648 44 2141 41 334 2161 58 2162 61 648 2178 61 2029 334 2351 40 2160 41 58 2343 61 2190 40 648 44 2152 61 648 44 2037 61 2348 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2348 44 2351 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2348 41 2043 46 2124 40 2019 41 2043 46 2124 40 2351 41 621 2062 61 2024 46 2060 40 2348 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 348 2352 40 2024 41 58 2024 46 2347 40 2194 41 348 2353 40 2024 41 58 2024 46 2347 40 2196 41 348 2354 40 2024 41 58 2024 46 2347 40 2198 41 348 2355 40 2024 44 2190 41 58 648 334 2191 40 2160 41 58 2066 61 2172 40 2173 61 1504 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2191 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2191 41 2043 46 2124 40 2019 41 621 2139 61 2190 40 648 44 2152 61 648 41 2139 46 2192 40 2191 44 648 41 621 497 2024 46 2121 40 2127 41 58 2024 46 2060 40 2139 46 2038 46 2037 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2191 44 2139 41 621 2062 61 2024 46 2060 40 2139 46 2038 46 2037 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2191 44 2139 44 2139 44 2144 61 304 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2212 40 2191 44 2139 41 621 497 2024 46 2121 40 2127 41 58 2024 46 2060 40 2139 46 2038 46 2037 41 621 621 2356 61 2191 46 2033 2356 46 2357 46 2058 40 2139 41 351 2029 46 2035 91 648 93 91 2139 46 2038 46 2037 46 2033 46 2040 93 2356 46 2034 40 41 348 2358 40 2024 41 58 2024 46 2355 40 2194 41 348 2359 40 2024 41 58 2024 46 2355 40 2196 41 348 2360 40 2024 41 58 2024 46 2355 40 2198 41 348 2361 40 2024 44 2190 41 58 648 334 2362 40 2160 41 58 2181 61 2140 40 648 44 2141 41 2350 61 2140 40 648 44 2141 41 334 2161 58 2162 61 648 2178 61 2029 334 2363 40 2160 41 58 2066 61 2172 40 2173 61 1504 41 2343 61 2190 40 648 44 2152 61 648 44 2037 61 2362 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2362 44 2363 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2362 41 2043 46 2124 40 2363 41 2043 46 2124 40 2019 41 621 2024 46 2098 40 2079 40 2024 46 2060 40 2362 41 41 44 1502 41 621 2137 61 2363 46 2033 46 2138 40 648 41 2139 61 2190 40 648 44 2152 61 648 44 2037 61 2362 41 2139 46 2192 40 2363 44 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2363 44 2137 44 2139 44 2144 61 304 41 621 2024 46 2098 40 2079 40 2024 46 2060 40 2362 41 41 44 1502 41 348 2364 40 2024 41 58 2024 46 2361 40 2194 41 348 2365 40 2024 41 58 2024 46 2361 40 2196 41 348 2366 40 2024 41 58 2024 46 2361 40 2198 41 348 2367 40 2024 44 2190 41 58 648 334 2342 40 2160 41 58 2181 61 2140 40 2004 44 2141 41 2133 61 2172 40 2173 61 1503 44 2293 61 304 41 2134 61 2258 40 41 2343 61 2190 40 648 44 2152 61 648 41 334 2161 58 2162 61 648 2178 61 2029 2024 46 2025 61 91 2342 93 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2342 41 2043 46 2124 40 2019 41 2043 46 2124 40 2022 41 621 392 2041 46 2050 46 2300 58 2024 46 2117 40 2342 46 2033 46 2138 40 648 41 46 2038 46 2037 44 648 44 648 44 41 621 2137 61 2342 46 2033 46 2138 40 648 41 2139 61 2190 40 2022 41 2139 46 2192 40 2342 44 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2342 44 2137 44 2139 44 2144 61 304 41 621 497 2024 46 2121 40 2127 41 58 2024 46 2060 40 2342 46 2033 46 2138 40 648 41 46 2038 46 2037 41 621 2356 61 2342 46 2033 2356 46 2357 46 2058 40 2137 41 621 392 2041 46 2050 46 2300 58 2024 46 2117 40 2139 46 2038 46 2037 44 648 44 648 41 348 2368 40 2024 41 58 2024 46 2367 40 2194 41 348 2369 40 2024 41 58 2024 46 2367 40 2196 41 348 2370 40 2024 41 58 2024 46 2367 40 2198 41 64 2158 40 648 41 348 2371 40 2024 41 58 334 2372 40 2160 41 58 2133 61 2172 40 2173 61 1504 41 334 2161 58 2162 61 648 334 2373 40 2160 41 58 2343 61 2194 40 2372 41 334 2161 58 2162 61 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2373 41 2043 46 2124 40 2372 41 2024 46 2026 61 91 2373 44 2372 93 621 2024 46 2098 40 2079 40 2024 46 2060 40 2373 41 41 44 1501 41 621 2137 61 2372 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 41 2139 46 2192 40 2372 44 648 41 621 621 2024 46 2098 40 2079 40 2139 46 2031 46 2033 46 2188 41 44 1501 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2372 44 2137 44 2139 44 2144 61 304 41 621 2024 46 2098 40 2079 40 2024 46 2060 40 2373 41 41 44 1501 41 64 2128 40 648 44 648 41 348 2374 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2083 61 2024 46 2077 40 2004 46 2033 46 2057 41 392 422 2206 40 2085 91 648 93 614 91 648 93 308 2085 91 648 93 385 2085 398 2083 46 2078 40 41 41 58 2024 46 2294 40 648 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2200 40 424 61 304 44 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2083 61 2024 46 2077 40 2004 46 2033 46 2057 41 385 2085 398 2083 46 2078 40 41 58 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 58 2024 46 2294 40 648 41 621 2185 61 2004 46 2033 46 2138 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2185 44 2144 61 304 41 2083 61 2024 46 2077 40 2004 46 2033 46 2057 41 392 422 2206 40 2085 91 648 93 614 91 648 93 308 2085 91 648 93 385 2085 398 2083 46 2078 40 41 41 58 2024 46 2294 40 648 41 64 2128 40 648 44 648 41 64 2158 40 648 41 348 2375 40 2024 41 58 334 2376 40 2160 41 58 2377 61 2231 40 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2376 41 2024 46 2026 61 91 2376 93 2378 61 648 2379 61 2380 40 2381 61 2382 40 2383 61 2135 46 2232 40 2233 61 1502 41 41 44 2066 61 2378 44 41 2376 46 2033 46 2083 61 91 2379 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2376 44 2379 41 2083 61 2024 46 2077 40 2376 46 2033 46 2057 41 2024 46 2110 40 2378 44 2083 41 497 2024 46 2121 40 2130 41 44 2336 40 41 58 2376 46 2125 46 2131 40 2377 61 2135 46 2232 40 2233 61 1502 41 41 2376 46 2125 46 2131 40 2377 61 2135 46 2232 40 2233 61 1502 41 41 64 2128 40 648 44 648 41 348 2385 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2379 61 2380 40 2381 61 2382 40 2386 61 1500 41 44 2066 61 648 41 2387 61 2379 46 2066 2004 46 2033 46 2083 61 91 2379 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 621 2083 61 2024 46 2077 40 2004 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2200 40 424 61 304 44 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2083 61 2024 46 2077 40 2004 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1500 41 621 2185 61 2004 46 2033 46 2138 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2185 44 2144 61 304 41 2083 61 2024 46 2077 40 2004 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 497 2041 46 2042 40 41 311 2043 58 2004 46 2033 46 2083 61 91 93 2043 46 2389 40 2004 44 2379 41 348 2390 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 621 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 497 2024 46 2121 40 2130 41 58 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 2017 46 2125 46 2113 40 41 46 353 40 41 621 2137 61 2017 46 2033 46 2138 40 648 41 2139 61 2264 40 2323 61 302 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2017 44 2137 44 2139 44 2144 61 304 41 621 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 2017 46 2125 46 2113 40 41 46 353 40 41 621 2185 61 2264 40 2323 61 304 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2017 44 2139 44 2185 44 2144 61 304 41 621 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 497 2024 46 2121 40 2130 41 58 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 2017 46 2125 46 2113 40 41 46 353 40 41 621 2391 61 2264 40 2323 61 304 41 2391 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2017 44 2185 44 2391 44 2144 61 304 41 621 2020 46 2125 46 2131 40 2133 61 648 44 2392 61 648 41 497 2024 46 2121 40 2130 41 58 2020 46 2125 46 2131 40 2133 61 648 44 2392 61 648 41 2017 46 2125 46 2113 40 41 46 353 40 41 348 2393 40 2024 41 58 2307 61 2020 46 2033 46 2057 474 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2020 41 2043 46 2308 40 2020 44 2307 44 648 41 2020 46 2033 46 2057 61 648 621 2043 46 2394 40 2020 44 91 93 44 40 40 648 44 648 41 44 41 41 382 58 2020 46 2033 46 2057 61 2307 64 2158 40 648 41 64 2128 40 648 41 348 2395 40 2024 41 58 648 334 2004 40 2160 41 58 2066 61 2172 40 2173 61 1504 44 2323 61 304 41 334 2161 58 2162 61 648 334 2009 40 2160 41 58 2181 61 2140 40 2004 44 2141 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2139 61 2172 40 2173 61 1504 44 2323 61 304 41 2139 46 2031 61 2004 2139 46 2142 40 648 41 497 2024 46 2396 40 648 44 648 41 311 2397 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2004 46 2033 46 2138 40 648 41 44 2139 41 621 2024 46 2098 40 2079 40 2397 46 2398 41 44 1501 41 64 2158 40 648 41 348 2399 40 2024 41 58 648 334 2017 40 2160 41 58 2133 61 2172 40 2173 61 1504 41 2267 61 2264 40 2323 61 304 41 334 2161 58 2162 61 648 334 2009 40 2160 41 58 2343 61 2194 40 2017 44 2152 61 648 41 334 2161 58 2162 61 648 2024 46 2026 61 91 2009 46 2033 46 2138 40 648 41 46 2038 46 2037 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 2043 46 2124 40 2009 41 2139 61 2264 40 2173 61 1503 44 2323 61 304 41 2139 46 2031 61 2017 2139 46 2142 40 648 41 497 2024 46 2396 40 648 44 648 41 311 2397 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2017 44 2017 46 2033 46 2138 40 648 41 44 2139 41 621 2024 46 2098 40 2079 40 2397 46 2398 41 44 1501 41 621 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 497 2024 46 2121 40 2130 41 58 2017 46 2125 46 2131 40 2133 61 648 44 2267 61 648 41 64 2128 40 648 41 348 2400 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2401 41 621 2379 61 2402 40 2165 61 91 648 93 44 2066 61 648 41 2387 61 2379 46 2066 2401 46 2033 46 2083 61 91 2379 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2401 44 2379 41 621 2083 61 2024 46 2077 40 2401 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 2137 61 2401 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2401 44 2137 44 2139 44 2144 61 304 41 2083 61 2024 46 2077 40 2401 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1500 41 621 2185 61 2401 46 2033 46 2138 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2401 44 2139 44 2185 44 2144 61 304 41 2083 61 2024 46 2077 40 2401 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 497 2041 46 2042 40 41 311 2043 58 2401 46 2033 46 2083 61 91 93 2043 46 2389 40 2401 44 2379 41 348 2403 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2022 41 621 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 497 2024 46 2121 40 2130 41 58 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 2022 46 2125 46 2113 40 41 46 353 40 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2022 44 2022 46 2033 46 2404 44 91 93 41 621 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 2022 46 2125 46 2113 40 41 46 353 40 41 621 2185 61 2264 40 2323 61 304 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2022 44 91 93 44 2022 46 2033 46 2404 41 621 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 497 2024 46 2121 40 2130 41 58 2022 46 2125 46 2131 40 2266 61 1505 44 2267 61 648 41 2022 46 2125 46 2113 40 41 46 353 40 41 348 2405 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 621 2024 46 2098 40 2009 46 2033 46 2404 44 40 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2009 44 91 93 44 91 91 648 44 648 93 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2009 44 91 91 648 44 648 93 93 44 91 93 41 348 2406 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2407 41 2139 61 2140 40 2004 44 2141 41 2139 46 2142 40 648 41 2043 46 2093 40 2407 44 2139 41 621 2024 46 2098 40 2009 46 2033 46 2404 44 40 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2009 44 91 93 44 91 91 648 44 648 93 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2009 44 91 91 648 44 648 93 93 44 91 93 41 64 2128 40 648 41 348 2408 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2409 41 621 2379 61 2402 40 2165 61 91 648 44 648 93 44 2066 61 648 41 2387 61 2379 46 2066 2409 46 2033 46 2083 61 91 2379 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2409 44 2379 41 621 2083 61 2024 46 2077 40 2409 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 44 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 2404 61 2409 46 2033 46 2404 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2409 44 2404 44 91 93 41 2083 61 2024 46 2077 40 2409 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 44 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1500 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2394 40 2409 44 91 93 44 2404 41 2083 61 2024 46 2077 40 2409 46 2033 46 2057 41 2024 46 2110 40 2387 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 44 648 93 308 2085 91 648 93 308 2066 631 2387 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 497 2041 46 2042 40 41 311 2043 58 2409 46 2033 46 2083 61 91 93 2043 46 2389 40 2409 44 2379 41 348 2410 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2165 61 91 648 93 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 2147 61 2379 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2024 46 2209 40 2147 46 2412 40 2073 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2004 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2414 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2415 40 648 41 46 2068 40 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 2147 61 2379 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2379 46 2066 44 91 648 93 41 2024 46 2110 40 2379 46 2066 44 2083 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2004 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2417 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2013 41 2379 61 2402 40 2415 40 648 41 44 2418 40 648 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2013 44 2379 41 2147 61 2379 46 2411 40 2013 44 2043 41 2073 61 2013 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 2024 46 2110 40 2379 46 2066 44 2083 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2147 61 2148 40 2147 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2147 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2147 41 2024 46 2419 40 2147 46 2108 40 648 41 44 2147 46 2108 40 648 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2013 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2420 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2421 40 648 41 46 2068 40 41 44 648 44 2418 40 648 41 46 2422 40 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 2147 61 2379 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2379 46 2066 44 91 648 44 648 44 648 93 41 2083 61 2024 46 2077 40 2073 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 2024 46 2098 40 2079 40 2083 91 2379 46 2066 93 91 648 93 41 44 1502 41 2024 46 2098 40 2083 91 2379 46 2066 93 91 648 93 91 1501 93 44 648 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2004 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 44 648 41 348 2423 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2415 40 648 41 44 2066 61 648 44 2424 61 2382 40 2425 61 302 41 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 2147 61 2379 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 2024 46 2110 40 2379 46 2066 44 2083 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2004 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 44 648 41 348 2426 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2415 40 648 41 44 2066 61 648 44 399 61 91 648 44 648 93 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 2147 61 2379 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 2024 46 2110 40 2379 46 2066 44 2083 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 2024 46 2098 40 2083 91 2379 46 2066 93 91 648 93 44 91 303 44 648 44 648 93 44 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 41 2024 46 2110 40 648 37 40 2043 46 2205 40 648 41 44 2043 46 2205 40 648 41 44 41 44 2148 40 2147 41 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2004 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2427 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 497 2428 40 2172 44 2418 41 44 2428 40 2200 44 2429 41 58 2379 61 2402 40 2421 40 648 41 44 2421 40 648 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 2147 61 2379 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 2024 46 2110 40 2379 46 2066 44 2083 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2004 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2430 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2013 41 2379 61 2402 40 2433 40 2421 40 648 41 44 2106 61 2106 41 46 2068 40 41 44 2433 40 648 44 2106 61 2106 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2013 44 2379 41 2147 61 2379 46 2411 40 2013 44 2043 41 2073 61 2013 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 2024 46 2110 40 2379 46 2066 44 2083 41 2024 46 2209 40 2083 91 2379 46 2066 93 91 648 93 44 304 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2379 46 2066 44 91 648 44 648 93 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 2106 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2389 40 2013 44 2379 41 2024 46 2157 40 2379 46 2066 44 2024 46 2077 40 2073 41 41 64 2261 40 648 41 348 2434 40 2024 41 58 621 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2421 40 648 41 44 2066 61 648 41 497 2041 46 2042 40 41 311 2043 44 2024 46 2435 40 1500 41 58 2024 46 2271 40 2043 46 2384 40 2004 44 2379 41 41 2024 46 2271 40 2043 46 2389 40 2004 44 2379 41 41 64 2128 40 648 41 348 2436 40 2024 41 58 2379 61 2402 40 2418 40 648 41 44 2066 61 648 41 2276 61 40 648 648 41 497 2024 46 2277 40 2437 44 2276 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2384 40 2004 44 2379 41 64 2128 40 648 41 348 2438 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2379 61 2402 40 2439 40 41 44 2066 61 648 41 497 2041 46 2042 40 41 311 2043 58 497 2024 46 2121 40 2127 41 58 2043 46 2384 40 2004 44 2379 41 348 2440 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 621 2024 46 2209 40 2206 40 2076 91 648 93 385 2076 398 2024 46 2077 40 648 41 46 2078 40 41 392 2076 91 648 93 614 91 648 44 648 93 41 44 302 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2441 40 2017 44 91 93 44 91 40 648 44 648 41 93 41 621 2024 46 2209 40 2206 40 2076 91 648 93 385 2076 398 2024 46 2077 40 648 41 46 2078 40 41 392 2076 91 648 93 614 91 648 44 648 93 41 44 304 44 41 621 2185 61 2264 40 2323 61 304 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2441 40 2017 44 91 40 648 44 648 41 93 44 91 93 41 621 2024 46 2209 40 2206 40 2076 91 648 93 385 2076 398 2024 46 2077 40 648 41 46 2078 40 41 392 2076 91 648 93 614 91 648 44 648 93 41 44 302 44 41 348 2442 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 621 2024 46 2098 40 2009 46 2033 46 2443 44 40 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2441 40 2009 44 91 93 44 91 91 648 44 648 93 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2441 40 2009 44 91 91 648 44 648 93 93 44 91 93 41 348 2444 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2018 41 621 2024 46 2209 40 2206 40 2076 91 648 93 385 2076 398 2024 46 2077 40 648 41 46 2078 40 41 392 2076 91 648 93 614 91 648 44 648 93 41 44 304 44 41 64 2128 40 648 41 348 2445 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2446 41 621 2108 61 2164 40 2165 61 91 648 44 648 93 44 2066 61 648 41 2447 61 2108 46 2066 2446 46 2033 46 2448 61 91 2108 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2446 44 2108 41 621 2083 61 2024 46 2077 40 2446 46 2033 46 2057 41 2024 46 2110 40 2447 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 44 648 93 308 2085 91 648 93 308 2066 631 2447 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 2443 61 2446 46 2033 46 2443 497 2041 46 2042 40 41 311 2043 58 2043 46 2441 40 2446 44 2443 44 91 93 41 2083 61 2024 46 2077 40 2446 46 2033 46 2057 41 2024 46 2110 40 2447 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 44 648 93 308 2085 91 648 93 308 2066 631 2447 93 2024 46 2098 40 2079 40 2388 41 44 1500 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2441 40 2446 44 91 93 44 2443 41 2083 61 2024 46 2077 40 2446 46 2033 46 2057 41 2024 46 2110 40 2447 44 2083 41 2388 61 91 2066 385 2066 44 2085 398 2083 46 2069 40 41 392 2085 91 648 93 614 91 648 44 648 93 308 2085 91 648 93 308 2066 631 2447 93 2024 46 2098 40 2079 40 2388 41 44 1501 41 621 497 2041 46 2042 40 41 311 2043 58 2446 46 2033 46 2448 61 91 93 2043 46 2449 40 2446 44 2108 41 64 2158 40 648 41 348 2450 40 2024 41 58 648 334 2004 40 2160 41 58 2066 61 2172 40 2173 61 1504 41 334 2161 58 2162 61 648 334 2009 40 2160 41 58 2181 61 2140 40 2004 44 2141 41 334 2161 58 2162 61 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 497 2041 46 2042 40 2336 61 2041 46 2050 46 2337 41 311 2043 58 2043 46 2308 40 2004 44 648 44 648 41 2004 46 2033 46 2057 61 648 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 621 2024 46 2117 40 2009 44 648 44 648 41 621 497 2041 46 2042 40 2336 61 2041 46 2050 46 2337 41 311 2043 58 2043 46 2308 40 2004 44 648 44 648 41 621 2004 46 2033 46 2057 61 648 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 41 348 2451 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2024 46 2157 40 648 44 2024 46 2075 40 2004 46 2033 46 2057 41 41 621 2108 61 2164 40 2165 61 91 648 93 44 2066 61 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2024 46 2110 40 648 44 2024 46 2075 40 2004 46 2033 46 2057 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 648 44 2024 46 2075 40 2004 46 2033 46 2057 41 41 348 2452 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2453 41 621 2024 46 2110 40 648 44 2024 46 2075 40 2453 46 2033 46 2057 41 41 621 2108 61 2164 40 2165 61 91 648 93 44 2066 61 648 41 2454 61 2108 46 2066 497 2041 46 2042 40 41 311 2043 58 2455 61 2043 46 2456 40 2052 61 2453 46 2033 46 2057 44 2457 61 40 648 44 41 44 41 474 58 2453 46 2033 46 2448 61 91 2108 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2453 44 2108 41 2458 61 2024 46 2077 40 2453 46 2033 46 2057 41 2024 46 2110 40 2454 44 2458 41 2024 46 2110 40 2455 44 2458 41 621 2137 61 2453 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2453 44 2137 44 2139 44 2144 61 304 41 2459 61 2024 46 2077 40 2453 46 2033 46 2057 41 2024 46 2157 40 2455 44 2459 41 621 2024 46 2110 40 2454 44 2459 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2453 44 2108 41 382 58 2453 46 2033 46 2448 61 91 93 348 2460 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2024 46 2157 40 648 44 2024 46 2075 40 2004 46 2033 46 2057 41 41 2461 61 648 621 2108 61 2164 40 2165 61 91 648 44 648 93 44 2066 61 2461 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2004 46 2033 46 2057 44 2461 44 91 648 44 648 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 348 2462 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 621 2024 46 2110 40 648 44 2024 46 2075 40 2009 46 2033 46 2057 41 44 41 621 2137 61 2009 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1503 44 2293 61 302 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 621 2024 46 2157 40 648 44 2024 46 2075 40 2009 46 2033 46 2057 41 44 41 621 2185 61 2009 46 2033 46 2138 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2009 44 2139 44 2185 44 2144 61 304 41 621 2024 46 2110 40 648 44 2024 46 2075 40 2009 46 2033 46 2057 41 44 41 621 2391 61 2013 46 2033 46 2138 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2009 44 2391 41 2024 46 2110 40 648 44 2024 46 2080 40 2009 46 2033 46 2057 41 44 41 621 2463 61 2172 40 2173 61 1503 44 2323 61 302 41 2463 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2013 44 2391 44 2463 44 2144 61 304 41 2024 46 2157 40 648 44 2024 46 2080 40 2009 46 2033 46 2057 41 44 41 348 2464 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2006 41 621 2465 61 2024 46 2110 392 2041 46 2050 46 2466 360 2024 46 2157 2465 40 648 44 2024 46 2075 40 2006 46 2033 46 2057 41 41 348 2467 40 2024 41 58 2468 61 2469 40 41 2468 46 2470 40 2041 41 450 648 46 2471 40 91 2472 46 2473 385 2472 398 2468 46 2474 93 41 64 2128 40 648 41 348 2475 40 2024 41 58 2108 61 2164 40 2476 40 2421 40 648 41 46 2068 40 41 44 2477 61 304 41 44 2066 61 648 41 2276 61 40 648 37 2024 46 2467 40 41 41 497 2041 46 2042 40 41 311 2043 58 497 2024 46 2277 40 2478 44 2276 41 58 2043 46 2163 40 2004 44 2108 41 64 2128 40 648 41 348 2479 40 2024 41 58 2108 61 2164 40 2415 40 2421 40 648 41 46 2068 40 41 41 44 2066 61 648 41 2276 61 40 648 37 2024 46 2467 40 41 41 497 2041 46 2042 40 41 311 2043 58 497 2024 46 2277 40 2478 44 2276 41 58 2043 46 2163 40 2004 44 2108 41 64 2128 40 648 41 348 2480 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2418 40 648 41 46 2068 40 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2147 61 2108 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2108 46 2066 44 91 648 93 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2481 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 2108 61 2164 40 648 44 2421 40 648 41 46 2068 40 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2017 44 2108 41 2147 61 2108 46 2411 40 2017 44 2043 41 2073 61 2017 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2017 46 2033 46 2057 44 2108 46 2066 44 91 648 44 648 93 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2017 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2482 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 497 2428 40 2172 44 2418 41 44 2428 40 2200 44 2429 41 58 2108 61 2164 40 2421 40 648 41 44 2421 40 648 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2147 61 2108 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2483 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2418 40 648 41 44 2415 40 648 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2147 61 2108 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2147 61 2148 40 2147 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2147 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2147 41 2024 46 2419 40 2147 46 2108 40 648 41 44 2147 46 2108 40 648 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2484 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2108 61 2164 40 2421 40 648 41 46 2068 40 41 44 2418 40 648 41 46 2422 40 41 44 648 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2009 44 2108 41 2147 61 2108 46 2411 40 2009 44 2043 41 2073 61 2009 46 2033 46 2057 2083 61 2024 46 2077 40 2073 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2108 46 2066 44 91 648 44 648 44 648 93 41 2024 46 2098 40 2079 40 2083 91 2108 46 2066 93 91 648 93 41 44 1502 41 2024 46 2098 40 2083 91 2108 46 2066 93 91 648 93 91 1502 93 44 648 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 648 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2009 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 64 2158 40 648 41 348 2485 40 2024 41 58 334 2015 40 2160 41 58 2223 61 2486 40 2487 61 1502 44 2488 61 1502 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2015 41 2108 61 2164 40 2421 40 648 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2015 44 2108 41 2147 61 2108 46 2411 40 2015 44 2043 41 2073 61 2015 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 621 2024 46 2157 40 648 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2015 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2489 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2490 40 648 44 2491 40 41 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2147 61 2108 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2492 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2013 41 2108 61 2164 40 2433 40 2421 40 648 41 44 2106 61 2106 41 46 2068 40 41 44 2433 40 648 44 2106 61 2106 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2013 44 2108 41 2147 61 2108 46 2411 40 2013 44 2043 41 2073 61 2009 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2108 46 2066 44 91 648 44 648 93 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 2106 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2009 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 64 2261 40 648 41 348 2493 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2433 40 2421 40 648 41 46 2068 40 41 44 2106 61 2106 41 44 2066 61 648 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2147 61 2108 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 392 2041 46 2050 46 2416 58 2024 46 2107 40 2073 44 2108 46 2066 44 91 648 93 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2110 40 648 37 2043 46 2205 40 2106 41 44 2148 40 2147 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 41 348 2494 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2421 40 648 41 47 40 2421 40 648 41 43 2495 40 1502 41 41 44 2066 61 648 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 2147 61 2108 46 2411 40 2004 44 2043 41 2073 61 2004 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 621 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 2147 61 2148 40 2147 41 2024 46 2209 40 2147 46 2108 40 2043 46 2205 40 648 41 41 60 2147 46 2108 40 648 41 60 2147 46 2108 40 2043 46 2205 40 648 41 41 60 2147 46 2108 40 648 41 60 2147 46 2108 40 648 41 44 304 44 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2004 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 44 648 41 64 2158 40 648 41 348 2496 40 2024 41 58 334 2497 40 2160 41 58 2089 61 2498 40 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2497 41 2024 46 2026 61 91 2497 93 2108 61 2164 40 648 44 2066 61 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2497 44 2108 41 2147 61 2108 46 2411 40 2497 44 2043 41 2073 61 2497 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2497 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2128 40 648 44 648 41 64 2158 40 648 41 348 2499 40 2024 41 58 334 2497 40 2160 41 58 2089 61 2498 40 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2497 41 2024 46 2026 61 91 2497 93 2108 61 2164 40 2490 40 2500 40 648 44 648 41 44 2200 40 41 41 44 2066 61 648 44 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2497 44 2108 41 2147 61 2108 46 2411 40 2497 44 2043 41 2073 61 2497 46 2033 46 2057 2024 46 2110 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 2024 46 2209 40 2147 46 2413 40 2073 44 648 41 44 304 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2449 40 2497 44 2108 41 2024 46 2157 40 2108 46 2066 44 2024 46 2077 40 2073 41 41 64 2261 40 648 41 348 2501 40 2024 41 58 621 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2421 40 648 41 44 2066 61 648 41 497 2041 46 2042 40 41 311 2043 44 2024 46 2435 40 1500 41 58 2024 46 2271 40 2043 46 2163 40 2004 44 2108 41 41 2024 46 2271 40 2043 46 2449 40 2004 44 2108 41 41 64 2128 40 648 41 348 2502 40 2024 41 58 2108 61 2164 40 2418 40 648 41 44 2066 61 648 41 2276 61 40 648 648 41 497 2024 46 2277 40 2437 44 2276 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2163 40 2004 44 2108 41 64 2128 40 648 41 348 2503 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2108 61 2164 40 2439 40 41 44 2066 61 648 41 497 2041 46 2042 40 41 311 2043 58 497 2024 46 2121 40 2127 41 58 2043 46 2163 40 2004 44 2108 41 348 2504 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 621 2024 46 2098 40 2024 46 2072 40 2017 46 2033 46 2057 41 44 648 41 621 2505 61 2017 46 2033 46 2138 40 648 41 2137 61 2017 46 2033 46 2138 40 648 41 2139 61 2264 40 2174 61 304 41 2139 46 2142 40 648 41 2139 46 2031 61 2017 497 2041 46 2042 40 41 311 2043 58 2043 46 2212 40 2017 44 2505 41 2043 46 2143 40 2017 44 2137 44 2139 41 621 2024 46 2157 40 648 44 2024 46 2075 40 2017 46 2033 46 2057 41 44 41 2024 46 2098 40 2024 46 2072 40 2017 46 2033 46 2057 41 44 648 41 348 2506 40 2024 41 58 648 334 2507 40 2508 41 58 434 474 58 497 2041 46 2042 40 41 58 440 2507 374 2507 58 2024 46 2146 40 2041 46 2509 41 64 2261 40 648 41 348 2510 40 2024 41 58 2511 61 40 648 648 41 497 2336 40 41 44 2041 46 2042 40 41 311 2043 58 497 2024 46 2277 40 2512 44 2511 41 58 2043 46 2094 40 2043 46 2513 37 123 648 58 648 44 648 58 648 125 41 64 2128 40 648 44 648 41 348 2514 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2008 41 2043 46 2124 40 2011 41 621 2082 61 2041 46 2313 46 2205 40 648 41 2082 61 2082 91 1501 58 45 1501 93 46 2053 40 41 621 621 2024 46 2110 40 2082 44 2024 46 2075 40 2011 46 2033 46 2057 41 44 41 64 2128 40 648 41 348 2515 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2008 41 2043 46 2124 40 2011 41 621 2139 61 2140 40 2008 44 2141 44 2152 61 648 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2011 44 2139 41 64 2158 40 648 41 64 2128 40 648 41 348 2516 40 2024 41 58 334 2004 40 2160 41 58 334 2161 58 2057 61 648 2162 61 648 334 2009 40 2160 41 58 2181 61 2140 40 2004 44 2141 41 334 2161 58 2162 61 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 392 2041 46 2236 614 648 58 2024 46 2117 40 2009 44 648 44 648 41 360 58 2024 46 2117 40 2009 44 648 44 648 41 348 2517 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2518 41 2139 61 2519 40 2004 44 2182 61 2141 44 2520 61 91 648 93 44 2521 61 91 648 93 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2518 44 2139 41 348 2522 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 474 58 2043 46 2124 40 2021 41 374 2523 311 2524 58 2024 46 2294 40 648 648 37 2524 41 621 411 40 2021 46 2125 46 2113 40 41 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2044 40 2021 41 621 497 2024 46 2121 40 2127 41 58 411 40 2021 46 2125 46 2113 40 41 41 348 2525 40 2024 41 58 648 348 2138 40 42 2526 44 2527 61 2200 44 638 2528 41 58 2528 91 648 93 61 648 2089 61 2527 40 42 2526 44 638 2528 41 2089 46 2142 40 648 41 450 2089 2031 61 2004 2089 61 2138 40 41 2073 61 2031 46 2033 46 2057 2100 61 2089 46 2100 2047 61 2041 46 2046 46 2047 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2031 41 2043 46 2093 40 2031 44 2089 41 2378 61 648 2529 61 2047 40 2378 41 2043 46 2094 40 2043 46 2530 37 123 648 58 2043 46 2205 40 2073 41 44 648 58 2043 46 2205 40 2378 41 44 648 58 648 44 648 58 2043 46 2205 40 2100 41 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2024 46 2110 40 2529 44 2024 46 2077 40 2031 46 2033 46 2057 41 41 2043 46 2143 40 2031 44 2138 40 2293 61 304 41 44 2089 44 2144 61 304 41 2024 46 2157 40 2529 44 2024 46 2077 40 2031 46 2033 46 2057 41 41 2378 61 648 2529 61 2047 40 2378 41 2043 46 2094 40 2043 46 2531 40 2031 44 91 2089 93 44 2378 41 41 2024 46 2110 40 2529 44 2024 46 2077 40 2031 46 2033 46 2057 41 41 2043 46 2143 40 2031 44 2138 40 2323 61 304 41 44 2089 44 2144 61 304 41 2024 46 2157 40 2529 44 2024 46 2077 40 2031 46 2033 46 2057 41 41 392 2043 46 2532 58 2378 61 648 2529 61 2047 40 2378 41 2043 46 2094 40 2043 46 2532 37 123 648 58 2043 46 2205 40 2073 41 44 648 58 2043 46 2205 40 2378 41 44 648 58 2043 46 2205 40 2100 41 44 648 58 2043 46 2205 40 2073 41 44 648 58 2043 46 2205 40 2031 46 2033 46 2533 46 2100 41 44 648 58 2041 46 2313 46 2534 40 41 44 125 41 2024 46 2110 40 2529 44 2024 46 2077 40 2031 46 2033 46 2057 41 41 2043 46 2143 40 2031 44 2138 40 2004 44 2141 44 2527 61 2140 41 44 2089 44 2144 61 304 41 2024 46 2157 40 2529 44 2024 46 2077 40 2031 46 2033 46 2057 41 41 348 2535 40 2024 41 58 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2157 40 648 44 2062 41 621 2004 46 2125 46 2131 40 2066 61 648 41 621 2139 61 2172 40 2173 61 1503 44 2167 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 621 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 2536 61 2061 46 2097 40 41 91 1500 93 2024 46 2098 40 2536 91 1500 93 44 303 392 2041 46 2050 46 2215 360 648 41 348 2537 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2157 40 648 44 2062 41 621 2004 46 2125 46 2131 40 2066 61 648 41 621 2139 61 2172 40 2173 61 1503 44 2167 61 304 44 349 61 648 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 621 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 2536 61 2061 46 2097 40 41 91 1500 93 2024 46 2098 40 2536 91 1500 93 44 648 41 621 2089 61 2104 40 2105 385 2105 398 2041 46 2046 46 2065 40 2061 44 648 41 392 2105 46 2066 614 648 41 392 2041 46 2050 46 2538 58 2024 46 2271 40 2089 46 349 41 348 2539 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2139 61 2172 40 2173 61 1503 44 2167 61 304 44 424 61 304 44 349 61 648 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2004 46 2125 46 2131 40 2066 61 648 41 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 2536 61 2061 46 2097 40 41 91 1500 93 2024 46 2271 40 2536 91 1500 93 41 2089 61 2104 40 2105 385 2105 398 2041 46 2046 46 2065 40 2061 44 648 44 41 392 2105 46 2066 614 648 41 621 2024 46 2112 40 2089 46 2540 41 621 392 2041 46 2050 46 2538 58 2024 46 2110 40 2089 46 349 44 91 648 44 303 93 41 348 2541 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2139 61 2240 40 2167 61 304 44 424 61 304 44 349 61 648 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2004 46 2125 46 2131 40 2066 61 648 41 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 2536 61 2061 46 2097 40 41 91 1500 93 2024 46 2271 40 2536 91 1500 93 41 2089 61 2104 40 2105 385 2105 398 2041 46 2046 46 2065 40 2061 44 648 44 41 392 2105 46 2066 614 648 41 621 2024 46 2112 40 2089 46 2540 41 621 392 2041 46 2050 46 2538 58 2024 46 2110 40 2089 46 349 44 91 648 44 303 93 41 348 2542 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2004 46 2125 46 2131 40 2066 61 648 41 2024 46 2271 40 2004 46 2125 46 2270 40 41 46 2214 41 2137 61 2004 46 2033 46 2138 40 648 41 621 2139 61 2200 40 2167 61 304 44 349 61 1503 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2004 46 2125 46 2270 40 41 46 2214 44 1503 41 621 497 2041 46 2061 40 41 311 2061 58 2089 61 2104 40 2105 385 2105 398 2041 46 2046 46 2065 40 2061 44 648 41 392 2105 46 2066 614 648 41 392 2041 46 2050 46 2538 58 2024 46 2271 40 2089 46 349 41 348 2543 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2007 41 2137 61 2007 46 2033 46 2138 40 648 41 2544 61 2137 46 349 42 1502 2139 61 2272 40 424 61 304 44 2167 61 304 44 349 61 2544 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 44 2024 46 2435 40 1500 41 58 2043 46 2143 40 2007 44 2137 44 2139 44 2144 61 304 41 64 2128 40 648 41 348 2545 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2137 61 2009 46 2033 46 2138 40 648 41 2139 61 2140 40 2004 44 2167 61 304 44 2290 61 302 44 2546 61 123 648 58 648 125 44 2547 61 648 44 2548 61 123 648 58 648 125 44 2182 61 2303 44 2152 61 648 44 2549 61 648 44 2550 61 91 409 2551 58 2551 93 44 2552 61 648 44 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 44 2024 46 2435 40 1500 41 58 2043 46 2143 40 2009 44 2137 44 2139 44 2144 61 304 41 497 2041 46 2042 40 41 311 2043 44 2024 46 2435 40 1500 41 58 2043 46 2143 40 2009 44 2139 44 2137 44 2144 61 304 41 348 2553 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2004 46 2125 46 2131 40 2066 61 648 41 621 2139 61 2240 40 349 61 123 125 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2554 40 2024 41 58 2089 61 2172 40 2173 61 1504 44 2293 61 304 41 2089 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2093 40 2004 44 2089 41 621 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 648 44 648 93 44 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2555 40 2024 41 58 2089 61 2172 40 2173 61 1504 44 2323 61 304 41 2089 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2093 40 2004 44 2089 41 621 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 648 44 648 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2556 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 93 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 44 2293 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 648 44 648 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2137 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2557 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 93 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 648 44 648 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2137 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2558 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2024 46 2098 40 2024 46 2081 40 2016 44 648 41 44 91 93 41 621 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2240 40 2293 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2016 44 648 41 44 91 648 44 648 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2139 44 2137 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2016 44 648 41 44 91 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2559 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2407 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 621 2137 61 2407 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1503 44 2293 61 304 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2407 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 621 2185 61 2172 40 2173 61 1503 44 2293 61 304 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2407 44 2139 44 2185 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2560 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2407 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 621 2137 61 2407 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1503 44 2293 61 304 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2407 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 621 2185 61 2172 40 2173 61 1503 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2407 44 2139 44 2185 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2561 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2407 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 621 2137 61 2407 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1503 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2407 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 621 2185 61 2172 40 2173 61 1503 44 2293 61 304 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2407 44 2139 44 2185 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2407 44 648 41 44 91 648 44 648 93 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2562 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2017 41 2024 46 2098 40 2024 46 2081 40 2017 44 648 41 44 91 648 44 648 93 41 621 2137 61 2017 46 2033 46 2138 40 648 41 2139 61 2264 40 2293 61 304 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2017 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2017 44 648 41 44 91 648 44 648 93 41 621 2185 61 2264 40 2323 61 304 41 2185 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2017 44 2139 44 2185 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2017 44 648 41 44 91 648 44 648 93 41 348 2563 40 2024 41 58 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 93 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2200 40 424 61 304 44 2293 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 648 93 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2137 44 2144 61 304 41 2024 46 2098 40 2024 46 2081 40 2004 44 648 41 44 91 93 41 348 2564 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2015 41 2137 61 2015 46 2033 46 2138 40 648 41 2139 61 2175 40 2174 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2015 44 2137 44 2139 44 2144 61 304 41 2024 46 2117 40 2015 44 648 44 2015 46 2033 46 2057 41 64 2565 46 2566 40 648 41 64 2565 46 2566 40 648 41 348 2567 40 2024 44 2568 44 2569 41 58 648 2136 61 2135 46 2135 40 2570 61 1501 44 2571 61 1501 44 2266 61 1505 44 2572 61 1501 44 2573 61 1501 41 2574 61 2135 46 2135 40 2570 61 1501 44 2571 61 1501 44 2266 61 1505 44 2572 61 1501 44 2573 61 1501 44 2575 61 2576 46 2577 41 2568 46 2136 61 2565 46 2578 40 2579 61 2136 41 2569 46 2136 61 2565 46 2578 40 2579 61 2574 41 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2062 61 2024 46 2060 40 2004 41 2024 46 2157 40 648 44 2062 41 2024 46 2157 40 648 44 2062 41 2024 46 2157 40 648 44 2062 41 2024 46 2157 40 648 44 2062 41 2024 46 2157 40 648 44 2062 41 2024 46 2157 40 648 44 2062 41 621 2004 46 2125 46 2131 40 2066 61 648 41 621 2580 61 2256 40 2581 61 304 41 2580 46 2142 40 648 41 2024 46 2088 40 2043 44 2004 44 2580 44 648 44 2136 46 2582 40 41 44 2092 61 409 2551 58 2551 46 2582 40 41 44 41 2583 61 2256 40 2584 61 304 41 2583 46 2142 40 648 41 2024 46 2088 40 2043 44 2004 44 2583 44 648 44 2136 46 2582 40 41 44 2092 61 409 2551 58 2551 46 2582 40 41 44 41 2585 61 2258 40 2581 61 304 41 2585 46 2142 40 648 41 2024 46 2088 40 2043 44 2004 44 2585 44 648 44 2136 44 41 2586 61 2258 40 2584 61 304 41 2586 46 2142 40 648 41 2024 46 2088 40 2043 44 2004 44 2586 44 648 44 2136 44 41 2587 61 2260 40 2581 61 304 41 2587 46 2142 40 648 41 2024 46 2088 40 2043 44 2004 44 2587 44 648 44 2136 46 2588 40 41 44 2092 61 409 2551 58 2551 46 2588 40 41 44 41 2589 61 2260 40 2584 61 304 41 2589 46 2142 40 648 41 2024 46 2088 40 2043 44 2004 44 2589 44 648 44 2136 46 2588 40 41 44 2092 61 409 2551 58 2551 46 2588 40 41 44 41 348 2590 40 2024 41 58 648 497 2041 46 2042 40 41 311 2043 58 2591 61 2041 46 2313 46 2591 40 41 428 1504 416 61 648 42 2591 2052 61 648 42 2591 2592 61 648 37 40 416 44 2052 41 2024 46 2098 40 2043 46 2456 40 2052 44 91 93 41 44 2043 46 2456 40 2592 44 91 93 41 44 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2593 40 2024 41 58 2594 61 2041 46 2595 46 2596 40 41 334 2597 40 2160 41 58 2066 61 2172 40 2173 61 1503 41 334 2161 58 2162 61 648 2178 61 2029 2057 61 648 37 2594 334 2598 40 2160 41 58 2066 61 2172 40 2173 61 1503 41 2599 61 2194 40 2597 41 334 2161 58 2162 61 648 2178 61 2029 2057 61 648 37 2594 2024 46 2025 61 91 2597 44 2598 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2597 41 2043 46 2124 40 2598 41 2600 61 2598 46 2125 46 2131 40 2066 61 648 41 2601 61 2597 46 2125 46 2131 40 2066 61 648 41 2600 46 2599 46 2602 40 2601 41 64 2158 40 648 41 64 2234 46 2235 40 2041 46 2236 614 648 44 648 41 348 2603 40 2024 41 58 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 348 2604 40 41 58 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 2024 46 2605 40 2604 41 334 2004 40 2160 41 58 334 2161 58 2162 61 648 334 2009 40 2160 41 58 334 2161 58 2162 61 648 2057 61 648 2181 61 2140 40 2004 44 2141 41 2181 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2043 46 2093 40 2009 44 2181 41 348 2606 40 2024 41 58 2607 61 2041 46 2050 46 2337 497 2041 46 2042 40 2336 61 2607 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2043 46 2308 40 2004 44 648 44 648 41 2043 46 2308 40 2004 44 648 44 648 41 474 58 2024 46 2608 40 2079 40 2043 46 2126 41 44 1500 41 385 2149 398 2043 46 2126 58 2024 46 2209 40 2149 46 2412 40 648 41 44 302 41 2024 46 2209 40 2149 46 2412 40 648 41 44 302 41 382 58 2043 46 2308 40 2004 44 648 44 648 41 2043 46 2308 40 2004 44 648 44 648 41 348 2609 40 2024 41 58 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2043 46 2124 40 2009 41 2610 61 2009 46 2033 46 2138 40 648 41 2611 61 2172 40 2173 61 1503 44 2293 61 304 41 2611 46 2142 40 648 41 2043 46 2143 40 2009 44 2610 44 2611 41 2612 61 2009 46 2033 46 2138 40 648 41 2613 61 2140 40 2004 44 2141 41 2613 46 2142 40 648 41 2043 46 2143 40 2009 44 2612 44 2613 41 2024 46 2608 40 2079 40 2043 46 2126 41 44 1500 41 385 2149 398 2043 46 2126 58 2024 46 2209 40 2149 46 2413 40 648 44 648 41 44 302 41 2024 46 2209 40 2149 46 2413 40 648 44 648 41 44 302 41 64 2158 40 648 41 348 2614 40 2024 41 58 648 334 2170 40 2160 41 58 2089 61 2172 40 2173 61 1504 44 2323 61 304 41 334 2161 58 2162 61 648 334 2615 40 2160 41 58 2616 61 2140 40 2170 44 2141 44 2335 61 648 44 2184 61 302 41 334 2161 58 2162 61 648 2024 46 2026 61 91 2170 44 2615 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2043 46 2124 40 2615 41 2139 61 2172 40 2173 61 1504 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 2336 61 304 41 311 2043 58 2043 46 2143 40 2170 44 2170 46 2033 46 2138 40 648 41 44 2139 41 64 2158 40 648 41 348 2617 40 2024 41 58 648 334 2170 40 2160 41 58 2089 61 2172 40 2173 61 1504 44 2323 61 304 41 334 2161 58 2162 61 648 334 2615 40 2160 41 58 2616 61 2140 40 2170 44 2141 44 2335 61 648 44 2184 61 302 41 334 2161 58 2162 61 648 2024 46 2026 61 91 2170 44 2615 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2043 46 2124 40 2615 41 2139 61 2172 40 2173 61 1504 44 2323 61 304 41 2139 46 2142 40 648 41 497 2041 46 2042 40 2336 61 304 41 311 2043 58 2043 46 2308 40 2170 44 2170 46 2033 46 2057 44 648 41 2170 46 2033 46 2057 61 648 64 2158 40 648 41 64 2128 40 648 41 348 2618 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 334 2170 40 2160 41 58 2089 61 2172 40 2173 61 1504 44 2619 61 2106 41 334 2161 58 2162 61 648 2024 46 2026 61 91 2170 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2024 46 2098 40 2024 46 2103 40 2170 46 2033 46 2057 44 648 41 44 2106 44 41 64 2158 40 648 41 64 2128 40 648 41 348 2620 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 334 2170 40 2160 41 58 2089 61 2240 40 2619 61 2106 41 334 2161 58 2162 61 648 2024 46 2026 61 91 2170 93 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2170 41 2024 46 2098 40 2024 46 2103 40 2170 46 2033 46 2057 44 648 41 44 2106 44 41 64 2128 40 648 41 348 2621 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2139 61 2172 40 2173 61 1504 44 2619 61 2106 41 2139 46 2142 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2093 40 2004 44 2139 41 2062 61 2024 46 2060 40 2004 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 44 41 2024 46 2098 40 2062 91 648 93 91 1501 93 91 1502 93 44 2106 41 64 2128 40 648 41 348 2622 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 2137 61 2004 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 44 2619 61 2106 41 2139 46 2142 40 648 41 2139 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2139 44 2144 61 304 41 2024 46 2098 40 2024 46 2103 40 2004 46 2033 46 2057 44 648 41 44 2106 44 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2139 44 2137 44 2144 61 304 41 2024 46 2271 40 2024 46 2103 40 2004 46 2033 46 2057 44 648 41 41 64 2128 40 648 41 348 2623 40 2024 41 58 2106 61 2041 46 2050 46 2431 46 2270 40 648 41 392 422 2106 58 2024 46 2432 40 648 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2016 41 2137 61 2016 46 2033 46 2138 40 648 41 2139 61 2172 40 2173 61 1504 44 2619 61 2106 41 2139 46 2142 40 648 41 2139 46 2031 61 2016 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2137 44 2139 44 2144 61 304 41 2062 61 2024 46 2060 40 2016 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 2041 46 2050 46 2210 91 648 93 44 41 2024 46 2098 40 2062 91 648 93 91 1501 93 91 1502 93 44 2106 41 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2016 44 2139 44 2137 44 2144 61 304 41 2062 61 2024 46 2060 40 2016 41 2024 46 2098 40 2062 91 648 93 91 1500 93 44 648 41 2024 46 2271 40 2062 91 648 93 91 1501 93 91 1502 93 41 64 2128 40 648 44 648 44 41 348 2624 40 2024 41 58 2625 61 2041 46 2050 46 2431 46 2270 40 648 41 2626 61 2041 46 2050 46 2431 46 2270 40 648 41 474 58 392 2041 46 2236 614 648 58 2625 61 648 359 2041 46 2236 614 648 58 2625 61 648 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 648 648 41 2626 61 648 621 497 2041 46 2042 40 41 311 2043 58 2043 46 2124 40 2004 41 621 2137 61 2004 46 2033 46 2138 40 648 41 2627 61 2172 40 2173 61 1504 44 2619 61 2626 41 2627 46 2142 40 648 41 2627 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2137 44 2627 44 2144 61 304 41 2004 46 2125 46 2131 40 2066 61 648 41 2024 46 2209 40 2004 46 2125 46 2628 40 2066 61 648 41 46 2629 40 41 44 304 41 621 2630 61 2172 40 2173 61 1504 44 2619 61 2625 41 2630 46 2142 40 648 41 2630 46 2031 61 2004 497 2041 46 2042 40 41 311 2043 58 2043 46 2143 40 2004 44 2627 44 2630 44 2144 61 304 41 2024 46 2209 40 2004 46 2125 46 2628 40 2066 61 648 41 46 2629 40 41 44 302 41 382 58 392 2041 46 2236 614 648 58 497 2041 46 2061 40 41 311 2061 58 2061 46 2094 40 648 41 
135115,Python,"class OperationTests(OperationTestBase):
    """"""
    Tests running the operations and making sure they do what they say they do.
    Each test looks at their state changing, and then their database operation -
    both forwards and backwards.
    """"""

    def test_create_model(self):
        """"""
        Tests the CreateModel operation.
        Most other tests use this operation as part of setup, so check failures here first.
        """"""
        operation = migrations.CreateModel(
            ""Pony"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""pink"", models.IntegerField(default=1)),
            ],
        )
        self.assertEqual(operation.describe(), ""Create model Pony"")
        self.assertEqual(operation.migration_name_fragment, 'pony')
        # Test the state alteration
        project_state = ProjectState()
        new_state = project_state.clone()
        operation.state_forwards(""test_crmo"", new_state)
        self.assertEqual(new_state.models[""test_crmo"", ""pony""].name, ""Pony"")
        self.assertEqual(len(new_state.models[""test_crmo"", ""pony""].fields), 2)
        # Test the database alteration
        self.assertTableNotExists(""test_crmo_pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_crmo"", editor, project_state, new_state)
        self.assertTableExists(""test_crmo_pony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_crmo"", editor, new_state, project_state)
        self.assertTableNotExists(""test_crmo_pony"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""CreateModel"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""fields"", ""name""])
        # And default manager not in set
        operation = migrations.CreateModel(""Foo"", fields=[], managers=[(""objects"", models.Manager())])
        definition = operation.deconstruct()
        self.assertNotIn('managers', definition[2])

    def test_create_model_with_duplicate_field_name(self):
        with self.assertRaisesMessage(ValueError, 'Found duplicate value pink in CreateModel fields argument.'):
            migrations.CreateModel(
                ""Pony"",
                [
                    (""id"", models.AutoField(primary_key=True)),
                    (""pink"", models.TextField()),
                    (""pink"", models.IntegerField(default=1)),
                ],
            )

    def test_create_model_with_duplicate_base(self):
        message = 'Found duplicate value test_crmo.pony in CreateModel bases argument.'
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(""test_crmo.Pony"", ""test_crmo.Pony"",),
            )
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(""test_crmo.Pony"", ""test_crmo.pony"",),
            )
        message = 'Found duplicate value migrations.unicodemodel in CreateModel bases argument.'
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(UnicodeModel, UnicodeModel,),
            )
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(UnicodeModel, 'migrations.unicodemodel',),
            )
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(UnicodeModel, 'migrations.UnicodeModel',),
            )
        message = ""Found duplicate value <class 'django.db.models.base.Model'> in CreateModel bases argument.""
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(models.Model, models.Model,),
            )
        message = ""Found duplicate value <class 'migrations.test_operations.Mixin'> in CreateModel bases argument.""
        with self.assertRaisesMessage(ValueError, message):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                bases=(Mixin, Mixin,),
            )

    def test_create_model_with_duplicate_manager_name(self):
        with self.assertRaisesMessage(ValueError, 'Found duplicate value objects in CreateModel managers argument.'):
            migrations.CreateModel(
                ""Pony"",
                fields=[],
                managers=[
                    (""objects"", models.Manager()),
                    (""objects"", models.Manager()),
                ],
            )

    def test_create_model_with_unique_after(self):
        """"""
        Tests the CreateModel operation directly followed by an
        AlterUniqueTogether (bug #22844 - sqlite remake issues)
        """"""
        operation1 = migrations.CreateModel(
            ""Pony"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""pink"", models.IntegerField(default=1)),
            ],
        )
        operation2 = migrations.CreateModel(
            ""Rider"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""number"", models.IntegerField(default=1)),
                (""pony"", models.ForeignKey(""test_crmoua.Pony"", models.CASCADE)),
            ],
        )
        operation3 = migrations.AlterUniqueTogether(
            ""Rider"",
            [
                (""number"", ""pony""),
            ],
        )
        # Test the database alteration
        project_state = ProjectState()
        self.assertTableNotExists(""test_crmoua_pony"")
        self.assertTableNotExists(""test_crmoua_rider"")
        with connection.schema_editor() as editor:
            new_state = project_state.clone()
            operation1.state_forwards(""test_crmoua"", new_state)
            operation1.database_forwards(""test_crmoua"", editor, project_state, new_state)
            project_state, new_state = new_state, new_state.clone()
            operation2.state_forwards(""test_crmoua"", new_state)
            operation2.database_forwards(""test_crmoua"", editor, project_state, new_state)
            project_state, new_state = new_state, new_state.clone()
            operation3.state_forwards(""test_crmoua"", new_state)
            operation3.database_forwards(""test_crmoua"", editor, project_state, new_state)
        self.assertTableExists(""test_crmoua_pony"")
        self.assertTableExists(""test_crmoua_rider"")

    def test_create_model_m2m(self):
        """"""
        Test the creation of a model with a ManyToMany field and the
        auto-created ""through"" model.
        """"""
        project_state = self.set_up_test_model(""test_crmomm"")
        operation = migrations.CreateModel(
            ""Stable"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""ponies"", models.ManyToManyField(""Pony"", related_name=""stables""))
            ]
        )
        # Test the state alteration
        new_state = project_state.clone()
        operation.state_forwards(""test_crmomm"", new_state)
        # Test the database alteration
        self.assertTableNotExists(""test_crmomm_stable_ponies"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_crmomm"", editor, project_state, new_state)
        self.assertTableExists(""test_crmomm_stable"")
        self.assertTableExists(""test_crmomm_stable_ponies"")
        self.assertColumnNotExists(""test_crmomm_stable"", ""ponies"")
        # Make sure the M2M field actually works
        with atomic():
            Pony = new_state.apps.get_model(""test_crmomm"", ""Pony"")
            Stable = new_state.apps.get_model(""test_crmomm"", ""Stable"")
            stable = Stable.objects.create()
            p1 = Pony.objects.create(pink=False, weight=4.55)
            p2 = Pony.objects.create(pink=True, weight=5.43)
            stable.ponies.add(p1, p2)
            self.assertEqual(stable.ponies.count(), 2)
            stable.ponies.all().delete()
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_crmomm"", editor, new_state, project_state)
        self.assertTableNotExists(""test_crmomm_stable"")
        self.assertTableNotExists(""test_crmomm_stable_ponies"")

    def test_create_model_inheritance(self):
        """"""
        Tests the CreateModel operation on a multi-table inheritance setup.
        """"""
        project_state = self.set_up_test_model(""test_crmoih"")
        # Test the state alteration
        operation = migrations.CreateModel(
            ""ShetlandPony"",
            [
                ('pony_ptr', models.OneToOneField(
                    'test_crmoih.Pony',
                    models.CASCADE,
                    auto_created=True,
                    primary_key=True,
                    to_field='id',
                    serialize=False,
                )),
                (""cuteness"", models.IntegerField(default=1)),
            ],
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_crmoih"", new_state)
        self.assertIn((""test_crmoih"", ""shetlandpony""), new_state.models)
        # Test the database alteration
        self.assertTableNotExists(""test_crmoih_shetlandpony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_crmoih"", editor, project_state, new_state)
        self.assertTableExists(""test_crmoih_shetlandpony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_crmoih"", editor, new_state, project_state)
        self.assertTableNotExists(""test_crmoih_shetlandpony"")

    def test_create_proxy_model(self):
        """"""
        CreateModel ignores proxy models.
        """"""
        project_state = self.set_up_test_model(""test_crprmo"")
        # Test the state alteration
        operation = migrations.CreateModel(
            ""ProxyPony"",
            [],
            options={""proxy"": True},
            bases=(""test_crprmo.Pony"",),
        )
        self.assertEqual(operation.describe(), ""Create proxy model ProxyPony"")
        new_state = project_state.clone()
        operation.state_forwards(""test_crprmo"", new_state)
        self.assertIn((""test_crprmo"", ""proxypony""), new_state.models)
        # Test the database alteration
        self.assertTableNotExists(""test_crprmo_proxypony"")
        self.assertTableExists(""test_crprmo_pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_crprmo"", editor, project_state, new_state)
        self.assertTableNotExists(""test_crprmo_proxypony"")
        self.assertTableExists(""test_crprmo_pony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_crprmo"", editor, new_state, project_state)
        self.assertTableNotExists(""test_crprmo_proxypony"")
        self.assertTableExists(""test_crprmo_pony"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""CreateModel"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""bases"", ""fields"", ""name"", ""options""])

    def test_create_unmanaged_model(self):
        """"""
        CreateModel ignores unmanaged models.
        """"""
        project_state = self.set_up_test_model(""test_crummo"")
        # Test the state alteration
        operation = migrations.CreateModel(
            ""UnmanagedPony"",
            [],
            options={""proxy"": True},
            bases=(""test_crummo.Pony"",),
        )
        self.assertEqual(operation.describe(), ""Create proxy model UnmanagedPony"")
        new_state = project_state.clone()
        operation.state_forwards(""test_crummo"", new_state)
        self.assertIn((""test_crummo"", ""unmanagedpony""), new_state.models)
        # Test the database alteration
        self.assertTableNotExists(""test_crummo_unmanagedpony"")
        self.assertTableExists(""test_crummo_pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_crummo"", editor, project_state, new_state)
        self.assertTableNotExists(""test_crummo_unmanagedpony"")
        self.assertTableExists(""test_crummo_pony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_crummo"", editor, new_state, project_state)
        self.assertTableNotExists(""test_crummo_unmanagedpony"")
        self.assertTableExists(""test_crummo_pony"")

    @skipUnlessDBFeature('supports_table_check_constraints')
    def test_create_model_with_constraint(self):
        where = models.Q(pink__gt=2)
        check_constraint = models.CheckConstraint(check=where, name='test_constraint_pony_pink_gt_2')
        operation = migrations.CreateModel(
            ""Pony"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""pink"", models.IntegerField(default=3)),
            ],
            options={'constraints': [check_constraint]},
        )

        # Test the state alteration
        project_state = ProjectState()
        new_state = project_state.clone()
        operation.state_forwards(""test_crmo"", new_state)
        self.assertEqual(len(new_state.models['test_crmo', 'pony'].options['constraints']), 1)

        # Test database alteration
        self.assertTableNotExists(""test_crmo_pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_crmo"", editor, project_state, new_state)
        self.assertTableExists(""test_crmo_pony"")
        with connection.cursor() as cursor:
            with self.assertRaises(IntegrityError):
                cursor.execute(""INSERT INTO test_crmo_pony (id, pink) VALUES (1, 1)"")

        # Test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_crmo"", editor, new_state, project_state)
        self.assertTableNotExists(""test_crmo_pony"")

        # Test deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""CreateModel"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2]['options']['constraints'], [check_constraint])

    def test_create_model_with_partial_unique_constraint(self):
        partial_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            condition=models.Q(weight__gt=5),
            name='test_constraint_pony_pink_for_weight_gt_5_uniq',
        )
        operation = migrations.CreateModel(
            'Pony',
            [
                ('id', models.AutoField(primary_key=True)),
                ('pink', models.IntegerField(default=3)),
                ('weight', models.FloatField()),
            ],
            options={'constraints': [partial_unique_constraint]},
        )
        # Test the state alteration
        project_state = ProjectState()
        new_state = project_state.clone()
        operation.state_forwards('test_crmo', new_state)
        self.assertEqual(len(new_state.models['test_crmo', 'pony'].options['constraints']), 1)
        # Test database alteration
        self.assertTableNotExists('test_crmo_pony')
        with connection.schema_editor() as editor:
            operation.database_forwards('test_crmo', editor, project_state, new_state)
        self.assertTableExists('test_crmo_pony')
        # Test constraint works
        Pony = new_state.apps.get_model('test_crmo', 'Pony')
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=6.0)
        if connection.features.supports_partial_indexes:
            with self.assertRaises(IntegrityError):
                Pony.objects.create(pink=1, weight=7.0)
        else:
            Pony.objects.create(pink=1, weight=7.0)
        # Test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards('test_crmo', editor, new_state, project_state)
        self.assertTableNotExists('test_crmo_pony')
        # Test deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'CreateModel')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2]['options']['constraints'], [partial_unique_constraint])

    def test_create_model_with_deferred_unique_constraint(self):
        deferred_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            name='deferrable_pink_constraint',
            deferrable=models.Deferrable.DEFERRED,
        )
        operation = migrations.CreateModel(
            'Pony',
            [
                ('id', models.AutoField(primary_key=True)),
                ('pink', models.IntegerField(default=3)),
            ],
            options={'constraints': [deferred_unique_constraint]},
        )
        project_state = ProjectState()
        new_state = project_state.clone()
        operation.state_forwards('test_crmo', new_state)
        self.assertEqual(len(new_state.models['test_crmo', 'pony'].options['constraints']), 1)
        self.assertTableNotExists('test_crmo_pony')
        # Create table.
        with connection.schema_editor() as editor:
            operation.database_forwards('test_crmo', editor, project_state, new_state)
        self.assertTableExists('test_crmo_pony')
        Pony = new_state.apps.get_model('test_crmo', 'Pony')
        Pony.objects.create(pink=1)
        if connection.features.supports_deferrable_unique_constraints:
            # Unique constraint is deferred.
            with transaction.atomic():
                obj = Pony.objects.create(pink=1)
                obj.pink = 2
                obj.save()
            # Constraint behavior can be changed with SET CONSTRAINTS.
            with self.assertRaises(IntegrityError):
                with transaction.atomic(), connection.cursor() as cursor:
                    quoted_name = connection.ops.quote_name(deferred_unique_constraint.name)
                    cursor.execute('SET CONSTRAINTS %s IMMEDIATE' % quoted_name)
                    obj = Pony.objects.create(pink=1)
                    obj.pink = 3
                    obj.save()
        else:
            Pony.objects.create(pink=1)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards('test_crmo', editor, new_state, project_state)
        self.assertTableNotExists('test_crmo_pony')
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'CreateModel')
        self.assertEqual(definition[1], [])
        self.assertEqual(
            definition[2]['options']['constraints'],
            [deferred_unique_constraint],
        )

    @skipUnlessDBFeature('supports_covering_indexes')
    def test_create_model_with_covering_unique_constraint(self):
        covering_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            include=['weight'],
            name='test_constraint_pony_pink_covering_weight',
        )
        operation = migrations.CreateModel(
            'Pony',
            [
                ('id', models.AutoField(primary_key=True)),
                ('pink', models.IntegerField(default=3)),
                ('weight', models.FloatField()),
            ],
            options={'constraints': [covering_unique_constraint]},
        )
        project_state = ProjectState()
        new_state = project_state.clone()
        operation.state_forwards('test_crmo', new_state)
        self.assertEqual(len(new_state.models['test_crmo', 'pony'].options['constraints']), 1)
        self.assertTableNotExists('test_crmo_pony')
        # Create table.
        with connection.schema_editor() as editor:
            operation.database_forwards('test_crmo', editor, project_state, new_state)
        self.assertTableExists('test_crmo_pony')
        Pony = new_state.apps.get_model('test_crmo', 'Pony')
        Pony.objects.create(pink=1, weight=4.0)
        with self.assertRaises(IntegrityError):
            Pony.objects.create(pink=1, weight=7.0)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards('test_crmo', editor, new_state, project_state)
        self.assertTableNotExists('test_crmo_pony')
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'CreateModel')
        self.assertEqual(definition[1], [])
        self.assertEqual(
            definition[2]['options']['constraints'],
            [covering_unique_constraint],
        )

    def test_create_model_managers(self):
        """"""
        The managers on a model are set.
        """"""
        project_state = self.set_up_test_model(""test_cmoma"")
        # Test the state alteration
        operation = migrations.CreateModel(
            ""Food"",
            fields=[
                (""id"", models.AutoField(primary_key=True)),
            ],
            managers=[
                (""food_qs"", FoodQuerySet.as_manager()),
                (""food_mgr"", FoodManager(""a"", ""b"")),
                (""food_mgr_kwargs"", FoodManager(""x"", ""y"", 3, 4)),
            ]
        )
        self.assertEqual(operation.describe(), ""Create model Food"")
        new_state = project_state.clone()
        operation.state_forwards(""test_cmoma"", new_state)
        self.assertIn((""test_cmoma"", ""food""), new_state.models)
        managers = new_state.models[""test_cmoma"", ""food""].managers
        self.assertEqual(managers[0][0], ""food_qs"")
        self.assertIsInstance(managers[0][1], models.Manager)
        self.assertEqual(managers[1][0], ""food_mgr"")
        self.assertIsInstance(managers[1][1], FoodManager)
        self.assertEqual(managers[1][1].args, (""a"", ""b"", 1, 2))
        self.assertEqual(managers[2][0], ""food_mgr_kwargs"")
        self.assertIsInstance(managers[2][1], FoodManager)
        self.assertEqual(managers[2][1].args, (""x"", ""y"", 3, 4))

    def test_delete_model(self):
        """"""
        Tests the DeleteModel operation.
        """"""
        project_state = self.set_up_test_model(""test_dlmo"")
        # Test the state alteration
        operation = migrations.DeleteModel(""Pony"")
        self.assertEqual(operation.describe(), ""Delete model Pony"")
        self.assertEqual(operation.migration_name_fragment, 'delete_pony')
        new_state = project_state.clone()
        operation.state_forwards(""test_dlmo"", new_state)
        self.assertNotIn((""test_dlmo"", ""pony""), new_state.models)
        # Test the database alteration
        self.assertTableExists(""test_dlmo_pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_dlmo"", editor, project_state, new_state)
        self.assertTableNotExists(""test_dlmo_pony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_dlmo"", editor, new_state, project_state)
        self.assertTableExists(""test_dlmo_pony"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""DeleteModel"")
        self.assertEqual(definition[1], [])
        self.assertEqual(list(definition[2]), [""name""])

    def test_delete_proxy_model(self):
        """"""
        Tests the DeleteModel operation ignores proxy models.
        """"""
        project_state = self.set_up_test_model(""test_dlprmo"", proxy_model=True)
        # Test the state alteration
        operation = migrations.DeleteModel(""ProxyPony"")
        new_state = project_state.clone()
        operation.state_forwards(""test_dlprmo"", new_state)
        self.assertIn((""test_dlprmo"", ""proxypony""), project_state.models)
        self.assertNotIn((""test_dlprmo"", ""proxypony""), new_state.models)
        # Test the database alteration
        self.assertTableExists(""test_dlprmo_pony"")
        self.assertTableNotExists(""test_dlprmo_proxypony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_dlprmo"", editor, project_state, new_state)
        self.assertTableExists(""test_dlprmo_pony"")
        self.assertTableNotExists(""test_dlprmo_proxypony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_dlprmo"", editor, new_state, project_state)
        self.assertTableExists(""test_dlprmo_pony"")
        self.assertTableNotExists(""test_dlprmo_proxypony"")

    def test_delete_mti_model(self):
        project_state = self.set_up_test_model('test_dlmtimo', mti_model=True)
        # Test the state alteration
        operation = migrations.DeleteModel('ShetlandPony')
        new_state = project_state.clone()
        operation.state_forwards('test_dlmtimo', new_state)
        self.assertIn(('test_dlmtimo', 'shetlandpony'), project_state.models)
        self.assertNotIn(('test_dlmtimo', 'shetlandpony'), new_state.models)
        # Test the database alteration
        self.assertTableExists('test_dlmtimo_pony')
        self.assertTableExists('test_dlmtimo_shetlandpony')
        self.assertColumnExists('test_dlmtimo_shetlandpony', 'pony_ptr_id')
        with connection.schema_editor() as editor:
            operation.database_forwards('test_dlmtimo', editor, project_state, new_state)
        self.assertTableExists('test_dlmtimo_pony')
        self.assertTableNotExists('test_dlmtimo_shetlandpony')
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards('test_dlmtimo', editor, new_state, project_state)
        self.assertTableExists('test_dlmtimo_pony')
        self.assertTableExists('test_dlmtimo_shetlandpony')
        self.assertColumnExists('test_dlmtimo_shetlandpony', 'pony_ptr_id')

    def test_rename_model(self):
        """"""
        Tests the RenameModel operation.
        """"""
        project_state = self.set_up_test_model(""test_rnmo"", related_model=True)
        # Test the state alteration
        operation = migrations.RenameModel(""Pony"", ""Horse"")
        self.assertEqual(operation.describe(), ""Rename model Pony to Horse"")
        self.assertEqual(operation.migration_name_fragment, 'rename_pony_horse')
        # Test initial state and database
        self.assertIn((""test_rnmo"", ""pony""), project_state.models)
        self.assertNotIn((""test_rnmo"", ""horse""), project_state.models)
        self.assertTableExists(""test_rnmo_pony"")
        self.assertTableNotExists(""test_rnmo_horse"")
        if connection.features.supports_foreign_keys:
            self.assertFKExists(""test_rnmo_rider"", [""pony_id""], (""test_rnmo_pony"", ""id""))
            self.assertFKNotExists(""test_rnmo_rider"", [""pony_id""], (""test_rnmo_horse"", ""id""))
        # Migrate forwards
        new_state = project_state.clone()
        atomic_rename = connection.features.supports_atomic_references_rename
        new_state = self.apply_operations(""test_rnmo"", new_state, [operation], atomic=atomic_rename)
        # Test new state and database
        self.assertNotIn((""test_rnmo"", ""pony""), new_state.models)
        self.assertIn((""test_rnmo"", ""horse""), new_state.models)
        # RenameModel also repoints all incoming FKs and M2Ms
        self.assertEqual(
            new_state.models['test_rnmo', 'rider'].fields['pony'].remote_field.model,
            'test_rnmo.Horse',
        )
        self.assertTableNotExists(""test_rnmo_pony"")
        self.assertTableExists(""test_rnmo_horse"")
        if connection.features.supports_foreign_keys:
            self.assertFKNotExists(""test_rnmo_rider"", [""pony_id""], (""test_rnmo_pony"", ""id""))
            self.assertFKExists(""test_rnmo_rider"", [""pony_id""], (""test_rnmo_horse"", ""id""))
        # Migrate backwards
        original_state = self.unapply_operations(""test_rnmo"", project_state, [operation], atomic=atomic_rename)
        # Test original state and database
        self.assertIn((""test_rnmo"", ""pony""), original_state.models)
        self.assertNotIn((""test_rnmo"", ""horse""), original_state.models)
        self.assertEqual(
            original_state.models['test_rnmo', 'rider'].fields['pony'].remote_field.model,
            'Pony',
        )
        self.assertTableExists(""test_rnmo_pony"")
        self.assertTableNotExists(""test_rnmo_horse"")
        if connection.features.supports_foreign_keys:
            self.assertFKExists(""test_rnmo_rider"", [""pony_id""], (""test_rnmo_pony"", ""id""))
            self.assertFKNotExists(""test_rnmo_rider"", [""pony_id""], (""test_rnmo_horse"", ""id""))
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RenameModel"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'old_name': ""Pony"", 'new_name': ""Horse""})

    def test_rename_model_state_forwards(self):
        """"""
        RenameModel operations shouldn't trigger the caching of rendered apps
        on state without prior apps.
        """"""
        state = ProjectState()
        state.add_model(ModelState('migrations', 'Foo', []))
        operation = migrations.RenameModel('Foo', 'Bar')
        operation.state_forwards('migrations', state)
        self.assertNotIn('apps', state.__dict__)
        self.assertNotIn(('migrations', 'foo'), state.models)
        self.assertIn(('migrations', 'bar'), state.models)
        # Now with apps cached.
        apps = state.apps
        operation = migrations.RenameModel('Bar', 'Foo')
        operation.state_forwards('migrations', state)
        self.assertIs(state.apps, apps)
        self.assertNotIn(('migrations', 'bar'), state.models)
        self.assertIn(('migrations', 'foo'), state.models)

    def test_rename_model_with_self_referential_fk(self):
        """"""
        Tests the RenameModel operation on model with self referential FK.
        """"""
        project_state = self.set_up_test_model(""test_rmwsrf"", related_model=True)
        # Test the state alteration
        operation = migrations.RenameModel(""Rider"", ""HorseRider"")
        self.assertEqual(operation.describe(), ""Rename model Rider to HorseRider"")
        new_state = project_state.clone()
        operation.state_forwards(""test_rmwsrf"", new_state)
        self.assertNotIn((""test_rmwsrf"", ""rider""), new_state.models)
        self.assertIn((""test_rmwsrf"", ""horserider""), new_state.models)
        # Remember, RenameModel also repoints all incoming FKs and M2Ms
        self.assertEqual(
            'self',
            new_state.models[""test_rmwsrf"", ""horserider""].fields['friend'].remote_field.model
        )
        HorseRider = new_state.apps.get_model('test_rmwsrf', 'horserider')
        self.assertIs(HorseRider._meta.get_field('horserider').remote_field.model, HorseRider)
        # Test the database alteration
        self.assertTableExists(""test_rmwsrf_rider"")
        self.assertTableNotExists(""test_rmwsrf_horserider"")
        if connection.features.supports_foreign_keys:
            self.assertFKExists(""test_rmwsrf_rider"", [""friend_id""], (""test_rmwsrf_rider"", ""id""))
            self.assertFKNotExists(""test_rmwsrf_rider"", [""friend_id""], (""test_rmwsrf_horserider"", ""id""))
        atomic_rename = connection.features.supports_atomic_references_rename
        with connection.schema_editor(atomic=atomic_rename) as editor:
            operation.database_forwards(""test_rmwsrf"", editor, project_state, new_state)
        self.assertTableNotExists(""test_rmwsrf_rider"")
        self.assertTableExists(""test_rmwsrf_horserider"")
        if connection.features.supports_foreign_keys:
            self.assertFKNotExists(""test_rmwsrf_horserider"", [""friend_id""], (""test_rmwsrf_rider"", ""id""))
            self.assertFKExists(""test_rmwsrf_horserider"", [""friend_id""], (""test_rmwsrf_horserider"", ""id""))
        # And test reversal
        with connection.schema_editor(atomic=atomic_rename) as editor:
            operation.database_backwards(""test_rmwsrf"", editor, new_state, project_state)
        self.assertTableExists(""test_rmwsrf_rider"")
        self.assertTableNotExists(""test_rmwsrf_horserider"")
        if connection.features.supports_foreign_keys:
            self.assertFKExists(""test_rmwsrf_rider"", [""friend_id""], (""test_rmwsrf_rider"", ""id""))
            self.assertFKNotExists(""test_rmwsrf_rider"", [""friend_id""], (""test_rmwsrf_horserider"", ""id""))

    def test_rename_model_with_superclass_fk(self):
        """"""
        Tests the RenameModel operation on a model which has a superclass that
        has a foreign key.
        """"""
        project_state = self.set_up_test_model(""test_rmwsc"", related_model=True, mti_model=True)
        # Test the state alteration
        operation = migrations.RenameModel(""ShetlandPony"", ""LittleHorse"")
        self.assertEqual(operation.describe(), ""Rename model ShetlandPony to LittleHorse"")
        new_state = project_state.clone()
        operation.state_forwards(""test_rmwsc"", new_state)
        self.assertNotIn((""test_rmwsc"", ""shetlandpony""), new_state.models)
        self.assertIn((""test_rmwsc"", ""littlehorse""), new_state.models)
        # RenameModel shouldn't repoint the superclass's relations, only local ones
        self.assertEqual(
            project_state.models['test_rmwsc', 'rider'].fields['pony'].remote_field.model,
            new_state.models['test_rmwsc', 'rider'].fields['pony'].remote_field.model,
        )
        # Before running the migration we have a table for Shetland Pony, not Little Horse
        self.assertTableExists(""test_rmwsc_shetlandpony"")
        self.assertTableNotExists(""test_rmwsc_littlehorse"")
        if connection.features.supports_foreign_keys:
            # and the foreign key on rider points to pony, not shetland pony
            self.assertFKExists(""test_rmwsc_rider"", [""pony_id""], (""test_rmwsc_pony"", ""id""))
            self.assertFKNotExists(""test_rmwsc_rider"", [""pony_id""], (""test_rmwsc_shetlandpony"", ""id""))
        with connection.schema_editor(atomic=connection.features.supports_atomic_references_rename) as editor:
            operation.database_forwards(""test_rmwsc"", editor, project_state, new_state)
        # Now we have a little horse table, not shetland pony
        self.assertTableNotExists(""test_rmwsc_shetlandpony"")
        self.assertTableExists(""test_rmwsc_littlehorse"")
        if connection.features.supports_foreign_keys:
            # but the Foreign keys still point at pony, not little horse
            self.assertFKExists(""test_rmwsc_rider"", [""pony_id""], (""test_rmwsc_pony"", ""id""))
            self.assertFKNotExists(""test_rmwsc_rider"", [""pony_id""], (""test_rmwsc_littlehorse"", ""id""))

    def test_rename_model_with_self_referential_m2m(self):
        app_label = ""test_rename_model_with_self_referential_m2m""

        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel(""ReflexivePony"", fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""ponies"", models.ManyToManyField(""self"")),
            ]),
        ])
        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.RenameModel(""ReflexivePony"", ""ReflexivePony2""),
        ], atomic=connection.features.supports_atomic_references_rename)
        Pony = project_state.apps.get_model(app_label, ""ReflexivePony2"")
        pony = Pony.objects.create()
        pony.ponies.add(pony)

    def test_rename_model_with_m2m(self):
        app_label = ""test_rename_model_with_m2m""
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel(""Rider"", fields=[
                (""id"", models.AutoField(primary_key=True)),
            ]),
            migrations.CreateModel(""Pony"", fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""riders"", models.ManyToManyField(""Rider"")),
            ]),
        ])
        Pony = project_state.apps.get_model(app_label, ""Pony"")
        Rider = project_state.apps.get_model(app_label, ""Rider"")
        pony = Pony.objects.create()
        rider = Rider.objects.create()
        pony.riders.add(rider)

        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.RenameModel(""Pony"", ""Pony2""),
        ], atomic=connection.features.supports_atomic_references_rename)
        Pony = project_state.apps.get_model(app_label, ""Pony2"")
        Rider = project_state.apps.get_model(app_label, ""Rider"")
        pony = Pony.objects.create()
        rider = Rider.objects.create()
        pony.riders.add(rider)
        self.assertEqual(Pony.objects.count(), 2)
        self.assertEqual(Rider.objects.count(), 2)
        self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)

    def test_rename_model_with_db_table_noop(self):
        app_label = 'test_rmwdbtn'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Rider', fields=[
                ('id', models.AutoField(primary_key=True)),
            ], options={'db_table': 'rider'}),
            migrations.CreateModel('Pony', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),
            ]),
        ])
        new_state = project_state.clone()
        operation = migrations.RenameModel('Rider', 'Runner')
        operation.state_forwards(app_label, new_state)

        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_forwards(app_label, editor, project_state, new_state)
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_backwards(app_label, editor, new_state, project_state)

    def test_rename_m2m_target_model(self):
        app_label = ""test_rename_m2m_target_model""
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel(""Rider"", fields=[
                (""id"", models.AutoField(primary_key=True)),
            ]),
            migrations.CreateModel(""Pony"", fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""riders"", models.ManyToManyField(""Rider"")),
            ]),
        ])
        Pony = project_state.apps.get_model(app_label, ""Pony"")
        Rider = project_state.apps.get_model(app_label, ""Rider"")
        pony = Pony.objects.create()
        rider = Rider.objects.create()
        pony.riders.add(rider)

        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.RenameModel(""Rider"", ""Rider2""),
        ], atomic=connection.features.supports_atomic_references_rename)
        Pony = project_state.apps.get_model(app_label, ""Pony"")
        Rider = project_state.apps.get_model(app_label, ""Rider2"")
        pony = Pony.objects.create()
        rider = Rider.objects.create()
        pony.riders.add(rider)
        self.assertEqual(Pony.objects.count(), 2)
        self.assertEqual(Rider.objects.count(), 2)
        self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)

    def test_rename_m2m_through_model(self):
        app_label = ""test_rename_through""
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel(""Rider"", fields=[
                (""id"", models.AutoField(primary_key=True)),
            ]),
            migrations.CreateModel(""Pony"", fields=[
                (""id"", models.AutoField(primary_key=True)),
            ]),
            migrations.CreateModel(""PonyRider"", fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""rider"", models.ForeignKey(""test_rename_through.Rider"", models.CASCADE)),
                (""pony"", models.ForeignKey(""test_rename_through.Pony"", models.CASCADE)),
            ]),
            migrations.AddField(
                ""Pony"",
                ""riders"",
                models.ManyToManyField(""test_rename_through.Rider"", through=""test_rename_through.PonyRider""),
            ),
        ])
        Pony = project_state.apps.get_model(app_label, ""Pony"")
        Rider = project_state.apps.get_model(app_label, ""Rider"")
        PonyRider = project_state.apps.get_model(app_label, ""PonyRider"")
        pony = Pony.objects.create()
        rider = Rider.objects.create()
        PonyRider.objects.create(pony=pony, rider=rider)

        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.RenameModel(""PonyRider"", ""PonyRider2""),
        ])
        Pony = project_state.apps.get_model(app_label, ""Pony"")
        Rider = project_state.apps.get_model(app_label, ""Rider"")
        PonyRider = project_state.apps.get_model(app_label, ""PonyRider2"")
        pony = Pony.objects.first()
        rider = Rider.objects.create()
        PonyRider.objects.create(pony=pony, rider=rider)
        self.assertEqual(Pony.objects.count(), 1)
        self.assertEqual(Rider.objects.count(), 2)
        self.assertEqual(PonyRider.objects.count(), 2)
        self.assertEqual(pony.riders.count(), 2)

    def test_rename_m2m_model_after_rename_field(self):
        """"""RenameModel renames a many-to-many column after a RenameField.""""""
        app_label = 'test_rename_multiple'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Pony', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('name', models.CharField(max_length=20)),
            ]),
            migrations.CreateModel('Rider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('pony', models.ForeignKey('test_rename_multiple.Pony', models.CASCADE)),
            ]),
            migrations.CreateModel('PonyRider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('riders', models.ManyToManyField('Rider')),
            ]),
            migrations.RenameField(model_name='pony', old_name='name', new_name='fancy_name'),
            migrations.RenameModel(old_name='Rider', new_name='Jockey'),
        ], atomic=connection.features.supports_atomic_references_rename)
        Pony = project_state.apps.get_model(app_label, 'Pony')
        Jockey = project_state.apps.get_model(app_label, 'Jockey')
        PonyRider = project_state.apps.get_model(app_label, 'PonyRider')
        # No ""no such column"" error means the column was renamed correctly.
        pony = Pony.objects.create(fancy_name='a good name')
        jockey = Jockey.objects.create(pony=pony)
        ponyrider = PonyRider.objects.create()
        ponyrider.riders.add(jockey)

    def test_add_field(self):
        """"""
        Tests the AddField operation.
        """"""
        # Test the state alteration
        operation = migrations.AddField(
            ""Pony"",
            ""height"",
            models.FloatField(null=True, default=5),
        )
        self.assertEqual(operation.describe(), ""Add field height to Pony"")
        self.assertEqual(operation.migration_name_fragment, 'pony_height')
        project_state, new_state = self.make_test_state(""test_adfl"", operation)
        self.assertEqual(len(new_state.models[""test_adfl"", ""pony""].fields), 4)
        field = new_state.models['test_adfl', 'pony'].fields['height']
        self.assertEqual(field.default, 5)
        # Test the database alteration
        self.assertColumnNotExists(""test_adfl_pony"", ""height"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_adfl"", editor, project_state, new_state)
        self.assertColumnExists(""test_adfl_pony"", ""height"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_adfl"", editor, new_state, project_state)
        self.assertColumnNotExists(""test_adfl_pony"", ""height"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AddField"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""field"", ""model_name"", ""name""])

    def test_add_charfield(self):
        """"""
        Tests the AddField operation on TextField.
        """"""
        project_state = self.set_up_test_model(""test_adchfl"")

        Pony = project_state.apps.get_model(""test_adchfl"", ""Pony"")
        pony = Pony.objects.create(weight=42)

        new_state = self.apply_operations(""test_adchfl"", project_state, [
            migrations.AddField(
                ""Pony"",
                ""text"",
                models.CharField(max_length=10, default=""some text""),
            ),
            migrations.AddField(
                ""Pony"",
                ""empty"",
                models.CharField(max_length=10, default=""""),
            ),
            # If not properly quoted digits would be interpreted as an int.
            migrations.AddField(
                ""Pony"",
                ""digits"",
                models.CharField(max_length=10, default=""42""),
            ),
            # Manual quoting is fragile and could trip on quotes. Refs #xyz.
            migrations.AddField(
                ""Pony"",
                ""quotes"",
                models.CharField(max_length=10, default='""\'""'),
            ),
        ])

        Pony = new_state.apps.get_model(""test_adchfl"", ""Pony"")
        pony = Pony.objects.get(pk=pony.pk)
        self.assertEqual(pony.text, ""some text"")
        self.assertEqual(pony.empty, """")
        self.assertEqual(pony.digits, ""42"")
        self.assertEqual(pony.quotes, '""\'""')

    def test_add_textfield(self):
        """"""
        Tests the AddField operation on TextField.
        """"""
        project_state = self.set_up_test_model(""test_adtxtfl"")

        Pony = project_state.apps.get_model(""test_adtxtfl"", ""Pony"")
        pony = Pony.objects.create(weight=42)

        new_state = self.apply_operations(""test_adtxtfl"", project_state, [
            migrations.AddField(
                ""Pony"",
                ""text"",
                models.TextField(default=""some text""),
            ),
            migrations.AddField(
                ""Pony"",
                ""empty"",
                models.TextField(default=""""),
            ),
            # If not properly quoted digits would be interpreted as an int.
            migrations.AddField(
                ""Pony"",
                ""digits"",
                models.TextField(default=""42""),
            ),
            # Manual quoting is fragile and could trip on quotes. Refs #xyz.
            migrations.AddField(
                ""Pony"",
                ""quotes"",
                models.TextField(default='""\'""'),
            ),
        ])

        Pony = new_state.apps.get_model(""test_adtxtfl"", ""Pony"")
        pony = Pony.objects.get(pk=pony.pk)
        self.assertEqual(pony.text, ""some text"")
        self.assertEqual(pony.empty, """")
        self.assertEqual(pony.digits, ""42"")
        self.assertEqual(pony.quotes, '""\'""')

    def test_add_binaryfield(self):
        """"""
        Tests the AddField operation on TextField/BinaryField.
        """"""
        project_state = self.set_up_test_model(""test_adbinfl"")

        Pony = project_state.apps.get_model(""test_adbinfl"", ""Pony"")
        pony = Pony.objects.create(weight=42)

        new_state = self.apply_operations(""test_adbinfl"", project_state, [
            migrations.AddField(
                ""Pony"",
                ""blob"",
                models.BinaryField(default=b""some text""),
            ),
            migrations.AddField(
                ""Pony"",
                ""empty"",
                models.BinaryField(default=b""""),
            ),
            # If not properly quoted digits would be interpreted as an int.
            migrations.AddField(
                ""Pony"",
                ""digits"",
                models.BinaryField(default=b""42""),
            ),
            # Manual quoting is fragile and could trip on quotes. Refs #xyz.
            migrations.AddField(
                ""Pony"",
                ""quotes"",
                models.BinaryField(default=b'""\'""'),
            ),
        ])

        Pony = new_state.apps.get_model(""test_adbinfl"", ""Pony"")
        pony = Pony.objects.get(pk=pony.pk)
        # SQLite returns buffer/memoryview, cast to bytes for checking.
        self.assertEqual(bytes(pony.blob), b""some text"")
        self.assertEqual(bytes(pony.empty), b"""")
        self.assertEqual(bytes(pony.digits), b""42"")
        self.assertEqual(bytes(pony.quotes), b'""\'""')

    def test_column_name_quoting(self):
        """"""
        Column names that are SQL keywords shouldn't cause problems when used
        in migrations (#22168).
        """"""
        project_state = self.set_up_test_model(""test_regr22168"")
        operation = migrations.AddField(
            ""Pony"",
            ""order"",
            models.IntegerField(default=0),
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_regr22168"", new_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_regr22168"", editor, project_state, new_state)
        self.assertColumnExists(""test_regr22168_pony"", ""order"")

    def test_add_field_preserve_default(self):
        """"""
        Tests the AddField operation's state alteration
        when preserve_default = False.
        """"""
        project_state = self.set_up_test_model(""test_adflpd"")
        # Test the state alteration
        operation = migrations.AddField(
            ""Pony"",
            ""height"",
            models.FloatField(null=True, default=4),
            preserve_default=False,
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_adflpd"", new_state)
        self.assertEqual(len(new_state.models[""test_adflpd"", ""pony""].fields), 4)
        field = new_state.models['test_adflpd', 'pony'].fields['height']
        self.assertEqual(field.default, models.NOT_PROVIDED)
        # Test the database alteration
        project_state.apps.get_model(""test_adflpd"", ""pony"").objects.create(
            weight=4,
        )
        self.assertColumnNotExists(""test_adflpd_pony"", ""height"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_adflpd"", editor, project_state, new_state)
        self.assertColumnExists(""test_adflpd_pony"", ""height"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AddField"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""field"", ""model_name"", ""name"", ""preserve_default""])

    def test_add_field_m2m(self):
        """"""
        Tests the AddField operation with a ManyToManyField.
        """"""
        project_state = self.set_up_test_model(""test_adflmm"", second_model=True)
        # Test the state alteration
        operation = migrations.AddField(""Pony"", ""stables"", models.ManyToManyField(""Stable"", related_name=""ponies""))
        new_state = project_state.clone()
        operation.state_forwards(""test_adflmm"", new_state)
        self.assertEqual(len(new_state.models[""test_adflmm"", ""pony""].fields), 4)
        # Test the database alteration
        self.assertTableNotExists(""test_adflmm_pony_stables"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_adflmm"", editor, project_state, new_state)
        self.assertTableExists(""test_adflmm_pony_stables"")
        self.assertColumnNotExists(""test_adflmm_pony"", ""stables"")
        # Make sure the M2M field actually works
        with atomic():
            Pony = new_state.apps.get_model(""test_adflmm"", ""Pony"")
            p = Pony.objects.create(pink=False, weight=4.55)
            p.stables.create()
            self.assertEqual(p.stables.count(), 1)
            p.stables.all().delete()
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_adflmm"", editor, new_state, project_state)
        self.assertTableNotExists(""test_adflmm_pony_stables"")

    def test_alter_field_m2m(self):
        project_state = self.set_up_test_model(""test_alflmm"", second_model=True)

        project_state = self.apply_operations(""test_alflmm"", project_state, operations=[
            migrations.AddField(""Pony"", ""stables"", models.ManyToManyField(""Stable"", related_name=""ponies""))
        ])
        Pony = project_state.apps.get_model(""test_alflmm"", ""Pony"")
        self.assertFalse(Pony._meta.get_field('stables').blank)

        project_state = self.apply_operations(""test_alflmm"", project_state, operations=[
            migrations.AlterField(
                ""Pony"", ""stables"", models.ManyToManyField(to=""Stable"", related_name=""ponies"", blank=True)
            )
        ])
        Pony = project_state.apps.get_model(""test_alflmm"", ""Pony"")
        self.assertTrue(Pony._meta.get_field('stables').blank)

    def test_repoint_field_m2m(self):
        project_state = self.set_up_test_model(""test_alflmm"", second_model=True, third_model=True)

        project_state = self.apply_operations(""test_alflmm"", project_state, operations=[
            migrations.AddField(""Pony"", ""places"", models.ManyToManyField(""Stable"", related_name=""ponies""))
        ])
        Pony = project_state.apps.get_model(""test_alflmm"", ""Pony"")

        project_state = self.apply_operations(""test_alflmm"", project_state, operations=[
            migrations.AlterField(""Pony"", ""places"", models.ManyToManyField(to=""Van"", related_name=""ponies""))
        ])

        # Ensure the new field actually works
        Pony = project_state.apps.get_model(""test_alflmm"", ""Pony"")
        p = Pony.objects.create(pink=False, weight=4.55)
        p.places.create()
        self.assertEqual(p.places.count(), 1)
        p.places.all().delete()

    def test_remove_field_m2m(self):
        project_state = self.set_up_test_model(""test_rmflmm"", second_model=True)

        project_state = self.apply_operations(""test_rmflmm"", project_state, operations=[
            migrations.AddField(""Pony"", ""stables"", models.ManyToManyField(""Stable"", related_name=""ponies""))
        ])
        self.assertTableExists(""test_rmflmm_pony_stables"")

        with_field_state = project_state.clone()
        operations = [migrations.RemoveField(""Pony"", ""stables"")]
        project_state = self.apply_operations(""test_rmflmm"", project_state, operations=operations)
        self.assertTableNotExists(""test_rmflmm_pony_stables"")

        # And test reversal
        self.unapply_operations(""test_rmflmm"", with_field_state, operations=operations)
        self.assertTableExists(""test_rmflmm_pony_stables"")

    def test_remove_field_m2m_with_through(self):
        project_state = self.set_up_test_model(""test_rmflmmwt"", second_model=True)

        self.assertTableNotExists(""test_rmflmmwt_ponystables"")
        project_state = self.apply_operations(""test_rmflmmwt"", project_state, operations=[
            migrations.CreateModel(""PonyStables"", fields=[
                (""pony"", models.ForeignKey('test_rmflmmwt.Pony', models.CASCADE)),
                (""stable"", models.ForeignKey('test_rmflmmwt.Stable', models.CASCADE)),
            ]),
            migrations.AddField(
                ""Pony"", ""stables"",
                models.ManyToManyField(""Stable"", related_name=""ponies"", through='test_rmflmmwt.PonyStables')
            )
        ])
        self.assertTableExists(""test_rmflmmwt_ponystables"")

        operations = [migrations.RemoveField(""Pony"", ""stables""), migrations.DeleteModel(""PonyStables"")]
        self.apply_operations(""test_rmflmmwt"", project_state, operations=operations)

    def test_remove_field(self):
        """"""
        Tests the RemoveField operation.
        """"""
        project_state = self.set_up_test_model(""test_rmfl"")
        # Test the state alteration
        operation = migrations.RemoveField(""Pony"", ""pink"")
        self.assertEqual(operation.describe(), ""Remove field pink from Pony"")
        self.assertEqual(operation.migration_name_fragment, 'remove_pony_pink')
        new_state = project_state.clone()
        operation.state_forwards(""test_rmfl"", new_state)
        self.assertEqual(len(new_state.models[""test_rmfl"", ""pony""].fields), 2)
        # Test the database alteration
        self.assertColumnExists(""test_rmfl_pony"", ""pink"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_rmfl"", editor, project_state, new_state)
        self.assertColumnNotExists(""test_rmfl_pony"", ""pink"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_rmfl"", editor, new_state, project_state)
        self.assertColumnExists(""test_rmfl_pony"", ""pink"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RemoveField"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': ""Pony"", 'name': 'pink'})

    def test_remove_fk(self):
        """"""
        Tests the RemoveField operation on a foreign key.
        """"""
        project_state = self.set_up_test_model(""test_rfk"", related_model=True)
        self.assertColumnExists(""test_rfk_rider"", ""pony_id"")
        operation = migrations.RemoveField(""Rider"", ""pony"")

        new_state = project_state.clone()
        operation.state_forwards(""test_rfk"", new_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_rfk"", editor, project_state, new_state)
        self.assertColumnNotExists(""test_rfk_rider"", ""pony_id"")
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_rfk"", editor, new_state, project_state)
        self.assertColumnExists(""test_rfk_rider"", ""pony_id"")

    def test_alter_model_table(self):
        """"""
        Tests the AlterModelTable operation.
        """"""
        project_state = self.set_up_test_model(""test_almota"")
        # Test the state alteration
        operation = migrations.AlterModelTable(""Pony"", ""test_almota_pony_2"")
        self.assertEqual(operation.describe(), ""Rename table for Pony to test_almota_pony_2"")
        self.assertEqual(operation.migration_name_fragment, 'alter_pony_table')
        new_state = project_state.clone()
        operation.state_forwards(""test_almota"", new_state)
        self.assertEqual(new_state.models[""test_almota"", ""pony""].options[""db_table""], ""test_almota_pony_2"")
        # Test the database alteration
        self.assertTableExists(""test_almota_pony"")
        self.assertTableNotExists(""test_almota_pony_2"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_almota"", editor, project_state, new_state)
        self.assertTableNotExists(""test_almota_pony"")
        self.assertTableExists(""test_almota_pony_2"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_almota"", editor, new_state, project_state)
        self.assertTableExists(""test_almota_pony"")
        self.assertTableNotExists(""test_almota_pony_2"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterModelTable"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'name': ""Pony"", 'table': ""test_almota_pony_2""})

    def test_alter_model_table_none(self):
        """"""
        Tests the AlterModelTable operation if the table name is set to None.
        """"""
        operation = migrations.AlterModelTable(""Pony"", None)
        self.assertEqual(operation.describe(), ""Rename table for Pony to (default)"")

    def test_alter_model_table_noop(self):
        """"""
        Tests the AlterModelTable operation if the table name is not changed.
        """"""
        project_state = self.set_up_test_model(""test_almota"")
        # Test the state alteration
        operation = migrations.AlterModelTable(""Pony"", ""test_almota_pony"")
        new_state = project_state.clone()
        operation.state_forwards(""test_almota"", new_state)
        self.assertEqual(new_state.models[""test_almota"", ""pony""].options[""db_table""], ""test_almota_pony"")
        # Test the database alteration
        self.assertTableExists(""test_almota_pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_almota"", editor, project_state, new_state)
        self.assertTableExists(""test_almota_pony"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_almota"", editor, new_state, project_state)
        self.assertTableExists(""test_almota_pony"")

    def test_alter_model_table_m2m(self):
        """"""
        AlterModelTable should rename auto-generated M2M tables.
        """"""
        app_label = ""test_talflmltlm2m""
        pony_db_table = 'pony_foo'
        project_state = self.set_up_test_model(app_label, second_model=True, db_table=pony_db_table)
        # Add the M2M field
        first_state = project_state.clone()
        operation = migrations.AddField(""Pony"", ""stables"", models.ManyToManyField(""Stable""))
        operation.state_forwards(app_label, first_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, first_state)
        original_m2m_table = ""%s_%s"" % (pony_db_table, ""stables"")
        new_m2m_table = ""%s_%s"" % (app_label, ""pony_stables"")
        self.assertTableExists(original_m2m_table)
        self.assertTableNotExists(new_m2m_table)
        # Rename the Pony db_table which should also rename the m2m table.
        second_state = first_state.clone()
        operation = migrations.AlterModelTable(name='pony', table=None)
        operation.state_forwards(app_label, second_state)
        atomic_rename = connection.features.supports_atomic_references_rename
        with connection.schema_editor(atomic=atomic_rename) as editor:
            operation.database_forwards(app_label, editor, first_state, second_state)
        self.assertTableExists(new_m2m_table)
        self.assertTableNotExists(original_m2m_table)
        # And test reversal
        with connection.schema_editor(atomic=atomic_rename) as editor:
            operation.database_backwards(app_label, editor, second_state, first_state)
        self.assertTableExists(original_m2m_table)
        self.assertTableNotExists(new_m2m_table)

    def test_alter_field(self):
        """"""
        Tests the AlterField operation.
        """"""
        project_state = self.set_up_test_model(""test_alfl"")
        # Test the state alteration
        operation = migrations.AlterField(""Pony"", ""pink"", models.IntegerField(null=True))
        self.assertEqual(operation.describe(), ""Alter field pink on Pony"")
        self.assertEqual(operation.migration_name_fragment, 'alter_pony_pink')
        new_state = project_state.clone()
        operation.state_forwards(""test_alfl"", new_state)
        self.assertIs(project_state.models['test_alfl', 'pony'].fields['pink'].null, False)
        self.assertIs(new_state.models['test_alfl', 'pony'].fields['pink'].null, True)
        # Test the database alteration
        self.assertColumnNotNull(""test_alfl_pony"", ""pink"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_alfl"", editor, project_state, new_state)
        self.assertColumnNull(""test_alfl_pony"", ""pink"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_alfl"", editor, new_state, project_state)
        self.assertColumnNotNull(""test_alfl_pony"", ""pink"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterField"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""field"", ""model_name"", ""name""])

    def test_alter_field_add_db_column_noop(self):
        """"""
        AlterField operation is a noop when adding only a db_column and the
        column name is not changed.
        """"""
        app_label = 'test_afadbn'
        project_state = self.set_up_test_model(app_label, related_model=True)
        pony_table = '%s_pony' % app_label
        new_state = project_state.clone()
        operation = migrations.AlterField('Pony', 'weight', models.FloatField(db_column='weight'))
        operation.state_forwards(app_label, new_state)
        self.assertIsNone(
            project_state.models[app_label, 'pony'].fields['weight'].db_column,
        )
        self.assertEqual(
            new_state.models[app_label, 'pony'].fields['weight'].db_column,
            'weight',
        )
        self.assertColumnExists(pony_table, 'weight')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertColumnExists(pony_table, 'weight')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_backwards(app_label, editor, new_state, project_state)
        self.assertColumnExists(pony_table, 'weight')

        rider_table = '%s_rider' % app_label
        new_state = project_state.clone()
        operation = migrations.AlterField(
            'Rider',
            'pony',
            models.ForeignKey('Pony', models.CASCADE, db_column='pony_id'),
        )
        operation.state_forwards(app_label, new_state)
        self.assertIsNone(
            project_state.models[app_label, 'rider'].fields['pony'].db_column,
        )
        self.assertIs(
            new_state.models[app_label, 'rider'].fields['pony'].db_column,
            'pony_id',
        )
        self.assertColumnExists(rider_table, 'pony_id')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertColumnExists(rider_table, 'pony_id')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_forwards(app_label, editor, new_state, project_state)
        self.assertColumnExists(rider_table, 'pony_id')

    def test_alter_field_pk(self):
        """"""
        Tests the AlterField operation on primary keys (for things like PostgreSQL's SERIAL weirdness)
        """"""
        project_state = self.set_up_test_model(""test_alflpk"")
        # Test the state alteration
        operation = migrations.AlterField(""Pony"", ""id"", models.IntegerField(primary_key=True))
        new_state = project_state.clone()
        operation.state_forwards(""test_alflpk"", new_state)
        self.assertIsInstance(
            project_state.models['test_alflpk', 'pony'].fields['id'],
            models.AutoField,
        )
        self.assertIsInstance(
            new_state.models['test_alflpk', 'pony'].fields['id'],
            models.IntegerField,
        )
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_alflpk"", editor, project_state, new_state)
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_alflpk"", editor, new_state, project_state)

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_field_pk_fk(self):
        """"""
        Tests the AlterField operation on primary keys changes any FKs pointing to it.
        """"""
        project_state = self.set_up_test_model(""test_alflpkfk"", related_model=True)
        project_state = self.apply_operations('test_alflpkfk', project_state, [
            migrations.CreateModel('Stable', fields=[
                ('ponies', models.ManyToManyField('Pony')),
            ]),
            migrations.AddField(
                'Pony',
                'stables',
                models.ManyToManyField('Stable'),
            ),
        ])
        # Test the state alteration
        operation = migrations.AlterField(""Pony"", ""id"", models.FloatField(primary_key=True))
        new_state = project_state.clone()
        operation.state_forwards(""test_alflpkfk"", new_state)
        self.assertIsInstance(
            project_state.models['test_alflpkfk', 'pony'].fields['id'],
            models.AutoField,
        )
        self.assertIsInstance(
            new_state.models['test_alflpkfk', 'pony'].fields['id'],
            models.FloatField,
        )

        def assertIdTypeEqualsFkType():
            with connection.cursor() as cursor:
                id_type, id_null = [
                    (c.type_code, c.null_ok)
                    for c in connection.introspection.get_table_description(cursor, ""test_alflpkfk_pony"")
                    if c.name == ""id""
                ][0]
                fk_type, fk_null = [
                    (c.type_code, c.null_ok)
                    for c in connection.introspection.get_table_description(cursor, ""test_alflpkfk_rider"")
                    if c.name == ""pony_id""
                ][0]
                m2m_fk_type, m2m_fk_null = [
                    (c.type_code, c.null_ok)
                    for c in connection.introspection.get_table_description(
                        cursor,
                        'test_alflpkfk_pony_stables',
                    ) if c.name == 'pony_id'
                ][0]
                remote_m2m_fk_type, remote_m2m_fk_null = [
                    (c.type_code, c.null_ok)
                    for c in connection.introspection.get_table_description(
                        cursor,
                        'test_alflpkfk_stable_ponies',
                    ) if c.name == 'pony_id'
                ][0]
            self.assertEqual(id_type, fk_type)
            self.assertEqual(id_type, m2m_fk_type)
            self.assertEqual(id_type, remote_m2m_fk_type)
            self.assertEqual(id_null, fk_null)
            self.assertEqual(id_null, m2m_fk_null)
            self.assertEqual(id_null, remote_m2m_fk_null)

        assertIdTypeEqualsFkType()
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_alflpkfk"", editor, project_state, new_state)
        assertIdTypeEqualsFkType()
        if connection.features.supports_foreign_keys:
            self.assertFKExists(
                'test_alflpkfk_pony_stables',
                ['pony_id'],
                ('test_alflpkfk_pony', 'id'),
            )
            self.assertFKExists(
                'test_alflpkfk_stable_ponies',
                ['pony_id'],
                ('test_alflpkfk_pony', 'id'),
            )
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_alflpkfk"", editor, new_state, project_state)
        assertIdTypeEqualsFkType()
        if connection.features.supports_foreign_keys:
            self.assertFKExists(
                'test_alflpkfk_pony_stables',
                ['pony_id'],
                ('test_alflpkfk_pony', 'id'),
            )
            self.assertFKExists(
                'test_alflpkfk_stable_ponies',
                ['pony_id'],
                ('test_alflpkfk_pony', 'id'),
            )

    def test_alter_field_pk_mti_fk(self):
        app_label = 'test_alflpkmtifk'
        project_state = self.set_up_test_model(app_label, mti_model=True)
        project_state = self.apply_operations(app_label, project_state, [
            migrations.CreateModel('ShetlandRider', fields=[
                (
                    'pony',
                    models.ForeignKey(f'{app_label}.ShetlandPony', models.CASCADE),
                ),
            ]),
        ])
        operation = migrations.AlterField(
            'Pony',
            'id',
            models.BigAutoField(primary_key=True),
        )
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertIsInstance(
            new_state.models[app_label, 'pony'].fields['id'],
            models.BigAutoField,
        )

        def _get_column_id_type(cursor, table, column):
            return [
                c.type_code
                for c in connection.introspection.get_table_description(
                    cursor,
                    f'{app_label}_{table}',
                )
                if c.name == column
            ][0]

        def assertIdTypeEqualsMTIFkType():
            with connection.cursor() as cursor:
                parent_id_type = _get_column_id_type(cursor, 'pony', 'id')
                child_id_type = _get_column_id_type(cursor, 'shetlandpony', 'pony_ptr_id')
                mti_id_type = _get_column_id_type(cursor, 'shetlandrider', 'pony_id')
            self.assertEqual(parent_id_type, child_id_type)
            self.assertEqual(parent_id_type, mti_id_type)

        assertIdTypeEqualsMTIFkType()
        # Alter primary key.
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        assertIdTypeEqualsMTIFkType()
        if connection.features.supports_foreign_keys:
            self.assertFKExists(
                f'{app_label}_shetlandpony',
                ['pony_ptr_id'],
                (f'{app_label}_pony', 'id'),
            )
            self.assertFKExists(
                f'{app_label}_shetlandrider',
                ['pony_id'],
                (f'{app_label}_shetlandpony', 'pony_ptr_id'),
            )
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        assertIdTypeEqualsMTIFkType()
        if connection.features.supports_foreign_keys:
            self.assertFKExists(
                f'{app_label}_shetlandpony',
                ['pony_ptr_id'],
                (f'{app_label}_pony', 'id'),
            )
            self.assertFKExists(
                f'{app_label}_shetlandrider',
                ['pony_id'],
                (f'{app_label}_shetlandpony', 'pony_ptr_id'),
            )

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_field_reloads_state_on_fk_with_to_field_target_type_change(self):
        app_label = 'test_alflrsfkwtflttc'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Rider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('code', models.IntegerField(unique=True)),
            ]),
            migrations.CreateModel('Pony', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE, to_field='code')),
            ]),
        ])
        operation = migrations.AlterField(
            'Rider',
            'code',
            models.CharField(max_length=100, unique=True),
        )
        self.apply_operations(app_label, project_state, operations=[operation])
        id_type, id_null = [
            (c.type_code, c.null_ok)
            for c in self.get_table_description('%s_rider' % app_label)
            if c.name == 'code'
        ][0]
        fk_type, fk_null = [
            (c.type_code, c.null_ok)
            for c in self.get_table_description('%s_pony' % app_label)
            if c.name == 'rider_id'
        ][0]
        self.assertEqual(id_type, fk_type)
        self.assertEqual(id_null, fk_null)

    @skipUnlessDBFeature('supports_foreign_keys')
    def test_alter_field_reloads_state_on_fk_with_to_field_related_name_target_type_change(self):
        app_label = 'test_alflrsfkwtflrnttc'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Rider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('code', models.PositiveIntegerField(unique=True)),
            ]),
            migrations.CreateModel('Pony', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('rider', models.ForeignKey(
                    '%s.Rider' % app_label,
                    models.CASCADE,
                    to_field='code',
                    related_name='+',
                )),
            ]),
        ])
        operation = migrations.AlterField(
            'Rider',
            'code',
            models.CharField(max_length=100, unique=True),
        )
        self.apply_operations(app_label, project_state, operations=[operation])

    def test_alter_field_reloads_state_on_fk_target_changes(self):
        """"""
        If AlterField doesn't reload state appropriately, the second AlterField
        crashes on MySQL due to not dropping the PonyRider.pony foreign key
        constraint before modifying the column.
        """"""
        app_label = 'alter_alter_field_reloads_state_on_fk_target_changes'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Rider', fields=[
                ('id', models.CharField(primary_key=True, max_length=100)),
            ]),
            migrations.CreateModel('Pony', fields=[
                ('id', models.CharField(primary_key=True, max_length=100)),
                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),
            ]),
            migrations.CreateModel('PonyRider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('pony', models.ForeignKey('%s.Pony' % app_label, models.CASCADE)),
            ]),
        ])
        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.AlterField('Rider', 'id', models.CharField(primary_key=True, max_length=99)),
            migrations.AlterField('Pony', 'id', models.CharField(primary_key=True, max_length=99)),
        ])

    def test_alter_field_reloads_state_on_fk_with_to_field_target_changes(self):
        """"""
        If AlterField doesn't reload state appropriately, the second AlterField
        crashes on MySQL due to not dropping the PonyRider.pony foreign key
        constraint before modifying the column.
        """"""
        app_label = 'alter_alter_field_reloads_state_on_fk_with_to_field_target_changes'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Rider', fields=[
                ('id', models.CharField(primary_key=True, max_length=100)),
                ('slug', models.CharField(unique=True, max_length=100)),
            ]),
            migrations.CreateModel('Pony', fields=[
                ('id', models.CharField(primary_key=True, max_length=100)),
                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE, to_field='slug')),
                ('slug', models.CharField(unique=True, max_length=100)),
            ]),
            migrations.CreateModel('PonyRider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('pony', models.ForeignKey('%s.Pony' % app_label, models.CASCADE, to_field='slug')),
            ]),
        ])
        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.AlterField('Rider', 'slug', models.CharField(unique=True, max_length=99)),
            migrations.AlterField('Pony', 'slug', models.CharField(unique=True, max_length=99)),
        ])

    def test_rename_field_reloads_state_on_fk_target_changes(self):
        """"""
        If RenameField doesn't reload state appropriately, the AlterField
        crashes on MySQL due to not dropping the PonyRider.pony foreign key
        constraint before modifying the column.
        """"""
        app_label = 'alter_rename_field_reloads_state_on_fk_target_changes'
        project_state = self.apply_operations(app_label, ProjectState(), operations=[
            migrations.CreateModel('Rider', fields=[
                ('id', models.CharField(primary_key=True, max_length=100)),
            ]),
            migrations.CreateModel('Pony', fields=[
                ('id', models.CharField(primary_key=True, max_length=100)),
                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),
            ]),
            migrations.CreateModel('PonyRider', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('pony', models.ForeignKey('%s.Pony' % app_label, models.CASCADE)),
            ]),
        ])
        project_state = self.apply_operations(app_label, project_state, operations=[
            migrations.RenameField('Rider', 'id', 'id2'),
            migrations.AlterField('Pony', 'id', models.CharField(primary_key=True, max_length=99)),
        ], atomic=connection.features.supports_atomic_references_rename)

    def test_rename_field(self):
        """"""
        Tests the RenameField operation.
        """"""
        project_state = self.set_up_test_model(""test_rnfl"", unique_together=True, index_together=True)
        # Test the state alteration
        operation = migrations.RenameField(""Pony"", ""pink"", ""blue"")
        self.assertEqual(operation.describe(), ""Rename field pink on Pony to blue"")
        self.assertEqual(operation.migration_name_fragment, 'rename_pink_pony_blue')
        new_state = project_state.clone()
        operation.state_forwards(""test_rnfl"", new_state)
        self.assertIn(""blue"", new_state.models[""test_rnfl"", ""pony""].fields)
        self.assertNotIn(""pink"", new_state.models[""test_rnfl"", ""pony""].fields)
        # Make sure the unique_together has the renamed column too
        self.assertIn(""blue"", new_state.models[""test_rnfl"", ""pony""].options['unique_together'][0])
        self.assertNotIn(""pink"", new_state.models[""test_rnfl"", ""pony""].options['unique_together'][0])
        # Make sure the index_together has the renamed column too
        self.assertIn(""blue"", new_state.models[""test_rnfl"", ""pony""].options['index_together'][0])
        self.assertNotIn(""pink"", new_state.models[""test_rnfl"", ""pony""].options['index_together'][0])
        # Test the database alteration
        self.assertColumnExists(""test_rnfl_pony"", ""pink"")
        self.assertColumnNotExists(""test_rnfl_pony"", ""blue"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_rnfl"", editor, project_state, new_state)
        self.assertColumnExists(""test_rnfl_pony"", ""blue"")
        self.assertColumnNotExists(""test_rnfl_pony"", ""pink"")
        # Ensure the unique constraint has been ported over
        with connection.cursor() as cursor:
            cursor.execute(""INSERT INTO test_rnfl_pony (blue, weight) VALUES (1, 1)"")
            with self.assertRaises(IntegrityError):
                with atomic():
                    cursor.execute(""INSERT INTO test_rnfl_pony (blue, weight) VALUES (1, 1)"")
            cursor.execute(""DELETE FROM test_rnfl_pony"")
        # Ensure the index constraint has been ported over
        self.assertIndexExists(""test_rnfl_pony"", [""weight"", ""blue""])
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_rnfl"", editor, new_state, project_state)
        self.assertColumnExists(""test_rnfl_pony"", ""pink"")
        self.assertColumnNotExists(""test_rnfl_pony"", ""blue"")
        # Ensure the index constraint has been reset
        self.assertIndexExists(""test_rnfl_pony"", [""weight"", ""pink""])
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RenameField"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': ""Pony"", 'old_name': ""pink"", 'new_name': ""blue""})

    def test_rename_field_with_db_column(self):
        project_state = self.apply_operations('test_rfwdbc', ProjectState(), operations=[
            migrations.CreateModel('Pony', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('field', models.IntegerField(db_column='db_field')),
                ('fk_field', models.ForeignKey(
                    'Pony',
                    models.CASCADE,
                    db_column='db_fk_field',
                )),
            ]),
        ])
        new_state = project_state.clone()
        operation = migrations.RenameField('Pony', 'field', 'renamed_field')
        operation.state_forwards('test_rfwdbc', new_state)
        self.assertIn('renamed_field', new_state.models['test_rfwdbc', 'pony'].fields)
        self.assertNotIn('field', new_state.models['test_rfwdbc', 'pony'].fields)
        self.assertColumnExists('test_rfwdbc_pony', 'db_field')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_forwards('test_rfwdbc', editor, project_state, new_state)
        self.assertColumnExists('test_rfwdbc_pony', 'db_field')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_backwards('test_rfwdbc', editor, new_state, project_state)
        self.assertColumnExists('test_rfwdbc_pony', 'db_field')

        new_state = project_state.clone()
        operation = migrations.RenameField('Pony', 'fk_field', 'renamed_fk_field')
        operation.state_forwards('test_rfwdbc', new_state)
        self.assertIn('renamed_fk_field', new_state.models['test_rfwdbc', 'pony'].fields)
        self.assertNotIn('fk_field', new_state.models['test_rfwdbc', 'pony'].fields)
        self.assertColumnExists('test_rfwdbc_pony', 'db_fk_field')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_forwards('test_rfwdbc', editor, project_state, new_state)
        self.assertColumnExists('test_rfwdbc_pony', 'db_fk_field')
        with connection.schema_editor() as editor:
            with self.assertNumQueries(0):
                operation.database_backwards('test_rfwdbc', editor, new_state, project_state)
        self.assertColumnExists('test_rfwdbc_pony', 'db_fk_field')

    def test_rename_field_case(self):
        project_state = self.apply_operations('test_rfmx', ProjectState(), operations=[
            migrations.CreateModel('Pony', fields=[
                ('id', models.AutoField(primary_key=True)),
                ('field', models.IntegerField()),
            ]),
        ])
        new_state = project_state.clone()
        operation = migrations.RenameField('Pony', 'field', 'FiElD')
        operation.state_forwards('test_rfmx', new_state)
        self.assertIn('FiElD', new_state.models['test_rfmx', 'pony'].fields)
        self.assertColumnExists('test_rfmx_pony', 'field')
        with connection.schema_editor() as editor:
            operation.database_forwards('test_rfmx', editor, project_state, new_state)
        self.assertColumnExists(
            'test_rfmx_pony',
            connection.introspection.identifier_converter('FiElD'),
        )
        with connection.schema_editor() as editor:
            operation.database_backwards('test_rfmx', editor, new_state, project_state)
        self.assertColumnExists('test_rfmx_pony', 'field')

    def test_rename_missing_field(self):
        state = ProjectState()
        state.add_model(ModelState('app', 'model', []))
        with self.assertRaisesMessage(FieldDoesNotExist, ""app.model has no field named 'field'""):
            migrations.RenameField('model', 'field', 'new_field').state_forwards('app', state)

    def test_rename_referenced_field_state_forward(self):
        state = ProjectState()
        state.add_model(ModelState('app', 'Model', [
            ('id', models.AutoField(primary_key=True)),
            ('field', models.IntegerField(unique=True)),
        ]))
        state.add_model(ModelState('app', 'OtherModel', [
            ('id', models.AutoField(primary_key=True)),
            ('fk', models.ForeignKey('Model', models.CASCADE, to_field='field')),
            ('fo', models.ForeignObject('Model', models.CASCADE, from_fields=('fk',), to_fields=('field',))),
        ]))
        operation = migrations.RenameField('Model', 'field', 'renamed')
        new_state = state.clone()
        operation.state_forwards('app', new_state)
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fk'].remote_field.field_name, 'renamed')
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fk'].from_fields, ['self'])
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fk'].to_fields, ('renamed',))
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].from_fields, ('fk',))
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].to_fields, ('renamed',))
        operation = migrations.RenameField('OtherModel', 'fk', 'renamed_fk')
        new_state = state.clone()
        operation.state_forwards('app', new_state)
        self.assertEqual(new_state.models['app', 'othermodel'].fields['renamed_fk'].remote_field.field_name, 'renamed')
        self.assertEqual(new_state.models['app', 'othermodel'].fields['renamed_fk'].from_fields, ('self',))
        self.assertEqual(new_state.models['app', 'othermodel'].fields['renamed_fk'].to_fields, ('renamed',))
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].from_fields, ('renamed_fk',))
        self.assertEqual(new_state.models['app', 'othermodel'].fields['fo'].to_fields, ('renamed',))

    def test_alter_unique_together(self):
        """"""
        Tests the AlterUniqueTogether operation.
        """"""
        project_state = self.set_up_test_model(""test_alunto"")
        # Test the state alteration
        operation = migrations.AlterUniqueTogether(""Pony"", [(""pink"", ""weight"")])
        self.assertEqual(operation.describe(), ""Alter unique_together for Pony (1 constraint(s))"")
        self.assertEqual(
            operation.migration_name_fragment,
            'alter_pony_unique_together',
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_alunto"", new_state)
        self.assertEqual(len(project_state.models[""test_alunto"", ""pony""].options.get(""unique_together"", set())), 0)
        self.assertEqual(len(new_state.models[""test_alunto"", ""pony""].options.get(""unique_together"", set())), 1)
        # Make sure we can insert duplicate rows
        with connection.cursor() as cursor:
            cursor.execute(""INSERT INTO test_alunto_pony (pink, weight) VALUES (1, 1)"")
            cursor.execute(""INSERT INTO test_alunto_pony (pink, weight) VALUES (1, 1)"")
            cursor.execute(""DELETE FROM test_alunto_pony"")
            # Test the database alteration
            with connection.schema_editor() as editor:
                operation.database_forwards(""test_alunto"", editor, project_state, new_state)
            cursor.execute(""INSERT INTO test_alunto_pony (pink, weight) VALUES (1, 1)"")
            with self.assertRaises(IntegrityError):
                with atomic():
                    cursor.execute(""INSERT INTO test_alunto_pony (pink, weight) VALUES (1, 1)"")
            cursor.execute(""DELETE FROM test_alunto_pony"")
            # And test reversal
            with connection.schema_editor() as editor:
                operation.database_backwards(""test_alunto"", editor, new_state, project_state)
            cursor.execute(""INSERT INTO test_alunto_pony (pink, weight) VALUES (1, 1)"")
            cursor.execute(""INSERT INTO test_alunto_pony (pink, weight) VALUES (1, 1)"")
            cursor.execute(""DELETE FROM test_alunto_pony"")
        # Test flat unique_together
        operation = migrations.AlterUniqueTogether(""Pony"", (""pink"", ""weight""))
        operation.state_forwards(""test_alunto"", new_state)
        self.assertEqual(len(new_state.models[""test_alunto"", ""pony""].options.get(""unique_together"", set())), 1)
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterUniqueTogether"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'name': ""Pony"", 'unique_together': {(""pink"", ""weight"")}})

    def test_alter_unique_together_remove(self):
        operation = migrations.AlterUniqueTogether(""Pony"", None)
        self.assertEqual(operation.describe(), ""Alter unique_together for Pony (0 constraint(s))"")

    def test_add_index(self):
        """"""
        Test the AddIndex operation.
        """"""
        project_state = self.set_up_test_model(""test_adin"")
        msg = (
            ""Indexes passed to AddIndex operations require a name argument. ""
            ""<Index: fields=['pink']> doesn't have one.""
        )
        with self.assertRaisesMessage(ValueError, msg):
            migrations.AddIndex(""Pony"", models.Index(fields=[""pink""]))
        index = models.Index(fields=[""pink""], name=""test_adin_pony_pink_idx"")
        operation = migrations.AddIndex(""Pony"", index)
        self.assertEqual(operation.describe(), ""Create index test_adin_pony_pink_idx on field(s) pink of model Pony"")
        self.assertEqual(
            operation.migration_name_fragment,
            'pony_test_adin_pony_pink_idx',
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_adin"", new_state)
        # Test the database alteration
        self.assertEqual(len(new_state.models[""test_adin"", ""pony""].options['indexes']), 1)
        self.assertIndexNotExists(""test_adin_pony"", [""pink""])
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_adin"", editor, project_state, new_state)
        self.assertIndexExists(""test_adin_pony"", [""pink""])
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_adin"", editor, new_state, project_state)
        self.assertIndexNotExists(""test_adin_pony"", [""pink""])
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AddIndex"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': ""Pony"", 'index': index})

    def test_remove_index(self):
        """"""
        Test the RemoveIndex operation.
        """"""
        project_state = self.set_up_test_model(""test_rmin"", multicol_index=True)
        self.assertTableExists(""test_rmin_pony"")
        self.assertIndexExists(""test_rmin_pony"", [""pink"", ""weight""])
        operation = migrations.RemoveIndex(""Pony"", ""pony_test_idx"")
        self.assertEqual(operation.describe(), ""Remove index pony_test_idx from Pony"")
        self.assertEqual(
            operation.migration_name_fragment,
            'remove_pony_pony_test_idx',
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_rmin"", new_state)
        # Test the state alteration
        self.assertEqual(len(new_state.models[""test_rmin"", ""pony""].options['indexes']), 0)
        self.assertIndexExists(""test_rmin_pony"", [""pink"", ""weight""])
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_rmin"", editor, project_state, new_state)
        self.assertIndexNotExists(""test_rmin_pony"", [""pink"", ""weight""])
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_rmin"", editor, new_state, project_state)
        self.assertIndexExists(""test_rmin_pony"", [""pink"", ""weight""])
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RemoveIndex"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': ""Pony"", 'name': ""pony_test_idx""})

        # Also test a field dropped with index - sqlite remake issue
        operations = [
            migrations.RemoveIndex(""Pony"", ""pony_test_idx""),
            migrations.RemoveField(""Pony"", ""pink""),
        ]
        self.assertColumnExists(""test_rmin_pony"", ""pink"")
        self.assertIndexExists(""test_rmin_pony"", [""pink"", ""weight""])
        # Test database alteration
        new_state = project_state.clone()
        self.apply_operations('test_rmin', new_state, operations=operations)
        self.assertColumnNotExists(""test_rmin_pony"", ""pink"")
        self.assertIndexNotExists(""test_rmin_pony"", [""pink"", ""weight""])
        # And test reversal
        self.unapply_operations(""test_rmin"", project_state, operations=operations)
        self.assertIndexExists(""test_rmin_pony"", [""pink"", ""weight""])

    def test_add_index_state_forwards(self):
        project_state = self.set_up_test_model('test_adinsf')
        index = models.Index(fields=['pink'], name='test_adinsf_pony_pink_idx')
        old_model = project_state.apps.get_model('test_adinsf', 'Pony')
        new_state = project_state.clone()

        operation = migrations.AddIndex('Pony', index)
        operation.state_forwards('test_adinsf', new_state)
        new_model = new_state.apps.get_model('test_adinsf', 'Pony')
        self.assertIsNot(old_model, new_model)

    def test_remove_index_state_forwards(self):
        project_state = self.set_up_test_model('test_rminsf')
        index = models.Index(fields=['pink'], name='test_rminsf_pony_pink_idx')
        migrations.AddIndex('Pony', index).state_forwards('test_rminsf', project_state)
        old_model = project_state.apps.get_model('test_rminsf', 'Pony')
        new_state = project_state.clone()

        operation = migrations.RemoveIndex('Pony', 'test_rminsf_pony_pink_idx')
        operation.state_forwards('test_rminsf', new_state)
        new_model = new_state.apps.get_model('test_rminsf', 'Pony')
        self.assertIsNot(old_model, new_model)

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_add_func_index(self):
        app_label = 'test_addfuncin'
        index_name = f'{app_label}_pony_abs_idx'
        table_name = f'{app_label}_pony'
        project_state = self.set_up_test_model(app_label)
        index = models.Index(Abs('weight'), name=index_name)
        operation = migrations.AddIndex('Pony', index)
        self.assertEqual(
            operation.describe(),
            'Create index test_addfuncin_pony_abs_idx on Abs(F(weight)) on model Pony',
        )
        self.assertEqual(
            operation.migration_name_fragment,
            'pony_test_addfuncin_pony_abs_idx',
        )
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['indexes']), 1)
        self.assertIndexNameNotExists(table_name, index_name)
        # Add index.
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertIndexNameExists(table_name, index_name)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        self.assertIndexNameNotExists(table_name, index_name)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'AddIndex')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': 'Pony', 'index': index})

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_remove_func_index(self):
        app_label = 'test_rmfuncin'
        index_name = f'{app_label}_pony_abs_idx'
        table_name = f'{app_label}_pony'
        project_state = self.set_up_test_model(app_label, indexes=[
            models.Index(Abs('weight'), name=index_name),
        ])
        self.assertTableExists(table_name)
        self.assertIndexNameExists(table_name, index_name)
        operation = migrations.RemoveIndex('Pony', index_name)
        self.assertEqual(
            operation.describe(),
            'Remove index test_rmfuncin_pony_abs_idx from Pony',
        )
        self.assertEqual(
            operation.migration_name_fragment,
            'remove_pony_test_rmfuncin_pony_abs_idx',
        )
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['indexes']), 0)
        # Remove index.
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertIndexNameNotExists(table_name, index_name)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        self.assertIndexNameExists(table_name, index_name)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'RemoveIndex')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': 'Pony', 'name': index_name})

    @skipUnlessDBFeature('supports_expression_indexes')
    def test_alter_field_with_func_index(self):
        app_label = 'test_alfuncin'
        index_name = f'{app_label}_pony_idx'
        table_name = f'{app_label}_pony'
        project_state = self.set_up_test_model(
            app_label,
            indexes=[models.Index(Abs('pink'), name=index_name)],
        )
        operation = migrations.AlterField('Pony', 'pink', models.IntegerField(null=True))
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertIndexNameExists(table_name, index_name)
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        self.assertIndexNameExists(table_name, index_name)

    def test_alter_field_with_index(self):
        """"""
        Test AlterField operation with an index to ensure indexes created via
        Meta.indexes don't get dropped with sqlite3 remake.
        """"""
        project_state = self.set_up_test_model(""test_alflin"", index=True)
        operation = migrations.AlterField(""Pony"", ""pink"", models.IntegerField(null=True))
        new_state = project_state.clone()
        operation.state_forwards(""test_alflin"", new_state)
        # Test the database alteration
        self.assertColumnNotNull(""test_alflin_pony"", ""pink"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_alflin"", editor, project_state, new_state)
        # Index hasn't been dropped
        self.assertIndexExists(""test_alflin_pony"", [""pink""])
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_alflin"", editor, new_state, project_state)
        # Ensure the index is still there
        self.assertIndexExists(""test_alflin_pony"", [""pink""])

    def test_alter_index_together(self):
        """"""
        Tests the AlterIndexTogether operation.
        """"""
        project_state = self.set_up_test_model(""test_alinto"")
        # Test the state alteration
        operation = migrations.AlterIndexTogether(""Pony"", [(""pink"", ""weight"")])
        self.assertEqual(operation.describe(), ""Alter index_together for Pony (1 constraint(s))"")
        self.assertEqual(
            operation.migration_name_fragment,
            'alter_pony_index_together',
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_alinto"", new_state)
        self.assertEqual(len(project_state.models[""test_alinto"", ""pony""].options.get(""index_together"", set())), 0)
        self.assertEqual(len(new_state.models[""test_alinto"", ""pony""].options.get(""index_together"", set())), 1)
        # Make sure there's no matching index
        self.assertIndexNotExists(""test_alinto_pony"", [""pink"", ""weight""])
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_alinto"", editor, project_state, new_state)
        self.assertIndexExists(""test_alinto_pony"", [""pink"", ""weight""])
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_alinto"", editor, new_state, project_state)
        self.assertIndexNotExists(""test_alinto_pony"", [""pink"", ""weight""])
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterIndexTogether"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'name': ""Pony"", 'index_together': {(""pink"", ""weight"")}})

    def test_alter_index_together_remove(self):
        operation = migrations.AlterIndexTogether(""Pony"", None)
        self.assertEqual(operation.describe(), ""Alter index_together for Pony (0 constraint(s))"")

    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')
    def test_alter_index_together_remove_with_unique_together(self):
        app_label = 'test_alintoremove_wunto'
        table_name = '%s_pony' % app_label
        project_state = self.set_up_test_model(app_label, unique_together=True)
        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])
        # Add index together.
        new_state = project_state.clone()
        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])
        operation.state_forwards(app_label, new_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertIndexExists(table_name, ['pink', 'weight'])
        # Remove index together.
        project_state = new_state
        new_state = project_state.clone()
        operation = migrations.AlterIndexTogether('Pony', set())
        operation.state_forwards(app_label, new_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertIndexNotExists(table_name, ['pink', 'weight'])
        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])

    @skipUnlessDBFeature('supports_table_check_constraints')
    def test_add_constraint(self):
        project_state = self.set_up_test_model(""test_addconstraint"")
        gt_check = models.Q(pink__gt=2)
        gt_constraint = models.CheckConstraint(check=gt_check, name=""test_add_constraint_pony_pink_gt_2"")
        gt_operation = migrations.AddConstraint(""Pony"", gt_constraint)
        self.assertEqual(
            gt_operation.describe(), ""Create constraint test_add_constraint_pony_pink_gt_2 on model Pony""
        )
        self.assertEqual(
            gt_operation.migration_name_fragment,
            'pony_test_add_constraint_pony_pink_gt_2',
        )
        # Test the state alteration
        new_state = project_state.clone()
        gt_operation.state_forwards(""test_addconstraint"", new_state)
        self.assertEqual(len(new_state.models[""test_addconstraint"", ""pony""].options[""constraints""]), 1)
        Pony = new_state.apps.get_model(""test_addconstraint"", ""Pony"")
        self.assertEqual(len(Pony._meta.constraints), 1)
        # Test the database alteration
        with connection.schema_editor() as editor:
            gt_operation.database_forwards(""test_addconstraint"", editor, project_state, new_state)
        with self.assertRaises(IntegrityError), transaction.atomic():
            Pony.objects.create(pink=1, weight=1.0)
        # Add another one.
        lt_check = models.Q(pink__lt=100)
        lt_constraint = models.CheckConstraint(check=lt_check, name=""test_add_constraint_pony_pink_lt_100"")
        lt_operation = migrations.AddConstraint(""Pony"", lt_constraint)
        lt_operation.state_forwards(""test_addconstraint"", new_state)
        self.assertEqual(len(new_state.models[""test_addconstraint"", ""pony""].options[""constraints""]), 2)
        Pony = new_state.apps.get_model(""test_addconstraint"", ""Pony"")
        self.assertEqual(len(Pony._meta.constraints), 2)
        with connection.schema_editor() as editor:
            lt_operation.database_forwards(""test_addconstraint"", editor, project_state, new_state)
        with self.assertRaises(IntegrityError), transaction.atomic():
            Pony.objects.create(pink=100, weight=1.0)
        # Test reversal
        with connection.schema_editor() as editor:
            gt_operation.database_backwards(""test_addconstraint"", editor, new_state, project_state)
        Pony.objects.create(pink=1, weight=1.0)
        # Test deconstruction
        definition = gt_operation.deconstruct()
        self.assertEqual(definition[0], ""AddConstraint"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': ""Pony"", 'constraint': gt_constraint})

    @skipUnlessDBFeature('supports_table_check_constraints')
    def test_add_constraint_percent_escaping(self):
        app_label = 'add_constraint_string_quoting'
        operations = [
            migrations.CreateModel(
                'Author',
                fields=[
                    ('id', models.AutoField(primary_key=True)),
                    ('name', models.CharField(max_length=100)),
                    ('surname', models.CharField(max_length=100, default='')),
                    ('rebate', models.CharField(max_length=100)),
                ],
            ),
        ]
        from_state = self.apply_operations(app_label, ProjectState(), operations)
        # ""%"" generated in startswith lookup should be escaped in a way that is
        # considered a leading wildcard.
        check = models.Q(name__startswith='Albert')
        constraint = models.CheckConstraint(check=check, name='name_constraint')
        operation = migrations.AddConstraint('Author', constraint)
        to_state = from_state.clone()
        operation.state_forwards(app_label, to_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, from_state, to_state)
        Author = to_state.apps.get_model(app_label, 'Author')
        with self.assertRaises(IntegrityError), transaction.atomic():
            Author.objects.create(name='Artur')
        # Literal ""%"" should be escaped in a way that is not a considered a
        # wildcard.
        check = models.Q(rebate__endswith='%')
        constraint = models.CheckConstraint(check=check, name='rebate_constraint')
        operation = migrations.AddConstraint('Author', constraint)
        from_state = to_state
        to_state = from_state.clone()
        operation.state_forwards(app_label, to_state)
        Author = to_state.apps.get_model(app_label, 'Author')
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, from_state, to_state)
        Author = to_state.apps.get_model(app_label, 'Author')
        with self.assertRaises(IntegrityError), transaction.atomic():
            Author.objects.create(name='Albert', rebate='10$')
        author = Author.objects.create(name='Albert', rebate='10%')
        self.assertEqual(Author.objects.get(), author)
        # Right-hand-side baked ""%"" literals should not be used for parameters
        # interpolation.
        check = ~models.Q(surname__startswith=models.F('name'))
        constraint = models.CheckConstraint(check=check, name='name_constraint_rhs')
        operation = migrations.AddConstraint('Author', constraint)
        from_state = to_state
        to_state = from_state.clone()
        operation.state_forwards(app_label, to_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, from_state, to_state)
        Author = to_state.apps.get_model(app_label, 'Author')
        with self.assertRaises(IntegrityError), transaction.atomic():
            Author.objects.create(name='Albert', surname='Alberto')

    @skipUnlessDBFeature('supports_table_check_constraints')
    def test_add_or_constraint(self):
        app_label = 'test_addorconstraint'
        constraint_name = 'add_constraint_or'
        from_state = self.set_up_test_model(app_label)
        check = models.Q(pink__gt=2, weight__gt=2) | models.Q(weight__lt=0)
        constraint = models.CheckConstraint(check=check, name=constraint_name)
        operation = migrations.AddConstraint('Pony', constraint)
        to_state = from_state.clone()
        operation.state_forwards(app_label, to_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, from_state, to_state)
        Pony = to_state.apps.get_model(app_label, 'Pony')
        with self.assertRaises(IntegrityError), transaction.atomic():
            Pony.objects.create(pink=2, weight=3.0)
        with self.assertRaises(IntegrityError), transaction.atomic():
            Pony.objects.create(pink=3, weight=1.0)
        Pony.objects.bulk_create([
            Pony(pink=3, weight=-1.0),
            Pony(pink=1, weight=-1.0),
            Pony(pink=3, weight=3.0),
        ])

    @skipUnlessDBFeature('supports_table_check_constraints')
    def test_add_constraint_combinable(self):
        app_label = 'test_addconstraint_combinable'
        operations = [
            migrations.CreateModel(
                'Book',
                fields=[
                    ('id', models.AutoField(primary_key=True)),
                    ('read', models.PositiveIntegerField()),
                    ('unread', models.PositiveIntegerField()),
                ],
            ),
        ]
        from_state = self.apply_operations(app_label, ProjectState(), operations)
        constraint = models.CheckConstraint(
            check=models.Q(read=(100 - models.F('unread'))),
            name='test_addconstraint_combinable_sum_100',
        )
        operation = migrations.AddConstraint('Book', constraint)
        to_state = from_state.clone()
        operation.state_forwards(app_label, to_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, from_state, to_state)
        Book = to_state.apps.get_model(app_label, 'Book')
        with self.assertRaises(IntegrityError), transaction.atomic():
            Book.objects.create(read=70, unread=10)
        Book.objects.create(read=70, unread=30)

    @skipUnlessDBFeature('supports_table_check_constraints')
    def test_remove_constraint(self):
        project_state = self.set_up_test_model(""test_removeconstraint"", constraints=[
            models.CheckConstraint(check=models.Q(pink__gt=2), name=""test_remove_constraint_pony_pink_gt_2""),
            models.CheckConstraint(check=models.Q(pink__lt=100), name=""test_remove_constraint_pony_pink_lt_100""),
        ])
        gt_operation = migrations.RemoveConstraint(""Pony"", ""test_remove_constraint_pony_pink_gt_2"")
        self.assertEqual(
            gt_operation.describe(), ""Remove constraint test_remove_constraint_pony_pink_gt_2 from model Pony""
        )
        self.assertEqual(
            gt_operation.migration_name_fragment,
            'remove_pony_test_remove_constraint_pony_pink_gt_2',
        )
        # Test state alteration
        new_state = project_state.clone()
        gt_operation.state_forwards(""test_removeconstraint"", new_state)
        self.assertEqual(len(new_state.models[""test_removeconstraint"", ""pony""].options['constraints']), 1)
        Pony = new_state.apps.get_model(""test_removeconstraint"", ""Pony"")
        self.assertEqual(len(Pony._meta.constraints), 1)
        # Test database alteration
        with connection.schema_editor() as editor:
            gt_operation.database_forwards(""test_removeconstraint"", editor, project_state, new_state)
        Pony.objects.create(pink=1, weight=1.0).delete()
        with self.assertRaises(IntegrityError), transaction.atomic():
            Pony.objects.create(pink=100, weight=1.0)
        # Remove the other one.
        lt_operation = migrations.RemoveConstraint(""Pony"", ""test_remove_constraint_pony_pink_lt_100"")
        lt_operation.state_forwards(""test_removeconstraint"", new_state)
        self.assertEqual(len(new_state.models[""test_removeconstraint"", ""pony""].options['constraints']), 0)
        Pony = new_state.apps.get_model(""test_removeconstraint"", ""Pony"")
        self.assertEqual(len(Pony._meta.constraints), 0)
        with connection.schema_editor() as editor:
            lt_operation.database_forwards(""test_removeconstraint"", editor, project_state, new_state)
        Pony.objects.create(pink=100, weight=1.0).delete()
        # Test reversal
        with connection.schema_editor() as editor:
            gt_operation.database_backwards(""test_removeconstraint"", editor, new_state, project_state)
        with self.assertRaises(IntegrityError), transaction.atomic():
            Pony.objects.create(pink=1, weight=1.0)
        # Test deconstruction
        definition = gt_operation.deconstruct()
        self.assertEqual(definition[0], ""RemoveConstraint"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': ""Pony"", 'name': ""test_remove_constraint_pony_pink_gt_2""})

    def test_add_partial_unique_constraint(self):
        project_state = self.set_up_test_model('test_addpartialuniqueconstraint')
        partial_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            condition=models.Q(weight__gt=5),
            name='test_constraint_pony_pink_for_weight_gt_5_uniq',
        )
        operation = migrations.AddConstraint('Pony', partial_unique_constraint)
        self.assertEqual(
            operation.describe(),
            'Create constraint test_constraint_pony_pink_for_weight_gt_5_uniq '
            'on model Pony'
        )
        # Test the state alteration
        new_state = project_state.clone()
        operation.state_forwards('test_addpartialuniqueconstraint', new_state)
        self.assertEqual(len(new_state.models['test_addpartialuniqueconstraint', 'pony'].options['constraints']), 1)
        Pony = new_state.apps.get_model('test_addpartialuniqueconstraint', 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 1)
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards('test_addpartialuniqueconstraint', editor, project_state, new_state)
        # Test constraint works
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=6.0)
        if connection.features.supports_partial_indexes:
            with self.assertRaises(IntegrityError), transaction.atomic():
                Pony.objects.create(pink=1, weight=7.0)
        else:
            Pony.objects.create(pink=1, weight=7.0)
        # Test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards('test_addpartialuniqueconstraint', editor, new_state, project_state)
        # Test constraint doesn't work
        Pony.objects.create(pink=1, weight=7.0)
        # Test deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'AddConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': 'Pony', 'constraint': partial_unique_constraint})

    def test_remove_partial_unique_constraint(self):
        project_state = self.set_up_test_model('test_removepartialuniqueconstraint', constraints=[
            models.UniqueConstraint(
                fields=['pink'],
                condition=models.Q(weight__gt=5),
                name='test_constraint_pony_pink_for_weight_gt_5_uniq',
            ),
        ])
        gt_operation = migrations.RemoveConstraint('Pony', 'test_constraint_pony_pink_for_weight_gt_5_uniq')
        self.assertEqual(
            gt_operation.describe(), 'Remove constraint test_constraint_pony_pink_for_weight_gt_5_uniq from model Pony'
        )
        # Test state alteration
        new_state = project_state.clone()
        gt_operation.state_forwards('test_removepartialuniqueconstraint', new_state)
        self.assertEqual(len(new_state.models['test_removepartialuniqueconstraint', 'pony'].options['constraints']), 0)
        Pony = new_state.apps.get_model('test_removepartialuniqueconstraint', 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 0)
        # Test database alteration
        with connection.schema_editor() as editor:
            gt_operation.database_forwards('test_removepartialuniqueconstraint', editor, project_state, new_state)
        # Test constraint doesn't work
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=6.0)
        Pony.objects.create(pink=1, weight=7.0).delete()
        # Test reversal
        with connection.schema_editor() as editor:
            gt_operation.database_backwards('test_removepartialuniqueconstraint', editor, new_state, project_state)
        # Test constraint works
        if connection.features.supports_partial_indexes:
            with self.assertRaises(IntegrityError), transaction.atomic():
                Pony.objects.create(pink=1, weight=7.0)
        else:
            Pony.objects.create(pink=1, weight=7.0)
        # Test deconstruction
        definition = gt_operation.deconstruct()
        self.assertEqual(definition[0], 'RemoveConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {
            'model_name': 'Pony',
            'name': 'test_constraint_pony_pink_for_weight_gt_5_uniq',
        })

    def test_add_deferred_unique_constraint(self):
        app_label = 'test_adddeferred_uc'
        project_state = self.set_up_test_model(app_label)
        deferred_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            name='deferred_pink_constraint_add',
            deferrable=models.Deferrable.DEFERRED,
        )
        operation = migrations.AddConstraint('Pony', deferred_unique_constraint)
        self.assertEqual(
            operation.describe(),
            'Create constraint deferred_pink_constraint_add on model Pony',
        )
        # Add constraint.
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 1)
        Pony = new_state.apps.get_model(app_label, 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 1)
        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:
            operation.database_forwards(app_label, editor, project_state, new_state)
        Pony.objects.create(pink=1, weight=4.0)
        if connection.features.supports_deferrable_unique_constraints:
            # Unique constraint is deferred.
            with transaction.atomic():
                obj = Pony.objects.create(pink=1, weight=4.0)
                obj.pink = 2
                obj.save()
            # Constraint behavior can be changed with SET CONSTRAINTS.
            with self.assertRaises(IntegrityError):
                with transaction.atomic(), connection.cursor() as cursor:
                    quoted_name = connection.ops.quote_name(deferred_unique_constraint.name)
                    cursor.execute('SET CONSTRAINTS %s IMMEDIATE' % quoted_name)
                    obj = Pony.objects.create(pink=1, weight=4.0)
                    obj.pink = 3
                    obj.save()
        else:
            self.assertEqual(len(ctx), 0)
            Pony.objects.create(pink=1, weight=4.0)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        # Constraint doesn't work.
        Pony.objects.create(pink=1, weight=4.0)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'AddConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(
            definition[2],
            {'model_name': 'Pony', 'constraint': deferred_unique_constraint},
        )

    def test_remove_deferred_unique_constraint(self):
        app_label = 'test_removedeferred_uc'
        deferred_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            name='deferred_pink_constraint_rm',
            deferrable=models.Deferrable.DEFERRED,
        )
        project_state = self.set_up_test_model(app_label, constraints=[deferred_unique_constraint])
        operation = migrations.RemoveConstraint('Pony', deferred_unique_constraint.name)
        self.assertEqual(
            operation.describe(),
            'Remove constraint deferred_pink_constraint_rm from model Pony',
        )
        # Remove constraint.
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 0)
        Pony = new_state.apps.get_model(app_label, 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 0)
        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:
            operation.database_forwards(app_label, editor, project_state, new_state)
        # Constraint doesn't work.
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=4.0).delete()
        if not connection.features.supports_deferrable_unique_constraints:
            self.assertEqual(len(ctx), 0)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        if connection.features.supports_deferrable_unique_constraints:
            # Unique constraint is deferred.
            with transaction.atomic():
                obj = Pony.objects.create(pink=1, weight=4.0)
                obj.pink = 2
                obj.save()
            # Constraint behavior can be changed with SET CONSTRAINTS.
            with self.assertRaises(IntegrityError):
                with transaction.atomic(), connection.cursor() as cursor:
                    quoted_name = connection.ops.quote_name(deferred_unique_constraint.name)
                    cursor.execute('SET CONSTRAINTS %s IMMEDIATE' % quoted_name)
                    obj = Pony.objects.create(pink=1, weight=4.0)
                    obj.pink = 3
                    obj.save()
        else:
            Pony.objects.create(pink=1, weight=4.0)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'RemoveConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {
            'model_name': 'Pony',
            'name': 'deferred_pink_constraint_rm',
        })

    def test_add_covering_unique_constraint(self):
        app_label = 'test_addcovering_uc'
        project_state = self.set_up_test_model(app_label)
        covering_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            name='covering_pink_constraint_add',
            include=['weight'],
        )
        operation = migrations.AddConstraint('Pony', covering_unique_constraint)
        self.assertEqual(
            operation.describe(),
            'Create constraint covering_pink_constraint_add on model Pony',
        )
        # Add constraint.
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 1)
        Pony = new_state.apps.get_model(app_label, 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 1)
        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:
            operation.database_forwards(app_label, editor, project_state, new_state)
        Pony.objects.create(pink=1, weight=4.0)
        if connection.features.supports_covering_indexes:
            with self.assertRaises(IntegrityError):
                Pony.objects.create(pink=1, weight=4.0)
        else:
            self.assertEqual(len(ctx), 0)
            Pony.objects.create(pink=1, weight=4.0)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        # Constraint doesn't work.
        Pony.objects.create(pink=1, weight=4.0)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'AddConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(
            definition[2],
            {'model_name': 'Pony', 'constraint': covering_unique_constraint},
        )

    def test_remove_covering_unique_constraint(self):
        app_label = 'test_removecovering_uc'
        covering_unique_constraint = models.UniqueConstraint(
            fields=['pink'],
            name='covering_pink_constraint_rm',
            include=['weight'],
        )
        project_state = self.set_up_test_model(app_label, constraints=[covering_unique_constraint])
        operation = migrations.RemoveConstraint('Pony', covering_unique_constraint.name)
        self.assertEqual(
            operation.describe(),
            'Remove constraint covering_pink_constraint_rm from model Pony',
        )
        # Remove constraint.
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 0)
        Pony = new_state.apps.get_model(app_label, 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 0)
        with connection.schema_editor() as editor, CaptureQueriesContext(connection) as ctx:
            operation.database_forwards(app_label, editor, project_state, new_state)
        # Constraint doesn't work.
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=4.0).delete()
        if not connection.features.supports_covering_indexes:
            self.assertEqual(len(ctx), 0)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        if connection.features.supports_covering_indexes:
            with self.assertRaises(IntegrityError):
                Pony.objects.create(pink=1, weight=4.0)
        else:
            Pony.objects.create(pink=1, weight=4.0)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'RemoveConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {
            'model_name': 'Pony',
            'name': 'covering_pink_constraint_rm',
        })

    def test_alter_field_with_func_unique_constraint(self):
        app_label = 'test_alfuncuc'
        constraint_name = f'{app_label}_pony_uq'
        table_name = f'{app_label}_pony'
        project_state = self.set_up_test_model(
            app_label,
            constraints=[models.UniqueConstraint('pink', 'weight', name=constraint_name)]
        )
        operation = migrations.AlterField('Pony', 'pink', models.IntegerField(null=True))
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        if connection.features.supports_expression_indexes:
            self.assertIndexNameExists(table_name, constraint_name)
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        if connection.features.supports_expression_indexes:
            self.assertIndexNameExists(table_name, constraint_name)

    def test_add_func_unique_constraint(self):
        app_label = 'test_adfuncuc'
        constraint_name = f'{app_label}_pony_abs_uq'
        table_name = f'{app_label}_pony'
        project_state = self.set_up_test_model(app_label)
        constraint = models.UniqueConstraint(Abs('weight'), name=constraint_name)
        operation = migrations.AddConstraint('Pony', constraint)
        self.assertEqual(
            operation.describe(),
            'Create constraint test_adfuncuc_pony_abs_uq on model Pony',
        )
        self.assertEqual(
            operation.migration_name_fragment,
            'pony_test_adfuncuc_pony_abs_uq',
        )
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 1)
        self.assertIndexNameNotExists(table_name, constraint_name)
        # Add constraint.
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        Pony = new_state.apps.get_model(app_label, 'Pony')
        Pony.objects.create(weight=4.0)
        if connection.features.supports_expression_indexes:
            self.assertIndexNameExists(table_name, constraint_name)
            with self.assertRaises(IntegrityError):
                Pony.objects.create(weight=-4.0)
        else:
            self.assertIndexNameNotExists(table_name, constraint_name)
            Pony.objects.create(weight=-4.0)
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        self.assertIndexNameNotExists(table_name, constraint_name)
        # Constraint doesn't work.
        Pony.objects.create(weight=-4.0)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'AddConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(
            definition[2],
            {'model_name': 'Pony', 'constraint': constraint},
        )

    def test_remove_func_unique_constraint(self):
        app_label = 'test_rmfuncuc'
        constraint_name = f'{app_label}_pony_abs_uq'
        table_name = f'{app_label}_pony'
        project_state = self.set_up_test_model(app_label, constraints=[
            models.UniqueConstraint(Abs('weight'), name=constraint_name),
        ])
        self.assertTableExists(table_name)
        if connection.features.supports_expression_indexes:
            self.assertIndexNameExists(table_name, constraint_name)
        operation = migrations.RemoveConstraint('Pony', constraint_name)
        self.assertEqual(
            operation.describe(),
            'Remove constraint test_rmfuncuc_pony_abs_uq from model Pony',
        )
        self.assertEqual(
            operation.migration_name_fragment,
            'remove_pony_test_rmfuncuc_pony_abs_uq',
        )
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)
        self.assertEqual(len(new_state.models[app_label, 'pony'].options['constraints']), 0)
        Pony = new_state.apps.get_model(app_label, 'Pony')
        self.assertEqual(len(Pony._meta.constraints), 0)
        # Remove constraint.
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        self.assertIndexNameNotExists(table_name, constraint_name)
        # Constraint doesn't work.
        Pony.objects.create(pink=1, weight=4.0)
        Pony.objects.create(pink=1, weight=-4.0).delete()
        # Reversal.
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        if connection.features.supports_expression_indexes:
            self.assertIndexNameExists(table_name, constraint_name)
            with self.assertRaises(IntegrityError):
                Pony.objects.create(weight=-4.0)
        else:
            self.assertIndexNameNotExists(table_name, constraint_name)
            Pony.objects.create(weight=-4.0)
        # Deconstruction.
        definition = operation.deconstruct()
        self.assertEqual(definition[0], 'RemoveConstraint')
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'model_name': 'Pony', 'name': constraint_name})

    def test_alter_model_options(self):
        """"""
        Tests the AlterModelOptions operation.
        """"""
        project_state = self.set_up_test_model(""test_almoop"")
        # Test the state alteration (no DB alteration to test)
        operation = migrations.AlterModelOptions(""Pony"", {""permissions"": [(""can_groom"", ""Can groom"")]})
        self.assertEqual(operation.describe(), ""Change Meta options on Pony"")
        self.assertEqual(operation.migration_name_fragment, 'alter_pony_options')
        new_state = project_state.clone()
        operation.state_forwards(""test_almoop"", new_state)
        self.assertEqual(len(project_state.models[""test_almoop"", ""pony""].options.get(""permissions"", [])), 0)
        self.assertEqual(len(new_state.models[""test_almoop"", ""pony""].options.get(""permissions"", [])), 1)
        self.assertEqual(new_state.models[""test_almoop"", ""pony""].options[""permissions""][0][0], ""can_groom"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterModelOptions"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'name': ""Pony"", 'options': {""permissions"": [(""can_groom"", ""Can groom"")]}})

    def test_alter_model_options_emptying(self):
        """"""
        The AlterModelOptions operation removes keys from the dict (#23121)
        """"""
        project_state = self.set_up_test_model(""test_almoop"", options=True)
        # Test the state alteration (no DB alteration to test)
        operation = migrations.AlterModelOptions(""Pony"", {})
        self.assertEqual(operation.describe(), ""Change Meta options on Pony"")
        new_state = project_state.clone()
        operation.state_forwards(""test_almoop"", new_state)
        self.assertEqual(len(project_state.models[""test_almoop"", ""pony""].options.get(""permissions"", [])), 1)
        self.assertEqual(len(new_state.models[""test_almoop"", ""pony""].options.get(""permissions"", [])), 0)
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterModelOptions"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'name': ""Pony"", 'options': {}})

    def test_alter_order_with_respect_to(self):
        """"""
        Tests the AlterOrderWithRespectTo operation.
        """"""
        project_state = self.set_up_test_model(""test_alorwrtto"", related_model=True)
        # Test the state alteration
        operation = migrations.AlterOrderWithRespectTo(""Rider"", ""pony"")
        self.assertEqual(operation.describe(), ""Set order_with_respect_to on Rider to pony"")
        self.assertEqual(
            operation.migration_name_fragment,
            'alter_rider_order_with_respect_to',
        )
        new_state = project_state.clone()
        operation.state_forwards(""test_alorwrtto"", new_state)
        self.assertIsNone(
            project_state.models[""test_alorwrtto"", ""rider""].options.get(""order_with_respect_to"", None)
        )
        self.assertEqual(
            new_state.models[""test_alorwrtto"", ""rider""].options.get(""order_with_respect_to"", None),
            ""pony""
        )
        # Make sure there's no matching index
        self.assertColumnNotExists(""test_alorwrtto_rider"", ""_order"")
        # Create some rows before alteration
        rendered_state = project_state.apps
        pony = rendered_state.get_model(""test_alorwrtto"", ""Pony"").objects.create(weight=50)
        rider1 = rendered_state.get_model(""test_alorwrtto"", ""Rider"").objects.create(pony=pony)
        rider1.friend = rider1
        rider1.save()
        rider2 = rendered_state.get_model(""test_alorwrtto"", ""Rider"").objects.create(pony=pony)
        rider2.friend = rider2
        rider2.save()
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_alorwrtto"", editor, project_state, new_state)
        self.assertColumnExists(""test_alorwrtto_rider"", ""_order"")
        # Check for correct value in rows
        updated_riders = new_state.apps.get_model(""test_alorwrtto"", ""Rider"").objects.all()
        self.assertEqual(updated_riders[0]._order, 0)
        self.assertEqual(updated_riders[1]._order, 0)
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_alorwrtto"", editor, new_state, project_state)
        self.assertColumnNotExists(""test_alorwrtto_rider"", ""_order"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""AlterOrderWithRespectTo"")
        self.assertEqual(definition[1], [])
        self.assertEqual(definition[2], {'name': ""Rider"", 'order_with_respect_to': ""pony""})

    def test_alter_model_managers(self):
        """"""
        The managers on a model are set.
        """"""
        project_state = self.set_up_test_model(""test_almoma"")
        # Test the state alteration
        operation = migrations.AlterModelManagers(
            ""Pony"",
            managers=[
                (""food_qs"", FoodQuerySet.as_manager()),
                (""food_mgr"", FoodManager(""a"", ""b"")),
                (""food_mgr_kwargs"", FoodManager(""x"", ""y"", 3, 4)),
            ]
        )
        self.assertEqual(operation.describe(), ""Change managers on Pony"")
        self.assertEqual(operation.migration_name_fragment, 'alter_pony_managers')
        managers = project_state.models[""test_almoma"", ""pony""].managers
        self.assertEqual(managers, [])

        new_state = project_state.clone()
        operation.state_forwards(""test_almoma"", new_state)
        self.assertIn((""test_almoma"", ""pony""), new_state.models)
        managers = new_state.models[""test_almoma"", ""pony""].managers
        self.assertEqual(managers[0][0], ""food_qs"")
        self.assertIsInstance(managers[0][1], models.Manager)
        self.assertEqual(managers[1][0], ""food_mgr"")
        self.assertIsInstance(managers[1][1], FoodManager)
        self.assertEqual(managers[1][1].args, (""a"", ""b"", 1, 2))
        self.assertEqual(managers[2][0], ""food_mgr_kwargs"")
        self.assertIsInstance(managers[2][1], FoodManager)
        self.assertEqual(managers[2][1].args, (""x"", ""y"", 3, 4))
        rendered_state = new_state.apps
        model = rendered_state.get_model('test_almoma', 'pony')
        self.assertIsInstance(model.food_qs, models.Manager)
        self.assertIsInstance(model.food_mgr, FoodManager)
        self.assertIsInstance(model.food_mgr_kwargs, FoodManager)

    def test_alter_model_managers_emptying(self):
        """"""
        The managers on a model are set.
        """"""
        project_state = self.set_up_test_model(""test_almomae"", manager_model=True)
        # Test the state alteration
        operation = migrations.AlterModelManagers(""Food"", managers=[])
        self.assertEqual(operation.describe(), ""Change managers on Food"")
        self.assertIn((""test_almomae"", ""food""), project_state.models)
        managers = project_state.models[""test_almomae"", ""food""].managers
        self.assertEqual(managers[0][0], ""food_qs"")
        self.assertIsInstance(managers[0][1], models.Manager)
        self.assertEqual(managers[1][0], ""food_mgr"")
        self.assertIsInstance(managers[1][1], FoodManager)
        self.assertEqual(managers[1][1].args, (""a"", ""b"", 1, 2))
        self.assertEqual(managers[2][0], ""food_mgr_kwargs"")
        self.assertIsInstance(managers[2][1], FoodManager)
        self.assertEqual(managers[2][1].args, (""x"", ""y"", 3, 4))

        new_state = project_state.clone()
        operation.state_forwards(""test_almomae"", new_state)
        managers = new_state.models[""test_almomae"", ""food""].managers
        self.assertEqual(managers, [])

    def test_alter_fk(self):
        """"""
        Creating and then altering an FK works correctly
        and deals with the pending SQL (#23091)
        """"""
        project_state = self.set_up_test_model(""test_alfk"")
        # Test adding and then altering the FK in one go
        create_operation = migrations.CreateModel(
            name=""Rider"",
            fields=[
                (""id"", models.AutoField(primary_key=True)),
                (""pony"", models.ForeignKey(""Pony"", models.CASCADE)),
            ],
        )
        create_state = project_state.clone()
        create_operation.state_forwards(""test_alfk"", create_state)
        alter_operation = migrations.AlterField(
            model_name='Rider',
            name='pony',
            field=models.ForeignKey(""Pony"", models.CASCADE, editable=False),
        )
        alter_state = create_state.clone()
        alter_operation.state_forwards(""test_alfk"", alter_state)
        with connection.schema_editor() as editor:
            create_operation.database_forwards(""test_alfk"", editor, project_state, create_state)
            alter_operation.database_forwards(""test_alfk"", editor, create_state, alter_state)

    def test_alter_fk_non_fk(self):
        """"""
        Altering an FK to a non-FK works (#23244)
        """"""
        # Test the state alteration
        operation = migrations.AlterField(
            model_name=""Rider"",
            name=""pony"",
            field=models.FloatField(),
        )
        project_state, new_state = self.make_test_state(""test_afknfk"", operation, related_model=True)
        # Test the database alteration
        self.assertColumnExists(""test_afknfk_rider"", ""pony_id"")
        self.assertColumnNotExists(""test_afknfk_rider"", ""pony"")
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_afknfk"", editor, project_state, new_state)
        self.assertColumnExists(""test_afknfk_rider"", ""pony"")
        self.assertColumnNotExists(""test_afknfk_rider"", ""pony_id"")
        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_afknfk"", editor, new_state, project_state)
        self.assertColumnExists(""test_afknfk_rider"", ""pony_id"")
        self.assertColumnNotExists(""test_afknfk_rider"", ""pony"")

    def test_run_sql(self):
        """"""
        Tests the RunSQL operation.
        """"""
        project_state = self.set_up_test_model(""test_runsql"")
        # Create the operation
        operation = migrations.RunSQL(
            # Use a multi-line string with a comment to test splitting on SQLite and MySQL respectively
            ""CREATE TABLE i_love_ponies (id int, special_thing varchar(15));\n""
            ""INSERT INTO i_love_ponies (id, special_thing) VALUES (1, 'i love ponies'); -- this is magic!\n""
            ""INSERT INTO i_love_ponies (id, special_thing) VALUES (2, 'i love django');\n""
            ""UPDATE i_love_ponies SET special_thing = 'Ponies' WHERE special_thing LIKE '%%ponies';""
            ""UPDATE i_love_ponies SET special_thing = 'Django' WHERE special_thing LIKE '%django';"",

            # Run delete queries to test for parameter substitution failure
            # reported in #23426
            ""DELETE FROM i_love_ponies WHERE special_thing LIKE '%Django%';""
            ""DELETE FROM i_love_ponies WHERE special_thing LIKE '%%Ponies%%';""
            ""DROP TABLE i_love_ponies"",

            state_operations=[migrations.CreateModel(""SomethingElse"", [(""id"", models.AutoField(primary_key=True))])],
        )
        self.assertEqual(operation.describe(), ""Raw SQL operation"")
        # Test the state alteration
        new_state = project_state.clone()
        operation.state_forwards(""test_runsql"", new_state)
        self.assertEqual(len(new_state.models[""test_runsql"", ""somethingelse""].fields), 1)
        # Make sure there's no table
        self.assertTableNotExists(""i_love_ponies"")
        # Test SQL collection
        with connection.schema_editor(collect_sql=True) as editor:
            operation.database_forwards(""test_runsql"", editor, project_state, new_state)
            self.assertIn(""LIKE '%%ponies';"", ""\n"".join(editor.collected_sql))
            operation.database_backwards(""test_runsql"", editor, project_state, new_state)
            self.assertIn(""LIKE '%%Ponies%%';"", ""\n"".join(editor.collected_sql))
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runsql"", editor, project_state, new_state)
        self.assertTableExists(""i_love_ponies"")
        # Make sure all the SQL was processed
        with connection.cursor() as cursor:
            cursor.execute(""SELECT COUNT(*) FROM i_love_ponies"")
            self.assertEqual(cursor.fetchall()[0][0], 2)
            cursor.execute(""SELECT COUNT(*) FROM i_love_ponies WHERE special_thing = 'Django'"")
            self.assertEqual(cursor.fetchall()[0][0], 1)
            cursor.execute(""SELECT COUNT(*) FROM i_love_ponies WHERE special_thing = 'Ponies'"")
            self.assertEqual(cursor.fetchall()[0][0], 1)
        # And test reversal
        self.assertTrue(operation.reversible)
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_runsql"", editor, new_state, project_state)
        self.assertTableNotExists(""i_love_ponies"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RunSQL"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""reverse_sql"", ""sql"", ""state_operations""])
        # And elidable reduction
        self.assertIs(False, operation.reduce(operation, []))
        elidable_operation = migrations.RunSQL('SELECT 1 FROM void;', elidable=True)
        self.assertEqual(elidable_operation.reduce(operation, []), [operation])

    def test_run_sql_params(self):
        """"""
        #23426 - RunSQL should accept parameters.
        """"""
        project_state = self.set_up_test_model(""test_runsql"")
        # Create the operation
        operation = migrations.RunSQL(
            [""CREATE TABLE i_love_ponies (id int, special_thing varchar(15));""],
            [""DROP TABLE i_love_ponies""],
        )
        param_operation = migrations.RunSQL(
            # forwards
            (
                ""INSERT INTO i_love_ponies (id, special_thing) VALUES (1, 'Django');"",
                [""INSERT INTO i_love_ponies (id, special_thing) VALUES (2, %s);"", ['Ponies']],
                (""INSERT INTO i_love_ponies (id, special_thing) VALUES (%s, %s);"", (3, 'Python',)),
            ),
            # backwards
            [
                ""DELETE FROM i_love_ponies WHERE special_thing = 'Django';"",
                [""DELETE FROM i_love_ponies WHERE special_thing = 'Ponies';"", None],
                (""DELETE FROM i_love_ponies WHERE id = %s OR special_thing = %s;"", [3, 'Python']),
            ]
        )

        # Make sure there's no table
        self.assertTableNotExists(""i_love_ponies"")
        new_state = project_state.clone()
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runsql"", editor, project_state, new_state)

        # Test parameter passing
        with connection.schema_editor() as editor:
            param_operation.database_forwards(""test_runsql"", editor, project_state, new_state)
        # Make sure all the SQL was processed
        with connection.cursor() as cursor:
            cursor.execute(""SELECT COUNT(*) FROM i_love_ponies"")
            self.assertEqual(cursor.fetchall()[0][0], 3)

        with connection.schema_editor() as editor:
            param_operation.database_backwards(""test_runsql"", editor, new_state, project_state)
        with connection.cursor() as cursor:
            cursor.execute(""SELECT COUNT(*) FROM i_love_ponies"")
            self.assertEqual(cursor.fetchall()[0][0], 0)

        # And test reversal
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_runsql"", editor, new_state, project_state)
        self.assertTableNotExists(""i_love_ponies"")

    def test_run_sql_params_invalid(self):
        """"""
        #23426 - RunSQL should fail when a list of statements with an incorrect
        number of tuples is given.
        """"""
        project_state = self.set_up_test_model(""test_runsql"")
        new_state = project_state.clone()
        operation = migrations.RunSQL(
            # forwards
            [
                [""INSERT INTO foo (bar) VALUES ('buz');""]
            ],
            # backwards
            (
                (""DELETE FROM foo WHERE bar = 'buz';"", 'invalid', 'parameter count'),
            ),
        )

        with connection.schema_editor() as editor:
            with self.assertRaisesMessage(ValueError, ""Expected a 2-tuple but got 1""):
                operation.database_forwards(""test_runsql"", editor, project_state, new_state)

        with connection.schema_editor() as editor:
            with self.assertRaisesMessage(ValueError, ""Expected a 2-tuple but got 3""):
                operation.database_backwards(""test_runsql"", editor, new_state, project_state)

    def test_run_sql_noop(self):
        """"""
        #24098 - Tests no-op RunSQL operations.
        """"""
        operation = migrations.RunSQL(migrations.RunSQL.noop, migrations.RunSQL.noop)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runsql"", editor, None, None)
            operation.database_backwards(""test_runsql"", editor, None, None)

    def test_run_sql_add_missing_semicolon_on_collect_sql(self):
        project_state = self.set_up_test_model('test_runsql')
        new_state = project_state.clone()
        tests = [
            'INSERT INTO test_runsql_pony (pink, weight) VALUES (1, 1);\n',
            'INSERT INTO test_runsql_pony (pink, weight) VALUES (1, 1)\n',
        ]
        for sql in tests:
            with self.subTest(sql=sql):
                operation = migrations.RunSQL(sql, migrations.RunPython.noop)
                with connection.schema_editor(collect_sql=True) as editor:
                    operation.database_forwards('test_runsql', editor, project_state, new_state)
                    collected_sql = '\n'.join(editor.collected_sql)
                    self.assertEqual(collected_sql.count(';'), 1)

    def test_run_python(self):
        """"""
        Tests the RunPython operation
        """"""

        project_state = self.set_up_test_model(""test_runpython"", mti_model=True)

        # Create the operation
        def inner_method(models, schema_editor):
            Pony = models.get_model(""test_runpython"", ""Pony"")
            Pony.objects.create(pink=1, weight=3.55)
            Pony.objects.create(weight=5)

        def inner_method_reverse(models, schema_editor):
            Pony = models.get_model(""test_runpython"", ""Pony"")
            Pony.objects.filter(pink=1, weight=3.55).delete()
            Pony.objects.filter(weight=5).delete()
        operation = migrations.RunPython(inner_method, reverse_code=inner_method_reverse)
        self.assertEqual(operation.describe(), ""Raw Python operation"")
        # Test the state alteration does nothing
        new_state = project_state.clone()
        operation.state_forwards(""test_runpython"", new_state)
        self.assertEqual(new_state, project_state)
        # Test the database alteration
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""Pony"").objects.count(), 0)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runpython"", editor, project_state, new_state)
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""Pony"").objects.count(), 2)
        # Now test reversal
        self.assertTrue(operation.reversible)
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_runpython"", editor, project_state, new_state)
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""Pony"").objects.count(), 0)
        # Now test we can't use a string
        with self.assertRaisesMessage(ValueError, 'RunPython must be supplied with a callable'):
            migrations.RunPython(""print 'ahahaha'"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RunPython"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""code"", ""reverse_code""])

        # Also test reversal fails, with an operation identical to above but without reverse_code set
        no_reverse_operation = migrations.RunPython(inner_method)
        self.assertFalse(no_reverse_operation.reversible)
        with connection.schema_editor() as editor:
            no_reverse_operation.database_forwards(""test_runpython"", editor, project_state, new_state)
            with self.assertRaises(NotImplementedError):
                no_reverse_operation.database_backwards(""test_runpython"", editor, new_state, project_state)
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""Pony"").objects.count(), 2)

        def create_ponies(models, schema_editor):
            Pony = models.get_model(""test_runpython"", ""Pony"")
            pony1 = Pony.objects.create(pink=1, weight=3.55)
            self.assertIsNot(pony1.pk, None)
            pony2 = Pony.objects.create(weight=5)
            self.assertIsNot(pony2.pk, None)
            self.assertNotEqual(pony1.pk, pony2.pk)

        operation = migrations.RunPython(create_ponies)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runpython"", editor, project_state, new_state)
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""Pony"").objects.count(), 4)
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""RunPython"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""code""])

        def create_shetlandponies(models, schema_editor):
            ShetlandPony = models.get_model(""test_runpython"", ""ShetlandPony"")
            pony1 = ShetlandPony.objects.create(weight=4.0)
            self.assertIsNot(pony1.pk, None)
            pony2 = ShetlandPony.objects.create(weight=5.0)
            self.assertIsNot(pony2.pk, None)
            self.assertNotEqual(pony1.pk, pony2.pk)

        operation = migrations.RunPython(create_shetlandponies)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runpython"", editor, project_state, new_state)
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""Pony"").objects.count(), 6)
        self.assertEqual(project_state.apps.get_model(""test_runpython"", ""ShetlandPony"").objects.count(), 2)
        # And elidable reduction
        self.assertIs(False, operation.reduce(operation, []))
        elidable_operation = migrations.RunPython(inner_method, elidable=True)
        self.assertEqual(elidable_operation.reduce(operation, []), [operation])

    def test_run_python_atomic(self):
        """"""
        Tests the RunPython operation correctly handles the ""atomic"" keyword
        """"""
        project_state = self.set_up_test_model(""test_runpythonatomic"", mti_model=True)

        def inner_method(models, schema_editor):
            Pony = models.get_model(""test_runpythonatomic"", ""Pony"")
            Pony.objects.create(pink=1, weight=3.55)
            raise ValueError(""Adrian hates ponies."")

        # Verify atomicity when applying.
        atomic_migration = Migration(""test"", ""test_runpythonatomic"")
        atomic_migration.operations = [migrations.RunPython(inner_method, reverse_code=inner_method)]
        non_atomic_migration = Migration(""test"", ""test_runpythonatomic"")
        non_atomic_migration.operations = [migrations.RunPython(inner_method, reverse_code=inner_method, atomic=False)]
        # If we're a fully-transactional database, both versions should rollback
        if connection.features.can_rollback_ddl:
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    atomic_migration.apply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    non_atomic_migration.apply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
        # Otherwise, the non-atomic operation should leave a row there
        else:
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    atomic_migration.apply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    non_atomic_migration.apply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 1)
        # Reset object count to zero and verify atomicity when unapplying.
        project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.all().delete()
        # On a fully-transactional database, both versions rollback.
        if connection.features.can_rollback_ddl:
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    atomic_migration.unapply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    non_atomic_migration.unapply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
        # Otherwise, the non-atomic operation leaves a row there.
        else:
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    atomic_migration.unapply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 0)
            with self.assertRaises(ValueError):
                with connection.schema_editor() as editor:
                    non_atomic_migration.unapply(project_state, editor)
            self.assertEqual(project_state.apps.get_model(""test_runpythonatomic"", ""Pony"").objects.count(), 1)
        # Verify deconstruction.
        definition = non_atomic_migration.operations[0].deconstruct()
        self.assertEqual(definition[0], ""RunPython"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""atomic"", ""code"", ""reverse_code""])

    def test_run_python_related_assignment(self):
        """"""
        #24282 - Model changes to a FK reverse side update the model
        on the FK side as well.
        """"""

        def inner_method(models, schema_editor):
            Author = models.get_model(""test_authors"", ""Author"")
            Book = models.get_model(""test_books"", ""Book"")
            author = Author.objects.create(name=""Hemingway"")
            Book.objects.create(title=""Old Man and The Sea"", author=author)

        create_author = migrations.CreateModel(
            ""Author"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""name"", models.CharField(max_length=100)),
            ],
            options={},
        )
        create_book = migrations.CreateModel(
            ""Book"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""title"", models.CharField(max_length=100)),
                (""author"", models.ForeignKey(""test_authors.Author"", models.CASCADE))
            ],
            options={},
        )
        add_hometown = migrations.AddField(
            ""Author"",
            ""hometown"",
            models.CharField(max_length=100),
        )
        create_old_man = migrations.RunPython(inner_method, inner_method)

        project_state = ProjectState()
        new_state = project_state.clone()
        with connection.schema_editor() as editor:
            create_author.state_forwards(""test_authors"", new_state)
            create_author.database_forwards(""test_authors"", editor, project_state, new_state)
        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            create_book.state_forwards(""test_books"", new_state)
            create_book.database_forwards(""test_books"", editor, project_state, new_state)
        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            add_hometown.state_forwards(""test_authors"", new_state)
            add_hometown.database_forwards(""test_authors"", editor, project_state, new_state)
        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            create_old_man.state_forwards(""test_books"", new_state)
            create_old_man.database_forwards(""test_books"", editor, project_state, new_state)

    def test_model_with_bigautofield(self):
        """"""
        A model with BigAutoField can be created.
        """"""
        def create_data(models, schema_editor):
            Author = models.get_model(""test_author"", ""Author"")
            Book = models.get_model(""test_book"", ""Book"")
            author1 = Author.objects.create(name=""Hemingway"")
            Book.objects.create(title=""Old Man and The Sea"", author=author1)
            Book.objects.create(id=2 ** 33, title=""A farewell to arms"", author=author1)

            author2 = Author.objects.create(id=2 ** 33, name=""Remarque"")
            Book.objects.create(title=""All quiet on the western front"", author=author2)
            Book.objects.create(title=""Arc de Triomphe"", author=author2)

        create_author = migrations.CreateModel(
            ""Author"",
            [
                (""id"", models.BigAutoField(primary_key=True)),
                (""name"", models.CharField(max_length=100)),
            ],
            options={},
        )
        create_book = migrations.CreateModel(
            ""Book"",
            [
                (""id"", models.BigAutoField(primary_key=True)),
                (""title"", models.CharField(max_length=100)),
                (""author"", models.ForeignKey(to=""test_author.Author"", on_delete=models.CASCADE))
            ],
            options={},
        )
        fill_data = migrations.RunPython(create_data)

        project_state = ProjectState()
        new_state = project_state.clone()
        with connection.schema_editor() as editor:
            create_author.state_forwards(""test_author"", new_state)
            create_author.database_forwards(""test_author"", editor, project_state, new_state)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            create_book.state_forwards(""test_book"", new_state)
            create_book.database_forwards(""test_book"", editor, project_state, new_state)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            fill_data.state_forwards(""fill_data"", new_state)
            fill_data.database_forwards(""fill_data"", editor, project_state, new_state)

    def _test_autofield_foreignfield_growth(self, source_field, target_field, target_value):
        """"""
        A field may be migrated in the following ways:

        - AutoField to BigAutoField
        - SmallAutoField to AutoField
        - SmallAutoField to BigAutoField
        """"""
        def create_initial_data(models, schema_editor):
            Article = models.get_model(""test_article"", ""Article"")
            Blog = models.get_model(""test_blog"", ""Blog"")
            blog = Blog.objects.create(name=""web development done right"")
            Article.objects.create(name=""Frameworks"", blog=blog)
            Article.objects.create(name=""Programming Languages"", blog=blog)

        def create_big_data(models, schema_editor):
            Article = models.get_model(""test_article"", ""Article"")
            Blog = models.get_model(""test_blog"", ""Blog"")
            blog2 = Blog.objects.create(name=""Frameworks"", id=target_value)
            Article.objects.create(name=""Django"", blog=blog2)
            Article.objects.create(id=target_value, name=""Django2"", blog=blog2)

        create_blog = migrations.CreateModel(
            ""Blog"",
            [
                (""id"", source_field(primary_key=True)),
                (""name"", models.CharField(max_length=100)),
            ],
            options={},
        )
        create_article = migrations.CreateModel(
            ""Article"",
            [
                (""id"", source_field(primary_key=True)),
                (""blog"", models.ForeignKey(to=""test_blog.Blog"", on_delete=models.CASCADE)),
                (""name"", models.CharField(max_length=100)),
                (""data"", models.TextField(default="""")),
            ],
            options={},
        )
        fill_initial_data = migrations.RunPython(create_initial_data, create_initial_data)
        fill_big_data = migrations.RunPython(create_big_data, create_big_data)

        grow_article_id = migrations.AlterField('Article', 'id', target_field(primary_key=True))
        grow_blog_id = migrations.AlterField('Blog', 'id', target_field(primary_key=True))

        project_state = ProjectState()
        new_state = project_state.clone()
        with connection.schema_editor() as editor:
            create_blog.state_forwards(""test_blog"", new_state)
            create_blog.database_forwards(""test_blog"", editor, project_state, new_state)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            create_article.state_forwards(""test_article"", new_state)
            create_article.database_forwards(""test_article"", editor, project_state, new_state)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            fill_initial_data.state_forwards(""fill_initial_data"", new_state)
            fill_initial_data.database_forwards(""fill_initial_data"", editor, project_state, new_state)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            grow_article_id.state_forwards(""test_article"", new_state)
            grow_article_id.database_forwards(""test_article"", editor, project_state, new_state)

        state = new_state.clone()
        article = state.apps.get_model(""test_article.Article"")
        self.assertIsInstance(article._meta.pk, target_field)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            grow_blog_id.state_forwards(""test_blog"", new_state)
            grow_blog_id.database_forwards(""test_blog"", editor, project_state, new_state)

        state = new_state.clone()
        blog = state.apps.get_model(""test_blog.Blog"")
        self.assertIsInstance(blog._meta.pk, target_field)

        project_state = new_state
        new_state = new_state.clone()
        with connection.schema_editor() as editor:
            fill_big_data.state_forwards(""fill_big_data"", new_state)
            fill_big_data.database_forwards(""fill_big_data"", editor, project_state, new_state)

    def test_autofield__bigautofield_foreignfield_growth(self):
        """"""A field may be migrated from AutoField to BigAutoField.""""""
        self._test_autofield_foreignfield_growth(
            models.AutoField,
            models.BigAutoField,
            2 ** 33,
        )

    def test_smallfield_autofield_foreignfield_growth(self):
        """"""A field may be migrated from SmallAutoField to AutoField.""""""
        self._test_autofield_foreignfield_growth(
            models.SmallAutoField,
            models.AutoField,
            2 ** 22,
        )

    def test_smallfield_bigautofield_foreignfield_growth(self):
        """"""A field may be migrated from SmallAutoField to BigAutoField.""""""
        self._test_autofield_foreignfield_growth(
            models.SmallAutoField,
            models.BigAutoField,
            2 ** 33,
        )

    def test_run_python_noop(self):
        """"""
        #24098 - Tests no-op RunPython operations.
        """"""
        project_state = ProjectState()
        new_state = project_state.clone()
        operation = migrations.RunPython(migrations.RunPython.noop, migrations.RunPython.noop)
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_runpython"", editor, project_state, new_state)
            operation.database_backwards(""test_runpython"", editor, new_state, project_state)

    def test_separate_database_and_state(self):
        """"""
        Tests the SeparateDatabaseAndState operation.
        """"""
        project_state = self.set_up_test_model(""test_separatedatabaseandstate"")
        # Create the operation
        database_operation = migrations.RunSQL(
            ""CREATE TABLE i_love_ponies (id int, special_thing int);"",
            ""DROP TABLE i_love_ponies;""
        )
        state_operation = migrations.CreateModel(""SomethingElse"", [(""id"", models.AutoField(primary_key=True))])
        operation = migrations.SeparateDatabaseAndState(
            state_operations=[state_operation],
            database_operations=[database_operation]
        )
        self.assertEqual(operation.describe(), ""Custom state/database change combination"")
        # Test the state alteration
        new_state = project_state.clone()
        operation.state_forwards(""test_separatedatabaseandstate"", new_state)
        self.assertEqual(len(new_state.models[""test_separatedatabaseandstate"", ""somethingelse""].fields), 1)
        # Make sure there's no table
        self.assertTableNotExists(""i_love_ponies"")
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(""test_separatedatabaseandstate"", editor, project_state, new_state)
        self.assertTableExists(""i_love_ponies"")
        # And test reversal
        self.assertTrue(operation.reversible)
        with connection.schema_editor() as editor:
            operation.database_backwards(""test_separatedatabaseandstate"", editor, new_state, project_state)
        self.assertTableNotExists(""i_love_ponies"")
        # And deconstruction
        definition = operation.deconstruct()
        self.assertEqual(definition[0], ""SeparateDatabaseAndState"")
        self.assertEqual(definition[1], [])
        self.assertEqual(sorted(definition[2]), [""database_operations"", ""state_operations""])

    def test_separate_database_and_state2(self):
        """"""
        A complex SeparateDatabaseAndState operation: Multiple operations both
        for state and database. Verify the state dependencies within each list
        and that state ops don't affect the database.
        """"""
        app_label = ""test_separatedatabaseandstate2""
        project_state = self.set_up_test_model(app_label)
        # Create the operation
        database_operations = [
            migrations.CreateModel(
                ""ILovePonies"",
                [(""id"", models.AutoField(primary_key=True))],
                options={""db_table"": ""iloveponies""},
            ),
            migrations.CreateModel(
                ""ILoveMorePonies"",
                # We use IntegerField and not AutoField because
                # the model is going to be deleted immediately
                # and with an AutoField this fails on Oracle
                [(""id"", models.IntegerField(primary_key=True))],
                options={""db_table"": ""ilovemoreponies""},
            ),
            migrations.DeleteModel(""ILoveMorePonies""),
            migrations.CreateModel(
                ""ILoveEvenMorePonies"",
                [(""id"", models.AutoField(primary_key=True))],
                options={""db_table"": ""iloveevenmoreponies""},
            ),
        ]
        state_operations = [
            migrations.CreateModel(
                ""SomethingElse"",
                [(""id"", models.AutoField(primary_key=True))],
                options={""db_table"": ""somethingelse""},
            ),
            migrations.DeleteModel(""SomethingElse""),
            migrations.CreateModel(
                ""SomethingCompletelyDifferent"",
                [(""id"", models.AutoField(primary_key=True))],
                options={""db_table"": ""somethingcompletelydifferent""},
            ),
        ]
        operation = migrations.SeparateDatabaseAndState(
            state_operations=state_operations,
            database_operations=database_operations,
        )
        # Test the state alteration
        new_state = project_state.clone()
        operation.state_forwards(app_label, new_state)

        def assertModelsAndTables(after_db):
            # Tables and models exist, or don't, as they should:
            self.assertNotIn((app_label, ""somethingelse""), new_state.models)
            self.assertEqual(len(new_state.models[app_label, ""somethingcompletelydifferent""].fields), 1)
            self.assertNotIn((app_label, ""iloveponiesonies""), new_state.models)
            self.assertNotIn((app_label, ""ilovemoreponies""), new_state.models)
            self.assertNotIn((app_label, ""iloveevenmoreponies""), new_state.models)
            self.assertTableNotExists(""somethingelse"")
            self.assertTableNotExists(""somethingcompletelydifferent"")
            self.assertTableNotExists(""ilovemoreponies"")
            if after_db:
                self.assertTableExists(""iloveponies"")
                self.assertTableExists(""iloveevenmoreponies"")
            else:
                self.assertTableNotExists(""iloveponies"")
                self.assertTableNotExists(""iloveevenmoreponies"")

        assertModelsAndTables(after_db=False)
        # Test the database alteration
        with connection.schema_editor() as editor:
            operation.database_forwards(app_label, editor, project_state, new_state)
        assertModelsAndTables(after_db=True)
        # And test reversal
        self.assertTrue(operation.reversible)
        with connection.schema_editor() as editor:
            operation.database_backwards(app_label, editor, new_state, project_state)
        assertModelsAndTables(after_db=False)",1,334 2000 40 2001 41 58 648 348 2002 40 2003 41 58 648 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1501 41 41 44 93 44 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 621 2014 61 2015 40 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2018 44 648 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1502 41 621 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 93 41 621 2004 61 2005 46 2006 40 648 44 2020 61 91 93 44 2031 61 91 40 648 44 2007 46 2032 40 41 41 93 41 2028 61 2004 46 2029 40 41 2003 46 2033 40 648 44 2028 91 1502 93 41 348 2034 40 2003 41 58 497 2003 46 2035 40 2036 44 648 41 58 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2037 40 41 41 44 40 648 44 2007 46 2010 40 349 61 1501 41 41 44 93 44 41 348 2038 40 2003 41 58 2039 61 648 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 648 44 648 44 41 44 41 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 648 44 648 44 41 44 41 2039 61 648 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 2041 44 2041 44 41 44 41 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 2041 44 648 44 41 44 41 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 2041 44 648 44 41 44 41 2039 61 648 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 2007 46 2042 44 2007 46 2042 44 41 44 41 2039 61 648 497 2003 46 2035 40 2036 44 2039 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2040 61 40 2043 44 2043 44 41 44 41 348 2044 40 2003 41 58 497 2003 46 2035 40 2036 44 648 41 58 2005 46 2006 40 648 44 2020 61 91 93 44 2031 61 91 40 648 44 2007 46 2032 40 41 41 44 40 648 44 2007 46 2032 40 41 41 44 93 44 41 348 2045 40 2003 41 58 648 2046 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1501 41 41 44 93 44 41 2047 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1501 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 93 44 41 2050 61 2005 46 2051 40 648 44 91 40 648 44 648 41 44 93 44 41 621 2014 61 2015 40 41 2003 46 2021 40 648 41 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2016 61 2014 46 335 40 41 2046 46 2017 40 648 44 2016 41 2046 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 44 2016 61 2016 44 2016 46 335 40 41 2047 46 2017 40 648 44 2016 41 2047 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 44 2016 61 2016 44 2016 46 335 40 41 2050 46 2017 40 648 44 2016 41 2050 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2003 46 2026 40 648 41 348 2052 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2054 40 648 44 2055 61 648 41 41 93 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 621 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2003 46 2026 40 648 41 2003 46 2056 40 648 44 648 41 621 497 2057 40 41 58 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2061 61 2016 46 2059 46 2060 40 648 44 648 41 2062 61 2061 46 2063 46 2064 40 41 2065 61 2058 46 2063 46 2064 40 2066 61 302 44 2067 61 1502 41 2068 61 2058 46 2063 46 2064 40 2066 61 304 44 2067 61 1502 41 2062 46 2069 46 2070 40 2065 44 2068 41 2003 46 2011 40 2062 46 2069 46 2071 40 41 44 1502 41 2062 46 2069 46 2072 40 41 46 353 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 2003 46 2021 40 648 41 348 2073 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2074 40 648 44 2007 46 2049 44 2075 61 304 44 2009 61 304 44 2076 61 648 44 2077 61 302 44 41 41 44 40 648 44 2007 46 2010 40 349 61 1501 41 41 44 93 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 348 2079 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2006 40 648 44 91 93 44 2080 61 123 648 58 304 125 44 2040 61 40 648 44 41 44 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2021 40 648 41 2003 46 2026 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 44 648 44 648 93 41 348 2081 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2006 40 648 44 91 93 44 2080 61 123 648 58 304 125 44 2040 61 40 648 44 41 44 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2021 40 648 41 2003 46 2026 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 64 2082 40 648 41 348 2083 40 2003 41 58 2084 61 2007 46 2085 40 2086 61 1502 41 2087 61 2007 46 2088 40 2089 61 2084 44 2018 61 648 41 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1502 41 41 44 93 44 2080 61 123 648 58 91 2087 93 125 44 41 621 2014 61 2015 40 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 621 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 497 2022 46 2090 40 41 311 2090 58 497 2003 46 2091 40 2092 41 58 2090 46 2093 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 91 648 93 91 648 93 44 91 2087 93 41 348 2094 40 2003 41 58 2095 61 2007 46 2096 40 2020 61 91 648 93 44 2097 61 2007 46 2085 40 2098 61 1502 41 44 2018 61 648 44 41 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1502 41 41 44 40 648 44 2007 46 2099 40 41 41 44 93 44 2080 61 123 648 58 91 2095 93 125 44 41 621 2014 61 2015 40 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 621 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 621 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 392 2022 46 2100 46 2101 58 497 2003 46 2091 40 2092 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 360 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 91 648 93 91 648 93 44 91 2095 93 41 348 2102 40 2003 41 58 2103 61 2007 46 2096 40 2020 61 91 648 93 44 2018 61 648 44 2104 61 2007 46 2105 46 2106 44 41 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1502 41 41 44 93 44 2080 61 123 648 58 91 2103 93 125 44 41 2014 61 2015 40 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 2003 46 2021 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2058 46 2063 46 2064 40 2066 61 1501 41 392 2022 46 2100 46 2107 58 621 497 2108 46 2057 40 41 58 2109 61 2058 46 2063 46 2064 40 2066 61 1501 41 2109 46 2066 61 1502 2109 46 2110 40 41 621 497 2003 46 2091 40 2092 41 58 497 2108 46 2057 40 41 44 2022 46 2090 40 41 311 2090 58 2111 61 2022 46 2112 46 2113 40 2103 46 2018 41 2090 46 2093 40 648 37 2111 41 2109 61 2058 46 2063 46 2064 40 2066 61 1501 41 2109 46 2066 61 1502 2109 46 2110 40 41 360 58 2058 46 2063 46 2064 40 2066 61 1501 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 91 648 93 91 648 93 44 91 2103 93 44 41 64 2082 40 648 41 348 2114 40 2003 41 58 2115 61 2007 46 2096 40 2020 61 91 648 93 44 399 61 91 648 93 44 2018 61 648 44 41 2004 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 349 61 1502 41 41 44 40 648 44 2007 46 2099 40 41 41 44 93 44 2080 61 123 648 58 91 2115 93 125 44 41 2014 61 2015 40 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 2003 46 2021 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 497 2003 46 2091 40 2092 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 91 648 93 91 648 93 44 91 2115 93 44 41 348 2116 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 93 44 2031 61 91 40 648 44 2117 46 2118 40 41 41 44 40 648 44 2119 40 648 44 648 41 41 44 40 648 44 2119 40 648 44 648 44 1502 44 1502 41 41 44 93 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 2031 61 2016 46 2007 91 648 44 648 93 46 2031 2003 46 2011 40 2031 91 1500 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1500 93 91 1501 93 44 2007 46 2032 41 2003 46 2011 40 2031 91 1501 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1501 93 91 1501 93 44 2119 41 2003 46 2011 40 2031 91 1501 93 91 1501 93 46 2121 44 40 648 44 648 44 1501 44 1502 41 41 2003 46 2011 40 2031 91 1502 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1502 93 91 1501 93 44 2119 41 2003 46 2011 40 2031 91 1502 93 91 1501 93 46 2121 44 40 648 44 648 44 1502 44 1502 41 41 348 2122 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2123 40 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2033 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2026 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2021 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2026 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 411 40 2028 91 1502 93 41 44 91 648 93 41 348 2124 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2125 61 304 41 621 2004 61 2005 46 2123 40 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2014 46 2007 41 2003 46 2033 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2026 40 648 41 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 348 2126 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2127 61 304 41 621 2004 61 2005 46 2123 40 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2014 46 2007 41 2003 46 2033 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2026 40 648 41 2003 46 2026 40 648 41 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2026 40 648 41 2003 46 2026 40 648 41 2003 46 2128 40 648 44 648 41 348 2129 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2130 61 304 41 621 2004 61 2005 46 2131 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 621 2003 46 2078 40 40 648 44 648 41 44 2014 46 2007 41 2003 46 2033 40 40 648 44 648 41 44 2014 46 2007 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 621 2016 61 2014 46 335 40 41 2135 61 2022 46 2100 46 2136 2016 61 2003 46 2137 40 648 44 2016 44 91 2004 93 44 2057 61 2135 41 621 2003 46 2033 40 40 648 44 648 41 44 2016 46 2007 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2139 44 648 44 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 392 2022 46 2100 46 2132 58 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 621 2140 61 2003 46 2141 40 648 44 2014 44 91 2004 93 44 2057 61 2135 41 621 2003 46 2078 40 40 648 44 648 41 44 2140 46 2007 41 2003 46 2033 40 40 648 44 648 41 44 2140 46 2007 41 2003 46 2011 40 2140 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2139 44 648 44 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 125 41 348 2142 40 2003 41 58 648 2143 61 2015 40 41 2143 46 2144 40 2145 40 648 44 648 44 91 93 41 41 2004 61 2005 46 2131 40 648 44 648 41 2004 46 2017 40 648 44 2143 41 2003 46 2033 40 648 44 2143 46 2146 41 2003 46 2033 40 40 648 44 648 41 44 2143 46 2007 41 2003 46 2078 40 40 648 44 648 41 44 2143 46 2007 41 621 2059 61 2143 46 2059 2004 61 2005 46 2131 40 648 44 648 41 2004 46 2017 40 648 44 2143 41 2003 46 2147 40 2143 46 2059 44 2059 41 2003 46 2033 40 40 648 44 648 41 44 2143 46 2007 41 2003 46 2078 40 40 648 44 648 41 44 2143 46 2007 41 348 2148 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2130 61 304 41 621 2004 61 2005 46 2131 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2033 40 40 648 44 648 41 44 2016 46 2007 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2011 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2139 41 2149 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2147 40 2149 46 2150 46 2151 40 648 41 46 2138 46 2139 44 2149 41 621 2003 46 2026 40 648 41 2003 46 2021 40 648 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 2135 61 2022 46 2100 46 2136 497 2022 46 2023 40 2057 61 2135 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 392 2022 46 2100 46 2132 58 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 621 497 2022 46 2023 40 2057 61 2135 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 348 2152 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2130 61 304 44 2127 61 304 41 621 2004 61 2005 46 2131 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2033 40 40 648 44 648 41 44 2016 46 2007 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 621 2003 46 2011 40 2014 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2139 44 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2139 44 41 621 2003 46 2026 40 648 41 2003 46 2021 40 648 41 392 2022 46 2100 46 2132 58 621 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 497 2022 46 2023 40 2057 61 2022 46 2100 46 2136 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 621 2003 46 2021 40 648 41 2003 46 2026 40 648 41 392 2022 46 2100 46 2132 58 621 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 41 2003 46 2134 40 648 44 91 648 93 44 40 648 44 648 41 41 348 2153 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2054 40 648 41 41 44 93 41 44 93 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2131 40 648 44 648 41 44 93 44 2057 61 2022 46 2100 46 2136 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2064 40 41 2156 46 2069 46 2070 40 2156 41 348 2157 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2054 40 648 41 41 44 93 41 44 93 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2158 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2064 40 41 2159 61 2158 46 2063 46 2064 40 41 2156 46 2160 46 2070 40 2159 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2131 40 648 44 648 41 44 93 44 2057 61 2022 46 2100 46 2136 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2158 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2064 40 41 2159 61 2158 46 2063 46 2064 40 41 2156 46 2160 46 2070 40 2159 41 2003 46 2011 40 2058 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2158 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2058 46 2150 46 2151 40 648 41 46 2138 46 2161 46 2063 46 2071 40 41 44 1502 41 348 2162 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 93 44 2080 61 123 648 58 648 125 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 41 41 44 93 41 44 93 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2131 40 648 44 648 41 2004 46 2017 40 2154 44 2016 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 348 2164 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2054 40 648 41 41 44 93 41 44 93 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2158 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2064 40 41 2159 61 2158 46 2063 46 2064 40 41 2156 46 2160 46 2070 40 2159 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2131 40 648 44 648 41 44 93 44 2057 61 2022 46 2100 46 2136 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2158 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2064 40 41 2159 61 2158 46 2063 46 2064 40 41 2156 46 2160 46 2070 40 2159 41 2003 46 2011 40 2058 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2158 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2058 46 2150 46 2151 40 648 41 46 2138 46 2161 46 2063 46 2071 40 41 44 1502 41 348 2165 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 93 41 44 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 44 2161 61 648 41 44 41 44 93 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2158 61 2014 46 2059 46 2060 40 2154 44 648 41 2167 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2064 40 41 2159 61 2158 46 2063 46 2064 40 41 2167 46 2063 46 2064 40 2156 61 2156 44 2159 61 2159 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2131 40 648 44 648 41 44 93 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2158 61 2014 46 2059 46 2060 40 2154 44 648 41 2167 61 2014 46 2059 46 2060 40 2154 44 648 41 2156 61 2058 46 2063 46 2168 40 41 2159 61 2158 46 2063 46 2064 40 41 2167 46 2063 46 2064 40 2156 61 2156 44 2159 61 2159 41 2003 46 2011 40 2058 46 2063 46 2071 40 41 44 1501 41 2003 46 2011 40 2158 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2167 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2156 46 2160 46 2071 40 41 44 1502 41 348 2169 40 2003 41 58 648 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2054 40 648 41 41 44 93 41 44 2005 46 2172 40 2173 61 648 44 2174 61 648 44 2175 61 648 41 44 2005 46 2131 40 2174 61 648 44 2175 61 648 41 44 93 44 2057 61 2022 46 2100 46 2136 41 2058 61 2014 46 2059 46 2060 40 2154 44 648 41 2176 61 2014 46 2059 46 2060 40 2154 44 648 41 2167 61 2014 46 2059 46 2060 40 2154 44 648 41 621 2156 61 2058 46 2063 46 2064 40 2177 61 648 41 2178 61 2176 46 2063 46 2064 40 2156 61 2156 41 2179 61 2167 46 2063 46 2064 40 41 2179 46 2160 46 2070 40 2178 41 348 2180 40 2003 41 58 648 621 2004 61 2005 46 2166 40 648 44 648 44 2007 46 2099 40 424 61 304 44 349 61 1502 41 44 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2014 44 2016 61 2003 46 2181 40 648 44 2004 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1502 41 2182 61 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 2003 46 2011 40 2182 46 349 44 1502 41 621 2003 46 2056 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2056 40 648 44 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 44 648 93 41 348 2183 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2156 61 2058 46 2063 46 2064 40 2067 61 1503 41 2016 61 2003 46 2137 40 648 44 2014 44 91 2005 46 2166 40 648 44 648 44 2007 46 2170 40 2171 61 1502 44 349 61 648 41 44 41 44 2005 46 2166 40 648 44 648 44 2007 46 2170 40 2171 61 1502 44 349 61 648 41 44 41 44 621 2005 46 2166 40 648 44 648 44 2007 46 2170 40 2171 61 1502 44 349 61 648 41 44 41 44 621 2005 46 2166 40 648 44 648 44 2007 46 2170 40 2171 61 1502 44 349 61 648 41 44 41 44 93 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2156 61 2058 46 2063 46 2184 40 2185 61 2156 46 2185 41 2003 46 2011 40 2156 46 2186 44 648 41 2003 46 2011 40 2156 46 362 44 648 41 2003 46 2011 40 2156 46 2187 44 648 41 2003 46 2011 40 2156 46 2188 44 648 41 348 2189 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2156 61 2058 46 2063 46 2064 40 2067 61 1503 41 2016 61 2003 46 2137 40 648 44 2014 44 91 2005 46 2166 40 648 44 648 44 2007 46 2037 40 349 61 648 41 44 41 44 2005 46 2166 40 648 44 648 44 2007 46 2037 40 349 61 648 41 44 41 44 621 2005 46 2166 40 648 44 648 44 2007 46 2037 40 349 61 648 41 44 41 44 621 2005 46 2166 40 648 44 648 44 2007 46 2037 40 349 61 648 41 44 41 44 93 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2156 61 2058 46 2063 46 2184 40 2185 61 2156 46 2185 41 2003 46 2011 40 2156 46 2186 44 648 41 2003 46 2011 40 2156 46 362 44 648 41 2003 46 2011 40 2156 46 2187 44 648 41 2003 46 2011 40 2156 46 2188 44 648 41 348 2190 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2156 61 2058 46 2063 46 2064 40 2067 61 1503 41 2016 61 2003 46 2137 40 648 44 2014 44 91 2005 46 2166 40 648 44 648 44 2007 46 2191 40 349 61 648 41 44 41 44 2005 46 2166 40 648 44 648 44 2007 46 2191 40 349 61 648 41 44 41 44 621 2005 46 2166 40 648 44 648 44 2007 46 2191 40 349 61 648 41 44 41 44 621 2005 46 2166 40 648 44 648 44 2007 46 2191 40 349 61 648 41 44 41 44 93 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2156 61 2058 46 2063 46 2184 40 2185 61 2156 46 2185 41 621 2003 46 2011 40 2192 40 2156 46 2193 41 44 648 41 2003 46 2011 40 2192 40 2156 46 362 41 44 648 41 2003 46 2011 40 2192 40 2156 46 2187 41 44 648 41 2003 46 2011 40 2192 40 2156 46 2188 41 44 648 41 348 2194 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2004 61 2005 46 2166 40 648 44 648 44 2007 46 2010 40 349 61 1500 41 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 348 2195 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2166 40 648 44 648 44 2007 46 2099 40 424 61 304 44 349 61 1502 41 44 2196 61 302 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1502 41 2182 61 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 2003 46 2011 40 2182 46 349 44 2007 46 2197 41 621 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2064 40 2067 61 1502 44 41 2003 46 2056 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 44 648 44 648 93 41 348 2198 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2199 61 304 41 621 2004 61 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 44 2055 61 648 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1502 41 621 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 2003 46 2056 40 648 44 648 41 621 497 2057 40 41 58 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2200 61 2058 46 2063 46 2064 40 2066 61 302 44 2067 61 1502 41 2200 46 2201 46 2064 40 41 2003 46 2011 40 2200 46 2201 46 2071 40 41 44 1501 41 2200 46 2201 46 2072 40 41 46 353 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 348 2202 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2199 61 304 41 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 91 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 44 2055 61 648 41 41 93 41 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2003 46 2203 40 2058 46 2150 46 2151 40 648 41 46 2204 41 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 91 2005 46 2205 40 648 44 648 44 2007 46 2054 40 2206 61 648 44 2055 61 648 44 2204 61 304 41 41 93 41 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2003 46 2207 40 2058 46 2150 46 2151 40 648 41 46 2204 41 348 2208 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2199 61 304 44 2209 61 304 41 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 91 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 44 2055 61 648 41 41 93 41 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 91 2005 46 2205 40 648 44 648 44 2007 46 2054 40 2206 61 648 44 2055 61 648 41 41 93 41 621 2058 61 2014 46 2059 46 2060 40 648 44 648 41 2200 61 2058 46 2063 46 2064 40 2066 61 302 44 2067 61 1502 41 2200 46 2210 46 2064 40 41 2003 46 2011 40 2200 46 2210 46 2071 40 41 44 1501 41 2200 46 2210 46 2072 40 41 46 353 40 41 348 2211 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2199 61 304 41 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 91 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 44 2055 61 648 41 41 93 41 2003 46 2026 40 648 41 2212 61 2014 46 335 40 41 2155 61 91 2005 46 2213 40 648 44 648 41 93 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 2155 41 2003 46 2021 40 648 41 621 2003 46 2141 40 648 44 2212 44 2155 61 2155 41 2003 46 2026 40 648 41 348 2214 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2199 61 304 41 2003 46 2021 40 648 41 2014 61 2003 46 2137 40 648 44 2014 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 93 41 44 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 44 2055 61 648 44 2161 61 648 41 41 93 41 2003 46 2026 40 648 41 2155 61 91 2005 46 2213 40 648 44 648 41 44 2005 46 2123 40 648 41 93 2003 46 2137 40 648 44 2014 44 2155 61 2155 41 348 2215 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2213 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1502 41 621 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2056 40 648 44 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 125 41 348 2216 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2130 61 304 41 2003 46 2128 40 648 44 648 41 2004 61 2005 46 2213 40 648 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2056 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 348 2217 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2218 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 44 648 41 621 2003 46 2026 40 648 41 2003 46 2021 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2021 40 648 41 2003 46 2026 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2026 40 648 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 125 41 348 2219 40 2003 41 58 648 2004 61 2005 46 2218 40 648 44 303 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 348 2220 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2218 40 648 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 44 648 41 621 2003 46 2026 40 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2026 40 648 41 348 2221 40 2003 41 58 648 2154 61 648 2222 61 648 2014 61 2003 46 2053 40 2154 44 2199 61 304 44 2223 61 2222 41 621 2224 61 2014 46 335 40 41 2004 61 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 41 41 2004 46 2017 40 2154 44 2224 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2224 41 2225 61 648 37 40 2222 44 648 41 2226 61 648 37 40 2154 44 648 41 2003 46 2026 40 2225 41 2003 46 2021 40 2226 41 621 2227 61 2224 46 335 40 41 2004 61 2005 46 2218 40 2018 61 648 44 2228 61 303 41 2004 46 2017 40 2154 44 2227 41 2135 61 2022 46 2100 46 2136 497 2022 46 2023 40 2057 61 2135 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2224 44 2227 41 2003 46 2026 40 2226 41 2003 46 2021 40 2225 41 621 497 2022 46 2023 40 2057 61 2135 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2227 44 2224 41 2003 46 2026 40 2225 41 2003 46 2021 40 2226 41 348 2229 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2010 40 424 61 304 41 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2147 40 2014 46 2007 91 648 44 648 93 46 2020 91 648 93 46 424 44 302 41 2003 46 2147 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 424 44 304 41 621 2003 46 2230 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2231 40 648 44 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2230 40 648 44 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 44 648 93 41 348 2232 40 2003 41 58 648 2154 61 648 2014 61 2003 46 2053 40 2154 44 2130 61 304 41 2233 61 648 37 2154 2016 61 2014 46 335 40 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2099 40 2234 61 648 41 41 2004 46 2017 40 2154 44 2016 41 2003 46 2235 40 2014 46 2007 91 2154 44 648 93 46 2020 91 648 93 46 2234 44 41 2003 46 2011 40 2016 46 2007 91 2154 44 648 93 46 2020 91 648 93 46 2234 44 648 44 41 2003 46 2128 40 2233 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2128 40 2233 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2003 46 2128 40 2233 44 648 41 2236 61 648 37 2154 2016 61 2014 46 335 40 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2048 40 648 44 2007 46 2049 44 2234 61 648 41 44 41 2004 46 2017 40 2154 44 2016 41 2003 46 2235 40 2014 46 2007 91 2154 44 648 93 46 2020 91 648 93 46 2234 44 41 2003 46 2147 40 2016 46 2007 91 2154 44 648 93 46 2020 91 648 93 46 2234 44 648 44 41 2003 46 2128 40 2236 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2128 40 2236 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2025 40 2154 44 2024 44 2016 44 2014 41 2003 46 2128 40 2236 44 648 41 348 2237 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2010 40 2009 61 304 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2120 40 2014 46 2007 91 648 44 648 93 46 2020 91 648 93 44 2007 46 2008 44 41 2003 46 2120 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 44 2007 46 2010 44 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 64 2082 40 648 41 348 2238 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2130 61 304 41 2014 61 2003 46 2137 40 648 44 2014 44 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2054 40 648 41 41 44 93 41 44 2005 46 2166 40 648 44 648 44 2007 46 2054 40 648 41 44 41 44 93 41 621 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2099 40 2009 61 304 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2120 40 2014 46 2007 91 648 44 648 93 46 2020 91 648 93 44 2007 46 2008 44 41 2003 46 2120 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 44 2007 46 2099 44 41 348 2239 40 41 58 497 2022 46 2090 40 41 311 2090 58 2240 44 2241 61 91 40 2242 46 2243 44 2242 46 2244 41 385 2242 398 2022 46 2245 46 2246 40 2090 44 648 41 392 2242 46 2018 614 648 93 91 1500 93 2247 44 2248 61 91 40 2242 46 2243 44 2242 46 2244 41 385 2242 398 2022 46 2245 46 2246 40 2090 44 648 41 392 2242 46 2018 614 648 93 91 1500 93 2249 44 2250 61 91 40 2242 46 2243 44 2242 46 2244 41 385 2242 398 2022 46 2245 46 2246 40 2090 44 648 44 41 392 2242 46 2018 614 648 93 91 1500 93 2251 44 2252 61 91 40 2242 46 2243 44 2242 46 2244 41 385 2242 398 2022 46 2245 46 2246 40 2090 44 648 44 41 392 2242 46 2018 614 648 93 91 1500 93 2003 46 2011 40 2240 44 2247 41 2003 46 2011 40 2240 44 2249 41 2003 46 2011 40 2240 44 2251 41 2003 46 2011 40 2241 44 2248 41 2003 46 2011 40 2241 44 2250 41 2003 46 2011 40 2241 44 2252 41 2239 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2239 40 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2239 40 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 348 2253 40 2003 41 58 2154 61 648 2014 61 2003 46 2053 40 2154 44 2127 61 304 41 2014 61 2003 46 2137 40 2154 44 2014 44 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 44 41 44 93 41 44 93 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2254 40 2009 61 304 41 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2120 40 2016 46 2007 91 2154 44 648 93 46 2020 91 648 93 44 2007 46 2254 44 41 348 2255 40 2090 44 2228 44 2256 41 58 450 91 2242 46 2243 385 2242 398 2022 46 2245 46 2246 40 2090 44 648 44 41 392 2242 46 2018 614 2256 93 91 1500 93 348 2257 40 41 58 497 2022 46 2090 40 41 311 2090 58 2258 61 2255 40 2090 44 648 44 648 41 2259 61 2255 40 2090 44 648 44 648 41 2260 61 2255 40 2090 44 648 44 648 41 2003 46 2011 40 2258 44 2259 41 2003 46 2011 40 2258 44 2260 41 2257 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2257 40 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2257 40 41 392 2022 46 2100 46 2132 58 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 2003 46 2133 40 648 44 91 648 93 44 40 648 44 648 41 44 41 64 2082 40 648 41 348 2261 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 2262 61 304 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 44 2076 61 648 41 41 44 93 41 44 93 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2171 61 1503 44 2262 61 304 41 44 41 2003 46 2137 40 2154 44 2014 44 2155 61 91 2004 93 41 2240 44 2241 61 91 40 2242 46 2243 44 2242 46 2244 41 385 2242 398 2003 46 2246 40 648 37 2154 41 392 2242 46 2018 614 648 93 91 1500 93 2247 44 2248 61 91 40 2242 46 2243 44 2242 46 2244 41 385 2242 398 2003 46 2246 40 648 37 2154 41 392 2242 46 2018 614 648 93 91 1500 93 2003 46 2011 40 2240 44 2247 41 2003 46 2011 40 2241 44 2248 41 64 2082 40 648 41 348 2263 40 2003 41 58 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2264 40 2262 61 304 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 44 2076 61 648 44 2055 61 648 44 41 41 44 93 41 44 93 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2171 61 1503 44 2262 61 304 41 44 41 2003 46 2137 40 2154 44 2014 44 2155 61 91 2004 93 41 348 2265 40 2003 41 58 648 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 41 41 44 93 41 44 93 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 93 41 348 2266 40 2003 41 58 648 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 40 648 44 2007 46 2170 40 2262 61 304 44 2171 61 1503 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 44 2076 61 648 41 41 44 40 648 44 2007 46 2170 40 2262 61 304 44 2171 61 1503 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 44 2076 61 648 41 41 44 93 41 44 93 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2262 61 304 44 2171 61 1503 41 41 44 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2262 61 304 44 2171 61 1503 41 41 44 93 41 348 2267 40 2003 41 58 648 2154 61 648 2014 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 41 41 44 93 41 44 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 37 2154 44 2007 46 2049 41 41 44 93 41 44 93 41 2014 61 2003 46 2137 40 2154 44 2014 44 2155 61 91 2005 46 2172 40 648 44 648 44 648 41 44 2005 46 2205 40 648 44 648 44 2007 46 2170 40 2009 61 304 44 2171 61 1503 41 41 44 93 44 2057 61 2022 46 2100 46 2136 41 348 2268 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2269 61 304 44 2270 61 304 41 621 2004 61 2005 46 2172 40 648 44 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 2003 46 2033 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 621 2003 46 2078 40 648 44 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 91 1500 93 41 2003 46 2033 40 648 44 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 91 1500 93 41 621 2003 46 2078 40 648 44 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 91 1500 93 41 2003 46 2033 40 648 44 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 91 1500 93 41 621 2003 46 2128 40 648 44 648 41 2003 46 2056 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 2003 46 2056 40 648 44 648 41 621 497 2022 46 2090 40 41 311 2090 58 2090 46 2093 40 648 41 497 2003 46 2091 40 2092 41 58 497 2057 40 41 58 2090 46 2093 40 648 41 2090 46 2093 40 648 41 621 2003 46 2271 40 648 44 91 648 44 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 2003 46 2056 40 648 44 648 41 621 2003 46 2271 40 648 44 91 648 44 648 93 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 44 648 58 648 125 41 348 2272 40 2003 41 58 2014 61 2003 46 2137 40 648 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 2234 61 648 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 44 2234 61 648 44 41 41 44 93 41 44 93 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2172 40 648 44 648 44 648 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 2003 46 2033 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2172 40 648 44 648 44 648 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 2003 46 2033 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2163 40 1500 41 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 348 2273 40 2003 41 58 2014 61 2003 46 2137 40 648 44 2015 40 41 44 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 41 41 44 93 41 44 93 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2172 40 648 44 648 44 648 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 648 44 2016 46 2007 91 648 44 648 93 46 2020 41 2003 46 2128 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 2022 46 2245 46 2274 40 648 41 44 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 348 2275 40 2003 41 58 2143 61 2015 40 41 2143 46 2144 40 2145 40 648 44 648 44 91 93 41 41 497 2003 46 2035 40 2276 44 648 41 58 2005 46 2172 40 648 44 648 44 648 41 46 2017 40 648 44 2143 41 348 2277 40 2003 41 58 2143 61 2015 40 41 2143 46 2144 40 2145 40 648 44 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2010 40 2262 61 304 41 41 44 93 41 41 2143 46 2144 40 2145 40 648 44 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 44 2076 61 648 41 41 44 40 648 44 2007 46 2278 40 648 44 2007 46 2049 44 2279 61 40 648 44 41 44 2280 61 40 648 44 41 41 41 44 93 41 41 2004 61 2005 46 2172 40 648 44 648 44 648 41 2016 61 2143 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2281 44 648 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2279 44 91 648 93 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2280 44 40 648 44 41 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2279 44 40 648 44 41 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2280 44 40 648 44 41 41 2004 61 2005 46 2172 40 648 44 648 44 648 41 2016 61 2143 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2138 46 2281 44 648 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2279 44 40 648 44 41 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2280 44 40 648 44 41 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2279 44 40 648 44 41 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2020 91 648 93 46 2280 44 40 648 44 41 41 348 2282 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2051 40 648 44 91 40 648 44 648 41 93 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2014 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 2283 40 41 41 41 44 1500 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 2283 40 41 41 41 44 1501 41 621 497 2022 46 2090 40 41 311 2090 58 2090 46 2093 40 648 41 2090 46 2093 40 648 41 2090 46 2093 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2090 46 2093 40 648 41 497 2003 46 2091 40 2092 41 58 497 2057 40 41 58 2090 46 2093 40 648 41 2090 46 2093 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2090 46 2093 40 648 41 2090 46 2093 40 648 41 2090 46 2093 40 648 41 621 2004 61 2005 46 2051 40 648 44 40 648 44 648 41 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 2283 40 41 41 41 44 1501 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 123 40 648 44 648 41 125 125 41 348 2284 40 2003 41 58 2004 61 2005 46 2051 40 648 44 303 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 348 2285 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2286 61 40 648 648 41 497 2003 46 2035 40 2036 44 2286 41 58 2005 46 2287 40 648 44 2007 46 2288 40 2020 61 91 648 93 41 41 2289 61 2007 46 2288 40 2020 61 91 648 93 44 2018 61 648 41 2004 61 2005 46 2287 40 648 44 2289 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 621 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 2003 46 2290 40 648 44 91 648 93 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2271 40 648 44 91 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2290 40 648 44 91 648 93 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2289 125 41 348 2291 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2292 61 304 41 2003 46 2026 40 648 41 2003 46 2271 40 648 44 91 648 44 648 93 41 2004 61 2005 46 2293 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 621 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1500 41 2003 46 2271 40 648 44 91 648 44 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2290 40 648 44 91 648 44 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2271 40 648 44 91 648 44 648 93 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 125 41 621 2155 61 91 2005 46 2293 40 648 44 648 41 44 2005 46 2213 40 648 44 648 41 44 93 2003 46 2128 40 648 44 648 41 2003 46 2271 40 648 44 91 648 44 648 93 41 621 2016 61 2014 46 335 40 41 2003 46 2137 40 648 44 2016 44 2155 61 2155 41 2003 46 2056 40 648 44 648 41 2003 46 2290 40 648 44 91 648 44 648 93 41 621 2003 46 2141 40 648 44 2014 44 2155 61 2155 41 2003 46 2271 40 648 44 91 648 44 648 93 41 348 2294 40 2003 41 58 2014 61 2003 46 2053 40 648 41 2289 61 2007 46 2288 40 2020 61 91 648 93 44 2018 61 648 41 2295 61 2014 46 2059 46 2060 40 648 44 648 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2287 40 648 44 2289 41 2004 46 2017 40 648 44 2016 41 2296 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2297 40 2295 44 2296 41 348 2298 40 2003 41 58 2014 61 2003 46 2053 40 648 41 2289 61 2007 46 2288 40 2020 61 91 648 93 44 2018 61 648 41 2005 46 2287 40 648 44 2289 41 46 2017 40 648 44 2014 41 2295 61 2014 46 2059 46 2060 40 648 44 648 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2293 40 648 44 648 41 2004 46 2017 40 648 44 2016 41 2296 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2297 40 2295 44 2296 41 64 2082 40 648 41 348 2299 40 2003 41 58 2154 61 648 2300 61 648 2301 61 648 2014 61 2003 46 2053 40 2154 41 2289 61 2007 46 2288 40 2302 40 648 41 44 2018 61 2300 41 2004 61 2005 46 2287 40 648 44 2289 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1501 41 2003 46 2303 40 2301 44 2300 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2304 40 2301 44 2300 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2003 46 2303 40 2301 44 2300 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2289 125 41 64 2082 40 648 41 348 2305 40 2003 41 58 2154 61 648 2300 61 648 2301 61 648 2014 61 2003 46 2053 40 2154 44 2306 61 91 2007 46 2288 40 2302 40 648 41 44 2018 61 2300 41 44 93 41 2003 46 2026 40 2301 41 2003 46 2304 40 2301 44 2300 41 2004 61 2005 46 2293 40 648 44 2300 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2303 40 2301 44 2300 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2003 46 2304 40 2301 44 2300 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2300 125 41 64 2082 40 648 41 348 2307 40 2003 41 58 2154 61 648 2300 61 648 2301 61 648 2014 61 2003 46 2053 40 2154 44 2306 61 91 2007 46 2288 40 2302 40 648 41 44 2018 61 2300 41 93 44 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2010 40 424 61 304 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2304 40 2301 44 2300 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2003 46 2304 40 2301 44 2300 41 348 2308 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2289 61 304 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2010 40 424 61 304 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 621 2003 46 2230 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 621 2003 46 2271 40 648 44 91 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 621 2003 46 2271 40 648 44 91 648 93 41 348 2309 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2310 40 648 44 91 40 648 44 648 41 93 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2014 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 2283 40 41 41 41 44 1500 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 2283 40 41 41 41 44 1501 41 621 2003 46 2290 40 648 44 91 648 44 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2271 40 648 44 91 648 44 648 93 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2290 40 648 44 91 648 44 648 93 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 123 40 648 44 648 41 125 125 41 348 2311 40 2003 41 58 2004 61 2005 46 2310 40 648 44 303 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 64 2082 40 648 41 348 2312 40 2003 41 58 2154 61 648 2301 61 648 37 2154 2014 61 2003 46 2053 40 2154 44 2269 61 304 41 2003 46 2313 40 2301 44 91 648 44 648 93 41 621 2016 61 2014 46 335 40 41 2004 61 2005 46 2310 40 648 44 91 40 648 44 648 41 93 41 2004 46 2017 40 2154 44 2016 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2271 40 2301 44 91 648 44 648 93 41 621 2014 61 2016 2016 61 2014 46 335 40 41 2004 61 2005 46 2310 40 648 44 2283 40 41 41 2004 46 2017 40 2154 44 2016 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2290 40 2301 44 91 648 44 648 93 41 2003 46 2313 40 2301 44 91 648 44 648 93 41 64 2082 40 648 41 348 2314 40 2003 41 58 2014 61 2003 46 2053 40 648 41 2315 61 2007 46 2085 40 2086 61 1502 41 2316 61 2007 46 2088 40 2089 61 2315 44 2018 61 648 41 2317 61 2005 46 2318 40 648 44 2316 41 2003 46 2011 40 2317 46 2012 40 41 44 648 41 2003 46 2011 40 2317 46 2013 44 648 44 41 621 2016 61 2014 46 335 40 41 2317 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1501 41 621 497 2022 46 2023 40 41 311 2024 58 2317 46 2025 40 648 44 2024 44 2014 44 2016 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1501 41 621 2320 61 2007 46 2085 40 2321 61 1503 41 2322 61 2007 46 2088 40 2089 61 2320 44 2018 61 648 41 2323 61 2005 46 2318 40 648 44 2322 41 2323 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1502 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1502 41 497 2022 46 2023 40 41 311 2024 58 2323 46 2025 40 648 44 2024 44 2014 44 2016 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1503 44 2067 61 1501 41 621 497 2022 46 2023 40 41 311 2024 58 2317 46 2027 40 648 44 2024 44 2016 44 2014 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1501 41 621 2028 61 2317 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2316 125 41 64 2082 40 648 41 348 2324 40 2003 41 58 2154 61 648 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 44 349 61 648 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 93 44 41 44 93 2325 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 41 621 621 2089 61 2007 46 2085 40 2326 61 648 41 2327 61 2007 46 2088 40 2089 61 2089 44 2018 61 648 41 2004 61 2005 46 2318 40 648 44 2327 41 2328 61 2325 46 335 40 41 2004 46 2017 40 2154 44 2328 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2325 44 2328 41 2329 61 2328 46 2059 46 2060 40 2154 44 648 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2329 46 2063 46 2064 40 2018 61 648 41 621 621 2089 61 2007 46 2085 40 2330 61 648 41 2327 61 2007 46 2088 40 2089 61 2089 44 2018 61 648 41 2004 61 2005 46 2318 40 648 44 2327 41 2325 61 2328 2328 61 2325 46 335 40 41 2004 46 2017 40 2154 44 2328 41 2329 61 2328 46 2059 46 2060 40 2154 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2325 44 2328 41 2329 61 2328 46 2059 46 2060 40 2154 44 648 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2329 46 2063 46 2064 40 2018 61 648 44 2331 61 648 41 2332 61 2329 46 2063 46 2064 40 2018 61 648 44 2331 61 648 41 2003 46 2011 40 2329 46 2063 46 2184 40 41 44 2332 41 621 621 2089 61 126 2007 46 2085 40 2333 61 2007 46 2334 40 648 41 41 2327 61 2007 46 2088 40 2089 61 2089 44 2018 61 648 41 2004 61 2005 46 2318 40 648 44 2327 41 2325 61 2328 2328 61 2325 46 335 40 41 2004 46 2017 40 2154 44 2328 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2325 44 2328 41 2329 61 2328 46 2059 46 2060 40 2154 44 648 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2329 46 2063 46 2064 40 2018 61 648 44 2335 61 648 41 64 2082 40 648 41 348 2336 40 2003 41 58 2154 61 648 2337 61 648 2325 61 2003 46 2053 40 2154 41 2089 61 2007 46 2085 40 2086 61 1502 44 2098 61 1502 41 124 2007 46 2085 40 2338 61 1500 41 2327 61 2007 46 2088 40 2089 61 2089 44 2018 61 2337 41 2004 61 2005 46 2318 40 648 44 2327 41 2328 61 2325 46 335 40 41 2004 46 2017 40 2154 44 2328 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2325 44 2328 41 2058 61 2328 46 2059 46 2060 40 2154 44 648 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1502 44 2067 61 1502 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1502 44 2067 61 1501 41 2058 46 2063 46 2339 40 91 2058 40 2066 61 1502 44 2067 61 45 1501 41 44 2058 40 2066 61 1501 44 2067 61 45 1501 41 44 2058 40 2066 61 1502 44 2067 61 1502 41 44 93 41 64 2082 40 648 41 348 2340 40 2003 41 58 2154 61 648 2155 61 91 2005 46 2006 40 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2264 40 41 41 44 40 648 44 2007 46 2264 40 41 41 44 93 44 41 44 93 2325 61 2003 46 2137 40 2154 44 2015 40 41 44 2155 41 2327 61 2007 46 2088 40 2089 61 2007 46 2085 40 2341 61 40 1503 45 2007 46 2334 40 648 41 41 41 44 2018 61 648 44 41 2004 61 2005 46 2318 40 648 44 2327 41 2328 61 2325 46 335 40 41 2004 46 2017 40 2154 44 2328 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2325 44 2328 41 2342 61 2328 46 2059 46 2060 40 2154 44 648 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2342 46 2063 46 2064 40 2341 61 1503 44 2343 61 1502 41 2342 46 2063 46 2064 40 2341 61 1503 44 2343 61 1503 41 64 2082 40 648 41 348 2344 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2319 61 91 2007 46 2088 40 2089 61 2007 46 2085 40 2086 61 1502 41 44 2018 61 648 41 44 2007 46 2088 40 2089 61 2007 46 2085 40 2321 61 1503 41 44 2018 61 648 41 44 93 41 2317 61 2005 46 2345 40 648 44 648 41 2003 46 2011 40 2317 46 2012 40 41 44 648 41 2003 46 2011 40 2317 46 2013 44 648 44 41 621 2016 61 2014 46 335 40 41 2317 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1501 41 621 497 2022 46 2023 40 41 311 2024 58 2317 46 2025 40 648 44 2024 44 2014 44 2016 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1501 41 46 353 40 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1503 44 2067 61 1501 41 621 2323 61 2005 46 2345 40 648 44 648 41 2323 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1500 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1500 41 497 2022 46 2023 40 41 311 2024 58 2323 46 2025 40 648 44 2024 44 2014 44 2016 41 2058 46 2063 46 2064 40 2066 61 1503 44 2067 61 1501 41 46 353 40 41 621 497 2022 46 2023 40 41 311 2024 58 2317 46 2027 40 648 44 2024 44 2016 44 2014 41 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1501 41 621 2028 61 2317 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 125 41 348 2346 40 2003 41 58 2014 61 2003 46 2053 40 648 41 2095 61 2007 46 2096 40 2020 61 91 648 93 44 2097 61 2007 46 2085 40 2098 61 1502 41 44 2018 61 648 44 41 2004 61 2005 46 2318 40 648 44 2095 41 2003 46 2011 40 2004 46 2012 40 41 44 648 648 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1501 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1501 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 392 2022 46 2100 46 2101 58 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 360 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2095 125 41 348 2347 40 2003 41 58 2014 61 2003 46 2053 40 648 44 2319 61 91 2007 46 2096 40 2020 61 91 648 93 44 2097 61 2007 46 2085 40 2098 61 1502 41 44 2018 61 648 44 41 44 93 41 2317 61 2005 46 2345 40 648 44 648 41 2003 46 2011 40 2317 46 2012 40 41 44 648 41 621 2016 61 2014 46 335 40 41 2317 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 41 44 1500 41 2058 61 2016 46 2059 46 2060 40 648 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2317 46 2025 40 648 44 2024 44 2014 44 2016 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 46 353 40 41 621 497 2022 46 2023 40 41 311 2024 58 2317 46 2027 40 648 44 2024 44 2016 44 2014 41 621 392 2022 46 2100 46 2101 58 497 2003 46 2091 40 2092 41 44 2108 46 2057 40 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 360 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 2028 61 2317 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 44 125 41 348 2348 40 2003 41 58 2154 61 648 2014 61 2003 46 2053 40 2154 41 2103 61 2007 46 2096 40 2020 61 91 648 93 44 2018 61 648 44 2104 61 2007 46 2105 46 2106 44 41 2004 61 2005 46 2318 40 648 44 2103 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1501 41 2058 61 2016 46 2059 46 2060 40 2154 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1501 41 497 2022 46 2023 40 41 311 2024 44 2349 40 2022 41 311 2350 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 392 2022 46 2100 46 2107 58 621 497 2108 46 2057 40 41 58 2109 61 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2109 46 2066 61 1502 2109 46 2110 40 41 621 497 2003 46 2091 40 2092 41 58 497 2108 46 2057 40 41 44 2022 46 2090 40 41 311 2090 58 2111 61 2022 46 2112 46 2113 40 2103 46 2018 41 2090 46 2093 40 648 37 2111 41 2109 61 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2109 46 2066 61 1502 2109 46 2110 40 41 360 58 2003 46 2011 40 2019 40 2350 41 44 1500 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2103 125 44 41 348 2351 40 2003 41 58 2154 61 648 2103 61 2007 46 2096 40 2020 61 91 648 93 44 2018 61 648 44 2104 61 2007 46 2105 46 2106 44 41 2014 61 2003 46 2053 40 2154 44 2319 61 91 2103 93 41 2004 61 2005 46 2345 40 648 44 2103 46 2018 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1500 41 2058 61 2016 46 2059 46 2060 40 2154 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1500 41 497 2022 46 2023 40 41 311 2024 44 2349 40 2022 41 311 2350 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 46 353 40 41 392 422 2022 46 2100 46 2107 58 2003 46 2011 40 2019 40 2350 41 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 392 2022 46 2100 46 2107 58 621 497 2108 46 2057 40 41 58 2109 61 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2109 46 2066 61 1502 2109 46 2110 40 41 621 497 2003 46 2091 40 2092 41 58 497 2108 46 2057 40 41 44 2022 46 2090 40 41 311 2090 58 2111 61 2022 46 2112 46 2113 40 2103 46 2018 41 2090 46 2093 40 648 37 2111 41 2109 61 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2109 46 2066 61 1502 2109 46 2110 40 41 360 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 44 125 41 348 2352 40 2003 41 58 2154 61 648 2014 61 2003 46 2053 40 2154 41 2115 61 2007 46 2096 40 2020 61 91 648 93 44 2018 61 648 44 399 61 91 648 93 44 41 2004 61 2005 46 2318 40 648 44 2115 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1501 41 2058 61 2016 46 2059 46 2060 40 2154 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1501 41 497 2022 46 2023 40 41 311 2024 44 2349 40 2022 41 311 2350 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 392 2022 46 2100 46 2353 58 497 2003 46 2091 40 2092 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 360 58 2003 46 2011 40 2019 40 2350 41 44 1500 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2115 125 44 41 348 2354 40 2003 41 58 2154 61 648 2115 61 2007 46 2096 40 2020 61 91 648 93 44 2018 61 648 44 399 61 91 648 93 44 41 2014 61 2003 46 2053 40 2154 44 2319 61 91 2115 93 41 2004 61 2005 46 2345 40 648 44 2115 46 2018 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1500 41 2058 61 2016 46 2059 46 2060 40 2154 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1500 41 497 2022 46 2023 40 41 311 2024 44 2349 40 2022 41 311 2350 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 46 353 40 41 392 422 2022 46 2100 46 2353 58 2003 46 2011 40 2019 40 2350 41 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 392 2022 46 2100 46 2353 58 497 2003 46 2091 40 2092 41 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 360 58 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 44 125 41 348 2355 40 2003 41 58 2154 61 648 2337 61 648 2301 61 648 2014 61 2003 46 2053 40 2154 44 2319 61 91 2007 46 2096 40 648 44 648 44 2018 61 2337 41 93 41 2004 61 2005 46 2205 40 648 44 648 44 2007 46 2010 40 424 61 304 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 392 2022 46 2100 46 2356 58 2003 46 2304 40 2301 44 2337 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 392 2022 46 2100 46 2356 58 2003 46 2304 40 2301 44 2337 41 348 2357 40 2003 41 58 2154 61 648 2337 61 648 2301 61 648 2014 61 2003 46 2053 40 2154 41 2327 61 2007 46 2096 40 2302 40 648 41 44 2018 61 2337 41 2004 61 2005 46 2318 40 648 44 2327 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1501 41 2003 46 2303 40 2301 44 2337 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2058 61 2016 46 2059 46 2060 40 2154 44 648 41 2058 46 2063 46 2064 40 2067 61 1502 41 392 2022 46 2100 46 2356 58 2003 46 2304 40 2301 44 2337 41 497 2003 46 2091 40 2092 41 58 2058 46 2063 46 2064 40 2067 61 45 1502 41 360 58 2003 46 2303 40 2301 44 2337 41 2058 46 2063 46 2064 40 2067 61 45 1502 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2003 46 2303 40 2301 44 2337 41 621 2058 46 2063 46 2064 40 2067 61 45 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2327 125 44 41 348 2358 40 2003 41 58 2154 61 648 2337 61 648 2301 61 648 2014 61 2003 46 2053 40 2154 44 2319 61 91 2007 46 2096 40 2302 40 648 41 44 2018 61 2337 41 44 93 41 2003 46 2026 40 2301 41 392 2022 46 2100 46 2356 58 2003 46 2304 40 2301 44 2337 41 2004 61 2005 46 2345 40 648 44 2337 41 2003 46 2011 40 2004 46 2012 40 41 44 648 44 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2080 91 648 93 41 44 1500 41 2058 61 2016 46 2059 46 2060 40 2154 44 648 41 2003 46 2011 40 2019 40 2058 46 2150 46 2319 41 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2003 46 2303 40 2301 44 2337 41 621 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 45 1502 41 46 353 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 392 2022 46 2100 46 2356 58 2003 46 2304 40 2301 44 2337 41 497 2003 46 2091 40 2092 41 58 2058 46 2063 46 2064 40 2067 61 45 1502 41 360 58 2003 46 2303 40 2301 44 2337 41 2058 46 2063 46 2064 40 2067 61 45 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 2337 125 41 348 2359 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2360 40 648 44 123 648 58 91 40 648 44 648 41 93 125 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2014 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 91 93 41 41 44 1500 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 91 93 41 41 44 1501 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2080 91 648 93 91 1500 93 91 1500 93 44 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 123 648 58 91 40 648 44 648 41 93 125 125 41 348 2361 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2080 61 304 41 621 2004 61 2005 46 2360 40 648 44 123 125 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2014 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 91 93 41 41 44 1501 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 91 93 41 41 44 1500 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 123 125 125 41 348 2362 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2130 61 304 41 621 2004 61 2005 46 2363 40 648 44 648 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 44 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2235 40 2014 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 303 41 41 2003 46 2011 40 2016 46 2007 91 648 44 648 93 46 2080 46 2184 40 648 44 303 41 44 648 41 621 2003 46 2056 40 648 44 648 41 621 2364 61 2014 46 2059 2156 61 2364 46 2060 40 648 44 648 41 46 2063 46 2064 40 2067 61 1503 41 2365 61 2364 46 2060 40 648 44 648 41 46 2063 46 2064 40 2156 61 2156 41 2365 46 387 61 2365 2365 46 2110 40 41 2366 61 2364 46 2060 40 648 44 648 41 46 2063 46 2064 40 2156 61 2156 41 2366 46 387 61 2366 2366 46 2110 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 621 2367 61 2016 46 2059 46 2060 40 648 44 648 41 46 2063 46 2072 40 41 2003 46 2011 40 2367 91 1500 93 46 2368 44 1500 41 2003 46 2011 40 2367 91 1501 93 46 2368 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2056 40 648 44 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2028 91 1502 93 44 123 648 58 648 44 648 58 648 125 41 348 2369 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2370 40 648 44 2031 61 91 40 648 44 2117 46 2118 40 41 41 44 40 648 44 2119 40 648 44 648 41 41 44 40 648 44 2119 40 648 44 648 44 1502 44 1502 41 41 44 93 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2011 40 2004 46 2013 44 648 41 2031 61 2014 46 2007 91 648 44 648 93 46 2031 2003 46 2011 40 2031 44 91 93 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2078 40 40 648 44 648 41 44 2016 46 2007 41 2031 61 2016 46 2007 91 648 44 648 93 46 2031 2003 46 2011 40 2031 91 1500 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1500 93 91 1501 93 44 2007 46 2032 41 2003 46 2011 40 2031 91 1501 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1501 93 91 1501 93 44 2119 41 2003 46 2011 40 2031 91 1501 93 91 1501 93 46 2121 44 40 648 44 648 44 1501 44 1502 41 41 2003 46 2011 40 2031 91 1502 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1502 93 91 1501 93 44 2119 41 2003 46 2011 40 2031 91 1502 93 91 1501 93 46 2121 44 40 648 44 648 44 1502 44 1502 41 41 2364 61 2016 46 2059 2139 61 2364 46 2060 40 648 44 648 41 2003 46 2120 40 2139 46 2371 44 2007 46 2032 41 2003 46 2120 40 2139 46 2372 44 2119 41 2003 46 2120 40 2139 46 2373 44 2119 41 348 2374 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2375 61 304 41 621 2004 61 2005 46 2370 40 648 44 2031 61 91 93 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 2003 46 2078 40 40 648 44 648 41 44 2014 46 2007 41 2031 61 2014 46 2007 91 648 44 648 93 46 2031 2003 46 2011 40 2031 91 1500 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1500 93 91 1501 93 44 2007 46 2032 41 2003 46 2011 40 2031 91 1501 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1501 93 91 1501 93 44 2119 41 2003 46 2011 40 2031 91 1501 93 91 1501 93 46 2121 44 40 648 44 648 44 1501 44 1502 41 41 2003 46 2011 40 2031 91 1502 93 91 1500 93 44 648 41 2003 46 2120 40 2031 91 1502 93 91 1501 93 44 2119 41 2003 46 2011 40 2031 91 1502 93 91 1501 93 46 2121 44 40 648 44 648 44 1502 44 1502 41 41 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2031 61 2016 46 2007 91 648 44 648 93 46 2031 2003 46 2011 40 2031 44 91 93 41 348 2376 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2377 61 2005 46 2006 40 2018 61 648 44 2020 61 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 44 93 44 41 2378 61 2014 46 335 40 41 2377 46 2017 40 648 44 2378 41 2379 61 2005 46 2205 40 2173 61 648 44 2018 61 648 44 2182 61 2007 46 2048 40 648 44 2007 46 2049 44 2380 61 302 41 44 41 2381 61 2378 46 335 40 41 2379 46 2017 40 648 44 2381 41 497 2022 46 2023 40 41 311 2024 58 2377 46 2025 40 648 44 2024 44 2014 44 2378 41 2379 46 2025 40 648 44 2024 44 2378 44 2381 41 348 2382 40 2003 41 58 648 621 2004 61 2005 46 2205 40 2173 61 648 44 2018 61 648 44 2182 61 2007 46 2099 40 41 44 41 2014 44 2016 61 2003 46 2181 40 648 44 2004 44 2130 61 304 41 621 2003 46 2128 40 648 44 648 41 2003 46 2056 40 648 44 648 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2128 40 648 44 648 41 2003 46 2056 40 648 44 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2128 40 648 44 648 41 2003 46 2056 40 648 44 648 41 348 2383 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2384 40 621 648 648 648 648 648 44 621 621 648 648 648 44 2385 61 91 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 93 41 93 44 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1501 41 621 2003 46 2021 40 648 41 621 497 2022 46 2023 40 2386 61 304 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2078 40 648 44 648 46 2387 40 2024 46 2388 41 41 2004 46 2027 40 648 44 2024 44 2014 44 2016 41 2003 46 2078 40 648 44 648 46 2387 40 2024 46 2388 41 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 621 497 2022 46 2090 40 41 311 2090 58 2090 46 2093 40 648 41 2003 46 2011 40 2090 46 2389 40 41 91 1500 93 91 1500 93 44 1502 41 2090 46 2093 40 648 41 2003 46 2011 40 2090 46 2389 40 41 91 1500 93 91 1500 93 44 1501 41 2090 46 2093 40 648 41 2003 46 2011 40 2090 46 2389 40 41 91 1500 93 91 1500 93 44 1501 41 621 2003 46 2207 40 2004 46 2390 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 44 648 93 41 621 2003 46 2147 40 302 44 2004 46 2391 40 2004 44 91 93 41 41 2392 61 2005 46 2384 40 648 44 2393 61 304 41 2003 46 2011 40 2392 46 2391 40 2004 44 91 93 41 44 91 2004 93 41 348 2394 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2004 61 2005 46 2384 40 91 648 93 44 91 648 93 44 41 2395 61 2005 46 2384 40 621 40 648 44 91 648 44 91 648 93 93 44 40 648 44 40 1502 44 648 44 41 41 44 41 44 621 91 648 44 91 648 44 303 93 44 40 648 44 91 1502 44 648 93 41 44 93 41 621 2003 46 2021 40 648 41 2016 61 2014 46 335 40 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 621 497 2022 46 2023 40 41 311 2024 58 2395 46 2025 40 648 44 2024 44 2014 44 2016 41 621 497 2022 46 2090 40 41 311 2090 58 2090 46 2093 40 648 41 2003 46 2011 40 2090 46 2389 40 41 91 1500 93 91 1500 93 44 1502 41 497 2022 46 2023 40 41 311 2024 58 2395 46 2027 40 648 44 2024 44 2016 44 2014 41 497 2022 46 2090 40 41 311 2090 58 2090 46 2093 40 648 41 2003 46 2011 40 2090 46 2389 40 41 91 1500 93 91 1500 93 44 1500 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 348 2396 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2384 40 621 91 91 648 93 93 44 621 40 40 648 44 648 44 648 41 44 41 44 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2035 40 2036 44 648 41 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 497 2022 46 2023 40 41 311 2024 58 497 2003 46 2035 40 2036 44 648 41 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 348 2397 40 2003 41 58 648 2004 61 2005 46 2384 40 2005 46 2384 46 2398 44 2005 46 2384 46 2398 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 303 44 303 41 2004 46 2027 40 648 44 2024 44 303 44 303 41 348 2399 40 2003 41 58 2014 61 2003 46 2053 40 648 41 2016 61 2014 46 335 40 41 2400 61 91 648 44 648 44 93 385 2401 398 2400 58 497 2003 46 2402 40 2401 61 2401 41 58 2004 61 2005 46 2384 40 2401 44 2005 46 2403 46 2398 41 497 2022 46 2023 40 2386 61 304 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2388 61 648 46 2387 40 2024 46 2388 41 2003 46 2011 40 2388 46 2071 40 648 41 44 1501 41 348 2404 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2127 61 304 41 621 348 2405 40 2007 44 2023 41 58 2058 61 2007 46 2060 40 648 44 648 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2058 46 2063 46 2064 40 2067 61 1502 41 348 2406 40 2007 44 2023 41 58 2058 61 2007 46 2060 40 648 44 648 41 2058 46 2063 46 2407 40 2066 61 1501 44 2067 61 1502 41 46 353 40 41 2058 46 2063 46 2407 40 2067 61 1502 41 46 353 40 41 2004 61 2005 46 2403 40 2405 44 2408 61 2406 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2016 44 2014 41 621 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1502 41 621 2003 46 2207 40 2004 46 2390 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2014 44 2016 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 621 497 2003 46 2035 40 2036 44 648 41 58 2005 46 2403 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 93 41 621 2409 61 2005 46 2403 40 2405 41 2003 46 2203 40 2409 46 2390 41 497 2022 46 2023 40 41 311 2024 58 2409 46 2025 40 648 44 2024 44 2014 44 2016 41 497 2003 46 2091 40 2410 41 58 2409 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1502 41 348 2411 40 2007 44 2023 41 58 2058 61 2007 46 2060 40 648 44 648 41 2412 61 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 2003 46 2297 40 2412 46 2185 44 303 41 2413 61 2058 46 2063 46 2064 40 2067 61 1502 41 2003 46 2297 40 2413 46 2185 44 303 41 2003 46 2414 40 2412 46 2185 44 2413 46 2185 41 2004 61 2005 46 2403 40 2411 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1502 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 93 41 348 2415 40 2007 44 2023 41 58 2416 61 2007 46 2060 40 648 44 648 41 2412 61 2416 46 2063 46 2064 40 2067 61 1502 41 2003 46 2297 40 2412 46 2185 44 303 41 2413 61 2416 46 2063 46 2064 40 2067 61 1502 41 2003 46 2297 40 2413 46 2185 44 303 41 2003 46 2414 40 2412 46 2185 44 2413 46 2185 41 2004 61 2005 46 2403 40 2415 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1502 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1502 41 621 2003 46 2147 40 302 44 2004 46 2391 40 2004 44 91 93 41 41 2392 61 2005 46 2403 40 2405 44 2393 61 304 41 2003 46 2011 40 2392 46 2391 40 2004 44 91 93 41 44 91 2004 93 41 348 2417 40 2003 41 58 648 2014 61 2003 46 2053 40 648 44 2127 61 304 41 348 2405 40 2007 44 2023 41 58 2058 61 2007 46 2060 40 648 44 648 41 2058 46 2063 46 2064 40 2066 61 1501 44 2067 61 1502 41 440 2036 40 648 41 621 2418 61 2419 40 648 44 648 41 2418 46 2155 61 91 2005 46 2403 40 2405 44 2408 61 2405 41 93 2420 61 2419 40 648 44 648 41 2420 46 2155 61 91 2005 46 2403 40 2405 44 2408 61 2405 44 2057 61 302 41 93 621 392 2022 46 2100 46 2421 58 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2418 46 2422 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2420 46 2422 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 621 360 58 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2418 46 2422 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2420 46 2422 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1501 41 621 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2072 40 41 46 353 40 41 621 392 2022 46 2100 46 2421 58 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2418 46 2423 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2420 46 2423 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 621 360 58 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2418 46 2423 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1500 41 497 2003 46 2091 40 2036 41 58 497 2022 46 2023 40 41 311 2024 58 2420 46 2423 40 2014 44 2024 41 2003 46 2011 40 2014 46 2059 46 2060 40 648 44 648 41 46 2063 46 2071 40 41 44 1501 41 621 2028 61 2420 46 2155 91 1500 93 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 44 648 93 41 348 2424 40 2003 41 58 648 348 2405 40 2007 44 2023 41 58 2329 61 2007 46 2060 40 648 44 648 41 2342 61 2007 46 2060 40 648 44 648 41 2332 61 2329 46 2063 46 2064 40 2018 61 648 41 2342 46 2063 46 2064 40 2425 61 648 44 2332 61 2332 41 2426 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 93 44 2080 61 123 125 44 41 2427 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 40 648 44 2007 46 2048 40 648 44 2007 46 2049 41 41 93 44 2080 61 123 125 44 41 2428 61 2005 46 2166 40 648 44 648 44 2007 46 2170 40 2171 61 1503 41 44 41 2429 61 2005 46 2403 40 2405 44 2405 41 2014 61 2015 40 41 2016 61 2014 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2426 46 2017 40 648 44 2016 41 2426 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2427 46 2017 40 648 44 2016 41 2427 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2428 46 2017 40 648 44 2016 41 2428 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2429 46 2017 40 648 44 2016 41 2429 46 2025 40 648 44 2024 44 2014 44 2016 41 348 2430 40 2003 41 58 648 348 2431 40 2007 44 2023 41 58 2329 61 2007 46 2060 40 648 44 648 41 2342 61 2007 46 2060 40 648 44 648 41 2432 61 2329 46 2063 46 2064 40 2018 61 648 41 2342 46 2063 46 2064 40 2425 61 648 44 2332 61 2432 41 2342 46 2063 46 2064 40 2433 61 1502 638 1503 44 2425 61 648 44 2332 61 2432 41 2434 61 2329 46 2063 46 2064 40 2433 61 1502 638 1503 44 2018 61 648 41 2342 46 2063 46 2064 40 2425 61 648 44 2332 61 2434 41 2342 46 2063 46 2064 40 2425 61 648 44 2332 61 2434 41 2426 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2254 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 93 44 2080 61 123 125 44 41 2427 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2254 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 40 648 44 2007 46 2048 40 2206 61 648 44 2435 61 2007 46 2049 41 41 93 44 2080 61 123 125 44 41 2436 61 2005 46 2403 40 2431 41 2014 61 2015 40 41 2016 61 2014 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2426 46 2017 40 648 44 2016 41 2426 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2427 46 2017 40 648 44 2016 41 2427 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2436 46 2017 40 648 44 2016 41 2436 46 2025 40 648 44 2024 44 2014 44 2016 41 348 2437 40 2003 44 2438 44 2439 44 2440 41 58 648 348 2441 40 2007 44 2023 41 58 2442 61 2007 46 2060 40 648 44 648 41 2443 61 2007 46 2060 40 648 44 648 41 2444 61 2443 46 2063 46 2064 40 2018 61 648 41 2442 46 2063 46 2064 40 2018 61 648 44 2444 61 2444 41 2442 46 2063 46 2064 40 2018 61 648 44 2444 61 2444 41 348 2445 40 2007 44 2023 41 58 2442 61 2007 46 2060 40 648 44 648 41 2443 61 2007 46 2060 40 648 44 648 41 2446 61 2443 46 2063 46 2064 40 2018 61 648 44 2433 61 2440 41 2442 46 2063 46 2064 40 2018 61 648 44 2444 61 2446 41 2442 46 2063 46 2064 40 2433 61 2440 44 2018 61 648 44 2444 61 2446 41 2447 61 2005 46 2006 40 648 44 91 40 648 44 2438 40 2009 61 304 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 93 44 2080 61 123 125 44 41 2448 61 2005 46 2006 40 648 44 91 40 648 44 2438 40 2009 61 304 41 41 44 40 648 44 2007 46 2048 40 2206 61 648 44 2435 61 2007 46 2049 41 41 44 40 648 44 2007 46 2170 40 2171 61 1503 41 41 44 40 648 44 2007 46 2037 40 349 61 648 41 41 44 93 44 2080 61 123 125 44 41 2449 61 2005 46 2403 40 2441 44 2441 41 2450 61 2005 46 2403 40 2445 44 2445 41 2451 61 2005 46 2205 40 648 44 648 44 2439 40 2009 61 304 41 41 2452 61 2005 46 2205 40 648 44 648 44 2439 40 2009 61 304 41 41 2014 61 2015 40 41 2016 61 2014 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2447 46 2017 40 648 44 2016 41 2447 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2448 46 2017 40 648 44 2016 41 2448 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2449 46 2017 40 648 44 2016 41 2449 46 2025 40 648 44 2024 44 2014 44 2016 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2451 46 2017 40 648 44 2016 41 2451 46 2025 40 648 44 2024 44 2014 44 2016 41 2143 61 2016 46 335 40 41 2453 61 2143 46 2059 46 2060 40 648 41 2003 46 2120 40 2453 46 2150 46 2185 44 2439 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2452 46 2017 40 648 44 2016 41 2452 46 2025 40 648 44 2024 44 2014 44 2016 41 2143 61 2016 46 335 40 41 2444 61 2143 46 2059 46 2060 40 648 41 2003 46 2120 40 2444 46 2150 46 2185 44 2439 41 2014 61 2016 2016 61 2016 46 335 40 41 497 2022 46 2023 40 41 311 2024 58 2450 46 2017 40 648 44 2016 41 2450 46 2025 40 648 44 2024 44 2014 44 2016 41 348 2454 40 2003 41 58 648 2003 46 2437 40 2007 46 2008 44 2007 46 2254 44 1502 638 1503 44 41 348 2455 40 2003 41 58 648 2003 46 2437 40 2007 46 2456 44 2007 46 2008 44 1502 638 1503 44 41 348 2457 40 2003 41 58 648 2003 46 2437 40 2007 46 2456 44 2007 46 2254 44 1502 638 1503 44 41 348 2458 40 2003 41 58 648 2014 61 2015 40 41 2016 61 2014 46 335 40 41 2004 61 2005 46 2403 40 2005 46 2403 46 2398 44 2005 46 2403 46 2398 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 348 2459 40 2003 41 58 648 2014 61 2003 46 2053 40 648 41 621 2460 61 2005 46 2384 40 648 44 648 41 2461 61 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 93 41 2004 61 2005 46 2462 40 2385 61 91 2461 93 44 2463 61 91 2460 93 41 2003 46 2011 40 2004 46 2012 40 41 44 648 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 648 44 2016 41 2003 46 2011 40 2019 40 2016 46 2007 91 648 44 648 93 46 2020 41 44 1501 41 621 2003 46 2021 40 648 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 648 44 2024 44 2014 44 2016 41 2003 46 2026 40 648 41 621 2003 46 2207 40 2004 46 2390 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 648 44 2024 44 2016 44 2014 41 2003 46 2021 40 648 41 621 2028 61 2004 46 2029 40 41 2003 46 2011 40 2028 91 1500 93 44 648 41 2003 46 2011 40 2028 91 1501 93 44 91 93 41 2003 46 2011 40 2030 40 2028 91 1502 93 41 44 91 648 44 648 93 41 348 2464 40 2003 41 58 648 2154 61 648 2014 61 2003 46 2053 40 2154 41 621 2463 61 91 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 93 44 2080 61 123 648 58 648 125 44 41 44 2005 46 2006 40 648 44 621 621 621 91 40 648 44 2007 46 2010 40 2009 61 304 41 41 93 44 2080 61 123 648 58 648 125 44 41 44 2005 46 2123 40 648 41 44 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 93 44 2080 61 123 648 58 648 125 44 41 44 93 2385 61 91 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 93 44 2080 61 123 648 58 648 125 44 41 44 2005 46 2123 40 648 41 44 2005 46 2006 40 648 44 91 40 648 44 2007 46 2008 40 2009 61 304 41 41 93 44 2080 61 123 648 58 648 125 44 41 44 93 2004 61 2005 46 2462 40 2385 61 2385 44 2463 61 2463 44 41 621 2016 61 2014 46 335 40 41 2004 46 2017 40 2154 44 2016 41 348 2465 40 2466 41 58 621 2003 46 2033 40 40 2154 44 648 41 44 2016 46 2007 41 2003 46 2011 40 2019 40 2016 46 2007 91 2154 44 648 93 46 2020 41 44 1501 41 2003 46 2033 40 40 2154 44 648 41 44 2016 46 2007 41 2003 46 2033 40 40 2154 44 648 41 44 2016 46 2007 41 2003 46 2033 40 40 2154 44 648 41 44 2016 46 2007 41 2003 46 2021 40 648 41 2003 46 2021 40 648 41 2003 46 2021 40 648 41 392 2466 58 2003 46 2026 40 648 41 2003 46 2026 40 648 41 360 58 2003 46 2021 40 648 41 2003 46 2021 40 648 41 2465 40 2466 61 302 41 621 497 2022 46 2023 40 41 311 2024 58 2004 46 2025 40 2154 44 2024 44 2014 44 2016 41 2465 40 2466 61 304 41 621 2003 46 2207 40 2004 46 2390 41 497 2022 46 2023 40 41 311 2024 58 2004 46 2027 40 2154 44 2024 44 2016 44 2014 41 2465 40 2466 61 302 41 
131957,Python,"class BaseDatabaseSchemaEditor:
    """"""
    This class and its subclasses are responsible for emitting schema-changing
    statements to the databases - model creation/removal/alteration, field
    renaming, index fiddling, and so on.
    """"""

    # Overrideable SQL templates
    sql_create_table = ""CREATE TABLE %(table)s (%(definition)s)""
    sql_rename_table = ""ALTER TABLE %(old_table)s RENAME TO %(new_table)s""
    sql_retablespace_table = ""ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s""
    sql_delete_table = ""DROP TABLE %(table)s CASCADE""

    sql_create_column = ""ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s""
    sql_alter_column = ""ALTER TABLE %(table)s %(changes)s""
    sql_alter_column_type = ""ALTER COLUMN %(column)s TYPE %(type)s""
    sql_alter_column_null = ""ALTER COLUMN %(column)s DROP NOT NULL""
    sql_alter_column_not_null = ""ALTER COLUMN %(column)s SET NOT NULL""
    sql_alter_column_default = ""ALTER COLUMN %(column)s SET DEFAULT %(default)s""
    sql_alter_column_no_default = ""ALTER COLUMN %(column)s DROP DEFAULT""
    sql_alter_column_no_default_null = sql_alter_column_no_default
    sql_alter_column_collate = ""ALTER COLUMN %(column)s TYPE %(type)s%(collation)s""
    sql_delete_column = ""ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE""
    sql_rename_column = ""ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s""
    sql_update_with_default = ""UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL""

    sql_unique_constraint = ""UNIQUE (%(columns)s)%(deferrable)s""
    sql_check_constraint = ""CHECK (%(check)s)""
    sql_delete_constraint = ""ALTER TABLE %(table)s DROP CONSTRAINT %(name)s""
    sql_constraint = ""CONSTRAINT %(name)s %(constraint)s""

    sql_create_check = ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)""
    sql_delete_check = sql_delete_constraint

    sql_create_unique = ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)%(deferrable)s""
    sql_delete_unique = sql_delete_constraint

    sql_create_fk = (
        ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) ""
        ""REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s""
    )
    sql_create_inline_fk = None
    sql_create_column_inline_fk = None
    sql_delete_fk = sql_delete_constraint

    sql_create_index = ""CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(extra)s%(condition)s""
    sql_create_unique_index = ""CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(condition)s""
    sql_delete_index = ""DROP INDEX %(name)s""

    sql_create_pk = ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)""
    sql_delete_pk = sql_delete_constraint

    sql_delete_procedure = 'DROP PROCEDURE %(procedure)s'

    def __init__(self, connection, collect_sql=False, atomic=True):
        self.connection = connection
        self.collect_sql = collect_sql
        if self.collect_sql:
            self.collected_sql = []
        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic

    # State-managing methods

    def __enter__(self):
        self.deferred_sql = []
        if self.atomic_migration:
            self.atomic = atomic(self.connection.alias)
            self.atomic.__enter__()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            for sql in self.deferred_sql:
                self.execute(sql)
        if self.atomic_migration:
            self.atomic.__exit__(exc_type, exc_value, traceback)

    # Core utility functions

    def execute(self, sql, params=()):
        """"""Execute the given SQL statement, with optional parameters.""""""
        # Don't perform the transactional DDL check if SQL is being collected
        # as it's not going to be executed anyway.
        if not self.collect_sql and self.connection.in_atomic_block and not self.connection.features.can_rollback_ddl:
            raise TransactionManagementError(
                ""Executing DDL statements while in a transaction on databases ""
                ""that can't perform a rollback is prohibited.""
            )
        # Account for non-string statement objects.
        sql = str(sql)
        # Log the command we're running, then run it
        logger.debug(""%s; (params %r)"", sql, params, extra={'params': params, 'sql': sql})
        if self.collect_sql:
            ending = """" if sql.rstrip().endswith("";"") else "";""
            if params is not None:
                self.collected_sql.append((sql % tuple(map(self.quote_value, params))) + ending)
            else:
                self.collected_sql.append(sql + ending)
        else:
            with self.connection.cursor() as cursor:
                cursor.execute(sql, params)

    def quote_name(self, name):
        return self.connection.ops.quote_name(name)

    def table_sql(self, model):
        """"""Take a model and return its table definition.""""""
        # Add any unique_togethers (always deferred, as some fields might be
        # created afterward, like geometry fields with some backends).
        for field_names in model._meta.unique_together:
            fields = [model._meta.get_field(field) for field in field_names]
            self.deferred_sql.append(self._create_unique_sql(model, fields))
        # Create column SQL, add FK deferreds if needed.
        column_sqls = []
        params = []
        for field in model._meta.local_fields:
            # SQL.
            definition, extra_params = self.column_sql(model, field)
            if definition is None:
                continue
            # Check constraints can go on the column SQL here.
            db_params = field.db_parameters(connection=self.connection)
            if db_params['check']:
                definition += ' ' + self.sql_check_constraint % db_params
            # Autoincrement SQL (for backends with inline variant).
            col_type_suffix = field.db_type_suffix(connection=self.connection)
            if col_type_suffix:
                definition += ' %s' % col_type_suffix
            params.extend(extra_params)
            # FK.
            if field.remote_field and field.db_constraint:
                to_table = field.remote_field.model._meta.db_table
                to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
                if self.sql_create_inline_fk:
                    definition += ' ' + self.sql_create_inline_fk % {
                        'to_table': self.quote_name(to_table),
                        'to_column': self.quote_name(to_column),
                    }
                elif self.connection.features.supports_foreign_keys:
                    self.deferred_sql.append(self._create_fk_sql(model, field, '_fk_%(to_table)s_%(to_column)s'))
            # Add the SQL to our big list.
            column_sqls.append('%s %s' % (
                self.quote_name(field.column),
                definition,
            ))
            # Autoincrement SQL (for backends with post table definition
            # variant).
            if field.get_internal_type() in ('AutoField', 'BigAutoField', 'SmallAutoField'):
                autoinc_sql = self.connection.ops.autoinc_sql(model._meta.db_table, field.column)
                if autoinc_sql:
                    self.deferred_sql.extend(autoinc_sql)
        constraints = [constraint.constraint_sql(model, self) for constraint in model._meta.constraints]
        sql = self.sql_create_table % {
            'table': self.quote_name(model._meta.db_table),
            'definition': ', '.join(constraint for constraint in (*column_sqls, *constraints) if constraint),
        }
        if model._meta.db_tablespace:
            tablespace_sql = self.connection.ops.tablespace_sql(model._meta.db_tablespace)
            if tablespace_sql:
                sql += ' ' + tablespace_sql
        return sql, params

    # Field <-> database mapping functions

    def _iter_column_sql(self, column_db_type, params, model, field, include_default):
        yield column_db_type
        collation = getattr(field, 'db_collation', None)
        if collation:
            yield self._collate_sql(collation)
        # Work out nullability.
        null = field.null
        # Include a default value, if requested.
        include_default = (
            include_default and
            not self.skip_default(field) and
            # Don't include a default value if it's a nullable field and the
            # default cannot be dropped in the ALTER COLUMN statement (e.g.
            # MySQL longtext and longblob).
            not (null and self.skip_default_on_alter(field))
        )
        if include_default:
            default_value = self.effective_default(field)
            if default_value is not None:
                column_default = 'DEFAULT ' + self._column_default_sql(field)
                if self.connection.features.requires_literal_defaults:
                    # Some databases can't take defaults as a parameter (Oracle).
                    # If this is the case, the individual schema backend should
                    # implement prepare_default().
                    yield column_default % self.prepare_default(default_value)
                else:
                    yield column_default
                    params.append(default_value)
        # Oracle treats the empty string ('') as null, so coerce the null
        # option whenever '' is a possible value.
        if (field.empty_strings_allowed and not field.primary_key and
                self.connection.features.interprets_empty_strings_as_nulls):
            null = True
        if not null:
            yield 'NOT NULL'
        elif not self.connection.features.implied_column_null:
            yield 'NULL'
        if field.primary_key:
            yield 'PRIMARY KEY'
        elif field.unique:
            yield 'UNIQUE'
        # Optionally add the tablespace if it's an implicitly indexed column.
        tablespace = field.db_tablespace or model._meta.db_tablespace
        if tablespace and self.connection.features.supports_tablespaces and field.unique:
            yield self.connection.ops.tablespace_sql(tablespace, inline=True)

    def column_sql(self, model, field, include_default=False):
        """"""
        Return the column definition for a field. The field must already have
        had set_attributes_from_name() called.
        """"""
        # Get the column's type and use that as the basis of the SQL.
        db_params = field.db_parameters(connection=self.connection)
        column_db_type = db_params['type']
        # Check for fields that aren't actually columns (e.g. M2M).
        if column_db_type is None:
            return None, None
        params = []
        return ' '.join(
            # This appends to the params being returned.
            self._iter_column_sql(column_db_type, params, model, field, include_default)
        ), params

    def skip_default(self, field):
        """"""
        Some backends don't accept default values for certain columns types
        (i.e. MySQL longtext and longblob).
        """"""
        return False

    def skip_default_on_alter(self, field):
        """"""
        Some backends don't accept default values for certain columns types
        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.
        """"""
        return False

    def prepare_default(self, value):
        """"""
        Only used for backends which have requires_literal_defaults feature
        """"""
        raise NotImplementedError(
            'subclasses of BaseDatabaseSchemaEditor for backends which have '
            'requires_literal_defaults must provide a prepare_default() method'
        )

    def _column_default_sql(self, field):
        """"""
        Return the SQL to use in a DEFAULT clause. The resulting string should
        contain a '%s' placeholder for a default value.
        """"""
        return '%s'

    @staticmethod
    def _effective_default(field):
        # This method allows testing its logic without a connection.
        if field.has_default():
            default = field.get_default()
        elif not field.null and field.blank and field.empty_strings_allowed:
            if field.get_internal_type() == ""BinaryField"":
                default = b''
            else:
                default = ''
        elif getattr(field, 'auto_now', False) or getattr(field, 'auto_now_add', False):
            internal_type = field.get_internal_type()
            if internal_type == 'DateTimeField':
                default = timezone.now()
            else:
                default = datetime.now()
                if internal_type == 'DateField':
                    default = default.date()
                elif internal_type == 'TimeField':
                    default = default.time()
        else:
            default = None
        return default

    def effective_default(self, field):
        """"""Return a field's effective database default value.""""""
        return field.get_db_prep_save(self._effective_default(field), self.connection)

    def quote_value(self, value):
        """"""
        Return a quoted version of the value so it's safe to use in an SQL
        string. This is not safe against injection from user code; it is
        intended only for use in making SQL scripts or preparing default values
        for particularly tricky backends (defaults are not user-defined, though,
        so this is safe).
        """"""
        raise NotImplementedError()

    # Actions

    def create_model(self, model):
        """"""
        Create a table and any accompanying indexes or unique constraints for
        the given `model`.
        """"""
        sql, params = self.table_sql(model)
        # Prevent using [] as params, in the case a literal '%' is used in the definition
        self.execute(sql, params or None)

        # Add any field index and index_together's (deferred as SQLite _remake_table needs it)
        self.deferred_sql.extend(self._model_indexes_sql(model))

        # Make M2M tables
        for field in model._meta.local_many_to_many:
            if field.remote_field.through._meta.auto_created:
                self.create_model(field.remote_field.through)

    def delete_model(self, model):
        """"""Delete a model from the database.""""""
        # Handle auto-created intermediary models
        for field in model._meta.local_many_to_many:
            if field.remote_field.through._meta.auto_created:
                self.delete_model(field.remote_field.through)

        # Delete the table
        self.execute(self.sql_delete_table % {
            ""table"": self.quote_name(model._meta.db_table),
        })
        # Remove all deferred statements referencing the deleted table.
        for sql in list(self.deferred_sql):
            if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
                self.deferred_sql.remove(sql)

    def add_index(self, model, index):
        """"""Add an index on a model.""""""
        if (
            index.contains_expressions and
            not self.connection.features.supports_expression_indexes
        ):
            return None
        # Index.create_sql returns interpolated SQL which makes params=None a
        # necessity to avoid escaping attempts on execution.
        self.execute(index.create_sql(model, self), params=None)

    def remove_index(self, model, index):
        """"""Remove an index from a model.""""""
        if (
            index.contains_expressions and
            not self.connection.features.supports_expression_indexes
        ):
            return None
        self.execute(index.remove_sql(model, self))

    def add_constraint(self, model, constraint):
        """"""Add a constraint to a model.""""""
        sql = constraint.create_sql(model, self)
        if sql:
            # Constraint.create_sql returns interpolated SQL which makes
            # params=None a necessity to avoid escaping attempts on execution.
            self.execute(sql, params=None)

    def remove_constraint(self, model, constraint):
        """"""Remove a constraint from a model.""""""
        sql = constraint.remove_sql(model, self)
        if sql:
            self.execute(sql)

    def alter_unique_together(self, model, old_unique_together, new_unique_together):
        """"""
        Deal with a model changing its unique_together. The input
        unique_togethers must be doubly-nested, not the single-nested
        [""foo"", ""bar""] format.
        """"""
        olds = {tuple(fields) for fields in old_unique_together}
        news = {tuple(fields) for fields in new_unique_together}
        # Deleted uniques
        for fields in olds.difference(news):
            self._delete_composed_index(model, fields, {'unique': True}, self.sql_delete_unique)
        # Created uniques
        for field_names in news.difference(olds):
            fields = [model._meta.get_field(field) for field in field_names]
            self.execute(self._create_unique_sql(model, fields))

    def alter_index_together(self, model, old_index_together, new_index_together):
        """"""
        Deal with a model changing its index_together. The input
        index_togethers must be doubly-nested, not the single-nested
        [""foo"", ""bar""] format.
        """"""
        olds = {tuple(fields) for fields in old_index_together}
        news = {tuple(fields) for fields in new_index_together}
        # Deleted indexes
        for fields in olds.difference(news):
            self._delete_composed_index(
                model,
                fields,
                {'index': True, 'unique': False},
                self.sql_delete_index,
            )
        # Created indexes
        for field_names in news.difference(olds):
            fields = [model._meta.get_field(field) for field in field_names]
            self.execute(self._create_index_sql(model, fields=fields, suffix='_idx'))

    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
        meta_index_names = {constraint.name for constraint in model._meta.indexes}
        columns = [model._meta.get_field(field).column for field in fields]
        constraint_names = self._constraint_names(
            model, columns, exclude=meta_constraint_names | meta_index_names,
            **constraint_kwargs
        )
        if len(constraint_names) != 1:
            raise ValueError(""Found wrong number (%s) of constraints for %s(%s)"" % (
                len(constraint_names),
                model._meta.db_table,
                "", "".join(columns),
            ))
        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))

    def alter_db_table(self, model, old_db_table, new_db_table):
        """"""Rename the table a model points to.""""""
        if (old_db_table == new_db_table or
            (self.connection.features.ignores_table_name_case and
                old_db_table.lower() == new_db_table.lower())):
            return
        self.execute(self.sql_rename_table % {
            ""old_table"": self.quote_name(old_db_table),
            ""new_table"": self.quote_name(new_db_table),
        })
        # Rename all references to the old table name.
        for sql in self.deferred_sql:
            if isinstance(sql, Statement):
                sql.rename_table_references(old_db_table, new_db_table)

    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):
        """"""Move a model's table between tablespaces.""""""
        self.execute(self.sql_retablespace_table % {
            ""table"": self.quote_name(model._meta.db_table),
            ""old_tablespace"": self.quote_name(old_db_tablespace),
            ""new_tablespace"": self.quote_name(new_db_tablespace),
        })

    def add_field(self, model, field):
        """"""
        Create a field on a model. Usually involves adding a column, but may
        involve adding a table instead (for M2M fields).
        """"""
        # Special-case implicit M2M tables
        if field.many_to_many and field.remote_field.through._meta.auto_created:
            return self.create_model(field.remote_field.through)
        # Get the column's definition
        definition, params = self.column_sql(model, field, include_default=True)
        # It might not actually have a column behind it
        if definition is None:
            return
        # Check constraints can go on the column SQL here
        db_params = field.db_parameters(connection=self.connection)
        if db_params['check']:
            definition += "" "" + self.sql_check_constraint % db_params
        if field.remote_field and self.connection.features.supports_foreign_keys and field.db_constraint:
            constraint_suffix = '_fk_%(to_table)s_%(to_column)s'
            # Add FK constraint inline, if supported.
            if self.sql_create_column_inline_fk:
                to_table = field.remote_field.model._meta.db_table
                to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
                namespace, _ = split_identifier(model._meta.db_table)
                definition += "" "" + self.sql_create_column_inline_fk % {
                    'name': self._fk_constraint_name(model, field, constraint_suffix),
                    'namespace': '%s.' % self.quote_name(namespace) if namespace else '',
                    'column': self.quote_name(field.column),
                    'to_table': self.quote_name(to_table),
                    'to_column': self.quote_name(to_column),
                    'deferrable': self.connection.ops.deferrable_sql()
                }
            # Otherwise, add FK constraints later.
            else:
                self.deferred_sql.append(self._create_fk_sql(model, field, constraint_suffix))
        # Build the SQL and run it
        sql = self.sql_create_column % {
            ""table"": self.quote_name(model._meta.db_table),
            ""column"": self.quote_name(field.column),
            ""definition"": definition,
        }
        self.execute(sql, params)
        # Drop the default if we need to
        # (Django usually does not use in-database defaults)
        if not self.skip_default_on_alter(field) and self.effective_default(field) is not None:
            changes_sql, params = self._alter_column_default_sql(model, None, field, drop=True)
            sql = self.sql_alter_column % {
                ""table"": self.quote_name(model._meta.db_table),
                ""changes"": changes_sql,
            }
            self.execute(sql, params)
        # Add an index, if required
        self.deferred_sql.extend(self._field_indexes_sql(model, field))
        # Reset connection if required
        if self.connection.features.connection_persists_old_columns:
            self.connection.close()

    def remove_field(self, model, field):
        """"""
        Remove a field from a model. Usually involves deleting a column,
        but for M2Ms may involve deleting a table.
        """"""
        # Special-case implicit M2M tables
        if field.many_to_many and field.remote_field.through._meta.auto_created:
            return self.delete_model(field.remote_field.through)
        # It might not actually have a column behind it
        if field.db_parameters(connection=self.connection)['type'] is None:
            return
        # Drop any FK constraints, MySQL requires explicit deletion
        if field.remote_field:
            fk_names = self._constraint_names(model, [field.column], foreign_key=True)
            for fk_name in fk_names:
                self.execute(self._delete_fk_sql(model, fk_name))
        # Delete the column
        sql = self.sql_delete_column % {
            ""table"": self.quote_name(model._meta.db_table),
            ""column"": self.quote_name(field.column),
        }
        self.execute(sql)
        # Reset connection if required
        if self.connection.features.connection_persists_old_columns:
            self.connection.close()
        # Remove all deferred statements referencing the deleted column.
        for sql in list(self.deferred_sql):
            if isinstance(sql, Statement) and sql.references_column(model._meta.db_table, field.column):
                self.deferred_sql.remove(sql)

    def alter_field(self, model, old_field, new_field, strict=False):
        """"""
        Allow a field's type, uniqueness, nullability, default, column,
        constraints, etc. to be modified.
        `old_field` is required to compute the necessary changes.
        If `strict` is True, raise errors if the old column does not match
        `old_field` precisely.
        """"""
        if not self._field_should_be_altered(old_field, new_field):
            return
        # Ensure this field is even column-based
        old_db_params = old_field.db_parameters(connection=self.connection)
        old_type = old_db_params['type']
        new_db_params = new_field.db_parameters(connection=self.connection)
        new_type = new_db_params['type']
        if ((old_type is None and old_field.remote_field is None) or
                (new_type is None and new_field.remote_field is None)):
            raise ValueError(
                ""Cannot alter field %s into %s - they do not properly define ""
                ""db_type (are you using a badly-written custom field?)"" %
                (old_field, new_field),
            )
        elif old_type is None and new_type is None and (
                old_field.remote_field.through and new_field.remote_field.through and
                old_field.remote_field.through._meta.auto_created and
                new_field.remote_field.through._meta.auto_created):
            return self._alter_many_to_many(model, old_field, new_field, strict)
        elif old_type is None and new_type is None and (
                old_field.remote_field.through and new_field.remote_field.through and
                not old_field.remote_field.through._meta.auto_created and
                not new_field.remote_field.through._meta.auto_created):
            # Both sides have through models; this is a no-op.
            return
        elif old_type is None or new_type is None:
            raise ValueError(
                ""Cannot alter field %s into %s - they are not compatible types ""
                ""(you cannot alter to or from M2M fields, or add or remove ""
                ""through= on M2M fields)"" % (old_field, new_field)
            )

        self._alter_field(model, old_field, new_field, old_type, new_type,
                          old_db_params, new_db_params, strict)

    def _alter_field(self, model, old_field, new_field, old_type, new_type,
                     old_db_params, new_db_params, strict=False):
        """"""Perform a ""physical"" (non-ManyToMany) field update.""""""
        # Drop any FK constraints, we'll remake them later
        fks_dropped = set()
        if (
            self.connection.features.supports_foreign_keys and
            old_field.remote_field and
            old_field.db_constraint
        ):
            fk_names = self._constraint_names(model, [old_field.column], foreign_key=True)
            if strict and len(fk_names) != 1:
                raise ValueError(""Found wrong number (%s) of foreign key constraints for %s.%s"" % (
                    len(fk_names),
                    model._meta.db_table,
                    old_field.column,
                ))
            for fk_name in fk_names:
                fks_dropped.add((old_field.column,))
                self.execute(self._delete_fk_sql(model, fk_name))
        # Has unique been removed?
        if old_field.unique and (not new_field.unique or self._field_became_primary_key(old_field, new_field)):
            # Find the unique constraint for this field
            meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
            constraint_names = self._constraint_names(
                model, [old_field.column], unique=True, primary_key=False,
                exclude=meta_constraint_names,
            )
            if strict and len(constraint_names) != 1:
                raise ValueError(""Found wrong number (%s) of unique constraints for %s.%s"" % (
                    len(constraint_names),
                    model._meta.db_table,
                    old_field.column,
                ))
            for constraint_name in constraint_names:
                self.execute(self._delete_unique_sql(model, constraint_name))
        # Drop incoming FK constraints if the field is a primary key or unique,
        # which might be a to_field target, and things are going to change.
        drop_foreign_keys = (
            self.connection.features.supports_foreign_keys and (
                (old_field.primary_key and new_field.primary_key) or
                (old_field.unique and new_field.unique)
            ) and old_type != new_type
        )
        if drop_foreign_keys:
            # '_meta.related_field' also contains M2M reverse fields, these
            # will be filtered out
            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):
                rel_fk_names = self._constraint_names(
                    new_rel.related_model, [new_rel.field.column], foreign_key=True
                )
                for fk_name in rel_fk_names:
                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))
        # Removed an index? (no strict check, as multiple indexes are possible)
        # Remove indexes if db_index switched to False or a unique constraint
        # will now be used in lieu of an index. The following lines from the
        # truth table show all True cases; the rest are False:
        #
        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
        # ------------------------------------------------------------------------------
        # True               | False            | False              | False
        # True               | False            | False              | True
        # True               | False            | True               | True
        if old_field.db_index and not old_field.unique and (not new_field.db_index or new_field.unique):
            # Find the index for this field
            meta_index_names = {index.name for index in model._meta.indexes}
            # Retrieve only BTREE indexes since this is what's created with
            # db_index=True.
            index_names = self._constraint_names(
                model, [old_field.column], index=True, type_=Index.suffix,
                exclude=meta_index_names,
            )
            for index_name in index_names:
                # The only way to check if an index was created with
                # db_index=True or with Index(['field'], name='foo')
                # is to look at its name (refs #28053).
                self.execute(self._delete_index_sql(model, index_name))
        # Change check constraints?
        if old_db_params['check'] != new_db_params['check'] and old_db_params['check']:
            meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
            constraint_names = self._constraint_names(
                model, [old_field.column], check=True,
                exclude=meta_constraint_names,
            )
            if strict and len(constraint_names) != 1:
                raise ValueError(""Found wrong number (%s) of check constraints for %s.%s"" % (
                    len(constraint_names),
                    model._meta.db_table,
                    old_field.column,
                ))
            for constraint_name in constraint_names:
                self.execute(self._delete_check_sql(model, constraint_name))
        # Have they renamed the column?
        if old_field.column != new_field.column:
            self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))
            # Rename all references to the renamed column.
            for sql in self.deferred_sql:
                if isinstance(sql, Statement):
                    sql.rename_column_references(model._meta.db_table, old_field.column, new_field.column)
        # Next, start accumulating actions to do
        actions = []
        null_actions = []
        post_actions = []
        # Collation change?
        old_collation = getattr(old_field, 'db_collation', None)
        new_collation = getattr(new_field, 'db_collation', None)
        if old_collation != new_collation:
            # Collation change handles also a type change.
            fragment = self._alter_column_collation_sql(model, new_field, new_type, new_collation)
            actions.append(fragment)
        # Type change?
        elif old_type != new_type:
            fragment, other_actions = self._alter_column_type_sql(model, old_field, new_field, new_type)
            actions.append(fragment)
            post_actions.extend(other_actions)
        # When changing a column NULL constraint to NOT NULL with a given
        # default value, we need to perform 4 steps:
        #  1. Add a default for new incoming writes
        #  2. Update existing NULL rows with new default
        #  3. Replace NULL constraint with NOT NULL
        #  4. Drop the default again.
        # Default change?
        needs_database_default = False
        if old_field.null and not new_field.null:
            old_default = self.effective_default(old_field)
            new_default = self.effective_default(new_field)
            if (
                not self.skip_default_on_alter(new_field) and
                old_default != new_default and
                new_default is not None
            ):
                needs_database_default = True
                actions.append(self._alter_column_default_sql(model, old_field, new_field))
        # Nullability change?
        if old_field.null != new_field.null:
            fragment = self._alter_column_null_sql(model, old_field, new_field)
            if fragment:
                null_actions.append(fragment)
        # Only if we have a default and there is a change from NULL to NOT NULL
        four_way_default_alteration = (
            new_field.has_default() and
            (old_field.null and not new_field.null)
        )
        if actions or null_actions:
            if not four_way_default_alteration:
                # If we don't have to do a 4-way default alteration we can
                # directly run a (NOT) NULL alteration
                actions = actions + null_actions
            # Combine actions together if we can (e.g. postgres)
            if self.connection.features.supports_combined_alters and actions:
                sql, params = tuple(zip(*actions))
                actions = [("", "".join(sql), sum(params, []))]
            # Apply those actions
            for sql, params in actions:
                self.execute(
                    self.sql_alter_column % {
                        ""table"": self.quote_name(model._meta.db_table),
                        ""changes"": sql,
                    },
                    params,
                )
            if four_way_default_alteration:
                # Update existing rows with default value
                self.execute(
                    self.sql_update_with_default % {
                        ""table"": self.quote_name(model._meta.db_table),
                        ""column"": self.quote_name(new_field.column),
                        ""default"": ""%s"",
                    },
                    [new_default],
                )
                # Since we didn't run a NOT NULL change before we need to do it
                # now
                for sql, params in null_actions:
                    self.execute(
                        self.sql_alter_column % {
                            ""table"": self.quote_name(model._meta.db_table),
                            ""changes"": sql,
                        },
                        params,
                    )
        if post_actions:
            for sql, params in post_actions:
                self.execute(sql, params)
        # If primary_key changed to False, delete the primary key constraint.
        if old_field.primary_key and not new_field.primary_key:
            self._delete_primary_key(model, strict)
        # Added a unique?
        if self._unique_should_be_added(old_field, new_field):
            self.execute(self._create_unique_sql(model, [new_field]))
        # Added an index? Add an index if db_index switched to True or a unique
        # constraint will no longer be used in lieu of an index. The following
        # lines from the truth table show all True cases; the rest are False:
        #
        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
        # ------------------------------------------------------------------------------
        # False              | False            | True               | False
        # False              | True             | True               | False
        # True               | True             | True               | False
        if (not old_field.db_index or old_field.unique) and new_field.db_index and not new_field.unique:
            self.execute(self._create_index_sql(model, fields=[new_field]))
        # Type alteration on primary key? Then we need to alter the column
        # referring to us.
        rels_to_update = []
        if drop_foreign_keys:
            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
        # Changed to become primary key?
        if self._field_became_primary_key(old_field, new_field):
            # Make the new one
            self.execute(self._create_primary_key_sql(model, new_field))
            # Update all referencing columns
            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
        # Handle our type alters on the other end of rels from the PK stuff above
        for old_rel, new_rel in rels_to_update:
            rel_db_params = new_rel.field.db_parameters(connection=self.connection)
            rel_type = rel_db_params['type']
            fragment, other_actions = self._alter_column_type_sql(
                new_rel.related_model, old_rel.field, new_rel.field, rel_type
            )
            self.execute(
                self.sql_alter_column % {
                    ""table"": self.quote_name(new_rel.related_model._meta.db_table),
                    ""changes"": fragment[0],
                },
                fragment[1],
            )
            for sql, params in other_actions:
                self.execute(sql, params)
        # Does it have a foreign key?
        if (self.connection.features.supports_foreign_keys and new_field.remote_field and
                (fks_dropped or not old_field.remote_field or not old_field.db_constraint) and
                new_field.db_constraint):
            self.execute(self._create_fk_sql(model, new_field, ""_fk_%(to_table)s_%(to_column)s""))
        # Rebuild FKs that pointed to us if we previously had to drop them
        if drop_foreign_keys:
            for _, rel in rels_to_update:
                if rel.field.db_constraint:
                    self.execute(self._create_fk_sql(rel.related_model, rel.field, ""_fk""))
        # Does it have check constraints we need to add?
        if old_db_params['check'] != new_db_params['check'] and new_db_params['check']:
            constraint_name = self._create_index_name(model._meta.db_table, [new_field.column], suffix='_check')
            self.execute(self._create_check_sql(model, constraint_name, new_db_params['check']))
        # Drop the default if we need to
        # (Django usually does not use in-database defaults)
        if needs_database_default:
            changes_sql, params = self._alter_column_default_sql(model, old_field, new_field, drop=True)
            sql = self.sql_alter_column % {
                ""table"": self.quote_name(model._meta.db_table),
                ""changes"": changes_sql,
            }
            self.execute(sql, params)
        # Reset connection if required
        if self.connection.features.connection_persists_old_columns:
            self.connection.close()

    def _alter_column_null_sql(self, model, old_field, new_field):
        """"""
        Hook to specialize column null alteration.

        Return a (sql, params) fragment to set a column to null or non-null
        as required by new_field, or None if no changes are required.
        """"""
        if (
            self.connection.features.interprets_empty_strings_as_nulls and
            new_field.empty_strings_allowed
        ):
            # The field is nullable in the database anyway, leave it alone.
            return
        else:
            new_db_params = new_field.db_parameters(connection=self.connection)
            sql = self.sql_alter_column_null if new_field.null else self.sql_alter_column_not_null
            return (
                sql % {
                    'column': self.quote_name(new_field.column),
                    'type': new_db_params['type'],
                },
                [],
            )

    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):
        """"""
        Hook to specialize column default alteration.

        Return a (sql, params) fragment to add or drop (depending on the drop
        argument) a default to new_field's column.
        """"""
        new_default = self.effective_default(new_field)
        default = self._column_default_sql(new_field)
        params = [new_default]

        if drop:
            params = []
        elif self.connection.features.requires_literal_defaults:
            # Some databases (Oracle) can't take defaults as a parameter
            # If this is the case, the SchemaEditor for that database should
            # implement prepare_default().
            default = self.prepare_default(new_default)
            params = []

        new_db_params = new_field.db_parameters(connection=self.connection)
        if drop:
            if new_field.null:
                sql = self.sql_alter_column_no_default_null
            else:
                sql = self.sql_alter_column_no_default
        else:
            sql = self.sql_alter_column_default
        return (
            sql % {
                'column': self.quote_name(new_field.column),
                'type': new_db_params['type'],
                'default': default,
            },
            params,
        )

    def _alter_column_type_sql(self, model, old_field, new_field, new_type):
        """"""
        Hook to specialize column type alteration for different backends,
        for cases when a creation type is different to an alteration type
        (e.g. SERIAL in PostgreSQL, PostGIS fields).

        Return a two-tuple of: an SQL fragment of (sql, params) to insert into
        an ALTER TABLE statement and a list of extra (sql, params) tuples to
        run once the field is altered.
        """"""
        return (
            (
                self.sql_alter_column_type % {
                    ""column"": self.quote_name(new_field.column),
                    ""type"": new_type,
                },
                [],
            ),
            [],
        )

    def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):
        return (
            self.sql_alter_column_collate % {
                'column': self.quote_name(new_field.column),
                'type': new_type,
                'collation': ' ' + self._collate_sql(new_collation) if new_collation else '',
            },
            [],
        )

    def _alter_many_to_many(self, model, old_field, new_field, strict):
        """"""Alter M2Ms to repoint their to= endpoints.""""""
        # Rename the through table
        if old_field.remote_field.through._meta.db_table != new_field.remote_field.through._meta.db_table:
            self.alter_db_table(old_field.remote_field.through, old_field.remote_field.through._meta.db_table,
                                new_field.remote_field.through._meta.db_table)
        # Repoint the FK to the other side
        self.alter_field(
            new_field.remote_field.through,
            # We need the field that points to the target model, so we can tell alter_field to change it -
            # this is m2m_reverse_field_name() (as opposed to m2m_field_name, which points to our model)
            old_field.remote_field.through._meta.get_field(old_field.m2m_reverse_field_name()),
            new_field.remote_field.through._meta.get_field(new_field.m2m_reverse_field_name()),
        )
        self.alter_field(
            new_field.remote_field.through,
            # for self-referential models we need to alter field from the other end too
            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),
            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),
        )

    def _create_index_name(self, table_name, column_names, suffix=""""):
        """"""
        Generate a unique name for an index/unique constraint.

        The name is divided into 3 parts: the table name, the column names,
        and a unique digest and suffix.
        """"""
        _, table_name = split_identifier(table_name)
        hash_suffix_part = '%s%s' % (names_digest(table_name, *column_names, length=8), suffix)
        max_length = self.connection.ops.max_name_length() or 200
        # If everything fits into max_length, use that name.
        index_name = '%s_%s_%s' % (table_name, '_'.join(column_names), hash_suffix_part)
        if len(index_name) <= max_length:
            return index_name
        # Shorten a long suffix.
        if len(hash_suffix_part) > max_length / 3:
            hash_suffix_part = hash_suffix_part[:max_length // 3]
        other_length = (max_length - len(hash_suffix_part)) // 2 - 1
        index_name = '%s_%s_%s' % (
            table_name[:other_length],
            '_'.join(column_names)[:other_length],
            hash_suffix_part,
        )
        # Prepend D if needed to prevent the name from starting with an
        # underscore or a number (not permitted on Oracle).
        if index_name[0] == ""_"" or index_name[0].isdigit():
            index_name = ""D%s"" % index_name[:-1]
        return index_name

    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):
        if db_tablespace is None:
            if len(fields) == 1 and fields[0].db_tablespace:
                db_tablespace = fields[0].db_tablespace
            elif model._meta.db_tablespace:
                db_tablespace = model._meta.db_tablespace
        if db_tablespace is not None:
            return ' ' + self.connection.ops.tablespace_sql(db_tablespace)
        return ''

    def _index_condition_sql(self, condition):
        if condition:
            return ' WHERE ' + condition
        return ''

    def _index_include_sql(self, model, columns):
        if not columns or not self.connection.features.supports_covering_indexes:
            return ''
        return Statement(
            ' INCLUDE (%(columns)s)',
            columns=Columns(model._meta.db_table, columns, self.quote_name),
        )

    def _create_index_sql(self, model, *, fields=None, name=None, suffix='', using='',
                          db_tablespace=None, col_suffixes=(), sql=None, opclasses=(),
                          condition=None, include=None, expressions=None):
        """"""
        Return the SQL statement to create the index for one or several fields
        or expressions. `sql` can be specified if the syntax differs from the
        standard (GIS indexes, ...).
        """"""
        fields = fields or []
        expressions = expressions or []
        compiler = Query(model, alias_cols=False).get_compiler(
            connection=self.connection,
        )
        tablespace_sql = self._get_index_tablespace_sql(model, fields, db_tablespace=db_tablespace)
        columns = [field.column for field in fields]
        sql_create_index = sql or self.sql_create_index
        table = model._meta.db_table

        def create_index_name(*args, **kwargs):
            nonlocal name
            if name is None:
                name = self._create_index_name(*args, **kwargs)
            return self.quote_name(name)

        return Statement(
            sql_create_index,
            table=Table(table, self.quote_name),
            name=IndexName(table, columns, suffix, create_index_name),
            using=using,
            columns=(
                self._index_columns(table, columns, col_suffixes, opclasses)
                if columns
                else Expressions(table, expressions, compiler, self.quote_value)
            ),
            extra=tablespace_sql,
            condition=self._index_condition_sql(condition),
            include=self._index_include_sql(model, include),
        )

    def _delete_index_sql(self, model, name, sql=None):
        return Statement(
            sql or self.sql_delete_index,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(name),
        )

    def _index_columns(self, table, columns, col_suffixes, opclasses):
        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)

    def _model_indexes_sql(self, model):
        """"""
        Return a list of all index SQL statements (field indexes,
        index_together, Meta.indexes) for the specified model.
        """"""
        if not model._meta.managed or model._meta.proxy or model._meta.swapped:
            return []
        output = []
        for field in model._meta.local_fields:
            output.extend(self._field_indexes_sql(model, field))

        for field_names in model._meta.index_together:
            fields = [model._meta.get_field(field) for field in field_names]
            output.append(self._create_index_sql(model, fields=fields, suffix='_idx'))

        for index in model._meta.indexes:
            if (
                not index.contains_expressions or
                self.connection.features.supports_expression_indexes
            ):
                output.append(index.create_sql(model, self))
        return output

    def _field_indexes_sql(self, model, field):
        """"""
        Return a list of all index SQL statements for the specified field.
        """"""
        output = []
        if self._field_should_be_indexed(model, field):
            output.append(self._create_index_sql(model, fields=[field]))
        return output

    def _field_should_be_altered(self, old_field, new_field):
        _, old_path, old_args, old_kwargs = old_field.deconstruct()
        _, new_path, new_args, new_kwargs = new_field.deconstruct()
        # Don't alter when:
        # - changing only a field name
        # - changing an attribute that doesn't affect the schema
        # - adding only a db_column and the column name is not changed
        non_database_attrs = [
            'blank',
            'db_column',
            'editable',
            'error_messages',
            'help_text',
            'limit_choices_to',
            # Database-level options are not supported, see #21961.
            'on_delete',
            'related_name',
            'related_query_name',
            'validators',
            'verbose_name',
        ]
        for attr in non_database_attrs:
            old_kwargs.pop(attr, None)
            new_kwargs.pop(attr, None)
        return (
            self.quote_name(old_field.column) != self.quote_name(new_field.column) or
            (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)
        )

    def _field_should_be_indexed(self, model, field):
        return field.db_index and not field.unique

    def _field_became_primary_key(self, old_field, new_field):
        return not old_field.primary_key and new_field.primary_key

    def _unique_should_be_added(self, old_field, new_field):
        return (
            not new_field.primary_key and
            new_field.unique and
            (not old_field.unique or old_field.primary_key)
        )

    def _rename_field_sql(self, table, old_field, new_field, new_type):
        return self.sql_rename_column % {
            ""table"": self.quote_name(table),
            ""old_column"": self.quote_name(old_field.column),
            ""new_column"": self.quote_name(new_field.column),
            ""type"": new_type,
        }

    def _create_fk_sql(self, model, field, suffix):
        table = Table(model._meta.db_table, self.quote_name)
        name = self._fk_constraint_name(model, field, suffix)
        column = Columns(model._meta.db_table, [field.column], self.quote_name)
        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)
        to_column = Columns(field.target_field.model._meta.db_table, [field.target_field.column], self.quote_name)
        deferrable = self.connection.ops.deferrable_sql()
        return Statement(
            self.sql_create_fk,
            table=table,
            name=name,
            column=column,
            to_table=to_table,
            to_column=to_column,
            deferrable=deferrable,
        )

    def _fk_constraint_name(self, model, field, suffix):
        def create_fk_name(*args, **kwargs):
            return self.quote_name(self._create_index_name(*args, **kwargs))

        return ForeignKeyName(
            model._meta.db_table,
            [field.column],
            split_identifier(field.target_field.model._meta.db_table)[1],
            [field.target_field.column],
            suffix,
            create_fk_name,
        )

    def _delete_fk_sql(self, model, name):
        return self._delete_constraint_sql(self.sql_delete_fk, model, name)

    def _deferrable_constraint_sql(self, deferrable):
        if deferrable is None:
            return ''
        if deferrable == Deferrable.DEFERRED:
            return ' DEFERRABLE INITIALLY DEFERRED'
        if deferrable == Deferrable.IMMEDIATE:
            return ' DEFERRABLE INITIALLY IMMEDIATE'

    def _unique_sql(
        self, model, fields, name, condition=None, deferrable=None,
        include=None, opclasses=None, expressions=None,
    ):
        if (
            deferrable and
            not self.connection.features.supports_deferrable_unique_constraints
        ):
            return None
        if condition or include or opclasses or expressions:
            # Databases support conditional, covering, and functional unique
            # constraints via a unique index.
            sql = self._create_unique_sql(
                model,
                fields,
                name=name,
                condition=condition,
                include=include,
                opclasses=opclasses,
                expressions=expressions,
            )
            if sql:
                self.deferred_sql.append(sql)
            return None
        constraint = self.sql_unique_constraint % {
            'columns': ', '.join([self.quote_name(field.column) for field in fields]),
            'deferrable': self._deferrable_constraint_sql(deferrable),
        }
        return self.sql_constraint % {
            'name': self.quote_name(name),
            'constraint': constraint,
        }

    def _create_unique_sql(
        self, model, fields, name=None, condition=None, deferrable=None,
        include=None, opclasses=None, expressions=None,
    ):
        if (
            (
                deferrable and
                not self.connection.features.supports_deferrable_unique_constraints
            ) or
            (condition and not self.connection.features.supports_partial_indexes) or
            (include and not self.connection.features.supports_covering_indexes) or
            (expressions and not self.connection.features.supports_expression_indexes)
        ):
            return None

        def create_unique_name(*args, **kwargs):
            return self.quote_name(self._create_index_name(*args, **kwargs))

        compiler = Query(model, alias_cols=False).get_compiler(connection=self.connection)
        table = model._meta.db_table
        columns = [field.column for field in fields]
        if name is None:
            name = IndexName(table, columns, '_uniq', create_unique_name)
        else:
            name = self.quote_name(name)
        if condition or include or opclasses or expressions:
            sql = self.sql_create_unique_index
        else:
            sql = self.sql_create_unique
        if columns:
            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)
        else:
            columns = Expressions(table, expressions, compiler, self.quote_value)
        return Statement(
            sql,
            table=Table(table, self.quote_name),
            name=name,
            columns=columns,
            condition=self._index_condition_sql(condition),
            deferrable=self._deferrable_constraint_sql(deferrable),
            include=self._index_include_sql(model, include),
        )

    def _delete_unique_sql(
        self, model, name, condition=None, deferrable=None, include=None,
        opclasses=None, expressions=None,
    ):
        if (
            (
                deferrable and
                not self.connection.features.supports_deferrable_unique_constraints
            ) or
            (condition and not self.connection.features.supports_partial_indexes) or
            (include and not self.connection.features.supports_covering_indexes) or
            (expressions and not self.connection.features.supports_expression_indexes)

        ):
            return None
        if condition or include or opclasses or expressions:
            sql = self.sql_delete_index
        else:
            sql = self.sql_delete_unique
        return self._delete_constraint_sql(sql, model, name)

    def _check_sql(self, name, check):
        return self.sql_constraint % {
            'name': self.quote_name(name),
            'constraint': self.sql_check_constraint % {'check': check},
        }

    def _create_check_sql(self, model, name, check):
        return Statement(
            self.sql_create_check,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(name),
            check=check,
        )

    def _delete_check_sql(self, model, name):
        return self._delete_constraint_sql(self.sql_delete_check, model, name)

    def _delete_constraint_sql(self, template, model, name):
        return Statement(
            template,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(name),
        )

    def _constraint_names(self, model, column_names=None, unique=None,
                          primary_key=None, index=None, foreign_key=None,
                          check=None, type_=None, exclude=None):
        """"""Return all constraint names matching the columns and conditions.""""""
        if column_names is not None:
            column_names = [
                self.connection.introspection.identifier_converter(name)
                for name in column_names
            ]
        with self.connection.cursor() as cursor:
            constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
        result = []
        for name, infodict in constraints.items():
            if column_names is None or column_names == infodict['columns']:
                if unique is not None and infodict['unique'] != unique:
                    continue
                if primary_key is not None and infodict['primary_key'] != primary_key:
                    continue
                if index is not None and infodict['index'] != index:
                    continue
                if check is not None and infodict['check'] != check:
                    continue
                if foreign_key is not None and not infodict['foreign_key']:
                    continue
                if type_ is not None and infodict['type'] != type_:
                    continue
                if not exclude or name not in exclude:
                    result.append(name)
        return result

    def _delete_primary_key(self, model, strict=False):
        constraint_names = self._constraint_names(model, primary_key=True)
        if strict and len(constraint_names) != 1:
            raise ValueError('Found wrong number (%s) of PK constraints for %s' % (
                len(constraint_names),
                model._meta.db_table,
            ))
        for constraint_name in constraint_names:
            self.execute(self._delete_primary_key_sql(model, constraint_name))

    def _create_primary_key_sql(self, model, field):
        return Statement(
            self.sql_create_pk,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(
                self._create_index_name(model._meta.db_table, [field.column], suffix=""_pk"")
            ),
            columns=Columns(model._meta.db_table, [field.column], self.quote_name),
        )

    def _delete_primary_key_sql(self, model, name):
        return self._delete_constraint_sql(self.sql_delete_pk, model, name)

    def _collate_sql(self, collation):
        return 'COLLATE ' + self.quote_name(collation)

    def remove_procedure(self, procedure_name, param_types=()):
        sql = self.sql_delete_procedure % {
            'procedure': self.quote_name(procedure_name),
            'param_types': ','.join(param_types),
        }
        self.execute(sql)",1,334 2000 58 648 621 2001 61 648 2002 61 648 2003 61 648 2004 61 648 2005 61 648 2006 61 648 2007 61 648 2008 61 648 2009 61 648 2010 61 648 2011 61 648 2012 61 2011 2013 61 648 2014 61 648 2015 61 648 2016 61 648 2017 61 648 2018 61 648 2019 61 648 2020 61 648 2021 61 648 2022 61 2019 2023 61 648 2024 61 2019 2025 61 40 648 648 41 2026 61 303 2027 61 303 2028 61 2019 2029 61 648 2030 61 648 2031 61 648 2032 61 648 2033 61 2019 2034 61 648 348 2035 40 2036 44 2037 44 2038 61 302 44 2039 61 304 41 58 2036 46 2037 61 2037 2036 46 2038 61 2038 392 2036 46 2038 58 2036 46 2040 61 91 93 2036 46 2041 61 2036 46 2037 46 2042 46 2043 308 2039 621 348 2044 40 2036 41 58 2036 46 2045 61 91 93 392 2036 46 2041 58 2036 46 2039 61 2039 40 2036 46 2037 46 2046 41 2036 46 2039 46 2044 40 41 450 2036 348 2047 40 2036 44 2048 44 2049 44 2050 41 58 392 2048 407 303 58 385 2051 398 2036 46 2045 58 2036 46 2052 40 2051 41 392 2036 46 2041 58 2036 46 2039 46 2047 40 2048 44 2049 44 2050 41 621 348 2052 40 2036 44 2051 44 433 61 40 41 41 58 648 621 621 392 422 2036 46 2038 308 2036 46 2037 46 2053 308 422 2036 46 2037 46 2042 46 2043 58 440 2054 40 648 648 41 621 2051 61 2055 40 2051 41 621 2056 46 2057 40 648 44 2051 44 433 44 2058 61 123 648 58 433 44 648 58 2051 125 41 392 2036 46 2038 58 2059 61 648 392 2051 46 2060 40 41 46 2061 40 648 41 360 648 392 433 407 422 303 58 2036 46 2040 46 2062 40 40 2051 37 2063 40 2064 40 2036 46 2065 44 433 41 41 41 43 2059 41 360 58 2036 46 2040 46 2062 40 2051 43 2059 41 360 58 497 2036 46 2037 46 2066 40 41 311 2066 58 2066 46 2052 40 2051 44 433 41 348 2067 40 2036 44 2068 41 58 450 2036 46 2037 46 2069 46 2067 40 2068 41 348 2070 40 2036 44 2071 41 58 648 621 621 385 2072 398 2071 46 2073 46 2074 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2036 46 2045 46 2062 40 2036 46 2078 40 2071 44 2075 41 41 621 2079 61 91 93 433 61 91 93 385 2077 398 2071 46 2073 46 2080 58 621 2081 44 2082 61 2036 46 2083 40 2071 44 2077 41 392 2081 407 303 58 344 621 2084 61 2077 46 2085 40 2037 61 2036 46 2037 41 392 2084 91 648 93 58 2081 636 648 43 2036 46 2018 37 2084 621 2086 61 2077 46 2087 40 2037 61 2036 46 2037 41 392 2086 58 2081 636 648 37 2086 433 46 2088 40 2082 41 621 392 2077 46 2089 308 2077 46 2090 58 2091 61 2077 46 2089 46 2071 46 2073 46 2092 2093 61 2077 46 2089 46 2071 46 2073 46 2076 40 2077 46 2089 46 2094 41 46 2095 392 2036 46 2026 58 2081 636 648 43 2036 46 2026 37 123 648 58 2036 46 2067 40 2091 41 44 648 58 2036 46 2067 40 2093 41 44 125 359 2036 46 2037 46 2042 46 2096 58 2036 46 2045 46 2062 40 2036 46 2097 40 2071 44 2077 44 648 41 41 621 2079 46 2062 40 648 37 40 2036 46 2067 40 2077 46 2095 41 44 2081 44 41 41 621 621 392 2077 46 2098 40 41 398 40 648 44 648 44 648 41 58 2099 61 2036 46 2037 46 2069 46 2099 40 2071 46 2073 46 2092 44 2077 46 2095 41 392 2099 58 2036 46 2045 46 2088 40 2099 41 2100 61 91 2101 46 2102 40 2071 44 2036 41 385 2101 398 2071 46 2073 46 2100 93 2051 61 2036 46 2001 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 648 46 2103 40 2101 385 2101 398 40 42 2079 44 42 2100 41 392 2101 41 44 125 392 2071 46 2073 46 2104 58 2105 61 2036 46 2037 46 2069 46 2105 40 2071 46 2073 46 2104 41 392 2105 58 2051 636 648 43 2105 450 2051 44 433 621 348 2106 40 2036 44 2107 44 433 44 2071 44 2077 44 2108 41 58 500 2107 2109 61 2110 40 2077 44 648 44 303 41 392 2109 58 500 2036 46 2111 40 2109 41 621 424 61 2077 46 424 621 2108 61 40 2108 308 422 2036 46 2112 40 2077 41 308 621 621 621 422 40 424 308 2036 46 2113 40 2077 41 41 41 392 2108 58 2114 61 2036 46 2115 40 2077 41 392 2114 407 422 303 58 2116 61 648 43 2036 46 2117 40 2077 41 392 2036 46 2037 46 2042 46 2118 58 621 621 621 500 2116 37 2036 46 2119 40 2114 41 360 58 500 2116 433 46 2062 40 2114 41 621 621 392 40 2077 46 2120 308 422 2077 46 2121 308 2036 46 2037 46 2042 46 2122 41 58 424 61 304 392 422 424 58 500 648 359 422 2036 46 2037 46 2042 46 2123 58 500 648 392 2077 46 2121 58 500 648 359 2077 46 2124 58 500 648 621 2125 61 2077 46 2104 428 2071 46 2073 46 2104 392 2125 308 2036 46 2037 46 2042 46 2126 308 2077 46 2124 58 500 2036 46 2037 46 2069 46 2105 40 2125 44 401 61 304 41 348 2083 40 2036 44 2071 44 2077 44 2108 61 302 41 58 648 621 2084 61 2077 46 2085 40 2037 61 2036 46 2037 41 2107 61 2084 91 648 93 621 392 2107 407 303 58 450 303 44 303 433 61 91 93 450 648 46 2103 40 621 2036 46 2106 40 2107 44 433 44 2071 44 2077 44 2108 41 41 44 433 348 2112 40 2036 44 2077 41 58 648 450 302 348 2113 40 2036 44 2077 41 58 648 450 302 348 2119 40 2036 44 2127 41 58 648 440 2128 40 648 648 41 348 2117 40 2036 44 2077 41 58 648 450 648 64 2129 348 2130 40 2077 41 58 621 392 2077 46 2131 40 41 58 349 61 2077 46 2132 40 41 359 422 2077 46 424 308 2077 46 2133 308 2077 46 2120 58 392 2077 46 2098 40 41 614 648 58 349 61 648 360 58 349 61 648 359 2110 40 2077 44 648 44 302 41 428 2110 40 2077 44 648 44 302 41 58 2134 61 2077 46 2098 40 41 392 2134 614 648 58 349 61 2135 46 2136 40 41 360 58 349 61 2137 46 2136 40 41 392 2134 614 648 58 349 61 349 46 2138 40 41 359 2134 614 648 58 349 61 349 46 2139 40 41 360 58 349 61 303 450 349 348 2115 40 2036 44 2077 41 58 648 450 2077 46 2140 40 2036 46 2130 40 2077 41 44 2036 46 2037 41 348 2065 40 2036 44 2127 41 58 648 440 2128 40 41 621 348 2141 40 2036 44 2071 41 58 648 2051 44 433 61 2036 46 2070 40 2071 41 621 2036 46 2052 40 2051 44 433 428 303 41 621 2036 46 2045 46 2088 40 2036 46 2142 40 2071 41 41 621 385 2077 398 2071 46 2073 46 2143 58 392 2077 46 2089 46 2144 46 2073 46 2145 58 2036 46 2141 40 2077 46 2089 46 2144 41 348 2146 40 2036 44 2071 41 58 648 621 385 2077 398 2071 46 2073 46 2143 58 392 2077 46 2089 46 2144 46 2073 46 2145 58 2036 46 2146 40 2077 46 2089 46 2144 41 621 2036 46 2052 40 2036 46 2004 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 125 41 621 385 2051 398 411 40 2036 46 2045 41 58 392 2147 40 2051 44 2148 41 308 2051 46 2149 40 2071 46 2073 46 2092 41 58 2036 46 2045 46 2150 40 2051 41 348 2151 40 2036 44 2071 44 2152 41 58 648 392 40 2152 46 2153 308 422 2036 46 2037 46 2042 46 2154 41 58 450 303 621 621 2036 46 2052 40 2152 46 2155 40 2071 44 2036 41 44 433 61 303 41 348 2156 40 2036 44 2071 44 2152 41 58 648 392 40 2152 46 2153 308 422 2036 46 2037 46 2042 46 2154 41 58 450 303 2036 46 2052 40 2152 46 2157 40 2071 44 2036 41 41 348 2158 40 2036 44 2071 44 2101 41 58 648 2051 61 2101 46 2155 40 2071 44 2036 41 392 2051 58 621 621 2036 46 2052 40 2051 44 433 61 303 41 348 2159 40 2036 44 2071 44 2101 41 58 648 2051 61 2101 46 2157 40 2071 44 2036 41 392 2051 58 2036 46 2052 40 2051 41 348 2160 40 2036 44 2071 44 2161 44 2162 41 58 648 2163 61 123 2063 40 2075 41 385 2075 398 2161 125 2164 61 123 2063 40 2075 41 385 2075 398 2162 125 621 385 2075 398 2163 46 2165 40 2164 41 58 2036 46 2166 40 2071 44 2075 44 123 648 58 304 125 44 2036 46 2024 41 621 385 2072 398 2164 46 2165 40 2163 41 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2036 46 2052 40 2036 46 2078 40 2071 44 2075 41 41 348 2167 40 2036 44 2071 44 2168 44 2169 41 58 648 2163 61 123 2063 40 2075 41 385 2075 398 2168 125 2164 61 123 2063 40 2075 41 385 2075 398 2169 125 621 385 2075 398 2163 46 2165 40 2164 41 58 2036 46 2166 40 2071 44 2075 44 123 648 58 304 44 648 58 302 125 44 2036 46 2031 44 41 621 385 2072 398 2164 46 2165 40 2163 41 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2036 46 2052 40 2036 46 2170 40 2071 44 2075 61 2075 44 2171 61 648 41 41 348 2166 40 2036 44 2071 44 2075 44 2172 44 2051 41 58 2173 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2100 125 2174 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2175 125 2176 61 91 2071 46 2073 46 2076 40 2077 41 46 2095 385 2077 398 2075 93 2177 61 2036 46 2178 40 2071 44 2176 44 2179 61 2173 124 2174 44 638 2172 41 392 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 648 46 2103 40 2176 41 44 41 41 2036 46 2052 40 2036 46 2182 40 2051 44 2071 44 2177 91 1500 93 41 41 348 2183 40 2036 44 2071 44 2184 44 2185 41 58 648 392 40 2184 614 2185 428 40 2036 46 2037 46 2042 46 2186 308 2184 46 2187 40 41 614 2185 46 2187 40 41 41 41 58 450 2036 46 2052 40 2036 46 2002 37 123 648 58 2036 46 2067 40 2184 41 44 648 58 2036 46 2067 40 2185 41 44 125 41 621 385 2051 398 2036 46 2045 58 392 2147 40 2051 44 2148 41 58 2051 46 2188 40 2184 44 2185 41 348 2189 40 2036 44 2071 44 2190 44 2191 41 58 648 2036 46 2052 40 2036 46 2003 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2190 41 44 648 58 2036 46 2067 40 2191 41 44 125 41 348 2192 40 2036 44 2071 44 2077 41 58 648 621 392 2077 46 2193 308 2077 46 2089 46 2144 46 2073 46 2145 58 450 2036 46 2141 40 2077 46 2089 46 2144 41 621 2081 44 433 61 2036 46 2083 40 2071 44 2077 44 2108 61 304 41 621 392 2081 407 303 58 450 621 2084 61 2077 46 2085 40 2037 61 2036 46 2037 41 392 2084 91 648 93 58 2081 636 648 43 2036 46 2018 37 2084 392 2077 46 2089 308 2036 46 2037 46 2042 46 2096 308 2077 46 2090 58 2194 61 648 621 392 2036 46 2027 58 2091 61 2077 46 2089 46 2071 46 2073 46 2092 2093 61 2077 46 2089 46 2071 46 2073 46 2076 40 2077 46 2089 46 2094 41 46 2095 416 44 2195 61 2196 40 2071 46 2073 46 2092 41 2081 636 648 43 2036 46 2027 37 123 648 58 2036 46 2197 40 2071 44 2077 44 2194 41 44 648 58 648 37 2036 46 2067 40 416 41 392 416 360 648 44 648 58 2036 46 2067 40 2077 46 2095 41 44 648 58 2036 46 2067 40 2091 41 44 648 58 2036 46 2067 40 2093 41 44 648 58 2036 46 2037 46 2069 46 2198 40 41 125 621 360 58 2036 46 2045 46 2062 40 2036 46 2097 40 2071 44 2077 44 2194 41 41 621 2051 61 2036 46 2005 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2077 46 2095 41 44 648 58 2081 44 125 2036 46 2052 40 2051 44 433 41 621 621 392 422 2036 46 2113 40 2077 41 308 2036 46 2115 40 2077 41 407 422 303 58 2199 44 433 61 2036 46 2200 40 2071 44 303 44 2077 44 2201 61 304 41 2051 61 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2199 44 125 2036 46 2052 40 2051 44 433 41 621 2036 46 2045 46 2088 40 2036 46 2202 40 2071 44 2077 41 41 621 392 2036 46 2037 46 2042 46 2203 58 2036 46 2037 46 2204 40 41 348 2205 40 2036 44 2071 44 2077 41 58 648 621 392 2077 46 2193 308 2077 46 2089 46 2144 46 2073 46 2145 58 450 2036 46 2146 40 2077 46 2089 46 2144 41 621 392 2077 46 2085 40 2037 61 2036 46 2037 41 91 648 93 407 303 58 450 621 392 2077 46 2089 58 2206 61 2036 46 2178 40 2071 44 91 2077 46 2095 93 44 2207 61 304 41 385 2208 398 2206 58 2036 46 2052 40 2036 46 2209 40 2071 44 2208 41 41 621 2051 61 2036 46 2014 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2077 46 2095 41 44 125 2036 46 2052 40 2051 41 621 392 2036 46 2037 46 2042 46 2203 58 2036 46 2037 46 2204 40 41 621 385 2051 398 411 40 2036 46 2045 41 58 392 2147 40 2051 44 2148 41 308 2051 46 2210 40 2071 46 2073 46 2092 44 2077 46 2095 41 58 2036 46 2045 46 2150 40 2051 41 348 2211 40 2036 44 2071 44 2212 44 2213 44 2214 61 302 41 58 648 392 422 2036 46 2215 40 2212 44 2213 41 58 450 621 2216 61 2212 46 2085 40 2037 61 2036 46 2037 41 2217 61 2216 91 648 93 2218 61 2213 46 2085 40 2037 61 2036 46 2037 41 2219 61 2218 91 648 93 392 40 40 2217 407 303 308 2212 46 2089 407 303 41 428 40 2219 407 303 308 2213 46 2089 407 303 41 41 58 440 2181 40 648 648 37 40 2212 44 2213 41 44 41 359 2217 407 303 308 2219 407 303 308 40 2212 46 2089 46 2144 308 2213 46 2089 46 2144 308 2212 46 2089 46 2144 46 2073 46 2145 308 2213 46 2089 46 2144 46 2073 46 2145 41 58 450 2036 46 2220 40 2071 44 2212 44 2213 44 2214 41 359 2217 407 303 308 2219 407 303 308 40 2212 46 2089 46 2144 308 2213 46 2089 46 2144 308 422 2212 46 2089 46 2144 46 2073 46 2145 308 422 2213 46 2089 46 2144 46 2073 46 2145 41 58 621 450 359 2217 407 303 428 2219 407 303 58 440 2181 40 648 648 648 37 40 2212 44 2213 41 41 2036 46 2221 40 2071 44 2212 44 2213 44 2217 44 2219 44 2216 44 2218 44 2214 41 348 2221 40 2036 44 2071 44 2212 44 2213 44 2217 44 2219 44 2216 44 2218 44 2214 61 302 41 58 648 621 2222 61 2223 40 41 392 40 2036 46 2037 46 2042 46 2096 308 2212 46 2089 308 2212 46 2090 41 58 2206 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2207 61 304 41 392 2214 308 2180 40 2206 41 631 1501 58 440 2181 40 648 37 40 2180 40 2206 41 44 2071 46 2073 46 2092 44 2212 46 2095 44 41 41 385 2208 398 2206 58 2222 46 2224 40 40 2212 46 2095 44 41 41 2036 46 2052 40 2036 46 2209 40 2071 44 2208 41 41 621 392 2212 46 2124 308 40 422 2213 46 2124 428 2036 46 2225 40 2212 44 2213 41 41 58 621 2173 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2100 125 2177 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2124 61 304 44 2121 61 302 44 2179 61 2173 44 41 392 2214 308 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 2212 46 2095 44 41 41 385 2226 398 2177 58 2036 46 2052 40 2036 46 2227 40 2071 44 2226 41 41 621 621 2228 61 40 2036 46 2037 46 2042 46 2096 308 40 40 2212 46 2121 308 2213 46 2121 41 428 40 2212 46 2124 308 2213 46 2124 41 41 308 2217 631 2219 41 392 2228 58 621 621 385 2229 44 2230 398 2231 40 2212 44 2213 41 58 2232 61 2036 46 2178 40 2230 46 2233 44 91 2230 46 2077 46 2095 93 44 2207 61 304 41 385 2208 398 2232 58 2036 46 2052 40 2036 46 2209 40 2230 46 2233 44 2208 41 41 621 621 621 621 621 621 621 621 621 621 392 2212 46 2234 308 422 2212 46 2124 308 40 422 2213 46 2234 428 2213 46 2124 41 58 621 2174 61 123 2152 46 2068 385 2152 398 2071 46 2073 46 2175 125 621 621 2235 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2152 61 304 44 2236 61 2237 46 2171 44 2179 61 2174 44 41 385 2238 398 2235 58 621 621 621 2036 46 2052 40 2036 46 2239 40 2071 44 2238 41 41 621 392 2216 91 648 93 631 2218 91 648 93 308 2216 91 648 93 58 2173 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2100 125 2177 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2240 61 304 44 2179 61 2173 44 41 392 2214 308 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 2212 46 2095 44 41 41 385 2226 398 2177 58 2036 46 2052 40 2036 46 2241 40 2071 44 2226 41 41 621 392 2212 46 2095 631 2213 46 2095 58 2036 46 2052 40 2036 46 2242 40 2071 46 2073 46 2092 44 2212 44 2213 44 2219 41 41 621 385 2051 398 2036 46 2045 58 392 2147 40 2051 44 2148 41 58 2051 46 2243 40 2071 46 2073 46 2092 44 2212 46 2095 44 2213 46 2095 41 621 2244 61 91 93 2245 61 91 93 2246 61 91 93 621 2247 61 2110 40 2212 44 648 44 303 41 2248 61 2110 40 2213 44 648 44 303 41 392 2247 631 2248 58 621 2249 61 2036 46 2250 40 2071 44 2213 44 2219 44 2248 41 2244 46 2062 40 2249 41 621 359 2217 631 2219 58 2249 44 2251 61 2036 46 2252 40 2071 44 2212 44 2213 44 2219 41 2244 46 2062 40 2249 41 2246 46 2088 40 2251 41 621 621 621 621 621 621 621 2253 61 302 392 2212 46 424 308 422 2213 46 424 58 2254 61 2036 46 2115 40 2212 41 2255 61 2036 46 2115 40 2213 41 392 40 422 2036 46 2113 40 2213 41 308 2254 631 2255 308 2255 407 422 303 41 58 2253 61 304 2244 46 2062 40 2036 46 2200 40 2071 44 2212 44 2213 41 41 621 392 2212 46 424 631 2213 46 424 58 2249 61 2036 46 2256 40 2071 44 2212 44 2213 41 392 2249 58 2245 46 2062 40 2249 41 621 2257 61 40 2213 46 2131 40 41 308 40 2212 46 424 308 422 2213 46 424 41 41 392 2244 428 2245 58 392 422 2257 58 621 621 2244 61 2244 43 2245 621 392 2036 46 2037 46 2042 46 2258 308 2244 58 2051 44 433 61 2063 40 2259 40 42 2244 41 41 2244 61 91 40 648 46 2103 40 2051 41 44 2260 40 433 44 91 93 41 41 93 621 385 2051 44 433 398 2244 58 2036 46 2052 40 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2051 44 125 44 433 44 41 392 2257 58 621 2036 46 2052 40 2036 46 2016 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 648 44 125 44 91 2255 93 44 41 621 621 385 2051 44 433 398 2245 58 2036 46 2052 40 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2051 44 125 44 433 44 41 392 2246 58 385 2051 44 433 398 2246 58 2036 46 2052 40 2051 44 433 41 621 392 2212 46 2121 308 422 2213 46 2121 58 2036 46 2261 40 2071 44 2214 41 621 392 2036 46 2262 40 2212 44 2213 41 58 2036 46 2052 40 2036 46 2078 40 2071 44 91 2213 93 41 41 621 621 621 621 621 621 621 621 621 392 40 422 2212 46 2234 428 2212 46 2124 41 308 2213 46 2234 308 422 2213 46 2124 58 2036 46 2052 40 2036 46 2170 40 2071 44 2075 61 91 2213 93 41 41 621 621 2263 61 91 93 392 2228 58 2263 46 2088 40 2231 40 2212 44 2213 41 41 621 392 2036 46 2225 40 2212 44 2213 41 58 621 2036 46 2052 40 2036 46 2264 40 2071 44 2213 41 41 621 2263 46 2088 40 2231 40 2212 44 2213 41 41 621 385 2265 44 2230 398 2263 58 2266 61 2230 46 2077 46 2085 40 2037 61 2036 46 2037 41 2267 61 2266 91 648 93 2249 44 2251 61 2036 46 2252 40 2230 46 2233 44 2265 46 2077 44 2230 46 2077 44 2267 41 2036 46 2052 40 2036 46 2006 37 123 648 58 2036 46 2067 40 2230 46 2233 46 2073 46 2092 41 44 648 58 2249 91 1500 93 44 125 44 2249 91 1501 93 44 41 385 2051 44 433 398 2251 58 2036 46 2052 40 2051 44 433 41 621 392 40 2036 46 2037 46 2042 46 2096 308 2213 46 2089 308 40 2222 428 422 2212 46 2089 428 422 2212 46 2090 41 308 2213 46 2090 41 58 2036 46 2052 40 2036 46 2097 40 2071 44 2213 44 648 41 41 621 392 2228 58 385 2195 44 2268 398 2263 58 392 2268 46 2077 46 2090 58 2036 46 2052 40 2036 46 2097 40 2268 46 2233 44 2268 46 2077 44 648 41 41 621 392 2216 91 648 93 631 2218 91 648 93 308 2218 91 648 93 58 2226 61 2036 46 2269 40 2071 46 2073 46 2092 44 91 2213 46 2095 93 44 2171 61 648 41 2036 46 2052 40 2036 46 2270 40 2071 44 2226 44 2218 91 648 93 41 41 621 621 392 2253 58 2199 44 433 61 2036 46 2200 40 2071 44 2212 44 2213 44 2201 61 304 41 2051 61 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2199 44 125 2036 46 2052 40 2051 44 433 41 621 392 2036 46 2037 46 2042 46 2203 58 2036 46 2037 46 2204 40 41 348 2256 40 2036 44 2071 44 2212 44 2213 41 58 648 392 40 2036 46 2037 46 2042 46 2122 308 2213 46 2120 41 58 621 450 360 58 2218 61 2213 46 2085 40 2037 61 2036 46 2037 41 2051 61 2036 46 2008 392 2213 46 424 360 2036 46 2009 450 40 2051 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2218 91 648 93 44 125 44 91 93 44 41 348 2200 40 2036 44 2071 44 2212 44 2213 44 2201 61 302 41 58 648 2255 61 2036 46 2115 40 2213 41 349 61 2036 46 2117 40 2213 41 433 61 91 2255 93 392 2201 58 433 61 91 93 359 2036 46 2037 46 2042 46 2118 58 621 621 621 349 61 2036 46 2119 40 2255 41 433 61 91 93 2218 61 2213 46 2085 40 2037 61 2036 46 2037 41 392 2201 58 392 2213 46 424 58 2051 61 2036 46 2012 360 58 2051 61 2036 46 2011 360 58 2051 61 2036 46 2010 450 40 2051 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2218 91 648 93 44 648 58 349 44 125 44 433 44 41 348 2252 40 2036 44 2071 44 2212 44 2213 44 2219 41 58 648 450 40 40 2036 46 2007 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2219 44 125 44 91 93 44 41 44 91 93 44 41 348 2250 40 2036 44 2071 44 2213 44 2219 44 2248 41 58 450 40 2036 46 2013 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2219 44 648 58 648 43 2036 46 2111 40 2248 41 392 2248 360 648 44 125 44 91 93 44 41 348 2220 40 2036 44 2071 44 2212 44 2213 44 2214 41 58 648 621 392 2212 46 2089 46 2144 46 2073 46 2092 631 2213 46 2089 46 2144 46 2073 46 2092 58 2036 46 2183 40 2212 46 2089 46 2144 44 2212 46 2089 46 2144 46 2073 46 2092 44 2213 46 2089 46 2144 46 2073 46 2092 41 621 2036 46 2211 40 2213 46 2089 46 2144 44 621 621 2212 46 2089 46 2144 46 2073 46 2076 40 2212 46 2271 40 41 41 44 2213 46 2089 46 2144 46 2073 46 2076 40 2213 46 2271 40 41 41 44 41 2036 46 2211 40 2213 46 2089 46 2144 44 621 2212 46 2089 46 2144 46 2073 46 2076 40 2212 46 2272 40 41 41 44 2213 46 2089 46 2144 46 2073 46 2076 40 2213 46 2272 40 41 41 44 41 348 2269 40 2036 44 2273 44 2274 44 2171 61 648 41 58 648 2195 44 2273 61 2196 40 2273 41 2275 61 648 37 40 2276 40 2273 44 42 2274 44 2277 61 1502 41 44 2171 41 2278 61 2036 46 2037 46 2069 46 2279 40 41 428 1504 621 2238 61 648 37 40 2273 44 648 46 2103 40 2274 41 44 2275 41 392 2180 40 2238 41 620 2278 58 450 2238 621 392 2180 40 2275 41 62 2278 47 1502 58 2275 61 2275 91 58 2278 610 1502 93 2280 61 40 2278 45 2180 40 2275 41 41 610 1502 45 1501 2238 61 648 37 40 2273 91 58 2280 93 44 648 46 2103 40 2274 41 91 58 2280 93 44 2275 44 41 621 621 392 2238 91 1500 93 614 648 428 2238 91 1500 93 46 2281 40 41 58 2238 61 648 37 2238 91 58 45 1501 93 450 2238 348 2282 40 2036 44 2071 44 2075 44 2104 61 303 41 58 392 2104 407 303 58 392 2180 40 2075 41 614 1501 308 2075 91 1500 93 46 2104 58 2104 61 2075 91 1500 93 46 2104 359 2071 46 2073 46 2104 58 2104 61 2071 46 2073 46 2104 392 2104 407 422 303 58 450 648 43 2036 46 2037 46 2069 46 2105 40 2104 41 450 648 348 2283 40 2036 44 2284 41 58 392 2284 58 450 648 43 2284 450 648 348 2285 40 2036 44 2071 44 2176 41 58 392 422 2176 428 422 2036 46 2037 46 2042 46 2286 58 450 648 450 2148 40 648 44 2176 61 2287 40 2071 46 2073 46 2092 44 2176 44 2036 46 2067 41 44 41 348 2170 40 2036 44 2071 44 42 44 2075 61 303 44 2068 61 303 44 2171 61 648 44 489 61 648 44 2104 61 303 44 2288 61 40 41 44 2051 61 303 44 2289 61 40 41 44 2284 61 303 44 399 61 303 44 2290 61 303 41 58 648 2075 61 2075 428 91 93 2290 61 2290 428 91 93 2291 61 2292 40 2071 44 2293 61 302 41 46 2294 40 2037 61 2036 46 2037 44 41 2105 61 2036 46 2282 40 2071 44 2075 44 2104 61 2104 41 2176 61 91 2077 46 2095 385 2077 398 2075 93 2029 61 2051 428 2036 46 2029 2295 61 2071 46 2073 46 2092 348 2296 40 42 2297 44 638 2298 41 58 421 2068 392 2068 407 303 58 2068 61 2036 46 2269 40 42 2297 44 638 2298 41 450 2036 46 2067 40 2068 41 450 2148 40 2029 44 2295 61 2299 40 2295 44 2036 46 2067 41 44 2068 61 2300 40 2295 44 2176 44 2171 44 2296 41 44 489 61 489 44 2176 61 40 2036 46 2301 40 2295 44 2176 44 2288 44 2289 41 392 2176 360 2302 40 2295 44 2290 44 2291 44 2036 46 2065 41 41 44 2058 61 2105 44 2284 61 2036 46 2283 40 2284 41 44 399 61 2036 46 2285 40 2071 44 399 41 44 41 348 2239 40 2036 44 2071 44 2068 44 2051 61 303 41 58 450 2148 40 2051 428 2036 46 2031 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2068 41 44 41 348 2301 40 2036 44 2295 44 2176 44 2288 44 2289 41 58 450 2287 40 2295 44 2176 44 2036 46 2067 44 2288 61 2288 41 348 2142 40 2036 44 2071 41 58 648 392 422 2071 46 2073 46 2303 428 2071 46 2073 46 2304 428 2071 46 2073 46 2305 58 450 91 93 2306 61 91 93 385 2077 398 2071 46 2073 46 2080 58 2306 46 2088 40 2036 46 2202 40 2071 44 2077 41 41 385 2072 398 2071 46 2073 46 2307 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2306 46 2062 40 2036 46 2170 40 2071 44 2075 61 2075 44 2171 61 648 41 41 385 2152 398 2071 46 2073 46 2175 58 392 40 422 2152 46 2153 428 2036 46 2037 46 2042 46 2154 41 58 2306 46 2062 40 2152 46 2155 40 2071 44 2036 41 41 450 2306 348 2202 40 2036 44 2071 44 2077 41 58 648 2306 61 91 93 392 2036 46 2308 40 2071 44 2077 41 58 2306 46 2062 40 2036 46 2170 40 2071 44 2075 61 91 2077 93 41 41 450 2306 348 2215 40 2036 44 2212 44 2213 41 58 2195 44 2309 44 2310 44 2311 61 2212 46 2312 40 41 2195 44 2313 44 2314 44 2315 61 2213 46 2312 40 41 621 621 621 621 2316 61 91 648 44 648 44 648 44 648 44 648 44 648 44 621 648 44 648 44 648 44 648 44 648 44 93 385 2317 398 2316 58 2311 46 2318 40 2317 44 303 41 2315 46 2318 40 2317 44 303 41 450 40 2036 46 2067 40 2212 46 2095 41 631 2036 46 2067 40 2213 46 2095 41 428 40 2309 44 2310 44 2311 41 631 40 2313 44 2314 44 2315 41 41 348 2308 40 2036 44 2071 44 2077 41 58 450 2077 46 2234 308 422 2077 46 2124 348 2225 40 2036 44 2212 44 2213 41 58 450 422 2212 46 2121 308 2213 46 2121 348 2262 40 2036 44 2212 44 2213 41 58 450 40 422 2213 46 2121 308 2213 46 2124 308 40 422 2212 46 2124 428 2212 46 2121 41 41 348 2242 40 2036 44 2295 44 2212 44 2213 44 2219 41 58 450 2036 46 2015 37 123 648 58 2036 46 2067 40 2295 41 44 648 58 2036 46 2067 40 2212 46 2095 41 44 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2219 44 125 348 2097 40 2036 44 2071 44 2077 44 2171 41 58 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 2068 61 2036 46 2197 40 2071 44 2077 44 2171 41 2095 61 2287 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2036 46 2067 41 2091 61 2299 40 2077 46 2319 46 2071 46 2073 46 2092 44 2036 46 2067 41 2093 61 2287 40 2077 46 2319 46 2071 46 2073 46 2092 44 91 2077 46 2319 46 2095 93 44 2036 46 2067 41 2320 61 2036 46 2037 46 2069 46 2198 40 41 450 2148 40 2036 46 2025 44 2295 61 2295 44 2068 61 2068 44 2095 61 2095 44 2091 61 2091 44 2093 61 2093 44 2320 61 2320 44 41 348 2197 40 2036 44 2071 44 2077 44 2171 41 58 348 2321 40 42 2297 44 638 2298 41 58 450 2036 46 2067 40 2036 46 2269 40 42 2297 44 638 2298 41 41 450 2322 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2196 40 2077 46 2319 46 2071 46 2073 46 2092 41 91 1501 93 44 91 2077 46 2319 46 2095 93 44 2171 44 2321 44 41 348 2209 40 2036 44 2071 44 2068 41 58 450 2036 46 2182 40 2036 46 2028 44 2071 44 2068 41 348 2323 40 2036 44 2320 41 58 392 2320 407 303 58 450 648 392 2320 614 2324 46 2325 58 450 648 392 2320 614 2324 46 2326 58 450 648 348 2327 40 2036 44 2071 44 2075 44 2068 44 2284 61 303 44 2320 61 303 44 399 61 303 44 2289 61 303 44 2290 61 303 44 41 58 392 40 2320 308 422 2036 46 2037 46 2042 46 2328 41 58 450 303 392 2284 428 399 428 2289 428 2290 58 621 621 2051 61 2036 46 2078 40 2071 44 2075 44 2068 61 2068 44 2284 61 2284 44 399 61 399 44 2289 61 2289 44 2290 61 2290 44 41 392 2051 58 2036 46 2045 46 2062 40 2051 41 450 303 2101 61 2036 46 2017 37 123 648 58 648 46 2103 40 91 2036 46 2067 40 2077 46 2095 41 385 2077 398 2075 93 41 44 648 58 2036 46 2323 40 2320 41 44 125 450 2036 46 2020 37 123 648 58 2036 46 2067 40 2068 41 44 648 58 2101 44 125 348 2078 40 2036 44 2071 44 2075 44 2068 61 303 44 2284 61 303 44 2320 61 303 44 399 61 303 44 2289 61 303 44 2290 61 303 44 41 58 392 40 40 2320 308 422 2036 46 2037 46 2042 46 2328 41 428 40 2284 308 422 2036 46 2037 46 2042 46 2329 41 428 40 399 308 422 2036 46 2037 46 2042 46 2286 41 428 40 2290 308 422 2036 46 2037 46 2042 46 2154 41 41 58 450 303 348 2330 40 42 2297 44 638 2298 41 58 450 2036 46 2067 40 2036 46 2269 40 42 2297 44 638 2298 41 41 2291 61 2292 40 2071 44 2293 61 302 41 46 2294 40 2037 61 2036 46 2037 41 2295 61 2071 46 2073 46 2092 2176 61 91 2077 46 2095 385 2077 398 2075 93 392 2068 407 303 58 2068 61 2300 40 2295 44 2176 44 648 44 2330 41 360 58 2068 61 2036 46 2067 40 2068 41 392 2284 428 399 428 2289 428 2290 58 2051 61 2036 46 2030 360 58 2051 61 2036 46 2023 392 2176 58 2176 61 2036 46 2301 40 2295 44 2176 44 2288 61 40 41 44 2289 61 2289 41 360 58 2176 61 2302 40 2295 44 2290 44 2291 44 2036 46 2065 41 450 2148 40 2051 44 2295 61 2299 40 2295 44 2036 46 2067 41 44 2068 61 2068 44 2176 61 2176 44 2284 61 2036 46 2283 40 2284 41 44 2320 61 2036 46 2323 40 2320 41 44 399 61 2036 46 2285 40 2071 44 399 41 44 41 348 2227 40 2036 44 2071 44 2068 44 2284 61 303 44 2320 61 303 44 399 61 303 44 2289 61 303 44 2290 61 303 44 41 58 392 40 40 2320 308 422 2036 46 2037 46 2042 46 2328 41 428 40 2284 308 422 2036 46 2037 46 2042 46 2329 41 428 40 399 308 422 2036 46 2037 46 2042 46 2286 41 428 40 2290 308 422 2036 46 2037 46 2042 46 2154 41 41 58 450 303 392 2284 428 399 428 2289 428 2290 58 2051 61 2036 46 2031 360 58 2051 61 2036 46 2024 450 2036 46 2182 40 2051 44 2071 44 2068 41 348 2331 40 2036 44 2068 44 2240 41 58 450 2036 46 2020 37 123 648 58 2036 46 2067 40 2068 41 44 648 58 2036 46 2018 37 123 648 58 2240 125 44 125 348 2270 40 2036 44 2071 44 2068 44 2240 41 58 450 2148 40 2036 46 2021 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2068 41 44 2240 61 2240 44 41 348 2241 40 2036 44 2071 44 2068 41 58 450 2036 46 2182 40 2036 46 2022 44 2071 44 2068 41 348 2182 40 2036 44 466 44 2071 44 2068 41 58 450 2148 40 466 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2068 41 44 41 348 2178 40 2036 44 2071 44 2274 61 303 44 2124 61 303 44 2121 61 303 44 2152 61 303 44 2207 61 303 44 2240 61 303 44 2236 61 303 44 2179 61 303 41 58 648 392 2274 407 422 303 58 2274 61 91 2036 46 2037 46 2332 46 2333 40 2068 41 385 2068 398 2274 93 497 2036 46 2037 46 2066 40 41 311 2066 58 2100 61 2036 46 2037 46 2332 46 2334 40 2066 44 2071 46 2073 46 2092 41 2335 61 91 93 385 2068 44 2336 398 2100 46 2337 40 41 58 392 2274 407 303 428 2274 614 2336 91 648 93 58 392 2124 407 422 303 308 2336 91 648 93 631 2124 58 344 392 2121 407 422 303 308 2336 91 648 93 631 2121 58 344 392 2152 407 422 303 308 2336 91 648 93 631 2152 58 344 392 2240 407 422 303 308 2336 91 648 93 631 2240 58 344 392 2207 407 422 303 308 422 2336 91 648 93 58 344 392 2236 407 422 303 308 2336 91 648 93 631 2236 58 344 392 422 2179 428 2068 422 398 2179 58 2335 46 2062 40 2068 41 450 2335 348 2261 40 2036 44 2071 44 2214 61 302 41 58 2177 61 2036 46 2178 40 2071 44 2121 61 304 41 392 2214 308 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 41 41 385 2226 398 2177 58 2036 46 2052 40 2036 46 2338 40 2071 44 2226 41 41 348 2264 40 2036 44 2071 44 2077 41 58 450 2148 40 2036 46 2032 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2036 46 2269 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2171 61 648 41 41 44 2176 61 2287 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2036 46 2067 41 44 41 348 2338 40 2036 44 2071 44 2068 41 58 450 2036 46 2182 40 2036 46 2033 44 2071 44 2068 41 348 2111 40 2036 44 2109 41 58 450 648 43 2036 46 2067 40 2109 41 348 2339 40 2036 44 2340 44 2341 61 40 41 41 58 2051 61 2036 46 2034 37 123 648 58 2036 46 2067 40 2340 41 44 648 58 648 46 2103 40 2341 41 44 125 2036 46 2052 40 2051 41 
131316,Python,"class AutodetectorTests(TestCase):
    """"""
    Tests the migration autodetector.
    """"""

    author_empty = ModelState(""testapp"", ""Author"", [(""id"", models.AutoField(primary_key=True))])
    author_name = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
    ])
    author_name_null = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, null=True)),
    ])
    author_name_longer = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=400)),
    ])
    author_name_renamed = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""names"", models.CharField(max_length=200)),
    ])
    author_name_default = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default='Ada Lovelace')),
    ])
    author_name_check_constraint = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
    ],
        {'constraints': [models.CheckConstraint(check=models.Q(name__contains='Bob'), name='name_contains_bob')]},
    )
    author_dates_of_birth_auto_now = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""date_of_birth"", models.DateField(auto_now=True)),
        (""date_time_of_birth"", models.DateTimeField(auto_now=True)),
        (""time_of_birth"", models.TimeField(auto_now=True)),
    ])
    author_dates_of_birth_auto_now_add = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""date_of_birth"", models.DateField(auto_now_add=True)),
        (""date_time_of_birth"", models.DateTimeField(auto_now_add=True)),
        (""time_of_birth"", models.TimeField(auto_now_add=True)),
    ])
    author_name_deconstructible_1 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject())),
    ])
    author_name_deconstructible_2 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject())),
    ])
    author_name_deconstructible_3 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=models.IntegerField())),
    ])
    author_name_deconstructible_4 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=models.IntegerField())),
    ])
    author_name_deconstructible_list_1 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=[DeconstructibleObject(), 123])),
    ])
    author_name_deconstructible_list_2 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=[DeconstructibleObject(), 123])),
    ])
    author_name_deconstructible_list_3 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=[DeconstructibleObject(), 999])),
    ])
    author_name_deconstructible_tuple_1 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=(DeconstructibleObject(), 123))),
    ])
    author_name_deconstructible_tuple_2 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=(DeconstructibleObject(), 123))),
    ])
    author_name_deconstructible_tuple_3 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=(DeconstructibleObject(), 999))),
    ])
    author_name_deconstructible_dict_1 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default={
            'item': DeconstructibleObject(), 'otheritem': 123
        })),
    ])
    author_name_deconstructible_dict_2 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default={
            'item': DeconstructibleObject(), 'otheritem': 123
        })),
    ])
    author_name_deconstructible_dict_3 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default={
            'item': DeconstructibleObject(), 'otheritem': 999
        })),
    ])
    author_name_nested_deconstructible_1 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject(
            DeconstructibleObject(1),
            (DeconstructibleObject('t1'), DeconstructibleObject('t2'),),
            a=DeconstructibleObject('A'),
            b=DeconstructibleObject(B=DeconstructibleObject('c')),
        ))),
    ])
    author_name_nested_deconstructible_2 = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject(
            DeconstructibleObject(1),
            (DeconstructibleObject('t1'), DeconstructibleObject('t2'),),
            a=DeconstructibleObject('A'),
            b=DeconstructibleObject(B=DeconstructibleObject('c')),
        ))),
    ])
    author_name_nested_deconstructible_changed_arg = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject(
            DeconstructibleObject(1),
            (DeconstructibleObject('t1'), DeconstructibleObject('t2-changed'),),
            a=DeconstructibleObject('A'),
            b=DeconstructibleObject(B=DeconstructibleObject('c')),
        ))),
    ])
    author_name_nested_deconstructible_extra_arg = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject(
            DeconstructibleObject(1),
            (DeconstructibleObject('t1'), DeconstructibleObject('t2'),),
            None,
            a=DeconstructibleObject('A'),
            b=DeconstructibleObject(B=DeconstructibleObject('c')),
        ))),
    ])
    author_name_nested_deconstructible_changed_kwarg = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject(
            DeconstructibleObject(1),
            (DeconstructibleObject('t1'), DeconstructibleObject('t2'),),
            a=DeconstructibleObject('A'),
            b=DeconstructibleObject(B=DeconstructibleObject('c-changed')),
        ))),
    ])
    author_name_nested_deconstructible_extra_kwarg = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200, default=DeconstructibleObject(
            DeconstructibleObject(1),
            (DeconstructibleObject('t1'), DeconstructibleObject('t2'),),
            a=DeconstructibleObject('A'),
            b=DeconstructibleObject(B=DeconstructibleObject('c')),
            c=None,
        ))),
    ])
    author_custom_pk = ModelState(""testapp"", ""Author"", [(""pk_field"", models.IntegerField(primary_key=True))])
    author_with_biography_non_blank = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField()),
        (""biography"", models.TextField()),
    ])
    author_with_biography_blank = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(blank=True)),
        (""biography"", models.TextField(blank=True)),
    ])
    author_with_book = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""book"", models.ForeignKey(""otherapp.Book"", models.CASCADE)),
    ])
    author_with_book_order_wrt = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""book"", models.ForeignKey(""otherapp.Book"", models.CASCADE)),
    ], options={""order_with_respect_to"": ""book""})
    author_renamed_with_book = ModelState(""testapp"", ""Writer"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""book"", models.ForeignKey(""otherapp.Book"", models.CASCADE)),
    ])
    author_with_publisher_string = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""publisher_name"", models.CharField(max_length=200)),
    ])
    author_with_publisher = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""publisher"", models.ForeignKey(""testapp.Publisher"", models.CASCADE)),
    ])
    author_with_user = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""user"", models.ForeignKey(""auth.User"", models.CASCADE)),
    ])
    author_with_custom_user = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=200)),
        (""user"", models.ForeignKey(""thirdapp.CustomUser"", models.CASCADE)),
    ])
    author_proxy = ModelState(""testapp"", ""AuthorProxy"", [], {""proxy"": True}, (""testapp.author"",))
    author_proxy_options = ModelState(""testapp"", ""AuthorProxy"", [], {
        ""proxy"": True,
        ""verbose_name"": ""Super Author"",
    }, (""testapp.author"",))
    author_proxy_notproxy = ModelState(""testapp"", ""AuthorProxy"", [], {}, (""testapp.author"",))
    author_proxy_third = ModelState(""thirdapp"", ""AuthorProxy"", [], {""proxy"": True}, (""testapp.author"",))
    author_proxy_third_notproxy = ModelState(""thirdapp"", ""AuthorProxy"", [], {}, (""testapp.author"",))
    author_proxy_proxy = ModelState(""testapp"", ""AAuthorProxyProxy"", [], {""proxy"": True}, (""testapp.authorproxy"",))
    author_unmanaged = ModelState(""testapp"", ""AuthorUnmanaged"", [], {""managed"": False}, (""testapp.author"",))
    author_unmanaged_managed = ModelState(""testapp"", ""AuthorUnmanaged"", [], {}, (""testapp.author"",))
    author_unmanaged_default_pk = ModelState(""testapp"", ""Author"", [(""id"", models.AutoField(primary_key=True))])
    author_unmanaged_custom_pk = ModelState(""testapp"", ""Author"", [
        (""pk_field"", models.IntegerField(primary_key=True)),
    ])
    author_with_m2m = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""publishers"", models.ManyToManyField(""testapp.Publisher"")),
    ])
    author_with_m2m_blank = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""publishers"", models.ManyToManyField(""testapp.Publisher"", blank=True)),
    ])
    author_with_m2m_through = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""publishers"", models.ManyToManyField(""testapp.Publisher"", through=""testapp.Contract"")),
    ])
    author_with_renamed_m2m_through = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""publishers"", models.ManyToManyField(""testapp.Publisher"", through=""testapp.Deal"")),
    ])
    author_with_former_m2m = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
        (""publishers"", models.CharField(max_length=100)),
    ])
    author_with_options = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
    ], {
        ""permissions"": [('can_hire', 'Can hire')],
        ""verbose_name"": ""Authi"",
    })
    author_with_db_table_options = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
    ], {""db_table"": ""author_one""})
    author_with_new_db_table_options = ModelState(""testapp"", ""Author"", [
        (""id"", models.AutoField(primary_key=True)),
    ], {""db_table"": ""author_two""})
    author_renamed_with_db_table_options = ModelState(""testapp"", ""NewAuthor"", [
        (""id"", models.AutoField(primary_key=True)),
    ], {""db_table"": ""author_one""})
    author_renamed_with_new_db_table_options = ModelState(""testapp"", ""NewAuthor"", [
        (""id"", models.AutoField(primary_key=True)),
    ], {""db_table"": ""author_three""})
    contract = ModelState(""testapp"", ""Contract"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""publisher"", models.ForeignKey(""testapp.Publisher"", models.CASCADE)),
    ])
    contract_renamed = ModelState(""testapp"", ""Deal"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""publisher"", models.ForeignKey(""testapp.Publisher"", models.CASCADE)),
    ])
    publisher = ModelState(""testapp"", ""Publisher"", [
        (""id"", models.AutoField(primary_key=True)),
        (""name"", models.CharField(max_length=100)),
    ])
    publisher_with_author = ModelState(""testapp"", ""Publisher"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""name"", models.CharField(max_length=100)),
    ])
    publisher_with_aardvark_author = ModelState(""testapp"", ""Publisher"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Aardvark"", models.CASCADE)),
        (""name"", models.CharField(max_length=100)),
    ])
    publisher_with_book = ModelState(""testapp"", ""Publisher"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""otherapp.Book"", models.CASCADE)),
        (""name"", models.CharField(max_length=100)),
    ])
    other_pony = ModelState(""otherapp"", ""Pony"", [
        (""id"", models.AutoField(primary_key=True)),
    ])
    other_pony_food = ModelState(""otherapp"", ""Pony"", [
        (""id"", models.AutoField(primary_key=True)),
    ], managers=[
        ('food_qs', FoodQuerySet.as_manager()),
        ('food_mgr', FoodManager('a', 'b')),
        ('food_mgr_kwargs', FoodManager('x', 'y', 3, 4)),
    ])
    other_stable = ModelState(""otherapp"", ""Stable"", [(""id"", models.AutoField(primary_key=True))])
    third_thing = ModelState(""thirdapp"", ""Thing"", [(""id"", models.AutoField(primary_key=True))])
    book = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ])
    book_proxy_fk = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""thirdapp.AuthorProxy"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ])
    book_proxy_proxy_fk = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.AAuthorProxyProxy"", models.CASCADE)),
    ])
    book_migrations_fk = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""migrations.UnmigratedModel"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ])
    book_with_no_author_fk = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.IntegerField()),
        (""title"", models.CharField(max_length=200)),
    ])
    book_with_no_author = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""title"", models.CharField(max_length=200)),
    ])
    book_with_author_renamed = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Writer"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ])
    book_with_field_and_author_renamed = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""writer"", models.ForeignKey(""testapp.Writer"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ])
    book_with_multiple_authors = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""authors"", models.ManyToManyField(""testapp.Author"")),
        (""title"", models.CharField(max_length=200)),
    ])
    book_with_multiple_authors_through_attribution = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""authors"", models.ManyToManyField(""testapp.Author"", through=""otherapp.Attribution"")),
        (""title"", models.CharField(max_length=200)),
    ])
    book_indexes = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ], {
        ""indexes"": [models.Index(fields=[""author"", ""title""], name=""book_title_author_idx"")],
    })
    book_unordered_indexes = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ], {
        ""indexes"": [models.Index(fields=[""title"", ""author""], name=""book_author_title_idx"")],
    })
    book_foo_together = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ], {
        ""index_together"": {(""author"", ""title"")},
        ""unique_together"": {(""author"", ""title"")},
    })
    book_foo_together_2 = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ], {
        ""index_together"": {(""title"", ""author"")},
        ""unique_together"": {(""title"", ""author"")},
    })
    book_foo_together_3 = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""newfield"", models.IntegerField()),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ], {
        ""index_together"": {(""title"", ""newfield"")},
        ""unique_together"": {(""title"", ""newfield"")},
    })
    book_foo_together_4 = ModelState(""otherapp"", ""Book"", [
        (""id"", models.AutoField(primary_key=True)),
        (""newfield2"", models.IntegerField()),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""title"", models.CharField(max_length=200)),
    ], {
        ""index_together"": {(""title"", ""newfield2"")},
        ""unique_together"": {(""title"", ""newfield2"")},
    })
    attribution = ModelState(""otherapp"", ""Attribution"", [
        (""id"", models.AutoField(primary_key=True)),
        (""author"", models.ForeignKey(""testapp.Author"", models.CASCADE)),
        (""book"", models.ForeignKey(""otherapp.Book"", models.CASCADE)),
    ])
    edition = ModelState(""thirdapp"", ""Edition"", [
        (""id"", models.AutoField(primary_key=True)),
        (""book"", models.ForeignKey(""otherapp.Book"", models.CASCADE)),
    ])
    custom_user = ModelState(""thirdapp"", ""CustomUser"", [
        (""id"", models.AutoField(primary_key=True)),
        (""username"", models.CharField(max_length=255)),
    ], bases=(AbstractBaseUser,))
    custom_user_no_inherit = ModelState(""thirdapp"", ""CustomUser"", [
        (""id"", models.AutoField(primary_key=True)),
        (""username"", models.CharField(max_length=255)),
    ])
    aardvark = ModelState(""thirdapp"", ""Aardvark"", [(""id"", models.AutoField(primary_key=True))])
    aardvark_testapp = ModelState(""testapp"", ""Aardvark"", [(""id"", models.AutoField(primary_key=True))])
    aardvark_based_on_author = ModelState(""testapp"", ""Aardvark"", [], bases=(""testapp.Author"",))
    aardvark_pk_fk_author = ModelState(""testapp"", ""Aardvark"", [
        (""id"", models.OneToOneField(""testapp.Author"", models.CASCADE, primary_key=True)),
    ])
    knight = ModelState(""eggs"", ""Knight"", [(""id"", models.AutoField(primary_key=True))])
    rabbit = ModelState(""eggs"", ""Rabbit"", [
        (""id"", models.AutoField(primary_key=True)),
        (""knight"", models.ForeignKey(""eggs.Knight"", models.CASCADE)),
        (""parent"", models.ForeignKey(""eggs.Rabbit"", models.CASCADE)),
    ], {
        ""unique_together"": {(""parent"", ""knight"")},
        ""indexes"": [models.Index(fields=[""parent"", ""knight""], name='rabbit_circular_fk_index')],
    })

    def repr_changes(self, changes, include_dependencies=False):
        output = """"
        for app_label, migrations_ in sorted(changes.items()):
            output += ""  %s:\n"" % app_label
            for migration in migrations_:
                output += ""    %s\n"" % migration.name
                for operation in migration.operations:
                    output += ""      %s\n"" % operation
                if include_dependencies:
                    output += ""      Dependencies:\n""
                    if migration.dependencies:
                        for dep in migration.dependencies:
                            output += ""        %s\n"" % (dep,)
                    else:
                        output += ""        None\n""
        return output

    def assertNumberMigrations(self, changes, app_label, number):
        if len(changes.get(app_label, [])) != number:
            self.fail(""Incorrect number of migrations (%s) for %s (expected %s)\n%s"" % (
                len(changes.get(app_label, [])),
                app_label,
                number,
                self.repr_changes(changes),
            ))

    def assertMigrationDependencies(self, changes, app_label, position, dependencies):
        if not changes.get(app_label):
            self.fail(""No migrations found for %s\n%s"" % (app_label, self.repr_changes(changes)))
        if len(changes[app_label]) < position + 1:
            self.fail(""No migration at index %s for %s\n%s"" % (position, app_label, self.repr_changes(changes)))
        migration = changes[app_label][position]
        if set(migration.dependencies) != set(dependencies):
            self.fail(""Migration dependencies mismatch for %s.%s (expected %s):\n%s"" % (
                app_label,
                migration.name,
                dependencies,
                self.repr_changes(changes, include_dependencies=True),
            ))

    def assertOperationTypes(self, changes, app_label, position, types):
        if not changes.get(app_label):
            self.fail(""No migrations found for %s\n%s"" % (app_label, self.repr_changes(changes)))
        if len(changes[app_label]) < position + 1:
            self.fail(""No migration at index %s for %s\n%s"" % (position, app_label, self.repr_changes(changes)))
        migration = changes[app_label][position]
        real_types = [operation.__class__.__name__ for operation in migration.operations]
        if types != real_types:
            self.fail(""Operation type mismatch for %s.%s (expected %s):\n%s"" % (
                app_label,
                migration.name,
                types,
                self.repr_changes(changes),
            ))

    def assertOperationAttributes(self, changes, app_label, position, operation_position, **attrs):
        if not changes.get(app_label):
            self.fail(""No migrations found for %s\n%s"" % (app_label, self.repr_changes(changes)))
        if len(changes[app_label]) < position + 1:
            self.fail(""No migration at index %s for %s\n%s"" % (position, app_label, self.repr_changes(changes)))
        migration = changes[app_label][position]
        if len(changes[app_label]) < position + 1:
            self.fail(""No operation at index %s for %s.%s\n%s"" % (
                operation_position,
                app_label,
                migration.name,
                self.repr_changes(changes),
            ))
        operation = migration.operations[operation_position]
        for attr, value in attrs.items():
            if getattr(operation, attr, None) != value:
                self.fail(""Attribute mismatch for %s.%s op #%s, %s (expected %r, got %r):\n%s"" % (
                    app_label,
                    migration.name,
                    operation_position,
                    attr,
                    value,
                    getattr(operation, attr, None),
                    self.repr_changes(changes),
                ))

    def assertOperationFieldAttributes(self, changes, app_label, position, operation_position, **attrs):
        if not changes.get(app_label):
            self.fail(""No migrations found for %s\n%s"" % (app_label, self.repr_changes(changes)))
        if len(changes[app_label]) < position + 1:
            self.fail(""No migration at index %s for %s\n%s"" % (position, app_label, self.repr_changes(changes)))
        migration = changes[app_label][position]
        if len(changes[app_label]) < position + 1:
            self.fail(""No operation at index %s for %s.%s\n%s"" % (
                operation_position,
                app_label,
                migration.name,
                self.repr_changes(changes),
            ))
        operation = migration.operations[operation_position]
        if not hasattr(operation, 'field'):
            self.fail(""No field attribute for %s.%s op #%s."" % (
                app_label,
                migration.name,
                operation_position,
            ))
        field = operation.field
        for attr, value in attrs.items():
            if getattr(field, attr, None) != value:
                self.fail(""Field attribute mismatch for %s.%s op #%s, field.%s (expected %r, got %r):\n%s"" % (
                    app_label,
                    migration.name,
                    operation_position,
                    attr,
                    value,
                    getattr(field, attr, None),
                    self.repr_changes(changes),
                ))

    def make_project_state(self, model_states):
        ""Shortcut to make ProjectStates from lists of predefined models""
        project_state = ProjectState()
        for model_state in model_states:
            project_state.add_model(model_state.clone())
        return project_state

    def get_changes(self, before_states, after_states, questioner=None):
        if not isinstance(before_states, ProjectState):
            before_states = self.make_project_state(before_states)
        if not isinstance(after_states, ProjectState):
            after_states = self.make_project_state(after_states)
        return MigrationAutodetector(
            before_states,
            after_states,
            questioner,
        )._detect_changes()

    def test_arrange_for_graph(self):
        """"""Tests auto-naming of migrations for graph matching.""""""
        # Make a fake graph
        graph = MigrationGraph()
        graph.add_node((""testapp"", ""0001_initial""), None)
        graph.add_node((""testapp"", ""0002_foobar""), None)
        graph.add_node((""otherapp"", ""0001_initial""), None)
        graph.add_dependency(""testapp.0002_foobar"", (""testapp"", ""0002_foobar""), (""testapp"", ""0001_initial""))
        graph.add_dependency(""testapp.0002_foobar"", (""testapp"", ""0002_foobar""), (""otherapp"", ""0001_initial""))
        # Use project state to make a new migration change set
        before = self.make_project_state([self.publisher, self.other_pony])
        after = self.make_project_state([
            self.author_empty, self.publisher, self.other_pony, self.other_stable,
        ])
        autodetector = MigrationAutodetector(before, after)
        changes = autodetector._detect_changes()
        # Run through arrange_for_graph
        changes = autodetector.arrange_for_graph(changes, graph)
        # Make sure there's a new name, deps match, etc.
        self.assertEqual(changes[""testapp""][0].name, ""0003_author"")
        self.assertEqual(changes[""testapp""][0].dependencies, [(""testapp"", ""0002_foobar"")])
        self.assertEqual(changes[""otherapp""][0].name, '0002_stable')
        self.assertEqual(changes[""otherapp""][0].dependencies, [(""otherapp"", ""0001_initial"")])

    def test_arrange_for_graph_with_multiple_initial(self):
        # Make a fake graph.
        graph = MigrationGraph()
        # Use project state to make a new migration change set.
        before = self.make_project_state([])
        after = self.make_project_state([self.author_with_book, self.book, self.attribution])
        autodetector = MigrationAutodetector(before, after, MigrationQuestioner({'ask_initial': True}))
        changes = autodetector._detect_changes()
        changes = autodetector.arrange_for_graph(changes, graph)

        self.assertEqual(changes['otherapp'][0].name, '0001_initial')
        self.assertEqual(changes['otherapp'][0].dependencies, [])
        self.assertEqual(changes['otherapp'][1].name, '0002_initial')
        self.assertCountEqual(
            changes['otherapp'][1].dependencies,
            [('testapp', '0001_initial'), ('otherapp', '0001_initial')],
        )
        self.assertEqual(changes['testapp'][0].name, '0001_initial')
        self.assertEqual(changes['testapp'][0].dependencies, [('otherapp', '0001_initial')])

    def test_trim_apps(self):
        """"""
        Trim does not remove dependencies but does remove unwanted apps.
        """"""
        # Use project state to make a new migration change set
        before = self.make_project_state([])
        after = self.make_project_state([self.author_empty, self.other_pony, self.other_stable, self.third_thing])
        autodetector = MigrationAutodetector(before, after, MigrationQuestioner({""ask_initial"": True}))
        changes = autodetector._detect_changes()
        # Run through arrange_for_graph
        graph = MigrationGraph()
        changes = autodetector.arrange_for_graph(changes, graph)
        changes[""testapp""][0].dependencies.append((""otherapp"", ""0001_initial""))
        changes = autodetector._trim_to_apps(changes, {""testapp""})
        # Make sure there's the right set of migrations
        self.assertEqual(changes[""testapp""][0].name, ""0001_initial"")
        self.assertEqual(changes[""otherapp""][0].name, ""0001_initial"")
        self.assertNotIn(""thirdapp"", changes)

    def test_custom_migration_name(self):
        """"""Tests custom naming of migrations for graph matching.""""""
        # Make a fake graph
        graph = MigrationGraph()
        graph.add_node((""testapp"", ""0001_initial""), None)
        graph.add_node((""testapp"", ""0002_foobar""), None)
        graph.add_node((""otherapp"", ""0001_initial""), None)
        graph.add_dependency(""testapp.0002_foobar"", (""testapp"", ""0002_foobar""), (""testapp"", ""0001_initial""))

        # Use project state to make a new migration change set
        before = self.make_project_state([])
        after = self.make_project_state([self.author_empty, self.other_pony, self.other_stable])
        autodetector = MigrationAutodetector(before, after)
        changes = autodetector._detect_changes()

        # Run through arrange_for_graph
        migration_name = 'custom_name'
        changes = autodetector.arrange_for_graph(changes, graph, migration_name)

        # Make sure there's a new name, deps match, etc.
        self.assertEqual(changes[""testapp""][0].name, ""0003_%s"" % migration_name)
        self.assertEqual(changes[""testapp""][0].dependencies, [(""testapp"", ""0002_foobar"")])
        self.assertEqual(changes[""otherapp""][0].name, ""0002_%s"" % migration_name)
        self.assertEqual(changes[""otherapp""][0].dependencies, [(""otherapp"", ""0001_initial"")])

    def test_new_model(self):
        """"""Tests autodetection of new models.""""""
        changes = self.get_changes([], [self.other_pony_food])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, ""otherapp"", 0, 0, name=""Pony"")
        self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],
                         ['food_qs', 'food_mgr', 'food_mgr_kwargs'])

    def test_old_model(self):
        """"""Tests deletion of old models.""""""
        changes = self.get_changes([self.author_empty], [])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""DeleteModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""Author"")

    def test_add_field(self):
        """"""Tests autodetection of new fields.""""""
        changes = self.get_changes([self.author_empty], [self.author_name])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""name"")

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition',
                side_effect=AssertionError(""Should not have prompted for not null addition""))
    def test_add_date_fields_with_auto_now_not_asking_for_default(self, mocked_ask_method):
        changes = self.get_changes([self.author_empty], [self.author_dates_of_birth_auto_now])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField"", ""AddField"", ""AddField""])
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 0, auto_now=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 1, auto_now=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 2, auto_now=True)

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition',
                side_effect=AssertionError(""Should not have prompted for not null addition""))
    def test_add_date_fields_with_auto_now_add_not_asking_for_null_addition(self, mocked_ask_method):
        changes = self.get_changes([self.author_empty], [self.author_dates_of_birth_auto_now_add])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField"", ""AddField"", ""AddField""])
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 0, auto_now_add=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 1, auto_now_add=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 2, auto_now_add=True)

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_auto_now_add_addition')
    def test_add_date_fields_with_auto_now_add_asking_for_default(self, mocked_ask_method):
        changes = self.get_changes([self.author_empty], [self.author_dates_of_birth_auto_now_add])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField"", ""AddField"", ""AddField""])
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 0, auto_now_add=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 1, auto_now_add=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 2, auto_now_add=True)
        self.assertEqual(mocked_ask_method.call_count, 3)

    def test_remove_field(self):
        """"""Tests autodetection of removed fields.""""""
        changes = self.get_changes([self.author_name], [self.author_empty])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RemoveField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""name"")

    def test_alter_field(self):
        """"""Tests autodetection of new fields.""""""
        changes = self.get_changes([self.author_name], [self.author_name_longer])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""name"", preserve_default=True)

    def test_supports_functools_partial(self):
        def _content_file_name(instance, filename, key, **kwargs):
            return '{}/{}'.format(instance, filename)

        def content_file_name(key, **kwargs):
            return functools.partial(_content_file_name, key, **kwargs)

        # An unchanged partial reference.
        before = [ModelState(""testapp"", ""Author"", [
            (""id"", models.AutoField(primary_key=True)),
            (""file"", models.FileField(max_length=200, upload_to=content_file_name('file'))),
        ])]
        after = [ModelState(""testapp"", ""Author"", [
            (""id"", models.AutoField(primary_key=True)),
            (""file"", models.FileField(max_length=200, upload_to=content_file_name('file'))),
        ])]
        changes = self.get_changes(before, after)
        self.assertNumberMigrations(changes, 'testapp', 0)

        # A changed partial reference.
        args_changed = [ModelState(""testapp"", ""Author"", [
            (""id"", models.AutoField(primary_key=True)),
            (""file"", models.FileField(max_length=200, upload_to=content_file_name('other-file'))),
        ])]
        changes = self.get_changes(before, args_changed)
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['AlterField'])
        # Can't use assertOperationFieldAttributes because we need the
        # deconstructed version, i.e., the exploded func/args/keywords rather
        # than the partial: we don't care if it's not the same instance of the
        # partial, only if it's the same source function, args, and keywords.
        value = changes['testapp'][0].operations[0].field.upload_to
        self.assertEqual(
            (_content_file_name, ('other-file',), {}),
            (value.func, value.args, value.keywords)
        )

        kwargs_changed = [ModelState(""testapp"", ""Author"", [
            (""id"", models.AutoField(primary_key=True)),
            (""file"", models.FileField(max_length=200, upload_to=content_file_name('file', spam='eggs'))),
        ])]
        changes = self.get_changes(before, kwargs_changed)
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['AlterField'])
        value = changes['testapp'][0].operations[0].field.upload_to
        self.assertEqual(
            (_content_file_name, ('file',), {'spam': 'eggs'}),
            (value.func, value.args, value.keywords)
        )

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration',
                side_effect=AssertionError(""Should not have prompted for not null addition""))
    def test_alter_field_to_not_null_with_default(self, mocked_ask_method):
        """"""
        #23609 - Tests autodetection of nullable to non-nullable alterations.
        """"""
        changes = self.get_changes([self.author_name_null], [self.author_name_default])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""name"", preserve_default=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 0, default='Ada Lovelace')

    @mock.patch(
        'django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration',
        return_value=models.NOT_PROVIDED,
    )
    def test_alter_field_to_not_null_without_default(self, mocked_ask_method):
        """"""
        #23609 - Tests autodetection of nullable to non-nullable alterations.
        """"""
        changes = self.get_changes([self.author_name_null], [self.author_name])
        self.assertEqual(mocked_ask_method.call_count, 1)
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""name"", preserve_default=True)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 0, default=models.NOT_PROVIDED)

    @mock.patch(
        'django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration',
        return_value='Some Name',
    )
    def test_alter_field_to_not_null_oneoff_default(self, mocked_ask_method):
        """"""
        #23609 - Tests autodetection of nullable to non-nullable alterations.
        """"""
        changes = self.get_changes([self.author_name_null], [self.author_name])
        self.assertEqual(mocked_ask_method.call_count, 1)
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""name"", preserve_default=False)
        self.assertOperationFieldAttributes(changes, ""testapp"", 0, 0, default=""Some Name"")

    def test_rename_field(self):
        """"""Tests autodetection of renamed fields.""""""
        changes = self.get_changes(
            [self.author_name], [self.author_name_renamed], MigrationQuestioner({""ask_rename"": True})
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RenameField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name=""name"", new_name=""names"")

    def test_rename_field_foreign_key_to_field(self):
        before = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('field', models.IntegerField(unique=True)),
            ]),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('foo', models.ForeignKey('app.Foo', models.CASCADE, to_field='field')),
            ]),
        ]
        after = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('renamed_field', models.IntegerField(unique=True)),
            ]),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('foo', models.ForeignKey('app.Foo', models.CASCADE, to_field='renamed_field')),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['RenameField'])
        self.assertOperationAttributes(changes, 'app', 0, 0, old_name='field', new_name='renamed_field')

    def test_rename_foreign_object_fields(self):
        fields = ('first', 'second')
        renamed_fields = ('first_renamed', 'second_renamed')
        before = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('first', models.IntegerField()),
                ('second', models.IntegerField()),
            ], options={'unique_together': {fields}}),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('first', models.IntegerField()),
                ('second', models.IntegerField()),
                ('foo', models.ForeignObject(
                    'app.Foo', models.CASCADE, from_fields=fields, to_fields=fields,
                )),
            ]),
        ]
        # Case 1: to_fields renames.
        after = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('first_renamed', models.IntegerField()),
                ('second_renamed', models.IntegerField()),
            ], options={'unique_together': {renamed_fields}}),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('first', models.IntegerField()),
                ('second', models.IntegerField()),
                ('foo', models.ForeignObject(
                    'app.Foo', models.CASCADE, from_fields=fields, to_fields=renamed_fields,
                )),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['RenameField', 'RenameField', 'AlterUniqueTogether'])
        self.assertOperationAttributes(
            changes, 'app', 0, 0, model_name='foo', old_name='first', new_name='first_renamed',
        )
        self.assertOperationAttributes(
            changes, 'app', 0, 1, model_name='foo', old_name='second', new_name='second_renamed',
        )
        # Case 2: from_fields renames.
        after = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('first', models.IntegerField()),
                ('second', models.IntegerField()),
            ], options={'unique_together': {fields}}),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('first_renamed', models.IntegerField()),
                ('second_renamed', models.IntegerField()),
                ('foo', models.ForeignObject(
                    'app.Foo', models.CASCADE, from_fields=renamed_fields, to_fields=fields,
                )),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['RenameField', 'RenameField'])
        self.assertOperationAttributes(
            changes, 'app', 0, 0, model_name='bar', old_name='first', new_name='first_renamed',
        )
        self.assertOperationAttributes(
            changes, 'app', 0, 1, model_name='bar', old_name='second', new_name='second_renamed',
        )

    def test_rename_referenced_primary_key(self):
        before = [
            ModelState('app', 'Foo', [
                ('id', models.CharField(primary_key=True, serialize=False)),
            ]),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('foo', models.ForeignKey('app.Foo', models.CASCADE)),
            ]),
        ]
        after = [
            ModelState('app', 'Foo', [
                ('renamed_id', models.CharField(primary_key=True, serialize=False))
            ]),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('foo', models.ForeignKey('app.Foo', models.CASCADE)),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['RenameField'])
        self.assertOperationAttributes(changes, 'app', 0, 0, old_name='id', new_name='renamed_id')

    def test_rename_field_preserved_db_column(self):
        """"""
        RenameField is used if a field is renamed and db_column equal to the
        old field's column is added.
        """"""
        before = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('field', models.IntegerField()),
            ]),
        ]
        after = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
                ('renamed_field', models.IntegerField(db_column='field')),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['AlterField', 'RenameField'])
        self.assertOperationAttributes(
            changes, 'app', 0, 0, model_name='foo', name='field',
        )
        self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (
            'field', 'django.db.models.IntegerField', [], {'db_column': 'field'},
        ))
        self.assertOperationAttributes(
            changes, 'app', 0, 1, model_name='foo', old_name='field',
            new_name='renamed_field',
        )

    def test_rename_related_field_preserved_db_column(self):
        before = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
            ]),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('foo', models.ForeignKey('app.Foo', models.CASCADE)),
            ]),
        ]
        after = [
            ModelState('app', 'Foo', [
                ('id', models.AutoField(primary_key=True)),
            ]),
            ModelState('app', 'Bar', [
                ('id', models.AutoField(primary_key=True)),
                ('renamed_foo', models.ForeignKey('app.Foo', models.CASCADE, db_column='foo_id')),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename': True}))
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['AlterField', 'RenameField'])
        self.assertOperationAttributes(
            changes, 'app', 0, 0, model_name='bar', name='foo',
        )
        self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (
            'foo',
            'django.db.models.ForeignKey',
            [],
            {'to': 'app.foo', 'on_delete': models.CASCADE, 'db_column': 'foo_id'},
        ))
        self.assertOperationAttributes(
            changes, 'app', 0, 1, model_name='bar', old_name='foo',
            new_name='renamed_foo',
        )

    def test_rename_model(self):
        """"""Tests autodetection of renamed models.""""""
        changes = self.get_changes(
            [self.author_with_book, self.book],
            [self.author_renamed_with_book, self.book_with_author_renamed],
            MigrationQuestioner({""ask_rename_model"": True}),
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RenameModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name=""Author"", new_name=""Writer"")
        # Now that RenameModel handles related fields too, there should be
        # no AlterField for the related field.
        self.assertNumberMigrations(changes, 'otherapp', 0)

    def test_rename_model_case(self):
        """"""
        Model name is case-insensitive. Changing case doesn't lead to any
        autodetected operations.
        """"""
        author_renamed = ModelState('testapp', 'author', [
            ('id', models.AutoField(primary_key=True)),
        ])
        changes = self.get_changes(
            [self.author_empty, self.book],
            [author_renamed, self.book],
            questioner=MigrationQuestioner({'ask_rename_model': True}),
        )
        self.assertNumberMigrations(changes, 'testapp', 0)
        self.assertNumberMigrations(changes, 'otherapp', 0)

    def test_renamed_referenced_m2m_model_case(self):
        publisher_renamed = ModelState('testapp', 'publisher', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=100)),
        ])
        changes = self.get_changes(
            [self.publisher, self.author_with_m2m],
            [publisher_renamed, self.author_with_m2m],
            questioner=MigrationQuestioner({'ask_rename_model': True}),
        )
        self.assertNumberMigrations(changes, 'testapp', 0)
        self.assertNumberMigrations(changes, 'otherapp', 0)

    def test_rename_m2m_through_model(self):
        """"""
        Tests autodetection of renamed models that are used in M2M relations as
        through models.
        """"""
        changes = self.get_changes(
            [self.author_with_m2m_through, self.publisher, self.contract],
            [self.author_with_renamed_m2m_through, self.publisher, self.contract_renamed],
            MigrationQuestioner({'ask_rename_model': True})
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel'])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Contract', new_name='Deal')

    def test_rename_model_with_renamed_rel_field(self):
        """"""
        Tests autodetection of renamed models while simultaneously renaming one
        of the fields that relate to the renamed model.
        """"""
        changes = self.get_changes(
            [self.author_with_book, self.book],
            [self.author_renamed_with_book, self.book_with_field_and_author_renamed],
            MigrationQuestioner({""ask_rename"": True, ""ask_rename_model"": True}),
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RenameModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name=""Author"", new_name=""Writer"")
        # Right number/type of migrations for related field rename?
        # Alter is already taken care of.
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""RenameField""])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, old_name=""author"", new_name=""writer"")

    def test_rename_model_with_fks_in_different_position(self):
        """"""
        #24537 - The order of fields in a model does not influence
        the RenameModel detection.
        """"""
        before = [
            ModelState(""testapp"", ""EntityA"", [
                (""id"", models.AutoField(primary_key=True)),
            ]),
            ModelState(""testapp"", ""EntityB"", [
                (""id"", models.AutoField(primary_key=True)),
                (""some_label"", models.CharField(max_length=255)),
                (""entity_a"", models.ForeignKey(""testapp.EntityA"", models.CASCADE)),
            ]),
        ]
        after = [
            ModelState(""testapp"", ""EntityA"", [
                (""id"", models.AutoField(primary_key=True)),
            ]),
            ModelState(""testapp"", ""RenamedEntityB"", [
                (""id"", models.AutoField(primary_key=True)),
                (""entity_a"", models.ForeignKey(""testapp.EntityA"", models.CASCADE)),
                (""some_label"", models.CharField(max_length=255)),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({""ask_rename_model"": True}))
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""RenameModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, old_name=""EntityB"", new_name=""RenamedEntityB"")

    def test_rename_model_reverse_relation_dependencies(self):
        """"""
        The migration to rename a model pointed to by a foreign key in another
        app must run after the other app's migration that adds the foreign key
        with model's original name. Therefore, the renaming migration has a
        dependency on that other migration.
        """"""
        before = [
            ModelState('testapp', 'EntityA', [
                ('id', models.AutoField(primary_key=True)),
            ]),
            ModelState('otherapp', 'EntityB', [
                ('id', models.AutoField(primary_key=True)),
                ('entity_a', models.ForeignKey('testapp.EntityA', models.CASCADE)),
            ]),
        ]
        after = [
            ModelState('testapp', 'RenamedEntityA', [
                ('id', models.AutoField(primary_key=True)),
            ]),
            ModelState('otherapp', 'EntityB', [
                ('id', models.AutoField(primary_key=True)),
                ('entity_a', models.ForeignKey('testapp.RenamedEntityA', models.CASCADE)),
            ]),
        ]
        changes = self.get_changes(before, after, MigrationQuestioner({'ask_rename_model': True}))
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertMigrationDependencies(changes, 'testapp', 0, [('otherapp', '__first__')])
        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel'])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='EntityA', new_name='RenamedEntityA')

    def test_fk_dependency(self):
        """"""Having a ForeignKey automatically adds a dependency.""""""
        # Note that testapp (author) has no dependencies,
        # otherapp (book) depends on testapp (author),
        # thirdapp (edition) depends on otherapp (book)
        changes = self.get_changes([], [self.author_name, self.book, self.edition])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Author"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name=""Book"")
        self.assertMigrationDependencies(changes, 'otherapp', 0, [(""testapp"", ""auto_1"")])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'thirdapp', 1)
        self.assertOperationTypes(changes, 'thirdapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'thirdapp', 0, 0, name=""Edition"")
        self.assertMigrationDependencies(changes, 'thirdapp', 0, [(""otherapp"", ""auto_1"")])

    def test_proxy_fk_dependency(self):
        """"""FK dependencies still work on proxy models.""""""
        # Note that testapp (author) has no dependencies,
        # otherapp (book) depends on testapp (authorproxy)
        changes = self.get_changes([], [self.author_empty, self.author_proxy_third, self.book_proxy_fk])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Author"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name=""Book"")
        self.assertMigrationDependencies(changes, 'otherapp', 0, [(""thirdapp"", ""auto_1"")])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'thirdapp', 1)
        self.assertOperationTypes(changes, 'thirdapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'thirdapp', 0, 0, name=""AuthorProxy"")
        self.assertMigrationDependencies(changes, 'thirdapp', 0, [(""testapp"", ""auto_1"")])

    def test_same_app_no_fk_dependency(self):
        """"""
        A migration with a FK between two models of the same app
        does not have a dependency to itself.
        """"""
        changes = self.get_changes([], [self.author_with_publisher, self.publisher])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""Publisher"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""Author"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [])

    def test_circular_fk_dependency(self):
        """"""
        Having a circular ForeignKey dependency automatically
        resolves the situation into 2 migrations on one side and 1 on the other.
        """"""
        changes = self.get_changes([], [self.author_with_book, self.book, self.publisher_with_book])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""Publisher"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""Author"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [(""otherapp"", ""auto_1"")])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 2)
        self.assertOperationTypes(changes, 'otherapp', 0, [""CreateModel""])
        self.assertOperationTypes(changes, 'otherapp', 1, [""AddField""])
        self.assertMigrationDependencies(changes, 'otherapp', 0, [])
        self.assertMigrationDependencies(changes, 'otherapp', 1, [(""otherapp"", ""auto_1""), (""testapp"", ""auto_1"")])
        # both split migrations should be `initial`
        self.assertTrue(changes['otherapp'][0].initial)
        self.assertTrue(changes['otherapp'][1].initial)

    def test_same_app_circular_fk_dependency(self):
        """"""
        A migration with a FK between two models of the same app does
        not have a dependency to itself.
        """"""
        changes = self.get_changes([], [self.author_with_publisher, self.publisher_with_author])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""CreateModel"", ""AddField""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""Author"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""Publisher"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 2, name=""publisher"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [])

    def test_same_app_circular_fk_dependency_with_unique_together_and_indexes(self):
        """"""
        #22275 - A migration with circular FK dependency does not try
        to create unique together constraint and indexes before creating all
        required fields first.
        """"""
        changes = self.get_changes([], [self.knight, self.rabbit])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'eggs', 1)
        self.assertOperationTypes(
            changes, 'eggs', 0, [""CreateModel"", ""CreateModel"", ""AddIndex"", ""AlterUniqueTogether""]
        )
        self.assertNotIn(""unique_together"", changes['eggs'][0].operations[0].options)
        self.assertNotIn(""unique_together"", changes['eggs'][0].operations[1].options)
        self.assertMigrationDependencies(changes, 'eggs', 0, [])

    def test_alter_db_table_add(self):
        """"""Tests detection for adding db_table in model's options.""""""
        changes = self.get_changes([self.author_empty], [self.author_with_db_table_options])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterModelTable""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""author"", table=""author_one"")

    def test_alter_db_table_change(self):
        """"""Tests detection for changing db_table in model's options'.""""""
        changes = self.get_changes([self.author_with_db_table_options], [self.author_with_new_db_table_options])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterModelTable""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""author"", table=""author_two"")

    def test_alter_db_table_remove(self):
        """"""Tests detection for removing db_table in model's options.""""""
        changes = self.get_changes([self.author_with_db_table_options], [self.author_empty])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterModelTable""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""author"", table=None)

    def test_alter_db_table_no_changes(self):
        """"""
        Alter_db_table doesn't generate a migration if no changes have been made.
        """"""
        changes = self.get_changes([self.author_with_db_table_options], [self.author_with_db_table_options])
        # Right number of migrations?
        self.assertEqual(len(changes), 0)

    def test_keep_db_table_with_model_change(self):
        """"""
        Tests when model changes but db_table stays as-is, autodetector must not
        create more than one operation.
        """"""
        changes = self.get_changes(
            [self.author_with_db_table_options],
            [self.author_renamed_with_db_table_options],
            MigrationQuestioner({""ask_rename_model"": True}),
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RenameModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, old_name=""Author"", new_name=""NewAuthor"")

    def test_alter_db_table_with_model_change(self):
        """"""
        Tests when model and db_table changes, autodetector must create two
        operations.
        """"""
        changes = self.get_changes(
            [self.author_with_db_table_options],
            [self.author_renamed_with_new_db_table_options],
            MigrationQuestioner({""ask_rename_model"": True}),
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RenameModel"", ""AlterModelTable""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, old_name=""Author"", new_name=""NewAuthor"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""newauthor"", table=""author_three"")

    def test_identical_regex_doesnt_alter(self):
        from_state = ModelState(
            ""testapp"", ""model"", [(""id"", models.AutoField(primary_key=True, validators=[
                RegexValidator(
                    re.compile('^[-a-zA-Z0-9_]+\\Z'),
                    'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.',
                    'invalid'
                )
            ]))]
        )
        to_state = ModelState(
            ""testapp"", ""model"", [(""id"", models.AutoField(primary_key=True, validators=[validate_slug]))]
        )
        changes = self.get_changes([from_state], [to_state])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 0)

    def test_different_regex_does_alter(self):
        from_state = ModelState(
            ""testapp"", ""model"", [(""id"", models.AutoField(primary_key=True, validators=[
                RegexValidator(
                    re.compile('^[a-z]+\\Z', 32),
                    'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.',
                    'invalid'
                )
            ]))]
        )
        to_state = ModelState(
            ""testapp"", ""model"", [(""id"", models.AutoField(primary_key=True, validators=[validate_slug]))]
        )
        changes = self.get_changes([from_state], [to_state])
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""AlterField""])

    def test_empty_foo_together(self):
        """"""
        #23452 - Empty unique/index_together shouldn't generate a migration.
        """"""
        # Explicitly testing for not specified, since this is the case after
        # a CreateModel operation w/o any definition on the original model
        model_state_not_specified = ModelState(""a"", ""model"", [(""id"", models.AutoField(primary_key=True))])
        # Explicitly testing for None, since this was the issue in #23452 after
        # an AlterFooTogether operation with e.g. () as value
        model_state_none = ModelState(""a"", ""model"", [
            (""id"", models.AutoField(primary_key=True))
        ], {
            ""index_together"": None,
            ""unique_together"": None,
        })
        # Explicitly testing for the empty set, since we now always have sets.
        # During removal (('col1', 'col2'),) --> () this becomes set([])
        model_state_empty = ModelState(""a"", ""model"", [
            (""id"", models.AutoField(primary_key=True))
        ], {
            ""index_together"": set(),
            ""unique_together"": set(),
        })

        def test(from_state, to_state, msg):
            changes = self.get_changes([from_state], [to_state])
            if changes:
                ops = ', '.join(o.__class__.__name__ for o in changes['a'][0].operations)
                self.fail('Created operation(s) %s from %s' % (ops, msg))

        tests = (
            (model_state_not_specified, model_state_not_specified, '""not specified"" to ""not specified""'),
            (model_state_not_specified, model_state_none, '""not specified"" to ""None""'),
            (model_state_not_specified, model_state_empty, '""not specified"" to ""empty""'),
            (model_state_none, model_state_not_specified, '""None"" to ""not specified""'),
            (model_state_none, model_state_none, '""None"" to ""None""'),
            (model_state_none, model_state_empty, '""None"" to ""empty""'),
            (model_state_empty, model_state_not_specified, '""empty"" to ""not specified""'),
            (model_state_empty, model_state_none, '""empty"" to ""None""'),
            (model_state_empty, model_state_empty, '""empty"" to ""empty""'),
        )

        for t in tests:
            test(*t)

    def test_create_model_with_indexes(self):
        """"""Test creation of new model with indexes already defined.""""""
        author = ModelState('otherapp', 'Author', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=200)),
        ], {'indexes': [models.Index(fields=['name'], name='create_model_with_indexes_idx')]})
        changes = self.get_changes([], [author])
        added_index = models.Index(fields=['name'], name='create_model_with_indexes_idx')
        # Right number of migrations?
        self.assertEqual(len(changes['otherapp']), 1)
        # Right number of actions?
        migration = changes['otherapp'][0]
        self.assertEqual(len(migration.operations), 2)
        # Right actions order?
        self.assertOperationTypes(changes, 'otherapp', 0, ['CreateModel', 'AddIndex'])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name='Author')
        self.assertOperationAttributes(changes, 'otherapp', 0, 1, model_name='author', index=added_index)

    def test_add_indexes(self):
        """"""Test change detection of new indexes.""""""
        changes = self.get_changes([self.author_empty, self.book], [self.author_empty, self.book_indexes])
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['AddIndex'])
        added_index = models.Index(fields=['author', 'title'], name='book_title_author_idx')
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, model_name='book', index=added_index)

    def test_remove_indexes(self):
        """"""Test change detection of removed indexes.""""""
        changes = self.get_changes([self.author_empty, self.book_indexes], [self.author_empty, self.book])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['RemoveIndex'])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, model_name='book', name='book_title_author_idx')

    def test_order_fields_indexes(self):
        """"""Test change detection of reordering of fields in indexes.""""""
        changes = self.get_changes(
            [self.author_empty, self.book_indexes], [self.author_empty, self.book_unordered_indexes]
        )
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['RemoveIndex', 'AddIndex'])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, model_name='book', name='book_title_author_idx')
        added_index = models.Index(fields=['title', 'author'], name='book_author_title_idx')
        self.assertOperationAttributes(changes, 'otherapp', 0, 1, model_name='book', index=added_index)

    def test_create_model_with_check_constraint(self):
        """"""Test creation of new model with constraints already defined.""""""
        author = ModelState('otherapp', 'Author', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=200)),
        ], {'constraints': [models.CheckConstraint(check=models.Q(name__contains='Bob'), name='name_contains_bob')]})
        changes = self.get_changes([], [author])
        added_constraint = models.CheckConstraint(check=models.Q(name__contains='Bob'), name='name_contains_bob')
        # Right number of migrations?
        self.assertEqual(len(changes['otherapp']), 1)
        # Right number of actions?
        migration = changes['otherapp'][0]
        self.assertEqual(len(migration.operations), 2)
        # Right actions order?
        self.assertOperationTypes(changes, 'otherapp', 0, ['CreateModel', 'AddConstraint'])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name='Author')
        self.assertOperationAttributes(changes, 'otherapp', 0, 1, model_name='author', constraint=added_constraint)

    def test_add_constraints(self):
        """"""Test change detection of new constraints.""""""
        changes = self.get_changes([self.author_name], [self.author_name_check_constraint])
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['AddConstraint'])
        added_constraint = models.CheckConstraint(check=models.Q(name__contains='Bob'), name='name_contains_bob')
        self.assertOperationAttributes(changes, 'testapp', 0, 0, model_name='author', constraint=added_constraint)

    def test_remove_constraints(self):
        """"""Test change detection of removed constraints.""""""
        changes = self.get_changes([self.author_name_check_constraint], [self.author_name])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['RemoveConstraint'])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, model_name='author', name='name_contains_bob')

    def test_add_foo_together(self):
        """"""Tests index/unique_together detection.""""""
        changes = self.get_changes([self.author_empty, self.book], [self.author_empty, self.book_foo_together])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, ""otherapp"", 0, [""AlterUniqueTogether"", ""AlterIndexTogether""])
        self.assertOperationAttributes(changes, ""otherapp"", 0, 0, name=""book"", unique_together={(""author"", ""title"")})
        self.assertOperationAttributes(changes, ""otherapp"", 0, 1, name=""book"", index_together={(""author"", ""title"")})

    def test_remove_foo_together(self):
        """"""Tests index/unique_together detection.""""""
        changes = self.get_changes([self.author_empty, self.book_foo_together], [self.author_empty, self.book])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, ""otherapp"", 0, [""AlterUniqueTogether"", ""AlterIndexTogether""])
        self.assertOperationAttributes(changes, ""otherapp"", 0, 0, name=""book"", unique_together=set())
        self.assertOperationAttributes(changes, ""otherapp"", 0, 1, name=""book"", index_together=set())

    def test_foo_together_remove_fk(self):
        """"""Tests unique_together and field removal detection & ordering""""""
        changes = self.get_changes(
            [self.author_empty, self.book_foo_together], [self.author_empty, self.book_with_no_author]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, ""otherapp"", 0, [
            ""AlterUniqueTogether"", ""AlterIndexTogether"", ""RemoveField""
        ])
        self.assertOperationAttributes(changes, ""otherapp"", 0, 0, name=""book"", unique_together=set())
        self.assertOperationAttributes(changes, ""otherapp"", 0, 1, name=""book"", index_together=set())
        self.assertOperationAttributes(changes, ""otherapp"", 0, 2, model_name=""book"", name=""author"")

    def test_foo_together_no_changes(self):
        """"""
        index/unique_together doesn't generate a migration if no
        changes have been made.
        """"""
        changes = self.get_changes(
            [self.author_empty, self.book_foo_together], [self.author_empty, self.book_foo_together]
        )
        # Right number of migrations?
        self.assertEqual(len(changes), 0)

    def test_foo_together_ordering(self):
        """"""
        index/unique_together also triggers on ordering changes.
        """"""
        changes = self.get_changes(
            [self.author_empty, self.book_foo_together], [self.author_empty, self.book_foo_together_2]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [
            'AlterUniqueTogether',
            'AlterIndexTogether',
            'AlterUniqueTogether',
            'AlterIndexTogether',
        ])
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 0, name='book', unique_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 1, name='book', index_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 2, name='book',
            unique_together={('title', 'author')},
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 3, name='book',
            index_together={('title', 'author')},
        )

    def test_add_field_and_foo_together(self):
        """"""
        Added fields will be created before using them in index/unique_together.
        """"""
        changes = self.get_changes([self.author_empty, self.book], [self.author_empty, self.book_foo_together_3])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, ""otherapp"", 0, [""AddField"", ""AlterUniqueTogether"", ""AlterIndexTogether""])
        self.assertOperationAttributes(changes, ""otherapp"", 0, 1, name=""book"", unique_together={(""title"", ""newfield"")})
        self.assertOperationAttributes(changes, ""otherapp"", 0, 2, name=""book"", index_together={(""title"", ""newfield"")})

    def test_create_model_and_unique_together(self):
        author = ModelState(""otherapp"", ""Author"", [
            (""id"", models.AutoField(primary_key=True)),
            (""name"", models.CharField(max_length=200)),
        ])
        book_with_author = ModelState(""otherapp"", ""Book"", [
            (""id"", models.AutoField(primary_key=True)),
            (""author"", models.ForeignKey(""otherapp.Author"", models.CASCADE)),
            (""title"", models.CharField(max_length=200)),
        ], {
            ""index_together"": {(""title"", ""author"")},
            ""unique_together"": {(""title"", ""author"")},
        })
        changes = self.get_changes([self.book_with_no_author], [author, book_with_author])
        # Right number of migrations?
        self.assertEqual(len(changes['otherapp']), 1)
        # Right number of actions?
        migration = changes['otherapp'][0]
        self.assertEqual(len(migration.operations), 4)
        # Right actions order?
        self.assertOperationTypes(
            changes, 'otherapp', 0,
            ['CreateModel', 'AddField', 'AlterUniqueTogether', 'AlterIndexTogether']
        )

    def test_remove_field_and_foo_together(self):
        """"""
        Removed fields will be removed after updating index/unique_together.
        """"""
        changes = self.get_changes(
            [self.author_empty, self.book_foo_together_3], [self.author_empty, self.book_foo_together]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [
            'AlterUniqueTogether',
            'AlterIndexTogether',
            'AlterUniqueTogether',
            'AlterIndexTogether',
            'RemoveField',
        ])
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 0, name='book', unique_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 1, name='book', index_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 2, name='book',
            unique_together={('author', 'title')},
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 3, name='book',
            index_together={('author', 'title')},
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 4, model_name='book', name='newfield',
        )

    def test_alter_field_and_foo_together(self):
        """"""Fields are altered after deleting some index/unique_together.""""""
        initial_author = ModelState('testapp', 'Author', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=200)),
            ('age', models.IntegerField(db_index=True)),
        ], {
            'unique_together': {('name',)},
        })
        author_reversed_constraints = ModelState('testapp', 'Author', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=200, unique=True)),
            ('age', models.IntegerField()),
        ], {
            'index_together': {('age',)},
        })
        changes = self.get_changes([initial_author], [author_reversed_constraints])

        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [
            'AlterUniqueTogether',
            'AlterField',
            'AlterField',
            'AlterIndexTogether',
        ])
        self.assertOperationAttributes(
            changes, 'testapp', 0, 0, name='author', unique_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'testapp', 0, 1, model_name='author', name='age',
        )
        self.assertOperationAttributes(
            changes, 'testapp', 0, 2, model_name='author', name='name',
        )
        self.assertOperationAttributes(
            changes, 'testapp', 0, 3, name='author', index_together={('age',)},
        )

    def test_partly_alter_foo_together(self):
        initial_author = ModelState('testapp', 'Author', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=200)),
            ('age', models.IntegerField()),
        ], {
            'unique_together': {('name',), ('age',)},
            'index_together': {('name',)},
        })
        author_reversed_constraints = ModelState('testapp', 'Author', [
            ('id', models.AutoField(primary_key=True)),
            ('name', models.CharField(max_length=200)),
            ('age', models.IntegerField()),
        ], {
            'unique_together': {('age',)},
            'index_together': {('name',), ('age',)},
        })
        changes = self.get_changes([initial_author], [author_reversed_constraints])

        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [
            'AlterUniqueTogether',
            'AlterIndexTogether',
        ])
        self.assertOperationAttributes(
            changes, 'testapp', 0, 0, name='author', unique_together={('age',)},
        )
        self.assertOperationAttributes(
            changes, 'testapp', 0, 1, name='author',
            index_together={('name',), ('age',)},
        )

    def test_rename_field_and_foo_together(self):
        """"""Fields are renamed before updating index/unique_together.""""""
        changes = self.get_changes(
            [self.author_empty, self.book_foo_together_3],
            [self.author_empty, self.book_foo_together_4],
            MigrationQuestioner({""ask_rename"": True}),
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [
            'RenameField',
            'AlterUniqueTogether',
            'AlterIndexTogether',
            'AlterUniqueTogether',
            'AlterIndexTogether',
        ])
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 1, name='book', unique_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 2, name='book', index_together=set(),
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 3, name='book',
            unique_together={('title', 'newfield2')},
        )
        self.assertOperationAttributes(
            changes, 'otherapp', 0, 4, name='book',
            index_together={('title', 'newfield2')},
        )

    def test_proxy(self):
        """"""The autodetector correctly deals with proxy models.""""""
        # First, we test adding a proxy model
        changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""CreateModel""])
        self.assertOperationAttributes(
            changes, ""testapp"", 0, 0, name=""AuthorProxy"", options={""proxy"": True, ""indexes"": [], ""constraints"": []}
        )
        # Now, we test turning a proxy model into a non-proxy model
        # It should delete the proxy then make the real one
        changes = self.get_changes(
            [self.author_empty, self.author_proxy], [self.author_empty, self.author_proxy_notproxy]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""DeleteModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""AuthorProxy"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""AuthorProxy"", options={})

    def test_proxy_non_model_parent(self):
        class Mixin:
            pass

        author_proxy_non_model_parent = ModelState(
            'testapp',
            'AuthorProxy',
            [],
            {'proxy': True},
            (Mixin, 'testapp.author'),
        )
        changes = self.get_changes(
            [self.author_empty],
            [self.author_empty, author_proxy_non_model_parent],
        )
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])
        self.assertOperationAttributes(
            changes, 'testapp', 0, 0, name='AuthorProxy',
            options={'proxy': True, 'indexes': [], 'constraints': []},
            bases=(Mixin, 'testapp.author'),
        )

    def test_proxy_custom_pk(self):
        """"""
        #23415 - The autodetector must correctly deal with custom FK on proxy
        models.
        """"""
        # First, we test the default pk field name
        changes = self.get_changes([], [self.author_empty, self.author_proxy_third, self.book_proxy_fk])
        # The model the FK is pointing from and to.
        self.assertEqual(
            changes['otherapp'][0].operations[0].fields[2][1].remote_field.model,
            'thirdapp.AuthorProxy',
        )
        # Now, we test the custom pk field name
        changes = self.get_changes([], [self.author_custom_pk, self.author_proxy_third, self.book_proxy_fk])
        # The model the FK is pointing from and to.
        self.assertEqual(
            changes['otherapp'][0].operations[0].fields[2][1].remote_field.model,
            'thirdapp.AuthorProxy',
        )

    def test_proxy_to_mti_with_fk_to_proxy(self):
        # First, test the pk table and field name.
        to_state = self.make_project_state(
            [self.author_empty, self.author_proxy_third, self.book_proxy_fk],
        )
        changes = self.get_changes([], to_state)
        fk_field = changes['otherapp'][0].operations[0].fields[2][1]
        self.assertEqual(
            to_state.get_concrete_model_key(fk_field.remote_field.model),
            ('testapp', 'author'),
        )
        self.assertEqual(fk_field.remote_field.model, 'thirdapp.AuthorProxy')

        # Change AuthorProxy to use MTI.
        from_state = to_state.clone()
        to_state = self.make_project_state(
            [self.author_empty, self.author_proxy_third_notproxy, self.book_proxy_fk],
        )
        changes = self.get_changes(from_state, to_state)
        # Right number/type of migrations for the AuthorProxy model?
        self.assertNumberMigrations(changes, 'thirdapp', 1)
        self.assertOperationTypes(changes, 'thirdapp', 0, ['DeleteModel', 'CreateModel'])
        # Right number/type of migrations for the Book model with a FK to
        # AuthorProxy?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['AlterField'])
        # otherapp should depend on thirdapp.
        self.assertMigrationDependencies(changes, 'otherapp', 0, [('thirdapp', 'auto_1')])
        # Now, test the pk table and field name.
        fk_field = changes['otherapp'][0].operations[0].field
        self.assertEqual(
            to_state.get_concrete_model_key(fk_field.remote_field.model),
            ('thirdapp', 'authorproxy'),
        )
        self.assertEqual(fk_field.remote_field.model, 'thirdapp.AuthorProxy')

    def test_proxy_to_mti_with_fk_to_proxy_proxy(self):
        # First, test the pk table and field name.
        to_state = self.make_project_state([
            self.author_empty,
            self.author_proxy,
            self.author_proxy_proxy,
            self.book_proxy_proxy_fk,
        ])
        changes = self.get_changes([], to_state)
        fk_field = changes['otherapp'][0].operations[0].fields[1][1]
        self.assertEqual(
            to_state.get_concrete_model_key(fk_field.remote_field.model),
            ('testapp', 'author'),
        )
        self.assertEqual(fk_field.remote_field.model, 'testapp.AAuthorProxyProxy')

        # Change AuthorProxy to use MTI. FK still points to AAuthorProxyProxy,
        # a proxy of AuthorProxy.
        from_state = to_state.clone()
        to_state = self.make_project_state([
            self.author_empty,
            self.author_proxy_notproxy,
            self.author_proxy_proxy,
            self.book_proxy_proxy_fk,
        ])
        changes = self.get_changes(from_state, to_state)
        # Right number/type of migrations for the AuthorProxy model?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['DeleteModel', 'CreateModel'])
        # Right number/type of migrations for the Book model with a FK to
        # AAuthorProxyProxy?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['AlterField'])
        # otherapp should depend on testapp.
        self.assertMigrationDependencies(changes, 'otherapp', 0, [('testapp', 'auto_1')])
        # Now, test the pk table and field name.
        fk_field = changes['otherapp'][0].operations[0].field
        self.assertEqual(
            to_state.get_concrete_model_key(fk_field.remote_field.model),
            ('testapp', 'authorproxy'),
        )
        self.assertEqual(fk_field.remote_field.model, 'testapp.AAuthorProxyProxy')

    def test_unmanaged_create(self):
        """"""The autodetector correctly deals with managed models.""""""
        # First, we test adding an unmanaged model
        changes = self.get_changes([self.author_empty], [self.author_empty, self.author_unmanaged])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""AuthorUnmanaged"", options={""managed"": False})

    def test_unmanaged_delete(self):
        changes = self.get_changes([self.author_empty, self.author_unmanaged], [self.author_empty])
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['DeleteModel'])

    def test_unmanaged_to_managed(self):
        # Now, we test turning an unmanaged model into a managed model
        changes = self.get_changes(
            [self.author_empty, self.author_unmanaged], [self.author_empty, self.author_unmanaged_managed]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterModelOptions""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""authorunmanaged"", options={})

    def test_managed_to_unmanaged(self):
        # Now, we turn managed to unmanaged.
        changes = self.get_changes(
            [self.author_empty, self.author_unmanaged_managed], [self.author_empty, self.author_unmanaged]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""AlterModelOptions""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""authorunmanaged"", options={""managed"": False})

    def test_unmanaged_custom_pk(self):
        """"""
        #23415 - The autodetector must correctly deal with custom FK on
        unmanaged models.
        """"""
        # First, we test the default pk field name
        changes = self.get_changes([], [self.author_unmanaged_default_pk, self.book])
        # The model the FK on the book model points to.
        fk_field = changes['otherapp'][0].operations[0].fields[2][1]
        self.assertEqual(fk_field.remote_field.model, 'testapp.Author')
        # Now, we test the custom pk field name
        changes = self.get_changes([], [self.author_unmanaged_custom_pk, self.book])
        # The model the FK on the book model points to.
        fk_field = changes['otherapp'][0].operations[0].fields[2][1]
        self.assertEqual(fk_field.remote_field.model, 'testapp.Author')

    @override_settings(AUTH_USER_MODEL=""thirdapp.CustomUser"")
    def test_swappable(self):
        with isolate_lru_cache(apps.get_swappable_settings_name):
            changes = self.get_changes([self.custom_user], [self.custom_user, self.author_with_custom_user])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Author"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [(""__setting__"", ""AUTH_USER_MODEL"")])

    def test_swappable_lowercase(self):
        model_state = ModelState('testapp', 'Document', [
            ('id', models.AutoField(primary_key=True)),
            ('owner', models.ForeignKey(
                settings.AUTH_USER_MODEL.lower(), models.CASCADE,
            )),
        ])
        with isolate_lru_cache(apps.get_swappable_settings_name):
            changes = self.get_changes([], [model_state])
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Document')
        self.assertMigrationDependencies(
            changes, 'testapp', 0, [('__setting__', 'AUTH_USER_MODEL')],
        )

    def test_swappable_changed(self):
        with isolate_lru_cache(apps.get_swappable_settings_name):
            before = self.make_project_state([self.custom_user, self.author_with_user])
            with override_settings(AUTH_USER_MODEL=""thirdapp.CustomUser""):
                after = self.make_project_state([self.custom_user, self.author_with_custom_user])
            autodetector = MigrationAutodetector(before, after)
            changes = autodetector._detect_changes()
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, model_name=""author"", name='user')
        fk_field = changes['testapp'][0].operations[0].field
        self.assertEqual(fk_field.remote_field.model, 'thirdapp.CustomUser')

    def test_add_field_with_default(self):
        """"""#22030 - Adding a field with a default should work.""""""
        changes = self.get_changes([self.author_empty], [self.author_name_default])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""name"")

    def test_custom_deconstructible(self):
        """"""
        Two instances which deconstruct to the same value aren't considered a
        change.
        """"""
        changes = self.get_changes([self.author_name_deconstructible_1], [self.author_name_deconstructible_2])
        # Right number of migrations?
        self.assertEqual(len(changes), 0)

    def test_deconstruct_field_kwarg(self):
        """"""Field instances are handled correctly by nested deconstruction.""""""
        changes = self.get_changes([self.author_name_deconstructible_3], [self.author_name_deconstructible_4])
        self.assertEqual(changes, {})

    def test_deconstructible_list(self):
        """"""Nested deconstruction descends into lists.""""""
        # When lists contain items that deconstruct to identical values, those lists
        # should be considered equal for the purpose of detecting state changes
        # (even if the original items are unequal).
        changes = self.get_changes(
            [self.author_name_deconstructible_list_1], [self.author_name_deconstructible_list_2]
        )
        self.assertEqual(changes, {})
        # Legitimate differences within the deconstructed lists should be reported
        # as a change
        changes = self.get_changes(
            [self.author_name_deconstructible_list_1], [self.author_name_deconstructible_list_3]
        )
        self.assertEqual(len(changes), 1)

    def test_deconstructible_tuple(self):
        """"""Nested deconstruction descends into tuples.""""""
        # When tuples contain items that deconstruct to identical values, those tuples
        # should be considered equal for the purpose of detecting state changes
        # (even if the original items are unequal).
        changes = self.get_changes(
            [self.author_name_deconstructible_tuple_1], [self.author_name_deconstructible_tuple_2]
        )
        self.assertEqual(changes, {})
        # Legitimate differences within the deconstructed tuples should be reported
        # as a change
        changes = self.get_changes(
            [self.author_name_deconstructible_tuple_1], [self.author_name_deconstructible_tuple_3]
        )
        self.assertEqual(len(changes), 1)

    def test_deconstructible_dict(self):
        """"""Nested deconstruction descends into dict values.""""""
        # When dicts contain items whose values deconstruct to identical values,
        # those dicts should be considered equal for the purpose of detecting
        # state changes (even if the original values are unequal).
        changes = self.get_changes(
            [self.author_name_deconstructible_dict_1], [self.author_name_deconstructible_dict_2]
        )
        self.assertEqual(changes, {})
        # Legitimate differences within the deconstructed dicts should be reported
        # as a change
        changes = self.get_changes(
            [self.author_name_deconstructible_dict_1], [self.author_name_deconstructible_dict_3]
        )
        self.assertEqual(len(changes), 1)

    def test_nested_deconstructible_objects(self):
        """"""
        Nested deconstruction is applied recursively to the args/kwargs of
        deconstructed objects.
        """"""
        # If the items within a deconstructed object's args/kwargs have the same
        # deconstructed values - whether or not the items themselves are different
        # instances - then the object as a whole is regarded as unchanged.
        changes = self.get_changes(
            [self.author_name_nested_deconstructible_1], [self.author_name_nested_deconstructible_2]
        )
        self.assertEqual(changes, {})
        # Differences that exist solely within the args list of a deconstructed object
        # should be reported as changes
        changes = self.get_changes(
            [self.author_name_nested_deconstructible_1], [self.author_name_nested_deconstructible_changed_arg]
        )
        self.assertEqual(len(changes), 1)
        # Additional args should also be reported as a change
        changes = self.get_changes(
            [self.author_name_nested_deconstructible_1], [self.author_name_nested_deconstructible_extra_arg]
        )
        self.assertEqual(len(changes), 1)
        # Differences that exist solely within the kwargs dict of a deconstructed object
        # should be reported as changes
        changes = self.get_changes(
            [self.author_name_nested_deconstructible_1], [self.author_name_nested_deconstructible_changed_kwarg]
        )
        self.assertEqual(len(changes), 1)
        # Additional kwargs should also be reported as a change
        changes = self.get_changes(
            [self.author_name_nested_deconstructible_1], [self.author_name_nested_deconstructible_extra_kwarg]
        )
        self.assertEqual(len(changes), 1)

    def test_deconstruct_type(self):
        """"""
        #22951 -- Uninstantiated classes with deconstruct are correctly returned
        by deep_deconstruct during serialization.
        """"""
        author = ModelState(
            ""testapp"",
            ""Author"",
            [
                (""id"", models.AutoField(primary_key=True)),
                (""name"", models.CharField(
                    max_length=200,
                    # IntegerField intentionally not instantiated.
                    default=models.IntegerField,
                ))
            ],
        )
        changes = self.get_changes([], [author])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel""])

    def test_replace_string_with_foreignkey(self):
        """"""
        #22300 - Adding an FK in the same ""spot"" as a deleted CharField should
        work.
        """"""
        changes = self.get_changes([self.author_with_publisher_string], [self.author_with_publisher, self.publisher])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""RemoveField"", ""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Publisher"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""publisher_name"")
        self.assertOperationAttributes(changes, 'testapp', 0, 2, name=""publisher"")

    def test_foreign_key_removed_before_target_model(self):
        """"""
        Removing an FK and the model it targets in the same change must remove
        the FK field before the model to maintain consistency.
        """"""
        changes = self.get_changes(
            [self.author_with_publisher, self.publisher], [self.author_name]
        )  # removes both the model and FK
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""RemoveField"", ""DeleteModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""publisher"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""Publisher"")

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition',
                side_effect=AssertionError(""Should not have prompted for not null addition""))
    def test_add_many_to_many(self, mocked_ask_method):
        """"""#22435 - Adding a ManyToManyField should not prompt for a default.""""""
        changes = self.get_changes([self.author_empty, self.publisher], [self.author_with_m2m, self.publisher])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""publishers"")

    def test_alter_many_to_many(self):
        changes = self.get_changes(
            [self.author_with_m2m, self.publisher], [self.author_with_m2m_blank, self.publisher]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""publishers"")

    def test_create_with_through_model(self):
        """"""
        Adding a m2m with a through model and the models that use it should be
        ordered correctly.
        """"""
        changes = self.get_changes([], [self.author_with_m2m_through, self.publisher, self.contract])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [
            'CreateModel', 'CreateModel', 'CreateModel', 'AddField',
        ])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Author')
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name='Publisher')
        self.assertOperationAttributes(changes, 'testapp', 0, 2, name='Contract')
        self.assertOperationAttributes(changes, 'testapp', 0, 3, model_name='author', name='publishers')

    def test_many_to_many_removed_before_through_model(self):
        """"""
        Removing a ManyToManyField and the ""through"" model in the same change
        must remove the field before the model to maintain consistency.
        """"""
        changes = self.get_changes(
            [self.book_with_multiple_authors_through_attribution, self.author_name, self.attribution],
            [self.book_with_no_author, self.author_name],
        )
        # Remove both the through model and ManyToMany
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['RemoveField', 'DeleteModel'])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name='authors', model_name='book')
        self.assertOperationAttributes(changes, 'otherapp', 0, 1, name='Attribution')

    def test_many_to_many_removed_before_through_model_2(self):
        """"""
        Removing a model that contains a ManyToManyField and the ""through"" model
        in the same change must remove the field before the model to maintain
        consistency.
        """"""
        changes = self.get_changes(
            [self.book_with_multiple_authors_through_attribution, self.author_name, self.attribution],
            [self.author_name],
        )
        # Remove both the through model and ManyToMany
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""otherapp"", 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['RemoveField', 'DeleteModel', 'DeleteModel'])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name='authors', model_name='book')
        self.assertOperationAttributes(changes, 'otherapp', 0, 1, name='Attribution')
        self.assertOperationAttributes(changes, 'otherapp', 0, 2, name='Book')

    def test_m2m_w_through_multistep_remove(self):
        """"""
        A model with a m2m field that specifies a ""through"" model cannot be
        removed in the same migration as that through model as the schema will
        pass through an inconsistent state. The autodetector should produce two
        migrations to avoid this issue.
        """"""
        changes = self.get_changes([self.author_with_m2m_through, self.publisher, self.contract], [self.publisher])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [
            ""RemoveField"", ""RemoveField"", ""DeleteModel"", ""DeleteModel""
        ])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""author"", model_name='contract')
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""publisher"", model_name='contract')
        self.assertOperationAttributes(changes, ""testapp"", 0, 2, name=""Author"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 3, name=""Contract"")

    def test_concrete_field_changed_to_many_to_many(self):
        """"""
        #23938 - Changing a concrete field into a ManyToManyField
        first removes the concrete field and then adds the m2m field.
        """"""
        changes = self.get_changes([self.author_with_former_m2m], [self.author_with_m2m, self.publisher])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""CreateModel"", ""RemoveField"", ""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Publisher')
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""publishers"", model_name='author')
        self.assertOperationAttributes(changes, 'testapp', 0, 2, name=""publishers"", model_name='author')

    def test_many_to_many_changed_to_concrete_field(self):
        """"""
        #23938 - Changing a ManyToManyField into a concrete field
        first removes the m2m field and then adds the concrete field.
        """"""
        changes = self.get_changes([self.author_with_m2m, self.publisher], [self.author_with_former_m2m])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""RemoveField"", ""AddField"", ""DeleteModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""publishers"", model_name='author')
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""publishers"", model_name='author')
        self.assertOperationAttributes(changes, 'testapp', 0, 2, name='Publisher')
        self.assertOperationFieldAttributes(changes, 'testapp', 0, 1, max_length=100)

    def test_non_circular_foreignkey_dependency_removal(self):
        """"""
        If two models with a ForeignKey from one to the other are removed at the
        same time, the autodetector should remove them in the correct order.
        """"""
        changes = self.get_changes([self.author_with_publisher, self.publisher_with_author], [])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""RemoveField"", ""DeleteModel"", ""DeleteModel""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""author"", model_name='publisher')
        self.assertOperationAttributes(changes, ""testapp"", 0, 1, name=""Author"")
        self.assertOperationAttributes(changes, ""testapp"", 0, 2, name=""Publisher"")

    def test_alter_model_options(self):
        """"""Changing a model's options should make a change.""""""
        changes = self.get_changes([self.author_empty], [self.author_with_options])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""AlterModelOptions""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, options={
            ""permissions"": [('can_hire', 'Can hire')],
            ""verbose_name"": ""Authi"",
        })

        # Changing them back to empty should also make a change
        changes = self.get_changes([self.author_with_options], [self.author_empty])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""AlterModelOptions""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""author"", options={})

    def test_alter_model_options_proxy(self):
        """"""Changing a proxy model's options should also make a change.""""""
        changes = self.get_changes(
            [self.author_proxy, self.author_empty], [self.author_proxy_options, self.author_empty]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""testapp"", 1)
        self.assertOperationTypes(changes, ""testapp"", 0, [""AlterModelOptions""])
        self.assertOperationAttributes(changes, ""testapp"", 0, 0, name=""authorproxy"", options={
            ""verbose_name"": ""Super Author""
        })

    def test_set_alter_order_with_respect_to(self):
        """"""Setting order_with_respect_to adds a field.""""""
        changes = self.get_changes([self.book, self.author_with_book], [self.book, self.author_with_book_order_wrt])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterOrderWithRespectTo""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""author"", order_with_respect_to=""book"")

    def test_add_alter_order_with_respect_to(self):
        """"""
        Setting order_with_respect_to when adding the FK too does
        things in the right order.
        """"""
        changes = self.get_changes([self.author_name], [self.book, self.author_with_book_order_wrt])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField"", ""AlterOrderWithRespectTo""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, model_name=""author"", name=""book"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""author"", order_with_respect_to=""book"")

    def test_remove_alter_order_with_respect_to(self):
        """"""
        Removing order_with_respect_to when removing the FK too does
        things in the right order.
        """"""
        changes = self.get_changes([self.book, self.author_with_book_order_wrt], [self.author_name])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AlterOrderWithRespectTo"", ""RemoveField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""author"", order_with_respect_to=None)
        self.assertOperationAttributes(changes, 'testapp', 0, 1, model_name=""author"", name=""book"")

    def test_add_model_order_with_respect_to(self):
        """"""
        Setting order_with_respect_to when adding the whole model
        does things in the right order.
        """"""
        changes = self.get_changes([], [self.book, self.author_with_book_order_wrt])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel""])
        self.assertOperationAttributes(
            changes, 'testapp', 0, 0, name=""Author"", options={'order_with_respect_to': 'book'}
        )
        self.assertNotIn(""_order"", [name for name, field in changes['testapp'][0].operations[0].fields])

    def test_add_model_order_with_respect_to_index_foo_together(self):
        changes = self.get_changes([], [
            self.book,
            ModelState('testapp', 'Author', [
                ('id', models.AutoField(primary_key=True)),
                ('name', models.CharField(max_length=200)),
                ('book', models.ForeignKey('otherapp.Book', models.CASCADE)),
            ], options={
                'order_with_respect_to': 'book',
                'index_together': {('name', '_order')},
                'unique_together': {('id', '_order')},
            }),
        ])
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])
        self.assertOperationAttributes(
            changes,
            'testapp',
            0,
            0,
            name='Author',
            options={
                'order_with_respect_to': 'book',
                'index_together': {('name', '_order')},
                'unique_together': {('id', '_order')},
            },
        )

    def test_add_model_order_with_respect_to_index_constraint(self):
        tests = [
            (
                'AddIndex',
                {'indexes': [
                    models.Index(fields=['_order'], name='book_order_idx'),
                ]},
            ),
            (
                'AddConstraint',
                {'constraints': [
                    models.CheckConstraint(
                        check=models.Q(_order__gt=1),
                        name='book_order_gt_1',
                    ),
                ]},
            ),
        ]
        for operation, extra_option in tests:
            with self.subTest(operation=operation):
                after = ModelState('testapp', 'Author', [
                    ('id', models.AutoField(primary_key=True)),
                    ('name', models.CharField(max_length=200)),
                    ('book', models.ForeignKey('otherapp.Book', models.CASCADE)),
                ], options={
                    'order_with_respect_to': 'book',
                    **extra_option,
                })
                changes = self.get_changes([], [self.book, after])
                self.assertNumberMigrations(changes, 'testapp', 1)
                self.assertOperationTypes(changes, 'testapp', 0, [
                    'CreateModel', operation,
                ])
                self.assertOperationAttributes(
                    changes,
                    'testapp',
                    0,
                    0,
                    name='Author',
                    options={'order_with_respect_to': 'book'},
                )

    def test_set_alter_order_with_respect_to_index_constraint_foo_together(self):
        tests = [
            (
                'AddIndex',
                {'indexes': [
                    models.Index(fields=['_order'], name='book_order_idx'),
                ]},
            ),
            (
                'AddConstraint',
                {'constraints': [
                    models.CheckConstraint(
                        check=models.Q(_order__gt=1),
                        name='book_order_gt_1',
                    ),
                ]},
            ),
            ('AlterIndexTogether', {'index_together': {('name', '_order')}}),
            ('AlterUniqueTogether', {'unique_together': {('id', '_order')}}),
        ]
        for operation, extra_option in tests:
            with self.subTest(operation=operation):
                after = ModelState('testapp', 'Author', [
                    ('id', models.AutoField(primary_key=True)),
                    ('name', models.CharField(max_length=200)),
                    ('book', models.ForeignKey('otherapp.Book', models.CASCADE)),
                ], options={
                    'order_with_respect_to': 'book',
                    **extra_option,
                })
                changes = self.get_changes(
                    [self.book, self.author_with_book],
                    [self.book, after],
                )
                self.assertNumberMigrations(changes, 'testapp', 1)
                self.assertOperationTypes(changes, 'testapp', 0, [
                    'AlterOrderWithRespectTo', operation,
                ])

    def test_alter_model_managers(self):
        """"""
        Changing the model managers adds a new operation.
        """"""
        changes = self.get_changes([self.other_pony], [self.other_pony_food])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""AlterModelManagers""])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name=""pony"")
        self.assertEqual([name for name, mgr in changes['otherapp'][0].operations[0].managers],
                         ['food_qs', 'food_mgr', 'food_mgr_kwargs'])
        self.assertEqual(changes['otherapp'][0].operations[0].managers[1][1].args, ('a', 'b', 1, 2))
        self.assertEqual(changes['otherapp'][0].operations[0].managers[2][1].args, ('x', 'y', 3, 4))

    def test_swappable_first_inheritance(self):
        """"""Swappable models get their CreateModel first.""""""
        changes = self.get_changes([], [self.custom_user, self.aardvark])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'thirdapp', 1)
        self.assertOperationTypes(changes, 'thirdapp', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, 'thirdapp', 0, 0, name=""CustomUser"")
        self.assertOperationAttributes(changes, 'thirdapp', 0, 1, name=""Aardvark"")

    def test_default_related_name_option(self):
        model_state = ModelState('app', 'model', [
            ('id', models.AutoField(primary_key=True)),
        ], options={'default_related_name': 'related_name'})
        changes = self.get_changes([], [model_state])
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['CreateModel'])
        self.assertOperationAttributes(
            changes, 'app', 0, 0, name='model',
            options={'default_related_name': 'related_name'},
        )
        altered_model_state = ModelState('app', 'Model', [
            ('id', models.AutoField(primary_key=True)),
        ])
        changes = self.get_changes([model_state], [altered_model_state])
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['AlterModelOptions'])
        self.assertOperationAttributes(changes, 'app', 0, 0, name='model', options={})

    @override_settings(AUTH_USER_MODEL=""thirdapp.CustomUser"")
    def test_swappable_first_setting(self):
        """"""Swappable models get their CreateModel first.""""""
        with isolate_lru_cache(apps.get_swappable_settings_name):
            changes = self.get_changes([], [self.custom_user_no_inherit, self.aardvark])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'thirdapp', 1)
        self.assertOperationTypes(changes, 'thirdapp', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, 'thirdapp', 0, 0, name=""CustomUser"")
        self.assertOperationAttributes(changes, 'thirdapp', 0, 1, name=""Aardvark"")

    def test_bases_first(self):
        """"""Bases of other models come first.""""""
        changes = self.get_changes([], [self.aardvark_based_on_author, self.author_name])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Author"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""Aardvark"")

    def test_bases_first_mixed_case_app_label(self):
        app_label = 'MiXedCaseApp'
        changes = self.get_changes([], [
            ModelState(app_label, 'owner', [
                ('id', models.AutoField(primary_key=True)),
            ]),
            ModelState(app_label, 'place', [
                ('id', models.AutoField(primary_key=True)),
                ('owner', models.ForeignKey('MiXedCaseApp.owner', models.CASCADE)),
            ]),
            ModelState(app_label, 'restaurant', [], bases=('MiXedCaseApp.place',)),
        ])
        self.assertNumberMigrations(changes, app_label, 1)
        self.assertOperationTypes(changes, app_label, 0, [
            'CreateModel', 'CreateModel', 'CreateModel',
        ])
        self.assertOperationAttributes(changes, app_label, 0, 0, name='owner')
        self.assertOperationAttributes(changes, app_label, 0, 1, name='place')
        self.assertOperationAttributes(changes, app_label, 0, 2, name='restaurant')

    def test_multiple_bases(self):
        """"""#23956 - Inheriting models doesn't move *_ptr fields into AddField operations.""""""
        A = ModelState(""app"", ""A"", [(""a_id"", models.AutoField(primary_key=True))])
        B = ModelState(""app"", ""B"", [(""b_id"", models.AutoField(primary_key=True))])
        C = ModelState(""app"", ""C"", [], bases=(""app.A"", ""app.B""))
        D = ModelState(""app"", ""D"", [], bases=(""app.A"", ""app.B""))
        E = ModelState(""app"", ""E"", [], bases=(""app.A"", ""app.B""))
        changes = self.get_changes([], [A, B, C, D, E])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, ""app"", 1)
        self.assertOperationTypes(changes, ""app"", 0, [
            ""CreateModel"", ""CreateModel"", ""CreateModel"", ""CreateModel"", ""CreateModel""
        ])
        self.assertOperationAttributes(changes, ""app"", 0, 0, name=""A"")
        self.assertOperationAttributes(changes, ""app"", 0, 1, name=""B"")
        self.assertOperationAttributes(changes, ""app"", 0, 2, name=""C"")
        self.assertOperationAttributes(changes, ""app"", 0, 3, name=""D"")
        self.assertOperationAttributes(changes, ""app"", 0, 4, name=""E"")

    def test_proxy_bases_first(self):
        """"""Bases of proxies come first.""""""
        changes = self.get_changes([], [self.author_empty, self.author_proxy, self.author_proxy_proxy])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Author"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""AuthorProxy"")
        self.assertOperationAttributes(changes, 'testapp', 0, 2, name=""AAuthorProxyProxy"")

    def test_pk_fk_included(self):
        """"""
        A relation used as the primary key is kept as part of CreateModel.
        """"""
        changes = self.get_changes([], [self.aardvark_pk_fk_author, self.author_name])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Author"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""Aardvark"")

    def test_first_dependency(self):
        """"""
        A dependency to an app with no migrations uses __first__.
        """"""
        # Load graph
        loader = MigrationLoader(connection)
        before = self.make_project_state([])
        after = self.make_project_state([self.book_migrations_fk])
        after.real_apps = {'migrations'}
        autodetector = MigrationAutodetector(before, after)
        changes = autodetector._detect_changes(graph=loader.graph)
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name=""Book"")
        self.assertMigrationDependencies(changes, 'otherapp', 0, [(""migrations"", ""__first__"")])

    @override_settings(MIGRATION_MODULES={""migrations"": ""migrations.test_migrations""})
    def test_last_dependency(self):
        """"""
        A dependency to an app with existing migrations uses the
        last migration of that app.
        """"""
        # Load graph
        loader = MigrationLoader(connection)
        before = self.make_project_state([])
        after = self.make_project_state([self.book_migrations_fk])
        after.real_apps = {'migrations'}
        autodetector = MigrationAutodetector(before, after)
        changes = autodetector._detect_changes(graph=loader.graph)
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, [""CreateModel""])
        self.assertOperationAttributes(changes, 'otherapp', 0, 0, name=""Book"")
        self.assertMigrationDependencies(changes, 'otherapp', 0, [(""migrations"", ""0002_second"")])

    def test_alter_fk_before_model_deletion(self):
        """"""
        ForeignKeys are altered _before_ the model they used to
        refer to are deleted.
        """"""
        changes = self.get_changes(
            [self.author_name, self.publisher_with_author],
            [self.aardvark_testapp, self.publisher_with_aardvark_author]
        )
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""CreateModel"", ""AlterField"", ""DeleteModel""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""Aardvark"")
        self.assertOperationAttributes(changes, 'testapp', 0, 1, name=""author"")
        self.assertOperationAttributes(changes, 'testapp', 0, 2, name=""Author"")

    def test_fk_dependency_other_app(self):
        """"""
        #23100 - ForeignKeys correctly depend on other apps' models.
        """"""
        changes = self.get_changes([self.author_name, self.book], [self.author_with_book, self.book])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name=""book"")
        self.assertMigrationDependencies(changes, 'testapp', 0, [(""otherapp"", ""__first__"")])

    def test_alter_field_to_fk_dependency_other_app(self):
        changes = self.get_changes(
            [self.author_empty, self.book_with_no_author_fk],
            [self.author_empty, self.book],
        )
        self.assertNumberMigrations(changes, 'otherapp', 1)
        self.assertOperationTypes(changes, 'otherapp', 0, ['AlterField'])
        self.assertMigrationDependencies(changes, 'otherapp', 0, [('testapp', '__first__')])

    def test_circular_dependency_mixed_addcreate(self):
        """"""
        #23315 - The dependency resolver knows to put all CreateModel
        before AddField and not become unsolvable.
        """"""
        address = ModelState(""a"", ""Address"", [
            (""id"", models.AutoField(primary_key=True)),
            (""country"", models.ForeignKey(""b.DeliveryCountry"", models.CASCADE)),
        ])
        person = ModelState(""a"", ""Person"", [
            (""id"", models.AutoField(primary_key=True)),
        ])
        apackage = ModelState(""b"", ""APackage"", [
            (""id"", models.AutoField(primary_key=True)),
            (""person"", models.ForeignKey(""a.Person"", models.CASCADE)),
        ])
        country = ModelState(""b"", ""DeliveryCountry"", [
            (""id"", models.AutoField(primary_key=True)),
        ])
        changes = self.get_changes([], [address, person, apackage, country])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'a', 2)
        self.assertNumberMigrations(changes, 'b', 1)
        self.assertOperationTypes(changes, 'a', 0, [""CreateModel"", ""CreateModel""])
        self.assertOperationTypes(changes, 'a', 1, [""AddField""])
        self.assertOperationTypes(changes, 'b', 0, [""CreateModel"", ""CreateModel""])

    @override_settings(AUTH_USER_MODEL=""a.Tenant"")
    def test_circular_dependency_swappable(self):
        """"""
        #23322 - The dependency resolver knows to explicitly resolve
        swappable models.
        """"""
        with isolate_lru_cache(apps.get_swappable_settings_name):
            tenant = ModelState(""a"", ""Tenant"", [
                (""id"", models.AutoField(primary_key=True)),
                (""primary_address"", models.ForeignKey(""b.Address"", models.CASCADE))],
                bases=(AbstractBaseUser,)
            )
            address = ModelState(""b"", ""Address"", [
                (""id"", models.AutoField(primary_key=True)),
                (""tenant"", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE)),
            ])
            changes = self.get_changes([], [address, tenant])

        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'a', 2)
        self.assertOperationTypes(changes, 'a', 0, [""CreateModel""])
        self.assertOperationTypes(changes, 'a', 1, [""AddField""])
        self.assertMigrationDependencies(changes, 'a', 0, [])
        self.assertMigrationDependencies(changes, 'a', 1, [('a', 'auto_1'), ('b', 'auto_1')])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'b', 1)
        self.assertOperationTypes(changes, 'b', 0, [""CreateModel""])
        self.assertMigrationDependencies(changes, 'b', 0, [('__setting__', 'AUTH_USER_MODEL')])

    @override_settings(AUTH_USER_MODEL=""b.Tenant"")
    def test_circular_dependency_swappable2(self):
        """"""
        #23322 - The dependency resolver knows to explicitly resolve
        swappable models but with the swappable not being the first migrated
        model.
        """"""
        with isolate_lru_cache(apps.get_swappable_settings_name):
            address = ModelState(""a"", ""Address"", [
                (""id"", models.AutoField(primary_key=True)),
                (""tenant"", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE)),
            ])
            tenant = ModelState(""b"", ""Tenant"", [
                (""id"", models.AutoField(primary_key=True)),
                (""primary_address"", models.ForeignKey(""a.Address"", models.CASCADE))],
                bases=(AbstractBaseUser,)
            )
            changes = self.get_changes([], [address, tenant])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'a', 2)
        self.assertOperationTypes(changes, 'a', 0, [""CreateModel""])
        self.assertOperationTypes(changes, 'a', 1, [""AddField""])
        self.assertMigrationDependencies(changes, 'a', 0, [])
        self.assertMigrationDependencies(changes, 'a', 1, [('__setting__', 'AUTH_USER_MODEL'), ('a', 'auto_1')])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'b', 1)
        self.assertOperationTypes(changes, 'b', 0, [""CreateModel""])
        self.assertMigrationDependencies(changes, 'b', 0, [('a', 'auto_1')])

    @override_settings(AUTH_USER_MODEL=""a.Person"")
    def test_circular_dependency_swappable_self(self):
        """"""
        #23322 - The dependency resolver knows to explicitly resolve
        swappable models.
        """"""
        with isolate_lru_cache(apps.get_swappable_settings_name):
            person = ModelState(""a"", ""Person"", [
                (""id"", models.AutoField(primary_key=True)),
                (""parent1"", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, related_name='children'))
            ])
            changes = self.get_changes([], [person])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'a', 1)
        self.assertOperationTypes(changes, 'a', 0, [""CreateModel""])
        self.assertMigrationDependencies(changes, 'a', 0, [])

    @override_settings(AUTH_USER_MODEL='a.User')
    def test_swappable_circular_multi_mti(self):
        with isolate_lru_cache(apps.get_swappable_settings_name):
            parent = ModelState('a', 'Parent', [
                ('user', models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE))
            ])
            child = ModelState('a', 'Child', [], bases=('a.Parent',))
            user = ModelState('a', 'User', [], bases=(AbstractBaseUser, 'a.Child'))
            changes = self.get_changes([], [parent, child, user])
        self.assertNumberMigrations(changes, 'a', 1)
        self.assertOperationTypes(changes, 'a', 0, ['CreateModel', 'CreateModel', 'CreateModel', 'AddField'])

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition',
                side_effect=AssertionError(""Should not have prompted for not null addition""))
    def test_add_blank_textfield_and_charfield(self, mocked_ask_method):
        """"""
        #23405 - Adding a NOT NULL and blank `CharField` or `TextField`
        without default should not prompt for a default.
        """"""
        changes = self.get_changes([self.author_empty], [self.author_with_biography_blank])
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField"", ""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0)

    @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition')
    def test_add_non_blank_textfield_and_charfield(self, mocked_ask_method):
        """"""
        #23405 - Adding a NOT NULL and non-blank `CharField` or `TextField`
        without default should prompt for a default.
        """"""
        changes = self.get_changes([self.author_empty], [self.author_with_biography_non_blank])
        self.assertEqual(mocked_ask_method.call_count, 2)
        # Right number/type of migrations?
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, [""AddField"", ""AddField""])
        self.assertOperationAttributes(changes, 'testapp', 0, 0)

    def test_mti_inheritance_model_removal(self):
        Animal = ModelState('app', 'Animal', [
            (""id"", models.AutoField(primary_key=True)),
        ])
        Dog = ModelState('app', 'Dog', [], bases=('app.Animal',))
        changes = self.get_changes([Animal, Dog], [Animal])
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])
        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')

    def test_add_model_with_field_removed_from_base_model(self):
        """"""
        Removing a base field takes place before adding a new inherited model
        that has a field with the same name.
        """"""
        before = [
            ModelState('app', 'readable', [
                ('id', models.AutoField(primary_key=True)),
                ('title', models.CharField(max_length=200)),
            ]),
        ]
        after = [
            ModelState('app', 'readable', [
                ('id', models.AutoField(primary_key=True)),
            ]),
            ModelState('app', 'book', [
                ('title', models.CharField(max_length=200)),
            ], bases=('app.readable',)),
        ]
        changes = self.get_changes(before, after)
        self.assertNumberMigrations(changes, 'app', 1)
        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])
        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')
        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')

    def test_parse_number(self):
        tests = [
            ('no_number', None),
            ('0001_initial', 1),
            ('0002_model3', 2),
            ('0002_auto_20380101_1112', 2),
            ('0002_squashed_0003', 3),
            ('0002_model2_squashed_0003_other4', 3),
            ('0002_squashed_0003_squashed_0004', 4),
            ('0002_model2_squashed_0003_other4_squashed_0005_other6', 5),
            ('0002_custom_name_20380101_1112_squashed_0003_model', 3),
            ('2_squashed_4', 4),
        ]
        for migration_name, expected_number in tests:
            with self.subTest(migration_name=migration_name):
                self.assertEqual(
                    MigrationAutodetector.parse_number(migration_name),
                    expected_number,
                )

    def test_add_custom_fk_with_hardcoded_to(self):
        class HardcodedForeignKey(models.ForeignKey):
            def __init__(self, *args, **kwargs):
                kwargs['to'] = 'testapp.Author'
                super().__init__(*args, **kwargs)

            def deconstruct(self):
                name, path, args, kwargs = super().deconstruct()
                del kwargs['to']
                return name, path, args, kwargs

        book_hardcoded_fk_to = ModelState('testapp', 'Book', [
            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),
        ])
        changes = self.get_changes(
            [self.author_empty],
            [self.author_empty, book_hardcoded_fk_to],
        )
        self.assertNumberMigrations(changes, 'testapp', 1)
        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])
        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')",1,334 2000 40 2001 41 58 648 2002 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2007 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2010 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 424 61 304 41 41 44 93 41 2011 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2012 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2013 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 648 41 41 44 93 41 2014 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 91 2004 46 2015 40 2016 61 2004 46 2017 40 2018 61 648 41 44 2019 61 648 41 93 125 44 41 2020 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2021 40 2022 61 304 41 41 44 40 648 44 2004 46 2023 40 2022 61 304 41 41 44 40 648 44 2004 46 2024 40 2022 61 304 41 41 44 93 41 2025 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2021 40 2026 61 304 41 41 44 40 648 44 2004 46 2023 40 2026 61 304 41 41 44 40 648 44 2004 46 2024 40 2026 61 304 41 41 44 93 41 2027 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 41 41 41 44 93 41 2029 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 41 41 41 44 93 41 2030 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2004 46 2031 40 41 41 41 44 93 41 2032 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2004 46 2031 40 41 41 41 44 93 41 2033 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 91 2028 40 41 44 1504 93 41 41 44 93 41 2034 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 91 2028 40 41 44 1504 93 41 41 44 93 41 2035 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 91 2028 40 41 44 1504 93 41 41 44 93 41 2036 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 40 2028 40 41 44 1504 41 41 41 44 93 41 2037 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 40 2028 40 41 44 1504 41 41 41 44 93 41 2038 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 40 2028 40 41 44 1504 41 41 41 44 93 41 2039 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 123 648 58 2028 40 41 44 648 58 1504 125 41 41 44 93 41 2040 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 123 648 58 2028 40 41 44 648 58 1504 125 41 41 44 93 41 2041 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 123 648 58 2028 40 41 44 648 58 1504 125 41 41 44 93 41 2042 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 2028 40 1501 41 44 40 2028 40 648 41 44 2028 40 648 41 44 41 44 2043 61 2028 40 648 41 44 2044 61 2028 40 2045 61 2028 40 648 41 41 44 41 41 41 44 93 41 2046 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 2028 40 1501 41 44 40 2028 40 648 41 44 2028 40 648 41 44 41 44 2043 61 2028 40 648 41 44 2044 61 2028 40 2045 61 2028 40 648 41 41 44 41 41 41 44 93 41 2047 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 2028 40 1501 41 44 40 2028 40 648 41 44 2028 40 648 41 44 41 44 2043 61 2028 40 648 41 44 2044 61 2028 40 2045 61 2028 40 648 41 41 44 41 41 41 44 93 41 2048 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 2028 40 1501 41 44 40 2028 40 648 41 44 2028 40 648 41 44 41 44 303 44 2043 61 2028 40 648 41 44 2044 61 2028 40 2045 61 2028 40 648 41 41 44 41 41 41 44 93 41 2049 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 2028 40 1501 41 44 40 2028 40 648 41 44 2028 40 648 41 44 41 44 2043 61 2028 40 648 41 44 2044 61 2028 40 2045 61 2028 40 648 41 41 44 41 41 41 44 93 41 2050 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 349 61 2028 40 2028 40 1501 41 44 40 2028 40 648 41 44 2028 40 648 41 44 41 44 2043 61 2028 40 648 41 44 2044 61 2028 40 2045 61 2028 40 648 41 41 44 2051 61 303 44 41 41 41 44 93 41 2052 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2031 40 2006 61 304 41 41 93 41 2053 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 41 41 44 40 648 44 2004 46 2054 40 41 41 44 93 41 2055 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2056 61 304 41 41 44 40 648 44 2004 46 2054 40 2056 61 304 41 41 44 93 41 2057 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2060 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 44 2061 61 123 648 58 648 125 41 2062 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2063 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2064 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2065 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2066 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2067 61 2003 40 648 44 648 44 91 93 44 123 648 58 304 125 44 40 648 44 41 41 2068 61 2003 40 648 44 648 44 91 93 44 123 648 58 304 44 648 58 648 44 125 44 40 648 44 41 41 2069 61 2003 40 648 44 648 44 91 93 44 123 125 44 40 648 44 41 41 2070 61 2003 40 648 44 648 44 91 93 44 123 648 58 304 125 44 40 648 44 41 41 2071 61 2003 40 648 44 648 44 91 93 44 123 125 44 40 648 44 41 41 2072 61 2003 40 648 44 648 44 91 93 44 123 648 58 304 125 44 40 648 44 41 41 2073 61 2003 40 648 44 648 44 91 93 44 123 648 58 302 125 44 40 648 44 41 41 2074 61 2003 40 648 44 648 44 91 93 44 123 125 44 40 648 44 41 41 2075 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2076 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2031 40 2006 61 304 41 41 44 93 41 2077 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2078 40 648 41 41 44 93 41 2079 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2078 40 648 44 2056 61 304 41 41 44 93 41 2080 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2078 40 648 44 2081 61 648 41 41 44 93 41 2082 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2078 40 648 44 2081 61 648 41 41 44 93 41 2083 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1503 41 41 44 93 41 2084 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 123 648 58 91 40 648 44 648 41 93 44 648 58 648 44 125 41 2085 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 123 648 58 648 125 41 2086 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 123 648 58 648 125 41 2087 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 123 648 58 648 125 41 2088 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 123 648 58 648 125 41 2089 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2090 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2091 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1503 41 41 44 93 41 2092 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1503 41 41 44 93 41 2093 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1503 41 41 44 93 41 2094 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1503 41 41 44 93 41 2095 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 2096 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 2097 61 91 40 648 44 2098 46 2099 40 41 41 44 40 648 44 2100 40 648 44 648 41 41 44 40 648 44 2100 40 648 44 648 44 1502 44 1502 41 41 44 93 41 2101 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2102 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2103 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2104 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2105 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2106 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2107 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2108 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2109 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2110 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2111 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2078 40 648 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2112 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2078 40 648 44 2081 61 648 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2113 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 91 2004 46 2114 40 2115 61 91 648 44 648 93 44 2019 61 648 41 93 44 125 41 2116 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 91 2004 46 2114 40 2115 61 91 648 44 648 93 44 2019 61 648 41 93 44 125 41 2117 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 41 2118 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 41 2119 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 41 2120 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 41 2121 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2122 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2123 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 2124 61 40 2125 44 41 41 2126 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2127 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2128 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2129 61 2003 40 648 44 648 44 91 93 44 2124 61 40 648 44 41 41 2130 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2131 40 648 44 2004 46 2059 44 2006 61 304 41 41 44 93 41 2132 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2133 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 44 123 648 58 123 40 648 44 648 41 125 44 648 58 91 2004 46 2114 40 2115 61 91 648 44 648 93 44 2019 61 648 41 93 44 125 41 348 2134 40 2135 44 2136 44 2137 61 302 41 58 2138 61 648 385 2139 44 2140 398 2141 40 2136 46 2142 40 41 41 58 2138 636 648 37 2139 385 2143 398 2140 58 2138 636 648 37 2143 46 2019 385 2144 398 2143 46 2145 58 2138 636 648 37 2144 392 2137 58 2138 636 648 392 2143 46 2146 58 385 2147 398 2143 46 2146 58 2138 636 648 37 40 2147 44 41 360 58 2138 636 648 450 2138 348 2148 40 2135 44 2136 44 2139 44 2149 41 58 392 2150 40 2136 46 2151 40 2139 44 91 93 41 41 631 2149 58 2135 46 2152 40 648 37 40 2150 40 2136 46 2151 40 2139 44 91 93 41 41 44 2139 44 2149 44 2135 46 2134 40 2136 41 44 41 41 348 2153 40 2135 44 2136 44 2139 44 2154 44 2146 41 58 392 422 2136 46 2151 40 2139 41 58 2135 46 2152 40 648 37 40 2139 44 2135 46 2134 40 2136 41 41 41 392 2150 40 2136 91 2139 93 41 60 2154 43 1501 58 2135 46 2152 40 648 37 40 2154 44 2139 44 2135 46 2134 40 2136 41 41 41 2143 61 2136 91 2139 93 91 2154 93 392 2155 40 2143 46 2146 41 631 2155 40 2146 41 58 2135 46 2152 40 648 37 40 2139 44 2143 46 2019 44 2146 44 2135 46 2134 40 2136 44 2137 61 304 41 44 41 41 348 2156 40 2135 44 2136 44 2139 44 2154 44 2157 41 58 392 422 2136 46 2151 40 2139 41 58 2135 46 2152 40 648 37 40 2139 44 2135 46 2134 40 2136 41 41 41 392 2150 40 2136 91 2139 93 41 60 2154 43 1501 58 2135 46 2152 40 648 37 40 2154 44 2139 44 2135 46 2134 40 2136 41 41 41 2143 61 2136 91 2139 93 91 2154 93 2158 61 91 2144 46 2159 46 2160 385 2144 398 2143 46 2145 93 392 2157 631 2158 58 2135 46 2152 40 648 37 40 2139 44 2143 46 2019 44 2157 44 2135 46 2134 40 2136 41 44 41 41 348 2161 40 2135 44 2136 44 2139 44 2154 44 2162 44 638 2163 41 58 392 422 2136 46 2151 40 2139 41 58 2135 46 2152 40 648 37 40 2139 44 2135 46 2134 40 2136 41 41 41 392 2150 40 2136 91 2139 93 41 60 2154 43 1501 58 2135 46 2152 40 648 37 40 2154 44 2139 44 2135 46 2134 40 2136 41 41 41 2143 61 2136 91 2139 93 91 2154 93 392 2150 40 2136 91 2139 93 41 60 2154 43 1501 58 2135 46 2152 40 648 37 40 2162 44 2139 44 2143 46 2019 44 2135 46 2134 40 2136 41 44 41 41 2144 61 2143 46 2145 91 2162 93 385 2164 44 2165 398 2163 46 2142 40 41 58 392 2166 40 2144 44 2164 44 303 41 631 2165 58 2135 46 2152 40 648 37 40 2139 44 2143 46 2019 44 2162 44 2164 44 2165 44 2166 40 2144 44 2164 44 303 41 44 2135 46 2134 40 2136 41 44 41 41 348 2167 40 2135 44 2136 44 2139 44 2154 44 2162 44 638 2163 41 58 392 422 2136 46 2151 40 2139 41 58 2135 46 2152 40 648 37 40 2139 44 2135 46 2134 40 2136 41 41 41 392 2150 40 2136 91 2139 93 41 60 2154 43 1501 58 2135 46 2152 40 648 37 40 2154 44 2139 44 2135 46 2134 40 2136 41 41 41 2143 61 2136 91 2139 93 91 2154 93 392 2150 40 2136 91 2139 93 41 60 2154 43 1501 58 2135 46 2152 40 648 37 40 2162 44 2139 44 2143 46 2019 44 2135 46 2134 40 2136 41 44 41 41 2144 61 2143 46 2145 91 2162 93 392 422 2168 40 2144 44 648 41 58 2135 46 2152 40 648 37 40 2139 44 2143 46 2019 44 2162 44 41 41 2169 61 2144 46 2169 385 2164 44 2165 398 2163 46 2142 40 41 58 392 2166 40 2169 44 2164 44 303 41 631 2165 58 2135 46 2152 40 648 37 40 2139 44 2143 46 2019 44 2162 44 2164 44 2165 44 2166 40 2169 44 2164 44 303 41 44 2135 46 2134 40 2136 41 44 41 41 348 2170 40 2135 44 2171 41 58 648 2172 61 2173 40 41 385 2174 398 2171 58 2172 46 2175 40 2174 46 335 40 41 41 450 2172 348 2176 40 2135 44 2177 44 2178 44 2179 61 303 41 58 392 422 2180 40 2177 44 2173 41 58 2177 61 2135 46 2170 40 2177 41 392 422 2180 40 2178 44 2173 41 58 2178 61 2135 46 2170 40 2178 41 450 2181 40 2177 44 2178 44 2179 44 41 46 2182 40 41 348 2183 40 2135 41 58 648 621 2184 61 2185 40 41 2184 46 2186 40 40 648 44 648 41 44 303 41 2184 46 2186 40 40 648 44 648 41 44 303 41 2184 46 2186 40 40 648 44 648 41 44 303 41 2184 46 2187 40 648 44 40 648 44 648 41 44 40 648 44 648 41 41 2184 46 2187 40 648 44 40 648 44 648 41 44 40 648 44 648 41 41 621 2188 61 2135 46 2170 40 91 2135 46 2091 44 2135 46 2095 93 41 2189 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2091 44 2135 46 2095 44 2135 46 2101 44 93 41 2190 61 2181 40 2188 44 2189 41 2136 61 2190 46 2182 40 41 621 2136 61 2190 46 2191 40 2136 44 2184 41 621 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2146 44 91 40 648 44 648 41 93 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2146 44 91 40 648 44 648 41 93 41 348 2193 40 2135 41 58 621 2184 61 2185 40 41 621 2188 61 2135 46 2170 40 91 93 41 2189 61 2135 46 2170 40 91 2135 46 2057 44 2135 46 2103 44 2135 46 2121 93 41 2190 61 2181 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2136 61 2190 46 2182 40 41 2136 61 2190 46 2191 40 2136 44 2184 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2146 44 91 93 41 2135 46 2192 40 2136 91 648 93 91 1501 93 46 2019 44 648 41 2135 46 2195 40 2136 91 648 93 91 1501 93 46 2146 44 91 40 648 44 648 41 44 40 648 44 648 41 93 44 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2146 44 91 40 648 44 648 41 93 41 348 2196 40 2135 41 58 648 621 2188 61 2135 46 2170 40 91 93 41 2189 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2095 44 2135 46 2101 44 2135 46 2102 93 41 2190 61 2181 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2136 61 2190 46 2182 40 41 621 2184 61 2185 40 41 2136 61 2190 46 2191 40 2136 44 2184 41 2136 91 648 93 91 1500 93 46 2146 46 2197 40 40 648 44 648 41 41 2136 61 2190 46 2198 40 2136 44 123 648 125 41 621 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 41 2135 46 2199 40 648 44 2136 41 348 2200 40 2135 41 58 648 621 2184 61 2185 40 41 2184 46 2186 40 40 648 44 648 41 44 303 41 2184 46 2186 40 40 648 44 648 41 44 303 41 2184 46 2186 40 40 648 44 648 41 44 303 41 2184 46 2187 40 648 44 40 648 44 648 41 44 40 648 44 648 41 41 621 2188 61 2135 46 2170 40 91 93 41 2189 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2095 44 2135 46 2101 93 41 2190 61 2181 40 2188 44 2189 41 2136 61 2190 46 2182 40 41 621 2201 61 648 2136 61 2190 46 2191 40 2136 44 2184 44 2201 41 621 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 37 2201 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2146 44 91 40 648 44 648 41 93 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2019 44 648 37 2201 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2146 44 91 40 648 44 648 41 93 41 348 2202 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2096 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2192 40 91 2019 385 2019 44 2203 398 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2097 93 44 91 648 44 648 44 648 93 41 348 2204 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 348 2205 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2007 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 64 2206 46 2207 40 648 44 2208 61 2209 40 648 41 41 348 2210 40 2135 44 2211 41 58 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2020 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2167 40 2136 44 648 44 1500 44 1500 44 2022 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1501 44 2022 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1502 44 2022 61 304 41 64 2206 46 2207 40 648 44 2208 61 2209 40 648 41 41 348 2212 40 2135 44 2211 41 58 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2025 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2167 40 2136 44 648 44 1500 44 1500 44 2026 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1501 44 2026 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1502 44 2026 61 304 41 64 2206 46 2207 40 648 41 348 2213 40 2135 44 2211 41 58 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2025 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2167 40 2136 44 648 44 1500 44 1500 44 2026 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1501 44 2026 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1502 44 2026 61 304 41 2135 46 2192 40 2211 46 2214 44 1502 41 348 2215 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 93 44 91 2135 46 2002 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 348 2216 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 93 44 91 2135 46 2011 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2217 61 304 41 348 2218 40 2135 41 58 348 2219 40 2220 44 2221 44 2222 44 638 2223 41 58 450 648 46 2224 40 2220 44 2221 41 348 2225 40 2222 44 638 2223 41 58 450 2226 46 2227 40 2219 44 2222 44 638 2223 41 621 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2228 40 2009 61 1504 44 2229 61 2225 40 648 41 41 41 44 93 41 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2228 40 2009 61 1504 44 2229 61 2225 40 648 41 41 41 44 93 41 93 2136 61 2135 46 2176 40 2188 44 2189 41 2135 46 2148 40 2136 44 648 44 1500 41 621 2230 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2228 40 2009 61 1504 44 2229 61 2225 40 648 41 41 41 44 93 41 93 2136 61 2135 46 2176 40 2188 44 2230 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 621 621 621 621 2165 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 46 2229 2135 46 2192 40 40 2219 44 40 648 44 41 44 123 125 41 44 40 2165 46 2231 44 2165 46 2232 44 2165 46 2233 41 41 2234 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2228 40 2009 61 1504 44 2229 61 2225 40 648 44 2235 61 648 41 41 41 44 93 41 93 2136 61 2135 46 2176 40 2188 44 2234 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2165 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 46 2229 2135 46 2192 40 40 2219 44 40 648 44 41 44 123 648 58 648 125 41 44 40 2165 46 2231 44 2165 46 2232 44 2165 46 2233 41 41 64 2206 46 2207 40 648 44 2208 61 2209 40 648 41 41 348 2236 40 2135 44 2211 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2010 93 44 91 2135 46 2013 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2217 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1500 44 349 61 648 41 64 2206 46 2207 40 648 44 2237 61 2004 46 2238 44 41 348 2239 40 2135 44 2211 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2010 93 44 91 2135 46 2007 93 41 2135 46 2192 40 2211 46 2214 44 1501 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2217 61 304 41 2135 46 2167 40 2136 44 648 44 1500 44 1500 44 349 61 2004 46 2238 41 64 2206 46 2207 40 648 44 2237 61 648 44 41 348 2240 40 2135 44 2211 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2010 93 44 91 2135 46 2007 93 41 2135 46 2192 40 2211 46 2214 44 1501 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2217 61 302 41 2135 46 2167 40 2136 44 648 44 1500 44 1500 44 349 61 648 41 348 2241 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 93 44 91 2135 46 2012 93 44 2194 40 123 648 58 304 125 41 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2244 40 2135 41 58 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 2245 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 44 2246 61 648 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 2245 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 44 2246 61 648 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2247 40 2135 41 58 2115 61 40 648 44 648 41 2248 61 40 648 44 648 41 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 44 2061 61 123 648 58 123 2115 125 125 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2249 40 648 44 2004 46 2059 44 2250 61 2115 44 2251 61 2115 44 41 41 44 93 41 44 93 621 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 44 2061 61 123 648 58 123 2248 125 125 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2249 40 648 44 2004 46 2059 44 2250 61 2115 44 2251 61 2248 44 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2242 61 648 44 2243 61 648 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2242 61 648 44 2243 61 648 44 41 621 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 44 2061 61 123 648 58 123 2115 125 125 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2031 40 41 41 44 40 648 44 2004 46 2249 40 648 44 2004 46 2059 44 2250 61 2248 44 2251 61 2115 44 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2242 61 648 44 2243 61 648 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2242 61 648 44 2243 61 648 44 41 348 2253 40 2135 41 58 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2008 40 2006 61 304 44 2254 61 302 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2008 40 2006 61 304 44 2254 61 302 41 41 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2255 40 2135 41 58 648 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2031 40 2256 61 648 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 44 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 46 2257 40 41 44 40 648 44 648 44 91 93 44 123 648 58 648 125 44 41 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2242 61 648 44 2243 61 648 44 41 348 2258 40 2135 41 58 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 44 2256 61 648 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 44 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 46 2257 40 41 44 40 648 44 648 44 91 93 44 123 648 58 648 44 648 58 2004 46 2059 44 648 58 648 125 44 41 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2242 61 648 44 2243 61 648 44 41 348 2259 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2057 44 2135 46 2103 93 44 91 2135 46 2062 44 2135 46 2109 93 44 2194 40 123 648 58 304 125 41 44 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 621 621 2135 46 2148 40 2136 44 648 44 1500 41 348 2260 40 2135 41 58 648 2261 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2103 93 44 91 2261 44 2135 46 2103 93 44 2179 61 2194 40 123 648 58 304 125 41 44 41 2135 46 2148 40 2136 44 648 44 1500 41 2135 46 2148 40 2136 44 648 44 1500 41 348 2262 40 2135 41 58 2263 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1503 41 41 44 93 41 2136 61 2135 46 2176 40 91 2135 46 2091 44 2135 46 2077 93 44 91 2263 44 2135 46 2077 93 44 2179 61 2194 40 123 648 58 304 125 41 44 41 2135 46 2148 40 2136 44 648 44 1500 41 2135 46 2148 40 2136 44 648 44 1500 41 348 2264 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2080 44 2135 46 2091 44 2135 46 2089 93 44 91 2135 46 2082 44 2135 46 2091 44 2135 46 2090 93 44 2194 40 123 648 58 304 125 41 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2265 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2057 44 2135 46 2103 93 44 91 2135 46 2062 44 2135 46 2110 93 44 2194 40 123 648 58 304 44 648 58 304 125 41 44 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 621 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2266 40 2135 41 58 648 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2267 40 2135 41 58 648 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 44 2194 40 123 648 58 304 125 41 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2268 40 2135 41 58 648 621 621 621 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2007 44 2135 46 2103 44 2135 46 2122 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 348 2269 40 2135 41 58 648 621 621 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2002 44 2135 46 2070 44 2135 46 2104 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 348 2270 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2064 44 2135 46 2091 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 348 2271 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2057 44 2135 46 2103 44 2135 46 2094 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 621 2135 46 2148 40 2136 44 648 44 1502 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2156 40 2136 44 648 44 1501 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 2135 46 2153 40 2136 44 648 44 1501 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 621 2135 46 2272 40 2136 91 648 93 91 1500 93 46 2273 41 2135 46 2272 40 2136 91 648 93 91 1501 93 46 2273 41 348 2274 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2064 44 2135 46 2092 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 348 2275 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2132 44 2135 46 2133 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 93 41 2135 46 2199 40 648 44 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2061 41 2135 46 2199 40 648 44 2136 91 648 93 91 1500 93 46 2145 91 1501 93 46 2061 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 348 2276 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2085 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2277 61 648 41 348 2278 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2085 93 44 91 2135 46 2086 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2277 61 648 41 348 2279 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2085 93 44 91 2135 46 2002 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2277 61 303 41 348 2280 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2085 93 44 91 2135 46 2085 93 41 621 2135 46 2192 40 2150 40 2136 41 44 1500 41 348 2281 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2085 93 44 91 2135 46 2087 93 44 2194 40 123 648 58 304 125 41 44 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 348 2282 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2085 93 44 91 2135 46 2088 93 44 2194 40 123 648 58 304 125 41 44 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2242 61 648 44 2243 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2277 61 648 41 348 2283 40 2135 41 58 2284 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 44 2285 61 91 2286 40 2287 46 2288 40 648 41 44 648 44 648 41 93 41 41 93 41 2289 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 44 2285 61 91 2290 93 41 41 93 41 2136 61 2135 46 2176 40 91 2284 93 44 91 2289 93 41 621 2135 46 2148 40 2136 44 648 44 1500 41 348 2291 40 2135 41 58 2284 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 44 2285 61 91 2286 40 2287 46 2288 40 648 44 1503 41 44 648 44 648 41 93 41 41 93 41 2289 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 44 2285 61 91 2290 93 41 41 93 41 2136 61 2135 46 2176 40 91 2284 93 44 91 2289 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 348 2292 40 2135 41 58 648 621 621 2293 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 621 621 2294 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 44 123 648 58 303 44 648 58 303 44 125 41 621 621 2295 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 44 123 648 58 2155 40 41 44 648 58 2155 40 41 44 125 41 348 2296 40 2284 44 2289 44 2297 41 58 2136 61 2135 46 2176 40 91 2284 93 44 91 2289 93 41 392 2136 58 2298 61 648 46 2299 40 2300 46 2159 46 2160 385 2300 398 2136 91 648 93 91 1500 93 46 2145 41 2135 46 2152 40 648 37 40 2298 44 2297 41 41 2301 61 40 40 2293 44 2293 44 648 41 44 40 2293 44 2294 44 648 41 44 40 2293 44 2295 44 648 41 44 40 2294 44 2293 44 648 41 44 40 2294 44 2294 44 648 41 44 40 2294 44 2295 44 648 41 44 40 2295 44 2293 44 648 41 44 40 2295 44 2294 44 648 41 44 40 2295 44 2295 44 648 41 44 41 385 2302 398 2301 58 2296 40 42 2302 41 348 2303 40 2135 41 58 648 2304 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 91 2004 46 2114 40 2115 61 91 648 93 44 2019 61 648 41 93 125 41 2136 61 2135 46 2176 40 91 93 44 91 2304 93 41 2305 61 2004 46 2114 40 2115 61 91 648 93 44 2019 61 648 41 621 2135 46 2192 40 2150 40 2136 91 648 93 41 44 1501 41 621 2143 61 2136 91 648 93 91 1500 93 2135 46 2192 40 2150 40 2143 46 2145 41 44 1502 41 621 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2306 61 2305 41 348 2307 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2103 93 44 91 2135 46 2002 44 2135 46 2113 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2305 61 2004 46 2114 40 2115 61 91 648 44 648 93 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2306 61 2305 41 348 2308 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2113 93 44 91 2135 46 2002 44 2135 46 2103 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 41 348 2309 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2113 93 44 91 2135 46 2002 44 2135 46 2116 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 41 2305 61 2004 46 2114 40 2115 61 91 648 44 648 93 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2306 61 2305 41 348 2310 40 2135 41 58 648 2304 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 91 2004 46 2015 40 2016 61 2004 46 2017 40 2018 61 648 41 44 2019 61 648 41 93 125 41 2136 61 2135 46 2176 40 91 93 44 91 2304 93 41 2311 61 2004 46 2015 40 2016 61 2004 46 2017 40 2018 61 648 41 44 2019 61 648 41 621 2135 46 2192 40 2150 40 2136 91 648 93 41 44 1501 41 621 2143 61 2136 91 648 93 91 1500 93 2135 46 2192 40 2150 40 2143 46 2145 41 44 1502 41 621 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2312 61 2311 41 348 2313 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 93 44 91 2135 46 2014 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2311 61 2004 46 2015 40 2016 61 2004 46 2017 40 2018 61 648 41 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2312 61 2311 41 348 2314 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2014 93 44 91 2135 46 2007 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 41 348 2315 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2103 93 44 91 2135 46 2002 44 2135 46 2117 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 123 40 648 44 648 41 125 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2317 61 123 40 648 44 648 41 125 41 348 2318 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2117 93 44 91 2135 46 2002 44 2135 46 2103 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 2155 40 41 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2317 61 2155 40 41 41 348 2319 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2117 93 44 91 2135 46 2002 44 2135 46 2108 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 2155 40 41 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2317 61 2155 40 41 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2252 61 648 44 2019 61 648 41 348 2320 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2117 93 44 91 2135 46 2002 44 2135 46 2117 93 41 621 2135 46 2192 40 2150 40 2136 41 44 1500 41 348 2321 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2117 93 44 91 2135 46 2002 44 2135 46 2118 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2317 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2316 61 123 40 648 44 648 41 125 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2317 61 123 40 648 44 648 41 125 44 41 348 2322 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2103 93 44 91 2135 46 2002 44 2135 46 2119 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2316 61 123 40 648 44 648 41 125 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2317 61 123 40 648 44 648 41 125 41 348 2323 40 2135 41 58 2304 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 2324 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 123 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 41 2136 61 2135 46 2176 40 91 2135 46 2108 93 44 91 2304 44 2324 93 41 621 2135 46 2192 40 2150 40 2136 91 648 93 41 44 1501 41 621 2143 61 2136 91 648 93 91 1500 93 2135 46 2192 40 2150 40 2143 46 2145 41 44 1502 41 621 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 93 41 348 2325 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2119 93 44 91 2135 46 2002 44 2135 46 2117 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 44 648 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2317 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2316 61 123 40 648 44 648 41 125 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2317 61 123 40 648 44 648 41 125 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2252 61 648 44 2019 61 648 44 41 348 2326 40 2135 41 58 648 2327 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2031 40 2328 61 304 41 41 44 93 44 123 648 58 123 40 648 44 41 125 44 125 41 2329 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 2245 61 304 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 44 123 648 58 123 40 648 44 41 125 44 125 41 2136 61 2135 46 2176 40 91 2327 93 44 91 2329 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2019 61 648 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2252 61 648 44 2019 61 648 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2317 61 123 40 648 44 41 125 44 41 348 2330 40 2135 41 58 2327 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 44 123 648 58 123 40 648 44 41 44 40 648 44 41 125 44 648 58 123 40 648 44 41 125 44 125 41 2329 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2031 40 41 41 44 93 44 123 648 58 123 40 648 44 41 125 44 648 58 123 40 648 44 41 44 40 648 44 41 125 44 125 41 2136 61 2135 46 2176 40 91 2327 93 44 91 2329 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2316 61 123 40 648 44 41 125 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2317 61 123 40 648 44 41 44 40 648 44 41 125 44 41 348 2331 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2119 93 44 91 2135 46 2002 44 2135 46 2120 93 44 2194 40 123 648 58 304 125 41 44 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 44 648 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2316 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2317 61 2155 40 41 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2316 61 123 40 648 44 648 41 125 44 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2317 61 123 40 648 44 648 41 125 44 41 348 2332 40 2135 41 58 648 621 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2002 44 2135 46 2067 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 304 44 648 58 91 93 44 648 58 91 93 125 41 621 621 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2067 93 44 91 2135 46 2002 44 2135 46 2069 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2061 61 123 125 41 348 2333 40 2135 41 58 334 2334 58 434 2335 61 2003 40 648 44 648 44 91 93 44 123 648 58 304 125 44 40 2334 44 648 41 44 41 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2002 44 2335 93 44 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 304 44 648 58 91 93 44 648 58 91 93 125 44 2124 61 40 2334 44 648 41 44 41 348 2336 40 2135 41 58 648 621 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2002 44 2135 46 2070 44 2135 46 2104 93 41 621 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 91 1502 93 91 1501 93 46 2337 46 2338 44 648 44 41 621 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2052 44 2135 46 2070 44 2135 46 2104 93 41 621 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 91 1502 93 91 1501 93 46 2337 46 2338 44 648 44 41 348 2339 40 2135 41 58 621 2289 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2070 44 2135 46 2104 93 44 41 2136 61 2135 46 2176 40 91 93 44 2289 41 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 91 1502 93 91 1501 93 2135 46 2192 40 2289 46 2341 40 2340 46 2337 46 2338 41 44 40 648 44 648 41 44 41 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 621 2284 61 2289 46 335 40 41 2289 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2071 44 2135 46 2104 93 44 41 2136 61 2135 46 2176 40 2284 44 2289 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 621 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 621 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 621 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 2135 46 2192 40 2289 46 2341 40 2340 46 2337 46 2338 41 44 40 648 44 648 41 44 41 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 348 2342 40 2135 41 58 621 2289 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2067 44 2135 46 2072 44 2135 46 2105 44 93 41 2136 61 2135 46 2176 40 91 93 44 2289 41 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 91 1501 93 91 1501 93 2135 46 2192 40 2289 46 2341 40 2340 46 2337 46 2338 41 44 40 648 44 648 41 44 41 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 621 621 2284 61 2289 46 335 40 41 2289 61 2135 46 2170 40 91 2135 46 2002 44 2135 46 2069 44 2135 46 2072 44 2135 46 2105 44 93 41 2136 61 2135 46 2176 40 2284 44 2289 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 621 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 621 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 621 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 2135 46 2192 40 2289 46 2341 40 2340 46 2337 46 2338 41 44 40 648 44 648 41 44 41 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 348 2343 40 2135 41 58 648 621 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2002 44 2135 46 2073 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 302 125 41 348 2344 40 2135 41 58 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2073 93 44 91 2135 46 2002 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 348 2345 40 2135 41 58 621 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2073 93 44 91 2135 46 2002 44 2135 46 2074 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 125 41 348 2346 40 2135 41 58 621 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2074 93 44 91 2135 46 2002 44 2135 46 2073 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 302 125 41 348 2347 40 2135 41 58 648 621 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2075 44 2135 46 2103 93 41 621 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 91 1502 93 91 1501 93 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 621 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2076 44 2135 46 2103 93 41 621 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 91 1502 93 91 1501 93 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 64 2348 40 2349 61 648 41 348 2350 40 2135 41 58 497 2351 40 2352 46 2353 41 58 2136 61 2135 46 2176 40 91 2135 46 2123 93 44 91 2135 46 2123 44 2135 46 2066 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 348 2354 40 2135 41 58 2174 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 2355 46 2349 46 2356 40 41 44 2004 46 2059 44 41 41 44 93 41 497 2351 40 2352 46 2353 41 58 2136 61 2135 46 2176 40 91 93 44 91 2174 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 44 41 348 2357 40 2135 41 58 497 2351 40 2352 46 2353 41 58 2188 61 2135 46 2170 40 91 2135 46 2123 44 2135 46 2065 93 41 497 2348 40 2349 61 648 41 58 2189 61 2135 46 2170 40 91 2135 46 2123 44 2135 46 2066 93 41 2190 61 2181 40 2188 44 2189 41 2136 61 2190 46 2182 40 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 41 2340 61 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2169 2135 46 2192 40 2340 46 2337 46 2338 44 648 41 348 2358 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2013 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 348 2359 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2027 93 44 91 2135 46 2029 93 41 621 2135 46 2192 40 2150 40 2136 41 44 1500 41 348 2360 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2030 93 44 91 2135 46 2032 93 41 2135 46 2192 40 2136 44 123 125 41 348 2361 40 2135 41 58 648 621 621 621 2136 61 2135 46 2176 40 91 2135 46 2033 93 44 91 2135 46 2034 93 41 2135 46 2192 40 2136 44 123 125 41 621 621 2136 61 2135 46 2176 40 91 2135 46 2033 93 44 91 2135 46 2035 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 348 2362 40 2135 41 58 648 621 621 621 2136 61 2135 46 2176 40 91 2135 46 2036 93 44 91 2135 46 2037 93 41 2135 46 2192 40 2136 44 123 125 41 621 621 2136 61 2135 46 2176 40 91 2135 46 2036 93 44 91 2135 46 2038 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 348 2363 40 2135 41 58 648 621 621 621 2136 61 2135 46 2176 40 91 2135 46 2039 93 44 91 2135 46 2040 93 41 2135 46 2192 40 2136 44 123 125 41 621 621 2136 61 2135 46 2176 40 91 2135 46 2039 93 44 91 2135 46 2041 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 348 2364 40 2135 41 58 648 621 621 621 2136 61 2135 46 2176 40 91 2135 46 2042 93 44 91 2135 46 2046 93 41 2135 46 2192 40 2136 44 123 125 41 621 621 2136 61 2135 46 2176 40 91 2135 46 2042 93 44 91 2135 46 2047 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 621 2136 61 2135 46 2176 40 91 2135 46 2042 93 44 91 2135 46 2048 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 621 621 2136 61 2135 46 2176 40 91 2135 46 2042 93 44 91 2135 46 2049 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 621 2136 61 2135 46 2176 40 91 2135 46 2042 93 44 91 2135 46 2050 93 41 2135 46 2192 40 2150 40 2136 41 44 1501 41 348 2365 40 2135 41 58 648 2304 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 44 621 349 61 2004 46 2031 44 41 41 93 44 41 2136 61 2135 46 2176 40 91 93 44 91 2304 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 348 2366 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2063 93 44 91 2135 46 2064 44 2135 46 2091 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2367 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2064 44 2135 46 2091 93 44 91 2135 46 2007 93 41 621 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 64 2206 46 2207 40 648 44 2208 61 2209 40 648 41 41 348 2368 40 2135 44 2211 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2091 93 44 91 2135 46 2077 44 2135 46 2091 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 348 2369 40 2135 41 58 2136 61 2135 46 2176 40 91 2135 46 2077 44 2135 46 2091 93 44 91 2135 46 2079 44 2135 46 2091 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 348 2370 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2080 44 2135 46 2091 44 2135 46 2089 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2252 61 648 44 2019 61 648 41 348 2371 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2112 44 2135 46 2007 44 2135 46 2121 93 44 91 2135 46 2108 44 2135 46 2007 93 44 41 621 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 348 2372 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2112 44 2135 46 2007 44 2135 46 2121 93 44 91 2135 46 2007 93 44 41 621 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2373 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2080 44 2135 46 2091 44 2135 46 2089 93 44 91 2135 46 2091 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2374 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2083 93 44 91 2135 46 2077 44 2135 46 2091 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 44 2252 61 648 41 348 2375 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2077 44 2135 46 2091 93 44 91 2135 46 2083 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 2135 46 2167 40 2136 44 648 44 1500 44 1501 44 2009 61 1503 41 348 2376 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2064 44 2135 46 2092 93 44 91 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2377 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2084 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2061 61 123 648 58 91 40 648 44 648 41 93 44 648 58 648 44 125 41 621 2136 61 2135 46 2176 40 91 2135 46 2084 93 44 91 2135 46 2002 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 125 41 348 2378 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2067 44 2135 46 2002 93 44 91 2135 46 2068 44 2135 46 2002 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 648 125 41 348 2379 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2103 44 2135 46 2057 93 44 91 2135 46 2103 44 2135 46 2060 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2380 61 648 41 348 2381 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 93 44 91 2135 46 2103 44 2135 46 2060 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2252 61 648 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 44 2380 61 648 41 348 2382 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2103 44 2135 46 2060 93 44 91 2135 46 2007 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2380 61 303 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2252 61 648 44 2019 61 648 41 348 2383 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2103 44 2135 46 2060 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 648 125 41 2135 46 2199 40 648 44 91 2019 385 2019 44 2169 398 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2115 93 41 348 2384 40 2135 41 58 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2103 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 44 2061 61 123 648 58 648 44 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 41 44 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 648 44 648 58 123 40 648 44 648 41 125 44 648 58 123 40 648 44 648 41 125 44 125 44 41 348 2385 40 2135 41 58 2301 61 91 40 648 44 123 648 58 91 2004 46 2114 40 2115 61 91 648 93 44 2019 61 648 41 44 93 125 44 41 44 40 648 44 123 648 58 91 2004 46 2015 40 2016 61 2004 46 2017 40 2386 61 1501 41 44 2019 61 648 44 41 44 93 125 44 41 44 93 385 2144 44 2387 398 2301 58 497 2135 46 2388 40 2144 61 2144 41 58 2189 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 44 2061 61 123 648 58 648 44 638 2387 44 125 41 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2103 44 2189 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 2144 44 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 648 125 44 41 348 2389 40 2135 41 58 2301 61 91 40 648 44 123 648 58 91 2004 46 2114 40 2115 61 91 648 93 44 2019 61 648 41 44 93 125 44 41 44 40 648 44 123 648 58 91 2004 46 2015 40 2016 61 2004 46 2017 40 2386 61 1501 41 44 2019 61 648 44 41 44 93 125 44 41 44 40 648 44 123 648 58 123 40 648 44 648 41 125 125 41 44 40 648 44 123 648 58 123 40 648 44 648 41 125 125 41 44 93 385 2144 44 2387 398 2301 58 497 2135 46 2388 40 2144 61 2144 41 58 2189 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 44 2061 61 123 648 58 648 44 638 2387 44 125 41 2136 61 2135 46 2176 40 91 2135 46 2103 44 2135 46 2057 93 44 91 2135 46 2103 44 2189 93 44 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 2144 44 93 41 348 2390 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2095 93 44 91 2135 46 2096 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2192 40 91 2019 385 2019 44 2203 398 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2097 93 44 91 648 44 648 44 648 93 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2097 91 1501 93 91 1501 93 46 2232 44 40 648 44 648 44 1501 44 1502 41 41 2135 46 2192 40 2136 91 648 93 91 1500 93 46 2145 91 1500 93 46 2097 91 1502 93 91 1501 93 46 2232 44 40 648 44 648 44 1502 44 1502 41 41 348 2391 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2123 44 2135 46 2127 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 348 2392 40 2135 41 58 2174 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 44 2061 61 123 648 58 648 125 41 2136 61 2135 46 2176 40 91 93 44 91 2174 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 648 58 648 125 44 41 2393 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 2136 61 2135 46 2176 40 91 2174 93 44 91 2393 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2061 61 123 125 41 64 2348 40 2349 61 648 41 348 2394 40 2135 41 58 648 497 2351 40 2352 46 2353 41 58 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2126 44 2135 46 2127 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 348 2395 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2129 44 2135 46 2007 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 348 2396 40 2135 41 58 2139 61 648 2136 61 2135 46 2176 40 91 93 44 91 2003 40 2139 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 2139 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 44 2003 40 2139 44 648 44 91 93 44 2124 61 40 648 44 41 41 44 93 41 2135 46 2148 40 2136 44 2139 44 1501 41 2135 46 2156 40 2136 44 2139 44 1500 44 91 648 44 648 44 648 44 93 41 2135 46 2161 40 2136 44 2139 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 2139 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 2139 44 1500 44 1502 44 2019 61 648 41 348 2397 40 2135 41 58 648 2398 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2045 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 93 41 2399 61 2003 40 648 44 648 44 91 93 44 2124 61 40 648 44 648 41 41 2400 61 2003 40 648 44 648 44 91 93 44 2124 61 40 648 44 648 41 41 2401 61 2003 40 648 44 648 44 91 93 44 2124 61 40 648 44 648 41 41 2136 61 2135 46 2176 40 91 93 44 91 2398 44 2045 44 2399 44 2400 44 2401 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2402 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2002 44 2135 46 2067 44 2135 46 2072 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2403 40 2135 41 58 648 2136 61 2135 46 2176 40 91 93 44 91 2135 46 2130 44 2135 46 2007 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 348 2404 40 2135 41 58 648 621 2405 61 2406 40 2407 41 2188 61 2135 46 2170 40 91 93 41 2189 61 2135 46 2170 40 91 2135 46 2106 93 41 2189 46 2408 61 123 648 125 2190 61 2181 40 2188 44 2189 41 2136 61 2190 46 2182 40 2184 61 2405 46 2184 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 64 2348 40 2409 61 123 648 58 648 125 41 348 2410 40 2135 41 58 648 621 2405 61 2406 40 2407 41 2188 61 2135 46 2170 40 91 93 41 2189 61 2135 46 2170 40 91 2135 46 2106 93 41 2189 46 2408 61 123 648 125 2190 61 2181 40 2188 44 2189 41 2136 61 2190 46 2182 40 2184 61 2405 46 2184 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 348 2411 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 44 2135 46 2092 93 44 91 2135 46 2128 44 2135 46 2093 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1502 44 2019 61 648 41 348 2412 40 2135 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2007 44 2135 46 2103 93 44 91 2135 46 2057 44 2135 46 2103 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 348 2413 40 2135 41 58 2136 61 2135 46 2176 40 91 2135 46 2002 44 2135 46 2107 93 44 91 2135 46 2002 44 2135 46 2103 93 44 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 348 2414 40 2135 41 58 648 2415 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2416 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 2417 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 44 93 41 2418 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 2136 61 2135 46 2176 40 91 93 44 91 2415 44 2416 44 2417 44 2418 93 41 621 2135 46 2148 40 2136 44 648 44 1502 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2156 40 2136 44 648 44 1501 44 91 648 93 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 64 2348 40 2349 61 648 41 348 2419 40 2135 41 58 648 497 2351 40 2352 46 2353 41 58 2420 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 93 44 2124 61 40 2125 44 41 41 2415 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 2355 46 2349 44 2004 46 2059 41 41 44 93 41 2136 61 2135 46 2176 40 91 93 44 91 2415 44 2420 93 41 621 2135 46 2148 40 2136 44 648 44 1502 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2156 40 2136 44 648 44 1501 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 2135 46 2153 40 2136 44 648 44 1501 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 64 2348 40 2349 61 648 41 348 2421 40 2135 41 58 648 497 2351 40 2352 46 2353 41 58 2415 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 2355 46 2349 44 2004 46 2059 41 41 44 93 41 2420 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 648 44 2004 46 2059 41 41 93 44 2124 61 40 2125 44 41 41 2136 61 2135 46 2176 40 91 93 44 91 2415 44 2420 93 41 621 2135 46 2148 40 2136 44 648 44 1502 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2156 40 2136 44 648 44 1501 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 2135 46 2153 40 2136 44 648 44 1501 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 40 648 44 648 41 93 41 64 2348 40 2349 61 648 41 348 2422 40 2135 41 58 648 497 2351 40 2352 46 2353 41 58 2416 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2058 40 2355 46 2349 44 2004 46 2059 44 2423 61 648 41 41 93 41 2136 61 2135 46 2176 40 91 93 44 91 2416 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2153 40 2136 44 648 44 1500 44 91 93 41 64 2348 40 2349 61 648 41 348 2424 40 2135 41 58 497 2351 40 2352 46 2353 41 58 2425 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2058 40 2355 46 2349 44 2004 46 2059 41 41 93 41 2426 61 2003 40 648 44 648 44 91 93 44 2124 61 40 648 44 41 41 2427 61 2003 40 648 44 648 44 91 93 44 2124 61 40 2125 44 648 41 41 2136 61 2135 46 2176 40 91 93 44 91 2425 44 2426 44 2427 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 44 648 44 648 93 41 64 2206 46 2207 40 648 44 2208 61 2209 40 648 41 41 348 2428 40 2135 44 2211 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2055 93 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 41 64 2206 46 2207 40 648 41 348 2429 40 2135 44 2211 41 58 648 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2053 93 41 2135 46 2192 40 2211 46 2214 44 1502 41 621 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 41 348 2430 40 2135 41 58 2431 61 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 2432 61 2003 40 648 44 648 44 91 93 44 2124 61 40 648 44 41 41 2136 61 2135 46 2176 40 91 2431 44 2432 93 44 91 2431 93 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 348 2433 40 2135 41 58 648 2188 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 41 44 93 2189 61 91 2003 40 648 44 648 44 91 40 648 44 2004 46 2005 40 2006 61 304 41 41 44 93 41 44 2003 40 648 44 648 44 91 40 648 44 2004 46 2008 40 2009 61 1504 41 41 44 93 44 2124 61 40 648 44 41 41 44 93 2136 61 2135 46 2176 40 2188 44 2189 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 44 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 44 2252 61 648 41 2135 46 2161 40 2136 44 648 44 1500 44 1501 44 2019 61 648 41 348 2434 40 2135 41 58 2301 61 91 40 648 44 303 41 44 40 648 44 1501 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 40 648 44 1502 41 44 93 385 2201 44 2435 398 2301 58 497 2135 46 2388 40 2201 61 2201 41 58 2135 46 2192 40 2181 46 2436 40 2201 41 44 2435 44 41 348 2437 40 2135 41 58 334 2438 40 2004 46 2058 41 58 348 2439 40 2135 44 42 2232 44 638 2223 41 58 2223 91 648 93 61 648 463 40 41 46 2439 40 42 2232 44 638 2223 41 348 2257 40 2135 41 58 2019 44 2440 44 2232 44 2223 61 463 40 41 46 2257 40 41 351 2223 91 648 93 450 2019 44 2440 44 2232 44 2223 2441 61 2003 40 648 44 648 44 91 40 648 44 2438 40 2442 61 2004 46 2059 41 41 44 93 41 2136 61 2135 46 2176 40 91 2135 46 2002 93 44 91 2135 46 2002 44 2441 93 44 41 2135 46 2148 40 2136 44 648 44 1501 41 2135 46 2156 40 2136 44 648 44 1500 44 91 648 93 41 2135 46 2161 40 2136 44 648 44 1500 44 1500 44 2019 61 648 41 
132227,Python,"class ContentTypeManager(models.Manager):
    use_in_migrations = True

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Cache shared by all the get_for_* methods to speed up
        # ContentType retrieval.
        self._cache = {}

    def get_by_natural_key(self, app_label, model):
        try:
            ct = self._cache[self.db][(app_label, model)]
        except KeyError:
            ct = self.get(app_label=app_label, model=model)
            self._add_to_cache(self.db, ct)
        return ct

    def _get_opts(self, model, for_concrete_model):
        if for_concrete_model:
            model = model._meta.concrete_model
        return model._meta

    def _get_from_cache(self, opts):
        key = (opts.app_label, opts.model_name)
        return self._cache[self.db][key]

    def get_for_model(self, model, for_concrete_model=True):
        """"""
        Return the ContentType object for a given model, creating the
        ContentType if necessary. Lookups are cached so that subsequent lookups
        for the same model don't hit the database.
        """"""
        opts = self._get_opts(model, for_concrete_model)
        try:
            return self._get_from_cache(opts)
        except KeyError:
            pass

        # The ContentType entry was not found in the cache, therefore we
        # proceed to load or create it.
        try:
            # Start with get() and not get_or_create() in order to use
            # the db_for_read (see #20401).
            ct = self.get(app_label=opts.app_label, model=opts.model_name)
        except self.model.DoesNotExist:
            # Not found in the database; we proceed to create it. This time
            # use get_or_create to take care of any race conditions.
            ct, created = self.get_or_create(
                app_label=opts.app_label,
                model=opts.model_name,
            )
        self._add_to_cache(self.db, ct)
        return ct

    def get_for_models(self, *models, for_concrete_models=True):
        """"""
        Given *models, return a dictionary mapping {model: content_type}.
        """"""
        results = {}
        # Models that aren't already in the cache.
        needed_app_labels = set()
        needed_models = set()
        # Mapping of opts to the list of models requiring it.
        needed_opts = defaultdict(list)
        for model in models:
            opts = self._get_opts(model, for_concrete_models)
            try:
                ct = self._get_from_cache(opts)
            except KeyError:
                needed_app_labels.add(opts.app_label)
                needed_models.add(opts.model_name)
                needed_opts[opts].append(model)
            else:
                results[model] = ct
        if needed_opts:
            # Lookup required content types from the DB.
            cts = self.filter(
                app_label__in=needed_app_labels,
                model__in=needed_models
            )
            for ct in cts:
                opts_models = needed_opts.pop(ct.model_class()._meta, [])
                for model in opts_models:
                    results[model] = ct
                self._add_to_cache(self.db, ct)
        # Create content types that weren't in the cache or DB.
        for opts, opts_models in needed_opts.items():
            ct = self.create(
                app_label=opts.app_label,
                model=opts.model_name,
            )
            self._add_to_cache(self.db, ct)
            for model in opts_models:
                results[model] = ct
        return results

    def get_for_id(self, id):
        """"""
        Lookup a ContentType by ID. Use the same shared cache as get_for_model
        (though ContentTypes are not created on-the-fly by get_by_id).
        """"""
        try:
            ct = self._cache[self.db][id]
        except KeyError:
            # This could raise a DoesNotExist; that's correct behavior and will
            # make sure that only correct ctypes get stored in the cache dict.
            ct = self.get(pk=id)
            self._add_to_cache(self.db, ct)
        return ct

    def clear_cache(self):
        """"""
        Clear out the content-type cache.
        """"""
        self._cache.clear()

    def _add_to_cache(self, using, ct):
        """"""Insert a ContentType into the cache.""""""
        # Note it's possible for ContentType objects to be stale; model_class() will return None.
        # Hence, there is no reliance on model._meta.app_label here, just using the model fields instead.
        key = (ct.app_label, ct.model)
        self._cache.setdefault(using, {})[key] = ct
        self._cache.setdefault(using, {})[ct.id] = ct",1,334 2000 40 2001 46 2002 41 58 2003 61 304 348 2004 40 2005 44 42 2006 44 638 2007 41 58 463 40 41 46 2004 40 42 2006 44 638 2007 41 621 621 2005 46 2008 61 123 125 348 2009 40 2005 44 2010 44 2011 41 58 474 58 2012 61 2005 46 2008 91 2005 46 2013 93 91 40 2010 44 2011 41 93 374 2014 58 2012 61 2005 46 2015 40 2010 61 2010 44 2011 61 2011 41 2005 46 2016 40 2005 46 2013 44 2012 41 450 2012 348 2017 40 2005 44 2011 44 2018 41 58 392 2018 58 2011 61 2011 46 2019 46 2020 450 2011 46 2019 348 2021 40 2005 44 2022 41 58 2023 61 40 2022 46 2010 44 2022 46 2024 41 450 2005 46 2008 91 2005 46 2013 93 91 2023 93 348 2025 40 2005 44 2011 44 2018 61 304 41 58 648 2022 61 2005 46 2017 40 2011 44 2018 41 474 58 450 2005 46 2021 40 2022 41 374 2014 58 434 621 621 474 58 621 621 2012 61 2005 46 2015 40 2010 61 2022 46 2010 44 2011 61 2022 46 2024 41 374 2005 46 2011 46 2026 58 621 621 2012 44 2027 61 2005 46 2028 40 2010 61 2022 46 2010 44 2011 61 2022 46 2024 44 41 2005 46 2016 40 2005 46 2013 44 2012 41 450 2012 348 2029 40 2005 44 42 2001 44 2030 61 304 41 58 648 2031 61 123 125 621 2032 61 2033 40 41 2034 61 2033 40 41 621 2035 61 2036 40 411 41 385 2011 398 2001 58 2022 61 2005 46 2017 40 2011 44 2030 41 474 58 2012 61 2005 46 2021 40 2022 41 374 2014 58 2032 46 2037 40 2022 46 2010 41 2034 46 2037 40 2022 46 2024 41 2035 91 2022 93 46 2038 40 2011 41 360 58 2031 91 2011 93 61 2012 392 2035 58 621 2039 61 2005 46 2040 40 2041 61 2032 44 2042 61 2034 41 385 2012 398 2039 58 2043 61 2035 46 2044 40 2012 46 2045 40 41 46 2019 44 91 93 41 385 2011 398 2043 58 2031 91 2011 93 61 2012 2005 46 2016 40 2005 46 2013 44 2012 41 621 385 2022 44 2043 398 2035 46 2046 40 41 58 2012 61 2005 46 2047 40 2010 61 2022 46 2010 44 2011 61 2022 46 2024 44 41 2005 46 2016 40 2005 46 2013 44 2012 41 385 2011 398 2043 58 2031 91 2011 93 61 2012 450 2031 348 2048 40 2005 44 2049 41 58 648 474 58 2012 61 2005 46 2008 91 2005 46 2013 93 91 2049 93 374 2014 58 621 621 2012 61 2005 46 2015 40 2050 61 2049 41 2005 46 2016 40 2005 46 2013 44 2012 41 450 2012 348 2051 40 2005 41 58 648 2005 46 2008 46 2052 40 41 348 2016 40 2005 44 489 44 2012 41 58 648 621 621 2023 61 40 2012 46 2010 44 2012 46 2011 41 2005 46 2008 46 2053 40 489 44 123 125 41 91 2023 93 61 2012 2005 46 2008 46 2053 40 489 44 123 125 41 91 2012 46 2049 93 61 2012 
132410,Python,"class FixtureLoadingTests(DumpDataAssertMixin, TestCase):

    def test_loading_and_dumping(self):
        apps.clear_cache()
        Site.objects.all().delete()
        # Load fixture 1. Single JSON file, with two objects.
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        self.assertSequenceEqual(
            Article.objects.values_list('headline', flat=True),
            ['Time to reform copyright', 'Poker has no place on ESPN'],
        )

        # Dump the current contents of the database as a JSON fixture
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
        )

        # Try just dumping the contents of fixtures.Category
        self._dumpdata_assert(
            ['fixtures.Category'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", '
            '""title"": ""News Stories""}}]'
        )

        # ...and just fixtures.Article
        self._dumpdata_assert(
            ['fixtures.Article'],
            '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
            '""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": {""headline"": '
            '""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
        )

        # ...and both
        self._dumpdata_assert(
            ['fixtures.Category', 'fixtures.Article'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", '
            '""title"": ""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has '
            'no place on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", '
            '""fields"": {""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
        )

        # Specify a specific model twice
        self._dumpdata_assert(
            ['fixtures.Article', 'fixtures.Article'],
            (
                '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
                '""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": {""headline"": '
                '""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
            )
        )

        # Specify a dump that specifies Article both explicitly and implicitly
        self._dumpdata_assert(
            ['fixtures.Article', 'fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
        )

        # Specify a dump that specifies Article both explicitly and implicitly,
        # but lists the app first (#22025).
        self._dumpdata_assert(
            ['fixtures', 'fixtures.Article'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
        )

        # Same again, but specify in the reverse order
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no '
            'place on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"":'
            ' {""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]'
        )

        # Specify one model from one application, and an entire other application.
        self._dumpdata_assert(
            ['fixtures.Category', 'sites'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 1, ""model"": ""sites.site"", ""fields"": {""domain"": ""example.com"", ""name"": '
            '""example.com""}}]'
        )

        # Load fixture 2. JSON file imported by default. Overwrites some existing objects
        management.call_command('loaddata', 'fixture2.json', verbosity=0)
        self.assertSequenceEqual(
            Article.objects.values_list('headline', flat=True),
            [
                'Django conquers world!',
                'Copyright is fine the way it is',
                'Poker has no place on ESPN',
            ],
        )

        # Load fixture 3, XML format.
        management.call_command('loaddata', 'fixture3.xml', verbosity=0)
        self.assertSequenceEqual(
            Article.objects.values_list('headline', flat=True),
            [
                'XML identified as leading cause of cancer',
                'Django conquers world!',
                'Copyright is fine the way it is',
                'Poker on TV is great!',
            ],
        )

        # Load fixture 6, JSON file with dynamic ContentType fields. Testing ManyToOne.
        management.call_command('loaddata', 'fixture6.json', verbosity=0)
        self.assertQuerysetEqual(Tag.objects.all(), [
            '<Tag: <Article: Copyright is fine the way it is> tagged ""copyright"">',
            '<Tag: <Article: Copyright is fine the way it is> tagged ""law"">',
        ], transform=repr, ordered=False)

        # Load fixture 7, XML file with dynamic ContentType fields. Testing ManyToOne.
        management.call_command('loaddata', 'fixture7.xml', verbosity=0)
        self.assertQuerysetEqual(Tag.objects.all(), [
            '<Tag: <Article: Copyright is fine the way it is> tagged ""copyright"">',
            '<Tag: <Article: Copyright is fine the way it is> tagged ""legal"">',
            '<Tag: <Article: Django conquers world!> tagged ""django"">',
            '<Tag: <Article: Django conquers world!> tagged ""world domination"">',
        ], transform=repr, ordered=False)

        # Load fixture 8, JSON file with dynamic Permission fields. Testing ManyToMany.
        management.call_command('loaddata', 'fixture8.json', verbosity=0)
        self.assertQuerysetEqual(Visa.objects.all(), [
            '<Visa: Django Reinhardt Can add user, Can change user, Can delete user>',
            '<Visa: Stephane Grappelli Can add user>',
            '<Visa: Prince >'
        ], transform=repr, ordered=False)

        # Load fixture 9, XML file with dynamic Permission fields. Testing ManyToMany.
        management.call_command('loaddata', 'fixture9.xml', verbosity=0)
        self.assertQuerysetEqual(Visa.objects.all(), [
            '<Visa: Django Reinhardt Can add user, Can change user, Can delete user>',
            '<Visa: Stephane Grappelli Can add user, Can delete user>',
            '<Visa: Artist formerly known as ""Prince"" Can change user>'
        ], transform=repr, ordered=False)

        # object list is unaffected
        self.assertSequenceEqual(
            Article.objects.values_list('headline', flat=True),
            [
                'XML identified as leading cause of cancer',
                'Django conquers world!',
                'Copyright is fine the way it is',
                'Poker on TV is great!',
            ],
        )

        # By default, you get raw keys on dumpdata
        self._dumpdata_assert(
            ['fixtures.book'],
            '[{""pk"": 1, ""model"": ""fixtures.book"", ""fields"": {""name"": ""Music for all ages"", ""authors"": [3, 1]}}]'
        )

        # But you can get natural keys if you ask for them and they are available
        self._dumpdata_assert(
            ['fixtures.book'],
            '[{""pk"": 1, ""model"": ""fixtures.book"", ""fields"": {""name"": ""Music for all ages"", ""authors"": [[""Artist '
            'formerly known as \\""Prince\\""""], [""Django Reinhardt""]]}}]',
            natural_foreign_keys=True
        )

        # You can also omit the primary keys for models that we can get later with natural keys.
        self._dumpdata_assert(
            ['fixtures.person'],
            '[{""fields"": {""name"": ""Django Reinhardt""}, ""model"": ""fixtures.person""}, {""fields"": {""name"": ""Stephane '
            'Grappelli""}, ""model"": ""fixtures.person""}, {""fields"": {""name"": ""Artist formerly known as '
            '\\""Prince\\""""}, ""model"": ""fixtures.person""}]',
            natural_primary_keys=True
        )

        # Dump the current contents of the database as a JSON fixture
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker on TV is '
            'great!"", ""pub_date"": ""2006-06-16T11:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Copyright is fine the way it is"", ""pub_date"": ""2006-06-16T14:00:00""}}, {""pk"": 4, '
            '""model"": ""fixtures.article"", ""fields"": {""headline"": ""Django conquers world!"", ""pub_date"": '
            '""2006-06-16T15:00:00""}}, {""pk"": 5, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""XML '
            'identified as leading cause of cancer"", ""pub_date"": ""2006-06-16T16:00:00""}}, {""pk"": 1, ""model"": '
            '""fixtures.tag"", ""fields"": {""tagged_type"": [""fixtures"", ""article""], ""name"": ""copyright"", ""tagged_id"": '
            '3}}, {""pk"": 2, ""model"": ""fixtures.tag"", ""fields"": {""tagged_type"": [""fixtures"", ""article""], ""name"": '
            '""legal"", ""tagged_id"": 3}}, {""pk"": 3, ""model"": ""fixtures.tag"", ""fields"": {""tagged_type"": [""fixtures"", '
            '""article""], ""name"": ""django"", ""tagged_id"": 4}}, {""pk"": 4, ""model"": ""fixtures.tag"", ""fields"": '
            '{""tagged_type"": [""fixtures"", ""article""], ""name"": ""world domination"", ""tagged_id"": 4}}, {""pk"": 1, '
            '""model"": ""fixtures.person"", ""fields"": {""name"": ""Django Reinhardt""}}, {""pk"": 2, ""model"": '
            '""fixtures.person"", ""fields"": {""name"": ""Stephane Grappelli""}}, {""pk"": 3, ""model"": ""fixtures.person"", '
            '""fields"": {""name"": ""Artist formerly known as \\""Prince\\""""}}, {""pk"": 1, ""model"": ""fixtures.visa"", '
            '""fields"": {""person"": [""Django Reinhardt""], ""permissions"": [[""add_user"", ""auth"", ""user""], '
            '[""change_user"", ""auth"", ""user""], [""delete_user"", ""auth"", ""user""]]}}, {""pk"": 2, ""model"": '
            '""fixtures.visa"", ""fields"": {""person"": [""Stephane Grappelli""], ""permissions"": [[""add_user"", ""auth"", '
            '""user""], [""delete_user"", ""auth"", ""user""]]}}, {""pk"": 3, ""model"": ""fixtures.visa"", ""fields"": {""person"":'
            ' [""Artist formerly known as \\""Prince\\""""], ""permissions"": [[""change_user"", ""auth"", ""user""]]}}, '
            '{""pk"": 1, ""model"": ""fixtures.book"", ""fields"": {""name"": ""Music for all ages"", ""authors"": [[""Artist '
            'formerly known as \\""Prince\\""""], [""Django Reinhardt""]]}}]',
            natural_foreign_keys=True
        )

        # Dump the current contents of the database as an XML fixture
        self._dumpdata_assert(
            ['fixtures'],
            '<?xml version=""1.0"" encoding=""utf-8""?><django-objects version=""1.0""><object pk=""1"" '
            'model=""fixtures.category""><field type=""CharField"" name=""title"">News Stories</field><field '
            'type=""TextField"" name=""description"">Latest news stories</field></object><object pk=""2"" '
            'model=""fixtures.article""><field type=""CharField"" name=""headline"">Poker on TV is great!</field><field '
            'type=""DateTimeField"" name=""pub_date"">2006-06-16T11:00:00</field></object><object pk=""3"" '
            'model=""fixtures.article""><field type=""CharField"" name=""headline"">Copyright is fine the way it '
            'is</field><field type=""DateTimeField"" name=""pub_date"">2006-06-16T14:00:00</field></object><object '
            'pk=""4"" model=""fixtures.article""><field type=""CharField"" name=""headline"">Django conquers world!'
            '</field><field type=""DateTimeField"" name=""pub_date"">2006-06-16T15:00:00</field></object><object '
            'pk=""5"" model=""fixtures.article""><field type=""CharField"" name=""headline"">XML identified as leading '
            'cause of cancer</field><field type=""DateTimeField"" name=""pub_date"">2006-06-16T16:00:00</field>'
            '</object><object pk=""1"" model=""fixtures.tag""><field type=""CharField"" name=""name"">copyright</field>'
            '<field to=""contenttypes.contenttype"" name=""tagged_type"" rel=""ManyToOneRel""><natural>fixtures'
            '</natural><natural>article</natural></field><field type=""PositiveIntegerField"" name=""tagged_id"">3'
            '</field></object><object pk=""2"" model=""fixtures.tag""><field type=""CharField"" name=""name"">legal'
            '</field><field to=""contenttypes.contenttype"" name=""tagged_type"" rel=""ManyToOneRel""><natural>'
            'fixtures</natural><natural>article</natural></field><field type=""PositiveIntegerField"" '
            'name=""tagged_id"">3</field></object><object pk=""3"" model=""fixtures.tag""><field type=""CharField"" '
            'name=""name"">django</field><field to=""contenttypes.contenttype"" name=""tagged_type"" '
            'rel=""ManyToOneRel""><natural>fixtures</natural><natural>article</natural></field><field '
            'type=""PositiveIntegerField"" name=""tagged_id"">4</field></object><object pk=""4"" model=""fixtures.tag"">'
            '<field type=""CharField"" name=""name"">world domination</field><field to=""contenttypes.contenttype"" '
            'name=""tagged_type"" rel=""ManyToOneRel""><natural>fixtures</natural><natural>article</natural></field>'
            '<field type=""PositiveIntegerField"" name=""tagged_id"">4</field></object><object pk=""1"" '
            'model=""fixtures.person""><field type=""CharField"" name=""name"">Django Reinhardt</field></object>'
            '<object pk=""2"" model=""fixtures.person""><field type=""CharField"" name=""name"">Stephane Grappelli'
            '</field></object><object pk=""3"" model=""fixtures.person""><field type=""CharField"" name=""name"">'
            'Artist formerly known as ""Prince""</field></object><object pk=""1"" model=""fixtures.visa""><field '
            'to=""fixtures.person"" name=""person"" rel=""ManyToOneRel""><natural>Django Reinhardt</natural></field>'
            '<field to=""auth.permission"" name=""permissions"" rel=""ManyToManyRel""><object><natural>add_user'
            '</natural><natural>auth</natural><natural>user</natural></object><object><natural>change_user'
            '</natural><natural>auth</natural><natural>user</natural></object><object><natural>delete_user'
            '</natural><natural>auth</natural><natural>user</natural></object></field></object><object pk=""2"" '
            'model=""fixtures.visa""><field to=""fixtures.person"" name=""person"" rel=""ManyToOneRel""><natural>Stephane'
            ' Grappelli</natural></field><field to=""auth.permission"" name=""permissions"" rel=""ManyToManyRel"">'
            '<object><natural>add_user</natural><natural>auth</natural><natural>user</natural></object><object>'
            '<natural>delete_user</natural><natural>auth</natural><natural>user</natural></object></field>'
            '</object><object pk=""3"" model=""fixtures.visa""><field to=""fixtures.person"" name=""person"" '
            'rel=""ManyToOneRel""><natural>Artist formerly known as ""Prince""</natural></field><field '
            'to=""auth.permission"" name=""permissions"" rel=""ManyToManyRel""><object><natural>change_user</natural>'
            '<natural>auth</natural><natural>user</natural></object></field></object><object pk=""1"" '
            'model=""fixtures.book""><field type=""CharField"" name=""name"">Music for all ages</field><field '
            'to=""fixtures.person"" name=""authors"" rel=""ManyToManyRel""><object><natural>Artist formerly known as '
            '""Prince""</natural></object><object><natural>Django Reinhardt</natural></object></field></object>'
            '</django-objects>',
            format='xml', natural_foreign_keys=True
        )

    def test_dumpdata_with_excludes(self):
        # Load fixture1 which has a site, two articles, and a category
        Site.objects.all().delete()
        management.call_command('loaddata', 'fixture1.json', verbosity=0)

        # Excluding fixtures app should only leave sites
        self._dumpdata_assert(
            ['sites', 'fixtures'],
            '[{""pk"": 1, ""model"": ""sites.site"", ""fields"": {""domain"": ""example.com"", ""name"": ""example.com""}}]',
            exclude_list=['fixtures'],
        )

        # Excluding fixtures.Article/Book should leave fixtures.Category
        self._dumpdata_assert(
            ['sites', 'fixtures'],
            '[{""pk"": 1, ""model"": ""sites.site"", ""fields"": {""domain"": ""example.com"", ""name"": ""example.com""}}, '
            '{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}]',
            exclude_list=['fixtures.Article', 'fixtures.Book']
        )

        # Excluding fixtures and fixtures.Article/Book should be a no-op
        self._dumpdata_assert(
            ['sites', 'fixtures'],
            '[{""pk"": 1, ""model"": ""sites.site"", ""fields"": {""domain"": ""example.com"", ""name"": ""example.com""}}, '
            '{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}]',
            exclude_list=['fixtures.Article', 'fixtures.Book']
        )

        # Excluding sites and fixtures.Article/Book should only leave fixtures.Category
        self._dumpdata_assert(
            ['sites', 'fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}]',
            exclude_list=['fixtures.Article', 'fixtures.Book', 'sites']
        )

        # Excluding a bogus app should throw an error
        with self.assertRaisesMessage(management.CommandError, ""No installed app with label 'foo_app'.""):
            self._dumpdata_assert(['fixtures', 'sites'], '', exclude_list=['foo_app'])

        # Excluding a bogus model should throw an error
        with self.assertRaisesMessage(management.CommandError, ""Unknown model: fixtures.FooModel""):
            self._dumpdata_assert(['fixtures', 'sites'], '', exclude_list=['fixtures.FooModel'])

    @unittest.skipIf(sys.platform == 'win32', ""Windows doesn't support '?' in filenames."")
    def test_load_fixture_with_special_characters(self):
        management.call_command('loaddata', 'fixture_with[special]chars', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'How To Deal With Special Characters',
        )

    def test_dumpdata_with_filtering_manager(self):
        spy1 = Spy.objects.create(name='Paul')
        spy2 = Spy.objects.create(name='Alex', cover_blown=True)
        self.assertSequenceEqual(Spy.objects.all(), [spy1])
        # Use the default manager
        self._dumpdata_assert(
            ['fixtures.Spy'],
            '[{""pk"": %d, ""model"": ""fixtures.spy"", ""fields"": {""cover_blown"": false}}]' % spy1.pk
        )
        # Dump using Django's base manager. Should return all objects,
        # even those normally filtered by the manager
        self._dumpdata_assert(
            ['fixtures.Spy'],
            '[{""pk"": %d, ""model"": ""fixtures.spy"", ""fields"": {""cover_blown"": true}}, {""pk"": %d, ""model"": '
            '""fixtures.spy"", ""fields"": {""cover_blown"": false}}]' % (spy2.pk, spy1.pk),
            use_base_manager=True
        )

    def test_dumpdata_with_pks(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        management.call_command('loaddata', 'fixture2.json', verbosity=0)
        self._dumpdata_assert(
            ['fixtures.Article'],
            '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
            '""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": {""headline"": '
            '""Copyright is fine the way it is"", ""pub_date"": ""2006-06-16T14:00:00""}}]',
            primary_keys='2,3'
        )

        self._dumpdata_assert(
            ['fixtures.Article'],
            '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
            '""pub_date"": ""2006-06-16T12:00:00""}}]',
            primary_keys='2'
        )

        with self.assertRaisesMessage(management.CommandError, ""You can only use --pks option with one model""):
            self._dumpdata_assert(
                ['fixtures'],
                '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
                '""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
                '{""headline"": ""Copyright is fine the way it is"", ""pub_date"": ""2006-06-16T14:00:00""}}]',
                primary_keys='2,3'
            )

        with self.assertRaisesMessage(management.CommandError, ""You can only use --pks option with one model""):
            self._dumpdata_assert(
                '',
                '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
                '""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
                '{""headline"": ""Copyright is fine the way it is"", ""pub_date"": ""2006-06-16T14:00:00""}}]',
                primary_keys='2,3'
            )

        with self.assertRaisesMessage(management.CommandError, ""You can only use --pks option with one model""):
            self._dumpdata_assert(
                ['fixtures.Article', 'fixtures.category'],
                '[{""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place on ESPN"", '
                '""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
                '{""headline"": ""Copyright is fine the way it is"", ""pub_date"": ""2006-06-16T14:00:00""}}]',
                primary_keys='2,3'
            )

    def test_dumpdata_with_uuid_pks(self):
        m1 = PrimaryKeyUUIDModel.objects.create()
        m2 = PrimaryKeyUUIDModel.objects.create()
        output = StringIO()
        management.call_command(
            'dumpdata', 'fixtures.PrimaryKeyUUIDModel', '--pks', ', '.join([str(m1.id), str(m2.id)]),
            stdout=output,
        )
        result = output.getvalue()
        self.assertIn('""pk"": ""%s""' % m1.id, result)
        self.assertIn('""pk"": ""%s""' % m2.id, result)

    def test_dumpdata_with_file_output(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]',
            filename='dumpdata.json'
        )

    def test_dumpdata_with_file_gzip_output(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]',
            filename='dumpdata.json.gz',
        )

    @unittest.skipUnless(HAS_BZ2, 'No bz2 library detected.')
    def test_dumpdata_with_file_bz2_output(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]',
            filename='dumpdata.json.bz2',
        )

    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')
    def test_dumpdata_with_file_lzma_output(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]',
            filename='dumpdata.json.lzma',
        )

    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')
    def test_dumpdata_with_file_xz_output(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]',
            filename='dumpdata.json.xz',
        )

    def test_dumpdata_with_file_zip_output(self):
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        msg = ""Unsupported file extension (.zip). Fixtures saved in 'dumpdata.json'.""
        with self.assertWarnsMessage(RuntimeWarning, msg):
            self._dumpdata_assert(
                ['fixtures'],
                '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
                '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
                'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
                '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}]',
                filename='dumpdata.json.zip',
            )

    def test_dumpdata_progressbar(self):
        """"""
        Dumpdata shows a progress bar on the command line when --output is set,
        stdout is a tty, and verbosity > 0.
        """"""
        management.call_command('loaddata', 'fixture1.json', verbosity=0)
        new_io = StringIO()
        new_io.isatty = lambda: True
        with NamedTemporaryFile() as file:
            options = {
                'format': 'json',
                'stdout': new_io,
                'stderr': new_io,
                'output': file.name,
            }
            management.call_command('dumpdata', 'fixtures', **options)
            self.assertTrue(new_io.getvalue().endswith('[' + '.' * ProgressBar.progress_width + ']\n'))

            # Test no progress bar when verbosity = 0
            options['verbosity'] = 0
            new_io = StringIO()
            new_io.isatty = lambda: True
            options.update({'stdout': new_io, 'stderr': new_io})
            management.call_command('dumpdata', 'fixtures', **options)
            self.assertEqual(new_io.getvalue(), '')

    def test_dumpdata_proxy_without_concrete(self):
        """"""
        A warning is displayed if a proxy model is dumped without its concrete
        parent.
        """"""
        ProxySpy.objects.create(name='Paul')
        msg = ""fixtures.ProxySpy is a proxy model and won't be serialized.""
        with self.assertWarnsMessage(ProxyModelWarning, msg):
            self._dumpdata_assert(['fixtures.ProxySpy'], '[]')

    def test_dumpdata_proxy_with_concrete(self):
        """"""
        A warning isn't displayed if a proxy model is dumped with its concrete
        parent.
        """"""
        spy = ProxySpy.objects.create(name='Paul')

        with warnings.catch_warnings(record=True) as warning_list:
            warnings.simplefilter('always')
            self._dumpdata_assert(
                ['fixtures.ProxySpy', 'fixtures.Spy'],
                '[{""pk"": %d, ""model"": ""fixtures.spy"", ""fields"": {""cover_blown"": false}}]' % spy.pk
            )
        self.assertEqual(len(warning_list), 0)

    def test_compress_format_loading(self):
        # Load fixture 4 (compressed), using format specification
        management.call_command('loaddata', 'fixture4.json', verbosity=0)
        self.assertEqual(Article.objects.get().headline, 'Django pets kitten')

    def test_compressed_specified_loading(self):
        # Load fixture 5 (compressed), using format *and* compression specification
        management.call_command('loaddata', 'fixture5.json.zip', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'WoW subscribers now outnumber readers',
        )

    def test_compressed_loading(self):
        # Load fixture 5 (compressed), only compression specification
        management.call_command('loaddata', 'fixture5.zip', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'WoW subscribers now outnumber readers',
        )

    def test_compressed_loading_gzip(self):
        management.call_command('loaddata', 'fixture5.json.gz', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'WoW subscribers now outnumber readers',
        )

    @unittest.skipUnless(HAS_BZ2, 'No bz2 library detected.')
    def test_compressed_loading_bz2(self):
        management.call_command('loaddata', 'fixture5.json.bz2', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'WoW subscribers now outnumber readers',
        )

    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')
    def test_compressed_loading_lzma(self):
        management.call_command('loaddata', 'fixture5.json.lzma', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'WoW subscribers now outnumber readers',
        )

    @unittest.skipUnless(HAS_LZMA, 'No lzma library detected.')
    def test_compressed_loading_xz(self):
        management.call_command('loaddata', 'fixture5.json.xz', verbosity=0)
        self.assertEqual(
            Article.objects.get().headline,
            'WoW subscribers now outnumber readers',
        )

    def test_ambiguous_compressed_fixture(self):
        # The name ""fixture5"" is ambiguous, so loading raises an error.
        msg = ""Multiple fixtures named 'fixture5'""
        with self.assertRaisesMessage(management.CommandError, msg):
            management.call_command('loaddata', 'fixture5', verbosity=0)

    def test_db_loading(self):
        # Load db fixtures 1 and 2. These will load using the 'default' database identifier implicitly
        management.call_command('loaddata', 'db_fixture_1', verbosity=0)
        management.call_command('loaddata', 'db_fixture_2', verbosity=0)
        self.assertSequenceEqual(
            Article.objects.values_list('headline', flat=True),
            [
                'Who needs more than one database?',
                'Who needs to use compressed data?',
            ],
        )

    def test_loaddata_error_message(self):
        """"""
        Loading a fixture which contains an invalid object outputs an error
        message which contains the pk of the object that triggered the error.
        """"""
        # MySQL needs a little prodding to reject invalid data.
        # This won't affect other tests because the database connection
        # is closed at the end of each test.
        if connection.vendor == 'mysql':
            with connection.cursor() as cursor:
                cursor.execute(""SET sql_mode = 'TRADITIONAL'"")
        msg = 'Could not load fixtures.Article(pk=1):'
        with self.assertRaisesMessage(IntegrityError, msg):
            management.call_command('loaddata', 'invalid.json', verbosity=0)

    @unittest.skipUnless(connection.vendor == 'postgresql', 'psycopg2 prohibits null characters in data.')
    def test_loaddata_null_characters_on_postgresql(self):
        msg = (
            'Could not load fixtures.Article(pk=2): '
            'A string literal cannot contain NUL (0x00) characters.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            management.call_command('loaddata', 'null_character_in_field_value.json')

    def test_loaddata_app_option(self):
        with self.assertRaisesMessage(CommandError, ""No fixture named 'db_fixture_1' found.""):
            management.call_command('loaddata', 'db_fixture_1', verbosity=0, app_label=""someotherapp"")
        self.assertQuerysetEqual(Article.objects.all(), [])
        management.call_command('loaddata', 'db_fixture_1', verbosity=0, app_label=""fixtures"")
        self.assertEqual(
            Article.objects.get().headline,
            'Who needs more than one database?',
        )

    def test_loaddata_verbosity_three(self):
        output = StringIO()
        management.call_command('loaddata', 'fixture1.json', verbosity=3, stdout=output, stderr=output)
        command_output = output.getvalue()
        self.assertIn(
            ""\rProcessed 1 object(s).\rProcessed 2 object(s).""
            ""\rProcessed 3 object(s).\rProcessed 4 object(s).\n"",
            command_output
        )

    def test_loading_using(self):
        # Load db fixtures 1 and 2. These will load using the 'default' database identifier explicitly
        management.call_command('loaddata', 'db_fixture_1', verbosity=0, database='default')
        management.call_command('loaddata', 'db_fixture_2', verbosity=0, database='default')
        self.assertSequenceEqual(
            Article.objects.values_list('headline', flat=True),
            [
                'Who needs more than one database?',
                'Who needs to use compressed data?',
            ],
        )

    def test_unmatched_identifier_loading(self):
        # Try to load db fixture 3. This won't load because the database identifier doesn't match
        with self.assertRaisesMessage(CommandError, ""No fixture named 'db_fixture_3' found.""):
            management.call_command('loaddata', 'db_fixture_3', verbosity=0)
        with self.assertRaisesMessage(CommandError, ""No fixture named 'db_fixture_3' found.""):
            management.call_command('loaddata', 'db_fixture_3', verbosity=0, database='default')
        self.assertQuerysetEqual(Article.objects.all(), [])

    def test_output_formats(self):
        # Load back in fixture 1, we need the articles from it
        management.call_command('loaddata', 'fixture1', verbosity=0)

        # Try to load fixture 6 using format discovery
        management.call_command('loaddata', 'fixture6', verbosity=0)
        self.assertQuerysetEqual(Tag.objects.all(), [
            '<Tag: <Article: Time to reform copyright> tagged ""copyright"">',
            '<Tag: <Article: Time to reform copyright> tagged ""law"">'
        ], transform=repr, ordered=False)

        # Dump the current contents of the database as a JSON fixture
        self._dumpdata_assert(
            ['fixtures'],
            '[{""pk"": 1, ""model"": ""fixtures.category"", ""fields"": {""description"": ""Latest news stories"", ""title"": '
            '""News Stories""}}, {""pk"": 2, ""model"": ""fixtures.article"", ""fields"": {""headline"": ""Poker has no place '
            'on ESPN"", ""pub_date"": ""2006-06-16T12:00:00""}}, {""pk"": 3, ""model"": ""fixtures.article"", ""fields"": '
            '{""headline"": ""Time to reform copyright"", ""pub_date"": ""2006-06-16T13:00:00""}}, {""pk"": 1, ""model"": '
            '""fixtures.tag"", ""fields"": {""tagged_type"": [""fixtures"", ""article""], ""name"": ""copyright"", ""tagged_id"": '
            '3}}, {""pk"": 2, ""model"": ""fixtures.tag"", ""fields"": {""tagged_type"": [""fixtures"", ""article""], ""name"": '
            '""law"", ""tagged_id"": 3}}, {""pk"": 1, ""model"": ""fixtures.person"", ""fields"": {""name"": ""Django '
            'Reinhardt""}}, {""pk"": 2, ""model"": ""fixtures.person"", ""fields"": {""name"": ""Stephane Grappelli""}}, '
            '{""pk"": 3, ""model"": ""fixtures.person"", ""fields"": {""name"": ""Prince""}}]',
            natural_foreign_keys=True
        )

        # Dump the current contents of the database as an XML fixture
        self._dumpdata_assert(
            ['fixtures'],
            '<?xml version=""1.0"" encoding=""utf-8""?><django-objects version=""1.0""><object pk=""1"" '
            'model=""fixtures.category""><field type=""CharField"" name=""title"">News Stories</field><field '
            'type=""TextField"" name=""description"">Latest news stories</field></object><object pk=""2"" '
            'model=""fixtures.article""><field type=""CharField"" name=""headline"">Poker has no place on ESPN</field>'
            '<field type=""DateTimeField"" name=""pub_date"">2006-06-16T12:00:00</field></object><object pk=""3"" '
            'model=""fixtures.article""><field type=""CharField"" name=""headline"">Time to reform copyright</field>'
            '<field type=""DateTimeField"" name=""pub_date"">2006-06-16T13:00:00</field></object><object pk=""1"" '
            'model=""fixtures.tag""><field type=""CharField"" name=""name"">copyright</field><field '
            'to=""contenttypes.contenttype"" name=""tagged_type"" rel=""ManyToOneRel""><natural>fixtures</natural>'
            '<natural>article</natural></field><field type=""PositiveIntegerField"" name=""tagged_id"">3</field>'
            '</object><object pk=""2"" model=""fixtures.tag""><field type=""CharField"" name=""name"">law</field><field '
            'to=""contenttypes.contenttype"" name=""tagged_type"" rel=""ManyToOneRel""><natural>fixtures</natural>'
            '<natural>article</natural></field><field type=""PositiveIntegerField"" name=""tagged_id"">3</field>'
            '</object><object pk=""1"" model=""fixtures.person""><field type=""CharField"" name=""name"">Django Reinhardt'
            '</field></object><object pk=""2"" model=""fixtures.person""><field type=""CharField"" name=""name"">Stephane '
            'Grappelli</field></object><object pk=""3"" model=""fixtures.person""><field type=""CharField"" name=""name"">'
            'Prince</field></object></django-objects>',
            format='xml', natural_foreign_keys=True
        )

    def test_loading_with_exclude_app(self):
        Site.objects.all().delete()
        management.call_command('loaddata', 'fixture1', exclude=['fixtures'], verbosity=0)
        self.assertFalse(Article.objects.exists())
        self.assertFalse(Category.objects.exists())
        self.assertEqual(Site.objects.get().domain, 'example.com')

    def test_loading_with_exclude_model(self):
        Site.objects.all().delete()
        management.call_command('loaddata', 'fixture1', exclude=['fixtures.Article'], verbosity=0)
        self.assertFalse(Article.objects.exists())
        self.assertEqual(Category.objects.get().title, 'News Stories')
        self.assertEqual(Site.objects.get().domain, 'example.com')

    def test_exclude_option_errors(self):
        """"""Excluding a bogus app or model should raise an error.""""""
        msg = ""No installed app with label 'foo_app'.""
        with self.assertRaisesMessage(management.CommandError, msg):
            management.call_command('loaddata', 'fixture1', exclude=['foo_app'], verbosity=0)

        msg = ""Unknown model: fixtures.FooModel""
        with self.assertRaisesMessage(management.CommandError, msg):
            management.call_command('loaddata', 'fixture1', exclude=['fixtures.FooModel'], verbosity=0)

    def test_stdin_without_format(self):
        """"""Reading from stdin raises an error if format isn't specified.""""""
        msg = '--format must be specified when reading from stdin.'
        with self.assertRaisesMessage(management.CommandError, msg):
            management.call_command('loaddata', '-', verbosity=0)

    def test_loading_stdin(self):
        """"""Loading fixtures from stdin with json and xml.""""""
        tests_dir = os.path.dirname(__file__)
        fixture_json = os.path.join(tests_dir, 'fixtures', 'fixture1.json')
        fixture_xml = os.path.join(tests_dir, 'fixtures', 'fixture3.xml')

        with mock.patch('django.core.management.commands.loaddata.sys.stdin', open(fixture_json)):
            management.call_command('loaddata', '--format=json', '-', verbosity=0)
            self.assertSequenceEqual(
                Article.objects.values_list('headline', flat=True),
                ['Time to reform copyright', 'Poker has no place on ESPN'],
            )

        with mock.patch('django.core.management.commands.loaddata.sys.stdin', open(fixture_xml)):
            management.call_command('loaddata', '--format=xml', '-', verbosity=0)
            self.assertSequenceEqual(
                Article.objects.values_list('headline', flat=True),
                [
                    'XML identified as leading cause of cancer',
                    'Time to reform copyright',
                    'Poker on TV is great!',
                ],
            )",1,334 2000 40 2001 44 2002 41 58 348 2003 40 2004 41 58 2005 46 2006 40 41 2007 46 2008 46 2009 40 41 46 353 40 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 93 44 41 621 2004 46 2017 40 91 648 93 44 648 648 648 648 41 621 2004 46 2017 40 91 648 93 44 648 648 41 621 2004 46 2017 40 91 648 93 44 648 648 648 41 621 2004 46 2017 40 91 648 44 648 93 44 648 648 648 648 41 621 2004 46 2017 40 91 648 44 648 93 44 40 648 648 648 41 41 621 2004 46 2017 40 91 648 44 648 93 44 648 648 648 648 41 621 621 2004 46 2017 40 91 648 44 648 93 44 648 648 648 648 41 621 2004 46 2017 40 91 648 93 44 648 648 648 648 41 621 2004 46 2017 40 91 648 44 648 93 44 648 648 648 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 44 648 44 93 44 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 44 648 44 648 44 93 44 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2018 40 2019 46 2008 46 2009 40 41 44 91 648 44 648 44 93 44 2020 61 2021 44 2022 61 302 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2018 40 2019 46 2008 46 2009 40 41 44 91 648 44 648 44 648 44 648 44 93 44 2020 61 2021 44 2022 61 302 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2018 40 2023 46 2008 46 2009 40 41 44 91 648 44 648 44 648 93 44 2020 61 2021 44 2022 61 302 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2018 40 2023 46 2008 46 2009 40 41 44 91 648 44 648 44 648 93 44 2020 61 2021 44 2022 61 302 41 621 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 44 648 44 648 44 93 44 41 621 2004 46 2017 40 91 648 93 44 648 41 621 2004 46 2017 40 91 648 93 44 648 648 44 2024 61 304 41 621 2004 46 2017 40 91 648 93 44 648 648 648 44 2025 61 304 41 621 2004 46 2017 40 91 648 93 44 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2024 61 304 41 621 2004 46 2017 40 91 648 93 44 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2026 61 648 44 2024 61 304 41 348 2027 40 2004 41 58 621 2007 46 2008 46 2009 40 41 46 353 40 41 2010 46 2011 40 648 44 648 44 2012 61 1500 41 621 2004 46 2017 40 91 648 44 648 93 44 648 44 2028 61 91 648 93 44 41 621 2004 46 2017 40 91 648 44 648 93 44 648 648 648 44 2028 61 91 648 44 648 93 41 621 2004 46 2017 40 91 648 44 648 93 44 648 648 648 44 2028 61 91 648 44 648 93 41 621 2004 46 2017 40 91 648 44 648 93 44 648 648 44 2028 61 91 648 44 648 44 648 93 41 621 497 2004 46 2029 40 2010 46 2030 44 648 41 58 2004 46 2017 40 91 648 44 648 93 44 648 44 2028 61 91 648 93 41 621 497 2004 46 2029 40 2010 46 2030 44 648 41 58 2004 46 2017 40 91 648 44 648 93 44 648 44 2028 61 91 648 93 41 64 2031 46 2032 40 2033 46 2034 614 648 44 648 41 348 2035 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 348 2039 40 2004 41 58 2040 61 2041 46 2008 46 2042 40 2043 61 648 41 2044 61 2041 46 2008 46 2042 40 2043 61 648 44 2045 61 304 41 2004 46 2013 40 2041 46 2008 46 2009 40 41 44 91 2040 93 41 621 2004 46 2017 40 91 648 93 44 648 37 2040 46 2046 41 621 621 2004 46 2017 40 91 648 93 44 648 648 37 40 2044 46 2046 44 2040 46 2046 41 44 2047 61 304 41 348 2048 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2017 40 91 648 93 44 648 648 648 44 2049 61 648 41 2004 46 2017 40 91 648 93 44 648 648 44 2049 61 648 41 497 2004 46 2029 40 2010 46 2030 44 648 41 58 2004 46 2017 40 91 648 93 44 648 648 648 44 2049 61 648 41 497 2004 46 2029 40 2010 46 2030 44 648 41 58 2004 46 2017 40 648 44 648 648 648 44 2049 61 648 41 497 2004 46 2029 40 2010 46 2030 44 648 41 58 2004 46 2017 40 91 648 44 648 93 44 648 648 648 44 2049 61 648 41 348 2050 40 2004 41 58 2051 61 2052 46 2008 46 2042 40 41 2053 61 2052 46 2008 46 2042 40 41 2054 61 2055 40 41 2010 46 2011 40 648 44 648 44 648 44 648 46 2056 40 91 2057 40 2051 46 2058 41 44 2057 40 2053 46 2058 41 93 41 44 2059 61 2054 44 41 2060 61 2054 46 2061 40 41 2004 46 2062 40 648 37 2051 46 2058 44 2060 41 2004 46 2062 40 648 37 2053 46 2058 44 2060 41 348 2063 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2017 40 91 648 93 44 648 648 648 648 44 2064 61 648 41 348 2065 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2017 40 91 648 93 44 648 648 648 648 44 2064 61 648 44 41 64 2031 46 2066 40 2067 44 648 41 348 2068 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2017 40 91 648 93 44 648 648 648 648 44 2064 61 648 44 41 64 2031 46 2066 40 2069 44 648 41 348 2070 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2017 40 91 648 93 44 648 648 648 648 44 2064 61 648 44 41 64 2031 46 2066 40 2069 44 648 41 348 2071 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2017 40 91 648 93 44 648 648 648 648 44 2064 61 648 44 41 348 2072 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2073 61 648 497 2004 46 2074 40 2075 44 2073 41 58 2004 46 2017 40 91 648 93 44 648 648 648 648 44 2064 61 648 44 41 348 2076 40 2004 41 58 648 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2077 61 2055 40 41 2077 46 2078 61 409 58 304 497 2079 40 41 311 2080 58 2081 61 123 648 58 648 44 648 58 2077 44 648 58 2077 44 648 58 2080 46 2043 44 125 2010 46 2011 40 648 44 648 44 638 2081 41 2004 46 2082 40 2077 46 2061 40 41 46 2083 40 648 43 648 42 2084 46 2085 43 648 41 41 621 2081 91 648 93 61 1500 2077 61 2055 40 41 2077 46 2078 61 409 58 304 2081 46 2086 40 123 648 58 2077 44 648 58 2077 125 41 2010 46 2011 40 648 44 648 44 638 2081 41 2004 46 2036 40 2077 46 2061 40 41 44 648 41 348 2087 40 2004 41 58 648 2088 46 2008 46 2042 40 2043 61 648 41 2073 61 648 497 2004 46 2074 40 2089 44 2073 41 58 2004 46 2017 40 91 648 93 44 648 41 348 2090 40 2004 41 58 648 2091 61 2088 46 2008 46 2042 40 2043 61 648 41 497 2092 46 2093 40 2094 61 304 41 311 2095 58 2092 46 2096 40 648 41 2004 46 2017 40 91 648 44 648 93 44 648 37 2091 46 2046 41 2004 46 2036 40 2097 40 2095 41 44 1500 41 348 2098 40 2004 41 58 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 41 348 2099 40 2004 41 58 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 348 2100 40 2004 41 58 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 348 2101 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 64 2031 46 2066 40 2067 44 648 41 348 2102 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 64 2031 46 2066 40 2069 44 648 41 348 2103 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 64 2031 46 2066 40 2069 44 648 41 348 2104 40 2004 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 348 2105 40 2004 41 58 621 2073 61 648 497 2004 46 2029 40 2010 46 2030 44 2073 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 348 2106 40 2004 41 58 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 44 93 44 41 348 2107 40 2004 41 58 648 621 621 621 392 2108 46 2109 614 648 58 497 2108 46 2110 40 41 311 2110 58 2110 46 2111 40 648 41 2073 61 648 497 2004 46 2029 40 2112 44 2073 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 64 2031 46 2066 40 2108 46 2109 614 648 44 648 41 348 2113 40 2004 41 58 2073 61 40 648 648 41 497 2004 46 2029 40 2114 44 2073 41 58 2010 46 2011 40 648 44 648 41 348 2115 40 2004 41 58 497 2004 46 2029 40 2030 44 648 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 44 2116 61 648 41 2004 46 2018 40 2014 46 2008 46 2009 40 41 44 91 93 41 2010 46 2011 40 648 44 648 44 2012 61 1500 44 2116 61 648 41 2004 46 2036 40 2014 46 2008 46 2037 40 41 46 2038 44 648 44 41 348 2117 40 2004 41 58 2054 61 2055 40 41 2010 46 2011 40 648 44 648 44 2012 61 1502 44 2059 61 2054 44 2118 61 2054 41 2119 61 2054 46 2061 40 41 2004 46 2062 40 648 648 44 2119 41 348 2120 40 2004 41 58 621 2010 46 2011 40 648 44 648 44 2012 61 1500 44 2121 61 648 41 2010 46 2011 40 648 44 648 44 2012 61 1500 44 2121 61 648 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 44 93 44 41 348 2122 40 2004 41 58 621 497 2004 46 2029 40 2030 44 648 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 497 2004 46 2029 40 2030 44 648 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 44 2121 61 648 41 2004 46 2018 40 2014 46 2008 46 2009 40 41 44 91 93 41 348 2123 40 2004 41 58 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 621 2010 46 2011 40 648 44 648 44 2012 61 1500 41 2004 46 2018 40 2019 46 2008 46 2009 40 41 44 91 648 44 648 93 44 2020 61 2021 44 2022 61 302 41 621 2004 46 2017 40 91 648 93 44 648 648 648 648 648 648 648 648 648 44 2024 61 304 41 621 2004 46 2017 40 91 648 93 44 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2026 61 648 44 2024 61 304 41 348 2124 40 2004 41 58 2007 46 2008 46 2009 40 41 46 353 40 41 2010 46 2011 40 648 44 648 44 2125 61 91 648 93 44 2012 61 1500 41 2004 46 2126 40 2014 46 2008 46 2127 40 41 41 2004 46 2126 40 2128 46 2008 46 2127 40 41 41 2004 46 2036 40 2007 46 2008 46 2037 40 41 46 2129 44 648 41 348 2130 40 2004 41 58 2007 46 2008 46 2009 40 41 46 353 40 41 2010 46 2011 40 648 44 648 44 2125 61 91 648 93 44 2012 61 1500 41 2004 46 2126 40 2014 46 2008 46 2127 40 41 41 2004 46 2036 40 2128 46 2008 46 2037 40 41 46 2131 44 648 41 2004 46 2036 40 2007 46 2008 46 2037 40 41 46 2129 44 648 41 348 2132 40 2004 41 58 648 2073 61 648 497 2004 46 2029 40 2010 46 2030 44 2073 41 58 2010 46 2011 40 648 44 648 44 2125 61 91 648 93 44 2012 61 1500 41 2073 61 648 497 2004 46 2029 40 2010 46 2030 44 2073 41 58 2010 46 2011 40 648 44 648 44 2125 61 91 648 93 44 2012 61 1500 41 348 2133 40 2004 41 58 648 2073 61 648 497 2004 46 2029 40 2010 46 2030 44 2073 41 58 2010 46 2011 40 648 44 648 44 2012 61 1500 41 348 2134 40 2004 41 58 648 2135 61 2136 46 2137 46 2138 40 2139 41 2140 61 2136 46 2137 46 2056 40 2135 44 648 44 648 41 2141 61 2136 46 2137 46 2056 40 2135 44 648 44 648 41 497 2142 46 2143 40 648 44 2144 40 2140 41 41 58 2010 46 2011 40 648 44 648 44 648 44 2012 61 1500 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 93 44 41 497 2142 46 2143 40 648 44 2144 40 2141 41 41 58 2010 46 2011 40 648 44 648 44 648 44 2012 61 1500 41 2004 46 2013 40 2014 46 2008 46 2015 40 648 44 2016 61 304 41 44 91 648 44 648 44 648 44 93 44 41 
131541,Python,"class ClientTest(TestCase):

    @classmethod
    def setUpTestData(cls):
        cls.u1 = User.objects.create_user(username='testclient', password='password')
        cls.u2 = User.objects.create_user(username='inactive', password='password', is_active=False)

    def test_get_view(self):
        ""GET a view""
        # The data is ignored, but let's check it doesn't crash the system
        # anyway.
        data = {'var': '\xf2'}
        response = self.client.get('/get_view/', data)

        # Check some response details
        self.assertContains(response, 'This is a test')
        self.assertEqual(response.context['var'], '\xf2')
        self.assertEqual(response.templates[0].name, 'GET Template')

    def test_query_string_encoding(self):
        # WSGI requires latin-1 encoded strings.
        response = self.client.get('/get_view/?var=1\ufffd')
        self.assertEqual(response.context['var'], '1\ufffd')

    def test_get_data_none(self):
        msg = (
            ""Cannot encode None for key 'value' in a query string. Did you ""
            ""mean to pass an empty string or omit the value?""
        )
        with self.assertRaisesMessage(TypeError, msg):
            self.client.get('/get_view/', {'value': None})

    def test_get_post_view(self):
        ""GET a view that normally expects POSTs""
        response = self.client.get('/post_view/', {})

        # Check some response details
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.templates[0].name, 'Empty GET Template')
        self.assertTemplateUsed(response, 'Empty GET Template')
        self.assertTemplateNotUsed(response, 'Empty POST Template')

    def test_empty_post(self):
        ""POST an empty dictionary to a view""
        response = self.client.post('/post_view/', {})

        # Check some response details
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.templates[0].name, 'Empty POST Template')
        self.assertTemplateNotUsed(response, 'Empty GET Template')
        self.assertTemplateUsed(response, 'Empty POST Template')

    def test_post(self):
        ""POST some data to a view""
        post_data = {
            'value': 37
        }
        response = self.client.post('/post_view/', post_data)

        # Check some response details
        self.assertContains(response, 'Data received')
        self.assertEqual(response.context['data'], '37')
        self.assertEqual(response.templates[0].name, 'POST Template')

    def test_post_data_none(self):
        msg = (
            ""Cannot encode None for key 'value' as POST data. Did you mean ""
            ""to pass an empty string or omit the value?""
        )
        with self.assertRaisesMessage(TypeError, msg):
            self.client.post('/post_view/', {'value': None})

    def test_json_serialization(self):
        """"""The test client serializes JSON data.""""""
        methods = ('post', 'put', 'patch', 'delete')
        tests = (
            ({'value': 37}, {'value': 37}),
            ([37, True], [37, True]),
            ((37, False), [37, False]),
        )
        for method in methods:
            with self.subTest(method=method):
                for data, expected in tests:
                    with self.subTest(data):
                        client_method = getattr(self.client, method)
                        method_name = method.upper()
                        response = client_method('/json_view/', data, content_type='application/json')
                        self.assertContains(response, 'Viewing %s page.' % method_name)
                        self.assertEqual(response.context['data'], expected)

    def test_json_encoder_argument(self):
        """"""The test Client accepts a json_encoder.""""""
        mock_encoder = mock.MagicMock()
        mock_encoding = mock.MagicMock()
        mock_encoder.return_value = mock_encoding
        mock_encoding.encode.return_value = '{""value"": 37}'

        client = self.client_class(json_encoder=mock_encoder)
        # Vendored tree JSON content types are accepted.
        client.post('/json_view/', {'value': 37}, content_type='application/vnd.api+json')
        self.assertTrue(mock_encoder.called)
        self.assertTrue(mock_encoding.encode.called)

    def test_put(self):
        response = self.client.put('/put_view/', {'foo': 'bar'})
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.templates[0].name, 'PUT Template')
        self.assertEqual(response.context['data'], ""{'foo': 'bar'}"")
        self.assertEqual(response.context['Content-Length'], '14')

    def test_trace(self):
        """"""TRACE a view""""""
        response = self.client.trace('/trace_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['method'], 'TRACE')
        self.assertEqual(response.templates[0].name, 'TRACE Template')

    def test_response_headers(self):
        ""Check the value of HTTP headers returned in a response""
        response = self.client.get(""/header_view/"")

        self.assertEqual(response.headers['X-DJANGO-TEST'], 'Slartibartfast')

    def test_response_attached_request(self):
        """"""
        The returned response has a ``request`` attribute with the originating
        environ dict and a ``wsgi_request`` with the originating WSGIRequest.
        """"""
        response = self.client.get(""/header_view/"")

        self.assertTrue(hasattr(response, 'request'))
        self.assertTrue(hasattr(response, 'wsgi_request'))
        for key, value in response.request.items():
            self.assertIn(key, response.wsgi_request.environ)
            self.assertEqual(response.wsgi_request.environ[key], value)

    def test_response_resolver_match(self):
        """"""
        The response contains a ResolverMatch instance.
        """"""
        response = self.client.get('/header_view/')
        self.assertTrue(hasattr(response, 'resolver_match'))

    def test_response_resolver_match_redirect_follow(self):
        """"""
        The response ResolverMatch instance contains the correct
        information when following redirects.
        """"""
        response = self.client.get('/redirect_view/', follow=True)
        self.assertEqual(response.resolver_match.url_name, 'get_view')

    def test_response_resolver_match_regular_view(self):
        """"""
        The response ResolverMatch instance contains the correct
        information when accessing a regular view.
        """"""
        response = self.client.get('/get_view/')
        self.assertEqual(response.resolver_match.url_name, 'get_view')

    @modify_settings(MIDDLEWARE={'prepend': 'test_client.tests.middleware_urlconf'})
    def test_response_resolver_match_middleware_urlconf(self):
        response = self.client.get('/middleware_urlconf_view/')
        self.assertEqual(response.resolver_match.url_name, 'middleware_urlconf_view')

    def test_raw_post(self):
        ""POST raw data (with a content type) to a view""
        test_doc = """"""<?xml version=""1.0"" encoding=""utf-8""?>
        <library><book><title>Blink</title><author>Malcolm Gladwell</author></book></library>
        """"""
        response = self.client.post('/raw_post_view/', test_doc, content_type='text/xml')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.templates[0].name, ""Book template"")
        self.assertEqual(response.content, b""Blink - Malcolm Gladwell"")

    def test_insecure(self):
        ""GET a URL through http""
        response = self.client.get('/secure_view/', secure=False)
        self.assertFalse(response.test_was_secure_request)
        self.assertEqual(response.test_server_port, '80')

    def test_secure(self):
        ""GET a URL through https""
        response = self.client.get('/secure_view/', secure=True)
        self.assertTrue(response.test_was_secure_request)
        self.assertEqual(response.test_server_port, '443')

    def test_redirect(self):
        ""GET a URL that redirects elsewhere""
        response = self.client.get('/redirect_view/')
        self.assertRedirects(response, '/get_view/')

    def test_redirect_with_query(self):
        ""GET a URL that redirects with given GET parameters""
        response = self.client.get('/redirect_view/', {'var': 'value'})
        self.assertRedirects(response, '/get_view/?var=value')

    def test_redirect_with_query_ordering(self):
        """"""assertRedirects() ignores the order of query string parameters.""""""
        response = self.client.get('/redirect_view/', {'var': 'value', 'foo': 'bar'})
        self.assertRedirects(response, '/get_view/?var=value&foo=bar')
        self.assertRedirects(response, '/get_view/?foo=bar&var=value')

    def test_permanent_redirect(self):
        ""GET a URL that redirects permanently elsewhere""
        response = self.client.get('/permanent_redirect_view/')
        self.assertRedirects(response, '/get_view/', status_code=301)

    def test_temporary_redirect(self):
        ""GET a URL that does a non-permanent redirect""
        response = self.client.get('/temporary_redirect_view/')
        self.assertRedirects(response, '/get_view/', status_code=302)

    def test_redirect_to_strange_location(self):
        ""GET a URL that redirects to a non-200 page""
        response = self.client.get('/double_redirect_view/')
        # The response was a 302, and that the attempt to get the redirection
        # location returned 301 when retrieved
        self.assertRedirects(response, '/permanent_redirect_view/', target_status_code=301)

    def test_follow_redirect(self):
        ""A URL that redirects can be followed to termination.""
        response = self.client.get('/double_redirect_view/', follow=True)
        self.assertRedirects(response, '/get_view/', status_code=302, target_status_code=200)
        self.assertEqual(len(response.redirect_chain), 2)

    def test_follow_relative_redirect(self):
        ""A URL with a relative redirect can be followed.""
        response = self.client.get('/accounts/', follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.request['PATH_INFO'], '/accounts/login/')

    def test_follow_relative_redirect_no_trailing_slash(self):
        ""A URL with a relative redirect with no trailing slash can be followed.""
        response = self.client.get('/accounts/no_trailing_slash', follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.request['PATH_INFO'], '/accounts/login/')

    def test_redirect_to_querystring_only(self):
        """"""A URL that consists of a querystring only can be followed""""""
        response = self.client.post('/post_then_get_view/', follow=True)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.request['PATH_INFO'], '/post_then_get_view/')
        self.assertEqual(response.content, b'The value of success is true.')

    def test_follow_307_and_308_redirect(self):
        """"""
        A 307 or 308 redirect preserves the request method after the redirect.
        """"""
        methods = ('get', 'post', 'head', 'options', 'put', 'patch', 'delete', 'trace')
        codes = (307, 308)
        for method, code in itertools.product(methods, codes):
            with self.subTest(method=method, code=code):
                req_method = getattr(self.client, method)
                response = req_method('/redirect_view_%s/' % code, data={'value': 'test'}, follow=True)
                self.assertEqual(response.status_code, 200)
                self.assertEqual(response.request['PATH_INFO'], '/post_view/')
                self.assertEqual(response.request['REQUEST_METHOD'], method.upper())

    def test_follow_307_and_308_preserves_query_string(self):
        methods = ('post', 'options', 'put', 'patch', 'delete', 'trace')
        codes = (307, 308)
        for method, code in itertools.product(methods, codes):
            with self.subTest(method=method, code=code):
                req_method = getattr(self.client, method)
                response = req_method(
                    '/redirect_view_%s_query_string/' % code,
                    data={'value': 'test'},
                    follow=True,
                )
                self.assertRedirects(response, '/post_view/?hello=world', status_code=code)
                self.assertEqual(response.request['QUERY_STRING'], 'hello=world')

    def test_follow_307_and_308_get_head_query_string(self):
        methods = ('get', 'head')
        codes = (307, 308)
        for method, code in itertools.product(methods, codes):
            with self.subTest(method=method, code=code):
                req_method = getattr(self.client, method)
                response = req_method(
                    '/redirect_view_%s_query_string/' % code,
                    data={'value': 'test'},
                    follow=True,
                )
                self.assertRedirects(response, '/post_view/?hello=world', status_code=code)
                self.assertEqual(response.request['QUERY_STRING'], 'value=test')

    def test_follow_307_and_308_preserves_post_data(self):
        for code in (307, 308):
            with self.subTest(code=code):
                response = self.client.post('/redirect_view_%s/' % code, data={'value': 'test'}, follow=True)
                self.assertContains(response, 'test is the value')

    def test_follow_307_and_308_preserves_put_body(self):
        for code in (307, 308):
            with self.subTest(code=code):
                response = self.client.put('/redirect_view_%s/?to=/put_view/' % code, data='a=b', follow=True)
                self.assertContains(response, 'a=b is the body')

    def test_follow_307_and_308_preserves_get_params(self):
        data = {'var': 30, 'to': '/get_view/'}
        for code in (307, 308):
            with self.subTest(code=code):
                response = self.client.get('/redirect_view_%s/' % code, data=data, follow=True)
                self.assertContains(response, '30 is the value')

    def test_redirect_http(self):
        """"""GET a URL that redirects to an HTTP URI.""""""
        response = self.client.get('/http_redirect_view/', follow=True)
        self.assertFalse(response.test_was_secure_request)

    def test_redirect_https(self):
        """"""GET a URL that redirects to an HTTPS URI.""""""
        response = self.client.get('/https_redirect_view/', follow=True)
        self.assertTrue(response.test_was_secure_request)

    def test_notfound_response(self):
        ""GET a URL that responds as '404:Not Found'""
        response = self.client.get('/bad_view/')
        self.assertContains(response, 'MAGIC', status_code=404)

    def test_valid_form(self):
        ""POST valid data to a form""
        post_data = {
            'text': 'Hello World',
            'email': 'foo@example.com',
            'value': 37,
            'single': 'b',
            'multi': ('b', 'c', 'e')
        }
        response = self.client.post('/form_view/', post_data)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, ""Valid POST Template"")

    def test_valid_form_with_hints(self):
        ""GET a form, providing hints in the GET data""
        hints = {
            'text': 'Hello World',
            'multi': ('b', 'c', 'e')
        }
        response = self.client.get('/form_view/', data=hints)
        # The multi-value data has been rolled out ok
        self.assertContains(response, 'Select a valid choice.', 0)
        self.assertTemplateUsed(response, ""Form GET Template"")

    def test_incomplete_data_form(self):
        ""POST incomplete data to a form""
        post_data = {
            'text': 'Hello World',
            'value': 37
        }
        response = self.client.post('/form_view/', post_data)
        self.assertContains(response, 'This field is required.', 3)
        self.assertTemplateUsed(response, ""Invalid POST Template"")

        self.assertFormError(response, 'form', 'email', 'This field is required.')
        self.assertFormError(response, 'form', 'single', 'This field is required.')
        self.assertFormError(response, 'form', 'multi', 'This field is required.')

    def test_form_error(self):
        ""POST erroneous data to a form""
        post_data = {
            'text': 'Hello World',
            'email': 'not an email address',
            'value': 37,
            'single': 'b',
            'multi': ('b', 'c', 'e')
        }
        response = self.client.post('/form_view/', post_data)
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, ""Invalid POST Template"")

        self.assertFormError(response, 'form', 'email', 'Enter a valid email address.')

    def test_valid_form_with_template(self):
        ""POST valid data to a form using multiple templates""
        post_data = {
            'text': 'Hello World',
            'email': 'foo@example.com',
            'value': 37,
            'single': 'b',
            'multi': ('b', 'c', 'e')
        }
        response = self.client.post('/form_view_with_template/', post_data)
        self.assertContains(response, 'POST data OK')
        self.assertTemplateUsed(response, ""form_view.html"")
        self.assertTemplateUsed(response, 'base.html')
        self.assertTemplateNotUsed(response, ""Valid POST Template"")

    def test_incomplete_data_form_with_template(self):
        ""POST incomplete data to a form using multiple templates""
        post_data = {
            'text': 'Hello World',
            'value': 37
        }
        response = self.client.post('/form_view_with_template/', post_data)
        self.assertContains(response, 'POST data has errors')
        self.assertTemplateUsed(response, 'form_view.html')
        self.assertTemplateUsed(response, 'base.html')
        self.assertTemplateNotUsed(response, ""Invalid POST Template"")

        self.assertFormError(response, 'form', 'email', 'This field is required.')
        self.assertFormError(response, 'form', 'single', 'This field is required.')
        self.assertFormError(response, 'form', 'multi', 'This field is required.')

    def test_form_error_with_template(self):
        ""POST erroneous data to a form using multiple templates""
        post_data = {
            'text': 'Hello World',
            'email': 'not an email address',
            'value': 37,
            'single': 'b',
            'multi': ('b', 'c', 'e')
        }
        response = self.client.post('/form_view_with_template/', post_data)
        self.assertContains(response, 'POST data has errors')
        self.assertTemplateUsed(response, ""form_view.html"")
        self.assertTemplateUsed(response, 'base.html')
        self.assertTemplateNotUsed(response, ""Invalid POST Template"")

        self.assertFormError(response, 'form', 'email', 'Enter a valid email address.')

    def test_unknown_page(self):
        ""GET an invalid URL""
        response = self.client.get('/unknown_view/')

        # The response was a 404
        self.assertEqual(response.status_code, 404)

    def test_url_parameters(self):
        ""Make sure that URL ;-parameters are not stripped.""
        response = self.client.get('/unknown_view/;some-parameter')

        # The path in the response includes it (ignore that it's a 404)
        self.assertEqual(response.request['PATH_INFO'], '/unknown_view/;some-parameter')

    def test_view_with_login(self):
        ""Request a page that is protected with @login_required""

        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')

        # Log in
        login = self.client.login(username='testclient', password='password')
        self.assertTrue(login, 'Could not log in')

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    @override_settings(
        INSTALLED_APPS=['django.contrib.auth'],
        SESSION_ENGINE='django.contrib.sessions.backends.file',
    )
    def test_view_with_login_when_sessions_app_is_not_installed(self):
        self.test_view_with_login()

    def test_view_with_force_login(self):
        ""Request a page that is protected with @login_required""
        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')

        # Log in
        self.client.force_login(self.u1)

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    def test_view_with_method_login(self):
        ""Request a page that is protected with a @login_required method""

        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_method_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_method_view/')

        # Log in
        login = self.client.login(username='testclient', password='password')
        self.assertTrue(login, 'Could not log in')

        # Request a page that requires a login
        response = self.client.get('/login_protected_method_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    def test_view_with_method_force_login(self):
        ""Request a page that is protected with a @login_required method""
        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_method_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_method_view/')

        # Log in
        self.client.force_login(self.u1)

        # Request a page that requires a login
        response = self.client.get('/login_protected_method_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    def test_view_with_login_and_custom_redirect(self):
        ""Request a page that is protected with @login_required(redirect_field_name='redirect_to')""

        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_view_custom_redirect/')
        self.assertRedirects(response, '/accounts/login/?redirect_to=/login_protected_view_custom_redirect/')

        # Log in
        login = self.client.login(username='testclient', password='password')
        self.assertTrue(login, 'Could not log in')

        # Request a page that requires a login
        response = self.client.get('/login_protected_view_custom_redirect/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    def test_view_with_force_login_and_custom_redirect(self):
        """"""
        Request a page that is protected with
        @login_required(redirect_field_name='redirect_to')
        """"""
        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_view_custom_redirect/')
        self.assertRedirects(response, '/accounts/login/?redirect_to=/login_protected_view_custom_redirect/')

        # Log in
        self.client.force_login(self.u1)

        # Request a page that requires a login
        response = self.client.get('/login_protected_view_custom_redirect/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    def test_view_with_bad_login(self):
        ""Request a page that is protected with @login, but use bad credentials""

        login = self.client.login(username='otheruser', password='nopassword')
        self.assertFalse(login)

    def test_view_with_inactive_login(self):
        """"""
        An inactive user may login if the authenticate backend allows it.
        """"""
        credentials = {'username': 'inactive', 'password': 'password'}
        self.assertFalse(self.client.login(**credentials))

        with self.settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend']):
            self.assertTrue(self.client.login(**credentials))

    @override_settings(
        AUTHENTICATION_BACKENDS=[
            'django.contrib.auth.backends.ModelBackend',
            'django.contrib.auth.backends.AllowAllUsersModelBackend',
        ]
    )
    def test_view_with_inactive_force_login(self):
        ""Request a page that is protected with @login, but use an inactive login""

        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')

        # Log in
        self.client.force_login(self.u2, backend='django.contrib.auth.backends.AllowAllUsersModelBackend')

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'inactive')

    def test_logout(self):
        ""Request a logout after logging in""
        # Log in
        self.client.login(username='testclient', password='password')

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

        # Log out
        self.client.logout()

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')

    def test_logout_with_force_login(self):
        ""Request a logout after logging in""
        # Log in
        self.client.force_login(self.u1)

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

        # Log out
        self.client.logout()

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')

    @override_settings(
        AUTHENTICATION_BACKENDS=[
            'django.contrib.auth.backends.ModelBackend',
            'test_client.auth_backends.TestClientBackend',
        ],
    )
    def test_force_login_with_backend(self):
        """"""
        Request a page that is protected with @login_required when using
        force_login() and passing a backend.
        """"""
        # Get the page without logging in. Should result in 302.
        response = self.client.get('/login_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/login_protected_view/')

        # Log in
        self.client.force_login(self.u1, backend='test_client.auth_backends.TestClientBackend')
        self.assertEqual(self.u1.backend, 'test_client.auth_backends.TestClientBackend')

        # Request a page that requires a login
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')

    @override_settings(
        AUTHENTICATION_BACKENDS=[
            'django.contrib.auth.backends.ModelBackend',
            'test_client.auth_backends.TestClientBackend',
        ],
    )
    def test_force_login_without_backend(self):
        """"""
        force_login() without passing a backend and with multiple backends
        configured should automatically use the first backend.
        """"""
        self.client.force_login(self.u1)
        response = self.client.get('/login_protected_view/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['user'].username, 'testclient')
        self.assertEqual(self.u1.backend, 'django.contrib.auth.backends.ModelBackend')

    @override_settings(AUTHENTICATION_BACKENDS=[
        'test_client.auth_backends.BackendWithoutGetUserMethod',
        'django.contrib.auth.backends.ModelBackend',
    ])
    def test_force_login_with_backend_missing_get_user(self):
        """"""
        force_login() skips auth backends without a get_user() method.
        """"""
        self.client.force_login(self.u1)
        self.assertEqual(self.u1.backend, 'django.contrib.auth.backends.ModelBackend')

    @override_settings(SESSION_ENGINE=""django.contrib.sessions.backends.signed_cookies"")
    def test_logout_cookie_sessions(self):
        self.test_logout()

    def test_view_with_permissions(self):
        ""Request a page that is protected with @permission_required""

        # Get the page without logging in. Should result in 302.
        response = self.client.get('/permission_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/permission_protected_view/')

        # Log in
        login = self.client.login(username='testclient', password='password')
        self.assertTrue(login, 'Could not log in')

        # Log in with wrong permissions. Should result in 302.
        response = self.client.get('/permission_protected_view/')
        self.assertRedirects(response, '/accounts/login/?next=/permission_protected_view/')

        # TODO: Log in with right permissions and request the page again

    def test_view_with_permissions_exception(self):
        ""Request a page that is protected with @permission_required but raises an exception""

        # Get the page without logging in. Should result in 403.
        response = self.client.get('/permission_protected_view_exception/')
        self.assertEqual(response.status_code, 403)

        # Log in
        login = self.client.login(username='testclient', password='password')
        self.assertTrue(login, 'Could not log in')

        # Log in with wrong permissions. Should result in 403.
        response = self.client.get('/permission_protected_view_exception/')
        self.assertEqual(response.status_code, 403)

    def test_view_with_method_permissions(self):
        ""Request a page that is protected with a @permission_required method""

        # Get the page without logging in. Should result in 302.
        response = self.client.get('/permission_protected_method_view/')
        self.assertRedirects(response, '/accounts/login/?next=/permission_protected_method_view/')

        # Log in
        login = self.client.login(username='testclient', password='password')
        self.assertTrue(login, 'Could not log in')

        # Log in with wrong permissions. Should result in 302.
        response = self.client.get('/permission_protected_method_view/')
        self.assertRedirects(response, '/accounts/login/?next=/permission_protected_method_view/')

        # TODO: Log in with right permissions and request the page again

    def test_external_redirect(self):
        response = self.client.get('/django_project_redirect/')
        self.assertRedirects(response, 'https://www.djangoproject.com/', fetch_redirect_response=False)

    def test_external_redirect_without_trailing_slash(self):
        """"""
        Client._handle_redirects() with an empty path.
        """"""
        response = self.client.get('/no_trailing_slash_external_redirect/', follow=True)
        self.assertRedirects(response, 'https://testserver')

    def test_external_redirect_with_fetch_error_msg(self):
        """"""
        assertRedirects without fetch_redirect_response=False raises
        a relevant ValueError rather than a non-descript AssertionError.
        """"""
        response = self.client.get('/django_project_redirect/')
        msg = (
            ""The test client is unable to fetch remote URLs (got ""
            ""https://www.djangoproject.com/). If the host is served by Django, ""
            ""add 'www.djangoproject.com' to ALLOWED_HOSTS. ""
            ""Otherwise, use assertRedirects(..., fetch_redirect_response=False).""
        )
        with self.assertRaisesMessage(ValueError, msg):
            self.assertRedirects(response, 'https://www.djangoproject.com/')

    def test_session_modifying_view(self):
        ""Request a page that modifies the session""
        # Session value isn't set initially
        with self.assertRaises(KeyError):
            self.client.session['tobacconist']

        self.client.post('/session_view/')
        # The session was modified
        self.assertEqual(self.client.session['tobacconist'], 'hovercraft')

    @override_settings(
        INSTALLED_APPS=[],
        SESSION_ENGINE='django.contrib.sessions.backends.file',
    )
    def test_sessions_app_is_not_installed(self):
        self.test_session_modifying_view()

    @override_settings(
        INSTALLED_APPS=[],
        SESSION_ENGINE='django.contrib.sessions.backends.nonexistent',
    )
    def test_session_engine_is_invalid(self):
        with self.assertRaisesMessage(ImportError, 'nonexistent'):
            self.test_session_modifying_view()

    def test_view_with_exception(self):
        ""Request a page that is known to throw an error""
        with self.assertRaises(KeyError):
            self.client.get(""/broken_view/"")

    def test_exc_info(self):
        client = Client(raise_request_exception=False)
        response = client.get(""/broken_view/"")
        self.assertEqual(response.status_code, 500)
        exc_type, exc_value, exc_traceback = response.exc_info
        self.assertIs(exc_type, KeyError)
        self.assertIsInstance(exc_value, KeyError)
        self.assertEqual(str(exc_value), ""'Oops! Looks like you wrote some bad code.'"")
        self.assertIsNotNone(exc_traceback)

    def test_exc_info_none(self):
        response = self.client.get(""/get_view/"")
        self.assertIsNone(response.exc_info)

    def test_mail_sending(self):
        ""Mail is redirected to a dummy outbox during test setup""
        response = self.client.get('/mail_sending_view/')
        self.assertEqual(response.status_code, 200)

        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(mail.outbox[0].subject, 'Test message')
        self.assertEqual(mail.outbox[0].body, 'This is a test email')
        self.assertEqual(mail.outbox[0].from_email, 'from@example.com')
        self.assertEqual(mail.outbox[0].to[0], 'first@example.com')
        self.assertEqual(mail.outbox[0].to[1], 'second@example.com')

    def test_reverse_lazy_decodes(self):
        ""reverse_lazy() works in the test client""
        data = {'var': 'data'}
        response = self.client.get(reverse_lazy('get_view'), data)

        # Check some response details
        self.assertContains(response, 'This is a test')

    def test_relative_redirect(self):
        response = self.client.get('/accounts/')
        self.assertRedirects(response, '/accounts/login/')

    def test_relative_redirect_no_trailing_slash(self):
        response = self.client.get('/accounts/no_trailing_slash')
        self.assertRedirects(response, '/accounts/login/')

    def test_mass_mail_sending(self):
        ""Mass mail is redirected to a dummy outbox during test setup""
        response = self.client.get('/mass_mail_sending_view/')
        self.assertEqual(response.status_code, 200)

        self.assertEqual(len(mail.outbox), 2)
        self.assertEqual(mail.outbox[0].subject, 'First Test message')
        self.assertEqual(mail.outbox[0].body, 'This is the first test email')
        self.assertEqual(mail.outbox[0].from_email, 'from@example.com')
        self.assertEqual(mail.outbox[0].to[0], 'first@example.com')
        self.assertEqual(mail.outbox[0].to[1], 'second@example.com')

        self.assertEqual(mail.outbox[1].subject, 'Second Test message')
        self.assertEqual(mail.outbox[1].body, 'This is the second test email')
        self.assertEqual(mail.outbox[1].from_email, 'from@example.com')
        self.assertEqual(mail.outbox[1].to[0], 'second@example.com')
        self.assertEqual(mail.outbox[1].to[1], 'third@example.com')

    def test_exception_following_nested_client_request(self):
        """"""
        A nested test client request shouldn't clobber exception signals from
        the outer client request.
        """"""
        with self.assertRaisesMessage(Exception, 'exception message'):
            self.client.get('/nesting_exception_view/')

    def test_response_raises_multi_arg_exception(self):
        """"""A request may raise an exception with more than one required arg.""""""
        with self.assertRaises(TwoArgException) as cm:
            self.client.get('/two_arg_exception/')
        self.assertEqual(cm.exception.args, ('one', 'two'))

    def test_uploading_temp_file(self):
        with tempfile.TemporaryFile() as test_file:
            response = self.client.post('/upload_view/', data={'temp_file': test_file})
        self.assertEqual(response.content, b'temp_file')

    def test_uploading_named_temp_file(self):
        with tempfile.NamedTemporaryFile() as test_file:
            response = self.client.post(
                '/upload_view/',
                data={'named_temp_file': test_file},
            )
        self.assertEqual(response.content, b'named_temp_file')",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 648 41 2004 46 2011 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 648 44 2012 61 302 41 348 2013 40 2014 41 58 648 621 621 2015 61 123 648 58 648 125 2016 61 2014 46 2017 46 2018 40 648 44 2015 41 621 2014 46 2019 40 2016 44 648 41 2014 46 2020 40 2016 46 2021 91 648 93 44 648 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 348 2024 40 2014 41 58 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2021 91 648 93 44 648 41 348 2025 40 2014 41 58 2026 61 40 648 648 41 497 2014 46 2027 40 2028 44 2026 41 58 2014 46 2017 46 2018 40 648 44 123 648 58 303 125 41 348 2029 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 123 125 41 621 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2032 40 2016 44 648 41 348 2033 40 2014 41 58 648 2016 61 2014 46 2017 46 2034 40 648 44 123 125 41 621 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 2014 46 2032 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 348 2035 40 2014 41 58 648 2036 61 123 648 58 1503 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 621 2014 46 2019 40 2016 44 648 41 2014 46 2020 40 2016 46 2021 91 648 93 44 648 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 348 2037 40 2014 41 58 2026 61 40 648 648 41 497 2014 46 2027 40 2028 44 2026 41 58 2014 46 2017 46 2034 40 648 44 123 648 58 303 125 41 348 2038 40 2014 41 58 648 2039 61 40 648 44 648 44 648 44 648 41 2040 61 40 40 123 648 58 1503 125 44 123 648 58 1503 125 41 44 40 91 1503 44 304 93 44 91 1503 44 304 93 41 44 40 40 1503 44 302 41 44 91 1503 44 302 93 41 44 41 385 2041 398 2039 58 497 2014 46 2042 40 2041 61 2041 41 58 385 2015 44 2043 398 2040 58 497 2014 46 2042 40 2015 41 58 2044 61 2045 40 2014 46 2017 44 2041 41 2046 61 2041 46 2047 40 41 2016 61 2044 40 648 44 2015 44 2048 61 648 41 2014 46 2019 40 2016 44 648 37 2046 41 2014 46 2020 40 2016 46 2021 91 648 93 44 2043 41 348 2049 40 2014 41 58 648 2050 61 2051 46 2052 40 41 2053 61 2051 46 2052 40 41 2050 46 2054 61 2053 2053 46 2055 46 2054 61 648 2017 61 2014 46 2056 40 2057 61 2050 41 621 2017 46 2034 40 648 44 123 648 58 1503 125 44 2048 61 648 41 2014 46 2058 40 2050 46 2059 41 2014 46 2058 40 2053 46 2055 46 2059 41 348 2060 40 2014 41 58 2016 61 2014 46 2017 46 2061 40 648 44 123 648 58 648 125 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 2014 46 2020 40 2016 46 2021 91 648 93 44 648 41 2014 46 2020 40 2016 46 2021 91 648 93 44 648 41 348 2062 40 2014 41 58 648 2016 61 2014 46 2017 46 2063 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 44 648 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 348 2064 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2065 91 648 93 44 648 41 348 2066 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2058 40 2067 40 2016 44 648 41 41 2014 46 2058 40 2067 40 2016 44 648 41 41 385 2068 44 2069 398 2016 46 2070 46 2071 40 41 58 2014 46 2072 40 2068 44 2016 46 2073 46 2074 41 2014 46 2020 40 2016 46 2073 46 2074 91 2068 93 44 2069 41 348 2075 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2058 40 2067 40 2016 44 648 41 41 348 2076 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2020 40 2016 46 2078 46 2079 44 648 41 348 2080 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2078 46 2079 44 648 41 64 2081 40 2082 61 123 648 58 648 125 41 348 2083 40 2014 41 58 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2078 46 2079 44 648 41 348 2084 40 2014 41 58 648 2085 61 648 2016 61 2014 46 2017 46 2034 40 648 44 2085 44 2048 61 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2022 91 1500 93 46 2023 44 648 41 2014 46 2020 40 2016 46 2086 44 648 41 348 2087 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2088 61 302 41 2014 46 2089 40 2016 46 2090 41 2014 46 2020 40 2016 46 2091 44 648 41 348 2092 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2088 61 304 41 2014 46 2058 40 2016 46 2090 41 2014 46 2020 40 2016 46 2091 44 648 41 348 2093 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 348 2095 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 123 648 58 648 125 41 2014 46 2094 40 2016 44 648 41 348 2096 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 123 648 58 648 44 648 58 648 125 41 2014 46 2094 40 2016 44 648 41 2014 46 2094 40 2016 44 648 41 348 2097 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 44 2030 61 1504 41 348 2098 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 44 2030 61 1504 41 348 2099 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 621 621 2014 46 2094 40 2016 44 648 44 2100 61 1504 41 348 2101 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2094 40 2016 44 648 44 2030 61 1504 44 2100 61 1504 41 2014 46 2020 40 2102 40 2016 46 2103 41 44 1502 41 348 2104 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 348 2105 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 348 2106 40 2014 41 58 648 2016 61 2014 46 2017 46 2034 40 648 44 2077 61 304 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 2014 46 2020 40 2016 46 2086 44 648 41 348 2107 40 2014 41 58 648 2039 61 40 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 41 2108 61 40 1504 44 1504 41 385 2041 44 2109 398 2110 46 2111 40 2039 44 2108 41 58 497 2014 46 2042 40 2041 61 2041 44 2109 61 2109 41 58 2112 61 2045 40 2014 46 2017 44 2041 41 2016 61 2112 40 648 37 2109 44 2015 61 123 648 58 648 125 44 2077 61 304 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 2014 46 2020 40 2016 46 2070 91 648 93 44 2041 46 2047 40 41 41 348 2113 40 2014 41 58 2039 61 40 648 44 648 44 648 44 648 44 648 44 648 41 2108 61 40 1504 44 1504 41 385 2041 44 2109 398 2110 46 2111 40 2039 44 2108 41 58 497 2014 46 2042 40 2041 61 2041 44 2109 61 2109 41 58 2112 61 2045 40 2014 46 2017 44 2041 41 2016 61 2112 40 648 37 2109 44 2015 61 123 648 58 648 125 44 2077 61 304 44 41 2014 46 2094 40 2016 44 648 44 2030 61 2109 41 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 348 2114 40 2014 41 58 2039 61 40 648 44 648 41 2108 61 40 1504 44 1504 41 385 2041 44 2109 398 2110 46 2111 40 2039 44 2108 41 58 497 2014 46 2042 40 2041 61 2041 44 2109 61 2109 41 58 2112 61 2045 40 2014 46 2017 44 2041 41 2016 61 2112 40 648 37 2109 44 2015 61 123 648 58 648 125 44 2077 61 304 44 41 2014 46 2094 40 2016 44 648 44 2030 61 2109 41 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 348 2115 40 2014 41 58 385 2109 398 40 1504 44 1504 41 58 497 2014 46 2042 40 2109 61 2109 41 58 2016 61 2014 46 2017 46 2034 40 648 37 2109 44 2015 61 123 648 58 648 125 44 2077 61 304 41 2014 46 2019 40 2016 44 648 41 348 2116 40 2014 41 58 385 2109 398 40 1504 44 1504 41 58 497 2014 46 2042 40 2109 61 2109 41 58 2016 61 2014 46 2017 46 2061 40 648 37 2109 44 2015 61 648 44 2077 61 304 41 2014 46 2019 40 2016 44 648 41 348 2117 40 2014 41 58 2015 61 123 648 58 1503 44 648 58 648 125 385 2109 398 40 1504 44 1504 41 58 497 2014 46 2042 40 2109 61 2109 41 58 2016 61 2014 46 2017 46 2018 40 648 37 2109 44 2015 61 2015 44 2077 61 304 41 2014 46 2019 40 2016 44 648 41 348 2118 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2089 40 2016 46 2090 41 348 2119 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2058 40 2016 46 2090 41 348 2120 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2019 40 2016 44 648 44 2030 61 1504 41 348 2121 40 2014 41 58 648 2036 61 123 648 58 648 44 648 58 648 44 648 58 1503 44 648 58 648 44 648 58 40 648 44 648 44 648 41 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2031 40 2016 44 648 41 348 2122 40 2014 41 58 648 2123 61 123 648 58 648 44 648 58 40 648 44 648 44 648 41 125 2016 61 2014 46 2017 46 2018 40 648 44 2015 61 2123 41 621 2014 46 2019 40 2016 44 648 44 1500 41 2014 46 2031 40 2016 44 648 41 348 2124 40 2014 41 58 648 2036 61 123 648 58 648 44 648 58 1503 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 2014 46 2019 40 2016 44 648 44 1502 41 2014 46 2031 40 2016 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 348 2126 40 2014 41 58 648 2036 61 123 648 58 648 44 648 58 648 44 648 58 1503 44 648 58 648 44 648 58 40 648 44 648 44 648 41 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2031 40 2016 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 348 2127 40 2014 41 58 648 2036 61 123 648 58 648 44 648 58 648 44 648 58 1503 44 648 58 648 44 648 58 40 648 44 648 44 648 41 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 2014 46 2019 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2032 40 2016 44 648 41 348 2128 40 2014 41 58 648 2036 61 123 648 58 648 44 648 58 1503 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 2014 46 2019 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2032 40 2016 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 348 2129 40 2014 41 58 648 2036 61 123 648 58 648 44 648 58 648 44 648 58 1503 44 648 58 648 44 648 58 40 648 44 648 44 648 41 125 2016 61 2014 46 2017 46 2034 40 648 44 2036 41 2014 46 2019 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2031 40 2016 44 648 41 2014 46 2032 40 2016 44 648 41 2014 46 2125 40 2016 44 648 44 648 44 648 41 348 2130 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 621 2014 46 2020 40 2016 46 2030 44 1504 41 348 2131 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 621 2014 46 2020 40 2016 46 2070 91 648 93 44 648 41 348 2132 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2058 40 2133 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 64 2134 40 2135 61 91 648 93 44 2136 61 648 44 41 348 2137 40 2014 41 58 2014 46 2132 40 41 348 2138 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2014 46 2017 46 2139 40 2014 46 2005 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 348 2140 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2058 40 2133 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 348 2141 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2014 46 2017 46 2139 40 2014 46 2005 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 348 2142 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2058 40 2133 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 348 2143 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2014 46 2017 46 2139 40 2014 46 2005 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 348 2144 40 2014 41 58 648 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2089 40 2133 41 348 2145 40 2014 41 58 648 2146 61 123 648 58 648 44 648 58 648 125 2014 46 2089 40 2014 46 2017 46 2133 40 638 2146 41 41 497 2014 46 2147 40 2148 61 91 648 93 41 58 2014 46 2058 40 2014 46 2017 46 2133 40 638 2146 41 41 64 2134 40 2148 61 91 648 44 648 44 93 41 348 2149 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2014 46 2017 46 2139 40 2014 46 2011 44 2150 61 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 348 2151 40 2014 41 58 648 621 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 621 2014 46 2017 46 2152 40 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 348 2153 40 2014 41 58 648 621 2014 46 2017 46 2139 40 2014 46 2005 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 621 2014 46 2017 46 2152 40 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 64 2134 40 2148 61 91 648 44 648 44 93 44 41 348 2154 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2014 46 2017 46 2139 40 2014 46 2005 44 2150 61 648 41 2014 46 2020 40 2014 46 2005 46 2150 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 64 2134 40 2148 61 91 648 44 648 44 93 44 41 348 2155 40 2014 41 58 648 2014 46 2017 46 2139 40 2014 46 2005 41 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2016 46 2021 91 648 93 46 2009 44 648 41 2014 46 2020 40 2014 46 2005 46 2150 44 648 41 64 2134 40 2148 61 91 648 44 648 44 93 41 348 2156 40 2014 41 58 648 2014 46 2017 46 2139 40 2014 46 2005 41 2014 46 2020 40 2014 46 2005 46 2150 44 648 41 64 2134 40 2136 61 648 41 348 2157 40 2014 41 58 2014 46 2151 40 41 348 2158 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2058 40 2133 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 348 2159 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 621 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2058 40 2133 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 348 2160 40 2014 41 58 648 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 2133 61 2014 46 2017 46 2133 40 2009 61 648 44 2010 61 648 41 2014 46 2058 40 2133 44 648 41 621 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 621 348 2161 40 2014 41 58 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 44 2162 61 302 41 348 2163 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 44 2077 61 304 41 2014 46 2094 40 2016 44 648 41 348 2164 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2026 61 40 648 648 648 648 41 497 2014 46 2027 40 2165 44 2026 41 58 2014 46 2094 40 2016 44 648 41 348 2166 40 2014 41 58 648 621 497 2014 46 2167 40 2168 41 58 2014 46 2017 46 2169 91 648 93 2014 46 2017 46 2034 40 648 41 621 2014 46 2020 40 2014 46 2017 46 2169 91 648 93 44 648 41 64 2134 40 2135 61 91 93 44 2136 61 648 44 41 348 2170 40 2014 41 58 2014 46 2166 40 41 64 2134 40 2135 61 91 93 44 2136 61 648 44 41 348 2171 40 2014 41 58 497 2014 46 2027 40 2172 44 648 41 58 2014 46 2166 40 41 348 2173 40 2014 41 58 648 497 2014 46 2167 40 2168 41 58 2014 46 2017 46 2018 40 648 41 348 2174 40 2014 41 58 2017 61 2175 40 2176 61 302 41 2016 61 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2177 44 2178 44 2179 61 2016 46 2180 2014 46 2181 40 2177 44 2168 41 2014 46 2182 40 2178 44 2168 41 2014 46 2020 40 2183 40 2178 41 44 648 41 2014 46 2184 40 2179 41 348 2185 40 2014 41 58 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2186 40 2016 46 2180 41 348 2187 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2102 40 2188 46 2189 41 44 1501 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2190 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2191 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2192 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2193 91 1500 93 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2193 91 1501 93 44 648 41 348 2194 40 2014 41 58 648 2015 61 123 648 58 648 125 2016 61 2014 46 2017 46 2018 40 2195 40 648 41 44 2015 41 621 2014 46 2019 40 2016 44 648 41 348 2196 40 2014 41 58 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 348 2197 40 2014 41 58 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2094 40 2016 44 648 41 348 2198 40 2014 41 58 648 2016 61 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2016 46 2030 44 1504 41 2014 46 2020 40 2102 40 2188 46 2189 41 44 1502 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2190 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2191 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2192 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2193 91 1500 93 44 648 41 2014 46 2020 40 2188 46 2189 91 1500 93 46 2193 91 1501 93 44 648 41 2014 46 2020 40 2188 46 2189 91 1501 93 46 2190 44 648 41 2014 46 2020 40 2188 46 2189 91 1501 93 46 2191 44 648 41 2014 46 2020 40 2188 46 2189 91 1501 93 46 2192 44 648 41 2014 46 2020 40 2188 46 2189 91 1501 93 46 2193 91 1500 93 44 648 41 2014 46 2020 40 2188 46 2189 91 1501 93 46 2193 91 1501 93 44 648 41 348 2199 40 2014 41 58 648 497 2014 46 2027 40 2200 44 648 41 58 2014 46 2017 46 2018 40 648 41 348 2201 40 2014 41 58 648 497 2014 46 2167 40 2202 41 311 2203 58 2014 46 2017 46 2018 40 648 41 2014 46 2020 40 2203 46 2204 46 2205 44 40 648 44 648 41 41 348 2206 40 2014 41 58 497 2207 46 2208 40 41 311 2209 58 2016 61 2014 46 2017 46 2034 40 648 44 2015 61 123 648 58 2209 125 41 2014 46 2020 40 2016 46 2086 44 648 41 348 2210 40 2014 41 58 497 2207 46 2211 40 41 311 2209 58 2016 61 2014 46 2017 46 2034 40 648 44 2015 61 123 648 58 2209 125 44 41 2014 46 2020 40 2016 46 2086 44 648 41 
131525,Python,"class GEOSTest(SimpleTestCase, TestDataMixin):

    def test_wkt(self):
        ""Testing WKT output.""
        for g in self.geometries.wkt_out:
            geom = fromstr(g.wkt)
            if geom.hasz:
                self.assertEqual(g.ewkt, geom.wkt)

    def test_hex(self):
        ""Testing HEX output.""
        for g in self.geometries.hex_wkt:
            geom = fromstr(g.wkt)
            self.assertEqual(g.hex, geom.hex.decode())

    def test_hexewkb(self):
        ""Testing (HEX)EWKB output.""
        # For testing HEX(EWKB).
        ogc_hex = b'01010000000000000000000000000000000000F03F'
        ogc_hex_3d = b'01010000800000000000000000000000000000F03F0000000000000040'
        # `SELECT ST_AsHEXEWKB(ST_GeomFromText('POINT(0 1)', 4326));`
        hexewkb_2d = b'0101000020E61000000000000000000000000000000000F03F'
        # `SELECT ST_AsHEXEWKB(ST_GeomFromEWKT('SRID=4326;POINT(0 1 2)'));`
        hexewkb_3d = b'01010000A0E61000000000000000000000000000000000F03F0000000000000040'

        pnt_2d = Point(0, 1, srid=4326)
        pnt_3d = Point(0, 1, 2, srid=4326)

        # OGC-compliant HEX will not have SRID value.
        self.assertEqual(ogc_hex, pnt_2d.hex)
        self.assertEqual(ogc_hex_3d, pnt_3d.hex)

        # HEXEWKB should be appropriate for its dimension -- have to use an
        # a WKBWriter w/dimension set accordingly, else GEOS will insert
        # garbage into 3D coordinate if there is none.
        self.assertEqual(hexewkb_2d, pnt_2d.hexewkb)
        self.assertEqual(hexewkb_3d, pnt_3d.hexewkb)
        self.assertIs(GEOSGeometry(hexewkb_3d).hasz, True)

        # Same for EWKB.
        self.assertEqual(memoryview(a2b_hex(hexewkb_2d)), pnt_2d.ewkb)
        self.assertEqual(memoryview(a2b_hex(hexewkb_3d)), pnt_3d.ewkb)

        # Redundant sanity check.
        self.assertEqual(4326, GEOSGeometry(hexewkb_2d).srid)

    def test_kml(self):
        ""Testing KML output.""
        for tg in self.geometries.wkt_out:
            geom = fromstr(tg.wkt)
            kml = getattr(tg, 'kml', False)
            if kml:
                self.assertEqual(kml, geom.kml)

    def test_errors(self):
        ""Testing the Error handlers.""
        # string-based
        for err in self.geometries.errors:
            with self.assertRaises((GEOSException, ValueError)):
                fromstr(err.wkt)

        # Bad WKB
        with self.assertRaises(GEOSException):
            GEOSGeometry(memoryview(b'0'))

        class NotAGeometry:
            pass

        # Some other object
        with self.assertRaises(TypeError):
            GEOSGeometry(NotAGeometry())
        # None
        with self.assertRaises(TypeError):
            GEOSGeometry(None)

    def test_wkb(self):
        ""Testing WKB output.""
        for g in self.geometries.hex_wkt:
            geom = fromstr(g.wkt)
            wkb = geom.wkb
            self.assertEqual(wkb.hex().upper(), g.hex)

    def test_create_hex(self):
        ""Testing creation from HEX.""
        for g in self.geometries.hex_wkt:
            geom_h = GEOSGeometry(g.hex)
            # we need to do this so decimal places get normalized
            geom_t = fromstr(g.wkt)
            self.assertEqual(geom_t.wkt, geom_h.wkt)

    def test_create_wkb(self):
        ""Testing creation from WKB.""
        for g in self.geometries.hex_wkt:
            wkb = memoryview(bytes.fromhex(g.hex))
            geom_h = GEOSGeometry(wkb)
            # we need to do this so decimal places get normalized
            geom_t = fromstr(g.wkt)
            self.assertEqual(geom_t.wkt, geom_h.wkt)

    def test_ewkt(self):
        ""Testing EWKT.""
        srids = (-1, 32140)
        for srid in srids:
            for p in self.geometries.polygons:
                ewkt = 'SRID=%d;%s' % (srid, p.wkt)
                poly = fromstr(ewkt)
                self.assertEqual(srid, poly.srid)
                self.assertEqual(srid, poly.shell.srid)
                self.assertEqual(srid, fromstr(poly.ewkt).srid)  # Checking export

    def test_json(self):
        ""Testing GeoJSON input/output (via GDAL).""
        for g in self.geometries.json_geoms:
            geom = GEOSGeometry(g.wkt)
            if not hasattr(g, 'not_equal'):
                # Loading jsons to prevent decimal differences
                self.assertEqual(json.loads(g.json), json.loads(geom.json))
                self.assertEqual(json.loads(g.json), json.loads(geom.geojson))
            self.assertEqual(GEOSGeometry(g.wkt, 4326), GEOSGeometry(geom.json))

    def test_json_srid(self):
        geojson_data = {
            ""type"": ""Point"",
            ""coordinates"": [2, 49],
            ""crs"": {
                ""type"": ""name"",
                ""properties"": {
                    ""name"": ""urn:ogc:def:crs:EPSG::4322""
                }
            }
        }
        self.assertEqual(GEOSGeometry(json.dumps(geojson_data)), Point(2, 49, srid=4322))

    def test_fromfile(self):
        ""Testing the fromfile() factory.""
        ref_pnt = GEOSGeometry('POINT(5 23)')

        wkt_f = BytesIO()
        wkt_f.write(ref_pnt.wkt.encode())
        wkb_f = BytesIO()
        wkb_f.write(bytes(ref_pnt.wkb))

        # Other tests use `fromfile()` on string filenames so those
        # aren't tested here.
        for fh in (wkt_f, wkb_f):
            fh.seek(0)
            pnt = fromfile(fh)
            self.assertEqual(ref_pnt, pnt)

    def test_eq(self):
        ""Testing equivalence.""
        p = fromstr('POINT(5 23)')
        self.assertEqual(p, p.wkt)
        self.assertNotEqual(p, 'foo')
        ls = fromstr('LINESTRING(0 0, 1 1, 5 5)')
        self.assertEqual(ls, ls.wkt)
        self.assertNotEqual(p, 'bar')
        self.assertEqual(p, 'POINT(5.0 23.0)')
        # Error shouldn't be raise on equivalence testing with
        # an invalid type.
        for g in (p, ls):
            self.assertIsNotNone(g)
            self.assertNotEqual(g, {'foo': 'bar'})
            self.assertIsNot(g, False)

    def test_hash(self):
        point_1 = Point(5, 23)
        point_2 = Point(5, 23, srid=4326)
        point_3 = Point(5, 23, srid=32632)
        multipoint_1 = MultiPoint(point_1, srid=4326)
        multipoint_2 = MultiPoint(point_2)
        multipoint_3 = MultiPoint(point_3)
        self.assertNotEqual(hash(point_1), hash(point_2))
        self.assertNotEqual(hash(point_1), hash(point_3))
        self.assertNotEqual(hash(point_2), hash(point_3))
        self.assertNotEqual(hash(multipoint_1), hash(multipoint_2))
        self.assertEqual(hash(multipoint_2), hash(multipoint_3))
        self.assertNotEqual(hash(multipoint_1), hash(point_1))
        self.assertNotEqual(hash(multipoint_2), hash(point_2))
        self.assertNotEqual(hash(multipoint_3), hash(point_3))

    def test_eq_with_srid(self):
        ""Testing non-equivalence with different srids.""
        p0 = Point(5, 23)
        p1 = Point(5, 23, srid=4326)
        p2 = Point(5, 23, srid=32632)
        # GEOS
        self.assertNotEqual(p0, p1)
        self.assertNotEqual(p1, p2)
        # EWKT
        self.assertNotEqual(p0, p1.ewkt)
        self.assertNotEqual(p1, p0.ewkt)
        self.assertNotEqual(p1, p2.ewkt)
        # Equivalence with matching SRIDs
        self.assertEqual(p2, p2)
        self.assertEqual(p2, p2.ewkt)
        # WKT contains no SRID so will not equal
        self.assertNotEqual(p2, p2.wkt)
        # SRID of 0
        self.assertEqual(p0, 'SRID=0;POINT (5 23)')
        self.assertNotEqual(p1, 'SRID=0;POINT (5 23)')

    def test_points(self):
        ""Testing Point objects.""
        prev = fromstr('POINT(0 0)')
        for p in self.geometries.points:
            # Creating the point from the WKT
            pnt = fromstr(p.wkt)
            self.assertEqual(pnt.geom_type, 'Point')
            self.assertEqual(pnt.geom_typeid, 0)
            self.assertEqual(pnt.dims, 0)
            self.assertEqual(p.x, pnt.x)
            self.assertEqual(p.y, pnt.y)
            self.assertEqual(pnt, fromstr(p.wkt))
            self.assertIs(pnt == prev, False)  # Use assertIs() to test __eq__.

            # Making sure that the point's X, Y components are what we expect
            self.assertAlmostEqual(p.x, pnt.tuple[0], 9)
            self.assertAlmostEqual(p.y, pnt.tuple[1], 9)

            # Testing the third dimension, and getting the tuple arguments
            if hasattr(p, 'z'):
                self.assertIs(pnt.hasz, True)
                self.assertEqual(p.z, pnt.z)
                self.assertEqual(p.z, pnt.tuple[2], 9)
                tup_args = (p.x, p.y, p.z)
                set_tup1 = (2.71, 3.14, 5.23)
                set_tup2 = (5.23, 2.71, 3.14)
            else:
                self.assertIs(pnt.hasz, False)
                self.assertIsNone(pnt.z)
                tup_args = (p.x, p.y)
                set_tup1 = (2.71, 3.14)
                set_tup2 = (3.14, 2.71)

            # Centroid operation on point should be point itself
            self.assertEqual(p.centroid, pnt.centroid.tuple)

            # Now testing the different constructors
            pnt2 = Point(tup_args)  # e.g., Point((1, 2))
            pnt3 = Point(*tup_args)  # e.g., Point(1, 2)
            self.assertEqual(pnt, pnt2)
            self.assertEqual(pnt, pnt3)

            # Now testing setting the x and y
            pnt.y = 3.14
            pnt.x = 2.71
            self.assertEqual(3.14, pnt.y)
            self.assertEqual(2.71, pnt.x)

            # Setting via the tuple/coords property
            pnt.tuple = set_tup1
            self.assertEqual(set_tup1, pnt.tuple)
            pnt.coords = set_tup2
            self.assertEqual(set_tup2, pnt.coords)

            prev = pnt  # setting the previous geometry

    def test_point_reverse(self):
        point = GEOSGeometry('POINT(144.963 -37.8143)', 4326)
        self.assertEqual(point.srid, 4326)
        point.reverse()
        self.assertEqual(point.ewkt, 'SRID=4326;POINT (-37.8143 144.963)')

    def test_multipoints(self):
        ""Testing MultiPoint objects.""
        for mp in self.geometries.multipoints:
            mpnt = fromstr(mp.wkt)
            self.assertEqual(mpnt.geom_type, 'MultiPoint')
            self.assertEqual(mpnt.geom_typeid, 4)
            self.assertEqual(mpnt.dims, 0)

            self.assertAlmostEqual(mp.centroid[0], mpnt.centroid.tuple[0], 9)
            self.assertAlmostEqual(mp.centroid[1], mpnt.centroid.tuple[1], 9)

            with self.assertRaises(IndexError):
                mpnt.__getitem__(len(mpnt))
            self.assertEqual(mp.centroid, mpnt.centroid.tuple)
            self.assertEqual(mp.coords, tuple(m.tuple for m in mpnt))
            for p in mpnt:
                self.assertEqual(p.geom_type, 'Point')
                self.assertEqual(p.geom_typeid, 0)
                self.assertIs(p.empty, False)
                self.assertIs(p.valid, True)

    def test_linestring(self):
        ""Testing LineString objects.""
        prev = fromstr('POINT(0 0)')
        for line in self.geometries.linestrings:
            ls = fromstr(line.wkt)
            self.assertEqual(ls.geom_type, 'LineString')
            self.assertEqual(ls.geom_typeid, 1)
            self.assertEqual(ls.dims, 1)
            self.assertIs(ls.empty, False)
            self.assertIs(ls.ring, False)
            if hasattr(line, 'centroid'):
                self.assertEqual(line.centroid, ls.centroid.tuple)
            if hasattr(line, 'tup'):
                self.assertEqual(line.tup, ls.tuple)

            self.assertEqual(ls, fromstr(line.wkt))
            self.assertIs(ls == prev, False)  # Use assertIs() to test __eq__.
            with self.assertRaises(IndexError):
                ls.__getitem__(len(ls))
            prev = ls

            # Creating a LineString from a tuple, list, and numpy array
            self.assertEqual(ls, LineString(ls.tuple))  # tuple
            self.assertEqual(ls, LineString(*ls.tuple))  # as individual arguments
            self.assertEqual(ls, LineString([list(tup) for tup in ls.tuple]))  # as list
            # Point individual arguments
            self.assertEqual(ls.wkt, LineString(*tuple(Point(tup) for tup in ls.tuple)).wkt)
            if numpy:
                self.assertEqual(ls, LineString(numpy.array(ls.tuple)))  # as numpy array

        with self.assertRaisesMessage(TypeError, 'Each coordinate should be a sequence (list or tuple)'):
            LineString((0, 0))

        with self.assertRaisesMessage(ValueError, 'LineString requires at least 2 points, got 1.'):
            LineString([(0, 0)])

        if numpy:
            with self.assertRaisesMessage(ValueError, 'LineString requires at least 2 points, got 1.'):
                LineString(numpy.array([(0, 0)]))

        with mock.patch('django.contrib.gis.geos.linestring.numpy', False):
            with self.assertRaisesMessage(TypeError, 'Invalid initialization input for LineStrings.'):
                LineString('wrong input')

        # Test __iter__().
        self.assertEqual(list(LineString((0, 0), (1, 1), (2, 2))), [(0, 0), (1, 1), (2, 2)])

    def test_linestring_reverse(self):
        line = GEOSGeometry('LINESTRING(144.963 -37.8143,151.2607 -33.887)', 4326)
        self.assertEqual(line.srid, 4326)
        line.reverse()
        self.assertEqual(line.ewkt, 'SRID=4326;LINESTRING (151.2607 -33.887, 144.963 -37.8143)')

    def _test_is_counterclockwise(self):
        lr = LinearRing((0, 0), (1, 0), (0, 1), (0, 0))
        self.assertIs(lr.is_counterclockwise, True)
        lr.reverse()
        self.assertIs(lr.is_counterclockwise, False)
        msg = 'Orientation of an empty LinearRing cannot be determined.'
        with self.assertRaisesMessage(ValueError, msg):
            LinearRing().is_counterclockwise

    @skipIf(geos_version_tuple() < (3, 7), 'GEOS >= 3.7.0 is required')
    def test_is_counterclockwise(self):
        self._test_is_counterclockwise()

    @skipIf(geos_version_tuple() < (3, 7), 'GEOS >= 3.7.0 is required')
    def test_is_counterclockwise_geos_error(self):
        with mock.patch('django.contrib.gis.geos.prototypes.cs_is_ccw') as mocked:
            mocked.return_value = 0
            mocked.func_name = 'GEOSCoordSeq_isCCW'
            msg = 'Error encountered in GEOS C function ""GEOSCoordSeq_isCCW"".'
            with self.assertRaisesMessage(GEOSException, msg):
                LinearRing((0, 0), (1, 0), (0, 1), (0, 0)).is_counterclockwise

    @mock.patch('django.contrib.gis.geos.libgeos.geos_version', lambda: b'3.6.9')
    def test_is_counterclockwise_fallback(self):
        self._test_is_counterclockwise()

    def test_multilinestring(self):
        ""Testing MultiLineString objects.""
        prev = fromstr('POINT(0 0)')
        for line in self.geometries.multilinestrings:
            ml = fromstr(line.wkt)
            self.assertEqual(ml.geom_type, 'MultiLineString')
            self.assertEqual(ml.geom_typeid, 5)
            self.assertEqual(ml.dims, 1)

            self.assertAlmostEqual(line.centroid[0], ml.centroid.x, 9)
            self.assertAlmostEqual(line.centroid[1], ml.centroid.y, 9)

            self.assertEqual(ml, fromstr(line.wkt))
            self.assertIs(ml == prev, False)  # Use assertIs() to test __eq__.
            prev = ml

            for ls in ml:
                self.assertEqual(ls.geom_type, 'LineString')
                self.assertEqual(ls.geom_typeid, 1)
                self.assertIs(ls.empty, False)

            with self.assertRaises(IndexError):
                ml.__getitem__(len(ml))
            self.assertEqual(ml.wkt, MultiLineString(*tuple(s.clone() for s in ml)).wkt)
            self.assertEqual(ml, MultiLineString(*tuple(LineString(s.tuple) for s in ml)))

    def test_linearring(self):
        ""Testing LinearRing objects.""
        for rr in self.geometries.linearrings:
            lr = fromstr(rr.wkt)
            self.assertEqual(lr.geom_type, 'LinearRing')
            self.assertEqual(lr.geom_typeid, 2)
            self.assertEqual(lr.dims, 1)
            self.assertEqual(rr.n_p, len(lr))
            self.assertIs(lr.valid, True)
            self.assertIs(lr.empty, False)

            # Creating a LinearRing from a tuple, list, and numpy array
            self.assertEqual(lr, LinearRing(lr.tuple))
            self.assertEqual(lr, LinearRing(*lr.tuple))
            self.assertEqual(lr, LinearRing([list(tup) for tup in lr.tuple]))
            if numpy:
                self.assertEqual(lr, LinearRing(numpy.array(lr.tuple)))

        with self.assertRaisesMessage(ValueError, 'LinearRing requires at least 4 points, got 3.'):
            LinearRing((0, 0), (1, 1), (0, 0))

        with self.assertRaisesMessage(ValueError, 'LinearRing requires at least 4 points, got 1.'):
            LinearRing([(0, 0)])

        if numpy:
            with self.assertRaisesMessage(ValueError, 'LinearRing requires at least 4 points, got 1.'):
                LinearRing(numpy.array([(0, 0)]))

    def test_linearring_json(self):
        self.assertJSONEqual(
            LinearRing((0, 0), (0, 1), (1, 1), (0, 0)).json,
            '{""coordinates"": [[0, 0], [0, 1], [1, 1], [0, 0]], ""type"": ""LineString""}',
        )

    def test_polygons_from_bbox(self):
        ""Testing `from_bbox` class method.""
        bbox = (-180, -90, 180, 90)
        p = Polygon.from_bbox(bbox)
        self.assertEqual(bbox, p.extent)

        # Testing numerical precision
        x = 3.14159265358979323
        bbox = (0, 0, 1, x)
        p = Polygon.from_bbox(bbox)
        y = p.extent[-1]
        self.assertEqual(format(x, '.13f'), format(y, '.13f'))

    def test_polygons(self):
        ""Testing Polygon objects.""

        prev = fromstr('POINT(0 0)')
        for p in self.geometries.polygons:
            # Creating the Polygon, testing its properties.
            poly = fromstr(p.wkt)
            self.assertEqual(poly.geom_type, 'Polygon')
            self.assertEqual(poly.geom_typeid, 3)
            self.assertEqual(poly.dims, 2)
            self.assertIs(poly.empty, False)
            self.assertIs(poly.ring, False)
            self.assertEqual(p.n_i, poly.num_interior_rings)
            self.assertEqual(p.n_i + 1, len(poly))  # Testing __len__
            self.assertEqual(p.n_p, poly.num_points)

            # Area & Centroid
            self.assertAlmostEqual(p.area, poly.area, 9)
            self.assertAlmostEqual(p.centroid[0], poly.centroid.tuple[0], 9)
            self.assertAlmostEqual(p.centroid[1], poly.centroid.tuple[1], 9)

            # Testing the geometry equivalence
            self.assertEqual(poly, fromstr(p.wkt))
            # Should not be equal to previous geometry
            self.assertIs(poly == prev, False)  # Use assertIs() to test __eq__.
            self.assertIs(poly != prev, True)  # Use assertIs() to test __ne__.

            # Testing the exterior ring
            ring = poly.exterior_ring
            self.assertEqual(ring.geom_type, 'LinearRing')
            self.assertEqual(ring.geom_typeid, 2)
            if p.ext_ring_cs:
                self.assertEqual(p.ext_ring_cs, ring.tuple)
                self.assertEqual(p.ext_ring_cs, poly[0].tuple)  # Testing __getitem__

            # Testing __getitem__ and __setitem__ on invalid indices
            with self.assertRaises(IndexError):
                poly.__getitem__(len(poly))
            with self.assertRaises(IndexError):
                poly.__setitem__(len(poly), False)
            with self.assertRaises(IndexError):
                poly.__getitem__(-1 * len(poly) - 1)

            # Testing __iter__
            for r in poly:
                self.assertEqual(r.geom_type, 'LinearRing')
                self.assertEqual(r.geom_typeid, 2)

            # Testing polygon construction.
            with self.assertRaises(TypeError):
                Polygon(0, [1, 2, 3])
            with self.assertRaises(TypeError):
                Polygon('foo')

            # Polygon(shell, (hole1, ... holeN))
            ext_ring, *int_rings = poly
            self.assertEqual(poly, Polygon(ext_ring, int_rings))

            # Polygon(shell_tuple, hole_tuple1, ... , hole_tupleN)
            ring_tuples = tuple(r.tuple for r in poly)
            self.assertEqual(poly, Polygon(*ring_tuples))

            # Constructing with tuples of LinearRings.
            self.assertEqual(poly.wkt, Polygon(*tuple(r for r in poly)).wkt)
            self.assertEqual(poly.wkt, Polygon(*tuple(LinearRing(r.tuple) for r in poly)).wkt)

    def test_polygons_templates(self):
        # Accessing Polygon attributes in templates should work.
        engine = Engine()
        template = engine.from_string('{{ polygons.0.wkt }}')
        polygons = [fromstr(p.wkt) for p in self.geometries.multipolygons[:2]]
        content = template.render(Context({'polygons': polygons}))
        self.assertIn('MULTIPOLYGON (((100', content)

    def test_polygon_comparison(self):
        p1 = Polygon(((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)))
        p2 = Polygon(((0, 0), (0, 1), (1, 0), (0, 0)))
        self.assertGreater(p1, p2)
        self.assertLess(p2, p1)

        p3 = Polygon(((0, 0), (0, 1), (1, 1), (2, 0), (0, 0)))
        p4 = Polygon(((0, 0), (0, 1), (2, 2), (1, 0), (0, 0)))
        self.assertGreater(p4, p3)
        self.assertLess(p3, p4)

    def test_multipolygons(self):
        ""Testing MultiPolygon objects.""
        fromstr('POINT (0 0)')
        for mp in self.geometries.multipolygons:
            mpoly = fromstr(mp.wkt)
            self.assertEqual(mpoly.geom_type, 'MultiPolygon')
            self.assertEqual(mpoly.geom_typeid, 6)
            self.assertEqual(mpoly.dims, 2)
            self.assertEqual(mp.valid, mpoly.valid)

            if mp.valid:
                self.assertEqual(mp.num_geom, mpoly.num_geom)
                self.assertEqual(mp.n_p, mpoly.num_coords)
                self.assertEqual(mp.num_geom, len(mpoly))
                with self.assertRaises(IndexError):
                    mpoly.__getitem__(len(mpoly))
                for p in mpoly:
                    self.assertEqual(p.geom_type, 'Polygon')
                    self.assertEqual(p.geom_typeid, 3)
                    self.assertIs(p.valid, True)
                self.assertEqual(mpoly.wkt, MultiPolygon(*tuple(poly.clone() for poly in mpoly)).wkt)

    def test_memory_hijinks(self):
        ""Testing Geometry __del__() on rings and polygons.""
        # #### Memory issues with rings and poly

        # These tests are needed to ensure sanity with writable geometries.

        # Getting a polygon with interior rings, and pulling out the interior rings
        poly = fromstr(self.geometries.polygons[1].wkt)
        ring1 = poly[0]
        ring2 = poly[1]

        # These deletes should be 'harmless' since they are done on child geometries
        del ring1
        del ring2
        ring1 = poly[0]
        ring2 = poly[1]

        # Deleting the polygon
        del poly

        # Access to these rings is OK since they are clones.
        str(ring1)
        str(ring2)

    def test_coord_seq(self):
        ""Testing Coordinate Sequence objects.""
        for p in self.geometries.polygons:
            if p.ext_ring_cs:
                # Constructing the polygon and getting the coordinate sequence
                poly = fromstr(p.wkt)
                cs = poly.exterior_ring.coord_seq

                self.assertEqual(p.ext_ring_cs, cs.tuple)  # done in the Polygon test too.
                self.assertEqual(len(p.ext_ring_cs), len(cs))  # Making sure __len__ works

                # Checks __getitem__ and __setitem__
                for i in range(len(p.ext_ring_cs)):
                    c1 = p.ext_ring_cs[i]  # Expected value
                    c2 = cs[i]  # Value from coordseq
                    self.assertEqual(c1, c2)

                    # Constructing the test value to set the coordinate sequence with
                    if len(c1) == 2:
                        tset = (5, 23)
                    else:
                        tset = (5, 23, 8)
                    cs[i] = tset

                    # Making sure every set point matches what we expect
                    for j in range(len(tset)):
                        cs[i] = tset
                        self.assertEqual(tset[j], cs[i][j])

    def test_relate_pattern(self):
        ""Testing relate() and relate_pattern().""
        g = fromstr('POINT (0 0)')
        with self.assertRaises(GEOSException):
            g.relate_pattern(0, 'invalid pattern, yo')
        for rg in self.geometries.relate_geoms:
            a = fromstr(rg.wkt_a)
            b = fromstr(rg.wkt_b)
            self.assertEqual(rg.result, a.relate_pattern(b, rg.pattern))
            self.assertEqual(rg.pattern, a.relate(b))

    def test_intersection(self):
        ""Testing intersects() and intersection().""
        for i in range(len(self.geometries.topology_geoms)):
            a = fromstr(self.geometries.topology_geoms[i].wkt_a)
            b = fromstr(self.geometries.topology_geoms[i].wkt_b)
            i1 = fromstr(self.geometries.intersect_geoms[i].wkt)
            self.assertIs(a.intersects(b), True)
            i2 = a.intersection(b)
            self.assertTrue(i1.equals(i2))
            self.assertTrue(i1.equals(a & b))  # __and__ is intersection operator
            a &= b  # testing __iand__
            self.assertTrue(i1.equals(a))

    def test_union(self):
        ""Testing union().""
        for i in range(len(self.geometries.topology_geoms)):
            a = fromstr(self.geometries.topology_geoms[i].wkt_a)
            b = fromstr(self.geometries.topology_geoms[i].wkt_b)
            u1 = fromstr(self.geometries.union_geoms[i].wkt)
            u2 = a.union(b)
            self.assertTrue(u1.equals(u2))
            self.assertTrue(u1.equals(a | b))  # __or__ is union operator
            a |= b  # testing __ior__
            self.assertTrue(u1.equals(a))

    def test_unary_union(self):
        ""Testing unary_union.""
        for i in range(len(self.geometries.topology_geoms)):
            a = fromstr(self.geometries.topology_geoms[i].wkt_a)
            b = fromstr(self.geometries.topology_geoms[i].wkt_b)
            u1 = fromstr(self.geometries.union_geoms[i].wkt)
            u2 = GeometryCollection(a, b).unary_union
            self.assertTrue(u1.equals(u2))

    def test_difference(self):
        ""Testing difference().""
        for i in range(len(self.geometries.topology_geoms)):
            a = fromstr(self.geometries.topology_geoms[i].wkt_a)
            b = fromstr(self.geometries.topology_geoms[i].wkt_b)
            d1 = fromstr(self.geometries.diff_geoms[i].wkt)
            d2 = a.difference(b)
            self.assertTrue(d1.equals(d2))
            self.assertTrue(d1.equals(a - b))  # __sub__ is difference operator
            a -= b  # testing __isub__
            self.assertTrue(d1.equals(a))

    def test_symdifference(self):
        ""Testing sym_difference().""
        for i in range(len(self.geometries.topology_geoms)):
            a = fromstr(self.geometries.topology_geoms[i].wkt_a)
            b = fromstr(self.geometries.topology_geoms[i].wkt_b)
            d1 = fromstr(self.geometries.sdiff_geoms[i].wkt)
            d2 = a.sym_difference(b)
            self.assertTrue(d1.equals(d2))
            self.assertTrue(d1.equals(a ^ b))  # __xor__ is symmetric difference operator
            a ^= b  # testing __ixor__
            self.assertTrue(d1.equals(a))

    def test_buffer(self):
        bg = self.geometries.buffer_geoms[0]
        g = fromstr(bg.wkt)

        # Can't use a floating-point for the number of quadsegs.
        with self.assertRaises(ctypes.ArgumentError):
            g.buffer(bg.width, quadsegs=1.1)

        self._test_buffer(self.geometries.buffer_geoms, 'buffer')

    def test_buffer_with_style(self):
        bg = self.geometries.buffer_with_style_geoms[0]
        g = fromstr(bg.wkt)

        # Can't use a floating-point for the number of quadsegs.
        with self.assertRaises(ctypes.ArgumentError):
            g.buffer_with_style(bg.width, quadsegs=1.1)

        # Can't use a floating-point for the end cap style.
        with self.assertRaises(ctypes.ArgumentError):
            g.buffer_with_style(bg.width, end_cap_style=1.2)
        # Can't use a end cap style that is not in the enum.
        with self.assertRaises(GEOSException):
            g.buffer_with_style(bg.width, end_cap_style=55)

        # Can't use a floating-point for the join style.
        with self.assertRaises(ctypes.ArgumentError):
            g.buffer_with_style(bg.width, join_style=1.3)
        # Can't use a join style that is not in the enum.
        with self.assertRaises(GEOSException):
            g.buffer_with_style(bg.width, join_style=66)

        self._test_buffer(
            itertools.chain(self.geometries.buffer_geoms, self.geometries.buffer_with_style_geoms),
            'buffer_with_style',
        )

    def _test_buffer(self, geometries, buffer_method_name):
        for bg in geometries:
            g = fromstr(bg.wkt)

            # The buffer we expect
            exp_buf = fromstr(bg.buffer_wkt)

            # Constructing our buffer
            buf_kwargs = {
                kwarg_name: getattr(bg, kwarg_name)
                for kwarg_name in ('width', 'quadsegs', 'end_cap_style', 'join_style', 'mitre_limit')
                if hasattr(bg, kwarg_name)
            }
            buf = getattr(g, buffer_method_name)(**buf_kwargs)
            self.assertEqual(exp_buf.num_coords, buf.num_coords)
            self.assertEqual(len(exp_buf), len(buf))

            # Now assuring that each point in the buffer is almost equal
            for j in range(len(exp_buf)):
                exp_ring = exp_buf[j]
                buf_ring = buf[j]
                self.assertEqual(len(exp_ring), len(buf_ring))
                for k in range(len(exp_ring)):
                    # Asserting the X, Y of each point are almost equal (due to floating point imprecision)
                    self.assertAlmostEqual(exp_ring[k][0], buf_ring[k][0], 9)
                    self.assertAlmostEqual(exp_ring[k][1], buf_ring[k][1], 9)

    def test_covers(self):
        poly = Polygon(((0, 0), (0, 10), (10, 10), (10, 0), (0, 0)))
        self.assertTrue(poly.covers(Point(5, 5)))
        self.assertFalse(poly.covers(Point(100, 100)))

    def test_closed(self):
        ls_closed = LineString((0, 0), (1, 1), (0, 0))
        ls_not_closed = LineString((0, 0), (1, 1))
        self.assertFalse(ls_not_closed.closed)
        self.assertTrue(ls_closed.closed)

    def test_srid(self):
        ""Testing the SRID property and keyword.""
        # Testing SRID keyword on Point
        pnt = Point(5, 23, srid=4326)
        self.assertEqual(4326, pnt.srid)
        pnt.srid = 3084
        self.assertEqual(3084, pnt.srid)
        with self.assertRaises(ctypes.ArgumentError):
            pnt.srid = '4326'

        # Testing SRID keyword on fromstr(), and on Polygon rings.
        poly = fromstr(self.geometries.polygons[1].wkt, srid=4269)
        self.assertEqual(4269, poly.srid)
        for ring in poly:
            self.assertEqual(4269, ring.srid)
        poly.srid = 4326
        self.assertEqual(4326, poly.shell.srid)

        # Testing SRID keyword on GeometryCollection
        gc = GeometryCollection(Point(5, 23), LineString((0, 0), (1.5, 1.5), (3, 3)), srid=32021)
        self.assertEqual(32021, gc.srid)
        for i in range(len(gc)):
            self.assertEqual(32021, gc[i].srid)

        # GEOS may get the SRID from HEXEWKB
        # 'POINT(5 23)' at SRID=4326 in hex form -- obtained from PostGIS
        # using `SELECT GeomFromText('POINT (5 23)', 4326);`.
        hex = '0101000020E610000000000000000014400000000000003740'
        p1 = fromstr(hex)
        self.assertEqual(4326, p1.srid)

        p2 = fromstr(p1.hex)
        self.assertIsNone(p2.srid)
        p3 = fromstr(p1.hex, srid=-1)  # -1 is intended.
        self.assertEqual(-1, p3.srid)

        # Testing that geometry SRID could be set to its own value
        pnt_wo_srid = Point(1, 1)
        pnt_wo_srid.srid = pnt_wo_srid.srid

        # Input geometries that have an SRID.
        self.assertEqual(GEOSGeometry(pnt.ewkt, srid=pnt.srid).srid, pnt.srid)
        self.assertEqual(GEOSGeometry(pnt.ewkb, srid=pnt.srid).srid, pnt.srid)
        with self.assertRaisesMessage(ValueError, 'Input geometry already has SRID: %d.' % pnt.srid):
            GEOSGeometry(pnt.ewkt, srid=1)
        with self.assertRaisesMessage(ValueError, 'Input geometry already has SRID: %d.' % pnt.srid):
            GEOSGeometry(pnt.ewkb, srid=1)

    def test_custom_srid(self):
        """"""Test with a null srid and a srid unknown to GDAL.""""""
        for srid in [None, 999999]:
            pnt = Point(111200, 220900, srid=srid)
            self.assertTrue(pnt.ewkt.startswith((""SRID=%s;"" % srid if srid else '') + ""POINT (111200""))
            self.assertIsInstance(pnt.ogr, gdal.OGRGeometry)
            self.assertIsNone(pnt.srs)

            # Test conversion from custom to a known srid
            c2w = gdal.CoordTransform(
                gdal.SpatialReference(
                    '+proj=mill +lat_0=0 +lon_0=0 +x_0=0 +y_0=0 +R_A +ellps=WGS84 '
                    '+datum=WGS84 +units=m +no_defs'
                ),
                gdal.SpatialReference(4326))
            new_pnt = pnt.transform(c2w, clone=True)
            self.assertEqual(new_pnt.srid, 4326)
            self.assertAlmostEqual(new_pnt.x, 1, 1)
            self.assertAlmostEqual(new_pnt.y, 2, 1)

    def test_mutable_geometries(self):
        ""Testing the mutability of Polygons and Geometry Collections.""
        # ### Testing the mutability of Polygons ###
        for p in self.geometries.polygons:
            poly = fromstr(p.wkt)

            # Should only be able to use __setitem__ with LinearRing geometries.
            with self.assertRaises(TypeError):
                poly.__setitem__(0, LineString((1, 1), (2, 2)))

            # Constructing the new shell by adding 500 to every point in the old shell.
            shell_tup = poly.shell.tuple
            new_coords = []
            for point in shell_tup:
                new_coords.append((point[0] + 500., point[1] + 500.))
            new_shell = LinearRing(*tuple(new_coords))

            # Assigning polygon's exterior ring w/the new shell
            poly.exterior_ring = new_shell
            str(new_shell)  # new shell is still accessible
            self.assertEqual(poly.exterior_ring, new_shell)
            self.assertEqual(poly[0], new_shell)

        # ### Testing the mutability of Geometry Collections
        for tg in self.geometries.multipoints:
            mp = fromstr(tg.wkt)
            for i in range(len(mp)):
                # Creating a random point.
                pnt = mp[i]
                new = Point(random.randint(21, 100), random.randint(21, 100))
                # Testing the assignment
                mp[i] = new
                str(new)  # what was used for the assignment is still accessible
                self.assertEqual(mp[i], new)
                self.assertEqual(mp[i].wkt, new.wkt)
                self.assertNotEqual(pnt, mp[i])

        # MultiPolygons involve much more memory management because each
        # Polygon w/in the collection has its own rings.
        for tg in self.geometries.multipolygons:
            mpoly = fromstr(tg.wkt)
            for i in range(len(mpoly)):
                poly = mpoly[i]
                old_poly = mpoly[i]
                # Offsetting the each ring in the polygon by 500.
                for j in range(len(poly)):
                    r = poly[j]
                    for k in range(len(r)):
                        r[k] = (r[k][0] + 500., r[k][1] + 500.)
                    poly[j] = r

                self.assertNotEqual(mpoly[i], poly)
                # Testing the assignment
                mpoly[i] = poly
                str(poly)  # Still accessible
                self.assertEqual(mpoly[i], poly)
                self.assertNotEqual(mpoly[i], old_poly)

        # Extreme (!!) __setitem__ -- no longer works, have to detect
        # in the first object that __setitem__ is called in the subsequent
        # objects -- maybe mpoly[0, 0, 0] = (3.14, 2.71)?
        # mpoly[0][0][0] = (3.14, 2.71)
        # self.assertEqual((3.14, 2.71), mpoly[0][0][0])
        # Doing it more slowly..
        # self.assertEqual((3.14, 2.71), mpoly[0].shell[0])
        # del mpoly

    def test_point_list_assignment(self):
        p = Point(0, 0)

        p[:] = (1, 2, 3)
        self.assertEqual(p, Point(1, 2, 3))

        p[:] = ()
        self.assertEqual(p.wkt, Point())

        p[:] = (1, 2)
        self.assertEqual(p.wkt, Point(1, 2))

        with self.assertRaises(ValueError):
            p[:] = (1,)
        with self.assertRaises(ValueError):
            p[:] = (1, 2, 3, 4, 5)

    def test_linestring_list_assignment(self):
        ls = LineString((0, 0), (1, 1))

        ls[:] = ()
        self.assertEqual(ls, LineString())

        ls[:] = ((0, 0), (1, 1), (2, 2))
        self.assertEqual(ls, LineString((0, 0), (1, 1), (2, 2)))

        with self.assertRaises(ValueError):
            ls[:] = (1,)

    def test_linearring_list_assignment(self):
        ls = LinearRing((0, 0), (0, 1), (1, 1), (0, 0))

        ls[:] = ()
        self.assertEqual(ls, LinearRing())

        ls[:] = ((0, 0), (0, 1), (1, 1), (1, 0), (0, 0))
        self.assertEqual(ls, LinearRing((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)))

        with self.assertRaises(ValueError):
            ls[:] = ((0, 0), (1, 1), (2, 2))

    def test_polygon_list_assignment(self):
        pol = Polygon()

        pol[:] = (((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)),)
        self.assertEqual(pol, Polygon(((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)),))

        pol[:] = ()
        self.assertEqual(pol, Polygon())

    def test_geometry_collection_list_assignment(self):
        p = Point()
        gc = GeometryCollection()

        gc[:] = [p]
        self.assertEqual(gc, GeometryCollection(p))

        gc[:] = ()
        self.assertEqual(gc, GeometryCollection())

    def test_threed(self):
        ""Testing three-dimensional geometries.""
        # Testing a 3D Point
        pnt = Point(2, 3, 8)
        self.assertEqual((2., 3., 8.), pnt.coords)
        with self.assertRaises(TypeError):
            pnt.tuple = (1., 2.)
        pnt.coords = (1., 2., 3.)
        self.assertEqual((1., 2., 3.), pnt.coords)

        # Testing a 3D LineString
        ls = LineString((2., 3., 8.), (50., 250., -117.))
        self.assertEqual(((2., 3., 8.), (50., 250., -117.)), ls.tuple)
        with self.assertRaises(TypeError):
            ls.__setitem__(0, (1., 2.))
        ls[0] = (1., 2., 3.)
        self.assertEqual((1., 2., 3.), ls[0])

    def test_distance(self):
        ""Testing the distance() function.""
        # Distance to self should be 0.
        pnt = Point(0, 0)
        self.assertEqual(0.0, pnt.distance(Point(0, 0)))

        # Distance should be 1
        self.assertEqual(1.0, pnt.distance(Point(0, 1)))

        # Distance should be ~ sqrt(2)
        self.assertAlmostEqual(1.41421356237, pnt.distance(Point(1, 1)), 11)

        # Distances are from the closest vertex in each geometry --
        #  should be 3 (distance from (2, 2) to (5, 2)).
        ls1 = LineString((0, 0), (1, 1), (2, 2))
        ls2 = LineString((5, 2), (6, 1), (7, 0))
        self.assertEqual(3, ls1.distance(ls2))

    def test_length(self):
        ""Testing the length property.""
        # Points have 0 length.
        pnt = Point(0, 0)
        self.assertEqual(0.0, pnt.length)

        # Should be ~ sqrt(2)
        ls = LineString((0, 0), (1, 1))
        self.assertAlmostEqual(1.41421356237, ls.length, 11)

        # Should be circumference of Polygon
        poly = Polygon(LinearRing((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)))
        self.assertEqual(4.0, poly.length)

        # Should be sum of each element's length in collection.
        mpoly = MultiPolygon(poly.clone(), poly)
        self.assertEqual(8.0, mpoly.length)

    def test_emptyCollections(self):
        ""Testing empty geometries and collections.""
        geoms = [
            GeometryCollection([]),
            fromstr('GEOMETRYCOLLECTION EMPTY'),
            GeometryCollection(),
            fromstr('POINT EMPTY'),
            Point(),
            fromstr('LINESTRING EMPTY'),
            LineString(),
            fromstr('POLYGON EMPTY'),
            Polygon(),
            fromstr('MULTILINESTRING EMPTY'),
            MultiLineString(),
            fromstr('MULTIPOLYGON EMPTY'),
            MultiPolygon(()),
            MultiPolygon(),
        ]

        if numpy:
            geoms.append(LineString(numpy.array([])))

        for g in geoms:
            self.assertIs(g.empty, True)

            # Testing len() and num_geom.
            if isinstance(g, Polygon):
                self.assertEqual(1, len(g))  # Has one empty linear ring
                self.assertEqual(1, g.num_geom)
                self.assertEqual(0, len(g[0]))
            elif isinstance(g, (Point, LineString)):
                self.assertEqual(1, g.num_geom)
                self.assertEqual(0, len(g))
            else:
                self.assertEqual(0, g.num_geom)
                self.assertEqual(0, len(g))

            # Testing __getitem__ (doesn't work on Point or Polygon)
            if isinstance(g, Point):
                with self.assertRaises(IndexError):
                    g.x
            elif isinstance(g, Polygon):
                lr = g.shell
                self.assertEqual('LINEARRING EMPTY', lr.wkt)
                self.assertEqual(0, len(lr))
                self.assertIs(lr.empty, True)
                with self.assertRaises(IndexError):
                    lr.__getitem__(0)
            else:
                with self.assertRaises(IndexError):
                    g.__getitem__(0)

    def test_collection_dims(self):
        gc = GeometryCollection([])
        self.assertEqual(gc.dims, -1)

        gc = GeometryCollection(Point(0, 0))
        self.assertEqual(gc.dims, 0)

        gc = GeometryCollection(LineString((0, 0), (1, 1)), Point(0, 0))
        self.assertEqual(gc.dims, 1)

        gc = GeometryCollection(LineString((0, 0), (1, 1)), Polygon(((0, 0), (0, 1), (1, 1), (0, 0))), Point(0, 0))
        self.assertEqual(gc.dims, 2)

    def test_collections_of_collections(self):
        ""Testing GeometryCollection handling of other collections.""
        # Creating a GeometryCollection WKT string composed of other
        # collections and polygons.
        coll = [mp.wkt for mp in self.geometries.multipolygons if mp.valid]
        coll.extend(mls.wkt for mls in self.geometries.multilinestrings)
        coll.extend(p.wkt for p in self.geometries.polygons)
        coll.extend(mp.wkt for mp in self.geometries.multipoints)
        gc_wkt = 'GEOMETRYCOLLECTION(%s)' % ','.join(coll)

        # Should construct ok from WKT
        gc1 = GEOSGeometry(gc_wkt)

        # Should also construct ok from individual geometry arguments.
        gc2 = GeometryCollection(*tuple(g for g in gc1))

        # And, they should be equal.
        self.assertEqual(gc1, gc2)

    def test_gdal(self):
        ""Testing `ogr` and `srs` properties.""
        g1 = fromstr('POINT(5 23)')
        self.assertIsInstance(g1.ogr, gdal.OGRGeometry)
        self.assertIsNone(g1.srs)

        g1_3d = fromstr('POINT(5 23 8)')
        self.assertIsInstance(g1_3d.ogr, gdal.OGRGeometry)
        self.assertEqual(g1_3d.ogr.z, 8)

        g2 = fromstr('LINESTRING(0 0, 5 5, 23 23)', srid=4326)
        self.assertIsInstance(g2.ogr, gdal.OGRGeometry)
        self.assertIsInstance(g2.srs, gdal.SpatialReference)
        self.assertEqual(g2.hex, g2.ogr.hex)
        self.assertEqual('WGS 84', g2.srs.name)

    def test_copy(self):
        ""Testing use with the Python `copy` module.""
        import copy
        poly = GEOSGeometry('POLYGON((0 0, 0 23, 23 23, 23 0, 0 0), (5 5, 5 10, 10 10, 10 5, 5 5))')
        cpy1 = copy.copy(poly)
        cpy2 = copy.deepcopy(poly)
        self.assertNotEqual(poly._ptr, cpy1._ptr)
        self.assertNotEqual(poly._ptr, cpy2._ptr)

    def test_transform(self):
        ""Testing `transform` method.""
        orig = GEOSGeometry('POINT (-104.609 38.255)', 4326)
        trans = GEOSGeometry('POINT (992385.4472045 481455.4944650)', 2774)

        # Using a srid, a SpatialReference object, and a CoordTransform object
        # for transformations.
        t1, t2, t3 = orig.clone(), orig.clone(), orig.clone()
        t1.transform(trans.srid)
        t2.transform(gdal.SpatialReference('EPSG:2774'))
        ct = gdal.CoordTransform(gdal.SpatialReference('WGS84'), gdal.SpatialReference(2774))
        t3.transform(ct)

        # Testing use of the `clone` keyword.
        k1 = orig.clone()
        k2 = k1.transform(trans.srid, clone=True)
        self.assertEqual(k1, orig)
        self.assertNotEqual(k1, k2)

        # Different PROJ versions use different transformations, all are
        # correct as having a 1 meter accuracy.
        prec = -1
        for p in (t1, t2, t3, k2):
            self.assertAlmostEqual(trans.x, p.x, prec)
            self.assertAlmostEqual(trans.y, p.y, prec)

    def test_transform_3d(self):
        p3d = GEOSGeometry('POINT (5 23 100)', 4326)
        p3d.transform(2774)
        self.assertAlmostEqual(p3d.z, 100, 3)

    def test_transform_noop(self):
        """""" Testing `transform` method (SRID match) """"""
        # transform() should no-op if source & dest SRIDs match,
        # regardless of whether GDAL is available.
        g = GEOSGeometry('POINT (-104.609 38.255)', 4326)
        gt = g.tuple
        g.transform(4326)
        self.assertEqual(g.tuple, gt)
        self.assertEqual(g.srid, 4326)

        g = GEOSGeometry('POINT (-104.609 38.255)', 4326)
        g1 = g.transform(4326, clone=True)
        self.assertEqual(g1.tuple, g.tuple)
        self.assertEqual(g1.srid, 4326)
        self.assertIsNot(g1, g, ""Clone didn't happen"")

    def test_transform_nosrid(self):
        """""" Testing `transform` method (no SRID or negative SRID) """"""

        g = GEOSGeometry('POINT (-104.609 38.255)', srid=None)
        with self.assertRaises(GEOSException):
            g.transform(2774)

        g = GEOSGeometry('POINT (-104.609 38.255)', srid=None)
        with self.assertRaises(GEOSException):
            g.transform(2774, clone=True)

        g = GEOSGeometry('POINT (-104.609 38.255)', srid=-1)
        with self.assertRaises(GEOSException):
            g.transform(2774)

        g = GEOSGeometry('POINT (-104.609 38.255)', srid=-1)
        with self.assertRaises(GEOSException):
            g.transform(2774, clone=True)

    def test_extent(self):
        ""Testing `extent` method.""
        # The xmin, ymin, xmax, ymax of the MultiPoint should be returned.
        mp = MultiPoint(Point(5, 23), Point(0, 0), Point(10, 50))
        self.assertEqual((0.0, 0.0, 10.0, 50.0), mp.extent)
        pnt = Point(5.23, 17.8)
        # Extent of points is just the point itself repeated.
        self.assertEqual((5.23, 17.8, 5.23, 17.8), pnt.extent)
        # Testing on the 'real world' Polygon.
        poly = fromstr(self.geometries.polygons[3].wkt)
        ring = poly.shell
        x, y = ring.x, ring.y
        xmin, ymin = min(x), min(y)
        xmax, ymax = max(x), max(y)
        self.assertEqual((xmin, ymin, xmax, ymax), poly.extent)

    def test_pickle(self):
        ""Testing pickling and unpickling support.""
        # Creating a list of test geometries for pickling,
        # and setting the SRID on some of them.
        def get_geoms(lst, srid=None):
            return [GEOSGeometry(tg.wkt, srid) for tg in lst]
        tgeoms = get_geoms(self.geometries.points)
        tgeoms.extend(get_geoms(self.geometries.multilinestrings, 4326))
        tgeoms.extend(get_geoms(self.geometries.polygons, 3084))
        tgeoms.extend(get_geoms(self.geometries.multipolygons, 3857))
        tgeoms.append(Point(srid=4326))
        tgeoms.append(Point())
        for geom in tgeoms:
            s1 = pickle.dumps(geom)
            g1 = pickle.loads(s1)
            self.assertEqual(geom, g1)
            self.assertEqual(geom.srid, g1.srid)

    def test_prepared(self):
        ""Testing PreparedGeometry support.""
        # Creating a simple multipolygon and getting a prepared version.
        mpoly = GEOSGeometry('MULTIPOLYGON(((0 0,0 5,5 5,5 0,0 0)),((5 5,5 10,10 10,10 5,5 5)))')
        prep = mpoly.prepared

        # A set of test points.
        pnts = [Point(5, 5), Point(7.5, 7.5), Point(2.5, 7.5)]
        for pnt in pnts:
            # Results should be the same (but faster)
            self.assertEqual(mpoly.contains(pnt), prep.contains(pnt))
            self.assertEqual(mpoly.intersects(pnt), prep.intersects(pnt))
            self.assertEqual(mpoly.covers(pnt), prep.covers(pnt))

        self.assertTrue(prep.crosses(fromstr('LINESTRING(1 1, 15 15)')))
        self.assertTrue(prep.disjoint(Point(-5, -5)))
        poly = Polygon(((-1, -1), (1, 1), (1, 0), (-1, -1)))
        self.assertTrue(prep.overlaps(poly))
        poly = Polygon(((-5, 0), (-5, 5), (0, 5), (-5, 0)))
        self.assertTrue(prep.touches(poly))
        poly = Polygon(((-1, -1), (-1, 11), (11, 11), (11, -1), (-1, -1)))
        self.assertTrue(prep.within(poly))

        # Original geometry deletion should not crash the prepared one (#21662)
        del mpoly
        self.assertTrue(prep.covers(Point(5, 5)))

    def test_line_merge(self):
        ""Testing line merge support""
        ref_geoms = (fromstr('LINESTRING(1 1, 1 1, 3 3)'),
                     fromstr('MULTILINESTRING((1 1, 3 3), (3 3, 4 2))'),
                     )
        ref_merged = (fromstr('LINESTRING(1 1, 3 3)'),
                      fromstr('LINESTRING (1 1, 3 3, 4 2)'),
                      )
        for geom, merged in zip(ref_geoms, ref_merged):
            self.assertEqual(merged, geom.merged)

    def test_valid_reason(self):
        ""Testing IsValidReason support""

        g = GEOSGeometry(""POINT(0 0)"")
        self.assertTrue(g.valid)
        self.assertIsInstance(g.valid_reason, str)
        self.assertEqual(g.valid_reason, ""Valid Geometry"")

        g = GEOSGeometry(""LINESTRING(0 0, 0 0)"")

        self.assertFalse(g.valid)
        self.assertIsInstance(g.valid_reason, str)
        self.assertTrue(g.valid_reason.startswith(""Too few points in geometry component""))

    def test_linearref(self):
        ""Testing linear referencing""

        ls = fromstr('LINESTRING(0 0, 0 10, 10 10, 10 0)')
        mls = fromstr('MULTILINESTRING((0 0, 0 10), (10 0, 10 10))')

        self.assertEqual(ls.project(Point(0, 20)), 10.0)
        self.assertEqual(ls.project(Point(7, 6)), 24)
        self.assertEqual(ls.project_normalized(Point(0, 20)), 1.0 / 3)

        self.assertEqual(ls.interpolate(10), Point(0, 10))
        self.assertEqual(ls.interpolate(24), Point(10, 6))
        self.assertEqual(ls.interpolate_normalized(1.0 / 3), Point(0, 10))

        self.assertEqual(mls.project(Point(0, 20)), 10)
        self.assertEqual(mls.project(Point(7, 6)), 16)

        self.assertEqual(mls.interpolate(9), Point(0, 9))
        self.assertEqual(mls.interpolate(17), Point(10, 7))

    def test_deconstructible(self):
        """"""
        Geometry classes should be deconstructible.
        """"""
        point = Point(4.337844, 50.827537, srid=4326)
        path, args, kwargs = point.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.point.Point')
        self.assertEqual(args, (4.337844, 50.827537))
        self.assertEqual(kwargs, {'srid': 4326})

        ls = LineString(((0, 0), (1, 1)))
        path, args, kwargs = ls.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.linestring.LineString')
        self.assertEqual(args, (((0, 0), (1, 1)),))
        self.assertEqual(kwargs, {})

        ls2 = LineString([Point(0, 0), Point(1, 1)], srid=4326)
        path, args, kwargs = ls2.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.linestring.LineString')
        self.assertEqual(args, ([Point(0, 0), Point(1, 1)],))
        self.assertEqual(kwargs, {'srid': 4326})

        ext_coords = ((0, 0), (0, 1), (1, 1), (1, 0), (0, 0))
        int_coords = ((0.4, 0.4), (0.4, 0.6), (0.6, 0.6), (0.6, 0.4), (0.4, 0.4))
        poly = Polygon(ext_coords, int_coords)
        path, args, kwargs = poly.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.polygon.Polygon')
        self.assertEqual(args, (ext_coords, int_coords))
        self.assertEqual(kwargs, {})

        lr = LinearRing((0, 0), (0, 1), (1, 1), (0, 0))
        path, args, kwargs = lr.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.linestring.LinearRing')
        self.assertEqual(args, ((0, 0), (0, 1), (1, 1), (0, 0)))
        self.assertEqual(kwargs, {})

        mp = MultiPoint(Point(0, 0), Point(1, 1))
        path, args, kwargs = mp.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.collections.MultiPoint')
        self.assertEqual(args, (Point(0, 0), Point(1, 1)))
        self.assertEqual(kwargs, {})

        ls1 = LineString((0, 0), (1, 1))
        ls2 = LineString((2, 2), (3, 3))
        mls = MultiLineString(ls1, ls2)
        path, args, kwargs = mls.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.collections.MultiLineString')
        self.assertEqual(args, (ls1, ls2))
        self.assertEqual(kwargs, {})

        p1 = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))
        p2 = Polygon(((1, 1), (1, 2), (2, 2), (1, 1)))
        mp = MultiPolygon(p1, p2)
        path, args, kwargs = mp.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.collections.MultiPolygon')
        self.assertEqual(args, (p1, p2))
        self.assertEqual(kwargs, {})

        poly = Polygon(((0, 0), (0, 1), (1, 1), (0, 0)))
        gc = GeometryCollection(Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly)
        path, args, kwargs = gc.deconstruct()
        self.assertEqual(path, 'django.contrib.gis.geos.collections.GeometryCollection')
        self.assertEqual(args, (Point(0, 0), MultiPoint(Point(0, 0), Point(1, 1)), poly))
        self.assertEqual(kwargs, {})

    def test_subclassing(self):
        """"""
        GEOSGeometry subclass may itself be subclassed without being forced-cast
        to the parent class during `__init__`.
        """"""
        class ExtendedPolygon(Polygon):
            def __init__(self, *args, data=0, **kwargs):
                super().__init__(*args, **kwargs)
                self._data = data

            def __str__(self):
                return ""EXT_POLYGON - data: %d - %s"" % (self._data, self.wkt)

        ext_poly = ExtendedPolygon(((0, 0), (0, 1), (1, 1), (0, 0)), data=3)
        self.assertEqual(type(ext_poly), ExtendedPolygon)
        # ExtendedPolygon.__str__ should be called (instead of Polygon.__str__).
        self.assertEqual(str(ext_poly), ""EXT_POLYGON - data: 3 - POLYGON ((0 0, 0 1, 1 1, 0 0))"")
        self.assertJSONEqual(
            ext_poly.json,
            '{""coordinates"": [[[0, 0], [0, 1], [1, 1], [0, 0]]], ""type"": ""Polygon""}',
        )

    def test_geos_version_tuple(self):
        versions = (
            (b'3.0.0rc4-CAPI-1.3.3', (3, 0, 0)),
            (b'3.0.0-CAPI-1.4.1', (3, 0, 0)),
            (b'3.4.0dev-CAPI-1.8.0', (3, 4, 0)),
            (b'3.4.0dev-CAPI-1.8.0 r0', (3, 4, 0)),
            (b'3.6.2-CAPI-1.10.2 4d2925d6', (3, 6, 2)),
        )
        for version_string, version_tuple in versions:
            with self.subTest(version_string=version_string):
                with mock.patch('django.contrib.gis.geos.libgeos.geos_version', lambda: version_string):
                    self.assertEqual(geos_version_tuple(), version_tuple)

    def test_from_gml(self):
        self.assertEqual(
            GEOSGeometry('POINT(0 0)'),
            GEOSGeometry.from_gml(
                '<gml:Point gml:id=""p21"" srsName=""http://www.opengis.net/def/crs/EPSG/0/4326"">'
                '    <gml:pos srsDimension=""2"">0 0</gml:pos>'
                '</gml:Point>'
            ),
        )

    def test_from_ewkt(self):
        self.assertEqual(GEOSGeometry.from_ewkt('SRID=1;POINT(1 1)'), Point(1, 1, srid=1))
        self.assertEqual(GEOSGeometry.from_ewkt('POINT(1 1)'), Point(1, 1))

    def test_from_ewkt_empty_string(self):
        msg = 'Expected WKT but got an empty string.'
        with self.assertRaisesMessage(ValueError, msg):
            GEOSGeometry.from_ewkt('')
        with self.assertRaisesMessage(ValueError, msg):
            GEOSGeometry.from_ewkt('SRID=1;')

    def test_from_ewkt_invalid_srid(self):
        msg = 'EWKT has invalid SRID part.'
        with self.assertRaisesMessage(ValueError, msg):
            GEOSGeometry.from_ewkt('SRUD=1;POINT(1 1)')
        with self.assertRaisesMessage(ValueError, msg):
            GEOSGeometry.from_ewkt('SRID=WGS84;POINT(1 1)')

    def test_fromstr_scientific_wkt(self):
        self.assertEqual(GEOSGeometry('POINT(1.0e-1 1.0e+1)'), Point(.1, 10))

    def test_normalize(self):
        g = MultiPoint(Point(0, 0), Point(2, 2), Point(1, 1))
        self.assertIsNone(g.normalize())
        self.assertTrue(g.equals_exact(MultiPoint(Point(2, 2), Point(1, 1), Point(0, 0))))

    @skipIf(geos_version_tuple() < (3, 8), 'GEOS >= 3.8.0 is required')
    def test_make_valid(self):
        poly = GEOSGeometry('POLYGON((0 0, 0 23, 23 0, 23 23, 0 0))')
        self.assertIs(poly.valid, False)
        valid_poly = poly.make_valid()
        self.assertIs(valid_poly.valid, True)
        self.assertNotEqual(valid_poly, poly)

        valid_poly2 = valid_poly.make_valid()
        self.assertIs(valid_poly2.valid, True)
        self.assertEqual(valid_poly, valid_poly2)

    @mock.patch('django.contrib.gis.geos.libgeos.geos_version', lambda: b'3.7.3')
    def test_make_valid_geos_version(self):
        msg = 'GEOSGeometry.make_valid() requires GEOS >= 3.8.0.'
        poly = GEOSGeometry('POLYGON((0 0, 0 23, 23 0, 23 23, 0 0))')
        with self.assertRaisesMessage(GEOSException, msg):
            poly.make_valid()

    def test_empty_point(self):
        p = Point(srid=4326)
        self.assertEqual(p.ogr.ewkt, p.ewkt)

        self.assertEqual(p.transform(2774, clone=True), Point(srid=2774))
        p.transform(2774)
        self.assertEqual(p, Point(srid=2774))

    def test_linestring_iter(self):
        ls = LineString((0, 0), (1, 1))
        it = iter(ls)
        # Step into CoordSeq iterator.
        next(it)
        ls[:] = []
        with self.assertRaises(IndexError):
            next(it)",1,334 2000 40 2001 44 2002 41 58 348 2003 40 2004 41 58 648 385 2005 398 2004 46 2006 46 2007 58 2008 61 2009 40 2005 46 2010 41 392 2008 46 2011 58 2004 46 2012 40 2005 46 2013 44 2008 46 2010 41 348 2014 40 2004 41 58 648 385 2005 398 2004 46 2006 46 2015 58 2008 61 2009 40 2005 46 2010 41 2004 46 2012 40 2005 46 2016 44 2008 46 2016 46 2017 40 41 41 348 2018 40 2004 41 58 648 621 2019 61 648 2020 61 648 621 2021 61 648 621 2022 61 648 2023 61 2024 40 1500 44 1501 44 2025 61 1505 41 2026 61 2024 40 1500 44 1501 44 1502 44 2025 61 1505 41 621 2004 46 2012 40 2019 44 2023 46 2016 41 2004 46 2012 40 2020 44 2026 46 2016 41 621 621 621 2004 46 2012 40 2021 44 2023 46 2027 41 2004 46 2012 40 2022 44 2026 46 2027 41 2004 46 2028 40 2029 40 2022 41 46 2011 44 304 41 621 2004 46 2012 40 2030 40 2031 40 2021 41 41 44 2023 46 2032 41 2004 46 2012 40 2030 40 2031 40 2022 41 41 44 2026 46 2032 41 621 2004 46 2012 40 1505 44 2029 40 2021 41 46 2025 41 348 2033 40 2004 41 58 648 385 2034 398 2004 46 2006 46 2007 58 2008 61 2009 40 2034 46 2010 41 2035 61 2036 40 2034 44 648 44 302 41 392 2035 58 2004 46 2012 40 2035 44 2008 46 2035 41 348 2037 40 2004 41 58 648 621 385 2038 398 2004 46 2006 46 2039 58 497 2004 46 2040 40 40 2041 44 2042 41 41 58 2009 40 2038 46 2010 41 621 497 2004 46 2040 40 2041 41 58 2029 40 2030 40 648 41 41 334 2043 58 434 621 497 2004 46 2040 40 2044 41 58 2029 40 2043 40 41 41 621 497 2004 46 2040 40 2044 41 58 2029 40 303 41 348 2045 40 2004 41 58 648 385 2005 398 2004 46 2006 46 2015 58 2008 61 2009 40 2005 46 2010 41 2046 61 2008 46 2046 2004 46 2012 40 2046 46 2016 40 41 46 2047 40 41 44 2005 46 2016 41 348 2048 40 2004 41 58 648 385 2005 398 2004 46 2006 46 2015 58 2049 61 2029 40 2005 46 2016 41 621 2050 61 2009 40 2005 46 2010 41 2004 46 2012 40 2050 46 2010 44 2049 46 2010 41 348 2051 40 2004 41 58 648 385 2005 398 2004 46 2006 46 2015 58 2046 61 2030 40 2052 46 2053 40 2005 46 2016 41 41 2049 61 2029 40 2046 41 621 2050 61 2009 40 2005 46 2010 41 2004 46 2012 40 2050 46 2010 44 2049 46 2010 41 348 2054 40 2004 41 58 648 2055 61 40 45 1501 44 1506 41 385 2025 398 2055 58 385 2056 398 2004 46 2006 46 2057 58 2013 61 648 37 40 2025 44 2056 46 2010 41 2058 61 2009 40 2013 41 2004 46 2012 40 2025 44 2058 46 2025 41 2004 46 2012 40 2025 44 2058 46 2059 46 2025 41 2004 46 2012 40 2025 44 2009 40 2058 46 2013 41 46 2025 41 621 348 2060 40 2004 41 58 648 385 2005 398 2004 46 2006 46 2061 58 2008 61 2029 40 2005 46 2010 41 392 422 2062 40 2005 44 648 41 58 621 2004 46 2012 40 2063 46 2064 40 2005 46 2063 41 44 2063 46 2064 40 2008 46 2063 41 41 2004 46 2012 40 2063 46 2064 40 2005 46 2063 41 44 2063 46 2064 40 2008 46 2065 41 41 2004 46 2012 40 2029 40 2005 46 2010 44 1505 41 44 2029 40 2008 46 2063 41 41 348 2066 40 2004 41 58 2067 61 123 648 58 648 44 648 58 91 1502 44 1503 93 44 648 58 123 648 58 648 44 648 58 123 648 58 648 125 125 125 2004 46 2012 40 2029 40 2063 46 2068 40 2067 41 41 44 2024 40 1502 44 1503 44 2025 61 1505 41 41 348 2069 40 2004 41 58 648 2070 61 2029 40 648 41 2071 61 2072 40 41 2071 46 2073 40 2070 46 2010 46 2074 40 41 41 2075 61 2072 40 41 2075 46 2073 40 2052 40 2070 46 2046 41 41 621 621 385 2076 398 40 2071 44 2075 41 58 2076 46 2077 40 1500 41 2078 61 2079 40 2076 41 2004 46 2012 40 2070 44 2078 41 348 2080 40 2004 41 58 648 2056 61 2009 40 648 41 2004 46 2012 40 2056 44 2056 46 2010 41 2004 46 2081 40 2056 44 648 41 2082 61 2009 40 648 41 2004 46 2012 40 2082 44 2082 46 2010 41 2004 46 2081 40 2056 44 648 41 2004 46 2012 40 2056 44 648 41 621 621 385 2005 398 40 2056 44 2082 41 58 2004 46 2083 40 2005 41 2004 46 2081 40 2005 44 123 648 58 648 125 41 2004 46 2084 40 2005 44 302 41 348 2085 40 2004 41 58 2086 61 2024 40 1502 44 1503 41 2087 61 2024 40 1502 44 1503 44 2025 61 1505 41 2088 61 2024 40 1502 44 1503 44 2025 61 1506 41 2089 61 2090 40 2086 44 2025 61 1505 41 2091 61 2090 40 2087 41 2092 61 2090 40 2088 41 2004 46 2081 40 2093 40 2086 41 44 2093 40 2087 41 41 2004 46 2081 40 2093 40 2086 41 44 2093 40 2088 41 41 2004 46 2081 40 2093 40 2087 41 44 2093 40 2088 41 41 2004 46 2081 40 2093 40 2089 41 44 2093 40 2091 41 41 2004 46 2012 40 2093 40 2091 41 44 2093 40 2092 41 41 2004 46 2081 40 2093 40 2089 41 44 2093 40 2086 41 41 2004 46 2081 40 2093 40 2091 41 44 2093 40 2087 41 41 2004 46 2081 40 2093 40 2092 41 44 2093 40 2088 41 41 348 2094 40 2004 41 58 648 2095 61 2024 40 1502 44 1503 41 2096 61 2024 40 1502 44 1503 44 2025 61 1505 41 2097 61 2024 40 1502 44 1503 44 2025 61 1506 41 621 2004 46 2081 40 2095 44 2096 41 2004 46 2081 40 2096 44 2097 41 621 2004 46 2081 40 2095 44 2096 46 2013 41 2004 46 2081 40 2096 44 2095 46 2013 41 2004 46 2081 40 2096 44 2097 46 2013 41 621 2004 46 2012 40 2097 44 2097 41 2004 46 2012 40 2097 44 2097 46 2013 41 621 2004 46 2081 40 2097 44 2097 46 2010 41 621 2004 46 2012 40 2095 44 648 41 2004 46 2081 40 2096 44 648 41 348 2098 40 2004 41 58 648 2099 61 2009 40 648 41 385 2056 398 2004 46 2006 46 2100 58 621 2078 61 2009 40 2056 46 2010 41 2004 46 2012 40 2078 46 2101 44 648 41 2004 46 2012 40 2078 46 2102 44 1500 41 2004 46 2012 40 2078 46 2103 44 1500 41 2004 46 2012 40 2056 46 2104 44 2078 46 2104 41 2004 46 2012 40 2056 46 2105 44 2078 46 2105 41 2004 46 2012 40 2078 44 2009 40 2056 46 2010 41 41 2004 46 2028 40 2078 614 2099 44 302 41 621 621 2004 46 2106 40 2056 46 2104 44 2078 46 2107 91 1500 93 44 1502 41 2004 46 2106 40 2056 46 2105 44 2078 46 2107 91 1501 93 44 1502 41 621 392 2062 40 2056 44 648 41 58 2004 46 2028 40 2078 46 2011 44 304 41 2004 46 2012 40 2056 46 2108 44 2078 46 2108 41 2004 46 2012 40 2056 46 2108 44 2078 46 2107 91 1502 93 44 1502 41 2109 61 40 2056 46 2104 44 2056 46 2105 44 2056 46 2108 41 2110 61 40 1502 44 1502 44 1502 41 2111 61 40 1502 44 1502 44 1502 41 360 58 2004 46 2028 40 2078 46 2011 44 302 41 2004 46 2112 40 2078 46 2108 41 2109 61 40 2056 46 2104 44 2056 46 2105 41 2110 61 40 1502 44 1502 41 2111 61 40 1502 44 1502 41 621 2004 46 2012 40 2056 46 2113 44 2078 46 2113 46 2107 41 621 2114 61 2024 40 2109 41 621 2115 61 2024 40 42 2109 41 621 2004 46 2012 40 2078 44 2114 41 2004 46 2012 40 2078 44 2115 41 621 2078 46 2105 61 1502 2078 46 2104 61 1502 2004 46 2012 40 1502 44 2078 46 2105 41 2004 46 2012 40 1502 44 2078 46 2104 41 621 2078 46 2107 61 2110 2004 46 2012 40 2110 44 2078 46 2107 41 2078 46 2116 61 2111 2004 46 2012 40 2111 44 2078 46 2116 41 2099 61 2078 621 348 2117 40 2004 41 58 2118 61 2029 40 648 44 1505 41 2004 46 2012 40 2118 46 2025 44 1505 41 2118 46 2119 40 41 2004 46 2012 40 2118 46 2013 44 648 41 348 2120 40 2004 41 58 648 385 2121 398 2004 46 2006 46 2122 58 2123 61 2009 40 2121 46 2010 41 2004 46 2012 40 2123 46 2101 44 648 41 2004 46 2012 40 2123 46 2102 44 1502 41 2004 46 2012 40 2123 46 2103 44 1500 41 2004 46 2106 40 2121 46 2113 91 1500 93 44 2123 46 2113 46 2107 91 1500 93 44 1502 41 2004 46 2106 40 2121 46 2113 91 1501 93 44 2123 46 2113 46 2107 91 1501 93 44 1502 41 497 2004 46 2040 40 2124 41 58 2123 46 2125 40 2126 40 2123 41 41 2004 46 2012 40 2121 46 2113 44 2123 46 2113 46 2107 41 2004 46 2012 40 2121 46 2116 44 2107 40 2127 46 2107 385 2127 398 2123 41 41 385 2056 398 2123 58 2004 46 2012 40 2056 46 2101 44 648 41 2004 46 2012 40 2056 46 2102 44 1500 41 2004 46 2028 40 2056 46 362 44 302 41 2004 46 2028 40 2056 46 2128 44 304 41 348 2129 40 2004 41 58 648 2099 61 2009 40 648 41 385 410 398 2004 46 2006 46 2130 58 2082 61 2009 40 410 46 2010 41 2004 46 2012 40 2082 46 2101 44 648 41 2004 46 2012 40 2082 46 2102 44 1501 41 2004 46 2012 40 2082 46 2103 44 1501 41 2004 46 2028 40 2082 46 362 44 302 41 2004 46 2028 40 2082 46 2131 44 302 41 392 2062 40 410 44 648 41 58 2004 46 2012 40 410 46 2113 44 2082 46 2113 46 2107 41 392 2062 40 410 44 648 41 58 2004 46 2012 40 410 46 2132 44 2082 46 2107 41 2004 46 2012 40 2082 44 2009 40 410 46 2010 41 41 2004 46 2028 40 2082 614 2099 44 302 41 621 497 2004 46 2040 40 2124 41 58 2082 46 2125 40 2126 40 2082 41 41 2099 61 2082 621 2004 46 2012 40 2082 44 2133 40 2082 46 2107 41 41 621 2004 46 2012 40 2082 44 2133 40 42 2082 46 2107 41 41 621 2004 46 2012 40 2082 44 2133 40 91 411 40 2132 41 385 2132 398 2082 46 2107 93 41 41 621 621 2004 46 2012 40 2082 46 2010 44 2133 40 42 2107 40 2024 40 2132 41 385 2132 398 2082 46 2107 41 41 46 2010 41 392 2134 58 2004 46 2012 40 2082 44 2133 40 2134 46 310 40 2082 46 2107 41 41 41 621 497 2004 46 2135 40 2044 44 648 41 58 2133 40 40 1500 44 1500 41 41 497 2004 46 2135 40 2042 44 648 41 58 2133 40 91 40 1500 44 1500 41 93 41 392 2134 58 497 2004 46 2135 40 2042 44 648 41 58 2133 40 2134 46 310 40 91 40 1500 44 1500 41 93 41 41 497 2136 46 2137 40 648 44 302 41 58 497 2004 46 2135 40 2044 44 648 41 58 2133 40 648 41 621 2004 46 2012 40 411 40 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1502 44 1502 41 41 41 44 91 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1502 44 1502 41 93 41 348 2138 40 2004 41 58 410 61 2029 40 648 44 1505 41 2004 46 2012 40 410 46 2025 44 1505 41 410 46 2119 40 41 2004 46 2012 40 410 46 2013 44 648 41 348 2139 40 2004 41 58 2140 61 2141 40 40 1500 44 1500 41 44 40 1501 44 1500 41 44 40 1500 44 1501 41 44 40 1500 44 1500 41 41 2004 46 2028 40 2140 46 2142 44 304 41 2140 46 2119 40 41 2004 46 2028 40 2140 46 2142 44 302 41 2143 61 648 497 2004 46 2135 40 2042 44 2143 41 58 2141 40 41 46 2142 64 2144 40 2145 40 41 60 40 1502 44 1502 41 44 648 41 348 2146 40 2004 41 58 2004 46 2139 40 41 64 2144 40 2145 40 41 60 40 1502 44 1502 41 44 648 41 348 2147 40 2004 41 58 497 2136 46 2137 40 648 41 311 2148 58 2148 46 2149 61 1500 2148 46 2150 61 648 2143 61 648 497 2004 46 2135 40 2041 44 2143 41 58 2141 40 40 1500 44 1500 41 44 40 1501 44 1500 41 44 40 1500 44 1501 41 44 40 1500 44 1500 41 41 46 2142 64 2136 46 2137 40 648 44 409 58 648 41 348 2151 40 2004 41 58 2004 46 2139 40 41 348 2152 40 2004 41 58 648 2099 61 2009 40 648 41 385 410 398 2004 46 2006 46 2153 58 2154 61 2009 40 410 46 2010 41 2004 46 2012 40 2154 46 2101 44 648 41 2004 46 2012 40 2154 46 2102 44 1502 41 2004 46 2012 40 2154 46 2103 44 1501 41 2004 46 2106 40 410 46 2113 91 1500 93 44 2154 46 2113 46 2104 44 1502 41 2004 46 2106 40 410 46 2113 91 1501 93 44 2154 46 2113 46 2105 44 1502 41 2004 46 2012 40 2154 44 2009 40 410 46 2010 41 41 2004 46 2028 40 2154 614 2099 44 302 41 621 2099 61 2154 385 2082 398 2154 58 2004 46 2012 40 2082 46 2101 44 648 41 2004 46 2012 40 2082 46 2102 44 1501 41 2004 46 2028 40 2082 46 362 44 302 41 497 2004 46 2040 40 2124 41 58 2154 46 2125 40 2126 40 2154 41 41 2004 46 2012 40 2154 46 2010 44 2155 40 42 2107 40 2156 46 335 40 41 385 2156 398 2154 41 41 46 2010 41 2004 46 2012 40 2154 44 2155 40 42 2107 40 2133 40 2156 46 2107 41 385 2156 398 2154 41 41 41 348 2157 40 2004 41 58 648 385 2158 398 2004 46 2006 46 2159 58 2140 61 2009 40 2158 46 2010 41 2004 46 2012 40 2140 46 2101 44 648 41 2004 46 2012 40 2140 46 2102 44 1502 41 2004 46 2012 40 2140 46 2103 44 1501 41 2004 46 2012 40 2158 46 2160 44 2126 40 2140 41 41 2004 46 2028 40 2140 46 2128 44 304 41 2004 46 2028 40 2140 46 362 44 302 41 621 2004 46 2012 40 2140 44 2141 40 2140 46 2107 41 41 2004 46 2012 40 2140 44 2141 40 42 2140 46 2107 41 41 2004 46 2012 40 2140 44 2141 40 91 411 40 2132 41 385 2132 398 2140 46 2107 93 41 41 392 2134 58 2004 46 2012 40 2140 44 2141 40 2134 46 310 40 2140 46 2107 41 41 41 497 2004 46 2135 40 2042 44 648 41 58 2141 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 497 2004 46 2135 40 2042 44 648 41 58 2141 40 91 40 1500 44 1500 41 93 41 392 2134 58 497 2004 46 2135 40 2042 44 648 41 58 2141 40 2134 46 310 40 91 40 1500 44 1500 41 93 41 41 348 2161 40 2004 41 58 2004 46 2162 40 2141 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 46 2063 44 648 44 41 348 2163 40 2004 41 58 648 2164 61 40 45 1504 44 45 1503 44 1504 44 1503 41 2056 61 2165 46 2166 40 2164 41 2004 46 2012 40 2164 44 2056 46 2167 41 621 2104 61 1502 2164 61 40 1500 44 1500 44 1501 44 2104 41 2056 61 2165 46 2166 40 2164 41 2105 61 2056 46 2167 91 45 1501 93 2004 46 2012 40 2168 40 2104 44 648 41 44 2168 40 2105 44 648 41 41 348 2169 40 2004 41 58 648 2099 61 2009 40 648 41 385 2056 398 2004 46 2006 46 2057 58 621 2058 61 2009 40 2056 46 2010 41 2004 46 2012 40 2058 46 2101 44 648 41 2004 46 2012 40 2058 46 2102 44 1502 41 2004 46 2012 40 2058 46 2103 44 1502 41 2004 46 2028 40 2058 46 362 44 302 41 2004 46 2028 40 2058 46 2131 44 302 41 2004 46 2012 40 2056 46 2170 44 2058 46 2171 41 2004 46 2012 40 2056 46 2170 43 1501 44 2126 40 2058 41 41 621 2004 46 2012 40 2056 46 2160 44 2058 46 2172 41 621 2004 46 2106 40 2056 46 2173 44 2058 46 2173 44 1502 41 2004 46 2106 40 2056 46 2113 91 1500 93 44 2058 46 2113 46 2107 91 1500 93 44 1502 41 2004 46 2106 40 2056 46 2113 91 1501 93 44 2058 46 2113 46 2107 91 1501 93 44 1502 41 621 2004 46 2012 40 2058 44 2009 40 2056 46 2010 41 41 621 2004 46 2028 40 2058 614 2099 44 302 41 621 2004 46 2028 40 2058 631 2099 44 304 41 621 621 2131 61 2058 46 2174 2004 46 2012 40 2131 46 2101 44 648 41 2004 46 2012 40 2131 46 2102 44 1502 41 392 2056 46 2175 58 2004 46 2012 40 2056 46 2175 44 2131 46 2107 41 2004 46 2012 40 2056 46 2175 44 2058 91 1500 93 46 2107 41 621 621 497 2004 46 2040 40 2124 41 58 2058 46 2125 40 2126 40 2058 41 41 497 2004 46 2040 40 2124 41 58 2058 46 2176 40 2126 40 2058 41 44 302 41 497 2004 46 2040 40 2124 41 58 2058 46 2125 40 45 1501 42 2126 40 2058 41 45 1501 41 621 385 2177 398 2058 58 2004 46 2012 40 2177 46 2101 44 648 41 2004 46 2012 40 2177 46 2102 44 1502 41 621 497 2004 46 2040 40 2044 41 58 2165 40 1500 44 91 1501 44 1502 44 1502 93 41 497 2004 46 2040 40 2044 41 58 2165 40 648 41 621 2178 44 42 2179 61 2058 2004 46 2012 40 2058 44 2165 40 2178 44 2179 41 41 621 2180 61 2107 40 2177 46 2107 385 2177 398 2058 41 2004 46 2012 40 2058 44 2165 40 42 2180 41 41 621 2004 46 2012 40 2058 46 2010 44 2165 40 42 2107 40 2177 385 2177 398 2058 41 41 46 2010 41 2004 46 2012 40 2058 46 2010 44 2165 40 42 2107 40 2141 40 2177 46 2107 41 385 2177 398 2058 41 41 46 2010 41 348 2181 40 2004 41 58 621 2182 61 2183 40 41 466 61 2182 46 2184 40 648 41 2057 61 91 2009 40 2056 46 2010 41 385 2056 398 2004 46 2006 46 2185 91 58 1502 93 93 2186 61 466 46 2187 40 2188 40 123 648 58 2057 125 41 41 2004 46 2189 40 648 44 2186 41 348 2190 40 2004 41 58 2096 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 41 2097 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 41 2004 46 2191 40 2096 44 2097 41 2004 46 2192 40 2097 44 2096 41 2193 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1502 44 1500 41 44 40 1500 44 1500 41 41 41 2194 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1502 44 1502 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 41 2004 46 2191 40 2194 44 2193 41 2004 46 2192 40 2193 44 2194 41 348 2195 40 2004 41 58 648 2009 40 648 41 385 2121 398 2004 46 2006 46 2185 58 2196 61 2009 40 2121 46 2010 41 2004 46 2012 40 2196 46 2101 44 648 41 2004 46 2012 40 2196 46 2102 44 1502 41 2004 46 2012 40 2196 46 2103 44 1502 41 2004 46 2012 40 2121 46 2128 44 2196 46 2128 41 392 2121 46 2128 58 2004 46 2012 40 2121 46 2197 44 2196 46 2197 41 2004 46 2012 40 2121 46 2160 44 2196 46 2198 41 2004 46 2012 40 2121 46 2197 44 2126 40 2196 41 41 497 2004 46 2040 40 2124 41 58 2196 46 2125 40 2126 40 2196 41 41 385 2056 398 2196 58 2004 46 2012 40 2056 46 2101 44 648 41 2004 46 2012 40 2056 46 2102 44 1502 41 2004 46 2028 40 2056 46 2128 44 304 41 2004 46 2012 40 2196 46 2010 44 2199 40 42 2107 40 2058 46 335 40 41 385 2058 398 2196 41 41 46 2010 41 348 2200 40 2004 41 58 648 621 621 621 2058 61 2009 40 2004 46 2006 46 2057 91 1501 93 46 2010 41 2201 61 2058 91 1500 93 2202 61 2058 91 1501 93 621 351 2201 351 2202 2201 61 2058 91 1500 93 2202 61 2058 91 1501 93 621 351 2058 621 2203 40 2201 41 2203 40 2202 41 348 2204 40 2004 41 58 648 385 2056 398 2004 46 2006 46 2057 58 392 2056 46 2175 58 621 2058 61 2009 40 2056 46 2010 41 2205 61 2058 46 2174 46 2206 2004 46 2012 40 2056 46 2175 44 2205 46 2107 41 621 2004 46 2012 40 2126 40 2056 46 2175 41 44 2126 40 2205 41 41 621 621 385 2207 398 2208 40 2126 40 2056 46 2175 41 41 58 2209 61 2056 46 2175 91 2207 93 621 2210 61 2205 91 2207 93 621 2004 46 2012 40 2209 44 2210 41 621 392 2126 40 2209 41 614 1502 58 2211 61 40 1502 44 1503 41 360 58 2211 61 40 1502 44 1503 44 1502 41 2205 91 2207 93 61 2211 621 385 2212 398 2208 40 2126 40 2211 41 41 58 2205 91 2207 93 61 2211 2004 46 2012 40 2211 91 2212 93 44 2205 91 2207 93 91 2212 93 41 348 2213 40 2004 41 58 648 2005 61 2009 40 648 41 497 2004 46 2040 40 2041 41 58 2005 46 2214 40 1500 44 648 41 385 2215 398 2004 46 2006 46 2216 58 2217 61 2009 40 2215 46 2218 41 2219 61 2009 40 2215 46 2220 41 2004 46 2012 40 2215 46 2221 44 2217 46 2214 40 2219 44 2215 46 2222 41 41 2004 46 2012 40 2215 46 2222 44 2217 46 2223 40 2219 41 41 348 2224 40 2004 41 58 648 385 2207 398 2208 40 2126 40 2004 46 2006 46 2225 41 41 58 2217 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2218 41 2219 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2220 41 2226 61 2009 40 2004 46 2006 46 2227 91 2207 93 46 2010 41 2004 46 2028 40 2217 46 2228 40 2219 41 44 304 41 2229 61 2217 46 2230 40 2219 41 2004 46 2231 40 2226 46 2232 40 2229 41 41 2004 46 2231 40 2226 46 2232 40 2217 38 2219 41 41 621 2217 601 2219 621 2004 46 2231 40 2226 46 2232 40 2217 41 41 348 2233 40 2004 41 58 648 385 2207 398 2208 40 2126 40 2004 46 2006 46 2225 41 41 58 2217 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2218 41 2219 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2220 41 2234 61 2009 40 2004 46 2006 46 2235 91 2207 93 46 2010 41 2236 61 2217 46 483 40 2219 41 2004 46 2231 40 2234 46 2232 40 2236 41 41 2004 46 2231 40 2234 46 2232 40 2217 124 2219 41 41 621 2217 635 2219 621 2004 46 2231 40 2234 46 2232 40 2217 41 41 348 2237 40 2004 41 58 648 385 2207 398 2208 40 2126 40 2004 46 2006 46 2225 41 41 58 2217 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2218 41 2219 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2220 41 2234 61 2009 40 2004 46 2006 46 2235 91 2207 93 46 2010 41 2236 61 2238 40 2217 44 2219 41 46 2239 2004 46 2231 40 2234 46 2232 40 2236 41 41 348 2240 40 2004 41 58 648 385 2207 398 2208 40 2126 40 2004 46 2006 46 2225 41 41 58 2217 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2218 41 2219 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2220 41 2241 61 2009 40 2004 46 2006 46 2242 91 2207 93 46 2010 41 2243 61 2217 46 2244 40 2219 41 2004 46 2231 40 2241 46 2232 40 2243 41 41 2004 46 2231 40 2241 46 2232 40 2217 45 2219 41 41 621 2217 628 2219 621 2004 46 2231 40 2241 46 2232 40 2217 41 41 348 2245 40 2004 41 58 648 385 2207 398 2208 40 2126 40 2004 46 2006 46 2225 41 41 58 2217 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2218 41 2219 61 2009 40 2004 46 2006 46 2225 91 2207 93 46 2220 41 2241 61 2009 40 2004 46 2006 46 2246 91 2207 93 46 2010 41 2243 61 2217 46 2247 40 2219 41 2004 46 2231 40 2241 46 2232 40 2243 41 41 2004 46 2231 40 2241 46 2232 40 2217 94 2219 41 41 621 2217 651 2219 621 2004 46 2231 40 2241 46 2232 40 2217 41 41 348 2248 40 2004 41 58 2249 61 2004 46 2006 46 2250 91 1500 93 2005 61 2009 40 2249 46 2010 41 621 497 2004 46 2040 40 2251 46 2252 41 58 2005 46 2253 40 2249 46 2254 44 2255 61 1502 41 2004 46 2256 40 2004 46 2006 46 2250 44 648 41 348 2257 40 2004 41 58 2249 61 2004 46 2006 46 2258 91 1500 93 2005 61 2009 40 2249 46 2010 41 621 497 2004 46 2040 40 2251 46 2252 41 58 2005 46 2259 40 2249 46 2254 44 2255 61 1502 41 621 497 2004 46 2040 40 2251 46 2252 41 58 2005 46 2259 40 2249 46 2254 44 2260 61 1502 41 621 497 2004 46 2040 40 2041 41 58 2005 46 2259 40 2249 46 2254 44 2260 61 1503 41 621 497 2004 46 2040 40 2251 46 2252 41 58 2005 46 2259 40 2249 46 2254 44 2261 61 1502 41 621 497 2004 46 2040 40 2041 41 58 2005 46 2259 40 2249 46 2254 44 2261 61 1503 41 2004 46 2256 40 2262 46 2263 40 2004 46 2006 46 2250 44 2004 46 2006 46 2258 41 44 648 44 41 348 2256 40 2004 44 2006 44 2264 41 58 385 2249 398 2006 58 2005 61 2009 40 2249 46 2010 41 621 2265 61 2009 40 2249 46 2266 41 621 2267 61 123 2268 58 2036 40 2249 44 2268 41 385 2268 398 40 648 44 648 44 648 44 648 44 648 41 392 2062 40 2249 44 2268 41 125 2269 61 2036 40 2005 44 2264 41 40 638 2267 41 2004 46 2012 40 2265 46 2198 44 2269 46 2198 41 2004 46 2012 40 2126 40 2265 41 44 2126 40 2269 41 41 621 385 2212 398 2208 40 2126 40 2265 41 41 58 2270 61 2265 91 2212 93 2271 61 2269 91 2212 93 2004 46 2012 40 2126 40 2270 41 44 2126 40 2271 41 41 385 2272 398 2208 40 2126 40 2270 41 41 58 621 2004 46 2106 40 2270 91 2272 93 91 1500 93 44 2271 91 2272 93 91 1500 93 44 1502 41 2004 46 2106 40 2270 91 2272 93 91 1501 93 44 2271 91 2272 93 91 1501 93 44 1502 41 348 2273 40 2004 41 58 2058 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1502 41 44 40 1502 44 1502 41 44 40 1502 44 1500 41 44 40 1500 44 1500 41 41 41 2004 46 2231 40 2058 46 2274 40 2024 40 1502 44 1502 41 41 41 2004 46 2275 40 2058 46 2274 40 2024 40 1503 44 1503 41 41 41 348 2276 40 2004 41 58 2277 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 2278 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 2004 46 2275 40 2278 46 2279 41 2004 46 2231 40 2277 46 2279 41 348 2280 40 2004 41 58 648 621 2078 61 2024 40 1502 44 1503 44 2025 61 1505 41 2004 46 2012 40 1505 44 2078 46 2025 41 2078 46 2025 61 1505 2004 46 2012 40 1505 44 2078 46 2025 41 497 2004 46 2040 40 2251 46 2252 41 58 2078 46 2025 61 648 621 2058 61 2009 40 2004 46 2006 46 2057 91 1501 93 46 2010 44 2025 61 1505 41 2004 46 2012 40 1505 44 2058 46 2025 41 385 2131 398 2058 58 2004 46 2012 40 1505 44 2131 46 2025 41 2058 46 2025 61 1505 2004 46 2012 40 1505 44 2058 46 2059 46 2025 41 621 2281 61 2238 40 2024 40 1502 44 1503 41 44 2133 40 40 1500 44 1500 41 44 40 1502 44 1502 41 44 40 1502 44 1502 41 41 44 2025 61 1506 41 2004 46 2012 40 1506 44 2281 46 2025 41 385 2207 398 2208 40 2126 40 2281 41 41 58 2004 46 2012 40 1506 44 2281 91 2207 93 46 2025 41 621 621 621 2016 61 648 2096 61 2009 40 2016 41 2004 46 2012 40 1505 44 2096 46 2025 41 2097 61 2009 40 2096 46 2016 41 2004 46 2112 40 2097 46 2025 41 2193 61 2009 40 2096 46 2016 44 2025 61 45 1501 41 621 2004 46 2012 40 45 1501 44 2193 46 2025 41 621 2282 61 2024 40 1501 44 1501 41 2282 46 2025 61 2282 46 2025 621 2004 46 2012 40 2029 40 2078 46 2013 44 2025 61 2078 46 2025 41 46 2025 44 2078 46 2025 41 2004 46 2012 40 2029 40 2078 46 2032 44 2025 61 2078 46 2025 41 46 2025 44 2078 46 2025 41 497 2004 46 2135 40 2042 44 648 37 2078 46 2025 41 58 2029 40 2078 46 2013 44 2025 61 1501 41 497 2004 46 2135 40 2042 44 648 37 2078 46 2025 41 58 2029 40 2078 46 2032 44 2025 61 1501 41 348 2283 40 2004 41 58 648 385 2025 398 91 303 44 1507 93 58 2078 61 2024 40 1507 44 1507 44 2025 61 2025 41 2004 46 2231 40 2078 46 2013 46 2284 40 40 648 37 2025 392 2025 360 648 41 43 648 41 41 2004 46 2285 40 2078 46 2286 44 2287 46 2288 41 2004 46 2112 40 2078 46 2289 41 621 2290 61 2287 46 2291 40 2287 46 2292 40 648 648 41 44 2287 46 2292 40 1505 41 41 2293 61 2078 46 2294 40 2290 44 335 61 304 41 2004 46 2012 40 2293 46 2025 44 1505 41 2004 46 2106 40 2293 46 2104 44 1501 44 1501 41 2004 46 2106 40 2293 46 2105 44 1502 44 1501 41 348 2295 40 2004 41 58 648 621 385 2056 398 2004 46 2006 46 2057 58 2058 61 2009 40 2056 46 2010 41 621 497 2004 46 2040 40 2044 41 58 2058 46 2176 40 1500 44 2133 40 40 1501 44 1501 41 44 40 1502 44 1502 41 41 41 621 2296 61 2058 46 2059 46 2107 2297 61 91 93 385 2118 398 2296 58 2297 46 2298 40 40 2118 91 1500 93 43 1504 44 2118 91 1501 93 43 1504 41 41 2299 61 2141 40 42 2107 40 2297 41 41 621 2058 46 2174 61 2299 2203 40 2299 41 621 2004 46 2012 40 2058 46 2174 44 2299 41 2004 46 2012 40 2058 91 1500 93 44 2299 41 621 385 2034 398 2004 46 2006 46 2122 58 2121 61 2009 40 2034 46 2010 41 385 2207 398 2208 40 2126 40 2121 41 41 58 621 2078 61 2121 91 2207 93 418 61 2024 40 2300 46 2301 40 1503 44 1503 41 44 2300 46 2301 40 1503 44 1503 41 41 621 2121 91 2207 93 61 418 2203 40 418 41 621 2004 46 2012 40 2121 91 2207 93 44 418 41 2004 46 2012 40 2121 91 2207 93 46 2010 44 418 46 2010 41 2004 46 2081 40 2078 44 2121 91 2207 93 41 621 621 385 2034 398 2004 46 2006 46 2185 58 2196 61 2009 40 2034 46 2010 41 385 2207 398 2208 40 2126 40 2196 41 41 58 2058 61 2196 91 2207 93 2302 61 2196 91 2207 93 621 385 2212 398 2208 40 2126 40 2058 41 41 58 2177 61 2058 91 2212 93 385 2272 398 2208 40 2126 40 2177 41 41 58 2177 91 2272 93 61 40 2177 91 2272 93 91 1500 93 43 1504 44 2177 91 2272 93 91 1501 93 43 1504 41 2058 91 2212 93 61 2177 2004 46 2081 40 2196 91 2207 93 44 2058 41 621 2196 91 2207 93 61 2058 2203 40 2058 41 621 2004 46 2012 40 2196 91 2207 93 44 2058 41 2004 46 2081 40 2196 91 2207 93 44 2302 41 621 621 621 621 621 621 621 621 348 2303 40 2004 41 58 2056 61 2024 40 1500 44 1500 41 2056 91 58 93 61 40 1501 44 1502 44 1502 41 2004 46 2012 40 2056 44 2024 40 1501 44 1502 44 1502 41 41 2056 91 58 93 61 40 41 2004 46 2012 40 2056 46 2010 44 2024 40 41 41 2056 91 58 93 61 40 1501 44 1502 41 2004 46 2012 40 2056 46 2010 44 2024 40 1501 44 1502 41 41 497 2004 46 2040 40 2042 41 58 2056 91 58 93 61 40 1501 44 41 497 2004 46 2040 40 2042 41 58 2056 91 58 93 61 40 1501 44 1502 44 1502 44 1502 44 1502 41 348 2304 40 2004 41 58 2082 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 2082 91 58 93 61 40 41 2004 46 2012 40 2082 44 2133 40 41 41 2082 91 58 93 61 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1502 44 1502 41 41 2004 46 2012 40 2082 44 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1502 44 1502 41 41 41 497 2004 46 2040 40 2042 41 58 2082 91 58 93 61 40 1501 44 41 348 2305 40 2004 41 58 2082 61 2141 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 2082 91 58 93 61 40 41 2004 46 2012 40 2082 44 2141 40 41 41 2082 91 58 93 61 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 2004 46 2012 40 2082 44 2141 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 41 497 2004 46 2040 40 2042 41 58 2082 91 58 93 61 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1502 44 1502 41 41 348 2306 40 2004 41 58 2307 61 2165 40 41 2307 91 58 93 61 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 44 41 2004 46 2012 40 2307 44 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 44 41 41 2307 91 58 93 61 40 41 2004 46 2012 40 2307 44 2165 40 41 41 348 2308 40 2004 41 58 2056 61 2024 40 41 2281 61 2238 40 41 2281 91 58 93 61 91 2056 93 2004 46 2012 40 2281 44 2238 40 2056 41 41 2281 91 58 93 61 40 41 2004 46 2012 40 2281 44 2238 40 41 41 348 2309 40 2004 41 58 648 621 2078 61 2024 40 1502 44 1502 44 1502 41 2004 46 2012 40 40 1502 44 1502 44 1502 41 44 2078 46 2116 41 497 2004 46 2040 40 2044 41 58 2078 46 2107 61 40 1501 44 1502 41 2078 46 2116 61 40 1501 44 1502 44 1502 41 2004 46 2012 40 40 1501 44 1502 44 1502 41 44 2078 46 2116 41 621 2082 61 2133 40 40 1502 44 1502 44 1502 41 44 40 1503 44 1504 44 45 1504 41 41 2004 46 2012 40 40 40 1502 44 1502 44 1502 41 44 40 1503 44 1504 44 45 1504 41 41 44 2082 46 2107 41 497 2004 46 2040 40 2044 41 58 2082 46 2176 40 1500 44 40 1501 44 1502 41 41 2082 91 1500 93 61 40 1501 44 1502 44 1502 41 2004 46 2012 40 40 1501 44 1502 44 1502 41 44 2082 91 1500 93 41 348 2310 40 2004 41 58 648 621 2078 61 2024 40 1500 44 1500 41 2004 46 2012 40 1500 44 2078 46 2311 40 2024 40 1500 44 1500 41 41 41 621 2004 46 2012 40 1501 44 2078 46 2311 40 2024 40 1500 44 1501 41 41 41 621 2004 46 2106 40 1502 44 2078 46 2311 40 2024 40 1501 44 1501 41 41 44 1503 41 621 621 2312 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 44 40 1502 44 1502 41 41 2313 61 2133 40 40 1502 44 1502 41 44 40 1502 44 1501 41 44 40 1502 44 1500 41 41 2004 46 2012 40 1502 44 2312 46 2311 40 2313 41 41 348 2314 40 2004 41 58 648 621 2078 61 2024 40 1500 44 1500 41 2004 46 2012 40 1500 44 2078 46 2315 41 621 2082 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 2004 46 2106 40 1502 44 2082 46 2315 44 1503 41 621 2058 61 2165 40 2141 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 41 2004 46 2012 40 1502 44 2058 46 2315 41 621 2196 61 2199 40 2058 46 335 40 41 44 2058 41 2004 46 2012 40 1502 44 2196 46 2315 41 348 2316 40 2004 41 58 648 2317 61 91 2238 40 91 93 41 44 2009 40 648 41 44 2238 40 41 44 2009 40 648 41 44 2024 40 41 44 2009 40 648 41 44 2133 40 41 44 2009 40 648 41 44 2165 40 41 44 2009 40 648 41 44 2155 40 41 44 2009 40 648 41 44 2199 40 40 41 41 44 2199 40 41 44 93 392 2134 58 2317 46 2298 40 2133 40 2134 46 310 40 91 93 41 41 41 385 2005 398 2317 58 2004 46 2028 40 2005 46 362 44 304 41 621 392 2318 40 2005 44 2165 41 58 2004 46 2012 40 1501 44 2126 40 2005 41 41 621 2004 46 2012 40 1501 44 2005 46 2197 41 2004 46 2012 40 1500 44 2126 40 2005 91 1500 93 41 41 359 2318 40 2005 44 40 2024 44 2133 41 41 58 2004 46 2012 40 1501 44 2005 46 2197 41 2004 46 2012 40 1500 44 2126 40 2005 41 41 360 58 2004 46 2012 40 1500 44 2005 46 2197 41 2004 46 2012 40 1500 44 2126 40 2005 41 41 621 392 2318 40 2005 44 2024 41 58 497 2004 46 2040 40 2124 41 58 2005 46 2104 359 2318 40 2005 44 2165 41 58 2140 61 2005 46 2059 2004 46 2012 40 648 44 2140 46 2010 41 2004 46 2012 40 1500 44 2126 40 2140 41 41 2004 46 2028 40 2140 46 362 44 304 41 497 2004 46 2040 40 2124 41 58 2140 46 2125 40 1500 41 360 58 497 2004 46 2040 40 2124 41 58 2005 46 2125 40 1500 41 348 2319 40 2004 41 58 2281 61 2238 40 91 93 41 2004 46 2012 40 2281 46 2103 44 45 1501 41 2281 61 2238 40 2024 40 1500 44 1500 41 41 2004 46 2012 40 2281 46 2103 44 1500 41 2281 61 2238 40 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 44 2024 40 1500 44 1500 41 41 2004 46 2012 40 2281 46 2103 44 1501 41 2281 61 2238 40 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 44 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 41 44 2024 40 1500 44 1500 41 41 2004 46 2012 40 2281 46 2103 44 1502 41 348 2320 40 2004 41 58 648 621 621 2321 61 91 2121 46 2010 385 2121 398 2004 46 2006 46 2185 392 2121 46 2128 93 2321 46 2322 40 2323 46 2010 385 2323 398 2004 46 2006 46 2153 41 2321 46 2322 40 2056 46 2010 385 2056 398 2004 46 2006 46 2057 41 2321 46 2322 40 2121 46 2010 385 2121 398 2004 46 2006 46 2122 41 2324 61 648 37 648 46 2325 40 2321 41 621 2326 61 2029 40 2324 41 621 2327 61 2238 40 42 2107 40 2005 385 2005 398 2326 41 41 621 2004 46 2012 40 2326 44 2327 41 348 2328 40 2004 41 58 648 2329 61 2009 40 648 41 2004 46 2285 40 2329 46 2286 44 2287 46 2288 41 2004 46 2112 40 2329 46 2289 41 2330 61 2009 40 648 41 2004 46 2285 40 2330 46 2286 44 2287 46 2288 41 2004 46 2012 40 2330 46 2286 46 2108 44 1502 41 2331 61 2009 40 648 44 2025 61 1505 41 2004 46 2285 40 2331 46 2286 44 2287 46 2288 41 2004 46 2285 40 2331 46 2289 44 2287 46 2292 41 2004 46 2012 40 2331 46 2016 44 2331 46 2286 46 2016 41 2004 46 2012 40 648 44 2331 46 2289 46 2332 41 348 2333 40 2004 41 58 648 397 2334 2058 61 2029 40 648 41 2335 61 2334 46 2334 40 2058 41 2336 61 2334 46 2337 40 2058 41 2004 46 2081 40 2058 46 2338 44 2335 46 2338 41 2004 46 2081 40 2058 46 2338 44 2336 46 2338 41 348 2339 40 2004 41 58 648 2340 61 2029 40 648 44 1505 41 2341 61 2029 40 648 44 1505 41 621 621 2342 44 2343 44 2344 61 2340 46 335 40 41 44 2340 46 335 40 41 44 2340 46 335 40 41 2342 46 2294 40 2341 46 2025 41 2343 46 2294 40 2287 46 2292 40 648 41 41 2345 61 2287 46 2291 40 2287 46 2292 40 648 41 44 2287 46 2292 40 1505 41 41 2344 46 2294 40 2345 41 621 2346 61 2340 46 335 40 41 2347 61 2346 46 2294 40 2341 46 2025 44 335 61 304 41 2004 46 2012 40 2346 44 2340 41 2004 46 2081 40 2346 44 2347 41 621 621 2348 61 45 1501 385 2056 398 40 2342 44 2343 44 2344 44 2347 41 58 2004 46 2106 40 2341 46 2104 44 2056 46 2104 44 2348 41 2004 46 2106 40 2341 46 2105 44 2056 46 2105 44 2348 41 348 2349 40 2004 41 58 2350 61 2029 40 648 44 1505 41 2350 46 2294 40 1505 41 2004 46 2106 40 2350 46 2108 44 1503 44 1502 41 348 2351 40 2004 41 58 648 621 621 2005 61 2029 40 648 44 1505 41 2352 61 2005 46 2107 2005 46 2294 40 1505 41 2004 46 2012 40 2005 46 2107 44 2352 41 2004 46 2012 40 2005 46 2025 44 1505 41 2005 61 2029 40 648 44 1505 41 2329 61 2005 46 2294 40 1505 44 335 61 304 41 2004 46 2012 40 2329 46 2107 44 2005 46 2107 41 2004 46 2012 40 2329 46 2025 44 1505 41 2004 46 2084 40 2329 44 2005 44 648 41 348 2353 40 2004 41 58 648 2005 61 2029 40 648 44 2025 61 303 41 497 2004 46 2040 40 2041 41 58 2005 46 2294 40 1505 41 2005 61 2029 40 648 44 2025 61 303 41 497 2004 46 2040 40 2041 41 58 2005 46 2294 40 1505 44 335 61 304 41 2005 61 2029 40 648 44 2025 61 45 1501 41 497 2004 46 2040 40 2041 41 58 2005 46 2294 40 1505 41 2005 61 2029 40 648 44 2025 61 45 1501 41 497 2004 46 2040 40 2041 41 58 2005 46 2294 40 1505 44 335 61 304 41 348 2354 40 2004 41 58 648 621 2121 61 2090 40 2024 40 1502 44 1503 41 44 2024 40 1500 44 1500 41 44 2024 40 1502 44 1503 41 41 2004 46 2012 40 40 1500 44 1500 44 1502 44 1503 41 44 2121 46 2167 41 2078 61 2024 40 1502 44 1503 41 621 2004 46 2012 40 40 1502 44 1503 44 1502 44 1503 41 44 2078 46 2167 41 621 2058 61 2009 40 2004 46 2006 46 2057 91 1502 93 46 2010 41 2131 61 2058 46 2059 2104 44 2105 61 2131 46 2104 44 2131 46 2105 2355 44 2356 61 2357 40 2104 41 44 2357 40 2105 41 2358 44 2359 61 2360 40 2104 41 44 2360 40 2105 41 2004 46 2012 40 40 2355 44 2356 44 2358 44 2359 41 44 2058 46 2167 41 348 2361 40 2004 41 58 648 621 621 348 2362 40 2363 44 2025 61 303 41 58 450 91 2029 40 2034 46 2010 44 2025 41 385 2034 398 2363 93 2364 61 2362 40 2004 46 2006 46 2100 41 2364 46 2322 40 2362 40 2004 46 2006 46 2153 44 1505 41 41 2364 46 2322 40 2362 40 2004 46 2006 46 2057 44 1505 41 41 2364 46 2322 40 2362 40 2004 46 2006 46 2185 44 1505 41 41 2364 46 2298 40 2024 40 2025 61 1505 41 41 2364 46 2298 40 2024 40 41 41 385 2008 398 2364 58 2365 61 2366 46 2068 40 2008 41 2329 61 2366 46 2064 40 2365 41 2004 46 2012 40 2008 44 2329 41 2004 46 2012 40 2008 46 2025 44 2329 46 2025 41 348 2367 40 2004 41 58 648 621 2196 61 2029 40 648 41 2368 61 2196 46 2369 621 2370 61 91 2024 40 1502 44 1502 41 44 2024 40 1502 44 1502 41 44 2024 40 1502 44 1502 41 93 385 2078 398 2370 58 621 2004 46 2012 40 2196 46 2371 40 2078 41 44 2368 46 2371 40 2078 41 41 2004 46 2012 40 2196 46 2228 40 2078 41 44 2368 46 2228 40 2078 41 41 2004 46 2012 40 2196 46 2274 40 2078 41 44 2368 46 2274 40 2078 41 41 2004 46 2231 40 2368 46 2372 40 2009 40 648 41 41 41 2004 46 2231 40 2368 46 2373 40 2024 40 45 1502 44 45 1502 41 41 41 2058 61 2165 40 40 40 45 1501 44 45 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 45 1501 44 45 1501 41 41 41 2004 46 2231 40 2368 46 2374 40 2058 41 41 2058 61 2165 40 40 40 45 1502 44 1500 41 44 40 45 1502 44 1502 41 44 40 1500 44 1502 41 44 40 45 1502 44 1500 41 41 41 2004 46 2231 40 2368 46 2375 40 2058 41 41 2058 61 2165 40 40 40 45 1501 44 45 1501 41 44 40 45 1501 44 1503 41 44 40 1503 44 1503 41 44 40 1503 44 45 1501 41 44 40 45 1501 44 45 1501 41 41 41 2004 46 2231 40 2368 46 2376 40 2058 41 41 621 351 2196 2004 46 2231 40 2368 46 2274 40 2024 40 1502 44 1502 41 41 41 348 2377 40 2004 41 58 648 2378 61 40 2009 40 648 41 44 2009 40 648 41 44 41 2379 61 40 2009 40 648 41 44 2009 40 648 41 44 41 385 2008 44 2380 398 2381 40 2378 44 2379 41 58 2004 46 2012 40 2380 44 2008 46 2380 41 348 2382 40 2004 41 58 648 2005 61 2029 40 648 41 2004 46 2231 40 2005 46 2128 41 2004 46 2285 40 2005 46 2383 44 2203 41 2004 46 2012 40 2005 46 2383 44 648 41 2005 61 2029 40 648 41 2004 46 2275 40 2005 46 2128 41 2004 46 2285 40 2005 46 2383 44 2203 41 2004 46 2231 40 2005 46 2383 46 2284 40 648 41 41 348 2384 40 2004 41 58 648 2082 61 2009 40 648 41 2323 61 2009 40 648 41 2004 46 2012 40 2082 46 2385 40 2024 40 1500 44 1503 41 41 44 1502 41 2004 46 2012 40 2082 46 2385 40 2024 40 1502 44 1502 41 41 44 1503 41 2004 46 2012 40 2082 46 2386 40 2024 40 1500 44 1503 41 41 44 1501 47 1502 41 2004 46 2012 40 2082 46 2387 40 1502 41 44 2024 40 1500 44 1502 41 41 2004 46 2012 40 2082 46 2387 40 1503 41 44 2024 40 1502 44 1502 41 41 2004 46 2012 40 2082 46 2388 40 1501 47 1502 41 44 2024 40 1500 44 1502 41 41 2004 46 2012 40 2323 46 2385 40 2024 40 1500 44 1503 41 41 44 1502 41 2004 46 2012 40 2323 46 2385 40 2024 40 1502 44 1502 41 41 44 1503 41 2004 46 2012 40 2323 46 2387 40 1502 41 44 2024 40 1500 44 1502 41 41 2004 46 2012 40 2323 46 2387 40 1503 41 44 2024 40 1502 44 1502 41 41 348 2389 40 2004 41 58 648 2118 61 2024 40 1502 44 1503 44 2025 61 1505 41 2390 44 2391 44 2392 61 2118 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 1502 44 1503 41 41 2004 46 2012 40 2392 44 123 648 58 1505 125 41 2082 61 2133 40 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 41 2390 44 2391 44 2392 61 2082 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 44 41 41 2004 46 2012 40 2392 44 123 125 41 2313 61 2133 40 91 2024 40 1500 44 1500 41 44 2024 40 1501 44 1501 41 93 44 2025 61 1505 41 2390 44 2391 44 2392 61 2313 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 91 2024 40 1500 44 1500 41 44 2024 40 1501 44 1501 41 93 44 41 41 2004 46 2012 40 2392 44 123 648 58 1505 125 41 2394 61 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1501 44 1500 41 44 40 1500 44 1500 41 41 2395 61 40 40 1499 44 1499 41 44 40 1499 44 1499 41 44 40 1499 44 1499 41 44 40 1499 44 1499 41 44 40 1499 44 1499 41 41 2058 61 2165 40 2394 44 2395 41 2390 44 2391 44 2392 61 2058 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 2394 44 2395 41 41 2004 46 2012 40 2392 44 123 125 41 2140 61 2141 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 2390 44 2391 44 2392 61 2140 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 41 2004 46 2012 40 2392 44 123 125 41 2121 61 2090 40 2024 40 1500 44 1500 41 44 2024 40 1501 44 1501 41 41 2390 44 2391 44 2392 61 2121 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 2024 40 1500 44 1500 41 44 2024 40 1501 44 1501 41 41 41 2004 46 2012 40 2392 44 123 125 41 2312 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 2313 61 2133 40 40 1502 44 1502 41 44 40 1502 44 1502 41 41 2323 61 2155 40 2312 44 2313 41 2390 44 2391 44 2392 61 2323 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 2312 44 2313 41 41 2004 46 2012 40 2392 44 123 125 41 2096 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 41 2097 61 2165 40 40 40 1501 44 1501 41 44 40 1501 44 1502 41 44 40 1502 44 1502 41 44 40 1501 44 1501 41 41 41 2121 61 2199 40 2096 44 2097 41 2390 44 2391 44 2392 61 2121 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 2096 44 2097 41 41 2004 46 2012 40 2392 44 123 125 41 2058 61 2165 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 41 2281 61 2238 40 2024 40 1500 44 1500 41 44 2090 40 2024 40 1500 44 1500 41 44 2024 40 1501 44 1501 41 41 44 2058 41 2390 44 2391 44 2392 61 2281 46 2393 40 41 2004 46 2012 40 2390 44 648 41 2004 46 2012 40 2391 44 40 2024 40 1500 44 1500 41 44 2090 40 2024 40 1500 44 1500 41 44 2024 40 1501 44 1501 41 41 44 2058 41 41 2004 46 2012 40 2392 44 123 125 41 348 2396 40 2004 41 58 648 334 2397 40 2165 41 58 348 2398 40 2004 44 42 2391 44 2399 61 1500 44 638 2392 41 58 463 40 41 46 2398 40 42 2391 44 638 2392 41 2004 46 2400 61 2399 348 2401 40 2004 41 58 450 648 37 40 2004 46 2400 44 2004 46 2010 41 2402 61 2397 40 40 40 1500 44 1500 41 44 40 1500 44 1501 41 44 40 1501 44 1501 41 44 40 1500 44 1500 41 41 44 2399 61 1502 41 2004 46 2012 40 2403 40 2402 41 44 2397 41 621 2004 46 2012 40 2203 40 2402 41 44 648 41 2004 46 2162 40 2402 46 2063 44 648 44 41 348 2404 40 2004 41 58 2405 61 40 40 648 44 40 1502 44 1500 44 1500 41 41 44 40 648 44 40 1502 44 1500 44 1500 41 41 44 40 648 44 40 1502 44 1502 44 1500 41 41 44 40 648 44 40 1502 44 1502 44 1500 41 41 44 40 648 44 40 1502 44 1502 44 1502 41 41 44 41 385 2406 44 2407 398 2405 58 497 2004 46 2408 40 2406 61 2406 41 58 497 2136 46 2137 40 648 44 409 58 2406 41 58 2004 46 2012 40 2145 40 41 44 2407 41 348 2409 40 2004 41 58 2004 46 2012 40 2029 40 648 41 44 2029 46 2410 40 648 648 648 41 44 41 348 2411 40 2004 41 58 2004 46 2012 40 2029 46 2412 40 648 41 44 2024 40 1501 44 1501 44 2025 61 1501 41 41 2004 46 2012 40 2029 46 2412 40 648 41 44 2024 40 1501 44 1501 41 41 348 2413 40 2004 41 58 2143 61 648 497 2004 46 2135 40 2042 44 2143 41 58 2029 46 2412 40 648 41 497 2004 46 2135 40 2042 44 2143 41 58 2029 46 2412 40 648 41 348 2414 40 2004 41 58 2143 61 648 497 2004 46 2135 40 2042 44 2143 41 58 2029 46 2412 40 648 41 497 2004 46 2135 40 2042 44 2143 41 58 2029 46 2412 40 648 41 348 2415 40 2004 41 58 2004 46 2012 40 2029 40 648 41 44 2024 40 1499 44 1502 41 41 348 2416 40 2004 41 58 2005 61 2090 40 2024 40 1500 44 1500 41 44 2024 40 1502 44 1502 41 44 2024 40 1501 44 1501 41 41 2004 46 2112 40 2005 46 2417 40 41 41 2004 46 2231 40 2005 46 2418 40 2090 40 2024 40 1502 44 1502 41 44 2024 40 1501 44 1501 41 44 2024 40 1500 44 1500 41 41 41 41 64 2144 40 2145 40 41 60 40 1502 44 1502 41 44 648 41 348 2419 40 2004 41 58 2058 61 2029 40 648 41 2004 46 2028 40 2058 46 2128 44 302 41 2420 61 2058 46 2421 40 41 2004 46 2028 40 2420 46 2128 44 304 41 2004 46 2081 40 2420 44 2058 41 2422 61 2420 46 2421 40 41 2004 46 2028 40 2422 46 2128 44 304 41 2004 46 2012 40 2420 44 2422 41 64 2136 46 2137 40 648 44 409 58 648 41 348 2423 40 2004 41 58 2143 61 648 2058 61 2029 40 648 41 497 2004 46 2135 40 2041 44 2143 41 58 2058 46 2421 40 41 348 2424 40 2004 41 58 2056 61 2024 40 2025 61 1505 41 2004 46 2012 40 2056 46 2286 46 2013 44 2056 46 2013 41 2004 46 2012 40 2056 46 2294 40 1505 44 335 61 304 41 44 2024 40 2025 61 1505 41 41 2056 46 2294 40 1505 41 2004 46 2012 40 2056 44 2024 40 2025 61 1505 41 41 348 2425 40 2004 41 58 2082 61 2133 40 40 1500 44 1500 41 44 40 1501 44 1501 41 41 2426 61 2427 40 2082 41 621 2428 40 2426 41 2082 91 58 93 61 91 93 497 2004 46 2040 40 2124 41 58 2428 40 2426 41 
133276,Python,"class CreatesuperuserManagementCommandTestCase(TestCase):

    def test_no_email_argument(self):
        new_io = StringIO()
        with self.assertRaisesMessage(CommandError, 'You must use --email with --noinput.'):
            call_command('createsuperuser', interactive=False, username='joe', stdout=new_io)

    def test_basic_usage(self):
        ""Check the operation of the createsuperuser management command""
        # We can use the management command to create a superuser
        new_io = StringIO()
        call_command(
            ""createsuperuser"",
            interactive=False,
            username=""joe"",
            email=""joe@somewhere.org"",
            stdout=new_io
        )
        command_output = new_io.getvalue().strip()
        self.assertEqual(command_output, 'Superuser created successfully.')
        u = User.objects.get(username=""joe"")
        self.assertEqual(u.email, 'joe@somewhere.org')

        # created password should be unusable
        self.assertFalse(u.has_usable_password())

    def test_non_ascii_verbose_name(self):
        @mock_inputs({
            'password': ""nopasswd"",
            ""Uživatel (leave blank to use '%s'): "" % get_default_username(): 'foo',  # username (cz)
            'email': 'nolocale@somewhere.org',
        })
        def test(self):
            username_field = User._meta.get_field('username')
            old_verbose_name = username_field.verbose_name
            username_field.verbose_name = _('u\u017eivatel')
            new_io = StringIO()
            try:
                call_command(
                    ""createsuperuser"",
                    interactive=True,
                    stdout=new_io,
                    stdin=MockTTY(),
                )
            finally:
                username_field.verbose_name = old_verbose_name

            command_output = new_io.getvalue().strip()
            self.assertEqual(command_output, 'Superuser created successfully.')

        test(self)

    def test_verbosity_zero(self):
        # We can suppress output on the management command
        new_io = StringIO()
        call_command(
            ""createsuperuser"",
            interactive=False,
            username=""joe2"",
            email=""joe2@somewhere.org"",
            verbosity=0,
            stdout=new_io
        )
        command_output = new_io.getvalue().strip()
        self.assertEqual(command_output, '')
        u = User.objects.get(username=""joe2"")
        self.assertEqual(u.email, 'joe2@somewhere.org')
        self.assertFalse(u.has_usable_password())

    def test_email_in_username(self):
        call_command(
            ""createsuperuser"",
            interactive=False,
            username=""joe+admin@somewhere.org"",
            email=""joe@somewhere.org"",
            verbosity=0,
        )
        u = User._default_manager.get(username=""joe+admin@somewhere.org"")
        self.assertEqual(u.email, 'joe@somewhere.org')
        self.assertFalse(u.has_usable_password())

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')
    def test_swappable_user(self):
        ""A superuser can be created when a custom user model is in use""
        # We can use the management command to create a superuser
        # We skip validation because the temporary substitution of the
        # swappable User model messes with validation.
        new_io = StringIO()
        call_command(
            ""createsuperuser"",
            interactive=False,
            email=""joe@somewhere.org"",
            date_of_birth=""1976-04-01"",
            first_name='Joe',
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        self.assertEqual(command_output, 'Superuser created successfully.')
        u = CustomUser._default_manager.get(email=""joe@somewhere.org"")
        self.assertEqual(u.date_of_birth, date(1976, 4, 1))

        # created password should be unusable
        self.assertFalse(u.has_usable_password())

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')
    def test_swappable_user_missing_required_field(self):
        ""A Custom superuser won't be created when a required field isn't provided""
        # We can use the management command to create a superuser
        # We skip validation because the temporary substitution of the
        # swappable User model messes with validation.
        new_io = StringIO()
        with self.assertRaisesMessage(CommandError, 'You must use --email with --noinput.'):
            call_command(
                ""createsuperuser"",
                interactive=False,
                stdout=new_io,
                stderr=new_io,
            )

        self.assertEqual(CustomUser._default_manager.count(), 0)

    @override_settings(
        AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueUsername',
        AUTHENTICATION_BACKENDS=['my.custom.backend'],
    )
    def test_swappable_user_username_non_unique(self):
        @mock_inputs({
            'username': 'joe',
            'password': 'nopasswd',
        })
        def createsuperuser():
            new_io = StringIO()
            call_command(
                ""createsuperuser"",
                interactive=True,
                email=""joe@somewhere.org"",
                stdout=new_io,
                stdin=MockTTY(),
            )
            command_output = new_io.getvalue().strip()
            self.assertEqual(command_output, 'Superuser created successfully.')

        for i in range(2):
            createsuperuser()

        users = CustomUserNonUniqueUsername.objects.filter(username=""joe"")
        self.assertEqual(users.count(), 2)

    def test_skip_if_not_in_TTY(self):
        """"""
        If the command is not called from a TTY, it should be skipped and a
        message should be displayed (#7423).
        """"""
        class FakeStdin:
            """"""A fake stdin object that has isatty() return False.""""""
            def isatty(self):
                return False

        out = StringIO()
        call_command(
            ""createsuperuser"",
            stdin=FakeStdin(),
            stdout=out,
            interactive=True,
        )

        self.assertEqual(User._default_manager.count(), 0)
        self.assertIn(""Superuser creation skipped"", out.getvalue())

    def test_passing_stdin(self):
        """"""
        You can pass a stdin object as an option and it should be
        available on self.stdin.
        If no such option is passed, it defaults to sys.stdin.
        """"""
        sentinel = object()
        command = createsuperuser.Command()
        call_command(
            command,
            stdin=sentinel,
            interactive=False,
            verbosity=0,
            username='janet',
            email='janet@example.com',
        )
        self.assertIs(command.stdin, sentinel)

        command = createsuperuser.Command()
        call_command(
            command,
            interactive=False,
            verbosity=0,
            username='joe',
            email='joe@example.com',
        )
        self.assertIs(command.stdin, sys.stdin)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')
    def test_fields_with_fk(self):
        new_io = StringIO()
        group = Group.objects.create(name='mygroup')
        email = Email.objects.create(email='mymail@gmail.com')
        call_command(
            'createsuperuser',
            interactive=False,
            username=email.pk,
            email=email.email,
            group=group.pk,
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        self.assertEqual(command_output, 'Superuser created successfully.')
        u = CustomUserWithFK._default_manager.get(email=email)
        self.assertEqual(u.username, email)
        self.assertEqual(u.group, group)

        non_existent_email = 'mymail2@gmail.com'
        msg = 'email instance with email %r does not exist.' % non_existent_email
        with self.assertRaisesMessage(CommandError, msg):
            call_command(
                'createsuperuser',
                interactive=False,
                username=email.pk,
                email=non_existent_email,
                stdout=new_io,
            )

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')
    def test_fields_with_fk_interactive(self):
        new_io = StringIO()
        group = Group.objects.create(name='mygroup')
        email = Email.objects.create(email='mymail@gmail.com')

        @mock_inputs({
            'password': 'nopasswd',
            'Username (Email.id): ': email.pk,
            'Email (Email.email): ': email.email,
            'Group (Group.id): ': group.pk,
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdout=new_io,
                stdin=MockTTY(),
            )

            command_output = new_io.getvalue().strip()
            self.assertEqual(command_output, 'Superuser created successfully.')
            u = CustomUserWithFK._default_manager.get(email=email)
            self.assertEqual(u.username, email)
            self.assertEqual(u.group, group)

        test(self)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')
    def test_fields_with_fk_via_option_interactive(self):
        new_io = StringIO()
        group = Group.objects.create(name='mygroup')
        email = Email.objects.create(email='mymail@gmail.com')

        @mock_inputs({'password': 'nopasswd'})
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                username=email.pk,
                email=email.email,
                group=group.pk,
                stdout=new_io,
                stdin=MockTTY(),
            )

            command_output = new_io.getvalue().strip()
            self.assertEqual(command_output, 'Superuser created successfully.')
            u = CustomUserWithFK._default_manager.get(email=email)
            self.assertEqual(u.username, email)
            self.assertEqual(u.group, group)

        test(self)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')
    def test_validate_fk(self):
        email = Email.objects.create(email='mymail@gmail.com')
        Group.objects.all().delete()
        nonexistent_group_id = 1
        msg = f'group instance with id {nonexistent_group_id} does not exist.'

        with self.assertRaisesMessage(CommandError, msg):
            call_command(
                'createsuperuser',
                interactive=False,
                username=email.pk,
                email=email.email,
                group=nonexistent_group_id,
                verbosity=0,
            )

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')
    def test_validate_fk_environment_variable(self):
        email = Email.objects.create(email='mymail@gmail.com')
        Group.objects.all().delete()
        nonexistent_group_id = 1
        msg = f'group instance with id {nonexistent_group_id} does not exist.'

        with mock.patch.dict(
            os.environ,
            {'DJANGO_SUPERUSER_GROUP': str(nonexistent_group_id)},
        ):
            with self.assertRaisesMessage(CommandError, msg):
                call_command(
                    'createsuperuser',
                    interactive=False,
                    username=email.pk,
                    email=email.email,
                    verbosity=0,
                )

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')
    def test_validate_fk_via_option_interactive(self):
        email = Email.objects.create(email='mymail@gmail.com')
        Group.objects.all().delete()
        nonexistent_group_id = 1
        msg = f'group instance with id {nonexistent_group_id} does not exist.'

        @mock_inputs({
            'password': 'nopasswd',
            'Username (Email.id): ': email.pk,
            'Email (Email.email): ': email.email,
        })
        def test(self):
            with self.assertRaisesMessage(CommandError, msg):
                call_command(
                    'createsuperuser',
                    group=nonexistent_group_id,
                    stdin=MockTTY(),
                    verbosity=0,
                )

        test(self)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2m')
    def test_fields_with_m2m(self):
        new_io = StringIO()
        org_id_1 = Organization.objects.create(name='Organization 1').pk
        org_id_2 = Organization.objects.create(name='Organization 2').pk
        call_command(
            'createsuperuser',
            interactive=False,
            username='joe',
            orgs=[org_id_1, org_id_2],
            stdout=new_io,
        )
        command_output = new_io.getvalue().strip()
        self.assertEqual(command_output, 'Superuser created successfully.')
        user = CustomUserWithM2M._default_manager.get(username='joe')
        self.assertEqual(user.orgs.count(), 2)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2M')
    def test_fields_with_m2m_interactive(self):
        new_io = StringIO()
        org_id_1 = Organization.objects.create(name='Organization 1').pk
        org_id_2 = Organization.objects.create(name='Organization 2').pk

        @mock_inputs({
            'password': 'nopasswd',
            'Username: ': 'joe',
            'Orgs (Organization.id): ': '%s, %s' % (org_id_1, org_id_2),
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdout=new_io,
                stdin=MockTTY(),
            )
            command_output = new_io.getvalue().strip()
            self.assertEqual(command_output, 'Superuser created successfully.')
            user = CustomUserWithM2M._default_manager.get(username='joe')
            self.assertEqual(user.orgs.count(), 2)

        test(self)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2M')
    def test_fields_with_m2m_interactive_blank(self):
        new_io = StringIO()
        org_id = Organization.objects.create(name='Organization').pk
        entered_orgs = [str(org_id), ' ']

        def return_orgs():
            return entered_orgs.pop()

        @mock_inputs({
            'password': 'nopasswd',
            'Username: ': 'joe',
            'Orgs (Organization.id): ': return_orgs,
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdout=new_io,
                stderr=new_io,
                stdin=MockTTY(),
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                'Error: This field cannot be blank.\n'
                'Superuser created successfully.',
            )

        test(self)

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2MThrough')
    def test_fields_with_m2m_and_through(self):
        msg = (
            ""Required field 'orgs' specifies a many-to-many relation through ""
            ""model, which is not supported.""
        )
        with self.assertRaisesMessage(CommandError, msg):
            call_command('createsuperuser')

    def test_default_username(self):
        """"""createsuperuser uses a default username when one isn't provided.""""""
        # Get the default username before creating a user.
        default_username = get_default_username()
        new_io = StringIO()
        entered_passwords = ['password', 'password']

        def return_passwords():
            return entered_passwords.pop(0)

        @mock_inputs({'password': return_passwords, 'username': '', 'email': ''})
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(new_io.getvalue().strip(), 'Superuser created successfully.')
            self.assertTrue(User.objects.filter(username=default_username).exists())

        test(self)

    def test_password_validation(self):
        """"""
        Creation should fail if the password fails validation.
        """"""
        new_io = StringIO()
        entered_passwords = ['1234567890', '1234567890', 'password', 'password']

        def bad_then_good_password():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': bad_then_good_password,
            'username': 'joe1234567890',
            'email': '',
            'bypass': 'n',
        })
        def test(self):
            call_command(
                ""createsuperuser"",
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                ""This password is entirely numeric.\n""
                ""Superuser created successfully.""
            )

        test(self)

    @override_settings(AUTH_PASSWORD_VALIDATORS=[
        {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    ])
    def test_validate_password_against_username(self):
        new_io = StringIO()
        username = 'supremelycomplex'
        entered_passwords = [username, username, 'superduperunguessablepassword', 'superduperunguessablepassword']

        def bad_then_good_password():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': bad_then_good_password,
            'username': username,
            'email': '',
            'bypass': 'n',
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                'The password is too similar to the username.\n'
                'Superuser created successfully.'
            )

        test(self)

    @override_settings(
        AUTH_USER_MODEL='auth_tests.CustomUser',
        AUTH_PASSWORD_VALIDATORS=[
            {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
        ]
    )
    def test_validate_password_against_required_fields(self):
        new_io = StringIO()
        first_name = 'josephine'
        entered_passwords = [first_name, first_name, 'superduperunguessablepassword', 'superduperunguessablepassword']

        def bad_then_good_password():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': bad_then_good_password,
            'username': 'whatever',
            'first_name': first_name,
            'date_of_birth': '1970-01-01',
            'email': 'joey@example.com',
            'bypass': 'n',
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                ""The password is too similar to the first name.\n""
                ""Superuser created successfully.""
            )

        test(self)

    @override_settings(
        AUTH_USER_MODEL='auth_tests.CustomUser',
        AUTH_PASSWORD_VALIDATORS=[
            {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
        ]
    )
    def test_validate_password_against_required_fields_via_option(self):
        new_io = StringIO()
        first_name = 'josephine'
        entered_passwords = [
            first_name, first_name,
            'superduperunguessablepassword', 'superduperunguessablepassword',
        ]

        def bad_then_good_password():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': bad_then_good_password,
            'bypass': 'n',
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                first_name=first_name,
                date_of_birth='1970-01-01',
                email='joey@example.com',
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                'The password is too similar to the first name.\n'
                'Superuser created successfully.'
            )

        test(self)

    def test_blank_username(self):
        """"""Creation fails if --username is blank.""""""
        new_io = StringIO()
        with self.assertRaisesMessage(CommandError, 'Username cannot be blank.'):
            call_command(
                'createsuperuser',
                username='',
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )

    def test_blank_username_non_interactive(self):
        new_io = StringIO()
        with self.assertRaisesMessage(CommandError, 'Username cannot be blank.'):
            call_command(
                'createsuperuser',
                username='',
                interactive=False,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )

    def test_password_validation_bypass(self):
        """"""
        Password validation can be bypassed by entering 'y' at the prompt.
        """"""
        new_io = StringIO()

        @mock_inputs({
            'password': '1234567890',
            'username': 'joe1234567890',
            'email': '',
            'bypass': 'y',
        })
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                'This password is entirely numeric.\n'
                'Superuser created successfully.'
            )

        test(self)

    def test_invalid_username(self):
        """"""Creation fails if the username fails validation.""""""
        user_field = User._meta.get_field(User.USERNAME_FIELD)
        new_io = StringIO()
        entered_passwords = ['password', 'password']
        # Enter an invalid (too long) username first and then a valid one.
        invalid_username = ('x' * user_field.max_length) + 'y'
        entered_usernames = [invalid_username, 'janet']

        def return_passwords():
            return entered_passwords.pop(0)

        def return_usernames():
            return entered_usernames.pop(0)

        @mock_inputs({'password': return_passwords, 'username': return_usernames, 'email': ''})
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                'Error: Ensure this value has at most %s characters (it has %s).\n'
                'Superuser created successfully.' % (user_field.max_length, len(invalid_username))
            )

        test(self)

    @mock_inputs({'username': 'KeyboardInterrupt'})
    def test_keyboard_interrupt(self):
        new_io = StringIO()
        with self.assertRaises(SystemExit):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
        self.assertEqual(new_io.getvalue(), '\nOperation cancelled.\n')

    def test_existing_username(self):
        """"""Creation fails if the username already exists.""""""
        user = User.objects.create(username='janet')
        new_io = StringIO()
        entered_passwords = ['password', 'password']
        # Enter the existing username first and then a new one.
        entered_usernames = [user.username, 'joe']

        def return_passwords():
            return entered_passwords.pop(0)

        def return_usernames():
            return entered_usernames.pop(0)

        @mock_inputs({'password': return_passwords, 'username': return_usernames, 'email': ''})
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                'Error: That username is already taken.\n'
                'Superuser created successfully.'
            )

        test(self)

    def test_existing_username_non_interactive(self):
        """"""Creation fails if the username already exists.""""""
        User.objects.create(username='janet')
        new_io = StringIO()
        with self.assertRaisesMessage(CommandError, ""Error: That username is already taken.""):
            call_command(
                'createsuperuser',
                username='janet',
                email='',
                interactive=False,
                stdout=new_io,
            )

    def test_existing_username_provided_via_option_and_interactive(self):
        """"""call_command() gets username='janet' and interactive=True.""""""
        new_io = StringIO()
        entered_passwords = ['password', 'password']
        User.objects.create(username='janet')

        def return_passwords():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': return_passwords,
            'username': 'janet1',
            'email': 'test@test.com'
        })
        def test(self):
            call_command(
                'createsuperuser',
                username='janet',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            msg = 'Error: That username is already taken.\nSuperuser created successfully.'
            self.assertEqual(new_io.getvalue().strip(), msg)

        test(self)

    def test_validation_mismatched_passwords(self):
        """"""
        Creation should fail if the user enters mismatched passwords.
        """"""
        new_io = StringIO()

        # The first two passwords do not match, but the second two do match and
        # are valid.
        entered_passwords = [""password"", ""not password"", ""password2"", ""password2""]

        def mismatched_passwords_then_matched():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': mismatched_passwords_then_matched,
            'username': 'joe1234567890',
            'email': '',
        })
        def test(self):
            call_command(
                ""createsuperuser"",
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                ""Error: Your passwords didn't match.\n""
                ""Superuser created successfully.""
            )

        test(self)

    def test_validation_blank_password_entered(self):
        """"""
        Creation should fail if the user enters blank passwords.
        """"""
        new_io = StringIO()

        # The first two passwords are empty strings, but the second two are
        # valid.
        entered_passwords = ["""", """", ""password2"", ""password2""]

        def blank_passwords_then_valid():
            return entered_passwords.pop(0)

        @mock_inputs({
            'password': blank_passwords_then_valid,
            'username': 'joe1234567890',
            'email': '',
        })
        def test(self):
            call_command(
                ""createsuperuser"",
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(
                new_io.getvalue().strip(),
                ""Error: Blank passwords aren't allowed.\n""
                ""Superuser created successfully.""
            )

        test(self)

    @override_settings(AUTH_USER_MODEL='auth_tests.NoPasswordUser')
    def test_usermodel_without_password(self):
        new_io = StringIO()
        call_command(
            'createsuperuser',
            interactive=False,
            stdin=MockTTY(),
            stdout=new_io,
            stderr=new_io,
            username='username',
        )
        self.assertEqual(new_io.getvalue().strip(), 'Superuser created successfully.')

    @override_settings(AUTH_USER_MODEL='auth_tests.NoPasswordUser')
    def test_usermodel_without_password_interactive(self):
        new_io = StringIO()

        @mock_inputs({'username': 'username'})
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                stdin=MockTTY(),
                stdout=new_io,
                stderr=new_io,
            )
            self.assertEqual(new_io.getvalue().strip(), 'Superuser created successfully.')

        test(self)

    @mock.patch.dict(os.environ, {
        'DJANGO_SUPERUSER_PASSWORD': 'test_password',
        'DJANGO_SUPERUSER_USERNAME': 'test_superuser',
        'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',
        'DJANGO_SUPERUSER_FIRST_NAME': 'ignored_first_name',
    })
    def test_environment_variable_non_interactive(self):
        call_command('createsuperuser', interactive=False, verbosity=0)
        user = User.objects.get(username='test_superuser')
        self.assertEqual(user.email, 'joe@somewhere.org')
        self.assertTrue(user.check_password('test_password'))
        # Environment variables are ignored for non-required fields.
        self.assertEqual(user.first_name, '')

    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithM2m')
    def test_environment_variable_m2m_non_interactive(self):
        new_io = StringIO()
        org_id_1 = Organization.objects.create(name='Organization 1').pk
        org_id_2 = Organization.objects.create(name='Organization 2').pk
        with mock.patch.dict(os.environ, {
            'DJANGO_SUPERUSER_ORGS': f'{org_id_1},{org_id_2}',
        }):
            call_command(
                'createsuperuser',
                interactive=False,
                username='joe',
                stdout=new_io,
            )
        command_output = new_io.getvalue().strip()
        self.assertEqual(command_output, 'Superuser created successfully.')
        user = CustomUserWithM2M._default_manager.get(username='joe')
        self.assertEqual(user.orgs.count(), 2)

    @mock.patch.dict(os.environ, {
        'DJANGO_SUPERUSER_USERNAME': 'test_superuser',
        'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',
    })
    def test_ignore_environment_variable_non_interactive(self):
        # Environment variables are ignored in non-interactive mode, if
        # provided by a command line arguments.
        call_command(
            'createsuperuser',
            interactive=False,
            username='cmd_superuser',
            email='cmd@somewhere.org',
            verbosity=0,
        )
        user = User.objects.get(username='cmd_superuser')
        self.assertEqual(user.email, 'cmd@somewhere.org')
        self.assertFalse(user.has_usable_password())

    @mock.patch.dict(os.environ, {
        'DJANGO_SUPERUSER_PASSWORD': 'test_password',
        'DJANGO_SUPERUSER_USERNAME': 'test_superuser',
        'DJANGO_SUPERUSER_EMAIL': 'joe@somewhere.org',
    })
    def test_ignore_environment_variable_interactive(self):
        # Environment variables are ignored in interactive mode.
        @mock_inputs({'password': 'cmd_password'})
        def test(self):
            call_command(
                'createsuperuser',
                interactive=True,
                username='cmd_superuser',
                email='cmd@somewhere.org',
                stdin=MockTTY(),
                verbosity=0,
            )
            user = User.objects.get(username='cmd_superuser')
            self.assertEqual(user.email, 'cmd@somewhere.org')
            self.assertTrue(user.check_password('cmd_password'))

        test(self)",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 2004 61 2005 40 41 497 2003 46 2006 40 2007 44 648 41 58 2008 40 648 44 2009 61 302 44 2010 61 648 44 2011 61 2004 41 348 2012 40 2003 41 58 648 621 2004 61 2005 40 41 2008 40 648 44 2009 61 302 44 2010 61 648 44 2013 61 648 44 2011 61 2004 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2018 61 2019 46 2020 46 2021 40 2010 61 648 41 2003 46 2017 40 2018 46 2013 44 648 41 621 2003 46 2022 40 2018 46 2023 40 41 41 348 2024 40 2003 41 58 64 2025 40 123 648 58 648 44 648 37 2026 40 41 58 648 44 621 648 58 648 44 125 41 348 2027 40 2003 41 58 2028 61 2019 46 2029 46 2030 40 648 41 2031 61 2028 46 2032 2028 46 2032 61 2033 40 648 41 2004 61 2005 40 41 474 58 2008 40 648 44 2009 61 304 44 2011 61 2004 44 2034 61 2035 40 41 44 41 382 58 2028 46 2032 61 2031 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2027 40 2003 41 348 2036 40 2003 41 58 621 2004 61 2005 40 41 2008 40 648 44 2009 61 302 44 2010 61 648 44 2013 61 648 44 2037 61 1500 44 2011 61 2004 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2018 61 2019 46 2020 46 2021 40 2010 61 648 41 2003 46 2017 40 2018 46 2013 44 648 41 2003 46 2022 40 2018 46 2023 40 41 41 348 2038 40 2003 41 58 2008 40 648 44 2009 61 302 44 2010 61 648 44 2013 61 648 44 2037 61 1500 44 41 2018 61 2019 46 2039 46 2021 40 2010 61 648 41 2003 46 2017 40 2018 46 2013 44 648 41 2003 46 2022 40 2018 46 2023 40 41 41 64 2040 40 2041 61 648 41 348 2042 40 2003 41 58 648 621 621 621 2004 61 2005 40 41 2008 40 648 44 2009 61 302 44 2013 61 648 44 2043 61 648 44 2044 61 648 44 2011 61 2004 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2018 61 2045 46 2039 46 2021 40 2013 61 648 41 2003 46 2017 40 2018 46 2043 44 2046 40 1505 44 1502 44 1501 41 41 621 2003 46 2022 40 2018 46 2023 40 41 41 64 2040 40 2041 61 648 41 348 2047 40 2003 41 58 648 621 621 621 2004 61 2005 40 41 497 2003 46 2006 40 2007 44 648 41 58 2008 40 648 44 2009 61 302 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2045 46 2039 46 2049 40 41 44 1500 41 64 2040 40 2041 61 648 44 2050 61 91 648 93 44 41 348 2051 40 2003 41 58 64 2025 40 123 648 58 648 44 648 58 648 44 125 41 348 2052 40 41 58 2004 61 2005 40 41 2008 40 648 44 2009 61 304 44 2013 61 648 44 2011 61 2004 44 2034 61 2035 40 41 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 385 2053 398 2054 40 1502 41 58 2052 40 41 2055 61 2056 46 2020 46 2057 40 2010 61 648 41 2003 46 2017 40 2055 46 2049 40 41 44 1502 41 348 2058 40 2003 41 58 648 334 2059 58 648 348 2060 40 2003 41 58 450 302 430 61 2005 40 41 2008 40 648 44 2034 61 2059 40 41 44 2011 61 430 44 2009 61 304 44 41 2003 46 2017 40 2019 46 2039 46 2049 40 41 44 1500 41 2003 46 2061 40 648 44 430 46 2015 40 41 41 348 2062 40 2003 41 58 648 2063 61 426 40 41 2064 61 2052 46 2065 40 41 2008 40 2064 44 2034 61 2063 44 2009 61 302 44 2037 61 1500 44 2010 61 648 44 2013 61 648 44 41 2003 46 2066 40 2064 46 2034 44 2063 41 2064 61 2052 46 2065 40 41 2008 40 2064 44 2009 61 302 44 2037 61 1500 44 2010 61 648 44 2013 61 648 44 41 2003 46 2066 40 2064 46 2034 44 2067 46 2034 41 64 2040 40 2041 61 648 41 348 2068 40 2003 41 58 2004 61 2005 40 41 2069 61 2070 46 2020 46 2071 40 2072 61 648 41 2013 61 2073 46 2020 46 2071 40 2013 61 648 41 2008 40 648 44 2009 61 302 44 2010 61 2013 46 2074 44 2013 61 2013 46 2013 44 2069 61 2069 46 2074 44 2011 61 2004 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2018 61 2075 46 2039 46 2021 40 2013 61 2013 41 2003 46 2017 40 2018 46 2010 44 2013 41 2003 46 2017 40 2018 46 2069 44 2069 41 2076 61 648 2077 61 648 37 2076 497 2003 46 2006 40 2007 44 2077 41 58 2008 40 648 44 2009 61 302 44 2010 61 2013 46 2074 44 2013 61 2076 44 2011 61 2004 44 41 64 2040 40 2041 61 648 41 348 2078 40 2003 41 58 2004 61 2005 40 41 2069 61 2070 46 2020 46 2071 40 2072 61 648 41 2013 61 2073 46 2020 46 2071 40 2013 61 648 41 64 2025 40 123 648 58 648 44 648 58 2013 46 2074 44 648 58 2013 46 2013 44 648 58 2069 46 2074 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2011 61 2004 44 2034 61 2035 40 41 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2018 61 2075 46 2039 46 2021 40 2013 61 2013 41 2003 46 2017 40 2018 46 2010 44 2013 41 2003 46 2017 40 2018 46 2069 44 2069 41 2027 40 2003 41 64 2040 40 2041 61 648 41 348 2079 40 2003 41 58 2004 61 2005 40 41 2069 61 2070 46 2020 46 2071 40 2072 61 648 41 2013 61 2073 46 2020 46 2071 40 2013 61 648 41 64 2025 40 123 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2010 61 2013 46 2074 44 2013 61 2013 46 2013 44 2069 61 2069 46 2074 44 2011 61 2004 44 2034 61 2035 40 41 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2018 61 2075 46 2039 46 2021 40 2013 61 2013 41 2003 46 2017 40 2018 46 2010 44 2013 41 2003 46 2017 40 2018 46 2069 44 2069 41 2027 40 2003 41 64 2040 40 2041 61 648 41 348 2080 40 2003 41 58 2013 61 2073 46 2020 46 2071 40 2013 61 648 41 2070 46 2020 46 2081 40 41 46 353 40 41 2082 61 1501 2077 61 648 497 2003 46 2006 40 2007 44 2077 41 58 2008 40 648 44 2009 61 302 44 2010 61 2013 46 2074 44 2013 61 2013 46 2013 44 2069 61 2082 44 2037 61 1500 44 41 64 2040 40 2041 61 648 41 348 2083 40 2003 41 58 2013 61 2073 46 2020 46 2071 40 2013 61 648 41 2070 46 2020 46 2081 40 41 46 353 40 41 2082 61 1501 2077 61 648 497 2084 46 2085 46 2086 40 2087 46 2088 44 123 648 58 2089 40 2082 41 125 44 41 58 497 2003 46 2006 40 2007 44 2077 41 58 2008 40 648 44 2009 61 302 44 2010 61 2013 46 2074 44 2013 61 2013 46 2013 44 2037 61 1500 44 41 64 2040 40 2041 61 648 41 348 2090 40 2003 41 58 2013 61 2073 46 2020 46 2071 40 2013 61 648 41 2070 46 2020 46 2081 40 41 46 353 40 41 2082 61 1501 2077 61 648 64 2025 40 123 648 58 648 44 648 58 2013 46 2074 44 648 58 2013 46 2013 44 125 41 348 2027 40 2003 41 58 497 2003 46 2006 40 2007 44 2077 41 58 2008 40 648 44 2069 61 2082 44 2034 61 2035 40 41 44 2037 61 1500 44 41 2027 40 2003 41 64 2040 40 2041 61 648 41 348 2091 40 2003 41 58 2004 61 2005 40 41 2092 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 2094 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 2008 40 648 44 2009 61 302 44 2010 61 648 44 2095 61 91 2092 44 2094 93 44 2011 61 2004 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2096 61 2097 46 2039 46 2021 40 2010 61 648 41 2003 46 2017 40 2096 46 2095 46 2049 40 41 44 1502 41 64 2040 40 2041 61 648 41 348 2098 40 2003 41 58 2004 61 2005 40 41 2092 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 2094 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 64 2025 40 123 648 58 648 44 648 58 648 44 648 58 648 37 40 2092 44 2094 41 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2011 61 2004 44 2034 61 2035 40 41 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2096 61 2097 46 2039 46 2021 40 2010 61 648 41 2003 46 2017 40 2096 46 2095 46 2049 40 41 44 1502 41 2027 40 2003 41 64 2040 40 2041 61 648 41 348 2099 40 2003 41 58 2004 61 2005 40 41 2100 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 2101 61 91 2089 40 2100 41 44 648 93 348 2102 40 41 58 450 2101 46 2103 40 41 64 2025 40 123 648 58 648 44 648 58 648 44 648 58 2102 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2011 61 2004 44 2048 61 2004 44 2034 61 2035 40 41 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 44 41 2027 40 2003 41 64 2040 40 2041 61 648 41 348 2104 40 2003 41 58 2077 61 40 648 648 41 497 2003 46 2006 40 2007 44 2077 41 58 2008 40 648 41 348 2105 40 2003 41 58 648 621 2106 61 2026 40 41 2004 61 2005 40 41 2107 61 91 648 44 648 93 348 2108 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2108 44 648 58 648 44 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 41 2003 46 2109 40 2019 46 2020 46 2057 40 2010 61 2106 41 46 2110 40 41 41 2027 40 2003 41 348 2111 40 2003 41 58 648 2004 61 2005 40 41 2107 61 91 648 44 648 44 648 44 648 93 348 2112 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2112 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 64 2040 40 2113 61 91 123 648 58 648 125 44 93 41 348 2114 40 2003 41 58 2004 61 2005 40 41 2010 61 648 2107 61 91 2010 44 2010 44 648 44 648 93 348 2112 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2112 44 648 58 2010 44 648 58 648 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 64 2040 40 2041 61 648 44 2113 61 91 123 648 58 648 125 44 93 41 348 2115 40 2003 41 58 2004 61 2005 40 41 2044 61 648 2107 61 91 2044 44 2044 44 648 44 648 93 348 2112 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2112 44 648 58 648 44 648 58 2044 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 64 2040 40 2041 61 648 44 2113 61 91 123 648 58 648 125 44 93 41 348 2116 40 2003 41 58 2004 61 2005 40 41 2044 61 648 2107 61 91 2044 44 2044 44 648 44 648 44 93 348 2112 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2112 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2044 61 2044 44 2043 61 648 44 2013 61 648 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 348 2117 40 2003 41 58 648 2004 61 2005 40 41 497 2003 46 2006 40 2007 44 648 41 58 2008 40 648 44 2010 61 648 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 348 2118 40 2003 41 58 2004 61 2005 40 41 497 2003 46 2006 40 2007 44 648 41 58 2008 40 648 44 2010 61 648 44 2009 61 302 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 348 2119 40 2003 41 58 648 2004 61 2005 40 41 64 2025 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 348 2120 40 2003 41 58 648 2121 61 2019 46 2029 46 2030 40 2019 46 2122 41 2004 61 2005 40 41 2107 61 91 648 44 648 93 621 2123 61 40 648 42 2121 46 2124 41 43 648 2125 61 91 2123 44 648 93 348 2108 40 41 58 450 2107 46 2103 40 1500 41 348 2126 40 41 58 450 2125 46 2103 40 1500 41 64 2025 40 123 648 58 2108 44 648 58 2126 44 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 37 40 2121 46 2124 44 2127 40 2123 41 41 41 2027 40 2003 41 64 2025 40 123 648 58 648 125 41 348 2128 40 2003 41 58 2004 61 2005 40 41 497 2003 46 2129 40 2130 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 44 648 41 348 2131 40 2003 41 58 648 2096 61 2019 46 2020 46 2071 40 2010 61 648 41 2004 61 2005 40 41 2107 61 91 648 44 648 93 621 2125 61 91 2096 46 2010 44 648 93 348 2108 40 41 58 450 2107 46 2103 40 1500 41 348 2126 40 41 58 450 2125 46 2103 40 1500 41 64 2025 40 123 648 58 2108 44 648 58 2126 44 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 348 2132 40 2003 41 58 648 2019 46 2020 46 2071 40 2010 61 648 41 2004 61 2005 40 41 497 2003 46 2006 40 2007 44 648 41 58 2008 40 648 44 2010 61 648 44 2013 61 648 44 2009 61 302 44 2011 61 2004 44 41 348 2133 40 2003 41 58 648 2004 61 2005 40 41 2107 61 91 648 44 648 93 2019 46 2020 46 2071 40 2010 61 648 41 348 2108 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2108 44 648 58 648 44 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2010 61 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2077 61 648 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 2077 41 2027 40 2003 41 348 2134 40 2003 41 58 648 2004 61 2005 40 41 621 621 2107 61 91 648 44 648 44 648 44 648 93 348 2135 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2135 44 648 58 648 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 348 2136 40 2003 41 58 648 2004 61 2005 40 41 621 621 2107 61 91 648 44 648 44 648 44 648 93 348 2137 40 41 58 450 2107 46 2103 40 1500 41 64 2025 40 123 648 58 2137 44 648 58 648 44 648 58 648 44 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 648 41 2027 40 2003 41 64 2040 40 2041 61 648 41 348 2138 40 2003 41 58 2004 61 2005 40 41 2008 40 648 44 2009 61 302 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 2010 61 648 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 41 64 2040 40 2041 61 648 41 348 2139 40 2003 41 58 2004 61 2005 40 41 64 2025 40 123 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2034 61 2035 40 41 44 2011 61 2004 44 2048 61 2004 44 41 2003 46 2017 40 2004 46 2015 40 41 46 2016 40 41 44 648 41 2027 40 2003 41 64 2084 46 2085 46 2086 40 2087 46 2088 44 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 348 2140 40 2003 41 58 2008 40 648 44 2009 61 302 44 2037 61 1500 41 2096 61 2019 46 2020 46 2021 40 2010 61 648 41 2003 46 2017 40 2096 46 2013 44 648 41 2003 46 2109 40 2096 46 2141 40 648 41 41 621 2003 46 2017 40 2096 46 2044 44 648 41 64 2040 40 2041 61 648 41 348 2142 40 2003 41 58 2004 61 2005 40 41 2092 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 2094 61 2093 46 2020 46 2071 40 2072 61 648 41 46 2074 497 2084 46 2085 46 2086 40 2087 46 2088 44 123 648 58 648 44 125 41 58 2008 40 648 44 2009 61 302 44 2010 61 648 44 2011 61 2004 44 41 2014 61 2004 46 2015 40 41 46 2016 40 41 2003 46 2017 40 2014 44 648 41 2096 61 2097 46 2039 46 2021 40 2010 61 648 41 2003 46 2017 40 2096 46 2095 46 2049 40 41 44 1502 41 64 2084 46 2085 46 2086 40 2087 46 2088 44 123 648 58 648 44 648 58 648 44 125 41 348 2143 40 2003 41 58 621 621 2008 40 648 44 2009 61 302 44 2010 61 648 44 2013 61 648 44 2037 61 1500 44 41 2096 61 2019 46 2020 46 2021 40 2010 61 648 41 2003 46 2017 40 2096 46 2013 44 648 41 2003 46 2022 40 2096 46 2023 40 41 41 64 2084 46 2085 46 2086 40 2087 46 2088 44 123 648 58 648 44 648 58 648 44 648 58 648 44 125 41 348 2144 40 2003 41 58 621 64 2025 40 123 648 58 648 125 41 348 2027 40 2003 41 58 2008 40 648 44 2009 61 304 44 2010 61 648 44 2013 61 648 44 2034 61 2035 40 41 44 2037 61 1500 44 41 2096 61 2019 46 2020 46 2021 40 2010 61 648 41 2003 46 2017 40 2096 46 2013 44 648 41 2003 46 2109 40 2096 46 2141 40 648 41 41 2027 40 2003 41 
134391,Python,"class SystemChecksTestCase(SimpleTestCase):

    def test_checks_are_performed(self):
        admin.site.register(Song, MyAdmin)
        try:
            errors = checks.run_checks()
            expected = ['error!']
            self.assertEqual(errors, expected)
        finally:
            admin.site.unregister(Song)

    @override_settings(INSTALLED_APPS=['django.contrib.admin'])
    def test_apps_dependencies(self):
        errors = admin.checks.check_dependencies()
        expected = [
            checks.Error(
                ""'django.contrib.contenttypes' must be in ""
                ""INSTALLED_APPS in order to use the admin application."",
                id=""admin.E401"",
            ),
            checks.Error(
                ""'django.contrib.auth' must be in INSTALLED_APPS in order ""
                ""to use the admin application."",
                id='admin.E405',
            ),
            checks.Error(
                ""'django.contrib.messages' must be in INSTALLED_APPS in order ""
                ""to use the admin application."",
                id='admin.E406',
            ),
        ]
        self.assertEqual(errors, expected)

    @override_settings(TEMPLATES=[])
    def test_no_template_engines(self):
        self.assertEqual(admin.checks.check_dependencies(), [
            checks.Error(
                ""A 'django.template.backends.django.DjangoTemplates' ""
                ""instance must be configured in TEMPLATES in order to use ""
                ""the admin application."",
                id='admin.E403',
            )
        ])

    @override_settings(
        TEMPLATES=[{
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [],
            },
        }],
    )
    def test_context_processor_dependencies(self):
        expected = [
            checks.Error(
                ""'django.contrib.auth.context_processors.auth' must be ""
                ""enabled in DjangoTemplates (TEMPLATES) if using the default ""
                ""auth backend in order to use the admin application."",
                id='admin.E402',
            ),
            checks.Error(
                ""'django.contrib.messages.context_processors.messages' must ""
                ""be enabled in DjangoTemplates (TEMPLATES) in order to use ""
                ""the admin application."",
                id='admin.E404',
            ),
            checks.Warning(
                ""'django.template.context_processors.request' must be enabled ""
                ""in DjangoTemplates (TEMPLATES) in order to use the admin ""
                ""navigation sidebar."",
                id='admin.W411',
            )
        ]
        self.assertEqual(admin.checks.check_dependencies(), expected)
        # The first error doesn't happen if
        # 'django.contrib.auth.backends.ModelBackend' isn't in
        # AUTHENTICATION_BACKENDS.
        with self.settings(AUTHENTICATION_BACKENDS=[]):
            self.assertEqual(admin.checks.check_dependencies(), expected[1:])

    @override_settings(
        AUTHENTICATION_BACKENDS=['admin_checks.tests.ModelBackendSubclass'],
        TEMPLATES=[{
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.request',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        }],
    )
    def test_context_processor_dependencies_model_backend_subclass(self):
        self.assertEqual(admin.checks.check_dependencies(), [
            checks.Error(
                ""'django.contrib.auth.context_processors.auth' must be ""
                ""enabled in DjangoTemplates (TEMPLATES) if using the default ""
                ""auth backend in order to use the admin application."",
                id='admin.E402',
            ),
        ])

    @override_settings(
        TEMPLATES=[
            {
                'BACKEND': 'django.template.backends.dummy.TemplateStrings',
                'DIRS': [],
                'APP_DIRS': True,
            },
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ],
    )
    def test_several_templates_backends(self):
        self.assertEqual(admin.checks.check_dependencies(), [])

    @override_settings(MIDDLEWARE=[])
    def test_middleware_dependencies(self):
        errors = admin.checks.check_dependencies()
        expected = [
            checks.Error(
                ""'django.contrib.auth.middleware.AuthenticationMiddleware' ""
                ""must be in MIDDLEWARE in order to use the admin application."",
                id='admin.E408',
            ),
            checks.Error(
                ""'django.contrib.messages.middleware.MessageMiddleware' ""
                ""must be in MIDDLEWARE in order to use the admin application."",
                id='admin.E409',
            ),
            checks.Error(
                ""'django.contrib.sessions.middleware.SessionMiddleware' ""
                ""must be in MIDDLEWARE in order to use the admin application."",
                hint=(
                    ""Insert ""
                    ""'django.contrib.sessions.middleware.SessionMiddleware' ""
                    ""before ""
                    ""'django.contrib.auth.middleware.AuthenticationMiddleware'.""
                ),
                id='admin.E410',
            ),
        ]
        self.assertEqual(errors, expected)

    @override_settings(MIDDLEWARE=[
        'admin_checks.tests.AuthenticationMiddlewareSubclass',
        'admin_checks.tests.MessageMiddlewareSubclass',
        'admin_checks.tests.SessionMiddlewareSubclass',
    ])
    def test_middleware_subclasses(self):
        self.assertEqual(admin.checks.check_dependencies(), [])

    @override_settings(MIDDLEWARE=[
        'django.contrib.does.not.Exist',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
    ])
    def test_admin_check_ignores_import_error_in_middleware(self):
        self.assertEqual(admin.checks.check_dependencies(), [])

    def test_custom_adminsite(self):
        class CustomAdminSite(admin.AdminSite):
            pass

        custom_site = CustomAdminSite()
        custom_site.register(Song, MyAdmin)
        try:
            errors = checks.run_checks()
            expected = ['error!']
            self.assertEqual(errors, expected)
        finally:
            custom_site.unregister(Song)

    def test_allows_checks_relying_on_other_modeladmins(self):
        class MyBookAdmin(admin.ModelAdmin):
            def check(self, **kwargs):
                errors = super().check(**kwargs)
                author_admin = self.admin_site._registry.get(Author)
                if author_admin is None:
                    errors.append('AuthorAdmin missing!')
                return errors

        class MyAuthorAdmin(admin.ModelAdmin):
            pass

        admin.site.register(Book, MyBookAdmin)
        admin.site.register(Author, MyAuthorAdmin)
        try:
            self.assertEqual(admin.site.check(None), [])
        finally:
            admin.site.unregister(Book)
            admin.site.unregister(Author)

    def test_field_name_not_in_list_display(self):
        class SongAdmin(admin.ModelAdmin):
            list_editable = [""original_release""]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'list_editable[0]' refers to 'original_release', ""
                ""which is not contained in 'list_display'."",
                obj=SongAdmin,
                id='admin.E122',
            )
        ]
        self.assertEqual(errors, expected)

    def test_list_editable_not_a_list_or_tuple(self):
        class SongAdmin(admin.ModelAdmin):
            list_editable = 'test'

        self.assertEqual(SongAdmin(Song, AdminSite()).check(), [
            checks.Error(
                ""The value of 'list_editable' must be a list or tuple."",
                obj=SongAdmin,
                id='admin.E120',
            )
        ])

    def test_list_editable_missing_field(self):
        class SongAdmin(admin.ModelAdmin):
            list_editable = ('test',)

        self.assertEqual(SongAdmin(Song, AdminSite()).check(), [
            checks.Error(
                ""The value of 'list_editable[0]' refers to 'test', which is ""
                ""not a field of 'admin_checks.Song'."",
                obj=SongAdmin,
                id='admin.E121',
            )
        ])

    def test_readonly_and_editable(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = [""original_release""]
            list_display = [""pk"", ""original_release""]
            list_editable = [""original_release""]
            fieldsets = [
                (None, {
                    ""fields"": [""title"", ""original_release""],
                }),
            ]
        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'list_editable[0]' refers to 'original_release', ""
                ""which is not editable through the admin."",
                obj=SongAdmin,
                id='admin.E125',
            )
        ]
        self.assertEqual(errors, expected)

    def test_editable(self):
        class SongAdmin(admin.ModelAdmin):
            list_display = [""pk"", ""title""]
            list_editable = [""title""]
            fieldsets = [
                (None, {
                    ""fields"": [""title"", ""original_release""],
                }),
            ]

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_custom_modelforms_with_fields_fieldsets(self):
        """"""
        # Regression test for #8027: custom ModelForms with fields/fieldsets
        """"""
        errors = ValidFields(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_custom_get_form_with_fieldsets(self):
        """"""
        The fieldsets checks are skipped when the ModelAdmin.get_form() method
        is overridden.
        """"""
        errors = ValidFormFieldsets(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_fieldsets_fields_non_tuple(self):
        """"""
        The first fieldset's fields must be a list/tuple.
        """"""
        class NotATupleAdmin(admin.ModelAdmin):
            list_display = [""pk"", ""title""]
            list_editable = [""title""]
            fieldsets = [
                (None, {
                    ""fields"": ""title""  # not a tuple
                }),
            ]

        errors = NotATupleAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fieldsets[0][1]['fields']' must be a list or tuple."",
                obj=NotATupleAdmin,
                id='admin.E008',
            )
        ]
        self.assertEqual(errors, expected)

    def test_nonfirst_fieldset(self):
        """"""
        The second fieldset's fields must be a list/tuple.
        """"""
        class NotATupleAdmin(admin.ModelAdmin):
            fieldsets = [
                (None, {
                    ""fields"": (""title"",)
                }),
                ('foo', {
                    ""fields"": ""author""  # not a tuple
                }),
            ]

        errors = NotATupleAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fieldsets[1][1]['fields']' must be a list or tuple."",
                obj=NotATupleAdmin,
                id='admin.E008',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_values(self):
        """"""
        Tests for basic system checks of 'exclude' option values (#12689)
        """"""
        class ExcludedFields1(admin.ModelAdmin):
            exclude = 'foo'

        errors = ExcludedFields1(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'exclude' must be a list or tuple."",
                obj=ExcludedFields1,
                id='admin.E014',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_duplicate_values(self):
        class ExcludedFields2(admin.ModelAdmin):
            exclude = ('name', 'name')

        errors = ExcludedFields2(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'exclude' contains duplicate field(s)."",
                obj=ExcludedFields2,
                id='admin.E015',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_in_inline(self):
        class ExcludedFieldsInline(admin.TabularInline):
            model = Song
            exclude = 'foo'

        class ExcludedFieldsAlbumAdmin(admin.ModelAdmin):
            model = Album
            inlines = [ExcludedFieldsInline]

        errors = ExcludedFieldsAlbumAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'exclude' must be a list or tuple."",
                obj=ExcludedFieldsInline,
                id='admin.E014',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_inline_model_admin(self):
        """"""
        Regression test for #9932 - exclude in InlineModelAdmin should not
        contain the ForeignKey field used in ModelAdmin.model
        """"""
        class SongInline(admin.StackedInline):
            model = Song
            exclude = ['album']

        class AlbumAdmin(admin.ModelAdmin):
            model = Album
            inlines = [SongInline]

        errors = AlbumAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""Cannot exclude the field 'album', because it is the foreign key ""
                ""to the parent model 'admin_checks.Album'."",
                obj=SongInline,
                id='admin.E201',
            )
        ]
        self.assertEqual(errors, expected)

    def test_valid_generic_inline_model_admin(self):
        """"""
        Regression test for #22034 - check that generic inlines don't look for
        normal ForeignKey relations.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_generic_inline_model_admin_non_generic_model(self):
        """"""
        A model without a GenericForeignKey raises problems if it's included
        in a GenericInlineModelAdmin definition.
        """"""
        class BookInline(GenericStackedInline):
            model = Book

        class SongAdmin(admin.ModelAdmin):
            inlines = [BookInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.Book' has no GenericForeignKey."",
                obj=BookInline,
                id='admin.E301',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_bad_ct_field(self):
        """"""
        A GenericInlineModelAdmin errors if the ct_field points to a
        nonexistent field.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_field = 'nonexistent'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'ct_field' references 'nonexistent', which is not a field on 'admin_checks.Influence'."",
                obj=InfluenceInline,
                id='admin.E302',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_bad_fk_field(self):
        """"""
        A GenericInlineModelAdmin errors if the ct_fk_field points to a
        nonexistent field.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_fk_field = 'nonexistent'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'ct_fk_field' references 'nonexistent', which is not a field on 'admin_checks.Influence'."",
                obj=InfluenceInline,
                id='admin.E303',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_non_gfk_ct_field(self):
        """"""
        A GenericInlineModelAdmin raises problems if the ct_field points to a
        field that isn't part of a GenericForeignKey.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_field = 'name'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.Influence' has no GenericForeignKey using ""
                ""content type field 'name' and object ID field 'object_id'."",
                obj=InfluenceInline,
                id='admin.E304',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_non_gfk_fk_field(self):
        """"""
        A GenericInlineModelAdmin raises problems if the ct_fk_field points to
        a field that isn't part of a GenericForeignKey.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_fk_field = 'name'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.Influence' has no GenericForeignKey using ""
                ""content type field 'content_type' and object ID field 'name'."",
                obj=InfluenceInline,
                id='admin.E304',
            )
        ]
        self.assertEqual(errors, expected)

    def test_app_label_in_admin_checks(self):
        class RawIdNonexistentAdmin(admin.ModelAdmin):
            raw_id_fields = ('nonexistent',)

        errors = RawIdNonexistentAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'raw_id_fields[0]' refers to 'nonexistent', ""
                ""which is not a field of 'admin_checks.Album'."",
                obj=RawIdNonexistentAdmin,
                id='admin.E002',
            )
        ]
        self.assertEqual(errors, expected)

    def test_fk_exclusion(self):
        """"""
        Regression test for #11709 - when testing for fk excluding (when exclude is
        given) make sure fk_name is honored or things blow up when there is more
        than one fk to the parent model.
        """"""
        class TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE
            exclude = (""e"",)
            fk_name = ""album1""

        class MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_inline_self_check(self):
        class TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE

        class MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.TwoAlbumFKAndAnE' has more than one ForeignKey ""
                ""to 'admin_checks.Album'. You must specify a 'fk_name' ""
                ""attribute."",
                obj=TwoAlbumFKAndAnEInline,
                id='admin.E202',
            )
        ]
        self.assertEqual(errors, expected)

    def test_inline_with_specified(self):
        class TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE
            fk_name = ""album1""

        class MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_inlines_property(self):
        class CitiesInline(admin.TabularInline):
            model = City

        class StateAdmin(admin.ModelAdmin):
            @property
            def inlines(self):
                return [CitiesInline]

        errors = StateAdmin(State, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""title"",)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_on_method(self):
        @admin.display
        def my_function(obj):
            pass

        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (my_function,)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_on_modeladmin(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""readonly_method_on_modeladmin"",)

            @admin.display
            def readonly_method_on_modeladmin(self, obj):
                pass

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_dynamic_attribute_on_modeladmin(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""dynamic_method"",)

            def __getattr__(self, item):
                if item == ""dynamic_method"":
                    @admin.display
                    def method(obj):
                        pass
                    return method
                raise AttributeError

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_method_on_model(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""readonly_method_on_model"",)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_nonexistent_field(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""title"", ""nonexistent"")

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'readonly_fields[1]' is not a callable, an attribute ""
                ""of 'SongAdmin', or an attribute of 'admin_checks.Song'."",
                obj=SongAdmin,
                id='admin.E035',
            )
        ]
        self.assertEqual(errors, expected)

    def test_nonexistent_field_on_inline(self):
        class CityInline(admin.TabularInline):
            model = City
            readonly_fields = ['i_dont_exist']  # Missing attribute

        errors = CityInline(State, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'readonly_fields[0]' is not a callable, an attribute ""
                ""of 'CityInline', or an attribute of 'admin_checks.City'."",
                obj=CityInline,
                id='admin.E035',
            )
        ]
        self.assertEqual(errors, expected)

    def test_readonly_fields_not_list_or_tuple(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = 'test'

        self.assertEqual(SongAdmin(Song, AdminSite()).check(), [
            checks.Error(
                ""The value of 'readonly_fields' must be a list or tuple."",
                obj=SongAdmin,
                id='admin.E034',
            )
        ])

    def test_extra(self):
        class SongAdmin(admin.ModelAdmin):
            @admin.display
            def awesome_song(self, instance):
                if instance.title == ""Born to Run"":
                    return ""Best Ever!""
                return ""Status unknown.""

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_lambda(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (lambda obj: ""test"",)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_graceful_m2m_fail(self):
        """"""
        Regression test for #12203/#12237 - Fail more gracefully when a M2M field that
        specifies the 'through' option is included in the 'fields' or the 'fieldsets'
        ModelAdmin options.
        """"""
        class BookAdmin(admin.ModelAdmin):
            fields = ['authors']

        errors = BookAdmin(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fields' cannot include the ManyToManyField 'authors', ""
                ""because that field manually specifies a relationship model."",
                obj=BookAdmin,
                id='admin.E013',
            )
        ]
        self.assertEqual(errors, expected)

    def test_cannot_include_through(self):
        class FieldsetBookAdmin(admin.ModelAdmin):
            fieldsets = (
                ('Header 1', {'fields': ('name',)}),
                ('Header 2', {'fields': ('authors',)}),
            )

        errors = FieldsetBookAdmin(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fieldsets[1][1][\""fields\""]' cannot include the ManyToManyField ""
                ""'authors', because that field manually specifies a relationship model."",
                obj=FieldsetBookAdmin,
                id='admin.E013',
            )
        ]
        self.assertEqual(errors, expected)

    def test_nested_fields(self):
        class NestedFieldsAdmin(admin.ModelAdmin):
            fields = ('price', ('name', 'subtitle'))

        errors = NestedFieldsAdmin(Book, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_nested_fieldsets(self):
        class NestedFieldsetAdmin(admin.ModelAdmin):
            fieldsets = (
                ('Main', {'fields': ('price', ('name', 'subtitle'))}),
            )

        errors = NestedFieldsetAdmin(Book, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_explicit_through_override(self):
        """"""
        Regression test for #12209 -- If the explicitly provided through model
        is specified as a string, the admin should still be able use
        Model.m2m_field.through
        """"""
        class AuthorsInline(admin.TabularInline):
            model = Book.authors.through

        class BookAdmin(admin.ModelAdmin):
            inlines = [AuthorsInline]

        errors = BookAdmin(Book, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_non_model_fields(self):
        """"""
        Regression for ensuring ModelAdmin.fields can contain non-model fields
        that broke with r11737
        """"""
        class SongForm(forms.ModelForm):
            extra_data = forms.CharField()

        class FieldsOnFormOnlyAdmin(admin.ModelAdmin):
            form = SongForm
            fields = ['title', 'extra_data']

        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_non_model_first_field(self):
        """"""
        Regression for ensuring ModelAdmin.field can handle first elem being a
        non-model field (test fix for UnboundLocalError introduced with r16225).
        """"""
        class SongForm(forms.ModelForm):
            extra_data = forms.CharField()

            class Meta:
                model = Song
                fields = '__all__'

        class FieldsOnFormOnlyAdmin(admin.ModelAdmin):
            form = SongForm
            fields = ['extra_data', 'title']

        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_check_sublists_for_duplicates(self):
        class MyModelAdmin(admin.ModelAdmin):
            fields = ['state', ['state']]

        errors = MyModelAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fields' contains duplicate field(s)."",
                obj=MyModelAdmin,
                id='admin.E006'
            )
        ]
        self.assertEqual(errors, expected)

    def test_check_fieldset_sublists_for_duplicates(self):
        class MyModelAdmin(admin.ModelAdmin):
            fieldsets = [
                (None, {
                    'fields': ['title', 'album', ('title', 'album')]
                }),
            ]

        errors = MyModelAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""There are duplicate field(s) in 'fieldsets[0][1]'."",
                obj=MyModelAdmin,
                id='admin.E012'
            )
        ]
        self.assertEqual(errors, expected)

    def test_list_filter_works_on_through_field_even_when_apps_not_ready(self):
        """"""
        Ensure list_filter can access reverse fields even when the app registry
        is not ready; refs #24146.
        """"""
        class BookAdminWithListFilter(admin.ModelAdmin):
            list_filter = ['authorsbooks__featured']

        # Temporarily pretending apps are not ready yet. This issue can happen
        # if the value of 'list_filter' refers to a 'through__field'.
        Book._meta.apps.ready = False
        try:
            errors = BookAdminWithListFilter(Book, AdminSite()).check()
            self.assertEqual(errors, [])
        finally:
            Book._meta.apps.ready = True",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 2004 46 2005 46 444 40 2006 44 2007 41 474 58 2008 61 2009 46 2010 40 41 2011 61 91 648 93 2003 46 2012 40 2008 44 2011 41 382 58 2004 46 2005 46 2013 40 2006 41 64 2014 40 2015 61 91 648 93 41 348 2016 40 2003 41 58 2008 61 2004 46 2009 46 2017 40 41 2011 61 91 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 93 2003 46 2012 40 2008 44 2011 41 64 2014 40 2020 61 91 93 41 348 2021 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 93 41 64 2014 40 2020 61 91 123 648 58 648 44 648 58 91 93 44 648 58 304 44 648 58 123 648 58 91 93 44 125 44 125 93 44 41 348 2022 40 2003 41 58 2011 61 91 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 44 2009 46 2023 40 648 648 648 44 2019 61 648 44 41 93 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 2011 41 621 621 621 497 2003 46 2024 40 2025 61 91 93 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 2011 91 1501 58 93 41 64 2014 40 2025 61 91 648 93 44 2020 61 91 123 648 58 648 44 648 58 91 93 44 648 58 304 44 648 58 123 648 58 91 648 44 648 44 93 44 125 44 125 93 44 41 348 2026 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 44 93 41 64 2014 40 2020 61 91 123 648 58 648 44 648 58 91 93 44 648 58 304 44 125 44 123 648 58 648 44 648 58 91 93 44 648 58 304 44 648 58 123 648 58 91 648 44 648 44 648 44 93 44 125 44 125 44 93 44 41 348 2027 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 93 41 64 2014 40 2028 61 91 93 41 348 2029 40 2003 41 58 2008 61 2004 46 2009 46 2017 40 41 2011 61 91 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2030 61 40 648 648 648 648 41 44 2019 61 648 44 41 44 93 2003 46 2012 40 2008 44 2011 41 64 2014 40 2028 61 91 648 44 648 44 648 44 93 41 348 2031 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 93 41 64 2014 40 2028 61 91 648 44 648 44 648 44 648 44 93 41 348 2032 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 93 41 348 2033 40 2003 41 58 334 2034 40 2004 46 2035 41 58 434 2036 61 2034 40 41 2036 46 444 40 2006 44 2007 41 474 58 2008 61 2009 46 2010 40 41 2011 61 91 648 93 2003 46 2012 40 2008 44 2011 41 382 58 2036 46 2013 40 2006 41 348 2037 40 2003 41 58 334 2038 40 2004 46 2039 41 58 348 2040 40 2003 44 638 2041 41 58 2008 61 463 40 41 46 2040 40 638 2041 41 2042 61 2003 46 2043 46 2044 46 2045 40 2046 41 392 2042 407 303 58 2008 46 2047 40 648 41 450 2008 334 2048 40 2004 46 2039 41 58 434 2004 46 2005 46 444 40 2049 44 2038 41 2004 46 2005 46 444 40 2046 44 2048 41 474 58 2003 46 2012 40 2004 46 2005 46 2040 40 303 41 44 91 93 41 382 58 2004 46 2005 46 2013 40 2049 41 2004 46 2005 46 2013 40 2046 41 348 2050 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2052 61 91 648 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2054 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2052 61 648 2003 46 2012 40 2051 40 2006 44 2035 40 41 41 46 2040 40 41 44 91 2009 46 2018 40 648 44 2053 61 2051 44 2019 61 648 44 41 93 41 348 2055 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2052 61 40 648 44 41 2003 46 2012 40 2051 40 2006 44 2035 40 41 41 46 2040 40 41 44 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 41 348 2056 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 91 648 93 2058 61 91 648 44 648 93 2052 61 91 648 93 2059 61 91 40 303 44 123 648 58 91 648 44 648 93 44 125 41 44 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2060 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2058 61 91 648 44 648 93 2052 61 91 648 93 2059 61 91 40 303 44 123 648 58 91 648 44 648 93 44 125 41 44 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2061 40 2003 41 58 648 2008 61 2062 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2063 40 2003 41 58 648 2008 61 2064 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2065 40 2003 41 58 648 334 2066 40 2004 46 2039 41 58 2058 61 91 648 44 648 93 2052 61 91 648 93 2059 61 91 40 303 44 123 648 58 648 621 125 41 44 93 2008 61 2066 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2066 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2067 40 2003 41 58 648 334 2066 40 2004 46 2039 41 58 2059 61 91 40 303 44 123 648 58 40 648 44 41 125 41 44 40 648 44 123 648 58 648 621 125 41 44 93 2008 61 2066 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2066 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2068 40 2003 41 58 648 334 2069 40 2004 46 2039 41 58 2070 61 648 2008 61 2069 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2069 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2071 40 2003 41 58 334 2072 40 2004 46 2039 41 58 2070 61 40 648 44 648 41 2008 61 2072 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2072 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2073 40 2003 41 58 334 2074 40 2004 46 2075 41 58 2076 61 2006 2070 61 648 334 2077 40 2004 46 2039 41 58 2076 61 2078 2079 61 91 2074 93 2008 61 2077 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2074 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2080 40 2003 41 58 648 334 2081 40 2004 46 2082 41 58 2076 61 2006 2070 61 91 648 93 334 2083 40 2004 46 2039 41 58 2076 61 2078 2079 61 91 2081 93 2008 61 2083 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2081 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2084 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2088 40 2003 41 58 648 334 2089 40 2086 41 58 2076 61 2049 334 2051 40 2004 46 2039 41 58 2079 61 91 2089 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2089 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2090 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2091 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2092 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2093 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2094 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2091 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2095 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2093 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2096 40 2003 41 58 334 2097 40 2004 46 2039 41 58 2098 61 40 648 44 41 2008 61 2097 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2097 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2099 40 2003 41 58 648 334 2100 40 2004 46 2075 41 58 2076 61 2101 2070 61 40 648 44 41 2102 61 648 334 2007 40 2004 46 2039 41 58 2079 61 91 2100 93 2008 61 2007 40 2078 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2103 40 2003 41 58 334 2100 40 2004 46 2075 41 58 2076 61 2101 334 2007 40 2004 46 2039 41 58 2079 61 91 2100 93 2008 61 2007 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 648 44 2053 61 2100 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2104 40 2003 41 58 334 2100 40 2004 46 2075 41 58 2076 61 2101 2102 61 648 334 2007 40 2004 46 2039 41 58 2079 61 91 2100 93 2008 61 2007 40 2078 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2105 40 2003 41 58 334 2106 40 2004 46 2075 41 58 2076 61 2107 334 2108 40 2004 46 2039 41 58 64 2109 348 2079 40 2003 41 58 450 91 2106 93 2008 61 2108 40 2110 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2111 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2112 40 2003 41 58 64 2004 46 2113 348 2114 40 2053 41 58 434 334 2051 40 2004 46 2039 41 58 2057 61 40 2114 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2115 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 64 2004 46 2113 348 2116 40 2003 44 2053 41 58 434 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2117 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 348 2118 40 2003 44 2119 41 58 392 2119 614 648 58 64 2004 46 2113 348 2120 40 2053 41 58 434 450 2120 440 2121 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2122 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2123 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 648 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2124 40 2003 41 58 334 2125 40 2004 46 2075 41 58 2076 61 2107 2057 61 91 648 93 621 2008 61 2125 40 2110 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2125 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2126 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 648 2003 46 2012 40 2051 40 2006 44 2035 40 41 41 46 2040 40 41 44 91 2009 46 2018 40 648 44 2053 61 2051 44 2019 61 648 44 41 93 41 348 2127 40 2003 41 58 334 2051 40 2004 46 2039 41 58 64 2004 46 2113 348 2128 40 2003 44 2129 41 58 392 2129 46 2130 614 648 58 450 648 450 648 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2131 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 409 2053 58 648 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2132 40 2003 41 58 648 334 2133 40 2004 46 2039 41 58 2134 61 91 648 93 2008 61 2133 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2133 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2135 40 2003 41 58 334 2136 40 2004 46 2039 41 58 2059 61 40 40 648 44 123 648 58 40 648 44 41 125 41 44 40 648 44 123 648 58 40 648 44 41 125 41 44 41 2008 61 2136 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2136 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2137 40 2003 41 58 334 2138 40 2004 46 2039 41 58 2134 61 40 648 44 40 648 44 648 41 41 2008 61 2138 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2139 40 2003 41 58 334 2140 40 2004 46 2039 41 58 2059 61 40 40 648 44 123 648 58 40 648 44 40 648 44 648 41 41 125 41 44 41 2008 61 2140 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2141 40 2003 41 58 648 334 2142 40 2004 46 2075 41 58 2076 61 2049 46 2143 46 2144 334 2133 40 2004 46 2039 41 58 2079 61 91 2142 93 2008 61 2133 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2145 40 2003 41 58 648 334 2146 40 2147 46 2148 41 58 2149 61 2147 46 2150 40 41 334 2151 40 2004 46 2039 41 58 2152 61 2146 2134 61 91 648 44 648 93 2008 61 2151 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2153 40 2003 41 58 648 334 2146 40 2147 46 2148 41 58 2149 61 2147 46 2150 40 41 334 2154 58 2076 61 2006 2134 61 648 334 2151 40 2004 46 2039 41 58 2152 61 2146 2134 61 91 648 44 648 93 2008 61 2151 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2155 40 2003 41 58 334 2156 40 2004 46 2039 41 58 2134 61 91 648 44 91 648 93 93 2008 61 2156 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2156 44 2019 61 648 41 93 2003 46 2012 40 2008 44 2011 41 348 2157 40 2003 41 58 334 2156 40 2004 46 2039 41 58 2059 61 91 40 303 44 123 648 58 91 648 44 648 44 40 648 44 648 41 93 125 41 44 93 2008 61 2156 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2156 44 2019 61 648 41 93 2003 46 2012 40 2008 44 2011 41 348 2158 40 2003 41 58 648 334 2159 40 2004 46 2039 41 58 2160 61 91 648 93 621 621 2049 46 2161 46 2162 46 2163 61 302 474 58 2008 61 2159 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 382 58 2049 46 2161 46 2162 46 2163 61 304 
131899,Python,"class MigrationGraph:
    """"""
    Represent the digraph of all migrations in a project.

    Each migration is a node, and each dependency is an edge. There are
    no implicit dependencies between numbered migrations - the numbering is
    merely a convention to aid file listing. Every new numbered migration
    has a declared dependency to the previous number, meaning that VCS
    branch merges can be detected and resolved.

    Migrations files can be marked as replacing another set of migrations -
    this is to support the ""squash"" feature. The graph handler isn't responsible
    for these; instead, the code to load them in here should examine the
    migration files and if the replaced migrations are all either unapplied
    or not present, it should ignore the replaced ones, load in just the
    replacing migration, and repoint any dependencies that pointed to the
    replaced migrations to point to the replacing one.

    A node should be a tuple: (app_path, migration_name). The tree special-cases
    things within an app - namely, root nodes and leaf nodes ignore dependencies
    to other apps.
    """"""

    def __init__(self):
        self.node_map = {}
        self.nodes = {}

    def add_node(self, key, migration):
        assert key not in self.node_map
        node = Node(key)
        self.node_map[key] = node
        self.nodes[key] = migration

    def add_dummy_node(self, key, origin, error_message):
        node = DummyNode(key, origin, error_message)
        self.node_map[key] = node
        self.nodes[key] = None

    def add_dependency(self, migration, child, parent, skip_validation=False):
        """"""
        This may create dummy nodes if they don't yet exist. If
        `skip_validation=True`, validate_consistency() should be called
        afterward.
        """"""
        if child not in self.nodes:
            error_message = (
                ""Migration %s dependencies reference nonexistent""
                "" child node %r"" % (migration, child)
            )
            self.add_dummy_node(child, migration, error_message)
        if parent not in self.nodes:
            error_message = (
                ""Migration %s dependencies reference nonexistent""
                "" parent node %r"" % (migration, parent)
            )
            self.add_dummy_node(parent, migration, error_message)
        self.node_map[child].add_parent(self.node_map[parent])
        self.node_map[parent].add_child(self.node_map[child])
        if not skip_validation:
            self.validate_consistency()

    def remove_replaced_nodes(self, replacement, replaced):
        """"""
        Remove each of the `replaced` nodes (when they exist). Any
        dependencies that were referencing them are changed to reference the
        `replacement` node instead.
        """"""
        # Cast list of replaced keys to set to speed up lookup later.
        replaced = set(replaced)
        try:
            replacement_node = self.node_map[replacement]
        except KeyError as err:
            raise NodeNotFoundError(
                ""Unable to find replacement node %r. It was either never added""
                "" to the migration graph, or has been removed."" % (replacement,),
                replacement
            ) from err
        for replaced_key in replaced:
            self.nodes.pop(replaced_key, None)
            replaced_node = self.node_map.pop(replaced_key, None)
            if replaced_node:
                for child in replaced_node.children:
                    child.parents.remove(replaced_node)
                    # We don't want to create dependencies between the replaced
                    # node and the replacement node as this would lead to
                    # self-referencing on the replacement node at a later iteration.
                    if child.key not in replaced:
                        replacement_node.add_child(child)
                        child.add_parent(replacement_node)
                for parent in replaced_node.parents:
                    parent.children.remove(replaced_node)
                    # Again, to avoid self-referencing.
                    if parent.key not in replaced:
                        replacement_node.add_parent(parent)
                        parent.add_child(replacement_node)

    def remove_replacement_node(self, replacement, replaced):
        """"""
        The inverse operation to `remove_replaced_nodes`. Almost. Remove the
        replacement node `replacement` and remap its child nodes to `replaced`
        - the list of nodes it would have replaced. Don't remap its parent
        nodes as they are expected to be correct already.
        """"""
        self.nodes.pop(replacement, None)
        try:
            replacement_node = self.node_map.pop(replacement)
        except KeyError as err:
            raise NodeNotFoundError(
                ""Unable to remove replacement node %r. It was either never added""
                "" to the migration graph, or has been removed already."" % (replacement,),
                replacement
            ) from err
        replaced_nodes = set()
        replaced_nodes_parents = set()
        for key in replaced:
            replaced_node = self.node_map.get(key)
            if replaced_node:
                replaced_nodes.add(replaced_node)
                replaced_nodes_parents |= replaced_node.parents
        # We're only interested in the latest replaced node, so filter out
        # replaced nodes that are parents of other replaced nodes.
        replaced_nodes -= replaced_nodes_parents
        for child in replacement_node.children:
            child.parents.remove(replacement_node)
            for replaced_node in replaced_nodes:
                replaced_node.add_child(child)
                child.add_parent(replaced_node)
        for parent in replacement_node.parents:
            parent.children.remove(replacement_node)
            # NOTE: There is no need to remap parent dependencies as we can
            # assume the replaced nodes already have the correct ancestry.

    def validate_consistency(self):
        """"""Ensure there are no dummy nodes remaining in the graph.""""""
        [n.raise_error() for n in self.node_map.values() if isinstance(n, DummyNode)]

    def forwards_plan(self, target):
        """"""
        Given a node, return a list of which previous nodes (dependencies) must
        be applied, ending with the node itself. This is the list you would
        follow if applying the migrations to a database.
        """"""
        if target not in self.nodes:
            raise NodeNotFoundError(""Node %r not a valid node"" % (target,), target)
        return self.iterative_dfs(self.node_map[target])

    def backwards_plan(self, target):
        """"""
        Given a node, return a list of which dependent nodes (dependencies)
        must be unapplied, ending with the node itself. This is the list you
        would follow if removing the migrations from a database.
        """"""
        if target not in self.nodes:
            raise NodeNotFoundError(""Node %r not a valid node"" % (target,), target)
        return self.iterative_dfs(self.node_map[target], forwards=False)

    def iterative_dfs(self, start, forwards=True):
        """"""Iterative depth-first search for finding dependencies.""""""
        visited = []
        visited_set = set()
        stack = [(start, False)]
        while stack:
            node, processed = stack.pop()
            if node in visited_set:
                pass
            elif processed:
                visited_set.add(node)
                visited.append(node.key)
            else:
                stack.append((node, True))
                stack += [(n, False) for n in sorted(node.parents if forwards else node.children)]
        return visited

    def root_nodes(self, app=None):
        """"""
        Return all root nodes - that is, nodes with no dependencies inside
        their app. These are the starting point for an app.
        """"""
        roots = set()
        for node in self.nodes:
            if all(key[0] != node[0] for key in self.node_map[node].parents) and (not app or app == node[0]):
                roots.add(node)
        return sorted(roots)

    def leaf_nodes(self, app=None):
        """"""
        Return all leaf nodes - that is, nodes with no dependents in their app.
        These are the ""most current"" version of an app's schema.
        Having more than one per app is technically an error, but one that
        gets handled further up, in the interactive command - it's usually the
        result of a VCS merge and needs some user input.
        """"""
        leaves = set()
        for node in self.nodes:
            if all(key[0] != node[0] for key in self.node_map[node].children) and (not app or app == node[0]):
                leaves.add(node)
        return sorted(leaves)

    def ensure_not_cyclic(self):
        # Algo from GvR:
        # https://neopythonic.blogspot.com/2009/01/detecting-cycles-in-directed-graph.html
        todo = set(self.nodes)
        while todo:
            node = todo.pop()
            stack = [node]
            while stack:
                top = stack[-1]
                for child in self.node_map[top].children:
                    # Use child.key instead of child to speed up the frequent
                    # hashing.
                    node = child.key
                    if node in stack:
                        cycle = stack[stack.index(node):]
                        raise CircularDependencyError("", "".join(""%s.%s"" % n for n in cycle))
                    if node in todo:
                        stack.append(node)
                        todo.remove(node)
                        break
                else:
                    node = stack.pop()

    def __str__(self):
        return 'Graph: %s nodes, %s edges' % self._nodes_and_edges()

    def __repr__(self):
        nodes, edges = self._nodes_and_edges()
        return '<%s: nodes=%s, edges=%s>' % (self.__class__.__name__, nodes, edges)

    def _nodes_and_edges(self):
        return len(self.nodes), sum(len(node.parents) for node in self.node_map.values())

    def _generate_plan(self, nodes, at_end):
        plan = []
        for node in nodes:
            for migration in self.forwards_plan(node):
                if migration not in plan and (at_end or migration not in nodes):
                    plan.append(migration)
        return plan

    def make_state(self, nodes=None, at_end=True, real_apps=None):
        """"""
        Given a migration node or nodes, return a complete ProjectState for it.
        If at_end is False, return the state before the migration has run.
        If nodes is not provided, return the overall most current project state.
        """"""
        if nodes is None:
            nodes = list(self.leaf_nodes())
        if not nodes:
            return ProjectState()
        if not isinstance(nodes[0], tuple):
            nodes = [nodes]
        plan = self._generate_plan(nodes, at_end)
        project_state = ProjectState(real_apps=real_apps)
        for node in plan:
            project_state = self.nodes[node].mutate_state(project_state, preserve=False)
        return project_state

    def __contains__(self, node):
        return node in self.nodes",1,334 2000 58 648 348 2001 40 2002 41 58 2002 46 2003 61 123 125 2002 46 2004 61 123 125 348 2005 40 2002 44 2006 44 2007 41 58 313 2006 422 398 2002 46 2003 2008 61 2009 40 2006 41 2002 46 2003 91 2006 93 61 2008 2002 46 2004 91 2006 93 61 2007 348 2010 40 2002 44 2006 44 2011 44 2012 41 58 2008 61 2013 40 2006 44 2011 44 2012 41 2002 46 2003 91 2006 93 61 2008 2002 46 2004 91 2006 93 61 303 348 2014 40 2002 44 2007 44 2015 44 2016 44 2017 61 302 41 58 648 392 2015 422 398 2002 46 2004 58 2012 61 40 648 648 37 40 2007 44 2015 41 41 2002 46 2010 40 2015 44 2007 44 2012 41 392 2016 422 398 2002 46 2004 58 2012 61 40 648 648 37 40 2007 44 2016 41 41 2002 46 2010 40 2016 44 2007 44 2012 41 2002 46 2003 91 2015 93 46 2018 40 2002 46 2003 91 2016 93 41 2002 46 2003 91 2016 93 46 2019 40 2002 46 2003 91 2015 93 41 392 422 2017 58 2002 46 2020 40 41 348 2021 40 2002 44 2022 44 2023 41 58 648 621 2023 61 2024 40 2023 41 474 58 2025 61 2002 46 2003 91 2022 93 374 2026 311 2027 58 440 2028 40 648 648 37 40 2022 44 41 44 2022 41 388 2027 385 2029 398 2023 58 2002 46 2004 46 2030 40 2029 44 303 41 2031 61 2002 46 2003 46 2030 40 2029 44 303 41 392 2031 58 385 2015 398 2031 46 2032 58 2015 46 2033 46 2034 40 2031 41 621 621 621 392 2015 46 2006 422 398 2023 58 2025 46 2019 40 2015 41 2015 46 2018 40 2025 41 385 2016 398 2031 46 2033 58 2016 46 2032 46 2034 40 2031 41 621 392 2016 46 2006 422 398 2023 58 2025 46 2018 40 2016 41 2016 46 2019 40 2025 41 348 2035 40 2002 44 2022 44 2023 41 58 648 2002 46 2004 46 2030 40 2022 44 303 41 474 58 2025 61 2002 46 2003 46 2030 40 2022 41 374 2026 311 2027 58 440 2028 40 648 648 37 40 2022 44 41 44 2022 41 388 2027 2036 61 2024 40 41 2037 61 2024 40 41 385 2006 398 2023 58 2031 61 2002 46 2003 46 2038 40 2006 41 392 2031 58 2036 46 2039 40 2031 41 2037 635 2031 46 2033 621 621 2036 628 2037 385 2015 398 2025 46 2032 58 2015 46 2033 46 2034 40 2025 41 385 2031 398 2036 58 2031 46 2019 40 2015 41 2015 46 2018 40 2031 41 385 2016 398 2025 46 2033 58 2016 46 2032 46 2034 40 2025 41 621 621 348 2020 40 2002 41 58 648 91 2040 46 2041 40 41 385 2040 398 2002 46 2003 46 2042 40 41 392 2043 40 2040 44 2013 41 93 348 2044 40 2002 44 2045 41 58 648 392 2045 422 398 2002 46 2004 58 440 2028 40 648 37 40 2045 44 41 44 2045 41 450 2002 46 2046 40 2002 46 2003 91 2045 93 41 348 2047 40 2002 44 2045 41 58 648 392 2045 422 398 2002 46 2004 58 440 2028 40 648 37 40 2045 44 41 44 2045 41 450 2002 46 2046 40 2002 46 2003 91 2045 93 44 2048 61 302 41 348 2046 40 2002 44 2049 44 2048 61 304 41 58 648 2050 61 91 93 2051 61 2024 40 41 2052 61 91 40 2049 44 302 41 93 496 2052 58 2008 44 2053 61 2052 46 2030 40 41 392 2008 398 2051 58 434 359 2053 58 2051 46 2039 40 2008 41 2050 46 2054 40 2008 46 2006 41 360 58 2052 46 2054 40 40 2008 44 304 41 41 2052 636 91 40 2040 44 302 41 385 2040 398 2055 40 2008 46 2033 392 2048 360 2008 46 2032 41 93 450 2050 348 2056 40 2002 44 2057 61 303 41 58 648 2058 61 2024 40 41 385 2008 398 2002 46 2004 58 392 2059 40 2006 91 1500 93 631 2008 91 1500 93 385 2006 398 2002 46 2003 91 2008 93 46 2033 41 308 40 422 2057 428 2057 614 2008 91 1500 93 41 58 2058 46 2039 40 2008 41 450 2055 40 2058 41 348 2060 40 2002 44 2057 61 303 41 58 648 2061 61 2024 40 41 385 2008 398 2002 46 2004 58 392 2059 40 2006 91 1500 93 631 2008 91 1500 93 385 2006 398 2002 46 2003 91 2008 93 46 2032 41 308 40 422 2057 428 2057 614 2008 91 1500 93 41 58 2061 46 2039 40 2008 41 450 2055 40 2061 41 348 2062 40 2002 41 58 621 621 2063 61 2024 40 2002 46 2004 41 496 2063 58 2008 61 2063 46 2030 40 41 2052 61 91 2008 93 496 2052 58 2064 61 2052 91 45 1501 93 385 2015 398 2002 46 2003 91 2064 93 46 2032 58 621 621 2008 61 2015 46 2006 392 2008 398 2052 58 2065 61 2052 91 2052 46 2066 40 2008 41 58 93 440 2067 40 648 46 2068 40 648 37 2040 385 2040 398 2065 41 41 392 2008 398 2063 58 2052 46 2054 40 2008 41 2063 46 2034 40 2008 41 325 360 58 2008 61 2052 46 2030 40 41 348 2069 40 2002 41 58 450 648 37 2002 46 2070 40 41 348 2071 40 2002 41 58 2004 44 2072 61 2002 46 2070 40 41 450 648 37 40 2002 46 2073 46 2074 44 2004 44 2072 41 348 2070 40 2002 41 58 450 2075 40 2002 46 2004 41 44 2076 40 2075 40 2008 46 2033 41 385 2008 398 2002 46 2003 46 2042 40 41 41 348 2077 40 2002 44 2004 44 2078 41 58 2079 61 91 93 385 2008 398 2004 58 385 2007 398 2002 46 2044 40 2008 41 58 392 2007 422 398 2079 308 40 2078 428 2007 422 398 2004 41 58 2079 46 2054 40 2007 41 450 2079 348 2080 40 2002 44 2004 61 303 44 2078 61 304 44 2081 61 303 41 58 648 392 2004 407 303 58 2004 61 411 40 2002 46 2060 40 41 41 392 422 2004 58 450 2082 40 41 392 422 2043 40 2004 91 1500 93 44 2083 41 58 2004 61 91 2004 93 2079 61 2002 46 2077 40 2004 44 2078 41 2084 61 2082 40 2081 61 2081 41 385 2008 398 2079 58 2084 61 2002 46 2004 91 2008 93 46 2085 40 2084 44 2086 61 302 41 450 2084 348 2087 40 2002 44 2008 41 58 450 2008 398 2002 46 2004 
130795,Python,"class Command(BaseCommand):
    help = ""Shows all available migrations for the current project""

    def add_arguments(self, parser):
        parser.add_argument(
            'app_label', nargs='*',
            help='App labels of applications to limit the output to.',
        )
        parser.add_argument(
            '--database', default=DEFAULT_DB_ALIAS,
            help=(
                'Nominates a database to show migrations for. Defaults to the '
                '""default"" database.'
            ),
        )

        formats = parser.add_mutually_exclusive_group()
        formats.add_argument(
            '--list', '-l', action='store_const', dest='format', const='list',
            help=(
                'Shows a list of all migrations and which are applied. '
                'With a verbosity level of 2 or above, the applied datetimes '
                'will be included.'
            ),
        )
        formats.add_argument(
            '--plan', '-p', action='store_const', dest='format', const='plan',
            help=(
                'Shows all migrations in the order they will be applied. '
                'With a verbosity level of 2 or above all direct migration dependencies '
                'and reverse dependencies (run_before) will be included.'
            )
        )

        parser.set_defaults(format='list')

    def handle(self, *args, **options):
        self.verbosity = options['verbosity']

        # Get the database we're operating from
        db = options['database']
        connection = connections[db]

        if options['format'] == ""plan"":
            return self.show_plan(connection, options['app_label'])
        else:
            return self.show_list(connection, options['app_label'])

    def _validate_app_names(self, loader, app_names):
        has_bad_names = False
        for app_name in app_names:
            try:
                apps.get_app_config(app_name)
            except LookupError as err:
                self.stderr.write(str(err))
                has_bad_names = True
        if has_bad_names:
            sys.exit(2)

    def show_list(self, connection, app_names=None):
        """"""
        Show a list of all migrations on the system, or only those of
        some named apps.
        """"""
        # Load migrations from disk/DB
        loader = MigrationLoader(connection, ignore_no_migrations=True)
        recorder = MigrationRecorder(connection)
        recorded_migrations = recorder.applied_migrations()
        graph = loader.graph
        # If we were passed a list of apps, validate it
        if app_names:
            self._validate_app_names(loader, app_names)
        # Otherwise, show all apps in alphabetic order
        else:
            app_names = sorted(loader.migrated_apps)
        # For each app, print its migrations in order from oldest (roots) to
        # newest (leaves).
        for app_name in app_names:
            self.stdout.write(app_name, self.style.MIGRATE_LABEL)
            shown = set()
            for node in graph.leaf_nodes(app_name):
                for plan_node in graph.forwards_plan(node):
                    if plan_node not in shown and plan_node[0] == app_name:
                        # Give it a nice title if it's a squashed one
                        title = plan_node[1]
                        if graph.nodes[plan_node].replaces:
                            title += "" (%s squashed migrations)"" % len(graph.nodes[plan_node].replaces)
                        applied_migration = loader.applied_migrations.get(plan_node)
                        # Mark it as applied/unapplied
                        if applied_migration:
                            if plan_node in recorded_migrations:
                                output = ' [X] %s' % title
                            else:
                                title += "" Run 'manage.py migrate' to finish recording.""
                                output = ' [-] %s' % title
                            if self.verbosity >= 2 and hasattr(applied_migration, 'applied'):
                                output += ' (applied at %s)' % applied_migration.applied.strftime('%Y-%m-%d %H:%M:%S')
                            self.stdout.write(output)
                        else:
                            self.stdout.write("" [ ] %s"" % title)
                        shown.add(plan_node)
            # If we didn't print anything, then a small message
            if not shown:
                self.stdout.write("" (no migrations)"", self.style.ERROR)

    def show_plan(self, connection, app_names=None):
        """"""
        Show all known migrations (or only those of the specified app_names)
        in the order they will be applied.
        """"""
        # Load migrations from disk/DB
        loader = MigrationLoader(connection)
        graph = loader.graph
        if app_names:
            self._validate_app_names(loader, app_names)
            targets = [key for key in graph.leaf_nodes() if key[0] in app_names]
        else:
            targets = graph.leaf_nodes()
        plan = []
        seen = set()

        # Generate the plan
        for target in targets:
            for migration in graph.forwards_plan(target):
                if migration not in seen:
                    node = graph.node_map[migration]
                    plan.append(node)
                    seen.add(migration)

        # Output
        def print_deps(node):
            out = []
            for parent in sorted(node.parents):
                out.append(""%s.%s"" % parent.key)
            if out:
                return "" ... (%s)"" % "", "".join(out)
            return """"

        for node in plan:
            deps = """"
            if self.verbosity >= 2:
                deps = print_deps(node)
            if node.key in loader.applied_migrations:
                self.stdout.write(""[X]  %s.%s%s"" % (node.key[0], node.key[1], deps))
            else:
                self.stdout.write(""[ ]  %s.%s%s"" % (node.key[0], node.key[1], deps))
        if not plan:
            self.stdout.write('(no migrations)', self.style.ERROR)",1,334 2000 40 2001 41 58 2002 61 648 348 2003 40 2004 44 2005 41 58 2005 46 2006 40 648 44 2007 61 648 44 2002 61 648 44 41 2005 46 2006 40 648 44 349 61 2008 44 2002 61 40 648 648 41 44 41 2009 61 2005 46 2010 40 41 2009 46 2006 40 648 44 648 44 2011 61 648 44 2012 61 648 44 341 61 648 44 2002 61 40 648 648 648 41 44 41 2009 46 2006 40 648 44 648 44 2011 61 648 44 2012 61 648 44 341 61 648 44 2002 61 40 648 648 648 41 41 2005 46 2013 40 2014 61 648 41 348 2015 40 2004 44 42 2016 44 638 2017 41 58 2004 46 2018 61 2017 91 648 93 621 2019 61 2017 91 648 93 2020 61 2021 91 2019 93 392 2017 91 648 93 614 648 58 450 2004 46 2022 40 2020 44 2017 91 648 93 41 360 58 450 2004 46 2023 40 2020 44 2017 91 648 93 41 348 2024 40 2004 44 2025 44 2026 41 58 2027 61 302 385 2028 398 2026 58 474 58 2029 46 2030 40 2028 41 374 2031 311 2032 58 2004 46 2033 46 2034 40 2035 40 2032 41 41 2027 61 304 392 2027 58 2036 46 375 40 1502 41 348 2023 40 2004 44 2020 44 2026 61 303 41 58 648 621 2025 61 2037 40 2020 44 2038 61 304 41 2039 61 2040 40 2020 41 2041 61 2039 46 2042 40 41 2043 61 2025 46 2043 621 392 2026 58 2004 46 2024 40 2025 44 2026 41 621 360 58 2026 61 2044 40 2025 46 2045 41 621 621 385 2028 398 2026 58 2004 46 2046 46 2034 40 2028 44 2004 46 2047 46 2048 41 2049 61 2050 40 41 385 2051 398 2043 46 2052 40 2028 41 58 385 2053 398 2043 46 2054 40 2051 41 58 392 2053 422 398 2049 308 2053 91 1500 93 614 2028 58 621 2055 61 2053 91 1501 93 392 2043 46 2056 91 2053 93 46 2057 58 2055 636 648 37 2058 40 2043 46 2056 91 2053 93 46 2057 41 2059 61 2025 46 2042 46 2060 40 2053 41 621 392 2059 58 392 2053 398 2041 58 2061 61 648 37 2055 360 58 2055 636 648 2061 61 648 37 2055 392 2004 46 2018 615 1502 308 2062 40 2059 44 648 41 58 2061 636 648 37 2059 46 2063 46 2064 40 648 41 2004 46 2046 46 2034 40 2061 41 360 58 2004 46 2046 46 2034 40 648 37 2055 41 2049 46 2065 40 2053 41 621 392 422 2049 58 2004 46 2046 46 2034 40 648 44 2004 46 2047 46 2066 41 348 2022 40 2004 44 2020 44 2026 61 303 41 58 648 621 2025 61 2037 40 2020 41 2043 61 2025 46 2043 392 2026 58 2004 46 2024 40 2025 44 2026 41 2067 61 91 2068 385 2068 398 2043 46 2052 40 41 392 2068 91 1500 93 398 2026 93 360 58 2067 61 2043 46 2052 40 41 2069 61 91 93 2070 61 2050 40 41 621 385 2071 398 2067 58 385 2072 398 2043 46 2054 40 2071 41 58 392 2072 422 398 2070 58 2051 61 2043 46 2073 91 2072 93 2069 46 2074 40 2051 41 2070 46 2065 40 2072 41 621 348 2075 40 2051 41 58 430 61 91 93 385 2076 398 2044 40 2051 46 2077 41 58 430 46 2074 40 648 37 2076 46 2068 41 392 430 58 450 648 37 648 46 2078 40 430 41 450 648 385 2051 398 2069 58 2079 61 648 392 2004 46 2018 615 1502 58 2079 61 2075 40 2051 41 392 2051 46 2068 398 2025 46 2042 58 2004 46 2046 46 2034 40 648 37 40 2051 46 2068 91 1500 93 44 2051 46 2068 91 1501 93 44 2079 41 41 360 58 2004 46 2046 46 2034 40 648 37 40 2051 46 2068 91 1500 93 44 2051 46 2068 91 1501 93 44 2079 41 41 392 422 2069 58 2004 46 2046 46 2034 40 648 44 2004 46 2047 46 2066 41 
133867,Python,"class BasicExpressionsTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.example_inc = Company.objects.create(
            name=""Example Inc."", num_employees=2300, num_chairs=5,
            ceo=Employee.objects.create(firstname=""Joe"", lastname=""Smith"", salary=10)
        )
        cls.foobar_ltd = Company.objects.create(
            name=""Foobar Ltd."", num_employees=3, num_chairs=4, based_in_eu=True,
            ceo=Employee.objects.create(firstname=""Frank"", lastname=""Meyer"", salary=20)
        )
        cls.max = Employee.objects.create(firstname='Max', lastname='Mustermann', salary=30)
        cls.gmbh = Company.objects.create(name='Test GmbH', num_employees=32, num_chairs=1, ceo=cls.max)

    def setUp(self):
        self.company_query = Company.objects.values(
            ""name"", ""num_employees"", ""num_chairs""
        ).order_by(
            ""name"", ""num_employees"", ""num_chairs""
        )

    def test_annotate_values_aggregate(self):
        companies = Company.objects.annotate(
            salaries=F('ceo__salary'),
        ).values('num_employees', 'salaries').aggregate(
            result=Sum(
                F('salaries') + F('num_employees'),
                output_field=IntegerField()
            ),
        )
        self.assertEqual(companies['result'], 2395)

    def test_annotate_values_filter(self):
        companies = Company.objects.annotate(
            foo=RawSQL('%s', ['value']),
        ).filter(foo='value').order_by('name')
        self.assertSequenceEqual(
            companies,
            [self.example_inc, self.foobar_ltd, self.gmbh],
        )

    def test_annotate_values_count(self):
        companies = Company.objects.annotate(foo=RawSQL('%s', ['value']))
        self.assertEqual(companies.count(), 3)

    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')
    def test_filtering_on_annotate_that_uses_q(self):
        self.assertEqual(
            Company.objects.annotate(
                num_employees_check=ExpressionWrapper(Q(num_employees__gt=3), output_field=BooleanField())
            ).filter(num_employees_check=True).count(),
            2,
        )

    def test_filtering_on_q_that_is_boolean(self):
        self.assertEqual(
            Company.objects.filter(
                ExpressionWrapper(Q(num_employees__gt=3), output_field=BooleanField())
            ).count(),
            2,
        )

    def test_filtering_on_rawsql_that_is_boolean(self):
        self.assertEqual(
            Company.objects.filter(
                RawSQL('num_employees > %s', (3,), output_field=BooleanField()),
            ).count(),
            2,
        )

    def test_filter_inter_attribute(self):
        # We can filter on attribute relationships on same model obj, e.g.
        # find companies where the number of employees is greater
        # than the number of chairs.
        self.assertSequenceEqual(
            self.company_query.filter(num_employees__gt=F(""num_chairs"")), [
                {
                    ""num_chairs"": 5,
                    ""name"": ""Example Inc."",
                    ""num_employees"": 2300,
                },
                {
                    ""num_chairs"": 1,
                    ""name"": ""Test GmbH"",
                    ""num_employees"": 32
                },
            ],
        )

    def test_update(self):
        # We can set one field to have the value of another field
        # Make sure we have enough chairs
        self.company_query.update(num_chairs=F(""num_employees""))
        self.assertSequenceEqual(
            self.company_query, [
                {
                    ""num_chairs"": 2300,
                    ""name"": ""Example Inc."",
                    ""num_employees"": 2300
                },
                {
                    ""num_chairs"": 3,
                    ""name"": ""Foobar Ltd."",
                    ""num_employees"": 3
                },
                {
                    ""num_chairs"": 32,
                    ""name"": ""Test GmbH"",
                    ""num_employees"": 32
                }
            ],
        )

    def test_arithmetic(self):
        # We can perform arithmetic operations in expressions
        # Make sure we have 2 spare chairs
        self.company_query.update(num_chairs=F(""num_employees"") + 2)
        self.assertSequenceEqual(
            self.company_query, [
                {
                    'num_chairs': 2302,
                    'name': 'Example Inc.',
                    'num_employees': 2300
                },
                {
                    'num_chairs': 5,
                    'name': 'Foobar Ltd.',
                    'num_employees': 3
                },
                {
                    'num_chairs': 34,
                    'name': 'Test GmbH',
                    'num_employees': 32
                }
            ],
        )

    def test_order_of_operations(self):
        # Law of order of operations is followed
        self.company_query.update(num_chairs=F('num_employees') + 2 * F('num_employees'))
        self.assertSequenceEqual(
            self.company_query, [
                {
                    'num_chairs': 6900,
                    'name': 'Example Inc.',
                    'num_employees': 2300
                },
                {
                    'num_chairs': 9,
                    'name': 'Foobar Ltd.',
                    'num_employees': 3
                },
                {
                    'num_chairs': 96,
                    'name': 'Test GmbH',
                    'num_employees': 32
                }
            ],
        )

    def test_parenthesis_priority(self):
        # Law of order of operations can be overridden by parentheses
        self.company_query.update(num_chairs=(F('num_employees') + 2) * F('num_employees'))
        self.assertSequenceEqual(
            self.company_query, [
                {
                    'num_chairs': 5294600,
                    'name': 'Example Inc.',
                    'num_employees': 2300
                },
                {
                    'num_chairs': 15,
                    'name': 'Foobar Ltd.',
                    'num_employees': 3
                },
                {
                    'num_chairs': 1088,
                    'name': 'Test GmbH',
                    'num_employees': 32
                }
            ],
        )

    def test_update_with_fk(self):
        # ForeignKey can become updated with the value of another ForeignKey.
        self.assertEqual(Company.objects.update(point_of_contact=F('ceo')), 3)
        self.assertQuerysetEqual(
            Company.objects.all(),
            ['Joe Smith', 'Frank Meyer', 'Max Mustermann'],
            lambda c: str(c.point_of_contact),
            ordered=False
        )

    def test_update_with_none(self):
        Number.objects.create(integer=1, float=1.0)
        Number.objects.create(integer=2)
        Number.objects.filter(float__isnull=False).update(float=Value(None))
        self.assertQuerysetEqual(
            Number.objects.all(),
            [None, None],
            lambda n: n.float,
            ordered=False
        )

    def test_filter_with_join(self):
        # F Expressions can also span joins
        Company.objects.update(point_of_contact=F('ceo'))
        c = Company.objects.first()
        c.point_of_contact = Employee.objects.create(firstname=""Guido"", lastname=""van Rossum"")
        c.save()

        self.assertQuerysetEqual(
            Company.objects.filter(ceo__firstname=F('point_of_contact__firstname')),
            ['Foobar Ltd.', 'Test GmbH'],
            lambda c: c.name,
            ordered=False
        )

        Company.objects.exclude(
            ceo__firstname=F(""point_of_contact__firstname"")
        ).update(name=""foo"")
        self.assertEqual(
            Company.objects.exclude(
                ceo__firstname=F('point_of_contact__firstname')
            ).get().name,
            ""foo"",
        )

        msg = ""Joined field references are not permitted in this query""
        with self.assertRaisesMessage(FieldError, msg):
            Company.objects.exclude(
                ceo__firstname=F('point_of_contact__firstname')
            ).update(name=F('point_of_contact__lastname'))

    def test_object_update(self):
        # F expressions can be used to update attributes on single objects
        self.gmbh.num_employees = F('num_employees') + 4
        self.gmbh.save()
        self.gmbh.refresh_from_db()
        self.assertEqual(self.gmbh.num_employees, 36)

    def test_new_object_save(self):
        # We should be able to use Funcs when inserting new data
        test_co = Company(name=Lower(Value('UPPER')), num_employees=32, num_chairs=1, ceo=self.max)
        test_co.save()
        test_co.refresh_from_db()
        self.assertEqual(test_co.name, ""upper"")

    def test_new_object_create(self):
        test_co = Company.objects.create(name=Lower(Value('UPPER')), num_employees=32, num_chairs=1, ceo=self.max)
        test_co.refresh_from_db()
        self.assertEqual(test_co.name, ""upper"")

    def test_object_create_with_aggregate(self):
        # Aggregates are not allowed when inserting new data
        msg = 'Aggregate functions are not allowed in this query (num_employees=Max(Value(1))).'
        with self.assertRaisesMessage(FieldError, msg):
            Company.objects.create(
                name='Company', num_employees=Max(Value(1)), num_chairs=1,
                ceo=Employee.objects.create(firstname=""Just"", lastname=""Doit"", salary=30),
            )

    def test_object_update_fk(self):
        # F expressions cannot be used to update attributes which are foreign
        # keys, or attributes which involve joins.
        test_gmbh = Company.objects.get(pk=self.gmbh.pk)
        msg = 'F(ceo)"": ""Company.point_of_contact"" must be a ""Employee"" instance.'
        with self.assertRaisesMessage(ValueError, msg):
            test_gmbh.point_of_contact = F('ceo')

        test_gmbh.point_of_contact = self.gmbh.ceo
        test_gmbh.save()
        test_gmbh.name = F('ceo__lastname')
        msg = 'Joined field references are not permitted in this query'
        with self.assertRaisesMessage(FieldError, msg):
            test_gmbh.save()

    def test_update_inherited_field_value(self):
        msg = 'Joined field references are not permitted in this query'
        with self.assertRaisesMessage(FieldError, msg):
            RemoteEmployee.objects.update(adjusted_salary=F('salary') * 5)

    def test_object_update_unsaved_objects(self):
        # F expressions cannot be used to update attributes on objects which do
        # not yet exist in the database
        acme = Company(name='The Acme Widget Co.', num_employees=12, num_chairs=5, ceo=self.max)
        acme.num_employees = F(""num_employees"") + 16
        msg = (
            'Failed to insert expression ""Col(expressions_company, '
            'expressions.Company.num_employees) + Value(16)"" on '
            'expressions.Company.num_employees. F() expressions can only be '
            'used to update, not to insert.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            acme.save()

        acme.num_employees = 12
        acme.name = Lower(F('name'))
        msg = (
            'Failed to insert expression ""Lower(Col(expressions_company, '
            'expressions.Company.name))"" on expressions.Company.name. F() '
            'expressions can only be used to update, not to insert.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            acme.save()

    def test_ticket_11722_iexact_lookup(self):
        Employee.objects.create(firstname=""John"", lastname=""Doe"")
        test = Employee.objects.create(firstname=""Test"", lastname=""test"")

        queryset = Employee.objects.filter(firstname__iexact=F('lastname'))
        self.assertSequenceEqual(queryset, [test])

    def test_ticket_16731_startswith_lookup(self):
        Employee.objects.create(firstname=""John"", lastname=""Doe"")
        e2 = Employee.objects.create(firstname=""Jack"", lastname=""Jackson"")
        e3 = Employee.objects.create(firstname=""Jack"", lastname=""jackson"")
        self.assertSequenceEqual(
            Employee.objects.filter(lastname__startswith=F('firstname')),
            [e2, e3] if connection.features.has_case_insensitive_like else [e2]
        )
        qs = Employee.objects.filter(lastname__istartswith=F('firstname')).order_by('pk')
        self.assertSequenceEqual(qs, [e2, e3])

    def test_ticket_18375_join_reuse(self):
        # Reverse multijoin F() references and the lookup target the same join.
        # Pre #18375 the F() join was generated first and the lookup couldn't
        # reuse that join.
        qs = Employee.objects.filter(company_ceo_set__num_chairs=F('company_ceo_set__num_employees'))
        self.assertEqual(str(qs.query).count('JOIN'), 1)

    def test_ticket_18375_kwarg_ordering(self):
        # The next query was dict-randomization dependent - if the ""gte=1""
        # was seen first, then the F() will reuse the join generated by the
        # gte lookup, if F() was seen first, then it generated a join the
        # other lookups could not reuse.
        qs = Employee.objects.filter(
            company_ceo_set__num_chairs=F('company_ceo_set__num_employees'),
            company_ceo_set__num_chairs__gte=1,
        )
        self.assertEqual(str(qs.query).count('JOIN'), 1)

    def test_ticket_18375_kwarg_ordering_2(self):
        # Another similar case for F() than above. Now we have the same join
        # in two filter kwargs, one in the lhs lookup, one in F. Here pre
        # #18375 the amount of joins generated was random if dict
        # randomization was enabled, that is the generated query dependent
        # on which clause was seen first.
        qs = Employee.objects.filter(
            company_ceo_set__num_employees=F('pk'),
            pk=F('company_ceo_set__num_employees')
        )
        self.assertEqual(str(qs.query).count('JOIN'), 1)

    def test_ticket_18375_chained_filters(self):
        # F() expressions do not reuse joins from previous filter.
        qs = Employee.objects.filter(
            company_ceo_set__num_employees=F('pk')
        ).filter(
            company_ceo_set__num_employees=F('company_ceo_set__num_employees')
        )
        self.assertEqual(str(qs.query).count('JOIN'), 2)

    def test_order_by_exists(self):
        mary = Employee.objects.create(firstname='Mary', lastname='Mustermann', salary=20)
        mustermanns_by_seniority = Employee.objects.filter(lastname='Mustermann').order_by(
            # Order by whether the employee is the CEO of a company
            Exists(Company.objects.filter(ceo=OuterRef('pk'))).desc()
        )
        self.assertSequenceEqual(mustermanns_by_seniority, [self.max, mary])

    def test_order_by_multiline_sql(self):
        raw_order_by = (
            RawSQL('''
                CASE WHEN num_employees > 1000
                     THEN num_chairs
                     ELSE 0 END
            ''', []).desc(),
            RawSQL('''
                CASE WHEN num_chairs > 1
                     THEN 1
                     ELSE 0 END
            ''', []).asc()
        )
        for qs in (
            Company.objects.all(),
            Company.objects.distinct(),
        ):
            with self.subTest(qs=qs):
                self.assertSequenceEqual(
                    qs.order_by(*raw_order_by),
                    [self.example_inc, self.gmbh, self.foobar_ltd],
                )

    def test_outerref(self):
        inner = Company.objects.filter(point_of_contact=OuterRef('pk'))
        msg = (
            'This queryset contains a reference to an outer query and may only '
            'be used in a subquery.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            inner.exists()

        outer = Employee.objects.annotate(is_point_of_contact=Exists(inner))
        self.assertIs(outer.exists(), True)

    def test_exist_single_field_output_field(self):
        queryset = Company.objects.values('pk')
        self.assertIsInstance(Exists(queryset).output_field, BooleanField)

    def test_subquery(self):
        Company.objects.filter(name='Example Inc.').update(
            point_of_contact=Employee.objects.get(firstname='Joe', lastname='Smith'),
            ceo=self.max,
        )
        Employee.objects.create(firstname='Bob', lastname='Brown', salary=40)
        qs = Employee.objects.annotate(
            is_point_of_contact=Exists(Company.objects.filter(point_of_contact=OuterRef('pk'))),
            is_not_point_of_contact=~Exists(Company.objects.filter(point_of_contact=OuterRef('pk'))),
            is_ceo_of_small_company=Exists(Company.objects.filter(num_employees__lt=200, ceo=OuterRef('pk'))),
            is_ceo_small_2=~~Exists(Company.objects.filter(num_employees__lt=200, ceo=OuterRef('pk'))),
            largest_company=Subquery(Company.objects.order_by('-num_employees').filter(
                Q(ceo=OuterRef('pk')) | Q(point_of_contact=OuterRef('pk'))
            ).values('name')[:1], output_field=CharField())
        ).values(
            'firstname',
            'is_point_of_contact',
            'is_not_point_of_contact',
            'is_ceo_of_small_company',
            'is_ceo_small_2',
            'largest_company',
        ).order_by('firstname')

        results = list(qs)
        # Could use Coalesce(subq, Value('')) instead except for the bug in
        # cx_Oracle mentioned in #23843.
        bob = results[0]
        if bob['largest_company'] == '' and connection.features.interprets_empty_strings_as_nulls:
            bob['largest_company'] = None

        self.assertEqual(results, [
            {
                'firstname': 'Bob',
                'is_point_of_contact': False,
                'is_not_point_of_contact': True,
                'is_ceo_of_small_company': False,
                'is_ceo_small_2': False,
                'largest_company': None,
            },
            {
                'firstname': 'Frank',
                'is_point_of_contact': False,
                'is_not_point_of_contact': True,
                'is_ceo_of_small_company': True,
                'is_ceo_small_2': True,
                'largest_company': 'Foobar Ltd.',
            },
            {
                'firstname': 'Joe',
                'is_point_of_contact': True,
                'is_not_point_of_contact': False,
                'is_ceo_of_small_company': False,
                'is_ceo_small_2': False,
                'largest_company': 'Example Inc.',
            },
            {
                'firstname': 'Max',
                'is_point_of_contact': False,
                'is_not_point_of_contact': True,
                'is_ceo_of_small_company': True,
                'is_ceo_small_2': True,
                'largest_company': 'Example Inc.'
            }
        ])
        # A less elegant way to write the same query: this uses a LEFT OUTER
        # JOIN and an IS NULL, inside a WHERE NOT IN which is probably less
        # efficient than EXISTS.
        self.assertCountEqual(
            qs.filter(is_point_of_contact=True).values('pk'),
            Employee.objects.exclude(company_point_of_contact_set=None).values('pk')
        )

    def test_subquery_eq(self):
        qs = Employee.objects.annotate(
            is_ceo=Exists(Company.objects.filter(ceo=OuterRef('pk'))),
            is_point_of_contact=Exists(
                Company.objects.filter(point_of_contact=OuterRef('pk')),
            ),
            small_company=Exists(
                queryset=Company.objects.filter(num_employees__lt=200),
            ),
        ).filter(is_ceo=True, is_point_of_contact=False, small_company=True)
        self.assertNotEqual(
            qs.query.annotations['is_ceo'],
            qs.query.annotations['is_point_of_contact'],
        )
        self.assertNotEqual(
            qs.query.annotations['is_ceo'],
            qs.query.annotations['small_company'],
        )

    def test_in_subquery(self):
        # This is a contrived test (and you really wouldn't write this query),
        # but it is a succinct way to test the __in=Subquery() construct.
        small_companies = Company.objects.filter(num_employees__lt=200).values('pk')
        subquery_test = Company.objects.filter(pk__in=Subquery(small_companies))
        self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])
        subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))
        self.assertCountEqual(subquery_test2, [self.foobar_ltd])

    def test_uuid_pk_subquery(self):
        u = UUIDPK.objects.create()
        UUID.objects.create(uuid_fk=u)
        qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))
        self.assertCountEqual(qs, [u])

    def test_nested_subquery(self):
        inner = Company.objects.filter(point_of_contact=OuterRef('pk'))
        outer = Employee.objects.annotate(is_point_of_contact=Exists(inner))
        contrived = Employee.objects.annotate(
            is_point_of_contact=Subquery(
                outer.filter(pk=OuterRef('pk')).values('is_point_of_contact'),
                output_field=BooleanField(),
            ),
        )
        self.assertCountEqual(contrived.values_list(), outer.values_list())

    def test_nested_subquery_join_outer_ref(self):
        inner = Employee.objects.filter(pk=OuterRef('ceo__pk')).values('pk')
        qs = Employee.objects.annotate(
            ceo_company=Subquery(
                Company.objects.filter(
                    ceo__in=inner,
                    ceo__pk=OuterRef('pk'),
                ).values('pk'),
            ),
        )
        self.assertSequenceEqual(
            qs.values_list('ceo_company', flat=True),
            [self.example_inc.pk, self.foobar_ltd.pk, self.gmbh.pk],
        )

    def test_nested_subquery_outer_ref_2(self):
        first = Time.objects.create(time='09:00')
        second = Time.objects.create(time='17:00')
        third = Time.objects.create(time='21:00')
        SimulationRun.objects.bulk_create([
            SimulationRun(start=first, end=second, midpoint='12:00'),
            SimulationRun(start=first, end=third, midpoint='15:00'),
            SimulationRun(start=second, end=first, midpoint='00:00'),
        ])
        inner = Time.objects.filter(time=OuterRef(OuterRef('time')), pk=OuterRef('start')).values('time')
        middle = SimulationRun.objects.annotate(other=Subquery(inner)).values('other')[:1]
        outer = Time.objects.annotate(other=Subquery(middle, output_field=TimeField()))
        # This is a contrived example. It exercises the double OuterRef form.
        self.assertCountEqual(outer, [first, second, third])

    def test_nested_subquery_outer_ref_with_autofield(self):
        first = Time.objects.create(time='09:00')
        second = Time.objects.create(time='17:00')
        SimulationRun.objects.create(start=first, end=second, midpoint='12:00')
        inner = SimulationRun.objects.filter(start=OuterRef(OuterRef('pk'))).values('start')
        middle = Time.objects.annotate(other=Subquery(inner)).values('other')[:1]
        outer = Time.objects.annotate(other=Subquery(middle, output_field=IntegerField()))
        # This exercises the double OuterRef form with AutoField as pk.
        self.assertCountEqual(outer, [first, second])

    def test_annotations_within_subquery(self):
        Company.objects.filter(num_employees__lt=50).update(ceo=Employee.objects.get(firstname='Frank'))
        inner = Company.objects.filter(
            ceo=OuterRef('pk')
        ).values('ceo').annotate(total_employees=Sum('num_employees')).values('total_employees')
        outer = Employee.objects.annotate(total_employees=Subquery(inner)).filter(salary__lte=Subquery(inner))
        self.assertSequenceEqual(
            outer.order_by('-total_employees').values('salary', 'total_employees'),
            [{'salary': 10, 'total_employees': 2300}, {'salary': 20, 'total_employees': 35}],
        )

    def test_subquery_references_joined_table_twice(self):
        inner = Company.objects.filter(
            num_chairs__gte=OuterRef('ceo__salary'),
            num_employees__gte=OuterRef('point_of_contact__salary'),
        )
        # Another contrived example (there is no need to have a subquery here)
        outer = Company.objects.filter(pk__in=Subquery(inner.values('pk')))
        self.assertFalse(outer.exists())

    def test_subquery_filter_by_aggregate(self):
        Number.objects.create(integer=1000, float=1.2)
        Employee.objects.create(salary=1000)
        qs = Number.objects.annotate(
            min_valuable_count=Subquery(
                Employee.objects.filter(
                    salary=OuterRef('integer'),
                ).annotate(cnt=Count('salary')).filter(cnt__gt=0).values('cnt')[:1]
            ),
        )
        self.assertEqual(qs.get().float, 1.2)

    def test_subquery_filter_by_lazy(self):
        self.max.manager = Manager.objects.create(name='Manager')
        self.max.save()
        max_manager = SimpleLazyObject(
            lambda: Manager.objects.get(pk=self.max.manager.pk)
        )
        qs = Company.objects.annotate(
            ceo_manager=Subquery(
                Employee.objects.filter(
                    lastname=OuterRef('ceo__lastname'),
                ).values('manager'),
            ),
        ).filter(ceo_manager=max_manager)
        self.assertEqual(qs.get(), self.gmbh)

    def test_aggregate_subquery_annotation(self):
        with self.assertNumQueries(1) as ctx:
            aggregate = Company.objects.annotate(
                ceo_salary=Subquery(
                    Employee.objects.filter(
                        id=OuterRef('ceo_id'),
                    ).values('salary')
                ),
            ).aggregate(
                ceo_salary_gt_20=Count('pk', filter=Q(ceo_salary__gt=20)),
            )
        self.assertEqual(aggregate, {'ceo_salary_gt_20': 1})
        # Aggregation over a subquery annotation doesn't annotate the subquery
        # twice in the inner query.
        sql = ctx.captured_queries[0]['sql']
        self.assertLessEqual(sql.count('SELECT'), 3)
        # GROUP BY isn't required to aggregate over a query that doesn't
        # contain nested aggregates.
        self.assertNotIn('GROUP BY', sql)

    @skipUnlessDBFeature('supports_over_clause')
    def test_aggregate_rawsql_annotation(self):
        with self.assertNumQueries(1) as ctx:
            aggregate = Company.objects.annotate(
                salary=RawSQL('SUM(num_chairs) OVER (ORDER BY num_employees)', []),
            ).aggregate(
                count=Count('pk'),
            )
            self.assertEqual(aggregate, {'count': 3})
        sql = ctx.captured_queries[0]['sql']
        self.assertNotIn('GROUP BY', sql)

    def test_explicit_output_field(self):
        class FuncA(Func):
            output_field = CharField()

        class FuncB(Func):
            pass

        expr = FuncB(FuncA())
        self.assertEqual(expr.output_field, FuncA.output_field)

    def test_outerref_mixed_case_table_name(self):
        inner = Result.objects.filter(result_time__gte=OuterRef('experiment__assigned'))
        outer = Result.objects.filter(pk__in=Subquery(inner.values('pk')))
        self.assertFalse(outer.exists())

    def test_outerref_with_operator(self):
        inner = Company.objects.filter(num_employees=OuterRef('ceo__salary') + 2)
        outer = Company.objects.filter(pk__in=Subquery(inner.values('pk')))
        self.assertEqual(outer.get().name, 'Test GmbH')

    def test_nested_outerref_with_function(self):
        self.gmbh.point_of_contact = Employee.objects.get(lastname='Meyer')
        self.gmbh.save()
        inner = Employee.objects.filter(
            lastname__startswith=Left(OuterRef(OuterRef('lastname')), 1),
        )
        qs = Employee.objects.annotate(
            ceo_company=Subquery(
                Company.objects.filter(
                    point_of_contact__in=inner,
                    ceo__pk=OuterRef('pk'),
                ).values('name'),
            ),
        ).filter(ceo_company__isnull=False)
        self.assertEqual(qs.get().ceo_company, 'Test GmbH')

    def test_annotation_with_outerref(self):
        gmbh_salary = Company.objects.annotate(
            max_ceo_salary_raise=Subquery(
                Company.objects.annotate(
                    salary_raise=OuterRef('num_employees') + F('num_employees'),
                ).order_by('-salary_raise').values('salary_raise')[:1],
                output_field=IntegerField(),
            ),
        ).get(pk=self.gmbh.pk)
        self.assertEqual(gmbh_salary.max_ceo_salary_raise, 2332)

    def test_annotation_with_nested_outerref(self):
        self.gmbh.point_of_contact = Employee.objects.get(lastname='Meyer')
        self.gmbh.save()
        inner = Employee.objects.annotate(
            outer_lastname=OuterRef(OuterRef('lastname')),
        ).filter(lastname__startswith=Left('outer_lastname', 1))
        qs = Employee.objects.annotate(
            ceo_company=Subquery(
                Company.objects.filter(
                    point_of_contact__in=inner,
                    ceo__pk=OuterRef('pk'),
                ).values('name'),
            ),
        ).filter(ceo_company__isnull=False)
        self.assertEqual(qs.get().ceo_company, 'Test GmbH')

    def test_pickle_expression(self):
        expr = Value(1)
        expr.convert_value  # populate cached property
        self.assertEqual(pickle.loads(pickle.dumps(expr)), expr)

    def test_incorrect_field_in_F_expression(self):
        with self.assertRaisesMessage(FieldError, ""Cannot resolve keyword 'nope' into field.""):
            list(Employee.objects.filter(firstname=F('nope')))

    def test_incorrect_joined_field_in_F_expression(self):
        with self.assertRaisesMessage(FieldError, ""Cannot resolve keyword 'nope' into field.""):
            list(Company.objects.filter(ceo__pk=F('point_of_contact__nope')))

    def test_exists_in_filter(self):
        inner = Company.objects.filter(ceo=OuterRef('pk')).values('pk')
        qs1 = Employee.objects.filter(Exists(inner))
        qs2 = Employee.objects.annotate(found=Exists(inner)).filter(found=True)
        self.assertCountEqual(qs1, qs2)
        self.assertFalse(Employee.objects.exclude(Exists(inner)).exists())
        self.assertCountEqual(qs2, Employee.objects.exclude(~Exists(inner)))

    def test_subquery_in_filter(self):
        inner = Company.objects.filter(ceo=OuterRef('pk')).values('based_in_eu')
        self.assertSequenceEqual(
            Employee.objects.filter(Subquery(inner)),
            [self.foobar_ltd.ceo],
        )

    def test_subquery_group_by_outerref_in_filter(self):
        inner = Company.objects.annotate(
            employee=OuterRef('pk'),
        ).values('employee').annotate(
            min_num_chairs=Min('num_chairs'),
        ).values('ceo')
        self.assertIs(Employee.objects.filter(pk__in=Subquery(inner)).exists(), True)

    def test_case_in_filter_if_boolean_output_field(self):
        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))
        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))
        qs = Employee.objects.filter(
            Case(
                When(Exists(is_ceo), then=True),
                When(Exists(is_poc), then=True),
                default=False,
                output_field=BooleanField(),
            ),
        )
        self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])

    def test_boolean_expression_combined(self):
        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))
        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))
        self.gmbh.point_of_contact = self.max
        self.gmbh.save()
        self.assertCountEqual(
            Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),
            [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],
        )
        self.assertCountEqual(
            Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),
            [self.max],
        )
        self.assertCountEqual(
            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),
            [self.max],
        )
        self.assertCountEqual(
            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),
            [self.example_inc.ceo, self.max],
        )
        self.assertCountEqual(
            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),
            [self.max],
        )
        self.assertCountEqual(
            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),
            [self.example_inc.ceo, self.max],
        )

    def test_boolean_expression_combined_with_empty_Q(self):
        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))
        self.gmbh.point_of_contact = self.max
        self.gmbh.save()
        tests = [
            Exists(is_poc) & Q(),
            Q() & Exists(is_poc),
            Exists(is_poc) | Q(),
            Q() | Exists(is_poc),
            Q(Exists(is_poc)) & Q(),
            Q() & Q(Exists(is_poc)),
            Q(Exists(is_poc)) | Q(),
            Q() | Q(Exists(is_poc)),
        ]
        for conditions in tests:
            with self.subTest(conditions):
                self.assertCountEqual(Employee.objects.filter(conditions), [self.max])

    def test_boolean_expression_in_Q(self):
        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))
        self.gmbh.point_of_contact = self.max
        self.gmbh.save()
        self.assertCountEqual(Employee.objects.filter(Q(Exists(is_poc))), [self.max])",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1505 44 2011 61 1502 44 2012 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 44 2016 61 1502 41 41 2004 46 2017 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1502 44 2011 61 1502 44 2018 61 304 44 2012 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 44 2016 61 1503 41 41 2004 46 2019 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 44 2016 61 1503 41 2004 46 2020 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 1503 44 2011 61 1501 44 2012 61 2004 46 2019 41 348 2021 40 2022 41 58 2022 46 2023 61 2006 46 2007 46 2024 40 648 44 648 44 648 41 46 2025 40 648 44 648 44 648 41 348 2026 40 2022 41 58 2027 61 2006 46 2007 46 2028 40 2029 61 2030 40 648 41 44 41 46 2024 40 648 44 648 41 46 2031 40 2032 61 2033 40 2030 40 648 41 43 2030 40 648 41 44 2034 61 2035 40 41 41 44 41 2022 46 2036 40 2027 91 648 93 44 1505 41 348 2037 40 2022 41 58 2027 61 2006 46 2007 46 2028 40 2038 61 2039 40 648 44 91 648 93 41 44 41 46 2040 40 2038 61 648 41 46 2025 40 648 41 2022 46 2041 40 2027 44 91 2022 46 2005 44 2022 46 2017 44 2022 46 2020 93 44 41 348 2042 40 2022 41 58 2027 61 2006 46 2007 46 2028 40 2038 61 2039 40 648 44 91 648 93 41 41 2022 46 2036 40 2027 46 2043 40 41 44 1502 41 64 2044 40 648 41 348 2045 40 2022 41 58 2022 46 2036 40 2006 46 2007 46 2028 40 2046 61 2047 40 2048 40 2049 61 1502 41 44 2034 61 2050 40 41 41 41 46 2040 40 2046 61 304 41 46 2043 40 41 44 1502 44 41 348 2051 40 2022 41 58 2022 46 2036 40 2006 46 2007 46 2040 40 2047 40 2048 40 2049 61 1502 41 44 2034 61 2050 40 41 41 41 46 2043 40 41 44 1502 44 41 348 2052 40 2022 41 58 2022 46 2036 40 2006 46 2007 46 2040 40 2039 40 648 44 40 1502 44 41 44 2034 61 2050 40 41 41 44 41 46 2043 40 41 44 1502 44 41 348 2053 40 2022 41 58 621 621 621 2022 46 2041 40 2022 46 2023 46 2040 40 2049 61 2030 40 648 41 41 44 91 123 648 58 1502 44 648 58 648 44 648 58 1505 44 125 44 123 648 58 1501 44 648 58 648 44 648 58 1503 125 44 93 44 41 348 2054 40 2022 41 58 621 621 2022 46 2023 46 2055 40 2011 61 2030 40 648 41 41 2022 46 2041 40 2022 46 2023 44 91 123 648 58 1505 44 648 58 648 44 648 58 1505 125 44 123 648 58 1502 44 648 58 648 44 648 58 1502 125 44 123 648 58 1503 44 648 58 648 44 648 58 1503 125 93 44 41 348 2056 40 2022 41 58 621 621 2022 46 2023 46 2055 40 2011 61 2030 40 648 41 43 1502 41 2022 46 2041 40 2022 46 2023 44 91 123 648 58 1505 44 648 58 648 44 648 58 1505 125 44 123 648 58 1502 44 648 58 648 44 648 58 1502 125 44 123 648 58 1503 44 648 58 648 44 648 58 1503 125 93 44 41 348 2057 40 2022 41 58 621 2022 46 2023 46 2055 40 2011 61 2030 40 648 41 43 1502 42 2030 40 648 41 41 2022 46 2041 40 2022 46 2023 44 91 123 648 58 1505 44 648 58 648 44 648 58 1505 125 44 123 648 58 1502 44 648 58 648 44 648 58 1502 125 44 123 648 58 1503 44 648 58 648 44 648 58 1503 125 93 44 41 348 2058 40 2022 41 58 621 2022 46 2023 46 2055 40 2011 61 40 2030 40 648 41 43 1502 41 42 2030 40 648 41 41 2022 46 2041 40 2022 46 2023 44 91 123 648 58 1508 44 648 58 648 44 648 58 1505 125 44 123 648 58 1503 44 648 58 648 44 648 58 1502 125 44 123 648 58 1505 44 648 58 648 44 648 58 1503 125 93 44 41 348 2059 40 2022 41 58 621 2022 46 2036 40 2006 46 2007 46 2055 40 2060 61 2030 40 648 41 41 44 1502 41 2022 46 2061 40 2006 46 2007 46 2062 40 41 44 91 648 44 648 44 648 93 44 409 2063 58 2064 40 2063 46 2060 41 44 2065 61 302 41 348 2066 40 2022 41 58 2067 46 2007 46 2008 40 2068 61 1501 44 384 61 1501 41 2067 46 2007 46 2008 40 2068 61 1502 41 2067 46 2007 46 2040 40 2069 61 302 41 46 2055 40 384 61 2070 40 303 41 41 2022 46 2061 40 2067 46 2007 46 2062 40 41 44 91 303 44 303 93 44 409 2071 58 2071 46 384 44 2065 61 302 41 348 2072 40 2022 41 58 621 2006 46 2007 46 2055 40 2060 61 2030 40 648 41 41 2063 61 2006 46 2007 46 2073 40 41 2063 46 2060 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 41 2063 46 2074 40 41 2022 46 2061 40 2006 46 2007 46 2040 40 2075 61 2030 40 648 41 41 44 91 648 44 648 93 44 409 2063 58 2063 46 2009 44 2065 61 302 41 2006 46 2007 46 2076 40 2075 61 2030 40 648 41 41 46 2055 40 2009 61 648 41 2022 46 2036 40 2006 46 2007 46 2076 40 2075 61 2030 40 648 41 41 46 2077 40 41 46 2009 44 648 44 41 2078 61 648 497 2022 46 2079 40 2080 44 2078 41 58 2006 46 2007 46 2076 40 2075 61 2030 40 648 41 41 46 2055 40 2009 61 2030 40 648 41 41 348 2081 40 2022 41 58 621 2022 46 2020 46 2010 61 2030 40 648 41 43 1502 2022 46 2020 46 2074 40 41 2022 46 2020 46 2082 40 41 2022 46 2036 40 2022 46 2020 46 2010 44 1503 41 348 2083 40 2022 41 58 621 2084 61 2006 40 2009 61 2085 40 2070 40 648 41 41 44 2010 61 1503 44 2011 61 1501 44 2012 61 2022 46 2019 41 2084 46 2074 40 41 2084 46 2082 40 41 2022 46 2036 40 2084 46 2009 44 648 41 348 2086 40 2022 41 58 2084 61 2006 46 2007 46 2008 40 2009 61 2085 40 2070 40 648 41 41 44 2010 61 1503 44 2011 61 1501 44 2012 61 2022 46 2019 41 2084 46 2082 40 41 2022 46 2036 40 2084 46 2009 44 648 41 348 2087 40 2022 41 58 621 2078 61 648 497 2022 46 2079 40 2080 44 2078 41 58 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 2088 40 2070 40 1501 41 41 44 2011 61 1501 44 2012 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 44 2016 61 1503 41 44 41 348 2089 40 2022 41 58 621 621 2090 61 2006 46 2007 46 2077 40 2091 61 2022 46 2020 46 2091 41 2078 61 648 497 2022 46 2079 40 2092 44 2078 41 58 2090 46 2060 61 2030 40 648 41 2090 46 2060 61 2022 46 2020 46 2012 2090 46 2074 40 41 2090 46 2009 61 2030 40 648 41 2078 61 648 497 2022 46 2079 40 2080 44 2078 41 58 2090 46 2074 40 41 348 2093 40 2022 41 58 2078 61 648 497 2022 46 2079 40 2080 44 2078 41 58 2094 46 2007 46 2055 40 2095 61 2030 40 648 41 42 1502 41 348 2096 40 2022 41 58 621 621 2097 61 2006 40 2009 61 648 44 2010 61 1503 44 2011 61 1502 44 2012 61 2022 46 2019 41 2097 46 2010 61 2030 40 648 41 43 1503 2078 61 40 648 648 648 648 41 497 2022 46 2079 40 2092 44 2078 41 58 2097 46 2074 40 41 2097 46 2010 61 1503 2097 46 2009 61 2085 40 2030 40 648 41 41 2078 61 40 648 648 648 41 497 2022 46 2079 40 2092 44 2078 41 58 2097 46 2074 40 41 348 2098 40 2022 41 58 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 41 2099 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 41 2100 61 2013 46 2007 46 2040 40 2101 61 2030 40 648 41 41 2022 46 2041 40 2100 44 91 2099 93 41 348 2102 40 2022 41 58 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 41 2103 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 41 2104 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 41 2022 46 2041 40 2013 46 2007 46 2040 40 2105 61 2030 40 648 41 41 44 91 2103 44 2104 93 392 2106 46 2107 46 2108 360 91 2103 93 41 2109 61 2013 46 2007 46 2040 40 2110 61 2030 40 648 41 41 46 2025 40 648 41 2022 46 2041 40 2109 44 91 2103 44 2104 93 41 348 2111 40 2022 41 58 621 621 621 2109 61 2013 46 2007 46 2040 40 2112 61 2030 40 648 41 41 2022 46 2036 40 2064 40 2109 46 2113 41 46 2043 40 648 41 44 1501 41 348 2114 40 2022 41 58 621 621 621 621 2109 61 2013 46 2007 46 2040 40 2112 61 2030 40 648 41 44 2115 61 1501 44 41 2022 46 2036 40 2064 40 2109 46 2113 41 46 2043 40 648 41 44 1501 41 348 2116 40 2022 41 58 621 621 621 621 621 2109 61 2013 46 2007 46 2040 40 2117 61 2030 40 648 41 44 2091 61 2030 40 648 41 41 2022 46 2036 40 2064 40 2109 46 2113 41 46 2043 40 648 41 44 1501 41 348 2118 40 2022 41 58 621 2109 61 2013 46 2007 46 2040 40 2117 61 2030 40 648 41 41 46 2040 40 2117 61 2030 40 648 41 41 2022 46 2036 40 2064 40 2109 46 2113 41 46 2043 40 648 41 44 1502 41 348 2119 40 2022 41 58 2120 61 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 44 2016 61 1503 41 2121 61 2013 46 2007 46 2040 40 2015 61 648 41 46 2025 40 621 2122 40 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 41 46 2124 40 41 41 2022 46 2041 40 2121 44 91 2022 46 2019 44 2120 93 41 348 2125 40 2022 41 58 2126 61 40 2039 40 648 44 91 93 41 46 2124 40 41 44 2039 40 648 44 91 93 41 46 2127 40 41 41 385 2109 398 40 2006 46 2007 46 2062 40 41 44 2006 46 2007 46 2128 40 41 44 41 58 497 2022 46 2129 40 2109 61 2109 41 58 2022 46 2041 40 2109 46 2025 40 42 2126 41 44 91 2022 46 2005 44 2022 46 2020 44 2022 46 2017 93 44 41 348 2130 40 2022 41 58 2131 61 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 2078 61 40 648 648 41 497 2022 46 2079 40 2092 44 2078 41 58 2131 46 2132 40 41 2133 61 2013 46 2007 46 2028 40 2134 61 2122 40 2131 41 41 2022 46 2135 40 2133 46 2132 40 41 44 304 41 348 2136 40 2022 41 58 2100 61 2006 46 2007 46 2024 40 648 41 2022 46 2137 40 2122 40 2100 41 46 2034 44 2050 41 348 2138 40 2022 41 58 2006 46 2007 46 2040 40 2009 61 648 41 46 2055 40 2060 61 2013 46 2007 46 2077 40 2014 61 648 44 2015 61 648 41 44 2012 61 2022 46 2019 44 41 2013 46 2007 46 2008 40 2014 61 648 44 2015 61 648 44 2016 61 1503 41 2109 61 2013 46 2007 46 2028 40 2134 61 2122 40 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 41 44 2139 61 126 2122 40 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 41 44 2140 61 2122 40 2006 46 2007 46 2040 40 2141 61 1504 44 2012 61 2123 40 648 41 41 41 44 2142 61 126 126 2122 40 2006 46 2007 46 2040 40 2141 61 1504 44 2012 61 2123 40 648 41 41 41 44 2143 61 2144 40 2006 46 2007 46 2025 40 648 41 46 2040 40 2048 40 2012 61 2123 40 648 41 41 124 2048 40 2060 61 2123 40 648 41 41 41 46 2024 40 648 41 91 58 1501 93 44 2034 61 2145 40 41 41 41 46 2024 40 648 44 648 44 648 44 648 44 648 44 648 44 41 46 2025 40 648 41 2146 61 411 40 2109 41 621 621 2147 61 2146 91 1500 93 392 2147 91 648 93 614 648 308 2106 46 2107 46 2148 58 2147 91 648 93 61 303 2022 46 2036 40 2146 44 91 123 648 58 648 44 648 58 302 44 648 58 304 44 648 58 302 44 648 58 302 44 648 58 303 44 125 44 123 648 58 648 44 648 58 302 44 648 58 304 44 648 58 304 44 648 58 304 44 648 58 648 44 125 44 123 648 58 648 44 648 58 304 44 648 58 302 44 648 58 302 44 648 58 302 44 648 58 648 44 125 44 123 648 58 648 44 648 58 302 44 648 58 304 44 648 58 304 44 648 58 304 44 648 58 648 125 93 41 621 621 621 2022 46 2149 40 2109 46 2040 40 2134 61 304 41 46 2024 40 648 41 44 2013 46 2007 46 2076 40 2150 61 303 41 46 2024 40 648 41 41 348 2151 40 2022 41 58 2109 61 2013 46 2007 46 2028 40 2152 61 2122 40 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 41 44 2134 61 2122 40 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 44 41 44 2153 61 2122 40 2100 61 2006 46 2007 46 2040 40 2141 61 1504 41 44 41 44 41 46 2040 40 2152 61 304 44 2134 61 302 44 2153 61 304 41 2022 46 2154 40 2109 46 2113 46 2155 91 648 93 44 2109 46 2113 46 2155 91 648 93 44 41 2022 46 2154 40 2109 46 2113 46 2155 91 648 93 44 2109 46 2113 46 2155 91 648 93 44 41 348 2156 40 2022 41 58 621 621 2157 61 2006 46 2007 46 2040 40 2141 61 1504 41 46 2024 40 648 41 2158 61 2006 46 2007 46 2040 40 2159 61 2144 40 2157 41 41 2022 46 2149 40 2158 44 91 2022 46 2017 44 2022 46 2020 93 41 2160 61 2006 46 2007 46 2040 40 2091 61 2144 40 2157 46 2040 40 2010 61 1502 41 41 41 2022 46 2149 40 2160 44 91 2022 46 2017 93 41 348 2161 40 2022 41 58 2162 61 2163 46 2007 46 2008 40 41 2164 46 2007 46 2008 40 2165 61 2162 41 2109 61 2163 46 2007 46 2040 40 2166 61 2144 40 2164 46 2007 46 2024 40 648 41 41 41 2022 46 2149 40 2109 44 91 2162 93 41 348 2167 40 2022 41 58 2131 61 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 2133 61 2013 46 2007 46 2028 40 2134 61 2122 40 2131 41 41 2168 61 2013 46 2007 46 2028 40 2134 61 2144 40 2133 46 2040 40 2091 61 2123 40 648 41 41 46 2024 40 648 41 44 2034 61 2050 40 41 44 41 44 41 2022 46 2149 40 2168 46 2169 40 41 44 2133 46 2169 40 41 41 348 2170 40 2022 41 58 2131 61 2013 46 2007 46 2040 40 2091 61 2123 40 648 41 41 46 2024 40 648 41 2109 61 2013 46 2007 46 2028 40 2171 61 2144 40 2006 46 2007 46 2040 40 2172 61 2131 44 2173 61 2123 40 648 41 44 41 46 2024 40 648 41 44 41 44 41 2022 46 2041 40 2109 46 2169 40 648 44 2174 61 304 41 44 91 2022 46 2005 46 2091 44 2022 46 2017 46 2091 44 2022 46 2020 46 2091 93 44 41 348 2175 40 2022 41 58 2073 61 2176 46 2007 46 2008 40 2177 61 648 41 2178 61 2176 46 2007 46 2008 40 2177 61 648 41 2179 61 2176 46 2007 46 2008 40 2177 61 648 41 2180 46 2007 46 2181 40 91 2180 40 2182 61 2073 44 2183 61 2178 44 2184 61 648 41 44 2180 40 2182 61 2073 44 2183 61 2179 44 2184 61 648 41 44 2180 40 2182 61 2178 44 2183 61 2073 44 2184 61 648 41 44 93 41 2131 61 2176 46 2007 46 2040 40 2177 61 2123 40 2123 40 648 41 41 44 2091 61 2123 40 648 41 41 46 2024 40 648 41 2185 61 2180 46 2007 46 2028 40 2186 61 2144 40 2131 41 41 46 2024 40 648 41 91 58 1501 93 2133 61 2176 46 2007 46 2028 40 2186 61 2144 40 2185 44 2034 61 2187 40 41 41 41 621 2022 46 2149 40 2133 44 91 2073 44 2178 44 2179 93 41 348 2188 40 2022 41 58 2073 61 2176 46 2007 46 2008 40 2177 61 648 41 2178 61 2176 46 2007 46 2008 40 2177 61 648 41 2180 46 2007 46 2008 40 2182 61 2073 44 2183 61 2178 44 2184 61 648 41 2131 61 2180 46 2007 46 2040 40 2182 61 2123 40 2123 40 648 41 41 41 46 2024 40 648 41 2185 61 2176 46 2007 46 2028 40 2186 61 2144 40 2131 41 41 46 2024 40 648 41 91 58 1501 93 2133 61 2176 46 2007 46 2028 40 2186 61 2144 40 2185 44 2034 61 2035 40 41 41 41 621 2022 46 2149 40 2133 44 91 2073 44 2178 93 41 348 2189 40 2022 41 58 2006 46 2007 46 2040 40 2141 61 1503 41 46 2055 40 2012 61 2013 46 2007 46 2077 40 2014 61 648 41 41 2131 61 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 46 2024 40 648 41 46 2028 40 2190 61 2033 40 648 41 41 46 2024 40 648 41 2133 61 2013 46 2007 46 2028 40 2190 61 2144 40 2131 41 41 46 2040 40 2191 61 2144 40 2131 41 41 2022 46 2041 40 2133 46 2025 40 648 41 46 2024 40 648 44 648 41 44 91 123 648 58 1502 44 648 58 1505 125 44 123 648 58 1503 44 648 58 1503 125 93 44 41 348 2192 40 2022 41 58 2131 61 2006 46 2007 46 2040 40 2193 61 2123 40 648 41 44 2194 61 2123 40 648 41 44 41 621 2133 61 2006 46 2007 46 2040 40 2159 61 2144 40 2131 46 2024 40 648 41 41 41 2022 46 2195 40 2133 46 2132 40 41 41 348 2196 40 2022 41 58 2067 46 2007 46 2008 40 2068 61 1504 44 384 61 1502 41 2013 46 2007 46 2008 40 2016 61 1504 41 2109 61 2067 46 2007 46 2028 40 2197 61 2144 40 2013 46 2007 46 2040 40 2016 61 2123 40 648 41 44 41 46 2028 40 2198 61 2199 40 648 41 41 46 2040 40 2200 61 1500 41 46 2024 40 648 41 91 58 1501 93 41 44 41 2022 46 2036 40 2109 46 2077 40 41 46 384 44 1502 41 348 2201 40 2022 41 58 2022 46 2019 46 2202 61 2203 46 2007 46 2008 40 2009 61 648 41 2022 46 2019 46 2074 40 41 2204 61 2205 40 409 58 2203 46 2007 46 2077 40 2091 61 2022 46 2019 46 2202 46 2091 41 41 2109 61 2006 46 2007 46 2028 40 2206 61 2144 40 2013 46 2007 46 2040 40 2015 61 2123 40 648 41 44 41 46 2024 40 648 41 44 41 44 41 46 2040 40 2206 61 2204 41 2022 46 2036 40 2109 46 2077 40 41 44 2022 46 2020 41 348 2207 40 2022 41 58 497 2022 46 2208 40 1501 41 311 2209 58 2031 61 2006 46 2007 46 2028 40 2210 61 2144 40 2013 46 2007 46 2040 40 2211 61 2123 40 648 41 44 41 46 2024 40 648 41 41 44 41 46 2031 40 2212 61 2199 40 648 44 2040 61 2048 40 2213 61 1503 41 41 44 41 2022 46 2036 40 2031 44 123 648 58 1501 125 41 621 621 2214 61 2209 46 2215 91 1500 93 91 648 93 2022 46 2216 40 2214 46 2043 40 648 41 44 1502 41 621 621 2022 46 2217 40 648 44 2214 41 64 2044 40 648 41 348 2218 40 2022 41 58 497 2022 46 2208 40 1501 41 311 2209 58 2031 61 2006 46 2007 46 2028 40 2016 61 2039 40 648 44 91 93 41 44 41 46 2031 40 2043 61 2199 40 648 41 44 41 2022 46 2036 40 2031 44 123 648 58 1502 125 41 2214 61 2209 46 2215 91 1500 93 91 648 93 2022 46 2217 40 648 44 2214 41 348 2219 40 2022 41 58 334 2220 40 2221 41 58 2034 61 2145 40 41 334 2222 40 2221 41 58 434 2223 61 2222 40 2220 40 41 41 2022 46 2036 40 2223 46 2034 44 2220 46 2034 41 348 2224 40 2022 41 58 2131 61 2225 46 2007 46 2040 40 2226 61 2123 40 648 41 41 2133 61 2225 46 2007 46 2040 40 2159 61 2144 40 2131 46 2024 40 648 41 41 41 2022 46 2195 40 2133 46 2132 40 41 41 348 2227 40 2022 41 58 2131 61 2006 46 2007 46 2040 40 2010 61 2123 40 648 41 43 1502 41 2133 61 2006 46 2007 46 2040 40 2159 61 2144 40 2131 46 2024 40 648 41 41 41 2022 46 2036 40 2133 46 2077 40 41 46 2009 44 648 41 348 2228 40 2022 41 58 2022 46 2020 46 2060 61 2013 46 2007 46 2077 40 2015 61 648 41 2022 46 2020 46 2074 40 41 2131 61 2013 46 2007 46 2040 40 2105 61 2229 40 2123 40 2123 40 648 41 41 44 1501 41 44 41 2109 61 2013 46 2007 46 2028 40 2171 61 2144 40 2006 46 2007 46 2040 40 2230 61 2131 44 2173 61 2123 40 648 41 44 41 46 2024 40 648 41 44 41 44 41 46 2040 40 2231 61 302 41 2022 46 2036 40 2109 46 2077 40 41 46 2171 44 648 41 348 2232 40 2022 41 58 2233 61 2006 46 2007 46 2028 40 2234 61 2144 40 2006 46 2007 46 2028 40 2235 61 2123 40 648 41 43 2030 40 648 41 44 41 46 2025 40 648 41 46 2024 40 648 41 91 58 1501 93 44 2034 61 2035 40 41 44 41 44 41 46 2077 40 2091 61 2022 46 2020 46 2091 41 2022 46 2036 40 2233 46 2234 44 1505 41 348 2236 40 2022 41 58 2022 46 2020 46 2060 61 2013 46 2007 46 2077 40 2015 61 648 41 2022 46 2020 46 2074 40 41 2131 61 2013 46 2007 46 2028 40 2237 61 2123 40 2123 40 648 41 41 44 41 46 2040 40 2105 61 2229 40 648 44 1501 41 41 2109 61 2013 46 2007 46 2028 40 2171 61 2144 40 2006 46 2007 46 2040 40 2230 61 2131 44 2173 61 2123 40 648 41 44 41 46 2024 40 648 41 44 41 44 41 46 2040 40 2231 61 302 41 2022 46 2036 40 2109 46 2077 40 41 46 2171 44 648 41 348 2238 40 2022 41 58 2223 61 2070 40 1501 41 2223 46 2239 621 2022 46 2036 40 2240 46 2241 40 2240 46 2242 40 2223 41 41 44 2223 41 348 2243 40 2022 41 58 497 2022 46 2079 40 2080 44 648 41 58 411 40 2013 46 2007 46 2040 40 2014 61 2030 40 648 41 41 41 348 2244 40 2022 41 58 497 2022 46 2079 40 2080 44 648 41 58 411 40 2006 46 2007 46 2040 40 2173 61 2030 40 648 41 41 41 348 2245 40 2022 41 58 2131 61 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 46 2024 40 648 41 2246 61 2013 46 2007 46 2040 40 2122 40 2131 41 41 2247 61 2013 46 2007 46 2028 40 2248 61 2122 40 2131 41 41 46 2040 40 2248 61 304 41 2022 46 2149 40 2246 44 2247 41 2022 46 2195 40 2013 46 2007 46 2076 40 2122 40 2131 41 41 46 2132 40 41 41 2022 46 2149 40 2247 44 2013 46 2007 46 2076 40 126 2122 40 2131 41 41 41 348 2249 40 2022 41 58 2131 61 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 46 2024 40 648 41 2022 46 2041 40 2013 46 2007 46 2040 40 2144 40 2131 41 41 44 91 2022 46 2017 46 2012 93 44 41 348 2250 40 2022 41 58 2131 61 2006 46 2007 46 2028 40 2251 61 2123 40 648 41 44 41 46 2024 40 648 41 46 2028 40 2252 61 2253 40 648 41 44 41 46 2024 40 648 41 2022 46 2135 40 2013 46 2007 46 2040 40 2159 61 2144 40 2131 41 41 46 2132 40 41 44 304 41 348 2254 40 2022 41 58 2152 61 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 2255 61 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 2109 61 2013 46 2007 46 2040 40 2256 40 2257 40 2122 40 2152 41 44 2258 61 304 41 44 2257 40 2122 40 2255 41 44 2258 61 304 41 44 349 61 302 44 2034 61 2050 40 41 44 41 44 41 2022 46 2149 40 2109 44 91 2022 46 2005 46 2012 44 2022 46 2017 46 2012 44 2022 46 2019 93 41 348 2259 40 2022 41 58 2152 61 2006 46 2007 46 2040 40 2012 61 2123 40 648 41 41 2255 61 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 2022 46 2020 46 2060 61 2022 46 2019 2022 46 2020 46 2074 40 41 2022 46 2149 40 2013 46 2007 46 2040 40 2122 40 2152 41 124 2122 40 2255 41 41 44 91 2022 46 2005 46 2012 44 2022 46 2017 46 2012 44 2022 46 2019 93 44 41 2022 46 2149 40 2013 46 2007 46 2040 40 2122 40 2152 41 38 2122 40 2255 41 41 44 91 2022 46 2019 93 44 41 2022 46 2149 40 2013 46 2007 46 2040 40 2122 40 2152 41 38 2048 40 2260 61 1503 41 41 44 91 2022 46 2019 93 44 41 2022 46 2149 40 2013 46 2007 46 2040 40 2122 40 2255 41 124 2048 40 2261 61 1503 41 41 44 91 2022 46 2005 46 2012 44 2022 46 2019 93 44 41 2022 46 2149 40 2013 46 2007 46 2040 40 2048 40 2260 61 1503 41 38 2122 40 2152 41 41 44 91 2022 46 2019 93 44 41 2022 46 2149 40 2013 46 2007 46 2040 40 2048 40 2261 61 1503 41 124 2122 40 2255 41 41 44 91 2022 46 2005 46 2012 44 2022 46 2019 93 44 41 348 2262 40 2022 41 58 2255 61 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 2022 46 2020 46 2060 61 2022 46 2019 2022 46 2020 46 2074 40 41 2263 61 91 2122 40 2255 41 38 2048 40 41 44 2048 40 41 38 2122 40 2255 41 44 2122 40 2255 41 124 2048 40 41 44 2048 40 41 124 2122 40 2255 41 44 2048 40 2122 40 2255 41 41 38 2048 40 41 44 2048 40 41 38 2048 40 2122 40 2255 41 41 44 2048 40 2122 40 2255 41 41 124 2048 40 41 44 2048 40 41 124 2048 40 2122 40 2255 41 41 44 93 385 2264 398 2263 58 497 2022 46 2129 40 2264 41 58 2022 46 2149 40 2013 46 2007 46 2040 40 2264 41 44 91 2022 46 2019 93 41 348 2265 40 2022 41 58 2255 61 2006 46 2007 46 2040 40 2060 61 2123 40 648 41 41 2022 46 2020 46 2060 61 2022 46 2019 2022 46 2020 46 2074 40 41 2022 46 2149 40 2013 46 2007 46 2040 40 2048 40 2122 40 2255 41 41 41 44 91 2022 46 2019 93 41 
132418,Python,"class TestFormField(PostgreSQLSimpleTestCase):

    def test_valid_integer(self):
        field = pg_forms.IntegerRangeField()
        value = field.clean(['1', '2'])
        self.assertEqual(value, NumericRange(1, 2))

    def test_valid_decimal(self):
        field = pg_forms.DecimalRangeField()
        value = field.clean(['1.12345', '2.001'])
        self.assertEqual(value, NumericRange(Decimal('1.12345'), Decimal('2.001')))

    def test_valid_timestamps(self):
        field = pg_forms.DateTimeRangeField()
        value = field.clean(['01/01/2014 00:00:00', '02/02/2014 12:12:12'])
        lower = datetime.datetime(2014, 1, 1, 0, 0, 0)
        upper = datetime.datetime(2014, 2, 2, 12, 12, 12)
        self.assertEqual(value, DateTimeTZRange(lower, upper))

    def test_valid_dates(self):
        field = pg_forms.DateRangeField()
        value = field.clean(['01/01/2014', '02/02/2014'])
        lower = datetime.date(2014, 1, 1)
        upper = datetime.date(2014, 2, 2)
        self.assertEqual(value, DateRange(lower, upper))

    def test_using_split_datetime_widget(self):
        class SplitDateTimeRangeField(pg_forms.DateTimeRangeField):
            base_field = forms.SplitDateTimeField

        class SplitForm(forms.Form):
            field = SplitDateTimeRangeField()

        form = SplitForm()
        self.assertHTMLEqual(str(form), '''
            <tr>
                <th>
                <label>Field:</label>
                </th>
                <td>
                    <input id=""id_field_0_0"" name=""field_0_0"" type=""text"">
                    <input id=""id_field_0_1"" name=""field_0_1"" type=""text"">
                    <input id=""id_field_1_0"" name=""field_1_0"" type=""text"">
                    <input id=""id_field_1_1"" name=""field_1_1"" type=""text"">
                </td>
            </tr>
        ''')
        form = SplitForm({
            'field_0_0': '01/01/2014',
            'field_0_1': '00:00:00',
            'field_1_0': '02/02/2014',
            'field_1_1': '12:12:12',
        })
        self.assertTrue(form.is_valid())
        lower = datetime.datetime(2014, 1, 1, 0, 0, 0)
        upper = datetime.datetime(2014, 2, 2, 12, 12, 12)
        self.assertEqual(form.cleaned_data['field'], DateTimeTZRange(lower, upper))

    def test_none(self):
        field = pg_forms.IntegerRangeField(required=False)
        value = field.clean(['', ''])
        self.assertIsNone(value)

    def test_datetime_form_as_table(self):
        class DateTimeRangeForm(forms.Form):
            datetime_field = pg_forms.DateTimeRangeField(show_hidden_initial=True)

        form = DateTimeRangeForm()
        self.assertHTMLEqual(
            form.as_table(),
            """"""
            <tr><th>
            <label>Datetime field:</label>
            </th><td>
            <input type=""text"" name=""datetime_field_0"" id=""id_datetime_field_0"">
            <input type=""text"" name=""datetime_field_1"" id=""id_datetime_field_1"">
            <input type=""hidden"" name=""initial-datetime_field_0"" id=""initial-id_datetime_field_0"">
            <input type=""hidden"" name=""initial-datetime_field_1"" id=""initial-id_datetime_field_1"">
            </td></tr>
            """"""
        )
        form = DateTimeRangeForm({
            'datetime_field_0': '2010-01-01 11:13:00',
            'datetime_field_1': '2020-12-12 16:59:00',
        })
        self.assertHTMLEqual(
            form.as_table(),
            """"""
            <tr><th>
            <label>Datetime field:</label>
            </th><td>
            <input type=""text"" name=""datetime_field_0""
            value=""2010-01-01 11:13:00"" id=""id_datetime_field_0"">
            <input type=""text"" name=""datetime_field_1""
            value=""2020-12-12 16:59:00"" id=""id_datetime_field_1"">
            <input type=""hidden"" name=""initial-datetime_field_0"" value=""2010-01-01 11:13:00""
            id=""initial-id_datetime_field_0"">
            <input type=""hidden"" name=""initial-datetime_field_1"" value=""2020-12-12 16:59:00""
            id=""initial-id_datetime_field_1""></td></tr>
            """"""
        )

    def test_datetime_form_initial_data(self):
        class DateTimeRangeForm(forms.Form):
            datetime_field = pg_forms.DateTimeRangeField(show_hidden_initial=True)

        data = QueryDict(mutable=True)
        data.update({
            'datetime_field_0': '2010-01-01 11:13:00',
            'datetime_field_1': '',
            'initial-datetime_field_0': '2010-01-01 10:12:00',
            'initial-datetime_field_1': '',
        })
        form = DateTimeRangeForm(data=data)
        self.assertTrue(form.has_changed())

        data['initial-datetime_field_0'] = '2010-01-01 11:13:00'
        form = DateTimeRangeForm(data=data)
        self.assertFalse(form.has_changed())

    def test_rendering(self):
        class RangeForm(forms.Form):
            ints = pg_forms.IntegerRangeField()

        self.assertHTMLEqual(str(RangeForm()), '''
        <tr>
            <th><label>Ints:</label></th>
            <td>
                <input id=""id_ints_0"" name=""ints_0"" type=""number"">
                <input id=""id_ints_1"" name=""ints_1"" type=""number"">
            </td>
        </tr>
        ''')

    def test_integer_lower_bound_higher(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['10', '2'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_integer_open(self):
        field = pg_forms.IntegerRangeField()
        value = field.clean(['', '0'])
        self.assertEqual(value, NumericRange(None, 0))

    def test_integer_incorrect_data_type(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('1')
        self.assertEqual(cm.exception.messages[0], 'Enter two whole numbers.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_integer_invalid_lower(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['a', '2'])
        self.assertEqual(cm.exception.messages[0], 'Enter a whole number.')

    def test_integer_invalid_upper(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['1', 'b'])
        self.assertEqual(cm.exception.messages[0], 'Enter a whole number.')

    def test_integer_required(self):
        field = pg_forms.IntegerRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean([1, ''])
        self.assertEqual(value, NumericRange(1, None))

    def test_decimal_lower_bound_higher(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['1.8', '1.6'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_decimal_open(self):
        field = pg_forms.DecimalRangeField()
        value = field.clean(['', '3.1415926'])
        self.assertEqual(value, NumericRange(None, Decimal('3.1415926')))

    def test_decimal_incorrect_data_type(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('1.6')
        self.assertEqual(cm.exception.messages[0], 'Enter two numbers.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_decimal_invalid_lower(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['a', '3.1415926'])
        self.assertEqual(cm.exception.messages[0], 'Enter a number.')

    def test_decimal_invalid_upper(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['1.61803399', 'b'])
        self.assertEqual(cm.exception.messages[0], 'Enter a number.')

    def test_decimal_required(self):
        field = pg_forms.DecimalRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean(['1.61803399', ''])
        self.assertEqual(value, NumericRange(Decimal('1.61803399'), None))

    def test_date_lower_bound_higher(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2013-04-09', '1976-04-16'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_date_open(self):
        field = pg_forms.DateRangeField()
        value = field.clean(['', '2013-04-09'])
        self.assertEqual(value, DateRange(None, datetime.date(2013, 4, 9)))

    def test_date_incorrect_data_type(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('1')
        self.assertEqual(cm.exception.messages[0], 'Enter two valid dates.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_date_invalid_lower(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['a', '2013-04-09'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date.')

    def test_date_invalid_upper(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2013-04-09', 'b'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date.')

    def test_date_required(self):
        field = pg_forms.DateRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean(['1976-04-16', ''])
        self.assertEqual(value, DateRange(datetime.date(1976, 4, 16), None))

    def test_date_has_changed_first(self):
        self.assertTrue(pg_forms.DateRangeField().has_changed(
            ['2010-01-01', '2020-12-12'],
            ['2010-01-31', '2020-12-12'],
        ))

    def test_date_has_changed_last(self):
        self.assertTrue(pg_forms.DateRangeField().has_changed(
            ['2010-01-01', '2020-12-12'],
            ['2010-01-01', '2020-12-31'],
        ))

    def test_datetime_lower_bound_higher(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2006-10-25 14:59', '2006-10-25 14:58'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_datetime_open(self):
        field = pg_forms.DateTimeRangeField()
        value = field.clean(['', '2013-04-09 11:45'])
        self.assertEqual(value, DateTimeTZRange(None, datetime.datetime(2013, 4, 9, 11, 45)))

    def test_datetime_incorrect_data_type(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('2013-04-09 11:45')
        self.assertEqual(cm.exception.messages[0], 'Enter two valid date/times.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_datetime_invalid_lower(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['45', '2013-04-09 11:45'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date/time.')

    def test_datetime_invalid_upper(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2013-04-09 11:45', 'sweet pickles'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date/time.')

    def test_datetime_required(self):
        field = pg_forms.DateTimeRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean(['2013-04-09 11:45', ''])
        self.assertEqual(value, DateTimeTZRange(datetime.datetime(2013, 4, 9, 11, 45), None))

    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Johannesburg')
    def test_datetime_prepare_value(self):
        field = pg_forms.DateTimeRangeField()
        value = field.prepare_value(
            DateTimeTZRange(datetime.datetime(2015, 5, 22, 16, 6, 33, tzinfo=timezone.utc), None)
        )
        self.assertEqual(value, [datetime.datetime(2015, 5, 22, 18, 6, 33), None])

    def test_datetime_has_changed_first(self):
        self.assertTrue(pg_forms.DateTimeRangeField().has_changed(
            ['2010-01-01 00:00', '2020-12-12 00:00'],
            ['2010-01-31 23:00', '2020-12-12 00:00'],
        ))

    def test_datetime_has_changed_last(self):
        self.assertTrue(pg_forms.DateTimeRangeField().has_changed(
            ['2010-01-01 00:00', '2020-12-12 00:00'],
            ['2010-01-01 00:00', '2020-12-31 23:00'],
        ))

    def test_model_field_formfield_integer(self):
        model_field = pg_fields.IntegerRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.IntegerRangeField)
        self.assertEqual(form_field.range_kwargs, {})

    def test_model_field_formfield_biginteger(self):
        model_field = pg_fields.BigIntegerRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.IntegerRangeField)
        self.assertEqual(form_field.range_kwargs, {})

    def test_model_field_formfield_float(self):
        model_field = pg_fields.DecimalRangeField(default_bounds='()')
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DecimalRangeField)
        self.assertEqual(form_field.range_kwargs, {'bounds': '()'})

    def test_model_field_formfield_date(self):
        model_field = pg_fields.DateRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DateRangeField)
        self.assertEqual(form_field.range_kwargs, {})

    def test_model_field_formfield_datetime(self):
        model_field = pg_fields.DateTimeRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DateTimeRangeField)
        self.assertEqual(
            form_field.range_kwargs,
            {'bounds': pg_fields.ranges.CANONICAL_RANGE_BOUNDS},
        )

    def test_model_field_formfield_datetime_default_bounds(self):
        model_field = pg_fields.DateTimeRangeField(default_bounds='[]')
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DateTimeRangeField)
        self.assertEqual(form_field.range_kwargs, {'bounds': '[]'})

    def test_model_field_with_default_bounds(self):
        field = pg_forms.DateTimeRangeField(default_bounds='[]')
        value = field.clean(['2014-01-01 00:00:00', '2014-02-03 12:13:14'])
        lower = datetime.datetime(2014, 1, 1, 0, 0, 0)
        upper = datetime.datetime(2014, 2, 3, 12, 13, 14)
        self.assertEqual(value, DateTimeTZRange(lower, upper, '[]'))

    def test_has_changed(self):
        for field, value in (
            (pg_forms.DateRangeField(), ['2010-01-01', '2020-12-12']),
            (pg_forms.DateTimeRangeField(), ['2010-01-01 11:13', '2020-12-12 14:52']),
            (pg_forms.IntegerRangeField(), [1, 2]),
            (pg_forms.DecimalRangeField(), ['1.12345', '2.001']),
        ):
            with self.subTest(field=field.__class__.__name__):
                self.assertTrue(field.has_changed(None, value))
                self.assertTrue(field.has_changed([value[0], ''], value))
                self.assertTrue(field.has_changed(['', value[1]], value))
                self.assertFalse(field.has_changed(value, value))",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 2004 61 2005 46 2006 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 1501 44 1502 41 41 348 2011 40 2003 41 58 2004 61 2005 46 2012 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 2013 40 648 41 44 2013 40 648 41 41 41 348 2014 40 2003 41 58 2004 61 2005 46 2015 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2016 61 2017 46 2017 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 2018 61 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 44 1503 41 2003 46 2009 40 2007 44 2019 40 2016 44 2018 41 41 348 2020 40 2003 41 58 2004 61 2005 46 2021 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2016 61 2017 46 2022 40 1505 44 1501 44 1501 41 2018 61 2017 46 2022 40 1505 44 1502 44 1502 41 2003 46 2009 40 2007 44 2023 40 2016 44 2018 41 41 348 2024 40 2003 41 58 334 2025 40 2005 46 2015 41 58 2026 61 2027 46 2028 334 2029 40 2027 46 2030 41 58 2004 61 2025 40 41 2031 61 2029 40 41 2003 46 2032 40 2033 40 2031 41 44 648 41 2031 61 2029 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2003 46 2034 40 2031 46 2035 40 41 41 2016 61 2017 46 2017 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 2018 61 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 44 1503 41 2003 46 2009 40 2031 46 2036 91 648 93 44 2019 40 2016 44 2018 41 41 348 2037 40 2003 41 58 2004 61 2005 46 2006 40 2038 61 302 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2039 40 2007 41 348 2040 40 2003 41 58 334 2041 40 2027 46 2030 41 58 2042 61 2005 46 2015 40 2043 61 304 41 2031 61 2041 40 41 2003 46 2032 40 2031 46 2044 40 41 44 648 41 2031 61 2041 40 123 648 58 648 44 648 58 648 44 125 41 2003 46 2032 40 2031 46 2044 40 41 44 648 41 348 2045 40 2003 41 58 334 2041 40 2027 46 2030 41 58 2042 61 2005 46 2015 40 2043 61 304 41 2046 61 2047 40 415 61 304 41 2046 46 2048 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2031 61 2041 40 2046 61 2046 41 2003 46 2034 40 2031 46 2049 40 41 41 2046 91 648 93 61 648 2031 61 2041 40 2046 61 2046 41 2003 46 2050 40 2031 46 2049 40 41 41 348 2051 40 2003 41 58 334 2052 40 2027 46 2030 41 58 2053 61 2005 46 2006 40 41 2003 46 2032 40 2033 40 2052 40 41 41 44 648 41 348 2054 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2062 40 2003 41 58 2004 61 2005 46 2006 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 303 44 1500 41 41 348 2063 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2064 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2065 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2066 40 2003 41 58 2004 61 2005 46 2006 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 1501 44 648 93 41 2003 46 2009 40 2007 44 2010 40 1501 44 303 41 41 348 2067 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2068 40 2003 41 58 2004 61 2005 46 2012 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 303 44 2013 40 648 41 41 41 348 2069 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2070 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2071 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2072 40 2003 41 58 2004 61 2005 46 2012 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 2013 40 648 41 44 303 41 41 348 2073 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2074 40 2003 41 58 2004 61 2005 46 2021 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2023 40 303 44 2017 46 2022 40 1505 44 1502 44 1502 41 41 41 348 2075 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2076 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2077 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2078 40 2003 41 58 2004 61 2005 46 2021 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2023 40 2017 46 2022 40 1505 44 1502 44 1503 41 44 303 41 41 348 2079 40 2003 41 58 2003 46 2034 40 2005 46 2021 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2080 40 2003 41 58 2003 46 2034 40 2005 46 2021 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2081 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2082 40 2003 41 58 2004 61 2005 46 2015 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2019 40 303 44 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 41 41 41 348 2083 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2084 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2085 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2086 40 2003 41 58 2004 61 2005 46 2015 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2019 40 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 41 44 303 41 41 64 2087 40 2088 61 304 44 2089 61 648 41 348 2090 40 2003 41 58 2004 61 2005 46 2015 40 41 2007 61 2004 46 2091 40 2019 40 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1502 44 1503 44 2092 61 2093 46 2094 41 44 303 41 41 2003 46 2009 40 2007 44 91 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1502 44 1503 41 44 303 93 41 348 2095 40 2003 41 58 2003 46 2034 40 2005 46 2015 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2096 40 2003 41 58 2003 46 2034 40 2005 46 2015 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2097 40 2003 41 58 2098 61 2099 46 2006 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2006 41 2003 46 2009 40 2100 46 2103 44 123 125 41 348 2104 40 2003 41 58 2098 61 2099 46 2105 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2006 41 2003 46 2009 40 2100 46 2103 44 123 125 41 348 2106 40 2003 41 58 2098 61 2099 46 2012 40 2107 61 648 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2012 41 2003 46 2009 40 2100 46 2103 44 123 648 58 648 125 41 348 2108 40 2003 41 58 2098 61 2099 46 2021 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2021 41 2003 46 2009 40 2100 46 2103 44 123 125 41 348 2109 40 2003 41 58 2098 61 2099 46 2015 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2015 41 2003 46 2009 40 2100 46 2103 44 123 648 58 2099 46 2110 46 2111 125 44 41 348 2112 40 2003 41 58 2098 61 2099 46 2015 40 2107 61 648 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2015 41 2003 46 2009 40 2100 46 2103 44 123 648 58 648 125 41 348 2113 40 2003 41 58 2004 61 2005 46 2015 40 2107 61 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2016 61 2017 46 2017 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 2018 61 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 44 1503 41 2003 46 2009 40 2007 44 2019 40 2016 44 2018 44 648 41 41 348 2114 40 2003 41 58 385 2004 44 2007 398 40 40 2005 46 2021 40 41 44 91 648 44 648 93 41 44 40 2005 46 2015 40 41 44 91 648 44 648 93 41 44 40 2005 46 2006 40 41 44 91 1501 44 1502 93 41 44 40 2005 46 2012 40 41 44 91 648 44 648 93 41 44 41 58 497 2003 46 2115 40 2004 61 2004 46 2116 46 2117 41 58 2003 46 2034 40 2004 46 2049 40 303 44 2007 41 41 2003 46 2034 40 2004 46 2049 40 91 2007 91 1500 93 44 648 93 44 2007 41 41 2003 46 2034 40 2004 46 2049 40 91 648 44 2007 91 1501 93 93 44 2007 41 41 2003 46 2050 40 2004 46 2049 40 2007 44 2007 41 41 
