id,language,text,smell,tokens
130780,Python,"class Input(Widget):
    """"""
    Base class for all <input> widgets.
    """"""
    input_type = None  # Subclasses must define this.
    template_name = 'django/forms/widgets/input.html'

    def __init__(self, attrs=None):
        if attrs is not None:
            attrs = attrs.copy()
            self.input_type = attrs.pop('type', self.input_type)
        super().__init__(attrs)

    def get_context(self, name, value, attrs):
        context = super().get_context(name, value, attrs)
        context['widget']['type'] = self.input_type
        return context",0,334 2000 40 2001 41 58 648 2002 61 303 621 2003 61 648 348 2004 40 2005 44 2006 61 303 41 58 392 2006 407 422 303 58 2006 61 2006 46 2007 40 41 2005 46 2002 61 2006 46 2008 40 648 44 2005 46 2002 41 463 40 41 46 2004 40 2006 41 348 2009 40 2005 44 2010 44 2011 44 2006 41 58 2012 61 463 40 41 46 2009 40 2010 44 2011 44 2006 41 2012 91 648 93 91 648 93 61 2005 46 2002 450 2012 
134320,Python,"class ManyToManyRel(ForeignObjectRel):
    """"""
    Used by ManyToManyField to store information about the relation.

    ``_meta.get_fields()`` returns this class to provide access to the field
    flags for the reverse relation.
    """"""

    def __init__(self, field, to, related_name=None, related_query_name=None,
                 limit_choices_to=None, symmetrical=True, through=None,
                 through_fields=None, db_constraint=True):
        super().__init__(
            field, to,
            related_name=related_name,
            related_query_name=related_query_name,
            limit_choices_to=limit_choices_to,
        )

        if through and not db_constraint:
            raise ValueError(""Can't supply a through model and db_constraint=False"")
        self.through = through

        if through_fields and not through:
            raise ValueError(""Cannot specify through_fields without a through model"")
        self.through_fields = through_fields

        self.symmetrical = symmetrical
        self.db_constraint = db_constraint

    @property
    def identity(self):
        return super().identity + (
            self.through,
            make_hashable(self.through_fields),
            self.db_constraint,
        )

    def get_related_field(self):
        """"""
        Return the field in the 'to' object to which this relationship is tied.
        Provided for symmetry with ManyToOneRel.
        """"""
        opts = self.through._meta
        if self.through_fields:
            field = opts.get_field(self.through_fields[0])
        else:
            for field in opts.fields:
                rel = getattr(field, 'remote_field', None)
                if rel and rel.model == self.model:
                    break
        return field.foreign_related_fields[0]",0,334 2000 40 2001 41 58 648 348 2002 40 2003 44 2004 44 2005 44 2006 61 303 44 2007 61 303 44 2008 61 303 44 2009 61 304 44 2010 61 303 44 2011 61 303 44 2012 61 304 41 58 463 40 41 46 2002 40 2004 44 2005 44 2006 61 2006 44 2007 61 2007 44 2008 61 2008 44 41 392 2010 308 422 2012 58 440 2013 40 648 41 2003 46 2010 61 2010 392 2011 308 422 2010 58 440 2013 40 648 41 2003 46 2011 61 2011 2003 46 2009 61 2009 2003 46 2012 61 2012 64 2014 348 2015 40 2003 41 58 450 463 40 41 46 2015 43 40 2003 46 2010 44 2016 40 2003 46 2011 41 44 2003 46 2012 44 41 348 2017 40 2003 41 58 648 2018 61 2003 46 2010 46 2019 392 2003 46 2011 58 2004 61 2018 46 2020 40 2003 46 2011 91 1500 93 41 360 58 385 2004 398 2018 46 2021 58 2022 61 2023 40 2004 44 648 44 303 41 392 2022 308 2022 46 2024 614 2003 46 2024 58 325 450 2004 46 2025 91 1500 93 
133146,Python,"class MyEmailBackend(BaseEmailBackend):
    def send_messages(self, email_messages):
        pass",0,334 2000 40 2001 41 58 348 2002 40 2003 44 2004 41 58 434 
132555,Python,"class Author(models.Model):
    name = models.CharField(max_length=20)

    class Meta:
        ordering = ('name',)

    def __str__(self):
        return self.name",0,334 2000 40 2001 46 2002 41 58 2003 61 2001 46 2004 40 2005 61 1503 41 334 2006 58 2007 61 40 648 44 41 348 2008 40 2009 41 58 450 2009 46 2003 
131503,Python,"class AuthorManager(models.Manager):
    def get_queryset(self):
        qs = super().get_queryset()
        return qs.filter(archived=False)",0,334 2000 40 2001 46 2002 41 58 348 2003 40 2004 41 58 2005 61 463 40 41 46 2003 40 41 450 2005 46 2006 40 2007 61 302 41 
133573,Python,"class AppResolutionOrderI18NTests(ResolutionOrderI18NTests):

    @override_settings(LANGUAGE_CODE='de')
    def test_app_translation(self):
        # Original translation.
        self.assertGettext('Date/time', 'Datum/Zeit')

        # Different translation.
        with self.modify_settings(INSTALLED_APPS={'append': 'i18n.resolution'}):
            # Force refreshing translations.
            activate('de')

            # Doesn't work because it's added later in the list.
            self.assertGettext('Date/time', 'Datum/Zeit')

            with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.admin.apps.SimpleAdminConfig'}):
                # Force refreshing translations.
                activate('de')

                # Unless the original is removed from the list.
                self.assertGettext('Date/time', 'Datum/Zeit (APP)')",0,334 2000 40 2001 41 58 64 2002 40 2003 61 648 41 348 2004 40 2005 41 58 621 2005 46 2006 40 648 44 648 41 621 497 2005 46 2007 40 2008 61 123 648 58 648 125 41 58 621 2009 40 648 41 621 2005 46 2006 40 648 44 648 41 497 2005 46 2007 40 2008 61 123 648 58 648 125 41 58 621 2009 40 648 41 621 2005 46 2006 40 648 44 648 41 
131975,Python,"            class BookAdmin(admin.ModelAdmin):
                @admin.display(boolean=True, empty_value='(Missing)')
                def is_published(self, obj):
                    return obj.publish_date is not None",0,334 2000 40 2001 46 2002 41 58 64 2001 46 2003 40 324 61 304 44 2004 61 648 41 348 2005 40 2006 44 2007 41 58 450 2007 46 2008 407 422 303 
134213,Python,"        class Descendant(AbstractBase):
            middle_name = None

            def full_name(self):
                return self.first_name + self.last_name",0,334 2000 40 2001 41 58 2002 61 303 348 2003 40 2004 41 58 450 2004 46 2005 43 2004 46 2006 
133884,Python,"class FilePathFieldTest(SimpleTestCase):
    expected_choices = [
        ('/filepathfield_test_dir/__init__.py', '__init__.py'),
        ('/filepathfield_test_dir/a.py', 'a.py'),
        ('/filepathfield_test_dir/ab.py', 'ab.py'),
        ('/filepathfield_test_dir/b.py', 'b.py'),
        ('/filepathfield_test_dir/c/__init__.py', '__init__.py'),
        ('/filepathfield_test_dir/c/d.py', 'd.py'),
        ('/filepathfield_test_dir/c/e.py', 'e.py'),
        ('/filepathfield_test_dir/c/f/__init__.py', '__init__.py'),
        ('/filepathfield_test_dir/c/f/g.py', 'g.py'),
        ('/filepathfield_test_dir/h/__init__.py', '__init__.py'),
        ('/filepathfield_test_dir/j/__init__.py', '__init__.py'),
    ]
    path = os.path.join(PATH, 'filepathfield_test_dir') + '/'

    def assertChoices(self, field, expected_choices):
        self.assertEqual(fix_os_paths(field.choices), expected_choices)

    def test_fix_os_paths(self):
        self.assertEqual(fix_os_paths(self.path), ('/filepathfield_test_dir/'))

    def test_nonexistent_path(self):
        with self.assertRaisesMessage(FileNotFoundError, 'nonexistent'):
            FilePathField(path='nonexistent')

    def test_no_options(self):
        f = FilePathField(path=self.path)
        expected = [
            ('/filepathfield_test_dir/README', 'README'),
        ] + self.expected_choices[:4]
        self.assertChoices(f, expected)

    def test_clean(self):
        f = FilePathField(path=self.path)
        msg = ""'Select a valid choice. a.py is not one of the available choices.'""
        with self.assertRaisesMessage(ValidationError, msg):
            f.clean('a.py')
        self.assertEqual(fix_os_paths(f.clean(self.path + 'a.py')), '/filepathfield_test_dir/a.py')

    def test_match(self):
        f = FilePathField(path=self.path, match=r'^.*?\.py$')
        self.assertChoices(f, self.expected_choices[:4])

    def test_recursive(self):
        f = FilePathField(path=self.path, recursive=True, match=r'^.*?\.py$')
        expected = [
            ('/filepathfield_test_dir/__init__.py', '__init__.py'),
            ('/filepathfield_test_dir/a.py', 'a.py'),
            ('/filepathfield_test_dir/ab.py', 'ab.py'),
            ('/filepathfield_test_dir/b.py', 'b.py'),
            ('/filepathfield_test_dir/c/__init__.py', 'c/__init__.py'),
            ('/filepathfield_test_dir/c/d.py', 'c/d.py'),
            ('/filepathfield_test_dir/c/e.py', 'c/e.py'),
            ('/filepathfield_test_dir/c/f/__init__.py', 'c/f/__init__.py'),
            ('/filepathfield_test_dir/c/f/g.py', 'c/f/g.py'),
            ('/filepathfield_test_dir/h/__init__.py', 'h/__init__.py'),
            ('/filepathfield_test_dir/j/__init__.py', 'j/__init__.py'),

        ]
        self.assertChoices(f, expected)

    def test_allow_folders(self):
        f = FilePathField(path=self.path, allow_folders=True, allow_files=False)
        self.assertChoices(f, [
            ('/filepathfield_test_dir/c', 'c'),
            ('/filepathfield_test_dir/h', 'h'),
            ('/filepathfield_test_dir/j', 'j'),
        ])

    def test_recursive_no_folders_or_files(self):
        f = FilePathField(path=self.path, recursive=True, allow_folders=False, allow_files=False)
        self.assertChoices(f, [])

    def test_recursive_folders_without_files(self):
        f = FilePathField(path=self.path, recursive=True, allow_folders=True, allow_files=False)
        self.assertChoices(f, [
            ('/filepathfield_test_dir/c', 'c'),
            ('/filepathfield_test_dir/h', 'h'),
            ('/filepathfield_test_dir/j', 'j'),
            ('/filepathfield_test_dir/c/f', 'c/f'),
        ])",0,334 2000 40 2001 41 58 2002 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 93 2003 61 2004 46 2003 46 2005 40 2006 44 648 41 43 648 348 2007 40 2008 44 2009 44 2002 41 58 2008 46 2010 40 2011 40 2009 46 2012 41 44 2002 41 348 2013 40 2008 41 58 2008 46 2010 40 2011 40 2008 46 2003 41 44 40 648 41 41 348 2014 40 2008 41 58 497 2008 46 2015 40 2016 44 648 41 58 2017 40 2003 61 648 41 348 2018 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 41 2020 61 91 40 648 44 648 41 44 93 43 2008 46 2002 91 58 1502 93 2008 46 2007 40 2019 44 2020 41 348 2021 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 41 2022 61 648 497 2008 46 2015 40 2023 44 2022 41 58 2019 46 2024 40 648 41 2008 46 2010 40 2011 40 2019 46 2024 40 2008 46 2003 43 648 41 41 44 648 41 348 2025 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 44 2026 61 648 41 2008 46 2007 40 2019 44 2008 46 2002 91 58 1502 93 41 348 2027 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 44 2028 61 304 44 2026 61 648 41 2020 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 93 2008 46 2007 40 2019 44 2020 41 348 2029 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 44 2030 61 304 44 2031 61 302 41 2008 46 2007 40 2019 44 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 93 41 348 2032 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 44 2028 61 304 44 2030 61 302 44 2031 61 302 41 2008 46 2007 40 2019 44 91 93 41 348 2033 40 2008 41 58 2019 61 2017 40 2003 61 2008 46 2003 44 2028 61 304 44 2030 61 304 44 2031 61 302 41 2008 46 2007 40 2019 44 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 93 41 
134699,Python,"class FailingLiveServerThread(LiveServerThread):
    def _create_server(self):
        raise RuntimeError('Error creating server.')",0,334 2000 40 2001 41 58 348 2002 40 2003 41 58 440 2004 40 648 41 
134471,Python,"class ExecuteFromCommandLine(SimpleTestCase):
    def test_program_name_from_argv(self):
        """"""
        Program name is computed from the execute_from_command_line()'s argv
        argument, not sys.argv.
        """"""
        args = ['help', 'shell']
        with captured_stdout() as out, captured_stderr() as err:
            with mock.patch('sys.argv', [None] + args):
                execute_from_command_line(['django-admin'] + args)
        self.assertIn('usage: django-admin shell', out.getvalue())
        self.assertEqual(err.getvalue(), '')",0,334 2000 40 2001 41 58 348 2002 40 2003 41 58 648 2004 61 91 648 44 648 93 497 2005 40 41 311 430 44 2006 40 41 311 2007 58 497 2008 46 2009 40 648 44 91 303 93 43 2004 41 58 2010 40 91 648 93 43 2004 41 2003 46 2011 40 648 44 430 46 2012 40 41 41 2003 46 2013 40 2007 46 2012 40 41 44 648 41 
131991,Python,"class InlineAdminViewOnSiteTest(TestCase):

    @classmethod
    def setUpTestData(cls):
        cls.superuser = User.objects.create_superuser(username='super', password='secret', email='super@example.com')

        cls.s1 = State.objects.create(name='New York')
        cls.s2 = State.objects.create(name='Illinois')
        cls.s3 = State.objects.create(name='California')
        cls.c1 = City.objects.create(state=cls.s1, name='New York')
        cls.c2 = City.objects.create(state=cls.s2, name='Chicago')
        cls.c3 = City.objects.create(state=cls.s3, name='San Francisco')
        cls.r1 = Restaurant.objects.create(city=cls.c1, name='Italian Pizza')
        cls.r2 = Restaurant.objects.create(city=cls.c1, name='Boulevard')
        cls.r3 = Restaurant.objects.create(city=cls.c2, name='Chinese Dinner')
        cls.r4 = Restaurant.objects.create(city=cls.c2, name='Angels')
        cls.r5 = Restaurant.objects.create(city=cls.c2, name='Take Away')
        cls.r6 = Restaurant.objects.create(city=cls.c3, name='The Unknown Restaurant')
        cls.w1 = Worker.objects.create(work_at=cls.r1, name='Mario', surname='Rossi')
        cls.w2 = Worker.objects.create(work_at=cls.r1, name='Antonio', surname='Bianchi')
        cls.w3 = Worker.objects.create(work_at=cls.r1, name='John', surname='Doe')

    def setUp(self):
        self.client.force_login(self.superuser)

    def test_false(self):
        ""The 'View on site' button is not displayed if view_on_site is False""
        response = self.client.get(reverse('admin:admin_views_state_change', args=(self.s1.pk,)))
        content_type_pk = ContentType.objects.get_for_model(City).pk
        self.assertNotContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.c1.pk)))

    def test_true(self):
        ""The 'View on site' button is displayed if view_on_site is True""
        response = self.client.get(reverse('admin:admin_views_city_change', args=(self.c1.pk,)))
        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk
        self.assertContains(response, reverse('admin:view_on_site', args=(content_type_pk, self.r1.pk)))

    def test_callable(self):
        ""The right link is displayed if view_on_site is a callable""
        response = self.client.get(reverse('admin:admin_views_restaurant_change', args=(self.r1.pk,)))
        self.assertContains(response, '""/worker_inline/%s/%s/""' % (self.w1.surname, self.w1.name))",0,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 46 2007 46 2008 40 2009 61 648 44 2010 61 648 44 2011 61 648 41 2004 46 2012 61 2013 46 2007 46 2014 40 2015 61 648 41 2004 46 2016 61 2013 46 2007 46 2014 40 2015 61 648 41 2004 46 2017 61 2013 46 2007 46 2014 40 2015 61 648 41 2004 46 2018 61 2019 46 2007 46 2014 40 2020 61 2004 46 2012 44 2015 61 648 41 2004 46 2021 61 2019 46 2007 46 2014 40 2020 61 2004 46 2016 44 2015 61 648 41 2004 46 2022 61 2019 46 2007 46 2014 40 2020 61 2004 46 2017 44 2015 61 648 41 2004 46 2023 61 2024 46 2007 46 2014 40 2025 61 2004 46 2018 44 2015 61 648 41 2004 46 2026 61 2024 46 2007 46 2014 40 2025 61 2004 46 2018 44 2015 61 648 41 2004 46 2027 61 2024 46 2007 46 2014 40 2025 61 2004 46 2021 44 2015 61 648 41 2004 46 2028 61 2024 46 2007 46 2014 40 2025 61 2004 46 2021 44 2015 61 648 41 2004 46 2029 61 2024 46 2007 46 2014 40 2025 61 2004 46 2021 44 2015 61 648 41 2004 46 2030 61 2024 46 2007 46 2014 40 2025 61 2004 46 2022 44 2015 61 648 41 2004 46 2031 61 2032 46 2007 46 2014 40 2033 61 2004 46 2023 44 2015 61 648 44 2034 61 648 41 2004 46 2035 61 2032 46 2007 46 2014 40 2033 61 2004 46 2023 44 2015 61 648 44 2034 61 648 41 2004 46 2036 61 2032 46 2007 46 2014 40 2033 61 2004 46 2023 44 2015 61 648 44 2034 61 648 41 348 2037 40 2038 41 58 2038 46 2039 46 2040 40 2038 46 2005 41 348 2041 40 2038 41 58 648 2042 61 2038 46 2039 46 2043 40 2044 40 648 44 2045 61 40 2038 46 2012 46 2046 44 41 41 41 2047 61 2048 46 2007 46 2049 40 2019 41 46 2046 2038 46 2050 40 2042 44 2044 40 648 44 2045 61 40 2047 44 2038 46 2018 46 2046 41 41 41 348 2051 40 2038 41 58 648 2042 61 2038 46 2039 46 2043 40 2044 40 648 44 2045 61 40 2038 46 2018 46 2046 44 41 41 41 2047 61 2048 46 2007 46 2049 40 2024 41 46 2046 2038 46 2052 40 2042 44 2044 40 648 44 2045 61 40 2047 44 2038 46 2023 46 2046 41 41 41 348 2053 40 2038 41 58 648 2042 61 2038 46 2039 46 2043 40 2044 40 648 44 2045 61 40 2038 46 2023 46 2046 44 41 41 41 2038 46 2052 40 2042 44 648 37 40 2038 46 2031 46 2034 44 2038 46 2031 46 2015 41 41 
132454,Python,"class Item(models.Model):
    name = models.CharField(max_length=10)
    child = models.ForeignKey(Child, models.SET_NULL, null=True)

    def __str__(self):
        return self.name",0,334 2000 40 2001 46 2002 41 58 2003 61 2001 46 2004 40 2005 61 1502 41 2006 61 2001 46 2007 40 2008 44 2001 46 2009 44 424 61 304 41 348 2010 40 2011 41 58 450 2011 46 2003 
134726,Python,"class FormsTestCase(SimpleTestCase):
    # A Form is a collection of Fields. It knows how to validate a set of data and it
    # knows how to render itself in a couple of default ways (e.g., an HTML table).
    # You can pass it data in __init__(), as a dictionary.

    def test_form(self):
        # Pass a dictionary to a Form's __init__().
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'})

        self.assertTrue(p.is_bound)
        self.assertEqual(p.errors, {})
        self.assertIsInstance(p.errors, dict)
        self.assertTrue(p.is_valid())
        self.assertHTMLEqual(p.errors.as_ul(), '')
        self.assertEqual(p.errors.as_text(), '')
        self.assertEqual(p.cleaned_data[""first_name""], 'John')
        self.assertEqual(p.cleaned_data[""last_name""], 'Lennon')
        self.assertEqual(p.cleaned_data[""birthday""], datetime.date(1940, 10, 9))
        self.assertHTMLEqual(
            str(p['first_name']),
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['last_name']),
            '<input type=""text"" name=""last_name"" value=""Lennon"" id=""id_last_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['birthday']),
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required>'
        )

        msg = ""Key 'nonexistentfield' not found in 'Person'. Choices are: birthday, first_name, last_name.""
        with self.assertRaisesMessage(KeyError, msg):
            p['nonexistentfield']

        form_output = []

        for boundfield in p:
            form_output.append(str(boundfield))

        self.assertHTMLEqual(
            '\n'.join(form_output),
            """"""<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required>
<input type=""text"" name=""last_name"" value=""Lennon"" id=""id_last_name"" required>
<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required>""""""
        )

        form_output = []

        for boundfield in p:
            form_output.append([boundfield.label, boundfield.data])

        self.assertEqual(form_output, [
            ['First name', 'John'],
            ['Last name', 'Lennon'],
            ['Birthday', '1940-10-9']
        ])
        self.assertHTMLEqual(
            str(p),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" value=""Lennon"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></td></tr>""""""
        )

    def test_empty_dict(self):
        # Empty dictionaries are valid, too.
        p = Person({})
        self.assertTrue(p.is_bound)
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['last_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])
        self.assertFalse(p.is_valid())
        self.assertEqual(p.cleaned_data, {})
        self.assertHTMLEqual(
            str(p),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
<label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
<label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
<label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist""><li>This field is required.</li></ul>
<p><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></p>
<ul class=""errorlist""><li>This field is required.</li></ul>
<p><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></p>
<ul class=""errorlist""><li>This field is required.</li></ul>
<p><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></p>""""""
        )

    def test_empty_querydict_args(self):
        data = QueryDict()
        files = QueryDict()
        p = Person(data, files)
        self.assertIs(p.data, data)
        self.assertIs(p.files, files)

    def test_unbound_form(self):
        # If you don't pass any values to the Form's __init__(), or if you pass None,
        # the Form will be considered unbound and won't do any validation. Form.errors
        # will be an empty dictionary *but* Form.is_valid() will return False.
        p = Person()
        self.assertFalse(p.is_bound)
        self.assertEqual(p.errors, {})
        self.assertFalse(p.is_valid())
        with self.assertRaises(AttributeError):
            p.cleaned_data

        self.assertHTMLEqual(
            str(p),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></li>
<li><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></li>
<li><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></p>
<p><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></p>
<p><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required></p>""""""
        )

    def test_unicode_values(self):
        # Unicode values are handled properly.
        p = Person({
            'first_name': 'John',
            'last_name': '\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111',
            'birthday': '1940-10-9'
        })
        self.assertHTMLEqual(
            p.as_table(),
            '<tr><th><label for=""id_first_name"">First name:</label></th><td>'
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></td></tr>\n'
            '<tr><th><label for=""id_last_name"">Last name:</label>'
            '</th><td><input type=""text"" name=""last_name"" '
            'value=""\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111""'
            'id=""id_last_name"" required></td></tr>\n'
            '<tr><th><label for=""id_birthday"">Birthday:</label></th><td>'
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></td></tr>'
        )
        self.assertHTMLEqual(
            p.as_ul(),
            '<li><label for=""id_first_name"">First name:</label> '
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></li>\n'
            '<li><label for=""id_last_name"">Last name:</label> '
            '<input type=""text"" name=""last_name"" '
            'value=""\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111"" id=""id_last_name"" required></li>\n'
            '<li><label for=""id_birthday"">Birthday:</label> '
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></li>'
        )
        self.assertHTMLEqual(
            p.as_p(),
            '<p><label for=""id_first_name"">First name:</label> '
            '<input type=""text"" name=""first_name"" value=""John"" id=""id_first_name"" required></p>\n'
            '<p><label for=""id_last_name"">Last name:</label> '
            '<input type=""text"" name=""last_name"" '
            'value=""\u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111"" id=""id_last_name"" required></p>\n'
            '<p><label for=""id_birthday"">Birthday:</label> '
            '<input type=""text"" name=""birthday"" value=""1940-10-9"" id=""id_birthday"" required></p>'
        )

        p = Person({'last_name': 'Lennon'})
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])
        self.assertFalse(p.is_valid())
        self.assertEqual(
            p.errors,
            {'birthday': ['This field is required.'], 'first_name': ['This field is required.']}
        )
        self.assertEqual(p.cleaned_data, {'last_name': 'Lennon'})
        self.assertEqual(p['first_name'].errors, ['This field is required.'])
        self.assertHTMLEqual(
            p['first_name'].errors.as_ul(),
            '<ul class=""errorlist""><li>This field is required.</li></ul>'
        )
        self.assertEqual(p['first_name'].errors.as_text(), '* This field is required.')

        p = Person()
        self.assertHTMLEqual(
            str(p['first_name']),
            '<input type=""text"" name=""first_name"" id=""id_first_name"" required>',
        )
        self.assertHTMLEqual(str(p['last_name']), '<input type=""text"" name=""last_name"" id=""id_last_name"" required>')
        self.assertHTMLEqual(str(p['birthday']), '<input type=""text"" name=""birthday"" id=""id_birthday"" required>')

    def test_cleaned_data_only_fields(self):
        # cleaned_data will always *only* contain a key for fields defined in the
        # Form, even if you pass extra data when you define the Form. In this
        # example, we pass a bunch of extra fields to the form constructor,
        # but cleaned_data contains only the form's fields.
        data = {
            'first_name': 'John',
            'last_name': 'Lennon',
            'birthday': '1940-10-9',
            'extra1': 'hello',
            'extra2': 'hello',
        }
        p = Person(data)
        self.assertTrue(p.is_valid())
        self.assertEqual(p.cleaned_data['first_name'], 'John')
        self.assertEqual(p.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p.cleaned_data['birthday'], datetime.date(1940, 10, 9))

    def test_optional_data(self):
        # cleaned_data will include a key and value for *all* fields defined in the Form,
        # even if the Form's data didn't include a value for fields that are not
        # required. In this example, the data dictionary doesn't include a value for the
        # ""nick_name"" field, but cleaned_data includes it. For CharFields, it's set to the
        # empty string.
        class OptionalPersonForm(Form):
            first_name = CharField()
            last_name = CharField()
            nick_name = CharField(required=False)

        data = {'first_name': 'John', 'last_name': 'Lennon'}
        f = OptionalPersonForm(data)
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['nick_name'], '')
        self.assertEqual(f.cleaned_data['first_name'], 'John')
        self.assertEqual(f.cleaned_data['last_name'], 'Lennon')

        # For DateFields, it's set to None.
        class OptionalPersonForm(Form):
            first_name = CharField()
            last_name = CharField()
            birth_date = DateField(required=False)

        data = {'first_name': 'John', 'last_name': 'Lennon'}
        f = OptionalPersonForm(data)
        self.assertTrue(f.is_valid())
        self.assertIsNone(f.cleaned_data['birth_date'])
        self.assertEqual(f.cleaned_data['first_name'], 'John')
        self.assertEqual(f.cleaned_data['last_name'], 'Lennon')

    def test_auto_id(self):
        # ""auto_id"" tells the Form to add an ""id"" attribute to each form element.
        # If it's a string that contains '%s', Django will use that as a format string
        # into which the field's name will be inserted. It will also put a <label> around
        # the human-readable labels for a field.
        p = Person(auto_id='%s_id')
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""first_name_id"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""first_name_id"" required></td></tr>
<tr><th><label for=""last_name_id"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""last_name_id"" required></td></tr>
<tr><th><label for=""birthday_id"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""birthday_id"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name_id"">First name:</label>
<input type=""text"" name=""first_name"" id=""first_name_id"" required></li>
<li><label for=""last_name_id"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name_id"" required></li>
<li><label for=""birthday_id"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday_id"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p><label for=""first_name_id"">First name:</label>
<input type=""text"" name=""first_name"" id=""first_name_id"" required></p>
<p><label for=""last_name_id"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name_id"" required></p>
<p><label for=""birthday_id"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday_id"" required></p>""""""
        )

    def test_auto_id_true(self):
        # If auto_id is any True value whose str() does not contain '%s', the ""id""
        # attribute will be the name of the field.
        p = Person(auto_id=True)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""first_name"" required></li>
<li><label for=""last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name"" required></li>
<li><label for=""birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday"" required></li>""""""
        )

    def test_auto_id_false(self):
        # If auto_id is any False value, an ""id"" attribute won't be output unless it
        # was manually entered.
        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>""""""
        )

    def test_id_on_field(self):
        # In this example, auto_id is False, but the ""id"" attribute for the ""first_name""
        # field is given. Also note that field gets a <label>, while the others don't.
        p = PersonNew(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name_id"">First name:</label>
<input type=""text"" id=""first_name_id"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>""""""
        )

    def test_auto_id_on_form_and_field(self):
        # If the ""id"" attribute is specified in the Form and auto_id is True, the ""id""
        # attribute in the Form gets precedence.
        p = PersonNew(auto_id=True)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""first_name_id"">First name:</label>
<input type=""text"" id=""first_name_id"" name=""first_name"" required></li>
<li><label for=""last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""last_name"" required></li>
<li><label for=""birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""birthday"" required></li>""""""
        )

    def test_various_boolean_values(self):
        class SignupForm(Form):
            email = EmailField()
            get_spam = BooleanField()

        f = SignupForm(auto_id=False)
        self.assertHTMLEqual(str(f['email']), '<input type=""email"" name=""email"" required>')
        self.assertHTMLEqual(str(f['get_spam']), '<input type=""checkbox"" name=""get_spam"" required>')

        f = SignupForm({'email': 'test@example.com', 'get_spam': True}, auto_id=False)
        self.assertHTMLEqual(str(f['email']), '<input type=""email"" name=""email"" value=""test@example.com"" required>')
        self.assertHTMLEqual(
            str(f['get_spam']),
            '<input checked type=""checkbox"" name=""get_spam"" required>',
        )

        # 'True' or 'true' should be rendered without a value attribute
        f = SignupForm({'email': 'test@example.com', 'get_spam': 'True'}, auto_id=False)
        self.assertHTMLEqual(
            str(f['get_spam']),
            '<input checked type=""checkbox"" name=""get_spam"" required>',
        )

        f = SignupForm({'email': 'test@example.com', 'get_spam': 'true'}, auto_id=False)
        self.assertHTMLEqual(
            str(f['get_spam']), '<input checked type=""checkbox"" name=""get_spam"" required>')

        # A value of 'False' or 'false' should be rendered unchecked
        f = SignupForm({'email': 'test@example.com', 'get_spam': 'False'}, auto_id=False)
        self.assertHTMLEqual(str(f['get_spam']), '<input type=""checkbox"" name=""get_spam"" required>')

        f = SignupForm({'email': 'test@example.com', 'get_spam': 'false'}, auto_id=False)
        self.assertHTMLEqual(str(f['get_spam']), '<input type=""checkbox"" name=""get_spam"" required>')

        # A value of '0' should be interpreted as a True value (#16820)
        f = SignupForm({'email': 'test@example.com', 'get_spam': '0'})
        self.assertTrue(f.is_valid())
        self.assertTrue(f.cleaned_data.get('get_spam'))

    def test_widget_output(self):
        # Any Field can have a Widget class passed to its constructor:
        class ContactForm(Form):
            subject = CharField()
            message = CharField(widget=Textarea)

        f = ContactForm(auto_id=False)
        self.assertHTMLEqual(str(f['subject']), '<input type=""text"" name=""subject"" required>')
        self.assertHTMLEqual(str(f['message']), '<textarea name=""message"" rows=""10"" cols=""40"" required></textarea>')

        # as_textarea(), as_text() and as_hidden() are shortcuts for changing the output
        # widget type:
        self.assertHTMLEqual(
            f['subject'].as_textarea(),
            '<textarea name=""subject"" rows=""10"" cols=""40"" required></textarea>',
        )
        self.assertHTMLEqual(f['message'].as_text(), '<input type=""text"" name=""message"" required>')
        self.assertHTMLEqual(f['message'].as_hidden(), '<input type=""hidden"" name=""message"">')

        # The 'widget' parameter to a Field can also be an instance:
        class ContactForm(Form):
            subject = CharField()
            message = CharField(widget=Textarea(attrs={'rows': 80, 'cols': 20}))

        f = ContactForm(auto_id=False)
        self.assertHTMLEqual(str(f['message']), '<textarea name=""message"" rows=""80"" cols=""20"" required></textarea>')

        # Instance-level attrs are *not* carried over to as_textarea(), as_text() and
        # as_hidden():
        self.assertHTMLEqual(f['message'].as_text(), '<input type=""text"" name=""message"" required>')
        f = ContactForm({'subject': 'Hello', 'message': 'I love you.'}, auto_id=False)
        self.assertHTMLEqual(
            f['subject'].as_textarea(),
            '<textarea rows=""10"" cols=""40"" name=""subject"" required>Hello</textarea>'
        )
        self.assertHTMLEqual(
            f['message'].as_text(),
            '<input type=""text"" name=""message"" value=""I love you."" required>',
        )
        self.assertHTMLEqual(f['message'].as_hidden(), '<input type=""hidden"" name=""message"" value=""I love you."">')

    def test_forms_with_choices(self):
        # For a form with a <select>, use ChoiceField:
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")
        f = FrameworkForm({'name': 'Django', 'language': 'P'}, auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
<option value=""P"" selected>Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # A subtlety: If one of the choices' value is the empty string and the form is
        # unbound, then the <option> for the empty-string choice will get selected.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(choices=[('', '------'), ('P', 'Python'), ('J', 'Java')])

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"" required>
<option value="""" selected>------</option>
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # You can specify widget attributes in the Widget constructor.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')], widget=Select(attrs={'class': 'foo'}))

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")
        f = FrameworkForm({'name': 'Django', 'language': 'P'}, auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"" selected>Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # When passing a custom widget instance to ChoiceField, note that setting
        # 'choices' on the widget is meaningless. The widget will use the choices
        # defined on the Field, not the ones defined on the Widget.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField(
                choices=[('P', 'Python'), ('J', 'Java')],
                widget=Select(choices=[('R', 'Ruby'), ('P', 'Perl')], attrs={'class': 'foo'}),
            )

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")
        f = FrameworkForm({'name': 'Django', 'language': 'P'}, auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select class=""foo"" name=""language"">
<option value=""P"" selected>Python</option>
<option value=""J"">Java</option>
</select>"""""")

        # You can set a ChoiceField's choices after the fact.
        class FrameworkForm(Form):
            name = CharField()
            language = ChoiceField()

        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
</select>"""""")
        f.fields['language'].choices = [('P', 'Python'), ('J', 'Java')]
        self.assertHTMLEqual(str(f['language']), """"""<select name=""language"">
<option value=""P"">Python</option>
<option value=""J"">Java</option>
</select>"""""")

    def test_forms_with_radio(self):
        # Add widget=RadioSelect to use that widget with a ChoiceField.
        f = FrameworkForm(auto_id=False)
        self.assertHTMLEqual(str(f['language']), """"""<div>
<div><label><input type=""radio"" name=""language"" value=""P"" required> Python</label></div>
<div><label><input type=""radio"" name=""language"" value=""J"" required> Java</label></div>
</div>"""""")
        self.assertHTMLEqual(f.as_table(), """"""<tr><th>Name:</th><td><input type=""text"" name=""name"" required></td></tr>
<tr><th>Language:</th><td><div>
<div><label><input type=""radio"" name=""language"" value=""P"" required> Python</label></div>
<div><label><input type=""radio"" name=""language"" value=""J"" required> Java</label></div>
</div></td></tr>"""""")
        self.assertHTMLEqual(f.as_ul(), """"""<li>Name: <input type=""text"" name=""name"" required></li>
<li>Language: <div>
<div><label><input type=""radio"" name=""language"" value=""P"" required> Python</label></div>
<div><label><input type=""radio"" name=""language"" value=""J"" required> Java</label></div>
</div></li>"""""")

        # Regarding auto_id and <label>, RadioSelect is a special case. Each radio button
        # gets a distinct ID, formed by appending an underscore plus the button's
        # zero-based index.
        f = FrameworkForm(auto_id='id_%s')
        self.assertHTMLEqual(
            str(f['language']),
            """"""<div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div>""""""
        )

        # When RadioSelect is used with auto_id, and the whole form is printed
        # using either as_table() or as_ul(), the label for the RadioSelect
        # will **not** point to the ID of the *first* radio button to improve
        # accessibility for screen reader users.
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th><label for=""id_name"">Name:</label></th><td><input type=""text"" name=""name"" id=""id_name"" required></td></tr>
<tr><th><label>Language:</label></th><td><div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div></td></tr>""""""
        )
        self.assertHTMLEqual(
            f.as_ul(),
            """"""<li><label for=""id_name"">Name:</label> <input type=""text"" name=""name"" id=""id_name"" required></li>
<li><label>Language:</label> <div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div></li>""""""
        )
        self.assertHTMLEqual(
            f.as_p(),
            """"""<p><label for=""id_name"">Name:</label> <input type=""text"" name=""name"" id=""id_name"" required></p>
<p><label>Language:</label> <div id=""id_language"">
<div><label for=""id_language_0""><input type=""radio"" id=""id_language_0"" value=""P"" name=""language"" required>
Python</label></div>
<div><label for=""id_language_1""><input type=""radio"" id=""id_language_1"" value=""J"" name=""language"" required>
Java</label></div>
</div></p>""""""
        )

    def test_form_with_iterable_boundfield(self):
        class BeatleForm(Form):
            name = ChoiceField(
                choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],
                widget=RadioSelect,
            )

        f = BeatleForm(auto_id=False)
        self.assertHTMLEqual(
            '\n'.join(str(bf) for bf in f['name']),
            """"""<label><input type=""radio"" name=""name"" value=""john"" required> John</label>
<label><input type=""radio"" name=""name"" value=""paul"" required> Paul</label>
<label><input type=""radio"" name=""name"" value=""george"" required> George</label>
<label><input type=""radio"" name=""name"" value=""ringo"" required> Ringo</label>""""""
        )
        self.assertHTMLEqual(
            '\n'.join('<div>%s</div>' % bf for bf in f['name']),
            """"""<div><label><input type=""radio"" name=""name"" value=""john"" required> John</label></div>
<div><label><input type=""radio"" name=""name"" value=""paul"" required> Paul</label></div>
<div><label><input type=""radio"" name=""name"" value=""george"" required> George</label></div>
<div><label><input type=""radio"" name=""name"" value=""ringo"" required> Ringo</label></div>""""""
        )

    def test_form_with_iterable_boundfield_id(self):
        class BeatleForm(Form):
            name = ChoiceField(
                choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],
                widget=RadioSelect,
            )
        fields = list(BeatleForm()['name'])
        self.assertEqual(len(fields), 4)

        self.assertEqual(fields[0].id_for_label, 'id_name_0')
        self.assertEqual(fields[0].choice_label, 'John')
        self.assertHTMLEqual(
            fields[0].tag(),
            '<input type=""radio"" name=""name"" value=""john"" id=""id_name_0"" required>'
        )
        self.assertHTMLEqual(
            str(fields[0]),
            '<label for=""id_name_0""><input type=""radio"" name=""name"" '
            'value=""john"" id=""id_name_0"" required> John</label>'
        )

        self.assertEqual(fields[1].id_for_label, 'id_name_1')
        self.assertEqual(fields[1].choice_label, 'Paul')
        self.assertHTMLEqual(
            fields[1].tag(),
            '<input type=""radio"" name=""name"" value=""paul"" id=""id_name_1"" required>'
        )
        self.assertHTMLEqual(
            str(fields[1]),
            '<label for=""id_name_1""><input type=""radio"" name=""name"" '
            'value=""paul"" id=""id_name_1"" required> Paul</label>'
        )

    def test_iterable_boundfield_select(self):
        class BeatleForm(Form):
            name = ChoiceField(choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')])
        fields = list(BeatleForm(auto_id=False)['name'])
        self.assertEqual(len(fields), 4)

        self.assertEqual(fields[0].id_for_label, None)
        self.assertEqual(fields[0].choice_label, 'John')
        self.assertHTMLEqual(fields[0].tag(), '<option value=""john"">John</option>')
        self.assertHTMLEqual(str(fields[0]), '<option value=""john"">John</option>')

    def test_form_with_noniterable_boundfield(self):
        # You can iterate over any BoundField, not just those with widget=RadioSelect.
        class BeatleForm(Form):
            name = CharField()

        f = BeatleForm(auto_id=False)
        self.assertHTMLEqual('\n'.join(str(bf) for bf in f['name']), '<input type=""text"" name=""name"" required>')

    def test_boundfield_slice(self):
        class BeatleForm(Form):
            name = ChoiceField(
                choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],
                widget=RadioSelect,
            )

        f = BeatleForm()
        bf = f['name']
        self.assertEqual(
            [str(item) for item in bf[1:]],
            [str(bf[1]), str(bf[2]), str(bf[3])],
        )

    def test_boundfield_invalid_index(self):
        class TestForm(Form):
            name = ChoiceField(choices=[])

        field = TestForm()['name']
        msg = 'BoundField indices must be integers or slices, not str.'
        with self.assertRaisesMessage(TypeError, msg):
            field['foo']

    def test_boundfield_bool(self):
        """"""BoundField without any choices (subwidgets) evaluates to True.""""""
        class TestForm(Form):
            name = ChoiceField(choices=[])

        self.assertIs(bool(TestForm()['name']), True)

    def test_forms_with_multiple_choice(self):
        # MultipleChoiceField is a special case, as its data is required to be a list:
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField()

        f = SongForm(auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<select multiple name=""composers"" required>
</select>"""""")

        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')])

        f = SongForm(auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<select multiple name=""composers"" required>
<option value=""J"">John Lennon</option>
<option value=""P"">Paul McCartney</option>
</select>"""""")
        f = SongForm({'name': 'Yesterday', 'composers': ['P']}, auto_id=False)
        self.assertHTMLEqual(str(f['name']), '<input type=""text"" name=""name"" value=""Yesterday"" required>')
        self.assertHTMLEqual(str(f['composers']), """"""<select multiple name=""composers"" required>
<option value=""J"">John Lennon</option>
<option value=""P"" selected>Paul McCartney</option>
</select>"""""")

    def test_form_with_disabled_fields(self):
        class PersonForm(Form):
            name = CharField()
            birthday = DateField(disabled=True)

        class PersonFormFieldInitial(Form):
            name = CharField()
            birthday = DateField(disabled=True, initial=datetime.date(1974, 8, 16))

        # Disabled fields are generally not transmitted by user agents.
        # The value from the form's initial data is used.
        f1 = PersonForm({'name': 'John Doe'}, initial={'birthday': datetime.date(1974, 8, 16)})
        f2 = PersonFormFieldInitial({'name': 'John Doe'})
        for form in (f1, f2):
            self.assertTrue(form.is_valid())
            self.assertEqual(
                form.cleaned_data,
                {'birthday': datetime.date(1974, 8, 16), 'name': 'John Doe'}
            )

        # Values provided in the form's data are ignored.
        data = {'name': 'John Doe', 'birthday': '1984-11-10'}
        f1 = PersonForm(data, initial={'birthday': datetime.date(1974, 8, 16)})
        f2 = PersonFormFieldInitial(data)
        for form in (f1, f2):
            self.assertTrue(form.is_valid())
            self.assertEqual(
                form.cleaned_data,
                {'birthday': datetime.date(1974, 8, 16), 'name': 'John Doe'}
            )

        # Initial data remains present on invalid forms.
        data = {}
        f1 = PersonForm(data, initial={'birthday': datetime.date(1974, 8, 16)})
        f2 = PersonFormFieldInitial(data)
        for form in (f1, f2):
            self.assertFalse(form.is_valid())
            self.assertEqual(form['birthday'].value(), datetime.date(1974, 8, 16))

    def test_hidden_data(self):
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')])

        # MultipleChoiceField rendered as_hidden() is a special case. Because it can
        # have multiple values, its as_hidden() renders multiple <input type=""hidden"">
        # tags.
        f = SongForm({'name': 'Yesterday', 'composers': ['P']}, auto_id=False)
        self.assertHTMLEqual(f['composers'].as_hidden(), '<input type=""hidden"" name=""composers"" value=""P"">')
        f = SongForm({'name': 'From Me To You', 'composers': ['P', 'J']}, auto_id=False)
        self.assertHTMLEqual(f['composers'].as_hidden(), """"""<input type=""hidden"" name=""composers"" value=""P"">
<input type=""hidden"" name=""composers"" value=""J"">"""""")

        # DateTimeField rendered as_hidden() is special too
        class MessageForm(Form):
            when = SplitDateTimeField()

        f = MessageForm({'when_0': '1992-01-01', 'when_1': '01:01'})
        self.assertTrue(f.is_valid())
        self.assertHTMLEqual(
            str(f['when']),
            '<input type=""text"" name=""when_0"" value=""1992-01-01"" id=""id_when_0"" required>'
            '<input type=""text"" name=""when_1"" value=""01:01"" id=""id_when_1"" required>'
        )
        self.assertHTMLEqual(
            f['when'].as_hidden(),
            '<input type=""hidden"" name=""when_0"" value=""1992-01-01"" id=""id_when_0"">'
            '<input type=""hidden"" name=""when_1"" value=""01:01"" id=""id_when_1"">'
        )

    def test_multiple_choice_checkbox(self):
        # MultipleChoiceField can also be used with the CheckboxSelectMultiple widget.
        f = SongForm(auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<div>
<div><label><input type=""checkbox"" name=""composers"" value=""J""> John Lennon</label></div>
<div><label><input type=""checkbox"" name=""composers"" value=""P""> Paul McCartney</label></div>
</div>"""""")
        f = SongForm({'composers': ['J']}, auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<div>
<div><label><input checked type=""checkbox"" name=""composers"" value=""J""> John Lennon</label></div>
<div><label><input type=""checkbox"" name=""composers"" value=""P""> Paul McCartney</label></div>
</div>"""""")
        f = SongForm({'composers': ['J', 'P']}, auto_id=False)
        self.assertHTMLEqual(str(f['composers']), """"""<div>
<div><label><input checked type=""checkbox"" name=""composers"" value=""J""> John Lennon</label></div>
<div><label><input checked type=""checkbox"" name=""composers"" value=""P""> Paul McCartney</label></div>
</div>"""""")

    def test_checkbox_auto_id(self):
        # Regarding auto_id, CheckboxSelectMultiple is a special case. Each checkbox
        # gets a distinct ID, formed by appending an underscore plus the checkbox's
        # zero-based index.
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=CheckboxSelectMultiple,
            )

        f = SongForm(auto_id='%s_id')
        self.assertHTMLEqual(
            str(f['composers']),
            """"""<div id=""composers_id"">
<div><label for=""composers_id_0"">
<input type=""checkbox"" name=""composers"" value=""J"" id=""composers_id_0""> John Lennon</label></div>
<div><label for=""composers_id_1"">
<input type=""checkbox"" name=""composers"" value=""P"" id=""composers_id_1""> Paul McCartney</label></div>
</div>""""""
        )

    def test_multiple_choice_list_data(self):
        # Data for a MultipleChoiceField should be a list. QueryDict and
        # MultiValueDict conveniently work with this.
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=CheckboxSelectMultiple,
            )

        data = {'name': 'Yesterday', 'composers': ['J', 'P']}
        f = SongForm(data)
        self.assertEqual(f.errors, {})

        data = QueryDict('name=Yesterday&composers=J&composers=P')
        f = SongForm(data)
        self.assertEqual(f.errors, {})

        data = MultiValueDict({'name': ['Yesterday'], 'composers': ['J', 'P']})
        f = SongForm(data)
        self.assertEqual(f.errors, {})

        # SelectMultiple uses ducktyping so that MultiValueDictLike.getlist()
        # is called.
        f = SongForm(MultiValueDictLike({'name': 'Yesterday', 'composers': 'J'}))
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J'])

    def test_multiple_hidden(self):
        class SongForm(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=CheckboxSelectMultiple,
            )

        # The MultipleHiddenInput widget renders multiple values as hidden fields.
        class SongFormHidden(Form):
            name = CharField()
            composers = MultipleChoiceField(
                choices=[('J', 'John Lennon'), ('P', 'Paul McCartney')],
                widget=MultipleHiddenInput,
            )

        f = SongFormHidden(MultiValueDict({'name': ['Yesterday'], 'composers': ['J', 'P']}), auto_id=False)
        self.assertHTMLEqual(
            f.as_ul(),
            """"""<li>Name: <input type=""text"" name=""name"" value=""Yesterday"" required>
<input type=""hidden"" name=""composers"" value=""J"">
<input type=""hidden"" name=""composers"" value=""P""></li>""""""
        )

        # When using CheckboxSelectMultiple, the framework expects a list of input and
        # returns a list of input.
        f = SongForm({'name': 'Yesterday'}, auto_id=False)
        self.assertEqual(f.errors['composers'], ['This field is required.'])
        f = SongForm({'name': 'Yesterday', 'composers': ['J']}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J'])
        self.assertEqual(f.cleaned_data['name'], 'Yesterday')
        f = SongForm({'name': 'Yesterday', 'composers': ['J', 'P']}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J', 'P'])
        self.assertEqual(f.cleaned_data['name'], 'Yesterday')

        # MultipleHiddenInput uses ducktyping so that
        # MultiValueDictLike.getlist() is called.
        f = SongForm(MultiValueDictLike({'name': 'Yesterday', 'composers': 'J'}))
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['composers'], ['J'])

    def test_escaping(self):
        # Validation errors are HTML-escaped when output as HTML.
        class EscapingForm(Form):
            special_name = CharField(label=""<em>Special</em> Field"")
            special_safe_name = CharField(label=mark_safe(""<em>Special</em> Field""))

            def clean_special_name(self):
                raise ValidationError(""Something's wrong with '%s'"" % self.cleaned_data['special_name'])

            def clean_special_safe_name(self):
                raise ValidationError(
                    mark_safe(""'<b>%s</b>' is a safe string"" % self.cleaned_data['special_safe_name'])
                )

        f = EscapingForm({
            'special_name':
            ""Nothing to escape"",
            'special_safe_name': ""Nothing to escape"",
        }, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td>
<ul class=""errorlist""><li>Something&#x27;s wrong with &#x27;Nothing to escape&#x27;</li></ul>
<input type=""text"" name=""special_name"" value=""Nothing to escape"" required></td></tr>
<tr><th><em>Special</em> Field:</th><td>
<ul class=""errorlist""><li>'<b>Nothing to escape</b>' is a safe string</li></ul>
<input type=""text"" name=""special_safe_name"" value=""Nothing to escape"" required></td></tr>""""""
        )
        f = EscapingForm({
            'special_name': ""Should escape < & > and <script>alert('xss')</script>"",
            'special_safe_name': ""<i>Do not escape</i>""
        }, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th>&lt;em&gt;Special&lt;/em&gt; Field:</th><td>
<ul class=""errorlist""><li>Something&#x27;s wrong with &#x27;Should escape &lt; &amp; &gt; and
&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&#x27;</li></ul>
<input type=""text"" name=""special_name""
value=""Should escape &lt; &amp; &gt; and &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;"" required></td></tr>
<tr><th><em>Special</em> Field:</th><td>
<ul class=""errorlist""><li>'<b><i>Do not escape</i></b>' is a safe string</li></ul>
<input type=""text"" name=""special_safe_name"" value=""&lt;i&gt;Do not escape&lt;/i&gt;"" required></td></tr>""""""
        )

    def test_validating_multiple_fields(self):
        # There are a couple of ways to do multiple-field validation. If you want the
        # validation message to be associated with a particular field, implement the
        # clean_XXX() method on the Form, where XXX is the field name. As in
        # Field.clean(), the clean_XXX() method should return the cleaned value. In the
        # clean_XXX() method, you have access to self.cleaned_data, which is a dictionary
        # of all the data that has been cleaned *so far*, in order by the fields,
        # including the current field (e.g., the field XXX if you're in clean_XXX()).
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password1 = CharField(widget=PasswordInput)
            password2 = CharField(widget=PasswordInput)

            def clean_password2(self):
                if (self.cleaned_data.get('password1') and self.cleaned_data.get('password2') and
                        self.cleaned_data['password1'] != self.cleaned_data['password2']):
                    raise ValidationError('Please make sure your passwords match.')

                return self.cleaned_data['password2']

        f = UserRegistration(auto_id=False)
        self.assertEqual(f.errors, {})
        f = UserRegistration({}, auto_id=False)
        self.assertEqual(f.errors['username'], ['This field is required.'])
        self.assertEqual(f.errors['password1'], ['This field is required.'])
        self.assertEqual(f.errors['password2'], ['This field is required.'])
        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'bar'}, auto_id=False)
        self.assertEqual(f.errors['password2'], ['Please make sure your passwords match.'])
        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'foo'}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['username'], 'adrian')
        self.assertEqual(f.cleaned_data['password1'], 'foo')
        self.assertEqual(f.cleaned_data['password2'], 'foo')

        # Another way of doing multiple-field validation is by implementing the
        # Form's clean() method. Usually ValidationError raised by that method
        # will not be associated with a particular field and will have a
        # special-case association with the field named '__all__'. It's
        # possible to associate the errors to particular field with the
        # Form.add_error() method or by passing a dictionary that maps each
        # field to one or more errors.
        #
        # Note that in Form.clean(), you have access to self.cleaned_data, a
        # dictionary of all the fields/values that have *not* raised a
        # ValidationError. Also note Form.clean() is required to return a
        # dictionary of all clean data.
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password1 = CharField(widget=PasswordInput)
            password2 = CharField(widget=PasswordInput)

            def clean(self):
                # Test raising a ValidationError as NON_FIELD_ERRORS.
                if (self.cleaned_data.get('password1') and self.cleaned_data.get('password2') and
                        self.cleaned_data['password1'] != self.cleaned_data['password2']):
                    raise ValidationError('Please make sure your passwords match.')

                # Test raising ValidationError that targets multiple fields.
                errors = {}
                if self.cleaned_data.get('password1') == 'FORBIDDEN_VALUE':
                    errors['password1'] = 'Forbidden value.'
                if self.cleaned_data.get('password2') == 'FORBIDDEN_VALUE':
                    errors['password2'] = ['Forbidden value.']
                if errors:
                    raise ValidationError(errors)

                # Test Form.add_error()
                if self.cleaned_data.get('password1') == 'FORBIDDEN_VALUE2':
                    self.add_error(None, 'Non-field error 1.')
                    self.add_error('password1', 'Forbidden value 2.')
                if self.cleaned_data.get('password2') == 'FORBIDDEN_VALUE2':
                    self.add_error('password2', 'Forbidden value 2.')
                    raise ValidationError('Non-field error 2.')

                return self.cleaned_data

        f = UserRegistration(auto_id=False)
        self.assertEqual(f.errors, {})

        f = UserRegistration({}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><th>Username:</th><td>
<ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""username"" maxlength=""10"" required></td></tr>
<tr><th>Password1:</th><td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""password"" name=""password1"" required></td></tr>
<tr><th>Password2:</th><td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""password"" name=""password2"" required></td></tr>""""""
        )
        self.assertEqual(f.errors['username'], ['This field is required.'])
        self.assertEqual(f.errors['password1'], ['This field is required.'])
        self.assertEqual(f.errors['password2'], ['This field is required.'])

        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'bar'}, auto_id=False)
        self.assertEqual(f.errors['__all__'], ['Please make sure your passwords match.'])
        self.assertHTMLEqual(
            f.as_table(),
            """"""<tr><td colspan=""2"">
<ul class=""errorlist nonfield""><li>Please make sure your passwords match.</li></ul></td></tr>
<tr><th>Username:</th><td><input type=""text"" name=""username"" value=""adrian"" maxlength=""10"" required></td></tr>
<tr><th>Password1:</th><td><input type=""password"" name=""password1"" required></td></tr>
<tr><th>Password2:</th><td><input type=""password"" name=""password2"" required></td></tr>""""""
        )
        self.assertHTMLEqual(
            f.as_ul(),
            """"""<li><ul class=""errorlist nonfield"">
<li>Please make sure your passwords match.</li></ul></li>
<li>Username: <input type=""text"" name=""username"" value=""adrian"" maxlength=""10"" required></li>
<li>Password1: <input type=""password"" name=""password1"" required></li>
<li>Password2: <input type=""password"" name=""password2"" required></li>""""""
        )

        f = UserRegistration({'username': 'adrian', 'password1': 'foo', 'password2': 'foo'}, auto_id=False)
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['username'], 'adrian')
        self.assertEqual(f.cleaned_data['password1'], 'foo')
        self.assertEqual(f.cleaned_data['password2'], 'foo')

        f = UserRegistration({
            'username': 'adrian',
            'password1': 'FORBIDDEN_VALUE',
            'password2': 'FORBIDDEN_VALUE',
        }, auto_id=False)
        self.assertEqual(f.errors['password1'], ['Forbidden value.'])
        self.assertEqual(f.errors['password2'], ['Forbidden value.'])

        f = UserRegistration({
            'username': 'adrian',
            'password1': 'FORBIDDEN_VALUE2',
            'password2': 'FORBIDDEN_VALUE2',
        }, auto_id=False)
        self.assertEqual(f.errors['__all__'], ['Non-field error 1.', 'Non-field error 2.'])
        self.assertEqual(f.errors['password1'], ['Forbidden value 2.'])
        self.assertEqual(f.errors['password2'], ['Forbidden value 2.'])

        with self.assertRaisesMessage(ValueError, ""has no field named""):
            f.add_error('missing_field', 'Some error.')

    def test_update_error_dict(self):
        class CodeForm(Form):
            code = CharField(max_length=10)

            def clean(self):
                try:
                    raise ValidationError({'code': [ValidationError('Code error 1.')]})
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError({'code': [ValidationError('Code error 2.')]})
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError({'code': forms.ErrorList(['Code error 3.'])})
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError('Non-field error 1.')
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                try:
                    raise ValidationError([ValidationError('Non-field error 2.')])
                except ValidationError as e:
                    self._errors = e.update_error_dict(self._errors)

                # The newly added list of errors is an instance of ErrorList.
                for field, error_list in self._errors.items():
                    if not isinstance(error_list, self.error_class):
                        self._errors[field] = self.error_class(error_list)

        form = CodeForm({'code': 'hello'})
        # Trigger validation.
        self.assertFalse(form.is_valid())

        # update_error_dict didn't lose track of the ErrorDict type.
        self.assertIsInstance(form._errors, forms.ErrorDict)

        self.assertEqual(dict(form.errors), {
            'code': ['Code error 1.', 'Code error 2.', 'Code error 3.'],
            NON_FIELD_ERRORS: ['Non-field error 1.', 'Non-field error 2.'],
        })

    def test_has_error(self):
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password1 = CharField(widget=PasswordInput, min_length=5)
            password2 = CharField(widget=PasswordInput)

            def clean(self):
                if (self.cleaned_data.get('password1') and self.cleaned_data.get('password2') and
                        self.cleaned_data['password1'] != self.cleaned_data['password2']):
                    raise ValidationError(
                        'Please make sure your passwords match.',
                        code='password_mismatch',
                    )

        f = UserRegistration(data={})
        self.assertTrue(f.has_error('password1'))
        self.assertTrue(f.has_error('password1', 'required'))
        self.assertFalse(f.has_error('password1', 'anything'))

        f = UserRegistration(data={'password1': 'Hi', 'password2': 'Hi'})
        self.assertTrue(f.has_error('password1'))
        self.assertTrue(f.has_error('password1', 'min_length'))
        self.assertFalse(f.has_error('password1', 'anything'))
        self.assertFalse(f.has_error('password2'))
        self.assertFalse(f.has_error('password2', 'anything'))

        f = UserRegistration(data={'password1': 'Bonjour', 'password2': 'Hello'})
        self.assertFalse(f.has_error('password1'))
        self.assertFalse(f.has_error('password1', 'required'))
        self.assertTrue(f.has_error(NON_FIELD_ERRORS))
        self.assertTrue(f.has_error(NON_FIELD_ERRORS, 'password_mismatch'))
        self.assertFalse(f.has_error(NON_FIELD_ERRORS, 'anything'))

    def test_html_output_with_hidden_input_field_errors(self):
        class TestForm(Form):
            hidden_input = CharField(widget=HiddenInput)

            def clean(self):
                self.add_error(None, 'Form error')

        f = TestForm(data={})
        error_dict = {
            'hidden_input': ['This field is required.'],
            '__all__': ['Form error'],
        }
        self.assertEqual(f.errors, error_dict)
        f.as_table()
        self.assertEqual(f.errors, error_dict)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><td colspan=""2""><ul class=""errorlist nonfield""><li>Form error</li>'
            '<li>(Hidden field hidden_input) This field is required.</li></ul>'
            '<input type=""hidden"" name=""hidden_input"" id=""id_hidden_input""></td></tr>',
        )
        self.assertHTMLEqual(
            f.as_ul(),
            '<li><ul class=""errorlist nonfield""><li>Form error</li>'
            '<li>(Hidden field hidden_input) This field is required.</li></ul>'
            '<input type=""hidden"" name=""hidden_input"" id=""id_hidden_input""></li>',
        )
        self.assertHTMLEqual(
            f.as_p(),
            '<ul class=""errorlist nonfield""><li>Form error</li>'
            '<li>(Hidden field hidden_input) This field is required.</li></ul>'
            '<p><input type=""hidden"" name=""hidden_input"" id=""id_hidden_input""></p>',
        )

    def test_dynamic_construction(self):
        # It's possible to construct a Form dynamically by adding to the self.fields
        # dictionary in __init__(). Don't forget to call Form.__init__() within the
        # subclass' __init__().
        class Person(Form):
            first_name = CharField()
            last_name = CharField()

            def __init__(self, *args, **kwargs):
                super().__init__(*args, **kwargs)
                self.fields['birthday'] = DateField()

        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th>First name:</th><td><input type=""text"" name=""first_name"" required></td></tr>
<tr><th>Last name:</th><td><input type=""text"" name=""last_name"" required></td></tr>
<tr><th>Birthday:</th><td><input type=""text"" name=""birthday"" required></td></tr>""""""
        )

        # Instances of a dynamic Form do not persist fields from one Form instance to
        # the next.
        class MyForm(Form):
            def __init__(self, data=None, auto_id=False, field_list=[]):
                Form.__init__(self, data, auto_id=auto_id)

                for field in field_list:
                    self.fields[field[0]] = field[1]

        field_list = [('field1', CharField()), ('field2', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Field1:</th><td><input type=""text"" name=""field1"" required></td></tr>
<tr><th>Field2:</th><td><input type=""text"" name=""field2"" required></td></tr>""""""
        )
        field_list = [('field3', CharField()), ('field4', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Field3:</th><td><input type=""text"" name=""field3"" required></td></tr>
<tr><th>Field4:</th><td><input type=""text"" name=""field4"" required></td></tr>""""""
        )

        class MyForm(Form):
            default_field_1 = CharField()
            default_field_2 = CharField()

            def __init__(self, data=None, auto_id=False, field_list=[]):
                Form.__init__(self, data, auto_id=auto_id)

                for field in field_list:
                    self.fields[field[0]] = field[1]

        field_list = [('field1', CharField()), ('field2', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Default field 1:</th><td><input type=""text"" name=""default_field_1"" required></td></tr>
<tr><th>Default field 2:</th><td><input type=""text"" name=""default_field_2"" required></td></tr>
<tr><th>Field1:</th><td><input type=""text"" name=""field1"" required></td></tr>
<tr><th>Field2:</th><td><input type=""text"" name=""field2"" required></td></tr>""""""
        )
        field_list = [('field3', CharField()), ('field4', CharField())]
        my_form = MyForm(field_list=field_list)
        self.assertHTMLEqual(
            my_form.as_table(),
            """"""<tr><th>Default field 1:</th><td><input type=""text"" name=""default_field_1"" required></td></tr>
<tr><th>Default field 2:</th><td><input type=""text"" name=""default_field_2"" required></td></tr>
<tr><th>Field3:</th><td><input type=""text"" name=""field3"" required></td></tr>
<tr><th>Field4:</th><td><input type=""text"" name=""field4"" required></td></tr>""""""
        )

        # Similarly, changes to field attributes do not persist from one Form instance
        # to the next.
        class Person(Form):
            first_name = CharField(required=False)
            last_name = CharField(required=False)

            def __init__(self, names_required=False, *args, **kwargs):
                super().__init__(*args, **kwargs)

                if names_required:
                    self.fields['first_name'].required = True
                    self.fields['first_name'].widget.attrs['class'] = 'required'
                    self.fields['last_name'].required = True
                    self.fields['last_name'].widget.attrs['class'] = 'required'

        f = Person(names_required=False)
        self.assertEqual(f['first_name'].field.required, f['last_name'].field.required, (False, False))
        self.assertEqual(f['first_name'].field.widget.attrs, f['last_name'].field.widget.attrs, ({}, {}))
        f = Person(names_required=True)
        self.assertEqual(f['first_name'].field.required, f['last_name'].field.required, (True, True))
        self.assertEqual(
            f['first_name'].field.widget.attrs,
            f['last_name'].field.widget.attrs,
            ({'class': 'reuired'}, {'class': 'required'})
        )
        f = Person(names_required=False)
        self.assertEqual(f['first_name'].field.required, f['last_name'].field.required, (False, False))
        self.assertEqual(f['first_name'].field.widget.attrs, f['last_name'].field.widget.attrs, ({}, {}))

        class Person(Form):
            first_name = CharField(max_length=30)
            last_name = CharField(max_length=30)

            def __init__(self, name_max_length=None, *args, **kwargs):
                super().__init__(*args, **kwargs)

                if name_max_length:
                    self.fields['first_name'].max_length = name_max_length
                    self.fields['last_name'].max_length = name_max_length

        f = Person(name_max_length=None)
        self.assertEqual(f['first_name'].field.max_length, f['last_name'].field.max_length, (30, 30))
        f = Person(name_max_length=20)
        self.assertEqual(f['first_name'].field.max_length, f['last_name'].field.max_length, (20, 20))
        f = Person(name_max_length=None)
        self.assertEqual(f['first_name'].field.max_length, f['last_name'].field.max_length, (30, 30))

        # Similarly, choices do not persist from one Form instance to the next.
        # Refs #15127.
        class Person(Form):
            first_name = CharField(required=False)
            last_name = CharField(required=False)
            gender = ChoiceField(choices=(('f', 'Female'), ('m', 'Male')))

            def __init__(self, allow_unspec_gender=False, *args, **kwargs):
                super().__init__(*args, **kwargs)

                if allow_unspec_gender:
                    self.fields['gender'].choices += (('u', 'Unspecified'),)

        f = Person()
        self.assertEqual(f['gender'].field.choices, [('f', 'Female'), ('m', 'Male')])
        f = Person(allow_unspec_gender=True)
        self.assertEqual(f['gender'].field.choices, [('f', 'Female'), ('m', 'Male'), ('u', 'Unspecified')])
        f = Person()
        self.assertEqual(f['gender'].field.choices, [('f', 'Female'), ('m', 'Male')])

    def test_validators_independence(self):
        """"""
        The list of form field validators can be modified without polluting
        other forms.
        """"""
        class MyForm(Form):
            myfield = CharField(max_length=25)

        f1 = MyForm()
        f2 = MyForm()

        f1.fields['myfield'].validators[0] = MaxValueValidator(12)
        self.assertNotEqual(f1.fields['myfield'].validators[0], f2.fields['myfield'].validators[0])

    def test_hidden_widget(self):
        # HiddenInput widgets are displayed differently in the as_table(), as_ul())
        # and as_p() output of a Form -- their verbose names are not displayed, and a
        # separate row is not displayed. They're displayed in the last row of the
        # form, directly after that row's form element.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            hidden_text = CharField(widget=HiddenInput)
            birthday = DateField()

        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th>First name:</th><td><input type=""text"" name=""first_name"" required></td></tr>
<tr><th>Last name:</th><td><input type=""text"" name=""last_name"" required></td></tr>
<tr><th>Birthday:</th>
<td><input type=""text"" name=""birthday"" required><input type=""hidden"" name=""hidden_text""></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required><input type=""hidden"" name=""hidden_text""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(), """"""<p>First name: <input type=""text"" name=""first_name"" required></p>
<p>Last name: <input type=""text"" name=""last_name"" required></p>
<p>Birthday: <input type=""text"" name=""birthday"" required><input type=""hidden"" name=""hidden_text""></p>""""""
        )

        # With auto_id set, a HiddenInput still gets an ID, but it doesn't get a label.
        p = Person(auto_id='id_%s')
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></td></tr>
<tr><th><label for=""id_birthday"">Birthday:</label></th><td>
<input type=""text"" name=""birthday"" id=""id_birthday"" required>
<input type=""hidden"" name=""hidden_text"" id=""id_hidden_text""></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></li>
<li><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></li>
<li><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required>
<input type=""hidden"" name=""hidden_text"" id=""id_hidden_text""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p><label for=""id_first_name"">First name:</label>
<input type=""text"" name=""first_name"" id=""id_first_name"" required></p>
<p><label for=""id_last_name"">Last name:</label>
<input type=""text"" name=""last_name"" id=""id_last_name"" required></p>
<p><label for=""id_birthday"">Birthday:</label>
<input type=""text"" name=""birthday"" id=""id_birthday"" required>
<input type=""hidden"" name=""hidden_text"" id=""id_hidden_text""></p>""""""
        )

        # If a field with a HiddenInput has errors, the as_table() and as_ul() output
        # will include the error message(s) with the text ""(Hidden field [fieldname]) ""
        # prepended. This message is displayed at the top of the output, regardless of
        # its field's order in the form.
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><td colspan=""2"">
<ul class=""errorlist nonfield""><li>(Hidden field hidden_text) This field is required.</li></ul></td></tr>
<tr><th>First name:</th><td><input type=""text"" name=""first_name"" value=""John"" required></td></tr>
<tr><th>Last name:</th><td><input type=""text"" name=""last_name"" value=""Lennon"" required></td></tr>
<tr><th>Birthday:</th><td><input type=""text"" name=""birthday"" value=""1940-10-9"" required>
<input type=""hidden"" name=""hidden_text""></td></tr>""""""
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist nonfield""><li>(Hidden field hidden_text) This field is required.</li></ul></li>
<li>First name: <input type=""text"" name=""first_name"" value=""John"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" value=""Lennon"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" value=""1940-10-9"" required>
<input type=""hidden"" name=""hidden_text""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist nonfield""><li>(Hidden field hidden_text) This field is required.</li></ul>
<p>First name: <input type=""text"" name=""first_name"" value=""John"" required></p>
<p>Last name: <input type=""text"" name=""last_name"" value=""Lennon"" required></p>
<p>Birthday: <input type=""text"" name=""birthday"" value=""1940-10-9"" required>
<input type=""hidden"" name=""hidden_text""></p>""""""
        )

        # A corner case: It's possible for a form to have only HiddenInputs.
        class TestForm(Form):
            foo = CharField(widget=HiddenInput)
            bar = CharField(widget=HiddenInput)

        p = TestForm(auto_id=False)
        self.assertHTMLEqual(p.as_table(), '<input type=""hidden"" name=""foo""><input type=""hidden"" name=""bar"">')
        self.assertHTMLEqual(p.as_ul(), '<input type=""hidden"" name=""foo""><input type=""hidden"" name=""bar"">')
        self.assertHTMLEqual(p.as_p(), '<input type=""hidden"" name=""foo""><input type=""hidden"" name=""bar"">')

    def test_field_order(self):
        # A Form's fields are displayed in the same order in which they were defined.
        class TestForm(Form):
            field1 = CharField()
            field2 = CharField()
            field3 = CharField()
            field4 = CharField()
            field5 = CharField()
            field6 = CharField()
            field7 = CharField()
            field8 = CharField()
            field9 = CharField()
            field10 = CharField()
            field11 = CharField()
            field12 = CharField()
            field13 = CharField()
            field14 = CharField()

        p = TestForm(auto_id=False)
        self.assertHTMLEqual(p.as_table(), """"""<tr><th>Field1:</th><td><input type=""text"" name=""field1"" required></td></tr>
<tr><th>Field2:</th><td><input type=""text"" name=""field2"" required></td></tr>
<tr><th>Field3:</th><td><input type=""text"" name=""field3"" required></td></tr>
<tr><th>Field4:</th><td><input type=""text"" name=""field4"" required></td></tr>
<tr><th>Field5:</th><td><input type=""text"" name=""field5"" required></td></tr>
<tr><th>Field6:</th><td><input type=""text"" name=""field6"" required></td></tr>
<tr><th>Field7:</th><td><input type=""text"" name=""field7"" required></td></tr>
<tr><th>Field8:</th><td><input type=""text"" name=""field8"" required></td></tr>
<tr><th>Field9:</th><td><input type=""text"" name=""field9"" required></td></tr>
<tr><th>Field10:</th><td><input type=""text"" name=""field10"" required></td></tr>
<tr><th>Field11:</th><td><input type=""text"" name=""field11"" required></td></tr>
<tr><th>Field12:</th><td><input type=""text"" name=""field12"" required></td></tr>
<tr><th>Field13:</th><td><input type=""text"" name=""field13"" required></td></tr>
<tr><th>Field14:</th><td><input type=""text"" name=""field14"" required></td></tr>"""""")

    def test_explicit_field_order(self):
        class TestFormParent(Form):
            field1 = CharField()
            field2 = CharField()
            field4 = CharField()
            field5 = CharField()
            field6 = CharField()
            field_order = ['field6', 'field5', 'field4', 'field2', 'field1']

        class TestForm(TestFormParent):
            field3 = CharField()
            field_order = ['field2', 'field4', 'field3', 'field5', 'field6']

        class TestFormRemove(TestForm):
            field1 = None

        class TestFormMissing(TestForm):
            field_order = ['field2', 'field4', 'field3', 'field5', 'field6', 'field1']
            field1 = None

        class TestFormInit(TestFormParent):
            field3 = CharField()
            field_order = None

            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.order_fields(field_order=TestForm.field_order)

        p = TestFormParent()
        self.assertEqual(list(p.fields), TestFormParent.field_order)
        p = TestFormRemove()
        self.assertEqual(list(p.fields), TestForm.field_order)
        p = TestFormMissing()
        self.assertEqual(list(p.fields), TestForm.field_order)
        p = TestForm()
        self.assertEqual(list(p.fields), TestFormMissing.field_order)
        p = TestFormInit()
        order = [*TestForm.field_order, 'field1']
        self.assertEqual(list(p.fields), order)
        TestForm.field_order = ['unknown']
        p = TestForm()
        self.assertEqual(list(p.fields), ['field1', 'field2', 'field4', 'field5', 'field6', 'field3'])

    def test_form_html_attributes(self):
        # Some Field classes have an effect on the HTML attributes of their associated
        # Widget. If you set max_length in a CharField and its associated widget is
        # either a TextInput or PasswordInput, then the widget's rendered HTML will
        # include the ""maxlength"" attribute.
        class UserRegistration(Form):
            username = CharField(max_length=10)                   # uses TextInput by default
            password = CharField(max_length=10, widget=PasswordInput)
            realname = CharField(max_length=10, widget=TextInput)  # redundantly define widget, just to test
            address = CharField()                                 # no max_length defined here

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" maxlength=""10"" required></li>
<li>Realname: <input type=""text"" name=""realname"" maxlength=""10"" required></li>
<li>Address: <input type=""text"" name=""address"" required></li>""""""
        )

        # If you specify a custom ""attrs"" that includes the ""maxlength"" attribute,
        # the Field's max_length attribute will override whatever ""maxlength"" you specify
        # in ""attrs"".
        class UserRegistration(Form):
            username = CharField(max_length=10, widget=TextInput(attrs={'maxlength': 20}))
            password = CharField(max_length=10, widget=PasswordInput)

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" maxlength=""10"" required></li>""""""
        )

    def test_specifying_labels(self):
        # You can specify the label for a field by using the 'label' argument to a Field
        # class. If you don't specify 'label', Django will use the field name with
        # underscores converted to spaces, and the initial letter capitalized.
        class UserRegistration(Form):
            username = CharField(max_length=10, label='Your username')
            password1 = CharField(widget=PasswordInput)
            password2 = CharField(widget=PasswordInput, label='Contraseña (de nuevo)')

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Your username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password1: <input type=""password"" name=""password1"" required></li>
<li>Contraseña (de nuevo): <input type=""password"" name=""password2"" required></li>""""""
        )

        # Labels for as_* methods will only end in a colon if they don't end in other
        # punctuation already.
        class Questions(Form):
            q1 = CharField(label='The first question')
            q2 = CharField(label='What is your name?')
            q3 = CharField(label='The answer to life is:')
            q4 = CharField(label='Answer this question!')
            q5 = CharField(label='The last question. Period.')

        self.assertHTMLEqual(
            Questions(auto_id=False).as_p(),
            """"""<p>The first question: <input type=""text"" name=""q1"" required></p>
<p>What is your name? <input type=""text"" name=""q2"" required></p>
<p>The answer to life is: <input type=""text"" name=""q3"" required></p>
<p>Answer this question! <input type=""text"" name=""q4"" required></p>
<p>The last question. Period. <input type=""text"" name=""q5"" required></p>""""""
        )
        self.assertHTMLEqual(
            Questions().as_p(),
            """"""<p><label for=""id_q1"">The first question:</label> <input type=""text"" name=""q1"" id=""id_q1"" required></p>
<p><label for=""id_q2"">What is your name?</label> <input type=""text"" name=""q2"" id=""id_q2"" required></p>
<p><label for=""id_q3"">The answer to life is:</label> <input type=""text"" name=""q3"" id=""id_q3"" required></p>
<p><label for=""id_q4"">Answer this question!</label> <input type=""text"" name=""q4"" id=""id_q4"" required></p>
<p><label for=""id_q5"">The last question. Period.</label> <input type=""text"" name=""q5"" id=""id_q5"" required></p>""""""
        )

        # If a label is set to the empty string for a field, that field won't get a label.
        class UserRegistration(Form):
            username = CharField(max_length=10, label='')
            password = CharField(widget=PasswordInput)

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(p.as_ul(), """"""<li> <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>"""""")
        p = UserRegistration(auto_id='id_%s')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li> <input id=""id_username"" type=""text"" name=""username"" maxlength=""10"" required></li>
<li><label for=""id_password"">Password:</label>
<input type=""password"" name=""password"" id=""id_password"" required></li>""""""
        )

        # If label is None, Django will auto-create the label from the field name. This
        # is default behavior.
        class UserRegistration(Form):
            username = CharField(max_length=10, label=None)
            password = CharField(widget=PasswordInput)

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration(auto_id='id_%s')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_username"">Username:</label>
<input id=""id_username"" type=""text"" name=""username"" maxlength=""10"" required></li>
<li><label for=""id_password"">Password:</label>
<input type=""password"" name=""password"" id=""id_password"" required></li>""""""
        )

    def test_label_suffix(self):
        # You can specify the 'label_suffix' argument to a Form class to modify the
        # punctuation symbol used at the end of a label.  By default, the colon (:) is
        # used, and is only appended to the label if the label doesn't already end with a
        # punctuation symbol: ., !, ? or :.  If you specify a different suffix, it will
        # be appended regardless of the last character of the label.
        class FavoriteForm(Form):
            color = CharField(label='Favorite color?')
            animal = CharField(label='Favorite animal')
            answer = CharField(label='Secret answer', label_suffix=' =')

        f = FavoriteForm(auto_id=False)
        self.assertHTMLEqual(f.as_ul(), """"""<li>Favorite color? <input type=""text"" name=""color"" required></li>
<li>Favorite animal: <input type=""text"" name=""animal"" required></li>
<li>Secret answer = <input type=""text"" name=""answer"" required></li>"""""")

        f = FavoriteForm(auto_id=False, label_suffix='?')
        self.assertHTMLEqual(f.as_ul(), """"""<li>Favorite color? <input type=""text"" name=""color"" required></li>
<li>Favorite animal? <input type=""text"" name=""animal"" required></li>
<li>Secret answer = <input type=""text"" name=""answer"" required></li>"""""")

        f = FavoriteForm(auto_id=False, label_suffix='')
        self.assertHTMLEqual(f.as_ul(), """"""<li>Favorite color? <input type=""text"" name=""color"" required></li>
<li>Favorite animal <input type=""text"" name=""animal"" required></li>
<li>Secret answer = <input type=""text"" name=""answer"" required></li>"""""")

        f = FavoriteForm(auto_id=False, label_suffix='\u2192')
        self.assertHTMLEqual(
            f.as_ul(),
            '<li>Favorite color? <input type=""text"" name=""color"" required></li>\n'
            '<li>Favorite animal\u2192 <input type=""text"" name=""animal"" required></li>\n'
            '<li>Secret answer = <input type=""text"" name=""answer"" required></li>'
        )

    def test_initial_data(self):
        # You can specify initial data for a field by using the 'initial' argument to a
        # Field class. This initial data is displayed when a Form is rendered with *no*
        # data. It is not displayed when a Form is rendered with any data (including an
        # empty dictionary). Also, the initial value is *not* used if data for a
        # particular required field isn't provided.
        class UserRegistration(Form):
            username = CharField(max_length=10, initial='django')
            password = CharField(widget=PasswordInput)

        # Here, we're not submitting any data, so the initial value will be displayed.)
        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # Here, we're submitting data, so the initial value will *not* be displayed.
        p = UserRegistration({}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': ''}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': 'foo'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # An 'initial' value is *not* used as a fallback if data is not provided. In this
        # example, we don't provide a value for 'username', and the form raises a
        # validation error rather than using the initial value for 'username'.
        p = UserRegistration({'password': 'secret'})
        self.assertEqual(p.errors['username'], ['This field is required.'])
        self.assertFalse(p.is_valid())

    def test_dynamic_initial_data(self):
        # The previous technique dealt with ""hard-coded"" initial data, but it's also
        # possible to specify initial data after you've already created the Form class
        # (i.e., at runtime). Use the 'initial' parameter to the Form constructor. This
        # should be a dictionary containing initial values for one or more fields in the
        # form, keyed by field name.
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

        # Here, we're not submitting any data, so the initial value will be displayed.)
        p = UserRegistration(initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration(initial={'username': 'stephane'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""stephane"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # The 'initial' parameter is meaningless if you pass data.
        p = UserRegistration({}, initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': ''}, initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )
        p = UserRegistration({'username': 'foo'}, initial={'username': 'django'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(), """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>""""""
        )

        # A dynamic 'initial' value is *not* used as a fallback if data is not provided.
        # In this example, we don't provide a value for 'username', and the form raises a
        # validation error rather than using the initial value for 'username'.
        p = UserRegistration({'password': 'secret'}, initial={'username': 'django'})
        self.assertEqual(p.errors['username'], ['This field is required.'])
        self.assertFalse(p.is_valid())

        # If a Form defines 'initial' *and* 'initial' is passed as a parameter to Form(),
        # then the latter will get precedence.
        class UserRegistration(Form):
            username = CharField(max_length=10, initial='django')
            password = CharField(widget=PasswordInput)

        p = UserRegistration(initial={'username': 'babik'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""babik"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>""""""
        )

    def test_callable_initial_data(self):
        # The previous technique dealt with raw values as initial data, but it's also
        # possible to specify callable data.
        class UserRegistration(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)
            options = MultipleChoiceField(choices=[('f', 'foo'), ('b', 'bar'), ('w', 'whiz')])

        # We need to define functions that get called later.)
        def initial_django():
            return 'django'

        def initial_stephane():
            return 'stephane'

        def initial_options():
            return ['f', 'b']

        def initial_other_options():
            return ['b', 'w']

        # Here, we're not submitting any data, so the initial value will be displayed.)
        p = UserRegistration(initial={'username': initial_django, 'options': initial_options}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"" selected>foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )

        # The 'initial' parameter is meaningless if you pass data.
        p = UserRegistration({}, initial={'username': initial_django, 'options': initial_options}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Options: <select multiple name=""options"" required>
<option value=""f"">foo</option>
<option value=""b"">bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )
        p = UserRegistration({'username': ''}, initial={'username': initial_django}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist""><li>This field is required.</li></ul>
            Username: <input type=""text"" name=""username"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Options: <select multiple name=""options"" required>
<option value=""f"">foo</option>
<option value=""b"">bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )
        p = UserRegistration(
            {'username': 'foo', 'options': ['f', 'b']}, initial={'username': initial_django}, auto_id=False
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"" selected>foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )

        # A callable 'initial' value is *not* used as a fallback if data is not provided.
        # In this example, we don't provide a value for 'username', and the form raises a
        # validation error rather than using the initial value for 'username'.
        p = UserRegistration({'password': 'secret'}, initial={'username': initial_django, 'options': initial_options})
        self.assertEqual(p.errors['username'], ['This field is required.'])
        self.assertFalse(p.is_valid())

        # If a Form defines 'initial' *and* 'initial' is passed as a parameter to Form(),
        # then the latter will get precedence.
        class UserRegistration(Form):
            username = CharField(max_length=10, initial=initial_django)
            password = CharField(widget=PasswordInput)
            options = MultipleChoiceField(
                choices=[('f', 'foo'), ('b', 'bar'), ('w', 'whiz')],
                initial=initial_other_options,
            )

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""django"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"">foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"" selected>whiz</option>
</select></li>""""""
        )
        p = UserRegistration(initial={'username': initial_stephane, 'options': initial_options}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""stephane"" maxlength=""10"" required></li>
<li>Password: <input type=""password"" name=""password"" required></li>
<li>Options: <select multiple name=""options"" required>
<option value=""f"" selected>foo</option>
<option value=""b"" selected>bar</option>
<option value=""w"">whiz</option>
</select></li>""""""
        )

    def test_get_initial_for_field(self):
        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)

        class PersonForm(Form):
            first_name = CharField(initial='John')
            last_name = CharField(initial='Doe')
            age = IntegerField()
            occupation = CharField(initial=lambda: 'Unknown')
            dt_fixed = DateTimeField(initial=now)
            dt_callable = DateTimeField(initial=lambda: now)

        form = PersonForm(initial={'first_name': 'Jane'})
        cases = [
            ('age', None),
            ('last_name', 'Doe'),
            # Form.initial overrides Field.initial.
            ('first_name', 'Jane'),
            # Callables are evaluated.
            ('occupation', 'Unknown'),
            # Microseconds are removed from datetimes.
            ('dt_fixed', datetime.datetime(2006, 10, 25, 14, 30, 45)),
            ('dt_callable', datetime.datetime(2006, 10, 25, 14, 30, 45)),
        ]
        for field_name, expected in cases:
            with self.subTest(field_name=field_name):
                field = form.fields[field_name]
                actual = form.get_initial_for_field(field, field_name)
                self.assertEqual(actual, expected)

    def test_changed_data(self):
        class Person(Form):
            first_name = CharField(initial='Hans')
            last_name = CharField(initial='Greatel')
            birthday = DateField(initial=datetime.date(1974, 8, 16))

        p = Person(data={'first_name': 'Hans', 'last_name': 'Scrmbl', 'birthday': '1974-08-16'})
        self.assertTrue(p.is_valid())
        self.assertNotIn('first_name', p.changed_data)
        self.assertIn('last_name', p.changed_data)
        self.assertNotIn('birthday', p.changed_data)

        # A field raising ValidationError is always in changed_data
        class PedanticField(forms.Field):
            def to_python(self, value):
                raise ValidationError('Whatever')

        class Person2(Person):
            pedantic = PedanticField(initial='whatever', show_hidden_initial=True)

        p = Person2(data={
            'first_name': 'Hans', 'last_name': 'Scrmbl', 'birthday': '1974-08-16',
            'initial-pedantic': 'whatever',
        })
        self.assertFalse(p.is_valid())
        self.assertIn('pedantic', p.changed_data)

    def test_boundfield_values(self):
        # It's possible to get to the value which would be used for rendering
        # the widget for a field by using the BoundField's value method.

        class UserRegistration(Form):
            username = CharField(max_length=10, initial='djangonaut')
            password = CharField(widget=PasswordInput)

        unbound = UserRegistration()
        bound = UserRegistration({'password': 'foo'})
        self.assertIsNone(bound['username'].value())
        self.assertEqual(unbound['username'].value(), 'djangonaut')
        self.assertEqual(bound['password'].value(), 'foo')
        self.assertIsNone(unbound['password'].value())

    def test_boundfield_initial_called_once(self):
        """"""
        Multiple calls to BoundField().value() in an unbound form should return
        the same result each time (#24391).
        """"""
        class MyForm(Form):
            name = CharField(max_length=10, initial=uuid.uuid4)

        form = MyForm()
        name = form['name']
        self.assertEqual(name.value(), name.value())
        # BoundField is also cached
        self.assertIs(form['name'], name)

    def test_boundfield_value_disabled_callable_initial(self):
        class PersonForm(Form):
            name = CharField(initial=lambda: 'John Doe', disabled=True)

        # Without form data.
        form = PersonForm()
        self.assertEqual(form['name'].value(), 'John Doe')

        # With form data. As the field is disabled, the value should not be
        # affected by the form data.
        form = PersonForm({})
        self.assertEqual(form['name'].value(), 'John Doe')

    def test_custom_boundfield(self):
        class CustomField(CharField):
            def get_bound_field(self, form, name):
                return (form, name)

        class SampleForm(Form):
            name = CustomField()

        f = SampleForm()
        self.assertEqual(f['name'], (f, 'name'))

    def test_initial_datetime_values(self):
        now = datetime.datetime.now()
        # Nix microseconds (since they should be ignored). #22502
        now_no_ms = now.replace(microsecond=0)
        if now == now_no_ms:
            now = now.replace(microsecond=1)

        def delayed_now():
            return now

        def delayed_now_time():
            return now.time()

        class HiddenInputWithoutMicrosec(HiddenInput):
            supports_microseconds = False

        class TextInputWithoutMicrosec(TextInput):
            supports_microseconds = False

        class DateTimeForm(Form):
            # Test a non-callable.
            fixed = DateTimeField(initial=now)
            auto_timestamp = DateTimeField(initial=delayed_now)
            auto_time_only = TimeField(initial=delayed_now_time)
            supports_microseconds = DateTimeField(initial=delayed_now, widget=TextInput)
            hi_default_microsec = DateTimeField(initial=delayed_now, widget=HiddenInput)
            hi_without_microsec = DateTimeField(initial=delayed_now, widget=HiddenInputWithoutMicrosec)
            ti_without_microsec = DateTimeField(initial=delayed_now, widget=TextInputWithoutMicrosec)

        unbound = DateTimeForm()
        cases = [
            ('fixed', now_no_ms),
            ('auto_timestamp', now_no_ms),
            ('auto_time_only', now_no_ms.time()),
            ('supports_microseconds', now),
            ('hi_default_microsec', now),
            ('hi_without_microsec', now_no_ms),
            ('ti_without_microsec', now_no_ms),
        ]
        for field_name, expected in cases:
            with self.subTest(field_name=field_name):
                actual = unbound[field_name].value()
                self.assertEqual(actual, expected)
                # Also check get_initial_for_field().
                field = unbound.fields[field_name]
                actual = unbound.get_initial_for_field(field, field_name)
                self.assertEqual(actual, expected)

    def get_datetime_form_with_callable_initial(self, disabled, microseconds=0):
        class FakeTime:
            def __init__(self):
                self.elapsed_seconds = 0

            def now(self):
                self.elapsed_seconds += 1
                return datetime.datetime(
                    2006, 10, 25, 14, 30, 45 + self.elapsed_seconds,
                    microseconds,
                )

        class DateTimeForm(forms.Form):
            dt = DateTimeField(initial=FakeTime().now, disabled=disabled)

        return DateTimeForm({})

    def test_datetime_clean_disabled_callable_initial_microseconds(self):
        """"""
        Cleaning a form with a disabled DateTimeField and callable initial
        removes microseconds.
        """"""
        form = self.get_datetime_form_with_callable_initial(
            disabled=True, microseconds=123456,
        )
        self.assertEqual(form.errors, {})
        self.assertEqual(form.cleaned_data, {
            'dt': datetime.datetime(2006, 10, 25, 14, 30, 46),
        })

    def test_datetime_clean_disabled_callable_initial_bound_field(self):
        """"""
        The cleaned value for a form with a disabled DateTimeField and callable
        initial matches the bound field's cached initial value.
        """"""
        form = self.get_datetime_form_with_callable_initial(disabled=True)
        self.assertEqual(form.errors, {})
        cleaned = form.cleaned_data['dt']
        self.assertEqual(cleaned, datetime.datetime(2006, 10, 25, 14, 30, 46))
        bf = form['dt']
        self.assertEqual(cleaned, bf.initial)

    def test_datetime_changed_data_callable_with_microseconds(self):
        class DateTimeForm(forms.Form):
            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)

        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})
        self.assertEqual(form.changed_data, [])

    def test_help_text(self):
        # You can specify descriptive text for a field by using the 'help_text' argument)
        class UserRegistration(Form):
            username = CharField(max_length=10, help_text='e.g., user@example.com')
            password = CharField(widget=PasswordInput, help_text='Wählen Sie mit Bedacht.')

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></li>
<li>Password: <input type=""password"" name=""password"" required>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<p>Username: <input type=""text"" name=""username"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></p>
<p>Password: <input type=""password"" name=""password"" required>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></p>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><th>Username:</th><td><input type=""text"" name=""username"" maxlength=""10"" required><br>
<span class=""helptext"">e.g., user@example.com</span></td></tr>
<tr><th>Password:</th><td><input type=""password"" name=""password"" required><br>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></td></tr>""""""
        )

        # The help text is displayed whether or not data is provided for the form.
        p = UserRegistration({'username': 'foo'}, auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" value=""foo"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></li>
<li><ul class=""errorlist""><li>This field is required.</li></ul>
Password: <input type=""password"" name=""password"" required>
<span class=""helptext"">Wählen Sie mit Bedacht.</span></li>""""""
        )

        # help_text is not displayed for hidden fields. It can be used for documentation
        # purposes, though.
        class UserRegistration(Form):
            username = CharField(max_length=10, help_text='e.g., user@example.com')
            password = CharField(widget=PasswordInput)
            next = CharField(widget=HiddenInput, initial='/', help_text='Redirect destination')

        p = UserRegistration(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>Username: <input type=""text"" name=""username"" maxlength=""10"" required>
<span class=""helptext"">e.g., user@example.com</span></li>
<li>Password: <input type=""password"" name=""password"" required>
<input type=""hidden"" name=""next"" value=""/""></li>""""""
        )

    def test_subclassing_forms(self):
        # You can subclass a Form to add fields. The resulting form subclass will have
        # all of the fields of the parent Form, plus whichever fields you define in the
        # subclass.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

        class Musician(Person):
            instrument = CharField()

        p = Person(auto_id=False)
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>""""""
        )
        m = Musician(auto_id=False)
        self.assertHTMLEqual(
            m.as_ul(),
            """"""<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>
<li>Instrument: <input type=""text"" name=""instrument"" required></li>""""""
        )

        # Yes, you can subclass multiple forms. The fields are added in the order in
        # which the parent classes are listed.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

        class Instrument(Form):
            instrument = CharField()

        class Beatle(Person, Instrument):
            haircut_type = CharField()

        b = Beatle(auto_id=False)
        self.assertHTMLEqual(b.as_ul(), """"""<li>Instrument: <input type=""text"" name=""instrument"" required></li>
<li>First name: <input type=""text"" name=""first_name"" required></li>
<li>Last name: <input type=""text"" name=""last_name"" required></li>
<li>Birthday: <input type=""text"" name=""birthday"" required></li>
<li>Haircut type: <input type=""text"" name=""haircut_type"" required></li>"""""")

    def test_forms_with_prefixes(self):
        # Sometimes it's necessary to have multiple forms display on the same HTML page,
        # or multiple copies of the same form. We can accomplish this with form prefixes.
        # Pass the keyword argument 'prefix' to the Form constructor to use this feature.
        # This value will be prepended to each HTML form field name. One way to think
        # about this is ""namespaces for HTML forms"". Notice that in the data argument,
        # each field's key has the prefix, in this case 'person1', prepended to the
        # actual field name.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

        data = {
            'person1-first_name': 'John',
            'person1-last_name': 'Lennon',
            'person1-birthday': '1940-10-9'
        }
        p = Person(data, prefix='person1')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_person1-first_name"">First name:</label>
<input type=""text"" name=""person1-first_name"" value=""John"" id=""id_person1-first_name"" required></li>
<li><label for=""id_person1-last_name"">Last name:</label>
<input type=""text"" name=""person1-last_name"" value=""Lennon"" id=""id_person1-last_name"" required></li>
<li><label for=""id_person1-birthday"">Birthday:</label>
<input type=""text"" name=""person1-birthday"" value=""1940-10-9"" id=""id_person1-birthday"" required></li>""""""
        )
        self.assertHTMLEqual(
            str(p['first_name']),
            '<input type=""text"" name=""person1-first_name"" value=""John"" id=""id_person1-first_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['last_name']),
            '<input type=""text"" name=""person1-last_name"" value=""Lennon"" id=""id_person1-last_name"" required>'
        )
        self.assertHTMLEqual(
            str(p['birthday']),
            '<input type=""text"" name=""person1-birthday"" value=""1940-10-9"" id=""id_person1-birthday"" required>'
        )
        self.assertEqual(p.errors, {})
        self.assertTrue(p.is_valid())
        self.assertEqual(p.cleaned_data['first_name'], 'John')
        self.assertEqual(p.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p.cleaned_data['birthday'], datetime.date(1940, 10, 9))

        # Let's try submitting some bad data to make sure form.errors and field.errors
        # work as expected.
        data = {
            'person1-first_name': '',
            'person1-last_name': '',
            'person1-birthday': ''
        }
        p = Person(data, prefix='person1')
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['last_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])
        self.assertEqual(p['first_name'].errors, ['This field is required.'])
        # Accessing a nonexistent field.
        with self.assertRaises(KeyError):
            p['person1-first_name'].errors

        # In this example, the data doesn't have a prefix, but the form requires it, so
        # the form doesn't ""see"" the fields.
        data = {
            'first_name': 'John',
            'last_name': 'Lennon',
            'birthday': '1940-10-9'
        }
        p = Person(data, prefix='person1')
        self.assertEqual(p.errors['first_name'], ['This field is required.'])
        self.assertEqual(p.errors['last_name'], ['This field is required.'])
        self.assertEqual(p.errors['birthday'], ['This field is required.'])

        # With prefixes, a single data dictionary can hold data for multiple instances
        # of the same form.
        data = {
            'person1-first_name': 'John',
            'person1-last_name': 'Lennon',
            'person1-birthday': '1940-10-9',
            'person2-first_name': 'Jim',
            'person2-last_name': 'Morrison',
            'person2-birthday': '1943-12-8'
        }
        p1 = Person(data, prefix='person1')
        self.assertTrue(p1.is_valid())
        self.assertEqual(p1.cleaned_data['first_name'], 'John')
        self.assertEqual(p1.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p1.cleaned_data['birthday'], datetime.date(1940, 10, 9))
        p2 = Person(data, prefix='person2')
        self.assertTrue(p2.is_valid())
        self.assertEqual(p2.cleaned_data['first_name'], 'Jim')
        self.assertEqual(p2.cleaned_data['last_name'], 'Morrison')
        self.assertEqual(p2.cleaned_data['birthday'], datetime.date(1943, 12, 8))

        # By default, forms append a hyphen between the prefix and the field name, but a
        # form can alter that behavior by implementing the add_prefix() method. This
        # method takes a field name and returns the prefixed field, according to
        # self.prefix.
        class Person(Form):
            first_name = CharField()
            last_name = CharField()
            birthday = DateField()

            def add_prefix(self, field_name):
                return '%s-prefix-%s' % (self.prefix, field_name) if self.prefix else field_name

        p = Person(prefix='foo')
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><label for=""id_foo-prefix-first_name"">First name:</label>
<input type=""text"" name=""foo-prefix-first_name"" id=""id_foo-prefix-first_name"" required></li>
<li><label for=""id_foo-prefix-last_name"">Last name:</label>
<input type=""text"" name=""foo-prefix-last_name"" id=""id_foo-prefix-last_name"" required></li>
<li><label for=""id_foo-prefix-birthday"">Birthday:</label>
<input type=""text"" name=""foo-prefix-birthday"" id=""id_foo-prefix-birthday"" required></li>""""""
        )
        data = {
            'foo-prefix-first_name': 'John',
            'foo-prefix-last_name': 'Lennon',
            'foo-prefix-birthday': '1940-10-9'
        }
        p = Person(data, prefix='foo')
        self.assertTrue(p.is_valid())
        self.assertEqual(p.cleaned_data['first_name'], 'John')
        self.assertEqual(p.cleaned_data['last_name'], 'Lennon')
        self.assertEqual(p.cleaned_data['birthday'], datetime.date(1940, 10, 9))

    def test_class_prefix(self):
        # Prefix can be also specified at the class level.
        class Person(Form):
            first_name = CharField()
            prefix = 'foo'

        p = Person()
        self.assertEqual(p.prefix, 'foo')

        p = Person(prefix='bar')
        self.assertEqual(p.prefix, 'bar')

    def test_forms_with_null_boolean(self):
        # NullBooleanField is a bit of a special case because its presentation (widget)
        # is different than its data. This is handled transparently, though.
        class Person(Form):
            name = CharField()
            is_cool = NullBooleanField()

        p = Person({'name': 'Joe'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': '1'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': '2'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"" selected>Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': '3'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"" selected>No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': True}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"" selected>Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': False}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"" selected>No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': 'unknown'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': 'true'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"" selected>Yes</option>
<option value=""false"">No</option>
</select>"""""")
        p = Person({'name': 'Joe', 'is_cool': 'false'}, auto_id=False)
        self.assertHTMLEqual(str(p['is_cool']), """"""<select name=""is_cool"">
<option value=""unknown"">Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"" selected>No</option>
</select>"""""")

    def test_forms_with_file_fields(self):
        # FileFields are a special case because they take their data from the request.FILES,
        # not request.POST.
        class FileForm(Form):
            file1 = FileField()

        f = FileForm(auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1"" required></td></tr>',
        )

        f = FileForm(data={}, files={}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<ul class=""errorlist""><li>This field is required.</li></ul>'
            '<input type=""file"" name=""file1"" required></td></tr>'
        )

        f = FileForm(data={}, files={'file1': SimpleUploadedFile('name', b'')}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<ul class=""errorlist""><li>The submitted file is empty.</li></ul>'
            '<input type=""file"" name=""file1"" required></td></tr>'
        )

        f = FileForm(data={}, files={'file1': 'something that is not a file'}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<ul class=""errorlist""><li>No file was submitted. Check the '
            'encoding type on the form.</li></ul>'
            '<input type=""file"" name=""file1"" required></td></tr>'
        )

        f = FileForm(data={}, files={'file1': SimpleUploadedFile('name', b'some content')}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1"" required></td></tr>',
        )
        self.assertTrue(f.is_valid())

        file1 = SimpleUploadedFile('我隻氣墊船裝滿晒鱔.txt', 'मेरी मँडराने वाली नाव सर्पमीनों से भरी ह'.encode())
        f = FileForm(data={}, files={'file1': file1}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1"" required></td></tr>',
        )

        # A required file field with initial data should not contain the
        # required HTML attribute. The file input is left blank by the user to
        # keep the existing, initial value.
        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1""></td></tr>',
        )

    def test_filefield_initial_callable(self):
        class FileForm(forms.Form):
            file1 = forms.FileField(initial=lambda: 'resume.txt')

        f = FileForm({})
        self.assertEqual(f.errors, {})
        self.assertEqual(f.cleaned_data['file1'], 'resume.txt')

    def test_filefield_with_fileinput_required(self):
        class FileForm(Form):
            file1 = forms.FileField(widget=FileInput)

        f = FileForm(auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td>'
            '<input type=""file"" name=""file1"" required></td></tr>',
        )
        # A required file field with initial data doesn't contain the required
        # HTML attribute. The file input is left blank by the user to keep the
        # existing, initial value.
        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><th>File1:</th><td><input type=""file"" name=""file1""></td></tr>',
        )

    def test_empty_permitted(self):
        # Sometimes (pretty much in formsets) we want to allow a form to pass validation
        # if it is completely empty. We can accomplish this by using the empty_permitted
        # argument to a form constructor.
        class SongForm(Form):
            artist = CharField()
            name = CharField()

        # First let's show what happens id empty_permitted=False (the default):
        data = {'artist': '', 'song': ''}
        form = SongForm(data, empty_permitted=False)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {'name': ['This field is required.'], 'artist': ['This field is required.']})
        self.assertEqual(form.cleaned_data, {})

        # Now let's show what happens when empty_permitted=True and the form is empty.
        form = SongForm(data, empty_permitted=True, use_required_attribute=False)
        self.assertTrue(form.is_valid())
        self.assertEqual(form.errors, {})
        self.assertEqual(form.cleaned_data, {})

        # But if we fill in data for one of the fields, the form is no longer empty and
        # the whole thing must pass validation.
        data = {'artist': 'The Doors', 'song': ''}
        form = SongForm(data, empty_permitted=False)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {'name': ['This field is required.']})
        self.assertEqual(form.cleaned_data, {'artist': 'The Doors'})

        # If a field is not given in the data then None is returned for its data. Lets
        # make sure that when checking for empty_permitted that None is treated
        # accordingly.
        data = {'artist': None, 'song': ''}
        form = SongForm(data, empty_permitted=True, use_required_attribute=False)
        self.assertTrue(form.is_valid())

        # However, we *really* need to be sure we are checking for None as any data in
        # initial that returns False on a boolean call needs to be treated literally.
        class PriceForm(Form):
            amount = FloatField()
            qty = IntegerField()

        data = {'amount': '0.0', 'qty': ''}
        form = PriceForm(data, initial={'amount': 0.0}, empty_permitted=True, use_required_attribute=False)
        self.assertTrue(form.is_valid())

    def test_empty_permitted_and_use_required_attribute(self):
        msg = (
            'The empty_permitted and use_required_attribute arguments may not '
            'both be True.'
        )
        with self.assertRaisesMessage(ValueError, msg):
            Person(empty_permitted=True, use_required_attribute=True)

    def test_extracting_hidden_and_visible(self):
        class SongForm(Form):
            token = CharField(widget=HiddenInput)
            artist = CharField()
            name = CharField()

        form = SongForm()
        self.assertEqual([f.name for f in form.hidden_fields()], ['token'])
        self.assertEqual([f.name for f in form.visible_fields()], ['artist', 'name'])

    def test_hidden_initial_gets_id(self):
        class MyForm(Form):
            field1 = CharField(max_length=50, show_hidden_initial=True)

        self.assertHTMLEqual(
            MyForm().as_table(),
            '<tr><th><label for=""id_field1"">Field1:</label></th>'
            '<td><input id=""id_field1"" type=""text"" name=""field1"" maxlength=""50"" required>'
            '<input type=""hidden"" name=""initial-field1"" id=""initial-id_field1""></td></tr>'
        )

    def test_error_html_required_html_classes(self):
        class Person(Form):
            name = CharField()
            is_cool = NullBooleanField()
            email = EmailField(required=False)
            age = IntegerField()

        p = Person({})
        p.error_css_class = 'error'
        p.required_css_class = 'required'

        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li class=""required error""><ul class=""errorlist""><li>This field is required.</li></ul>
<label class=""required"" for=""id_name"">Name:</label> <input type=""text"" name=""name"" id=""id_name"" required></li>
<li class=""required""><label class=""required"" for=""id_is_cool"">Is cool:</label>
<select name=""is_cool"" id=""id_is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select></li>
<li><label for=""id_email"">Email:</label> <input type=""email"" name=""email"" id=""id_email""></li>
<li class=""required error""><ul class=""errorlist""><li>This field is required.</li></ul>
<label class=""required"" for=""id_age"">Age:</label> <input type=""number"" name=""age"" id=""id_age"" required></li>""""""
        )

        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist""><li>This field is required.</li></ul>
<p class=""required error""><label class=""required"" for=""id_name"">Name:</label>
<input type=""text"" name=""name"" id=""id_name"" required></p>
<p class=""required""><label class=""required"" for=""id_is_cool"">Is cool:</label>
<select name=""is_cool"" id=""id_is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select></p>
<p><label for=""id_email"">Email:</label> <input type=""email"" name=""email"" id=""id_email""></p>
<ul class=""errorlist""><li>This field is required.</li></ul>
<p class=""required error""><label class=""required"" for=""id_age"">Age:</label>
<input type=""number"" name=""age"" id=""id_age"" required></p>""""""
        )

        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr class=""required error"">
<th><label class=""required"" for=""id_name"">Name:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""text"" name=""name"" id=""id_name"" required></td></tr>
<tr class=""required""><th><label class=""required"" for=""id_is_cool"">Is cool:</label></th>
<td><select name=""is_cool"" id=""id_is_cool"">
<option value=""unknown"" selected>Unknown</option>
<option value=""true"">Yes</option>
<option value=""false"">No</option>
</select></td></tr>
<tr><th><label for=""id_email"">Email:</label></th><td>
<input type=""email"" name=""email"" id=""id_email""></td></tr>
<tr class=""required error""><th><label class=""required"" for=""id_age"">Age:</label></th>
<td><ul class=""errorlist""><li>This field is required.</li></ul>
<input type=""number"" name=""age"" id=""id_age"" required></td></tr>""""""
        )

    def test_label_has_required_css_class(self):
        """"""
        required_css_class is added to label_tag() and legend_tag() of required
        fields.
        """"""
        class SomeForm(Form):
            required_css_class = 'required'
            field = CharField(max_length=10)
            field2 = IntegerField(required=False)

        f = SomeForm({'field': 'test'})
        self.assertHTMLEqual(f['field'].label_tag(), '<label for=""id_field"" class=""required"">Field:</label>')
        self.assertHTMLEqual(
            f['field'].legend_tag(),
            '<legend for=""id_field"" class=""required"">Field:</legend>',
        )
        self.assertHTMLEqual(
            f['field'].label_tag(attrs={'class': 'foo'}),
            '<label for=""id_field"" class=""foo required"">Field:</label>'
        )
        self.assertHTMLEqual(
            f['field'].legend_tag(attrs={'class': 'foo'}),
            '<legend for=""id_field"" class=""foo required"">Field:</legend>'
        )
        self.assertHTMLEqual(f['field2'].label_tag(), '<label for=""id_field2"">Field2:</label>')
        self.assertHTMLEqual(
            f['field2'].legend_tag(),
            '<legend for=""id_field2"">Field2:</legend>',
        )

    def test_label_split_datetime_not_displayed(self):
        class EventForm(Form):
            happened_at = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)

        form = EventForm()
        self.assertHTMLEqual(
            form.as_ul(),
            '<input type=""hidden"" name=""happened_at_0"" id=""id_happened_at_0"">'
            '<input type=""hidden"" name=""happened_at_1"" id=""id_happened_at_1"">'
        )

    def test_multivalue_field_validation(self):
        def bad_names(value):
            if value == 'bad value':
                raise ValidationError('bad value not allowed')

        class NameField(MultiValueField):
            def __init__(self, fields=(), *args, **kwargs):
                fields = (CharField(label='First name', max_length=10),
                          CharField(label='Last name', max_length=10))
                super().__init__(fields=fields, *args, **kwargs)

            def compress(self, data_list):
                return ' '.join(data_list)

        class NameForm(Form):
            name = NameField(validators=[bad_names])

        form = NameForm(data={'name': ['bad', 'value']})
        form.full_clean()
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {'name': ['bad value not allowed']})
        form = NameForm(data={'name': ['should be overly', 'long for the field names']})
        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors, {
                'name': [
                    'Ensure this value has at most 10 characters (it has 16).',
                    'Ensure this value has at most 10 characters (it has 24).',
                ],
            }
        )
        form = NameForm(data={'name': ['fname', 'lname']})
        self.assertTrue(form.is_valid())
        self.assertEqual(form.cleaned_data, {'name': 'fname lname'})

    def test_multivalue_deep_copy(self):
        """"""
        #19298 -- MultiValueField needs to override the default as it needs
        to deep-copy subfields:
        """"""
        class ChoicesField(MultiValueField):
            def __init__(self, fields=(), *args, **kwargs):
                fields = (
                    ChoiceField(label='Rank', choices=((1, 1), (2, 2))),
                    CharField(label='Name', max_length=10),
                )
                super().__init__(fields=fields, *args, **kwargs)

        field = ChoicesField()
        field2 = copy.deepcopy(field)
        self.assertIsInstance(field2, ChoicesField)
        self.assertIsNot(field2.fields, field.fields)
        self.assertIsNot(field2.fields[0].choices, field.fields[0].choices)

    def test_multivalue_initial_data(self):
        """"""
        #23674 -- invalid initial data should not break form.changed_data()
        """"""
        class DateAgeField(MultiValueField):
            def __init__(self, fields=(), *args, **kwargs):
                fields = (DateField(label=""Date""), IntegerField(label=""Age""))
                super().__init__(fields=fields, *args, **kwargs)

        class DateAgeForm(Form):
            date_age = DateAgeField()

        data = {""date_age"": [""1998-12-06"", 16]}
        form = DateAgeForm(data, initial={""date_age"": [""200-10-10"", 14]})
        self.assertTrue(form.has_changed())

    def test_multivalue_optional_subfields(self):
        class PhoneField(MultiValueField):
            def __init__(self, *args, **kwargs):
                fields = (
                    CharField(label='Country Code', validators=[
                        RegexValidator(r'^\+[0-9]{1,2}$', message='Enter a valid country code.')]),
                    CharField(label='Phone Number'),
                    CharField(label='Extension', error_messages={'incomplete': 'Enter an extension.'}),
                    CharField(label='Label', required=False, help_text='E.g. home, work.'),
                )
                super().__init__(fields, *args, **kwargs)

            def compress(self, data_list):
                if data_list:
                    return '%s.%s ext. %s (label: %s)' % tuple(data_list)
                return None

        # An empty value for any field will raise a `required` error on a
        # required `MultiValueField`.
        f = PhoneField()
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean('')
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(None)
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean([])
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(['+61'])
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(['+61', '287654321', '123'])
        self.assertEqual('+61.287654321 ext. 123 (label: Home)', f.clean(['+61', '287654321', '123', 'Home']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

        # Empty values for fields will NOT raise a `required` error on an
        # optional `MultiValueField`
        f = PhoneField(required=False)
        self.assertIsNone(f.clean(''))
        self.assertIsNone(f.clean(None))
        self.assertIsNone(f.clean([]))
        self.assertEqual('+61. ext.  (label: )', f.clean(['+61']))
        self.assertEqual('+61.287654321 ext. 123 (label: )', f.clean(['+61', '287654321', '123']))
        self.assertEqual('+61.287654321 ext. 123 (label: Home)', f.clean(['+61', '287654321', '123', 'Home']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

        # For a required `MultiValueField` with `require_all_fields=False`, a
        # `required` error will only be raised if all fields are empty. Fields
        # can individually be required or optional. An empty value for any
        # required field will raise an `incomplete` error.
        f = PhoneField(require_all_fields=False)
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean('')
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean(None)
        with self.assertRaisesMessage(ValidationError, ""'This field is required.'""):
            f.clean([])
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.'""):
            f.clean(['+61'])
        self.assertEqual('+61.287654321 ext. 123 (label: )', f.clean(['+61', '287654321', '123']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.', 'Enter an extension.'""):
            f.clean(['', '', '', 'Home'])
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

        # For an optional `MultiValueField` with `require_all_fields=False`, we
        # don't get any `required` error but we still get `incomplete` errors.
        f = PhoneField(required=False, require_all_fields=False)
        self.assertIsNone(f.clean(''))
        self.assertIsNone(f.clean(None))
        self.assertIsNone(f.clean([]))
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.'""):
            f.clean(['+61'])
        self.assertEqual('+61.287654321 ext. 123 (label: )', f.clean(['+61', '287654321', '123']))
        with self.assertRaisesMessage(ValidationError, ""'Enter a complete value.', 'Enter an extension.'""):
            f.clean(['', '', '', 'Home'])
        with self.assertRaisesMessage(ValidationError, ""'Enter a valid country code.'""):
            f.clean(['61', '287654321', '123', 'Home'])

    def test_multivalue_optional_subfields_rendering(self):
        class PhoneWidget(MultiWidget):
            def __init__(self, attrs=None):
                widgets = [TextInput(), TextInput()]
                super().__init__(widgets, attrs)

            def decompress(self, value):
                return [None, None]

        class PhoneField(MultiValueField):
            def __init__(self, *args, **kwargs):
                fields = [CharField(), CharField(required=False)]
                super().__init__(fields, *args, **kwargs)

        class PhoneForm(Form):
            phone1 = PhoneField(widget=PhoneWidget)
            phone2 = PhoneField(widget=PhoneWidget, required=False)
            phone3 = PhoneField(widget=PhoneWidget, require_all_fields=False)
            phone4 = PhoneField(
                widget=PhoneWidget, required=False, require_all_fields=False,
            )

        form = PhoneForm(auto_id=False)
        self.assertHTMLEqual(
            form.as_p(),
            """"""
            <p>Phone1:<input type=""text"" name=""phone1_0"" required><input type=""text"" name=""phone1_1"" required></p>
            <p>Phone2:<input type=""text"" name=""phone2_0""><input type=""text"" name=""phone2_1""></p>
            <p>Phone3:<input type=""text"" name=""phone3_0"" required><input type=""text"" name=""phone3_1""></p>
            <p>Phone4:<input type=""text"" name=""phone4_0""><input type=""text"" name=""phone4_1""></p>
            """""",
        )

    def test_custom_empty_values(self):
        """"""
        Form fields can customize what is considered as an empty value
        for themselves (#19997).
        """"""
        class CustomJSONField(CharField):
            empty_values = [None, '']

            def to_python(self, value):
                # Fake json.loads
                if value == '{}':
                    return {}
                return super().to_python(value)

        class JSONForm(forms.Form):
            json = CustomJSONField()

        form = JSONForm(data={'json': '{}'})
        form.full_clean()
        self.assertEqual(form.cleaned_data, {'json': {}})

    def test_boundfield_label_tag(self):
        class SomeForm(Form):
            field = CharField()
        boundfield = SomeForm()['field']

        testcases = [  # (args, kwargs, expected)
            # without anything: just print the <label>
            ((), {}, '<%(tag)s for=""id_field"">Field:</%(tag)s>'),

            # passing just one argument: overrides the field's label
            (('custom',), {}, '<%(tag)s for=""id_field"">custom:</%(tag)s>'),

            # the overridden label is escaped
            (('custom&',), {}, '<%(tag)s for=""id_field"">custom&amp;:</%(tag)s>'),
            ((mark_safe('custom&'),), {}, '<%(tag)s for=""id_field"">custom&:</%(tag)s>'),

            # Passing attrs to add extra attributes on the <label>
            (
                (),
                {'attrs': {'class': 'pretty'}},
                '<%(tag)s for=""id_field"" class=""pretty"">Field:</%(tag)s>',
            ),
        ]

        for args, kwargs, expected in testcases:
            with self.subTest(args=args, kwargs=kwargs):
                self.assertHTMLEqual(
                    boundfield.label_tag(*args, **kwargs),
                    expected % {'tag': 'label'},
                )
                self.assertHTMLEqual(
                    boundfield.legend_tag(*args, **kwargs),
                    expected % {'tag': 'legend'},
                )

    def test_boundfield_label_tag_no_id(self):
        """"""
        If a widget has no id, label_tag() and legend_tag() return the text
        with no surrounding <label>.
        """"""
        class SomeForm(Form):
            field = CharField()
        boundfield = SomeForm(auto_id='')['field']

        self.assertHTMLEqual(boundfield.label_tag(), 'Field:')
        self.assertHTMLEqual(boundfield.legend_tag(), 'Field:')
        self.assertHTMLEqual(boundfield.label_tag('Custom&'), 'Custom&amp;:')
        self.assertHTMLEqual(boundfield.legend_tag('Custom&'), 'Custom&amp;:')

    def test_boundfield_label_tag_custom_widget_id_for_label(self):
        class CustomIdForLabelTextInput(TextInput):
            def id_for_label(self, id):
                return 'custom_' + id

        class EmptyIdForLabelTextInput(TextInput):
            def id_for_label(self, id):
                return None

        class SomeForm(Form):
            custom = CharField(widget=CustomIdForLabelTextInput)
            empty = CharField(widget=EmptyIdForLabelTextInput)

        form = SomeForm()
        self.assertHTMLEqual(form['custom'].label_tag(), '<label for=""custom_id_custom"">Custom:</label>')
        self.assertHTMLEqual(
            form['custom'].legend_tag(),
            '<legend for=""custom_id_custom"">Custom:</legend>',
        )
        self.assertHTMLEqual(form['empty'].label_tag(), '<label>Empty:</label>')
        self.assertHTMLEqual(form['empty'].legend_tag(), '<legend>Empty:</legend>')

    def test_boundfield_empty_label(self):
        class SomeForm(Form):
            field = CharField(label='')
        boundfield = SomeForm()['field']

        self.assertHTMLEqual(boundfield.label_tag(), '<label for=""id_field""></label>')
        self.assertHTMLEqual(
            boundfield.legend_tag(),
            '<legend for=""id_field""></legend>',
        )

    def test_boundfield_id_for_label(self):
        class SomeForm(Form):
            field = CharField(label='')

        self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')

    def test_boundfield_id_for_label_override_by_attrs(self):
        """"""
        If an id is provided in `Widget.attrs`, it overrides the generated ID,
        unless it is `None`.
        """"""
        class SomeForm(Form):
            field = CharField(widget=TextInput(attrs={'id': 'myCustomID'}))
            field_none = CharField(widget=TextInput(attrs={'id': None}))

        form = SomeForm()
        self.assertEqual(form['field'].id_for_label, 'myCustomID')
        self.assertEqual(form['field_none'].id_for_label, 'id_field_none')

    def test_boundfield_subwidget_id_for_label(self):
        """"""
        If auto_id is provided when initializing the form, the generated ID in
        subwidgets must reflect that prefix.
        """"""
        class SomeForm(Form):
            field = MultipleChoiceField(
                choices=[('a', 'A'), ('b', 'B')],
                widget=CheckboxSelectMultiple,
            )

        form = SomeForm(auto_id='prefix_%s')
        subwidgets = form['field'].subwidgets
        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')
        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')

    def test_boundfield_widget_type(self):
        class SomeForm(Form):
            first_name = CharField()
            birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)

        f = SomeForm()
        self.assertEqual(f['first_name'].widget_type, 'text')
        self.assertEqual(f['birthday'].widget_type, 'splithiddendatetime')

    def test_boundfield_css_classes(self):
        form = Person()
        field = form['first_name']
        self.assertEqual(field.css_classes(), '')
        self.assertEqual(field.css_classes(extra_classes=''), '')
        self.assertEqual(field.css_classes(extra_classes='test'), 'test')
        self.assertEqual(field.css_classes(extra_classes='test test'), 'test')

    def test_label_suffix_override(self):
        """"""
        BoundField label_suffix (if provided) overrides Form label_suffix
        """"""
        class SomeForm(Form):
            field = CharField()
        boundfield = SomeForm(label_suffix='!')['field']

        self.assertHTMLEqual(boundfield.label_tag(label_suffix='$'), '<label for=""id_field"">Field$</label>')
        self.assertHTMLEqual(
            boundfield.legend_tag(label_suffix='$'),
            '<legend for=""id_field"">Field$</legend>',
        )

    def test_error_dict(self):
        class MyForm(Form):
            foo = CharField()
            bar = CharField()

            def clean(self):
                raise ValidationError('Non-field error.', code='secret', params={'a': 1, 'b': 2})

        form = MyForm({})
        self.assertIs(form.is_valid(), False)

        errors = form.errors.as_text()
        control = [
            '* foo\n  * This field is required.',
            '* bar\n  * This field is required.',
            '* __all__\n  * Non-field error.',
        ]
        for error in control:
            self.assertIn(error, errors)

        errors = form.errors.as_ul()
        control = [
            '<li>foo<ul class=""errorlist""><li>This field is required.</li></ul></li>',
            '<li>bar<ul class=""errorlist""><li>This field is required.</li></ul></li>',
            '<li>__all__<ul class=""errorlist nonfield""><li>Non-field error.</li></ul></li>',
        ]
        for error in control:
            self.assertInHTML(error, errors)

        errors = form.errors.get_json_data()
        control = {
            'foo': [{'code': 'required', 'message': 'This field is required.'}],
            'bar': [{'code': 'required', 'message': 'This field is required.'}],
            '__all__': [{'code': 'secret', 'message': 'Non-field error.'}]
        }
        self.assertEqual(errors, control)
        self.assertEqual(json.dumps(errors), form.errors.as_json())

    def test_error_dict_as_json_escape_html(self):
        """"""#21962 - adding html escape flag to ErrorDict""""""
        class MyForm(Form):
            foo = CharField()
            bar = CharField()

            def clean(self):
                raise ValidationError(
                    '<p>Non-field error.</p>',
                    code='secret',
                    params={'a': 1, 'b': 2},
                )

        control = {
            'foo': [{'code': 'required', 'message': 'This field is required.'}],
            'bar': [{'code': 'required', 'message': 'This field is required.'}],
            '__all__': [{'code': 'secret', 'message': '<p>Non-field error.</p>'}]
        }

        form = MyForm({})
        self.assertFalse(form.is_valid())

        errors = json.loads(form.errors.as_json())
        self.assertEqual(errors, control)

        escaped_error = '&lt;p&gt;Non-field error.&lt;/p&gt;'
        self.assertEqual(
            form.errors.get_json_data(escape_html=True)['__all__'][0]['message'],
            escaped_error
        )
        errors = json.loads(form.errors.as_json(escape_html=True))
        control['__all__'][0]['message'] = escaped_error
        self.assertEqual(errors, control)

    def test_error_list(self):
        e = ErrorList()
        e.append('Foo')
        e.append(ValidationError('Foo%(bar)s', code='foobar', params={'bar': 'bar'}))

        self.assertIsInstance(e, list)
        self.assertIn('Foo', e)
        self.assertIn('Foo', ValidationError(e))

        self.assertEqual(
            e.as_text(),
            '* Foo\n* Foobar'
        )

        self.assertEqual(
            e.as_ul(),
            '<ul class=""errorlist""><li>Foo</li><li>Foobar</li></ul>'
        )

        errors = e.get_json_data()
        self.assertEqual(
            errors,
            [{""message"": ""Foo"", ""code"": """"}, {""message"": ""Foobar"", ""code"": ""foobar""}]
        )
        self.assertEqual(json.dumps(errors), e.as_json())

    def test_error_list_class_not_specified(self):
        e = ErrorList()
        e.append('Foo')
        e.append(ValidationError('Foo%(bar)s', code='foobar', params={'bar': 'bar'}))
        self.assertEqual(
            e.as_ul(),
            '<ul class=""errorlist""><li>Foo</li><li>Foobar</li></ul>'
        )

    def test_error_list_class_has_one_class_specified(self):
        e = ErrorList(error_class='foobar-error-class')
        e.append('Foo')
        e.append(ValidationError('Foo%(bar)s', code='foobar', params={'bar': 'bar'}))
        self.assertEqual(
            e.as_ul(),
            '<ul class=""errorlist foobar-error-class""><li>Foo</li><li>Foobar</li></ul>'
        )

    def test_error_list_with_hidden_field_errors_has_correct_class(self):
        class Person(Form):
            first_name = CharField()
            last_name = CharField(widget=HiddenInput)

        p = Person({'first_name': 'John'})
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li><ul class=""errorlist nonfield"">
<li>(Hidden field last_name) This field is required.</li></ul></li><li>
<label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required>
<input id=""id_last_name"" name=""last_name"" type=""hidden""></li>""""""
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist nonfield""><li>(Hidden field last_name) This field is required.</li></ul>
<p><label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required>
<input id=""id_last_name"" name=""last_name"" type=""hidden""></p>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><td colspan=""2""><ul class=""errorlist nonfield"">
<li>(Hidden field last_name) This field is required.</li></ul></td></tr>
<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required>
<input id=""id_last_name"" name=""last_name"" type=""hidden""></td></tr>""""""
        )

    def test_error_list_with_non_field_errors_has_correct_class(self):
        class Person(Form):
            first_name = CharField()
            last_name = CharField()

            def clean(self):
                raise ValidationError('Generic validation error')

        p = Person({'first_name': 'John', 'last_name': 'Lennon'})
        self.assertHTMLEqual(
            str(p.non_field_errors()),
            '<ul class=""errorlist nonfield""><li>Generic validation error</li></ul>'
        )
        self.assertHTMLEqual(
            p.as_ul(),
            """"""<li>
<ul class=""errorlist nonfield""><li>Generic validation error</li></ul></li>
<li><label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required></li>
<li><label for=""id_last_name"">Last name:</label>
<input id=""id_last_name"" name=""last_name"" type=""text"" value=""Lennon"" required></li>""""""
        )
        self.assertHTMLEqual(
            p.non_field_errors().as_text(),
            '* Generic validation error'
        )
        self.assertHTMLEqual(
            p.as_p(),
            """"""<ul class=""errorlist nonfield""><li>Generic validation error</li></ul>
<p><label for=""id_first_name"">First name:</label>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required></p>
<p><label for=""id_last_name"">Last name:</label>
<input id=""id_last_name"" name=""last_name"" type=""text"" value=""Lennon"" required></p>""""""
        )
        self.assertHTMLEqual(
            p.as_table(),
            """"""<tr><td colspan=""2""><ul class=""errorlist nonfield""><li>Generic validation error</li></ul></td></tr>
<tr><th><label for=""id_first_name"">First name:</label></th><td>
<input id=""id_first_name"" name=""first_name"" type=""text"" value=""John"" required></td></tr>
<tr><th><label for=""id_last_name"">Last name:</label></th><td>
<input id=""id_last_name"" name=""last_name"" type=""text"" value=""Lennon"" required></td></tr>""""""
        )

    def test_error_escaping(self):
        class TestForm(Form):
            hidden = CharField(widget=HiddenInput(), required=False)
            visible = CharField()

            def clean_hidden(self):
                raise ValidationError('Foo & ""bar""!')

            clean_visible = clean_hidden

        form = TestForm({'hidden': 'a', 'visible': 'b'})
        form.is_valid()
        self.assertHTMLEqual(
            form.as_ul(),
            '<li><ul class=""errorlist nonfield""><li>(Hidden field hidden) Foo &amp; &quot;bar&quot;!</li></ul></li>'
            '<li><ul class=""errorlist""><li>Foo &amp; &quot;bar&quot;!</li></ul>'
            '<label for=""id_visible"">Visible:</label> '
            '<input type=""text"" name=""visible"" value=""b"" id=""id_visible"" required>'
            '<input type=""hidden"" name=""hidden"" value=""a"" id=""id_hidden""></li>'
        )

    def test_baseform_repr(self):
        """"""
        BaseForm.__repr__() should contain some basic information about the
        form.
        """"""
        p = Person()
        self.assertEqual(repr(p), ""<Person bound=False, valid=Unknown, fields=(first_name;last_name;birthday)>"")
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': '1940-10-9'})
        self.assertEqual(repr(p), ""<Person bound=True, valid=Unknown, fields=(first_name;last_name;birthday)>"")
        p.is_valid()
        self.assertEqual(repr(p), ""<Person bound=True, valid=True, fields=(first_name;last_name;birthday)>"")
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': 'fakedate'})
        p.is_valid()
        self.assertEqual(repr(p), ""<Person bound=True, valid=False, fields=(first_name;last_name;birthday)>"")

    def test_baseform_repr_dont_trigger_validation(self):
        """"""
        BaseForm.__repr__() shouldn't trigger the form validation.
        """"""
        p = Person({'first_name': 'John', 'last_name': 'Lennon', 'birthday': 'fakedate'})
        repr(p)
        with self.assertRaises(AttributeError):
            p.cleaned_data
        self.assertFalse(p.is_valid())
        self.assertEqual(p.cleaned_data, {'first_name': 'John', 'last_name': 'Lennon'})

    def test_accessing_clean(self):
        class UserForm(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

            def clean(self):
                data = self.cleaned_data

                if not self.errors:
                    data['username'] = data['username'].lower()

                return data

        f = UserForm({'username': 'SirRobin', 'password': 'blue'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['username'], 'sirrobin')

    def test_changing_cleaned_data_nothing_returned(self):
        class UserForm(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

            def clean(self):
                self.cleaned_data['username'] = self.cleaned_data['username'].lower()
                # don't return anything

        f = UserForm({'username': 'SirRobin', 'password': 'blue'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['username'], 'sirrobin')

    def test_changing_cleaned_data_in_clean(self):
        class UserForm(Form):
            username = CharField(max_length=10)
            password = CharField(widget=PasswordInput)

            def clean(self):
                data = self.cleaned_data

                # Return a different dict. We have not changed self.cleaned_data.
                return {
                    'username': data['username'].lower(),
                    'password': 'this_is_not_a_secret',
                }

        f = UserForm({'username': 'SirRobin', 'password': 'blue'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data['username'], 'sirrobin')

    def test_multipart_encoded_form(self):
        class FormWithoutFile(Form):
            username = CharField()

        class FormWithFile(Form):
            username = CharField()
            file = FileField()

        class FormWithImage(Form):
            image = ImageField()

        self.assertFalse(FormWithoutFile().is_multipart())
        self.assertTrue(FormWithFile().is_multipart())
        self.assertTrue(FormWithImage().is_multipart())

    def test_html_safe(self):
        class SimpleForm(Form):
            username = CharField()

        form = SimpleForm()
        self.assertTrue(hasattr(SimpleForm, '__html__'))
        self.assertEqual(str(form), form.__html__())
        self.assertTrue(hasattr(form['username'], '__html__'))
        self.assertEqual(str(form['username']), form['username'].__html__())

    def test_use_required_attribute_true(self):
        class MyForm(Form):
            use_required_attribute = True
            f1 = CharField(max_length=30)
            f2 = CharField(max_length=30, required=False)
            f3 = CharField(widget=Textarea)
            f4 = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])

        form = MyForm()
        self.assertHTMLEqual(
            form.as_p(),
            '<p><label for=""id_f1"">F1:</label> <input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text"" required></p>'
            '<p><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></p>'
            '<p><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"" required>'
            '</textarea></p>'
            '<p><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></p>',
        )
        self.assertHTMLEqual(
            form.as_ul(),
            '<li><label for=""id_f1"">F1:</label> '
            '<input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text"" required></li>'
            '<li><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></li>'
            '<li><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"" required>'
            '</textarea></li>'
            '<li><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></li>',
        )
        self.assertHTMLEqual(
            form.as_table(),
            '<tr><th><label for=""id_f1"">F1:</label></th>'
            '<td><input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text"" required></td></tr>'
            '<tr><th><label for=""id_f2"">F2:</label></th>'
            '<td><input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></td></tr>'
            '<tr><th><label for=""id_f3"">F3:</label></th>'
            '<td><textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"" required>'
            '</textarea></td></tr>'
            '<tr><th><label for=""id_f4"">F4:</label></th><td><select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></td></tr>',
        )

    def test_use_required_attribute_false(self):
        class MyForm(Form):
            use_required_attribute = False
            f1 = CharField(max_length=30)
            f2 = CharField(max_length=30, required=False)
            f3 = CharField(widget=Textarea)
            f4 = ChoiceField(choices=[('P', 'Python'), ('J', 'Java')])

        form = MyForm()
        self.assertHTMLEqual(
            form.as_p(),
            '<p><label for=""id_f1"">F1:</label> <input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text""></p>'
            '<p><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></p>'
            '<p><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"">'
            '</textarea></p>'
            '<p><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></p>',
        )
        self.assertHTMLEqual(
            form.as_ul(),
            '<li><label for=""id_f1"">F1:</label> <input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text""></li>'
            '<li><label for=""id_f2"">F2:</label> <input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></li>'
            '<li><label for=""id_f3"">F3:</label> <textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"">'
            '</textarea></li>'
            '<li><label for=""id_f4"">F4:</label> <select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></li>',
        )
        self.assertHTMLEqual(
            form.as_table(),
            '<tr><th><label for=""id_f1"">F1:</label></th>'
            '<td><input id=""id_f1"" maxlength=""30"" name=""f1"" type=""text""></td></tr>'
            '<tr><th><label for=""id_f2"">F2:</label></th>'
            '<td><input id=""id_f2"" maxlength=""30"" name=""f2"" type=""text""></td></tr>'
            '<tr><th><label for=""id_f3"">F3:</label></th><td><textarea cols=""40"" id=""id_f3"" name=""f3"" rows=""10"">'
            '</textarea></td></tr>'
            '<tr><th><label for=""id_f4"">F4:</label></th><td><select id=""id_f4"" name=""f4"">'
            '<option value=""P"">Python</option>'
            '<option value=""J"">Java</option>'
            '</select></td></tr>',
        )

    def test_only_hidden_fields(self):
        # A form with *only* hidden fields that has errors is going to be very unusual.
        class HiddenForm(Form):
            data = IntegerField(widget=HiddenInput)

        f = HiddenForm({})
        self.assertHTMLEqual(
            f.as_p(),
            '<ul class=""errorlist nonfield"">'
            '<li>(Hidden field data) This field is required.</li></ul>\n<p> '
            '<input type=""hidden"" name=""data"" id=""id_data""></p>'
        )
        self.assertHTMLEqual(
            f.as_table(),
            '<tr><td colspan=""2""><ul class=""errorlist nonfield"">'
            '<li>(Hidden field data) This field is required.</li></ul>'
            '<input type=""hidden"" name=""data"" id=""id_data""></td></tr>'
        )

    def test_field_named_data(self):
        class DataForm(Form):
            data = CharField(max_length=10)

        f = DataForm({'data': 'xyzzy'})
        self.assertTrue(f.is_valid())
        self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})

    def test_empty_data_files_multi_value_dict(self):
        p = Person()
        self.assertIsInstance(p.data, MultiValueDict)
        self.assertIsInstance(p.files, MultiValueDict)

    def test_field_deep_copy_error_messages(self):
        class CustomCharField(CharField):
            def __init__(self, **kwargs):
                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}
                super().__init__(**kwargs)

        field = CustomCharField()
        field_copy = copy.deepcopy(field)
        self.assertIsInstance(field_copy, CustomCharField)
        self.assertIsNot(field_copy.error_messages, field.error_messages)

    def test_label_does_not_include_new_line(self):
        form = Person()
        field = form['first_name']
        self.assertEqual(field.label_tag(), '<label for=""id_first_name"">First name:</label>')
        self.assertEqual(
            field.legend_tag(),
            '<legend for=""id_first_name"">First name:</legend>',
        )

    @override_settings(USE_THOUSAND_SEPARATOR=True)
    def test_label_attrs_not_localized(self):
        form = Person()
        field = form['first_name']
        self.assertHTMLEqual(
            field.label_tag(attrs={'number': 9999}),
            '<label number=""9999"" for=""id_first_name"">First name:</label>',
        )
        self.assertHTMLEqual(
            field.legend_tag(attrs={'number': 9999}),
            '<legend number=""9999"" for=""id_first_name"">First name:</legend>',
        )",1,334 2000 40 2001 41 58 621 621 621 348 2002 40 2003 41 58 621 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2004 46 2007 41 2003 46 2008 40 2004 46 2009 44 123 125 41 2003 46 2010 40 2004 46 2009 44 2011 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2013 40 2004 46 2009 46 2014 40 41 44 648 41 2003 46 2008 40 2004 46 2009 46 2015 40 41 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2020 61 648 497 2003 46 2021 40 2022 44 2020 41 58 2004 91 648 93 2023 61 91 93 385 2024 398 2004 58 2023 46 2025 40 2019 40 2024 41 41 2003 46 2013 40 648 46 2026 40 2023 41 44 648 41 2023 61 91 93 385 2024 398 2004 58 2023 46 2025 40 91 2024 46 2027 44 2024 46 2028 93 41 2003 46 2008 40 2023 44 91 91 648 44 648 93 44 91 648 44 648 93 44 91 648 44 648 93 93 41 2003 46 2013 40 2019 40 2004 41 44 648 41 348 2029 40 2003 41 58 621 2004 61 2005 40 123 125 41 2003 46 2006 40 2004 46 2007 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 44 123 125 41 2003 46 2013 40 2019 40 2004 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2033 40 2003 41 58 2028 61 2034 40 41 2035 61 2034 40 41 2004 61 2005 40 2028 44 2035 41 2003 46 2036 40 2004 46 2028 44 2028 41 2003 46 2036 40 2004 46 2035 44 2035 41 348 2037 40 2003 41 58 621 621 621 2004 61 2005 40 41 2003 46 2030 40 2004 46 2007 41 2003 46 2008 40 2004 46 2009 44 123 125 41 2003 46 2030 40 2004 46 2012 40 41 41 497 2003 46 2038 40 2039 41 58 2004 46 2016 2003 46 2013 40 2019 40 2004 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2040 40 2003 41 58 621 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2013 40 2004 46 2031 40 41 44 648 648 648 648 648 648 648 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 648 648 648 648 648 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 648 648 648 648 648 648 41 2004 61 2005 40 123 648 58 648 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2009 44 123 648 58 91 648 93 44 648 58 91 648 93 125 41 2003 46 2008 40 2004 46 2016 44 123 648 58 648 125 41 2003 46 2008 40 2004 91 648 93 46 2009 44 91 648 93 41 2003 46 2013 40 2004 91 648 93 46 2009 46 2014 40 41 44 648 41 2003 46 2008 40 2004 91 648 93 46 2009 46 2015 40 41 44 648 41 2004 61 2005 40 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 44 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 348 2041 40 2003 41 58 621 621 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 2004 61 2005 40 2028 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 348 2042 40 2003 41 58 621 621 621 621 621 334 2043 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2048 61 2046 40 2049 61 302 41 2028 61 123 648 58 648 44 648 58 648 125 2050 61 2043 40 2028 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 621 334 2043 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2051 61 2052 40 2049 61 302 41 2028 61 123 648 58 648 44 648 58 648 125 2050 61 2043 40 2028 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2053 40 2050 46 2016 91 648 93 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2054 40 2003 41 58 621 621 621 621 2004 61 2005 40 2055 61 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2056 40 2003 41 58 621 621 2004 61 2005 40 2055 61 304 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2057 40 2003 41 58 621 621 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2058 40 2003 41 58 621 621 2004 61 2059 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2060 40 2003 41 58 621 621 2004 61 2059 40 2055 61 304 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2061 40 2003 41 58 334 2062 40 2044 41 58 2063 61 2064 40 41 2065 61 2066 40 41 2050 61 2062 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2062 40 123 648 58 648 44 648 58 304 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 44 41 621 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 44 41 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2062 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 2050 61 2062 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2006 40 2050 46 2016 46 2067 40 648 41 41 348 2068 40 2003 41 58 621 334 2069 40 2044 41 58 2070 61 2046 40 41 2071 61 2046 40 2072 61 2073 41 2050 61 2069 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 2003 46 2013 40 2050 91 648 93 46 2074 40 41 44 648 44 41 2003 46 2013 40 2050 91 648 93 46 2015 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 621 334 2069 40 2044 41 58 2070 61 2046 40 41 2071 61 2046 40 2072 61 2073 40 2076 61 123 648 58 1503 44 648 58 1503 125 41 41 2050 61 2069 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 2003 46 2013 40 2050 91 648 93 46 2015 40 41 44 648 41 2050 61 2069 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 91 648 93 46 2074 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2015 40 41 44 648 44 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 348 2077 40 2003 41 58 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2078 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2083 40 2076 61 123 648 58 648 125 41 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2078 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2083 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2076 61 123 648 58 648 125 41 44 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2078 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 334 2078 40 2044 41 58 2079 61 2046 40 41 2080 61 2081 40 41 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 46 2084 91 648 93 46 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2085 40 2003 41 58 621 2050 61 2078 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 621 621 621 2050 61 2078 40 2055 61 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 621 621 621 621 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2003 46 2013 40 2050 46 2032 40 41 44 648 41 348 2086 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2088 44 41 2050 61 2087 40 2055 61 302 41 2003 46 2013 40 648 46 2026 40 2019 40 2089 41 385 2089 398 2050 91 648 93 41 44 648 41 2003 46 2013 40 648 46 2026 40 648 37 2089 385 2089 398 2050 91 648 93 41 44 648 41 348 2090 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2088 44 41 2084 61 411 40 2087 40 41 91 648 93 41 2003 46 2008 40 2091 40 2084 41 44 1502 41 2003 46 2008 40 2084 91 1500 93 46 2092 44 648 41 2003 46 2008 40 2084 91 1500 93 46 2093 44 648 41 2003 46 2013 40 2084 91 1500 93 46 2094 40 41 44 648 41 2003 46 2013 40 2019 40 2084 91 1500 93 41 44 648 648 41 2003 46 2008 40 2084 91 1501 93 46 2092 44 648 41 2003 46 2008 40 2084 91 1501 93 46 2093 44 648 41 2003 46 2013 40 2084 91 1501 93 46 2094 40 41 44 648 41 2003 46 2013 40 2019 40 2084 91 1501 93 41 44 648 648 41 348 2095 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 2084 61 411 40 2087 40 2055 61 302 41 91 648 93 41 2003 46 2008 40 2091 40 2084 41 44 1502 41 2003 46 2008 40 2084 91 1500 93 46 2092 44 303 41 2003 46 2008 40 2084 91 1500 93 46 2093 44 648 41 2003 46 2013 40 2084 91 1500 93 46 2094 40 41 44 648 41 2003 46 2013 40 2019 40 2084 91 1500 93 41 44 648 41 348 2096 40 2003 41 58 621 334 2087 40 2044 41 58 2079 61 2046 40 41 2050 61 2087 40 2055 61 302 41 2003 46 2013 40 648 46 2026 40 2019 40 2089 41 385 2089 398 2050 91 648 93 41 44 648 41 348 2097 40 2003 41 58 334 2087 40 2044 41 58 2079 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2088 44 41 2050 61 2087 40 41 2089 61 2050 91 648 93 2003 46 2008 40 91 2019 40 2098 41 385 2098 398 2089 91 1501 58 93 93 44 91 2019 40 2089 91 1501 93 41 44 2019 40 2089 91 1502 93 41 44 2019 40 2089 91 1502 93 41 93 44 41 348 2099 40 2003 41 58 334 2100 40 2044 41 58 2079 61 2081 40 2082 61 91 93 41 2101 61 2100 40 41 91 648 93 2020 61 648 497 2003 46 2021 40 2102 44 2020 41 58 2101 91 648 93 348 2103 40 2003 41 58 648 334 2100 40 2044 41 58 2079 61 2081 40 2082 61 91 93 41 2003 46 2036 40 323 40 2100 40 41 91 648 93 41 44 304 41 348 2104 40 2003 41 58 621 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 41 2050 61 2105 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2105 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2108 40 2003 41 58 334 2109 40 2044 41 58 2079 61 2046 40 41 2110 61 2052 40 2111 61 304 41 334 2112 40 2044 41 58 2079 61 2046 40 41 2110 61 2052 40 2111 61 304 44 2113 61 2017 46 2018 40 1505 44 1502 44 1503 41 41 621 621 2114 61 2109 40 123 648 58 648 125 44 2113 61 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 125 41 2115 61 2112 40 123 648 58 648 125 41 385 2116 398 40 2114 44 2115 41 58 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2016 44 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 44 648 58 648 125 41 621 2028 61 123 648 58 648 44 648 58 648 125 2114 61 2109 40 2028 44 2113 61 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 125 41 2115 61 2112 40 2028 41 385 2116 398 40 2114 44 2115 41 58 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2016 44 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 44 648 58 648 125 41 621 2028 61 123 125 2114 61 2109 40 2028 44 2113 61 123 648 58 2017 46 2018 40 1505 44 1502 44 1503 41 125 41 2115 61 2112 40 2028 41 385 2116 398 40 2114 44 2115 41 58 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 91 648 93 46 2117 40 41 44 2017 46 2018 40 1505 44 1502 44 1503 41 41 348 2118 40 2003 41 58 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 621 621 621 2050 61 2105 40 123 648 58 648 44 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 44 648 93 125 44 2055 61 302 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 41 621 334 2119 40 2044 41 58 2120 61 2121 40 41 2050 61 2119 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 648 41 2003 46 2013 40 2050 91 648 93 46 2075 40 41 44 648 648 41 348 2122 40 2003 41 58 621 2050 61 2105 40 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2105 40 123 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 2050 61 2105 40 123 648 58 91 648 44 648 93 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2123 40 2003 41 58 621 621 621 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 2050 61 2105 40 2055 61 648 41 2003 46 2013 40 2019 40 2050 91 648 93 41 44 648 41 348 2125 40 2003 41 58 621 621 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 2028 61 123 648 58 648 44 648 58 91 648 44 648 93 125 2050 61 2105 40 2028 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2028 61 2034 40 648 41 2050 61 2105 40 2028 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2028 61 2126 40 123 648 58 91 648 93 44 648 58 91 648 44 648 93 125 41 2050 61 2105 40 2028 41 2003 46 2008 40 2050 46 2009 44 123 125 41 621 621 2050 61 2105 40 2127 40 123 648 58 648 44 648 58 648 125 41 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 93 41 348 2128 40 2003 41 58 334 2105 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 621 334 2129 40 2044 41 58 2079 61 2046 40 41 2106 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2130 44 41 2050 61 2129 40 2126 40 123 648 58 91 648 93 44 648 58 91 648 44 648 93 125 41 44 2055 61 302 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 621 621 2050 61 2105 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 93 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2050 61 2105 40 123 648 58 648 44 648 58 91 648 44 648 93 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 44 648 93 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 621 621 2050 61 2105 40 2127 40 123 648 58 648 44 648 58 648 125 41 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 91 648 93 41 348 2131 40 2003 41 58 621 334 2132 40 2044 41 58 2133 61 2046 40 2027 61 648 41 2134 61 2046 40 2027 61 2135 40 648 41 41 348 2136 40 2003 41 58 440 2137 40 648 37 2003 46 2016 91 648 93 41 348 2138 40 2003 41 58 440 2137 40 2135 40 648 37 2003 46 2016 91 648 93 41 41 2050 61 2132 40 123 648 58 648 44 648 58 648 44 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2050 61 2132 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 348 2139 40 2003 41 58 621 621 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2143 61 2046 40 2072 61 2144 41 2145 61 2046 40 2072 61 2144 41 348 2146 40 2003 41 58 392 40 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 91 648 93 631 2003 46 2016 91 648 93 41 58 440 2137 40 648 41 450 2003 46 2016 91 648 93 2050 61 2140 40 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2050 61 2140 40 123 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 621 621 621 621 621 621 621 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2143 61 2046 40 2072 61 2144 41 2145 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 621 392 40 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 91 648 93 631 2003 46 2016 91 648 93 41 58 440 2137 40 648 41 621 2009 61 123 125 392 2003 46 2016 46 2067 40 648 41 614 648 58 2009 91 648 93 61 648 392 2003 46 2016 46 2067 40 648 41 614 648 58 2009 91 648 93 61 91 648 93 392 2009 58 440 2137 40 2009 41 621 392 2003 46 2016 46 2067 40 648 41 614 648 58 2003 46 2148 40 303 44 648 41 2003 46 2148 40 648 44 648 41 392 2003 46 2016 46 2067 40 648 41 614 648 58 2003 46 2148 40 648 44 648 41 440 2137 40 648 41 450 2003 46 2016 2050 61 2140 40 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2050 61 2140 40 123 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2013 40 2050 46 2031 40 41 44 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2050 61 2140 40 123 648 58 648 44 648 58 648 44 648 58 648 44 125 44 2055 61 302 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 44 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2050 46 2009 91 648 93 44 91 648 93 41 497 2003 46 2021 40 2149 44 648 41 58 2050 46 2148 40 648 44 648 41 348 2150 40 2003 41 58 334 2151 40 2044 41 58 2152 61 2046 40 2142 61 1502 41 348 2147 40 2003 41 58 474 58 440 2137 40 123 648 58 91 2137 40 648 41 93 125 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 123 648 58 91 2137 40 648 41 93 125 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 123 648 58 2156 46 2157 40 91 648 93 41 125 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 648 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 474 58 440 2137 40 91 2137 40 648 41 93 41 374 2137 311 2153 58 2003 46 2154 61 2153 46 2155 40 2003 46 2154 41 621 385 2101 44 2158 398 2003 46 2154 46 2159 40 41 58 392 422 2160 40 2158 44 2003 46 2161 41 58 2003 46 2154 91 2101 93 61 2003 46 2161 40 2158 41 2116 61 2151 40 123 648 58 648 125 41 621 2003 46 2030 40 2116 46 2012 40 41 41 621 2003 46 2010 40 2116 46 2154 44 2156 46 2162 41 2003 46 2008 40 2011 40 2116 46 2009 41 44 123 648 58 91 648 44 648 44 648 93 44 2163 58 91 648 44 648 93 44 125 41 348 2164 40 2003 41 58 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2143 61 2046 40 2072 61 2144 44 2165 61 1502 41 2145 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 392 40 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 46 2067 40 648 41 308 2003 46 2016 91 648 93 631 2003 46 2016 91 648 93 41 58 440 2137 40 648 44 2152 61 648 44 41 2050 61 2140 40 2028 61 123 125 41 2003 46 2006 40 2050 46 2166 40 648 41 41 2003 46 2006 40 2050 46 2166 40 648 44 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2050 61 2140 40 2028 61 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2166 40 648 41 41 2003 46 2006 40 2050 46 2166 40 648 44 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2003 46 2030 40 2050 46 2166 40 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2050 61 2140 40 2028 61 123 648 58 648 44 648 58 648 125 41 2003 46 2030 40 2050 46 2166 40 648 41 41 2003 46 2030 40 2050 46 2166 40 648 44 648 41 41 2003 46 2006 40 2050 46 2166 40 2163 41 41 2003 46 2006 40 2050 46 2166 40 2163 44 648 41 41 2003 46 2030 40 2050 46 2166 40 2163 44 648 41 41 348 2167 40 2003 41 58 334 2100 40 2044 41 58 2168 61 2046 40 2072 61 2169 41 348 2147 40 2003 41 58 2003 46 2148 40 303 44 648 41 2050 61 2100 40 2028 61 123 125 41 2170 61 123 648 58 91 648 93 44 648 58 91 648 93 44 125 2003 46 2008 40 2050 46 2009 44 2170 41 2050 46 2031 40 41 2003 46 2008 40 2050 46 2009 44 2170 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 44 41 2003 46 2013 40 2050 46 2014 40 41 44 648 648 648 44 41 2003 46 2013 40 2050 46 2032 40 41 44 648 648 648 44 41 348 2171 40 2003 41 58 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 348 2172 40 2003 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 2003 46 2084 91 648 93 61 2052 40 41 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 621 621 334 2175 40 2044 41 58 348 2172 40 2003 44 2028 61 303 44 2055 61 302 44 2176 61 91 93 41 58 2044 46 2172 40 2003 44 2028 44 2055 61 2055 41 385 2101 398 2176 58 2003 46 2084 91 2101 91 1500 93 93 61 2101 91 1501 93 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 334 2175 40 2044 41 58 2178 61 2046 40 41 2179 61 2046 40 41 348 2172 40 2003 44 2028 61 303 44 2055 61 302 44 2176 61 91 93 41 58 2044 46 2172 40 2003 44 2028 44 2055 61 2055 41 385 2101 398 2176 58 2003 46 2084 91 2101 91 1500 93 93 61 2101 91 1501 93 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 2176 61 91 40 648 44 2046 40 41 41 44 40 648 44 2046 40 41 41 93 2177 61 2175 40 2176 61 2176 41 2003 46 2013 40 2177 46 2031 40 41 44 648 41 621 621 334 2005 40 2044 41 58 2045 61 2046 40 2049 61 302 41 2047 61 2046 40 2049 61 302 41 348 2172 40 2003 44 2180 61 302 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 392 2180 58 2003 46 2084 91 648 93 46 2049 61 304 2003 46 2084 91 648 93 46 2072 46 2076 91 648 93 61 648 2003 46 2084 91 648 93 46 2049 61 304 2003 46 2084 91 648 93 46 2072 46 2076 91 648 93 61 648 2050 61 2005 40 2180 61 302 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2049 44 2050 91 648 93 46 2101 46 2049 44 40 302 44 302 41 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2072 46 2076 44 2050 91 648 93 46 2101 46 2072 46 2076 44 40 123 125 44 123 125 41 41 2050 61 2005 40 2180 61 304 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2049 44 2050 91 648 93 46 2101 46 2049 44 40 304 44 304 41 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2072 46 2076 44 2050 91 648 93 46 2101 46 2072 46 2076 44 40 123 648 58 648 125 44 123 648 58 648 125 41 41 2050 61 2005 40 2180 61 302 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2049 44 2050 91 648 93 46 2101 46 2049 44 40 302 44 302 41 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2072 46 2076 44 2050 91 648 93 46 2101 46 2072 46 2076 44 40 123 125 44 123 125 41 41 334 2005 40 2044 41 58 2045 61 2046 40 2142 61 1503 41 2047 61 2046 40 2142 61 1503 41 348 2172 40 2003 44 2181 61 303 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 392 2181 58 2003 46 2084 91 648 93 46 2142 61 2181 2003 46 2084 91 648 93 46 2142 61 2181 2050 61 2005 40 2181 61 303 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2142 44 2050 91 648 93 46 2101 46 2142 44 40 1503 44 1503 41 41 2050 61 2005 40 2181 61 1503 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2142 44 2050 91 648 93 46 2101 46 2142 44 40 1503 44 1503 41 41 2050 61 2005 40 2181 61 303 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2142 44 2050 91 648 93 46 2101 46 2142 44 40 1503 44 1503 41 41 621 621 334 2005 40 2044 41 58 2045 61 2046 40 2049 61 302 41 2047 61 2046 40 2049 61 302 41 2182 61 2081 40 2082 61 40 40 648 44 648 41 44 40 648 44 648 41 41 41 348 2172 40 2003 44 2183 61 302 44 42 2173 44 638 2174 41 58 463 40 41 46 2172 40 42 2173 44 638 2174 41 392 2183 58 2003 46 2084 91 648 93 46 2082 636 40 40 648 44 648 41 44 41 2050 61 2005 40 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2082 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2005 40 2183 61 304 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2082 44 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 2050 61 2005 40 41 2003 46 2008 40 2050 91 648 93 46 2101 46 2082 44 91 40 648 44 648 41 44 40 648 44 648 41 93 41 348 2184 40 2003 41 58 648 334 2175 40 2044 41 58 2185 61 2046 40 2142 61 1503 41 2114 61 2175 40 41 2115 61 2175 40 41 2114 46 2084 91 648 93 46 2186 91 1500 93 61 2187 40 1503 41 2003 46 2188 40 2114 46 2084 91 648 93 46 2186 91 1500 93 44 2115 46 2084 91 648 93 46 2186 91 1500 93 41 348 2189 40 2003 41 58 621 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2190 61 2046 40 2072 61 2169 41 2110 61 2052 40 41 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 621 2004 61 2005 40 2055 61 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 621 621 621 621 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 621 334 2100 40 2044 41 58 2191 61 2046 40 2072 61 2169 41 2192 61 2046 40 2072 61 2169 41 2004 61 2100 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 348 2193 40 2003 41 58 621 334 2100 40 2044 41 58 2194 61 2046 40 41 2195 61 2046 40 41 2196 61 2046 40 41 2197 61 2046 40 41 2198 61 2046 40 41 2199 61 2046 40 41 2200 61 2046 40 41 2201 61 2046 40 41 2202 61 2046 40 41 2203 61 2046 40 41 2204 61 2046 40 41 2205 61 2046 40 41 2206 61 2046 40 41 2207 61 2046 40 41 2004 61 2100 40 2055 61 302 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2208 40 2003 41 58 334 2209 40 2044 41 58 2194 61 2046 40 41 2195 61 2046 40 41 2197 61 2046 40 41 2198 61 2046 40 41 2199 61 2046 40 41 2210 61 91 648 44 648 44 648 44 648 44 648 93 334 2100 40 2209 41 58 2196 61 2046 40 41 2210 61 91 648 44 648 44 648 44 648 44 648 93 334 2211 40 2100 41 58 2194 61 303 334 2212 40 2100 41 58 2210 61 91 648 44 648 44 648 44 648 44 648 44 648 93 2194 61 303 334 2213 40 2209 41 58 2196 61 2046 40 41 2210 61 303 348 2172 40 2003 44 638 2174 41 58 463 40 41 46 2172 40 638 2174 41 2003 46 2214 40 2210 61 2100 46 2210 41 2004 61 2209 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2209 46 2210 41 2004 61 2211 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2100 46 2210 41 2004 61 2212 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2100 46 2210 41 2004 61 2100 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 2212 46 2210 41 2004 61 2213 40 41 2215 61 91 42 2100 46 2210 44 648 93 2003 46 2008 40 411 40 2004 46 2084 41 44 2215 41 2100 46 2210 61 91 648 93 2004 61 2100 40 41 2003 46 2008 40 411 40 2004 46 2084 41 44 91 648 44 648 44 648 44 648 44 648 44 648 93 41 348 2216 40 2003 41 58 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 621 2217 61 2046 40 2142 61 1502 44 2072 61 2144 41 2218 61 2046 40 2142 61 1502 44 2072 61 2219 41 621 2220 61 2046 40 41 621 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2072 61 2219 40 2076 61 123 648 58 1503 125 41 41 2217 61 2046 40 2142 61 1502 44 2072 61 2144 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2221 40 2003 41 58 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2027 61 648 41 2143 61 2046 40 2072 61 2144 41 2145 61 2046 40 2072 61 2144 44 2027 61 648 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 334 2222 40 2044 41 58 2223 61 2046 40 2027 61 648 41 2224 61 2046 40 2027 61 648 41 2225 61 2046 40 2027 61 648 41 2226 61 2046 40 2027 61 648 41 2227 61 2046 40 2027 61 648 41 2003 46 2013 40 2222 40 2055 61 302 41 46 2032 40 41 44 648 41 2003 46 2013 40 2222 40 41 46 2032 40 41 44 648 41 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2027 61 648 41 2217 61 2046 40 2072 61 2144 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2055 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2027 61 303 41 2217 61 2046 40 2072 61 2144 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2055 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2228 40 2003 41 58 621 621 621 621 621 334 2229 40 2044 41 58 2230 61 2046 40 2027 61 648 41 2231 61 2046 40 2027 61 648 41 2232 61 2046 40 2027 61 648 44 2233 61 648 41 2050 61 2229 40 2055 61 302 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2229 40 2055 61 302 44 2233 61 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2229 40 2055 61 302 44 2233 61 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 41 2050 61 2229 40 2055 61 302 44 2233 61 648 41 2003 46 2013 40 2050 46 2014 40 41 44 648 648 648 41 348 2234 40 2003 41 58 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 648 41 2217 61 2046 40 2072 61 2144 41 621 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 2004 61 2140 40 123 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 2004 61 2140 40 123 648 58 648 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 348 2235 40 2003 41 58 621 621 621 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 621 2004 61 2140 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 2004 61 2140 40 123 125 44 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 648 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 648 41 2217 61 2046 40 2072 61 2144 41 2004 61 2140 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2236 40 2003 41 58 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 2237 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 41 621 348 2238 40 41 58 450 648 348 2239 40 41 58 450 648 348 2240 40 41 58 450 91 648 44 648 93 348 2241 40 41 58 450 91 648 44 648 93 621 2004 61 2140 40 2113 61 123 648 58 2238 44 648 58 2240 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 2004 61 2140 40 123 125 44 2113 61 123 648 58 2238 44 648 58 2240 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 2238 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 123 648 58 648 44 648 58 91 648 44 648 93 125 44 2113 61 123 648 58 2238 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 621 2004 61 2140 40 123 648 58 648 125 44 2113 61 123 648 58 2238 44 648 58 2240 125 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2030 40 2004 46 2012 40 41 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 2238 41 2217 61 2046 40 2072 61 2144 41 2237 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 44 40 648 44 648 41 93 44 2113 61 2241 44 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2004 61 2140 40 2113 61 123 648 58 2239 44 648 58 2240 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2242 40 2003 41 58 2243 61 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 1507 41 334 2109 40 2044 41 58 2045 61 2046 40 2113 61 648 41 2047 61 2046 40 2113 61 648 41 2244 61 2245 40 41 2246 61 2046 40 2113 61 409 58 648 41 2247 61 2248 40 2113 61 2243 41 2249 61 2248 40 2113 61 409 58 2243 41 2116 61 2109 40 2113 61 123 648 58 648 125 41 2250 61 91 40 648 44 303 41 44 40 648 44 648 41 44 621 40 648 44 648 41 44 621 40 648 44 648 41 44 621 40 648 44 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 44 40 648 44 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 44 93 385 2251 44 2252 398 2250 58 497 2003 46 2253 40 2251 61 2251 41 58 2101 61 2116 46 2084 91 2251 93 2254 61 2116 46 2255 40 2101 44 2251 41 2003 46 2008 40 2254 44 2252 41 348 2256 40 2003 41 58 334 2005 40 2044 41 58 2045 61 2046 40 2113 61 648 41 2047 61 2046 40 2113 61 648 41 2110 61 2052 40 2113 61 2017 46 2018 40 1505 44 1502 44 1503 41 41 2004 61 2005 40 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2257 40 648 44 2004 46 2258 41 2003 46 2259 40 648 44 2004 46 2258 41 2003 46 2257 40 648 44 2004 46 2258 41 621 334 2260 40 2156 46 2261 41 58 348 2262 40 2003 44 2117 41 58 440 2137 40 648 41 334 2263 40 2005 41 58 2264 61 2260 40 2113 61 648 44 2265 61 304 41 2004 61 2263 40 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2259 40 648 44 2004 46 2258 41 348 2266 40 2003 41 58 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2113 61 648 41 2217 61 2046 40 2072 61 2144 41 2267 61 2140 40 41 2268 61 2140 40 123 648 58 648 125 41 2003 46 2053 40 2268 91 648 93 46 2117 40 41 41 2003 46 2008 40 2267 91 648 93 46 2117 40 41 44 648 41 2003 46 2008 40 2268 91 648 93 46 2117 40 41 44 648 41 2003 46 2053 40 2267 91 648 93 46 2117 40 41 41 348 2269 40 2003 41 58 648 334 2175 40 2044 41 58 2079 61 2046 40 2142 61 1502 44 2113 61 2270 46 2271 41 2116 61 2175 40 41 2079 61 2116 91 648 93 2003 46 2008 40 2079 46 2117 40 41 44 2079 46 2117 40 41 41 621 2003 46 2036 40 2116 91 648 93 44 2079 41 348 2272 40 2003 41 58 334 2109 40 2044 41 58 2079 61 2046 40 2113 61 409 58 648 44 2111 61 304 41 621 2116 61 2109 40 41 2003 46 2008 40 2116 91 648 93 46 2117 40 41 44 648 41 621 621 2116 61 2109 40 123 125 41 2003 46 2008 40 2116 91 648 93 46 2117 40 41 44 648 41 348 2273 40 2003 41 58 334 2274 40 2046 41 58 348 2275 40 2003 44 2116 44 2079 41 58 450 40 2116 44 2079 41 334 2276 40 2044 41 58 2079 61 2274 40 41 2050 61 2276 40 41 2003 46 2008 40 2050 91 648 93 44 40 2050 44 648 41 41 348 2277 40 2003 41 58 2243 61 2017 46 2017 46 2243 40 41 621 2278 61 2243 46 2279 40 2280 61 1500 41 392 2243 614 2278 58 2243 61 2243 46 2279 40 2280 61 1501 41 348 2281 40 41 58 450 2243 348 2282 40 41 58 450 2243 46 2283 40 41 334 2284 40 2169 41 58 2285 61 302 334 2286 40 2219 41 58 2285 61 302 334 2287 40 2044 41 58 621 383 61 2248 40 2113 61 2243 41 2288 61 2248 40 2113 61 2281 41 2289 61 2290 40 2113 61 2282 41 2285 61 2248 40 2113 61 2281 44 2072 61 2219 41 2291 61 2248 40 2113 61 2281 44 2072 61 2169 41 2292 61 2248 40 2113 61 2281 44 2072 61 2284 41 2293 61 2248 40 2113 61 2281 44 2072 61 2286 41 2267 61 2287 40 41 2250 61 91 40 648 44 2278 41 44 40 648 44 2278 41 44 40 648 44 2278 46 2283 40 41 41 44 40 648 44 2243 41 44 40 648 44 2243 41 44 40 648 44 2278 41 44 40 648 44 2278 41 44 93 385 2251 44 2252 398 2250 58 497 2003 46 2253 40 2251 61 2251 41 58 2254 61 2267 91 2251 93 46 2117 40 41 2003 46 2008 40 2254 44 2252 41 621 2101 61 2267 46 2084 91 2251 93 2254 61 2267 46 2255 40 2101 44 2251 41 2003 46 2008 40 2254 44 2252 41 348 2294 40 2003 44 2111 44 2295 61 1500 41 58 334 2296 58 348 2172 40 2003 41 58 2003 46 2297 61 1500 348 2243 40 2003 41 58 2003 46 2297 636 1501 450 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 43 2003 46 2297 44 2295 44 41 334 2287 40 2156 46 2044 41 58 2298 61 2248 40 2113 61 2296 40 41 46 2243 44 2111 61 2111 41 450 2287 40 123 125 41 348 2299 40 2003 41 58 648 2116 61 2003 46 2294 40 2111 61 304 44 2295 61 1507 44 41 2003 46 2008 40 2116 46 2009 44 123 125 41 2003 46 2008 40 2116 46 2016 44 123 648 58 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 44 125 41 348 2300 40 2003 41 58 648 2116 61 2003 46 2294 40 2111 61 304 41 2003 46 2008 40 2116 46 2009 44 123 125 41 2301 61 2116 46 2016 91 648 93 2003 46 2008 40 2301 44 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 2089 61 2116 91 648 93 2003 46 2008 40 2301 44 2089 46 2113 41 348 2302 40 2003 41 58 334 2287 40 2156 46 2044 41 58 2298 61 2248 40 2113 61 409 58 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 1507 41 44 2111 61 304 41 2116 61 2287 40 123 648 58 648 125 41 2003 46 2008 40 2116 46 2258 44 91 93 41 348 2303 40 2003 41 58 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2304 61 648 41 2217 61 2046 40 2072 61 2144 44 2304 61 648 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 621 2004 61 2140 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 621 621 334 2140 40 2044 41 58 2141 61 2046 40 2142 61 1502 44 2304 61 648 41 2217 61 2046 40 2072 61 2144 41 2305 61 2046 40 2072 61 2169 44 2113 61 648 44 2304 61 648 41 2004 61 2140 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 348 2306 40 2003 41 58 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 334 2307 40 2005 41 58 2308 61 2046 40 41 2004 61 2005 40 2055 61 302 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2309 61 2307 40 2055 61 302 41 2003 46 2013 40 2309 46 2014 40 41 44 648 41 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 334 2310 40 2044 41 58 2308 61 2046 40 41 334 2311 40 2005 44 2310 41 58 2312 61 2046 40 41 2313 61 2311 40 2055 61 302 41 2003 46 2013 40 2313 46 2014 40 41 44 648 41 348 2314 40 2003 41 58 621 621 621 621 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2003 46 2008 40 2004 46 2009 44 123 125 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 91 648 93 46 2009 44 91 648 93 41 621 497 2003 46 2038 40 2022 41 58 2004 91 648 93 46 2009 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 2003 46 2008 40 2004 46 2009 91 648 93 44 91 648 93 41 621 621 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 125 2316 61 2005 40 2028 44 2315 61 648 41 2003 46 2006 40 2316 46 2012 40 41 41 2003 46 2008 40 2316 46 2016 91 648 93 44 648 41 2003 46 2008 40 2316 46 2016 91 648 93 44 648 41 2003 46 2008 40 2316 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 2317 61 2005 40 2028 44 2315 61 648 41 2003 46 2006 40 2317 46 2012 40 41 41 2003 46 2008 40 2317 46 2016 91 648 93 44 648 41 2003 46 2008 40 2317 46 2016 91 648 93 44 648 41 2003 46 2008 40 2317 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1503 44 1502 41 41 621 621 621 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 2110 61 2052 40 41 348 2318 40 2003 44 2251 41 58 450 648 37 40 2003 46 2315 44 2251 41 392 2003 46 2315 360 2251 2004 61 2005 40 2315 61 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2028 61 123 648 58 648 44 648 58 648 44 648 58 648 125 2004 61 2005 40 2028 44 2315 61 648 41 2003 46 2006 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 648 41 2003 46 2008 40 2004 46 2016 91 648 93 44 2017 46 2018 40 1505 44 1502 44 1502 41 41 348 2319 40 2003 41 58 621 334 2005 40 2044 41 58 2045 61 2046 40 41 2315 61 648 2004 61 2005 40 41 2003 46 2008 40 2004 46 2315 44 648 41 2004 61 2005 40 2315 61 648 41 2003 46 2008 40 2004 46 2315 44 648 41 348 2320 40 2003 41 58 621 621 334 2005 40 2044 41 58 2079 61 2046 40 41 2321 61 2322 40 41 2004 61 2005 40 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 304 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 302 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2019 40 2004 91 648 93 41 44 648 41 348 2323 40 2003 41 58 621 621 334 2324 40 2044 41 58 2325 61 2326 40 41 2050 61 2324 40 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 2327 40 648 44 648 41 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 648 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 2327 40 648 44 648 41 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 2003 46 2006 40 2050 46 2012 40 41 41 2325 61 2327 40 648 44 648 46 2328 40 41 41 2050 61 2324 40 2028 61 123 125 44 2035 61 123 648 58 2325 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 621 621 621 2050 61 2324 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 348 2329 40 2003 41 58 334 2324 40 2156 46 2044 41 58 2325 61 2156 46 2326 40 2113 61 409 58 648 41 2050 61 2324 40 123 125 41 2003 46 2008 40 2050 46 2009 44 123 125 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2330 40 2003 41 58 334 2324 40 2044 41 58 2325 61 2156 46 2326 40 2072 61 2331 41 2050 61 2324 40 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 44 41 621 621 621 2050 61 2324 40 2113 61 123 648 58 648 125 44 2055 61 302 41 2003 46 2013 40 2050 46 2031 40 41 44 648 44 41 348 2332 40 2003 41 58 621 621 621 334 2105 40 2044 41 58 2333 61 2046 40 41 2079 61 2046 40 41 621 2028 61 123 648 58 648 44 648 58 648 125 2116 61 2105 40 2028 44 2334 61 302 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 93 44 648 58 91 648 93 125 41 2003 46 2008 40 2116 46 2016 44 123 125 41 621 2116 61 2105 40 2028 44 2334 61 304 44 2335 61 302 41 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 125 41 2003 46 2008 40 2116 46 2016 44 123 125 41 621 621 2028 61 123 648 58 648 44 648 58 648 125 2116 61 2105 40 2028 44 2334 61 302 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 93 125 41 2003 46 2008 40 2116 46 2016 44 123 648 58 648 125 41 621 621 621 2028 61 123 648 58 303 44 648 58 648 125 2116 61 2105 40 2028 44 2334 61 304 44 2335 61 302 41 2003 46 2006 40 2116 46 2012 40 41 41 621 621 334 2336 40 2044 41 58 2337 61 2338 40 41 2339 61 2245 40 41 2028 61 123 648 58 648 44 648 58 648 125 2116 61 2336 40 2028 44 2113 61 123 648 58 1500 125 44 2334 61 304 44 2335 61 302 41 2003 46 2006 40 2116 46 2012 40 41 41 348 2340 40 2003 41 58 2020 61 40 648 648 41 497 2003 46 2021 40 2149 44 2020 41 58 2005 40 2334 61 304 44 2335 61 304 41 348 2341 40 2003 41 58 334 2105 40 2044 41 58 2342 61 2046 40 2072 61 2169 41 2333 61 2046 40 41 2079 61 2046 40 41 2116 61 2105 40 41 2003 46 2008 40 91 2050 46 2079 385 2050 398 2116 46 2343 40 41 93 44 91 648 93 41 2003 46 2008 40 91 2050 46 2079 385 2050 398 2116 46 2344 40 41 93 44 91 648 44 648 93 41 348 2345 40 2003 41 58 334 2175 40 2044 41 58 2194 61 2046 40 2142 61 1503 44 2265 61 304 41 2003 46 2013 40 2175 40 41 46 2031 40 41 44 648 648 648 41 348 2346 40 2003 41 58 334 2005 40 2044 41 58 2079 61 2046 40 41 2321 61 2322 40 41 2063 61 2064 40 2049 61 302 41 2244 61 2245 40 41 2004 61 2005 40 123 125 41 2004 46 2347 61 648 2004 46 2348 61 648 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2349 40 2003 41 58 648 334 2350 40 2044 41 58 2348 61 648 2101 61 2046 40 2142 61 1502 41 2195 61 2245 40 2049 61 302 41 2050 61 2350 40 123 648 58 648 125 41 2003 46 2013 40 2050 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2352 40 41 44 648 44 41 2003 46 2013 40 2050 91 648 93 46 2351 40 2076 61 123 648 58 648 125 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2352 40 2076 61 123 648 58 648 125 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2050 91 648 93 46 2352 40 41 44 648 44 41 348 2353 40 2003 41 58 334 2354 40 2044 41 58 2355 61 2121 40 2072 61 2356 41 2116 61 2354 40 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 41 348 2357 40 2003 41 58 348 2358 40 2117 41 58 392 2117 614 648 58 440 2137 40 648 41 334 2359 40 2360 41 58 348 2172 40 2003 44 2084 61 40 41 44 42 2173 44 638 2174 41 58 2084 61 40 2046 40 2027 61 648 44 2142 61 1502 41 44 2046 40 2027 61 648 44 2142 61 1502 41 41 463 40 41 46 2172 40 2084 61 2084 44 42 2173 44 638 2174 41 348 2361 40 2003 44 2362 41 58 450 648 46 2026 40 2362 41 334 2363 40 2044 41 58 2079 61 2359 40 2186 61 91 2358 93 41 2116 61 2363 40 2028 61 123 648 58 91 648 44 648 93 125 41 2116 46 2364 40 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 93 125 41 2116 61 2363 40 2028 61 123 648 58 91 648 44 648 93 125 41 2003 46 2030 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2009 44 123 648 58 91 648 44 648 44 93 44 125 41 2116 61 2363 40 2028 61 123 648 58 91 648 44 648 93 125 41 2003 46 2006 40 2116 46 2012 40 41 41 2003 46 2008 40 2116 46 2016 44 123 648 58 648 125 41 348 2365 40 2003 41 58 648 334 2366 40 2360 41 58 348 2172 40 2003 44 2084 61 40 41 44 42 2173 44 638 2174 41 58 2084 61 40 2081 40 2027 61 648 44 2082 61 40 40 1501 44 1501 41 44 40 1502 44 1502 41 41 41 44 2046 40 2027 61 648 44 2142 61 1502 41 44 41 463 40 41 46 2172 40 2084 61 2084 44 42 2173 44 638 2174 41 2101 61 2366 40 41 2195 61 2367 46 2368 40 2101 41 2003 46 2010 40 2195 44 2366 41 2003 46 2369 40 2195 46 2084 44 2101 46 2084 41 2003 46 2369 40 2195 46 2084 91 1500 93 46 2082 44 2101 46 2084 91 1500 93 46 2082 41 348 2370 40 2003 41 58 648 334 2371 40 2360 41 58 348 2172 40 2003 44 2084 61 40 41 44 42 2173 44 638 2174 41 58 2084 61 40 2052 40 2027 61 648 41 44 2245 40 2027 61 648 41 41 463 40 41 46 2172 40 2084 61 2084 44 42 2173 44 638 2174 41 334 2372 40 2044 41 58 2373 61 2371 40 41 2028 61 123 648 58 91 648 44 1503 93 125 2116 61 2372 40 2028 44 2113 61 123 648 58 91 648 44 1503 93 125 41 2003 46 2006 40 2116 46 2374 40 41 41 348 2375 40 2003 41 58 334 2376 40 2360 41 58 348 2172 40 2003 44 42 2173 44 638 2174 41 58 2084 61 40 2046 40 2027 61 648 44 2186 61 91 2377 40 648 44 2071 61 648 41 93 41 44 2046 40 2027 61 648 41 44 2046 40 2027 61 648 44 2378 61 123 648 58 648 125 41 44 2046 40 2027 61 648 44 2049 61 302 44 2304 61 648 41 44 41 463 40 41 46 2172 40 2084 44 42 2173 44 638 2174 41 348 2361 40 2003 44 2362 41 58 392 2362 58 450 648 37 2379 40 2362 41 450 303 621 621 2050 61 2376 40 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 648 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 303 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 93 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 621 621 2050 61 2376 40 2049 61 302 41 2003 46 2053 40 2050 46 2147 40 648 41 41 2003 46 2053 40 2050 46 2147 40 303 41 41 2003 46 2053 40 2050 46 2147 40 91 93 41 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 93 41 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 93 41 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 621 621 621 621 2050 61 2376 40 2380 61 302 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 648 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 303 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 93 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 621 621 2050 61 2376 40 2049 61 302 44 2380 61 302 41 2003 46 2053 40 2050 46 2147 40 648 41 41 2003 46 2053 40 2050 46 2147 40 303 41 41 2003 46 2053 40 2050 46 2147 40 91 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 93 41 2003 46 2008 40 648 44 2050 46 2147 40 91 648 44 648 44 648 93 41 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 497 2003 46 2021 40 2137 44 648 41 58 2050 46 2147 40 91 648 44 648 44 648 44 648 93 41 348 2381 40 2003 41 58 334 2382 40 2383 41 58 348 2172 40 2003 44 2076 61 303 41 58 2384 61 91 2219 40 41 44 2219 40 41 93 463 40 41 46 2172 40 2384 44 2076 41 348 2385 40 2003 44 2117 41 58 450 91 303 44 303 93 334 2376 40 2360 41 58 348 2172 40 2003 44 42 2173 44 638 2174 41 58 2084 61 91 2046 40 41 44 2046 40 2049 61 302 41 93 463 40 41 46 2172 40 2084 44 42 2173 44 638 2174 41 334 2386 40 2044 41 58 2387 61 2376 40 2072 61 2382 41 2388 61 2376 40 2072 61 2382 44 2049 61 302 41 2389 61 2376 40 2072 61 2382 44 2380 61 302 41 2390 61 2376 40 2072 61 2382 44 2049 61 302 44 2380 61 302 44 41 2116 61 2386 40 2055 61 302 41 2003 46 2013 40 2116 46 2032 40 41 44 648 44 41 348 2391 40 2003 41 58 648 334 2392 40 2046 41 58 2393 61 91 303 44 648 93 348 2262 40 2003 44 2117 41 58 621 392 2117 614 648 58 450 123 125 450 463 40 41 46 2262 40 2117 41 334 2394 40 2156 46 2044 41 58 2395 61 2392 40 41 2116 61 2394 40 2028 61 123 648 58 648 125 41 2116 46 2364 40 41 2003 46 2008 40 2116 46 2016 44 123 648 58 123 125 125 41 348 2396 40 2003 41 58 334 2350 40 2044 41 58 2101 61 2046 40 41 2024 61 2350 40 41 91 648 93 2397 61 91 621 621 40 40 41 44 123 125 44 648 41 44 621 40 40 648 44 41 44 123 125 44 648 41 44 621 40 40 648 44 41 44 123 125 44 648 41 44 40 40 2135 40 648 41 44 41 44 123 125 44 648 41 44 621 40 40 41 44 123 648 58 123 648 58 648 125 125 44 648 44 41 44 93 385 2173 44 2174 44 2252 398 2397 58 497 2003 46 2253 40 2173 61 2173 44 2174 61 2174 41 58 2003 46 2013 40 2024 46 2351 40 42 2173 44 638 2174 41 44 2252 37 123 648 58 648 125 44 41 2003 46 2013 40 2024 46 2352 40 42 2173 44 638 2174 41 44 2252 37 123 648 58 648 125 44 41 348 2398 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2046 40 41 2024 61 2350 40 2055 61 648 41 91 648 93 2003 46 2013 40 2024 46 2351 40 41 44 648 41 2003 46 2013 40 2024 46 2352 40 41 44 648 41 2003 46 2013 40 2024 46 2351 40 648 41 44 648 41 2003 46 2013 40 2024 46 2352 40 648 41 44 648 41 348 2399 40 2003 41 58 334 2400 40 2219 41 58 348 2092 40 2003 44 2401 41 58 450 648 43 2401 334 2402 40 2219 41 58 348 2092 40 2003 44 2401 41 58 450 303 334 2350 40 2044 41 58 2403 61 2046 40 2072 61 2400 41 362 61 2046 40 2072 61 2402 41 2116 61 2350 40 41 2003 46 2013 40 2116 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2116 91 648 93 46 2352 40 41 44 648 44 41 2003 46 2013 40 2116 91 648 93 46 2351 40 41 44 648 41 2003 46 2013 40 2116 91 648 93 46 2352 40 41 44 648 41 348 2404 40 2003 41 58 334 2350 40 2044 41 58 2101 61 2046 40 2027 61 648 41 2024 61 2350 40 41 91 648 93 2003 46 2013 40 2024 46 2351 40 41 44 648 41 2003 46 2013 40 2024 46 2352 40 41 44 648 44 41 348 2405 40 2003 41 58 334 2350 40 2044 41 58 2101 61 2046 40 2027 61 648 41 2003 46 2008 40 2350 40 41 91 648 93 46 2092 44 648 41 348 2406 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2046 40 2072 61 2219 40 2076 61 123 648 58 648 125 41 41 2407 61 2046 40 2072 61 2219 40 2076 61 123 648 58 303 125 41 41 2116 61 2350 40 41 2003 46 2008 40 2116 91 648 93 46 2092 44 648 41 2003 46 2008 40 2116 91 648 93 46 2092 44 648 41 348 2408 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2107 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 44 2072 61 2124 44 41 2116 61 2350 40 2055 61 648 41 2409 61 2116 91 648 93 46 2409 2003 46 2008 40 2409 91 1500 93 46 2092 44 648 41 2003 46 2008 40 2409 91 1501 93 46 2092 44 648 41 348 2410 40 2003 41 58 334 2350 40 2044 41 58 2045 61 2046 40 41 2110 61 2121 40 2072 61 2356 41 2050 61 2350 40 41 2003 46 2008 40 2050 91 648 93 46 2411 44 648 41 2003 46 2008 40 2050 91 648 93 46 2411 44 648 41 348 2412 40 2003 41 58 2116 61 2005 40 41 2101 61 2116 91 648 93 2003 46 2008 40 2101 46 2413 40 41 44 648 41 2003 46 2008 40 2101 46 2413 40 2414 61 648 41 44 648 41 2003 46 2008 40 2101 46 2413 40 2414 61 648 41 44 648 41 2003 46 2008 40 2101 46 2413 40 2414 61 648 41 44 648 41 348 2415 40 2003 41 58 648 334 2350 40 2044 41 58 2101 61 2046 40 41 2024 61 2350 40 2233 61 648 41 91 648 93 2003 46 2013 40 2024 46 2351 40 2233 61 648 41 44 648 41 2003 46 2013 40 2024 46 2352 40 2233 61 648 41 44 648 44 41 348 2416 40 2003 41 58 334 2175 40 2044 41 58 2191 61 2046 40 41 2192 61 2046 40 41 348 2147 40 2003 41 58 440 2137 40 648 44 2152 61 648 44 433 61 123 648 58 1501 44 648 58 1502 125 41 2116 61 2175 40 123 125 41 2003 46 2036 40 2116 46 2012 40 41 44 302 41 2009 61 2116 46 2009 46 2015 40 41 2417 61 91 648 44 648 44 648 44 93 385 371 398 2417 58 2003 46 2259 40 371 44 2009 41 2009 61 2116 46 2009 46 2014 40 41 2417 61 91 648 44 648 44 648 44 93 385 371 398 2417 58 2003 46 2418 40 371 44 2009 41 2009 61 2116 46 2009 46 2419 40 41 2417 61 123 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 125 2003 46 2008 40 2009 44 2417 41 2003 46 2008 40 2395 46 2420 40 2009 41 44 2116 46 2009 46 2421 40 41 41 348 2422 40 2003 41 58 648 334 2175 40 2044 41 58 2191 61 2046 40 41 2192 61 2046 40 41 348 2147 40 2003 41 58 440 2137 40 648 44 2152 61 648 44 433 61 123 648 58 1501 44 648 58 1502 125 44 41 2417 61 123 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 44 648 58 91 123 648 58 648 44 648 58 648 125 93 125 2116 61 2175 40 123 125 41 2003 46 2030 40 2116 46 2012 40 41 41 2009 61 2395 46 2423 40 2116 46 2009 46 2421 40 41 41 2003 46 2008 40 2009 44 2417 41 2424 61 648 2003 46 2008 40 2116 46 2009 46 2419 40 2425 61 304 41 91 648 93 91 1500 93 91 648 93 44 2424 41 2009 61 2395 46 2423 40 2116 46 2009 46 2421 40 2425 61 304 41 41 2417 91 648 93 91 1500 93 91 648 93 61 2424 2003 46 2008 40 2009 44 2417 41 348 2426 40 2003 41 58 2153 61 2157 40 41 2153 46 2025 40 648 41 2153 46 2025 40 2137 40 648 44 2152 61 648 44 433 61 123 648 58 648 125 41 41 2003 46 2010 40 2153 44 411 41 2003 46 2259 40 648 44 2153 41 2003 46 2259 40 648 44 2137 40 2153 41 41 2003 46 2008 40 2153 46 2015 40 41 44 648 41 2003 46 2008 40 2153 46 2014 40 41 44 648 41 2009 61 2153 46 2419 40 41 2003 46 2008 40 2009 44 91 123 648 58 648 44 648 58 648 125 44 123 648 58 648 44 648 58 648 125 93 41 2003 46 2008 40 2395 46 2420 40 2009 41 44 2153 46 2421 40 41 41 348 2427 40 2003 41 58 2153 61 2157 40 41 2153 46 2025 40 648 41 2153 46 2025 40 2137 40 648 44 2152 61 648 44 433 61 123 648 58 648 125 41 41 2003 46 2008 40 2153 46 2014 40 41 44 648 41 348 2428 40 2003 41 58 2153 61 2157 40 2161 61 648 41 2153 46 2025 40 648 41 2153 46 2025 40 2137 40 648 44 2152 61 648 44 433 61 123 648 58 648 125 41 41 2003 46 2008 40 2153 46 2014 40 41 44 648 41 348 2429 40 2003 41 58 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 2072 61 2169 41 2004 61 2005 40 123 648 58 648 125 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2430 40 2003 41 58 334 2005 40 2044 41 58 2045 61 2046 40 41 2047 61 2046 40 41 348 2147 40 2003 41 58 440 2137 40 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 125 41 2003 46 2013 40 2019 40 2004 46 2431 40 41 41 44 648 41 2003 46 2013 40 2004 46 2014 40 41 44 648 41 2003 46 2013 40 2004 46 2431 40 41 46 2015 40 41 44 648 41 2003 46 2013 40 2004 46 2032 40 41 44 648 41 2003 46 2013 40 2004 46 2031 40 41 44 648 41 348 2432 40 2003 41 58 334 2100 40 2044 41 58 2433 61 2046 40 2072 61 2169 40 41 44 2049 61 302 41 2434 61 2046 40 41 348 2435 40 2003 41 58 440 2137 40 648 41 2436 61 2435 2116 61 2100 40 123 648 58 648 44 648 58 648 125 41 2116 46 2012 40 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 648 648 648 41 348 2437 40 2003 41 58 648 2004 61 2005 40 41 2003 46 2008 40 2438 40 2004 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2003 46 2008 40 2438 40 2004 41 44 648 41 2004 46 2012 40 41 2003 46 2008 40 2438 40 2004 41 44 648 41 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2004 46 2012 40 41 2003 46 2008 40 2438 40 2004 41 44 648 41 348 2439 40 2003 41 58 648 2004 61 2005 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2438 40 2004 41 497 2003 46 2038 40 2039 41 58 2004 46 2016 2003 46 2030 40 2004 46 2012 40 41 41 2003 46 2008 40 2004 46 2016 44 123 648 58 648 44 648 58 648 125 41 348 2440 40 2003 41 58 334 2441 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 2028 61 2003 46 2016 392 422 2003 46 2009 58 2028 91 648 93 61 2028 91 648 93 46 2442 40 41 450 2028 2050 61 2441 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2443 40 2003 41 58 334 2441 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 2003 46 2016 91 648 93 61 2003 46 2016 91 648 93 46 2442 40 41 621 2050 61 2441 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2444 40 2003 41 58 334 2441 40 2044 41 58 2141 61 2046 40 2142 61 1502 41 2217 61 2046 40 2072 61 2144 41 348 2147 40 2003 41 58 2028 61 2003 46 2016 621 450 123 648 58 2028 91 648 93 46 2442 40 41 44 648 58 648 44 125 2050 61 2441 40 123 648 58 648 44 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 91 648 93 44 648 41 348 2445 40 2003 41 58 334 2446 40 2044 41 58 2141 61 2046 40 41 334 2447 40 2044 41 58 2141 61 2046 40 41 2448 61 2326 40 41 334 2449 40 2044 41 58 2450 61 2451 40 41 2003 46 2030 40 2446 40 41 46 2452 40 41 41 2003 46 2006 40 2447 40 41 46 2452 40 41 41 2003 46 2006 40 2449 40 41 46 2452 40 41 41 348 2453 40 2003 41 58 334 2454 40 2044 41 58 2141 61 2046 40 41 2116 61 2454 40 41 2003 46 2006 40 2455 40 2454 44 648 41 41 2003 46 2008 40 2019 40 2116 41 44 2116 46 2456 40 41 41 2003 46 2006 40 2455 40 2116 91 648 93 44 648 41 41 2003 46 2008 40 2019 40 2116 91 648 93 41 44 2116 91 648 93 46 2456 40 41 41 348 2457 40 2003 41 58 334 2175 40 2044 41 58 2335 61 304 2114 61 2046 40 2142 61 1503 41 2115 61 2046 40 2142 61 1503 44 2049 61 302 41 2458 61 2046 40 2072 61 2073 41 2459 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2116 61 2175 40 41 2003 46 2013 40 2116 46 2032 40 41 44 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2031 40 41 44 648 648 648 648 648 648 648 648 648 648 648 44 41 348 2460 40 2003 41 58 334 2175 40 2044 41 58 2335 61 302 2114 61 2046 40 2142 61 1503 41 2115 61 2046 40 2142 61 1503 44 2049 61 302 41 2458 61 2046 40 2072 61 2073 41 2459 61 2081 40 2082 61 91 40 648 44 648 41 44 40 648 44 648 41 93 41 2116 61 2175 40 41 2003 46 2013 40 2116 46 2032 40 41 44 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2014 40 41 44 648 648 648 648 648 648 648 648 44 41 2003 46 2013 40 2116 46 2031 40 41 44 648 648 648 648 648 648 648 648 648 648 44 41 348 2461 40 2003 41 58 621 334 2462 40 2044 41 58 2028 61 2245 40 2072 61 2169 41 2050 61 2462 40 123 125 41 2003 46 2013 40 2050 46 2032 40 41 44 648 648 648 41 2003 46 2013 40 2050 46 2031 40 41 44 648 648 648 41 348 2463 40 2003 41 58 334 2464 40 2044 41 58 2028 61 2046 40 2142 61 1502 41 2050 61 2464 40 123 648 58 648 125 41 2003 46 2006 40 2050 46 2012 40 41 41 2003 46 2008 40 2050 46 2016 44 123 648 58 648 125 41 348 2465 40 2003 41 58 2004 61 2005 40 41 2003 46 2010 40 2004 46 2028 44 2126 41 2003 46 2010 40 2004 46 2035 44 2126 41 348 2466 40 2003 41 58 334 2467 40 2046 41 58 348 2172 40 2003 44 638 2174 41 58 2174 91 648 93 61 123 648 58 648 125 463 40 41 46 2172 40 638 2174 41 2101 61 2467 40 41 2468 61 2367 46 2368 40 2101 41 2003 46 2010 40 2468 44 2467 41 2003 46 2369 40 2468 46 2378 44 2101 46 2378 41 348 2469 40 2003 41 58 2116 61 2005 40 41 2101 61 2116 91 648 93 2003 46 2008 40 2101 46 2351 40 41 44 648 41 2003 46 2008 40 2101 46 2352 40 41 44 648 44 41 64 2470 40 2471 61 304 41 348 2472 40 2003 41 58 2116 61 2005 40 41 2101 61 2116 91 648 93 2003 46 2013 40 2101 46 2351 40 2076 61 123 648 58 1505 125 41 44 648 44 41 2003 46 2013 40 2101 46 2352 40 2076 61 123 648 58 1505 125 41 44 648 44 41 
128807,Python,"class ATNDeserializer (object):
    __slots__ = ('deserializationOptions', 'data', 'pos', 'uuid')

    def __init__(self, options : ATNDeserializationOptions = None):
        if options is None:
            options = ATNDeserializationOptions.defaultOptions
        self.deserializationOptions = options

    # Determines if a particular serialized representation of an ATN supports
    # a particular feature, identified by the {@link UUID} used for serializing
    # the ATN at the time the feature was first introduced.
    #
    # @param feature The {@link UUID} marking the first time the feature was
    # supported in the serialized ATN.
    # @param actualUuid The {@link UUID} of the actual serialized ATN which is
    # currently being deserialized.
    # @return {@code true} if the {@code actualUuid} value represents a
    # serialized ATN at or after the feature identified by {@code feature} was
    # introduced; otherwise, {@code false}.

    def isFeatureSupported(self, feature : UUID , actualUuid : UUID ):
        idx1 = SUPPORTED_UUIDS.index(feature)
        if idx1<0:
            return False
        idx2 = SUPPORTED_UUIDS.index(actualUuid)
        return idx2 >= idx1

    def deserialize(self, data : str):
        self.reset(data)
        self.checkVersion()
        self.checkUUID()
        atn = self.readATN()
        self.readStates(atn)
        self.readRules(atn)
        self.readModes(atn)
        sets = []
        # First, read all sets with 16-bit Unicode code points <= U+FFFF.
        self.readSets(atn, sets, self.readInt)
        # Next, if the ATN was serialized with the Unicode SMP feature,
        # deserialize sets with 32-bit arguments <= U+10FFFF.
        if self.isFeatureSupported(ADDED_UNICODE_SMP, self.uuid):
            self.readSets(atn, sets, self.readInt32)
        self.readEdges(atn, sets)
        self.readDecisions(atn)
        self.readLexerActions(atn)
        self.markPrecedenceDecisions(atn)
        self.verifyATN(atn)
        if self.deserializationOptions.generateRuleBypassTransitions \
                and atn.grammarType == ATNType.PARSER:
            self.generateRuleBypassTransitions(atn)
            # re-verify after modification
            self.verifyATN(atn)
        return atn

    def reset(self, data:str):
        def adjust(c):
            v = ord(c)
            return v-2 if v>1 else v + 65533
        temp = [ adjust(c) for c in data ]
        # don't adjust the first value since that's the version number
        temp[0] = ord(data[0])
        self.data = temp
        self.pos = 0

    def checkVersion(self):
        version = self.readInt()
        if version != SERIALIZED_VERSION:
            raise Exception(""Could not deserialize ATN with version "" + str(version) + "" (expected "" + str(SERIALIZED_VERSION) + "")."")

    def checkUUID(self):
        uuid = self.readUUID()
        if not uuid in SUPPORTED_UUIDS:
            raise Exception(""Could not deserialize ATN with UUID: "" + str(uuid) + \
                            "" (expected "" + str(SERIALIZED_UUID) + "" or a legacy UUID)."", uuid, SERIALIZED_UUID)
        self.uuid = uuid

    def readATN(self):
        idx = self.readInt()
        grammarType = ATNType.fromOrdinal(idx)
        maxTokenType = self.readInt()
        return ATN(grammarType, maxTokenType)

    def readStates(self, atn:ATN):
        loopBackStateNumbers = []
        endStateNumbers = []
        nstates = self.readInt()
        for i in range(0, nstates):
            stype = self.readInt()
            # ignore bad type of states
            if stype==ATNState.INVALID_TYPE:
                atn.addState(None)
                continue
            ruleIndex = self.readInt()
            if ruleIndex == 0xFFFF:
                ruleIndex = -1

            s = self.stateFactory(stype, ruleIndex)
            if stype == ATNState.LOOP_END: # special case
                loopBackStateNumber = self.readInt()
                loopBackStateNumbers.append((s, loopBackStateNumber))
            elif isinstance(s, BlockStartState):
                endStateNumber = self.readInt()
                endStateNumbers.append((s, endStateNumber))

            atn.addState(s)

        # delay the assignment of loop back and end states until we know all the state instances have been initialized
        for pair in loopBackStateNumbers:
            pair[0].loopBackState = atn.states[pair[1]]

        for pair in endStateNumbers:
            pair[0].endState = atn.states[pair[1]]

        numNonGreedyStates = self.readInt()
        for i in range(0, numNonGreedyStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].nonGreedy = True

        numPrecedenceStates = self.readInt()
        for i in range(0, numPrecedenceStates):
            stateNumber = self.readInt()
            atn.states[stateNumber].isPrecedenceRule = True

    def readRules(self, atn:ATN):
        nrules = self.readInt()
        if atn.grammarType == ATNType.LEXER:
            atn.ruleToTokenType = [0] * nrules

        atn.ruleToStartState = [0] * nrules
        for i in range(0, nrules):
            s = self.readInt()
            startState = atn.states[s]
            atn.ruleToStartState[i] = startState
            if atn.grammarType == ATNType.LEXER:
                tokenType = self.readInt()
                if tokenType == 0xFFFF:
                    tokenType = Token.EOF

                atn.ruleToTokenType[i] = tokenType

        atn.ruleToStopState = [0] * nrules
        for state in atn.states:
            if not isinstance(state, RuleStopState):
                continue
            atn.ruleToStopState[state.ruleIndex] = state
            atn.ruleToStartState[state.ruleIndex].stopState = state

    def readModes(self, atn:ATN):
        nmodes = self.readInt()
        for i in range(0, nmodes):
            s = self.readInt()
            atn.modeToStartState.append(atn.states[s])

    def readSets(self, atn:ATN, sets:list, readUnicode:Callable[[], int]):
        m = self.readInt()
        for i in range(0, m):
            iset = IntervalSet()
            sets.append(iset)
            n = self.readInt()
            containsEof = self.readInt()
            if containsEof!=0:
                iset.addOne(-1)
            for j in range(0, n):
                i1 = readUnicode()
                i2 = readUnicode()
                iset.addRange(range(i1, i2 + 1)) # range upper limit is exclusive

    def readEdges(self, atn:ATN, sets:list):
        nedges = self.readInt()
        for i in range(0, nedges):
            src = self.readInt()
            trg = self.readInt()
            ttype = self.readInt()
            arg1 = self.readInt()
            arg2 = self.readInt()
            arg3 = self.readInt()
            trans = self.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets)
            srcState = atn.states[src]
            srcState.addTransition(trans)

        # edges for rule stop states can be derived, so they aren't serialized
        for state in atn.states:
            for i in range(0, len(state.transitions)):
                t = state.transitions[i]
                if not isinstance(t, RuleTransition):
                    continue
                outermostPrecedenceReturn = -1
                if atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule:
                    if t.precedence == 0:
                        outermostPrecedenceReturn = t.target.ruleIndex
                trans = EpsilonTransition(t.followState, outermostPrecedenceReturn)
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans)

        for state in atn.states:
            if isinstance(state, BlockStartState):
                # we need to know the end state to set its start state
                if state.endState is None:
                    raise Exception(""IllegalState"")
                # block end states can only be associated to a single block start state
                if state.endState.startState is not None:
                    raise Exception(""IllegalState"")
                state.endState.startState = state

            if isinstance(state, PlusLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, PlusBlockStartState):
                        target.loopBackState = state
            elif isinstance(state, StarLoopbackState):
                for i in range(0, len(state.transitions)):
                    target = state.transitions[i].target
                    if isinstance(target, StarLoopEntryState):
                        target.loopBackState = state

    def readDecisions(self, atn:ATN):
        ndecisions = self.readInt()
        for i in range(0, ndecisions):
            s = self.readInt()
            decState = atn.states[s]
            atn.decisionToState.append(decState)
            decState.decision = i

    def readLexerActions(self, atn:ATN):
        if atn.grammarType == ATNType.LEXER:
            count = self.readInt()
            atn.lexerActions = [ None ] * count
            for i in range(0, count):
                actionType = self.readInt()
                data1 = self.readInt()
                if data1 == 0xFFFF:
                    data1 = -1
                data2 = self.readInt()
                if data2 == 0xFFFF:
                    data2 = -1
                lexerAction = self.lexerActionFactory(actionType, data1, data2)
                atn.lexerActions[i] = lexerAction

    def generateRuleBypassTransitions(self, atn:ATN):

        count = len(atn.ruleToStartState)
        atn.ruleToTokenType = [ 0 ] * count
        for i in range(0, count):
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1

        for i in range(0, count):
            self.generateRuleBypassTransition(atn, i)

    def generateRuleBypassTransition(self, atn:ATN, idx:int):

        bypassStart = BasicBlockStartState()
        bypassStart.ruleIndex = idx
        atn.addState(bypassStart)

        bypassStop = BlockEndState()
        bypassStop.ruleIndex = idx
        atn.addState(bypassStop)

        bypassStart.endState = bypassStop
        atn.defineDecisionState(bypassStart)

        bypassStop.startState = bypassStart

        excludeTransition = None

        if atn.ruleToStartState[idx].isPrecedenceRule:
            # wrap from the beginning of the rule to the StarLoopEntryState
            endState = None
            for state in atn.states:
                if self.stateIsEndStateFor(state, idx):
                    endState = state
                    excludeTransition = state.loopBackState.transitions[0]
                    break

            if excludeTransition is None:
                raise Exception(""Couldn't identify final state of the precedence rule prefix section."")

        else:

            endState = atn.ruleToStopState[idx]

        # all non-excluded transitions that currently target end state need to target blockEnd instead
        for state in atn.states:
            for transition in state.transitions:
                if transition == excludeTransition:
                    continue
                if transition.target == endState:
                    transition.target = bypassStop

        # all transitions leaving the rule start state need to leave blockStart instead
        ruleToStartState = atn.ruleToStartState[idx]
        count = len(ruleToStartState.transitions)
        while count > 0:
            bypassStart.addTransition(ruleToStartState.transitions[count-1])
            del ruleToStartState.transitions[-1]

        # link the new states
        atn.ruleToStartState[idx].addTransition(EpsilonTransition(bypassStart))
        bypassStop.addTransition(EpsilonTransition(endState))

        matchState = BasicState()
        atn.addState(matchState)
        matchState.addTransition(AtomTransition(bypassStop, atn.ruleToTokenType[idx]))
        bypassStart.addTransition(EpsilonTransition(matchState))


    def stateIsEndStateFor(self, state:ATNState, idx:int):
        if state.ruleIndex != idx:
            return None
        if not isinstance(state, StarLoopEntryState):
            return None

        maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
        if not isinstance(maybeLoopEndState, LoopEndState):
            return None

        if maybeLoopEndState.epsilonOnlyTransitions and \
                isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
            return state
        else:
            return None


    #
    # Analyze the {@link StarLoopEntryState} states in the specified ATN to set
    # the {@link StarLoopEntryState#isPrecedenceDecision} field to the
    # correct value.
    #
    # @param atn The ATN.
    #
    def markPrecedenceDecisions(self, atn:ATN):
        for state in atn.states:
            if not isinstance(state, StarLoopEntryState):
                continue

            # We analyze the ATN to determine if this ATN decision state is the
            # decision for the closure block that determines whether a
            # precedence rule should continue or complete.
            #
            if atn.ruleToStartState[state.ruleIndex].isPrecedenceRule:
                maybeLoopEndState = state.transitions[len(state.transitions) - 1].target
                if isinstance(maybeLoopEndState, LoopEndState):
                    if maybeLoopEndState.epsilonOnlyTransitions and \
                            isinstance(maybeLoopEndState.transitions[0].target, RuleStopState):
                        state.isPrecedenceDecision = True

    def verifyATN(self, atn:ATN):
        if not self.deserializationOptions.verifyATN:
            return
        # verify assumptions
        for state in atn.states:
            if state is None:
                continue

            self.checkCondition(state.epsilonOnlyTransitions or len(state.transitions) <= 1)

            if isinstance(state, PlusBlockStartState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, StarLoopEntryState):
                self.checkCondition(state.loopBackState is not None)
                self.checkCondition(len(state.transitions) == 2)

                if isinstance(state.transitions[0].target, StarBlockStartState):
                    self.checkCondition(isinstance(state.transitions[1].target, LoopEndState))
                    self.checkCondition(not state.nonGreedy)
                elif isinstance(state.transitions[0].target, LoopEndState):
                    self.checkCondition(isinstance(state.transitions[1].target, StarBlockStartState))
                    self.checkCondition(state.nonGreedy)
                else:
                    raise Exception(""IllegalState"")

            if isinstance(state, StarLoopbackState):
                self.checkCondition(len(state.transitions) == 1)
                self.checkCondition(isinstance(state.transitions[0].target, StarLoopEntryState))

            if isinstance(state, LoopEndState):
                self.checkCondition(state.loopBackState is not None)

            if isinstance(state, RuleStartState):
                self.checkCondition(state.stopState is not None)

            if isinstance(state, BlockStartState):
                self.checkCondition(state.endState is not None)

            if isinstance(state, BlockEndState):
                self.checkCondition(state.startState is not None)

            if isinstance(state, DecisionState):
                self.checkCondition(len(state.transitions) <= 1 or state.decision >= 0)
            else:
                self.checkCondition(len(state.transitions) <= 1 or isinstance(state, RuleStopState))

    def checkCondition(self, condition:bool, message=None):
        if not condition:
            if message is None:
                message = ""IllegalState""
            raise Exception(message)

    def readInt(self):
        i = self.data[self.pos]
        self.pos += 1
        return i

    def readInt32(self):
        low = self.readInt()
        high = self.readInt()
        return low | (high << 16)

    def readLong(self):
        low = self.readInt32()
        high = self.readInt32()
        return (low & 0x00000000FFFFFFFF) | (high << 32)

    def readUUID(self):
        low = self.readLong()
        high = self.readLong()
        allBits = (low & 0xFFFFFFFFFFFFFFFF) | (high << 64)
        return UUID(int=allBits)

    edgeFactories = [ lambda args : None,
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : EpsilonTransition(target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        RangeTransition(target, Token.EOF, arg2) if arg3 != 0 else RangeTransition(target, arg1, arg2),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        RuleTransition(atn.states[arg1], arg2, arg3, target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        PredicateTransition(target, arg1, arg2, arg3 != 0),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        AtomTransition(target, Token.EOF) if arg3 != 0 else AtomTransition(target, arg1),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        ActionTransition(target, arg1, arg2, arg3 != 0),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        SetTransition(target, sets[arg1]),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        NotSetTransition(target, sets[arg1]),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        WildcardTransition(target),
                      lambda atn, src, trg, arg1, arg2, arg3, sets, target : \
                        PrecedencePredicateTransition(target, arg1)
                      ]

    def edgeFactory(self, atn:ATN, type:int, src:int, trg:int, arg1:int, arg2:int, arg3:int, sets:list):
        target = atn.states[trg]
        if type > len(self.edgeFactories) or self.edgeFactories[type] is None:
            raise Exception(""The specified transition type: "" + str(type) + "" is not valid."")
        else:
            return self.edgeFactories[type](atn, src, trg, arg1, arg2, arg3, sets, target)

    stateFactories = [  lambda : None,
                        lambda : BasicState(),
                        lambda : RuleStartState(),
                        lambda : BasicBlockStartState(),
                        lambda : PlusBlockStartState(),
                        lambda : StarBlockStartState(),
                        lambda : TokensStartState(),
                        lambda : RuleStopState(),
                        lambda : BlockEndState(),
                        lambda : StarLoopbackState(),
                        lambda : StarLoopEntryState(),
                        lambda : PlusLoopbackState(),
                        lambda : LoopEndState()
                    ]

    def stateFactory(self, type:int, ruleIndex:int):
        if type> len(self.stateFactories) or self.stateFactories[type] is None:
            raise Exception(""The specified state type "" + str(type) + "" is not valid."")
        else:
            s = self.stateFactories[type]()
            if s is not None:
                s.ruleIndex = ruleIndex
        return s

    CHANNEL = 0     #The type of a {@link LexerChannelAction} action.
    CUSTOM = 1      #The type of a {@link LexerCustomAction} action.
    MODE = 2        #The type of a {@link LexerModeAction} action.
    MORE = 3        #The type of a {@link LexerMoreAction} action.
    POP_MODE = 4    #The type of a {@link LexerPopModeAction} action.
    PUSH_MODE = 5   #The type of a {@link LexerPushModeAction} action.
    SKIP = 6        #The type of a {@link LexerSkipAction} action.
    TYPE = 7        #The type of a {@link LexerTypeAction} action.

    actionFactories = [ lambda data1, data2: LexerChannelAction(data1),
                        lambda data1, data2: LexerCustomAction(data1, data2),
                        lambda data1, data2: LexerModeAction(data1),
                        lambda data1, data2: LexerMoreAction.INSTANCE,
                        lambda data1, data2: LexerPopModeAction.INSTANCE,
                        lambda data1, data2: LexerPushModeAction(data1),
                        lambda data1, data2: LexerSkipAction.INSTANCE,
                        lambda data1, data2: LexerTypeAction(data1)
                      ]

    def lexerActionFactory(self, type:int, data1:int, data2:int):

        if type > len(self.actionFactories) or self.actionFactories[type] is None:
            raise Exception(""The specified lexer action type "" + str(type) + "" is not valid."")
        else:
            return self.actionFactories[type](data1, data2)",1,334 2000 40 426 41 58 2001 61 40 648 44 648 44 648 44 648 41 348 2002 40 2003 44 2004 58 2005 61 303 41 58 392 2004 407 303 58 2004 61 2005 46 2006 2003 46 2007 61 2004 621 621 621 621 621 621 621 621 621 621 621 348 2008 40 2003 44 2009 58 2010 44 2011 58 2010 41 58 2012 61 2013 46 2014 40 2009 41 392 2012 60 1500 58 450 302 2015 61 2013 46 2014 40 2011 41 450 2015 615 2012 348 2016 40 2003 44 2017 58 2018 41 58 2003 46 2019 40 2017 41 2003 46 2020 40 41 2003 46 2021 40 41 2022 61 2003 46 2023 40 41 2003 46 2024 40 2022 41 2003 46 2025 40 2022 41 2003 46 2026 40 2022 41 2027 61 91 93 621 2003 46 2028 40 2022 44 2027 44 2003 46 2029 41 621 621 392 2003 46 2008 40 2030 44 2003 46 2031 41 58 2003 46 2028 40 2022 44 2027 44 2003 46 2032 41 2003 46 2033 40 2022 44 2027 41 2003 46 2034 40 2022 41 2003 46 2035 40 2022 41 2003 46 2036 40 2022 41 2003 46 2037 40 2022 41 392 2003 46 2007 46 2038 92 308 2022 46 2039 614 2040 46 2041 58 2003 46 2038 40 2022 41 621 2003 46 2037 40 2022 41 450 2022 348 2019 40 2003 44 2017 58 2018 41 58 348 2042 40 2043 41 58 2044 61 2045 40 2043 41 450 2044 45 1502 392 2044 62 1501 360 2044 43 1506 2046 61 91 2042 40 2043 41 385 2043 398 2017 93 621 2046 91 1500 93 61 2045 40 2017 91 1500 93 41 2003 46 2017 61 2046 2003 46 2047 61 1500 348 2020 40 2003 41 58 2048 61 2003 46 2029 40 41 392 2048 631 2049 58 440 2050 40 648 43 2018 40 2048 41 43 648 43 2018 40 2049 41 43 648 41 348 2021 40 2003 41 58 2031 61 2003 46 2051 40 41 392 422 2031 398 2013 58 440 2050 40 648 43 2018 40 2031 41 43 92 648 43 2018 40 2052 41 43 648 44 2031 44 2052 41 2003 46 2031 61 2031 348 2023 40 2003 41 58 2053 61 2003 46 2029 40 41 2039 61 2040 46 2054 40 2053 41 2055 61 2003 46 2029 40 41 450 2056 40 2039 44 2055 41 348 2024 40 2003 44 2022 58 2056 41 58 2057 61 91 93 2058 61 91 93 2059 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2059 41 58 2062 61 2003 46 2029 40 41 621 392 2062 614 2063 46 2064 58 2022 46 2065 40 303 41 344 2066 61 2003 46 2029 40 41 392 2066 614 1506 58 2066 61 45 1501 2067 61 2003 46 2068 40 2062 44 2066 41 392 2062 614 2063 46 2069 58 621 2070 61 2003 46 2029 40 41 2057 46 2071 40 40 2067 44 2070 41 41 359 2072 40 2067 44 2073 41 58 2074 61 2003 46 2029 40 41 2058 46 2071 40 40 2067 44 2074 41 41 2022 46 2065 40 2067 41 621 385 2075 398 2057 58 2075 91 1500 93 46 2076 61 2022 46 2077 91 2075 91 1501 93 93 385 2075 398 2058 58 2075 91 1500 93 46 2078 61 2022 46 2077 91 2075 91 1501 93 93 2079 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2079 41 58 2080 61 2003 46 2029 40 41 2022 46 2077 91 2080 93 46 2081 61 304 2082 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2082 41 58 2080 61 2003 46 2029 40 41 2022 46 2077 91 2080 93 46 2083 61 304 348 2025 40 2003 44 2022 58 2056 41 58 2084 61 2003 46 2029 40 41 392 2022 46 2039 614 2040 46 2085 58 2022 46 2086 61 91 1500 93 42 2084 2022 46 2087 61 91 1500 93 42 2084 385 2060 398 2061 40 1500 44 2084 41 58 2067 61 2003 46 2029 40 41 2088 61 2022 46 2077 91 2067 93 2022 46 2087 91 2060 93 61 2088 392 2022 46 2039 614 2040 46 2085 58 2089 61 2003 46 2029 40 41 392 2089 614 1506 58 2089 61 2090 46 2091 2022 46 2086 91 2060 93 61 2089 2022 46 2092 61 91 1500 93 42 2084 385 2093 398 2022 46 2077 58 392 422 2072 40 2093 44 2094 41 58 344 2022 46 2092 91 2093 46 2066 93 61 2093 2022 46 2087 91 2093 46 2066 93 46 2095 61 2093 348 2026 40 2003 44 2022 58 2056 41 58 2096 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2096 41 58 2067 61 2003 46 2029 40 41 2022 46 2097 46 2071 40 2022 46 2077 91 2067 93 41 348 2028 40 2003 44 2022 58 2056 44 2027 58 411 44 2098 58 2099 91 91 93 44 404 93 41 58 2100 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2100 41 58 2101 61 2102 40 41 2027 46 2071 40 2101 41 2103 61 2003 46 2029 40 41 2104 61 2003 46 2029 40 41 392 2104 631 1500 58 2101 46 2105 40 45 1501 41 385 2106 398 2061 40 1500 44 2103 41 58 2107 61 2098 40 41 2108 61 2098 40 41 2101 46 2109 40 2061 40 2107 44 2108 43 1501 41 41 621 348 2033 40 2003 44 2022 58 2056 44 2027 58 411 41 58 2110 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2110 41 58 2111 61 2003 46 2029 40 41 2112 61 2003 46 2029 40 41 2113 61 2003 46 2029 40 41 2114 61 2003 46 2029 40 41 2115 61 2003 46 2029 40 41 2116 61 2003 46 2029 40 41 2117 61 2003 46 2118 40 2022 44 2113 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 41 2119 61 2022 46 2077 91 2111 93 2119 46 2120 40 2117 41 621 385 2093 398 2022 46 2077 58 385 2060 398 2061 40 1500 44 2121 40 2093 46 2122 41 41 58 2123 61 2093 46 2122 91 2060 93 392 422 2072 40 2123 44 2124 41 58 344 2125 61 45 1501 392 2022 46 2087 91 2123 46 2126 46 2066 93 46 2083 58 392 2123 46 2127 614 1500 58 2125 61 2123 46 2126 46 2066 2117 61 2128 40 2123 46 2129 44 2125 41 2022 46 2092 91 2123 46 2126 46 2066 93 46 2120 40 2117 41 385 2093 398 2022 46 2077 58 392 2072 40 2093 44 2073 41 58 621 392 2093 46 2078 407 303 58 440 2050 40 648 41 621 392 2093 46 2078 46 2088 407 422 303 58 440 2050 40 648 41 2093 46 2078 46 2088 61 2093 392 2072 40 2093 44 2130 41 58 385 2060 398 2061 40 1500 44 2121 40 2093 46 2122 41 41 58 2126 61 2093 46 2122 91 2060 93 46 2126 392 2072 40 2126 44 2131 41 58 2126 46 2076 61 2093 359 2072 40 2093 44 2132 41 58 385 2060 398 2061 40 1500 44 2121 40 2093 46 2122 41 41 58 2126 61 2093 46 2122 91 2060 93 46 2126 392 2072 40 2126 44 2133 41 58 2126 46 2076 61 2093 348 2034 40 2003 44 2022 58 2056 41 58 2134 61 2003 46 2029 40 41 385 2060 398 2061 40 1500 44 2134 41 58 2067 61 2003 46 2029 40 41 2135 61 2022 46 2077 91 2067 93 2022 46 2136 46 2071 40 2135 41 2135 46 2137 61 2060 348 2035 40 2003 44 2022 58 2056 41 58 392 2022 46 2039 614 2040 46 2085 58 2138 61 2003 46 2029 40 41 2022 46 2139 61 91 303 93 42 2138 385 2060 398 2061 40 1500 44 2138 41 58 2140 61 2003 46 2029 40 41 2141 61 2003 46 2029 40 41 392 2141 614 1506 58 2141 61 45 1501 2142 61 2003 46 2029 40 41 392 2142 614 1506 58 2142 61 45 1501 2143 61 2003 46 2144 40 2140 44 2141 44 2142 41 2022 46 2139 91 2060 93 61 2143 348 2038 40 2003 44 2022 58 2056 41 58 2138 61 2121 40 2022 46 2087 41 2022 46 2086 61 91 1500 93 42 2138 385 2060 398 2061 40 1500 44 2138 41 58 2022 46 2086 91 2060 93 61 2022 46 2055 43 2060 43 1501 385 2060 398 2061 40 1500 44 2138 41 58 2003 46 2145 40 2022 44 2060 41 348 2145 40 2003 44 2022 58 2056 44 2053 58 404 41 58 2146 61 2147 40 41 2146 46 2066 61 2053 2022 46 2065 40 2146 41 2148 61 2149 40 41 2148 46 2066 61 2053 2022 46 2065 40 2148 41 2146 46 2078 61 2148 2022 46 2150 40 2146 41 2148 46 2088 61 2146 2151 61 303 392 2022 46 2087 91 2053 93 46 2083 58 621 2078 61 303 385 2093 398 2022 46 2077 58 392 2003 46 2152 40 2093 44 2053 41 58 2078 61 2093 2151 61 2093 46 2076 46 2122 91 1500 93 325 392 2151 407 303 58 440 2050 40 648 41 360 58 2078 61 2022 46 2092 91 2053 93 621 385 2093 398 2022 46 2077 58 385 2153 398 2093 46 2122 58 392 2153 614 2151 58 344 392 2153 46 2126 614 2078 58 2153 46 2126 61 2148 621 2087 61 2022 46 2087 91 2053 93 2138 61 2121 40 2087 46 2122 41 496 2138 62 1500 58 2146 46 2120 40 2087 46 2122 91 2138 45 1501 93 41 351 2087 46 2122 91 45 1501 93 621 2022 46 2087 91 2053 93 46 2120 40 2128 40 2146 41 41 2148 46 2120 40 2128 40 2078 41 41 2154 61 2155 40 41 2022 46 2065 40 2154 41 2154 46 2120 40 2156 40 2148 44 2022 46 2086 91 2053 93 41 41 2146 46 2120 40 2128 40 2154 41 41 348 2152 40 2003 44 2093 58 2063 44 2053 58 404 41 58 392 2093 46 2066 631 2053 58 450 303 392 422 2072 40 2093 44 2133 41 58 450 303 2157 61 2093 46 2122 91 2121 40 2093 46 2122 41 45 1501 93 46 2126 392 422 2072 40 2157 44 2158 41 58 450 303 392 2157 46 2159 308 92 2072 40 2157 46 2122 91 1500 93 46 2126 44 2094 41 58 450 2093 360 58 450 303 621 621 621 621 621 621 621 348 2036 40 2003 44 2022 58 2056 41 58 385 2093 398 2022 46 2077 58 392 422 2072 40 2093 44 2133 41 58 344 621 621 621 621 392 2022 46 2087 91 2093 46 2066 93 46 2083 58 2157 61 2093 46 2122 91 2121 40 2093 46 2122 41 45 1501 93 46 2126 392 2072 40 2157 44 2158 41 58 392 2157 46 2159 308 92 2072 40 2157 46 2122 91 1500 93 46 2126 44 2094 41 58 2093 46 2160 61 304 348 2037 40 2003 44 2022 58 2056 41 58 392 422 2003 46 2007 46 2037 58 450 621 385 2093 398 2022 46 2077 58 392 2093 407 303 58 344 2003 46 2161 40 2093 46 2159 428 2121 40 2093 46 2122 41 620 1501 41 392 2072 40 2093 44 2131 41 58 2003 46 2161 40 2093 46 2076 407 422 303 41 392 2072 40 2093 44 2133 41 58 2003 46 2161 40 2093 46 2076 407 422 303 41 2003 46 2161 40 2121 40 2093 46 2122 41 614 1502 41 392 2072 40 2093 46 2122 91 1500 93 46 2126 44 2162 41 58 2003 46 2161 40 2072 40 2093 46 2122 91 1501 93 46 2126 44 2158 41 41 2003 46 2161 40 422 2093 46 2081 41 359 2072 40 2093 46 2122 91 1500 93 46 2126 44 2158 41 58 2003 46 2161 40 2072 40 2093 46 2122 91 1501 93 46 2126 44 2162 41 41 2003 46 2161 40 2093 46 2081 41 360 58 440 2050 40 648 41 392 2072 40 2093 44 2132 41 58 2003 46 2161 40 2121 40 2093 46 2122 41 614 1501 41 2003 46 2161 40 2072 40 2093 46 2122 91 1500 93 46 2126 44 2133 41 41 392 2072 40 2093 44 2158 41 58 2003 46 2161 40 2093 46 2076 407 422 303 41 392 2072 40 2093 44 2163 41 58 2003 46 2161 40 2093 46 2095 407 422 303 41 392 2072 40 2093 44 2073 41 58 2003 46 2161 40 2093 46 2078 407 422 303 41 392 2072 40 2093 44 2149 41 58 2003 46 2161 40 2093 46 2088 407 422 303 41 392 2072 40 2093 44 2164 41 58 2003 46 2161 40 2121 40 2093 46 2122 41 620 1501 428 2093 46 2137 615 1500 41 360 58 2003 46 2161 40 2121 40 2093 46 2122 41 620 1501 428 2072 40 2093 44 2094 41 41 348 2161 40 2003 44 2165 58 323 44 2166 61 303 41 58 392 422 2165 58 392 2166 407 303 58 2166 61 648 440 2050 40 2166 41 348 2029 40 2003 41 58 2060 61 2003 46 2017 91 2003 46 2047 93 2003 46 2047 636 1501 450 2060 348 2032 40 2003 41 58 2167 61 2003 46 2029 40 41 2168 61 2003 46 2029 40 41 450 2167 124 40 2168 622 1503 41 348 2169 40 2003 41 58 2167 61 2003 46 2032 40 41 2168 61 2003 46 2032 40 41 450 40 2167 38 1511 41 124 40 2168 622 1503 41 348 2051 40 2003 41 58 2167 61 2003 46 2169 40 41 2168 61 2003 46 2169 40 41 2170 61 40 2167 38 1521 41 124 40 2168 622 1503 41 450 2010 40 404 61 2170 41 2171 61 91 409 2172 58 303 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 2128 40 2126 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2173 40 2126 44 2090 46 2091 44 2115 41 392 2116 631 1500 360 2173 40 2126 44 2114 44 2115 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2124 40 2022 46 2077 91 2114 93 44 2115 44 2116 44 2126 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2174 40 2126 44 2114 44 2115 44 2116 631 1500 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2156 40 2126 44 2090 46 2091 41 392 2116 631 1500 360 2156 40 2126 44 2114 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2175 40 2126 44 2114 44 2115 44 2116 631 1500 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2176 40 2126 44 2027 91 2114 93 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2177 40 2126 44 2027 91 2114 93 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2178 40 2126 41 44 409 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 58 92 2179 40 2126 44 2114 41 93 348 2118 40 2003 44 2022 58 2056 44 2180 58 404 44 2111 58 404 44 2112 58 404 44 2114 58 404 44 2115 58 404 44 2116 58 404 44 2027 58 411 41 58 2126 61 2022 46 2077 91 2112 93 392 2180 62 2121 40 2003 46 2171 41 428 2003 46 2171 91 2180 93 407 303 58 440 2050 40 648 43 2018 40 2180 41 43 648 41 360 58 450 2003 46 2171 91 2180 93 40 2022 44 2111 44 2112 44 2114 44 2115 44 2116 44 2027 44 2126 41 2181 61 91 409 58 303 44 409 58 2155 40 41 44 409 58 2163 40 41 44 409 58 2147 40 41 44 409 58 2131 40 41 44 409 58 2162 40 41 44 409 58 2182 40 41 44 409 58 2094 40 41 44 409 58 2149 40 41 44 409 58 2132 40 41 44 409 58 2133 40 41 44 409 58 2130 40 41 44 409 58 2158 40 41 93 348 2068 40 2003 44 2180 58 404 44 2066 58 404 41 58 392 2180 62 2121 40 2003 46 2181 41 428 2003 46 2181 91 2180 93 407 303 58 440 2050 40 648 43 2018 40 2180 41 43 648 41 360 58 2067 61 2003 46 2181 91 2180 93 40 41 392 2067 407 422 303 58 2067 46 2066 61 2066 450 2067 2183 61 1500 621 2184 61 1501 621 2185 61 1502 621 2186 61 1502 621 2187 61 1502 621 2188 61 1502 621 2189 61 1502 621 2190 61 1502 621 2191 61 91 409 2141 44 2142 58 2192 40 2141 41 44 409 2141 44 2142 58 2193 40 2141 44 2142 41 44 409 2141 44 2142 58 2194 40 2141 41 44 409 2141 44 2142 58 2195 46 2196 44 409 2141 44 2142 58 2197 46 2196 44 409 2141 44 2142 58 2198 40 2141 41 44 409 2141 44 2142 58 2199 46 2196 44 409 2141 44 2142 58 2200 40 2141 41 93 348 2144 40 2003 44 2180 58 404 44 2141 58 404 44 2142 58 404 41 58 392 2180 62 2121 40 2003 46 2191 41 428 2003 46 2191 91 2180 93 407 303 58 440 2050 40 648 43 2018 40 2180 41 43 648 41 360 58 450 2003 46 2191 91 2180 93 40 2141 44 2142 41 
131899,Python,"class MigrationGraph:
    """"""
    Represent the digraph of all migrations in a project.

    Each migration is a node, and each dependency is an edge. There are
    no implicit dependencies between numbered migrations - the numbering is
    merely a convention to aid file listing. Every new numbered migration
    has a declared dependency to the previous number, meaning that VCS
    branch merges can be detected and resolved.

    Migrations files can be marked as replacing another set of migrations -
    this is to support the ""squash"" feature. The graph handler isn't responsible
    for these; instead, the code to load them in here should examine the
    migration files and if the replaced migrations are all either unapplied
    or not present, it should ignore the replaced ones, load in just the
    replacing migration, and repoint any dependencies that pointed to the
    replaced migrations to point to the replacing one.

    A node should be a tuple: (app_path, migration_name). The tree special-cases
    things within an app - namely, root nodes and leaf nodes ignore dependencies
    to other apps.
    """"""

    def __init__(self):
        self.node_map = {}
        self.nodes = {}

    def add_node(self, key, migration):
        assert key not in self.node_map
        node = Node(key)
        self.node_map[key] = node
        self.nodes[key] = migration

    def add_dummy_node(self, key, origin, error_message):
        node = DummyNode(key, origin, error_message)
        self.node_map[key] = node
        self.nodes[key] = None

    def add_dependency(self, migration, child, parent, skip_validation=False):
        """"""
        This may create dummy nodes if they don't yet exist. If
        `skip_validation=True`, validate_consistency() should be called
        afterward.
        """"""
        if child not in self.nodes:
            error_message = (
                ""Migration %s dependencies reference nonexistent""
                "" child node %r"" % (migration, child)
            )
            self.add_dummy_node(child, migration, error_message)
        if parent not in self.nodes:
            error_message = (
                ""Migration %s dependencies reference nonexistent""
                "" parent node %r"" % (migration, parent)
            )
            self.add_dummy_node(parent, migration, error_message)
        self.node_map[child].add_parent(self.node_map[parent])
        self.node_map[parent].add_child(self.node_map[child])
        if not skip_validation:
            self.validate_consistency()

    def remove_replaced_nodes(self, replacement, replaced):
        """"""
        Remove each of the `replaced` nodes (when they exist). Any
        dependencies that were referencing them are changed to reference the
        `replacement` node instead.
        """"""
        # Cast list of replaced keys to set to speed up lookup later.
        replaced = set(replaced)
        try:
            replacement_node = self.node_map[replacement]
        except KeyError as err:
            raise NodeNotFoundError(
                ""Unable to find replacement node %r. It was either never added""
                "" to the migration graph, or has been removed."" % (replacement,),
                replacement
            ) from err
        for replaced_key in replaced:
            self.nodes.pop(replaced_key, None)
            replaced_node = self.node_map.pop(replaced_key, None)
            if replaced_node:
                for child in replaced_node.children:
                    child.parents.remove(replaced_node)
                    # We don't want to create dependencies between the replaced
                    # node and the replacement node as this would lead to
                    # self-referencing on the replacement node at a later iteration.
                    if child.key not in replaced:
                        replacement_node.add_child(child)
                        child.add_parent(replacement_node)
                for parent in replaced_node.parents:
                    parent.children.remove(replaced_node)
                    # Again, to avoid self-referencing.
                    if parent.key not in replaced:
                        replacement_node.add_parent(parent)
                        parent.add_child(replacement_node)

    def remove_replacement_node(self, replacement, replaced):
        """"""
        The inverse operation to `remove_replaced_nodes`. Almost. Remove the
        replacement node `replacement` and remap its child nodes to `replaced`
        - the list of nodes it would have replaced. Don't remap its parent
        nodes as they are expected to be correct already.
        """"""
        self.nodes.pop(replacement, None)
        try:
            replacement_node = self.node_map.pop(replacement)
        except KeyError as err:
            raise NodeNotFoundError(
                ""Unable to remove replacement node %r. It was either never added""
                "" to the migration graph, or has been removed already."" % (replacement,),
                replacement
            ) from err
        replaced_nodes = set()
        replaced_nodes_parents = set()
        for key in replaced:
            replaced_node = self.node_map.get(key)
            if replaced_node:
                replaced_nodes.add(replaced_node)
                replaced_nodes_parents |= replaced_node.parents
        # We're only interested in the latest replaced node, so filter out
        # replaced nodes that are parents of other replaced nodes.
        replaced_nodes -= replaced_nodes_parents
        for child in replacement_node.children:
            child.parents.remove(replacement_node)
            for replaced_node in replaced_nodes:
                replaced_node.add_child(child)
                child.add_parent(replaced_node)
        for parent in replacement_node.parents:
            parent.children.remove(replacement_node)
            # NOTE: There is no need to remap parent dependencies as we can
            # assume the replaced nodes already have the correct ancestry.

    def validate_consistency(self):
        """"""Ensure there are no dummy nodes remaining in the graph.""""""
        [n.raise_error() for n in self.node_map.values() if isinstance(n, DummyNode)]

    def forwards_plan(self, target):
        """"""
        Given a node, return a list of which previous nodes (dependencies) must
        be applied, ending with the node itself. This is the list you would
        follow if applying the migrations to a database.
        """"""
        if target not in self.nodes:
            raise NodeNotFoundError(""Node %r not a valid node"" % (target,), target)
        return self.iterative_dfs(self.node_map[target])

    def backwards_plan(self, target):
        """"""
        Given a node, return a list of which dependent nodes (dependencies)
        must be unapplied, ending with the node itself. This is the list you
        would follow if removing the migrations from a database.
        """"""
        if target not in self.nodes:
            raise NodeNotFoundError(""Node %r not a valid node"" % (target,), target)
        return self.iterative_dfs(self.node_map[target], forwards=False)

    def iterative_dfs(self, start, forwards=True):
        """"""Iterative depth-first search for finding dependencies.""""""
        visited = []
        visited_set = set()
        stack = [(start, False)]
        while stack:
            node, processed = stack.pop()
            if node in visited_set:
                pass
            elif processed:
                visited_set.add(node)
                visited.append(node.key)
            else:
                stack.append((node, True))
                stack += [(n, False) for n in sorted(node.parents if forwards else node.children)]
        return visited

    def root_nodes(self, app=None):
        """"""
        Return all root nodes - that is, nodes with no dependencies inside
        their app. These are the starting point for an app.
        """"""
        roots = set()
        for node in self.nodes:
            if all(key[0] != node[0] for key in self.node_map[node].parents) and (not app or app == node[0]):
                roots.add(node)
        return sorted(roots)

    def leaf_nodes(self, app=None):
        """"""
        Return all leaf nodes - that is, nodes with no dependents in their app.
        These are the ""most current"" version of an app's schema.
        Having more than one per app is technically an error, but one that
        gets handled further up, in the interactive command - it's usually the
        result of a VCS merge and needs some user input.
        """"""
        leaves = set()
        for node in self.nodes:
            if all(key[0] != node[0] for key in self.node_map[node].children) and (not app or app == node[0]):
                leaves.add(node)
        return sorted(leaves)

    def ensure_not_cyclic(self):
        # Algo from GvR:
        # https://neopythonic.blogspot.com/2009/01/detecting-cycles-in-directed-graph.html
        todo = set(self.nodes)
        while todo:
            node = todo.pop()
            stack = [node]
            while stack:
                top = stack[-1]
                for child in self.node_map[top].children:
                    # Use child.key instead of child to speed up the frequent
                    # hashing.
                    node = child.key
                    if node in stack:
                        cycle = stack[stack.index(node):]
                        raise CircularDependencyError("", "".join(""%s.%s"" % n for n in cycle))
                    if node in todo:
                        stack.append(node)
                        todo.remove(node)
                        break
                else:
                    node = stack.pop()

    def __str__(self):
        return 'Graph: %s nodes, %s edges' % self._nodes_and_edges()

    def __repr__(self):
        nodes, edges = self._nodes_and_edges()
        return '<%s: nodes=%s, edges=%s>' % (self.__class__.__name__, nodes, edges)

    def _nodes_and_edges(self):
        return len(self.nodes), sum(len(node.parents) for node in self.node_map.values())

    def _generate_plan(self, nodes, at_end):
        plan = []
        for node in nodes:
            for migration in self.forwards_plan(node):
                if migration not in plan and (at_end or migration not in nodes):
                    plan.append(migration)
        return plan

    def make_state(self, nodes=None, at_end=True, real_apps=None):
        """"""
        Given a migration node or nodes, return a complete ProjectState for it.
        If at_end is False, return the state before the migration has run.
        If nodes is not provided, return the overall most current project state.
        """"""
        if nodes is None:
            nodes = list(self.leaf_nodes())
        if not nodes:
            return ProjectState()
        if not isinstance(nodes[0], tuple):
            nodes = [nodes]
        plan = self._generate_plan(nodes, at_end)
        project_state = ProjectState(real_apps=real_apps)
        for node in plan:
            project_state = self.nodes[node].mutate_state(project_state, preserve=False)
        return project_state

    def __contains__(self, node):
        return node in self.nodes",1,334 2000 58 648 348 2001 40 2002 41 58 2002 46 2003 61 123 125 2002 46 2004 61 123 125 348 2005 40 2002 44 2006 44 2007 41 58 313 2006 422 398 2002 46 2003 2008 61 2009 40 2006 41 2002 46 2003 91 2006 93 61 2008 2002 46 2004 91 2006 93 61 2007 348 2010 40 2002 44 2006 44 2011 44 2012 41 58 2008 61 2013 40 2006 44 2011 44 2012 41 2002 46 2003 91 2006 93 61 2008 2002 46 2004 91 2006 93 61 303 348 2014 40 2002 44 2007 44 2015 44 2016 44 2017 61 302 41 58 648 392 2015 422 398 2002 46 2004 58 2012 61 40 648 648 37 40 2007 44 2015 41 41 2002 46 2010 40 2015 44 2007 44 2012 41 392 2016 422 398 2002 46 2004 58 2012 61 40 648 648 37 40 2007 44 2016 41 41 2002 46 2010 40 2016 44 2007 44 2012 41 2002 46 2003 91 2015 93 46 2018 40 2002 46 2003 91 2016 93 41 2002 46 2003 91 2016 93 46 2019 40 2002 46 2003 91 2015 93 41 392 422 2017 58 2002 46 2020 40 41 348 2021 40 2002 44 2022 44 2023 41 58 648 621 2023 61 2024 40 2023 41 474 58 2025 61 2002 46 2003 91 2022 93 374 2026 311 2027 58 440 2028 40 648 648 37 40 2022 44 41 44 2022 41 388 2027 385 2029 398 2023 58 2002 46 2004 46 2030 40 2029 44 303 41 2031 61 2002 46 2003 46 2030 40 2029 44 303 41 392 2031 58 385 2015 398 2031 46 2032 58 2015 46 2033 46 2034 40 2031 41 621 621 621 392 2015 46 2006 422 398 2023 58 2025 46 2019 40 2015 41 2015 46 2018 40 2025 41 385 2016 398 2031 46 2033 58 2016 46 2032 46 2034 40 2031 41 621 392 2016 46 2006 422 398 2023 58 2025 46 2018 40 2016 41 2016 46 2019 40 2025 41 348 2035 40 2002 44 2022 44 2023 41 58 648 2002 46 2004 46 2030 40 2022 44 303 41 474 58 2025 61 2002 46 2003 46 2030 40 2022 41 374 2026 311 2027 58 440 2028 40 648 648 37 40 2022 44 41 44 2022 41 388 2027 2036 61 2024 40 41 2037 61 2024 40 41 385 2006 398 2023 58 2031 61 2002 46 2003 46 2038 40 2006 41 392 2031 58 2036 46 2039 40 2031 41 2037 635 2031 46 2033 621 621 2036 628 2037 385 2015 398 2025 46 2032 58 2015 46 2033 46 2034 40 2025 41 385 2031 398 2036 58 2031 46 2019 40 2015 41 2015 46 2018 40 2031 41 385 2016 398 2025 46 2033 58 2016 46 2032 46 2034 40 2025 41 621 621 348 2020 40 2002 41 58 648 91 2040 46 2041 40 41 385 2040 398 2002 46 2003 46 2042 40 41 392 2043 40 2040 44 2013 41 93 348 2044 40 2002 44 2045 41 58 648 392 2045 422 398 2002 46 2004 58 440 2028 40 648 37 40 2045 44 41 44 2045 41 450 2002 46 2046 40 2002 46 2003 91 2045 93 41 348 2047 40 2002 44 2045 41 58 648 392 2045 422 398 2002 46 2004 58 440 2028 40 648 37 40 2045 44 41 44 2045 41 450 2002 46 2046 40 2002 46 2003 91 2045 93 44 2048 61 302 41 348 2046 40 2002 44 2049 44 2048 61 304 41 58 648 2050 61 91 93 2051 61 2024 40 41 2052 61 91 40 2049 44 302 41 93 496 2052 58 2008 44 2053 61 2052 46 2030 40 41 392 2008 398 2051 58 434 359 2053 58 2051 46 2039 40 2008 41 2050 46 2054 40 2008 46 2006 41 360 58 2052 46 2054 40 40 2008 44 304 41 41 2052 636 91 40 2040 44 302 41 385 2040 398 2055 40 2008 46 2033 392 2048 360 2008 46 2032 41 93 450 2050 348 2056 40 2002 44 2057 61 303 41 58 648 2058 61 2024 40 41 385 2008 398 2002 46 2004 58 392 2059 40 2006 91 1500 93 631 2008 91 1500 93 385 2006 398 2002 46 2003 91 2008 93 46 2033 41 308 40 422 2057 428 2057 614 2008 91 1500 93 41 58 2058 46 2039 40 2008 41 450 2055 40 2058 41 348 2060 40 2002 44 2057 61 303 41 58 648 2061 61 2024 40 41 385 2008 398 2002 46 2004 58 392 2059 40 2006 91 1500 93 631 2008 91 1500 93 385 2006 398 2002 46 2003 91 2008 93 46 2032 41 308 40 422 2057 428 2057 614 2008 91 1500 93 41 58 2061 46 2039 40 2008 41 450 2055 40 2061 41 348 2062 40 2002 41 58 621 621 2063 61 2024 40 2002 46 2004 41 496 2063 58 2008 61 2063 46 2030 40 41 2052 61 91 2008 93 496 2052 58 2064 61 2052 91 45 1501 93 385 2015 398 2002 46 2003 91 2064 93 46 2032 58 621 621 2008 61 2015 46 2006 392 2008 398 2052 58 2065 61 2052 91 2052 46 2066 40 2008 41 58 93 440 2067 40 648 46 2068 40 648 37 2040 385 2040 398 2065 41 41 392 2008 398 2063 58 2052 46 2054 40 2008 41 2063 46 2034 40 2008 41 325 360 58 2008 61 2052 46 2030 40 41 348 2069 40 2002 41 58 450 648 37 2002 46 2070 40 41 348 2071 40 2002 41 58 2004 44 2072 61 2002 46 2070 40 41 450 648 37 40 2002 46 2073 46 2074 44 2004 44 2072 41 348 2070 40 2002 41 58 450 2075 40 2002 46 2004 41 44 2076 40 2075 40 2008 46 2033 41 385 2008 398 2002 46 2003 46 2042 40 41 41 348 2077 40 2002 44 2004 44 2078 41 58 2079 61 91 93 385 2008 398 2004 58 385 2007 398 2002 46 2044 40 2008 41 58 392 2007 422 398 2079 308 40 2078 428 2007 422 398 2004 41 58 2079 46 2054 40 2007 41 450 2079 348 2080 40 2002 44 2004 61 303 44 2078 61 304 44 2081 61 303 41 58 648 392 2004 407 303 58 2004 61 411 40 2002 46 2060 40 41 41 392 422 2004 58 450 2082 40 41 392 422 2043 40 2004 91 1500 93 44 2083 41 58 2004 61 91 2004 93 2079 61 2002 46 2077 40 2004 44 2078 41 2084 61 2082 40 2081 61 2081 41 385 2008 398 2079 58 2084 61 2002 46 2004 91 2008 93 46 2085 40 2084 44 2086 61 302 41 450 2084 348 2087 40 2002 44 2008 41 58 450 2008 398 2002 46 2004 
134391,Python,"class SystemChecksTestCase(SimpleTestCase):

    def test_checks_are_performed(self):
        admin.site.register(Song, MyAdmin)
        try:
            errors = checks.run_checks()
            expected = ['error!']
            self.assertEqual(errors, expected)
        finally:
            admin.site.unregister(Song)

    @override_settings(INSTALLED_APPS=['django.contrib.admin'])
    def test_apps_dependencies(self):
        errors = admin.checks.check_dependencies()
        expected = [
            checks.Error(
                ""'django.contrib.contenttypes' must be in ""
                ""INSTALLED_APPS in order to use the admin application."",
                id=""admin.E401"",
            ),
            checks.Error(
                ""'django.contrib.auth' must be in INSTALLED_APPS in order ""
                ""to use the admin application."",
                id='admin.E405',
            ),
            checks.Error(
                ""'django.contrib.messages' must be in INSTALLED_APPS in order ""
                ""to use the admin application."",
                id='admin.E406',
            ),
        ]
        self.assertEqual(errors, expected)

    @override_settings(TEMPLATES=[])
    def test_no_template_engines(self):
        self.assertEqual(admin.checks.check_dependencies(), [
            checks.Error(
                ""A 'django.template.backends.django.DjangoTemplates' ""
                ""instance must be configured in TEMPLATES in order to use ""
                ""the admin application."",
                id='admin.E403',
            )
        ])

    @override_settings(
        TEMPLATES=[{
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [],
            },
        }],
    )
    def test_context_processor_dependencies(self):
        expected = [
            checks.Error(
                ""'django.contrib.auth.context_processors.auth' must be ""
                ""enabled in DjangoTemplates (TEMPLATES) if using the default ""
                ""auth backend in order to use the admin application."",
                id='admin.E402',
            ),
            checks.Error(
                ""'django.contrib.messages.context_processors.messages' must ""
                ""be enabled in DjangoTemplates (TEMPLATES) in order to use ""
                ""the admin application."",
                id='admin.E404',
            ),
            checks.Warning(
                ""'django.template.context_processors.request' must be enabled ""
                ""in DjangoTemplates (TEMPLATES) in order to use the admin ""
                ""navigation sidebar."",
                id='admin.W411',
            )
        ]
        self.assertEqual(admin.checks.check_dependencies(), expected)
        # The first error doesn't happen if
        # 'django.contrib.auth.backends.ModelBackend' isn't in
        # AUTHENTICATION_BACKENDS.
        with self.settings(AUTHENTICATION_BACKENDS=[]):
            self.assertEqual(admin.checks.check_dependencies(), expected[1:])

    @override_settings(
        AUTHENTICATION_BACKENDS=['admin_checks.tests.ModelBackendSubclass'],
        TEMPLATES=[{
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.request',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        }],
    )
    def test_context_processor_dependencies_model_backend_subclass(self):
        self.assertEqual(admin.checks.check_dependencies(), [
            checks.Error(
                ""'django.contrib.auth.context_processors.auth' must be ""
                ""enabled in DjangoTemplates (TEMPLATES) if using the default ""
                ""auth backend in order to use the admin application."",
                id='admin.E402',
            ),
        ])

    @override_settings(
        TEMPLATES=[
            {
                'BACKEND': 'django.template.backends.dummy.TemplateStrings',
                'DIRS': [],
                'APP_DIRS': True,
            },
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ],
    )
    def test_several_templates_backends(self):
        self.assertEqual(admin.checks.check_dependencies(), [])

    @override_settings(MIDDLEWARE=[])
    def test_middleware_dependencies(self):
        errors = admin.checks.check_dependencies()
        expected = [
            checks.Error(
                ""'django.contrib.auth.middleware.AuthenticationMiddleware' ""
                ""must be in MIDDLEWARE in order to use the admin application."",
                id='admin.E408',
            ),
            checks.Error(
                ""'django.contrib.messages.middleware.MessageMiddleware' ""
                ""must be in MIDDLEWARE in order to use the admin application."",
                id='admin.E409',
            ),
            checks.Error(
                ""'django.contrib.sessions.middleware.SessionMiddleware' ""
                ""must be in MIDDLEWARE in order to use the admin application."",
                hint=(
                    ""Insert ""
                    ""'django.contrib.sessions.middleware.SessionMiddleware' ""
                    ""before ""
                    ""'django.contrib.auth.middleware.AuthenticationMiddleware'.""
                ),
                id='admin.E410',
            ),
        ]
        self.assertEqual(errors, expected)

    @override_settings(MIDDLEWARE=[
        'admin_checks.tests.AuthenticationMiddlewareSubclass',
        'admin_checks.tests.MessageMiddlewareSubclass',
        'admin_checks.tests.SessionMiddlewareSubclass',
    ])
    def test_middleware_subclasses(self):
        self.assertEqual(admin.checks.check_dependencies(), [])

    @override_settings(MIDDLEWARE=[
        'django.contrib.does.not.Exist',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
    ])
    def test_admin_check_ignores_import_error_in_middleware(self):
        self.assertEqual(admin.checks.check_dependencies(), [])

    def test_custom_adminsite(self):
        class CustomAdminSite(admin.AdminSite):
            pass

        custom_site = CustomAdminSite()
        custom_site.register(Song, MyAdmin)
        try:
            errors = checks.run_checks()
            expected = ['error!']
            self.assertEqual(errors, expected)
        finally:
            custom_site.unregister(Song)

    def test_allows_checks_relying_on_other_modeladmins(self):
        class MyBookAdmin(admin.ModelAdmin):
            def check(self, **kwargs):
                errors = super().check(**kwargs)
                author_admin = self.admin_site._registry.get(Author)
                if author_admin is None:
                    errors.append('AuthorAdmin missing!')
                return errors

        class MyAuthorAdmin(admin.ModelAdmin):
            pass

        admin.site.register(Book, MyBookAdmin)
        admin.site.register(Author, MyAuthorAdmin)
        try:
            self.assertEqual(admin.site.check(None), [])
        finally:
            admin.site.unregister(Book)
            admin.site.unregister(Author)

    def test_field_name_not_in_list_display(self):
        class SongAdmin(admin.ModelAdmin):
            list_editable = [""original_release""]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'list_editable[0]' refers to 'original_release', ""
                ""which is not contained in 'list_display'."",
                obj=SongAdmin,
                id='admin.E122',
            )
        ]
        self.assertEqual(errors, expected)

    def test_list_editable_not_a_list_or_tuple(self):
        class SongAdmin(admin.ModelAdmin):
            list_editable = 'test'

        self.assertEqual(SongAdmin(Song, AdminSite()).check(), [
            checks.Error(
                ""The value of 'list_editable' must be a list or tuple."",
                obj=SongAdmin,
                id='admin.E120',
            )
        ])

    def test_list_editable_missing_field(self):
        class SongAdmin(admin.ModelAdmin):
            list_editable = ('test',)

        self.assertEqual(SongAdmin(Song, AdminSite()).check(), [
            checks.Error(
                ""The value of 'list_editable[0]' refers to 'test', which is ""
                ""not a field of 'admin_checks.Song'."",
                obj=SongAdmin,
                id='admin.E121',
            )
        ])

    def test_readonly_and_editable(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = [""original_release""]
            list_display = [""pk"", ""original_release""]
            list_editable = [""original_release""]
            fieldsets = [
                (None, {
                    ""fields"": [""title"", ""original_release""],
                }),
            ]
        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'list_editable[0]' refers to 'original_release', ""
                ""which is not editable through the admin."",
                obj=SongAdmin,
                id='admin.E125',
            )
        ]
        self.assertEqual(errors, expected)

    def test_editable(self):
        class SongAdmin(admin.ModelAdmin):
            list_display = [""pk"", ""title""]
            list_editable = [""title""]
            fieldsets = [
                (None, {
                    ""fields"": [""title"", ""original_release""],
                }),
            ]

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_custom_modelforms_with_fields_fieldsets(self):
        """"""
        # Regression test for #8027: custom ModelForms with fields/fieldsets
        """"""
        errors = ValidFields(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_custom_get_form_with_fieldsets(self):
        """"""
        The fieldsets checks are skipped when the ModelAdmin.get_form() method
        is overridden.
        """"""
        errors = ValidFormFieldsets(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_fieldsets_fields_non_tuple(self):
        """"""
        The first fieldset's fields must be a list/tuple.
        """"""
        class NotATupleAdmin(admin.ModelAdmin):
            list_display = [""pk"", ""title""]
            list_editable = [""title""]
            fieldsets = [
                (None, {
                    ""fields"": ""title""  # not a tuple
                }),
            ]

        errors = NotATupleAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fieldsets[0][1]['fields']' must be a list or tuple."",
                obj=NotATupleAdmin,
                id='admin.E008',
            )
        ]
        self.assertEqual(errors, expected)

    def test_nonfirst_fieldset(self):
        """"""
        The second fieldset's fields must be a list/tuple.
        """"""
        class NotATupleAdmin(admin.ModelAdmin):
            fieldsets = [
                (None, {
                    ""fields"": (""title"",)
                }),
                ('foo', {
                    ""fields"": ""author""  # not a tuple
                }),
            ]

        errors = NotATupleAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fieldsets[1][1]['fields']' must be a list or tuple."",
                obj=NotATupleAdmin,
                id='admin.E008',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_values(self):
        """"""
        Tests for basic system checks of 'exclude' option values (#12689)
        """"""
        class ExcludedFields1(admin.ModelAdmin):
            exclude = 'foo'

        errors = ExcludedFields1(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'exclude' must be a list or tuple."",
                obj=ExcludedFields1,
                id='admin.E014',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_duplicate_values(self):
        class ExcludedFields2(admin.ModelAdmin):
            exclude = ('name', 'name')

        errors = ExcludedFields2(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'exclude' contains duplicate field(s)."",
                obj=ExcludedFields2,
                id='admin.E015',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_in_inline(self):
        class ExcludedFieldsInline(admin.TabularInline):
            model = Song
            exclude = 'foo'

        class ExcludedFieldsAlbumAdmin(admin.ModelAdmin):
            model = Album
            inlines = [ExcludedFieldsInline]

        errors = ExcludedFieldsAlbumAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'exclude' must be a list or tuple."",
                obj=ExcludedFieldsInline,
                id='admin.E014',
            )
        ]
        self.assertEqual(errors, expected)

    def test_exclude_inline_model_admin(self):
        """"""
        Regression test for #9932 - exclude in InlineModelAdmin should not
        contain the ForeignKey field used in ModelAdmin.model
        """"""
        class SongInline(admin.StackedInline):
            model = Song
            exclude = ['album']

        class AlbumAdmin(admin.ModelAdmin):
            model = Album
            inlines = [SongInline]

        errors = AlbumAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""Cannot exclude the field 'album', because it is the foreign key ""
                ""to the parent model 'admin_checks.Album'."",
                obj=SongInline,
                id='admin.E201',
            )
        ]
        self.assertEqual(errors, expected)

    def test_valid_generic_inline_model_admin(self):
        """"""
        Regression test for #22034 - check that generic inlines don't look for
        normal ForeignKey relations.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_generic_inline_model_admin_non_generic_model(self):
        """"""
        A model without a GenericForeignKey raises problems if it's included
        in a GenericInlineModelAdmin definition.
        """"""
        class BookInline(GenericStackedInline):
            model = Book

        class SongAdmin(admin.ModelAdmin):
            inlines = [BookInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.Book' has no GenericForeignKey."",
                obj=BookInline,
                id='admin.E301',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_bad_ct_field(self):
        """"""
        A GenericInlineModelAdmin errors if the ct_field points to a
        nonexistent field.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_field = 'nonexistent'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'ct_field' references 'nonexistent', which is not a field on 'admin_checks.Influence'."",
                obj=InfluenceInline,
                id='admin.E302',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_bad_fk_field(self):
        """"""
        A GenericInlineModelAdmin errors if the ct_fk_field points to a
        nonexistent field.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_fk_field = 'nonexistent'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'ct_fk_field' references 'nonexistent', which is not a field on 'admin_checks.Influence'."",
                obj=InfluenceInline,
                id='admin.E303',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_non_gfk_ct_field(self):
        """"""
        A GenericInlineModelAdmin raises problems if the ct_field points to a
        field that isn't part of a GenericForeignKey.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_field = 'name'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.Influence' has no GenericForeignKey using ""
                ""content type field 'name' and object ID field 'object_id'."",
                obj=InfluenceInline,
                id='admin.E304',
            )
        ]
        self.assertEqual(errors, expected)

    def test_generic_inline_model_admin_non_gfk_fk_field(self):
        """"""
        A GenericInlineModelAdmin raises problems if the ct_fk_field points to
        a field that isn't part of a GenericForeignKey.
        """"""
        class InfluenceInline(GenericStackedInline):
            model = Influence
            ct_fk_field = 'name'

        class SongAdmin(admin.ModelAdmin):
            inlines = [InfluenceInline]

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.Influence' has no GenericForeignKey using ""
                ""content type field 'content_type' and object ID field 'name'."",
                obj=InfluenceInline,
                id='admin.E304',
            )
        ]
        self.assertEqual(errors, expected)

    def test_app_label_in_admin_checks(self):
        class RawIdNonexistentAdmin(admin.ModelAdmin):
            raw_id_fields = ('nonexistent',)

        errors = RawIdNonexistentAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'raw_id_fields[0]' refers to 'nonexistent', ""
                ""which is not a field of 'admin_checks.Album'."",
                obj=RawIdNonexistentAdmin,
                id='admin.E002',
            )
        ]
        self.assertEqual(errors, expected)

    def test_fk_exclusion(self):
        """"""
        Regression test for #11709 - when testing for fk excluding (when exclude is
        given) make sure fk_name is honored or things blow up when there is more
        than one fk to the parent model.
        """"""
        class TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE
            exclude = (""e"",)
            fk_name = ""album1""

        class MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_inline_self_check(self):
        class TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE

        class MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        expected = [
            checks.Error(
                ""'admin_checks.TwoAlbumFKAndAnE' has more than one ForeignKey ""
                ""to 'admin_checks.Album'. You must specify a 'fk_name' ""
                ""attribute."",
                obj=TwoAlbumFKAndAnEInline,
                id='admin.E202',
            )
        ]
        self.assertEqual(errors, expected)

    def test_inline_with_specified(self):
        class TwoAlbumFKAndAnEInline(admin.TabularInline):
            model = TwoAlbumFKAndAnE
            fk_name = ""album1""

        class MyAdmin(admin.ModelAdmin):
            inlines = [TwoAlbumFKAndAnEInline]

        errors = MyAdmin(Album, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_inlines_property(self):
        class CitiesInline(admin.TabularInline):
            model = City

        class StateAdmin(admin.ModelAdmin):
            @property
            def inlines(self):
                return [CitiesInline]

        errors = StateAdmin(State, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""title"",)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_on_method(self):
        @admin.display
        def my_function(obj):
            pass

        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (my_function,)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_on_modeladmin(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""readonly_method_on_modeladmin"",)

            @admin.display
            def readonly_method_on_modeladmin(self, obj):
                pass

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_dynamic_attribute_on_modeladmin(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""dynamic_method"",)

            def __getattr__(self, item):
                if item == ""dynamic_method"":
                    @admin.display
                    def method(obj):
                        pass
                    return method
                raise AttributeError

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_method_on_model(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""readonly_method_on_model"",)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_nonexistent_field(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (""title"", ""nonexistent"")

        errors = SongAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'readonly_fields[1]' is not a callable, an attribute ""
                ""of 'SongAdmin', or an attribute of 'admin_checks.Song'."",
                obj=SongAdmin,
                id='admin.E035',
            )
        ]
        self.assertEqual(errors, expected)

    def test_nonexistent_field_on_inline(self):
        class CityInline(admin.TabularInline):
            model = City
            readonly_fields = ['i_dont_exist']  # Missing attribute

        errors = CityInline(State, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'readonly_fields[0]' is not a callable, an attribute ""
                ""of 'CityInline', or an attribute of 'admin_checks.City'."",
                obj=CityInline,
                id='admin.E035',
            )
        ]
        self.assertEqual(errors, expected)

    def test_readonly_fields_not_list_or_tuple(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = 'test'

        self.assertEqual(SongAdmin(Song, AdminSite()).check(), [
            checks.Error(
                ""The value of 'readonly_fields' must be a list or tuple."",
                obj=SongAdmin,
                id='admin.E034',
            )
        ])

    def test_extra(self):
        class SongAdmin(admin.ModelAdmin):
            @admin.display
            def awesome_song(self, instance):
                if instance.title == ""Born to Run"":
                    return ""Best Ever!""
                return ""Status unknown.""

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_readonly_lambda(self):
        class SongAdmin(admin.ModelAdmin):
            readonly_fields = (lambda obj: ""test"",)

        errors = SongAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_graceful_m2m_fail(self):
        """"""
        Regression test for #12203/#12237 - Fail more gracefully when a M2M field that
        specifies the 'through' option is included in the 'fields' or the 'fieldsets'
        ModelAdmin options.
        """"""
        class BookAdmin(admin.ModelAdmin):
            fields = ['authors']

        errors = BookAdmin(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fields' cannot include the ManyToManyField 'authors', ""
                ""because that field manually specifies a relationship model."",
                obj=BookAdmin,
                id='admin.E013',
            )
        ]
        self.assertEqual(errors, expected)

    def test_cannot_include_through(self):
        class FieldsetBookAdmin(admin.ModelAdmin):
            fieldsets = (
                ('Header 1', {'fields': ('name',)}),
                ('Header 2', {'fields': ('authors',)}),
            )

        errors = FieldsetBookAdmin(Book, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fieldsets[1][1][\""fields\""]' cannot include the ManyToManyField ""
                ""'authors', because that field manually specifies a relationship model."",
                obj=FieldsetBookAdmin,
                id='admin.E013',
            )
        ]
        self.assertEqual(errors, expected)

    def test_nested_fields(self):
        class NestedFieldsAdmin(admin.ModelAdmin):
            fields = ('price', ('name', 'subtitle'))

        errors = NestedFieldsAdmin(Book, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_nested_fieldsets(self):
        class NestedFieldsetAdmin(admin.ModelAdmin):
            fieldsets = (
                ('Main', {'fields': ('price', ('name', 'subtitle'))}),
            )

        errors = NestedFieldsetAdmin(Book, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_explicit_through_override(self):
        """"""
        Regression test for #12209 -- If the explicitly provided through model
        is specified as a string, the admin should still be able use
        Model.m2m_field.through
        """"""
        class AuthorsInline(admin.TabularInline):
            model = Book.authors.through

        class BookAdmin(admin.ModelAdmin):
            inlines = [AuthorsInline]

        errors = BookAdmin(Book, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_non_model_fields(self):
        """"""
        Regression for ensuring ModelAdmin.fields can contain non-model fields
        that broke with r11737
        """"""
        class SongForm(forms.ModelForm):
            extra_data = forms.CharField()

        class FieldsOnFormOnlyAdmin(admin.ModelAdmin):
            form = SongForm
            fields = ['title', 'extra_data']

        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_non_model_first_field(self):
        """"""
        Regression for ensuring ModelAdmin.field can handle first elem being a
        non-model field (test fix for UnboundLocalError introduced with r16225).
        """"""
        class SongForm(forms.ModelForm):
            extra_data = forms.CharField()

            class Meta:
                model = Song
                fields = '__all__'

        class FieldsOnFormOnlyAdmin(admin.ModelAdmin):
            form = SongForm
            fields = ['extra_data', 'title']

        errors = FieldsOnFormOnlyAdmin(Song, AdminSite()).check()
        self.assertEqual(errors, [])

    def test_check_sublists_for_duplicates(self):
        class MyModelAdmin(admin.ModelAdmin):
            fields = ['state', ['state']]

        errors = MyModelAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""The value of 'fields' contains duplicate field(s)."",
                obj=MyModelAdmin,
                id='admin.E006'
            )
        ]
        self.assertEqual(errors, expected)

    def test_check_fieldset_sublists_for_duplicates(self):
        class MyModelAdmin(admin.ModelAdmin):
            fieldsets = [
                (None, {
                    'fields': ['title', 'album', ('title', 'album')]
                }),
            ]

        errors = MyModelAdmin(Song, AdminSite()).check()
        expected = [
            checks.Error(
                ""There are duplicate field(s) in 'fieldsets[0][1]'."",
                obj=MyModelAdmin,
                id='admin.E012'
            )
        ]
        self.assertEqual(errors, expected)

    def test_list_filter_works_on_through_field_even_when_apps_not_ready(self):
        """"""
        Ensure list_filter can access reverse fields even when the app registry
        is not ready; refs #24146.
        """"""
        class BookAdminWithListFilter(admin.ModelAdmin):
            list_filter = ['authorsbooks__featured']

        # Temporarily pretending apps are not ready yet. This issue can happen
        # if the value of 'list_filter' refers to a 'through__field'.
        Book._meta.apps.ready = False
        try:
            errors = BookAdminWithListFilter(Book, AdminSite()).check()
            self.assertEqual(errors, [])
        finally:
            Book._meta.apps.ready = True",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 2004 46 2005 46 444 40 2006 44 2007 41 474 58 2008 61 2009 46 2010 40 41 2011 61 91 648 93 2003 46 2012 40 2008 44 2011 41 382 58 2004 46 2005 46 2013 40 2006 41 64 2014 40 2015 61 91 648 93 41 348 2016 40 2003 41 58 2008 61 2004 46 2009 46 2017 40 41 2011 61 91 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 93 2003 46 2012 40 2008 44 2011 41 64 2014 40 2020 61 91 93 41 348 2021 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 93 41 64 2014 40 2020 61 91 123 648 58 648 44 648 58 91 93 44 648 58 304 44 648 58 123 648 58 91 93 44 125 44 125 93 44 41 348 2022 40 2003 41 58 2011 61 91 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 44 2009 46 2023 40 648 648 648 44 2019 61 648 44 41 93 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 2011 41 621 621 621 497 2003 46 2024 40 2025 61 91 93 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 2011 91 1501 58 93 41 64 2014 40 2025 61 91 648 93 44 2020 61 91 123 648 58 648 44 648 58 91 93 44 648 58 304 44 648 58 123 648 58 91 648 44 648 44 93 44 125 44 125 93 44 41 348 2026 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 2009 46 2018 40 648 648 648 44 2019 61 648 44 41 44 93 41 64 2014 40 2020 61 91 123 648 58 648 44 648 58 91 93 44 648 58 304 44 125 44 123 648 58 648 44 648 58 91 93 44 648 58 304 44 648 58 123 648 58 91 648 44 648 44 648 44 93 44 125 44 125 44 93 44 41 348 2027 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 93 41 64 2014 40 2028 61 91 93 41 348 2029 40 2003 41 58 2008 61 2004 46 2009 46 2017 40 41 2011 61 91 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2019 61 648 44 41 44 2009 46 2018 40 648 648 44 2030 61 40 648 648 648 648 41 44 2019 61 648 44 41 44 93 2003 46 2012 40 2008 44 2011 41 64 2014 40 2028 61 91 648 44 648 44 648 44 93 41 348 2031 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 93 41 64 2014 40 2028 61 91 648 44 648 44 648 44 648 44 93 41 348 2032 40 2003 41 58 2003 46 2012 40 2004 46 2009 46 2017 40 41 44 91 93 41 348 2033 40 2003 41 58 334 2034 40 2004 46 2035 41 58 434 2036 61 2034 40 41 2036 46 444 40 2006 44 2007 41 474 58 2008 61 2009 46 2010 40 41 2011 61 91 648 93 2003 46 2012 40 2008 44 2011 41 382 58 2036 46 2013 40 2006 41 348 2037 40 2003 41 58 334 2038 40 2004 46 2039 41 58 348 2040 40 2003 44 638 2041 41 58 2008 61 463 40 41 46 2040 40 638 2041 41 2042 61 2003 46 2043 46 2044 46 2045 40 2046 41 392 2042 407 303 58 2008 46 2047 40 648 41 450 2008 334 2048 40 2004 46 2039 41 58 434 2004 46 2005 46 444 40 2049 44 2038 41 2004 46 2005 46 444 40 2046 44 2048 41 474 58 2003 46 2012 40 2004 46 2005 46 2040 40 303 41 44 91 93 41 382 58 2004 46 2005 46 2013 40 2049 41 2004 46 2005 46 2013 40 2046 41 348 2050 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2052 61 91 648 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2054 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2052 61 648 2003 46 2012 40 2051 40 2006 44 2035 40 41 41 46 2040 40 41 44 91 2009 46 2018 40 648 44 2053 61 2051 44 2019 61 648 44 41 93 41 348 2055 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2052 61 40 648 44 41 2003 46 2012 40 2051 40 2006 44 2035 40 41 41 46 2040 40 41 44 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 41 348 2056 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 91 648 93 2058 61 91 648 44 648 93 2052 61 91 648 93 2059 61 91 40 303 44 123 648 58 91 648 44 648 93 44 125 41 44 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2060 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2058 61 91 648 44 648 93 2052 61 91 648 93 2059 61 91 40 303 44 123 648 58 91 648 44 648 93 44 125 41 44 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2061 40 2003 41 58 648 2008 61 2062 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2063 40 2003 41 58 648 2008 61 2064 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2065 40 2003 41 58 648 334 2066 40 2004 46 2039 41 58 2058 61 91 648 44 648 93 2052 61 91 648 93 2059 61 91 40 303 44 123 648 58 648 621 125 41 44 93 2008 61 2066 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2066 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2067 40 2003 41 58 648 334 2066 40 2004 46 2039 41 58 2059 61 91 40 303 44 123 648 58 40 648 44 41 125 41 44 40 648 44 123 648 58 648 621 125 41 44 93 2008 61 2066 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2066 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2068 40 2003 41 58 648 334 2069 40 2004 46 2039 41 58 2070 61 648 2008 61 2069 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2069 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2071 40 2003 41 58 334 2072 40 2004 46 2039 41 58 2070 61 40 648 44 648 41 2008 61 2072 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2072 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2073 40 2003 41 58 334 2074 40 2004 46 2075 41 58 2076 61 2006 2070 61 648 334 2077 40 2004 46 2039 41 58 2076 61 2078 2079 61 91 2074 93 2008 61 2077 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2074 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2080 40 2003 41 58 648 334 2081 40 2004 46 2082 41 58 2076 61 2006 2070 61 91 648 93 334 2083 40 2004 46 2039 41 58 2076 61 2078 2079 61 91 2081 93 2008 61 2083 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2081 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2084 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2088 40 2003 41 58 648 334 2089 40 2086 41 58 2076 61 2049 334 2051 40 2004 46 2039 41 58 2079 61 91 2089 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2089 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2090 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2091 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2092 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2093 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2094 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2091 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2095 40 2003 41 58 648 334 2085 40 2086 41 58 2076 61 2087 2093 61 648 334 2051 40 2004 46 2039 41 58 2079 61 91 2085 93 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2085 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2096 40 2003 41 58 334 2097 40 2004 46 2039 41 58 2098 61 40 648 44 41 2008 61 2097 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2097 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2099 40 2003 41 58 648 334 2100 40 2004 46 2075 41 58 2076 61 2101 2070 61 40 648 44 41 2102 61 648 334 2007 40 2004 46 2039 41 58 2079 61 91 2100 93 2008 61 2007 40 2078 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2103 40 2003 41 58 334 2100 40 2004 46 2075 41 58 2076 61 2101 334 2007 40 2004 46 2039 41 58 2079 61 91 2100 93 2008 61 2007 40 2078 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 648 44 2053 61 2100 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2104 40 2003 41 58 334 2100 40 2004 46 2075 41 58 2076 61 2101 2102 61 648 334 2007 40 2004 46 2039 41 58 2079 61 91 2100 93 2008 61 2007 40 2078 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2105 40 2003 41 58 334 2106 40 2004 46 2075 41 58 2076 61 2107 334 2108 40 2004 46 2039 41 58 64 2109 348 2079 40 2003 41 58 450 91 2106 93 2008 61 2108 40 2110 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2111 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2112 40 2003 41 58 64 2004 46 2113 348 2114 40 2053 41 58 434 334 2051 40 2004 46 2039 41 58 2057 61 40 2114 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2115 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 64 2004 46 2113 348 2116 40 2003 44 2053 41 58 434 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2117 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 348 2118 40 2003 44 2119 41 58 392 2119 614 648 58 64 2004 46 2113 348 2120 40 2053 41 58 434 450 2120 440 2121 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2122 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2123 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 648 44 648 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2051 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2124 40 2003 41 58 334 2125 40 2004 46 2075 41 58 2076 61 2107 2057 61 91 648 93 621 2008 61 2125 40 2110 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2125 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2126 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 648 2003 46 2012 40 2051 40 2006 44 2035 40 41 41 46 2040 40 41 44 91 2009 46 2018 40 648 44 2053 61 2051 44 2019 61 648 44 41 93 41 348 2127 40 2003 41 58 334 2051 40 2004 46 2039 41 58 64 2004 46 2113 348 2128 40 2003 44 2129 41 58 392 2129 46 2130 614 648 58 450 648 450 648 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2131 40 2003 41 58 334 2051 40 2004 46 2039 41 58 2057 61 40 409 2053 58 648 44 41 2008 61 2051 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2132 40 2003 41 58 648 334 2133 40 2004 46 2039 41 58 2134 61 91 648 93 2008 61 2133 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2133 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2135 40 2003 41 58 334 2136 40 2004 46 2039 41 58 2059 61 40 40 648 44 123 648 58 40 648 44 41 125 41 44 40 648 44 123 648 58 40 648 44 41 125 41 44 41 2008 61 2136 40 2049 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 648 44 2053 61 2136 44 2019 61 648 44 41 93 2003 46 2012 40 2008 44 2011 41 348 2137 40 2003 41 58 334 2138 40 2004 46 2039 41 58 2134 61 40 648 44 40 648 44 648 41 41 2008 61 2138 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2139 40 2003 41 58 334 2140 40 2004 46 2039 41 58 2059 61 40 40 648 44 123 648 58 40 648 44 40 648 44 648 41 41 125 41 44 41 2008 61 2140 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2141 40 2003 41 58 648 334 2142 40 2004 46 2075 41 58 2076 61 2049 46 2143 46 2144 334 2133 40 2004 46 2039 41 58 2079 61 91 2142 93 2008 61 2133 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2145 40 2003 41 58 648 334 2146 40 2147 46 2148 41 58 2149 61 2147 46 2150 40 41 334 2151 40 2004 46 2039 41 58 2152 61 2146 2134 61 91 648 44 648 93 2008 61 2151 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2153 40 2003 41 58 648 334 2146 40 2147 46 2148 41 58 2149 61 2147 46 2150 40 41 334 2154 58 2076 61 2006 2134 61 648 334 2151 40 2004 46 2039 41 58 2152 61 2146 2134 61 91 648 44 648 93 2008 61 2151 40 2006 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 348 2155 40 2003 41 58 334 2156 40 2004 46 2039 41 58 2134 61 91 648 44 91 648 93 93 2008 61 2156 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2156 44 2019 61 648 41 93 2003 46 2012 40 2008 44 2011 41 348 2157 40 2003 41 58 334 2156 40 2004 46 2039 41 58 2059 61 91 40 303 44 123 648 58 91 648 44 648 44 40 648 44 648 41 93 125 41 44 93 2008 61 2156 40 2006 44 2035 40 41 41 46 2040 40 41 2011 61 91 2009 46 2018 40 648 44 2053 61 2156 44 2019 61 648 41 93 2003 46 2012 40 2008 44 2011 41 348 2158 40 2003 41 58 648 334 2159 40 2004 46 2039 41 58 2160 61 91 648 93 621 621 2049 46 2161 46 2162 46 2163 61 302 474 58 2008 61 2159 40 2049 44 2035 40 41 41 46 2040 40 41 2003 46 2012 40 2008 44 91 93 41 382 58 2049 46 2161 46 2162 46 2163 61 304 
134872,Python,"class TestQuerying(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.primitives = [True, False, 'yes', 7, 9.6]
        values = [
            None,
            [],
            {},
            {'a': 'b', 'c': 14},
            {
                'a': 'b',
                'c': 14,
                'd': ['e', {'f': 'g'}],
                'h': True,
                'i': False,
                'j': None,
                'k': {'l': 'm'},
                'n': [None, True, False],
                'o': '""quoted""',
                'p': 4.2,
                'r': {'s': True, 't': False},
            },
            [1, [2]],
            {'k': True, 'l': False, 'foo': 'bax'},
            {
                'foo': 'bar',
                'baz': {'a': 'b', 'c': 'd'},
                'bar': ['foo', 'bar'],
                'bax': {'foo': 'bar'},
            },
        ]
        cls.objs = [
            NullableJSONModel.objects.create(value=value)
            for value in values
        ]
        if connection.features.supports_primitives_in_json_field:
            cls.objs.extend([
                NullableJSONModel.objects.create(value=value)
                for value in cls.primitives
            ])
        cls.raw_sql = '%s::jsonb' if connection.vendor == 'postgresql' else '%s'

    def test_exact(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__exact={}),
            [self.objs[2]],
        )

    def test_exact_complex(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__exact={'a': 'b', 'c': 14}),
            [self.objs[3]],
        )

    def test_icontains(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__icontains='BaX'),
            self.objs[6:8],
        )

    def test_isnull(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__isnull=True),
            [self.objs[0]],
        )

    def test_ordering_by_transform(self):
        mariadb = connection.vendor == 'mysql' and connection.mysql_is_mariadb
        values = [
            {'ord': 93, 'name': 'bar'},
            {'ord': 22.1, 'name': 'foo'},
            {'ord': -1, 'name': 'baz'},
            {'ord': 21.931902, 'name': 'spam'},
            {'ord': -100291029, 'name': 'eggs'},
        ]
        for field_name in ['value', 'value_custom']:
            with self.subTest(field=field_name):
                objs = [
                    NullableJSONModel.objects.create(**{field_name: value})
                    for value in values
                ]
                query = NullableJSONModel.objects.filter(
                    **{'%s__name__isnull' % field_name: False},
                ).order_by('%s__ord' % field_name)
                expected = [objs[4], objs[2], objs[3], objs[1], objs[0]]
                if mariadb or connection.vendor == 'oracle':
                    # MariaDB and Oracle return JSON values as strings.
                    expected = [objs[2], objs[4], objs[3], objs[1], objs[0]]
                self.assertSequenceEqual(query, expected)

    def test_ordering_grouping_by_key_transform(self):
        base_qs = NullableJSONModel.objects.filter(value__d__0__isnull=False)
        for qs in (
            base_qs.order_by('value__d__0'),
            base_qs.annotate(key=KeyTransform('0', KeyTransform('d', 'value'))).order_by('key'),
        ):
            self.assertSequenceEqual(qs, [self.objs[4]])
        qs = NullableJSONModel.objects.filter(value__isnull=False)
        self.assertQuerysetEqual(
            qs.filter(value__isnull=False).annotate(
                key=KeyTextTransform('f', KeyTransform('1', KeyTransform('d', 'value'))),
            ).values('key').annotate(count=Count('key')).order_by('count'),
            [(None, 0), ('g', 1)],
            operator.itemgetter('key', 'count'),
        )

    def test_ordering_grouping_by_count(self):
        qs = NullableJSONModel.objects.filter(
            value__isnull=False,
        ).values('value__d__0').annotate(count=Count('value__d__0')).order_by('count')
        self.assertQuerysetEqual(qs, [0, 1], operator.itemgetter('count'))

    def test_order_grouping_custom_decoder(self):
        NullableJSONModel.objects.create(value_custom={'a': 'b'})
        qs = NullableJSONModel.objects.filter(value_custom__isnull=False)
        self.assertSequenceEqual(
            qs.values(
                'value_custom__a',
            ).annotate(
                count=Count('id'),
            ).order_by('value_custom__a'),
            [{'value_custom__a': 'b', 'count': 1}],
        )

    def test_key_transform_raw_expression(self):
        expr = RawSQL(self.raw_sql, ['{""x"": ""bar""}'])
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__foo=KeyTransform('x', expr)),
            [self.objs[7]],
        )

    def test_nested_key_transform_raw_expression(self):
        expr = RawSQL(self.raw_sql, ['{""x"": {""y"": ""bar""}}'])
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__foo=KeyTransform('y', KeyTransform('x', expr))),
            [self.objs[7]],
        )

    def test_key_transform_expression(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=KeyTransform('d', 'value'),
                chain=KeyTransform('0', 'key'),
                expr=KeyTransform('0', Cast('key', models.JSONField())),
            ).filter(chain=F('expr')),
            [self.objs[4]],
        )

    def test_key_transform_annotation_expression(self):
        obj = NullableJSONModel.objects.create(value={'d': ['e', 'e']})
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=F('value__d'),
                chain=F('key__0'),
                expr=Cast('key', models.JSONField()),
            ).filter(chain=F('expr__1')),
            [obj],
        )

    def test_nested_key_transform_expression(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=KeyTransform('d', 'value'),
                chain=KeyTransform('f', KeyTransform('1', 'key')),
                expr=KeyTransform('f', KeyTransform('1', Cast('key', models.JSONField()))),
            ).filter(chain=F('expr')),
            [self.objs[4]],
        )

    def test_nested_key_transform_annotation_expression(self):
        obj = NullableJSONModel.objects.create(
            value={'d': ['e', {'f': 'g'}, {'f': 'g'}]},
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                key=F('value__d'),
                chain=F('key__1__f'),
                expr=Cast('key', models.JSONField()),
            ).filter(chain=F('expr__2__f')),
            [obj],
        )

    def test_nested_key_transform_on_subquery(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__0__isnull=False).annotate(
                subquery_value=Subquery(
                    NullableJSONModel.objects.filter(pk=OuterRef('pk')).values('value')
                ),
                key=KeyTransform('d', 'subquery_value'),
                chain=KeyTransform('f', KeyTransform('1', 'key')),
            ).filter(chain='g'),
            [self.objs[4]],
        )

    def test_expression_wrapper_key_transform(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.annotate(
                expr=ExpressionWrapper(
                    KeyTransform('c', 'value'),
                    output_field=IntegerField(),
                ),
            ).filter(expr__isnull=False),
            self.objs[3:5],
        )

    def test_has_key(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_key='a'),
            [self.objs[3], self.objs[4]],
        )

    def test_has_key_null_value(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_key='j'),
            [self.objs[4]],
        )

    def test_has_key_deep(self):
        tests = [
            (Q(value__baz__has_key='a'), self.objs[7]),
            (Q(value__has_key=KeyTransform('a', KeyTransform('baz', 'value'))), self.objs[7]),
            (Q(value__has_key=F('value__baz__a')), self.objs[7]),
            (Q(value__has_key=KeyTransform('c', KeyTransform('baz', 'value'))), self.objs[7]),
            (Q(value__has_key=F('value__baz__c')), self.objs[7]),
            (Q(value__d__1__has_key='f'), self.objs[4]),
            (
                Q(value__has_key=KeyTransform('f', KeyTransform('1', KeyTransform('d', 'value')))),
                self.objs[4],
            ),
            (Q(value__has_key=F('value__d__1__f')), self.objs[4]),
        ]
        for condition, expected in tests:
            with self.subTest(condition=condition):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(condition),
                    [expected],
                )

    def test_has_key_list(self):
        obj = NullableJSONModel.objects.create(value=[{'a': 1}, {'b': 'x'}])
        tests = [
            Q(value__1__has_key='b'),
            Q(value__has_key=KeyTransform('b', KeyTransform(1, 'value'))),
            Q(value__has_key=KeyTransform('b', KeyTransform('1', 'value'))),
            Q(value__has_key=F('value__1__b')),
        ]
        for condition in tests:
            with self.subTest(condition=condition):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(condition),
                    [obj],
                )

    def test_has_keys(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_keys=['a', 'c', 'h']),
            [self.objs[4]],
        )

    def test_has_any_keys(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__has_any_keys=['c', 'l']),
            [self.objs[3], self.objs[4], self.objs[6]],
        )

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_contains(self):
        tests = [
            ({}, self.objs[2:5] + self.objs[6:8]),
            ({'baz': {'a': 'b', 'c': 'd'}}, [self.objs[7]]),
            ({'baz': {'a': 'b'}}, [self.objs[7]]),
            ({'baz': {'c': 'd'}}, [self.objs[7]]),
            ({'k': True, 'l': False}, [self.objs[6]]),
            ({'d': ['e', {'f': 'g'}]}, [self.objs[4]]),
            ({'d': ['e']}, [self.objs[4]]),
            ({'d': [{'f': 'g'}]}, [self.objs[4]]),
            ([1, [2]], [self.objs[5]]),
            ([1], [self.objs[5]]),
            ([[2]], [self.objs[5]]),
            ({'n': [None, True, False]}, [self.objs[4]]),
            ({'j': None}, [self.objs[4]]),
        ]
        for value, expected in tests:
            with self.subTest(value=value):
                qs = NullableJSONModel.objects.filter(value__contains=value)
                self.assertSequenceEqual(qs, expected)

    @skipIfDBFeature('supports_json_field_contains')
    def test_contains_unsupported(self):
        msg = 'contains lookup is not supported on this database backend.'
        with self.assertRaisesMessage(NotSupportedError, msg):
            NullableJSONModel.objects.filter(
                value__contains={'baz': {'a': 'b', 'c': 'd'}},
            ).get()

    @skipUnlessDBFeature(
        'supports_primitives_in_json_field',
        'supports_json_field_contains',
    )
    def test_contains_primitives(self):
        for value in self.primitives:
            with self.subTest(value=value):
                qs = NullableJSONModel.objects.filter(value__contains=value)
                self.assertIs(qs.exists(), True)

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_contained_by(self):
        qs = NullableJSONModel.objects.filter(value__contained_by={'a': 'b', 'c': 14, 'h': True})
        self.assertSequenceEqual(qs, self.objs[2:4])

    @skipIfDBFeature('supports_json_field_contains')
    def test_contained_by_unsupported(self):
        msg = 'contained_by lookup is not supported on this database backend.'
        with self.assertRaisesMessage(NotSupportedError, msg):
            NullableJSONModel.objects.filter(value__contained_by={'a': 'b'}).get()

    def test_deep_values(self):
        qs = NullableJSONModel.objects.values_list('value__k__l')
        expected_objs = [(None,)] * len(self.objs)
        expected_objs[4] = ('m',)
        self.assertSequenceEqual(qs, expected_objs)

    @skipUnlessDBFeature('can_distinct_on_fields')
    def test_deep_distinct(self):
        query = NullableJSONModel.objects.distinct('value__k__l').values_list('value__k__l')
        self.assertSequenceEqual(query, [('m',), (None,)])

    def test_isnull_key(self):
        # key__isnull=False works the same as has_key='key'.
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a__isnull=True),
            self.objs[:3] + self.objs[5:],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__j__isnull=True),
            self.objs[:4] + self.objs[5:],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a__isnull=False),
            [self.objs[3], self.objs[4]],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__j__isnull=False),
            [self.objs[4]],
        )

    def test_isnull_key_or_none(self):
        obj = NullableJSONModel.objects.create(value={'a': None})
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),
            self.objs[:3] + self.objs[5:] + [obj],
        )

    def test_none_key(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__j=None),
            [self.objs[4]],
        )

    def test_none_key_exclude(self):
        obj = NullableJSONModel.objects.create(value={'j': 1})
        if connection.vendor == 'oracle':
            # Oracle supports filtering JSON objects with NULL keys, but the
            # current implementation doesn't support it.
            self.assertSequenceEqual(
                NullableJSONModel.objects.exclude(value__j=None),
                self.objs[1:4] + self.objs[5:] + [obj],
            )
        else:
            self.assertSequenceEqual(NullableJSONModel.objects.exclude(value__j=None), [obj])

    def test_shallow_list_lookup(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__0=1),
            [self.objs[5]],
        )

    def test_shallow_obj_lookup(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a='b'),
            [self.objs[3], self.objs[4]],
        )

    def test_obj_subquery_lookup(self):
        qs = NullableJSONModel.objects.annotate(
            field=Subquery(NullableJSONModel.objects.filter(pk=OuterRef('pk')).values('value')),
        ).filter(field__a='b')
        self.assertSequenceEqual(qs, [self.objs[3], self.objs[4]])

    def test_deep_lookup_objs(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__k__l='m'),
            [self.objs[4]],
        )

    def test_shallow_lookup_obj_target(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__k={'l': 'm'}),
            [self.objs[4]],
        )

    def test_deep_lookup_array(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__1__0=2),
            [self.objs[5]],
        )

    def test_deep_lookup_mixed(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__d__1__f='g'),
            [self.objs[4]],
        )

    def test_deep_lookup_transform(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__c__gt=2),
            [self.objs[3], self.objs[4]],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__c__gt=2.33),
            [self.objs[3], self.objs[4]],
        )
        self.assertIs(NullableJSONModel.objects.filter(value__c__lt=5).exists(), False)

    def test_lookup_exclude(self):
        tests = [
            (Q(value__a='b'), [self.objs[0]]),
            (Q(value__foo='bax'), [self.objs[0], self.objs[7]]),
        ]
        for condition, expected in tests:
            self.assertSequenceEqual(
                NullableJSONModel.objects.exclude(condition),
                expected,
            )
            self.assertSequenceEqual(
                NullableJSONModel.objects.filter(~condition),
                expected,
            )

    def test_lookup_exclude_nonexistent_key(self):
        # Values without the key are ignored.
        condition = Q(value__foo='bax')
        objs_with_value = [self.objs[6]]
        objs_with_different_value = [self.objs[0], self.objs[7]]
        self.assertSequenceEqual(
            NullableJSONModel.objects.exclude(condition),
            objs_with_different_value,
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.exclude(~condition),
            objs_with_value,
        )
        self.assertCountEqual(
            NullableJSONModel.objects.filter(condition | ~condition),
            objs_with_value + objs_with_different_value,
        )
        self.assertCountEqual(
            NullableJSONModel.objects.exclude(condition & ~condition),
            objs_with_value + objs_with_different_value,
        )
        # Add the __isnull lookup to get an exhaustive set.
        self.assertSequenceEqual(
            NullableJSONModel.objects.exclude(condition & Q(value__foo__isnull=False)),
            self.objs[0:6] + self.objs[7:],
        )
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(condition & Q(value__foo__isnull=False)),
            objs_with_value,
        )

    def test_usage_in_subquery(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(
                id__in=NullableJSONModel.objects.filter(value__c=14),
            ),
            self.objs[3:5],
        )

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_array_key_contains(self):
        tests = [
            ([], [self.objs[7]]),
            ('bar', [self.objs[7]]),
            (['bar'], [self.objs[7]]),
            ('ar', []),
        ]
        for value, expected in tests:
            with self.subTest(value=value):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(value__bar__contains=value),
                    expected,
                )

    def test_key_iexact(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='""BaR""').exists(), False)

    def test_key_in(self):
        tests = [
            ('value__c__in', [14], self.objs[3:5]),
            ('value__c__in', [14, 15], self.objs[3:5]),
            ('value__0__in', [1], [self.objs[5]]),
            ('value__0__in', [1, 3], [self.objs[5]]),
            ('value__foo__in', ['bar'], [self.objs[7]]),
            (
                'value__foo__in',
                [KeyTransform('foo', KeyTransform('bax', 'value'))],
                [self.objs[7]],
            ),
            ('value__foo__in', [F('value__bax__foo')], [self.objs[7]]),
            (
                'value__foo__in',
                [KeyTransform('foo', KeyTransform('bax', 'value')), 'baz'],
                [self.objs[7]],
            ),
            ('value__foo__in', [F('value__bax__foo'), 'baz'], [self.objs[7]]),
            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),
            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),
            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),
            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),
            ('value__h__in', [True, 'foo'], [self.objs[4]]),
            ('value__i__in', [False, 'foo'], [self.objs[4]]),
        ]
        for lookup, value, expected in tests:
            with self.subTest(lookup=lookup, value=value):
                self.assertSequenceEqual(
                    NullableJSONModel.objects.filter(**{lookup: value}),
                    expected,
                )

    def test_key_values(self):
        qs = NullableJSONModel.objects.filter(value__h=True)
        tests = [
            ('value__a', 'b'),
            ('value__c', 14),
            ('value__d', ['e', {'f': 'g'}]),
            ('value__h', True),
            ('value__i', False),
            ('value__j', None),
            ('value__k', {'l': 'm'}),
            ('value__n', [None, True, False]),
            ('value__p', 4.2),
            ('value__r', {'s': True, 't': False}),
        ]
        for lookup, expected in tests:
            with self.subTest(lookup=lookup):
                self.assertEqual(qs.values_list(lookup, flat=True).get(), expected)

    def test_key_values_boolean(self):
        qs = NullableJSONModel.objects.filter(value__h=True, value__i=False)
        tests = [
            ('value__h', True),
            ('value__i', False),
        ]
        for lookup, expected in tests:
            with self.subTest(lookup=lookup):
                self.assertIs(qs.values_list(lookup, flat=True).get(), expected)

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_key_contains(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)
        self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)

    def test_key_icontains(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)

    def test_key_startswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)

    def test_key_istartswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__istartswith='B').exists(), True)

    def test_key_endswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__endswith='r').exists(), True)

    def test_key_iendswith(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iendswith='R').exists(), True)

    def test_key_regex(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__regex=r'^bar$').exists(), True)

    def test_key_iregex(self):
        self.assertIs(NullableJSONModel.objects.filter(value__foo__iregex=r'^bAr$').exists(), True)

    def test_key_quoted_string(self):
        self.assertEqual(
            NullableJSONModel.objects.filter(value__o='""quoted""').get(),
            self.objs[4],
        )

    @skipUnlessDBFeature('has_json_operators')
    def test_key_sql_injection(self):
        with CaptureQueriesContext(connection) as queries:
            self.assertIs(
                NullableJSONModel.objects.filter(**{
                    """"""value__test' = '""a""') OR 1 = 1 OR ('d"""""": 'x',
                }).exists(),
                False,
            )
        self.assertIn(
            """""".""value"" -> 'test'' = ''""a""'') OR 1 = 1 OR (''d') = '""x""' """""",
            queries[0]['sql'],
        )

    @skipIfDBFeature('has_json_operators')
    def test_key_sql_injection_escape(self):
        query = str(JSONModel.objects.filter(**{
            """"""value__test"") = '""a""' OR 1 = 1 OR (""d"""""": 'x',
        }).query)
        self.assertIn('""test\\""', query)
        self.assertIn('\\""d', query)

    def test_key_escape(self):
        obj = NullableJSONModel.objects.create(value={'%total': 10})
        self.assertEqual(NullableJSONModel.objects.filter(**{'value__%total': 10}).get(), obj)

    def test_none_key_and_exact_lookup(self):
        self.assertSequenceEqual(
            NullableJSONModel.objects.filter(value__a='b', value__j=None),
            [self.objs[4]],
        )

    def test_lookups_with_key_transform(self):
        tests = (
            ('value__baz__has_key', 'c'),
            ('value__baz__has_keys', ['a', 'c']),
            ('value__baz__has_any_keys', ['a', 'x']),
            ('value__has_key', KeyTextTransform('foo', 'value')),
        )
        for lookup, value in tests:
            with self.subTest(lookup=lookup):
                self.assertIs(NullableJSONModel.objects.filter(
                    **{lookup: value},
                ).exists(), True)

    @skipUnlessDBFeature('supports_json_field_contains')
    def test_contains_contained_by_with_key_transform(self):
        tests = [
            ('value__d__contains', 'e'),
            ('value__d__contains', [{'f': 'g'}]),
            ('value__contains', KeyTransform('bax', 'value')),
            ('value__contains', F('value__bax')),
            ('value__baz__contains', {'a': 'b'}),
            ('value__baz__contained_by', {'a': 'b', 'c': 'd', 'e': 'f'}),
            (
                'value__contained_by',
                KeyTransform('x', RawSQL(
                    self.raw_sql,
                    ['{""x"": {""a"": ""b"", ""c"": 1, ""d"": ""e""}}'],
                )),
            ),
        ]
        # For databases where {'f': 'g'} (without surrounding []) matches
        # [{'f': 'g'}].
        if not connection.features.json_key_contains_list_matching_requires_list:
            tests.append(('value__d__contains', {'f': 'g'}))
        for lookup, value in tests:
            with self.subTest(lookup=lookup, value=value):
                self.assertIs(NullableJSONModel.objects.filter(
                    **{lookup: value},
                ).exists(), True)

    def test_join_key_transform_annotation_expression(self):
        related_obj = RelatedJSONModel.objects.create(
            value={'d': ['f', 'e']},
            json_model=self.objs[4],
        )
        RelatedJSONModel.objects.create(
            value={'d': ['e', 'f']},
            json_model=self.objs[4],
        )
        self.assertSequenceEqual(
            RelatedJSONModel.objects.annotate(
                key=F('value__d'),
                related_key=F('json_model__value__d'),
                chain=F('key__1'),
                expr=Cast('key', models.JSONField()),
            ).filter(chain=F('related_key__0')),
            [related_obj],
        )",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 91 304 44 302 44 648 44 1502 44 1502 93 2006 61 91 303 44 91 93 44 123 125 44 123 648 58 648 44 648 58 1503 125 44 123 648 58 648 44 648 58 1503 44 648 58 91 648 44 123 648 58 648 125 93 44 648 58 304 44 648 58 302 44 648 58 303 44 648 58 123 648 58 648 125 44 648 58 91 303 44 304 44 302 93 44 648 58 648 44 648 58 1502 44 648 58 123 648 58 304 44 648 58 302 125 44 125 44 91 1501 44 91 1502 93 93 44 123 648 58 304 44 648 58 302 44 648 58 648 125 44 123 648 58 648 44 648 58 123 648 58 648 44 648 58 648 125 44 648 58 91 648 44 648 93 44 648 58 123 648 58 648 125 44 125 44 93 2004 46 2007 61 91 2008 46 2009 46 2010 40 2011 61 2011 41 385 2011 398 2006 93 392 2012 46 2013 46 2014 58 2004 46 2007 46 2015 40 91 2008 46 2009 46 2010 40 2011 61 2011 41 385 2011 398 2004 46 2005 93 41 2004 46 2016 61 648 392 2012 46 2017 614 648 360 648 348 2018 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2022 61 123 125 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2023 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2022 61 123 648 58 648 44 648 58 1503 125 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2024 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2025 61 648 41 44 2019 46 2007 91 1502 58 1502 93 44 41 348 2026 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2027 61 304 41 44 91 2019 46 2007 91 1500 93 93 44 41 348 2028 40 2019 41 58 2029 61 2012 46 2017 614 648 308 2012 46 2030 2006 61 91 123 648 58 1503 44 648 58 648 125 44 123 648 58 1503 44 648 58 648 125 44 123 648 58 45 1501 44 648 58 648 125 44 123 648 58 1503 44 648 58 648 125 44 123 648 58 45 1510 44 648 58 648 125 44 93 385 2031 398 91 648 44 648 93 58 497 2019 46 2032 40 2033 61 2031 41 58 2007 61 91 2008 46 2009 46 2010 40 638 123 2031 58 2011 125 41 385 2011 398 2006 93 2034 61 2008 46 2009 46 2021 40 638 123 648 37 2031 58 302 125 44 41 46 2035 40 648 37 2031 41 2036 61 91 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1501 93 44 2007 91 1500 93 93 392 2029 428 2012 46 2017 614 648 58 621 2036 61 91 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1502 93 44 2007 91 1501 93 44 2007 91 1500 93 93 2019 46 2020 40 2034 44 2036 41 348 2037 40 2019 41 58 2038 61 2008 46 2009 46 2021 40 2039 61 302 41 385 2040 398 40 2038 46 2035 40 648 41 44 2038 46 2041 40 2042 61 2043 40 648 44 2043 40 648 44 648 41 41 41 46 2035 40 648 41 44 41 58 2019 46 2020 40 2040 44 91 2019 46 2007 91 1502 93 93 41 2040 61 2008 46 2009 46 2021 40 2027 61 302 41 2019 46 2044 40 2040 46 2021 40 2027 61 302 41 46 2041 40 2042 61 2045 40 648 44 2043 40 648 44 2043 40 648 44 648 41 41 41 44 41 46 2006 40 648 41 46 2041 40 2046 61 2047 40 648 41 41 46 2035 40 648 41 44 91 40 303 44 1500 41 44 40 648 44 1501 41 93 44 427 46 2048 40 648 44 648 41 44 41 348 2049 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2027 61 302 44 41 46 2006 40 648 41 46 2041 40 2046 61 2047 40 648 41 41 46 2035 40 648 41 2019 46 2044 40 2040 44 91 1500 44 1501 93 44 427 46 2048 40 648 41 41 348 2050 40 2019 41 58 2008 46 2009 46 2010 40 2051 61 123 648 58 648 125 41 2040 61 2008 46 2009 46 2021 40 2052 61 302 41 2019 46 2020 40 2040 46 2006 40 648 44 41 46 2041 40 2046 61 2047 40 648 41 44 41 46 2035 40 648 41 44 91 123 648 58 648 44 648 58 1501 125 93 44 41 348 2053 40 2019 41 58 2054 61 2055 40 2019 46 2016 44 91 648 93 41 2019 46 2020 40 2008 46 2009 46 2021 40 2056 61 2043 40 648 44 2054 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2057 40 2019 41 58 2054 61 2055 40 2019 46 2016 44 91 648 93 41 2019 46 2020 40 2008 46 2009 46 2021 40 2056 61 2043 40 648 44 2043 40 648 44 2054 41 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2058 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2043 40 648 44 648 41 44 2059 61 2043 40 648 44 648 41 44 2054 61 2043 40 648 44 2060 40 648 44 2061 46 2062 40 41 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2064 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 648 93 125 41 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2063 40 648 41 44 2059 61 2063 40 648 41 44 2054 61 2060 40 648 44 2061 46 2062 40 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2065 93 44 41 348 2066 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2043 40 648 44 648 41 44 2059 61 2043 40 648 44 2043 40 648 44 648 41 41 44 2054 61 2043 40 648 44 2043 40 648 44 2060 40 648 44 2061 46 2062 40 41 41 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2067 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 123 648 58 648 125 44 123 648 58 648 125 93 125 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2042 61 2063 40 648 41 44 2059 61 2063 40 648 41 44 2054 61 2060 40 648 44 2061 46 2062 40 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2065 93 44 41 348 2068 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2039 61 302 41 46 2041 40 2069 61 2070 40 2008 46 2009 46 2021 40 2071 61 2072 40 648 41 41 46 2006 40 648 41 41 44 2042 61 2043 40 648 44 648 41 44 2059 61 2043 40 648 44 2043 40 648 44 648 41 41 44 41 46 2021 40 2059 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2073 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2041 40 2054 61 2074 40 2043 40 648 44 648 41 44 2075 61 2076 40 41 44 41 44 41 46 2021 40 2077 61 302 41 44 2019 46 2007 91 1502 58 1502 93 44 41 348 2078 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2079 61 648 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 348 2080 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2079 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2081 40 2019 41 58 2082 61 91 40 2083 40 2084 61 648 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2043 40 648 44 2043 40 648 44 648 41 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2063 40 648 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2043 40 648 44 2043 40 648 44 648 41 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2063 40 648 41 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2085 61 648 41 44 2019 46 2007 91 1502 93 41 44 40 2083 40 2079 61 2043 40 648 44 2043 40 648 44 2043 40 648 44 648 41 41 41 41 44 2019 46 2007 91 1502 93 44 41 44 40 2083 40 2079 61 2063 40 648 41 41 44 2019 46 2007 91 1502 93 41 44 93 385 2086 44 2036 398 2082 58 497 2019 46 2032 40 2086 61 2086 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2086 41 44 91 2036 93 44 41 348 2087 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 91 123 648 58 1501 125 44 123 648 58 648 125 93 41 2082 61 91 2083 40 2088 61 648 41 44 2083 40 2079 61 2043 40 648 44 2043 40 1501 44 648 41 41 41 44 2083 40 2079 61 2043 40 648 44 2043 40 648 44 648 41 41 41 44 2083 40 2079 61 2063 40 648 41 41 44 93 385 2086 398 2082 58 497 2019 46 2032 40 2086 61 2086 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2086 41 44 91 2065 93 44 41 348 2089 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2090 61 91 648 44 648 44 648 93 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2091 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2092 61 91 648 44 648 93 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 64 2093 40 648 41 348 2094 40 2019 41 58 2082 61 91 40 123 125 44 2019 46 2007 91 1502 58 1502 93 43 2019 46 2007 91 1502 58 1502 93 41 44 40 123 648 58 123 648 58 648 44 648 58 648 125 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 123 648 58 648 125 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 123 648 58 648 125 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 304 44 648 58 302 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 648 44 123 648 58 648 125 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 648 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 123 648 58 648 125 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 1501 44 91 1502 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 1501 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 91 1502 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 91 303 44 304 44 302 93 125 44 91 2019 46 2007 91 1502 93 93 41 44 40 123 648 58 303 125 44 91 2019 46 2007 91 1502 93 93 41 44 93 385 2011 44 2036 398 2082 58 497 2019 46 2032 40 2011 61 2011 41 58 2040 61 2008 46 2009 46 2021 40 2095 61 2011 41 2019 46 2020 40 2040 44 2036 41 64 2096 40 648 41 348 2097 40 2019 41 58 2098 61 648 497 2019 46 2099 40 2100 44 2098 41 58 2008 46 2009 46 2021 40 2095 61 123 648 58 123 648 58 648 44 648 58 648 125 125 44 41 46 2101 40 41 64 2093 40 648 44 648 44 41 348 2102 40 2019 41 58 385 2011 398 2019 46 2005 58 497 2019 46 2032 40 2011 61 2011 41 58 2040 61 2008 46 2009 46 2021 40 2095 61 2011 41 2019 46 2103 40 2040 46 2104 40 41 44 304 41 64 2093 40 648 41 348 2105 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2106 61 123 648 58 648 44 648 58 1503 44 648 58 304 125 41 2019 46 2020 40 2040 44 2019 46 2007 91 1502 58 1502 93 41 64 2096 40 648 41 348 2107 40 2019 41 58 2098 61 648 497 2019 46 2099 40 2100 44 2098 41 58 2008 46 2009 46 2021 40 2106 61 123 648 58 648 125 41 46 2101 40 41 348 2108 40 2019 41 58 2040 61 2008 46 2009 46 2109 40 648 41 2110 61 91 40 303 44 41 93 42 2111 40 2019 46 2007 41 2110 91 1502 93 61 40 648 44 41 2019 46 2020 40 2040 44 2110 41 64 2093 40 648 41 348 2112 40 2019 41 58 2034 61 2008 46 2009 46 2113 40 648 41 46 2109 40 648 41 2019 46 2020 40 2034 44 91 40 648 44 41 44 40 303 44 41 93 41 348 2114 40 2019 41 58 621 2019 46 2020 40 2008 46 2009 46 2021 40 2115 61 304 41 44 2019 46 2007 91 58 1502 93 43 2019 46 2007 91 1502 58 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2116 61 304 41 44 2019 46 2007 91 58 1502 93 43 2019 46 2007 91 1502 58 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2115 61 302 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2116 61 302 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2117 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 303 125 41 2019 46 2020 40 2008 46 2009 46 2021 40 2083 40 2115 61 304 41 124 2083 40 2118 61 303 41 41 44 2019 46 2007 91 58 1502 93 43 2019 46 2007 91 1502 58 93 43 91 2065 93 44 41 348 2119 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2120 61 303 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2121 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 1501 125 41 392 2012 46 2017 614 648 58 621 621 2019 46 2020 40 2008 46 2009 46 2122 40 2120 61 303 41 44 2019 46 2007 91 1501 58 1502 93 43 2019 46 2007 91 1502 58 93 43 91 2065 93 44 41 360 58 2019 46 2020 40 2008 46 2009 46 2122 40 2120 61 303 41 44 91 2065 93 41 348 2123 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2124 61 1501 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2125 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2118 61 648 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 348 2126 40 2019 41 58 2040 61 2008 46 2009 46 2041 40 2033 61 2070 40 2008 46 2009 46 2021 40 2071 61 2072 40 648 41 41 46 2006 40 648 41 41 44 41 46 2021 40 2127 61 648 41 2019 46 2020 40 2040 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 41 348 2128 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2129 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2130 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2131 61 123 648 58 648 125 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2132 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2133 61 1502 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2134 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2135 61 648 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2136 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2137 61 1502 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2137 61 1502 41 44 91 2019 46 2007 91 1502 93 44 2019 46 2007 91 1502 93 93 44 41 2019 46 2103 40 2008 46 2009 46 2021 40 2138 61 1502 41 46 2104 40 41 44 302 41 348 2139 40 2019 41 58 2082 61 91 40 2083 40 2118 61 648 41 44 91 2019 46 2007 91 1500 93 93 41 44 40 2083 40 2056 61 648 41 44 91 2019 46 2007 91 1500 93 44 2019 46 2007 91 1502 93 93 41 44 93 385 2086 44 2036 398 2082 58 2019 46 2020 40 2008 46 2009 46 2122 40 2086 41 44 2036 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 126 2086 41 44 2036 44 41 348 2140 40 2019 41 58 621 2086 61 2083 40 2056 61 648 41 2141 61 91 2019 46 2007 91 1502 93 93 2142 61 91 2019 46 2007 91 1500 93 44 2019 46 2007 91 1502 93 93 2019 46 2020 40 2008 46 2009 46 2122 40 2086 41 44 2142 44 41 2019 46 2020 40 2008 46 2009 46 2122 40 126 2086 41 44 2141 44 41 2019 46 2143 40 2008 46 2009 46 2021 40 2086 124 126 2086 41 44 2141 43 2142 44 41 2019 46 2143 40 2008 46 2009 46 2122 40 2086 38 126 2086 41 44 2141 43 2142 44 41 621 2019 46 2020 40 2008 46 2009 46 2122 40 2086 38 2083 40 2144 61 302 41 41 44 2019 46 2007 91 1500 58 1502 93 43 2019 46 2007 91 1502 58 93 44 41 2019 46 2020 40 2008 46 2009 46 2021 40 2086 38 2083 40 2144 61 302 41 41 44 2141 44 41 348 2145 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2146 61 2008 46 2009 46 2021 40 2147 61 1503 41 44 41 44 2019 46 2007 91 1502 58 1502 93 44 41 64 2093 40 648 41 348 2148 40 2019 41 58 2082 61 91 40 91 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 2019 46 2007 91 1502 93 93 41 44 40 91 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 93 41 44 93 385 2011 44 2036 398 2082 58 497 2019 46 2032 40 2011 61 2011 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2149 61 2011 41 44 2036 44 41 348 2150 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2151 61 648 41 46 2104 40 41 44 304 41 2019 46 2103 40 2008 46 2009 46 2021 40 2151 61 648 41 46 2104 40 41 44 302 41 348 2152 40 2019 41 58 2082 61 91 40 648 44 91 1503 93 44 2019 46 2007 91 1502 58 1502 93 41 44 40 648 44 91 1503 44 1503 93 44 2019 46 2007 91 1502 58 1502 93 41 44 40 648 44 91 1501 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 1501 44 1502 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 2043 40 648 44 2043 40 648 44 648 41 41 93 44 91 2019 46 2007 91 1502 93 93 44 41 44 40 648 44 91 2063 40 648 41 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 2043 40 648 44 2043 40 648 44 648 41 41 44 648 93 44 91 2019 46 2007 91 1502 93 93 44 41 44 40 648 44 91 2063 40 648 41 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 648 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 91 648 44 648 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 91 648 44 648 93 44 91 648 93 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 123 648 58 648 125 44 123 648 58 648 125 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 304 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 40 648 44 91 302 44 648 93 44 91 2019 46 2007 91 1502 93 93 41 44 93 385 2153 44 2011 44 2036 398 2082 58 497 2019 46 2032 40 2153 61 2153 44 2011 61 2011 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 638 123 2153 58 2011 125 41 44 2036 44 41 348 2154 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2155 61 304 41 2082 61 91 40 648 44 648 41 44 40 648 44 1503 41 44 40 648 44 91 648 44 123 648 58 648 125 93 41 44 40 648 44 304 41 44 40 648 44 302 41 44 40 648 44 303 41 44 40 648 44 123 648 58 648 125 41 44 40 648 44 91 303 44 304 44 302 93 41 44 40 648 44 1502 41 44 40 648 44 123 648 58 304 44 648 58 302 125 41 44 93 385 2153 44 2036 398 2082 58 497 2019 46 2032 40 2153 61 2153 41 58 2019 46 2156 40 2040 46 2109 40 2153 44 2157 61 304 41 46 2101 40 41 44 2036 41 348 2158 40 2019 41 58 2040 61 2008 46 2009 46 2021 40 2155 61 304 44 2159 61 302 41 2082 61 91 40 648 44 304 41 44 40 648 44 302 41 44 93 385 2153 44 2036 398 2082 58 497 2019 46 2032 40 2153 61 2153 41 58 2019 46 2103 40 2040 46 2109 40 2153 44 2157 61 304 41 46 2101 40 41 44 2036 41 64 2093 40 648 41 348 2160 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2161 61 648 41 46 2104 40 41 44 302 41 2019 46 2103 40 2008 46 2009 46 2021 40 2161 61 648 41 46 2104 40 41 44 304 41 348 2162 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2163 61 648 41 46 2104 40 41 44 304 41 348 2164 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2165 61 648 41 46 2104 40 41 44 304 41 348 2166 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2167 61 648 41 46 2104 40 41 44 304 41 348 2168 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2169 61 648 41 46 2104 40 41 44 304 41 348 2170 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2171 61 648 41 46 2104 40 41 44 304 41 348 2172 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2173 61 648 41 46 2104 40 41 44 304 41 348 2174 40 2019 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 2175 61 648 41 46 2104 40 41 44 304 41 348 2176 40 2019 41 58 2019 46 2156 40 2008 46 2009 46 2021 40 2177 61 648 41 46 2101 40 41 44 2019 46 2007 91 1502 93 44 41 64 2093 40 648 41 348 2178 40 2019 41 58 497 2179 40 2012 41 311 2180 58 2019 46 2103 40 2008 46 2009 46 2021 40 638 123 648 58 648 44 125 41 46 2104 40 41 44 302 44 41 2019 46 2181 40 648 44 2180 91 1500 93 91 648 93 44 41 64 2096 40 648 41 348 2182 40 2019 41 58 2034 61 2183 40 2184 46 2009 46 2021 40 638 123 648 58 648 44 125 41 46 2034 41 2019 46 2181 40 648 44 2034 41 2019 46 2181 40 648 44 2034 41 348 2185 40 2019 41 58 2065 61 2008 46 2009 46 2010 40 2011 61 123 648 58 1502 125 41 2019 46 2156 40 2008 46 2009 46 2021 40 638 123 648 58 1502 125 41 46 2101 40 41 44 2065 41 348 2186 40 2019 41 58 2019 46 2020 40 2008 46 2009 46 2021 40 2118 61 648 44 2120 61 303 41 44 91 2019 46 2007 91 1502 93 93 44 41 348 2187 40 2019 41 58 2082 61 40 40 648 44 648 41 44 40 648 44 91 648 44 648 93 41 44 40 648 44 91 648 44 648 93 41 44 40 648 44 2045 40 648 44 648 41 41 44 41 385 2153 44 2011 398 2082 58 497 2019 46 2032 40 2153 61 2153 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 638 123 2153 58 2011 125 44 41 46 2104 40 41 44 304 41 64 2093 40 648 41 348 2188 40 2019 41 58 2082 61 91 40 648 44 648 41 44 40 648 44 91 123 648 58 648 125 93 41 44 40 648 44 2043 40 648 44 648 41 41 44 40 648 44 2063 40 648 41 41 44 40 648 44 123 648 58 648 125 41 44 40 648 44 123 648 58 648 44 648 58 648 44 648 58 648 125 41 44 40 648 44 2043 40 648 44 2055 40 2019 46 2016 44 91 648 93 44 41 41 44 41 44 93 621 621 392 422 2012 46 2013 46 2189 58 2082 46 2190 40 40 648 44 123 648 58 648 125 41 41 385 2153 44 2011 398 2082 58 497 2019 46 2032 40 2153 61 2153 44 2011 61 2011 41 58 2019 46 2103 40 2008 46 2009 46 2021 40 638 123 2153 58 2011 125 44 41 46 2104 40 41 44 304 41 348 2191 40 2019 41 58 2192 61 2193 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 648 93 125 44 2194 61 2019 46 2007 91 1502 93 44 41 2193 46 2009 46 2010 40 2011 61 123 648 58 91 648 44 648 93 125 44 2194 61 2019 46 2007 91 1502 93 44 41 2019 46 2020 40 2193 46 2009 46 2041 40 2042 61 2063 40 648 41 44 2195 61 2063 40 648 41 44 2059 61 2063 40 648 41 44 2054 61 2060 40 648 44 2061 46 2062 40 41 41 44 41 46 2021 40 2059 61 2063 40 648 41 41 44 91 2192 93 44 41 
134901,Python,"class Queries1Tests(TestCase):
    @classmethod
    def setUpTestData(cls):
        cls.nc1 = generic = NamedCategory.objects.create(name=""Generic"")
        cls.t1 = Tag.objects.create(name='t1', category=generic)
        cls.t2 = Tag.objects.create(name='t2', parent=cls.t1, category=generic)
        cls.t3 = Tag.objects.create(name='t3', parent=cls.t1)
        cls.t4 = Tag.objects.create(name='t4', parent=cls.t3)
        cls.t5 = Tag.objects.create(name='t5', parent=cls.t3)

        cls.n1 = Note.objects.create(note='n1', misc='foo', id=1)
        cls.n2 = Note.objects.create(note='n2', misc='bar', id=2)
        cls.n3 = Note.objects.create(note='n3', misc='foo', id=3, negate=False)

        cls.ann1 = Annotation.objects.create(name='a1', tag=cls.t1)
        cls.ann1.notes.add(cls.n1)
        ann2 = Annotation.objects.create(name='a2', tag=cls.t4)
        ann2.notes.add(cls.n2, cls.n3)

        # Create these out of order so that sorting by 'id' will be different to sorting
        # by 'info'. Helps detect some problems later.
        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)
        e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)

        cls.a1 = Author.objects.create(name='a1', num=1001, extra=e1)
        cls.a2 = Author.objects.create(name='a2', num=2002, extra=e1)
        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)
        cls.a4 = Author.objects.create(name='a4', num=4004, extra=cls.e2)

        cls.time1 = datetime.datetime(2007, 12, 19, 22, 25, 0)
        cls.time2 = datetime.datetime(2007, 12, 19, 21, 0, 0)
        time3 = datetime.datetime(2007, 12, 20, 22, 25, 0)
        time4 = datetime.datetime(2007, 12, 20, 21, 0, 0)
        cls.i1 = Item.objects.create(name='one', created=cls.time1, modified=cls.time1, creator=cls.a1, note=cls.n3)
        cls.i1.tags.set([cls.t1, cls.t2])
        cls.i2 = Item.objects.create(name='two', created=cls.time2, creator=cls.a2, note=cls.n2)
        cls.i2.tags.set([cls.t1, cls.t3])
        cls.i3 = Item.objects.create(name='three', created=time3, creator=cls.a2, note=cls.n3)
        cls.i4 = Item.objects.create(name='four', created=time4, creator=cls.a4, note=cls.n3)
        cls.i4.tags.set([cls.t4])

        cls.r1 = Report.objects.create(name='r1', creator=cls.a1)
        cls.r2 = Report.objects.create(name='r2', creator=cls.a3)
        cls.r3 = Report.objects.create(name='r3')

        # Ordering by 'rank' gives us rank2, rank1, rank3. Ordering by the Meta.ordering
        # will be rank3, rank2, rank1.
        cls.rank1 = Ranking.objects.create(rank=2, author=cls.a2)

        cls.c1 = Cover.objects.create(title=""first"", item=cls.i4)
        cls.c2 = Cover.objects.create(title=""second"", item=cls.i2)

    def test_subquery_condition(self):
        qs1 = Tag.objects.filter(pk__lte=0)
        qs2 = Tag.objects.filter(parent__in=qs1)
        qs3 = Tag.objects.filter(parent__in=qs2)
        self.assertEqual(qs3.query.subq_aliases, {'T', 'U', 'V'})
        self.assertIn('v0', str(qs3.query).lower())
        qs4 = qs3.filter(parent__in=qs1)
        self.assertEqual(qs4.query.subq_aliases, {'T', 'U', 'V'})
        # It is possible to reuse U for the second subquery, no need to use W.
        self.assertNotIn('w0', str(qs4.query).lower())
        # So, 'U0.""id""' is referenced in SELECT and WHERE twice.
        self.assertEqual(str(qs4.query).lower().count('u0.'), 4)

    def test_ticket1050(self):
        self.assertSequenceEqual(
            Item.objects.filter(tags__isnull=True),
            [self.i3],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__id__isnull=True),
            [self.i3],
        )

    def test_ticket1801(self):
        self.assertSequenceEqual(
            Author.objects.filter(item=self.i2),
            [self.a2],
        )
        self.assertSequenceEqual(
            Author.objects.filter(item=self.i3),
            [self.a2],
        )
        self.assertSequenceEqual(
            Author.objects.filter(item=self.i2) & Author.objects.filter(item=self.i3),
            [self.a2],
        )

    def test_ticket2306(self):
        # Checking that no join types are ""left outer"" joins.
        query = Item.objects.filter(tags=self.t2).query
        self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])

        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1)).order_by('name'),
            [self.i1, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1)).filter(Q(tags=self.t2)),
            [self.i1],
        )
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1)).filter(Q(creator__name='fred') | Q(tags=self.t2)),
            [self.i1],
        )

        # Each filter call is processed ""at once"" against a single table, so this is
        # different from the previous example as it tries to find tags that are two
        # things at once (rather than two tags).
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1) & Q(tags=self.t2)),
            []
        )
        self.assertSequenceEqual(
            Item.objects.filter(Q(tags=self.t1), Q(creator__name='fred') | Q(tags=self.t2)),
            []
        )

        qs = Author.objects.filter(ranking__rank=2, ranking__id=self.rank1.id)
        self.assertSequenceEqual(list(qs), [self.a2])
        self.assertEqual(2, qs.query.count_active_tables(), 2)
        qs = Author.objects.filter(ranking__rank=2).filter(ranking__id=self.rank1.id)
        self.assertEqual(qs.query.count_active_tables(), 3)

    def test_ticket4464(self):
        self.assertSequenceEqual(
            Item.objects.filter(tags=self.t1).filter(tags=self.t2),
            [self.i1],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).distinct().order_by('name'),
            [self.i1, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).filter(tags=self.t3),
            [self.i2],
        )

        # Make sure .distinct() works with slicing (this was broken in Oracle).
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).order_by('name')[:3],
            [self.i1, self.i1, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(tags__in=[self.t1, self.t2]).distinct().order_by('name')[:3],
            [self.i1, self.i2],
        )

    def test_tickets_2080_3592(self):
        self.assertSequenceEqual(
            Author.objects.filter(item__name='one') | Author.objects.filter(name='a3'),
            [self.a1, self.a3],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(item__name='one') | Q(name='a3')),
            [self.a1, self.a3],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(name='a3') | Q(item__name='one')),
            [self.a1, self.a3],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(item__name='three') | Q(report__name='r3')),
            [self.a2],
        )

    def test_ticket6074(self):
        # Merging two empty result sets shouldn't leave a queryset with no constraints
        # (which would match everything).
        self.assertSequenceEqual(Author.objects.filter(Q(id__in=[])), [])
        self.assertSequenceEqual(
            Author.objects.filter(Q(id__in=[]) | Q(id__in=[])),
            []
        )

    def test_tickets_1878_2939(self):
        self.assertEqual(Item.objects.values('creator').distinct().count(), 3)

        # Create something with a duplicate 'name' so that we can test multi-column
        # cases (which require some tricky SQL transformations under the covers).
        xx = Item(name='four', created=self.time1, creator=self.a2, note=self.n1)
        xx.save()
        self.assertEqual(
            Item.objects.exclude(name='two').values('creator', 'name').distinct().count(),
            4
        )
        self.assertEqual(
            (
                Item.objects
                .exclude(name='two')
                .extra(select={'foo': '%s'}, select_params=(1,))
                .values('creator', 'name', 'foo')
                .distinct()
                .count()
            ),
            4
        )
        self.assertEqual(
            (
                Item.objects
                .exclude(name='two')
                .extra(select={'foo': '%s'}, select_params=(1,))
                .values('creator', 'name')
                .distinct()
                .count()
            ),
            4
        )
        xx.delete()

    def test_ticket7323(self):
        self.assertEqual(Item.objects.values('creator', 'name').count(), 4)

    def test_ticket2253(self):
        q1 = Item.objects.order_by('name')
        q2 = Item.objects.filter(id=self.i1.id)
        self.assertSequenceEqual(q1, [self.i4, self.i1, self.i3, self.i2])
        self.assertSequenceEqual(q2, [self.i1])
        self.assertSequenceEqual(
            (q1 | q2).order_by('name'),
            [self.i4, self.i1, self.i3, self.i2],
        )
        self.assertSequenceEqual((q1 & q2).order_by('name'), [self.i1])

        q1 = Item.objects.filter(tags=self.t1)
        q2 = Item.objects.filter(note=self.n3, tags=self.t2)
        q3 = Item.objects.filter(creator=self.a4)
        self.assertSequenceEqual(
            ((q1 & q2) | q3).order_by('name'),
            [self.i4, self.i1],
        )

    def test_order_by_tables(self):
        q1 = Item.objects.order_by('name')
        q2 = Item.objects.filter(id=self.i1.id)
        list(q2)
        combined_query = (q1 & q2).order_by('name').query
        self.assertEqual(len([
            t for t in combined_query.alias_map if combined_query.alias_refcount[t]
        ]), 1)

    def test_order_by_join_unref(self):
        """"""
        This test is related to the above one, testing that there aren't
        old JOINs in the query.
        """"""
        qs = Celebrity.objects.order_by('greatest_fan__fan_of')
        self.assertIn('OUTER JOIN', str(qs.query))
        qs = qs.order_by('id')
        self.assertNotIn('OUTER JOIN', str(qs.query))

    def test_get_clears_ordering(self):
        """"""
        get() should clear ordering for optimization purposes.
        """"""
        with CaptureQueriesContext(connection) as captured_queries:
            Author.objects.order_by('name').get(pk=self.a1.pk)
        self.assertNotIn('order by', captured_queries[0]['sql'].lower())

    def test_tickets_4088_4306(self):
        self.assertSequenceEqual(Report.objects.filter(creator=1001), [self.r1])
        self.assertSequenceEqual(
            Report.objects.filter(creator__num=1001),
            [self.r1]
        )
        self.assertSequenceEqual(Report.objects.filter(creator__id=1001), [])
        self.assertSequenceEqual(
            Report.objects.filter(creator__id=self.a1.id),
            [self.r1]
        )
        self.assertSequenceEqual(
            Report.objects.filter(creator__name='a1'),
            [self.r1]
        )

    def test_ticket4510(self):
        self.assertSequenceEqual(
            Author.objects.filter(report__name='r1'),
            [self.a1],
        )

    def test_ticket7378(self):
        self.assertSequenceEqual(self.a1.report_set.all(), [self.r1])

    def test_tickets_5324_6704(self):
        self.assertSequenceEqual(
            Item.objects.filter(tags__name='t4'),
            [self.i4],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t4').order_by('name').distinct(),
            [self.i1, self.i3, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t4').order_by('name').distinct().reverse(),
            [self.i2, self.i3, self.i1],
        )
        self.assertSequenceEqual(
            Author.objects.exclude(item__name='one').distinct().order_by('name'),
            [self.a2, self.a3, self.a4],
        )

        # Excluding across a m2m relation when there is more than one related
        # object associated was problematic.
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t1').order_by('name'),
            [self.i4, self.i3],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t1').exclude(tags__name='t4'),
            [self.i3],
        )

        # Excluding from a relation that cannot be NULL should not use outer joins.
        query = Item.objects.exclude(creator__in=[self.a1, self.a2]).query
        self.assertNotIn(LOUTER, [x.join_type for x in query.alias_map.values()])

        # Similarly, when one of the joins cannot possibly, ever, involve NULL
        # values (Author -> ExtraInfo, in the following), it should never be
        # promoted to a left outer join. So the following query should only
        # involve one ""left outer"" join (Author -> Item is 0-to-many).
        qs = Author.objects.filter(id=self.a1.id).filter(Q(extra__note=self.n1) | Q(item__note=self.n3))
        self.assertEqual(
            len([
                x for x in qs.query.alias_map.values()
                if x.join_type == LOUTER and qs.query.alias_refcount[x.table_alias]
            ]),
            1
        )

        # The previous changes shouldn't affect nullable foreign key joins.
        self.assertSequenceEqual(
            Tag.objects.filter(parent__isnull=True).order_by('name'),
            [self.t1]
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(parent__isnull=True).order_by('name'),
            [self.t2, self.t3, self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(Q(parent__name='t1') | Q(parent__isnull=True)).order_by('name'),
            [self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(Q(parent__isnull=True) | Q(parent__name='t1')).order_by('name'),
            [self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(Q(parent__parent__isnull=True)).order_by('name'),
            [self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.filter(~Q(parent__parent__isnull=True)).order_by('name'),
            [self.t4, self.t5],
        )

    def test_ticket2091(self):
        t = Tag.objects.get(name='t4')
        self.assertSequenceEqual(Item.objects.filter(tags__in=[t]), [self.i4])

    def test_avoid_infinite_loop_on_too_many_subqueries(self):
        x = Tag.objects.filter(pk=1)
        local_recursion_limit = sys.getrecursionlimit() // 16
        msg = 'Maximum recursion depth exceeded: too many subqueries.'
        with self.assertRaisesMessage(RecursionError, msg):
            for i in range(local_recursion_limit + 2):
                x = Tag.objects.filter(pk__in=x)

    def test_reasonable_number_of_subq_aliases(self):
        x = Tag.objects.filter(pk=1)
        for _ in range(20):
            x = Tag.objects.filter(pk__in=x)
        self.assertEqual(
            x.query.subq_aliases, {
                'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD',
                'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN',
            }
        )

    def test_heterogeneous_qs_combination(self):
        # Combining querysets built on different models should behave in a well-defined
        # fashion. We raise an error.
        msg = 'Cannot combine queries on two different base models.'
        with self.assertRaisesMessage(TypeError, msg):
            Author.objects.all() & Tag.objects.all()
        with self.assertRaisesMessage(TypeError, msg):
            Author.objects.all() | Tag.objects.all()

    def test_ticket3141(self):
        self.assertEqual(Author.objects.extra(select={'foo': '1'}).count(), 4)
        self.assertEqual(
            Author.objects.extra(select={'foo': '%s'}, select_params=(1,)).count(),
            4
        )

    def test_ticket2400(self):
        self.assertSequenceEqual(
            Author.objects.filter(item__isnull=True),
            [self.a3],
        )
        self.assertSequenceEqual(
            Tag.objects.filter(item__isnull=True),
            [self.t5],
        )

    def test_ticket2496(self):
        self.assertSequenceEqual(
            Item.objects.extra(tables=['queries_author']).select_related().order_by('name')[:1],
            [self.i4],
        )

    def test_error_raised_on_filter_with_dictionary(self):
        with self.assertRaisesMessage(FieldError, 'Cannot parse keyword query as dict'):
            Note.objects.filter({'note': 'n1', 'misc': 'foo'})

    def test_tickets_2076_7256(self):
        # Ordering on related tables should be possible, even if the table is
        # not otherwise involved.
        self.assertSequenceEqual(
            Item.objects.order_by('note__note', 'name'),
            [self.i2, self.i4, self.i1, self.i3],
        )

        # Ordering on a related field should use the remote model's default
        # ordering as a final step.
        self.assertSequenceEqual(
            Author.objects.order_by('extra', '-name'),
            [self.a2, self.a1, self.a4, self.a3],
        )

        # Using remote model default ordering can span multiple models (in this
        # case, Cover is ordered by Item's default, which uses Note's default).
        self.assertSequenceEqual(Cover.objects.all(), [self.c1, self.c2])

        # If the remote model does not have a default ordering, we order by its 'id'
        # field.
        self.assertSequenceEqual(
            Item.objects.order_by('creator', 'name'),
            [self.i1, self.i3, self.i2, self.i4],
        )

        # Ordering by a many-valued attribute (e.g. a many-to-many or reverse
        # ForeignKey) is legal, but the results might not make sense. That
        # isn't Django's problem. Garbage in, garbage out.
        self.assertSequenceEqual(
            Item.objects.filter(tags__isnull=False).order_by('tags', 'id'),
            [self.i1, self.i2, self.i1, self.i2, self.i4],
        )

        # If we replace the default ordering, Django adjusts the required
        # tables automatically. Item normally requires a join with Note to do
        # the default ordering, but that isn't needed here.
        qs = Item.objects.order_by('name')
        self.assertSequenceEqual(qs, [self.i4, self.i1, self.i3, self.i2])
        self.assertEqual(len(qs.query.alias_map), 1)

    def test_tickets_2874_3002(self):
        qs = Item.objects.select_related().order_by('note__note', 'name')
        self.assertQuerysetEqual(qs, [self.i2, self.i4, self.i1, self.i3])

        # This is also a good select_related() test because there are multiple
        # Note entries in the SQL. The two Note items should be different.
        self.assertEqual(repr(qs[0].note), '<Note: n2>')
        self.assertEqual(repr(qs[0].creator.extra.note), '<Note: n1>')

    def test_ticket3037(self):
        self.assertSequenceEqual(
            Item.objects.filter(Q(creator__name='a3', name='two') | Q(creator__name='a4', name='four')),
            [self.i4],
        )

    def test_tickets_5321_7070(self):
        # Ordering columns must be included in the output columns. Note that
        # this means results that might otherwise be distinct are not (if there
        # are multiple values in the ordering cols), as in this example. This
        # isn't a bug; it's a warning to be careful with the selection of
        # ordering columns.
        self.assertSequenceEqual(
            Note.objects.values('misc').distinct().order_by('note', '-misc'),
            [{'misc': 'foo'}, {'misc': 'bar'}, {'misc': 'foo'}]
        )

    def test_ticket4358(self):
        # If you don't pass any fields to values(), relation fields are
        # returned as ""foo_id"" keys, not ""foo"". For consistency, you should be
        # able to pass ""foo_id"" in the fields list and have it work, too. We
        # actually allow both ""foo"" and ""foo_id"".
        # The *_id version is returned by default.
        self.assertIn('note_id', ExtraInfo.objects.values()[0])
        # You can also pass it in explicitly.
        self.assertSequenceEqual(ExtraInfo.objects.values('note_id'), [{'note_id': 1}, {'note_id': 2}])
        # ...or use the field name.
        self.assertSequenceEqual(ExtraInfo.objects.values('note'), [{'note': 1}, {'note': 2}])

    def test_ticket6154(self):
        # Multiple filter statements are joined using ""AND"" all the time.

        self.assertSequenceEqual(
            Author.objects.filter(id=self.a1.id).filter(Q(extra__note=self.n1) | Q(item__note=self.n3)),
            [self.a1],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(extra__note=self.n1) | Q(item__note=self.n3)).filter(id=self.a1.id),
            [self.a1],
        )

    def test_ticket6981(self):
        self.assertSequenceEqual(
            Tag.objects.select_related('parent').order_by('name'),
            [self.t1, self.t2, self.t3, self.t4, self.t5],
        )

    def test_ticket9926(self):
        self.assertSequenceEqual(
            Tag.objects.select_related(""parent"", ""category"").order_by('name'),
            [self.t1, self.t2, self.t3, self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Tag.objects.select_related('parent', ""parent__category"").order_by('name'),
            [self.t1, self.t2, self.t3, self.t4, self.t5],
        )

    def test_tickets_6180_6203(self):
        # Dates with limits and/or counts
        self.assertEqual(Item.objects.count(), 4)
        self.assertEqual(Item.objects.datetimes('created', 'month').count(), 1)
        self.assertEqual(Item.objects.datetimes('created', 'day').count(), 2)
        self.assertEqual(len(Item.objects.datetimes('created', 'day')), 2)
        self.assertEqual(Item.objects.datetimes('created', 'day')[0], datetime.datetime(2007, 12, 19, 0, 0))

    def test_tickets_7087_12242(self):
        # Dates with extra select columns
        self.assertSequenceEqual(
            Item.objects.datetimes('created', 'day').extra(select={'a': 1}),
            [datetime.datetime(2007, 12, 19, 0, 0), datetime.datetime(2007, 12, 20, 0, 0)],
        )
        self.assertSequenceEqual(
            Item.objects.extra(select={'a': 1}).datetimes('created', 'day'),
            [datetime.datetime(2007, 12, 19, 0, 0), datetime.datetime(2007, 12, 20, 0, 0)],
        )

        name = ""one""
        self.assertSequenceEqual(
            Item.objects.datetimes('created', 'day').extra(where=['name=%s'], params=[name]),
            [datetime.datetime(2007, 12, 19, 0, 0)],
        )

        self.assertSequenceEqual(
            Item.objects.extra(where=['name=%s'], params=[name]).datetimes('created', 'day'),
            [datetime.datetime(2007, 12, 19, 0, 0)],
        )

    def test_ticket7155(self):
        # Nullable dates
        self.assertSequenceEqual(
            Item.objects.datetimes('modified', 'day'),
            [datetime.datetime(2007, 12, 19, 0, 0)],
        )

    def test_order_by_rawsql(self):
        self.assertSequenceEqual(
            Item.objects.values('note__note').order_by(
                RawSQL('queries_note.note', ()),
                'id',
            ),
            [
                {'note__note': 'n2'},
                {'note__note': 'n3'},
                {'note__note': 'n3'},
                {'note__note': 'n3'},
            ],
        )

    def test_ticket7096(self):
        # Make sure exclude() with multiple conditions continues to work.
        self.assertSequenceEqual(
            Tag.objects.filter(parent=self.t1, name='t3').order_by('name'),
            [self.t3],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(parent=self.t1, name='t3').order_by('name'),
            [self.t1, self.t2, self.t4, self.t5],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(tags__name='t1', name='one').order_by('name').distinct(),
            [self.i4, self.i3, self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.filter(name__in=['three', 'four']).exclude(tags__name='t1').order_by('name'),
            [self.i4, self.i3],
        )

        # More twisted cases, involving nested negations.
        self.assertSequenceEqual(
            Item.objects.exclude(~Q(tags__name='t1', name='one')),
            [self.i1],
        )
        self.assertSequenceEqual(
            Item.objects.filter(~Q(tags__name='t1', name='one'), name='two'),
            [self.i2],
        )
        self.assertSequenceEqual(
            Item.objects.exclude(~Q(tags__name='t1', name='one'), name='two'),
            [self.i4, self.i1, self.i3],
        )

    def test_tickets_7204_7506(self):
        # Make sure querysets with related fields can be pickled. If this
        # doesn't crash, it's a Good Thing.
        pickle.dumps(Item.objects.all())

    def test_ticket7813(self):
        # We should also be able to pickle things that use select_related().
        # The only tricky thing here is to ensure that we do the related
        # selections properly after unpickling.
        qs = Item.objects.select_related()
        query = qs.query.get_compiler(qs.db).as_sql()[0]
        query2 = pickle.loads(pickle.dumps(qs.query))
        self.assertEqual(
            query2.get_compiler(qs.db).as_sql()[0],
            query
        )

    def test_deferred_load_qs_pickling(self):
        # Check pickling of deferred-loading querysets
        qs = Item.objects.defer('name', 'creator')
        q2 = pickle.loads(pickle.dumps(qs))
        self.assertEqual(list(qs), list(q2))
        q3 = pickle.loads(pickle.dumps(qs, pickle.HIGHEST_PROTOCOL))
        self.assertEqual(list(qs), list(q3))

    def test_ticket7277(self):
        self.assertSequenceEqual(
            self.n1.annotation_set.filter(
                Q(tag=self.t5) | Q(tag__children=self.t5) | Q(tag__children__children=self.t5)
            ),
            [self.ann1],
        )

    def test_tickets_7448_7707(self):
        # Complex objects should be converted to strings before being used in
        # lookups.
        self.assertSequenceEqual(
            Item.objects.filter(created__in=[self.time1, self.time2]),
            [self.i1, self.i2],
        )

    def test_ticket7235(self):
        # An EmptyQuerySet should not raise exceptions if it is filtered.
        Eaten.objects.create(meal='m')
        q = Eaten.objects.none()
        with self.assertNumQueries(0):
            self.assertQuerysetEqual(q.all(), [])
            self.assertQuerysetEqual(q.filter(meal='m'), [])
            self.assertQuerysetEqual(q.exclude(meal='m'), [])
            self.assertQuerysetEqual(q.complex_filter({'pk': 1}), [])
            self.assertQuerysetEqual(q.select_related('food'), [])
            self.assertQuerysetEqual(q.annotate(Count('food')), [])
            self.assertQuerysetEqual(q.order_by('meal', 'food'), [])
            self.assertQuerysetEqual(q.distinct(), [])
            self.assertQuerysetEqual(
                q.extra(select={'foo': ""1""}),
                []
            )
            self.assertQuerysetEqual(q.reverse(), [])
            q.query.low_mark = 1
            msg = 'Cannot change a query once a slice has been taken.'
            with self.assertRaisesMessage(TypeError, msg):
                q.extra(select={'foo': ""1""})
            self.assertQuerysetEqual(q.defer('meal'), [])
            self.assertQuerysetEqual(q.only('meal'), [])

    def test_ticket7791(self):
        # There were ""issues"" when ordering and distinct-ing on fields related
        # via ForeignKeys.
        self.assertEqual(
            len(Note.objects.order_by('extrainfo__info').distinct()),
            3
        )

        # Pickling of QuerySets using datetimes() should work.
        qs = Item.objects.datetimes('created', 'month')
        pickle.loads(pickle.dumps(qs))

    def test_ticket9997(self):
        # If a ValuesList or Values queryset is passed as an inner query, we
        # make sure it's only requesting a single value and use that as the
        # thing to select.
        self.assertSequenceEqual(
            Tag.objects.filter(name__in=Tag.objects.filter(parent=self.t1).values('name')),
            [self.t2, self.t3],
        )

        # Multi-valued values() and values_list() querysets should raise errors.
        with self.assertRaisesMessage(TypeError, 'Cannot use multi-field values as a filter value.'):
            Tag.objects.filter(name__in=Tag.objects.filter(parent=self.t1).values('name', 'id'))
        with self.assertRaisesMessage(TypeError, 'Cannot use multi-field values as a filter value.'):
            Tag.objects.filter(name__in=Tag.objects.filter(parent=self.t1).values_list('name', 'id'))

    def test_ticket9985(self):
        # qs.values_list(...).values(...) combinations should work.
        self.assertSequenceEqual(
            Note.objects.values_list(""note"", flat=True).values(""id"").order_by(""id""),
            [{'id': 1}, {'id': 2}, {'id': 3}]
        )
        self.assertSequenceEqual(
            Annotation.objects.filter(notes__in=Note.objects.filter(note=""n1"").values_list('note').values('id')),
            [self.ann1],
        )

    def test_ticket10205(self):
        # When bailing out early because of an empty ""__in"" filter, we need
        # to set things up correctly internally so that subqueries can continue properly.
        self.assertEqual(Tag.objects.filter(name__in=()).update(name=""foo""), 0)

    def test_ticket10432(self):
        # Testing an empty ""__in"" filter with a generator as the value.
        def f():
            return iter([])
        n_obj = Note.objects.all()[0]

        def g():
            yield n_obj.pk
        self.assertQuerysetEqual(Note.objects.filter(pk__in=f()), [])
        self.assertEqual(list(Note.objects.filter(pk__in=g())), [n_obj])

    def test_ticket10742(self):
        # Queries used in an __in clause don't execute subqueries

        subq = Author.objects.filter(num__lt=3000)
        qs = Author.objects.filter(pk__in=subq)
        self.assertSequenceEqual(qs, [self.a1, self.a2])

        # The subquery result cache should not be populated
        self.assertIsNone(subq._result_cache)

        subq = Author.objects.filter(num__lt=3000)
        qs = Author.objects.exclude(pk__in=subq)
        self.assertSequenceEqual(qs, [self.a3, self.a4])

        # The subquery result cache should not be populated
        self.assertIsNone(subq._result_cache)

        subq = Author.objects.filter(num__lt=3000)
        self.assertSequenceEqual(
            Author.objects.filter(Q(pk__in=subq) & Q(name='a1')),
            [self.a1],
        )

        # The subquery result cache should not be populated
        self.assertIsNone(subq._result_cache)

    def test_ticket7076(self):
        # Excluding shouldn't eliminate NULL entries.
        self.assertSequenceEqual(
            Item.objects.exclude(modified=self.time1).order_by('name'),
            [self.i4, self.i3, self.i2],
        )
        self.assertSequenceEqual(
            Tag.objects.exclude(parent__name=self.t1.name),
            [self.t1, self.t4, self.t5],
        )

    def test_ticket7181(self):
        # Ordering by related tables should accommodate nullable fields (this
        # test is a little tricky, since NULL ordering is database dependent.
        # Instead, we just count the number of results).
        self.assertEqual(len(Tag.objects.order_by('parent__name')), 5)

        # Empty querysets can be merged with others.
        self.assertSequenceEqual(
            Note.objects.none() | Note.objects.all(),
            [self.n1, self.n2, self.n3],
        )
        self.assertSequenceEqual(
            Note.objects.all() | Note.objects.none(),
            [self.n1, self.n2, self.n3],
        )
        self.assertSequenceEqual(Note.objects.none() & Note.objects.all(), [])
        self.assertSequenceEqual(Note.objects.all() & Note.objects.none(), [])

    def test_ticket8439(self):
        # Complex combinations of conjunctions, disjunctions and nullable
        # relations.
        self.assertSequenceEqual(
            Author.objects.filter(Q(item__note__extrainfo=self.e2) | Q(report=self.r1, name='xyz')),
            [self.a2],
        )
        self.assertSequenceEqual(
            Author.objects.filter(Q(report=self.r1, name='xyz') | Q(item__note__extrainfo=self.e2)),
            [self.a2],
        )
        self.assertSequenceEqual(
            Annotation.objects.filter(Q(tag__parent=self.t1) | Q(notes__note='n1', name='a1')),
            [self.ann1],
        )
        xx = ExtraInfo.objects.create(info='xx', note=self.n3)
        self.assertSequenceEqual(
            Note.objects.filter(Q(extrainfo__author=self.a1) | Q(extrainfo=xx)),
            [self.n1, self.n3],
        )
        q = Note.objects.filter(Q(extrainfo__author=self.a1) | Q(extrainfo=xx)).query
        self.assertEqual(
            len([x for x in q.alias_map.values() if x.join_type == LOUTER and q.alias_refcount[x.table_alias]]),
            1
        )

    def test_ticket17429(self):
        """"""
        Meta.ordering=None works the same as Meta.ordering=[]
        """"""
        original_ordering = Tag._meta.ordering
        Tag._meta.ordering = None
        try:
            self.assertCountEqual(
                Tag.objects.all(),
                [self.t1, self.t2, self.t3, self.t4, self.t5],
            )
        finally:
            Tag._meta.ordering = original_ordering

    def test_exclude(self):
        self.assertQuerysetEqual(
            Item.objects.exclude(tags__name='t4'),
            Item.objects.filter(~Q(tags__name='t4')))
        self.assertQuerysetEqual(
            Item.objects.exclude(Q(tags__name='t4') | Q(tags__name='t3')),
            Item.objects.filter(~(Q(tags__name='t4') | Q(tags__name='t3'))))
        self.assertQuerysetEqual(
            Item.objects.exclude(Q(tags__name='t4') | ~Q(tags__name='t3')),
            Item.objects.filter(~(Q(tags__name='t4') | ~Q(tags__name='t3'))))

    def test_nested_exclude(self):
        self.assertQuerysetEqual(
            Item.objects.exclude(~Q(tags__name='t4')),
            Item.objects.filter(~~Q(tags__name='t4')))

    def test_double_exclude(self):
        self.assertQuerysetEqual(
            Item.objects.filter(Q(tags__name='t4')),
            Item.objects.filter(~~Q(tags__name='t4')))
        self.assertQuerysetEqual(
            Item.objects.filter(Q(tags__name='t4')),
            Item.objects.filter(~Q(~Q(tags__name='t4'))))

    def test_exclude_in(self):
        self.assertQuerysetEqual(
            Item.objects.exclude(Q(tags__name__in=['t4', 't3'])),
            Item.objects.filter(~Q(tags__name__in=['t4', 't3'])))
        self.assertQuerysetEqual(
            Item.objects.filter(Q(tags__name__in=['t4', 't3'])),
            Item.objects.filter(~~Q(tags__name__in=['t4', 't3'])))

    def test_ticket_10790_1(self):
        # Querying direct fields with isnull should trim the left outer join.
        # It also should not create INNER JOIN.
        q = Tag.objects.filter(parent__isnull=True)

        self.assertSequenceEqual(q, [self.t1])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.filter(parent__isnull=False)

        self.assertSequenceEqual(q, [self.t2, self.t3, self.t4, self.t5])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.exclude(parent__isnull=True)
        self.assertSequenceEqual(q, [self.t2, self.t3, self.t4, self.t5])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.exclude(parent__isnull=False)
        self.assertSequenceEqual(q, [self.t1])
        self.assertNotIn('JOIN', str(q.query))

        q = Tag.objects.exclude(parent__parent__isnull=False)

        self.assertSequenceEqual(q, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        self.assertNotIn('INNER JOIN', str(q.query))

    def test_ticket_10790_2(self):
        # Querying across several tables should strip only the last outer join,
        # while preserving the preceding inner joins.
        q = Tag.objects.filter(parent__parent__isnull=False)

        self.assertSequenceEqual(q, [self.t4, self.t5])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)

        # Querying without isnull should not convert anything to left outer join.
        q = Tag.objects.filter(parent__parent=self.t1)
        self.assertSequenceEqual(q, [self.t4, self.t5])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)

    def test_ticket_10790_3(self):
        # Querying via indirect fields should populate the left outer join
        q = NamedCategory.objects.filter(tag__isnull=True)
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        # join to dumbcategory ptr_id
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)
        self.assertSequenceEqual(q, [])

        # Querying across several tables should strip only the last join, while
        # preserving the preceding left outer joins.
        q = NamedCategory.objects.filter(tag__parent__isnull=True)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        self.assertSequenceEqual(q, [self.nc1])

    def test_ticket_10790_4(self):
        # Querying across m2m field should not strip the m2m table from join.
        q = Author.objects.filter(item__tags__isnull=True)
        self.assertSequenceEqual(q, [self.a2, self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 2)
        self.assertNotIn('INNER JOIN', str(q.query))

        q = Author.objects.filter(item__tags__parent__isnull=True)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a2, self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 3)
        self.assertNotIn('INNER JOIN', str(q.query))

    def test_ticket_10790_5(self):
        # Querying with isnull=False across m2m field should not create outer joins
        q = Author.objects.filter(item__tags__isnull=False)
        self.assertSequenceEqual(q, [self.a1, self.a1, self.a2, self.a2, self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 2)

        q = Author.objects.filter(item__tags__parent__isnull=False)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 3)

        q = Author.objects.filter(item__tags__parent__parent__isnull=False)
        self.assertSequenceEqual(q, [self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 4)

    def test_ticket_10790_6(self):
        # Querying with isnull=True across m2m field should not create inner joins
        # and strip last outer join
        q = Author.objects.filter(item__tags__parent__parent__isnull=True)
        self.assertSequenceEqual(
            q,
            [self.a1, self.a1, self.a2, self.a2, self.a2, self.a3],
        )
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 4)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

        q = Author.objects.filter(item__tags__parent__isnull=True)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a2, self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 3)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

    def test_ticket_10790_7(self):
        # Reverse querying with isnull should not strip the join
        q = Author.objects.filter(item__isnull=True)
        self.assertSequenceEqual(q, [self.a3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 1)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

        q = Author.objects.filter(item__isnull=False)
        self.assertSequenceEqual(q, [self.a1, self.a2, self.a2, self.a4])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 1)

    def test_ticket_10790_8(self):
        # Querying with combined q-objects should also strip the left outer join
        q = Tag.objects.filter(Q(parent__isnull=True) | Q(parent=self.t1))
        self.assertSequenceEqual(q, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q.query).count('INNER JOIN'), 0)

    def test_ticket_10790_combine(self):
        # Combining queries should not re-populate the left outer join
        q1 = Tag.objects.filter(parent__isnull=True)
        q2 = Tag.objects.filter(parent__isnull=False)

        q3 = q1 | q2
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3, self.t4, self.t5])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q3 = q1 & q2
        self.assertSequenceEqual(q3, [])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q2 = Tag.objects.filter(parent=self.t1)
        q3 = q1 | q2
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q3 = q2 | q1
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 0)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q1 = Tag.objects.filter(parent__isnull=True)
        q2 = Tag.objects.filter(parent__parent__isnull=True)

        q3 = q1 | q2
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 1)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

        q3 = q2 | q1
        self.assertSequenceEqual(q3, [self.t1, self.t2, self.t3])
        self.assertEqual(str(q3.query).count('LEFT OUTER JOIN'), 1)
        self.assertEqual(str(q3.query).count('INNER JOIN'), 0)

    def test_ticket19672(self):
        self.assertSequenceEqual(
            Report.objects.filter(Q(creator__isnull=False) & ~Q(creator__extra__value=41)),
            [self.r1],
        )

    def test_ticket_20250(self):
        # A negated Q along with an annotated queryset failed in Django 1.4
        qs = Author.objects.annotate(Count('item'))
        qs = qs.filter(~Q(extra__value=0)).order_by('name')

        self.assertIn('SELECT', str(qs.query))
        self.assertSequenceEqual(qs, [self.a1, self.a2, self.a3, self.a4])

    def test_lookup_constraint_fielderror(self):
        msg = (
            ""Cannot resolve keyword 'unknown_field' into field. Choices are: ""
            ""annotation, category, category_id, children, id, item, ""
            ""managedmodel, name, note, parent, parent_id""
        )
        with self.assertRaisesMessage(FieldError, msg):
            Tag.objects.filter(unknown_field__name='generic')

    def test_common_mixed_case_foreign_keys(self):
        """"""
        Valid query should be generated when fields fetched from joined tables
        include FKs whose names only differ by case.
        """"""
        c1 = SimpleCategory.objects.create(name='c1')
        c2 = SimpleCategory.objects.create(name='c2')
        c3 = SimpleCategory.objects.create(name='c3')
        category = CategoryItem.objects.create(category=c1)
        mixed_case_field_category = MixedCaseFieldCategoryItem.objects.create(CaTeGoRy=c2)
        mixed_case_db_column_category = MixedCaseDbColumnCategoryItem.objects.create(category=c3)
        CommonMixedCaseForeignKeys.objects.create(
            category=category,
            mixed_case_field_category=mixed_case_field_category,
            mixed_case_db_column_category=mixed_case_db_column_category,
        )
        qs = CommonMixedCaseForeignKeys.objects.values(
            'category',
            'mixed_case_field_category',
            'mixed_case_db_column_category',
            'category__category',
            'mixed_case_field_category__CaTeGoRy',
            'mixed_case_db_column_category__category',
        )
        self.assertTrue(qs.first())

    def test_excluded_intermediary_m2m_table_joined(self):
        self.assertSequenceEqual(
            Note.objects.filter(~Q(tag__annotation__name=F('note'))),
            [self.n1, self.n2, self.n3],
        )
        self.assertSequenceEqual(
            Note.objects.filter(tag__annotation__name='a1').filter(~Q(tag__annotation__name=F('note'))),
            [],
        )

    def test_field_with_filterable(self):
        self.assertSequenceEqual(
            Author.objects.filter(extra=self.e2),
            [self.a3, self.a4],
        )

    def test_negate_field(self):
        self.assertSequenceEqual(
            Note.objects.filter(negate=True),
            [self.n1, self.n2],
        )
        self.assertSequenceEqual(Note.objects.exclude(negate=True), [self.n3])",1,334 2000 40 2001 41 58 64 2002 348 2003 40 2004 41 58 2004 46 2005 61 2006 61 2007 46 2008 46 2009 40 2010 61 648 41 2004 46 2011 61 2012 46 2008 46 2009 40 2010 61 648 44 2013 61 2006 41 2004 46 2014 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2011 44 2013 61 2006 41 2004 46 2016 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2011 41 2004 46 2017 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2016 41 2004 46 2018 61 2012 46 2008 46 2009 40 2010 61 648 44 2015 61 2004 46 2016 41 2004 46 2019 61 2020 46 2008 46 2009 40 2021 61 648 44 2022 61 648 44 2023 61 1501 41 2004 46 2024 61 2020 46 2008 46 2009 40 2021 61 648 44 2022 61 648 44 2023 61 1502 41 2004 46 2025 61 2020 46 2008 46 2009 40 2021 61 648 44 2022 61 648 44 2023 61 1502 44 2026 61 302 41 2004 46 2027 61 2028 46 2008 46 2009 40 2010 61 648 44 2029 61 2004 46 2011 41 2004 46 2027 46 2030 46 2031 40 2004 46 2019 41 2032 61 2028 46 2008 46 2009 40 2010 61 648 44 2029 61 2004 46 2017 41 2032 46 2030 46 2031 40 2004 46 2024 44 2004 46 2025 41 621 621 2004 46 2033 61 2034 46 2008 46 2009 40 2035 61 648 44 2021 61 2004 46 2024 44 2036 61 1503 44 2037 61 302 41 2038 61 2034 46 2008 46 2009 40 2035 61 648 44 2021 61 2004 46 2019 44 2036 61 1503 41 2004 46 2039 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2038 41 2004 46 2043 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2038 41 2004 46 2044 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2004 46 2033 41 2004 46 2045 61 2040 46 2008 46 2009 40 2010 61 648 44 2041 61 1505 44 2042 61 2004 46 2033 41 2004 46 2046 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1503 44 1500 41 2004 46 2048 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1500 44 1500 41 2049 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1503 44 1500 41 2050 61 2047 46 2047 40 1505 44 1503 44 1503 44 1503 44 1500 44 1500 41 2004 46 2051 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2004 46 2046 44 2054 61 2004 46 2046 44 2055 61 2004 46 2039 44 2021 61 2004 46 2025 41 2004 46 2051 46 2056 46 2057 40 91 2004 46 2011 44 2004 46 2014 93 41 2004 46 2058 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2004 46 2048 44 2055 61 2004 46 2043 44 2021 61 2004 46 2024 41 2004 46 2058 46 2056 46 2057 40 91 2004 46 2011 44 2004 46 2016 93 41 2004 46 2059 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2049 44 2055 61 2004 46 2043 44 2021 61 2004 46 2025 41 2004 46 2060 61 2052 46 2008 46 2009 40 2010 61 648 44 2053 61 2050 44 2055 61 2004 46 2045 44 2021 61 2004 46 2025 41 2004 46 2060 46 2056 46 2057 40 91 2004 46 2017 93 41 2004 46 2061 61 2062 46 2008 46 2009 40 2010 61 648 44 2055 61 2004 46 2039 41 2004 46 2063 61 2062 46 2008 46 2009 40 2010 61 648 44 2055 61 2004 46 2044 41 2004 46 2064 61 2062 46 2008 46 2009 40 2010 61 648 41 621 621 2004 46 2065 61 2066 46 2008 46 2009 40 2067 61 1502 44 2068 61 2004 46 2043 41 2004 46 2069 61 2070 46 2008 46 2009 40 2071 61 648 44 2072 61 2004 46 2060 41 2004 46 2073 61 2070 46 2008 46 2009 40 2071 61 648 44 2072 61 2004 46 2058 41 348 2074 40 2075 41 58 2076 61 2012 46 2008 46 2077 40 2078 61 1500 41 2079 61 2012 46 2008 46 2077 40 2080 61 2076 41 2081 61 2012 46 2008 46 2077 40 2080 61 2079 41 2075 46 2082 40 2081 46 2083 46 2084 44 123 648 44 648 44 648 125 41 2075 46 2085 40 648 44 2086 40 2081 46 2083 41 46 2087 40 41 41 2088 61 2081 46 2077 40 2080 61 2076 41 2075 46 2082 40 2088 46 2083 46 2084 44 123 648 44 648 44 648 125 41 621 2075 46 2089 40 648 44 2086 40 2088 46 2083 41 46 2087 40 41 41 621 2075 46 2082 40 2086 40 2088 46 2083 41 46 2087 40 41 46 2090 40 648 41 44 1502 41 348 2091 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2093 61 304 41 44 91 2075 46 2059 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2094 61 304 41 44 91 2075 46 2059 93 44 41 348 2095 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2072 61 2075 46 2058 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2072 61 2075 46 2059 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2072 61 2075 46 2058 41 38 2040 46 2008 46 2077 40 2072 61 2075 46 2059 41 44 91 2075 46 2043 93 44 41 348 2096 40 2075 41 58 621 2083 61 2052 46 2008 46 2077 40 2056 61 2075 46 2014 41 46 2083 2075 46 2089 40 2097 44 91 2098 46 2099 385 2098 398 2083 46 2100 46 2101 40 41 93 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 41 46 2103 40 648 41 44 91 2075 46 2051 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 41 46 2077 40 2102 40 2056 61 2075 46 2014 41 41 44 91 2075 46 2051 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 41 46 2077 40 2102 40 2104 61 648 41 124 2102 40 2056 61 2075 46 2014 41 41 44 91 2075 46 2051 93 44 41 621 621 621 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 38 2102 40 2056 61 2075 46 2014 41 41 44 91 93 41 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2056 61 2075 46 2011 41 44 2102 40 2104 61 648 41 124 2102 40 2056 61 2075 46 2014 41 41 44 91 93 41 2105 61 2040 46 2008 46 2077 40 2106 61 1502 44 2107 61 2075 46 2065 46 2023 41 2075 46 2092 40 411 40 2105 41 44 91 2075 46 2043 93 41 2075 46 2082 40 1502 44 2105 46 2083 46 2108 40 41 44 1502 41 2105 61 2040 46 2008 46 2077 40 2106 61 1502 41 46 2077 40 2107 61 2075 46 2065 46 2023 41 2075 46 2082 40 2105 46 2083 46 2108 40 41 44 1502 41 348 2109 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2056 61 2075 46 2011 41 46 2077 40 2056 61 2075 46 2014 41 44 91 2075 46 2051 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2111 40 41 46 2103 40 648 41 44 91 2075 46 2051 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2077 40 2056 61 2075 46 2016 41 44 91 2075 46 2058 93 44 41 621 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2103 40 648 41 91 58 1502 93 44 91 2075 46 2051 44 2075 46 2051 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2075 46 2011 44 2075 46 2014 93 41 46 2111 40 41 46 2103 40 648 41 91 58 1502 93 44 91 2075 46 2051 44 2075 46 2058 93 44 41 348 2112 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2113 61 648 41 124 2040 46 2008 46 2077 40 2010 61 648 41 44 91 2075 46 2039 44 2075 46 2044 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2113 61 648 41 124 2102 40 2010 61 648 41 41 44 91 2075 46 2039 44 2075 46 2044 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2010 61 648 41 124 2102 40 2113 61 648 41 41 44 91 2075 46 2039 44 2075 46 2044 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2113 61 648 41 124 2102 40 2114 61 648 41 41 44 91 2075 46 2043 93 44 41 348 2115 40 2075 41 58 621 621 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2116 61 91 93 41 41 44 91 93 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2116 61 91 93 41 124 2102 40 2116 61 91 93 41 41 44 91 93 41 348 2117 40 2075 41 58 2075 46 2082 40 2052 46 2008 46 2101 40 648 41 46 2111 40 41 46 2090 40 41 44 1502 41 621 621 2118 61 2052 40 2010 61 648 44 2053 61 2075 46 2046 44 2055 61 2075 46 2043 44 2021 61 2075 46 2019 41 2118 46 2119 40 41 2075 46 2082 40 2052 46 2008 46 2120 40 2010 61 648 41 46 2101 40 648 44 648 41 46 2111 40 41 46 2090 40 41 44 1502 41 2075 46 2082 40 40 2052 46 2008 46 2120 40 2010 61 648 41 46 2042 40 2121 61 123 648 58 648 125 44 2122 61 40 1501 44 41 41 46 2101 40 648 44 648 44 648 41 46 2111 40 41 46 2090 40 41 41 44 1502 41 2075 46 2082 40 40 2052 46 2008 46 2120 40 2010 61 648 41 46 2042 40 2121 61 123 648 58 648 125 44 2122 61 40 1501 44 41 41 46 2101 40 648 44 648 41 46 2111 40 41 46 2090 40 41 41 44 1502 41 2118 46 353 40 41 348 2123 40 2075 41 58 2075 46 2082 40 2052 46 2008 46 2101 40 648 44 648 41 46 2090 40 41 44 1502 41 348 2124 40 2075 41 58 2125 61 2052 46 2008 46 2103 40 648 41 2126 61 2052 46 2008 46 2077 40 2023 61 2075 46 2051 46 2023 41 2075 46 2092 40 2125 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 41 2075 46 2092 40 2126 44 91 2075 46 2051 93 41 2075 46 2092 40 40 2125 124 2126 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 40 2125 38 2126 41 46 2103 40 648 41 44 91 2075 46 2051 93 41 2125 61 2052 46 2008 46 2077 40 2056 61 2075 46 2011 41 2126 61 2052 46 2008 46 2077 40 2021 61 2075 46 2025 44 2056 61 2075 46 2014 41 2127 61 2052 46 2008 46 2077 40 2055 61 2075 46 2045 41 2075 46 2092 40 40 40 2125 38 2126 41 124 2127 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2051 93 44 41 348 2128 40 2075 41 58 2125 61 2052 46 2008 46 2103 40 648 41 2126 61 2052 46 2008 46 2077 40 2023 61 2075 46 2051 46 2023 41 411 40 2126 41 2129 61 40 2125 38 2126 41 46 2103 40 648 41 46 2083 2075 46 2082 40 2130 40 91 2131 385 2131 398 2129 46 2100 392 2129 46 2132 91 2131 93 93 41 44 1501 41 348 2133 40 2075 41 58 648 2105 61 2134 46 2008 46 2103 40 648 41 2075 46 2085 40 648 44 2086 40 2105 46 2083 41 41 2105 61 2105 46 2103 40 648 41 2075 46 2089 40 648 44 2086 40 2105 46 2083 41 41 348 2135 40 2075 41 58 648 497 2136 40 2137 41 311 2138 58 2040 46 2008 46 2103 40 648 41 46 2139 40 2140 61 2075 46 2039 46 2140 41 2075 46 2089 40 648 44 2138 91 1500 93 91 648 93 46 2087 40 41 41 348 2141 40 2075 41 58 2075 46 2092 40 2062 46 2008 46 2077 40 2055 61 1505 41 44 91 2075 46 2061 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2142 61 1505 41 44 91 2075 46 2061 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2143 61 1505 41 44 91 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2143 61 2075 46 2039 46 2023 41 44 91 2075 46 2061 93 41 2075 46 2092 40 2062 46 2008 46 2077 40 2104 61 648 41 44 91 2075 46 2061 93 41 348 2144 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2114 61 648 41 44 91 2075 46 2039 93 44 41 348 2145 40 2075 41 58 2075 46 2092 40 2075 46 2039 46 2146 46 2147 40 41 44 91 2075 46 2061 93 41 348 2148 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2149 61 648 41 44 91 2075 46 2060 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2103 40 648 41 46 2111 40 41 44 91 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2103 40 648 41 46 2111 40 41 46 2150 40 41 44 91 2075 46 2058 44 2075 46 2059 44 2075 46 2051 93 44 41 2075 46 2092 40 2040 46 2008 46 2120 40 2113 61 648 41 46 2111 40 41 46 2103 40 648 41 44 91 2075 46 2043 44 2075 46 2044 44 2075 46 2045 93 44 41 621 621 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2059 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 41 46 2120 40 2149 61 648 41 44 91 2075 46 2059 93 44 41 621 2083 61 2052 46 2008 46 2120 40 2151 61 91 2075 46 2039 44 2075 46 2043 93 41 46 2083 2075 46 2089 40 2097 44 91 2098 46 2099 385 2098 398 2083 46 2100 46 2101 40 41 93 41 621 621 621 621 2105 61 2040 46 2008 46 2077 40 2023 61 2075 46 2039 46 2023 41 46 2077 40 2102 40 2152 61 2075 46 2019 41 124 2102 40 2153 61 2075 46 2025 41 41 2075 46 2082 40 2130 40 91 2098 385 2098 398 2105 46 2083 46 2100 46 2101 40 41 392 2098 46 2099 614 2097 308 2105 46 2083 46 2132 91 2098 46 2154 93 93 41 44 1501 41 621 2075 46 2092 40 2012 46 2008 46 2077 40 2155 61 304 41 46 2103 40 648 41 44 91 2075 46 2011 93 41 2075 46 2092 40 2012 46 2008 46 2120 40 2155 61 304 41 46 2103 40 648 41 44 91 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2102 40 2156 61 648 41 124 2102 40 2155 61 304 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2102 40 2155 61 304 41 124 2102 40 2156 61 648 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2102 40 2157 61 304 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2077 40 126 2102 40 2157 61 304 41 41 46 2103 40 648 41 44 91 2075 46 2017 44 2075 46 2018 93 44 41 348 2158 40 2075 41 58 2131 61 2012 46 2008 46 2139 40 2010 61 648 41 2075 46 2092 40 2052 46 2008 46 2077 40 2110 61 91 2131 93 41 44 91 2075 46 2060 93 41 348 2159 40 2075 41 58 2098 61 2012 46 2008 46 2077 40 2140 61 1501 41 2160 61 2161 46 2162 40 41 610 1503 2163 61 648 497 2075 46 2164 40 2165 44 2163 41 58 385 2166 398 2167 40 2160 43 1502 41 58 2098 61 2012 46 2008 46 2077 40 2168 61 2098 41 348 2169 40 2075 41 58 2098 61 2012 46 2008 46 2077 40 2140 61 1501 41 385 2170 398 2167 40 1503 41 58 2098 61 2012 46 2008 46 2077 40 2168 61 2098 41 2075 46 2082 40 2098 46 2083 46 2084 44 123 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 125 41 348 2171 40 2075 41 58 621 621 2163 61 648 497 2075 46 2164 40 2172 44 2163 41 58 2040 46 2008 46 2147 40 41 38 2012 46 2008 46 2147 40 41 497 2075 46 2164 40 2172 44 2163 41 58 2040 46 2008 46 2147 40 41 124 2012 46 2008 46 2147 40 41 348 2173 40 2075 41 58 2075 46 2082 40 2040 46 2008 46 2042 40 2121 61 123 648 58 648 125 41 46 2090 40 41 44 1502 41 2075 46 2082 40 2040 46 2008 46 2042 40 2121 61 123 648 58 648 125 44 2122 61 40 1501 44 41 41 46 2090 40 41 44 1502 41 348 2174 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2175 61 304 41 44 91 2075 46 2044 93 44 41 2075 46 2092 40 2012 46 2008 46 2077 40 2175 61 304 41 44 91 2075 46 2018 93 44 41 348 2176 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2042 40 2177 61 91 648 93 41 46 2178 40 41 46 2103 40 648 41 91 58 1501 93 44 91 2075 46 2060 93 44 41 348 2179 40 2075 41 58 497 2075 46 2164 40 2180 44 648 41 58 2020 46 2008 46 2077 40 123 648 58 648 44 648 58 648 125 41 348 2181 40 2075 41 58 621 621 2075 46 2092 40 2052 46 2008 46 2103 40 648 44 648 41 44 91 2075 46 2058 44 2075 46 2060 44 2075 46 2051 44 2075 46 2059 93 44 41 621 621 2075 46 2092 40 2040 46 2008 46 2103 40 648 44 648 41 44 91 2075 46 2043 44 2075 46 2039 44 2075 46 2045 44 2075 46 2044 93 44 41 621 621 2075 46 2092 40 2070 46 2008 46 2147 40 41 44 91 2075 46 2069 44 2075 46 2073 93 41 621 621 2075 46 2092 40 2052 46 2008 46 2103 40 648 44 648 41 44 91 2075 46 2051 44 2075 46 2059 44 2075 46 2058 44 2075 46 2060 93 44 41 621 621 621 2075 46 2092 40 2052 46 2008 46 2077 40 2093 61 302 41 46 2103 40 648 44 648 41 44 91 2075 46 2051 44 2075 46 2058 44 2075 46 2051 44 2075 46 2058 44 2075 46 2060 93 44 41 621 621 621 2105 61 2052 46 2008 46 2103 40 648 41 2075 46 2092 40 2105 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 44 2075 46 2058 93 41 2075 46 2082 40 2130 40 2105 46 2083 46 2100 41 44 1501 41 348 2182 40 2075 41 58 2105 61 2052 46 2008 46 2178 40 41 46 2103 40 648 44 648 41 2075 46 2183 40 2105 44 91 2075 46 2058 44 2075 46 2060 44 2075 46 2051 44 2075 46 2059 93 41 621 621 2075 46 2082 40 2184 40 2105 91 1500 93 46 2021 41 44 648 41 2075 46 2082 40 2184 40 2105 91 1500 93 46 2055 46 2042 46 2021 41 44 648 41 348 2185 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2077 40 2102 40 2104 61 648 44 2010 61 648 41 124 2102 40 2104 61 648 44 2010 61 648 41 41 44 91 2075 46 2060 93 44 41 348 2186 40 2075 41 58 621 621 621 621 621 2075 46 2092 40 2020 46 2008 46 2101 40 648 41 46 2111 40 41 46 2103 40 648 44 648 41 44 91 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 93 41 348 2187 40 2075 41 58 621 621 621 621 621 2075 46 2085 40 648 44 2034 46 2008 46 2101 40 41 91 1500 93 41 621 2075 46 2092 40 2034 46 2008 46 2101 40 648 41 44 91 123 648 58 1501 125 44 123 648 58 1502 125 93 41 621 2075 46 2092 40 2034 46 2008 46 2101 40 648 41 44 91 123 648 58 1501 125 44 123 648 58 1502 125 93 41 348 2188 40 2075 41 58 621 2075 46 2092 40 2040 46 2008 46 2077 40 2023 61 2075 46 2039 46 2023 41 46 2077 40 2102 40 2152 61 2075 46 2019 41 124 2102 40 2153 61 2075 46 2025 41 41 44 91 2075 46 2039 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2152 61 2075 46 2019 41 124 2102 40 2153 61 2075 46 2025 41 41 46 2077 40 2023 61 2075 46 2039 46 2023 41 44 91 2075 46 2039 93 44 41 348 2189 40 2075 41 58 2075 46 2092 40 2012 46 2008 46 2178 40 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 348 2190 40 2075 41 58 2075 46 2092 40 2012 46 2008 46 2178 40 648 44 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2012 46 2008 46 2178 40 648 44 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 348 2191 40 2075 41 58 621 2075 46 2082 40 2052 46 2008 46 2090 40 41 44 1502 41 2075 46 2082 40 2052 46 2008 46 2192 40 648 44 648 41 46 2090 40 41 44 1501 41 2075 46 2082 40 2052 46 2008 46 2192 40 648 44 648 41 46 2090 40 41 44 1502 41 2075 46 2082 40 2130 40 2052 46 2008 46 2192 40 648 44 648 41 41 44 1502 41 2075 46 2082 40 2052 46 2008 46 2192 40 648 44 648 41 91 1500 93 44 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 41 348 2193 40 2075 41 58 621 2075 46 2092 40 2052 46 2008 46 2192 40 648 44 648 41 46 2042 40 2121 61 123 648 58 1501 125 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 44 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 2075 46 2092 40 2052 46 2008 46 2042 40 2121 61 123 648 58 1501 125 41 46 2192 40 648 44 648 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 44 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 2010 61 648 2075 46 2092 40 2052 46 2008 46 2192 40 648 44 648 41 46 2042 40 2194 61 91 648 93 44 433 61 91 2010 93 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 2075 46 2092 40 2052 46 2008 46 2042 40 2194 61 91 648 93 44 433 61 91 2010 93 41 46 2192 40 648 44 648 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 348 2195 40 2075 41 58 621 2075 46 2092 40 2052 46 2008 46 2192 40 648 44 648 41 44 91 2047 46 2047 40 1505 44 1503 44 1503 44 1500 44 1500 41 93 44 41 348 2196 40 2075 41 58 2075 46 2092 40 2052 46 2008 46 2101 40 648 41 46 2103 40 2197 40 648 44 40 41 41 44 648 44 41 44 91 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 44 123 648 58 648 125 44 93 44 41 348 2198 40 2075 41 58 621 2075 46 2092 40 2012 46 2008 46 2077 40 2015 61 2075 46 2011 44 2010 61 648 41 46 2103 40 648 41 44 91 2075 46 2016 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2015 61 2075 46 2011 44 2010 61 648 41 46 2103 40 648 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2017 44 2075 46 2018 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 2149 61 648 44 2010 61 648 41 46 2103 40 648 41 46 2111 40 41 44 91 2075 46 2060 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 2199 61 91 648 44 648 93 41 46 2120 40 2149 61 648 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2059 93 44 41 621 2075 46 2092 40 2052 46 2008 46 2120 40 126 2102 40 2149 61 648 44 2010 61 648 41 41 44 91 2075 46 2051 93 44 41 2075 46 2092 40 2052 46 2008 46 2077 40 126 2102 40 2149 61 648 44 2010 61 648 41 44 2010 61 648 41 44 91 2075 46 2058 93 44 41 2075 46 2092 40 2052 46 2008 46 2120 40 126 2102 40 2149 61 648 44 2010 61 648 41 44 2010 61 648 41 44 91 2075 46 2060 44 2075 46 2051 44 2075 46 2059 93 44 41 348 2200 40 2075 41 58 621 621 2201 46 2202 40 2052 46 2008 46 2147 40 41 41 348 2203 40 2075 41 58 621 621 621 2105 61 2052 46 2008 46 2178 40 41 2083 61 2105 46 2083 46 2204 40 2105 46 2205 41 46 2206 40 41 91 1500 93 2207 61 2201 46 2208 40 2201 46 2202 40 2105 46 2083 41 41 2075 46 2082 40 2207 46 2204 40 2105 46 2205 41 46 2206 40 41 91 1500 93 44 2083 41 348 2209 40 2075 41 58 621 2105 61 2052 46 2008 46 2210 40 648 44 648 41 2126 61 2201 46 2208 40 2201 46 2202 40 2105 41 41 2075 46 2082 40 411 40 2105 41 44 411 40 2126 41 41 2127 61 2201 46 2208 40 2201 46 2202 40 2105 44 2201 46 2211 41 41 2075 46 2082 40 411 40 2105 41 44 411 40 2127 41 41 348 2212 40 2075 41 58 2075 46 2092 40 2075 46 2019 46 2213 46 2077 40 2102 40 2029 61 2075 46 2018 41 124 2102 40 2214 61 2075 46 2018 41 124 2102 40 2215 61 2075 46 2018 41 41 44 91 2075 46 2027 93 44 41 348 2216 40 2075 41 58 621 621 2075 46 2092 40 2052 46 2008 46 2077 40 2217 61 91 2075 46 2046 44 2075 46 2048 93 41 44 91 2075 46 2051 44 2075 46 2058 93 44 41 348 2218 40 2075 41 58 621 2219 46 2008 46 2009 40 2220 61 648 41 2221 61 2219 46 2008 46 2222 40 41 497 2075 46 2223 40 1500 41 58 2075 46 2183 40 2221 46 2147 40 41 44 91 93 41 2075 46 2183 40 2221 46 2077 40 2220 61 648 41 44 91 93 41 2075 46 2183 40 2221 46 2120 40 2220 61 648 41 44 91 93 41 2075 46 2183 40 2221 46 2224 40 123 648 58 1501 125 41 44 91 93 41 2075 46 2183 40 2221 46 2178 40 648 41 44 91 93 41 2075 46 2183 40 2221 46 2225 40 2226 40 648 41 41 44 91 93 41 2075 46 2183 40 2221 46 2103 40 648 44 648 41 44 91 93 41 2075 46 2183 40 2221 46 2111 40 41 44 91 93 41 2075 46 2183 40 2221 46 2042 40 2121 61 123 648 58 648 125 41 44 91 93 41 2075 46 2183 40 2221 46 2150 40 41 44 91 93 41 2221 46 2083 46 2227 61 1501 2163 61 648 497 2075 46 2164 40 2172 44 2163 41 58 2221 46 2042 40 2121 61 123 648 58 648 125 41 2075 46 2183 40 2221 46 2210 40 648 41 44 91 93 41 2075 46 2183 40 2221 46 2228 40 648 41 44 91 93 41 348 2229 40 2075 41 58 621 621 2075 46 2082 40 2130 40 2020 46 2008 46 2103 40 648 41 46 2111 40 41 41 44 1502 41 621 2105 61 2052 46 2008 46 2192 40 648 44 648 41 2201 46 2208 40 2201 46 2202 40 2105 41 41 348 2230 40 2075 41 58 621 621 621 2075 46 2092 40 2012 46 2008 46 2077 40 2199 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 46 2101 40 648 41 41 44 91 2075 46 2014 44 2075 46 2016 93 44 41 621 497 2075 46 2164 40 2172 44 648 41 58 2012 46 2008 46 2077 40 2199 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 46 2101 40 648 44 648 41 41 497 2075 46 2164 40 2172 44 648 41 58 2012 46 2008 46 2077 40 2199 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 46 2231 40 648 44 648 41 41 348 2232 40 2075 41 58 621 2075 46 2092 40 2020 46 2008 46 2231 40 648 44 2233 61 304 41 46 2101 40 648 41 46 2103 40 648 41 44 91 123 648 58 1501 125 44 123 648 58 1502 125 44 123 648 58 1502 125 93 41 2075 46 2092 40 2028 46 2008 46 2077 40 2234 61 2020 46 2008 46 2077 40 2021 61 648 41 46 2231 40 648 41 46 2101 40 648 41 41 44 91 2075 46 2027 93 44 41 348 2235 40 2075 41 58 621 621 2075 46 2082 40 2012 46 2008 46 2077 40 2199 61 40 41 41 46 2236 40 2010 61 648 41 44 1500 41 348 2237 40 2075 41 58 621 348 2238 40 41 58 450 2239 40 91 93 41 2240 61 2020 46 2008 46 2147 40 41 91 1500 93 348 2241 40 41 58 500 2240 46 2140 2075 46 2183 40 2020 46 2008 46 2077 40 2168 61 2238 40 41 41 44 91 93 41 2075 46 2082 40 411 40 2020 46 2008 46 2077 40 2168 61 2241 40 41 41 41 44 91 2240 93 41 348 2242 40 2075 41 58 621 2243 61 2040 46 2008 46 2077 40 2244 61 1505 41 2105 61 2040 46 2008 46 2077 40 2168 61 2243 41 2075 46 2092 40 2105 44 91 2075 46 2039 44 2075 46 2043 93 41 621 2075 46 2245 40 2243 46 2246 41 2243 61 2040 46 2008 46 2077 40 2244 61 1505 41 2105 61 2040 46 2008 46 2120 40 2168 61 2243 41 2075 46 2092 40 2105 44 91 2075 46 2044 44 2075 46 2045 93 41 621 2075 46 2245 40 2243 46 2246 41 2243 61 2040 46 2008 46 2077 40 2244 61 1505 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2168 61 2243 41 38 2102 40 2010 61 648 41 41 44 91 2075 46 2039 93 44 41 621 2075 46 2245 40 2243 46 2246 41 348 2247 40 2075 41 58 621 2075 46 2092 40 2052 46 2008 46 2120 40 2054 61 2075 46 2046 41 46 2103 40 648 41 44 91 2075 46 2060 44 2075 46 2059 44 2075 46 2058 93 44 41 2075 46 2092 40 2012 46 2008 46 2120 40 2156 61 2075 46 2011 46 2010 41 44 91 2075 46 2011 44 2075 46 2017 44 2075 46 2018 93 44 41 348 2248 40 2075 41 58 621 621 621 2075 46 2082 40 2130 40 2012 46 2008 46 2103 40 648 41 41 44 1502 41 621 2075 46 2092 40 2020 46 2008 46 2222 40 41 124 2020 46 2008 46 2147 40 41 44 91 2075 46 2019 44 2075 46 2024 44 2075 46 2025 93 44 41 2075 46 2092 40 2020 46 2008 46 2147 40 41 124 2020 46 2008 46 2222 40 41 44 91 2075 46 2019 44 2075 46 2024 44 2075 46 2025 93 44 41 2075 46 2092 40 2020 46 2008 46 2222 40 41 38 2020 46 2008 46 2147 40 41 44 91 93 41 2075 46 2092 40 2020 46 2008 46 2147 40 41 38 2020 46 2008 46 2222 40 41 44 91 93 41 348 2249 40 2075 41 58 621 621 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2250 61 2075 46 2033 41 124 2102 40 2251 61 2075 46 2061 44 2010 61 648 41 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2040 46 2008 46 2077 40 2102 40 2251 61 2075 46 2061 44 2010 61 648 41 124 2102 40 2250 61 2075 46 2033 41 41 44 91 2075 46 2043 93 44 41 2075 46 2092 40 2028 46 2008 46 2077 40 2102 40 2252 61 2075 46 2011 41 124 2102 40 2253 61 648 44 2010 61 648 41 41 44 91 2075 46 2027 93 44 41 2118 61 2034 46 2008 46 2009 40 2035 61 648 44 2021 61 2075 46 2025 41 2075 46 2092 40 2020 46 2008 46 2077 40 2102 40 2254 61 2075 46 2039 41 124 2102 40 2255 61 2118 41 41 44 91 2075 46 2019 44 2075 46 2025 93 44 41 2221 61 2020 46 2008 46 2077 40 2102 40 2254 61 2075 46 2039 41 124 2102 40 2255 61 2118 41 41 46 2083 2075 46 2082 40 2130 40 91 2098 385 2098 398 2221 46 2100 46 2101 40 41 392 2098 46 2099 614 2097 308 2221 46 2132 91 2098 46 2154 93 93 41 44 1501 41 348 2256 40 2075 41 58 648 2257 61 2012 46 2258 46 2259 2012 46 2258 46 2259 61 303 474 58 2075 46 2260 40 2012 46 2008 46 2147 40 41 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 44 41 382 58 2012 46 2258 46 2259 61 2257 348 2261 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2120 40 2149 61 648 41 44 2052 46 2008 46 2077 40 126 2102 40 2149 61 648 41 41 41 2075 46 2183 40 2052 46 2008 46 2120 40 2102 40 2149 61 648 41 124 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 40 2102 40 2149 61 648 41 124 2102 40 2149 61 648 41 41 41 41 2075 46 2183 40 2052 46 2008 46 2120 40 2102 40 2149 61 648 41 124 126 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 40 2102 40 2149 61 648 41 124 126 2102 40 2149 61 648 41 41 41 41 348 2262 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2120 40 126 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 126 2102 40 2149 61 648 41 41 41 348 2263 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2077 40 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 126 2102 40 2149 61 648 41 41 41 2075 46 2183 40 2052 46 2008 46 2077 40 2102 40 2149 61 648 41 41 44 2052 46 2008 46 2077 40 126 2102 40 126 2102 40 2149 61 648 41 41 41 41 348 2264 40 2075 41 58 2075 46 2183 40 2052 46 2008 46 2120 40 2102 40 2265 61 91 648 44 648 93 41 41 44 2052 46 2008 46 2077 40 126 2102 40 2265 61 91 648 44 648 93 41 41 41 2075 46 2183 40 2052 46 2008 46 2077 40 2102 40 2265 61 91 648 44 648 93 41 41 44 2052 46 2008 46 2077 40 126 126 2102 40 2265 61 91 648 44 648 93 41 41 41 348 2266 40 2075 41 58 621 621 2221 61 2012 46 2008 46 2077 40 2155 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2011 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2077 40 2155 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2120 40 2155 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2120 40 2155 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2011 93 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2012 46 2008 46 2120 40 2157 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 348 2267 40 2075 41 58 621 621 2221 61 2012 46 2008 46 2077 40 2157 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2017 44 2075 46 2018 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 621 2221 61 2012 46 2008 46 2077 40 2268 61 2075 46 2011 41 2075 46 2092 40 2221 44 91 2075 46 2017 44 2075 46 2018 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 348 2269 40 2075 41 58 621 2221 61 2007 46 2008 46 2077 40 2270 61 304 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 621 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2092 40 2221 44 91 93 41 621 621 2221 61 2007 46 2008 46 2077 40 2271 61 304 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2092 40 2221 44 91 2075 46 2005 93 41 348 2272 40 2075 41 58 621 2221 61 2040 46 2008 46 2077 40 2273 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2043 44 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 2221 61 2040 46 2008 46 2077 40 2274 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2089 40 648 44 2086 40 2221 46 2083 41 41 348 2275 40 2075 41 58 621 2221 61 2040 46 2008 46 2077 40 2273 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2221 61 2040 46 2008 46 2077 40 2274 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2221 61 2040 46 2008 46 2077 40 2276 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 348 2277 40 2075 41 58 621 621 2221 61 2040 46 2008 46 2077 40 2276 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2043 44 2075 46 2044 93 44 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2221 61 2040 46 2008 46 2077 40 2274 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1502 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 348 2278 40 2075 41 58 621 2221 61 2040 46 2008 46 2077 40 2175 61 304 41 2075 46 2092 40 2221 44 91 2075 46 2044 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2221 61 2040 46 2008 46 2077 40 2175 61 302 41 2075 46 2092 40 2221 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2043 44 2075 46 2045 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1501 41 348 2279 40 2075 41 58 621 2221 61 2012 46 2008 46 2077 40 2102 40 2155 61 304 41 124 2102 40 2015 61 2075 46 2011 41 41 2075 46 2092 40 2221 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2221 46 2083 41 46 2090 40 648 41 44 1500 41 348 2280 40 2075 41 58 621 2125 61 2012 46 2008 46 2077 40 2155 61 304 41 2126 61 2012 46 2008 46 2077 40 2155 61 302 41 2127 61 2125 124 2126 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 44 2075 46 2017 44 2075 46 2018 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2127 61 2125 38 2126 2075 46 2092 40 2127 44 91 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2126 61 2012 46 2008 46 2077 40 2015 61 2075 46 2011 41 2127 61 2125 124 2126 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2127 61 2126 124 2125 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2125 61 2012 46 2008 46 2077 40 2155 61 304 41 2126 61 2012 46 2008 46 2077 40 2157 61 304 41 2127 61 2125 124 2126 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 2127 61 2126 124 2125 2075 46 2092 40 2127 44 91 2075 46 2011 44 2075 46 2014 44 2075 46 2016 93 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1501 41 2075 46 2082 40 2086 40 2127 46 2083 41 46 2090 40 648 41 44 1500 41 348 2281 40 2075 41 58 2075 46 2092 40 2062 46 2008 46 2077 40 2102 40 2282 61 302 41 38 126 2102 40 2283 61 1503 41 41 44 91 2075 46 2061 93 44 41 348 2284 40 2075 41 58 621 2105 61 2040 46 2008 46 2225 40 2226 40 648 41 41 2105 61 2105 46 2077 40 126 2102 40 2285 61 1500 41 41 46 2103 40 648 41 2075 46 2085 40 648 44 2086 40 2105 46 2083 41 41 2075 46 2092 40 2105 44 91 2075 46 2039 44 2075 46 2043 44 2075 46 2044 44 2075 46 2045 93 41 348 2286 40 2075 41 58 2163 61 40 648 648 648 41 497 2075 46 2164 40 2180 44 2163 41 58 2012 46 2008 46 2077 40 2287 61 648 41 348 2288 40 2075 41 58 648 2069 61 2289 46 2008 46 2009 40 2010 61 648 41 2073 61 2289 46 2008 46 2009 40 2010 61 648 41 2290 61 2289 46 2008 46 2009 40 2010 61 648 41 2013 61 2291 46 2008 46 2009 40 2013 61 2069 41 2292 61 2293 46 2008 46 2009 40 2294 61 2073 41 2295 61 2296 46 2008 46 2009 40 2013 61 2290 41 2297 46 2008 46 2009 40 2013 61 2013 44 2292 61 2292 44 2295 61 2295 44 41 2105 61 2297 46 2008 46 2101 40 648 44 648 44 648 44 648 44 648 44 648 44 41 2075 46 2298 40 2105 46 2299 40 41 41 348 2300 40 2075 41 58 2075 46 2092 40 2020 46 2008 46 2077 40 126 2102 40 2301 61 2302 40 648 41 41 41 44 91 2075 46 2019 44 2075 46 2024 44 2075 46 2025 93 44 41 2075 46 2092 40 2020 46 2008 46 2077 40 2301 61 648 41 46 2077 40 126 2102 40 2301 61 2302 40 648 41 41 41 44 91 93 44 41 348 2303 40 2075 41 58 2075 46 2092 40 2040 46 2008 46 2077 40 2042 61 2075 46 2033 41 44 91 2075 46 2044 44 2075 46 2045 93 44 41 348 2304 40 2075 41 58 2075 46 2092 40 2020 46 2008 46 2077 40 2026 61 304 41 44 91 2075 46 2019 44 2075 46 2024 93 44 41 2075 46 2092 40 2020 46 2008 46 2120 40 2026 61 304 41 44 91 2075 46 2025 93 41 
132884,Python,"class BaseCacheTests:
    # A common set of tests to apply to all cache backends
    factory = RequestFactory()

    # Some clients raise custom exceptions when .incr() or .decr() are called
    # with a non-integer value.
    incr_decr_type_error = TypeError

    def tearDown(self):
        cache.clear()

    def test_simple(self):
        # Simple cache set/get works
        cache.set(""key"", ""value"")
        self.assertEqual(cache.get(""key""), ""value"")

    def test_default_used_when_none_is_set(self):
        """"""If None is cached, get() returns it instead of the default.""""""
        cache.set('key_default_none', None)
        self.assertIsNone(cache.get('key_default_none', default='default'))

    def test_add(self):
        # A key can be added to a cache
        self.assertIs(cache.add(""addkey1"", ""value""), True)
        self.assertIs(cache.add(""addkey1"", ""newvalue""), False)
        self.assertEqual(cache.get(""addkey1""), ""value"")

    def test_prefix(self):
        # Test for same cache key conflicts between shared backend
        cache.set('somekey', 'value')

        # should not be set in the prefixed cache
        self.assertIs(caches['prefix'].has_key('somekey'), False)

        caches['prefix'].set('somekey', 'value2')

        self.assertEqual(cache.get('somekey'), 'value')
        self.assertEqual(caches['prefix'].get('somekey'), 'value2')

    def test_non_existent(self):
        """"""Nonexistent cache keys return as None/default.""""""
        self.assertIsNone(cache.get(""does_not_exist""))
        self.assertEqual(cache.get(""does_not_exist"", ""bang!""), ""bang!"")

    def test_get_many(self):
        # Multiple cache keys can be returned using get_many
        cache.set_many({'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd'})
        self.assertEqual(cache.get_many(['a', 'c', 'd']), {'a': 'a', 'c': 'c', 'd': 'd'})
        self.assertEqual(cache.get_many(['a', 'b', 'e']), {'a': 'a', 'b': 'b'})
        self.assertEqual(cache.get_many(iter(['a', 'b', 'e'])), {'a': 'a', 'b': 'b'})
        cache.set_many({'x': None, 'y': 1})
        self.assertEqual(cache.get_many(['x', 'y']), {'x': None, 'y': 1})

    def test_delete(self):
        # Cache keys can be deleted
        cache.set_many({'key1': 'spam', 'key2': 'eggs'})
        self.assertEqual(cache.get(""key1""), ""spam"")
        self.assertIs(cache.delete(""key1""), True)
        self.assertIsNone(cache.get(""key1""))
        self.assertEqual(cache.get(""key2""), ""eggs"")

    def test_delete_nonexistent(self):
        self.assertIs(cache.delete('nonexistent_key'), False)

    def test_has_key(self):
        # The cache can be inspected for cache keys
        cache.set(""hello1"", ""goodbye1"")
        self.assertIs(cache.has_key(""hello1""), True)
        self.assertIs(cache.has_key(""goodbye1""), False)
        cache.set(""no_expiry"", ""here"", None)
        self.assertIs(cache.has_key(""no_expiry""), True)
        cache.set('null', None)
        self.assertIs(cache.has_key('null'), True)

    def test_in(self):
        # The in operator can be used to inspect cache contents
        cache.set(""hello2"", ""goodbye2"")
        self.assertIn(""hello2"", cache)
        self.assertNotIn(""goodbye2"", cache)
        cache.set('null', None)
        self.assertIn('null', cache)

    def test_incr(self):
        # Cache values can be incremented
        cache.set('answer', 41)
        self.assertEqual(cache.incr('answer'), 42)
        self.assertEqual(cache.get('answer'), 42)
        self.assertEqual(cache.incr('answer', 10), 52)
        self.assertEqual(cache.get('answer'), 52)
        self.assertEqual(cache.incr('answer', -10), 42)
        with self.assertRaises(ValueError):
            cache.incr('does_not_exist')
        with self.assertRaises(ValueError):
            cache.incr('does_not_exist', -1)
        cache.set('null', None)
        with self.assertRaises(self.incr_decr_type_error):
            cache.incr('null')

    def test_decr(self):
        # Cache values can be decremented
        cache.set('answer', 43)
        self.assertEqual(cache.decr('answer'), 42)
        self.assertEqual(cache.get('answer'), 42)
        self.assertEqual(cache.decr('answer', 10), 32)
        self.assertEqual(cache.get('answer'), 32)
        self.assertEqual(cache.decr('answer', -10), 42)
        with self.assertRaises(ValueError):
            cache.decr('does_not_exist')
        with self.assertRaises(ValueError):
            cache.incr('does_not_exist', -1)
        cache.set('null', None)
        with self.assertRaises(self.incr_decr_type_error):
            cache.decr('null')

    def test_close(self):
        self.assertTrue(hasattr(cache, 'close'))
        cache.close()

    def test_data_types(self):
        # Many different data types can be cached
        tests = {
            'string': 'this is a string',
            'int': 42,
            'bool': True,
            'list': [1, 2, 3, 4],
            'tuple': (1, 2, 3, 4),
            'dict': {'A': 1, 'B': 2},
            'function': f,
            'class': C,
        }
        for key, value in tests.items():
            with self.subTest(key=key):
                cache.set(key, value)
                self.assertEqual(cache.get(key), value)

    def test_cache_read_for_model_instance(self):
        # Don't want fields with callable as default to be called on cache read
        expensive_calculation.num_runs = 0
        Poll.objects.all().delete()
        my_poll = Poll.objects.create(question=""Well?"")
        self.assertEqual(Poll.objects.count(), 1)
        pub_date = my_poll.pub_date
        cache.set('question', my_poll)
        cached_poll = cache.get('question')
        self.assertEqual(cached_poll.pub_date, pub_date)
        # We only want the default expensive calculation run once
        self.assertEqual(expensive_calculation.num_runs, 1)

    def test_cache_write_for_model_instance_with_deferred(self):
        # Don't want fields with callable as default to be called on cache write
        expensive_calculation.num_runs = 0
        Poll.objects.all().delete()
        Poll.objects.create(question=""What?"")
        self.assertEqual(expensive_calculation.num_runs, 1)
        defer_qs = Poll.objects.all().defer('question')
        self.assertEqual(defer_qs.count(), 1)
        self.assertEqual(expensive_calculation.num_runs, 1)
        cache.set('deferred_queryset', defer_qs)
        # cache set should not re-evaluate default functions
        self.assertEqual(expensive_calculation.num_runs, 1)

    def test_cache_read_for_model_instance_with_deferred(self):
        # Don't want fields with callable as default to be called on cache read
        expensive_calculation.num_runs = 0
        Poll.objects.all().delete()
        Poll.objects.create(question=""What?"")
        self.assertEqual(expensive_calculation.num_runs, 1)
        defer_qs = Poll.objects.all().defer('question')
        self.assertEqual(defer_qs.count(), 1)
        cache.set('deferred_queryset', defer_qs)
        self.assertEqual(expensive_calculation.num_runs, 1)
        runs_before_cache_read = expensive_calculation.num_runs
        cache.get('deferred_queryset')
        # We only want the default expensive calculation run on creation and set
        self.assertEqual(expensive_calculation.num_runs, runs_before_cache_read)

    def test_expiration(self):
        # Cache values can be set to expire
        cache.set('expire1', 'very quickly', 1)
        cache.set('expire2', 'very quickly', 1)
        cache.set('expire3', 'very quickly', 1)

        time.sleep(2)
        self.assertIsNone(cache.get(""expire1""))

        self.assertIs(cache.add(""expire2"", ""newvalue""), True)
        self.assertEqual(cache.get(""expire2""), ""newvalue"")
        self.assertIs(cache.has_key(""expire3""), False)

    def test_touch(self):
        # cache.touch() updates the timeout.
        cache.set('expire1', 'very quickly', timeout=1)
        self.assertIs(cache.touch('expire1', timeout=4), True)
        time.sleep(2)
        self.assertIs(cache.has_key('expire1'), True)
        time.sleep(3)
        self.assertIs(cache.has_key('expire1'), False)
        # cache.touch() works without the timeout argument.
        cache.set('expire1', 'very quickly', timeout=1)
        self.assertIs(cache.touch('expire1'), True)
        time.sleep(2)
        self.assertIs(cache.has_key('expire1'), True)

        self.assertIs(cache.touch('nonexistent'), False)

    def test_unicode(self):
        # Unicode values can be cached
        stuff = {
            'ascii': 'ascii_value',
            'unicode_ascii': 'Iñtërnâtiônàlizætiøn1',
            'Iñtërnâtiônàlizætiøn': 'Iñtërnâtiônàlizætiøn2',
            'ascii2': {'x': 1}
        }
        # Test `set`
        for (key, value) in stuff.items():
            with self.subTest(key=key):
                cache.set(key, value)
                self.assertEqual(cache.get(key), value)

        # Test `add`
        for (key, value) in stuff.items():
            with self.subTest(key=key):
                self.assertIs(cache.delete(key), True)
                self.assertIs(cache.add(key, value), True)
                self.assertEqual(cache.get(key), value)

        # Test `set_many`
        for (key, value) in stuff.items():
            self.assertIs(cache.delete(key), True)
        cache.set_many(stuff)
        for (key, value) in stuff.items():
            with self.subTest(key=key):
                self.assertEqual(cache.get(key), value)

    def test_binary_string(self):
        # Binary strings should be cacheable
        from zlib import compress, decompress
        value = 'value_to_be_compressed'
        compressed_value = compress(value.encode())

        # Test set
        cache.set('binary1', compressed_value)
        compressed_result = cache.get('binary1')
        self.assertEqual(compressed_value, compressed_result)
        self.assertEqual(value, decompress(compressed_result).decode())

        # Test add
        self.assertIs(cache.add('binary1-add', compressed_value), True)
        compressed_result = cache.get('binary1-add')
        self.assertEqual(compressed_value, compressed_result)
        self.assertEqual(value, decompress(compressed_result).decode())

        # Test set_many
        cache.set_many({'binary1-set_many': compressed_value})
        compressed_result = cache.get('binary1-set_many')
        self.assertEqual(compressed_value, compressed_result)
        self.assertEqual(value, decompress(compressed_result).decode())

    def test_set_many(self):
        # Multiple keys can be set using set_many
        cache.set_many({""key1"": ""spam"", ""key2"": ""eggs""})
        self.assertEqual(cache.get(""key1""), ""spam"")
        self.assertEqual(cache.get(""key2""), ""eggs"")

    def test_set_many_returns_empty_list_on_success(self):
        """"""set_many() returns an empty list when all keys are inserted.""""""
        failing_keys = cache.set_many({'key1': 'spam', 'key2': 'eggs'})
        self.assertEqual(failing_keys, [])

    def test_set_many_expiration(self):
        # set_many takes a second ``timeout`` parameter
        cache.set_many({""key1"": ""spam"", ""key2"": ""eggs""}, 1)
        time.sleep(2)
        self.assertIsNone(cache.get(""key1""))
        self.assertIsNone(cache.get(""key2""))

    def test_delete_many(self):
        # Multiple keys can be deleted using delete_many
        cache.set_many({'key1': 'spam', 'key2': 'eggs', 'key3': 'ham'})
        cache.delete_many([""key1"", ""key2""])
        self.assertIsNone(cache.get(""key1""))
        self.assertIsNone(cache.get(""key2""))
        self.assertEqual(cache.get(""key3""), ""ham"")

    def test_clear(self):
        # The cache can be emptied using clear
        cache.set_many({'key1': 'spam', 'key2': 'eggs'})
        cache.clear()
        self.assertIsNone(cache.get(""key1""))
        self.assertIsNone(cache.get(""key2""))

    def test_long_timeout(self):
        """"""
        Follow memcached's convention where a timeout greater than 30 days is
        treated as an absolute expiration timestamp instead of a relative
        offset (#12399).
        """"""
        cache.set('key1', 'eggs', 60 * 60 * 24 * 30 + 1)  # 30 days + 1 second
        self.assertEqual(cache.get('key1'), 'eggs')

        self.assertIs(cache.add('key2', 'ham', 60 * 60 * 24 * 30 + 1), True)
        self.assertEqual(cache.get('key2'), 'ham')

        cache.set_many({'key3': 'sausage', 'key4': 'lobster bisque'}, 60 * 60 * 24 * 30 + 1)
        self.assertEqual(cache.get('key3'), 'sausage')
        self.assertEqual(cache.get('key4'), 'lobster bisque')

    def test_forever_timeout(self):
        """"""
        Passing in None into timeout results in a value that is cached forever
        """"""
        cache.set('key1', 'eggs', None)
        self.assertEqual(cache.get('key1'), 'eggs')

        self.assertIs(cache.add('key2', 'ham', None), True)
        self.assertEqual(cache.get('key2'), 'ham')
        self.assertIs(cache.add('key1', 'new eggs', None), False)
        self.assertEqual(cache.get('key1'), 'eggs')

        cache.set_many({'key3': 'sausage', 'key4': 'lobster bisque'}, None)
        self.assertEqual(cache.get('key3'), 'sausage')
        self.assertEqual(cache.get('key4'), 'lobster bisque')

        cache.set('key5', 'belgian fries', timeout=1)
        self.assertIs(cache.touch('key5', timeout=None), True)
        time.sleep(2)
        self.assertEqual(cache.get('key5'), 'belgian fries')

    def test_zero_timeout(self):
        """"""
        Passing in zero into timeout results in a value that is not cached
        """"""
        cache.set('key1', 'eggs', 0)
        self.assertIsNone(cache.get('key1'))

        self.assertIs(cache.add('key2', 'ham', 0), True)
        self.assertIsNone(cache.get('key2'))

        cache.set_many({'key3': 'sausage', 'key4': 'lobster bisque'}, 0)
        self.assertIsNone(cache.get('key3'))
        self.assertIsNone(cache.get('key4'))

        cache.set('key5', 'belgian fries', timeout=5)
        self.assertIs(cache.touch('key5', timeout=0), True)
        self.assertIsNone(cache.get('key5'))

    def test_float_timeout(self):
        # Make sure a timeout given as a float doesn't crash anything.
        cache.set(""key1"", ""spam"", 100.2)
        self.assertEqual(cache.get(""key1""), ""spam"")

    def _perform_cull_test(self, cull_cache_name, initial_count, final_count):
        try:
            cull_cache = caches[cull_cache_name]
        except InvalidCacheBackendError:
            self.skipTest(""Culling isn't implemented."")

        # Create initial cache key entries. This will overflow the cache,
        # causing a cull.
        for i in range(1, initial_count):
            cull_cache.set('cull%d' % i, 'value', 1000)
        count = 0
        # Count how many keys are left in the cache.
        for i in range(1, initial_count):
            if cull_cache.has_key('cull%d' % i):
                count += 1
        self.assertEqual(count, final_count)

    def test_cull(self):
        self._perform_cull_test('cull', 50, 29)

    def test_zero_cull(self):
        self._perform_cull_test('zero_cull', 50, 19)

    def test_cull_delete_when_store_empty(self):
        try:
            cull_cache = caches['cull']
        except InvalidCacheBackendError:
            self.skipTest(""Culling isn't implemented."")
        old_max_entries = cull_cache._max_entries
        # Force _cull to delete on first cached record.
        cull_cache._max_entries = -1
        try:
            cull_cache.set('force_cull_delete', 'value', 1000)
            self.assertIs(cull_cache.has_key('force_cull_delete'), True)
        finally:
            cull_cache._max_entries = old_max_entries

    def _perform_invalid_key_test(self, key, expected_warning, key_func=None):
        """"""
        All the builtin backends should warn (except memcached that should
        error) on keys that would be refused by memcached. This encourages
        portable caching code without making it too difficult to use production
        backends with more liberal key rules. Refs #6447.
        """"""
        # mimic custom ``make_key`` method being defined since the default will
        # never show the below warnings
        def func(key, *args):
            return key

        old_func = cache.key_func
        cache.key_func = key_func or func

        tests = [
            ('add', [key, 1]),
            ('get', [key]),
            ('set', [key, 1]),
            ('incr', [key]),
            ('decr', [key]),
            ('touch', [key]),
            ('delete', [key]),
            ('get_many', [[key, 'b']]),
            ('set_many', [{key: 1, 'b': 2}]),
            ('delete_many', [[key, 'b']]),
        ]
        try:
            for operation, args in tests:
                with self.subTest(operation=operation):
                    with self.assertWarns(CacheKeyWarning) as cm:
                        getattr(cache, operation)(*args)
                    self.assertEqual(str(cm.warning), expected_warning)
        finally:
            cache.key_func = old_func

    def test_invalid_key_characters(self):
        # memcached doesn't allow whitespace or control characters in keys.
        key = 'key with spaces and 清'
        self._perform_invalid_key_test(key, KEY_ERRORS_WITH_MEMCACHED_MSG % key)

    def test_invalid_key_length(self):
        # memcached limits key length to 250.
        key = ('a' * 250) + '清'
        expected_warning = (
            'Cache key will cause errors if used with memcached: '
            '%r (longer than %s)' % (key, 250)
        )
        self._perform_invalid_key_test(key, expected_warning)

    def test_invalid_with_version_key_length(self):
        # Custom make_key() that adds a version to the key and exceeds the
        # limit.
        def key_func(key, *args):
            return key + ':1'

        key = 'a' * 249
        expected_warning = (
            'Cache key will cause errors if used with memcached: '
            '%r (longer than %s)' % (key_func(key), 250)
        )
        self._perform_invalid_key_test(key, expected_warning, key_func=key_func)

    def test_cache_versioning_get_set(self):
        # set, using default version = 1
        cache.set('answer1', 42)
        self.assertEqual(cache.get('answer1'), 42)
        self.assertEqual(cache.get('answer1', version=1), 42)
        self.assertIsNone(cache.get('answer1', version=2))

        self.assertIsNone(caches['v2'].get('answer1'))
        self.assertEqual(caches['v2'].get('answer1', version=1), 42)
        self.assertIsNone(caches['v2'].get('answer1', version=2))

        # set, default version = 1, but manually override version = 2
        cache.set('answer2', 42, version=2)
        self.assertIsNone(cache.get('answer2'))
        self.assertIsNone(cache.get('answer2', version=1))
        self.assertEqual(cache.get('answer2', version=2), 42)

        self.assertEqual(caches['v2'].get('answer2'), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertEqual(caches['v2'].get('answer2', version=2), 42)

        # v2 set, using default version = 2
        caches['v2'].set('answer3', 42)
        self.assertIsNone(cache.get('answer3'))
        self.assertIsNone(cache.get('answer3', version=1))
        self.assertEqual(cache.get('answer3', version=2), 42)

        self.assertEqual(caches['v2'].get('answer3'), 42)
        self.assertIsNone(caches['v2'].get('answer3', version=1))
        self.assertEqual(caches['v2'].get('answer3', version=2), 42)

        # v2 set, default version = 2, but manually override version = 1
        caches['v2'].set('answer4', 42, version=1)
        self.assertEqual(cache.get('answer4'), 42)
        self.assertEqual(cache.get('answer4', version=1), 42)
        self.assertIsNone(cache.get('answer4', version=2))

        self.assertIsNone(caches['v2'].get('answer4'))
        self.assertEqual(caches['v2'].get('answer4', version=1), 42)
        self.assertIsNone(caches['v2'].get('answer4', version=2))

    def test_cache_versioning_add(self):

        # add, default version = 1, but manually override version = 2
        self.assertIs(cache.add('answer1', 42, version=2), True)
        self.assertIsNone(cache.get('answer1', version=1))
        self.assertEqual(cache.get('answer1', version=2), 42)

        self.assertIs(cache.add('answer1', 37, version=2), False)
        self.assertIsNone(cache.get('answer1', version=1))
        self.assertEqual(cache.get('answer1', version=2), 42)

        self.assertIs(cache.add('answer1', 37, version=1), True)
        self.assertEqual(cache.get('answer1', version=1), 37)
        self.assertEqual(cache.get('answer1', version=2), 42)

        # v2 add, using default version = 2
        self.assertIs(caches['v2'].add('answer2', 42), True)
        self.assertIsNone(cache.get('answer2', version=1))
        self.assertEqual(cache.get('answer2', version=2), 42)

        self.assertIs(caches['v2'].add('answer2', 37), False)
        self.assertIsNone(cache.get('answer2', version=1))
        self.assertEqual(cache.get('answer2', version=2), 42)

        self.assertIs(caches['v2'].add('answer2', 37, version=1), True)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertEqual(cache.get('answer2', version=2), 42)

        # v2 add, default version = 2, but manually override version = 1
        self.assertIs(caches['v2'].add('answer3', 42, version=1), True)
        self.assertEqual(cache.get('answer3', version=1), 42)
        self.assertIsNone(cache.get('answer3', version=2))

        self.assertIs(caches['v2'].add('answer3', 37, version=1), False)
        self.assertEqual(cache.get('answer3', version=1), 42)
        self.assertIsNone(cache.get('answer3', version=2))

        self.assertIs(caches['v2'].add('answer3', 37), True)
        self.assertEqual(cache.get('answer3', version=1), 42)
        self.assertEqual(cache.get('answer3', version=2), 37)

    def test_cache_versioning_has_key(self):
        cache.set('answer1', 42)

        # has_key
        self.assertIs(cache.has_key('answer1'), True)
        self.assertIs(cache.has_key('answer1', version=1), True)
        self.assertIs(cache.has_key('answer1', version=2), False)

        self.assertIs(caches['v2'].has_key('answer1'), False)
        self.assertIs(caches['v2'].has_key('answer1', version=1), True)
        self.assertIs(caches['v2'].has_key('answer1', version=2), False)

    def test_cache_versioning_delete(self):
        cache.set('answer1', 37, version=1)
        cache.set('answer1', 42, version=2)
        self.assertIs(cache.delete('answer1'), True)
        self.assertIsNone(cache.get('answer1', version=1))
        self.assertEqual(cache.get('answer1', version=2), 42)

        cache.set('answer2', 37, version=1)
        cache.set('answer2', 42, version=2)
        self.assertIs(cache.delete('answer2', version=2), True)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertIsNone(cache.get('answer2', version=2))

        cache.set('answer3', 37, version=1)
        cache.set('answer3', 42, version=2)
        self.assertIs(caches['v2'].delete('answer3'), True)
        self.assertEqual(cache.get('answer3', version=1), 37)
        self.assertIsNone(cache.get('answer3', version=2))

        cache.set('answer4', 37, version=1)
        cache.set('answer4', 42, version=2)
        self.assertIs(caches['v2'].delete('answer4', version=1), True)
        self.assertIsNone(cache.get('answer4', version=1))
        self.assertEqual(cache.get('answer4', version=2), 42)

    def test_cache_versioning_incr_decr(self):
        cache.set('answer1', 37, version=1)
        cache.set('answer1', 42, version=2)
        self.assertEqual(cache.incr('answer1'), 38)
        self.assertEqual(cache.get('answer1', version=1), 38)
        self.assertEqual(cache.get('answer1', version=2), 42)
        self.assertEqual(cache.decr('answer1'), 37)
        self.assertEqual(cache.get('answer1', version=1), 37)
        self.assertEqual(cache.get('answer1', version=2), 42)

        cache.set('answer2', 37, version=1)
        cache.set('answer2', 42, version=2)
        self.assertEqual(cache.incr('answer2', version=2), 43)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertEqual(cache.get('answer2', version=2), 43)
        self.assertEqual(cache.decr('answer2', version=2), 42)
        self.assertEqual(cache.get('answer2', version=1), 37)
        self.assertEqual(cache.get('answer2', version=2), 42)

        cache.set('answer3', 37, version=1)
        cache.set('answer3', 42, version=2)
        self.assertEqual(caches['v2'].incr('answer3'), 43)
        self.assertEqual(cache.get('answer3', version=1), 37)
        self.assertEqual(cache.get('answer3', version=2), 43)
        self.assertEqual(caches['v2'].decr('answer3'), 42)
        self.assertEqual(cache.get('answer3', version=1), 37)
        self.assertEqual(cache.get('answer3', version=2), 42)

        cache.set('answer4', 37, version=1)
        cache.set('answer4', 42, version=2)
        self.assertEqual(caches['v2'].incr('answer4', version=1), 38)
        self.assertEqual(cache.get('answer4', version=1), 38)
        self.assertEqual(cache.get('answer4', version=2), 42)
        self.assertEqual(caches['v2'].decr('answer4', version=1), 37)
        self.assertEqual(cache.get('answer4', version=1), 37)
        self.assertEqual(cache.get('answer4', version=2), 42)

    def test_cache_versioning_get_set_many(self):
        # set, using default version = 1
        cache.set_many({'ford1': 37, 'arthur1': 42})
        self.assertEqual(cache.get_many(['ford1', 'arthur1']), {'ford1': 37, 'arthur1': 42})
        self.assertEqual(cache.get_many(['ford1', 'arthur1'], version=1), {'ford1': 37, 'arthur1': 42})
        self.assertEqual(cache.get_many(['ford1', 'arthur1'], version=2), {})

        self.assertEqual(caches['v2'].get_many(['ford1', 'arthur1']), {})
        self.assertEqual(caches['v2'].get_many(['ford1', 'arthur1'], version=1), {'ford1': 37, 'arthur1': 42})
        self.assertEqual(caches['v2'].get_many(['ford1', 'arthur1'], version=2), {})

        # set, default version = 1, but manually override version = 2
        cache.set_many({'ford2': 37, 'arthur2': 42}, version=2)
        self.assertEqual(cache.get_many(['ford2', 'arthur2']), {})
        self.assertEqual(cache.get_many(['ford2', 'arthur2'], version=1), {})
        self.assertEqual(cache.get_many(['ford2', 'arthur2'], version=2), {'ford2': 37, 'arthur2': 42})

        self.assertEqual(caches['v2'].get_many(['ford2', 'arthur2']), {'ford2': 37, 'arthur2': 42})
        self.assertEqual(caches['v2'].get_many(['ford2', 'arthur2'], version=1), {})
        self.assertEqual(caches['v2'].get_many(['ford2', 'arthur2'], version=2), {'ford2': 37, 'arthur2': 42})

        # v2 set, using default version = 2
        caches['v2'].set_many({'ford3': 37, 'arthur3': 42})
        self.assertEqual(cache.get_many(['ford3', 'arthur3']), {})
        self.assertEqual(cache.get_many(['ford3', 'arthur3'], version=1), {})
        self.assertEqual(cache.get_many(['ford3', 'arthur3'], version=2), {'ford3': 37, 'arthur3': 42})

        self.assertEqual(caches['v2'].get_many(['ford3', 'arthur3']), {'ford3': 37, 'arthur3': 42})
        self.assertEqual(caches['v2'].get_many(['ford3', 'arthur3'], version=1), {})
        self.assertEqual(caches['v2'].get_many(['ford3', 'arthur3'], version=2), {'ford3': 37, 'arthur3': 42})

        # v2 set, default version = 2, but manually override version = 1
        caches['v2'].set_many({'ford4': 37, 'arthur4': 42}, version=1)
        self.assertEqual(cache.get_many(['ford4', 'arthur4']), {'ford4': 37, 'arthur4': 42})
        self.assertEqual(cache.get_many(['ford4', 'arthur4'], version=1), {'ford4': 37, 'arthur4': 42})
        self.assertEqual(cache.get_many(['ford4', 'arthur4'], version=2), {})

        self.assertEqual(caches['v2'].get_many(['ford4', 'arthur4']), {})
        self.assertEqual(caches['v2'].get_many(['ford4', 'arthur4'], version=1), {'ford4': 37, 'arthur4': 42})
        self.assertEqual(caches['v2'].get_many(['ford4', 'arthur4'], version=2), {})

    def test_incr_version(self):
        cache.set('answer', 42, version=2)
        self.assertIsNone(cache.get('answer'))
        self.assertIsNone(cache.get('answer', version=1))
        self.assertEqual(cache.get('answer', version=2), 42)
        self.assertIsNone(cache.get('answer', version=3))

        self.assertEqual(cache.incr_version('answer', version=2), 3)
        self.assertIsNone(cache.get('answer'))
        self.assertIsNone(cache.get('answer', version=1))
        self.assertIsNone(cache.get('answer', version=2))
        self.assertEqual(cache.get('answer', version=3), 42)

        caches['v2'].set('answer2', 42)
        self.assertEqual(caches['v2'].get('answer2'), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertEqual(caches['v2'].get('answer2', version=2), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=3))

        self.assertEqual(caches['v2'].incr_version('answer2'), 3)
        self.assertIsNone(caches['v2'].get('answer2'))
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertIsNone(caches['v2'].get('answer2', version=2))
        self.assertEqual(caches['v2'].get('answer2', version=3), 42)

        with self.assertRaises(ValueError):
            cache.incr_version('does_not_exist')

        cache.set('null', None)
        self.assertEqual(cache.incr_version('null'), 2)

    def test_decr_version(self):
        cache.set('answer', 42, version=2)
        self.assertIsNone(cache.get('answer'))
        self.assertIsNone(cache.get('answer', version=1))
        self.assertEqual(cache.get('answer', version=2), 42)

        self.assertEqual(cache.decr_version('answer', version=2), 1)
        self.assertEqual(cache.get('answer'), 42)
        self.assertEqual(cache.get('answer', version=1), 42)
        self.assertIsNone(cache.get('answer', version=2))

        caches['v2'].set('answer2', 42)
        self.assertEqual(caches['v2'].get('answer2'), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=1))
        self.assertEqual(caches['v2'].get('answer2', version=2), 42)

        self.assertEqual(caches['v2'].decr_version('answer2'), 1)
        self.assertIsNone(caches['v2'].get('answer2'))
        self.assertEqual(caches['v2'].get('answer2', version=1), 42)
        self.assertIsNone(caches['v2'].get('answer2', version=2))

        with self.assertRaises(ValueError):
            cache.decr_version('does_not_exist', version=2)

        cache.set('null', None, version=2)
        self.assertEqual(cache.decr_version('null', version=2), 1)

    def test_custom_key_func(self):
        # Two caches with different key functions aren't visible to each other
        cache.set('answer1', 42)
        self.assertEqual(cache.get('answer1'), 42)
        self.assertIsNone(caches['custom_key'].get('answer1'))
        self.assertIsNone(caches['custom_key2'].get('answer1'))

        caches['custom_key'].set('answer2', 42)
        self.assertIsNone(cache.get('answer2'))
        self.assertEqual(caches['custom_key'].get('answer2'), 42)
        self.assertEqual(caches['custom_key2'].get('answer2'), 42)

    @override_settings(CACHE_MIDDLEWARE_ALIAS=DEFAULT_CACHE_ALIAS)
    def test_cache_write_unpicklable_object(self):
        fetch_middleware = FetchFromCacheMiddleware(empty_response)

        request = self.factory.get('/cache/test')
        request._cache_update_cache = True
        get_cache_data = FetchFromCacheMiddleware(empty_response).process_request(request)
        self.assertIsNone(get_cache_data)

        content = 'Testing cookie serialization.'

        def get_response(req):
            response = HttpResponse(content)
            response.set_cookie('foo', 'bar')
            return response

        update_middleware = UpdateCacheMiddleware(get_response)
        response = update_middleware(request)

        get_cache_data = fetch_middleware.process_request(request)
        self.assertIsNotNone(get_cache_data)
        self.assertEqual(get_cache_data.content, content.encode())
        self.assertEqual(get_cache_data.cookies, response.cookies)

        UpdateCacheMiddleware(lambda req: get_cache_data)(request)
        get_cache_data = fetch_middleware.process_request(request)
        self.assertIsNotNone(get_cache_data)
        self.assertEqual(get_cache_data.content, content.encode())
        self.assertEqual(get_cache_data.cookies, response.cookies)

    def test_add_fail_on_pickleerror(self):
        # Shouldn't fail silently if trying to cache an unpicklable type.
        with self.assertRaises(pickle.PickleError):
            cache.add('unpicklable', Unpicklable())

    def test_set_fail_on_pickleerror(self):
        with self.assertRaises(pickle.PickleError):
            cache.set('unpicklable', Unpicklable())

    def test_get_or_set(self):
        self.assertIsNone(cache.get('projector'))
        self.assertEqual(cache.get_or_set('projector', 42), 42)
        self.assertEqual(cache.get('projector'), 42)
        self.assertIsNone(cache.get_or_set('null', None))
        # Previous get_or_set() stores None in the cache.
        self.assertIsNone(cache.get('null', 'default'))

    def test_get_or_set_callable(self):
        def my_callable():
            return 'value'

        self.assertEqual(cache.get_or_set('mykey', my_callable), 'value')
        self.assertEqual(cache.get_or_set('mykey', my_callable()), 'value')

        self.assertIsNone(cache.get_or_set('null', lambda: None))
        # Previous get_or_set() stores None in the cache.
        self.assertIsNone(cache.get('null', 'default'))

    def test_get_or_set_version(self):
        msg = ""get_or_set() missing 1 required positional argument: 'default'""
        self.assertEqual(cache.get_or_set('brian', 1979, version=2), 1979)
        with self.assertRaisesMessage(TypeError, msg):
            cache.get_or_set('brian')
        with self.assertRaisesMessage(TypeError, msg):
            cache.get_or_set('brian', version=1)
        self.assertIsNone(cache.get('brian', version=1))
        self.assertEqual(cache.get_or_set('brian', 42, version=1), 42)
        self.assertEqual(cache.get_or_set('brian', 1979, version=2), 1979)
        self.assertIsNone(cache.get('brian', version=3))

    def test_get_or_set_racing(self):
        with mock.patch('%s.%s' % (settings.CACHES['default']['BACKEND'], 'add')) as cache_add:
            # Simulate cache.add() failing to add a value. In that case, the
            # default value should be returned.
            cache_add.return_value = False
            self.assertEqual(cache.get_or_set('key', 'default'), 'default')",1,334 2000 58 621 2001 61 2002 40 41 621 621 2003 61 2004 348 2005 40 2006 41 58 2007 46 2008 40 41 348 2009 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2013 40 2006 41 58 648 2007 46 2010 40 648 44 303 41 2006 46 2014 40 2007 46 2012 40 648 44 349 61 648 41 41 348 2015 40 2006 41 58 621 2006 46 2016 40 2007 46 2017 40 648 44 648 41 44 304 41 2006 46 2016 40 2007 46 2017 40 648 44 648 41 44 302 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2018 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 621 2006 46 2016 40 2019 91 648 93 46 2020 40 648 41 44 302 41 2019 91 648 93 46 2010 40 648 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 648 41 348 2021 40 2006 41 58 648 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2012 40 648 44 648 41 44 648 41 348 2022 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 44 648 93 41 44 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 44 648 93 41 44 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2024 40 2025 40 91 648 44 648 44 648 93 41 41 44 123 648 58 648 44 648 58 648 125 41 2007 46 2023 40 123 648 58 303 44 648 58 1501 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 648 58 303 44 648 58 1501 125 41 348 2026 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 353 40 648 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2027 40 2006 41 58 2006 46 2016 40 2007 46 353 40 648 41 44 302 41 348 2028 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2006 46 2016 40 2007 46 2020 40 648 41 44 302 41 2007 46 2010 40 648 44 648 44 303 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2007 46 2010 40 648 44 303 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 348 2029 40 2006 41 58 621 2007 46 2010 40 648 44 648 41 2006 46 2030 40 648 44 2007 41 2006 46 2031 40 648 44 2007 41 2007 46 2010 40 648 44 303 41 2006 46 2030 40 648 44 2007 41 348 2032 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2033 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2033 40 648 44 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2033 40 648 44 45 1502 41 44 1503 41 497 2006 46 2034 40 2035 41 58 2007 46 2033 40 648 41 497 2006 46 2034 40 2035 41 58 2007 46 2033 40 648 44 45 1501 41 2007 46 2010 40 648 44 303 41 497 2006 46 2034 40 2006 46 2003 41 58 2007 46 2033 40 648 41 348 2036 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 44 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 44 45 1502 41 44 1503 41 497 2006 46 2034 40 2035 41 58 2007 46 2037 40 648 41 497 2006 46 2034 40 2035 41 58 2007 46 2033 40 648 44 45 1501 41 2007 46 2010 40 648 44 303 41 497 2006 46 2034 40 2006 46 2003 41 58 2007 46 2037 40 648 41 348 2038 40 2006 41 58 2006 46 2039 40 2040 40 2007 44 648 41 41 2007 46 2041 40 41 348 2042 40 2006 41 58 621 2043 61 123 648 58 648 44 648 58 1503 44 648 58 304 44 648 58 91 1501 44 1502 44 1502 44 1502 93 44 648 58 40 1501 44 1502 44 1502 44 1502 41 44 648 58 123 648 58 1501 44 648 58 1502 125 44 648 58 2044 44 648 58 2045 44 125 385 2046 44 2047 398 2043 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2007 46 2010 40 2046 44 2047 41 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 348 2050 40 2006 41 58 621 2051 46 2052 61 1500 2053 46 2054 46 2055 40 41 46 353 40 41 2056 61 2053 46 2054 46 2057 40 2058 61 648 41 2006 46 2011 40 2053 46 2054 46 2059 40 41 44 1501 41 2060 61 2056 46 2060 2007 46 2010 40 648 44 2056 41 2061 61 2007 46 2012 40 648 41 2006 46 2011 40 2061 46 2060 44 2060 41 621 2006 46 2011 40 2051 46 2052 44 1501 41 348 2062 40 2006 41 58 621 2051 46 2052 61 1500 2053 46 2054 46 2055 40 41 46 353 40 41 2053 46 2054 46 2057 40 2058 61 648 41 2006 46 2011 40 2051 46 2052 44 1501 41 2063 61 2053 46 2054 46 2055 40 41 46 2064 40 648 41 2006 46 2011 40 2063 46 2059 40 41 44 1501 41 2006 46 2011 40 2051 46 2052 44 1501 41 2007 46 2010 40 648 44 2063 41 621 2006 46 2011 40 2051 46 2052 44 1501 41 348 2065 40 2006 41 58 621 2051 46 2052 61 1500 2053 46 2054 46 2055 40 41 46 353 40 41 2053 46 2054 46 2057 40 2058 61 648 41 2006 46 2011 40 2051 46 2052 44 1501 41 2063 61 2053 46 2054 46 2055 40 41 46 2064 40 648 41 2006 46 2011 40 2063 46 2059 40 41 44 1501 41 2007 46 2010 40 648 44 2063 41 2006 46 2011 40 2051 46 2052 44 1501 41 2066 61 2051 46 2052 2007 46 2012 40 648 41 621 2006 46 2011 40 2051 46 2052 44 2066 41 348 2067 40 2006 41 58 621 2007 46 2010 40 648 44 648 44 1501 41 2007 46 2010 40 648 44 648 44 1501 41 2007 46 2010 40 648 44 648 44 1501 41 2068 46 2069 40 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2016 40 2007 46 2017 40 648 44 648 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2020 40 648 41 44 302 41 348 2070 40 2006 41 58 621 2007 46 2010 40 648 44 648 44 2071 61 1501 41 2006 46 2016 40 2007 46 2072 40 648 44 2071 61 1502 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2016 40 2007 46 2020 40 648 41 44 302 41 621 2007 46 2010 40 648 44 648 44 2071 61 1501 41 2006 46 2016 40 2007 46 2072 40 648 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2006 46 2016 40 2007 46 2072 40 648 41 44 302 41 348 2073 40 2006 41 58 621 2074 61 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 123 648 58 1501 125 125 621 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2007 46 2010 40 2046 44 2047 41 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 621 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2006 46 2016 40 2007 46 353 40 2046 41 44 304 41 2006 46 2016 40 2007 46 2017 40 2046 44 2047 41 44 304 41 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 621 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 2006 46 2016 40 2007 46 353 40 2046 41 44 304 41 2007 46 2023 40 2074 41 385 40 2046 44 2047 41 398 2074 46 2048 40 41 58 497 2006 46 2049 40 2046 61 2046 41 58 2006 46 2011 40 2007 46 2012 40 2046 41 44 2047 41 348 2075 40 2006 41 58 621 388 2076 397 2077 44 2078 2047 61 648 2079 61 2077 40 2047 46 2080 40 41 41 621 2007 46 2010 40 648 44 2079 41 2081 61 2007 46 2012 40 648 41 2006 46 2011 40 2079 44 2081 41 2006 46 2011 40 2047 44 2078 40 2081 41 46 2082 40 41 41 621 2006 46 2016 40 2007 46 2017 40 648 44 2079 41 44 304 41 2081 61 2007 46 2012 40 648 41 2006 46 2011 40 2079 44 2081 41 2006 46 2011 40 2047 44 2078 40 2081 41 46 2082 40 41 41 621 2007 46 2023 40 123 648 58 2079 125 41 2081 61 2007 46 2012 40 648 41 2006 46 2011 40 2079 44 2081 41 2006 46 2011 40 2047 44 2078 40 2081 41 46 2082 40 41 41 348 2083 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2084 40 2006 41 58 648 2085 61 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2006 46 2011 40 2085 44 91 93 41 348 2086 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 1501 41 2068 46 2069 40 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 348 2087 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 44 648 58 648 125 41 2007 46 2088 40 91 648 44 648 93 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2089 40 2006 41 58 621 2007 46 2023 40 123 648 58 648 44 648 58 648 125 41 2007 46 2008 40 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 348 2090 40 2006 41 58 648 2007 46 2010 40 648 44 648 44 1503 42 1503 42 1503 42 1503 43 1501 41 621 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 1503 42 1503 42 1503 42 1503 43 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 1503 42 1503 42 1503 42 1503 43 1501 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2091 40 2006 41 58 648 2007 46 2010 40 648 44 648 44 303 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 303 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 303 41 44 302 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 303 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 2007 46 2010 40 648 44 648 44 2071 61 1501 41 2006 46 2016 40 2007 46 2072 40 648 44 2071 61 303 41 44 304 41 2068 46 2069 40 1502 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2092 40 2006 41 58 648 2007 46 2010 40 648 44 648 44 1500 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2016 40 2007 46 2017 40 648 44 648 44 1500 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2007 46 2023 40 123 648 58 648 44 648 58 648 125 44 1500 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2007 46 2010 40 648 44 648 44 2071 61 1502 41 2006 46 2016 40 2007 46 2072 40 648 44 2071 61 1500 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 41 41 348 2093 40 2006 41 58 621 2007 46 2010 40 648 44 648 44 1504 41 2006 46 2011 40 2007 46 2012 40 648 41 44 648 41 348 2094 40 2006 44 2095 44 2096 44 2097 41 58 474 58 2098 61 2019 91 2095 93 374 2099 58 2006 46 2100 40 648 41 621 621 385 2101 398 2102 40 1501 44 2096 41 58 2098 46 2010 40 648 37 2101 44 648 44 1504 41 2059 61 1500 621 385 2101 398 2102 40 1501 44 2096 41 58 392 2098 46 2020 40 648 37 2101 41 58 2059 636 1501 2006 46 2011 40 2059 44 2097 41 348 2103 40 2006 41 58 2006 46 2094 40 648 44 1503 44 1503 41 348 2104 40 2006 41 58 2006 46 2094 40 648 44 1503 44 1503 41 348 2105 40 2006 41 58 474 58 2098 61 2019 91 648 93 374 2099 58 2006 46 2100 40 648 41 2106 61 2098 46 2107 621 2098 46 2107 61 45 1501 474 58 2098 46 2010 40 648 44 648 44 1504 41 2006 46 2016 40 2098 46 2020 40 648 41 44 304 41 382 58 2098 46 2107 61 2106 348 2108 40 2006 44 2046 44 2109 44 2110 61 303 41 58 648 621 621 348 2111 40 2046 44 42 2112 41 58 450 2046 2113 61 2007 46 2110 2007 46 2110 61 2110 428 2111 2043 61 91 40 648 44 91 2046 44 1501 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 44 1501 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 2046 93 41 44 40 648 44 91 91 2046 44 648 93 93 41 44 40 648 44 91 123 2046 58 1501 44 648 58 1502 125 93 41 44 40 648 44 91 91 2046 44 648 93 93 41 44 93 474 58 385 2114 44 2112 398 2043 58 497 2006 46 2049 40 2114 61 2114 41 58 497 2006 46 2115 40 2116 41 311 2117 58 2118 40 2007 44 2114 41 40 42 2112 41 2006 46 2011 40 2119 40 2117 46 494 41 44 2109 41 382 58 2007 46 2110 61 2113 348 2120 40 2006 41 58 621 2046 61 648 2006 46 2108 40 2046 44 2121 37 2046 41 348 2122 40 2006 41 58 621 2046 61 40 648 42 1504 41 43 648 2109 61 40 648 648 37 40 2046 44 1504 41 41 2006 46 2108 40 2046 44 2109 41 348 2123 40 2006 41 58 621 621 348 2110 40 2046 44 42 2112 41 58 450 2046 43 648 2046 61 648 42 1504 2109 61 40 648 648 37 40 2110 40 2046 41 44 1504 41 41 2006 46 2108 40 2046 44 2109 44 2110 61 2110 41 348 2124 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 621 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2019 91 648 93 46 2010 40 648 44 1503 44 2125 61 1501 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 348 2126 40 2006 41 58 621 2006 46 2016 40 2007 46 2017 40 648 44 1503 44 2125 61 1502 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2007 46 2017 40 648 44 1503 44 2125 61 1502 41 44 302 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2007 46 2017 40 648 44 1503 44 2125 61 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 41 44 302 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 44 2125 61 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 621 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 44 2125 61 1501 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 44 2125 61 1501 41 44 302 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2016 40 2019 91 648 93 46 2017 40 648 44 1503 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 348 2127 40 2006 41 58 2007 46 2010 40 648 44 1503 41 621 2006 46 2016 40 2007 46 2020 40 648 41 44 304 41 2006 46 2016 40 2007 46 2020 40 648 44 2125 61 1501 41 44 304 41 2006 46 2016 40 2007 46 2020 40 648 44 2125 61 1502 41 44 302 41 2006 46 2016 40 2019 91 648 93 46 2020 40 648 41 44 302 41 2006 46 2016 40 2019 91 648 93 46 2020 40 648 44 2125 61 1501 41 44 304 41 2006 46 2016 40 2019 91 648 93 46 2020 40 648 44 2125 61 1502 41 44 302 41 348 2128 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2007 46 353 40 648 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2007 46 353 40 648 44 2125 61 1502 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2019 91 648 93 46 353 40 648 41 44 304 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2016 40 2019 91 648 93 46 353 40 648 44 2125 61 1501 41 44 304 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 348 2129 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2007 46 2033 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2007 46 2033 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2037 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2019 91 648 93 46 2033 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2037 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2007 46 2010 40 648 44 1503 44 2125 61 1501 41 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2011 40 2019 91 648 93 46 2033 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2037 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 348 2130 40 2006 41 58 621 2007 46 2023 40 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 621 2007 46 2023 40 123 648 58 1503 44 648 58 1503 125 44 2125 61 1502 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 621 2019 91 648 93 46 2023 40 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 648 58 1503 44 648 58 1503 125 41 621 2019 91 648 93 46 2023 40 123 648 58 1503 44 648 58 1503 125 44 2125 61 1501 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2007 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 41 44 123 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1501 41 44 123 648 58 1503 44 648 58 1503 125 41 2006 46 2011 40 2019 91 648 93 46 2024 40 91 648 44 648 93 44 2125 61 1502 41 44 123 125 41 348 2131 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2007 46 2132 40 648 44 2125 61 1502 41 44 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2019 91 648 93 46 2132 40 648 41 44 1502 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 497 2006 46 2034 40 2035 41 58 2007 46 2132 40 648 41 2007 46 2010 40 648 44 303 41 2006 46 2011 40 2007 46 2132 40 648 41 44 1502 41 348 2133 40 2006 41 58 2007 46 2010 40 648 44 1503 44 2125 61 1502 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2007 46 2134 40 648 44 2125 61 1502 41 44 1501 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2134 40 648 41 44 1501 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 44 2125 61 1501 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 44 2125 61 1502 41 41 497 2006 46 2034 40 2035 41 58 2007 46 2134 40 648 44 2125 61 1502 41 2007 46 2010 40 648 44 303 44 2125 61 1502 41 2006 46 2011 40 2007 46 2134 40 648 44 2125 61 1502 41 44 1501 41 348 2135 40 2006 41 58 621 2007 46 2010 40 648 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2006 46 2014 40 2019 91 648 93 46 2012 40 648 41 41 2019 91 648 93 46 2010 40 648 44 1503 41 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 2006 46 2011 40 2019 91 648 93 46 2012 40 648 41 44 1503 41 64 2136 40 2137 61 2138 41 348 2139 40 2006 41 58 2140 61 2141 40 2142 41 2143 61 2006 46 2001 46 2012 40 648 41 2143 46 2144 61 304 2145 61 2141 40 2142 41 46 2146 40 2143 41 2006 46 2014 40 2145 41 2147 61 648 348 2148 40 2149 41 58 2150 61 2151 40 2147 41 2150 46 2152 40 648 44 648 41 450 2150 2153 61 2154 40 2148 41 2150 61 2153 40 2143 41 2145 61 2140 46 2146 40 2143 41 2006 46 2155 40 2145 41 2006 46 2011 40 2145 46 2147 44 2147 46 2080 40 41 41 2006 46 2011 40 2145 46 2156 44 2150 46 2156 41 2154 40 409 2149 58 2145 41 40 2143 41 2145 61 2140 46 2146 40 2143 41 2006 46 2155 40 2145 41 2006 46 2011 40 2145 46 2147 44 2147 46 2080 40 41 41 2006 46 2011 40 2145 46 2156 44 2150 46 2156 41 348 2157 40 2006 41 58 621 497 2006 46 2034 40 2158 46 2159 41 58 2007 46 2017 40 648 44 2160 40 41 41 348 2161 40 2006 41 58 497 2006 46 2034 40 2158 46 2159 41 58 2007 46 2010 40 648 44 2160 40 41 41 348 2162 40 2006 41 58 2006 46 2014 40 2007 46 2012 40 648 41 41 2006 46 2011 40 2007 46 2163 40 648 44 1503 41 44 1503 41 2006 46 2011 40 2007 46 2012 40 648 41 44 1503 41 2006 46 2014 40 2007 46 2163 40 648 44 303 41 41 621 2006 46 2014 40 2007 46 2012 40 648 44 648 41 41 348 2164 40 2006 41 58 348 2165 40 41 58 450 648 2006 46 2011 40 2007 46 2163 40 648 44 2165 41 44 648 41 2006 46 2011 40 2007 46 2163 40 648 44 2165 40 41 41 44 648 41 2006 46 2014 40 2007 46 2163 40 648 44 409 58 303 41 41 621 2006 46 2014 40 2007 46 2012 40 648 44 648 41 41 348 2166 40 2006 41 58 2167 61 648 2006 46 2011 40 2007 46 2163 40 648 44 1505 44 2125 61 1502 41 44 1505 41 497 2006 46 2168 40 2004 44 2167 41 58 2007 46 2163 40 648 41 497 2006 46 2168 40 2004 44 2167 41 58 2007 46 2163 40 648 44 2125 61 1501 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1501 41 41 2006 46 2011 40 2007 46 2163 40 648 44 1503 44 2125 61 1501 41 44 1503 41 2006 46 2011 40 2007 46 2163 40 648 44 1505 44 2125 61 1502 41 44 1505 41 2006 46 2014 40 2007 46 2012 40 648 44 2125 61 1502 41 41 348 2169 40 2006 41 58 497 2170 46 2171 40 648 37 40 2172 46 2173 91 648 93 91 648 93 44 648 41 41 311 2174 58 621 621 2174 46 2175 61 302 2006 46 2011 40 2007 46 2163 40 648 44 648 41 44 648 41 
132404,Python,"class GISLookup(Lookup):
    sql_template = None
    transform_func = None
    distance = False
    band_rhs = None
    band_lhs = None

    def __init__(self, lhs, rhs):
        rhs, *self.rhs_params = rhs if isinstance(rhs, (list, tuple)) else [rhs]
        super().__init__(lhs, rhs)
        self.template_params = {}
        self.process_rhs_params()

    def process_rhs_params(self):
        if self.rhs_params:
            # Check if a band index was passed in the query argument.
            if len(self.rhs_params) == (2 if self.lookup_name == 'relate' else 1):
                self.process_band_indices()
            elif len(self.rhs_params) > 1:
                raise ValueError('Tuple too long for lookup %s.' % self.lookup_name)
        elif isinstance(self.lhs, RasterBandTransform):
            self.process_band_indices(only_lhs=True)

    def process_band_indices(self, only_lhs=False):
        """"""
        Extract the lhs band index from the band transform class and the rhs
        band index from the input tuple.
        """"""
        # PostGIS band indices are 1-based, so the band index needs to be
        # increased to be consistent with the GDALRaster band indices.
        if only_lhs:
            self.band_rhs = 1
            self.band_lhs = self.lhs.band_index + 1
            return

        if isinstance(self.lhs, RasterBandTransform):
            self.band_lhs = self.lhs.band_index + 1
        else:
            self.band_lhs = 1

        self.band_rhs, *self.rhs_params = self.rhs_params

    def get_db_prep_lookup(self, value, connection):
        # get_db_prep_lookup is called by process_rhs from super class
        return ('%s', [connection.ops.Adapter(value)])

    def process_rhs(self, compiler, connection):
        if isinstance(self.rhs, Query):
            # If rhs is some Query, don't touch it.
            return super().process_rhs(compiler, connection)
        if isinstance(self.rhs, Expression):
            self.rhs = self.rhs.resolve_expression(compiler.query)
        rhs, rhs_params = super().process_rhs(compiler, connection)
        placeholder = connection.ops.get_geom_placeholder(self.lhs.output_field, self.rhs, compiler)
        return placeholder % rhs, rhs_params

    def get_rhs_op(self, connection, rhs):
        # Unlike BuiltinLookup, the GIS get_rhs_op() implementation should return
        # an object (SpatialOperator) with an as_sql() method to allow for more
        # complex computations (where the lhs part can be mixed in).
        return connection.ops.gis_operators[self.lookup_name]

    def as_sql(self, compiler, connection):
        lhs_sql, lhs_params = self.process_lhs(compiler, connection)
        rhs_sql, rhs_params = self.process_rhs(compiler, connection)
        sql_params = (*lhs_params, *rhs_params)

        template_params = {'lhs': lhs_sql, 'rhs': rhs_sql, 'value': '%s', **self.template_params}
        rhs_op = self.get_rhs_op(connection, rhs_sql)
        return rhs_op.as_sql(connection, self, template_params, sql_params)",1,334 2000 40 2001 41 58 2002 61 303 2003 61 303 2004 61 302 2005 61 303 2006 61 303 348 2007 40 2008 44 2009 44 2010 41 58 2010 44 42 2008 46 2011 61 2010 392 2012 40 2010 44 40 411 44 2013 41 41 360 91 2010 93 463 40 41 46 2007 40 2009 44 2010 41 2008 46 2014 61 123 125 2008 46 2015 40 41 348 2015 40 2008 41 58 392 2008 46 2011 58 621 392 2016 40 2008 46 2011 41 614 40 1502 392 2008 46 2017 614 648 360 1501 41 58 2008 46 2018 40 41 359 2016 40 2008 46 2011 41 62 1501 58 440 2019 40 648 37 2008 46 2017 41 359 2012 40 2008 46 2009 44 2020 41 58 2008 46 2018 40 2021 61 304 41 348 2018 40 2008 44 2021 61 302 41 58 648 621 621 392 2021 58 2008 46 2005 61 1501 2008 46 2006 61 2008 46 2009 46 2022 43 1501 450 392 2012 40 2008 46 2009 44 2020 41 58 2008 46 2006 61 2008 46 2009 46 2022 43 1501 360 58 2008 46 2006 61 1501 2008 46 2005 44 42 2008 46 2011 61 2008 46 2011 348 2023 40 2008 44 2024 44 2025 41 58 621 450 40 648 44 91 2025 46 2026 46 2027 40 2024 41 93 41 348 2028 40 2008 44 2029 44 2025 41 58 392 2012 40 2008 46 2010 44 2030 41 58 621 450 463 40 41 46 2028 40 2029 44 2025 41 392 2012 40 2008 46 2010 44 2031 41 58 2008 46 2010 61 2008 46 2010 46 2032 40 2029 46 2033 41 2010 44 2011 61 463 40 41 46 2028 40 2029 44 2025 41 2034 61 2025 46 2026 46 2035 40 2008 46 2009 46 2036 44 2008 46 2010 44 2029 41 450 2034 37 2010 44 2011 348 2037 40 2008 44 2025 44 2010 41 58 621 621 621 450 2025 46 2026 46 2038 91 2008 46 2017 93 348 2039 40 2008 44 2029 44 2025 41 58 2040 44 2041 61 2008 46 2042 40 2029 44 2025 41 2043 44 2011 61 2008 46 2028 40 2029 44 2025 41 2044 61 40 42 2041 44 42 2011 41 2014 61 123 648 58 2040 44 648 58 2043 44 648 58 648 44 638 2008 46 2014 125 2045 61 2008 46 2037 40 2025 44 2043 41 450 2045 46 2039 40 2025 44 2008 44 2014 44 2044 41 
128595,Python,"class ATNConfig(object):
    __slots__ = (
        'state', 'alt', 'context', 'semanticContext', 'reachesIntoOuterContext',
        'precedenceFilterSuppressed'
    )

    def __init__(self, state:ATNState=None, alt:int=None, context:PredictionContext=None, semantic:SemanticContext=None, config:ATNConfig=None):
        if config is not None:
            if state is None:
                state = config.state
            if alt is None:
                alt = config.alt
            if context is None:
                context = config.context
            if semantic is None:
                semantic = config.semanticContext
        if semantic is None:
            semantic = SemanticContext.NONE
        # The ATN state associated with this configuration#/
        self.state = state
        # What alt (or lexer rule) is predicted by this configuration#/
        self.alt = alt
        # The stack of invoking states leading to the rule/states associated
        #  with this config.  We track only those contexts pushed during
        #  execution of the ATN simulator.
        self.context = context
        self.semanticContext = semantic
        # We cannot execute predicates dependent upon local context unless
        # we know for sure we are in the correct context. Because there is
        # no way to do this efficiently, we simply cannot evaluate
        # dependent predicates unless we are in the rule that initially
        # invokes the ATN simulator.
        #
        # closure() tracks the depth of how far we dip into the
        # outer context: depth &gt; 0.  Note that it may not be totally
        # accurate depth since I don't ever decrement. TODO: make it a boolean then
        self.reachesIntoOuterContext = 0 if config is None else config.reachesIntoOuterContext
        self.precedenceFilterSuppressed = False if config is None else config.precedenceFilterSuppressed

    # An ATN configuration is equal to another if both have
    #  the same state, they predict the same alternative, and
    #  syntactic/semantic contexts are the same.
    #/
    def __eq__(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfig):
            return False
        else:
            return self.state.stateNumber==other.state.stateNumber \
                and self.alt==other.alt \
                and ((self.context is other.context) or (self.context==other.context)) \
                and self.semanticContext==other.semanticContext \
                and self.precedenceFilterSuppressed==other.precedenceFilterSuppressed

    def __hash__(self):
        return hash((self.state.stateNumber, self.alt, self.context, self.semanticContext))

    def hashCodeForConfigSet(self):
        return hash((self.state.stateNumber, self.alt, hash(self.semanticContext)))

    def equalsForConfigSet(self, other):
        if self is other:
            return True
        elif not isinstance(other, ATNConfig):
            return False
        else:
            return self.state.stateNumber==other.state.stateNumber \
                and self.alt==other.alt \
                and self.semanticContext==other.semanticContext

    def __str__(self):
        with StringIO() as buf:
            buf.write('(')
            buf.write(str(self.state))
            buf.write("","")
            buf.write(str(self.alt))
            if self.context is not None:
                buf.write("",["")
                buf.write(str(self.context))
                buf.write(""]"")
            if self.semanticContext is not None and self.semanticContext is not SemanticContext.NONE:
                buf.write("","")
                buf.write(str(self.semanticContext))
            if self.reachesIntoOuterContext>0:
                buf.write("",up="")
                buf.write(str(self.reachesIntoOuterContext))
            buf.write(')')
            return buf.getvalue()",1,334 2000 40 426 41 58 2001 61 40 648 44 648 44 648 44 648 44 648 44 648 41 348 2002 40 2003 44 2004 58 2005 61 303 44 2006 58 404 61 303 44 2007 58 2008 61 303 44 2009 58 2010 61 303 44 2011 58 2000 61 303 41 58 392 2011 407 422 303 58 392 2004 407 303 58 2004 61 2011 46 2004 392 2006 407 303 58 2006 61 2011 46 2006 392 2007 407 303 58 2007 61 2011 46 2007 392 2009 407 303 58 2009 61 2011 46 2012 392 2009 407 303 58 2009 61 2010 46 2013 621 2003 46 2004 61 2004 621 2003 46 2006 61 2006 621 621 621 2003 46 2007 61 2007 2003 46 2012 61 2009 621 621 621 621 621 621 621 621 621 2003 46 2014 61 1500 392 2011 407 303 360 2011 46 2014 2003 46 2015 61 302 392 2011 407 303 360 2011 46 2015 621 621 621 621 348 2016 40 2003 44 2017 41 58 392 2003 407 2017 58 450 304 359 422 2018 40 2017 44 2000 41 58 450 302 360 58 450 2003 46 2004 46 2019 614 2017 46 2004 46 2019 92 308 2003 46 2006 614 2017 46 2006 92 308 40 40 2003 46 2007 407 2017 46 2007 41 428 40 2003 46 2007 614 2017 46 2007 41 41 92 308 2003 46 2012 614 2017 46 2012 92 308 2003 46 2015 614 2017 46 2015 348 2020 40 2003 41 58 450 2021 40 40 2003 46 2004 46 2019 44 2003 46 2006 44 2003 46 2007 44 2003 46 2012 41 41 348 2022 40 2003 41 58 450 2021 40 40 2003 46 2004 46 2019 44 2003 46 2006 44 2021 40 2003 46 2012 41 41 41 348 2023 40 2003 44 2017 41 58 392 2003 407 2017 58 450 304 359 422 2018 40 2017 44 2000 41 58 450 302 360 58 450 2003 46 2004 46 2019 614 2017 46 2004 46 2019 92 308 2003 46 2006 614 2017 46 2006 92 308 2003 46 2012 614 2017 46 2012 348 2024 40 2003 41 58 497 2025 40 41 311 2026 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2004 41 41 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2006 41 41 392 2003 46 2007 407 422 303 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2007 41 41 2026 46 2027 40 648 41 392 2003 46 2012 407 422 303 308 2003 46 2012 407 422 2010 46 2013 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2012 41 41 392 2003 46 2014 62 1500 58 2026 46 2027 40 648 41 2026 46 2027 40 2028 40 2003 46 2014 41 41 2026 46 2027 40 648 41 450 2026 46 2029 40 41 
128609,Python,"class TokenStreamRewriter(object):
    DEFAULT_PROGRAM_NAME = ""default""
    PROGRAM_INIT_SIZE = 100
    MIN_TOKEN_INDEX = 0

    def __init__(self, tokens):
        """"""
        :type  tokens: antlr4.BufferedTokenStream.BufferedTokenStream
        :param tokens:
        :return:
        """"""
        super(TokenStreamRewriter, self).__init__()
        self.tokens = tokens
        self.programs = {self.DEFAULT_PROGRAM_NAME: []}
        self.lastRewriteTokenIndexes = {}

    def getTokenStream(self):
        return self.tokens

    def rollback(self, instruction_index, program_name):
        ins = self.programs.get(program_name, None)
        if ins:
            self.programs[program_name] = ins[self.MIN_TOKEN_INDEX: instruction_index]

    def deleteProgram(self, program_name=DEFAULT_PROGRAM_NAME):
        self.rollback(self.MIN_TOKEN_INDEX, program_name)

    def insertAfterToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertAfter(token.tokenIndex, text, program_name)

    def insertAfter(self, index, text, program_name=DEFAULT_PROGRAM_NAME):
        op = self.InsertAfterOp(self.tokens, index + 1, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def insertBeforeIndex(self, index, text):
        self.insertBefore(self.DEFAULT_PROGRAM_NAME, index, text)

    def insertBeforeToken(self, token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.insertBefore(program_name, token.tokenIndex, text)

    def insertBefore(self, program_name, index, text):
        op = self.InsertBeforeOp(self.tokens, index, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def replaceIndex(self, index, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, index, index, text)

    def replaceRange(self, from_idx, to_idx, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, from_idx, to_idx, text)

    def replaceSingleToken(self, token, text):
        self.replace(self.DEFAULT_PROGRAM_NAME, token.tokenIndex, token.tokenIndex, text)

    def replaceRangeTokens(self, from_token, to_token, text, program_name=DEFAULT_PROGRAM_NAME):
        self.replace(program_name, from_token.tokenIndex, to_token.tokenIndex, text)

    def replace(self, program_name, from_idx, to_idx, text):
        if any((from_idx > to_idx, from_idx < 0, to_idx < 0, to_idx >= len(self.tokens.tokens))):
            raise ValueError(
                'replace: range invalid: {}..{}(size={})'.format(from_idx, to_idx, len(self.tokens.tokens)))
        op = self.ReplaceOp(from_idx, to_idx, self.tokens, text)
        rewrites = self.getProgram(program_name)
        op.instructionIndex = len(rewrites)
        rewrites.append(op)

    def deleteToken(self, token):
        self.delete(self.DEFAULT_PROGRAM_NAME, token, token)

    def deleteIndex(self, index):
        self.delete(self.DEFAULT_PROGRAM_NAME, index, index)

    def delete(self, program_name, from_idx, to_idx):
        if isinstance(from_idx, Token):
            self.replace(program_name, from_idx.tokenIndex, to_idx.tokenIndex, """")
        else:
            self.replace(program_name, from_idx, to_idx, """")

    def lastRewriteTokenIndex(self, program_name=DEFAULT_PROGRAM_NAME):
        return self.lastRewriteTokenIndexes.get(program_name, -1)

    def setLastRewriteTokenIndex(self, program_name, i):
        self.lastRewriteTokenIndexes[program_name] = i

    def getProgram(self, program_name):
        return self.programs.setdefault(program_name, [])

    def getDefaultText(self):
        return self.getText(self.DEFAULT_PROGRAM_NAME, 0, len(self.tokens.tokens) - 1)

    def getText(self, program_name, start, stop):
        """"""
        :return: the text in tokens[start, stop](closed interval)
        """"""
        rewrites = self.programs.get(program_name)

        # ensure start/end are in range
        if stop > len(self.tokens.tokens) - 1:
            stop = len(self.tokens.tokens) - 1
        if start < 0:
            start = 0

        # if no instructions to execute
        if not rewrites: return self.tokens.getText(start, stop)
        buf = StringIO()
        indexToOp = self._reduceToSingleOperationPerIndex(rewrites)
        i = start
        while all((i <= stop, i < len(self.tokens.tokens))):
            op = indexToOp.pop(i, None)
            token = self.tokens.get(i)
            if op is None:
                if token.type != Token.EOF: buf.write(token.text)
                i += 1
            else:
                i = op.execute(buf)

        if stop == len(self.tokens.tokens) - 1:
            for op in indexToOp.values():
                if op.index >= len(self.tokens.tokens) - 1: buf.write(
                    op.text)  # TODO: this check is probably not needed

        return buf.getvalue()

    def _reduceToSingleOperationPerIndex(self, rewrites):
        # Walk replaces
        for i, rop in enumerate(rewrites):
            if any((rop is None, not isinstance(rop, TokenStreamRewriter.ReplaceOp))):
                continue
            # Wipe prior inserts within range
            inserts = [op for op in rewrites[:i] if type(op) is TokenStreamRewriter.InsertBeforeOp]
            for iop in inserts:
                if iop.index == rop.index:
                    rewrites[iop.instructionIndex] = None
                    rop.text = '{}{}'.format(iop.text, rop.text)
                elif all((iop.index > rop.index, iop.index <= rop.last_index)):
                    rewrites[iop.instructionIndex] = None

            # Drop any prior replaces contained within
            prevReplaces = [op for op in rewrites[:i] if type(op) is TokenStreamRewriter.ReplaceOp]
            for prevRop in prevReplaces:
                if all((prevRop.index >= rop.index, prevRop.last_index <= rop.last_index)):
                    rewrites[prevRop.instructionIndex] = None
                    continue
                isDisjoint = any((prevRop.last_index < rop.index, prevRop.index > rop.last_index))
                if all((prevRop.text is None, rop.text is None, not isDisjoint)):
                    rewrites[prevRop.instructionIndex] = None
                    rop.index = min(prevRop.index, rop.index)
                    rop.last_index = min(prevRop.last_index, rop.last_index)
                    print('New rop {}'.format(rop))
                elif (not(isDisjoint)):
                    raise ValueError(""replace op boundaries of {} overlap with previous {}"".format(rop, prevRop))

        # Walk inserts before
        for i, iop in enumerate(rewrites):
            if any((iop is None, not isinstance(iop, TokenStreamRewriter.InsertBeforeOp))):
                continue
            prevInserts = [op for op in rewrites[:i] if isinstance(op, TokenStreamRewriter.InsertBeforeOp)]
            for prev_index, prevIop in enumerate(prevInserts):
                if prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertBeforeOp:
                    iop.text += prevIop.text
                    rewrites[prev_index] = None
                elif prevIop.index == iop.index and type(prevIop) is TokenStreamRewriter.InsertAfterOp:
                    iop.text = prevIop.text + iop.text
                    rewrites[prev_index] = None
            # look for replaces where iop.index is in range; error
            prevReplaces = [op for op in rewrites[:i] if type(op) is TokenStreamRewriter.ReplaceOp]
            for rop in prevReplaces:
                if iop.index == rop.index:
                    rop.text = iop.text + rop.text
                    rewrites[i] = None
                    continue
                if all((iop.index >= rop.index, iop.index <= rop.last_index)):
                    raise ValueError(""insert op {} within boundaries of previous {}"".format(iop, rop))

        reduced = {}
        for i, op in enumerate(rewrites):
            if op is None: continue
            if reduced.get(op.index): raise ValueError('should be only one op per index')
            reduced[op.index] = op

        return reduced

    class RewriteOperation(object):

        def __init__(self, tokens, index, text=""""):
            """"""
            :type tokens: CommonTokenStream
            :param tokens:
            :param index:
            :param text:
            :return:
            """"""
            self.tokens = tokens
            self.index = index
            self.text = text
            self.instructionIndex = 0

        def execute(self, buf):
            """"""
            :type buf: StringIO.StringIO
            :param buf:
            :return:
            """"""
            return self.index

        def __str__(self):
            return '<{}@{}:""{}"">'.format(self.__class__.__name__, self.tokens.get(self.index), self.text)

    class InsertBeforeOp(RewriteOperation):

        def __init__(self, tokens, index, text=""""):
            super(TokenStreamRewriter.InsertBeforeOp, self).__init__(tokens, index, text)

        def execute(self, buf):
            buf.write(self.text)
            if self.tokens.get(self.index).type != Token.EOF:
                buf.write(self.tokens.get(self.index).text)
            return self.index + 1

    class InsertAfterOp(InsertBeforeOp):
        pass

    class ReplaceOp(RewriteOperation):

        def __init__(self, from_idx, to_idx, tokens, text):
            super(TokenStreamRewriter.ReplaceOp, self).__init__(tokens, from_idx, text)
            self.last_index = to_idx

        def execute(self, buf):
            if self.text:
                buf.write(self.text)
            return self.last_index + 1

        def __str__(self):
            if self.text:
                return '<ReplaceOp@{}..{}:""{}"">'.format(self.tokens.get(self.index), self.tokens.get(self.last_index),
                                                        self.text)",1,334 2000 40 426 41 58 2001 61 648 2002 61 1503 2003 61 1500 348 2004 40 2005 44 2006 41 58 648 463 40 2000 44 2005 41 46 2004 40 41 2005 46 2006 61 2006 2005 46 2007 61 123 2005 46 2001 58 91 93 125 2005 46 2008 61 123 125 348 2009 40 2005 41 58 450 2005 46 2006 348 2010 40 2005 44 2011 44 2012 41 58 2013 61 2005 46 2007 46 2014 40 2012 44 303 41 392 2013 58 2005 46 2007 91 2012 93 61 2013 91 2005 46 2003 58 2011 93 348 2015 40 2005 44 2012 61 2001 41 58 2005 46 2010 40 2005 46 2003 44 2012 41 348 2016 40 2005 44 2017 44 2018 44 2012 61 2001 41 58 2005 46 2019 40 2017 46 2020 44 2018 44 2012 41 348 2019 40 2005 44 2021 44 2018 44 2012 61 2001 41 58 2022 61 2005 46 2023 40 2005 46 2006 44 2021 43 1501 44 2018 41 2024 61 2005 46 2025 40 2012 41 2022 46 2026 61 2027 40 2024 41 2024 46 2028 40 2022 41 348 2029 40 2005 44 2021 44 2018 41 58 2005 46 2030 40 2005 46 2001 44 2021 44 2018 41 348 2031 40 2005 44 2017 44 2018 44 2012 61 2001 41 58 2005 46 2030 40 2012 44 2017 46 2020 44 2018 41 348 2030 40 2005 44 2012 44 2021 44 2018 41 58 2022 61 2005 46 2032 40 2005 46 2006 44 2021 44 2018 41 2024 61 2005 46 2025 40 2012 41 2022 46 2026 61 2027 40 2024 41 2024 46 2028 40 2022 41 348 2033 40 2005 44 2021 44 2018 41 58 2005 46 2034 40 2005 46 2001 44 2021 44 2021 44 2018 41 348 2035 40 2005 44 2036 44 2037 44 2018 41 58 2005 46 2034 40 2005 46 2001 44 2036 44 2037 44 2018 41 348 2038 40 2005 44 2017 44 2018 41 58 2005 46 2034 40 2005 46 2001 44 2017 46 2020 44 2017 46 2020 44 2018 41 348 2039 40 2005 44 2040 44 2041 44 2018 44 2012 61 2001 41 58 2005 46 2034 40 2012 44 2040 46 2020 44 2041 46 2020 44 2018 41 348 2034 40 2005 44 2012 44 2036 44 2037 44 2018 41 58 392 2042 40 40 2036 62 2037 44 2036 60 1500 44 2037 60 1500 44 2037 615 2027 40 2005 46 2006 46 2006 41 41 41 58 440 2043 40 648 46 2044 40 2036 44 2037 44 2027 40 2005 46 2006 46 2006 41 41 41 2022 61 2005 46 2045 40 2036 44 2037 44 2005 46 2006 44 2018 41 2024 61 2005 46 2025 40 2012 41 2022 46 2026 61 2027 40 2024 41 2024 46 2028 40 2022 41 348 2046 40 2005 44 2017 41 58 2005 46 353 40 2005 46 2001 44 2017 44 2017 41 348 2047 40 2005 44 2021 41 58 2005 46 353 40 2005 46 2001 44 2021 44 2021 41 348 353 40 2005 44 2012 44 2036 44 2037 41 58 392 2048 40 2036 44 2049 41 58 2005 46 2034 40 2012 44 2036 46 2020 44 2037 46 2020 44 648 41 360 58 2005 46 2034 40 2012 44 2036 44 2037 44 648 41 348 2050 40 2005 44 2012 61 2001 41 58 450 2005 46 2008 46 2014 40 2012 44 45 1501 41 348 2051 40 2005 44 2012 44 2052 41 58 2005 46 2008 91 2012 93 61 2052 348 2025 40 2005 44 2012 41 58 450 2005 46 2007 46 2053 40 2012 44 91 93 41 348 2054 40 2005 41 58 450 2005 46 2055 40 2005 46 2001 44 1500 44 2027 40 2005 46 2006 46 2006 41 45 1501 41 348 2055 40 2005 44 2012 44 2056 44 2057 41 58 648 2024 61 2005 46 2007 46 2014 40 2012 41 621 392 2057 62 2027 40 2005 46 2006 46 2006 41 45 1501 58 2057 61 2027 40 2005 46 2006 46 2006 41 45 1501 392 2056 60 1500 58 2056 61 1500 621 392 422 2024 58 450 2005 46 2006 46 2055 40 2056 44 2057 41 2058 61 2059 40 41 2060 61 2005 46 2061 40 2024 41 2052 61 2056 496 2062 40 40 2052 620 2057 44 2052 60 2027 40 2005 46 2006 46 2006 41 41 41 58 2022 61 2060 46 2063 40 2052 44 303 41 2017 61 2005 46 2006 46 2014 40 2052 41 392 2022 407 303 58 392 2017 46 2064 631 2049 46 2065 58 2058 46 2066 40 2017 46 2018 41 2052 636 1501 360 58 2052 61 2022 46 2067 40 2058 41 392 2057 614 2027 40 2005 46 2006 46 2006 41 45 1501 58 385 2022 398 2060 46 2068 40 41 58 392 2022 46 2021 615 2027 40 2005 46 2006 46 2006 41 45 1501 58 2058 46 2066 40 2022 46 2018 41 621 450 2058 46 2069 40 41 348 2061 40 2005 44 2024 41 58 621 385 2052 44 2070 398 2071 40 2024 41 58 392 2042 40 40 2070 407 303 44 422 2048 40 2070 44 2000 46 2045 41 41 41 58 344 621 2072 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2064 40 2022 41 407 2000 46 2032 93 385 2073 398 2072 58 392 2073 46 2021 614 2070 46 2021 58 2024 91 2073 46 2026 93 61 303 2070 46 2018 61 648 46 2044 40 2073 46 2018 44 2070 46 2018 41 359 2062 40 40 2073 46 2021 62 2070 46 2021 44 2073 46 2021 620 2070 46 2074 41 41 58 2024 91 2073 46 2026 93 61 303 621 2075 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2064 40 2022 41 407 2000 46 2045 93 385 2076 398 2075 58 392 2062 40 40 2076 46 2021 615 2070 46 2021 44 2076 46 2074 620 2070 46 2074 41 41 58 2024 91 2076 46 2026 93 61 303 344 2077 61 2042 40 40 2076 46 2074 60 2070 46 2021 44 2076 46 2021 62 2070 46 2074 41 41 392 2062 40 40 2076 46 2018 407 303 44 2070 46 2018 407 303 44 422 2077 41 41 58 2024 91 2076 46 2026 93 61 303 2070 46 2021 61 2078 40 2076 46 2021 44 2070 46 2021 41 2070 46 2074 61 2078 40 2076 46 2074 44 2070 46 2074 41 436 40 648 46 2044 40 2070 41 41 359 40 422 40 2077 41 41 58 440 2043 40 648 46 2044 40 2070 44 2076 41 41 621 385 2052 44 2073 398 2071 40 2024 41 58 392 2042 40 40 2073 407 303 44 422 2048 40 2073 44 2000 46 2032 41 41 41 58 344 2079 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2048 40 2022 44 2000 46 2032 41 93 385 2080 44 2081 398 2071 40 2079 41 58 392 2081 46 2021 614 2073 46 2021 308 2064 40 2081 41 407 2000 46 2032 58 2073 46 2018 636 2081 46 2018 2024 91 2080 93 61 303 359 2081 46 2021 614 2073 46 2021 308 2064 40 2081 41 407 2000 46 2023 58 2073 46 2018 61 2081 46 2018 43 2073 46 2018 2024 91 2080 93 61 303 621 2075 61 91 2022 385 2022 398 2024 91 58 2052 93 392 2064 40 2022 41 407 2000 46 2045 93 385 2070 398 2075 58 392 2073 46 2021 614 2070 46 2021 58 2070 46 2018 61 2073 46 2018 43 2070 46 2018 2024 91 2052 93 61 303 344 392 2062 40 40 2073 46 2021 615 2070 46 2021 44 2073 46 2021 620 2070 46 2074 41 41 58 440 2043 40 648 46 2044 40 2073 44 2070 41 41 2082 61 123 125 385 2052 44 2022 398 2071 40 2024 41 58 392 2022 407 303 58 344 392 2082 46 2014 40 2022 46 2021 41 58 440 2043 40 648 41 2082 91 2022 46 2021 93 61 2022 450 2082 334 2083 40 426 41 58 348 2004 40 2005 44 2006 44 2021 44 2018 61 648 41 58 648 2005 46 2006 61 2006 2005 46 2021 61 2021 2005 46 2018 61 2018 2005 46 2026 61 1500 348 2067 40 2005 44 2058 41 58 648 450 2005 46 2021 348 2084 40 2005 41 58 450 648 46 2044 40 2005 46 2085 46 2086 44 2005 46 2006 46 2014 40 2005 46 2021 41 44 2005 46 2018 41 334 2032 40 2083 41 58 348 2004 40 2005 44 2006 44 2021 44 2018 61 648 41 58 463 40 2000 46 2032 44 2005 41 46 2004 40 2006 44 2021 44 2018 41 348 2067 40 2005 44 2058 41 58 2058 46 2066 40 2005 46 2018 41 392 2005 46 2006 46 2014 40 2005 46 2021 41 46 2064 631 2049 46 2065 58 2058 46 2066 40 2005 46 2006 46 2014 40 2005 46 2021 41 46 2018 41 450 2005 46 2021 43 1501 334 2023 40 2032 41 58 434 334 2045 40 2083 41 58 348 2004 40 2005 44 2036 44 2037 44 2006 44 2018 41 58 463 40 2000 46 2045 44 2005 41 46 2004 40 2006 44 2036 44 2018 41 2005 46 2074 61 2037 348 2067 40 2005 44 2058 41 58 392 2005 46 2018 58 2058 46 2066 40 2005 46 2018 41 450 2005 46 2074 43 1501 348 2084 40 2005 41 58 392 2005 46 2018 58 450 648 46 2044 40 2005 46 2006 46 2014 40 2005 46 2021 41 44 2005 46 2006 46 2014 40 2005 46 2074 41 44 2005 46 2018 41 
131957,Python,"class BaseDatabaseSchemaEditor:
    """"""
    This class and its subclasses are responsible for emitting schema-changing
    statements to the databases - model creation/removal/alteration, field
    renaming, index fiddling, and so on.
    """"""

    # Overrideable SQL templates
    sql_create_table = ""CREATE TABLE %(table)s (%(definition)s)""
    sql_rename_table = ""ALTER TABLE %(old_table)s RENAME TO %(new_table)s""
    sql_retablespace_table = ""ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s""
    sql_delete_table = ""DROP TABLE %(table)s CASCADE""

    sql_create_column = ""ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s""
    sql_alter_column = ""ALTER TABLE %(table)s %(changes)s""
    sql_alter_column_type = ""ALTER COLUMN %(column)s TYPE %(type)s""
    sql_alter_column_null = ""ALTER COLUMN %(column)s DROP NOT NULL""
    sql_alter_column_not_null = ""ALTER COLUMN %(column)s SET NOT NULL""
    sql_alter_column_default = ""ALTER COLUMN %(column)s SET DEFAULT %(default)s""
    sql_alter_column_no_default = ""ALTER COLUMN %(column)s DROP DEFAULT""
    sql_alter_column_no_default_null = sql_alter_column_no_default
    sql_alter_column_collate = ""ALTER COLUMN %(column)s TYPE %(type)s%(collation)s""
    sql_delete_column = ""ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE""
    sql_rename_column = ""ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s""
    sql_update_with_default = ""UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL""

    sql_unique_constraint = ""UNIQUE (%(columns)s)%(deferrable)s""
    sql_check_constraint = ""CHECK (%(check)s)""
    sql_delete_constraint = ""ALTER TABLE %(table)s DROP CONSTRAINT %(name)s""
    sql_constraint = ""CONSTRAINT %(name)s %(constraint)s""

    sql_create_check = ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)""
    sql_delete_check = sql_delete_constraint

    sql_create_unique = ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)%(deferrable)s""
    sql_delete_unique = sql_delete_constraint

    sql_create_fk = (
        ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) ""
        ""REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s""
    )
    sql_create_inline_fk = None
    sql_create_column_inline_fk = None
    sql_delete_fk = sql_delete_constraint

    sql_create_index = ""CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(extra)s%(condition)s""
    sql_create_unique_index = ""CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(include)s%(condition)s""
    sql_delete_index = ""DROP INDEX %(name)s""

    sql_create_pk = ""ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)""
    sql_delete_pk = sql_delete_constraint

    sql_delete_procedure = 'DROP PROCEDURE %(procedure)s'

    def __init__(self, connection, collect_sql=False, atomic=True):
        self.connection = connection
        self.collect_sql = collect_sql
        if self.collect_sql:
            self.collected_sql = []
        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic

    # State-managing methods

    def __enter__(self):
        self.deferred_sql = []
        if self.atomic_migration:
            self.atomic = atomic(self.connection.alias)
            self.atomic.__enter__()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            for sql in self.deferred_sql:
                self.execute(sql)
        if self.atomic_migration:
            self.atomic.__exit__(exc_type, exc_value, traceback)

    # Core utility functions

    def execute(self, sql, params=()):
        """"""Execute the given SQL statement, with optional parameters.""""""
        # Don't perform the transactional DDL check if SQL is being collected
        # as it's not going to be executed anyway.
        if not self.collect_sql and self.connection.in_atomic_block and not self.connection.features.can_rollback_ddl:
            raise TransactionManagementError(
                ""Executing DDL statements while in a transaction on databases ""
                ""that can't perform a rollback is prohibited.""
            )
        # Account for non-string statement objects.
        sql = str(sql)
        # Log the command we're running, then run it
        logger.debug(""%s; (params %r)"", sql, params, extra={'params': params, 'sql': sql})
        if self.collect_sql:
            ending = """" if sql.rstrip().endswith("";"") else "";""
            if params is not None:
                self.collected_sql.append((sql % tuple(map(self.quote_value, params))) + ending)
            else:
                self.collected_sql.append(sql + ending)
        else:
            with self.connection.cursor() as cursor:
                cursor.execute(sql, params)

    def quote_name(self, name):
        return self.connection.ops.quote_name(name)

    def table_sql(self, model):
        """"""Take a model and return its table definition.""""""
        # Add any unique_togethers (always deferred, as some fields might be
        # created afterward, like geometry fields with some backends).
        for field_names in model._meta.unique_together:
            fields = [model._meta.get_field(field) for field in field_names]
            self.deferred_sql.append(self._create_unique_sql(model, fields))
        # Create column SQL, add FK deferreds if needed.
        column_sqls = []
        params = []
        for field in model._meta.local_fields:
            # SQL.
            definition, extra_params = self.column_sql(model, field)
            if definition is None:
                continue
            # Check constraints can go on the column SQL here.
            db_params = field.db_parameters(connection=self.connection)
            if db_params['check']:
                definition += ' ' + self.sql_check_constraint % db_params
            # Autoincrement SQL (for backends with inline variant).
            col_type_suffix = field.db_type_suffix(connection=self.connection)
            if col_type_suffix:
                definition += ' %s' % col_type_suffix
            params.extend(extra_params)
            # FK.
            if field.remote_field and field.db_constraint:
                to_table = field.remote_field.model._meta.db_table
                to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
                if self.sql_create_inline_fk:
                    definition += ' ' + self.sql_create_inline_fk % {
                        'to_table': self.quote_name(to_table),
                        'to_column': self.quote_name(to_column),
                    }
                elif self.connection.features.supports_foreign_keys:
                    self.deferred_sql.append(self._create_fk_sql(model, field, '_fk_%(to_table)s_%(to_column)s'))
            # Add the SQL to our big list.
            column_sqls.append('%s %s' % (
                self.quote_name(field.column),
                definition,
            ))
            # Autoincrement SQL (for backends with post table definition
            # variant).
            if field.get_internal_type() in ('AutoField', 'BigAutoField', 'SmallAutoField'):
                autoinc_sql = self.connection.ops.autoinc_sql(model._meta.db_table, field.column)
                if autoinc_sql:
                    self.deferred_sql.extend(autoinc_sql)
        constraints = [constraint.constraint_sql(model, self) for constraint in model._meta.constraints]
        sql = self.sql_create_table % {
            'table': self.quote_name(model._meta.db_table),
            'definition': ', '.join(constraint for constraint in (*column_sqls, *constraints) if constraint),
        }
        if model._meta.db_tablespace:
            tablespace_sql = self.connection.ops.tablespace_sql(model._meta.db_tablespace)
            if tablespace_sql:
                sql += ' ' + tablespace_sql
        return sql, params

    # Field <-> database mapping functions

    def _iter_column_sql(self, column_db_type, params, model, field, include_default):
        yield column_db_type
        collation = getattr(field, 'db_collation', None)
        if collation:
            yield self._collate_sql(collation)
        # Work out nullability.
        null = field.null
        # Include a default value, if requested.
        include_default = (
            include_default and
            not self.skip_default(field) and
            # Don't include a default value if it's a nullable field and the
            # default cannot be dropped in the ALTER COLUMN statement (e.g.
            # MySQL longtext and longblob).
            not (null and self.skip_default_on_alter(field))
        )
        if include_default:
            default_value = self.effective_default(field)
            if default_value is not None:
                column_default = 'DEFAULT ' + self._column_default_sql(field)
                if self.connection.features.requires_literal_defaults:
                    # Some databases can't take defaults as a parameter (Oracle).
                    # If this is the case, the individual schema backend should
                    # implement prepare_default().
                    yield column_default % self.prepare_default(default_value)
                else:
                    yield column_default
                    params.append(default_value)
        # Oracle treats the empty string ('') as null, so coerce the null
        # option whenever '' is a possible value.
        if (field.empty_strings_allowed and not field.primary_key and
                self.connection.features.interprets_empty_strings_as_nulls):
            null = True
        if not null:
            yield 'NOT NULL'
        elif not self.connection.features.implied_column_null:
            yield 'NULL'
        if field.primary_key:
            yield 'PRIMARY KEY'
        elif field.unique:
            yield 'UNIQUE'
        # Optionally add the tablespace if it's an implicitly indexed column.
        tablespace = field.db_tablespace or model._meta.db_tablespace
        if tablespace and self.connection.features.supports_tablespaces and field.unique:
            yield self.connection.ops.tablespace_sql(tablespace, inline=True)

    def column_sql(self, model, field, include_default=False):
        """"""
        Return the column definition for a field. The field must already have
        had set_attributes_from_name() called.
        """"""
        # Get the column's type and use that as the basis of the SQL.
        db_params = field.db_parameters(connection=self.connection)
        column_db_type = db_params['type']
        # Check for fields that aren't actually columns (e.g. M2M).
        if column_db_type is None:
            return None, None
        params = []
        return ' '.join(
            # This appends to the params being returned.
            self._iter_column_sql(column_db_type, params, model, field, include_default)
        ), params

    def skip_default(self, field):
        """"""
        Some backends don't accept default values for certain columns types
        (i.e. MySQL longtext and longblob).
        """"""
        return False

    def skip_default_on_alter(self, field):
        """"""
        Some backends don't accept default values for certain columns types
        (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.
        """"""
        return False

    def prepare_default(self, value):
        """"""
        Only used for backends which have requires_literal_defaults feature
        """"""
        raise NotImplementedError(
            'subclasses of BaseDatabaseSchemaEditor for backends which have '
            'requires_literal_defaults must provide a prepare_default() method'
        )

    def _column_default_sql(self, field):
        """"""
        Return the SQL to use in a DEFAULT clause. The resulting string should
        contain a '%s' placeholder for a default value.
        """"""
        return '%s'

    @staticmethod
    def _effective_default(field):
        # This method allows testing its logic without a connection.
        if field.has_default():
            default = field.get_default()
        elif not field.null and field.blank and field.empty_strings_allowed:
            if field.get_internal_type() == ""BinaryField"":
                default = b''
            else:
                default = ''
        elif getattr(field, 'auto_now', False) or getattr(field, 'auto_now_add', False):
            internal_type = field.get_internal_type()
            if internal_type == 'DateTimeField':
                default = timezone.now()
            else:
                default = datetime.now()
                if internal_type == 'DateField':
                    default = default.date()
                elif internal_type == 'TimeField':
                    default = default.time()
        else:
            default = None
        return default

    def effective_default(self, field):
        """"""Return a field's effective database default value.""""""
        return field.get_db_prep_save(self._effective_default(field), self.connection)

    def quote_value(self, value):
        """"""
        Return a quoted version of the value so it's safe to use in an SQL
        string. This is not safe against injection from user code; it is
        intended only for use in making SQL scripts or preparing default values
        for particularly tricky backends (defaults are not user-defined, though,
        so this is safe).
        """"""
        raise NotImplementedError()

    # Actions

    def create_model(self, model):
        """"""
        Create a table and any accompanying indexes or unique constraints for
        the given `model`.
        """"""
        sql, params = self.table_sql(model)
        # Prevent using [] as params, in the case a literal '%' is used in the definition
        self.execute(sql, params or None)

        # Add any field index and index_together's (deferred as SQLite _remake_table needs it)
        self.deferred_sql.extend(self._model_indexes_sql(model))

        # Make M2M tables
        for field in model._meta.local_many_to_many:
            if field.remote_field.through._meta.auto_created:
                self.create_model(field.remote_field.through)

    def delete_model(self, model):
        """"""Delete a model from the database.""""""
        # Handle auto-created intermediary models
        for field in model._meta.local_many_to_many:
            if field.remote_field.through._meta.auto_created:
                self.delete_model(field.remote_field.through)

        # Delete the table
        self.execute(self.sql_delete_table % {
            ""table"": self.quote_name(model._meta.db_table),
        })
        # Remove all deferred statements referencing the deleted table.
        for sql in list(self.deferred_sql):
            if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
                self.deferred_sql.remove(sql)

    def add_index(self, model, index):
        """"""Add an index on a model.""""""
        if (
            index.contains_expressions and
            not self.connection.features.supports_expression_indexes
        ):
            return None
        # Index.create_sql returns interpolated SQL which makes params=None a
        # necessity to avoid escaping attempts on execution.
        self.execute(index.create_sql(model, self), params=None)

    def remove_index(self, model, index):
        """"""Remove an index from a model.""""""
        if (
            index.contains_expressions and
            not self.connection.features.supports_expression_indexes
        ):
            return None
        self.execute(index.remove_sql(model, self))

    def add_constraint(self, model, constraint):
        """"""Add a constraint to a model.""""""
        sql = constraint.create_sql(model, self)
        if sql:
            # Constraint.create_sql returns interpolated SQL which makes
            # params=None a necessity to avoid escaping attempts on execution.
            self.execute(sql, params=None)

    def remove_constraint(self, model, constraint):
        """"""Remove a constraint from a model.""""""
        sql = constraint.remove_sql(model, self)
        if sql:
            self.execute(sql)

    def alter_unique_together(self, model, old_unique_together, new_unique_together):
        """"""
        Deal with a model changing its unique_together. The input
        unique_togethers must be doubly-nested, not the single-nested
        [""foo"", ""bar""] format.
        """"""
        olds = {tuple(fields) for fields in old_unique_together}
        news = {tuple(fields) for fields in new_unique_together}
        # Deleted uniques
        for fields in olds.difference(news):
            self._delete_composed_index(model, fields, {'unique': True}, self.sql_delete_unique)
        # Created uniques
        for field_names in news.difference(olds):
            fields = [model._meta.get_field(field) for field in field_names]
            self.execute(self._create_unique_sql(model, fields))

    def alter_index_together(self, model, old_index_together, new_index_together):
        """"""
        Deal with a model changing its index_together. The input
        index_togethers must be doubly-nested, not the single-nested
        [""foo"", ""bar""] format.
        """"""
        olds = {tuple(fields) for fields in old_index_together}
        news = {tuple(fields) for fields in new_index_together}
        # Deleted indexes
        for fields in olds.difference(news):
            self._delete_composed_index(
                model,
                fields,
                {'index': True, 'unique': False},
                self.sql_delete_index,
            )
        # Created indexes
        for field_names in news.difference(olds):
            fields = [model._meta.get_field(field) for field in field_names]
            self.execute(self._create_index_sql(model, fields=fields, suffix='_idx'))

    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
        meta_index_names = {constraint.name for constraint in model._meta.indexes}
        columns = [model._meta.get_field(field).column for field in fields]
        constraint_names = self._constraint_names(
            model, columns, exclude=meta_constraint_names | meta_index_names,
            **constraint_kwargs
        )
        if len(constraint_names) != 1:
            raise ValueError(""Found wrong number (%s) of constraints for %s(%s)"" % (
                len(constraint_names),
                model._meta.db_table,
                "", "".join(columns),
            ))
        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))

    def alter_db_table(self, model, old_db_table, new_db_table):
        """"""Rename the table a model points to.""""""
        if (old_db_table == new_db_table or
            (self.connection.features.ignores_table_name_case and
                old_db_table.lower() == new_db_table.lower())):
            return
        self.execute(self.sql_rename_table % {
            ""old_table"": self.quote_name(old_db_table),
            ""new_table"": self.quote_name(new_db_table),
        })
        # Rename all references to the old table name.
        for sql in self.deferred_sql:
            if isinstance(sql, Statement):
                sql.rename_table_references(old_db_table, new_db_table)

    def alter_db_tablespace(self, model, old_db_tablespace, new_db_tablespace):
        """"""Move a model's table between tablespaces.""""""
        self.execute(self.sql_retablespace_table % {
            ""table"": self.quote_name(model._meta.db_table),
            ""old_tablespace"": self.quote_name(old_db_tablespace),
            ""new_tablespace"": self.quote_name(new_db_tablespace),
        })

    def add_field(self, model, field):
        """"""
        Create a field on a model. Usually involves adding a column, but may
        involve adding a table instead (for M2M fields).
        """"""
        # Special-case implicit M2M tables
        if field.many_to_many and field.remote_field.through._meta.auto_created:
            return self.create_model(field.remote_field.through)
        # Get the column's definition
        definition, params = self.column_sql(model, field, include_default=True)
        # It might not actually have a column behind it
        if definition is None:
            return
        # Check constraints can go on the column SQL here
        db_params = field.db_parameters(connection=self.connection)
        if db_params['check']:
            definition += "" "" + self.sql_check_constraint % db_params
        if field.remote_field and self.connection.features.supports_foreign_keys and field.db_constraint:
            constraint_suffix = '_fk_%(to_table)s_%(to_column)s'
            # Add FK constraint inline, if supported.
            if self.sql_create_column_inline_fk:
                to_table = field.remote_field.model._meta.db_table
                to_column = field.remote_field.model._meta.get_field(field.remote_field.field_name).column
                namespace, _ = split_identifier(model._meta.db_table)
                definition += "" "" + self.sql_create_column_inline_fk % {
                    'name': self._fk_constraint_name(model, field, constraint_suffix),
                    'namespace': '%s.' % self.quote_name(namespace) if namespace else '',
                    'column': self.quote_name(field.column),
                    'to_table': self.quote_name(to_table),
                    'to_column': self.quote_name(to_column),
                    'deferrable': self.connection.ops.deferrable_sql()
                }
            # Otherwise, add FK constraints later.
            else:
                self.deferred_sql.append(self._create_fk_sql(model, field, constraint_suffix))
        # Build the SQL and run it
        sql = self.sql_create_column % {
            ""table"": self.quote_name(model._meta.db_table),
            ""column"": self.quote_name(field.column),
            ""definition"": definition,
        }
        self.execute(sql, params)
        # Drop the default if we need to
        # (Django usually does not use in-database defaults)
        if not self.skip_default_on_alter(field) and self.effective_default(field) is not None:
            changes_sql, params = self._alter_column_default_sql(model, None, field, drop=True)
            sql = self.sql_alter_column % {
                ""table"": self.quote_name(model._meta.db_table),
                ""changes"": changes_sql,
            }
            self.execute(sql, params)
        # Add an index, if required
        self.deferred_sql.extend(self._field_indexes_sql(model, field))
        # Reset connection if required
        if self.connection.features.connection_persists_old_columns:
            self.connection.close()

    def remove_field(self, model, field):
        """"""
        Remove a field from a model. Usually involves deleting a column,
        but for M2Ms may involve deleting a table.
        """"""
        # Special-case implicit M2M tables
        if field.many_to_many and field.remote_field.through._meta.auto_created:
            return self.delete_model(field.remote_field.through)
        # It might not actually have a column behind it
        if field.db_parameters(connection=self.connection)['type'] is None:
            return
        # Drop any FK constraints, MySQL requires explicit deletion
        if field.remote_field:
            fk_names = self._constraint_names(model, [field.column], foreign_key=True)
            for fk_name in fk_names:
                self.execute(self._delete_fk_sql(model, fk_name))
        # Delete the column
        sql = self.sql_delete_column % {
            ""table"": self.quote_name(model._meta.db_table),
            ""column"": self.quote_name(field.column),
        }
        self.execute(sql)
        # Reset connection if required
        if self.connection.features.connection_persists_old_columns:
            self.connection.close()
        # Remove all deferred statements referencing the deleted column.
        for sql in list(self.deferred_sql):
            if isinstance(sql, Statement) and sql.references_column(model._meta.db_table, field.column):
                self.deferred_sql.remove(sql)

    def alter_field(self, model, old_field, new_field, strict=False):
        """"""
        Allow a field's type, uniqueness, nullability, default, column,
        constraints, etc. to be modified.
        `old_field` is required to compute the necessary changes.
        If `strict` is True, raise errors if the old column does not match
        `old_field` precisely.
        """"""
        if not self._field_should_be_altered(old_field, new_field):
            return
        # Ensure this field is even column-based
        old_db_params = old_field.db_parameters(connection=self.connection)
        old_type = old_db_params['type']
        new_db_params = new_field.db_parameters(connection=self.connection)
        new_type = new_db_params['type']
        if ((old_type is None and old_field.remote_field is None) or
                (new_type is None and new_field.remote_field is None)):
            raise ValueError(
                ""Cannot alter field %s into %s - they do not properly define ""
                ""db_type (are you using a badly-written custom field?)"" %
                (old_field, new_field),
            )
        elif old_type is None and new_type is None and (
                old_field.remote_field.through and new_field.remote_field.through and
                old_field.remote_field.through._meta.auto_created and
                new_field.remote_field.through._meta.auto_created):
            return self._alter_many_to_many(model, old_field, new_field, strict)
        elif old_type is None and new_type is None and (
                old_field.remote_field.through and new_field.remote_field.through and
                not old_field.remote_field.through._meta.auto_created and
                not new_field.remote_field.through._meta.auto_created):
            # Both sides have through models; this is a no-op.
            return
        elif old_type is None or new_type is None:
            raise ValueError(
                ""Cannot alter field %s into %s - they are not compatible types ""
                ""(you cannot alter to or from M2M fields, or add or remove ""
                ""through= on M2M fields)"" % (old_field, new_field)
            )

        self._alter_field(model, old_field, new_field, old_type, new_type,
                          old_db_params, new_db_params, strict)

    def _alter_field(self, model, old_field, new_field, old_type, new_type,
                     old_db_params, new_db_params, strict=False):
        """"""Perform a ""physical"" (non-ManyToMany) field update.""""""
        # Drop any FK constraints, we'll remake them later
        fks_dropped = set()
        if (
            self.connection.features.supports_foreign_keys and
            old_field.remote_field and
            old_field.db_constraint
        ):
            fk_names = self._constraint_names(model, [old_field.column], foreign_key=True)
            if strict and len(fk_names) != 1:
                raise ValueError(""Found wrong number (%s) of foreign key constraints for %s.%s"" % (
                    len(fk_names),
                    model._meta.db_table,
                    old_field.column,
                ))
            for fk_name in fk_names:
                fks_dropped.add((old_field.column,))
                self.execute(self._delete_fk_sql(model, fk_name))
        # Has unique been removed?
        if old_field.unique and (not new_field.unique or self._field_became_primary_key(old_field, new_field)):
            # Find the unique constraint for this field
            meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
            constraint_names = self._constraint_names(
                model, [old_field.column], unique=True, primary_key=False,
                exclude=meta_constraint_names,
            )
            if strict and len(constraint_names) != 1:
                raise ValueError(""Found wrong number (%s) of unique constraints for %s.%s"" % (
                    len(constraint_names),
                    model._meta.db_table,
                    old_field.column,
                ))
            for constraint_name in constraint_names:
                self.execute(self._delete_unique_sql(model, constraint_name))
        # Drop incoming FK constraints if the field is a primary key or unique,
        # which might be a to_field target, and things are going to change.
        drop_foreign_keys = (
            self.connection.features.supports_foreign_keys and (
                (old_field.primary_key and new_field.primary_key) or
                (old_field.unique and new_field.unique)
            ) and old_type != new_type
        )
        if drop_foreign_keys:
            # '_meta.related_field' also contains M2M reverse fields, these
            # will be filtered out
            for _old_rel, new_rel in _related_non_m2m_objects(old_field, new_field):
                rel_fk_names = self._constraint_names(
                    new_rel.related_model, [new_rel.field.column], foreign_key=True
                )
                for fk_name in rel_fk_names:
                    self.execute(self._delete_fk_sql(new_rel.related_model, fk_name))
        # Removed an index? (no strict check, as multiple indexes are possible)
        # Remove indexes if db_index switched to False or a unique constraint
        # will now be used in lieu of an index. The following lines from the
        # truth table show all True cases; the rest are False:
        #
        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
        # ------------------------------------------------------------------------------
        # True               | False            | False              | False
        # True               | False            | False              | True
        # True               | False            | True               | True
        if old_field.db_index and not old_field.unique and (not new_field.db_index or new_field.unique):
            # Find the index for this field
            meta_index_names = {index.name for index in model._meta.indexes}
            # Retrieve only BTREE indexes since this is what's created with
            # db_index=True.
            index_names = self._constraint_names(
                model, [old_field.column], index=True, type_=Index.suffix,
                exclude=meta_index_names,
            )
            for index_name in index_names:
                # The only way to check if an index was created with
                # db_index=True or with Index(['field'], name='foo')
                # is to look at its name (refs #28053).
                self.execute(self._delete_index_sql(model, index_name))
        # Change check constraints?
        if old_db_params['check'] != new_db_params['check'] and old_db_params['check']:
            meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
            constraint_names = self._constraint_names(
                model, [old_field.column], check=True,
                exclude=meta_constraint_names,
            )
            if strict and len(constraint_names) != 1:
                raise ValueError(""Found wrong number (%s) of check constraints for %s.%s"" % (
                    len(constraint_names),
                    model._meta.db_table,
                    old_field.column,
                ))
            for constraint_name in constraint_names:
                self.execute(self._delete_check_sql(model, constraint_name))
        # Have they renamed the column?
        if old_field.column != new_field.column:
            self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))
            # Rename all references to the renamed column.
            for sql in self.deferred_sql:
                if isinstance(sql, Statement):
                    sql.rename_column_references(model._meta.db_table, old_field.column, new_field.column)
        # Next, start accumulating actions to do
        actions = []
        null_actions = []
        post_actions = []
        # Collation change?
        old_collation = getattr(old_field, 'db_collation', None)
        new_collation = getattr(new_field, 'db_collation', None)
        if old_collation != new_collation:
            # Collation change handles also a type change.
            fragment = self._alter_column_collation_sql(model, new_field, new_type, new_collation)
            actions.append(fragment)
        # Type change?
        elif old_type != new_type:
            fragment, other_actions = self._alter_column_type_sql(model, old_field, new_field, new_type)
            actions.append(fragment)
            post_actions.extend(other_actions)
        # When changing a column NULL constraint to NOT NULL with a given
        # default value, we need to perform 4 steps:
        #  1. Add a default for new incoming writes
        #  2. Update existing NULL rows with new default
        #  3. Replace NULL constraint with NOT NULL
        #  4. Drop the default again.
        # Default change?
        needs_database_default = False
        if old_field.null and not new_field.null:
            old_default = self.effective_default(old_field)
            new_default = self.effective_default(new_field)
            if (
                not self.skip_default_on_alter(new_field) and
                old_default != new_default and
                new_default is not None
            ):
                needs_database_default = True
                actions.append(self._alter_column_default_sql(model, old_field, new_field))
        # Nullability change?
        if old_field.null != new_field.null:
            fragment = self._alter_column_null_sql(model, old_field, new_field)
            if fragment:
                null_actions.append(fragment)
        # Only if we have a default and there is a change from NULL to NOT NULL
        four_way_default_alteration = (
            new_field.has_default() and
            (old_field.null and not new_field.null)
        )
        if actions or null_actions:
            if not four_way_default_alteration:
                # If we don't have to do a 4-way default alteration we can
                # directly run a (NOT) NULL alteration
                actions = actions + null_actions
            # Combine actions together if we can (e.g. postgres)
            if self.connection.features.supports_combined_alters and actions:
                sql, params = tuple(zip(*actions))
                actions = [("", "".join(sql), sum(params, []))]
            # Apply those actions
            for sql, params in actions:
                self.execute(
                    self.sql_alter_column % {
                        ""table"": self.quote_name(model._meta.db_table),
                        ""changes"": sql,
                    },
                    params,
                )
            if four_way_default_alteration:
                # Update existing rows with default value
                self.execute(
                    self.sql_update_with_default % {
                        ""table"": self.quote_name(model._meta.db_table),
                        ""column"": self.quote_name(new_field.column),
                        ""default"": ""%s"",
                    },
                    [new_default],
                )
                # Since we didn't run a NOT NULL change before we need to do it
                # now
                for sql, params in null_actions:
                    self.execute(
                        self.sql_alter_column % {
                            ""table"": self.quote_name(model._meta.db_table),
                            ""changes"": sql,
                        },
                        params,
                    )
        if post_actions:
            for sql, params in post_actions:
                self.execute(sql, params)
        # If primary_key changed to False, delete the primary key constraint.
        if old_field.primary_key and not new_field.primary_key:
            self._delete_primary_key(model, strict)
        # Added a unique?
        if self._unique_should_be_added(old_field, new_field):
            self.execute(self._create_unique_sql(model, [new_field]))
        # Added an index? Add an index if db_index switched to True or a unique
        # constraint will no longer be used in lieu of an index. The following
        # lines from the truth table show all True cases; the rest are False:
        #
        # old_field.db_index | old_field.unique | new_field.db_index | new_field.unique
        # ------------------------------------------------------------------------------
        # False              | False            | True               | False
        # False              | True             | True               | False
        # True               | True             | True               | False
        if (not old_field.db_index or old_field.unique) and new_field.db_index and not new_field.unique:
            self.execute(self._create_index_sql(model, fields=[new_field]))
        # Type alteration on primary key? Then we need to alter the column
        # referring to us.
        rels_to_update = []
        if drop_foreign_keys:
            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
        # Changed to become primary key?
        if self._field_became_primary_key(old_field, new_field):
            # Make the new one
            self.execute(self._create_primary_key_sql(model, new_field))
            # Update all referencing columns
            rels_to_update.extend(_related_non_m2m_objects(old_field, new_field))
        # Handle our type alters on the other end of rels from the PK stuff above
        for old_rel, new_rel in rels_to_update:
            rel_db_params = new_rel.field.db_parameters(connection=self.connection)
            rel_type = rel_db_params['type']
            fragment, other_actions = self._alter_column_type_sql(
                new_rel.related_model, old_rel.field, new_rel.field, rel_type
            )
            self.execute(
                self.sql_alter_column % {
                    ""table"": self.quote_name(new_rel.related_model._meta.db_table),
                    ""changes"": fragment[0],
                },
                fragment[1],
            )
            for sql, params in other_actions:
                self.execute(sql, params)
        # Does it have a foreign key?
        if (self.connection.features.supports_foreign_keys and new_field.remote_field and
                (fks_dropped or not old_field.remote_field or not old_field.db_constraint) and
                new_field.db_constraint):
            self.execute(self._create_fk_sql(model, new_field, ""_fk_%(to_table)s_%(to_column)s""))
        # Rebuild FKs that pointed to us if we previously had to drop them
        if drop_foreign_keys:
            for _, rel in rels_to_update:
                if rel.field.db_constraint:
                    self.execute(self._create_fk_sql(rel.related_model, rel.field, ""_fk""))
        # Does it have check constraints we need to add?
        if old_db_params['check'] != new_db_params['check'] and new_db_params['check']:
            constraint_name = self._create_index_name(model._meta.db_table, [new_field.column], suffix='_check')
            self.execute(self._create_check_sql(model, constraint_name, new_db_params['check']))
        # Drop the default if we need to
        # (Django usually does not use in-database defaults)
        if needs_database_default:
            changes_sql, params = self._alter_column_default_sql(model, old_field, new_field, drop=True)
            sql = self.sql_alter_column % {
                ""table"": self.quote_name(model._meta.db_table),
                ""changes"": changes_sql,
            }
            self.execute(sql, params)
        # Reset connection if required
        if self.connection.features.connection_persists_old_columns:
            self.connection.close()

    def _alter_column_null_sql(self, model, old_field, new_field):
        """"""
        Hook to specialize column null alteration.

        Return a (sql, params) fragment to set a column to null or non-null
        as required by new_field, or None if no changes are required.
        """"""
        if (
            self.connection.features.interprets_empty_strings_as_nulls and
            new_field.empty_strings_allowed
        ):
            # The field is nullable in the database anyway, leave it alone.
            return
        else:
            new_db_params = new_field.db_parameters(connection=self.connection)
            sql = self.sql_alter_column_null if new_field.null else self.sql_alter_column_not_null
            return (
                sql % {
                    'column': self.quote_name(new_field.column),
                    'type': new_db_params['type'],
                },
                [],
            )

    def _alter_column_default_sql(self, model, old_field, new_field, drop=False):
        """"""
        Hook to specialize column default alteration.

        Return a (sql, params) fragment to add or drop (depending on the drop
        argument) a default to new_field's column.
        """"""
        new_default = self.effective_default(new_field)
        default = self._column_default_sql(new_field)
        params = [new_default]

        if drop:
            params = []
        elif self.connection.features.requires_literal_defaults:
            # Some databases (Oracle) can't take defaults as a parameter
            # If this is the case, the SchemaEditor for that database should
            # implement prepare_default().
            default = self.prepare_default(new_default)
            params = []

        new_db_params = new_field.db_parameters(connection=self.connection)
        if drop:
            if new_field.null:
                sql = self.sql_alter_column_no_default_null
            else:
                sql = self.sql_alter_column_no_default
        else:
            sql = self.sql_alter_column_default
        return (
            sql % {
                'column': self.quote_name(new_field.column),
                'type': new_db_params['type'],
                'default': default,
            },
            params,
        )

    def _alter_column_type_sql(self, model, old_field, new_field, new_type):
        """"""
        Hook to specialize column type alteration for different backends,
        for cases when a creation type is different to an alteration type
        (e.g. SERIAL in PostgreSQL, PostGIS fields).

        Return a two-tuple of: an SQL fragment of (sql, params) to insert into
        an ALTER TABLE statement and a list of extra (sql, params) tuples to
        run once the field is altered.
        """"""
        return (
            (
                self.sql_alter_column_type % {
                    ""column"": self.quote_name(new_field.column),
                    ""type"": new_type,
                },
                [],
            ),
            [],
        )

    def _alter_column_collation_sql(self, model, new_field, new_type, new_collation):
        return (
            self.sql_alter_column_collate % {
                'column': self.quote_name(new_field.column),
                'type': new_type,
                'collation': ' ' + self._collate_sql(new_collation) if new_collation else '',
            },
            [],
        )

    def _alter_many_to_many(self, model, old_field, new_field, strict):
        """"""Alter M2Ms to repoint their to= endpoints.""""""
        # Rename the through table
        if old_field.remote_field.through._meta.db_table != new_field.remote_field.through._meta.db_table:
            self.alter_db_table(old_field.remote_field.through, old_field.remote_field.through._meta.db_table,
                                new_field.remote_field.through._meta.db_table)
        # Repoint the FK to the other side
        self.alter_field(
            new_field.remote_field.through,
            # We need the field that points to the target model, so we can tell alter_field to change it -
            # this is m2m_reverse_field_name() (as opposed to m2m_field_name, which points to our model)
            old_field.remote_field.through._meta.get_field(old_field.m2m_reverse_field_name()),
            new_field.remote_field.through._meta.get_field(new_field.m2m_reverse_field_name()),
        )
        self.alter_field(
            new_field.remote_field.through,
            # for self-referential models we need to alter field from the other end too
            old_field.remote_field.through._meta.get_field(old_field.m2m_field_name()),
            new_field.remote_field.through._meta.get_field(new_field.m2m_field_name()),
        )

    def _create_index_name(self, table_name, column_names, suffix=""""):
        """"""
        Generate a unique name for an index/unique constraint.

        The name is divided into 3 parts: the table name, the column names,
        and a unique digest and suffix.
        """"""
        _, table_name = split_identifier(table_name)
        hash_suffix_part = '%s%s' % (names_digest(table_name, *column_names, length=8), suffix)
        max_length = self.connection.ops.max_name_length() or 200
        # If everything fits into max_length, use that name.
        index_name = '%s_%s_%s' % (table_name, '_'.join(column_names), hash_suffix_part)
        if len(index_name) <= max_length:
            return index_name
        # Shorten a long suffix.
        if len(hash_suffix_part) > max_length / 3:
            hash_suffix_part = hash_suffix_part[:max_length // 3]
        other_length = (max_length - len(hash_suffix_part)) // 2 - 1
        index_name = '%s_%s_%s' % (
            table_name[:other_length],
            '_'.join(column_names)[:other_length],
            hash_suffix_part,
        )
        # Prepend D if needed to prevent the name from starting with an
        # underscore or a number (not permitted on Oracle).
        if index_name[0] == ""_"" or index_name[0].isdigit():
            index_name = ""D%s"" % index_name[:-1]
        return index_name

    def _get_index_tablespace_sql(self, model, fields, db_tablespace=None):
        if db_tablespace is None:
            if len(fields) == 1 and fields[0].db_tablespace:
                db_tablespace = fields[0].db_tablespace
            elif model._meta.db_tablespace:
                db_tablespace = model._meta.db_tablespace
        if db_tablespace is not None:
            return ' ' + self.connection.ops.tablespace_sql(db_tablespace)
        return ''

    def _index_condition_sql(self, condition):
        if condition:
            return ' WHERE ' + condition
        return ''

    def _index_include_sql(self, model, columns):
        if not columns or not self.connection.features.supports_covering_indexes:
            return ''
        return Statement(
            ' INCLUDE (%(columns)s)',
            columns=Columns(model._meta.db_table, columns, self.quote_name),
        )

    def _create_index_sql(self, model, *, fields=None, name=None, suffix='', using='',
                          db_tablespace=None, col_suffixes=(), sql=None, opclasses=(),
                          condition=None, include=None, expressions=None):
        """"""
        Return the SQL statement to create the index for one or several fields
        or expressions. `sql` can be specified if the syntax differs from the
        standard (GIS indexes, ...).
        """"""
        fields = fields or []
        expressions = expressions or []
        compiler = Query(model, alias_cols=False).get_compiler(
            connection=self.connection,
        )
        tablespace_sql = self._get_index_tablespace_sql(model, fields, db_tablespace=db_tablespace)
        columns = [field.column for field in fields]
        sql_create_index = sql or self.sql_create_index
        table = model._meta.db_table

        def create_index_name(*args, **kwargs):
            nonlocal name
            if name is None:
                name = self._create_index_name(*args, **kwargs)
            return self.quote_name(name)

        return Statement(
            sql_create_index,
            table=Table(table, self.quote_name),
            name=IndexName(table, columns, suffix, create_index_name),
            using=using,
            columns=(
                self._index_columns(table, columns, col_suffixes, opclasses)
                if columns
                else Expressions(table, expressions, compiler, self.quote_value)
            ),
            extra=tablespace_sql,
            condition=self._index_condition_sql(condition),
            include=self._index_include_sql(model, include),
        )

    def _delete_index_sql(self, model, name, sql=None):
        return Statement(
            sql or self.sql_delete_index,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(name),
        )

    def _index_columns(self, table, columns, col_suffixes, opclasses):
        return Columns(table, columns, self.quote_name, col_suffixes=col_suffixes)

    def _model_indexes_sql(self, model):
        """"""
        Return a list of all index SQL statements (field indexes,
        index_together, Meta.indexes) for the specified model.
        """"""
        if not model._meta.managed or model._meta.proxy or model._meta.swapped:
            return []
        output = []
        for field in model._meta.local_fields:
            output.extend(self._field_indexes_sql(model, field))

        for field_names in model._meta.index_together:
            fields = [model._meta.get_field(field) for field in field_names]
            output.append(self._create_index_sql(model, fields=fields, suffix='_idx'))

        for index in model._meta.indexes:
            if (
                not index.contains_expressions or
                self.connection.features.supports_expression_indexes
            ):
                output.append(index.create_sql(model, self))
        return output

    def _field_indexes_sql(self, model, field):
        """"""
        Return a list of all index SQL statements for the specified field.
        """"""
        output = []
        if self._field_should_be_indexed(model, field):
            output.append(self._create_index_sql(model, fields=[field]))
        return output

    def _field_should_be_altered(self, old_field, new_field):
        _, old_path, old_args, old_kwargs = old_field.deconstruct()
        _, new_path, new_args, new_kwargs = new_field.deconstruct()
        # Don't alter when:
        # - changing only a field name
        # - changing an attribute that doesn't affect the schema
        # - adding only a db_column and the column name is not changed
        non_database_attrs = [
            'blank',
            'db_column',
            'editable',
            'error_messages',
            'help_text',
            'limit_choices_to',
            # Database-level options are not supported, see #21961.
            'on_delete',
            'related_name',
            'related_query_name',
            'validators',
            'verbose_name',
        ]
        for attr in non_database_attrs:
            old_kwargs.pop(attr, None)
            new_kwargs.pop(attr, None)
        return (
            self.quote_name(old_field.column) != self.quote_name(new_field.column) or
            (old_path, old_args, old_kwargs) != (new_path, new_args, new_kwargs)
        )

    def _field_should_be_indexed(self, model, field):
        return field.db_index and not field.unique

    def _field_became_primary_key(self, old_field, new_field):
        return not old_field.primary_key and new_field.primary_key

    def _unique_should_be_added(self, old_field, new_field):
        return (
            not new_field.primary_key and
            new_field.unique and
            (not old_field.unique or old_field.primary_key)
        )

    def _rename_field_sql(self, table, old_field, new_field, new_type):
        return self.sql_rename_column % {
            ""table"": self.quote_name(table),
            ""old_column"": self.quote_name(old_field.column),
            ""new_column"": self.quote_name(new_field.column),
            ""type"": new_type,
        }

    def _create_fk_sql(self, model, field, suffix):
        table = Table(model._meta.db_table, self.quote_name)
        name = self._fk_constraint_name(model, field, suffix)
        column = Columns(model._meta.db_table, [field.column], self.quote_name)
        to_table = Table(field.target_field.model._meta.db_table, self.quote_name)
        to_column = Columns(field.target_field.model._meta.db_table, [field.target_field.column], self.quote_name)
        deferrable = self.connection.ops.deferrable_sql()
        return Statement(
            self.sql_create_fk,
            table=table,
            name=name,
            column=column,
            to_table=to_table,
            to_column=to_column,
            deferrable=deferrable,
        )

    def _fk_constraint_name(self, model, field, suffix):
        def create_fk_name(*args, **kwargs):
            return self.quote_name(self._create_index_name(*args, **kwargs))

        return ForeignKeyName(
            model._meta.db_table,
            [field.column],
            split_identifier(field.target_field.model._meta.db_table)[1],
            [field.target_field.column],
            suffix,
            create_fk_name,
        )

    def _delete_fk_sql(self, model, name):
        return self._delete_constraint_sql(self.sql_delete_fk, model, name)

    def _deferrable_constraint_sql(self, deferrable):
        if deferrable is None:
            return ''
        if deferrable == Deferrable.DEFERRED:
            return ' DEFERRABLE INITIALLY DEFERRED'
        if deferrable == Deferrable.IMMEDIATE:
            return ' DEFERRABLE INITIALLY IMMEDIATE'

    def _unique_sql(
        self, model, fields, name, condition=None, deferrable=None,
        include=None, opclasses=None, expressions=None,
    ):
        if (
            deferrable and
            not self.connection.features.supports_deferrable_unique_constraints
        ):
            return None
        if condition or include or opclasses or expressions:
            # Databases support conditional, covering, and functional unique
            # constraints via a unique index.
            sql = self._create_unique_sql(
                model,
                fields,
                name=name,
                condition=condition,
                include=include,
                opclasses=opclasses,
                expressions=expressions,
            )
            if sql:
                self.deferred_sql.append(sql)
            return None
        constraint = self.sql_unique_constraint % {
            'columns': ', '.join([self.quote_name(field.column) for field in fields]),
            'deferrable': self._deferrable_constraint_sql(deferrable),
        }
        return self.sql_constraint % {
            'name': self.quote_name(name),
            'constraint': constraint,
        }

    def _create_unique_sql(
        self, model, fields, name=None, condition=None, deferrable=None,
        include=None, opclasses=None, expressions=None,
    ):
        if (
            (
                deferrable and
                not self.connection.features.supports_deferrable_unique_constraints
            ) or
            (condition and not self.connection.features.supports_partial_indexes) or
            (include and not self.connection.features.supports_covering_indexes) or
            (expressions and not self.connection.features.supports_expression_indexes)
        ):
            return None

        def create_unique_name(*args, **kwargs):
            return self.quote_name(self._create_index_name(*args, **kwargs))

        compiler = Query(model, alias_cols=False).get_compiler(connection=self.connection)
        table = model._meta.db_table
        columns = [field.column for field in fields]
        if name is None:
            name = IndexName(table, columns, '_uniq', create_unique_name)
        else:
            name = self.quote_name(name)
        if condition or include or opclasses or expressions:
            sql = self.sql_create_unique_index
        else:
            sql = self.sql_create_unique
        if columns:
            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)
        else:
            columns = Expressions(table, expressions, compiler, self.quote_value)
        return Statement(
            sql,
            table=Table(table, self.quote_name),
            name=name,
            columns=columns,
            condition=self._index_condition_sql(condition),
            deferrable=self._deferrable_constraint_sql(deferrable),
            include=self._index_include_sql(model, include),
        )

    def _delete_unique_sql(
        self, model, name, condition=None, deferrable=None, include=None,
        opclasses=None, expressions=None,
    ):
        if (
            (
                deferrable and
                not self.connection.features.supports_deferrable_unique_constraints
            ) or
            (condition and not self.connection.features.supports_partial_indexes) or
            (include and not self.connection.features.supports_covering_indexes) or
            (expressions and not self.connection.features.supports_expression_indexes)

        ):
            return None
        if condition or include or opclasses or expressions:
            sql = self.sql_delete_index
        else:
            sql = self.sql_delete_unique
        return self._delete_constraint_sql(sql, model, name)

    def _check_sql(self, name, check):
        return self.sql_constraint % {
            'name': self.quote_name(name),
            'constraint': self.sql_check_constraint % {'check': check},
        }

    def _create_check_sql(self, model, name, check):
        return Statement(
            self.sql_create_check,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(name),
            check=check,
        )

    def _delete_check_sql(self, model, name):
        return self._delete_constraint_sql(self.sql_delete_check, model, name)

    def _delete_constraint_sql(self, template, model, name):
        return Statement(
            template,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(name),
        )

    def _constraint_names(self, model, column_names=None, unique=None,
                          primary_key=None, index=None, foreign_key=None,
                          check=None, type_=None, exclude=None):
        """"""Return all constraint names matching the columns and conditions.""""""
        if column_names is not None:
            column_names = [
                self.connection.introspection.identifier_converter(name)
                for name in column_names
            ]
        with self.connection.cursor() as cursor:
            constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)
        result = []
        for name, infodict in constraints.items():
            if column_names is None or column_names == infodict['columns']:
                if unique is not None and infodict['unique'] != unique:
                    continue
                if primary_key is not None and infodict['primary_key'] != primary_key:
                    continue
                if index is not None and infodict['index'] != index:
                    continue
                if check is not None and infodict['check'] != check:
                    continue
                if foreign_key is not None and not infodict['foreign_key']:
                    continue
                if type_ is not None and infodict['type'] != type_:
                    continue
                if not exclude or name not in exclude:
                    result.append(name)
        return result

    def _delete_primary_key(self, model, strict=False):
        constraint_names = self._constraint_names(model, primary_key=True)
        if strict and len(constraint_names) != 1:
            raise ValueError('Found wrong number (%s) of PK constraints for %s' % (
                len(constraint_names),
                model._meta.db_table,
            ))
        for constraint_name in constraint_names:
            self.execute(self._delete_primary_key_sql(model, constraint_name))

    def _create_primary_key_sql(self, model, field):
        return Statement(
            self.sql_create_pk,
            table=Table(model._meta.db_table, self.quote_name),
            name=self.quote_name(
                self._create_index_name(model._meta.db_table, [field.column], suffix=""_pk"")
            ),
            columns=Columns(model._meta.db_table, [field.column], self.quote_name),
        )

    def _delete_primary_key_sql(self, model, name):
        return self._delete_constraint_sql(self.sql_delete_pk, model, name)

    def _collate_sql(self, collation):
        return 'COLLATE ' + self.quote_name(collation)

    def remove_procedure(self, procedure_name, param_types=()):
        sql = self.sql_delete_procedure % {
            'procedure': self.quote_name(procedure_name),
            'param_types': ','.join(param_types),
        }
        self.execute(sql)",1,334 2000 58 648 621 2001 61 648 2002 61 648 2003 61 648 2004 61 648 2005 61 648 2006 61 648 2007 61 648 2008 61 648 2009 61 648 2010 61 648 2011 61 648 2012 61 2011 2013 61 648 2014 61 648 2015 61 648 2016 61 648 2017 61 648 2018 61 648 2019 61 648 2020 61 648 2021 61 648 2022 61 2019 2023 61 648 2024 61 2019 2025 61 40 648 648 41 2026 61 303 2027 61 303 2028 61 2019 2029 61 648 2030 61 648 2031 61 648 2032 61 648 2033 61 2019 2034 61 648 348 2035 40 2036 44 2037 44 2038 61 302 44 2039 61 304 41 58 2036 46 2037 61 2037 2036 46 2038 61 2038 392 2036 46 2038 58 2036 46 2040 61 91 93 2036 46 2041 61 2036 46 2037 46 2042 46 2043 308 2039 621 348 2044 40 2036 41 58 2036 46 2045 61 91 93 392 2036 46 2041 58 2036 46 2039 61 2039 40 2036 46 2037 46 2046 41 2036 46 2039 46 2044 40 41 450 2036 348 2047 40 2036 44 2048 44 2049 44 2050 41 58 392 2048 407 303 58 385 2051 398 2036 46 2045 58 2036 46 2052 40 2051 41 392 2036 46 2041 58 2036 46 2039 46 2047 40 2048 44 2049 44 2050 41 621 348 2052 40 2036 44 2051 44 433 61 40 41 41 58 648 621 621 392 422 2036 46 2038 308 2036 46 2037 46 2053 308 422 2036 46 2037 46 2042 46 2043 58 440 2054 40 648 648 41 621 2051 61 2055 40 2051 41 621 2056 46 2057 40 648 44 2051 44 433 44 2058 61 123 648 58 433 44 648 58 2051 125 41 392 2036 46 2038 58 2059 61 648 392 2051 46 2060 40 41 46 2061 40 648 41 360 648 392 433 407 422 303 58 2036 46 2040 46 2062 40 40 2051 37 2063 40 2064 40 2036 46 2065 44 433 41 41 41 43 2059 41 360 58 2036 46 2040 46 2062 40 2051 43 2059 41 360 58 497 2036 46 2037 46 2066 40 41 311 2066 58 2066 46 2052 40 2051 44 433 41 348 2067 40 2036 44 2068 41 58 450 2036 46 2037 46 2069 46 2067 40 2068 41 348 2070 40 2036 44 2071 41 58 648 621 621 385 2072 398 2071 46 2073 46 2074 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2036 46 2045 46 2062 40 2036 46 2078 40 2071 44 2075 41 41 621 2079 61 91 93 433 61 91 93 385 2077 398 2071 46 2073 46 2080 58 621 2081 44 2082 61 2036 46 2083 40 2071 44 2077 41 392 2081 407 303 58 344 621 2084 61 2077 46 2085 40 2037 61 2036 46 2037 41 392 2084 91 648 93 58 2081 636 648 43 2036 46 2018 37 2084 621 2086 61 2077 46 2087 40 2037 61 2036 46 2037 41 392 2086 58 2081 636 648 37 2086 433 46 2088 40 2082 41 621 392 2077 46 2089 308 2077 46 2090 58 2091 61 2077 46 2089 46 2071 46 2073 46 2092 2093 61 2077 46 2089 46 2071 46 2073 46 2076 40 2077 46 2089 46 2094 41 46 2095 392 2036 46 2026 58 2081 636 648 43 2036 46 2026 37 123 648 58 2036 46 2067 40 2091 41 44 648 58 2036 46 2067 40 2093 41 44 125 359 2036 46 2037 46 2042 46 2096 58 2036 46 2045 46 2062 40 2036 46 2097 40 2071 44 2077 44 648 41 41 621 2079 46 2062 40 648 37 40 2036 46 2067 40 2077 46 2095 41 44 2081 44 41 41 621 621 392 2077 46 2098 40 41 398 40 648 44 648 44 648 41 58 2099 61 2036 46 2037 46 2069 46 2099 40 2071 46 2073 46 2092 44 2077 46 2095 41 392 2099 58 2036 46 2045 46 2088 40 2099 41 2100 61 91 2101 46 2102 40 2071 44 2036 41 385 2101 398 2071 46 2073 46 2100 93 2051 61 2036 46 2001 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 648 46 2103 40 2101 385 2101 398 40 42 2079 44 42 2100 41 392 2101 41 44 125 392 2071 46 2073 46 2104 58 2105 61 2036 46 2037 46 2069 46 2105 40 2071 46 2073 46 2104 41 392 2105 58 2051 636 648 43 2105 450 2051 44 433 621 348 2106 40 2036 44 2107 44 433 44 2071 44 2077 44 2108 41 58 500 2107 2109 61 2110 40 2077 44 648 44 303 41 392 2109 58 500 2036 46 2111 40 2109 41 621 424 61 2077 46 424 621 2108 61 40 2108 308 422 2036 46 2112 40 2077 41 308 621 621 621 422 40 424 308 2036 46 2113 40 2077 41 41 41 392 2108 58 2114 61 2036 46 2115 40 2077 41 392 2114 407 422 303 58 2116 61 648 43 2036 46 2117 40 2077 41 392 2036 46 2037 46 2042 46 2118 58 621 621 621 500 2116 37 2036 46 2119 40 2114 41 360 58 500 2116 433 46 2062 40 2114 41 621 621 392 40 2077 46 2120 308 422 2077 46 2121 308 2036 46 2037 46 2042 46 2122 41 58 424 61 304 392 422 424 58 500 648 359 422 2036 46 2037 46 2042 46 2123 58 500 648 392 2077 46 2121 58 500 648 359 2077 46 2124 58 500 648 621 2125 61 2077 46 2104 428 2071 46 2073 46 2104 392 2125 308 2036 46 2037 46 2042 46 2126 308 2077 46 2124 58 500 2036 46 2037 46 2069 46 2105 40 2125 44 401 61 304 41 348 2083 40 2036 44 2071 44 2077 44 2108 61 302 41 58 648 621 2084 61 2077 46 2085 40 2037 61 2036 46 2037 41 2107 61 2084 91 648 93 621 392 2107 407 303 58 450 303 44 303 433 61 91 93 450 648 46 2103 40 621 2036 46 2106 40 2107 44 433 44 2071 44 2077 44 2108 41 41 44 433 348 2112 40 2036 44 2077 41 58 648 450 302 348 2113 40 2036 44 2077 41 58 648 450 302 348 2119 40 2036 44 2127 41 58 648 440 2128 40 648 648 41 348 2117 40 2036 44 2077 41 58 648 450 648 64 2129 348 2130 40 2077 41 58 621 392 2077 46 2131 40 41 58 349 61 2077 46 2132 40 41 359 422 2077 46 424 308 2077 46 2133 308 2077 46 2120 58 392 2077 46 2098 40 41 614 648 58 349 61 648 360 58 349 61 648 359 2110 40 2077 44 648 44 302 41 428 2110 40 2077 44 648 44 302 41 58 2134 61 2077 46 2098 40 41 392 2134 614 648 58 349 61 2135 46 2136 40 41 360 58 349 61 2137 46 2136 40 41 392 2134 614 648 58 349 61 349 46 2138 40 41 359 2134 614 648 58 349 61 349 46 2139 40 41 360 58 349 61 303 450 349 348 2115 40 2036 44 2077 41 58 648 450 2077 46 2140 40 2036 46 2130 40 2077 41 44 2036 46 2037 41 348 2065 40 2036 44 2127 41 58 648 440 2128 40 41 621 348 2141 40 2036 44 2071 41 58 648 2051 44 433 61 2036 46 2070 40 2071 41 621 2036 46 2052 40 2051 44 433 428 303 41 621 2036 46 2045 46 2088 40 2036 46 2142 40 2071 41 41 621 385 2077 398 2071 46 2073 46 2143 58 392 2077 46 2089 46 2144 46 2073 46 2145 58 2036 46 2141 40 2077 46 2089 46 2144 41 348 2146 40 2036 44 2071 41 58 648 621 385 2077 398 2071 46 2073 46 2143 58 392 2077 46 2089 46 2144 46 2073 46 2145 58 2036 46 2146 40 2077 46 2089 46 2144 41 621 2036 46 2052 40 2036 46 2004 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 125 41 621 385 2051 398 411 40 2036 46 2045 41 58 392 2147 40 2051 44 2148 41 308 2051 46 2149 40 2071 46 2073 46 2092 41 58 2036 46 2045 46 2150 40 2051 41 348 2151 40 2036 44 2071 44 2152 41 58 648 392 40 2152 46 2153 308 422 2036 46 2037 46 2042 46 2154 41 58 450 303 621 621 2036 46 2052 40 2152 46 2155 40 2071 44 2036 41 44 433 61 303 41 348 2156 40 2036 44 2071 44 2152 41 58 648 392 40 2152 46 2153 308 422 2036 46 2037 46 2042 46 2154 41 58 450 303 2036 46 2052 40 2152 46 2157 40 2071 44 2036 41 41 348 2158 40 2036 44 2071 44 2101 41 58 648 2051 61 2101 46 2155 40 2071 44 2036 41 392 2051 58 621 621 2036 46 2052 40 2051 44 433 61 303 41 348 2159 40 2036 44 2071 44 2101 41 58 648 2051 61 2101 46 2157 40 2071 44 2036 41 392 2051 58 2036 46 2052 40 2051 41 348 2160 40 2036 44 2071 44 2161 44 2162 41 58 648 2163 61 123 2063 40 2075 41 385 2075 398 2161 125 2164 61 123 2063 40 2075 41 385 2075 398 2162 125 621 385 2075 398 2163 46 2165 40 2164 41 58 2036 46 2166 40 2071 44 2075 44 123 648 58 304 125 44 2036 46 2024 41 621 385 2072 398 2164 46 2165 40 2163 41 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2036 46 2052 40 2036 46 2078 40 2071 44 2075 41 41 348 2167 40 2036 44 2071 44 2168 44 2169 41 58 648 2163 61 123 2063 40 2075 41 385 2075 398 2168 125 2164 61 123 2063 40 2075 41 385 2075 398 2169 125 621 385 2075 398 2163 46 2165 40 2164 41 58 2036 46 2166 40 2071 44 2075 44 123 648 58 304 44 648 58 302 125 44 2036 46 2031 44 41 621 385 2072 398 2164 46 2165 40 2163 41 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2036 46 2052 40 2036 46 2170 40 2071 44 2075 61 2075 44 2171 61 648 41 41 348 2166 40 2036 44 2071 44 2075 44 2172 44 2051 41 58 2173 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2100 125 2174 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2175 125 2176 61 91 2071 46 2073 46 2076 40 2077 41 46 2095 385 2077 398 2075 93 2177 61 2036 46 2178 40 2071 44 2176 44 2179 61 2173 124 2174 44 638 2172 41 392 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 648 46 2103 40 2176 41 44 41 41 2036 46 2052 40 2036 46 2182 40 2051 44 2071 44 2177 91 1500 93 41 41 348 2183 40 2036 44 2071 44 2184 44 2185 41 58 648 392 40 2184 614 2185 428 40 2036 46 2037 46 2042 46 2186 308 2184 46 2187 40 41 614 2185 46 2187 40 41 41 41 58 450 2036 46 2052 40 2036 46 2002 37 123 648 58 2036 46 2067 40 2184 41 44 648 58 2036 46 2067 40 2185 41 44 125 41 621 385 2051 398 2036 46 2045 58 392 2147 40 2051 44 2148 41 58 2051 46 2188 40 2184 44 2185 41 348 2189 40 2036 44 2071 44 2190 44 2191 41 58 648 2036 46 2052 40 2036 46 2003 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2190 41 44 648 58 2036 46 2067 40 2191 41 44 125 41 348 2192 40 2036 44 2071 44 2077 41 58 648 621 392 2077 46 2193 308 2077 46 2089 46 2144 46 2073 46 2145 58 450 2036 46 2141 40 2077 46 2089 46 2144 41 621 2081 44 433 61 2036 46 2083 40 2071 44 2077 44 2108 61 304 41 621 392 2081 407 303 58 450 621 2084 61 2077 46 2085 40 2037 61 2036 46 2037 41 392 2084 91 648 93 58 2081 636 648 43 2036 46 2018 37 2084 392 2077 46 2089 308 2036 46 2037 46 2042 46 2096 308 2077 46 2090 58 2194 61 648 621 392 2036 46 2027 58 2091 61 2077 46 2089 46 2071 46 2073 46 2092 2093 61 2077 46 2089 46 2071 46 2073 46 2076 40 2077 46 2089 46 2094 41 46 2095 416 44 2195 61 2196 40 2071 46 2073 46 2092 41 2081 636 648 43 2036 46 2027 37 123 648 58 2036 46 2197 40 2071 44 2077 44 2194 41 44 648 58 648 37 2036 46 2067 40 416 41 392 416 360 648 44 648 58 2036 46 2067 40 2077 46 2095 41 44 648 58 2036 46 2067 40 2091 41 44 648 58 2036 46 2067 40 2093 41 44 648 58 2036 46 2037 46 2069 46 2198 40 41 125 621 360 58 2036 46 2045 46 2062 40 2036 46 2097 40 2071 44 2077 44 2194 41 41 621 2051 61 2036 46 2005 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2077 46 2095 41 44 648 58 2081 44 125 2036 46 2052 40 2051 44 433 41 621 621 392 422 2036 46 2113 40 2077 41 308 2036 46 2115 40 2077 41 407 422 303 58 2199 44 433 61 2036 46 2200 40 2071 44 303 44 2077 44 2201 61 304 41 2051 61 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2199 44 125 2036 46 2052 40 2051 44 433 41 621 2036 46 2045 46 2088 40 2036 46 2202 40 2071 44 2077 41 41 621 392 2036 46 2037 46 2042 46 2203 58 2036 46 2037 46 2204 40 41 348 2205 40 2036 44 2071 44 2077 41 58 648 621 392 2077 46 2193 308 2077 46 2089 46 2144 46 2073 46 2145 58 450 2036 46 2146 40 2077 46 2089 46 2144 41 621 392 2077 46 2085 40 2037 61 2036 46 2037 41 91 648 93 407 303 58 450 621 392 2077 46 2089 58 2206 61 2036 46 2178 40 2071 44 91 2077 46 2095 93 44 2207 61 304 41 385 2208 398 2206 58 2036 46 2052 40 2036 46 2209 40 2071 44 2208 41 41 621 2051 61 2036 46 2014 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2077 46 2095 41 44 125 2036 46 2052 40 2051 41 621 392 2036 46 2037 46 2042 46 2203 58 2036 46 2037 46 2204 40 41 621 385 2051 398 411 40 2036 46 2045 41 58 392 2147 40 2051 44 2148 41 308 2051 46 2210 40 2071 46 2073 46 2092 44 2077 46 2095 41 58 2036 46 2045 46 2150 40 2051 41 348 2211 40 2036 44 2071 44 2212 44 2213 44 2214 61 302 41 58 648 392 422 2036 46 2215 40 2212 44 2213 41 58 450 621 2216 61 2212 46 2085 40 2037 61 2036 46 2037 41 2217 61 2216 91 648 93 2218 61 2213 46 2085 40 2037 61 2036 46 2037 41 2219 61 2218 91 648 93 392 40 40 2217 407 303 308 2212 46 2089 407 303 41 428 40 2219 407 303 308 2213 46 2089 407 303 41 41 58 440 2181 40 648 648 37 40 2212 44 2213 41 44 41 359 2217 407 303 308 2219 407 303 308 40 2212 46 2089 46 2144 308 2213 46 2089 46 2144 308 2212 46 2089 46 2144 46 2073 46 2145 308 2213 46 2089 46 2144 46 2073 46 2145 41 58 450 2036 46 2220 40 2071 44 2212 44 2213 44 2214 41 359 2217 407 303 308 2219 407 303 308 40 2212 46 2089 46 2144 308 2213 46 2089 46 2144 308 422 2212 46 2089 46 2144 46 2073 46 2145 308 422 2213 46 2089 46 2144 46 2073 46 2145 41 58 621 450 359 2217 407 303 428 2219 407 303 58 440 2181 40 648 648 648 37 40 2212 44 2213 41 41 2036 46 2221 40 2071 44 2212 44 2213 44 2217 44 2219 44 2216 44 2218 44 2214 41 348 2221 40 2036 44 2071 44 2212 44 2213 44 2217 44 2219 44 2216 44 2218 44 2214 61 302 41 58 648 621 2222 61 2223 40 41 392 40 2036 46 2037 46 2042 46 2096 308 2212 46 2089 308 2212 46 2090 41 58 2206 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2207 61 304 41 392 2214 308 2180 40 2206 41 631 1501 58 440 2181 40 648 37 40 2180 40 2206 41 44 2071 46 2073 46 2092 44 2212 46 2095 44 41 41 385 2208 398 2206 58 2222 46 2224 40 40 2212 46 2095 44 41 41 2036 46 2052 40 2036 46 2209 40 2071 44 2208 41 41 621 392 2212 46 2124 308 40 422 2213 46 2124 428 2036 46 2225 40 2212 44 2213 41 41 58 621 2173 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2100 125 2177 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2124 61 304 44 2121 61 302 44 2179 61 2173 44 41 392 2214 308 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 2212 46 2095 44 41 41 385 2226 398 2177 58 2036 46 2052 40 2036 46 2227 40 2071 44 2226 41 41 621 621 2228 61 40 2036 46 2037 46 2042 46 2096 308 40 40 2212 46 2121 308 2213 46 2121 41 428 40 2212 46 2124 308 2213 46 2124 41 41 308 2217 631 2219 41 392 2228 58 621 621 385 2229 44 2230 398 2231 40 2212 44 2213 41 58 2232 61 2036 46 2178 40 2230 46 2233 44 91 2230 46 2077 46 2095 93 44 2207 61 304 41 385 2208 398 2232 58 2036 46 2052 40 2036 46 2209 40 2230 46 2233 44 2208 41 41 621 621 621 621 621 621 621 621 621 621 392 2212 46 2234 308 422 2212 46 2124 308 40 422 2213 46 2234 428 2213 46 2124 41 58 621 2174 61 123 2152 46 2068 385 2152 398 2071 46 2073 46 2175 125 621 621 2235 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2152 61 304 44 2236 61 2237 46 2171 44 2179 61 2174 44 41 385 2238 398 2235 58 621 621 621 2036 46 2052 40 2036 46 2239 40 2071 44 2238 41 41 621 392 2216 91 648 93 631 2218 91 648 93 308 2216 91 648 93 58 2173 61 123 2101 46 2068 385 2101 398 2071 46 2073 46 2100 125 2177 61 2036 46 2178 40 2071 44 91 2212 46 2095 93 44 2240 61 304 44 2179 61 2173 44 41 392 2214 308 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 2212 46 2095 44 41 41 385 2226 398 2177 58 2036 46 2052 40 2036 46 2241 40 2071 44 2226 41 41 621 392 2212 46 2095 631 2213 46 2095 58 2036 46 2052 40 2036 46 2242 40 2071 46 2073 46 2092 44 2212 44 2213 44 2219 41 41 621 385 2051 398 2036 46 2045 58 392 2147 40 2051 44 2148 41 58 2051 46 2243 40 2071 46 2073 46 2092 44 2212 46 2095 44 2213 46 2095 41 621 2244 61 91 93 2245 61 91 93 2246 61 91 93 621 2247 61 2110 40 2212 44 648 44 303 41 2248 61 2110 40 2213 44 648 44 303 41 392 2247 631 2248 58 621 2249 61 2036 46 2250 40 2071 44 2213 44 2219 44 2248 41 2244 46 2062 40 2249 41 621 359 2217 631 2219 58 2249 44 2251 61 2036 46 2252 40 2071 44 2212 44 2213 44 2219 41 2244 46 2062 40 2249 41 2246 46 2088 40 2251 41 621 621 621 621 621 621 621 2253 61 302 392 2212 46 424 308 422 2213 46 424 58 2254 61 2036 46 2115 40 2212 41 2255 61 2036 46 2115 40 2213 41 392 40 422 2036 46 2113 40 2213 41 308 2254 631 2255 308 2255 407 422 303 41 58 2253 61 304 2244 46 2062 40 2036 46 2200 40 2071 44 2212 44 2213 41 41 621 392 2212 46 424 631 2213 46 424 58 2249 61 2036 46 2256 40 2071 44 2212 44 2213 41 392 2249 58 2245 46 2062 40 2249 41 621 2257 61 40 2213 46 2131 40 41 308 40 2212 46 424 308 422 2213 46 424 41 41 392 2244 428 2245 58 392 422 2257 58 621 621 2244 61 2244 43 2245 621 392 2036 46 2037 46 2042 46 2258 308 2244 58 2051 44 433 61 2063 40 2259 40 42 2244 41 41 2244 61 91 40 648 46 2103 40 2051 41 44 2260 40 433 44 91 93 41 41 93 621 385 2051 44 433 398 2244 58 2036 46 2052 40 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2051 44 125 44 433 44 41 392 2257 58 621 2036 46 2052 40 2036 46 2016 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 648 44 125 44 91 2255 93 44 41 621 621 385 2051 44 433 398 2245 58 2036 46 2052 40 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2051 44 125 44 433 44 41 392 2246 58 385 2051 44 433 398 2246 58 2036 46 2052 40 2051 44 433 41 621 392 2212 46 2121 308 422 2213 46 2121 58 2036 46 2261 40 2071 44 2214 41 621 392 2036 46 2262 40 2212 44 2213 41 58 2036 46 2052 40 2036 46 2078 40 2071 44 91 2213 93 41 41 621 621 621 621 621 621 621 621 621 392 40 422 2212 46 2234 428 2212 46 2124 41 308 2213 46 2234 308 422 2213 46 2124 58 2036 46 2052 40 2036 46 2170 40 2071 44 2075 61 91 2213 93 41 41 621 621 2263 61 91 93 392 2228 58 2263 46 2088 40 2231 40 2212 44 2213 41 41 621 392 2036 46 2225 40 2212 44 2213 41 58 621 2036 46 2052 40 2036 46 2264 40 2071 44 2213 41 41 621 2263 46 2088 40 2231 40 2212 44 2213 41 41 621 385 2265 44 2230 398 2263 58 2266 61 2230 46 2077 46 2085 40 2037 61 2036 46 2037 41 2267 61 2266 91 648 93 2249 44 2251 61 2036 46 2252 40 2230 46 2233 44 2265 46 2077 44 2230 46 2077 44 2267 41 2036 46 2052 40 2036 46 2006 37 123 648 58 2036 46 2067 40 2230 46 2233 46 2073 46 2092 41 44 648 58 2249 91 1500 93 44 125 44 2249 91 1501 93 44 41 385 2051 44 433 398 2251 58 2036 46 2052 40 2051 44 433 41 621 392 40 2036 46 2037 46 2042 46 2096 308 2213 46 2089 308 40 2222 428 422 2212 46 2089 428 422 2212 46 2090 41 308 2213 46 2090 41 58 2036 46 2052 40 2036 46 2097 40 2071 44 2213 44 648 41 41 621 392 2228 58 385 2195 44 2268 398 2263 58 392 2268 46 2077 46 2090 58 2036 46 2052 40 2036 46 2097 40 2268 46 2233 44 2268 46 2077 44 648 41 41 621 392 2216 91 648 93 631 2218 91 648 93 308 2218 91 648 93 58 2226 61 2036 46 2269 40 2071 46 2073 46 2092 44 91 2213 46 2095 93 44 2171 61 648 41 2036 46 2052 40 2036 46 2270 40 2071 44 2226 44 2218 91 648 93 41 41 621 621 392 2253 58 2199 44 433 61 2036 46 2200 40 2071 44 2212 44 2213 44 2201 61 304 41 2051 61 2036 46 2006 37 123 648 58 2036 46 2067 40 2071 46 2073 46 2092 41 44 648 58 2199 44 125 2036 46 2052 40 2051 44 433 41 621 392 2036 46 2037 46 2042 46 2203 58 2036 46 2037 46 2204 40 41 348 2256 40 2036 44 2071 44 2212 44 2213 41 58 648 392 40 2036 46 2037 46 2042 46 2122 308 2213 46 2120 41 58 621 450 360 58 2218 61 2213 46 2085 40 2037 61 2036 46 2037 41 2051 61 2036 46 2008 392 2213 46 424 360 2036 46 2009 450 40 2051 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2218 91 648 93 44 125 44 91 93 44 41 348 2200 40 2036 44 2071 44 2212 44 2213 44 2201 61 302 41 58 648 2255 61 2036 46 2115 40 2213 41 349 61 2036 46 2117 40 2213 41 433 61 91 2255 93 392 2201 58 433 61 91 93 359 2036 46 2037 46 2042 46 2118 58 621 621 621 349 61 2036 46 2119 40 2255 41 433 61 91 93 2218 61 2213 46 2085 40 2037 61 2036 46 2037 41 392 2201 58 392 2213 46 424 58 2051 61 2036 46 2012 360 58 2051 61 2036 46 2011 360 58 2051 61 2036 46 2010 450 40 2051 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2218 91 648 93 44 648 58 349 44 125 44 433 44 41 348 2252 40 2036 44 2071 44 2212 44 2213 44 2219 41 58 648 450 40 40 2036 46 2007 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2219 44 125 44 91 93 44 41 44 91 93 44 41 348 2250 40 2036 44 2071 44 2213 44 2219 44 2248 41 58 450 40 2036 46 2013 37 123 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2219 44 648 58 648 43 2036 46 2111 40 2248 41 392 2248 360 648 44 125 44 91 93 44 41 348 2220 40 2036 44 2071 44 2212 44 2213 44 2214 41 58 648 621 392 2212 46 2089 46 2144 46 2073 46 2092 631 2213 46 2089 46 2144 46 2073 46 2092 58 2036 46 2183 40 2212 46 2089 46 2144 44 2212 46 2089 46 2144 46 2073 46 2092 44 2213 46 2089 46 2144 46 2073 46 2092 41 621 2036 46 2211 40 2213 46 2089 46 2144 44 621 621 2212 46 2089 46 2144 46 2073 46 2076 40 2212 46 2271 40 41 41 44 2213 46 2089 46 2144 46 2073 46 2076 40 2213 46 2271 40 41 41 44 41 2036 46 2211 40 2213 46 2089 46 2144 44 621 2212 46 2089 46 2144 46 2073 46 2076 40 2212 46 2272 40 41 41 44 2213 46 2089 46 2144 46 2073 46 2076 40 2213 46 2272 40 41 41 44 41 348 2269 40 2036 44 2273 44 2274 44 2171 61 648 41 58 648 2195 44 2273 61 2196 40 2273 41 2275 61 648 37 40 2276 40 2273 44 42 2274 44 2277 61 1502 41 44 2171 41 2278 61 2036 46 2037 46 2069 46 2279 40 41 428 1504 621 2238 61 648 37 40 2273 44 648 46 2103 40 2274 41 44 2275 41 392 2180 40 2238 41 620 2278 58 450 2238 621 392 2180 40 2275 41 62 2278 47 1502 58 2275 61 2275 91 58 2278 610 1502 93 2280 61 40 2278 45 2180 40 2275 41 41 610 1502 45 1501 2238 61 648 37 40 2273 91 58 2280 93 44 648 46 2103 40 2274 41 91 58 2280 93 44 2275 44 41 621 621 392 2238 91 1500 93 614 648 428 2238 91 1500 93 46 2281 40 41 58 2238 61 648 37 2238 91 58 45 1501 93 450 2238 348 2282 40 2036 44 2071 44 2075 44 2104 61 303 41 58 392 2104 407 303 58 392 2180 40 2075 41 614 1501 308 2075 91 1500 93 46 2104 58 2104 61 2075 91 1500 93 46 2104 359 2071 46 2073 46 2104 58 2104 61 2071 46 2073 46 2104 392 2104 407 422 303 58 450 648 43 2036 46 2037 46 2069 46 2105 40 2104 41 450 648 348 2283 40 2036 44 2284 41 58 392 2284 58 450 648 43 2284 450 648 348 2285 40 2036 44 2071 44 2176 41 58 392 422 2176 428 422 2036 46 2037 46 2042 46 2286 58 450 648 450 2148 40 648 44 2176 61 2287 40 2071 46 2073 46 2092 44 2176 44 2036 46 2067 41 44 41 348 2170 40 2036 44 2071 44 42 44 2075 61 303 44 2068 61 303 44 2171 61 648 44 489 61 648 44 2104 61 303 44 2288 61 40 41 44 2051 61 303 44 2289 61 40 41 44 2284 61 303 44 399 61 303 44 2290 61 303 41 58 648 2075 61 2075 428 91 93 2290 61 2290 428 91 93 2291 61 2292 40 2071 44 2293 61 302 41 46 2294 40 2037 61 2036 46 2037 44 41 2105 61 2036 46 2282 40 2071 44 2075 44 2104 61 2104 41 2176 61 91 2077 46 2095 385 2077 398 2075 93 2029 61 2051 428 2036 46 2029 2295 61 2071 46 2073 46 2092 348 2296 40 42 2297 44 638 2298 41 58 421 2068 392 2068 407 303 58 2068 61 2036 46 2269 40 42 2297 44 638 2298 41 450 2036 46 2067 40 2068 41 450 2148 40 2029 44 2295 61 2299 40 2295 44 2036 46 2067 41 44 2068 61 2300 40 2295 44 2176 44 2171 44 2296 41 44 489 61 489 44 2176 61 40 2036 46 2301 40 2295 44 2176 44 2288 44 2289 41 392 2176 360 2302 40 2295 44 2290 44 2291 44 2036 46 2065 41 41 44 2058 61 2105 44 2284 61 2036 46 2283 40 2284 41 44 399 61 2036 46 2285 40 2071 44 399 41 44 41 348 2239 40 2036 44 2071 44 2068 44 2051 61 303 41 58 450 2148 40 2051 428 2036 46 2031 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2068 41 44 41 348 2301 40 2036 44 2295 44 2176 44 2288 44 2289 41 58 450 2287 40 2295 44 2176 44 2036 46 2067 44 2288 61 2288 41 348 2142 40 2036 44 2071 41 58 648 392 422 2071 46 2073 46 2303 428 2071 46 2073 46 2304 428 2071 46 2073 46 2305 58 450 91 93 2306 61 91 93 385 2077 398 2071 46 2073 46 2080 58 2306 46 2088 40 2036 46 2202 40 2071 44 2077 41 41 385 2072 398 2071 46 2073 46 2307 58 2075 61 91 2071 46 2073 46 2076 40 2077 41 385 2077 398 2072 93 2306 46 2062 40 2036 46 2170 40 2071 44 2075 61 2075 44 2171 61 648 41 41 385 2152 398 2071 46 2073 46 2175 58 392 40 422 2152 46 2153 428 2036 46 2037 46 2042 46 2154 41 58 2306 46 2062 40 2152 46 2155 40 2071 44 2036 41 41 450 2306 348 2202 40 2036 44 2071 44 2077 41 58 648 2306 61 91 93 392 2036 46 2308 40 2071 44 2077 41 58 2306 46 2062 40 2036 46 2170 40 2071 44 2075 61 91 2077 93 41 41 450 2306 348 2215 40 2036 44 2212 44 2213 41 58 2195 44 2309 44 2310 44 2311 61 2212 46 2312 40 41 2195 44 2313 44 2314 44 2315 61 2213 46 2312 40 41 621 621 621 621 2316 61 91 648 44 648 44 648 44 648 44 648 44 648 44 621 648 44 648 44 648 44 648 44 648 44 93 385 2317 398 2316 58 2311 46 2318 40 2317 44 303 41 2315 46 2318 40 2317 44 303 41 450 40 2036 46 2067 40 2212 46 2095 41 631 2036 46 2067 40 2213 46 2095 41 428 40 2309 44 2310 44 2311 41 631 40 2313 44 2314 44 2315 41 41 348 2308 40 2036 44 2071 44 2077 41 58 450 2077 46 2234 308 422 2077 46 2124 348 2225 40 2036 44 2212 44 2213 41 58 450 422 2212 46 2121 308 2213 46 2121 348 2262 40 2036 44 2212 44 2213 41 58 450 40 422 2213 46 2121 308 2213 46 2124 308 40 422 2212 46 2124 428 2212 46 2121 41 41 348 2242 40 2036 44 2295 44 2212 44 2213 44 2219 41 58 450 2036 46 2015 37 123 648 58 2036 46 2067 40 2295 41 44 648 58 2036 46 2067 40 2212 46 2095 41 44 648 58 2036 46 2067 40 2213 46 2095 41 44 648 58 2219 44 125 348 2097 40 2036 44 2071 44 2077 44 2171 41 58 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 2068 61 2036 46 2197 40 2071 44 2077 44 2171 41 2095 61 2287 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2036 46 2067 41 2091 61 2299 40 2077 46 2319 46 2071 46 2073 46 2092 44 2036 46 2067 41 2093 61 2287 40 2077 46 2319 46 2071 46 2073 46 2092 44 91 2077 46 2319 46 2095 93 44 2036 46 2067 41 2320 61 2036 46 2037 46 2069 46 2198 40 41 450 2148 40 2036 46 2025 44 2295 61 2295 44 2068 61 2068 44 2095 61 2095 44 2091 61 2091 44 2093 61 2093 44 2320 61 2320 44 41 348 2197 40 2036 44 2071 44 2077 44 2171 41 58 348 2321 40 42 2297 44 638 2298 41 58 450 2036 46 2067 40 2036 46 2269 40 42 2297 44 638 2298 41 41 450 2322 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2196 40 2077 46 2319 46 2071 46 2073 46 2092 41 91 1501 93 44 91 2077 46 2319 46 2095 93 44 2171 44 2321 44 41 348 2209 40 2036 44 2071 44 2068 41 58 450 2036 46 2182 40 2036 46 2028 44 2071 44 2068 41 348 2323 40 2036 44 2320 41 58 392 2320 407 303 58 450 648 392 2320 614 2324 46 2325 58 450 648 392 2320 614 2324 46 2326 58 450 648 348 2327 40 2036 44 2071 44 2075 44 2068 44 2284 61 303 44 2320 61 303 44 399 61 303 44 2289 61 303 44 2290 61 303 44 41 58 392 40 2320 308 422 2036 46 2037 46 2042 46 2328 41 58 450 303 392 2284 428 399 428 2289 428 2290 58 621 621 2051 61 2036 46 2078 40 2071 44 2075 44 2068 61 2068 44 2284 61 2284 44 399 61 399 44 2289 61 2289 44 2290 61 2290 44 41 392 2051 58 2036 46 2045 46 2062 40 2051 41 450 303 2101 61 2036 46 2017 37 123 648 58 648 46 2103 40 91 2036 46 2067 40 2077 46 2095 41 385 2077 398 2075 93 41 44 648 58 2036 46 2323 40 2320 41 44 125 450 2036 46 2020 37 123 648 58 2036 46 2067 40 2068 41 44 648 58 2101 44 125 348 2078 40 2036 44 2071 44 2075 44 2068 61 303 44 2284 61 303 44 2320 61 303 44 399 61 303 44 2289 61 303 44 2290 61 303 44 41 58 392 40 40 2320 308 422 2036 46 2037 46 2042 46 2328 41 428 40 2284 308 422 2036 46 2037 46 2042 46 2329 41 428 40 399 308 422 2036 46 2037 46 2042 46 2286 41 428 40 2290 308 422 2036 46 2037 46 2042 46 2154 41 41 58 450 303 348 2330 40 42 2297 44 638 2298 41 58 450 2036 46 2067 40 2036 46 2269 40 42 2297 44 638 2298 41 41 2291 61 2292 40 2071 44 2293 61 302 41 46 2294 40 2037 61 2036 46 2037 41 2295 61 2071 46 2073 46 2092 2176 61 91 2077 46 2095 385 2077 398 2075 93 392 2068 407 303 58 2068 61 2300 40 2295 44 2176 44 648 44 2330 41 360 58 2068 61 2036 46 2067 40 2068 41 392 2284 428 399 428 2289 428 2290 58 2051 61 2036 46 2030 360 58 2051 61 2036 46 2023 392 2176 58 2176 61 2036 46 2301 40 2295 44 2176 44 2288 61 40 41 44 2289 61 2289 41 360 58 2176 61 2302 40 2295 44 2290 44 2291 44 2036 46 2065 41 450 2148 40 2051 44 2295 61 2299 40 2295 44 2036 46 2067 41 44 2068 61 2068 44 2176 61 2176 44 2284 61 2036 46 2283 40 2284 41 44 2320 61 2036 46 2323 40 2320 41 44 399 61 2036 46 2285 40 2071 44 399 41 44 41 348 2227 40 2036 44 2071 44 2068 44 2284 61 303 44 2320 61 303 44 399 61 303 44 2289 61 303 44 2290 61 303 44 41 58 392 40 40 2320 308 422 2036 46 2037 46 2042 46 2328 41 428 40 2284 308 422 2036 46 2037 46 2042 46 2329 41 428 40 399 308 422 2036 46 2037 46 2042 46 2286 41 428 40 2290 308 422 2036 46 2037 46 2042 46 2154 41 41 58 450 303 392 2284 428 399 428 2289 428 2290 58 2051 61 2036 46 2031 360 58 2051 61 2036 46 2024 450 2036 46 2182 40 2051 44 2071 44 2068 41 348 2331 40 2036 44 2068 44 2240 41 58 450 2036 46 2020 37 123 648 58 2036 46 2067 40 2068 41 44 648 58 2036 46 2018 37 123 648 58 2240 125 44 125 348 2270 40 2036 44 2071 44 2068 44 2240 41 58 450 2148 40 2036 46 2021 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2068 41 44 2240 61 2240 44 41 348 2241 40 2036 44 2071 44 2068 41 58 450 2036 46 2182 40 2036 46 2022 44 2071 44 2068 41 348 2182 40 2036 44 466 44 2071 44 2068 41 58 450 2148 40 466 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2068 41 44 41 348 2178 40 2036 44 2071 44 2274 61 303 44 2124 61 303 44 2121 61 303 44 2152 61 303 44 2207 61 303 44 2240 61 303 44 2236 61 303 44 2179 61 303 41 58 648 392 2274 407 422 303 58 2274 61 91 2036 46 2037 46 2332 46 2333 40 2068 41 385 2068 398 2274 93 497 2036 46 2037 46 2066 40 41 311 2066 58 2100 61 2036 46 2037 46 2332 46 2334 40 2066 44 2071 46 2073 46 2092 41 2335 61 91 93 385 2068 44 2336 398 2100 46 2337 40 41 58 392 2274 407 303 428 2274 614 2336 91 648 93 58 392 2124 407 422 303 308 2336 91 648 93 631 2124 58 344 392 2121 407 422 303 308 2336 91 648 93 631 2121 58 344 392 2152 407 422 303 308 2336 91 648 93 631 2152 58 344 392 2240 407 422 303 308 2336 91 648 93 631 2240 58 344 392 2207 407 422 303 308 422 2336 91 648 93 58 344 392 2236 407 422 303 308 2336 91 648 93 631 2236 58 344 392 422 2179 428 2068 422 398 2179 58 2335 46 2062 40 2068 41 450 2335 348 2261 40 2036 44 2071 44 2214 61 302 41 58 2177 61 2036 46 2178 40 2071 44 2121 61 304 41 392 2214 308 2180 40 2177 41 631 1501 58 440 2181 40 648 37 40 2180 40 2177 41 44 2071 46 2073 46 2092 44 41 41 385 2226 398 2177 58 2036 46 2052 40 2036 46 2338 40 2071 44 2226 41 41 348 2264 40 2036 44 2071 44 2077 41 58 450 2148 40 2036 46 2032 44 2295 61 2299 40 2071 46 2073 46 2092 44 2036 46 2067 41 44 2068 61 2036 46 2067 40 2036 46 2269 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2171 61 648 41 41 44 2176 61 2287 40 2071 46 2073 46 2092 44 91 2077 46 2095 93 44 2036 46 2067 41 44 41 348 2338 40 2036 44 2071 44 2068 41 58 450 2036 46 2182 40 2036 46 2033 44 2071 44 2068 41 348 2111 40 2036 44 2109 41 58 450 648 43 2036 46 2067 40 2109 41 348 2339 40 2036 44 2340 44 2341 61 40 41 41 58 2051 61 2036 46 2034 37 123 648 58 2036 46 2067 40 2340 41 44 648 58 648 46 2103 40 2341 41 44 125 2036 46 2052 40 2051 41 
128900,Python,"class IntervalSet(object):
    __slots__ = ('intervals', 'readonly')

    def __init__(self):
        self.intervals = None
        self.readonly = False

    def __iter__(self):
        if self.intervals is not None:
            for i in self.intervals:
                for c in i:
                    yield c

    def __getitem__(self, item):
        i = 0
        for k in self:
            if i==item:
                return k
            else:
                i += 1
        return Token.INVALID_TYPE

    def addOne(self, v:int):
        self.addRange(range(v, v+1))

    def addRange(self, v:range):
        if self.intervals is None:
            self.intervals = list()
            self.intervals.append(v)
        else:
            # find insert pos
            k = 0
            for i in self.intervals:
                # distinct range -> insert
                if v.stop<i.start:
                    self.intervals.insert(k, v)
                    return
                # contiguous range -> adjust
                elif v.stop==i.start:
                    self.intervals[k] = range(v.start, i.stop)
                    return
                # overlapping range -> adjust and reduce
                elif v.start<=i.stop:
                    self.intervals[k] = range(min(i.start,v.start), max(i.stop,v.stop))
                    self.reduce(k)
                    return
                k += 1
            # greater than any existing
            self.intervals.append(v)

    def addSet(self, other:IntervalSet):
        if other.intervals is not None:
            for i in other.intervals:
                self.addRange(i)
        return self

    def reduce(self, k:int):
        # only need to reduce if k is not the last
        if k<len(self.intervals)-1:
            l = self.intervals[k]
            r = self.intervals[k+1]
            # if r contained in l
            if l.stop >= r.stop:
                self.intervals.pop(k+1)
                self.reduce(k)
            elif l.stop >= r.start:
                self.intervals[k] = range(l.start, r.stop)
                self.intervals.pop(k+1)

    def complement(self, start, stop):
        result = IntervalSet()
        result.addRange(range(start,stop+1))
        for i in self.intervals:
            result.removeRange(i)
        return result

    def __contains__(self, item):
        if self.intervals is None:
            return False
        else:
            return any(item in i for i in self.intervals)

    def __len__(self):
        return sum(len(i) for i in self.intervals)

    def removeRange(self, v):
        if v.start==v.stop-1:
            self.removeOne(v.start)
        elif self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals are ordered
                if v.stop<=i.start:
                    return
                # check for including range, split it
                elif v.start>i.start and v.stop<i.stop:
                    self.intervals[k] = range(i.start, v.start)
                    x = range(v.stop, i.stop)
                    self.intervals.insert(k, x)
                    return
                # check for included range, remove it
                elif v.start<=i.start and v.stop>=i.stop:
                    self.intervals.pop(k)
                    k -= 1  # need another pass
                # check for lower boundary
                elif v.start<i.stop:
                    self.intervals[k] = range(i.start, v.start)
                # check for upper boundary
                elif v.stop<i.stop:
                    self.intervals[k] = range(v.stop, i.stop)
                k += 1

    def removeOne(self, v):
        if self.intervals is not None:
            k = 0
            for i in self.intervals:
                # intervals is ordered
                if v<i.start:
                    return
                # check for single value range
                elif v==i.start and v==i.stop-1:
                    self.intervals.pop(k)
                    return
                # check for lower boundary
                elif v==i.start:
                    self.intervals[k] = range(i.start+1, i.stop)
                    return
                # check for upper boundary
                elif v==i.stop-1:
                    self.intervals[k] = range(i.start, i.stop-1)
                    return
                # split existing range
                elif v<i.stop-1:
                    x = range(i.start, v)
                    self.intervals[k] = range(v + 1, i.stop)
                    self.intervals.insert(k, x)
                    return
                k += 1


    def toString(self, literalNames:list, symbolicNames:list):
        if self.intervals is None:
            return ""{}""
        with StringIO() as buf:
            if len(self)>1:
                buf.write(""{"")
            first = True
            for i in self.intervals:
                for j in i:
                    if not first:
                        buf.write("", "")
                    buf.write(self.elementName(literalNames, symbolicNames, j))
                    first = False
            if len(self)>1:
                buf.write(""}"")
            return buf.getvalue()

    def elementName(self, literalNames:list, symbolicNames:list, a:int):
        if a==Token.EOF:
            return ""<EOF>""
        elif a==Token.EPSILON:
            return ""<EPSILON>""
        else:
            if a<len(literalNames) and literalNames[a] != ""<INVALID>"":
                return literalNames[a]
            if a<len(symbolicNames):
                return symbolicNames[a]
            return ""<UNKNOWN>""",1,334 2000 40 426 41 58 2001 61 40 648 44 648 41 348 2002 40 2003 41 58 2003 46 2004 61 303 2003 46 441 61 302 348 2005 40 2003 41 58 392 2003 46 2004 407 422 303 58 385 2006 398 2003 46 2004 58 385 2007 398 2006 58 500 2007 348 2008 40 2003 44 2009 41 58 2006 61 1500 385 2010 398 2003 58 392 2006 614 2009 58 450 2010 360 58 2006 636 1501 450 2011 46 2012 348 2013 40 2003 44 2014 58 404 41 58 2003 46 2015 40 2016 40 2014 44 2014 43 1501 41 41 348 2015 40 2003 44 2014 58 2016 41 58 392 2003 46 2004 407 303 58 2003 46 2004 61 411 40 41 2003 46 2004 46 2017 40 2014 41 360 58 621 2010 61 1500 385 2006 398 2003 46 2004 58 621 392 2014 46 2018 60 2006 46 2019 58 2003 46 2004 46 2020 40 2010 44 2014 41 450 621 359 2014 46 2018 614 2006 46 2019 58 2003 46 2004 91 2010 93 61 2016 40 2014 46 2019 44 2006 46 2018 41 450 621 359 2014 46 2019 620 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2021 40 2006 46 2019 44 2014 46 2019 41 44 2022 40 2006 46 2018 44 2014 46 2018 41 41 2003 46 2023 40 2010 41 450 2010 636 1501 621 2003 46 2004 46 2017 40 2014 41 348 2024 40 2003 44 2025 58 2000 41 58 392 2025 46 2004 407 422 303 58 385 2006 398 2025 46 2004 58 2003 46 2015 40 2006 41 450 2003 348 2023 40 2003 44 2010 58 404 41 58 621 392 2010 60 2026 40 2003 46 2004 41 45 1501 58 2027 61 2003 46 2004 91 2010 93 2028 61 2003 46 2004 91 2010 43 1501 93 621 392 2027 46 2018 615 2028 46 2018 58 2003 46 2004 46 2029 40 2010 43 1501 41 2003 46 2023 40 2010 41 359 2027 46 2018 615 2028 46 2019 58 2003 46 2004 91 2010 93 61 2016 40 2027 46 2019 44 2028 46 2018 41 2003 46 2004 46 2029 40 2010 43 1501 41 348 2030 40 2003 44 2019 44 2018 41 58 2031 61 2000 40 41 2031 46 2015 40 2016 40 2019 44 2018 43 1501 41 41 385 2006 398 2003 46 2004 58 2031 46 2032 40 2006 41 450 2031 348 2033 40 2003 44 2009 41 58 392 2003 46 2004 407 303 58 450 302 360 58 450 2034 40 2009 398 2006 385 2006 398 2003 46 2004 41 348 2035 40 2003 41 58 450 2036 40 2026 40 2006 41 385 2006 398 2003 46 2004 41 348 2032 40 2003 44 2014 41 58 392 2014 46 2019 614 2014 46 2018 45 1501 58 2003 46 2037 40 2014 46 2019 41 359 2003 46 2004 407 422 303 58 2010 61 1500 385 2006 398 2003 46 2004 58 621 392 2014 46 2018 620 2006 46 2019 58 450 621 359 2014 46 2019 62 2006 46 2019 308 2014 46 2018 60 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 44 2014 46 2019 41 2038 61 2016 40 2014 46 2018 44 2006 46 2018 41 2003 46 2004 46 2020 40 2010 44 2038 41 450 621 359 2014 46 2019 620 2006 46 2019 308 2014 46 2018 615 2006 46 2018 58 2003 46 2004 46 2029 40 2010 41 2010 628 1501 621 621 359 2014 46 2019 60 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 44 2014 46 2019 41 621 359 2014 46 2018 60 2006 46 2018 58 2003 46 2004 91 2010 93 61 2016 40 2014 46 2018 44 2006 46 2018 41 2010 636 1501 348 2037 40 2003 44 2014 41 58 392 2003 46 2004 407 422 303 58 2010 61 1500 385 2006 398 2003 46 2004 58 621 392 2014 60 2006 46 2019 58 450 621 359 2014 614 2006 46 2019 308 2014 614 2006 46 2018 45 1501 58 2003 46 2004 46 2029 40 2010 41 450 621 359 2014 614 2006 46 2019 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 43 1501 44 2006 46 2018 41 450 621 359 2014 614 2006 46 2018 45 1501 58 2003 46 2004 91 2010 93 61 2016 40 2006 46 2019 44 2006 46 2018 45 1501 41 450 621 359 2014 60 2006 46 2018 45 1501 58 2038 61 2016 40 2006 46 2019 44 2014 41 2003 46 2004 91 2010 93 61 2016 40 2014 43 1501 44 2006 46 2018 41 2003 46 2004 46 2020 40 2010 44 2038 41 450 2010 636 1501 348 2039 40 2003 44 2040 58 411 44 2041 58 411 41 58 392 2003 46 2004 407 303 58 450 648 497 2042 40 41 311 2043 58 392 2026 40 2003 41 62 1501 58 2043 46 2044 40 648 41 2045 61 304 385 2006 398 2003 46 2004 58 385 2046 398 2006 58 392 422 2045 58 2043 46 2044 40 648 41 2043 46 2044 40 2003 46 2047 40 2040 44 2041 44 2046 41 41 2045 61 302 392 2026 40 2003 41 62 1501 58 2043 46 2044 40 648 41 450 2043 46 2048 40 41 348 2047 40 2003 44 2040 58 411 44 2041 58 411 44 2049 58 404 41 58 392 2049 614 2011 46 2050 58 450 648 359 2049 614 2011 46 2051 58 450 648 360 58 392 2049 60 2026 40 2040 41 308 2040 91 2049 93 631 648 58 450 2040 91 2049 93 392 2049 60 2026 40 2041 41 58 450 2041 91 2049 93 450 648 
132418,Python,"class TestFormField(PostgreSQLSimpleTestCase):

    def test_valid_integer(self):
        field = pg_forms.IntegerRangeField()
        value = field.clean(['1', '2'])
        self.assertEqual(value, NumericRange(1, 2))

    def test_valid_decimal(self):
        field = pg_forms.DecimalRangeField()
        value = field.clean(['1.12345', '2.001'])
        self.assertEqual(value, NumericRange(Decimal('1.12345'), Decimal('2.001')))

    def test_valid_timestamps(self):
        field = pg_forms.DateTimeRangeField()
        value = field.clean(['01/01/2014 00:00:00', '02/02/2014 12:12:12'])
        lower = datetime.datetime(2014, 1, 1, 0, 0, 0)
        upper = datetime.datetime(2014, 2, 2, 12, 12, 12)
        self.assertEqual(value, DateTimeTZRange(lower, upper))

    def test_valid_dates(self):
        field = pg_forms.DateRangeField()
        value = field.clean(['01/01/2014', '02/02/2014'])
        lower = datetime.date(2014, 1, 1)
        upper = datetime.date(2014, 2, 2)
        self.assertEqual(value, DateRange(lower, upper))

    def test_using_split_datetime_widget(self):
        class SplitDateTimeRangeField(pg_forms.DateTimeRangeField):
            base_field = forms.SplitDateTimeField

        class SplitForm(forms.Form):
            field = SplitDateTimeRangeField()

        form = SplitForm()
        self.assertHTMLEqual(str(form), '''
            <tr>
                <th>
                <label>Field:</label>
                </th>
                <td>
                    <input id=""id_field_0_0"" name=""field_0_0"" type=""text"">
                    <input id=""id_field_0_1"" name=""field_0_1"" type=""text"">
                    <input id=""id_field_1_0"" name=""field_1_0"" type=""text"">
                    <input id=""id_field_1_1"" name=""field_1_1"" type=""text"">
                </td>
            </tr>
        ''')
        form = SplitForm({
            'field_0_0': '01/01/2014',
            'field_0_1': '00:00:00',
            'field_1_0': '02/02/2014',
            'field_1_1': '12:12:12',
        })
        self.assertTrue(form.is_valid())
        lower = datetime.datetime(2014, 1, 1, 0, 0, 0)
        upper = datetime.datetime(2014, 2, 2, 12, 12, 12)
        self.assertEqual(form.cleaned_data['field'], DateTimeTZRange(lower, upper))

    def test_none(self):
        field = pg_forms.IntegerRangeField(required=False)
        value = field.clean(['', ''])
        self.assertIsNone(value)

    def test_datetime_form_as_table(self):
        class DateTimeRangeForm(forms.Form):
            datetime_field = pg_forms.DateTimeRangeField(show_hidden_initial=True)

        form = DateTimeRangeForm()
        self.assertHTMLEqual(
            form.as_table(),
            """"""
            <tr><th>
            <label>Datetime field:</label>
            </th><td>
            <input type=""text"" name=""datetime_field_0"" id=""id_datetime_field_0"">
            <input type=""text"" name=""datetime_field_1"" id=""id_datetime_field_1"">
            <input type=""hidden"" name=""initial-datetime_field_0"" id=""initial-id_datetime_field_0"">
            <input type=""hidden"" name=""initial-datetime_field_1"" id=""initial-id_datetime_field_1"">
            </td></tr>
            """"""
        )
        form = DateTimeRangeForm({
            'datetime_field_0': '2010-01-01 11:13:00',
            'datetime_field_1': '2020-12-12 16:59:00',
        })
        self.assertHTMLEqual(
            form.as_table(),
            """"""
            <tr><th>
            <label>Datetime field:</label>
            </th><td>
            <input type=""text"" name=""datetime_field_0""
            value=""2010-01-01 11:13:00"" id=""id_datetime_field_0"">
            <input type=""text"" name=""datetime_field_1""
            value=""2020-12-12 16:59:00"" id=""id_datetime_field_1"">
            <input type=""hidden"" name=""initial-datetime_field_0"" value=""2010-01-01 11:13:00""
            id=""initial-id_datetime_field_0"">
            <input type=""hidden"" name=""initial-datetime_field_1"" value=""2020-12-12 16:59:00""
            id=""initial-id_datetime_field_1""></td></tr>
            """"""
        )

    def test_datetime_form_initial_data(self):
        class DateTimeRangeForm(forms.Form):
            datetime_field = pg_forms.DateTimeRangeField(show_hidden_initial=True)

        data = QueryDict(mutable=True)
        data.update({
            'datetime_field_0': '2010-01-01 11:13:00',
            'datetime_field_1': '',
            'initial-datetime_field_0': '2010-01-01 10:12:00',
            'initial-datetime_field_1': '',
        })
        form = DateTimeRangeForm(data=data)
        self.assertTrue(form.has_changed())

        data['initial-datetime_field_0'] = '2010-01-01 11:13:00'
        form = DateTimeRangeForm(data=data)
        self.assertFalse(form.has_changed())

    def test_rendering(self):
        class RangeForm(forms.Form):
            ints = pg_forms.IntegerRangeField()

        self.assertHTMLEqual(str(RangeForm()), '''
        <tr>
            <th><label>Ints:</label></th>
            <td>
                <input id=""id_ints_0"" name=""ints_0"" type=""number"">
                <input id=""id_ints_1"" name=""ints_1"" type=""number"">
            </td>
        </tr>
        ''')

    def test_integer_lower_bound_higher(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['10', '2'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_integer_open(self):
        field = pg_forms.IntegerRangeField()
        value = field.clean(['', '0'])
        self.assertEqual(value, NumericRange(None, 0))

    def test_integer_incorrect_data_type(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('1')
        self.assertEqual(cm.exception.messages[0], 'Enter two whole numbers.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_integer_invalid_lower(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['a', '2'])
        self.assertEqual(cm.exception.messages[0], 'Enter a whole number.')

    def test_integer_invalid_upper(self):
        field = pg_forms.IntegerRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['1', 'b'])
        self.assertEqual(cm.exception.messages[0], 'Enter a whole number.')

    def test_integer_required(self):
        field = pg_forms.IntegerRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean([1, ''])
        self.assertEqual(value, NumericRange(1, None))

    def test_decimal_lower_bound_higher(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['1.8', '1.6'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_decimal_open(self):
        field = pg_forms.DecimalRangeField()
        value = field.clean(['', '3.1415926'])
        self.assertEqual(value, NumericRange(None, Decimal('3.1415926')))

    def test_decimal_incorrect_data_type(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('1.6')
        self.assertEqual(cm.exception.messages[0], 'Enter two numbers.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_decimal_invalid_lower(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['a', '3.1415926'])
        self.assertEqual(cm.exception.messages[0], 'Enter a number.')

    def test_decimal_invalid_upper(self):
        field = pg_forms.DecimalRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['1.61803399', 'b'])
        self.assertEqual(cm.exception.messages[0], 'Enter a number.')

    def test_decimal_required(self):
        field = pg_forms.DecimalRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean(['1.61803399', ''])
        self.assertEqual(value, NumericRange(Decimal('1.61803399'), None))

    def test_date_lower_bound_higher(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2013-04-09', '1976-04-16'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_date_open(self):
        field = pg_forms.DateRangeField()
        value = field.clean(['', '2013-04-09'])
        self.assertEqual(value, DateRange(None, datetime.date(2013, 4, 9)))

    def test_date_incorrect_data_type(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('1')
        self.assertEqual(cm.exception.messages[0], 'Enter two valid dates.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_date_invalid_lower(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['a', '2013-04-09'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date.')

    def test_date_invalid_upper(self):
        field = pg_forms.DateRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2013-04-09', 'b'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date.')

    def test_date_required(self):
        field = pg_forms.DateRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean(['1976-04-16', ''])
        self.assertEqual(value, DateRange(datetime.date(1976, 4, 16), None))

    def test_date_has_changed_first(self):
        self.assertTrue(pg_forms.DateRangeField().has_changed(
            ['2010-01-01', '2020-12-12'],
            ['2010-01-31', '2020-12-12'],
        ))

    def test_date_has_changed_last(self):
        self.assertTrue(pg_forms.DateRangeField().has_changed(
            ['2010-01-01', '2020-12-12'],
            ['2010-01-01', '2020-12-31'],
        ))

    def test_datetime_lower_bound_higher(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2006-10-25 14:59', '2006-10-25 14:58'])
        self.assertEqual(cm.exception.messages[0], 'The start of the range must not exceed the end of the range.')
        self.assertEqual(cm.exception.code, 'bound_ordering')

    def test_datetime_open(self):
        field = pg_forms.DateTimeRangeField()
        value = field.clean(['', '2013-04-09 11:45'])
        self.assertEqual(value, DateTimeTZRange(None, datetime.datetime(2013, 4, 9, 11, 45)))

    def test_datetime_incorrect_data_type(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean('2013-04-09 11:45')
        self.assertEqual(cm.exception.messages[0], 'Enter two valid date/times.')
        self.assertEqual(cm.exception.code, 'invalid')

    def test_datetime_invalid_lower(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['45', '2013-04-09 11:45'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date/time.')

    def test_datetime_invalid_upper(self):
        field = pg_forms.DateTimeRangeField()
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['2013-04-09 11:45', 'sweet pickles'])
        self.assertEqual(cm.exception.messages[0], 'Enter a valid date/time.')

    def test_datetime_required(self):
        field = pg_forms.DateTimeRangeField(required=True)
        with self.assertRaises(exceptions.ValidationError) as cm:
            field.clean(['', ''])
        self.assertEqual(cm.exception.messages[0], 'This field is required.')
        value = field.clean(['2013-04-09 11:45', ''])
        self.assertEqual(value, DateTimeTZRange(datetime.datetime(2013, 4, 9, 11, 45), None))

    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Johannesburg')
    def test_datetime_prepare_value(self):
        field = pg_forms.DateTimeRangeField()
        value = field.prepare_value(
            DateTimeTZRange(datetime.datetime(2015, 5, 22, 16, 6, 33, tzinfo=timezone.utc), None)
        )
        self.assertEqual(value, [datetime.datetime(2015, 5, 22, 18, 6, 33), None])

    def test_datetime_has_changed_first(self):
        self.assertTrue(pg_forms.DateTimeRangeField().has_changed(
            ['2010-01-01 00:00', '2020-12-12 00:00'],
            ['2010-01-31 23:00', '2020-12-12 00:00'],
        ))

    def test_datetime_has_changed_last(self):
        self.assertTrue(pg_forms.DateTimeRangeField().has_changed(
            ['2010-01-01 00:00', '2020-12-12 00:00'],
            ['2010-01-01 00:00', '2020-12-31 23:00'],
        ))

    def test_model_field_formfield_integer(self):
        model_field = pg_fields.IntegerRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.IntegerRangeField)
        self.assertEqual(form_field.range_kwargs, {})

    def test_model_field_formfield_biginteger(self):
        model_field = pg_fields.BigIntegerRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.IntegerRangeField)
        self.assertEqual(form_field.range_kwargs, {})

    def test_model_field_formfield_float(self):
        model_field = pg_fields.DecimalRangeField(default_bounds='()')
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DecimalRangeField)
        self.assertEqual(form_field.range_kwargs, {'bounds': '()'})

    def test_model_field_formfield_date(self):
        model_field = pg_fields.DateRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DateRangeField)
        self.assertEqual(form_field.range_kwargs, {})

    def test_model_field_formfield_datetime(self):
        model_field = pg_fields.DateTimeRangeField()
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DateTimeRangeField)
        self.assertEqual(
            form_field.range_kwargs,
            {'bounds': pg_fields.ranges.CANONICAL_RANGE_BOUNDS},
        )

    def test_model_field_formfield_datetime_default_bounds(self):
        model_field = pg_fields.DateTimeRangeField(default_bounds='[]')
        form_field = model_field.formfield()
        self.assertIsInstance(form_field, pg_forms.DateTimeRangeField)
        self.assertEqual(form_field.range_kwargs, {'bounds': '[]'})

    def test_model_field_with_default_bounds(self):
        field = pg_forms.DateTimeRangeField(default_bounds='[]')
        value = field.clean(['2014-01-01 00:00:00', '2014-02-03 12:13:14'])
        lower = datetime.datetime(2014, 1, 1, 0, 0, 0)
        upper = datetime.datetime(2014, 2, 3, 12, 13, 14)
        self.assertEqual(value, DateTimeTZRange(lower, upper, '[]'))

    def test_has_changed(self):
        for field, value in (
            (pg_forms.DateRangeField(), ['2010-01-01', '2020-12-12']),
            (pg_forms.DateTimeRangeField(), ['2010-01-01 11:13', '2020-12-12 14:52']),
            (pg_forms.IntegerRangeField(), [1, 2]),
            (pg_forms.DecimalRangeField(), ['1.12345', '2.001']),
        ):
            with self.subTest(field=field.__class__.__name__):
                self.assertTrue(field.has_changed(None, value))
                self.assertTrue(field.has_changed([value[0], ''], value))
                self.assertTrue(field.has_changed(['', value[1]], value))
                self.assertFalse(field.has_changed(value, value))",1,334 2000 40 2001 41 58 348 2002 40 2003 41 58 2004 61 2005 46 2006 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 1501 44 1502 41 41 348 2011 40 2003 41 58 2004 61 2005 46 2012 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 2013 40 648 41 44 2013 40 648 41 41 41 348 2014 40 2003 41 58 2004 61 2005 46 2015 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2016 61 2017 46 2017 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 2018 61 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 44 1503 41 2003 46 2009 40 2007 44 2019 40 2016 44 2018 41 41 348 2020 40 2003 41 58 2004 61 2005 46 2021 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2016 61 2017 46 2022 40 1505 44 1501 44 1501 41 2018 61 2017 46 2022 40 1505 44 1502 44 1502 41 2003 46 2009 40 2007 44 2023 40 2016 44 2018 41 41 348 2024 40 2003 41 58 334 2025 40 2005 46 2015 41 58 2026 61 2027 46 2028 334 2029 40 2027 46 2030 41 58 2004 61 2025 40 41 2031 61 2029 40 41 2003 46 2032 40 2033 40 2031 41 44 648 41 2031 61 2029 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2003 46 2034 40 2031 46 2035 40 41 41 2016 61 2017 46 2017 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 2018 61 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 44 1503 41 2003 46 2009 40 2031 46 2036 91 648 93 44 2019 40 2016 44 2018 41 41 348 2037 40 2003 41 58 2004 61 2005 46 2006 40 2038 61 302 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2039 40 2007 41 348 2040 40 2003 41 58 334 2041 40 2027 46 2030 41 58 2042 61 2005 46 2015 40 2043 61 304 41 2031 61 2041 40 41 2003 46 2032 40 2031 46 2044 40 41 44 648 41 2031 61 2041 40 123 648 58 648 44 648 58 648 44 125 41 2003 46 2032 40 2031 46 2044 40 41 44 648 41 348 2045 40 2003 41 58 334 2041 40 2027 46 2030 41 58 2042 61 2005 46 2015 40 2043 61 304 41 2046 61 2047 40 415 61 304 41 2046 46 2048 40 123 648 58 648 44 648 58 648 44 648 58 648 44 648 58 648 44 125 41 2031 61 2041 40 2046 61 2046 41 2003 46 2034 40 2031 46 2049 40 41 41 2046 91 648 93 61 648 2031 61 2041 40 2046 61 2046 41 2003 46 2050 40 2031 46 2049 40 41 41 348 2051 40 2003 41 58 334 2052 40 2027 46 2030 41 58 2053 61 2005 46 2006 40 41 2003 46 2032 40 2033 40 2052 40 41 41 44 648 41 348 2054 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2062 40 2003 41 58 2004 61 2005 46 2006 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 303 44 1500 41 41 348 2063 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2064 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2065 40 2003 41 58 2004 61 2005 46 2006 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2066 40 2003 41 58 2004 61 2005 46 2006 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 1501 44 648 93 41 2003 46 2009 40 2007 44 2010 40 1501 44 303 41 41 348 2067 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2068 40 2003 41 58 2004 61 2005 46 2012 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 303 44 2013 40 648 41 41 41 348 2069 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2070 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2071 40 2003 41 58 2004 61 2005 46 2012 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2072 40 2003 41 58 2004 61 2005 46 2012 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2010 40 2013 40 648 41 44 303 41 41 348 2073 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2074 40 2003 41 58 2004 61 2005 46 2021 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2023 40 303 44 2017 46 2022 40 1505 44 1502 44 1502 41 41 41 348 2075 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2076 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2077 40 2003 41 58 2004 61 2005 46 2021 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2078 40 2003 41 58 2004 61 2005 46 2021 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2023 40 2017 46 2022 40 1505 44 1502 44 1503 41 44 303 41 41 348 2079 40 2003 41 58 2003 46 2034 40 2005 46 2021 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2080 40 2003 41 58 2003 46 2034 40 2005 46 2021 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2081 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2082 40 2003 41 58 2004 61 2005 46 2015 40 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2019 40 303 44 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 41 41 41 348 2083 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 648 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2003 46 2009 40 2058 46 2059 46 2061 44 648 41 348 2084 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2085 40 2003 41 58 2004 61 2005 46 2015 40 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 348 2086 40 2003 41 58 2004 61 2005 46 2015 40 2038 61 304 41 497 2003 46 2055 40 2056 46 2057 41 311 2058 58 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2058 46 2059 46 2060 91 1500 93 44 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2003 46 2009 40 2007 44 2019 40 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 41 44 303 41 41 64 2087 40 2088 61 304 44 2089 61 648 41 348 2090 40 2003 41 58 2004 61 2005 46 2015 40 41 2007 61 2004 46 2091 40 2019 40 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1502 44 1503 44 2092 61 2093 46 2094 41 44 303 41 41 2003 46 2009 40 2007 44 91 2017 46 2017 40 1505 44 1502 44 1503 44 1503 44 1502 44 1503 41 44 303 93 41 348 2095 40 2003 41 58 2003 46 2034 40 2005 46 2015 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2096 40 2003 41 58 2003 46 2034 40 2005 46 2015 40 41 46 2049 40 91 648 44 648 93 44 91 648 44 648 93 44 41 41 348 2097 40 2003 41 58 2098 61 2099 46 2006 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2006 41 2003 46 2009 40 2100 46 2103 44 123 125 41 348 2104 40 2003 41 58 2098 61 2099 46 2105 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2006 41 2003 46 2009 40 2100 46 2103 44 123 125 41 348 2106 40 2003 41 58 2098 61 2099 46 2012 40 2107 61 648 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2012 41 2003 46 2009 40 2100 46 2103 44 123 648 58 648 125 41 348 2108 40 2003 41 58 2098 61 2099 46 2021 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2021 41 2003 46 2009 40 2100 46 2103 44 123 125 41 348 2109 40 2003 41 58 2098 61 2099 46 2015 40 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2015 41 2003 46 2009 40 2100 46 2103 44 123 648 58 2099 46 2110 46 2111 125 44 41 348 2112 40 2003 41 58 2098 61 2099 46 2015 40 2107 61 648 41 2100 61 2098 46 2101 40 41 2003 46 2102 40 2100 44 2005 46 2015 41 2003 46 2009 40 2100 46 2103 44 123 648 58 648 125 41 348 2113 40 2003 41 58 2004 61 2005 46 2015 40 2107 61 648 41 2007 61 2004 46 2008 40 91 648 44 648 93 41 2016 61 2017 46 2017 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 2018 61 2017 46 2017 40 1505 44 1502 44 1502 44 1503 44 1503 44 1503 41 2003 46 2009 40 2007 44 2019 40 2016 44 2018 44 648 41 41 348 2114 40 2003 41 58 385 2004 44 2007 398 40 40 2005 46 2021 40 41 44 91 648 44 648 93 41 44 40 2005 46 2015 40 41 44 91 648 44 648 93 41 44 40 2005 46 2006 40 41 44 91 1501 44 1502 93 41 44 40 2005 46 2012 40 41 44 91 648 44 648 93 41 44 41 58 497 2003 46 2115 40 2004 61 2004 46 2116 46 2117 41 58 2003 46 2034 40 2004 46 2049 40 303 44 2007 41 41 2003 46 2034 40 2004 46 2049 40 91 2007 91 1500 93 44 648 93 44 2007 41 41 2003 46 2034 40 2004 46 2049 40 91 648 44 2007 91 1501 93 93 44 2007 41 41 2003 46 2050 40 2004 46 2049 40 2007 44 2007 41 41 
