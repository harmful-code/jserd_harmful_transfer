id,language,text,smell,tokens
71610,C#,"public class TypeExtensionsTest
{
    [ConditionalFact]
    public void GetSequenceType_finds_element_type()
    {
        Assert.Equal(typeof(int), typeof(IEnumerable<int>).GetSequenceType());
        Assert.Equal(typeof(int), typeof(IQueryable<int>).GetSequenceType());
        Assert.Equal(typeof(int), typeof(IAsyncEnumerable<int>).GetSequenceType());
        Assert.Equal(typeof(int), typeof(List<int>).GetSequenceType());
    }

    [ConditionalFact]
    public void IsInteger_returns_true_only_for_integer_types()
    {
        Assert.True(typeof(long).IsInteger());
        Assert.True(typeof(int).IsInteger());
        Assert.True(typeof(short).IsInteger());
        Assert.True(typeof(byte).IsInteger());
        Assert.True(typeof(ulong).IsInteger());
        Assert.True(typeof(uint).IsInteger());
        Assert.True(typeof(ushort).IsInteger());
        Assert.True(typeof(sbyte).IsInteger());
        Assert.True(typeof(long?).IsInteger());
        Assert.True(typeof(int?).IsInteger());
        Assert.True(typeof(short?).IsInteger());
        Assert.True(typeof(byte?).IsInteger());
        Assert.True(typeof(long?).IsInteger());
        Assert.True(typeof(int?).IsInteger());
        Assert.True(typeof(short?).IsInteger());
        Assert.True(typeof(byte?).IsInteger());
        Assert.False(typeof(bool).IsInteger());
        Assert.False(typeof(bool?).IsInteger());
        Assert.False(typeof(decimal).IsInteger());
        Assert.False(typeof(float).IsInteger());
        Assert.False(typeof(SomeEnum).IsInteger());
    }

    public class CtorFixture
    {
        public CtorFixture()
        {
        }

        // ReSharper disable once UnusedParameter.Local
        public CtorFixture(int frob)
        {
        }
    }

    [ConditionalFact]
    public void GetDeclaredConstructor_finds_ctor_no_args()
    {
        var constructorInfo = typeof(CtorFixture).GetDeclaredConstructor(null);

        Assert.NotNull(constructorInfo);
        Assert.Empty(constructorInfo.GetParameters());
    }

    [ConditionalFact]
    public void GetDeclaredConstructor_returns_null_when_no_match()
        => Assert.Null(typeof(CtorFixture).GetDeclaredConstructor(new[] { typeof(string) }));

    [ConditionalFact]
    public void GetDeclaredConstructor_finds_ctor_args()
    {
        var constructorInfo = typeof(CtorFixture).GetDeclaredConstructor(new[] { typeof(int) });

        Assert.NotNull(constructorInfo);
        Assert.Single(constructorInfo.GetParameters());
    }

    [ConditionalFact]
    public void IsNullableType_when_value_or_nullable_type()
    {
        Assert.True(typeof(string).IsNullableType());
        Assert.False(typeof(int).IsNullableType());
        Assert.False(typeof(Guid).IsNullableType());
        Assert.True(typeof(int?).IsNullableType());
    }

    [ConditionalFact]
    public void Element_type_should_return_input_type_when_not_sequence_type()
        => Assert.Equal(typeof(string), typeof(string));

    [ConditionalFact]
    public void Get_any_property_returns_any_property()
    {
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""ElDiabloEnElOjo"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""ANightIn"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""MySister"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""TinyTears"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""SnowyInFSharpMinor"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""Seaweed"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""VertrauenII"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""TalkToMe"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""NoMoreAffairs"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""Singing"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""TravellingLight"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""CherryBlossoms"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""ShesGone"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""Mistakes"").DeclaringType);
        Assert.Null(typeof(TindersticksII).GetAnyProperty(""VertrauenIII""));
        Assert.Same(typeof(TindersticksII), typeof(TindersticksII).GetAnyProperty(""SleepySong"").DeclaringType);

        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""ElDiabloEnElOjo"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""ANightIn"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""MySister"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""TinyTears"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""SnowyInFSharpMinor"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""Seaweed"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""VertrauenII"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""TalkToMe"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""NoMoreAffairs"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""Singing"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""TravellingLight"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""CherryBlossoms"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""ShesGone"").DeclaringType);
        Assert.Same(typeof(TindersticksII), typeof(TindersticksIIVinyl).GetAnyProperty(""Mistakes"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIIVinyl).GetAnyProperty(""VertrauenIII"").DeclaringType);
        Assert.Throws<AmbiguousMatchException>(() => typeof(TindersticksIICd).GetAnyProperty(""SleepySong""));

        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""ANightIn"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""MySister"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""TinyTears"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""SnowyInFSharpMinor"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""Seaweed"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""VertrauenII"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""TalkToMe"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""NoMoreAffairs"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""Singing"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""TravellingLight"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""CherryBlossoms"").DeclaringType);
        Assert.Same(typeof(TindersticksIIVinyl), typeof(TindersticksIICd).GetAnyProperty(""ShesGone"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""Mistakes"").DeclaringType);
        Assert.Same(typeof(TindersticksIICd), typeof(TindersticksIICd).GetAnyProperty(""VertrauenIII"").DeclaringType);
        Assert.Throws<AmbiguousMatchException>(() => typeof(TindersticksIICd).GetAnyProperty(""SleepySong""));
    }

    public class TindersticksII
    {
        public virtual int ElDiabloEnElOjo { get; set; }
        internal virtual int ANightIn { get; set; }

        // ReSharper disable once UnusedMember.Local
        private int MySister { get; set; }

        protected virtual int TinyTears { get; set; }
        public virtual int SnowyInFSharpMinor { get; private set; }
        public virtual int Seaweed { private get; set; }
        public virtual int VertrauenII { get; protected set; }
        public virtual int TalkToMe { protected get; set; }

        public virtual int NoMoreAffairs
            => 1995;

        public virtual int Singing
        {
            // ReSharper disable once ValueParameterNotUsed
            set { }
        }

        public virtual int TravellingLight { get; set; }
        public int CherryBlossoms { get; set; }
        public int ShesGone { get; set; }
        public virtual int Mistakes { get; set; }
        public int SleepySong { get; set; }
    }

    public class TindersticksIIVinyl : TindersticksII
    {
        public override int ElDiabloEnElOjo { get; set; }
        internal override int ANightIn { get; set; }
        private int MySister { get; set; }
        protected override int TinyTears { get; set; }

        public override int SnowyInFSharpMinor
            => 1995;

        public override int Seaweed
        {
            set { }
        }

        public override int VertrauenII { get; protected set; }
        public override int TalkToMe { protected get; set; }

        public override int NoMoreAffairs
            => 1995;

        public override int Singing
        {
            set { }
        }

        public new virtual int TravellingLight { get; set; }
        public new virtual int CherryBlossoms { get; set; }
        public new int ShesGone { get; set; }
        public virtual int VertrauenIII { get; set; }
        public static new int SleepySong { get; set; }
    }

    public class TindersticksIICd : TindersticksIIVinyl
    {
        internal override int ANightIn { get; set; }
        private int MySister { get; set; }
        protected override int TinyTears { get; set; }

        public override int SnowyInFSharpMinor
            => 1995;

        public override int Seaweed
        {
            set { }
        }

        public override int VertrauenII { get; protected set; }
        public override int TalkToMe { protected get; set; }

        public override int NoMoreAffairs
            => 1995;

        public override int Singing
        {
            set { }
        }

        public override int TravellingLight { get; set; }
        public override int CherryBlossoms { get; set; }
        public override int Mistakes { get; set; }
        public override int VertrauenIII { get; set; }
        public static new int SleepySong { get; set; }
    }

    [ConditionalFact]
    public void TryGetElementType_returns_element_type_for_given_interface()
    {
        Assert.Same(typeof(string), typeof(ICollection<string>).TryGetElementType(typeof(ICollection<>)));
        Assert.Same(typeof(Random), typeof(IObservable<Random>).TryGetElementType(typeof(IObservable<>)));
        Assert.Same(typeof(int), typeof(List<int>).TryGetElementType(typeof(IList<>)));
        Assert.Same(
            typeof(Random), typeof(MultipleImplementor<Random, string>).TryGetElementType(typeof(IObservable<>)));
        Assert.Same(typeof(string), typeof(MultipleImplementor<Random, string>).TryGetElementType(typeof(IEnumerable<>)));
    }

    [ConditionalFact]
    public void TryGetElementType_returns_element_type_for_given_class()
    {
        Assert.Same(typeof(string), typeof(Collection<string>).TryGetElementType(typeof(Collection<>)));
        Assert.Same(typeof(int), typeof(List<int>).TryGetElementType(typeof(List<>)));
    }

    [ConditionalFact]
    public void TryGetElementType_returns_null_if_type_is_generic_type_definition()
        => Assert.Null(typeof(ICollection<>).TryGetElementType(typeof(ICollection<>)));

    [ConditionalFact]
    public void TryGetElementType_returns_null_if_type_doesnt_implement_interface()
    {
        Assert.Null(typeof(ICollection<string>).TryGetElementType(typeof(IObservable<>)));
        Assert.Null(typeof(Random).TryGetElementType(typeof(IObservable<>)));
    }

    [ConditionalFact]
    public void TryGetElementType_returns_null_if_type_doesnt_implement_class()
    {
        Assert.Null(typeof(ICollection<string>).TryGetElementType(typeof(List<>)));
        Assert.Null(typeof(Random).TryGetElementType(typeof(Collection<>)));
    }

    // CodePlex 2014
    [ConditionalFact]
    public void TryGetElementType_returns_null_when_ICollection_implemented_more_than_once()
        => Assert.Null(typeof(RoleCollection2014).TryGetElementType(typeof(ICollection<>)));

    private class MultipleImplementor<TRandom, TElement> : IObservable<TRandom>, IEnumerable<TElement>
        where TRandom : Random
    {
        public IEnumerator<TElement> GetEnumerator()
            => throw new NotImplementedException();

        IEnumerator IEnumerable.GetEnumerator()
            => GetEnumerator();

        public IDisposable Subscribe(IObserver<TRandom> observer)
            => throw new NotImplementedException();
    }

    private interface IRole2014
    {
        string Permissions { get; set; }
    }

    private interface IRoleCollection2014 : ICollection<IRole2014>
    {
    }

#pragma warning disable CA1061 // Do not hide base class methods
    private class RoleCollection2014 : List<Role2014>, IRoleCollection2014
    {
        public new IEnumerator<IRole2014> GetEnumerator()
            => throw new NotImplementedException();

        public void Add(IRole2014 item)
            => throw new NotImplementedException();

        public bool Contains(IRole2014 item)
            => throw new NotImplementedException();

        public void CopyTo(IRole2014[] array, int arrayIndex)
            => throw new NotImplementedException();

        public bool Remove(IRole2014 item)
            => throw new NotImplementedException();

        public bool IsReadOnly { get; private set; }
    }
#pragma warning restore CA1061 // Do not hide base class methods

    private class Role2014 : IRole2014
    {
        public int RoleId { get; set; }
        public string Permissions { get; set; }
    }

    [ConditionalFact]
    public void GetBaseTypes_return_all_base_types()
    {
        Assert.Equal(3, typeof(MultipleHierarchy).GetBaseTypes().Count());
        Assert.Contains(typeof(Some), typeof(MultipleHierarchy).GetBaseTypes());
        Assert.Contains(typeof(Base), typeof(MultipleHierarchy).GetBaseTypes());
        Assert.Contains(typeof(object), typeof(MultipleHierarchy).GetBaseTypes());
    }

    [ConditionalFact]
    public void GetBaseTypes_return_empty_if_no_base_type_exists()
        => Assert.False(typeof(object).GetBaseTypes().Any());

    private class MultipleHierarchy : Some
    {
    }

    private class Some : Base
    {
    }

    private class Base
    {
    }

    // ReSharper restore InconsistentNaming

    [ConditionalFact]
    public void Can_get_default_value_for_type()
    {
        Assert.False((bool)typeof(bool).GetDefaultValue());
        Assert.Equal((sbyte)0, typeof(sbyte).GetDefaultValue());
        Assert.Equal((short)0, typeof(short).GetDefaultValue());
        Assert.Equal(0, typeof(int).GetDefaultValue());
        Assert.Equal((long)0, typeof(long).GetDefaultValue());
        Assert.Equal((byte)0, typeof(byte).GetDefaultValue());
        Assert.Equal((ushort)0, typeof(ushort).GetDefaultValue());
        Assert.Equal((uint)0, typeof(uint).GetDefaultValue());
        Assert.Equal((ulong)0, typeof(ulong).GetDefaultValue());
        Assert.Equal((float)0.0, typeof(float).GetDefaultValue());
        Assert.Equal(0.0, typeof(double).GetDefaultValue());
        Assert.Equal((char)0, typeof(char).GetDefaultValue());
#pragma warning disable IDE0034 // Simplify 'default' expression - GetDefaultValue returns object causing inference of default(object)
        Assert.Equal(default(Guid), typeof(Guid).GetDefaultValue());
        Assert.Equal(default(DateTime), typeof(DateTime).GetDefaultValue());
        Assert.Equal(default(DateTimeOffset), typeof(DateTimeOffset).GetDefaultValue());
        Assert.Equal(default(SomeStruct), typeof(SomeStruct).GetDefaultValue());
        Assert.Equal(default(SomeEnum), typeof(SomeEnum).GetDefaultValue());
#pragma warning restore IDE0034 // Simplify 'default' expression
        Assert.Null(typeof(string).GetDefaultValue());
        Assert.Null(typeof(bool?).GetDefaultValue());
        Assert.Null(typeof(sbyte?).GetDefaultValue());
        Assert.Null(typeof(short?).GetDefaultValue());
        Assert.Null(typeof(int?).GetDefaultValue());
        Assert.Null(typeof(long?).GetDefaultValue());
        Assert.Null(typeof(byte?).GetDefaultValue());
        Assert.Null(typeof(ushort?).GetDefaultValue());
        Assert.Null(typeof(uint?).GetDefaultValue());
        Assert.Null(typeof(ulong?).GetDefaultValue());
        Assert.Null(typeof(float?).GetDefaultValue());
        Assert.Null(typeof(double?).GetDefaultValue());
        Assert.Null(typeof(char?).GetDefaultValue());
        Assert.Null(typeof(Guid?).GetDefaultValue());
        Assert.Null(typeof(DateTime?).GetDefaultValue());
        Assert.Null(typeof(DateTimeOffset?).GetDefaultValue());
        Assert.Null(typeof(SomeStruct?).GetDefaultValue());
        Assert.Null(typeof(SomeEnum?).GetDefaultValue());
    }

    private struct SomeStruct
    {
        public int Value1 { get; set; }
        public long Value2 { get; set; }
    }

    private enum SomeEnum
    {
        Default
    }

    [ConditionalFact]
    public void GetConstructibleTypes_works()
    {
        var assembly = MockAssembly.Create(
            typeof(SomeAbstractClass),
            typeof(SomeGenericClass<>),
            typeof(SomeGenericClass<int>),
            typeof(SomeTypeWithoutDefaultCtor));

        var types = assembly.GetConstructibleTypes().Select(t => t.AsType()).ToList();

        Assert.DoesNotContain(typeof(SomeAbstractClass), types);
        Assert.DoesNotContain(typeof(SomeGenericClass<>), types);
        Assert.Contains(typeof(SomeGenericClass<int>), types);
        Assert.Contains(typeof(SomeTypeWithoutDefaultCtor), types);
    }

    private abstract class SomeAbstractClass
    {
    }

    private class SomeGenericClass<T>
    {
    }

    private class SomeTypeWithoutDefaultCtor
    {
        public SomeTypeWithoutDefaultCtor(int value)
        {
        }
    }

    [ConditionalFact]
    public void GetNamespaces_works()
    {
        // Predefined Types
        Assert.Empty(typeof(int).GetNamespaces().ToArray());
        Assert.Equal(new[] { ""System"" }, typeof(Guid).GetNamespaces().ToArray());
        Assert.Equal(new[] { ""System.Collections.Generic"", ""System"" }, typeof(List<Guid>).GetNamespaces().ToArray());

        Assert.Equal(new[] { ""Microsoft.EntityFrameworkCore.Utilities"" }, typeof(A).GetNamespaces().ToArray());
        Assert.Equal(
            new[] { ""System.Collections.Generic"", ""Microsoft.EntityFrameworkCore.Utilities"" },
            typeof(List<A>).GetNamespaces().ToArray());
        Assert.Equal(
            new[] { ""System.Collections.Generic"", ""System"", ""System.Collections.Generic"", ""Microsoft.EntityFrameworkCore.Utilities"" },
            typeof(Dictionary<Version, List<A>>).GetNamespaces().ToArray());

        Assert.Equal(new[] { ""Microsoft.EntityFrameworkCore.Utilities"", ""System"" }, typeof(Outer<Guid>).GetNamespaces().ToArray());
        Assert.Equal(
            new[] { ""Microsoft.EntityFrameworkCore.Utilities"", ""System.Collections.Generic"", ""System"" },
            typeof(Outer<List<Guid>>).GetNamespaces().ToArray());
    }

    private class Outer<T>
    {
    }

    private class A
    {
    }
}",0,439 334 2000 123 91 2001 93 439 492 2002 40 41 123 2003 46 2004 40 478 40 404 41 44 478 40 2005 60 404 62 41 46 2006 40 41 41 59 2003 46 2004 40 478 40 404 41 44 478 40 2007 60 404 62 41 46 2006 40 41 41 59 2003 46 2004 40 478 40 404 41 44 478 40 2008 60 404 62 41 46 2006 40 41 41 59 2003 46 2004 40 478 40 404 41 44 478 40 2009 60 404 62 41 46 2006 40 41 41 59 125 91 2001 93 439 492 2010 40 41 123 2011 46 304 40 478 40 413 41 46 2012 40 41 41 59 2011 46 304 40 478 40 404 41 46 2012 40 41 41 59 2011 46 304 40 478 40 453 41 46 2012 40 41 41 59 2011 46 304 40 478 40 326 41 46 2012 40 41 41 59 2011 46 304 40 478 40 480 41 46 2012 40 41 41 59 2011 46 304 40 478 40 479 41 46 2012 40 41 41 59 2011 46 304 40 478 40 488 41 46 2012 40 41 41 59 2011 46 304 40 478 40 451 41 46 2012 40 41 41 59 2011 46 304 40 478 40 413 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 404 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 453 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 326 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 413 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 404 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 453 63 41 46 2012 40 41 41 59 2011 46 304 40 478 40 326 63 41 46 2012 40 41 41 59 2011 46 302 40 478 40 323 41 46 2012 40 41 41 59 2011 46 302 40 478 40 323 63 41 46 2012 40 41 41 59 2011 46 302 40 478 40 345 41 46 2012 40 41 41 59 2011 46 302 40 478 40 384 41 46 2012 40 41 41 59 2011 46 302 40 478 40 2013 41 46 2012 40 41 41 59 125 439 334 2014 123 439 2014 40 41 123 125 621 439 2014 40 404 2015 41 123 125 125 91 2001 93 439 492 2016 40 41 123 490 2017 61 478 40 2014 41 46 2018 40 424 41 59 2019 46 2020 40 2017 41 59 2019 46 2021 40 2017 46 2022 40 41 41 59 125 91 2001 93 439 492 2023 40 41 619 2024 46 2025 40 478 40 2014 41 46 2026 40 418 91 93 123 478 40 461 41 125 41 41 59 91 2001 93 439 492 2027 40 41 123 490 2028 61 478 40 2014 41 46 2026 40 418 91 93 123 478 40 404 41 125 41 59 2024 46 2029 40 2028 41 59 2024 46 2030 40 2028 46 2031 40 41 41 59 125 91 2001 93 439 492 2032 40 41 123 2024 46 304 40 478 40 461 41 46 2033 40 41 41 59 2024 46 302 40 478 40 404 41 46 2033 40 41 41 59 2024 46 302 40 478 40 2034 41 46 2033 40 41 41 59 2024 46 304 40 478 40 404 63 41 46 2033 40 41 41 59 125 91 2001 93 439 492 2035 40 41 619 2024 46 2036 40 478 40 461 41 44 478 40 461 41 41 59 91 2001 93 439 492 2037 40 41 123 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2025 40 478 40 2039 41 46 2040 40 648 41 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2039 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2039 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2042 41 46 2040 40 648 41 46 2041 41 59 2024 46 2043 60 2044 62 40 40 41 619 478 40 2045 41 46 2040 40 648 41 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2042 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2038 40 478 40 2045 41 44 478 40 2045 41 46 2040 40 648 41 46 2041 41 59 2024 46 2043 60 2044 62 40 40 41 619 478 40 2045 41 46 2040 40 648 41 41 59 125 439 334 2046 123 439 491 404 2047 123 2048 59 2049 59 125 406 491 404 2050 123 2051 59 2052 59 125 621 437 404 2053 123 2054 59 2055 59 125 438 491 404 2056 123 2057 59 2058 59 125 439 491 404 2059 123 2060 59 437 2061 59 125 439 491 404 2062 123 437 2063 59 2064 59 125 439 491 404 2065 123 2066 59 438 2067 59 125 439 491 404 2068 123 438 2069 59 2070 59 125 439 491 404 2071 619 1505 59 439 491 404 2072 123 621 2073 123 125 125 439 491 404 2074 123 2075 59 2076 59 125 439 404 2077 123 2078 59 2079 59 125 439 404 2080 123 2081 59 2082 59 125 439 491 404 2083 123 2084 59 2085 59 125 439 404 2086 123 2087 59 2088 59 125 125 439 334 2089 58 2046 123 439 431 404 2090 123 2091 59 2092 59 125 406 431 404 2093 123 2094 59 2095 59 125 437 404 2096 123 2097 59 2098 59 125 438 431 404 2099 123 2100 59 2101 59 125 439 431 404 2102 619 1505 59 439 431 404 2103 123 2104 123 125 125 439 431 404 2105 123 2106 59 438 2107 59 125 439 431 404 2108 123 438 2109 59 2110 59 125 439 431 404 2111 619 1505 59 439 431 404 2112 123 2113 123 125 125 439 418 491 404 2114 123 2115 59 2116 59 125 439 418 491 404 2117 123 2118 59 2119 59 125 439 418 404 2120 123 2121 59 2122 59 125 439 491 404 2123 123 2124 59 2125 59 125 439 457 418 404 2126 123 2127 59 2128 59 125 125 439 334 2129 58 2089 123 406 431 404 2130 123 2131 59 2132 59 125 437 404 2133 123 2134 59 2135 59 125 438 431 404 2136 123 2137 59 2138 59 125 439 431 404 2139 619 1505 59 439 431 404 2140 123 2141 123 125 125 439 431 404 2142 123 2143 59 438 2144 59 125 439 431 404 2145 123 438 2146 59 2147 59 125 439 431 404 2148 619 1505 59 439 431 404 2149 123 2150 123 125 125 439 431 404 2151 123 2152 59 2153 59 125 439 431 404 2154 123 2155 59 2156 59 125 439 431 404 2157 123 2158 59 2159 59 125 439 431 404 2160 123 2161 59 2162 59 125 439 457 418 404 2163 123 2164 59 2165 59 125 125 91 2001 93 439 492 2166 40 41 123 2024 46 2167 40 478 40 461 41 44 478 40 2168 60 461 62 41 46 2169 40 478 40 2168 60 62 41 41 41 59 2024 46 2167 40 478 40 2170 41 44 478 40 2171 60 2170 62 41 46 2169 40 478 40 2171 60 62 41 41 41 59 2024 46 2167 40 478 40 404 41 44 478 40 2172 60 404 62 41 46 2169 40 478 40 2173 60 62 41 41 41 59 2024 46 2167 40 478 40 2170 41 44 478 40 2174 60 2170 44 461 62 41 46 2169 40 478 40 2171 60 62 41 41 41 59 2024 46 2167 40 478 40 461 41 44 478 40 2174 60 2170 44 461 62 41 46 2169 40 478 40 2175 60 62 41 41 41 59 125 91 2001 93 439 492 2176 40 41 123 2024 46 2177 40 478 40 461 41 44 478 40 2178 60 461 62 41 46 2179 40 478 40 2178 60 62 41 41 41 59 2024 46 2177 40 478 40 404 41 44 478 40 2180 60 404 62 41 46 2179 40 478 40 2180 60 62 41 41 41 59 125 91 2001 93 439 492 2181 40 41 619 2024 46 2025 40 478 40 2182 60 62 41 46 2183 40 478 40 2182 60 62 41 41 41 59 91 2001 93 439 492 2184 40 41 123 2024 46 2025 40 478 40 2182 60 461 62 41 46 2183 40 478 40 2185 60 62 41 41 41 59 2024 46 2025 40 478 40 2186 41 46 2183 40 478 40 2185 60 62 41 41 41 59 125 91 2001 93 439 492 2187 40 41 123 2024 46 2025 40 478 40 2182 60 461 62 41 46 2183 40 478 40 2188 60 62 41 41 41 59 2024 46 2025 40 478 40 2189 41 46 2183 40 478 40 2190 60 62 41 41 41 59 125 621 91 2001 93 439 492 2191 40 41 619 2024 46 2025 40 478 40 2192 41 46 2183 40 478 40 2182 60 62 41 41 41 59 437 334 2193 60 2194 44 2195 62 58 2196 60 2194 62 44 2197 60 2195 62 2198 2194 58 2199 123 439 2200 60 2195 62 2201 40 41 619 469 418 2202 40 41 59 2200 2197 46 2201 40 41 619 2201 40 41 59 439 2203 2204 40 2205 60 2194 62 2206 41 619 469 418 2202 40 41 59 125 437 405 2207 123 461 2208 123 2209 59 2210 59 125 125 437 405 2211 58 2182 60 2207 62 123 125 35 435 2212 2213 2214 621 437 334 2192 58 2215 60 2216 62 44 2211 123 439 418 2217 60 2207 62 2218 40 41 619 469 418 2219 40 41 59 439 492 2220 40 2207 2221 41 619 469 418 2219 40 41 59 439 323 2222 40 2207 2221 41 619 469 418 2219 40 41 59 439 492 2223 40 2207 91 93 310 44 404 2224 41 619 469 418 2219 40 41 59 439 323 2225 40 2207 2221 41 619 469 418 2219 40 41 59 439 323 2226 123 2227 59 437 2228 59 125 125 35 435 2212 2229 2214 621 437 334 2216 58 2207 123 439 404 2230 123 2231 59 2232 59 125 439 461 2233 123 2234 59 2235 59 125 125 91 2001 93 439 492 2236 40 41 123 2024 46 2036 40 1502 44 478 40 2237 41 46 2238 40 41 46 2239 40 41 41 59 2024 46 2240 40 478 40 2241 41 44 478 40 2237 41 46 2238 40 41 41 59 2024 46 2240 40 478 40 2242 41 44 478 40 2237 41 46 2238 40 41 41 59 2024 46 2240 40 478 40 426 41 44 478 40 2237 41 46 2238 40 41 41 59 125 91 2001 93 439 492 2243 40 41 619 2024 46 302 40 478 40 426 41 46 2244 40 41 46 2245 40 41 41 59 437 334 2246 58 2247 123 125 437 334 2247 58 2248 123 125 437 334 2248 123 125 621 91 2001 93 439 492 2249 40 41 123 2024 46 302 40 40 323 41 478 40 323 41 46 2250 40 41 41 59 2024 46 2036 40 40 451 41 1500 44 478 40 451 41 46 2250 40 41 41 59 2024 46 2036 40 40 453 41 1500 44 478 40 453 41 46 2250 40 41 41 59 2024 46 2036 40 1500 44 478 40 404 41 46 2250 40 41 41 59 2024 46 2036 40 40 413 41 1500 44 478 40 413 41 46 2250 40 41 41 59 2024 46 2036 40 40 326 41 1500 44 478 40 326 41 46 2250 40 41 41 59 2024 46 2036 40 40 488 41 1500 44 478 40 488 41 46 2250 40 41 41 59 2024 46 2036 40 40 479 41 1500 44 478 40 479 41 46 2250 40 41 41 59 2024 46 2036 40 40 480 41 1500 44 478 40 480 41 46 2250 40 41 41 59 2024 46 2036 40 40 384 41 1500 44 478 40 384 41 46 2250 40 41 41 59 2024 46 2036 40 1500 44 478 40 356 41 46 2250 40 41 41 59 2024 46 2036 40 40 330 41 1500 44 478 40 330 41 46 2250 40 41 41 59 35 435 2212 2213 2251 621 2024 46 2036 40 349 40 2252 41 44 478 40 2252 41 46 2250 40 41 41 59 2024 46 2036 40 349 40 2253 41 44 478 40 2253 41 46 2250 40 41 41 59 2024 46 2036 40 349 40 2254 41 44 478 40 2254 41 46 2250 40 41 41 59 2024 46 2036 40 349 40 2255 41 44 478 40 2255 41 46 2250 40 41 41 59 2024 46 2036 40 349 40 2256 41 44 478 40 2256 41 46 2250 40 41 41 59 35 435 2212 2229 2251 621 2024 46 2025 40 478 40 461 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 323 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 451 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 453 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 404 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 413 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 326 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 488 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 479 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 480 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 384 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 356 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 330 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 2252 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 2253 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 2254 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 2255 63 41 46 2250 40 41 41 59 2024 46 2025 40 478 40 2256 63 41 46 2250 40 41 41 59 125 437 462 2257 123 439 404 2258 123 2259 59 2260 59 125 439 413 2261 123 2262 59 2263 59 125 125 437 370 2264 123 2265 125 91 2001 93 439 492 2266 40 41 123 490 2267 61 2268 46 2269 40 478 40 2270 41 44 478 40 2271 60 62 41 44 478 40 2271 60 404 62 41 44 478 40 2272 41 41 59 490 2273 61 2267 46 2274 40 41 46 2275 40 2276 619 2276 46 2277 40 41 41 46 2278 40 41 59 2024 46 2279 40 478 40 2270 41 44 2273 41 59 2024 46 2279 40 478 40 2271 60 62 41 44 2273 41 59 2024 46 2280 40 478 40 2271 60 404 62 41 44 2273 41 59 2024 46 2280 40 478 40 2272 41 44 2273 41 59 125 437 305 334 2281 123 125 437 334 2282 60 2283 62 123 125 437 334 2284 123 439 2284 40 404 2285 41 123 125 125 91 2001 93 439 492 2286 40 41 123 621 2024 46 2287 40 478 40 404 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 125 44 478 40 2290 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 44 648 125 44 478 40 2215 60 2290 62 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 125 44 478 40 2291 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 44 648 125 44 478 40 2215 60 2291 62 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 44 648 44 648 44 648 125 44 478 40 2292 60 2293 44 2215 60 2291 640 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 44 648 125 44 478 40 2294 60 2290 62 41 46 2288 40 41 46 2289 40 41 41 59 2024 46 2036 40 418 91 93 123 648 44 648 44 648 125 44 478 40 2294 60 2215 60 2290 640 41 46 2288 40 41 46 2289 40 41 41 59 125 437 334 2295 60 2283 62 123 125 437 334 2296 123 125 125 
69388,C#,"    private class GenericStringTestEntityTypeBuilder<TEntity> : GenericTestEntityTypeBuilder<TEntity>
        where TEntity : class
    {
        public GenericStringTestEntityTypeBuilder(EntityTypeBuilder<TEntity> entityTypeBuilder)
            : base(entityTypeBuilder)
        {
        }

        protected override TestEntityTypeBuilder<TEntity> Wrap(EntityTypeBuilder<TEntity> entityTypeBuilder)
            => new GenericStringTestEntityTypeBuilder<TEntity>(entityTypeBuilder);

        public override TestOwnedNavigationBuilder<TEntity, TRelatedEntity> OwnsOne<TRelatedEntity>(
            Expression<Func<TEntity, TRelatedEntity?>> navigationExpression)
            where TRelatedEntity : class
            => new GenericStringTestOwnedNavigationBuilder<TEntity, TRelatedEntity>(
                EntityTypeBuilder.OwnsOne<TRelatedEntity>(navigationExpression.GetMemberAccess().GetSimpleMemberName()));

        public override TestEntityTypeBuilder<TEntity> OwnsOne<TRelatedEntity>(
            Expression<Func<TEntity, TRelatedEntity?>> navigationExpression,
            Action<TestOwnedNavigationBuilder<TEntity, TRelatedEntity>> buildAction)
            where TRelatedEntity : class
            => Wrap(
                EntityTypeBuilder.OwnsOne<TRelatedEntity>(
                    navigationExpression.GetMemberAccess().GetSimpleMemberName(),
                    r => buildAction(new GenericStringTestOwnedNavigationBuilder<TEntity, TRelatedEntity>(r))));

        public override TestOwnedNavigationBuilder<TEntity, TRelatedEntity> OwnsMany<TRelatedEntity>(
            Expression<Func<TEntity, IEnumerable<TRelatedEntity>?>> navigationExpression)
            where TRelatedEntity : class
            => new GenericStringTestOwnedNavigationBuilder<TEntity, TRelatedEntity>(
                EntityTypeBuilder.OwnsMany<TRelatedEntity>(navigationExpression.GetMemberAccess().GetSimpleMemberName()));

        public override TestEntityTypeBuilder<TEntity> OwnsMany<TRelatedEntity>(
            Expression<Func<TEntity, IEnumerable<TRelatedEntity>?>> navigationExpression,
            Action<TestOwnedNavigationBuilder<TEntity, TRelatedEntity>> buildAction)
            where TRelatedEntity : class
            => Wrap(
                EntityTypeBuilder.OwnsMany<TRelatedEntity>(
                    navigationExpression.GetMemberAccess().GetSimpleMemberName(),
                    r => buildAction(new GenericStringTestOwnedNavigationBuilder<TEntity, TRelatedEntity>(r))));

        public override TestReferenceNavigationBuilder<TEntity, TRelatedEntity> HasOne<TRelatedEntity>(
            Expression<Func<TEntity, TRelatedEntity?>>? navigationExpression = null)
            where TRelatedEntity : class
            => new GenericStringTestReferenceNavigationBuilder<TEntity, TRelatedEntity>(
                EntityTypeBuilder.HasOne<TRelatedEntity>(
                    navigationExpression?.GetMemberAccess().GetSimpleMemberName()));

        public override TestCollectionNavigationBuilder<TEntity, TRelatedEntity> HasMany<TRelatedEntity>(
            Expression<Func<TEntity, IEnumerable<TRelatedEntity>?>>? navigationExpression = null)
            where TRelatedEntity : class
            => new GenericStringTestCollectionNavigationBuilder<TEntity, TRelatedEntity>(
                EntityTypeBuilder.HasMany<TRelatedEntity>(
                    navigationExpression?.GetMemberAccess().GetSimpleMemberName()));
    }",0,437 334 2000 60 2001 62 58 2002 60 2001 62 2003 2001 58 334 123 439 2000 40 2004 60 2001 62 2005 41 58 320 40 2005 41 123 125 438 431 2006 60 2001 62 2007 40 2004 60 2001 62 2005 41 619 418 2000 60 2001 62 40 2005 41 59 439 431 2008 60 2001 44 2009 62 2010 60 2009 62 40 2011 60 2012 60 2001 44 2009 63 640 2013 41 2003 2009 58 334 619 418 2014 60 2001 44 2009 62 40 2004 46 2010 60 2009 62 40 2013 46 2015 40 41 46 2016 40 41 41 41 59 439 431 2006 60 2001 62 2010 60 2009 62 40 2011 60 2012 60 2001 44 2009 63 640 2013 44 2017 60 2008 60 2001 44 2009 640 2018 41 2003 2009 58 334 619 2007 40 2004 46 2010 60 2009 62 40 2013 46 2015 40 41 46 2016 40 41 44 2019 619 2018 40 418 2014 60 2001 44 2009 62 40 2019 41 41 41 41 59 439 431 2008 60 2001 44 2009 62 2020 60 2009 62 40 2011 60 2012 60 2001 44 2021 60 2009 62 63 640 2013 41 2003 2009 58 334 619 418 2014 60 2001 44 2009 62 40 2004 46 2020 60 2009 62 40 2013 46 2015 40 41 46 2016 40 41 41 41 59 439 431 2006 60 2001 62 2020 60 2009 62 40 2011 60 2012 60 2001 44 2021 60 2009 62 63 640 2013 44 2017 60 2008 60 2001 44 2009 640 2018 41 2003 2009 58 334 619 2007 40 2004 46 2020 60 2009 62 40 2013 46 2015 40 41 46 2016 40 41 44 2019 619 2018 40 418 2014 60 2001 44 2009 62 40 2019 41 41 41 41 59 439 431 2022 60 2001 44 2009 62 2023 60 2009 62 40 2011 60 2012 60 2001 44 2009 63 640 63 2013 61 424 41 2003 2009 58 334 619 418 2024 60 2001 44 2009 62 40 2004 46 2023 60 2009 62 40 2013 634 2015 40 41 46 2016 40 41 41 41 59 439 431 2025 60 2001 44 2009 62 2026 60 2009 62 40 2011 60 2012 60 2001 44 2021 60 2009 62 63 640 63 2013 61 424 41 2003 2009 58 334 619 418 2027 60 2001 44 2009 62 40 2004 46 2026 60 2009 62 40 2013 634 2015 40 41 46 2016 40 41 41 41 59 125 
71695,C#,"    protected class OptionalAk2Derived : OptionalAk2
    {
        public override bool Equals(object obj)
            => base.Equals(obj as OptionalAk2Derived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
71707,C#,"    protected class OptionalSingleAk1MoreDerived : OptionalSingleAk1Derived
    {
        private Guid? _moreDerivedRootId;
        private Root _moreDerivedRoot;

        public Guid? MoreDerivedRootId
        {
            get => _moreDerivedRootId;
            set => SetWithNotify(value, ref _moreDerivedRootId);
        }

        public Root MoreDerivedRoot
        {
            get => _moreDerivedRoot;
            set => SetWithNotify(value, ref _moreDerivedRoot);
        }

        public override bool Equals(object obj)
            => base.Equals(obj as OptionalSingleAk1MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 437 2002 63 2003 59 437 2004 2005 59 439 2002 63 2006 123 2007 619 2003 59 2008 619 2009 40 2010 44 442 2003 41 59 125 439 2004 2011 123 2012 619 2005 59 2013 619 2014 40 2015 44 442 2005 41 59 125 439 431 323 2016 40 426 2017 41 619 320 46 2016 40 2017 311 2000 41 59 439 431 404 2018 40 41 619 320 46 2018 40 41 59 125 
68699,C#,"    private sealed class Indenter : IDisposable
    {
        private readonly IndentedStringBuilder _stringBuilder;

        public Indenter(IndentedStringBuilder stringBuilder)
        {
            _stringBuilder = stringBuilder;

            _stringBuilder.IncrementIndent();
        }

        public void Dispose()
            => _stringBuilder.DecrementIndent();
    }",0,437 452 334 2000 58 2001 123 437 441 2002 2003 59 439 2000 40 2002 2004 41 123 2003 61 2004 59 2003 46 2005 40 41 59 125 439 492 2006 40 41 619 2003 46 2007 40 41 59 125 
71686,C#,"    protected class Optional1Derived : Optional1
    {
        public override bool Equals(object obj)
            => base.Equals(obj as Optional1Derived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
79807,C#,"    public sealed class Block : IEquatable<Block>, IInventory
    {
        /// <summary>
        /// The header of the block.
        /// </summary>
        public Header Header;

        /// <summary>
        /// The transaction list of the block.
        /// </summary>
        public Transaction[] Transactions;

        public UInt256 Hash => Header.Hash;

        /// <summary>
        /// The version of the block.
        /// </summary>
        public uint Version => Header.Version;

        /// <summary>
        /// The hash of the previous block.
        /// </summary>
        public UInt256 PrevHash => Header.PrevHash;

        /// <summary>
        /// The merkle root of the transactions.
        /// </summary>
        public UInt256 MerkleRoot => Header.MerkleRoot;

        /// <summary>
        /// The timestamp of the block.
        /// </summary>
        public ulong Timestamp => Header.Timestamp;

        /// <summary>
        /// The random number of the block.
        /// </summary>
        public ulong Nonce => Header.Nonce;

        /// <summary>
        /// The index of the block.
        /// </summary>
        public uint Index => Header.Index;

        /// <summary>
        /// The primary index of the consensus node that generated this block.
        /// </summary>
        public byte PrimaryIndex => Header.PrimaryIndex;

        /// <summary>
        /// The multi-signature address of the consensus nodes that generates the next block.
        /// </summary>
        public UInt160 NextConsensus => Header.NextConsensus;

        /// <summary>
        /// The witness of the block.
        /// </summary>
        public Witness Witness => Header.Witness;

        InventoryType IInventory.InventoryType => InventoryType.Block;
        public int Size => Header.Size + Transactions.GetVarSize();
        Witness[] IVerifiable.Witnesses { get => ((IVerifiable)Header).Witnesses; set => throw new NotSupportedException(); }

        public void Deserialize(BinaryReader reader)
        {
            Header = reader.ReadSerializable<Header>();
            Transactions = reader.ReadSerializableArray<Transaction>(ushort.MaxValue);
            if (Transactions.Distinct().Count() != Transactions.Length)
                throw new FormatException();
            if (MerkleTree.ComputeRoot(Transactions.Select(p => p.Hash).ToArray()) != Header.MerkleRoot)
                throw new FormatException();
        }

        void IVerifiable.DeserializeUnsigned(BinaryReader reader) => throw new NotSupportedException();

        public bool Equals(Block other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return Hash.Equals(other.Hash);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Block);
        }

        public override int GetHashCode()
        {
            return Hash.GetHashCode();
        }

        UInt160[] IVerifiable.GetScriptHashesForVerifying(DataCache snapshot) => ((IVerifiable)Header).GetScriptHashesForVerifying(snapshot);

        public void Serialize(BinaryWriter writer)
        {
            writer.Write(Header);
            writer.Write(Transactions);
        }

        void IVerifiable.SerializeUnsigned(BinaryWriter writer) => ((IVerifiable)Header).SerializeUnsigned(writer);

        /// <summary>
        /// Converts the block to a JSON object.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used during the conversion.</param>
        /// <returns>The block represented by a JSON object.</returns>
        public JObject ToJson(ProtocolSettings settings)
        {
            JObject json = Header.ToJson(settings);
            json[""size""] = Size;
            json[""tx""] = Transactions.Select(p => p.ToJson(settings)).ToArray();
            return json;
        }

        internal bool Verify(ProtocolSettings settings, DataCache snapshot)
        {
            return Header.Verify(settings, snapshot);
        }

        internal bool Verify(ProtocolSettings settings, DataCache snapshot, HeaderCache headerCache)
        {
            return Header.Verify(settings, snapshot, headerCache);
        }
    }",0,439 452 334 2000 58 2001 60 2000 62 44 2002 123 612 439 2003 2003 59 612 439 2004 91 93 2005 59 439 2006 2007 619 2003 46 2007 59 612 439 479 2008 619 2003 46 2008 59 612 439 2006 2009 619 2003 46 2009 59 612 439 2006 2010 619 2003 46 2010 59 612 439 480 2011 619 2003 46 2011 59 612 439 480 2012 619 2003 46 2012 59 612 439 479 2013 619 2003 46 2013 59 612 439 326 2014 619 2003 46 2014 59 612 439 2015 2016 619 2003 46 2016 59 612 439 2017 2017 619 2003 46 2017 59 2018 2002 46 2018 619 2018 46 2000 59 439 404 2019 619 2003 46 2019 43 2005 46 2020 40 41 59 2017 91 93 2021 46 2022 123 2023 619 40 40 2021 41 2003 41 46 2022 59 2024 619 469 418 2025 40 41 59 125 439 492 2026 40 2027 2028 41 123 2003 61 2028 46 2029 60 2003 62 40 41 59 2005 61 2028 46 2030 60 2004 62 40 488 46 2031 41 59 392 40 2005 46 2032 40 41 46 2033 40 41 631 2005 46 2034 41 469 418 2035 40 41 59 392 40 2036 46 2037 40 2005 46 2038 40 2039 619 2039 46 2007 41 46 2040 40 41 41 631 2003 46 2010 41 469 418 2035 40 41 59 125 492 2021 46 2041 40 2027 2028 41 619 469 418 2042 40 41 59 439 323 2043 40 2000 2044 41 123 392 40 2045 40 467 44 2044 41 41 450 473 59 392 40 2044 407 424 41 450 380 59 450 2007 46 2043 40 2044 46 2007 41 59 125 439 431 323 2043 40 426 2046 41 123 450 2043 40 2046 311 2000 41 59 125 439 431 404 2047 40 41 123 450 2007 46 2047 40 41 59 125 2015 91 93 2021 46 2048 40 2049 2050 41 619 40 40 2021 41 2003 41 46 2048 40 2050 41 59 439 492 2051 40 2052 2053 41 123 2053 46 2054 40 2003 41 59 2053 46 2054 40 2005 41 59 125 492 2021 46 2055 40 2052 2053 41 619 40 40 2021 41 2003 41 46 2055 40 2053 41 59 612 439 2056 2057 40 2058 2059 41 123 2056 2060 61 2003 46 2057 40 2059 41 59 2060 91 648 93 61 2019 59 2060 91 648 93 61 2005 46 2061 40 2062 619 2062 46 2057 40 2059 41 41 46 2063 40 41 59 450 2060 59 125 406 323 2064 40 2058 2059 44 2049 2050 41 123 450 2003 46 2064 40 2059 44 2050 41 59 125 406 323 2064 40 2058 2059 44 2049 2050 44 2065 2066 41 123 450 2003 46 2064 40 2059 44 2050 44 2066 41 59 125 125 
71693,C#,"    protected class OptionalAk1MoreDerived : OptionalAk1Derived
    {
        public override bool Equals(object obj)
            => base.Equals(obj as OptionalAk1MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
79835,C#,"    internal abstract class PriorityMailbox : MailboxType, IProducesMessageQueue<PriorityMessageQueue>
    {
        public PriorityMailbox(Akka.Actor.Settings settings, Config config)
            : base(settings, config)
        {
        }

        public override IMessageQueue Create(IActorRef owner, ActorSystem system)
        {
            return new PriorityMessageQueue(ShallDrop, IsHighPriority);
        }

        internal protected virtual bool IsHighPriority(object message) => false;
        internal protected virtual bool ShallDrop(object message, IEnumerable queue) => false;
    }",0,406 305 334 2000 58 2001 44 2002 60 2003 62 123 439 2000 40 2004 46 2005 46 2006 2007 44 2008 2009 41 58 320 40 2007 44 2009 41 123 125 439 431 2010 2011 40 2012 2013 44 2014 2015 41 123 450 418 2003 40 2016 44 2017 41 59 125 406 438 491 323 2018 40 426 2019 41 619 380 59 406 438 491 323 2020 40 426 2019 44 2021 2022 41 619 380 59 125 
70300,C#,"        private class ConstructorTestContextWithSets : DbContext
        {
            public ConstructorTestContextWithSets(DbContextOptions options)
                : base(options)
            {
            }

            public DbSet<Product> Products { get; set; }
        }",0,437 334 2000 58 2001 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 125 439 2004 60 2005 62 2006 123 2007 59 2008 59 125 125 
68780,C#,"    private class FakeRelationalCommandBuilderFactory : IRelationalCommandBuilderFactory
    {
        public IRelationalCommandBuilder Create()
            => new FakeRelationalCommandBuilder();
    }",0,437 334 2000 58 2001 123 439 2002 2003 40 41 619 418 2004 40 41 59 125 
70309,C#,"        private class FakeEntityMaterializerSource : EntityMaterializerSource
        {
            public FakeEntityMaterializerSource(EntityMaterializerSourceDependencies dependencies)
                : base(dependencies)
            {
            }
        }",0,437 334 2000 58 2001 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 125 125 
71614,C#,"    private class SomeTypeWithoutDefaultCtor
    {
        public SomeTypeWithoutDefaultCtor(int value)
        {
        }
    }",0,437 334 2000 123 439 2000 40 404 2001 41 123 125 125 
71685,C#,"    protected class Optional1 : NotifyingEntity
    {
        private int _id;
        private int? _parentId;
        private Root _parent;
        private IEnumerable<Optional2> _children = new ObservableHashSet<Optional2>(LegacyReferenceEqualityComparer.Instance);

        private ICollection<OptionalComposite2> _compositeChildren =
            new ObservableHashSet<OptionalComposite2>(LegacyReferenceEqualityComparer.Instance);

        public int Id
        {
            get => _id;
            set => SetWithNotify(value, ref _id);
        }

        public int? ParentId
        {
            get => _parentId;
            set => SetWithNotify(value, ref _parentId);
        }

        public Root Parent
        {
            get => _parent;
            set => SetWithNotify(value, ref _parent);
        }

        public IEnumerable<Optional2> Children
        {
            get => _children;
            set => SetWithNotify(value, ref _children);
        }

        public ICollection<OptionalComposite2> CompositeChildren
        {
            get => _compositeChildren;
            set => SetWithNotify(value, ref _compositeChildren);
        }

        public override bool Equals(object obj)
        {
            var other = obj as Optional1;
            return _id == other?.Id;
        }

        public override int GetHashCode()
            => _id;
    }",0,438 334 2000 58 2001 123 437 404 2002 59 437 404 63 2003 59 437 2004 2005 59 437 2006 60 2007 62 2008 61 418 2009 60 2007 62 40 2010 46 2011 41 59 437 2012 60 2013 62 2014 61 418 2009 60 2013 62 40 2010 46 2011 41 59 439 404 2015 123 2016 619 2002 59 2017 619 2018 40 2019 44 442 2002 41 59 125 439 404 63 2020 123 2021 619 2003 59 2022 619 2023 40 2024 44 442 2003 41 59 125 439 2004 2025 123 2026 619 2005 59 2027 619 2028 40 2029 44 442 2005 41 59 125 439 2006 60 2007 62 2030 123 2031 619 2008 59 2032 619 2033 40 2034 44 442 2008 41 59 125 439 2012 60 2013 62 2035 123 2036 619 2014 59 2037 619 2038 40 2039 44 442 2014 41 59 125 439 431 323 2040 40 426 2041 41 123 490 2042 61 2041 311 2000 59 450 2002 614 2042 634 2015 59 125 439 431 404 2043 40 41 619 2002 59 125 
69527,C#,"public class RelationalCommandBuilderFactory : IRelationalCommandBuilderFactory
{
    /// <summary>
    ///     <para>
    ///         Constructs a new <see cref=""RelationalCommand"" />.
    ///     </para>
    ///     <para>
    ///         This type is typically used by database providers (and other extensions). It is generally
    ///         not used in application code.
    ///     </para>
    /// </summary>
    /// <param name=""dependencies"">Parameter object containing dependencies for this service.</param>
    public RelationalCommandBuilderFactory(
        RelationalCommandBuilderDependencies dependencies)
    {
        Dependencies = dependencies;
    }

    /// <summary>
    ///     Relational provider-specific dependencies for this service.
    /// </summary>
    protected virtual RelationalCommandBuilderDependencies Dependencies { get; }

    /// <summary>
    ///     Creates a new <see cref=""IRelationalCommandBuilder"" />.
    /// </summary>
    /// <returns>The newly created builder.</returns>
    public virtual IRelationalCommandBuilder Create()
        => new RelationalCommandBuilder(Dependencies);
}",0,439 334 2000 58 2001 123 612 439 2000 40 2002 2003 41 123 2004 61 2003 59 125 612 438 491 2002 2005 123 2006 59 125 612 439 491 2007 2008 40 41 619 418 2009 40 2005 41 59 125 
70159,C#,"    public class ExecutionStrategyFixture : SharedStoreFixtureBase<DbContext>
    {
        protected override bool UsePooling
            => false;

        protected override string StoreName { get; } = nameof(ExecutionStrategyTest);

        public new RelationalTestStore TestStore
            => (RelationalTestStore)base.TestStore;

        public TestSqlLoggerFactory TestSqlLoggerFactory
            => (TestSqlLoggerFactory)ListLoggerFactory;

        protected override ITestStoreFactory TestStoreFactory
            => SqlServerTestStoreFactory.Instance;

        protected override Type ContextType { get; } = typeof(ExecutionStrategyContext);

        protected override IServiceCollection AddServices(IServiceCollection serviceCollection)
            => base.AddServices(serviceCollection)
                .AddSingleton<IRelationalTransactionFactory, TestRelationalTransactionFactory>()
                .AddScoped<ISqlServerConnection, TestSqlServerConnection>()
                .AddSingleton<IRelationalCommandBuilderFactory, TestRelationalCommandBuilderFactory>();

        public override DbContextOptionsBuilder AddOptions(DbContextOptionsBuilder builder)
        {
            var options = base.AddOptions(builder);
            new SqlServerDbContextOptionsBuilder(options).MaxBatchSize(1);
            return options;
        }

        protected override bool ShouldLogCategory(string logCategory)
            => logCategory == DbLoggerCategory.Infrastructure.Name;
    }",0,439 334 2000 58 2001 60 2002 62 123 438 431 323 2003 619 380 59 438 431 461 2004 123 2005 59 125 61 2006 40 2007 41 59 439 418 2008 2009 619 40 2008 41 320 46 2009 59 439 2010 2010 619 40 2010 41 2011 59 438 431 2012 2013 619 2014 46 2015 59 438 431 2016 2017 123 2018 59 125 61 478 40 2019 41 59 438 431 2020 2021 40 2020 2022 41 619 320 46 2021 40 2022 41 46 2023 60 2024 44 2025 62 40 41 46 2026 60 2027 44 2028 62 40 41 46 2023 60 2029 44 2030 62 40 41 59 439 431 2031 2032 40 2031 2033 41 123 490 2034 61 320 46 2032 40 2033 41 59 418 2035 40 2034 41 46 2036 40 1501 41 59 450 2034 59 125 438 431 323 2037 40 461 2038 41 619 2038 614 2039 46 2040 46 2041 59 125 
70301,C#,"        private class CustomInMemoryTableFactory : InMemoryTableFactory
        {
            public CustomInMemoryTableFactory(ILoggingOptions loggingOptions, IInMemorySingletonOptions options)
                : base(loggingOptions, options)
            {
            }
        }",0,437 334 2000 58 2001 123 439 2000 40 2002 2003 44 2004 2005 41 58 320 40 2003 44 2005 41 123 125 125 
79760,C#,"    public class MerkleTree
    {
        private readonly MerkleTreeNode root;

        /// <summary>
        /// The depth of the tree.
        /// </summary>
        public int Depth { get; }

        internal MerkleTree(UInt256[] hashes)
        {
            this.root = Build(hashes.Select(p => new MerkleTreeNode { Hash = p }).ToArray());
            if (root is null) return;
            int depth = 1;
            for (MerkleTreeNode i = root; i.LeftChild != null; i = i.LeftChild)
                depth++;
            this.Depth = depth;
        }

        private static MerkleTreeNode Build(MerkleTreeNode[] leaves)
        {
            if (leaves.Length == 0) return null;
            if (leaves.Length == 1) return leaves[0];

            Span<byte> buffer = stackalloc byte[64];
            MerkleTreeNode[] parents = new MerkleTreeNode[(leaves.Length + 1) / 2];
            for (int i = 0; i < parents.Length; i++)
            {
                parents[i] = new MerkleTreeNode
                {
                    LeftChild = leaves[i * 2]
                };
                leaves[i * 2].Parent = parents[i];
                if (i * 2 + 1 == leaves.Length)
                {
                    parents[i].RightChild = parents[i].LeftChild;
                }
                else
                {
                    parents[i].RightChild = leaves[i * 2 + 1];
                    leaves[i * 2 + 1].Parent = parents[i];
                }
                parents[i].Hash = Concat(buffer, parents[i].LeftChild.Hash, parents[i].RightChild.Hash);
            }
            return Build(parents); //TailCall
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static UInt256 Concat(Span<byte> buffer, UInt256 hash1, UInt256 hash2)
        {
            hash1.ToArray().CopyTo(buffer);
            hash2.ToArray().CopyTo(buffer[32..]);

            return new UInt256(Crypto.Hash256(buffer));
        }

        /// <summary>
        /// Computes the root of the hash tree.
        /// </summary>
        /// <param name=""hashes"">The leaves of the hash tree.</param>
        /// <returns>The root of the hash tree.</returns>
        public static UInt256 ComputeRoot(UInt256[] hashes)
        {
            if (hashes.Length == 0) return UInt256.Zero;
            if (hashes.Length == 1) return hashes[0];
            MerkleTree tree = new(hashes);
            return tree.root.Hash;
        }

        private static void DepthFirstSearch(MerkleTreeNode node, IList<UInt256> hashes)
        {
            if (node.LeftChild == null)
            {
                // if left is null, then right must be null
                hashes.Add(node.Hash);
            }
            else
            {
                DepthFirstSearch(node.LeftChild, hashes);
                DepthFirstSearch(node.RightChild, hashes);
            }
        }

        /// <summary>
        /// Gets all nodes of the hash tree in depth-first order.
        /// </summary>
        /// <returns>All nodes of the hash tree.</returns>
        public UInt256[] ToHashArray()
        {
            if (root is null) return Array.Empty<UInt256>();
            List<UInt256> hashes = new();
            DepthFirstSearch(root, hashes);
            return hashes.ToArray();
        }

        /// <summary>
        /// Trims the hash tree using the specified bit array.
        /// </summary>
        /// <param name=""flags"">The bit array to be used.</param>
        public void Trim(BitArray flags)
        {
            if (root is null) return;
            flags = new BitArray(flags)
            {
                Length = 1 << (Depth - 1)
            };
            Trim(root, 0, Depth, flags);
        }

        private static void Trim(MerkleTreeNode node, int index, int depth, BitArray flags)
        {
            if (depth == 1) return;
            if (node.LeftChild == null) return; // if left is null, then right must be null
            if (depth == 2)
            {
                if (!flags.Get(index * 2) && !flags.Get(index * 2 + 1))
                {
                    node.LeftChild = null;
                    node.RightChild = null;
                }
            }
            else
            {
                Trim(node.LeftChild, index * 2, depth - 1, flags);
                Trim(node.RightChild, index * 2 + 1, depth - 1, flags);
                if (node.LeftChild.LeftChild == null && node.RightChild.RightChild == null)
                {
                    node.LeftChild = null;
                    node.RightChild = null;
                }
            }
        }
    }",0,439 334 2000 123 437 441 2001 2002 59 612 439 404 2003 123 2004 59 125 406 2000 40 2005 91 93 2006 41 123 467 46 2002 61 2007 40 2006 46 2008 40 2009 619 418 2001 123 2010 61 2009 125 41 46 2011 40 41 41 59 392 40 2002 407 424 41 450 59 404 2012 61 1501 59 385 40 2001 2013 61 2002 59 2013 46 2014 631 424 59 2013 61 2013 46 2014 41 2012 637 59 467 46 2003 61 2012 59 125 437 457 2001 2015 40 2001 91 93 2016 41 123 392 40 2016 46 2017 614 1500 41 450 424 59 392 40 2016 46 2017 614 1501 41 450 2016 91 1500 93 59 2018 60 326 62 2019 61 456 326 91 1503 93 59 2001 91 93 2020 61 418 2001 91 40 2016 46 2017 43 1501 41 47 1502 93 59 385 40 404 2021 61 1500 59 2021 60 2020 46 2017 59 2021 637 41 123 2020 91 2021 93 61 418 2001 123 2022 61 2016 91 2021 42 1502 93 125 59 2016 91 2021 42 1502 93 46 2023 61 2020 91 2021 93 59 392 40 2021 42 1502 43 1501 614 2016 46 2017 41 123 2020 91 2021 93 46 2024 61 2020 91 2021 93 46 2025 59 125 360 123 2020 91 2021 93 46 2026 61 2016 91 2021 42 1502 43 1501 93 59 2016 91 2021 42 1502 43 1501 93 46 2023 61 2020 91 2021 93 59 125 2020 91 2021 93 46 2027 61 2028 40 2019 44 2020 91 2021 93 46 2029 46 2027 44 2020 91 2021 93 46 2030 46 2027 41 59 125 450 2015 40 2020 41 59 621 125 91 2031 40 2032 46 2033 41 93 437 457 2005 2034 40 2035 60 326 62 2036 44 2005 2037 44 2005 2038 41 123 2037 46 2039 40 41 46 2040 40 2036 41 59 2038 46 2039 40 41 46 2040 40 2036 91 1503 93 41 59 450 418 2005 40 2041 46 2042 40 2036 41 41 59 125 612 439 457 2005 2043 40 2005 91 93 2006 41 123 392 40 2006 46 2044 614 1500 41 450 2005 46 2045 59 392 40 2006 46 2044 614 1501 41 450 2006 91 1500 93 59 2000 2046 61 418 40 2006 41 59 450 2046 46 2002 46 2047 59 125 437 457 492 2048 40 2001 2049 44 2050 60 2005 62 2006 41 123 392 40 2049 46 2051 614 424 41 123 621 2006 46 2052 40 2049 46 2053 41 59 125 360 123 2048 40 2049 46 2051 44 2006 41 59 2048 40 2049 46 2054 44 2006 41 59 125 125 612 439 2005 91 93 2055 40 41 123 392 40 2002 407 424 41 450 2056 46 2057 60 2005 62 40 41 59 2058 60 2005 62 2006 61 418 40 41 59 2048 40 2002 44 2006 41 59 450 2006 46 2059 40 41 59 125 612 439 492 2060 40 2061 2062 41 123 392 40 2002 407 424 41 450 59 2062 61 418 2061 40 2062 41 123 2063 61 1501 622 40 2003 45 1501 41 125 59 2060 40 2002 44 1500 44 2003 44 2062 41 59 125 437 457 492 2060 40 2001 2049 44 404 2064 44 404 2065 44 2061 2062 41 123 392 40 2065 614 1501 41 450 59 392 40 2049 46 2066 614 424 41 450 59 621 392 40 2065 614 1502 41 123 392 40 33 2062 46 2067 40 2064 42 1502 41 605 33 2062 46 2067 40 2064 42 1502 43 1501 41 41 123 2049 46 2066 61 424 59 2049 46 2068 61 424 59 125 125 360 123 2060 40 2049 46 2066 44 2064 42 1502 44 2065 45 1501 44 2062 41 59 2060 40 2049 46 2069 44 2064 42 1502 43 1501 44 2065 45 1501 44 2062 41 59 392 40 2049 46 2066 46 2066 614 424 605 2049 46 2069 46 2069 614 424 41 123 2049 46 2066 61 424 59 2049 46 2069 61 424 59 125 125 125 125 
79895,C#,"    public class HeadersPayload : ISerializable
    {
        /// <summary>
        /// Indicates the maximum number of headers sent each time.
        /// </summary>
        public const int MaxHeadersCount = 2000;

        /// <summary>
        /// The list of headers.
        /// </summary>
        public Header[] Headers;

        public int Size => Headers.GetVarSize();

        /// <summary>
        /// Creates a new instance of the <see cref=""HeadersPayload""/> class.
        /// </summary>
        /// <param name=""headers"">The list of headers.</param>
        /// <returns>The created payload.</returns>
        public static HeadersPayload Create(params Header[] headers)
        {
            return new HeadersPayload
            {
                Headers = headers
            };
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            Headers = reader.ReadSerializableArray<Header>(MaxHeadersCount);
            if (Headers.Length == 0) throw new FormatException();
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.Write(Headers);
        }
    }",0,439 334 2000 58 2001 123 612 439 341 404 2002 61 1505 59 612 439 2003 91 93 2004 59 439 404 2005 619 2004 46 2006 40 41 59 612 439 457 2000 2007 40 433 2003 91 93 2008 41 123 450 418 2000 123 2004 61 2008 125 59 125 492 2001 46 2009 40 2010 2011 41 123 2004 61 2011 46 2012 60 2003 62 40 2002 41 59 392 40 2004 46 2013 614 1500 41 469 418 2014 40 41 59 125 492 2001 46 2015 40 2016 2017 41 123 2017 46 2018 40 2004 41 59 125 125 
70992,C#,"    public class CustomEntityDataAnnotationAttribute : Attribute
    {
        public CustomEntityDataAnnotationAttribute(string argument)
        {
            Argument = argument;
        }

        public virtual string Argument { get; }
    }",0,439 334 2000 58 2001 123 439 2000 40 461 2002 41 123 2003 61 2002 59 125 439 491 461 2004 123 2005 59 125 125 
70320,C#,"        private class SetLoggerFactoryContext : DbContext
        {
            protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
                => optionsBuilder
                    .UseLoggerFactory(new ListLoggerFactory())
                    .UseInternalServiceProvider(
                        new ServiceCollection()
                            .AddEntityFrameworkInMemoryDatabase()
                            .BuildServiceProvider(validateScopes: true))
                    .UseInMemoryDatabase(Guid.NewGuid().ToString());
        }",0,437 334 2000 58 2001 123 438 406 431 492 2002 40 2003 2004 41 619 2004 46 2005 40 418 2006 40 41 41 46 2007 40 418 2008 40 41 46 2009 40 41 46 2010 40 2011 58 473 41 41 46 2012 40 2013 46 2014 40 41 46 2015 40 41 41 59 125 
71717,C#,"    protected class Required2MoreDerived : Required2Derived
    {
        public override bool Equals(object obj)
            => base.Equals(obj as Required2MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
70294,C#,"        private class ConstructorTestContext1A : DbContext
        {
            public ConstructorTestContext1A(DbContextOptions options)
                : base(options)
            {
            }
        }",0,437 334 2000 58 2001 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 125 125 
69020,C#,"public class CSharpMigrationsGenerator : MigrationsCodeGenerator
{
    /// <summary>
    ///     Initializes a new instance of the <see cref=""CSharpMigrationsGenerator"" /> class.
    /// </summary>
    /// <param name=""dependencies"">The base dependencies.</param>
    /// <param name=""csharpDependencies"">The dependencies.</param>
    public CSharpMigrationsGenerator(
        MigrationsCodeGeneratorDependencies dependencies,
        CSharpMigrationsGeneratorDependencies csharpDependencies)
        : base(dependencies)
    {
        CSharpDependencies = csharpDependencies;
    }

    /// <summary>
    ///     Dependencies for this service.
    /// </summary>
    protected virtual CSharpMigrationsGeneratorDependencies CSharpDependencies { get; }

    private ICSharpHelper Code
        => CSharpDependencies.CSharpHelper;

    /// <summary>
    ///     Gets the file extension code files should use.
    /// </summary>
    /// <value> The file extension. </value>
    public override string FileExtension
        => "".cs"";

    /// <summary>
    ///     Gets the programming language supported by this service.
    /// </summary>
    /// <value> The language. </value>
    public override string Language
        => ""C#"";

    /// <summary>
    ///     Generates the migration code.
    /// </summary>
    /// <param name=""migrationNamespace"">The migration's namespace.</param>
    /// <param name=""migrationName"">The migration's name.</param>
    /// <param name=""upOperations"">The migration's up operations.</param>
    /// <param name=""downOperations"">The migration's down operations.</param>
    /// <returns>The migration code.</returns>
    public override string GenerateMigration(
        string? migrationNamespace,
        string migrationName,
        IReadOnlyList<MigrationOperation> upOperations,
        IReadOnlyList<MigrationOperation> downOperations)
    {
        var builder = new IndentedStringBuilder();
        var namespaces = new List<string> { ""Microsoft.EntityFrameworkCore.Migrations"" };
        namespaces.AddRange(GetNamespaces(upOperations.Concat(downOperations)));
        foreach (var n in namespaces.OrderBy(x => x, new NamespaceComparer()).Distinct())
        {
            builder
                .Append(""using "")
                .Append(n)
                .AppendLine("";"");
        }

        builder
            .AppendLine()
            .AppendLine(""#nullable disable"");

        if (!string.IsNullOrEmpty(migrationNamespace))
        {
            builder
                .AppendLine()
                .Append(""namespace "").AppendLine(Code.Namespace(migrationNamespace))
                .AppendLine(""{"")
                .IncrementIndent();
        }

        builder
            .Append(""public partial class "").Append(Code.Identifier(migrationName)).AppendLine("" : Migration"")
            .AppendLine(""{"");
        using (builder.Indent())
        {
            builder
                .AppendLine(""protected override void Up(MigrationBuilder migrationBuilder)"")
                .AppendLine(""{"");
            using (builder.Indent())
            {
                CSharpDependencies.CSharpMigrationOperationGenerator.Generate(""migrationBuilder"", upOperations, builder);
            }

            builder
                .AppendLine()
                .AppendLine(""}"")
                .AppendLine()
                .AppendLine(""protected override void Down(MigrationBuilder migrationBuilder)"")
                .AppendLine(""{"");
            using (builder.Indent())
            {
                CSharpDependencies.CSharpMigrationOperationGenerator.Generate(""migrationBuilder"", downOperations, builder);
            }

            builder
                .AppendLine()
                .AppendLine(""}"");
        }

        builder.AppendLine(""}"");

        if (!string.IsNullOrEmpty(migrationNamespace))
        {
            builder
                .DecrementIndent()
                .AppendLine(""}"");
        }

        return builder.ToString();
    }

    private static void AppendAutoGeneratedTag(IndentedStringBuilder builder)
        => builder.AppendLine(""// <auto-generated />"");

    /// <summary>
    ///     Generates the migration metadata code.
    /// </summary>
    /// <param name=""migrationNamespace"">The migration's namespace.</param>
    /// <param name=""contextType"">The migration's <see cref=""DbContext"" /> type.</param>
    /// <param name=""migrationName"">The migration's name.</param>
    /// <param name=""migrationId"">The migration's ID.</param>
    /// <param name=""targetModel"">The migration's target model.</param>
    /// <returns>The migration metadata code.</returns>
    public override string GenerateMetadata(
        string? migrationNamespace,
        Type contextType,
        string migrationName,
        string migrationId,
        IModel targetModel)
    {
        var builder = new IndentedStringBuilder();
        AppendAutoGeneratedTag(builder);
        var namespaces = new List<string>
        {
            ""Microsoft.EntityFrameworkCore"",
            ""Microsoft.EntityFrameworkCore.Infrastructure"",
            ""Microsoft.EntityFrameworkCore.Migrations"",
            ""Microsoft.EntityFrameworkCore.Storage.ValueConversion""
        };
        if (!string.IsNullOrEmpty(contextType.Namespace))
        {
            namespaces.Add(contextType.Namespace);
        }

        namespaces.AddRange(GetNamespaces(targetModel));
        foreach (var n in namespaces.OrderBy(x => x, new NamespaceComparer()).Distinct())
        {
            builder
                .Append(""using "")
                .Append(n)
                .AppendLine("";"");
        }

        builder
            .AppendLine()
            .AppendLine(""#nullable disable"");

        if (!string.IsNullOrEmpty(migrationNamespace))
        {
            builder
                .AppendLine()
                .Append(""namespace "").AppendLine(Code.Namespace(migrationNamespace))
                .AppendLine(""{"")
                .IncrementIndent();
        }

        builder
            .Append(""[DbContext(typeof("").Append(Code.Reference(contextType)).AppendLine(""))]"")
            .Append(""[Migration("").Append(Code.Literal(migrationId)).AppendLine("")]"")
            .Append(""partial class "").AppendLine(Code.Identifier(migrationName))
            .AppendLine(""{"");
        using (builder.Indent())
        {
            builder
                .AppendLine(""protected override void BuildTargetModel(ModelBuilder modelBuilder)"")
                .AppendLine(""{"")
                .DecrementIndent()
                .DecrementIndent()
                .AppendLine(""#pragma warning disable 612, 618"")
                .IncrementIndent()
                .IncrementIndent();
            using (builder.Indent())
            {
                // TODO: Optimize. This is repeated below
                CSharpDependencies.CSharpSnapshotGenerator.Generate(""modelBuilder"", targetModel, builder);
            }

            builder
                .DecrementIndent()
                .DecrementIndent()
                .AppendLine(""#pragma warning restore 612, 618"")
                .IncrementIndent()
                .IncrementIndent()
                .AppendLine(""}"");
        }

        builder.AppendLine(""}"");

        if (!string.IsNullOrEmpty(migrationNamespace))
        {
            builder
                .DecrementIndent()
                .AppendLine(""}"");
        }

        return builder.ToString();
    }

    /// <summary>
    ///     Generates the model snapshot code.
    /// </summary>
    /// <param name=""modelSnapshotNamespace"">The model snapshot's namespace.</param>
    /// <param name=""contextType"">The model snapshot's <see cref=""DbContext"" /> type.</param>
    /// <param name=""modelSnapshotName"">The model snapshot's name.</param>
    /// <param name=""model"">The model.</param>
    /// <returns>The model snapshot code.</returns>
    public override string GenerateSnapshot(
        string? modelSnapshotNamespace,
        Type contextType,
        string modelSnapshotName,
        IModel model)
    {
        var builder = new IndentedStringBuilder();
        AppendAutoGeneratedTag(builder);
        var namespaces = new List<string>
        {
            ""Microsoft.EntityFrameworkCore"",
            ""Microsoft.EntityFrameworkCore.Infrastructure"",
            ""Microsoft.EntityFrameworkCore.Storage.ValueConversion""
        };
        if (!string.IsNullOrEmpty(contextType.Namespace))
        {
            namespaces.Add(contextType.Namespace);
        }

        namespaces.AddRange(GetNamespaces(model));
        foreach (var n in namespaces.OrderBy(x => x, new NamespaceComparer()).Distinct())
        {
            builder
                .Append(""using "")
                .Append(n)
                .AppendLine("";"");
        }

        builder
            .AppendLine()
            .AppendLine(""#nullable disable"");

        if (!string.IsNullOrEmpty(modelSnapshotNamespace))
        {
            builder
                .AppendLine()
                .Append(""namespace "").AppendLine(Code.Namespace(modelSnapshotNamespace))
                .AppendLine(""{"")
                .IncrementIndent();
        }

        builder
            .Append(""[DbContext(typeof("").Append(Code.Reference(contextType)).AppendLine(""))]"")
            .Append(""partial class "").Append(Code.Identifier(modelSnapshotName)).AppendLine("" : ModelSnapshot"")
            .AppendLine(""{"");
        using (builder.Indent())
        {
            builder
                .AppendLine(""protected override void BuildModel(ModelBuilder modelBuilder)"")
                .AppendLine(""{"")
                .DecrementIndent()
                .DecrementIndent()
                .AppendLine(""#pragma warning disable 612, 618"")
                .IncrementIndent()
                .IncrementIndent();
            using (builder.Indent())
            {
                CSharpDependencies.CSharpSnapshotGenerator.Generate(""modelBuilder"", model, builder);
            }

            builder
                .DecrementIndent()
                .DecrementIndent()
                .AppendLine(""#pragma warning restore 612, 618"")
                .IncrementIndent()
                .IncrementIndent()
                .AppendLine(""}"");
        }

        builder.AppendLine(""}"");

        if (!string.IsNullOrEmpty(modelSnapshotNamespace))
        {
            builder
                .DecrementIndent()
                .AppendLine(""}"");
        }

        return builder.ToString();
    }
}",0,439 334 2000 58 2001 123 612 439 2000 40 2002 2003 44 2004 2005 41 58 320 40 2003 41 123 2006 61 2005 59 125 612 438 491 2004 2007 123 2008 59 125 437 2009 2010 619 2007 46 2011 59 612 439 431 461 2012 619 648 59 612 439 431 461 2013 619 648 59 612 439 431 461 2014 40 461 63 2015 44 461 2016 44 2017 60 2018 62 2019 44 2017 60 2018 62 2020 41 123 490 2021 61 418 2022 40 41 59 490 2023 61 418 2024 60 461 62 123 648 125 59 2023 46 2025 40 2026 40 2019 46 2027 40 2020 41 41 41 59 386 40 490 2028 398 2023 46 2029 40 2030 619 2030 44 418 2031 40 41 41 46 2032 40 41 41 123 2021 46 2033 40 648 41 46 2033 40 2028 41 46 2034 40 648 41 59 125 2021 46 2035 40 41 46 2035 40 648 41 59 392 40 33 461 46 2036 40 2015 41 41 123 2021 46 2035 40 41 46 2037 40 648 41 46 2035 40 2010 46 2038 40 2015 41 41 46 2035 40 648 41 46 2039 40 41 59 125 2021 46 2040 40 648 41 46 2040 40 2010 46 2041 40 2016 41 41 46 2035 40 648 41 46 2035 40 648 41 59 489 40 2021 46 2042 40 41 41 123 2021 46 2035 40 648 41 46 2035 40 648 41 59 489 40 2021 46 2042 40 41 41 123 2007 46 2043 46 2044 40 648 44 2019 44 2021 41 59 125 2021 46 2035 40 41 46 2035 40 648 41 46 2035 40 41 46 2035 40 648 41 46 2035 40 648 41 59 489 40 2021 46 2042 40 41 41 123 2007 46 2045 46 2046 40 648 44 2020 44 2021 41 59 125 2021 46 2035 40 41 46 2035 40 648 41 59 125 2021 46 2035 40 648 41 59 392 40 33 461 46 2036 40 2015 41 41 123 2021 46 2047 40 41 46 2035 40 648 41 59 125 450 2021 46 2048 40 41 59 125 437 457 492 2049 40 2050 2051 41 619 2051 46 2052 40 648 41 59 612 439 431 461 2053 40 461 63 2015 44 2054 2055 44 461 2016 44 461 2056 44 2057 2058 41 123 490 2051 61 418 2050 40 41 59 2049 40 2051 41 59 490 2059 61 418 2060 60 461 62 123 648 44 648 44 648 44 648 125 59 392 40 33 461 46 2061 40 2055 46 2062 41 41 123 2059 46 2063 40 2055 46 2062 41 59 125 2059 46 2064 40 2065 40 2058 41 41 59 386 40 490 2066 398 2059 46 2067 40 2068 619 2068 44 418 2069 40 41 41 46 2070 40 41 41 123 2051 46 2071 40 648 41 46 2071 40 2066 41 46 2052 40 648 41 59 125 2051 46 2052 40 41 46 2052 40 648 41 59 392 40 33 461 46 2061 40 2015 41 41 123 2051 46 2052 40 41 46 2072 40 648 41 46 2052 40 2010 46 2062 40 2015 41 41 46 2052 40 648 41 46 2073 40 41 59 125 2051 46 2074 40 648 41 46 2074 40 2010 46 2075 40 2055 41 41 46 2052 40 648 41 46 2074 40 648 41 46 2074 40 2010 46 2076 40 2056 41 41 46 2052 40 648 41 46 2074 40 648 41 46 2052 40 2010 46 2077 40 2016 41 41 46 2052 40 648 41 59 489 40 2051 46 2078 40 41 41 123 2051 46 2052 40 648 41 46 2052 40 648 41 46 2079 40 41 46 2079 40 41 46 2052 40 648 41 46 2080 40 41 46 2080 40 41 59 489 40 2051 46 2078 40 41 41 123 621 2007 46 2081 46 2082 40 648 44 2058 44 2051 41 59 125 2051 46 2079 40 41 46 2079 40 41 46 2052 40 648 41 46 2080 40 41 46 2080 40 41 46 2052 40 648 41 59 125 2051 46 2052 40 648 41 59 392 40 33 461 46 2061 40 2015 41 41 123 2051 46 2083 40 41 46 2052 40 648 41 59 125 450 2051 46 2084 40 41 59 125 612 439 431 461 2085 40 461 63 2086 44 2054 2055 44 461 2087 44 2057 2088 41 123 490 2051 61 418 2050 40 41 59 2049 40 2051 41 59 490 2089 61 418 2090 60 461 62 123 648 44 648 44 648 125 59 392 40 33 461 46 2091 40 2055 46 2092 41 41 123 2089 46 2093 40 2055 46 2092 41 59 125 2089 46 2094 40 2095 40 2088 41 41 59 386 40 490 2096 398 2089 46 2097 40 2098 619 2098 44 418 2099 40 41 41 46 2100 40 41 41 123 2051 46 2101 40 648 41 46 2101 40 2096 41 46 2052 40 648 41 59 125 2051 46 2052 40 41 46 2052 40 648 41 59 392 40 33 461 46 2091 40 2086 41 41 123 2051 46 2052 40 41 46 2102 40 648 41 46 2052 40 2010 46 2092 40 2086 41 41 46 2052 40 648 41 46 2103 40 41 59 125 2051 46 2104 40 648 41 46 2104 40 2010 46 2105 40 2055 41 41 46 2052 40 648 41 46 2104 40 648 41 46 2104 40 2010 46 2106 40 2087 41 41 46 2052 40 648 41 46 2052 40 648 41 59 489 40 2051 46 2107 40 41 41 123 2051 46 2052 40 648 41 46 2052 40 648 41 46 2108 40 41 46 2108 40 41 46 2052 40 648 41 46 2109 40 41 46 2109 40 41 59 489 40 2051 46 2107 40 41 41 123 2007 46 2110 46 2111 40 648 44 2088 44 2051 41 59 125 2051 46 2108 40 41 46 2108 40 41 46 2052 40 648 41 46 2109 40 41 46 2109 40 41 46 2052 40 648 41 59 125 2051 46 2052 40 648 41 59 392 40 33 461 46 2091 40 2086 41 41 123 2051 46 2112 40 41 46 2052 40 648 41 59 125 450 2051 46 2113 40 41 59 125 125 
68800,C#,"    private class FruityContext : DbContext
    {
        public FruityContext(DbContextOptions options)
            : base(options)
        {
        }

        public DbSet<Banana> Bananas { get; set; }
        public DbSet<Kiwi> Kiwi { get; set; }
    }",0,437 334 2000 58 2001 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 125 439 2004 60 2005 62 2006 123 2007 59 2008 59 125 439 2004 60 2009 62 2009 123 2010 59 2011 59 125 125 
79832,C#,"    internal class WalletLocker : IDisposable
    {
        private readonly NEP6Wallet wallet;

        public WalletLocker(NEP6Wallet wallet)
        {
            this.wallet = wallet;
        }

        public void Dispose()
        {
            wallet.Lock();
        }
    }",0,406 334 2000 58 2001 123 437 441 2002 2003 59 439 2000 40 2002 2003 41 123 467 46 2003 61 2003 59 125 439 492 2004 40 41 123 2003 46 2005 40 41 59 125 125 
70319,C#,"        private class ReplaceServiceContext2 : DbContext
        {
            protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
                => optionsBuilder
                    .ReplaceService<IModelCustomizer, CustomModelCustomizer>()
                    .ConfigureWarnings(w => w.Default(WarningBehavior.Throw))
                    .UseInternalServiceProvider(
                        new ServiceCollection()
                            .AddEntityFrameworkInMemoryDatabase()
                            .BuildServiceProvider(validateScopes: true))
                    .UseInMemoryDatabase(Guid.NewGuid().ToString());
        }",0,437 334 2000 58 2001 123 438 406 431 492 2002 40 2003 2004 41 619 2004 46 2005 60 2006 44 2007 62 40 41 46 2008 40 2009 619 2009 46 2010 40 2011 46 2012 41 41 46 2013 40 418 2014 40 41 46 2015 40 41 46 2016 40 2017 58 473 41 41 46 2018 40 2019 46 2020 40 41 46 2021 40 41 41 59 125 
79893,C#,"    public class MerkleBlockPayload : ISerializable
    {
        /// <summary>
        /// The header of the block.
        /// </summary>
        public Header Header;

        /// <summary>
        /// The number of the transactions in the block.
        /// </summary>
        public int TxCount;

        /// <summary>
        /// The nodes of the transactions hash tree.
        /// </summary>
        public UInt256[] Hashes;

        /// <summary>
        /// The data in the <see cref=""BloomFilter""/> that filtered the block.
        /// </summary>
        public byte[] Flags;

        public int Size => Header.Size + sizeof(int) + Hashes.GetVarSize() + Flags.GetVarSize();

        /// <summary>
        /// Creates a new instance of the <see cref=""MerkleBlockPayload""/> class.
        /// </summary>
        /// <param name=""block"">The original block.</param>
        /// <param name=""flags"">The data in the <see cref=""BloomFilter""/> that filtered the block.</param>
        /// <returns>The created payload.</returns>
        public static MerkleBlockPayload Create(Block block, BitArray flags)
        {
            MerkleTree tree = new(block.Transactions.Select(p => p.Hash).ToArray());
            tree.Trim(flags);
            byte[] buffer = new byte[(flags.Length + 7) / 8];
            flags.CopyTo(buffer, 0);
            return new MerkleBlockPayload
            {
                Header = block.Header,
                TxCount = block.Transactions.Length,
                Hashes = tree.ToHashArray(),
                Flags = buffer
            };
        }

        public void Deserialize(BinaryReader reader)
        {
            Header = reader.ReadSerializable<Header>();
            TxCount = (int)reader.ReadVarInt(ushort.MaxValue);
            Hashes = reader.ReadSerializableArray<UInt256>(TxCount);
            Flags = reader.ReadVarBytes((Math.Max(TxCount, 1) + 7) / 8);
        }

        public void Serialize(BinaryWriter writer)
        {
            writer.Write(Header);
            writer.WriteVarInt(TxCount);
            writer.Write(Hashes);
            writer.WriteVarBytes(Flags);
        }
    }",0,439 334 2000 58 2001 123 612 439 2002 2002 59 612 439 404 2003 59 612 439 2004 91 93 2005 59 612 439 326 91 93 2006 59 439 404 2007 619 2002 46 2007 43 455 40 404 41 43 2005 46 2008 40 41 43 2006 46 2008 40 41 59 612 439 457 2000 2009 40 2010 2011 44 2012 2013 41 123 2014 2015 61 418 40 2011 46 2016 46 2017 40 2018 619 2018 46 2019 41 46 2020 40 41 41 59 2015 46 2021 40 2013 41 59 326 91 93 2022 61 418 326 91 40 2013 46 2023 43 1502 41 47 1502 93 59 2013 46 2024 40 2022 44 1500 41 59 450 418 2000 123 2002 61 2011 46 2002 44 2003 61 2011 46 2016 46 2023 44 2005 61 2015 46 2025 40 41 44 2006 61 2022 125 59 125 439 492 2026 40 2027 2028 41 123 2002 61 2028 46 2029 60 2002 62 40 41 59 2003 61 40 404 41 2028 46 2030 40 488 46 2031 41 59 2005 61 2028 46 2032 60 2004 62 40 2003 41 59 2006 61 2028 46 2033 40 40 2034 46 2035 40 2003 44 1501 41 43 1502 41 47 1502 41 59 125 439 492 2036 40 2037 2038 41 123 2038 46 2039 40 2002 41 59 2038 46 2040 40 2003 41 59 2038 46 2039 40 2005 41 59 2038 46 2041 40 2006 41 59 125 125 
69313,C#,"    private class NonGenericStringTestOwnedNavigationBuilder<TEntity, TDependentEntity>
        : NonGenericTestOwnedNavigationBuilder<TEntity, TDependentEntity>
        where TEntity : class
        where TDependentEntity : class
    {
        public NonGenericStringTestOwnedNavigationBuilder(OwnedNavigationBuilder ownedNavigationBuilder)
            : base(ownedNavigationBuilder)
        {
        }

        protected override NonGenericTestOwnedNavigationBuilder<TNewEntity, TNewDependentEntity> Wrap<TNewEntity, TNewDependentEntity>(
            OwnedNavigationBuilder ownedNavigationBuilder)
            => new NonGenericStringTestOwnedNavigationBuilder<TNewEntity, TNewDependentEntity>(ownedNavigationBuilder);

        public override TestReferenceNavigationBuilder<TDependentEntity, TNewDependentEntity> HasOne<TNewDependentEntity>(
            Expression<Func<TDependentEntity, TNewDependentEntity?>>? navigationExpression = null)
            where TNewDependentEntity : class
        {
            var navigationName = navigationExpression?.GetMemberAccess().GetSimpleMemberName();

            return new NonGenericStringTestReferenceNavigationBuilder<TDependentEntity, TNewDependentEntity>(
                navigationName == null
                    ? OwnedNavigationBuilder.HasOne(typeof(TNewDependentEntity).FullName!, navigationName)
                    : OwnedNavigationBuilder.HasOne(navigationName));
        }
    }",0,437 334 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 2004 2001 58 334 2004 2002 58 334 123 439 2000 40 2005 2006 41 58 320 40 2006 41 123 125 438 431 2003 60 2007 44 2008 62 2009 60 2007 44 2008 62 40 2005 2006 41 619 418 2000 60 2007 44 2008 62 40 2006 41 59 439 431 2010 60 2002 44 2008 62 2011 60 2008 62 40 2012 60 2013 60 2002 44 2008 63 640 63 2014 61 424 41 2004 2008 58 334 123 490 2015 61 2014 634 2016 40 41 46 2017 40 41 59 450 418 2018 60 2002 44 2008 62 40 2015 614 424 63 2005 46 2011 40 478 40 2008 41 46 2019 33 44 2015 41 58 2005 46 2011 40 2015 41 41 59 125 125 
71332,C#,"    private class LikeAZooContextPooled : LikeAZooContext
    {
        public LikeAZooContextPooled(DbContextOptions<LikeAZooContextPooled> options)
            : base(options)
        {
        }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
        }
    }",0,437 334 2000 58 2001 123 439 2000 40 2002 60 2000 62 2003 41 58 320 40 2003 41 123 125 438 406 431 492 2004 40 2005 2006 41 123 125 125 
71328,C#,"    private class EarlyLearningCenter : DbContext
    {
        private readonly IServiceProvider _serviceProvider;

        public EarlyLearningCenter()
        {
            _serviceProvider = InMemoryTestHelpers.Instance.CreateServiceProvider();
        }

        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Sweet>().OwnsOne(
                e => e.Dreams, b =>
                {
                    b.WithOwner(e => e.Sweet);
                    b.OwnsOne(e => e.Are);
                    b.OwnsOne(e => e.Made);
                    b.OwnsOne(e => e.OfThis);
                });

            modelBuilder.Entity<WhoAmI>().HasNoKey();

            modelBuilder
                .Entity<Category>().HasMany(e => e.Products).WithOne(e => e.Category);

            modelBuilder
                .Entity<ProductDetailsTag>().HasOne(e => e.TagDetails).WithOne(e => e.Tag)
                .HasForeignKey<ProductDetailsTagDetails>(e => e.Id);

            modelBuilder
                .Entity<ProductDetails>().HasOne(e => e.Tag).WithOne(e => e.Details)
                .HasForeignKey<ProductDetailsTag>(e => e.Id);

            modelBuilder
                .Entity<Product>().HasOne(e => e.Details).WithOne(e => e.Product)
                .HasForeignKey<ProductDetails>(e => e.Id);

            modelBuilder.Entity<OrderDetails>(
                b =>
                {
                    b.HasKey(
                        e => new { e.OrderId, e.ProductId });
                    b.HasOne(e => e.Order).WithMany(e => e.OrderDetails).HasForeignKey(e => e.OrderId);
                    b.HasOne(e => e.Product).WithMany(e => e.OrderDetails).HasForeignKey(e => e.ProductId);
                });

            modelBuilder.Entity<OptionalProduct>();

            modelBuilder.Entity<PrincipalNN>(
                b =>
                {
                    b.HasOne(e => e.DependentNN)
                        .WithOne(e => e.PrincipalNN)
                        .HasForeignKey<DependentNN>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedNever();
                });

            modelBuilder.Entity<DependentNN>().Property(e => e.Id).ValueGeneratedNever();

            modelBuilder.Entity<PrincipalGG>(
                b =>
                {
                    b.HasOne(e => e.DependentGG)
                        .WithOne(e => e.PrincipalGG)
                        .HasForeignKey<DependentGG>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedOnAdd();
                });

            modelBuilder.Entity<DependentGG>().Property(e => e.Id).ValueGeneratedOnAdd();

            modelBuilder.Entity<PrincipalNG>(
                b =>
                {
                    b.HasOne(e => e.DependentNG)
                        .WithOne(e => e.PrincipalNG)
                        .HasForeignKey<DependentNG>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedNever();
                });

            modelBuilder.Entity<DependentNG>().Property(e => e.Id).HasValueGenerator<DummyValueGenerator>();

            modelBuilder.Entity<PrincipalGN>(
                b =>
                {
                    b.HasOne(e => e.DependentGN)
                        .WithOne(e => e.PrincipalGN)
                        .HasForeignKey<DependentGN>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedOnAdd();
                });

            modelBuilder.Entity<DependentGN>().Property(e => e.Id).ValueGeneratedNever();
        }

        private class DummyValueGenerator : ValueGenerator<int>
        {
            private static int _value;

            public override int Next(EntityEntry entry)
                => _value++;

            public override bool GeneratesTemporaryValues
                => false;
        }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(_serviceProvider)
                .UseInMemoryDatabase(nameof(EarlyLearningCenter));
    }",0,437 334 2000 58 2001 123 437 441 2002 2003 59 439 2000 40 41 123 2003 61 2004 46 2005 46 2006 40 41 59 125 438 406 431 492 2007 40 2008 2009 41 123 2009 46 2010 60 2011 62 40 41 46 2012 40 2013 619 2013 46 2014 44 2015 619 123 2015 46 2016 40 2013 619 2013 46 2011 41 59 2015 46 2012 40 2013 619 2013 46 2017 41 59 2015 46 2012 40 2013 619 2013 46 2018 41 59 2015 46 2012 40 2013 619 2013 46 2019 41 59 125 41 59 2009 46 2010 60 2020 62 40 41 46 2021 40 41 59 2009 46 2010 60 2022 62 40 41 46 2023 40 2013 619 2013 46 2024 41 46 2025 40 2013 619 2013 46 2022 41 59 2009 46 2010 60 2026 62 40 41 46 2027 40 2013 619 2013 46 2028 41 46 2025 40 2013 619 2013 46 2029 41 46 2030 60 2031 62 40 2013 619 2013 46 2032 41 59 2009 46 2010 60 2033 62 40 41 46 2027 40 2013 619 2013 46 2029 41 46 2025 40 2013 619 2013 46 2034 41 46 2030 60 2026 62 40 2013 619 2013 46 2032 41 59 2009 46 2010 60 2035 62 40 41 46 2027 40 2013 619 2013 46 2034 41 46 2025 40 2013 619 2013 46 2035 41 46 2030 60 2033 62 40 2013 619 2013 46 2032 41 59 2009 46 2010 60 2036 62 40 2015 619 123 2015 46 2037 40 2013 619 418 123 2013 46 2038 44 2013 46 2039 125 41 59 2015 46 2027 40 2013 619 2013 46 2040 41 46 2041 40 2013 619 2013 46 2036 41 46 2030 40 2013 619 2013 46 2042 41 59 2015 46 2027 40 2013 619 2013 46 2035 41 46 2041 40 2013 619 2013 46 2036 41 46 2030 40 2013 619 2013 46 2043 41 59 125 41 59 2009 46 2010 60 2044 62 40 41 59 2009 46 2010 60 2045 62 40 2015 619 123 2015 46 2027 40 2013 619 2013 46 2046 41 46 2025 40 2013 619 2013 46 2045 41 46 2030 60 2046 62 40 2013 619 2013 46 2032 41 59 2015 46 2047 40 2013 619 2013 46 2032 41 46 2048 40 41 59 125 41 59 2009 46 2010 60 2049 62 40 41 46 2050 40 2013 619 2013 46 2032 41 46 2051 40 41 59 2009 46 2010 60 2052 62 40 2015 619 123 2015 46 2027 40 2013 619 2013 46 2053 41 46 2025 40 2013 619 2013 46 2052 41 46 2030 60 2053 62 40 2013 619 2013 46 2032 41 59 2015 46 2050 40 2013 619 2013 46 2032 41 46 2054 40 41 59 125 41 59 2009 46 2010 60 2055 62 40 41 46 2050 40 2013 619 2013 46 2032 41 46 2056 40 41 59 2009 46 2010 60 2057 62 40 2015 619 123 2015 46 2027 40 2013 619 2013 46 2058 41 46 2025 40 2013 619 2013 46 2057 41 46 2030 60 2058 62 40 2013 619 2013 46 2032 41 59 2015 46 2050 40 2013 619 2013 46 2032 41 46 2051 40 41 59 125 41 59 2009 46 2010 60 2059 62 40 41 46 2050 40 2013 619 2013 46 2032 41 46 2060 60 2061 62 40 41 59 2009 46 2010 60 2062 62 40 2015 619 123 2015 46 2027 40 2013 619 2013 46 2063 41 46 2025 40 2013 619 2013 46 2062 41 46 2030 60 2063 62 40 2013 619 2013 46 2032 41 59 2015 46 2050 40 2013 619 2013 46 2032 41 46 2056 40 41 59 125 41 59 2009 46 2010 60 2064 62 40 41 46 2050 40 2013 619 2013 46 2032 41 46 2051 40 41 59 125 437 334 2065 58 2066 60 404 62 123 437 457 404 2067 59 439 431 404 2068 40 2069 2070 41 619 2067 637 59 439 431 323 2071 619 380 59 125 438 406 431 492 2072 40 2073 2074 41 619 2074 46 2075 40 2003 41 46 2076 40 2077 40 2000 41 41 59 125 
71706,C#,"    protected class OptionalSingleAk1Derived : OptionalSingleAk1
    {
        private Guid? _derivedRootId;
        private Root _derivedRoot;

        public Guid? DerivedRootId
        {
            get => _derivedRootId;
            set => SetWithNotify(value, ref _derivedRootId);
        }

        public Root DerivedRoot
        {
            get => _derivedRoot;
            set => SetWithNotify(value, ref _derivedRoot);
        }

        public override bool Equals(object obj)
            => base.Equals(obj as OptionalSingleAk1Derived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 437 2002 63 2003 59 437 2004 2005 59 439 2002 63 2006 123 2007 619 2003 59 2008 619 2009 40 2010 44 442 2003 41 59 125 439 2004 2011 123 2012 619 2005 59 2013 619 2014 40 2015 44 442 2005 41 59 125 439 431 323 2016 40 426 2017 41 619 320 46 2016 40 2017 311 2000 41 59 439 431 404 2018 40 41 619 320 46 2018 40 41 59 125 
71687,C#,"    protected class Optional1MoreDerived : Optional1Derived
    {
        public override bool Equals(object obj)
            => base.Equals(obj as Optional1MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
68105,C#,"    private class CustomValueGeneratorContextAnnotateFactory : DbContext
    {
        private static readonly IServiceProvider _serviceProvider
            = new ServiceCollection()
                .AddEntityFrameworkInMemoryDatabase()
                .BuildServiceProvider(validateScopes: true);

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(_serviceProvider)
                .UseInMemoryDatabase(nameof(CustomValueGeneratorContextAnnotateFactory));

        protected override void OnModelCreating(ModelBuilder modelBuilder)
            => modelBuilder
                .Entity<SomeEntity>(
                    b =>
                    {
                        var factory = new CustomValueGeneratorFactory();

                        b.Property(e => e.Id).HasValueGenerator(factory.Create);

                        b.Property(e => e.SpecialId)
                            .Metadata.SetValueGeneratorFactory(factory.Create);

                        b.Property(e => e.SpecialId)
                            .HasAnnotation(""SpecialGuid"", true)
                            .ValueGeneratedOnAdd();

                        b.Property(e => e.SpecialString).HasValueGenerator(factory.Create);
                    });
    }",0,437 334 2000 58 2001 123 437 457 441 2002 2003 61 418 2004 40 41 46 2005 40 41 46 2006 40 2007 58 473 41 59 438 431 492 2008 40 2009 2010 41 619 2010 46 2011 40 2003 41 46 2012 40 2013 40 2000 41 41 59 438 431 492 2014 40 2015 2016 41 619 2016 46 2017 60 2018 62 40 2019 619 123 490 2020 61 418 2021 40 41 59 2019 46 2022 40 2023 619 2023 46 2024 41 46 2025 40 2020 46 2026 41 59 2019 46 2022 40 2023 619 2023 46 2027 41 46 2028 46 2029 40 2020 46 2026 41 59 2019 46 2022 40 2023 619 2023 46 2027 41 46 2030 40 648 44 473 41 46 2031 40 41 59 2019 46 2022 40 2023 619 2023 46 2032 41 46 2025 40 2020 46 2026 41 59 125 41 59 125 
79824,C#,"    public class LocalNode : Peer
    {
        /// <summary>
        /// Sent to <see cref=""LocalNode""/> to relay an <see cref=""IInventory""/>.
        /// </summary>
        public class RelayDirectly { public IInventory Inventory; }

        /// <summary>
        /// Sent to <see cref=""LocalNode""/> to send an <see cref=""IInventory""/>.
        /// </summary>
        public class SendDirectly { public IInventory Inventory; }

        /// <summary>
        /// Sent to <see cref=""LocalNode""/> to request for an instance of <see cref=""LocalNode""/>.
        /// </summary>
        public class GetInstance { }

        /// <summary>
        /// Indicates the protocol version of the local node.
        /// </summary>
        public const uint ProtocolVersion = 0;

        private const int MaxCountFromSeedList = 5;
        private readonly IPEndPoint[] SeedList;

        private readonly NeoSystem system;
        internal readonly ConcurrentDictionary<IActorRef, RemoteNode> RemoteNodes = new();

        /// <summary>
        /// Indicates the number of connected nodes.
        /// </summary>
        public int ConnectedCount => RemoteNodes.Count;

        /// <summary>
        /// Indicates the number of unconnected nodes. When the number of connections is not enough, it will automatically connect to these nodes.
        /// </summary>
        public int UnconnectedCount => UnconnectedPeers.Count;

        /// <summary>
        /// The random number used to identify the local node.
        /// </summary>
        public static readonly uint Nonce;

        /// <summary>
        /// The identifier of the client software of the local node.
        /// </summary>
        public static string UserAgent { get; set; }

        static LocalNode()
        {
            Random rand = new();
            Nonce = (uint)rand.Next();
            UserAgent = $""/{Assembly.GetExecutingAssembly().GetName().Name}:{Assembly.GetExecutingAssembly().GetVersion()}/"";
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""LocalNode""/> class.
        /// </summary>
        /// <param name=""system"">The <see cref=""NeoSystem""/> object that contains the <see cref=""LocalNode""/>.</param>
        public LocalNode(NeoSystem system)
        {
            this.system = system;
            this.SeedList = new IPEndPoint[system.Settings.SeedList.Length];

            // Start dns resolution in parallel
            string[] seedList = system.Settings.SeedList;
            for (int i = 0; i < seedList.Length; i++)
            {
                int index = i;
                Task.Run(() => SeedList[index] = GetIpEndPoint(seedList[index]));
            }
        }

        /// <summary>
        /// Packs a MessageCommand to a full Message with an optional ISerializable payload.
        /// Forwards it to <see cref=""BroadcastMessage(Message)""/>.
        /// </summary>
        /// <param name=""command"">The message command to be packed.</param>
        /// <param name=""payload"">Optional payload to be Serialized along the message.</param>
        private void BroadcastMessage(MessageCommand command, ISerializable payload = null)
        {
            BroadcastMessage(Message.Create(command, payload));
        }

        /// <summary>
        /// Broadcast a message to all connected nodes.
        /// </summary>
        /// <param name=""message"">The message to be broadcasted.</param>
        private void BroadcastMessage(Message message) => SendToRemoteNodes(message);

        /// <summary>
        /// Send message to all the RemoteNodes connected to other nodes, faster than ActorSelection.
        /// </summary>
        private void SendToRemoteNodes(object message)
        {
            foreach (var connection in RemoteNodes.Keys)
            {
                connection.Tell(message);
            }
        }

        private static IPEndPoint GetIPEndpointFromHostPort(string hostNameOrAddress, int port)
        {
            if (IPAddress.TryParse(hostNameOrAddress, out IPAddress ipAddress))
                return new IPEndPoint(ipAddress, port);
            IPHostEntry entry;
            try
            {
                entry = Dns.GetHostEntry(hostNameOrAddress);
            }
            catch (SocketException)
            {
                return null;
            }
            ipAddress = entry.AddressList.FirstOrDefault(p => p.AddressFamily == AddressFamily.InterNetwork || p.IsIPv6Teredo);
            if (ipAddress == null) return null;
            return new IPEndPoint(ipAddress, port);
        }

        internal static IPEndPoint GetIpEndPoint(string hostAndPort)
        {
            if (string.IsNullOrEmpty(hostAndPort)) return null;

            try
            {
                string[] p = hostAndPort.Split(':');
                return GetIPEndpointFromHostPort(p[0], int.Parse(p[1]));
            }
            catch { }

            return null;
        }

        /// <summary>
        /// Checks the new connection.
        /// If it is equal to the nonce of local or any remote node, it'll return false, else we'll return true and update the Listener address of the connected remote node.
        /// </summary>
        /// <param name=""actor"">Remote node actor.</param>
        /// <param name=""node"">Remote node object.</param>
        /// <returns><see langword=""true""/> if the new connection is allowed; otherwise, <see langword=""false""/>.</returns>
        public bool AllowNewConnection(IActorRef actor, RemoteNode node)
        {
            if (node.Version.Network != system.Settings.Network) return false;
            if (node.Version.Nonce == Nonce) return false;

            // filter duplicate connections
            foreach (var other in RemoteNodes.Values)
                if (other != node && other.Remote.Address.Equals(node.Remote.Address) && other.Version?.Nonce == node.Version.Nonce)
                    return false;

            if (node.Remote.Port != node.ListenerTcpPort && node.ListenerTcpPort != 0)
                ConnectedPeers.TryUpdate(actor, node.Listener, node.Remote);

            return true;
        }

        /// <summary>
        /// Gets the connected remote nodes.
        /// </summary>
        /// <returns></returns>
        public IEnumerable<RemoteNode> GetRemoteNodes()
        {
            return RemoteNodes.Values;
        }

        /// <summary>
        /// Gets the unconnected nodes.
        /// </summary>
        /// <returns></returns>
        public IEnumerable<IPEndPoint> GetUnconnectedPeers()
        {
            return UnconnectedPeers;
        }

        /// <summary>
        /// Performs a broadcast with the command <see cref=""MessageCommand.GetAddr""/>, which, eventually, tells all known connections.
        /// If there are no connected peers it will try with the default, respecting <see cref=""MaxCountFromSeedList""/> limit.
        /// </summary>
        /// <param name=""count"">Number of peers that are being requested.</param>
        protected override void NeedMorePeers(int count)
        {
            count = Math.Max(count, MaxCountFromSeedList);
            if (!ConnectedPeers.IsEmpty)
            {
                BroadcastMessage(MessageCommand.GetAddr);
            }
            else
            {
                // Will call AddPeers with default SeedList set cached on <see cref=""ProtocolSettings""/>.
                // It will try to add those, sequentially, to the list of currently unconnected ones.

                Random rand = new();
                AddPeers(SeedList.Where(u => u != null).OrderBy(p => rand.Next()).Take(count));
            }
        }

        protected override void OnReceive(object message)
        {
            base.OnReceive(message);
            switch (message)
            {
                case Message msg:
                    BroadcastMessage(msg);
                    break;
                case RelayDirectly relay:
                    OnRelayDirectly(relay.Inventory);
                    break;
                case SendDirectly send:
                    OnSendDirectly(send.Inventory);
                    break;
                case GetInstance _:
                    Sender.Tell(this);
                    break;
            }
        }

        private void OnRelayDirectly(IInventory inventory)
        {
            var message = new RemoteNode.Relay { Inventory = inventory };
            // When relaying a block, if the block's index is greater than 'LastBlockIndex' of the RemoteNode, relay the block;
            // otherwise, don't relay.
            if (inventory is Block block)
            {
                foreach (KeyValuePair<IActorRef, RemoteNode> kvp in RemoteNodes)
                {
                    if (block.Index > kvp.Value.LastBlockIndex)
                        kvp.Key.Tell(message);
                }
            }
            else
                SendToRemoteNodes(message);
        }

        private void OnSendDirectly(IInventory inventory) => SendToRemoteNodes(inventory);

        protected override void OnTcpConnected(IActorRef connection)
        {
            connection.Tell(new RemoteNode.StartProtocol());
        }

        /// <summary>
        /// Gets a <see cref=""Akka.Actor.Props""/> object used for creating the <see cref=""LocalNode""/> actor.
        /// </summary>
        /// <param name=""system"">The <see cref=""NeoSystem""/> object that contains the <see cref=""LocalNode""/>.</param>
        /// <returns>The <see cref=""Akka.Actor.Props""/> object used for creating the <see cref=""LocalNode""/> actor.</returns>
        public static Props Props(NeoSystem system)
        {
            return Akka.Actor.Props.Create(() => new LocalNode(system));
        }

        protected override Props ProtocolProps(object connection, IPEndPoint remote, IPEndPoint local)
        {
            return RemoteNode.Props(system, this, connection, remote, local);
        }
    }",0,439 334 2000 58 2001 123 612 439 334 2002 123 439 2003 2004 59 125 612 439 334 2005 123 439 2006 2007 59 125 612 439 334 2008 123 125 612 439 341 479 2009 61 1500 59 437 341 404 2010 61 1502 59 437 441 2011 91 93 2012 59 437 441 2013 2014 59 406 441 2015 60 2016 44 2017 62 2018 61 418 40 41 59 612 439 404 2019 619 2018 46 2020 59 612 439 404 2021 619 2022 46 2020 59 612 439 457 441 479 2023 59 612 439 457 461 2024 123 2025 59 2026 59 125 457 2000 40 41 123 2027 2028 61 418 40 41 59 2023 61 40 479 41 2028 46 2029 40 41 59 2024 61 36 648 59 125 612 439 2000 40 2013 2014 41 123 467 46 2014 61 2014 59 467 46 2012 61 418 2011 91 2014 46 2030 46 2012 46 2031 93 59 621 461 91 93 2032 61 2014 46 2030 46 2012 59 385 40 404 2033 61 1500 59 2033 60 2032 46 2031 59 2033 637 41 123 404 2034 61 2033 59 2035 46 2036 40 40 41 619 2012 91 2034 93 61 2037 40 2032 91 2034 93 41 41 59 125 125 612 437 492 2038 40 2039 2040 44 2041 2042 61 424 41 123 2038 40 2043 46 2044 40 2040 44 2042 41 41 59 125 612 437 492 2038 40 2045 2046 41 619 2047 40 2046 41 59 612 437 492 2047 40 426 2046 41 123 386 40 490 2048 398 2018 46 2049 41 123 2048 46 2050 40 2046 41 59 125 125 437 457 2011 2051 40 461 2052 44 404 2053 41 123 392 40 2054 46 2055 40 2052 44 430 2054 2056 41 41 450 418 2011 40 2056 44 2053 41 59 2057 2058 59 474 123 2058 61 2059 46 2060 40 2052 41 59 125 329 40 2061 41 123 450 424 59 125 2056 61 2058 46 2062 46 2063 40 2064 619 2064 46 2065 614 2065 46 2066 606 2064 46 2067 41 59 392 40 2056 614 424 41 450 424 59 450 418 2011 40 2056 44 2053 41 59 125 406 457 2011 2068 40 461 2069 41 123 392 40 461 46 2070 40 2069 41 41 450 424 59 474 123 461 91 93 2071 61 2069 46 2072 40 607 41 59 450 2051 40 2071 91 1500 93 44 404 46 2073 40 2071 91 1501 93 41 41 59 125 329 123 125 450 424 59 125 612 439 323 2074 40 2016 2075 44 2017 2076 41 123 392 40 2076 46 2077 46 2078 631 2014 46 2079 46 2078 41 450 380 59 392 40 2076 46 2077 46 2023 614 2023 41 450 380 59 621 386 40 490 2080 398 2018 46 2081 41 392 40 2080 631 2076 605 2080 46 2082 46 2083 46 2084 40 2076 46 2082 46 2083 41 605 2080 46 2077 634 2023 614 2076 46 2077 46 2023 41 450 380 59 392 40 2076 46 2082 46 2085 631 2076 46 2086 605 2076 46 2086 631 1500 41 2087 46 2088 40 2075 44 2076 46 2089 44 2076 46 2082 41 59 450 473 59 125 612 439 2090 60 2017 62 2091 40 41 123 450 2018 46 2092 59 125 612 439 2090 60 2011 62 2093 40 41 123 450 2022 59 125 612 438 431 492 2094 40 404 2095 41 123 2095 61 2096 46 2097 40 2095 44 2010 41 59 392 40 33 2098 46 2099 41 123 2038 40 2039 46 2100 41 59 125 360 123 621 621 2101 2102 61 418 40 41 59 2103 40 2012 46 2104 40 2105 619 2105 631 424 41 46 2106 40 2107 619 2102 46 2108 40 41 41 46 2109 40 2095 41 41 59 125 125 438 431 492 2110 40 426 2046 41 123 320 46 2110 40 2046 41 59 464 40 2046 41 123 328 2045 2111 58 2038 40 2111 41 59 325 59 328 2002 2112 58 2113 40 2112 46 2114 41 59 325 59 328 2005 2115 58 2116 40 2115 46 2114 41 59 325 59 328 2008 2117 58 2118 46 2119 40 467 41 59 325 59 125 125 437 492 2120 40 2121 2122 41 123 490 2046 61 418 2017 46 2123 123 2124 61 2122 125 59 621 621 392 40 2122 407 2125 2126 41 123 386 40 2127 60 2016 44 2017 62 2128 398 2018 41 123 392 40 2126 46 2129 62 2128 46 2130 46 2131 41 2128 46 2132 46 2133 40 2046 41 59 125 125 360 2047 40 2046 41 59 125 437 492 2134 40 2121 2122 41 619 2047 40 2122 41 59 438 431 492 2135 40 2016 2136 41 123 2136 46 2137 40 418 2017 46 2138 40 41 41 59 125 612 439 457 2139 2139 40 2013 2014 41 123 450 2140 46 2141 46 2139 46 2142 40 40 41 619 418 2000 40 2014 41 41 59 125 438 431 2139 2143 40 426 2136 44 2011 2144 44 2011 2145 41 123 450 2017 46 2139 40 2014 44 467 44 2136 44 2144 44 2145 41 59 125 125 
71700,C#,"    protected class OptionalSingle1Derived : OptionalSingle1
    {
        private int? _derivedRootId;
        private Root _derivedRoot;

        public int? DerivedRootId
        {
            get => _derivedRootId;
            set => SetWithNotify(value, ref _derivedRootId);
        }

        public Root DerivedRoot
        {
            get => _derivedRoot;
            set => SetWithNotify(value, ref _derivedRoot);
        }

        public override bool Equals(object obj)
            => base.Equals(obj as OptionalSingle1Derived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 437 404 63 2002 59 437 2003 2004 59 439 404 63 2005 123 2006 619 2002 59 2007 619 2008 40 2009 44 442 2002 41 59 125 439 2003 2010 123 2011 619 2004 59 2012 619 2013 40 2014 44 442 2004 41 59 125 439 431 323 2015 40 426 2016 41 619 320 46 2015 40 2016 311 2000 41 59 439 431 404 2017 40 41 619 320 46 2017 40 41 59 125 
70058,C#,"        private class ThrowingRelationalReader : RelationalDataReader
        {
            public override void Initialize(
                IRelationalConnection relationalConnection,
                DbCommand command,
                DbDataReader reader,
                Guid commandId,
                IRelationalCommandDiagnosticsLogger logger)
                => throw new InvalidOperationException(""Bang!"");
        }",0,437 334 2000 58 2001 123 439 431 492 2002 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 41 619 469 418 2013 40 648 41 59 125 
71692,C#,"    protected class OptionalAk1Derived : OptionalAk1
    {
        public override bool Equals(object obj)
            => base.Equals(obj as OptionalAk1Derived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
71710,C#,"    protected class OptionalSingleAk2MoreDerived : OptionalSingleAk2Derived
    {
        public override bool Equals(object obj)
            => base.Equals(obj as OptionalSingleAk2MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
71689,C#,"    protected class Optional2Derived : Optional2
    {
        public override bool Equals(object obj)
            => base.Equals(obj as Optional2Derived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
69384,C#,"    public class GenericOneToOneString : OneToOneTestBase
    {
        protected override TestModelBuilder CreateTestModelBuilder(
            TestHelpers testHelpers,
            Action<ModelConfigurationBuilder>? configure)
            => new GenericStringTestModelBuilder(testHelpers, configure);
    }",0,439 334 2000 58 2001 123 438 431 2002 2003 40 2004 2005 44 2006 60 2007 62 63 2008 41 619 418 2009 40 2005 44 2008 41 59 125 
68104,C#,"    private class CustomValueGeneratorContext : DbContext
    {
        private static readonly IServiceProvider _serviceProvider
            = new ServiceCollection()
                .AddEntityFrameworkInMemoryDatabase()
                .AddScoped<IValueGeneratorSelector, CustomInMemoryValueGeneratorSelector>()
                .BuildServiceProvider(validateScopes: true);

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(_serviceProvider)
                .UseInMemoryDatabase(nameof(CustomValueGeneratorContext));

        protected override void OnModelCreating(ModelBuilder modelBuilder)
            => modelBuilder
                .Entity<SomeEntity>(
                    b =>
                    {
                        b.HasAlternateKey(
                            e => new { e.SpecialId, e.SpecialString });
                        b.Property(e => e.SpecialId)
                            .HasAnnotation(""SpecialGuid"", true)
                            .ValueGeneratedOnAdd();

                        b.Property(e => e.SpecialString)
                            .ValueGeneratedOnAdd();
                    });
    }",0,437 334 2000 58 2001 123 437 457 441 2002 2003 61 418 2004 40 41 46 2005 40 41 46 2006 60 2007 44 2008 62 40 41 46 2009 40 2010 58 473 41 59 438 431 492 2011 40 2012 2013 41 619 2013 46 2014 40 2003 41 46 2015 40 2016 40 2000 41 41 59 438 431 492 2017 40 2018 2019 41 619 2019 46 2020 60 2021 62 40 2022 619 123 2022 46 2023 40 2024 619 418 123 2024 46 2025 44 2024 46 2026 125 41 59 2022 46 2027 40 2024 619 2024 46 2028 41 46 2029 40 648 44 473 41 46 2030 40 41 59 2022 46 2027 40 2024 619 2024 46 2031 41 46 2030 40 41 59 125 41 59 125 
79840,C#,"    public class UT_Helper
    {
        [TestMethod]
        public void GetSignData()
        {
            TestVerifiable verifiable = new();
            byte[] res = verifiable.GetSignData(ProtocolSettings.Default.Network);
            res.ToHexString().Should().Be(""4e454f3350b51da6bb366be3ea50140cda45ba7df575287c0371000b2037ed3898ff8bf5"");
        }

        [TestMethod]
        public void Sign()
        {
            TestVerifiable verifiable = new();
            byte[] res = verifiable.Sign(new KeyPair(TestUtils.GetByteArray(32, 0x42)), ProtocolSettings.Default.Network);
            res.Length.Should().Be(64);
        }

        [TestMethod]
        public void ToScriptHash()
        {
            byte[] testByteArray = TestUtils.GetByteArray(64, 0x42);
            UInt160 res = testByteArray.ToScriptHash();
            res.Should().Be(UInt160.Parse(""2d3b96ae1bcc5a585e075e3b81920210dec16302""));
        }

        [TestMethod]
        public void TestGetLowestSetBit()
        {
            var big1 = new BigInteger(0);
            big1.GetLowestSetBit().Should().Be(-1);

            var big2 = new BigInteger(512);
            big2.GetLowestSetBit().Should().Be(9);

            var big3 = new BigInteger(int.MinValue);
            big3.GetLowestSetBit().Should().Be(31);

            var big4 = new BigInteger(long.MinValue);
            big4.GetLowestSetBit().Should().Be(63);
        }

        [TestMethod]
        public void TestHexToBytes()
        {
            string nullStr = null;
            _ = nullStr.HexToBytes().ToHexString().Should().Be(Array.Empty<byte>().ToHexString());
            string emptyStr = """";
            emptyStr.HexToBytes().ToHexString().Should().Be(Array.Empty<byte>().ToHexString());
            string str1 = ""hab"";
            Action action = () => str1.HexToBytes();
            action.Should().Throw<FormatException>();
            string str2 = ""0102"";
            byte[] bytes = str2.HexToBytes();
            bytes.ToHexString().Should().Be(new byte[] { 0x01, 0x02 }.ToHexString());
        }

        [TestMethod]
        public void TestRemoveHashsetDictionary()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new Dictionary<int, object>
            {
                [2] = null
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b[4] = null;
            b[5] = null;
            b[1] = null;
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestRemoveHashsetSet()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new SortedSet<int>()
            {
                2
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b.Add(4);
            b.Add(5);
            b.Add(1);
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestRemoveHashsetHashSetCache()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new HashSetCache<int>(10)
            {
                2
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b.Add(4);
            b.Add(5);
            b.Add(1);
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestToHexString()
        {
            byte[] nullStr = null;
            Assert.ThrowsException<NullReferenceException>(() => nullStr.ToHexString());
            byte[] empty = Array.Empty<byte>();
            empty.ToHexString().Should().Be("""");
            empty.ToHexString(false).Should().Be("""");
            empty.ToHexString(true).Should().Be("""");

            byte[] str1 = new byte[] { (byte)'n', (byte)'e', (byte)'o' };
            str1.ToHexString().Should().Be(""6e656f"");
            str1.ToHexString(false).Should().Be(""6e656f"");
            str1.ToHexString(true).Should().Be(""6f656e"");
        }

        [TestMethod]
        public void TestGetVersion()
        {
            // assembly without version

            var asm = AppDomain.CurrentDomain.GetAssemblies()
                .Where(u => u.FullName == ""Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"")
                .FirstOrDefault();
            string version = asm?.GetVersion() ?? """";
            version.Should().Be(""0.0.0"");
        }

        [TestMethod]
        public void TestToByteArrayStandard()
        {
            BigInteger number = BigInteger.Zero;
            Assert.AreEqual("""", number.ToByteArrayStandard().ToHexString());

            number = BigInteger.One;
            Assert.AreEqual(""01"", number.ToByteArrayStandard().ToHexString());
        }

        [TestMethod]
        public void TestNextBigIntegerForRandom()
        {
            Random ran = new();
            Action action1 = () => ran.NextBigInteger(-1);
            action1.Should().Throw<ArgumentException>();

            ran.NextBigInteger(0).Should().Be(0);
            ran.NextBigInteger(8).Should().NotBeNull();
            ran.NextBigInteger(9).Should().NotBeNull();
        }

        [TestMethod]
        public void TestUnmapForIPAddress()
        {
            var addr = new IPAddress(new byte[] { 127, 0, 0, 1 });
            addr.Unmap().Should().Be(addr);

            var addr2 = addr.MapToIPv6();
            addr2.Unmap().Should().Be(addr);
        }

        [TestMethod]
        public void TestUnmapForIPEndPoin()
        {
            var addr = new IPAddress(new byte[] { 127, 0, 0, 1 });
            var endPoint = new IPEndPoint(addr, 8888);
            endPoint.Unmap().Should().Be(endPoint);

            var addr2 = addr.MapToIPv6();
            var endPoint2 = new IPEndPoint(addr2, 8888);
            endPoint2.Unmap().Should().Be(endPoint);
        }
    }",0,439 334 2000 123 91 2001 93 439 492 2002 40 41 123 2003 2004 61 418 40 41 59 326 91 93 2005 61 2004 46 2002 40 2006 46 2007 46 2008 41 59 2005 46 2009 40 41 46 2010 40 41 46 2011 40 648 41 59 125 91 2001 93 439 492 2012 40 41 123 2013 2014 61 418 40 41 59 326 91 93 2015 61 2014 46 2012 40 418 2016 40 2017 46 2018 40 1503 44 1503 41 41 44 2019 46 2020 46 2021 41 59 2015 46 2022 46 2023 40 41 46 2024 40 1503 41 59 125 91 2001 93 439 492 2025 40 41 123 326 91 93 2026 61 2027 46 2028 40 1503 44 1503 41 59 2029 2030 61 2026 46 2025 40 41 59 2030 46 2031 40 41 46 2032 40 2029 46 2033 40 648 41 41 59 125 91 2001 93 439 492 2034 40 41 123 490 2035 61 418 2036 40 1500 41 59 2035 46 2037 40 41 46 2038 40 41 46 2039 40 45 1501 41 59 490 2040 61 418 2036 40 1504 41 59 2040 46 2037 40 41 46 2038 40 41 46 2039 40 1502 41 59 490 2041 61 418 2036 40 404 46 2042 41 59 2041 46 2037 40 41 46 2038 40 41 46 2039 40 1503 41 59 490 2043 61 418 2036 40 413 46 2042 41 59 2043 46 2037 40 41 46 2038 40 41 46 2039 40 1503 41 59 125 91 2001 93 439 492 2044 40 41 123 461 2045 61 424 59 2046 61 2045 46 2047 40 41 46 2048 40 41 46 2049 40 41 46 2050 40 2051 46 2052 60 326 62 40 41 46 2048 40 41 41 59 461 2053 61 648 59 2053 46 2047 40 41 46 2048 40 41 46 2049 40 41 46 2050 40 2051 46 2052 60 326 62 40 41 46 2048 40 41 41 59 461 2054 61 648 59 2055 2056 61 40 41 619 2054 46 2047 40 41 59 2056 46 2049 40 41 46 2057 60 2058 62 40 41 59 461 2059 61 648 59 326 91 93 2060 61 2059 46 2047 40 41 59 2060 46 2048 40 41 46 2049 40 41 46 2050 40 418 326 91 93 123 1501 44 1502 125 46 2048 40 41 41 59 125 91 2001 93 439 492 2061 40 41 123 490 2062 61 418 2063 60 404 62 123 1501 44 1502 44 1502 125 59 490 2064 61 418 2065 60 404 44 426 62 123 91 1502 93 61 424 125 59 2062 46 2066 40 2064 41 59 2067 46 2068 40 418 404 91 93 123 1501 44 1502 125 44 2062 46 2069 40 41 41 59 2064 91 1502 93 61 424 59 2064 91 1502 93 61 424 59 2064 91 1501 93 61 424 59 2062 46 2066 40 2064 41 59 2067 46 2068 40 418 404 91 93 123 1502 125 44 2062 46 2069 40 41 41 59 125 91 2001 93 439 492 2070 40 41 123 490 2071 61 418 2072 60 404 62 123 1501 44 1502 44 1502 125 59 490 2073 61 418 2074 60 404 62 40 41 123 1502 125 59 2071 46 2075 40 2073 41 59 2076 46 2077 40 418 404 91 93 123 1501 44 1502 125 44 2071 46 2078 40 41 41 59 2073 46 2079 40 1502 41 59 2073 46 2079 40 1502 41 59 2073 46 2079 40 1501 41 59 2071 46 2075 40 2073 41 59 2076 46 2077 40 418 404 91 93 123 1502 125 44 2071 46 2078 40 41 41 59 125 91 2001 93 439 492 2080 40 41 123 490 2081 61 418 2082 60 404 62 123 1501 44 1502 44 1502 125 59 490 2083 61 418 2084 60 404 62 40 1502 41 123 1502 125 59 2081 46 2085 40 2083 41 59 2086 46 2087 40 418 404 91 93 123 1501 44 1502 125 44 2081 46 2088 40 41 41 59 2083 46 2089 40 1502 41 59 2083 46 2089 40 1502 41 59 2083 46 2089 40 1501 41 59 2081 46 2085 40 2083 41 59 2086 46 2087 40 418 404 91 93 123 1502 125 44 2081 46 2088 40 41 41 59 125 91 2001 93 439 492 2090 40 41 123 326 91 93 2091 61 424 59 2092 46 2093 60 2094 62 40 40 41 619 2091 46 2095 40 41 41 59 326 91 93 362 61 2096 46 2097 60 326 62 40 41 59 362 46 2095 40 41 46 2098 40 41 46 2099 40 648 41 59 362 46 2095 40 380 41 46 2098 40 41 46 2099 40 648 41 59 362 46 2095 40 473 41 46 2098 40 41 46 2099 40 648 41 59 326 91 93 2100 61 418 326 91 93 123 40 326 41 607 44 40 326 41 607 44 40 326 41 607 125 59 2100 46 2095 40 41 46 2098 40 41 46 2099 40 648 41 59 2100 46 2095 40 380 41 46 2098 40 41 46 2099 40 648 41 59 2100 46 2095 40 473 41 46 2098 40 41 46 2099 40 648 41 59 125 91 2001 93 439 492 2101 40 41 123 621 490 312 61 2102 46 2103 46 2104 40 41 46 2105 40 2106 619 2106 46 2107 614 648 41 46 2108 40 41 59 461 2109 61 312 634 2110 40 41 633 648 59 2109 46 2111 40 41 46 2112 40 648 41 59 125 91 2001 93 439 492 2113 40 41 123 2114 2115 61 2114 46 2116 59 2117 46 2118 40 648 44 2115 46 2119 40 41 46 2120 40 41 41 59 2115 61 2114 46 2121 59 2117 46 2118 40 648 44 2115 46 2119 40 41 46 2120 40 41 41 59 125 91 2001 93 439 492 2122 40 41 123 2123 2124 61 418 40 41 59 2125 2126 61 40 41 619 2124 46 2127 40 45 1501 41 59 2126 46 2128 40 41 46 2129 60 2130 62 40 41 59 2124 46 2127 40 1500 41 46 2128 40 41 46 2131 40 1500 41 59 2124 46 2127 40 1502 41 46 2128 40 41 46 2132 40 41 59 2124 46 2127 40 1502 41 46 2128 40 41 46 2132 40 41 59 125 91 2001 93 439 492 2133 40 41 123 490 2134 61 418 2135 40 418 326 91 93 123 1504 44 1500 44 1500 44 1501 125 41 59 2134 46 2136 40 41 46 2137 40 41 46 2138 40 2134 41 59 490 2139 61 2134 46 2140 40 41 59 2139 46 2136 40 41 46 2137 40 41 46 2138 40 2134 41 59 125 91 2001 93 439 492 2141 40 41 123 490 2142 61 418 2143 40 418 326 91 93 123 1504 44 1500 44 1500 44 1501 125 41 59 490 2144 61 418 2145 40 2142 44 1505 41 59 2144 46 2146 40 41 46 2147 40 41 46 2148 40 2144 41 59 490 2149 61 2142 46 2150 40 41 59 490 2151 61 418 2145 40 2149 44 1505 41 59 2151 46 2146 40 41 46 2147 40 41 46 2148 40 2144 41 59 125 125 
69391,C#,"    private class GenericStringTestReferenceCollectionBuilder<TEntity, TRelatedEntity>
        : GenericTestReferenceCollectionBuilder<TEntity, TRelatedEntity>
        where TEntity : class
        where TRelatedEntity : class
    {
        public GenericStringTestReferenceCollectionBuilder(
            ReferenceCollectionBuilder<TEntity, TRelatedEntity> referenceCollectionBuilder)
            : base(referenceCollectionBuilder)
        {
        }

        protected override GenericTestReferenceCollectionBuilder<TEntity, TRelatedEntity> Wrap(
            ReferenceCollectionBuilder<TEntity, TRelatedEntity> referenceCollectionBuilder)
            => new GenericStringTestReferenceCollectionBuilder<TEntity, TRelatedEntity>(referenceCollectionBuilder);

        public override TestReferenceCollectionBuilder<TEntity, TRelatedEntity> HasForeignKey(
            Expression<Func<TRelatedEntity, object?>> foreignKeyExpression)
            => Wrap(
                ReferenceCollectionBuilder.HasForeignKey(
                    foreignKeyExpression.GetMemberAccessList().Select(p => p.GetSimpleMemberName()).ToArray()));

        public override TestReferenceCollectionBuilder<TEntity, TRelatedEntity> HasPrincipalKey(
            Expression<Func<TEntity, object?>> keyExpression)
            => Wrap(
                ReferenceCollectionBuilder.HasPrincipalKey(
                    keyExpression.GetMemberAccessList().Select(p => p.GetSimpleMemberName()).ToArray()));
    }",0,437 334 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 2004 2001 58 334 2004 2002 58 334 123 439 2000 40 2005 60 2001 44 2002 62 2006 41 58 320 40 2006 41 123 125 438 431 2003 60 2001 44 2002 62 2007 40 2005 60 2001 44 2002 62 2006 41 619 418 2000 60 2001 44 2002 62 40 2006 41 59 439 431 2008 60 2001 44 2002 62 2009 40 2010 60 2011 60 2002 44 426 63 640 2012 41 619 2007 40 2005 46 2009 40 2012 46 2013 40 41 46 2014 40 2015 619 2015 46 2016 40 41 41 46 2017 40 41 41 41 59 439 431 2008 60 2001 44 2002 62 2018 40 2010 60 2011 60 2001 44 426 63 640 2019 41 619 2007 40 2005 46 2018 40 2019 46 2013 40 41 46 2014 40 2015 619 2015 46 2016 40 41 41 46 2017 40 41 41 41 59 125 
70641,C#,"    public class BadDataSqliteFixture : NorthwindQuerySqliteFixture<NoopModelCustomizer>
    {
        protected override IServiceCollection AddServices(IServiceCollection serviceCollection)
            => base.AddServices(serviceCollection)
                .AddSingleton<IRelationalCommandBuilderFactory, BadDataCommandBuilderFactory>();
    }",0,439 334 2000 58 2001 60 2002 62 123 438 431 2003 2004 40 2003 2005 41 619 320 46 2004 40 2005 41 46 2006 60 2007 44 2008 62 40 41 59 125 
69452,C#,"public class EnumToNumberConverter<TEnum, TNumber> : ValueConverter<TEnum, TNumber>
    where TEnum : struct
    where TNumber : struct
{
    // ReSharper disable once StaticMemberInGenericType
    private static readonly ConverterMappingHints? DefaultHints = CreateDefaultHints();

    private static ConverterMappingHints? CreateDefaultHints()
    {
        var underlyingModelType = typeof(TEnum).UnwrapEnumType();

        return (underlyingModelType == typeof(long) || underlyingModelType == typeof(ulong))
            && typeof(TNumber) == typeof(decimal)
                ? new ConverterMappingHints(precision: 20, scale: 0)
                : default;
    }

    /// <summary>
    ///     Creates a new instance of this converter. This converter preserves order.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-value-converters"">EF Core value converters</see> for more information and examples.
    /// </remarks>
    public EnumToNumberConverter()
        : this(null)
    {
    }

    /// <summary>
    ///     Creates a new instance of this converter. This converter preserves order.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-value-converters"">EF Core value converters</see> for more information and examples.
    /// </remarks>
    /// <param name=""mappingHints"">
    ///     Hints that can be used by the <see cref=""ITypeMappingSource"" /> to create data types with appropriate
    ///     facets for the converted data.
    /// </param>
    public EnumToNumberConverter(ConverterMappingHints? mappingHints)
        : base(
            ToNumber(),
            ToEnum(),
            DefaultHints?.With(mappingHints) ?? mappingHints)
    {
    }

    /// <summary>
    ///     A <see cref=""ValueConverterInfo"" /> for the default use of this converter.
    /// </summary>
    public static ValueConverterInfo DefaultInfo { get; }
        = new(typeof(TEnum), typeof(TNumber), i => new EnumToNumberConverter<TEnum, TNumber>(i.MappingHints), DefaultHints);

    private static Expression<Func<TEnum, TNumber>> ToNumber()
    {
        if (!typeof(TEnum).UnwrapNullableType().IsEnum)
        {
            throw new InvalidOperationException(
                CoreStrings.ConverterBadType(
                    typeof(EnumToNumberConverter<TEnum, TNumber>).ShortDisplayName(),
                    typeof(TEnum).ShortDisplayName(),
                    ""enum types""));
        }

        CheckTypeSupported(
            typeof(TNumber).UnwrapNullableType(),
            typeof(EnumToNumberConverter<TEnum, TNumber>),
            typeof(int), typeof(long), typeof(short), typeof(byte),
            typeof(uint), typeof(ulong), typeof(ushort), typeof(sbyte),
            typeof(double), typeof(float), typeof(decimal));

        var param = Expression.Parameter(typeof(TEnum), ""value"");

        return Expression.Lambda<Func<TEnum, TNumber>>(
            Expression.Convert(
                typeof(TNumber) == typeof(decimal)
                    ? Expression.Convert(param, typeof(long))
                    : (Expression)param,
                typeof(TNumber)), param);
    }

    private static Expression<Func<TNumber, TEnum>> ToEnum()
    {
        var param = Expression.Parameter(typeof(TNumber), ""value"");
        return Expression.Lambda<Func<TNumber, TEnum>>(
            Expression.Convert(
                typeof(TNumber) == typeof(decimal)
                    ? Expression.Convert(param, typeof(long))
                    : (Expression)param,
                typeof(TEnum)), param);
    }
}",0,439 334 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 2004 2001 58 462 2004 2002 58 462 123 621 437 457 441 2005 63 2006 61 2007 40 41 59 437 457 2005 63 2007 40 41 123 490 2008 61 478 40 2001 41 46 2009 40 41 59 450 40 2008 614 478 40 413 41 606 2008 614 478 40 480 41 41 605 478 40 2002 41 614 478 40 345 41 63 418 2005 40 2010 58 1503 44 2011 58 1500 41 58 349 59 125 612 439 2000 40 41 58 467 40 424 41 123 125 612 439 2000 40 2005 63 2012 41 58 320 40 2013 40 41 44 2014 40 41 44 2006 634 2015 40 2012 41 633 2012 41 123 125 612 439 457 2016 2017 123 2018 59 125 61 418 40 478 40 2001 41 44 478 40 2002 41 44 2019 619 418 2000 60 2001 44 2002 62 40 2019 46 2020 41 44 2006 41 59 437 457 2021 60 2022 60 2001 44 2002 640 2013 40 41 123 392 40 33 478 40 2001 41 46 2023 40 41 46 2024 41 123 469 418 2025 40 2026 46 2027 40 478 40 2000 60 2001 44 2002 62 41 46 2028 40 41 44 478 40 2001 41 46 2028 40 41 44 648 41 41 59 125 2029 40 478 40 2002 41 46 2023 40 41 44 478 40 2000 60 2001 44 2002 62 41 44 478 40 404 41 44 478 40 413 41 44 478 40 453 41 44 478 40 326 41 44 478 40 479 41 44 478 40 480 41 44 478 40 488 41 44 478 40 451 41 44 478 40 356 41 44 478 40 384 41 44 478 40 345 41 41 59 490 2030 61 2021 46 2031 40 478 40 2001 41 44 648 41 59 450 2021 46 2032 60 2022 60 2001 44 2002 640 40 2021 46 2033 40 478 40 2002 41 614 478 40 345 41 63 2021 46 2033 40 2030 44 478 40 413 41 41 58 40 2021 41 2030 44 478 40 2002 41 41 44 2030 41 59 125 437 457 2021 60 2022 60 2002 44 2001 640 2014 40 41 123 490 2034 61 2021 46 2035 40 478 40 2002 41 44 648 41 59 450 2021 46 2036 60 2022 60 2002 44 2001 640 40 2021 46 2037 40 478 40 2002 41 614 478 40 345 41 63 2021 46 2037 40 2034 44 478 40 413 41 41 58 40 2021 41 2034 44 478 40 2001 41 41 44 2034 41 59 125 125 
71333,C#,"    private class LikeAZooContextSensitive : LikeAZooContext
    {
        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .EnableSensitiveDataLogging()
                .UseInternalServiceProvider(_sensitiveProvider)
                .UseInMemoryDatabase(nameof(LikeAZooContextSensitive));
    }",0,437 334 2000 58 2001 123 438 406 431 492 2002 40 2003 2004 41 619 2004 46 2005 40 41 46 2006 40 2007 41 46 2008 40 2009 40 2000 41 41 59 125 
71331,C#,"    private class LikeAZooContext : DbContext
    {
        public LikeAZooContext()
        {
        }

        protected LikeAZooContext(DbContextOptions options)
            : base(options)
        {
        }

        public DbSet<Cat> Cats { get; set; }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(_serviceProvider)
                .UseInMemoryDatabase(nameof(LikeAZooContext));

        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder
                .Entity<Cat>()
                .Property(e => e.Id)
                .HasValueGenerator<InMemoryIntegerValueGenerator<int>>();

            modelBuilder
                .Entity<Hat>()
                .Property(e => e.Id)
                .HasValueGenerator<InMemoryIntegerValueGenerator<int>>();

            modelBuilder.Entity<Mat>(
                b =>
                {
                    b.Property(e => e.Id).HasValueGenerator<InMemoryIntegerValueGenerator<int>>();
                    b.HasMany(e => e.Cats)
                        .WithMany(e => e.Mats)
                        .UsingEntity<CatMat>(
                            ts => ts.HasOne<Cat>().WithMany(),
                            ts => ts.HasOne<Mat>().WithMany())
                        .HasKey(ts => new { ts.CatId, ts.MatId });
                });
        }
    }",0,437 334 2000 58 2001 123 439 2000 40 41 123 125 438 2000 40 2002 2003 41 58 320 40 2003 41 123 125 439 2004 60 2005 62 2006 123 2007 59 2008 59 125 438 406 431 492 2009 40 2010 2011 41 619 2011 46 2012 40 2013 41 46 2014 40 2015 40 2000 41 41 59 438 406 431 492 2016 40 2017 2018 41 123 2018 46 2019 60 2005 62 40 41 46 2020 40 2021 619 2021 46 2022 41 46 2023 60 2024 60 404 640 40 41 59 2018 46 2019 60 2025 62 40 41 46 2020 40 2021 619 2021 46 2022 41 46 2023 60 2024 60 404 640 40 41 59 2018 46 2019 60 2026 62 40 2027 619 123 2027 46 2020 40 2021 619 2021 46 2022 41 46 2023 60 2024 60 404 640 40 41 59 2027 46 2028 40 2021 619 2021 46 2006 41 46 2029 40 2021 619 2021 46 2030 41 46 2031 60 2032 62 40 2033 619 2033 46 2034 60 2005 62 40 41 46 2029 40 41 44 2033 619 2033 46 2034 60 2026 62 40 41 46 2029 40 41 41 46 2035 40 2033 619 418 123 2033 46 2036 44 2033 46 2037 125 41 59 125 41 59 125 125 
69392,C#,"    private class GenericStringTestReferenceNavigationBuilder<TEntity, TRelatedEntity> :
        GenericTestReferenceNavigationBuilder<TEntity, TRelatedEntity>
        where TEntity : class
        where TRelatedEntity : class
    {
        public GenericStringTestReferenceNavigationBuilder(
            ReferenceNavigationBuilder<TEntity, TRelatedEntity> referenceNavigationBuilder)
            : base(referenceNavigationBuilder)
        {
        }

        public override TestReferenceCollectionBuilder<TRelatedEntity, TEntity> WithMany(
            Expression<Func<TRelatedEntity, IEnumerable<TEntity>?>>? navigationExpression = null)
            => new GenericStringTestReferenceCollectionBuilder<TRelatedEntity, TEntity>(
                ReferenceNavigationBuilder.WithMany(
                    navigationExpression?.GetMemberAccess().GetSimpleMemberName()));

        public override TestReferenceReferenceBuilder<TEntity, TRelatedEntity> WithOne(
            Expression<Func<TRelatedEntity, TEntity?>>? navigationExpression = null)
            => new GenericStringTestReferenceReferenceBuilder<TEntity, TRelatedEntity>(
                ReferenceNavigationBuilder.WithOne(
                    navigationExpression?.GetMemberAccess().GetSimpleMemberName()));
    }",0,437 334 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 2004 2001 58 334 2004 2002 58 334 123 439 2000 40 2005 60 2001 44 2002 62 2006 41 58 320 40 2006 41 123 125 439 431 2007 60 2002 44 2001 62 2008 40 2009 60 2010 60 2002 44 2011 60 2001 62 63 640 63 2012 61 424 41 619 418 2013 60 2002 44 2001 62 40 2005 46 2008 40 2012 634 2014 40 41 46 2015 40 41 41 41 59 439 431 2016 60 2001 44 2002 62 2017 40 2009 60 2010 60 2002 44 2001 63 640 63 2012 61 424 41 619 418 2018 60 2001 44 2002 62 40 2005 46 2017 40 2012 634 2014 40 41 46 2015 40 41 41 41 59 125 
71696,C#,"    protected class OptionalAk2MoreDerived : OptionalAk2Derived
    {
        public override bool Equals(object obj)
            => base.Equals(obj as OptionalAk2MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
68778,C#,"    private class FakeRelationalCommand : IRelationalCommand
    {
        public string CommandText { get; }

        public IReadOnlyList<IRelationalParameter> Parameters { get; }

        public IReadOnlyDictionary<string, object> ParameterValues
            => throw new NotImplementedException();

        public int ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
            => 0;

        public Task<int> ExecuteNonQueryAsync(
            RelationalCommandParameterObject parameterObject,
            CancellationToken cancellationToken = default)
            => Task.FromResult(0);

        public RelationalDataReader ExecuteReader(RelationalCommandParameterObject parameterObject)
            => throw new NotImplementedException();

        public Task<RelationalDataReader> ExecuteReaderAsync(
            RelationalCommandParameterObject parameterObject,
            CancellationToken cancellationToken = default)
            => throw new NotImplementedException();

        public DbCommand CreateDbCommand(
            RelationalCommandParameterObject parameterObject,
            Guid commandId,
            DbCommandMethod commandMethod)
            => throw new NotImplementedException();

        public object ExecuteScalar(RelationalCommandParameterObject parameterObject)
            => throw new NotImplementedException();

        public Task<object> ExecuteScalarAsync(
            RelationalCommandParameterObject parameterObject,
            CancellationToken cancellationToken = default)
            => throw new NotImplementedException();

        public void PopulateFrom(IRelationalCommandTemplate commandTemplate)
            => throw new NotImplementedException();
    }",0,437 334 2000 58 2001 123 439 461 2002 123 2003 59 125 439 2004 60 2005 62 2006 123 2007 59 125 439 2008 60 461 44 426 62 2009 619 469 418 2010 40 41 59 439 404 2011 40 2012 2013 41 619 1500 59 439 2014 60 404 62 2015 40 2012 2013 44 2016 2017 61 349 41 619 2014 46 2018 40 1500 41 59 439 2019 2020 40 2012 2013 41 619 469 418 2010 40 41 59 439 2014 60 2019 62 2021 40 2012 2013 44 2016 2017 61 349 41 619 469 418 2010 40 41 59 439 2022 2023 40 2012 2013 44 2024 2025 44 2026 2027 41 619 469 418 2010 40 41 59 439 426 2028 40 2012 2013 41 619 469 418 2010 40 41 59 439 2014 60 426 62 2029 40 2012 2013 44 2016 2017 61 349 41 619 469 418 2010 40 41 59 439 492 2030 40 2031 2032 41 619 469 418 2010 40 41 59 125 
71690,C#,"    protected class Optional2MoreDerived : Optional2Derived
    {
        public override bool Equals(object obj)
            => base.Equals(obj as Optional2MoreDerived);

        public override int GetHashCode()
            => base.GetHashCode();
    }",0,438 334 2000 58 2001 123 439 431 323 2002 40 426 2003 41 619 320 46 2002 40 2003 311 2000 41 59 439 431 404 2004 40 41 619 320 46 2004 40 41 59 125 
71202,C#,"    private class CustomValueGenerator : ValueGenerator<int>
    {
        public override int Next(EntityEntry entry)
            => throw new NotImplementedException();

        public override bool GeneratesTemporaryValues
            => false;
    }",0,437 334 2000 58 2001 60 404 62 123 439 431 404 2002 40 2003 2004 41 619 469 418 2005 40 41 59 439 431 323 2006 619 380 59 125 
68615,C#,"public class MigrationsSqlGenerator : IMigrationsSqlGenerator
{
    private static readonly
        IReadOnlyDictionary<Type, Action<MigrationsSqlGenerator, MigrationOperation, IModel?, MigrationCommandListBuilder>>
        GenerateActions =
            new Dictionary<Type, Action<MigrationsSqlGenerator, MigrationOperation, IModel?, MigrationCommandListBuilder>>
            {
                { typeof(AddColumnOperation), (g, o, m, b) => g.Generate((AddColumnOperation)o, m, b) },
                { typeof(AddForeignKeyOperation), (g, o, m, b) => g.Generate((AddForeignKeyOperation)o, m, b) },
                { typeof(AddPrimaryKeyOperation), (g, o, m, b) => g.Generate((AddPrimaryKeyOperation)o, m, b) },
                { typeof(AddUniqueConstraintOperation), (g, o, m, b) => g.Generate((AddUniqueConstraintOperation)o, m, b) },
                { typeof(AlterColumnOperation), (g, o, m, b) => g.Generate((AlterColumnOperation)o, m, b) },
                { typeof(AlterDatabaseOperation), (g, o, m, b) => g.Generate((AlterDatabaseOperation)o, m, b) },
                { typeof(AlterSequenceOperation), (g, o, m, b) => g.Generate((AlterSequenceOperation)o, m, b) },
                { typeof(AlterTableOperation), (g, o, m, b) => g.Generate((AlterTableOperation)o, m, b) },
                { typeof(AddCheckConstraintOperation), (g, o, m, b) => g.Generate((AddCheckConstraintOperation)o, m, b) },
                { typeof(CreateIndexOperation), (g, o, m, b) => g.Generate((CreateIndexOperation)o, m, b) },
                { typeof(CreateSequenceOperation), (g, o, m, b) => g.Generate((CreateSequenceOperation)o, m, b) },
                { typeof(CreateTableOperation), (g, o, m, b) => g.Generate((CreateTableOperation)o, m, b) },
                { typeof(DropColumnOperation), (g, o, m, b) => g.Generate((DropColumnOperation)o, m, b) },
                { typeof(DropForeignKeyOperation), (g, o, m, b) => g.Generate((DropForeignKeyOperation)o, m, b) },
                { typeof(DropIndexOperation), (g, o, m, b) => g.Generate((DropIndexOperation)o, m, b) },
                { typeof(DropPrimaryKeyOperation), (g, o, m, b) => g.Generate((DropPrimaryKeyOperation)o, m, b) },
                { typeof(DropSchemaOperation), (g, o, m, b) => g.Generate((DropSchemaOperation)o, m, b) },
                { typeof(DropSequenceOperation), (g, o, m, b) => g.Generate((DropSequenceOperation)o, m, b) },
                { typeof(DropTableOperation), (g, o, m, b) => g.Generate((DropTableOperation)o, m, b) },
                { typeof(DropUniqueConstraintOperation), (g, o, m, b) => g.Generate((DropUniqueConstraintOperation)o, m, b) },
                { typeof(DropCheckConstraintOperation), (g, o, m, b) => g.Generate((DropCheckConstraintOperation)o, m, b) },
                { typeof(EnsureSchemaOperation), (g, o, m, b) => g.Generate((EnsureSchemaOperation)o, m, b) },
                { typeof(RenameColumnOperation), (g, o, m, b) => g.Generate((RenameColumnOperation)o, m, b) },
                { typeof(RenameIndexOperation), (g, o, m, b) => g.Generate((RenameIndexOperation)o, m, b) },
                { typeof(RenameSequenceOperation), (g, o, m, b) => g.Generate((RenameSequenceOperation)o, m, b) },
                { typeof(RenameTableOperation), (g, o, m, b) => g.Generate((RenameTableOperation)o, m, b) },
                { typeof(RestartSequenceOperation), (g, o, m, b) => g.Generate((RestartSequenceOperation)o, m, b) },
                { typeof(SqlOperation), (g, o, m, b) => g.Generate((SqlOperation)o, m, b) },
                { typeof(InsertDataOperation), (g, o, m, b) => g.Generate((InsertDataOperation)o, m, b) },
                { typeof(DeleteDataOperation), (g, o, m, b) => g.Generate((DeleteDataOperation)o, m, b) },
                { typeof(UpdateDataOperation), (g, o, m, b) => g.Generate((UpdateDataOperation)o, m, b) }
            };

    /// <summary>
    ///     Creates a new <see cref=""MigrationsSqlGenerator"" /> instance using the given dependencies.
    /// </summary>
    /// <param name=""dependencies"">Parameter object containing dependencies for this service.</param>
    public MigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies)
    {
        Dependencies = dependencies;

        if (dependencies.LoggingOptions.IsSensitiveDataLoggingEnabled)
        {
            SensitiveLoggingEnabled = true;
        }
    }

    /// <summary>
    ///     Relational provider-specific dependencies for this service.
    /// </summary>
    protected virtual MigrationsSqlGeneratorDependencies Dependencies { get; }

    private bool SensitiveLoggingEnabled { get; }

    /// <summary>
    ///     The <see cref=""IUpdateSqlGenerator"" />.
    /// </summary>
    protected virtual IUpdateSqlGenerator SqlGenerator
        => Dependencies.UpdateSqlGenerator;

    /// <summary>
    ///     Gets a comparer that can be used to compare two product versions.
    /// </summary>
    protected virtual IComparer<string> VersionComparer { get; } = new SemanticVersionComparer();

    /// <summary>
    ///     Gets or sets the options to use when generating commands.
    /// </summary>
    protected virtual MigrationsSqlGenerationOptions Options { get; set; }

    /// <summary>
    ///     Generates commands from a list of operations.
    /// </summary>
    /// <param name=""operations"">The operations.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""options"">The options to use when generating commands.</param>
    /// <returns>The list of commands to be executed or scripted.</returns>
    public virtual IReadOnlyList<MigrationCommand> Generate(
        IReadOnlyList<MigrationOperation> operations,
        IModel? model = null,
        MigrationsSqlGenerationOptions options = MigrationsSqlGenerationOptions.Default)
    {
        Options = options;

        var builder = new MigrationCommandListBuilder(Dependencies);
        try
        {
            foreach (var operation in operations)
            {
                Generate(operation, model, builder);
            }
        }
        finally
        {
            Options = MigrationsSqlGenerationOptions.Default;
        }

        return builder.GetCommandList();
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""MigrationOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     This method uses a double-dispatch mechanism to call one of the 'Generate' methods that are
    ///     specific to a certain subtype of <see cref=""MigrationOperation"" />. Typically database providers
    ///     will override these specific methods rather than this method. However, providers can override
    ///     this methods to handle provider-specific operations.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        MigrationOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        var operationType = operation.GetType();
        if (!GenerateActions.TryGetValue(operationType, out var generateAction))
        {
            throw new InvalidOperationException(RelationalStrings.UnknownOperation(GetType().ShortDisplayName(), operationType));
        }

        generateAction(this, operation, model, builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""AddColumnOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        AddColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        if (operation[RelationalAnnotationNames.ColumnOrder] != null)
        {
            Dependencies.MigrationsLogger.ColumnOrderIgnoredWarning(operation);
        }

        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" ADD "");

        ColumnDefinition(operation, model, builder);

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""AddForeignKeyOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        AddForeignKeyOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" ADD "");

        ForeignKeyConstraint(operation, model, builder);

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""AddPrimaryKeyOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        AddPrimaryKeyOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" ADD "");
        PrimaryKeyConstraint(operation, model, builder);

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""AddUniqueConstraintOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        AddUniqueConstraintOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" ADD "");
        UniqueConstraint(operation, model, builder);
        builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
        EndStatement(builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""AddCheckConstraintOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        AddCheckConstraintOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" ADD "");
        CheckConstraint(operation, model, builder);
        builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
        EndStatement(builder);
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""AlterColumnOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        AlterColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(AlterColumnOperation)));

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""AlterDatabaseOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that there is no default implementation of this method. Providers must override if they are to
    ///     support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        AlterDatabaseOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""RenameIndexOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        RenameIndexOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(RenameIndexOperation)));

    /// <summary>
    ///     Builds commands for the given <see cref=""AlterSequenceOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        AlterSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""ALTER SEQUENCE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name, operation.Schema));

        SequenceOptions(operation, model, builder);

        builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""AlterTableOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method does nothing because there is no common metadata
    ///     relating to this operation. Providers only need to override this method if they have some provider-specific
    ///     annotations that must be handled.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        AlterTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""RenameTableOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        RenameTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(RenameTableOperation)));

    /// <summary>
    ///     Builds commands for the given <see cref=""CreateIndexOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        CreateIndexOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder.Append(""CREATE "");

        if (operation.IsUnique)
        {
            builder.Append(""UNIQUE "");
        }

        IndexTraits(operation, model, builder);

        builder
            .Append(""INDEX "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
            .Append("" ON "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" ("")
            .Append(ColumnList(operation.Columns))
            .Append("")"");

        IndexOptions(operation, model, builder);

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""EnsureSchemaOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        EnsureSchemaOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(EnsureSchemaOperation)));

    /// <summary>
    ///     Builds commands for the given <see cref=""CreateSequenceOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        CreateSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""CREATE SEQUENCE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name, operation.Schema));

        var typeMapping = Dependencies.TypeMappingSource.GetMapping(operation.ClrType);

        if (operation.ClrType != typeof(long))
        {
            builder
                .Append("" AS "")
                .Append(typeMapping.StoreType);

            // set the typeMapping for use with operation.StartValue (i.e. a long) below
            typeMapping = Dependencies.TypeMappingSource.GetMapping(typeof(long));
        }

        builder
            .Append("" START WITH "")
            .Append(typeMapping.GenerateSqlLiteral(operation.StartValue));

        SequenceOptions(operation, model, builder);

        builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""CreateTableOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""CREATE TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name, operation.Schema))
            .AppendLine("" ("");

        using (builder.Indent())
        {
            CreateTableColumns(operation, model, builder);
            CreateTableConstraints(operation, model, builder);
            builder.AppendLine();
        }

        builder.Append("")"");

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropColumnOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        DropColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" DROP COLUMN "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name));

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropForeignKeyOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        DropForeignKeyOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" DROP CONSTRAINT "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name));

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""DropIndexOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        DropIndexOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(DropIndexOperation)));

    /// <summary>
    ///     Builds commands for the given <see cref=""DropPrimaryKeyOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        DropPrimaryKeyOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" DROP CONSTRAINT "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name));

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropSchemaOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        DropSchemaOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""DROP SCHEMA "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
            .AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropSequenceOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        DropSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""DROP SEQUENCE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name, operation.Schema))
            .AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropTableOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        DropTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        builder
            .Append(""DROP TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name, operation.Schema));

        if (terminate)
        {
            builder.AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropUniqueConstraintOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        DropUniqueConstraintOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" DROP CONSTRAINT "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
            .AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DropCheckConstraintOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        DropCheckConstraintOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder
            .Append(""ALTER TABLE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Table, operation.Schema))
            .Append("" DROP CONSTRAINT "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
            .AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""RenameColumnOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        RenameColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(RenameColumnOperation)));

    /// <summary>
    ///     Can be overridden by database providers to build commands for the given <see cref=""RenameSequenceOperation"" />
    ///     by making calls on the given <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <remarks>
    ///     Note that the default implementation of this method throws <see cref=""NotSupportedException"" />. Providers
    ///     must override if they are to support this kind of operation.
    /// </remarks>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        RenameSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(RenameSequenceOperation)));

    /// <summary>
    ///     Builds commands for the given <see cref=""RestartSequenceOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        RestartSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        var longTypeMapping = Dependencies.TypeMappingSource.GetMapping(typeof(long));

        builder
            .Append(""ALTER SEQUENCE "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name, operation.Schema))
            .Append("" RESTART WITH "")
            .Append(longTypeMapping.GenerateSqlLiteral(operation.StartValue))
            .AppendLine(Dependencies.SqlGenerationHelper.StatementTerminator);

        EndStatement(builder);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""SqlOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        SqlOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        builder.AppendLine(operation.Sql);

        EndStatement(builder, operation.SuppressTransaction);
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""InsertDataOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    /// <param name=""terminate"">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
    protected virtual void Generate(
        InsertDataOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder,
        bool terminate = true)
    {
        var sqlBuilder = new StringBuilder();
        foreach (var modificationCommand in GenerateModificationCommands(operation, model))
        {
            SqlGenerator.AppendInsertOperation(
                sqlBuilder,
                modificationCommand,
                0);
        }

        builder.Append(sqlBuilder.ToString());

        if (terminate)
        {
            EndStatement(builder);
        }
    }

    /// <summary>
    ///     Generates the commands that correspond to the given operation.
    /// </summary>
    /// <param name=""operation"">The data operation to generate commands for.</param>
    /// <param name=""model"">The model.</param>
    /// <returns>The commands that correspond to the given operation.</returns>
    protected virtual IEnumerable<IReadOnlyModificationCommand> GenerateModificationCommands(
        InsertDataOperation operation,
        IModel? model)
    {
        if (operation.Columns.Length != operation.Values.GetLength(1))
        {
            throw new InvalidOperationException(
                RelationalStrings.InsertDataOperationValuesCountMismatch(
                    operation.Values.GetLength(1), operation.Columns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.ColumnTypes != null
            && operation.Columns.Length != operation.ColumnTypes.Length)
        {
            throw new InvalidOperationException(
                RelationalStrings.InsertDataOperationTypesCountMismatch(
                    operation.ColumnTypes.Length, operation.Columns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.ColumnTypes == null
            && model == null)
        {
            throw new InvalidOperationException(
                RelationalStrings.InsertDataOperationNoModel(
                    FormatTable(operation.Table, operation.Schema)));
        }

        var propertyMappings = operation.ColumnTypes == null
            ? GetPropertyMappings(operation.Columns, operation.Table, operation.Schema, model)
            : null;

        for (var i = 0; i < operation.Values.GetLength(0); i++)
        {
            var modificationCommand = Dependencies.ModificationCommandFactory.CreateModificationCommand(
                new ModificationCommandParameters(operation.Table, operation.Schema, SensitiveLoggingEnabled));
            for (var j = 0; j < operation.Columns.Length; j++)
            {
                var name = operation.Columns[j];
                var value = operation.Values[i, j];
                var propertyMapping = propertyMappings?[j];
                var columnType = operation.ColumnTypes?[j];
                var typeMapping = propertyMapping != null
                    ? propertyMapping.TypeMapping
                    : value != null
                        ? Dependencies.TypeMappingSource.FindMapping(value.GetType(), columnType)
                        : Dependencies.TypeMappingSource.FindMapping(columnType!);

                modificationCommand.AddColumnModification(
                    new ColumnModificationParameters(
                        name, originalValue: null, value, propertyMapping?.Property, columnType, typeMapping,
                        read: false, write: true, key: true, condition: false,
                        SensitiveLoggingEnabled, propertyMapping?.Column.IsNullable));
            }

            yield return modificationCommand;
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""DeleteDataOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        DeleteDataOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        var sqlBuilder = new StringBuilder();
        foreach (var modificationCommand in GenerateModificationCommands(operation, model))
        {
            SqlGenerator.AppendDeleteOperation(
                sqlBuilder,
                modificationCommand,
                0);
        }

        builder.Append(sqlBuilder.ToString());
        EndStatement(builder);
    }

    /// <summary>
    ///     Generates the commands that correspond to the given operation.
    /// </summary>
    /// <param name=""operation"">The data operation to generate commands for.</param>
    /// <param name=""model"">The model.</param>
    /// <returns>The commands that correspond to the given operation.</returns>
    protected virtual IEnumerable<IReadOnlyModificationCommand> GenerateModificationCommands(
        DeleteDataOperation operation,
        IModel? model)
    {
        if (operation.KeyColumns.Length != operation.KeyValues.GetLength(1))
        {
            throw new InvalidOperationException(
                RelationalStrings.DeleteDataOperationValuesCountMismatch(
                    operation.KeyValues.GetLength(1), operation.KeyColumns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.KeyColumnTypes != null
            && operation.KeyColumns.Length != operation.KeyColumnTypes.Length)
        {
            throw new InvalidOperationException(
                RelationalStrings.DeleteDataOperationTypesCountMismatch(
                    operation.KeyColumnTypes.Length, operation.KeyColumns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.KeyColumnTypes == null
            && model == null)
        {
            throw new InvalidOperationException(
                RelationalStrings.DeleteDataOperationNoModel(
                    FormatTable(operation.Table, operation.Schema)));
        }

        var keyPropertyMappings = operation.KeyColumnTypes == null
            ? GetPropertyMappings(operation.KeyColumns, operation.Table, operation.Schema, model)
            : null;

        for (var i = 0; i < operation.KeyValues.GetLength(0); i++)
        {
            var modificationCommand = Dependencies.ModificationCommandFactory.CreateModificationCommand(
                new ModificationCommandParameters(operation.Table, operation.Schema, SensitiveLoggingEnabled));
            for (var j = 0; j < operation.KeyColumns.Length; j++)
            {
                var name = operation.KeyColumns[j];
                var value = operation.KeyValues[i, j];
                var propertyMapping = keyPropertyMappings?[j];
                var columnType = operation.KeyColumnTypes?[j];
                var typeMapping = propertyMapping != null
                    ? propertyMapping.TypeMapping
                    : value != null
                        ? Dependencies.TypeMappingSource.FindMapping(value.GetType(), columnType)
                        : Dependencies.TypeMappingSource.FindMapping(columnType!);

                modificationCommand.AddColumnModification(
                    new ColumnModificationParameters(
                        name, originalValue: null, value, propertyMapping?.Property, columnType, typeMapping,
                        read: false, write: true, key: true, condition: true,
                        SensitiveLoggingEnabled, propertyMapping?.Column.IsNullable));
            }

            yield return modificationCommand;
        }
    }

    /// <summary>
    ///     Builds commands for the given <see cref=""UpdateDataOperation"" /> by making calls on the given
    ///     <see cref=""MigrationCommandListBuilder"" />, and then terminates the final command.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to build the commands.</param>
    protected virtual void Generate(
        UpdateDataOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        var sqlBuilder = new StringBuilder();
        foreach (var modificationCommand in GenerateModificationCommands(operation, model))
        {
            SqlGenerator.AppendUpdateOperation(
                sqlBuilder,
                modificationCommand,
                0);
        }

        builder.Append(sqlBuilder.ToString());
        EndStatement(builder);
    }

    /// <summary>
    ///     Generates the commands that correspond to the given operation.
    /// </summary>
    /// <param name=""operation"">The data operation to generate commands for.</param>
    /// <param name=""model"">The model.</param>
    /// <returns>The commands that correspond to the given operation.</returns>
    protected virtual IEnumerable<IReadOnlyModificationCommand> GenerateModificationCommands(
        UpdateDataOperation operation,
        IModel? model)
    {
        if (operation.KeyColumns.Length != operation.KeyValues.GetLength(1))
        {
            throw new InvalidOperationException(
                RelationalStrings.UpdateDataOperationKeyValuesCountMismatch(
                    operation.KeyValues.GetLength(1), operation.KeyColumns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.Columns.Length != operation.Values.GetLength(1))
        {
            throw new InvalidOperationException(
                RelationalStrings.UpdateDataOperationValuesCountMismatch(
                    operation.Values.GetLength(1), operation.Columns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.KeyValues.GetLength(0) != operation.Values.GetLength(0))
        {
            throw new InvalidOperationException(
                RelationalStrings.UpdateDataOperationRowCountMismatch(
                    operation.Values.GetLength(0), operation.KeyValues.GetLength(0), FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.KeyColumnTypes != null
            && operation.KeyColumns.Length != operation.KeyColumnTypes.Length)
        {
            throw new InvalidOperationException(
                RelationalStrings.UpdateDataOperationKeyTypesCountMismatch(
                    operation.KeyColumnTypes.Length, operation.KeyColumns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.ColumnTypes != null
            && operation.Columns.Length != operation.ColumnTypes.Length)
        {
            throw new InvalidOperationException(
                RelationalStrings.UpdateDataOperationTypesCountMismatch(
                    operation.ColumnTypes.Length, operation.Columns.Length, FormatTable(operation.Table, operation.Schema)));
        }

        if (operation.KeyColumnTypes == null
            && model == null)
        {
            throw new InvalidOperationException(
                RelationalStrings.UpdateDataOperationNoModel(
                    FormatTable(operation.Table, operation.Schema)));
        }

        var keyPropertyMappings = operation.KeyColumnTypes == null
            ? GetPropertyMappings(operation.KeyColumns, operation.Table, operation.Schema, model)
            : null;
        var propertyMappings = operation.ColumnTypes == null
            ? GetPropertyMappings(operation.Columns, operation.Table, operation.Schema, model)
            : null;

        for (var i = 0; i < operation.KeyValues.GetLength(0); i++)
        {
            var modificationCommand = Dependencies.ModificationCommandFactory.CreateModificationCommand(
                new ModificationCommandParameters(operation.Table, operation.Schema, SensitiveLoggingEnabled));
            for (var j = 0; j < operation.KeyColumns.Length; j++)
            {
                var name = operation.KeyColumns[j];
                var value = operation.KeyValues[i, j];
                var propertyMapping = keyPropertyMappings?[j];
                var columnType = operation.KeyColumnTypes?[j];
                var typeMapping = propertyMapping != null
                    ? propertyMapping.TypeMapping
                    : value != null
                        ? Dependencies.TypeMappingSource.FindMapping(value.GetType(), columnType)
                        : Dependencies.TypeMappingSource.FindMapping(columnType!);

                modificationCommand.AddColumnModification(
                    new ColumnModificationParameters(
                        name, originalValue: null, value, propertyMapping?.Property, columnType, typeMapping,
                        read: false, write: false, key: true, condition: true,
                        SensitiveLoggingEnabled, propertyMapping?.Column.IsNullable));
            }

            for (var j = 0; j < operation.Columns.Length; j++)
            {
                var name = operation.Columns[j];
                var value = operation.Values[i, j];
                var propertyMapping = propertyMappings?[j];
                var columnType = operation.ColumnTypes?[j];
                var typeMapping = propertyMapping != null
                    ? propertyMapping.TypeMapping
                    : value != null
                        ? Dependencies.TypeMappingSource.FindMapping(value.GetType(), columnType)
                        : Dependencies.TypeMappingSource.FindMapping(columnType!);

                modificationCommand.AddColumnModification(
                    new ColumnModificationParameters(
                        name, originalValue: null, value, propertyMapping?.Property, columnType, typeMapping,
                        read: false, write: true, key: true, condition: false,
                        SensitiveLoggingEnabled, propertyMapping?.Column.IsNullable));
            }

            yield return modificationCommand;
        }
    }

    private static string FormatTable(string table, string? schema)
        => schema == null ? table : schema + ""."" + table;

    private static IColumnMapping[] GetPropertyMappings(
        string[] names,
        string tableName,
        string? schema,
        IModel? model)
    {
        var table = model?.GetRelationalModel().FindTable(tableName, schema);
        if (table == null)
        {
            throw new InvalidOperationException(
                RelationalStrings.DataOperationNoTable(
                    FormatTable(tableName, schema)));
        }

        var properties = new IColumnMapping[names.Length];
        for (var i = 0; i < names.Length; i++)
        {
            var name = names[i];
            var column = table.FindColumn(name);
            if (column == null)
            {
                throw new InvalidOperationException(
                    RelationalStrings.DataOperationNoProperty(
                        FormatTable(tableName, schema), name));
            }

            properties[i] = column.PropertyMappings.First();
        }

        return properties;
    }

    /// <summary>
    ///     Generates a SQL fragment configuring a sequence in a <see cref=""AlterSequenceOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void SequenceOptions(
        AlterSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => SequenceOptions(
            operation.Schema,
            operation.Name,
            operation,
            model,
            builder);

    /// <summary>
    ///     Generates a SQL fragment configuring a sequence in a <see cref=""CreateSequenceOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void SequenceOptions(
        CreateSequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => SequenceOptions(
            operation.Schema,
            operation.Name,
            operation,
            model,
            builder);

    /// <summary>
    ///     Generates a SQL fragment configuring a sequence with the given options.
    /// </summary>
    /// <param name=""schema"">The schema that contains the sequence, or <see langword=""null"" /> to use the default schema.</param>
    /// <param name=""name"">The sequence name.</param>
    /// <param name=""operation"">The sequence options.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void SequenceOptions(
        string? schema,
        string name,
        SequenceOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        var intTypeMapping = Dependencies.TypeMappingSource.GetMapping(typeof(int));
        var longTypeMapping = Dependencies.TypeMappingSource.GetMapping(typeof(long));

        builder
            .Append("" INCREMENT BY "")
            .Append(intTypeMapping.GenerateSqlLiteral(operation.IncrementBy));

        if (operation.MinValue != null)
        {
            builder
                .Append("" MINVALUE "")
                .Append(longTypeMapping.GenerateSqlLiteral(operation.MinValue));
        }
        else
        {
            builder.Append("" NO MINVALUE"");
        }

        if (operation.MaxValue != null)
        {
            builder
                .Append("" MAXVALUE "")
                .Append(longTypeMapping.GenerateSqlLiteral(operation.MaxValue));
        }
        else
        {
            builder.Append("" NO MAXVALUE"");
        }

        builder.Append(operation.IsCyclic ? "" CYCLE"" : "" NO CYCLE"");
    }

    /// <summary>
    ///     Generates a SQL fragment for the column definitions in a <see cref=""CreateTableOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CreateTableColumns(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        for (var i = 0; i < operation.Columns.Count; i++)
        {
            ColumnDefinition(operation.Columns[i], model, builder);

            if (i != operation.Columns.Count - 1)
            {
                builder.AppendLine("","");
            }
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for a column definition in an <see cref=""AddColumnOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void ColumnDefinition(
        AddColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => ColumnDefinition(
            operation.Schema,
            operation.Table,
            operation.Name,
            operation,
            model,
            builder);

    /// <summary>
    ///     Generates a SQL fragment for a column definition for the given column metadata.
    /// </summary>
    /// <param name=""schema"">The schema that contains the table, or <see langword=""null"" /> to use the default schema.</param>
    /// <param name=""table"">The table that contains the column.</param>
    /// <param name=""name"">The column name.</param>
    /// <param name=""operation"">The column metadata.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void ColumnDefinition(
        string? schema,
        string table,
        string name,
        ColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (operation.ComputedColumnSql != null)
        {
            ComputedColumnDefinition(schema, table, name, operation, model, builder);

            return;
        }

        var columnType = operation.ColumnType ?? GetColumnType(schema, table, name, operation, model)!;
        builder
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(name))
            .Append("" "")
            .Append(columnType);

        if (operation.Collation != null)
        {
            builder
                .Append("" COLLATE "")
                .Append(operation.Collation);
        }

        builder.Append(operation.IsNullable ? "" NULL"" : "" NOT NULL"");

        DefaultValue(operation.DefaultValue, operation.DefaultValueSql, columnType, builder);
    }

    /// <summary>
    ///     Generates a SQL fragment for a computed column definition for the given column metadata.
    /// </summary>
    /// <param name=""schema"">The schema that contains the table, or <see langword=""null"" /> to use the default schema.</param>
    /// <param name=""table"">The table that contains the column.</param>
    /// <param name=""name"">The column name.</param>
    /// <param name=""operation"">The column metadata.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void ComputedColumnDefinition(
        string? schema,
        string table,
        string name,
        ColumnOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
        => throw new NotSupportedException(RelationalStrings.MigrationSqlGenerationMissing(nameof(ColumnOperation)));

    /// <summary>
    ///     Gets the store/database type of a column given the provided metadata.
    /// </summary>
    /// <param name=""schema"">The schema that contains the table, or <see langword=""null"" /> to use the default schema.</param>
    /// <param name=""tableName"">The table that contains the column.</param>
    /// <param name=""name"">The column name.</param>
    /// <param name=""operation"">The column metadata.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <returns>The database/store type for the column.</returns>
    protected virtual string? GetColumnType(
        string? schema,
        string tableName,
        string name,
        ColumnOperation operation,
        IModel? model)
    {
        var keyOrIndex = false;

        var table = model?.GetRelationalModel().FindTable(tableName, schema);
        var column = table?.FindColumn(name);
        if (column != null)
        {
            if (operation.IsUnicode == column.IsUnicode
                && operation.MaxLength == column.MaxLength
                && operation.Precision == column.Precision
                && operation.Scale == column.Scale
                && operation.IsFixedLength == column.IsFixedLength
                && operation.IsRowVersion == column.IsRowVersion)
            {
                return column.StoreType;
            }

            keyOrIndex = table!.UniqueConstraints.Any(u => u.Columns.Contains(column))
                || table.ForeignKeyConstraints.Any(u => u.Columns.Contains(column))
                || table.Indexes.Any(u => u.Columns.Contains(column));
        }

        return Dependencies.TypeMappingSource.FindMapping(
                operation.ClrType,
                null,
                keyOrIndex,
                operation.IsUnicode,
                operation.MaxLength,
                operation.IsRowVersion,
                operation.IsFixedLength,
                operation.Precision,
                operation.Scale)
            ?.StoreType;
    }

    /// <summary>
    ///     Generates a SQL fragment for the default constraint of a column.
    /// </summary>
    /// <param name=""defaultValue"">The default value for the column.</param>
    /// <param name=""defaultValueSql"">The SQL expression to use for the column's default constraint.</param>
    /// <param name=""columnType"">Store/database type of the column.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void DefaultValue(
        object? defaultValue,
        string? defaultValueSql,
        string? columnType,
        MigrationCommandListBuilder builder)
    {
        if (defaultValueSql != null)
        {
            builder
                .Append("" DEFAULT ("")
                .Append(defaultValueSql)
                .Append("")"");
        }
        else if (defaultValue != null)
        {
            var typeMapping = (columnType != null
                ? Dependencies.TypeMappingSource.FindMapping(defaultValue.GetType(), columnType)
                : null)
                ?? Dependencies.TypeMappingSource.GetMappingForValue(defaultValue);

            builder
                .Append("" DEFAULT "")
                .Append(typeMapping.GenerateSqlLiteral(defaultValue));
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for the constraints of a <see cref=""CreateTableOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CreateTableConstraints(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        CreateTablePrimaryKeyConstraint(operation, model, builder);
        CreateTableUniqueConstraints(operation, model, builder);
        CreateTableCheckConstraints(operation, model, builder);
        CreateTableForeignKeys(operation, model, builder);
    }

    /// <summary>
    ///     Generates a SQL fragment for the foreign key constraints of a <see cref=""CreateTableOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CreateTableForeignKeys(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        foreach (var foreignKey in operation.ForeignKeys)
        {
            builder.AppendLine("","");
            ForeignKeyConstraint(foreignKey, model, builder);
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for a foreign key constraint of an <see cref=""AddForeignKeyOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void ForeignKeyConstraint(
        AddForeignKeyOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (operation.Name != null)
        {
            builder
                .Append(""CONSTRAINT "")
                .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
                .Append("" "");
        }

        builder
            .Append(""FOREIGN KEY ("")
            .Append(ColumnList(operation.Columns))
            .Append("") REFERENCES "")
            .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.PrincipalTable, operation.PrincipalSchema));

        if (operation.PrincipalColumns != null)
        {
            builder
                .Append("" ("")
                .Append(ColumnList(operation.PrincipalColumns))
                .Append("")"");
        }

        if (operation.OnUpdate != ReferentialAction.NoAction)
        {
            builder.Append("" ON UPDATE "");
            ForeignKeyAction(operation.OnUpdate, builder);
        }

        if (operation.OnDelete != ReferentialAction.NoAction)
        {
            builder.Append("" ON DELETE "");
            ForeignKeyAction(operation.OnDelete, builder);
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for the primary key constraint of a <see cref=""CreateTableOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CreateTablePrimaryKeyConstraint(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (operation.PrimaryKey != null)
        {
            builder.AppendLine("","");
            PrimaryKeyConstraint(operation.PrimaryKey, model, builder);
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for a primary key constraint of an <see cref=""AddPrimaryKeyOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void PrimaryKeyConstraint(
        AddPrimaryKeyOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (operation.Name != null)
        {
            builder
                .Append(""CONSTRAINT "")
                .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
                .Append("" "");
        }

        builder
            .Append(""PRIMARY KEY "");

        IndexTraits(operation, model, builder);

        builder.Append(""("")
            .Append(ColumnList(operation.Columns))
            .Append("")"");
    }

    /// <summary>
    ///     Generates a SQL fragment for the unique constraints of a <see cref=""CreateTableOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CreateTableUniqueConstraints(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        foreach (var uniqueConstraint in operation.UniqueConstraints)
        {
            builder.AppendLine("","");
            UniqueConstraint(uniqueConstraint, model, builder);
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for a unique constraint of an <see cref=""AddUniqueConstraintOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void UniqueConstraint(
        AddUniqueConstraintOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (operation.Name != null)
        {
            builder
                .Append(""CONSTRAINT "")
                .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
                .Append("" "");
        }

        builder
            .Append(""UNIQUE "");

        IndexTraits(operation, model, builder);

        builder.Append(""("")
            .Append(ColumnList(operation.Columns))
            .Append("")"");
    }

    /// <summary>
    ///     Generates a SQL fragment for the check constraints of a <see cref=""CreateTableOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CreateTableCheckConstraints(
        CreateTableOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        foreach (var checkConstraint in operation.CheckConstraints)
        {
            builder.AppendLine("","");
            CheckConstraint(checkConstraint, model, builder);
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for a check constraint of an <see cref=""AddCheckConstraintOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void CheckConstraint(
        AddCheckConstraintOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (operation.Name != null)
        {
            builder
                .Append(""CONSTRAINT "")
                .Append(Dependencies.SqlGenerationHelper.DelimitIdentifier(operation.Name))
                .Append("" "");
        }

        builder
            .Append(""CHECK "");

        builder.Append(""("")
            .Append(operation.Sql)
            .Append("")"");
    }

    /// <summary>
    ///     Generates a SQL fragment for traits of an index from a <see cref=""CreateIndexOperation"" />,
    ///     <see cref=""AddPrimaryKeyOperation"" />, or <see cref=""AddUniqueConstraintOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void IndexTraits(
        MigrationOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
    }

    /// <summary>
    ///     Generates a SQL fragment for extras (filter, included columns, options) of an index from a <see cref=""CreateIndexOperation"" />.
    /// </summary>
    /// <param name=""operation"">The operation.</param>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void IndexOptions(
        CreateIndexOperation operation,
        IModel? model,
        MigrationCommandListBuilder builder)
    {
        if (!string.IsNullOrEmpty(operation.Filter))
        {
            builder
                .Append("" WHERE "")
                .Append(operation.Filter);
        }
    }

    /// <summary>
    ///     Generates a SQL fragment for the given referential action.
    /// </summary>
    /// <param name=""referentialAction"">The referential action.</param>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    protected virtual void ForeignKeyAction(
        ReferentialAction referentialAction,
        MigrationCommandListBuilder builder)
    {
        switch (referentialAction)
        {
            case ReferentialAction.Restrict:
                builder.Append(""RESTRICT"");
                break;
            case ReferentialAction.Cascade:
                builder.Append(""CASCADE"");
                break;
            case ReferentialAction.SetNull:
                builder.Append(""SET NULL"");
                break;
            case ReferentialAction.SetDefault:
                builder.Append(""SET DEFAULT"");
                break;
            default:
                Check.DebugAssert(
                    referentialAction == ReferentialAction.NoAction,
                    ""Unexpected value: "" + referentialAction);
                break;
        }
    }

    /// <summary>
    ///     Generates a SQL fragment to terminate the SQL command.
    /// </summary>
    /// <param name=""builder"">The command builder to use to add the SQL fragment.</param>
    /// <param name=""suppressTransaction"">
    ///     Indicates whether or not transactions should be suppressed while executing the built command.
    /// </param>
    protected virtual void EndStatement(
        MigrationCommandListBuilder builder,
        bool suppressTransaction = false)
        => builder.EndCommand(suppressTransaction);

    /// <summary>
    ///     Concatenates the given column names into a <see cref=""ISqlGenerationHelper.DelimitIdentifier(string)"" />
    ///     separated list.
    /// </summary>
    /// <param name=""columns"">The column names.</param>
    /// <returns>The column list.</returns>
    protected virtual string ColumnList(string[] columns)
        => string.Join("", "", columns.Select(Dependencies.SqlGenerationHelper.DelimitIdentifier));

    /// <summary>
    ///     Checks whether or not <see cref=""AddColumnOperation"" /> supports the passing in the
    ///     old column, which was only added in EF Core 1.1.
    /// </summary>
    /// <param name=""model"">The target model which may be <see langword=""null"" /> if the operations exist without a model.</param>
    /// <returns>
    ///     <see langword=""true"" /> If the model was generated by EF Core 1.1 or later; <see langword=""false"" /> if the model is
    ///     <see langword=""null"" />, has
    ///     no version specified, or was generated by an EF Core version prior to 1.1.
    /// </returns>
    protected virtual bool IsOldColumnSupported(IModel? model)
        => TryGetVersion(model, out var version) && VersionComparer.Compare(version, ""1.1.0"") >= 0;

    /// <summary>
    ///     Checks whether or not <see cref=""RenameTableOperation"" /> and <see cref=""RenameSequenceOperation"" /> use
    ///     the legacy behavior of setting the new name and schema to null when unchanged.
    /// </summary>
    /// <param name=""model"">The target model.</param>
    /// <returns><see langword=""true"" /> if the legacy behavior is used.</returns>
    protected virtual bool HasLegacyRenameOperations(IModel? model)
        => !TryGetVersion(model, out var version) || VersionComparer.Compare(version, ""2.1.0"") < 0;

    /// <summary>
    ///     Gets the product version used to generate the current migration. Providers can use this to preserve
    ///     compatibility with migrations generated using previous versions.
    /// </summary>
    /// <param name=""model"">The target model.</param>
    /// <param name=""version"">The version.</param>
    /// <returns><see langword=""true"" /> if the version could be retrieved.</returns>
    protected virtual bool TryGetVersion([NotNullWhen(true)] IModel? model, [NotNullWhen(true)] out string? version)
    {
        if (!(model?.GetProductVersion() is string versionString))
        {
            version = null;

            return false;
        }

        version = versionString;

        return true;
    }
}",1,439 334 2000 58 2001 123 437 457 441 2002 60 2003 44 2004 60 2000 44 2005 44 2006 63 44 2007 640 2008 61 418 2009 60 2003 44 2004 60 2000 44 2005 44 2006 63 44 2007 640 123 123 478 40 2010 41 44 40 2011 44 2012 44 2013 44 2014 41 619 2011 46 2015 40 40 2010 41 2012 44 2013 44 2014 41 125 44 123 478 40 2016 41 44 40 2017 44 2018 44 2019 44 2020 41 619 2017 46 2021 40 40 2016 41 2018 44 2019 44 2020 41 125 44 123 478 40 2022 41 44 40 2023 44 2024 44 2025 44 2026 41 619 2023 46 2027 40 40 2022 41 2024 44 2025 44 2026 41 125 44 123 478 40 2028 41 44 40 2029 44 2030 44 2031 44 2032 41 619 2029 46 2033 40 40 2028 41 2030 44 2031 44 2032 41 125 44 123 478 40 2034 41 44 40 2035 44 2036 44 2037 44 2038 41 619 2035 46 2039 40 40 2034 41 2036 44 2037 44 2038 41 125 44 123 478 40 2040 41 44 40 2041 44 2042 44 2043 44 2044 41 619 2041 46 2045 40 40 2040 41 2042 44 2043 44 2044 41 125 44 123 478 40 2046 41 44 40 2047 44 2048 44 2049 44 2050 41 619 2047 46 2051 40 40 2046 41 2048 44 2049 44 2050 41 125 44 123 478 40 2052 41 44 40 2053 44 2054 44 2055 44 2056 41 619 2053 46 2057 40 40 2052 41 2054 44 2055 44 2056 41 125 44 123 478 40 2058 41 44 40 2059 44 2060 44 2061 44 2062 41 619 2059 46 2063 40 40 2058 41 2060 44 2061 44 2062 41 125 44 123 478 40 2064 41 44 40 2065 44 2066 44 2067 44 2068 41 619 2065 46 2069 40 40 2064 41 2066 44 2067 44 2068 41 125 44 123 478 40 2070 41 44 40 2071 44 2072 44 2073 44 2074 41 619 2071 46 2075 40 40 2070 41 2072 44 2073 44 2074 41 125 44 123 478 40 2076 41 44 40 2077 44 2078 44 2079 44 2080 41 619 2077 46 2081 40 40 2076 41 2078 44 2079 44 2080 41 125 44 123 478 40 2082 41 44 40 2083 44 2084 44 2085 44 2086 41 619 2083 46 2087 40 40 2082 41 2084 44 2085 44 2086 41 125 44 123 478 40 2088 41 44 40 2089 44 2090 44 2091 44 2092 41 619 2089 46 2093 40 40 2088 41 2090 44 2091 44 2092 41 125 44 123 478 40 2094 41 44 40 2095 44 2096 44 2097 44 2098 41 619 2095 46 2099 40 40 2094 41 2096 44 2097 44 2098 41 125 44 123 478 40 2100 41 44 40 2101 44 2102 44 2103 44 2104 41 619 2101 46 2105 40 40 2100 41 2102 44 2103 44 2104 41 125 44 123 478 40 2106 41 44 40 2107 44 2108 44 2109 44 2110 41 619 2107 46 2111 40 40 2106 41 2108 44 2109 44 2110 41 125 44 123 478 40 2112 41 44 40 2113 44 2114 44 2115 44 2116 41 619 2113 46 2117 40 40 2112 41 2114 44 2115 44 2116 41 125 44 123 478 40 2118 41 44 40 2119 44 2120 44 2121 44 2122 41 619 2119 46 2123 40 40 2118 41 2120 44 2121 44 2122 41 125 44 123 478 40 2124 41 44 40 2125 44 2126 44 2127 44 2128 41 619 2125 46 2129 40 40 2124 41 2126 44 2127 44 2128 41 125 44 123 478 40 2130 41 44 40 2131 44 2132 44 2133 44 2134 41 619 2131 46 2135 40 40 2130 41 2132 44 2133 44 2134 41 125 44 123 478 40 2136 41 44 40 2137 44 2138 44 2139 44 2140 41 619 2137 46 2141 40 40 2136 41 2138 44 2139 44 2140 41 125 44 123 478 40 2142 41 44 40 2143 44 2144 44 2145 44 2146 41 619 2143 46 2147 40 40 2142 41 2144 44 2145 44 2146 41 125 44 123 478 40 2148 41 44 40 2149 44 2150 44 2151 44 2152 41 619 2149 46 2153 40 40 2148 41 2150 44 2151 44 2152 41 125 44 123 478 40 2154 41 44 40 2155 44 2156 44 2157 44 2158 41 619 2155 46 2159 40 40 2154 41 2156 44 2157 44 2158 41 125 44 123 478 40 2160 41 44 40 2161 44 2162 44 2163 44 2164 41 619 2161 46 2165 40 40 2160 41 2162 44 2163 44 2164 41 125 44 123 478 40 2166 41 44 40 2167 44 2168 44 2169 44 2170 41 619 2167 46 2171 40 40 2166 41 2168 44 2169 44 2170 41 125 44 123 478 40 2172 41 44 40 2173 44 2174 44 2175 44 2176 41 619 2173 46 2177 40 40 2172 41 2174 44 2175 44 2176 41 125 44 123 478 40 2178 41 44 40 2179 44 2180 44 2181 44 2182 41 619 2179 46 2183 40 40 2178 41 2180 44 2181 44 2182 41 125 44 123 478 40 2184 41 44 40 2185 44 2186 44 2187 44 2188 41 619 2185 46 2189 40 40 2184 41 2186 44 2187 44 2188 41 125 44 123 478 40 2190 41 44 40 2191 44 2192 44 2193 44 2194 41 619 2191 46 2195 40 40 2190 41 2192 44 2193 44 2194 41 125 125 59 612 439 2000 40 2196 2197 41 123 2198 61 2197 59 392 40 2197 46 2199 46 2200 41 123 2201 61 473 59 125 125 612 438 491 2196 2202 123 2203 59 125 437 323 2204 123 2205 59 125 612 438 491 2206 2207 619 2202 46 2208 59 612 438 491 2209 60 461 62 2210 123 2211 59 125 61 418 2212 40 41 59 612 438 491 2213 2214 123 2215 59 2216 59 125 612 439 491 2217 60 2218 62 2219 40 2217 60 2005 62 2220 44 2006 63 2221 61 424 44 2213 2222 61 2213 46 2223 41 123 2214 61 2222 59 490 2224 61 418 2007 40 2202 41 59 474 123 386 40 490 2225 398 2220 41 123 2219 40 2225 44 2221 44 2224 41 59 125 125 382 123 2214 61 2213 46 2223 59 125 450 2224 46 2226 40 41 59 125 612 438 491 492 2219 40 2005 2227 44 2006 63 2221 44 2007 2228 41 123 490 2229 61 2227 46 2230 40 41 59 392 40 33 2008 46 2231 40 2229 44 430 490 2232 41 41 123 469 418 2233 40 2234 46 2235 40 2230 40 41 46 2236 40 41 44 2229 41 41 59 125 2232 40 467 44 2227 44 2221 44 2228 41 59 125 612 438 491 492 2219 40 2237 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 392 40 2227 91 2239 46 2240 93 631 424 41 123 2202 46 2241 46 2242 40 2227 41 59 125 2228 46 2243 40 648 41 46 2243 40 2202 46 2244 46 2245 40 2227 46 2246 44 2227 46 2247 41 41 46 2243 40 648 41 59 2248 40 2227 44 2221 44 2228 41 59 392 40 2238 41 123 2228 46 2249 40 2202 46 2244 46 2250 41 59 2251 40 2228 41 59 125 125 612 438 491 492 2219 40 2252 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2253 40 648 41 46 2253 40 2202 46 2254 46 2255 40 2227 46 2256 44 2227 46 2257 41 41 46 2253 40 648 41 59 2258 40 2227 44 2221 44 2228 41 59 392 40 2238 41 123 2228 46 2259 40 2202 46 2254 46 2260 41 59 2261 40 2228 41 59 125 125 612 438 491 492 2219 40 2262 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2263 40 648 41 46 2263 40 2202 46 2264 46 2265 40 2227 46 2266 44 2227 46 2267 41 41 46 2263 40 648 41 59 2268 40 2227 44 2221 44 2228 41 59 392 40 2238 41 123 2228 46 2269 40 2202 46 2264 46 2270 41 59 2271 40 2228 41 59 125 125 612 438 491 492 2219 40 2272 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2273 40 648 41 46 2273 40 2202 46 2274 46 2275 40 2227 46 2276 44 2227 46 2277 41 41 46 2273 40 648 41 59 2278 40 2227 44 2221 44 2228 41 59 2228 46 2279 40 2202 46 2274 46 2280 41 59 2281 40 2228 41 59 125 612 438 491 492 2219 40 2282 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2283 40 648 41 46 2283 40 2202 46 2284 46 2285 40 2227 46 2286 44 2227 46 2287 41 41 46 2283 40 648 41 59 2288 40 2227 44 2221 44 2228 41 59 2228 46 2289 40 2202 46 2284 46 2290 41 59 2291 40 2228 41 59 125 612 438 491 492 2219 40 2292 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2292 41 41 41 59 612 438 491 492 2219 40 2297 2227 44 2006 63 2221 44 2007 2228 41 123 125 612 438 491 492 2219 40 2298 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2298 41 41 41 59 612 438 491 492 2219 40 2299 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2300 40 648 41 46 2300 40 2202 46 2301 46 2302 40 2227 46 2303 44 2227 46 2304 41 41 59 2305 40 2227 44 2221 44 2228 41 59 2228 46 2306 40 2202 46 2301 46 2307 41 59 2308 40 2228 41 59 125 612 438 491 492 2219 40 2309 2227 44 2006 63 2221 44 2007 2228 41 123 125 612 438 491 492 2219 40 2310 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2310 41 41 41 59 612 438 491 492 2219 40 2311 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2312 40 648 41 59 392 40 2227 46 2313 41 123 2228 46 2312 40 648 41 59 125 2314 40 2227 44 2221 44 2228 41 59 2228 46 2312 40 648 41 46 2312 40 2202 46 2315 46 2316 40 2227 46 2317 41 41 46 2312 40 648 41 46 2312 40 2202 46 2315 46 2316 40 2227 46 2318 44 2227 46 2319 41 41 46 2312 40 648 41 46 2312 40 2320 40 2227 46 2321 41 41 46 2312 40 648 41 59 2322 40 2227 44 2221 44 2228 41 59 392 40 2238 41 123 2228 46 2323 40 2202 46 2315 46 2324 41 59 2325 40 2228 41 59 125 125 612 438 491 492 2219 40 2326 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2326 41 41 41 59 612 438 491 492 2219 40 2327 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2328 40 648 41 46 2328 40 2202 46 2329 46 2330 40 2227 46 2331 44 2227 46 2332 41 41 59 490 2333 61 2202 46 2334 46 2335 40 2227 46 2336 41 59 392 40 2227 46 2336 631 478 40 413 41 41 123 2228 46 2328 40 648 41 46 2328 40 2333 46 2337 41 59 621 2333 61 2202 46 2334 46 2335 40 478 40 413 41 41 59 125 2228 46 2328 40 648 41 46 2328 40 2333 46 2338 40 2227 46 2339 41 41 59 2340 40 2227 44 2221 44 2228 41 59 2228 46 2341 40 2202 46 2329 46 2342 41 59 2343 40 2228 41 59 125 612 438 491 492 2219 40 2344 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2345 40 648 41 46 2345 40 2202 46 2346 46 2347 40 2227 46 2348 44 2227 46 2349 41 41 46 2350 40 648 41 59 489 40 2228 46 2351 40 41 41 123 2352 40 2227 44 2221 44 2228 41 59 2353 40 2227 44 2221 44 2228 41 59 2228 46 2350 40 41 59 125 2228 46 2345 40 648 41 59 392 40 2238 41 123 2228 46 2350 40 2202 46 2346 46 2354 41 59 2355 40 2228 41 59 125 125 612 438 491 492 2219 40 2356 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2357 40 648 41 46 2357 40 2202 46 2358 46 2359 40 2227 46 2360 44 2227 46 2361 41 41 46 2357 40 648 41 46 2357 40 2202 46 2358 46 2359 40 2227 46 2362 41 41 59 392 40 2238 41 123 2228 46 2363 40 2202 46 2358 46 2364 41 59 2365 40 2228 41 59 125 125 612 438 491 492 2219 40 2366 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2367 40 648 41 46 2367 40 2202 46 2368 46 2369 40 2227 46 2370 44 2227 46 2371 41 41 46 2367 40 648 41 46 2367 40 2202 46 2368 46 2369 40 2227 46 2372 41 41 59 392 40 2238 41 123 2228 46 2373 40 2202 46 2368 46 2374 41 59 2375 40 2228 41 59 125 125 612 438 491 492 2219 40 2376 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2376 41 41 41 59 612 438 491 492 2219 40 2377 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2378 40 648 41 46 2378 40 2202 46 2379 46 2380 40 2227 46 2381 44 2227 46 2382 41 41 46 2378 40 648 41 46 2378 40 2202 46 2379 46 2380 40 2227 46 2383 41 41 59 392 40 2238 41 123 2228 46 2384 40 2202 46 2379 46 2385 41 59 2386 40 2228 41 59 125 125 612 438 491 492 2219 40 2387 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2388 40 648 41 46 2388 40 2202 46 2389 46 2390 40 2227 46 2391 41 41 46 2392 40 2202 46 2389 46 2393 41 59 2394 40 2228 41 59 125 612 438 491 492 2219 40 2395 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2396 40 648 41 46 2396 40 2202 46 2397 46 2398 40 2227 46 2399 44 2227 46 2400 41 41 46 2401 40 2202 46 2397 46 2402 41 59 2403 40 2228 41 59 125 612 438 491 492 2219 40 2404 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 2228 46 2405 40 648 41 46 2405 40 2202 46 2406 46 2407 40 2227 46 2408 44 2227 46 2409 41 41 59 392 40 2238 41 123 2228 46 2410 40 2202 46 2406 46 2411 41 59 2412 40 2228 41 59 125 125 612 438 491 492 2219 40 2413 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2414 40 648 41 46 2414 40 2202 46 2415 46 2416 40 2227 46 2417 44 2227 46 2418 41 41 46 2414 40 648 41 46 2414 40 2202 46 2415 46 2416 40 2227 46 2419 41 41 46 2420 40 2202 46 2415 46 2421 41 59 2422 40 2228 41 59 125 612 438 491 492 2219 40 2423 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2424 40 648 41 46 2424 40 2202 46 2425 46 2426 40 2227 46 2427 44 2227 46 2428 41 41 46 2424 40 648 41 46 2424 40 2202 46 2425 46 2426 40 2227 46 2429 41 41 46 2430 40 2202 46 2425 46 2431 41 59 2432 40 2228 41 59 125 612 438 491 492 2219 40 2433 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2433 41 41 41 59 612 438 491 492 2219 40 2434 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2434 41 41 41 59 612 438 491 492 2219 40 2435 2227 44 2006 63 2221 44 2007 2228 41 123 490 2436 61 2202 46 2437 46 2438 40 478 40 413 41 41 59 2228 46 2439 40 648 41 46 2439 40 2202 46 2440 46 2441 40 2227 46 2442 44 2227 46 2443 41 41 46 2439 40 648 41 46 2439 40 2436 46 2444 40 2227 46 2445 41 41 46 2446 40 2202 46 2440 46 2447 41 59 2448 40 2228 41 59 125 612 438 491 492 2219 40 2449 2227 44 2006 63 2221 44 2007 2228 41 123 2228 46 2450 40 2227 46 2451 41 59 2452 40 2228 44 2227 46 2453 41 59 125 612 438 491 492 2219 40 2454 2227 44 2006 63 2221 44 2007 2228 44 323 2238 61 473 41 123 490 2455 61 418 2456 40 41 59 386 40 490 2457 398 2458 40 2227 44 2221 41 41 123 2207 46 2459 40 2455 44 2457 44 1500 41 59 125 2228 46 2460 40 2455 46 2461 40 41 41 59 392 40 2238 41 123 2462 40 2228 41 59 125 125 612 438 491 2463 60 2464 62 2465 40 2454 2227 44 2006 63 2221 41 123 392 40 2227 46 2466 46 2467 631 2227 46 2468 46 2469 40 1501 41 41 123 469 418 2470 40 2294 46 2471 40 2227 46 2468 46 2469 40 1501 41 44 2227 46 2466 46 2467 44 2472 40 2227 46 2473 44 2227 46 2474 41 41 41 59 125 392 40 2227 46 2475 631 424 605 2227 46 2466 46 2467 631 2227 46 2475 46 2467 41 123 469 418 2476 40 2294 46 2477 40 2227 46 2475 46 2467 44 2227 46 2466 46 2467 44 2478 40 2227 46 2479 44 2227 46 2480 41 41 41 59 125 392 40 2227 46 2475 614 424 605 2221 614 424 41 123 469 418 2481 40 2294 46 2482 40 2483 40 2227 46 2484 44 2227 46 2485 41 41 41 59 125 490 2486 61 2227 46 2475 614 424 63 2487 40 2227 46 2466 44 2227 46 2488 44 2227 46 2489 44 2221 41 58 424 59 385 40 490 2490 61 1500 59 2490 60 2227 46 2468 46 2469 40 1500 41 59 2490 637 41 123 490 2491 61 2202 46 2492 46 2493 40 418 2494 40 2227 46 2488 44 2227 46 2489 44 2204 41 41 59 385 40 490 2495 61 1500 59 2495 60 2227 46 2466 46 2467 59 2495 637 41 123 490 2496 61 2227 46 2466 91 2495 93 59 490 2497 61 2227 46 2468 91 2490 44 2495 93 59 490 2498 61 2486 63 91 2495 93 59 490 2499 61 2227 46 2475 63 91 2495 93 59 490 2500 61 2498 631 424 63 2498 46 2501 58 2497 631 424 63 2202 46 2502 46 2503 40 2497 46 2504 40 41 44 2499 41 58 2202 46 2502 46 2503 40 2499 33 41 59 2491 46 2505 40 418 2506 40 2496 44 2507 58 424 44 2497 44 2498 634 2508 44 2499 44 2500 44 2509 58 380 44 2510 58 473 44 2511 58 473 44 2512 58 380 44 2204 44 2498 634 2513 46 2514 41 41 59 125 500 450 2491 59 125 125 612 438 491 492 2219 40 2515 2227 44 2006 63 2221 44 2007 2228 41 123 490 2516 61 418 2517 40 41 59 386 40 490 2518 398 2465 40 2227 44 2221 41 41 123 2207 46 2519 40 2516 44 2518 44 1500 41 59 125 2228 46 2520 40 2516 46 2521 40 41 41 59 2522 40 2228 41 59 125 612 438 491 2463 60 2464 62 2465 40 2515 2227 44 2006 63 2221 41 123 392 40 2227 46 2523 46 2524 631 2227 46 2525 46 2526 40 1501 41 41 123 469 418 2527 40 2294 46 2528 40 2227 46 2525 46 2526 40 1501 41 44 2227 46 2523 46 2524 44 2529 40 2227 46 2530 44 2227 46 2531 41 41 41 59 125 392 40 2227 46 2532 631 424 605 2227 46 2523 46 2524 631 2227 46 2532 46 2524 41 123 469 418 2533 40 2294 46 2534 40 2227 46 2532 46 2524 44 2227 46 2523 46 2524 44 2535 40 2227 46 2536 44 2227 46 2537 41 41 41 59 125 392 40 2227 46 2532 614 424 605 2221 614 424 41 123 469 418 2538 40 2294 46 2539 40 2540 40 2227 46 2541 44 2227 46 2542 41 41 41 59 125 490 2543 61 2227 46 2532 614 424 63 2544 40 2227 46 2523 44 2227 46 2545 44 2227 46 2546 44 2221 41 58 424 59 385 40 490 2547 61 1500 59 2547 60 2227 46 2525 46 2526 40 1500 41 59 2547 637 41 123 490 2548 61 2202 46 2549 46 2550 40 418 2551 40 2227 46 2545 44 2227 46 2546 44 2204 41 41 59 385 40 490 2552 61 1500 59 2552 60 2227 46 2523 46 2524 59 2552 637 41 123 490 2553 61 2227 46 2523 91 2552 93 59 490 2554 61 2227 46 2525 91 2547 44 2552 93 59 490 2555 61 2543 63 91 2552 93 59 490 2556 61 2227 46 2532 63 91 2552 93 59 490 2557 61 2555 631 424 63 2555 46 2558 58 2554 631 424 63 2202 46 2559 46 2560 40 2554 46 2561 40 41 44 2556 41 58 2202 46 2559 46 2560 40 2556 33 41 59 2548 46 2562 40 418 2563 40 2553 44 2564 58 424 44 2554 44 2555 634 2565 44 2556 44 2557 44 2566 58 380 44 2567 58 473 44 2568 58 473 44 2569 58 473 44 2204 44 2555 634 2570 46 2571 41 41 59 125 500 450 2548 59 125 125 612 438 491 492 2219 40 2572 2227 44 2006 63 2221 44 2007 2228 41 123 490 2573 61 418 2574 40 41 59 386 40 490 2575 398 2465 40 2227 44 2221 41 41 123 2207 46 2576 40 2573 44 2575 44 1500 41 59 125 2228 46 2577 40 2573 46 2578 40 41 41 59 2579 40 2228 41 59 125 612 438 491 2463 60 2464 62 2465 40 2572 2227 44 2006 63 2221 41 123 392 40 2227 46 2580 46 2581 631 2227 46 2582 46 2583 40 1501 41 41 123 469 418 2584 40 2294 46 2585 40 2227 46 2582 46 2583 40 1501 41 44 2227 46 2580 46 2581 44 2586 40 2227 46 2587 44 2227 46 2588 41 41 41 59 125 392 40 2227 46 2589 46 2581 631 2227 46 2590 46 2583 40 1501 41 41 123 469 418 2591 40 2294 46 2592 40 2227 46 2590 46 2583 40 1501 41 44 2227 46 2589 46 2581 44 2593 40 2227 46 2594 44 2227 46 2595 41 41 41 59 125 392 40 2227 46 2582 46 2583 40 1500 41 631 2227 46 2590 46 2583 40 1500 41 41 123 469 418 2596 40 2294 46 2597 40 2227 46 2590 46 2583 40 1500 41 44 2227 46 2582 46 2583 40 1500 41 44 2598 40 2227 46 2599 44 2227 46 2600 41 41 41 59 125 392 40 2227 46 2601 631 424 605 2227 46 2580 46 2581 631 2227 46 2601 46 2581 41 123 469 418 2602 40 2294 46 2603 40 2227 46 2601 46 2581 44 2227 46 2580 46 2581 44 2604 40 2227 46 2605 44 2227 46 2606 41 41 41 59 125 392 40 2227 46 2607 631 424 605 2227 46 2589 46 2581 631 2227 46 2607 46 2581 41 123 469 418 2608 40 2294 46 2609 40 2227 46 2607 46 2581 44 2227 46 2589 46 2581 44 2610 40 2227 46 2611 44 2227 46 2612 41 41 41 59 125 392 40 2227 46 2601 614 424 605 2221 614 424 41 123 469 418 2613 40 2294 46 2614 40 2615 40 2227 46 2616 44 2227 46 2617 41 41 41 59 125 490 2618 61 2227 46 2601 614 424 63 2619 40 2227 46 2580 44 2227 46 2620 44 2227 46 2621 44 2221 41 58 424 59 490 2622 61 2227 46 2607 614 424 63 2619 40 2227 46 2589 44 2227 46 2620 44 2227 46 2621 44 2221 41 58 424 59 385 40 490 2623 61 1500 59 2623 60 2227 46 2582 46 2583 40 1500 41 59 2623 637 41 123 490 2624 61 2202 46 2625 46 2626 40 418 2627 40 2227 46 2620 44 2227 46 2621 44 2204 41 41 59 385 40 490 2628 61 1500 59 2628 60 2227 46 2580 46 2581 59 2628 637 41 123 490 2629 61 2227 46 2580 91 2628 93 59 490 2630 61 2227 46 2582 91 2623 44 2628 93 59 490 2631 61 2618 63 91 2628 93 59 490 2632 61 2227 46 2601 63 91 2628 93 59 490 2633 61 2631 631 424 63 2631 46 2634 58 2630 631 424 63 2202 46 2635 46 2636 40 2630 46 2637 40 41 44 2632 41 58 2202 46 2635 46 2636 40 2632 33 41 59 2624 46 2638 40 418 2639 40 2629 44 2640 58 424 44 2630 44 2631 634 2641 44 2632 44 2633 44 2642 58 380 44 2643 58 380 44 2644 58 473 44 2645 58 473 44 2204 44 2631 634 2646 46 2647 41 41 59 125 385 40 490 2628 61 1500 59 2628 60 2227 46 2589 46 2581 59 2628 637 41 123 490 2648 61 2227 46 2589 91 2628 93 59 490 2649 61 2227 46 2590 91 2623 44 2628 93 59 490 2650 61 2622 63 91 2628 93 59 490 2651 61 2227 46 2607 63 91 2628 93 59 490 2652 61 2650 631 424 63 2650 46 2653 58 2649 631 424 63 2202 46 2654 46 2655 40 2649 46 2656 40 41 44 2651 41 58 2202 46 2654 46 2655 40 2651 33 41 59 2624 46 2657 40 418 2658 40 2648 44 2659 58 424 44 2649 44 2650 634 2660 44 2651 44 2652 44 2661 58 380 44 2662 58 473 44 2663 58 473 44 2664 58 380 44 2204 44 2650 634 2665 46 2666 41 41 59 125 500 450 2624 59 125 125 437 457 461 2667 40 461 2668 44 461 63 2669 41 619 2669 614 424 63 2668 58 2669 43 648 43 2668 59 437 457 2670 91 93 2671 40 461 91 93 2672 44 461 2673 44 461 63 2669 44 2006 63 2221 41 123 490 2668 61 2221 634 2674 40 41 46 2675 40 2673 44 2669 41 59 392 40 2668 614 424 41 123 469 418 2676 40 2294 46 2677 40 2667 40 2673 44 2669 41 41 41 59 125 490 2678 61 418 2670 91 2672 46 2679 93 59 385 40 490 2680 61 1500 59 2680 60 2672 46 2679 59 2680 637 41 123 490 2681 61 2672 91 2680 93 59 490 2682 61 2668 46 2683 40 2681 41 59 392 40 2682 614 424 41 123 469 418 2684 40 2294 46 2685 40 2667 40 2673 44 2669 41 44 2681 41 41 59 125 2678 91 2680 93 61 2682 46 2686 46 2687 40 41 59 125 450 2678 59 125 612 438 491 492 2688 40 2299 2227 44 2006 63 2221 44 2007 2228 41 619 2688 40 2227 46 2689 44 2227 46 2690 44 2227 44 2221 44 2228 41 59 612 438 491 492 2688 40 2327 2227 44 2006 63 2221 44 2007 2228 41 619 2688 40 2227 46 2689 44 2227 46 2690 44 2227 44 2221 44 2228 41 59 612 438 491 492 2688 40 461 63 2669 44 461 2691 44 2692 2227 44 2006 63 2221 44 2007 2228 41 123 490 2693 61 2202 46 2694 46 2695 40 478 40 404 41 41 59 490 2696 61 2202 46 2694 46 2695 40 478 40 413 41 41 59 2228 46 2697 40 648 41 46 2697 40 2693 46 2698 40 2227 46 2699 41 41 59 392 40 2227 46 2700 631 424 41 123 2228 46 2697 40 648 41 46 2697 40 2696 46 2698 40 2227 46 2700 41 41 59 125 360 123 2228 46 2697 40 648 41 59 125 392 40 2227 46 2701 631 424 41 123 2228 46 2697 40 648 41 46 2697 40 2696 46 2698 40 2227 46 2701 41 41 59 125 360 123 2228 46 2697 40 648 41 59 125 2228 46 2697 40 2227 46 2702 63 648 58 648 41 59 125 612 438 491 492 2703 40 2344 2227 44 2006 63 2221 44 2007 2228 41 123 385 40 490 2704 61 1500 59 2704 60 2227 46 2705 46 2706 59 2704 637 41 123 2707 40 2227 46 2705 91 2704 93 44 2221 44 2228 41 59 392 40 2704 631 2227 46 2705 46 2706 45 1501 41 123 2228 46 2708 40 648 41 59 125 125 125 612 438 491 492 2709 40 2237 2227 44 2006 63 2221 44 2007 2228 41 619 2709 40 2227 46 2689 44 2227 46 2710 44 2227 46 2690 44 2227 44 2221 44 2228 41 59 612 438 491 492 2709 40 461 63 2669 44 461 2668 44 461 2691 44 2711 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 2227 46 2712 631 424 41 123 2713 40 2669 44 2668 44 2691 44 2227 44 2221 44 2228 41 59 450 59 125 490 2714 61 2227 46 2715 633 2716 40 2669 44 2668 44 2691 44 2227 44 2221 41 33 59 2228 46 2717 40 2202 46 2718 46 2719 40 2691 41 41 46 2717 40 648 41 46 2717 40 2714 41 59 392 40 2227 46 2720 631 424 41 123 2228 46 2717 40 648 41 46 2717 40 2227 46 2720 41 59 125 2228 46 2717 40 2227 46 2721 63 648 58 648 41 59 2722 40 2227 46 2722 44 2227 46 2723 44 2714 44 2228 41 59 125 612 438 491 492 2724 40 461 63 2669 44 461 2668 44 461 2691 44 2711 2227 44 2006 63 2221 44 2007 2228 41 619 469 418 2293 40 2294 46 2295 40 2296 40 2711 41 41 41 59 612 438 491 461 63 2725 40 461 63 2669 44 461 2673 44 461 2691 44 2711 2227 44 2006 63 2221 41 123 490 2726 61 380 59 490 2668 61 2221 634 2727 40 41 46 2728 40 2673 44 2669 41 59 490 2729 61 2668 634 2730 40 2691 41 59 392 40 2729 631 424 41 123 392 40 2227 46 2731 614 2729 46 2731 605 2227 46 2732 614 2729 46 2732 605 2227 46 2733 614 2729 46 2733 605 2227 46 2734 614 2729 46 2734 605 2227 46 2735 614 2729 46 2735 605 2227 46 2736 614 2729 46 2736 41 123 450 2729 46 2737 59 125 2726 61 2668 33 46 2738 46 2739 40 2740 619 2740 46 2741 46 2742 40 2729 41 41 606 2668 46 2743 46 2739 40 2740 619 2740 46 2741 46 2742 40 2729 41 41 606 2668 46 2744 46 2739 40 2740 619 2740 46 2741 46 2742 40 2729 41 41 59 125 450 2202 46 2745 46 2746 40 2227 46 2747 44 424 44 2726 44 2227 46 2748 44 2227 46 2749 44 2227 46 2750 44 2227 46 2751 44 2227 46 2752 44 2227 46 2753 41 634 2754 59 125 612 438 491 492 2755 40 426 63 2756 44 461 63 2757 44 461 63 2758 44 2007 2228 41 123 392 40 2757 631 424 41 123 2228 46 2759 40 648 41 46 2759 40 2757 41 46 2759 40 648 41 59 125 360 392 40 2756 631 424 41 123 490 2760 61 40 2758 631 424 63 2202 46 2761 46 2762 40 2756 46 2763 40 41 44 2758 41 58 424 41 633 2202 46 2761 46 2764 40 2756 41 59 2228 46 2765 40 648 41 46 2765 40 2760 46 2766 40 2756 41 41 59 125 125 612 438 491 492 2767 40 2344 2227 44 2006 63 2221 44 2007 2228 41 123 2768 40 2227 44 2221 44 2228 41 59 2769 40 2227 44 2221 44 2228 41 59 2770 40 2227 44 2221 44 2228 41 59 2771 40 2227 44 2221 44 2228 41 59 125 612 438 491 492 2772 40 2344 2227 44 2006 63 2221 44 2007 2228 41 123 386 40 490 2773 398 2227 46 2774 41 123 2228 46 2775 40 648 41 59 2776 40 2773 44 2221 44 2228 41 59 125 125 612 438 491 492 2777 40 2252 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 2227 46 2690 631 424 41 123 2228 46 2778 40 648 41 46 2778 40 2202 46 2779 46 2780 40 2227 46 2690 41 41 46 2778 40 648 41 59 125 2228 46 2781 40 648 41 46 2781 40 2782 40 2227 46 2783 41 41 46 2781 40 648 41 46 2781 40 2202 46 2784 46 2785 40 2227 46 2786 44 2227 46 2787 41 41 59 392 40 2227 46 2788 631 424 41 123 2228 46 2781 40 648 41 46 2781 40 2782 40 2227 46 2788 41 41 46 2781 40 648 41 59 125 392 40 2227 46 2789 631 2790 46 2791 41 123 2228 46 2781 40 648 41 59 2792 40 2227 46 2789 44 2228 41 59 125 392 40 2227 46 2793 631 2790 46 2791 41 123 2228 46 2781 40 648 41 59 2794 40 2227 46 2793 44 2228 41 59 125 125 612 438 491 492 2795 40 2344 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 2227 46 2796 631 424 41 123 2228 46 2797 40 648 41 59 2798 40 2227 46 2796 44 2221 44 2228 41 59 125 125 612 438 491 492 2799 40 2262 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 2227 46 2690 631 424 41 123 2228 46 2800 40 648 41 46 2800 40 2202 46 2801 46 2802 40 2227 46 2690 41 41 46 2800 40 648 41 59 125 2228 46 2803 40 648 41 59 2804 40 2227 44 2221 44 2228 41 59 2228 46 2803 40 648 41 46 2803 40 2805 40 2227 46 2806 41 41 46 2803 40 648 41 59 125 612 438 491 492 2807 40 2344 2227 44 2006 63 2221 44 2007 2228 41 123 386 40 490 2808 398 2227 46 2809 41 123 2228 46 2810 40 648 41 59 2811 40 2808 44 2221 44 2228 41 59 125 125 612 438 491 492 2812 40 2272 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 2227 46 2690 631 424 41 123 2228 46 2813 40 648 41 46 2813 40 2202 46 2814 46 2815 40 2227 46 2690 41 41 46 2813 40 648 41 59 125 2228 46 2816 40 648 41 59 2817 40 2227 44 2221 44 2228 41 59 2228 46 2816 40 648 41 46 2816 40 2818 40 2227 46 2819 41 41 46 2816 40 648 41 59 125 612 438 491 492 2820 40 2344 2227 44 2006 63 2221 44 2007 2228 41 123 386 40 490 2821 398 2227 46 2822 41 123 2228 46 2823 40 648 41 59 2824 40 2821 44 2221 44 2228 41 59 125 125 612 438 491 492 2825 40 2282 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 2227 46 2690 631 424 41 123 2228 46 2826 40 648 41 46 2826 40 2202 46 2827 46 2828 40 2227 46 2690 41 41 46 2826 40 648 41 59 125 2228 46 2829 40 648 41 59 2228 46 2829 40 648 41 46 2829 40 2227 46 2830 41 46 2829 40 648 41 59 125 612 438 491 492 2831 40 2005 2227 44 2006 63 2221 44 2007 2228 41 123 125 612 438 491 492 2832 40 2311 2227 44 2006 63 2221 44 2007 2228 41 123 392 40 33 461 46 2833 40 2227 46 2834 41 41 123 2228 46 2835 40 648 41 46 2835 40 2227 46 2834 41 59 125 125 612 438 491 492 2836 40 2837 2838 44 2007 2228 41 123 464 40 2838 41 123 328 2837 46 2839 58 2228 46 2840 40 648 41 59 325 59 328 2837 46 2841 58 2228 46 2840 40 648 41 59 325 59 328 2837 46 2842 58 2228 46 2840 40 648 41 59 325 59 328 2837 46 2843 58 2228 46 2840 40 648 41 59 325 59 349 58 2844 46 2845 40 2838 614 2837 46 2846 44 648 43 2838 41 59 325 59 125 125 612 438 491 492 2847 40 2007 2228 44 323 2848 61 380 41 619 2228 46 2849 40 2848 41 59 612 438 491 461 2850 40 461 91 93 2851 41 619 461 46 2852 40 648 44 2851 46 2853 40 2202 46 2854 46 2855 41 41 59 612 438 491 323 2856 40 2006 63 2221 41 619 2857 40 2221 44 430 490 2858 41 605 2210 46 2859 40 2858 44 648 41 615 1500 59 612 438 491 323 2860 40 2006 63 2221 41 619 33 2857 40 2221 44 430 490 2858 41 606 2210 46 2859 40 2858 44 648 41 60 1500 59 612 438 491 323 2857 40 91 2861 40 473 41 93 2006 63 2221 44 91 2861 40 473 41 93 430 461 63 2858 41 123 392 40 33 40 2221 634 2862 40 41 407 461 2863 41 41 123 2858 61 424 59 450 380 59 125 2858 61 2863 59 450 473 59 125 125 
69011,C#,"public class RelationalCommand : IRelationalCommand
{
    private RelationalDataReader? _relationalReader;
    private readonly Stopwatch _stopwatch = new();

    /// <summary>
    ///     <para>
    ///         Constructs a new <see cref=""RelationalCommand"" />.
    ///     </para>
    ///     <para>
    ///         This type is typically used by database providers (and other extensions). It is generally
    ///         not used in application code.
    ///     </para>
    /// </summary>
    /// <param name=""dependencies"">Service dependencies.</param>
    /// <param name=""commandText"">The text of the command to be executed.</param>
    /// <param name=""parameters"">Parameters for the command.</param>
    public RelationalCommand(
        RelationalCommandBuilderDependencies dependencies,
        string commandText,
        IReadOnlyList<IRelationalParameter> parameters)
    {
        Dependencies = dependencies;
        CommandText = commandText;
        Parameters = parameters;
    }

    /// <summary>
    ///     Relational provider-specific dependencies for this service.
    /// </summary>
    protected virtual RelationalCommandBuilderDependencies Dependencies { get; }

    /// <summary>
    ///     Gets the command text to be executed.
    /// </summary>
    public virtual string CommandText { get; private set; }

    /// <summary>
    ///     Gets the parameters for the command.
    /// </summary>
    public virtual IReadOnlyList<IRelationalParameter> Parameters { get; private set; }

    /// <summary>
    ///     Executes the command with no results.
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <returns>The number of rows affected.</returns>
    public virtual int ExecuteNonQuery(RelationalCommandParameterObject parameterObject)
    {
        var (connection, context, logger) = (parameterObject.Connection, parameterObject.Context, parameterObject.Logger);

        var startTime = DateTimeOffset.UtcNow;

        var shouldLogCommandCreate = logger?.ShouldLogCommandCreate(startTime) == true;
        var shouldLogCommandExecute = logger?.ShouldLogCommandExecute(startTime) == true;

        // Guid.NewGuid is expensive, do it only if needed
        var commandId = shouldLogCommandCreate || shouldLogCommandExecute ? Guid.NewGuid() : default;

        var command = CreateDbCommand(parameterObject, commandId, DbCommandMethod.ExecuteNonQuery);

        connection.Open();

        try
        {
            if (shouldLogCommandExecute)
            {
                _stopwatch.Restart();

                var interceptionResult = logger?.CommandNonQueryExecuting(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        startTime,
                        parameterObject.CommandSource)
                    ?? default;

                var nonQueryResult = interceptionResult.HasResult
                    ? interceptionResult.Result
                    : command.ExecuteNonQuery();

                return logger?.CommandNonQueryExecuted(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        nonQueryResult,
                        startTime,
                        _stopwatch.Elapsed,
                        parameterObject.CommandSource)
                    ?? nonQueryResult;
            }
            else
            {
                return command.ExecuteNonQuery();
            }
        }
        catch (Exception exception)
        {
            if (Dependencies.ExceptionDetector.IsCancellation(exception))
            {
                logger?.CommandCanceled(
                    connection,
                    command,
                    context,
                    DbCommandMethod.ExecuteNonQuery,
                    commandId,
                    connection.ConnectionId,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }
            else
            {
                logger?.CommandError(
                    connection,
                    command,
                    context,
                    DbCommandMethod.ExecuteNonQuery,
                    commandId,
                    connection.ConnectionId,
                    exception,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }

            throw;
        }
        finally
        {
            CleanupCommand(command, connection);
        }
    }

    /// <summary>
    ///     Asynchronously executes the command with no results.
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    ///     A task that represents the asynchronous operation. The task result contains the number of rows affected.
    /// </returns>
    /// <exception cref=""OperationCanceledException"">If the <see cref=""CancellationToken"" /> is canceled.</exception>
    public virtual async Task<int> ExecuteNonQueryAsync(
        RelationalCommandParameterObject parameterObject,
        CancellationToken cancellationToken = default)
    {
        var (connection, context, logger) = (parameterObject.Connection, parameterObject.Context, parameterObject.Logger);

        var startTime = DateTimeOffset.UtcNow;

        var shouldLogCommandCreate = logger?.ShouldLogCommandCreate(startTime) == true;
        var shouldLogCommandExecute = logger?.ShouldLogCommandExecute(startTime) == true;

        // Guid.NewGuid is expensive, do it only if needed
        var commandId = shouldLogCommandCreate || shouldLogCommandExecute ? Guid.NewGuid() : default;

        var command = CreateDbCommand(parameterObject, commandId, DbCommandMethod.ExecuteNonQuery);

        await connection.OpenAsync(cancellationToken).ConfigureAwait(false);

        try
        {
            if (shouldLogCommandExecute)
            {
                _stopwatch.Restart();

                var interceptionResult = logger == null
                    ? default
                    : await logger.CommandNonQueryExecutingAsync(
                            connection,
                            command,
                            context,
                            commandId,
                            connection.ConnectionId,
                            startTime,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);

                var result = interceptionResult.HasResult
                    ? interceptionResult.Result
                    : await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);

                if (logger != null)
                {
                    result = await logger.CommandNonQueryExecutedAsync(
                            connection,
                            command,
                            context,
                            commandId,
                            connection.ConnectionId,
                            result,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }

                return result;
            }
            else
            {
                return await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);
            }
        }
        catch (Exception exception)
        {
            if (logger != null)
            {
                if (Dependencies.ExceptionDetector.IsCancellation(exception, cancellationToken))
                {
                    await logger.CommandCanceledAsync(
                            connection,
                            command,
                            context,
                            DbCommandMethod.ExecuteNonQuery,
                            commandId,
                            connection.ConnectionId,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }
                else
                {
                    await logger.CommandErrorAsync(
                            connection,
                            command,
                            context,
                            DbCommandMethod.ExecuteNonQuery,
                            commandId,
                            connection.ConnectionId,
                            exception,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }
            }

            throw;
        }
        finally
        {
            await CleanupCommandAsync(command, connection).ConfigureAwait(false);
        }
    }

    /// <summary>
    ///     Executes the command with a single scalar result.
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <returns>The result of the command.</returns>
    public virtual object? ExecuteScalar(RelationalCommandParameterObject parameterObject)
    {
        var (connection, context, logger) = (parameterObject.Connection, parameterObject.Context, parameterObject.Logger);

        var startTime = DateTimeOffset.UtcNow;

        var shouldLogCommandCreate = logger?.ShouldLogCommandCreate(startTime) == true;
        var shouldLogCommandExecute = logger?.ShouldLogCommandExecute(startTime) == true;

        // Guid.NewGuid is expensive, do it only if needed
        var commandId = shouldLogCommandCreate || shouldLogCommandExecute ? Guid.NewGuid() : default;

        var command = CreateDbCommand(parameterObject, commandId, DbCommandMethod.ExecuteScalar);

        connection.Open();

        try
        {
            if (shouldLogCommandExecute)
            {
                _stopwatch.Restart();

                var interceptionResult = logger?.CommandScalarExecuting(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        startTime,
                        parameterObject.CommandSource)
                    ?? default;

                var result = interceptionResult.HasResult
                    ? interceptionResult.Result
                    : command.ExecuteScalar();

                return logger?.CommandScalarExecuted(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        result,
                        startTime,
                        _stopwatch.Elapsed,
                        parameterObject.CommandSource)
                    ?? result;
            }
            else
            {
                return command.ExecuteScalar();
            }
        }
        catch (Exception exception)
        {
            if (Dependencies.ExceptionDetector.IsCancellation(exception))
            {
                logger?.CommandCanceled(
                    connection,
                    command,
                    context,
                    DbCommandMethod.ExecuteScalar,
                    commandId,
                    connection.ConnectionId,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }
            else
            {
                logger?.CommandError(
                    connection,
                    command,
                    context,
                    DbCommandMethod.ExecuteScalar,
                    commandId,
                    connection.ConnectionId,
                    exception,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }

            throw;
        }
        finally
        {
            CleanupCommand(command, connection);
        }
    }

    /// <summary>
    ///     Asynchronously executes the command with a single scalar result.
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    ///     A task that represents the asynchronous operation. The task result contains the result of the command.
    /// </returns>
    /// <exception cref=""OperationCanceledException"">If the <see cref=""CancellationToken"" /> is canceled.</exception>
    public virtual async Task<object?> ExecuteScalarAsync(
        RelationalCommandParameterObject parameterObject,
        CancellationToken cancellationToken = default)
    {
        var (connection, context, logger) = (parameterObject.Connection, parameterObject.Context, parameterObject.Logger);

        var startTime = DateTimeOffset.UtcNow;

        var shouldLogCommandCreate = logger?.ShouldLogCommandCreate(startTime) == true;
        var shouldLogCommandExecute = logger?.ShouldLogCommandExecute(startTime) == true;

        // Guid.NewGuid is expensive, do it only if needed
        var commandId = shouldLogCommandCreate || shouldLogCommandExecute ? Guid.NewGuid() : default;

        var command = CreateDbCommand(parameterObject, commandId, DbCommandMethod.ExecuteScalar);

        await connection.OpenAsync(cancellationToken).ConfigureAwait(false);

        try
        {
            if (shouldLogCommandExecute)
            {
                _stopwatch.Restart();

                var interceptionResult = logger == null
                    ? default
                    : await logger.CommandScalarExecutingAsync(
                            connection,
                            command,
                            context,
                            commandId,
                            connection.ConnectionId,
                            startTime,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);

                var result = interceptionResult.HasResult
                    ? interceptionResult.Result
                    : await command.ExecuteScalarAsync(cancellationToken).ConfigureAwait(false);

                if (logger != null)
                {
                    result = await logger.CommandScalarExecutedAsync(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        result,
                        startTime,
                        _stopwatch.Elapsed,
                        parameterObject.CommandSource,
                        cancellationToken).ConfigureAwait(false);
                }

                return result;
            }
            else
            {
                return await command.ExecuteScalarAsync(cancellationToken).ConfigureAwait(false);
            }
        }
        catch (Exception exception)
        {
            if (logger != null)
            {
                if (Dependencies.ExceptionDetector.IsCancellation(exception, cancellationToken))
                {
                    await logger.CommandCanceledAsync(
                            connection,
                            command,
                            context,
                            DbCommandMethod.ExecuteScalar,
                            commandId,
                            connection.ConnectionId,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }
                else
                {
                    await logger.CommandErrorAsync(
                            connection,
                            command,
                            context,
                            DbCommandMethod.ExecuteScalar,
                            commandId,
                            connection.ConnectionId,
                            exception,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }
            }

            throw;
        }
        finally
        {
            await CleanupCommandAsync(command, connection).ConfigureAwait(false);
        }
    }

    /// <summary>
    ///     Executes the command with a <see cref=""RelationalDataReader"" /> result.
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <returns>The result of the command.</returns>
    public virtual RelationalDataReader ExecuteReader(RelationalCommandParameterObject parameterObject)
    {
        var connection = parameterObject.Connection;
        var context = parameterObject.Context;
        var readerColumns = parameterObject.ReaderColumns;
        var logger = parameterObject.Logger;
        var detailedErrorsEnabled = parameterObject.DetailedErrorsEnabled;

        var startTime = DateTimeOffset.UtcNow;

        var shouldLogCommandCreate = logger?.ShouldLogCommandCreate(startTime) == true;
        var shouldLogCommandExecute = logger?.ShouldLogCommandExecute(startTime) == true;

        // Guid.NewGuid is expensive, do it only if needed
        var commandId = shouldLogCommandCreate || shouldLogCommandExecute ? Guid.NewGuid() : default;

        var command = CreateDbCommand(parameterObject, commandId, DbCommandMethod.ExecuteReader);

        connection.Open();

        var readerOpen = false;
        DbDataReader reader;

        try
        {
            if (shouldLogCommandExecute)
            {
                _stopwatch.Restart();

                var interceptionResult = logger!.CommandReaderExecuting(
                    connection,
                    command,
                    context,
                    commandId,
                    connection.ConnectionId,
                    startTime,
                    parameterObject.CommandSource);

                reader = interceptionResult.HasResult
                    ? interceptionResult.Result
                    : command.ExecuteReader();

                reader = logger.CommandReaderExecuted(
                    connection,
                    command,
                    context,
                    commandId,
                    connection.ConnectionId,
                    reader,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }
            else
            {
                reader = command.ExecuteReader();
            }
        }
        catch (Exception exception)
        {
            if (Dependencies.ExceptionDetector.IsCancellation(exception))
            {
                logger?.CommandCanceled(
                    connection,
                    command,
                    context,
                    DbCommandMethod.ExecuteReader,
                    commandId,
                    connection.ConnectionId,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }
            else
            {
                logger?.CommandError(
                    connection,
                    command,
                    context,
                    DbCommandMethod.ExecuteReader,
                    commandId,
                    connection.ConnectionId,
                    exception,
                    startTime,
                    _stopwatch.Elapsed,
                    parameterObject.CommandSource);
            }

            CleanupCommand(command, connection);

            throw;
        }

        try
        {
            if (readerColumns != null)
            {
                reader = new BufferedDataReader(reader, detailedErrorsEnabled).Initialize(readerColumns);
            }

            _relationalReader ??= CreateRelationalDataReader();

            _relationalReader.Initialize(parameterObject.Connection, command, reader, commandId, logger);

            readerOpen = true;

            return _relationalReader;
        }
        finally
        {
            if (!readerOpen)
            {
                CleanupCommand(command, connection);
            }
        }
    }

    /// <summary>
    ///     Asynchronously executes the command with a <see cref=""RelationalDataReader"" /> result.
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <param name=""cancellationToken"">A <see cref=""CancellationToken"" /> to observe while waiting for the task to complete.</param>
    /// <returns>
    ///     A task that represents the asynchronous operation. The task result contains the result of the command.
    /// </returns>
    /// <exception cref=""OperationCanceledException"">If the <see cref=""CancellationToken"" /> is canceled.</exception>
    public virtual async Task<RelationalDataReader> ExecuteReaderAsync(
        RelationalCommandParameterObject parameterObject,
        CancellationToken cancellationToken = default)
    {
        var connection = parameterObject.Connection;
        var context = parameterObject.Context;
        var readerColumns = parameterObject.ReaderColumns;
        var logger = parameterObject.Logger;
        var detailedErrorsEnabled = parameterObject.DetailedErrorsEnabled;

        var startTime = DateTimeOffset.UtcNow;

        var shouldLogCommandCreate = logger?.ShouldLogCommandCreate(startTime) == true;
        var shouldLogCommandExecute = logger?.ShouldLogCommandExecute(startTime) == true;

        // Guid.NewGuid is expensive, do it only if needed
        var commandId = shouldLogCommandCreate || shouldLogCommandExecute ? Guid.NewGuid() : default;

        var command = CreateDbCommand(parameterObject, commandId, DbCommandMethod.ExecuteReader);

        await connection.OpenAsync(cancellationToken).ConfigureAwait(false);

        var readerOpen = false;
        DbDataReader reader;

        try
        {
            if (shouldLogCommandExecute)
            {
                _stopwatch.Restart();

                var interceptionResult = await logger!.CommandReaderExecutingAsync(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        startTime,
                        parameterObject.CommandSource,
                        cancellationToken)
                    .ConfigureAwait(false);

                reader = interceptionResult.HasResult
                    ? interceptionResult.Result
                    : await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);

                reader = await logger.CommandReaderExecutedAsync(
                        connection,
                        command,
                        context,
                        commandId,
                        connection.ConnectionId,
                        reader,
                        startTime,
                        _stopwatch.Elapsed,
                        parameterObject.CommandSource,
                        cancellationToken)
                    .ConfigureAwait(false);
            }
            else
            {
                reader = await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);
            }
        }
        catch (Exception exception)
        {
            if (logger != null)
            {
                if (Dependencies.ExceptionDetector.IsCancellation(exception, cancellationToken))
                {
                    await logger.CommandCanceledAsync(
                            connection,
                            command,
                            context,
                            DbCommandMethod.ExecuteReader,
                            commandId,
                            connection.ConnectionId,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }
                else
                {
                    await logger.CommandErrorAsync(
                            connection,
                            command,
                            context,
                            DbCommandMethod.ExecuteReader,
                            commandId,
                            connection.ConnectionId,
                            exception,
                            startTime,
                            _stopwatch.Elapsed,
                            parameterObject.CommandSource,
                            cancellationToken)
                        .ConfigureAwait(false);
                }
            }

            await CleanupCommandAsync(command, connection).ConfigureAwait(false);

            throw;
        }

        try
        {
            if (readerColumns != null)
            {
                reader = await new BufferedDataReader(reader, detailedErrorsEnabled).InitializeAsync(readerColumns, cancellationToken)
                    .ConfigureAwait(false);
            }

            _relationalReader ??= CreateRelationalDataReader();

            _relationalReader.Initialize(parameterObject.Connection, command, reader, commandId, logger);

            readerOpen = true;

            return _relationalReader;
        }
        finally
        {
            if (!readerOpen)
            {
                await CleanupCommandAsync(command, connection).ConfigureAwait(false);
            }
        }
    }

    /// <summary>
    ///     <para>
    ///         Called by the execute methods to
    ///         create a <see cref=""DbCommand"" /> for the given <see cref=""DbConnection"" /> and configure
    ///         timeouts and transactions.
    ///     </para>
    ///     <para>
    ///         This method is typically used by database providers (and other extensions). It is generally
    ///         not used in application code.
    ///     </para>
    /// </summary>
    /// <param name=""parameterObject"">Parameters for this method.</param>
    /// <param name=""commandId"">The command correlation ID.</param>
    /// <param name=""commandMethod"">The method that will be called on the created command.</param>
    /// <returns>The created command.</returns>
    public virtual DbCommand CreateDbCommand(
        RelationalCommandParameterObject parameterObject,
        Guid commandId,
        DbCommandMethod commandMethod)
    {
        var (connection, context, logger) = (parameterObject.Connection, parameterObject.Context, parameterObject.Logger);
        var connectionId = connection.ConnectionId;

        var startTime = DateTimeOffset.UtcNow;

        DbCommand command;

        if (logger?.ShouldLogCommandCreate(startTime) == true)
        {
            _stopwatch.Restart();

            var interceptionResult = logger.CommandCreating(
                connection, commandMethod, context, commandId, connectionId, startTime,
                parameterObject.CommandSource);

            command = interceptionResult.HasResult
                ? interceptionResult.Result
                : connection.DbConnection.CreateCommand();

            command = logger.CommandCreated(
                connection,
                command,
                commandMethod,
                context,
                commandId,
                connectionId,
                startTime,
                _stopwatch.Elapsed,
                parameterObject.CommandSource);
        }
        else
        {
            command = connection.DbConnection.CreateCommand();
        }

        command.CommandText = CommandText;

        if (connection.CurrentTransaction != null)
        {
            command.Transaction = connection.CurrentTransaction.GetDbTransaction();
        }

        if (connection.CommandTimeout != null)
        {
            command.CommandTimeout = (int)connection.CommandTimeout;
        }

        if (Parameters.Count > 0)
        {
            var parameterValues = parameterObject.ParameterValues;
            if (parameterValues == null)
            {
                throw new InvalidOperationException(
                    RelationalStrings.MissingParameterValue(
                        Parameters[0].InvariantName));
            }

            for (var i = 0; i < Parameters.Count; i++)
            {
                Parameters[i].AddDbParameter(command, parameterValues);
            }
        }

        return command;
    }

    private static void CleanupCommand(
        DbCommand command,
        IRelationalConnection connection)
    {
        command.Parameters.Clear();
        command.Dispose();
        connection.Close();
    }

    private static async Task CleanupCommandAsync(
        DbCommand command,
        IRelationalConnection connection)
    {
        command.Parameters.Clear();
        await command.DisposeAsync().ConfigureAwait(false);
        await connection.CloseAsync().ConfigureAwait(false);
    }

    /// <summary>
    ///     <para>
    ///         Creates a new <see cref=""RelationalDataReader"" /> to be used by <see cref=""ExecuteReader"" /> and
    ///         <see cref=""ExecuteReaderAsync"" />. The returned <see cref=""RelationalDataReader"" /> may get used more for multiple
    ///         queries, and will be re-initialized each time via <see cref=""RelationalDataReader.Initialize"" />.
    ///     </para>
    ///     <para>
    ///         This method is typically used by database providers (and other extensions). It is generally
    ///         not used in application code.
    ///     </para>
    /// </summary>
    /// <returns>The created <see cref=""RelationalDataReader"" />.</returns>
    protected virtual RelationalDataReader CreateRelationalDataReader()
        => new();

    /// <summary>
    ///     Populates this command from the provided <paramref name=""commandTemplate"" />.
    /// </summary>
    /// <param name=""commandTemplate"">A template command from which the command text and parameters will be copied.</param>
    public virtual void PopulateFrom(IRelationalCommandTemplate commandTemplate)
    {
        CommandText = commandTemplate.CommandText;
        Parameters = commandTemplate.Parameters;
    }
}",1,439 334 2000 58 2001 123 437 2002 63 2003 59 437 441 2004 2005 61 418 40 41 59 612 439 2000 40 2006 2007 44 461 2008 44 2009 60 2010 62 2011 41 123 2012 61 2007 59 2013 61 2008 59 2014 61 2011 59 125 612 438 491 2006 2015 123 2016 59 125 612 439 491 461 2017 123 2018 59 437 2019 59 125 612 439 491 2009 60 2010 62 2020 123 2021 59 437 2022 59 125 612 439 491 404 2023 40 2024 2025 41 123 490 40 2026 44 2027 44 2028 41 61 40 2025 46 2029 44 2025 46 2030 44 2025 46 2031 41 59 490 2032 61 2033 46 2034 59 490 2035 61 2028 634 2036 40 2032 41 614 473 59 490 2037 61 2028 634 2038 40 2032 41 614 473 59 621 490 2039 61 2035 606 2037 63 2040 46 2041 40 41 58 349 59 490 2042 61 2043 40 2025 44 2039 44 2044 46 2023 41 59 2026 46 2045 40 41 59 474 123 392 40 2037 41 123 2005 46 2046 40 41 59 490 2047 61 2028 634 2048 40 2026 44 2042 44 2027 44 2039 44 2026 46 2049 44 2032 44 2025 46 2050 41 633 349 59 490 2051 61 2047 46 2052 63 2047 46 2053 58 2042 46 2023 40 41 59 450 2028 634 2054 40 2026 44 2042 44 2027 44 2039 44 2026 46 2049 44 2051 44 2032 44 2005 46 2055 44 2025 46 2050 41 633 2051 59 125 360 123 450 2042 46 2023 40 41 59 125 125 329 40 2056 2057 41 123 392 40 2015 46 2058 46 2059 40 2057 41 41 123 2028 634 2060 40 2026 44 2042 44 2027 44 2044 46 2023 44 2039 44 2026 46 2061 44 2032 44 2005 46 2062 44 2025 46 2063 41 59 125 360 123 2028 634 2064 40 2026 44 2042 44 2027 44 2044 46 2023 44 2039 44 2026 46 2065 44 2057 44 2032 44 2005 46 2066 44 2025 46 2067 41 59 125 469 59 125 382 123 2068 40 2042 44 2026 41 59 125 125 612 439 491 314 2069 60 404 62 2070 40 2024 2025 44 2071 2072 61 349 41 123 490 40 2073 44 2074 44 2075 41 61 40 2025 46 2076 44 2025 46 2077 44 2025 46 2078 41 59 490 2079 61 2080 46 2081 59 490 2082 61 2075 634 2083 40 2079 41 614 473 59 490 2084 61 2075 634 2085 40 2079 41 614 473 59 621 490 2086 61 2082 606 2084 63 2087 46 2088 40 41 58 349 59 490 2089 61 2090 40 2025 44 2086 44 2091 46 2023 41 59 319 2073 46 2092 40 2072 41 46 2093 40 380 41 59 474 123 392 40 2084 41 123 2005 46 2094 40 41 59 490 2095 61 2075 614 424 63 349 58 319 2075 46 2096 40 2073 44 2089 44 2074 44 2086 44 2073 46 2097 44 2079 44 2025 46 2098 44 2072 41 46 2093 40 380 41 59 490 2099 61 2095 46 2100 63 2095 46 2101 58 319 2089 46 2070 40 2072 41 46 2093 40 380 41 59 392 40 2075 631 424 41 123 2099 61 319 2075 46 2102 40 2073 44 2089 44 2074 44 2086 44 2073 46 2097 44 2099 44 2079 44 2005 46 2103 44 2025 46 2098 44 2072 41 46 2093 40 380 41 59 125 450 2099 59 125 360 123 450 319 2089 46 2070 40 2072 41 46 2093 40 380 41 59 125 125 329 40 2104 2105 41 123 392 40 2075 631 424 41 123 392 40 2015 46 2106 46 2107 40 2105 44 2072 41 41 123 319 2075 46 2108 40 2073 44 2089 44 2074 44 2091 46 2023 44 2086 44 2073 46 2109 44 2079 44 2005 46 2110 44 2025 46 2111 44 2072 41 46 2093 40 380 41 59 125 360 123 319 2075 46 2112 40 2073 44 2089 44 2074 44 2091 46 2023 44 2086 44 2073 46 2113 44 2105 44 2079 44 2005 46 2114 44 2025 46 2115 44 2072 41 46 2093 40 380 41 59 125 125 469 59 125 382 123 319 2116 40 2089 44 2073 41 46 2093 40 380 41 59 125 125 612 439 491 426 63 2117 40 2024 2025 41 123 490 40 2118 44 2119 44 2120 41 61 40 2025 46 2121 44 2025 46 2122 44 2025 46 2123 41 59 490 2124 61 2125 46 2126 59 490 2127 61 2120 634 2128 40 2124 41 614 473 59 490 2129 61 2120 634 2130 40 2124 41 614 473 59 621 490 2131 61 2127 606 2129 63 2132 46 2133 40 41 58 349 59 490 2134 61 2135 40 2025 44 2131 44 2136 46 2117 41 59 2118 46 2137 40 41 59 474 123 392 40 2129 41 123 2005 46 2138 40 41 59 490 2139 61 2120 634 2140 40 2118 44 2134 44 2119 44 2131 44 2118 46 2141 44 2124 44 2025 46 2142 41 633 349 59 490 2143 61 2139 46 2144 63 2139 46 2145 58 2134 46 2117 40 41 59 450 2120 634 2146 40 2118 44 2134 44 2119 44 2131 44 2118 46 2141 44 2143 44 2124 44 2005 46 2147 44 2025 46 2142 41 633 2143 59 125 360 123 450 2134 46 2117 40 41 59 125 125 329 40 2148 2149 41 123 392 40 2015 46 2150 46 2151 40 2149 41 41 123 2120 634 2152 40 2118 44 2134 44 2119 44 2136 46 2117 44 2131 44 2118 46 2153 44 2124 44 2005 46 2154 44 2025 46 2155 41 59 125 360 123 2120 634 2156 40 2118 44 2134 44 2119 44 2136 46 2117 44 2131 44 2118 46 2157 44 2149 44 2124 44 2005 46 2158 44 2025 46 2159 41 59 125 469 59 125 382 123 2160 40 2134 44 2118 41 59 125 125 612 439 491 314 2069 60 426 63 62 2161 40 2024 2025 44 2071 2072 61 349 41 123 490 40 2162 44 2163 44 2164 41 61 40 2025 46 2165 44 2025 46 2166 44 2025 46 2167 41 59 490 2168 61 2169 46 2170 59 490 2171 61 2164 634 2172 40 2168 41 614 473 59 490 2173 61 2164 634 2174 40 2168 41 614 473 59 621 490 2175 61 2171 606 2173 63 2176 46 2177 40 41 58 349 59 490 2178 61 2179 40 2025 44 2175 44 2180 46 2117 41 59 319 2162 46 2181 40 2072 41 46 2182 40 380 41 59 474 123 392 40 2173 41 123 2005 46 2183 40 41 59 490 2184 61 2164 614 424 63 349 58 319 2164 46 2185 40 2162 44 2178 44 2163 44 2175 44 2162 46 2186 44 2168 44 2025 46 2187 44 2072 41 46 2182 40 380 41 59 490 2188 61 2184 46 2189 63 2184 46 2190 58 319 2178 46 2161 40 2072 41 46 2182 40 380 41 59 392 40 2164 631 424 41 123 2188 61 319 2164 46 2191 40 2162 44 2178 44 2163 44 2175 44 2162 46 2186 44 2188 44 2168 44 2005 46 2192 44 2025 46 2187 44 2072 41 46 2182 40 380 41 59 125 450 2188 59 125 360 123 450 319 2178 46 2161 40 2072 41 46 2182 40 380 41 59 125 125 329 40 2193 2194 41 123 392 40 2164 631 424 41 123 392 40 2015 46 2195 46 2196 40 2194 44 2072 41 41 123 319 2164 46 2197 40 2162 44 2178 44 2163 44 2180 46 2117 44 2175 44 2162 46 2198 44 2168 44 2005 46 2199 44 2025 46 2200 44 2072 41 46 2182 40 380 41 59 125 360 123 319 2164 46 2201 40 2162 44 2178 44 2163 44 2180 46 2117 44 2175 44 2162 46 2202 44 2194 44 2168 44 2005 46 2203 44 2025 46 2204 44 2072 41 46 2182 40 380 41 59 125 125 469 59 125 382 123 319 2205 40 2178 44 2162 41 46 2182 40 380 41 59 125 125 612 439 491 2002 2206 40 2024 2025 41 123 490 2207 61 2025 46 2208 59 490 2209 61 2025 46 2210 59 490 2211 61 2025 46 2212 59 490 2213 61 2025 46 2214 59 490 2215 61 2025 46 2216 59 490 2217 61 2218 46 2219 59 490 2220 61 2213 634 2221 40 2217 41 614 473 59 490 2222 61 2213 634 2223 40 2217 41 614 473 59 621 490 2224 61 2220 606 2222 63 2225 46 2226 40 41 58 349 59 490 2227 61 2228 40 2025 44 2224 44 2229 46 2206 41 59 2207 46 2230 40 41 59 490 2231 61 380 59 2232 2233 59 474 123 392 40 2222 41 123 2005 46 2234 40 41 59 490 2235 61 2213 33 46 2236 40 2207 44 2227 44 2209 44 2224 44 2207 46 2237 44 2217 44 2025 46 2238 41 59 2233 61 2235 46 2239 63 2235 46 2240 58 2227 46 2206 40 41 59 2233 61 2213 46 2241 40 2207 44 2227 44 2209 44 2224 44 2207 46 2237 44 2233 44 2217 44 2005 46 2242 44 2025 46 2238 41 59 125 360 123 2233 61 2227 46 2206 40 41 59 125 125 329 40 2243 2244 41 123 392 40 2015 46 2245 46 2246 40 2244 41 41 123 2213 634 2247 40 2207 44 2227 44 2209 44 2229 46 2206 44 2224 44 2207 46 2248 44 2217 44 2005 46 2249 44 2025 46 2250 41 59 125 360 123 2213 634 2251 40 2207 44 2227 44 2209 44 2229 46 2206 44 2224 44 2207 46 2252 44 2244 44 2217 44 2005 46 2253 44 2025 46 2254 41 59 125 2255 40 2227 44 2207 41 59 469 59 125 474 123 392 40 2211 631 424 41 123 2233 61 418 2256 40 2233 44 2215 41 46 2257 40 2211 41 59 125 2003 633 61 2258 40 41 59 2003 46 2259 40 2025 46 2208 44 2227 44 2233 44 2224 44 2213 41 59 2231 61 473 59 450 2003 59 125 382 123 392 40 33 2231 41 123 2260 40 2227 44 2207 41 59 125 125 125 612 439 491 314 2069 60 2002 62 2261 40 2024 2025 44 2071 2072 61 349 41 123 490 2262 61 2025 46 2263 59 490 2264 61 2025 46 2265 59 490 2266 61 2025 46 2267 59 490 2268 61 2025 46 2269 59 490 2270 61 2025 46 2271 59 490 2272 61 2273 46 2274 59 490 2275 61 2268 634 2276 40 2272 41 614 473 59 490 2277 61 2268 634 2278 40 2272 41 614 473 59 621 490 2279 61 2275 606 2277 63 2280 46 2281 40 41 58 349 59 490 2282 61 2283 40 2025 44 2279 44 2284 46 2206 41 59 319 2262 46 2285 40 2072 41 46 2286 40 380 41 59 490 2287 61 380 59 2288 2289 59 474 123 392 40 2277 41 123 2005 46 2290 40 41 59 490 2291 61 319 2268 33 46 2292 40 2262 44 2282 44 2264 44 2279 44 2262 46 2293 44 2272 44 2025 46 2294 44 2072 41 46 2286 40 380 41 59 2289 61 2291 46 2295 63 2291 46 2296 58 319 2282 46 2261 40 2072 41 46 2286 40 380 41 59 2289 61 319 2268 46 2297 40 2262 44 2282 44 2264 44 2279 44 2262 46 2293 44 2289 44 2272 44 2005 46 2298 44 2025 46 2294 44 2072 41 46 2286 40 380 41 59 125 360 123 2289 61 319 2282 46 2261 40 2072 41 46 2286 40 380 41 59 125 125 329 40 2299 2300 41 123 392 40 2268 631 424 41 123 392 40 2015 46 2301 46 2302 40 2300 44 2072 41 41 123 319 2268 46 2303 40 2262 44 2282 44 2264 44 2284 46 2206 44 2279 44 2262 46 2304 44 2272 44 2005 46 2305 44 2025 46 2306 44 2072 41 46 2286 40 380 41 59 125 360 123 319 2268 46 2307 40 2262 44 2282 44 2264 44 2284 46 2206 44 2279 44 2262 46 2308 44 2300 44 2272 44 2005 46 2309 44 2025 46 2310 44 2072 41 46 2286 40 380 41 59 125 125 319 2311 40 2282 44 2262 41 46 2286 40 380 41 59 469 59 125 474 123 392 40 2266 631 424 41 123 2289 61 319 418 2312 40 2289 44 2270 41 46 2313 40 2266 44 2072 41 46 2286 40 380 41 59 125 2003 633 61 2314 40 41 59 2003 46 2315 40 2025 46 2263 44 2282 44 2289 44 2279 44 2268 41 59 2287 61 473 59 450 2003 59 125 382 123 392 40 33 2287 41 123 319 2316 40 2282 44 2262 41 46 2286 40 380 41 59 125 125 125 612 439 491 2317 2318 40 2024 2025 44 2319 2320 44 2321 2322 41 123 490 40 2323 44 2324 44 2325 41 61 40 2025 46 2326 44 2025 46 2327 44 2025 46 2328 41 59 490 2329 61 2323 46 2330 59 490 2331 61 2332 46 2333 59 2317 2334 59 392 40 2325 634 2335 40 2331 41 614 473 41 123 2005 46 2336 40 41 59 490 2337 61 2325 46 2338 40 2323 44 2322 44 2324 44 2320 44 2329 44 2331 44 2025 46 2339 41 59 2334 61 2337 46 2340 63 2337 46 2341 58 2323 46 2342 46 2343 40 41 59 2334 61 2325 46 2344 40 2323 44 2334 44 2322 44 2324 44 2320 44 2329 44 2331 44 2005 46 2345 44 2025 46 2339 41 59 125 360 123 2334 61 2323 46 2346 46 2347 40 41 59 125 2334 46 2017 61 2017 59 392 40 2323 46 2348 631 424 41 123 2334 46 2349 61 2323 46 2348 46 2350 40 41 59 125 392 40 2323 46 2351 631 424 41 123 2334 46 2351 61 40 404 41 2323 46 2351 59 125 392 40 2020 46 2352 62 1500 41 123 490 2353 61 2025 46 2354 59 392 40 2353 614 424 41 123 469 418 2355 40 2356 46 2357 40 2020 91 1500 93 46 2358 41 41 59 125 385 40 490 2359 61 1500 59 2359 60 2020 46 2352 59 2359 637 41 123 2020 91 2359 93 46 2360 40 2334 44 2353 41 59 125 125 450 2334 59 125 437 457 492 2361 40 2317 2362 44 2363 2364 41 123 2362 46 2020 46 2365 40 41 59 2362 46 2366 40 41 59 2364 46 2367 40 41 59 125 437 457 314 2069 2368 40 2317 2362 44 2363 2364 41 123 2362 46 2020 46 2369 40 41 59 319 2362 46 2370 40 41 46 2371 40 380 41 59 319 2364 46 2372 40 41 46 2371 40 380 41 59 125 612 438 491 2002 2373 40 41 619 418 40 41 59 612 439 491 492 2374 40 2375 2376 41 123 2017 61 2376 46 2017 59 2020 61 2376 46 2020 59 125 125 
69682,C#,"    public class SqliteConnectionTest
    {
        [Fact]
        public void Ctor_sets_connection_string()
        {
            var connectionString = ""Data Source=test.db"";

            var connection = new SqliteConnection(connectionString);

            Assert.Equal(connectionString, connection.ConnectionString);
        }

        [Fact]
        public void ConnectionString_defaults_to_empty()
        {
            var connection = new SqliteConnection();

            Assert.Empty(connection.ConnectionString);
        }

        [Fact]
        public void ConnectionString_coalesces_to_empty()
        {
            var connection = new SqliteConnection
            {
                ConnectionString = null
            };

            Assert.Empty(connection.ConnectionString);
        }

        [Fact]
        public void ConnectionString_setter_throws_when_open()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => connection.ConnectionString = ""Data Source=test.db"");

                Assert.Equal(Resources.ConnectionStringRequiresClosedConnection, ex.Message);
            }
        }

        [Fact]
        public void ConnectionString_gets_and_sets_value()
        {
            var connection = new SqliteConnection();
            var connectionString = ""Data Source=test.db"";

            connection.ConnectionString = connectionString;

            Assert.Equal(connectionString, connection.ConnectionString);
        }

        [Fact]
        public void Database_returns_value()
        {
            var connection = new SqliteConnection();

            Assert.Equal(""main"", connection.Database);
        }

        [Fact]
        public void DataSource_returns_connection_string_data_source_when_closed()
        {
            var connection = new SqliteConnection(""Data Source=test.db"");

            Assert.Equal(""test.db"", connection.DataSource);
        }

        [Fact]
        public void DataSource_returns_actual_filename_when_open()
        {
            using (var connection = new SqliteConnection(""Data Source=test.db""))
            {
                connection.Open();

                var result = connection.DataSource;

                Assert.True(Path.IsPathRooted(result));
                Assert.Equal(""test.db"", Path.GetFileName(result));
            }
        }

        [Fact]
        public void DefaultTimeout_defaults_to_30()
        {
            var connection = new SqliteConnection();

            Assert.Equal(30, connection.DefaultTimeout);
        }

        [Fact]
        public void DefaultTimeout_defaults_to_connection_string()
        {
            var connection = new SqliteConnection(""Default Timeout=1"");

            Assert.Equal(1, connection.DefaultTimeout);
        }

        [Fact]
        public void DefaultTimeout_works()
        {
            var connection = new SqliteConnection(""Default Timeout=1"")
            {
                DefaultTimeout = 2
            };

            Assert.Equal(2, connection.DefaultTimeout);
        }

        [Fact]
        public void ServerVersion_returns_value()
        {
            var connection = new SqliteConnection();

            var version = connection.ServerVersion;

            Assert.StartsWith(""3."", version);
        }

        [Fact]
        public void State_closed_by_default()
        {
            var connection = new SqliteConnection();

            Assert.Equal(ConnectionState.Closed, connection.State);
        }

        [Fact]
        public void Open_works_when_no_connection_string()
        {
            using var connection = new SqliteConnection();

            connection.Open();
        }

        [Fact]
        public void Open_adjusts_data_directory_path()
        {
            string dataSubDirectory = Path.Combine(AppContext.BaseDirectory, ""DataFolder"");

            if (!Directory.Exists(dataSubDirectory))
                Directory.CreateDirectory(dataSubDirectory);

            AppDomain.CurrentDomain.SetData(""DataDirectory"", dataSubDirectory);

            try
            {
                using (var connection = new SqliteConnection(""Data Source=|DataDirectory|local.db""))
                {
                    connection.Open();

                    Assert.Equal(Path.Combine(dataSubDirectory, ""local.db""), connection.DataSource);
                }
            }
            finally
            {
                AppDomain.CurrentDomain.SetData(""DataDirectory"", null);
            }
        }

        [Fact]
        public void Open_adjusts_relative_path()
        {
            using (var connection = new SqliteConnection(""Data Source=local.db""))
            {
                connection.Open();

                Assert.Equal(Path.Combine(AppContext.BaseDirectory, ""local.db""), connection.DataSource);
            }
        }

        [Fact]
        public void Open_throws_when_error()
        {
            using (var connection = new SqliteConnection(""Data Source=file:data.db?mode=invalidmode""))
            {
                var ex = Assert.Throws<SqliteException>(() => connection.Open());

                Assert.Equal(SQLITE_ERROR, ex.SqliteErrorCode);
            }
        }

        [Fact]
        public void Open_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var raised = false;
                StateChangeEventHandler handler = (sender, e) =>
                {
                    raised = true;

                    Assert.Equal(connection, sender);
                    Assert.Equal(ConnectionState.Closed, e.OriginalState);
                    Assert.Equal(ConnectionState.Open, e.CurrentState);
                };

                connection.StateChange += handler;
                try
                {
                    connection.Open();

                    Assert.True(raised);
                    Assert.Equal(ConnectionState.Open, connection.State);
                }
                finally
                {
                    connection.StateChange -= handler;
                }
            }
        }

        [Fact]
        public void Open_works_when_readonly()
        {
            using (var connection = new SqliteConnection(""Data Source=readonly.db""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE IF NOT EXISTS Idomic (Word TEXT);"");
            }

            using (var connection = new SqliteConnection(""Data Source=readonly.db;Mode=ReadOnly""))
            {
                connection.Open();

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteNonQuery(""INSERT INTO Idomic VALUES ('arimfexendrapuse');""));

                Assert.Equal(SQLITE_READONLY, ex.SqliteErrorCode);
            }
        }

        [Fact]
        public void Open_works_when_readwrite()
        {
            using (var connection = new SqliteConnection(""Data Source=readwrite.db;Mode=ReadWrite""))
            {
                var ex = Assert.Throws<SqliteException>(() => connection.Open());

                Assert.Equal(SQLITE_CANTOPEN, ex.SqliteErrorCode);
            }
        }

        [Fact]
        public void Open_works_when_memory_shared()
        {
            var connectionString = ""Data Source=people;Mode=Memory;Cache=Shared"";

            using (var connection1 = new SqliteConnection(connectionString))
            {
                connection1.Open();

                connection1.ExecuteNonQuery(
                    ""CREATE TABLE Person (Name TEXT);"" + ""INSERT INTO Person VALUES ('Waldo');"");

                using (var connection2 = new SqliteConnection(connectionString))
                {
                    connection2.Open();

                    var name = connection2.ExecuteScalar<string>(""SELECT Name FROM Person;"");
                    Assert.Equal(""Waldo"", name);
                }
            }
        }

        [Fact]
        public void Open_works_when_password()
        {
#if E_SQLITE3 || WINSQLITE3
            Open_works_when_password_unsupported();
#elif E_SQLCIPHER || SQLCIPHER
            Open_works_when_password_supported();
#elif SQLITE3
            Open_works_when_password_might_be_supported();
#else
#error Unexpected native library
#endif
        }

        private void Open_works_when_password_unsupported()
        {
            using (var connection = new SqliteConnection(""Data Source=encrypted.db;Password=password""))
            {
                var stateChangeRaised = false;
                connection.StateChange += (sender, e) => stateChangeRaised = true;

                var ex = Assert.Throws<InvalidOperationException>(() => connection.Open());

                Assert.Equal(Resources.EncryptionNotSupported(GetNativeLibraryName()), ex.Message);
                Assert.False(stateChangeRaised);
                Assert.Equal(ConnectionState.Closed, connection.State);
            }
        }

        private void Open_works_when_password_supported()
        {
            using (var connection1 = new SqliteConnection(""Data Source=encrypted.db;Password=password""))
            {
                connection1.Open();

                // NB: The file is only encrypted after writing
                connection1.ExecuteNonQuery(""CREATE TABLE IF NOT EXISTS dual (dummy)"");

                using (var connection2 = new SqliteConnection(""Data Source=encrypted.db;Password=wrong""))
                {
                    var stateChangeRaised = false;
                    connection2.StateChange += (sender, e) => stateChangeRaised = true;

                    var ex = Assert.Throws<SqliteException>(() => connection2.Open());

                    Assert.Equal(SQLITE_NOTADB, ex.SqliteErrorCode);
                    Assert.False(stateChangeRaised);
                    Assert.Equal(ConnectionState.Closed, connection2.State);
                }
            }
        }

        private void Open_works_when_password_might_be_supported()
        {
            using var connection = new SqliteConnection(""Data Source=encrypted.db;Password=password"");
            connection.Open();
        }

#if E_SQLCIPHER || SQLCIPHER
        [Fact]
        public void Open_decrypts_lazily_when_no_password()
        {
            try
            {
                using var connection1 = new SqliteConnection(""Data Source=encrypted2.db;Password=password"");
                connection1.Open();

                // NB: The file is only encrypted after writing
                connection1.ExecuteNonQuery(
                    ""CREATE TABLE IF NOT EXISTS data (value); INSERT INTO data (value) VALUES (1);"");

                using var connection2 = new SqliteConnection(""Data Source=encrypted2.db"");
                connection2.Open();
                connection2.ExecuteNonQuery(""PRAGMA key = 'password';"");

                var value = connection2.ExecuteScalar<long>(""SELECT value FROM data;"");

                Assert.Equal(1L, value);
            }
            finally
            {
                SqliteConnection.ClearPool(new SqliteConnection(""Data Source=encrypted2.db;Password=password""));
                SqliteConnection.ClearPool(new SqliteConnection(""Data Source=encrypted2.db""));
                File.Delete(""encrypted2.db"");
            }
        }
#endif

        [Theory]
        [InlineData(""True"", 1L)]
        [InlineData(""False"", 0L)]
        public void Open_works_when_foreign_keys(string foreignKeys, long expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:;Foreign Keys="" + foreignKeys))
            {
                connection.Open();

                Assert.Equal(expected, connection.ExecuteScalar<long>(""PRAGMA foreign_keys;""));
            }
        }

        [Fact]
        public void Open_works_when_recursive_triggers()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:;Recursive Triggers=True""))
            {
                connection.Open();

                Assert.Equal(1L, connection.ExecuteScalar<long>(""PRAGMA recursive_triggers;""));
            }
        }

        [Fact]
        public void BackupDatabase_works()
        {
            using (var connection1 = new SqliteConnection(""Data Source=:memory:""))
            {
                connection1.Open();

                connection1.ExecuteNonQuery(
                    ""CREATE TABLE Person (Name TEXT);"" + ""INSERT INTO Person VALUES ('Waldo');"");

                using (var connection2 = new SqliteConnection(""Data Source=:memory:""))
                {
                    connection2.Open();
                    connection1.BackupDatabase(connection2);

                    var name = connection2.ExecuteScalar<string>(""SELECT Name FROM Person;"");
                    Assert.Equal(""Waldo"", name);
                }
            }
        }

        [Fact]
        public void BackupDatabase_works_when_destination_closed()
        {
            using (var source = new SqliteConnection(""Data Source=:memory:""))
            using (var destination = new SqliteConnection(""Data Source=:memory:""))
            {
                source.Open();
                source.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");

                source.BackupDatabase(destination);
            }
        }

        [Fact]
        public void BackupDatabase_throws_when_closed()
        {
            var source = new SqliteConnection();
            var destination = new SqliteConnection();

            var ex = Assert.Throws<InvalidOperationException>(() => source.BackupDatabase(destination));

            Assert.Equal(Resources.CallRequiresOpenConnection(""BackupDatabase""), ex.Message);
        }

        [Fact]
        public void BackupDatabase_throws_when_destination_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var ex = Assert.Throws<ArgumentNullException>(() => connection.BackupDatabase(null!));

                Assert.Equal(""destination"", ex.ParamName);
            }
        }

        [Fact]
        public void BackupDatabase_throws_with_correct_message()
        {
            using (var source = new SqliteConnection(""Data Source=:memory:""))
            using (var destination = new SqliteConnection(""Data Source=:memory:""))
            {
                source.Open();
                source.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");

                using (source.BeginTransaction())
                {
                    source.ExecuteNonQuery(""UPDATE Data SET Value = 1;"");

                    var ex = Assert.Throws<SqliteException>(() => source.BackupDatabase(destination));
                    Assert.Equal(SQLITE_BUSY, ex.SqliteErrorCode);
                }
            }
        }

        [Fact]
        public void Open_works_when_uri()
        {
            using (var connection = new SqliteConnection(""Data Source=file:readwrite.db?mode=rw""))
            {
                var ex = Assert.Throws<SqliteException>(() => connection.Open());

                Assert.Equal(SQLITE_CANTOPEN, ex.SqliteErrorCode);
            }
        }

        [Fact]
        public void Close_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var raised = false;
                StateChangeEventHandler handler = (sender, e) =>
                {
                    raised = true;

                    Assert.Equal(connection, sender);
                    Assert.Equal(ConnectionState.Open, e.OriginalState);
                    Assert.Equal(ConnectionState.Closed, e.CurrentState);
                };

                connection.StateChange += handler;
                try
                {
                    connection.Close();

                    Assert.True(raised);
                    Assert.Equal(ConnectionState.Closed, connection.State);
                }
                finally
                {
                    connection.StateChange -= handler;
                }
            }
        }

        [Fact]
        public void Close_can_be_called_before_open()
        {
            var connection = new SqliteConnection();

            connection.Close();
        }

        [Fact]
        public void Close_can_be_called_more_than_once()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.Close();
                connection.Close();
            }
        }

        [Fact]
        public void Dispose_closes_connection()
        {
            var connection = new SqliteConnection(""Data Source=:memory:"");
            connection.Open();

            connection.Dispose();

            Assert.Equal(ConnectionState.Closed, connection.State);
        }

        [Fact]
        public void Dispose_can_be_called_more_than_once()
        {
            var connection = new SqliteConnection(""Data Source=:memory:"");
            connection.Open();

            connection.Dispose();
            connection.Dispose();
        }

        [Fact]
        public void CreateCommand_returns_command()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var transaction = connection.BeginTransaction())
                {
                    var command = connection.CreateCommand();

                    Assert.NotNull(command);
                    Assert.Same(connection, command.Connection);
                    Assert.Same(transaction, command.Transaction);
                }
            }
        }

        [Fact]
        public void CreateCollation_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateCollation(""MY_NOCASE"", (s1, s2) => string.Compare(s1, s2, StringComparison.OrdinalIgnoreCase));

                Assert.Equal(1L, connection.ExecuteScalar<long>(""SELECT 'Νικοσ' = 'ΝΙΚΟΣ' COLLATE MY_NOCASE;""));
            }
        }

        [Fact]
        public void CreateCollation_with_null_comparer_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateCollation(""MY_NOCASE"", (s1, s2) => string.Compare(s1, s2, StringComparison.OrdinalIgnoreCase));
                connection.CreateCollation(""MY_NOCASE"", null);

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteScalar<long>(""SELECT 'Νικοσ' = 'ΝΙΚΟΣ' COLLATE MY_NOCASE;""));

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""no such collation sequence: MY_NOCASE""), ex.Message);
            }
        }

        [Fact]
        public void CreateCollation_works_when_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.CreateCollation(""MY_NOCASE"", (s1, s2) => string.Compare(s1, s2, StringComparison.OrdinalIgnoreCase));
                connection.Open();

                Assert.Equal(1L, connection.ExecuteScalar<long>(""SELECT 'Νικοσ' = 'ΝΙΚΟΣ' COLLATE MY_NOCASE;""));
            }
        }

        [Fact]
        public void CreateCollation_throws_with_empty_name()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                var ex = Assert.Throws<ArgumentNullException>(() => connection.CreateCollation(null!, null));

                Assert.Equal(""name"", ex.ParamName);
            }
        }

        [Fact]
        public void CreateCollation_works_with_state()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                var list = new List<string>();
                connection.CreateCollation(
                    ""MY_NOCASE"",
                    list,
                    (l, s1, s2) =>
                    {
                        l.Add(""Invoked"");
                        return string.Compare(s1, s2, StringComparison.OrdinalIgnoreCase);
                    });

                Assert.Equal(1L, connection.ExecuteScalar<long>(""SELECT 'Νικοσ' = 'ΝΙΚΟΣ' COLLATE MY_NOCASE;""));
                var item = Assert.Single(list);
                Assert.Equal(""Invoked"", item);
            }
        }

        [Fact]
        public void CreateFunction_works_when_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.CreateFunction(""test"", 1L, (long state, long x, int y) => $""{state} {x} {y}"");
                connection.Open();

                var result = connection.ExecuteScalar<string>(""SELECT test(2, 3);"");

                Assert.Equal(""1 2 3"", result);
            }
        }

        [Fact]
        public void CreateFunction_throws_when_no_name()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                var ex = Assert.Throws<ArgumentNullException>(() => connection.CreateFunction(null!, () => 1L));

                Assert.Equal(""name"", ex.ParamName);
            }
        }

        [Fact]
        public void CreateFunction_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", 1L, (long state, long x, int y) => $""{state} {x} {y}"");

                var result = connection.ExecuteScalar<string>(""SELECT test(2, 3);"");

                Assert.Equal(""1 2 3"", result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_params()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(
                    ""test"",
                    args => string.Join("", "", args.Select(a => a?.GetType().FullName ?? ""(null)"")));

                var result = connection.ExecuteScalar<string>(""SELECT test(1, 3.1, 'A', X'7E57', NULL);"");

                Assert.Equal(""System.Int64, System.Double, System.String, System.Byte[], (null)"", result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_exception()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction<long>(""test"", () => throw new Exception(""Test""));

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteScalar<long>(""SELECT test();""));

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""Test""), ex.Message);
            }
        }

        [Fact]
        public void CreateFunction_works_when_sqlite_exception()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction<long>(""test"", () => throw new SqliteException(""Test"", 200));

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteScalar<long>(""SELECT test();""));

                Assert.Equal(Resources.SqliteNativeError(200, ""Test""), ex.Message);
            }
        }

        [Fact]
        public void CreateFunction_works_when_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", () => 1L);
                connection.CreateFunction(""test"", default(Func<long>));

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteScalar<long>(""SELECT test();""));

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""no such function: test""), ex.Message);
            }
        }

        [Fact]
        public void CreateFunction_works_when_result_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction<object?>(""test"", () => null);

                var result = connection.ExecuteScalar<object>(""SELECT test();"");

                Assert.Equal(DBNull.Value, result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_result_DBNull()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction<object>(""test"", () => DBNull.Value);

                var result = connection.ExecuteScalar<object>(""SELECT test();"");

                Assert.Equal(DBNull.Value, result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_parameter_null_and_type_nullable()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", (long? x) => x == null);

                var result = connection.ExecuteScalar<long>(""SELECT test(NULL);"");

                Assert.Equal(1L, result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_parameter_null_but_type_long()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", (long x) => x);

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteScalar<long>(""SELECT test(NULL);""));

                Assert.Equal(
                    Resources.SqliteNativeError(SQLITE_ERROR, Resources.UDFCalledWithNull(""test"", 0)),
                    ex.Message);
            }
        }

        [Fact]
        public void CreateFunction_works_when_parameter_null_but_type_double()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", (double x) => x);

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteScalar<double>(""SELECT test(NULL);""));

                Assert.Equal(
                    Resources.SqliteNativeError(SQLITE_ERROR, Resources.UDFCalledWithNull(""test"", 0)),
                    ex.Message);
                Assert.Equal(SQLITE_ERROR, ex.SqliteErrorCode);
            }
        }

        [Fact]
        public void CreateFunction_works_when_parameter_null_and_type_string()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", (string? x) => x == null);

                var result = connection.ExecuteScalar<long>(""SELECT test(NULL);"");

                Assert.Equal(1L, result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_parameter_null_and_type_byteArray()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", (byte[] x) => x == null);

                var result = connection.ExecuteScalar<long>(""SELECT test(NULL);"");

                Assert.Equal(1L, result);
            }
        }

        [Fact]
        public void CreateFunction_works_when_parameter_empty_blob()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.CreateFunction(""test"", (byte[] x) => x?.Length == 0);

                var result = connection.ExecuteScalar<long>(""SELECT test(X'');"");

                Assert.Equal(1L, result);
            }
        }

        [Fact]
        public void CreateFunction_is_non_deterministic()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");
                connection.CreateFunction(""test"", (double x) => x);

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteNonQuery(""CREATE INDEX InvalidIndex ON Data (Value) WHERE test(Value) = 0;""));

                Assert.Equal(
                    Resources.SqliteNativeError(SQLITE_ERROR, ""non-deterministic functions prohibited in partial index WHERE clauses""),
                    ex.Message);
            }
        }

        [Fact]
        public void CreateFunction_deterministic_param_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");
                connection.CreateFunction(""test"", (double x) => x, true);

                Assert.Equal(1, connection.ExecuteNonQuery(""CREATE INDEX InvalidIndex ON Data (Value) WHERE test(Value) = 0;""));
            }
        }

        [Fact]
        public void CreateAggregate_works_when_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.CreateAggregate(
                    ""test"",
                    ""A"",
                    (string a, string x, int y) => a + x + y,
                    a => a + ""Z"");
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual2 (dummy1, dummy2); INSERT INTO dual2 (dummy1, dummy2) VALUES ('X', 1);"");

                var result = connection.ExecuteScalar<string>(""SELECT test(dummy1, dummy2) FROM dual2;"");

                Assert.Equal(""AX1Z"", result);
            }
        }

        [Fact]
        public void CreateAggregate_throws_when_no_name()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                var ex = Assert.Throws<ArgumentNullException>(() => connection.CreateAggregate(null!, (string? a) => ""A""));

                Assert.Equal(""name"", ex.ParamName);
            }
        }

        [Fact]
        public void CreateAggregate_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual2 (dummy1, dummy2); INSERT INTO dual2 (dummy1, dummy2) VALUES ('X', 1);"");
                connection.CreateAggregate(
                    ""test"",
                    ""A"",
                    (string a, string x, int y) => a + x + y,
                    a => a + ""Z"");

                var result = connection.ExecuteScalar<string>(""SELECT test(dummy1, dummy2) FROM dual2;"");

                Assert.Equal(""AX1Z"", result);
            }
        }

        [Fact]
        public void CreateAggregate_works_when_params()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual (dummy); INSERT INTO dual (dummy) VALUES ('X');"");
                connection.CreateAggregate(""test"", (string? a, object?[] args) => a + string.Join("", "", args) + ""; "");

                var result = connection.ExecuteScalar<string>(""SELECT test(dummy) FROM dual;"");

                Assert.Equal(""X; "", result);
            }
        }

        [Fact]
        public void CreateAggregate_works_when_exception_during_step()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual (dummy); INSERT INTO dual (dummy) VALUES ('X');"");
                connection.CreateAggregate(""test"", (string? a) => throw new Exception(""Test""));

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteScalar<string>(""SELECT test() FROM dual;""));

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""Test""), ex.Message);
            }
        }

        [Fact]
        public void CreateAggregate_works_when_exception_during_final()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual (dummy); INSERT INTO dual (dummy) VALUES ('X');"");
                connection.CreateAggregate<string, string>(""test"", ""A"", a => ""B"", a => throw new Exception(""Test""));

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteScalar<string>(""SELECT test() FROM dual;""));

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""Test""), ex.Message);
            }
        }

        [Fact]
        public void CreateAggregate_works_when_sqlite_exception()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual (dummy); INSERT INTO dual (dummy) VALUES ('X');"");
                connection.CreateAggregate(""test"", (string? a) => throw new SqliteException(""Test"", 200));

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteScalar<string>(""SELECT test() FROM dual;""));

                Assert.Equal(Resources.SqliteNativeError(200, ""Test""), ex.Message);
            }
        }

        [Fact]
        public void CreateAggregate_works_when_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE dual (dummy); INSERT INTO dual (dummy) VALUES ('X');"");
                connection.CreateAggregate(""test"", (string? a) => ""A"");
                connection.CreateAggregate(""test"", default(Func<string?, string>));

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteScalar<long>(""SELECT test() FROM dual;""));

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""no such function: test""), ex.Message);
            }
        }

        [Fact]
        public void BeginTransaction_throws_when_closed()
        {
            var connection = new SqliteConnection();

            var ex = Assert.Throws<InvalidOperationException>(() => connection.BeginTransaction());

            Assert.Equal(Resources.CallRequiresOpenConnection(""BeginTransaction""), ex.Message);
        }

        [Fact]
        public void BeginTransaction_throws_when_parallel_transaction()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (connection.BeginTransaction())
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => connection.BeginTransaction());

                    Assert.Equal(Resources.ParallelTransactionsNotSupported, ex.Message);
                }
            }
        }

        [Fact]
        public void BeginTransaction_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var transaction = connection.BeginTransaction(IsolationLevel.Serializable))
                {
                    Assert.NotNull(transaction);
                    Assert.Equal(connection, transaction.Connection);
                    Assert.Equal(IsolationLevel.Serializable, transaction.IsolationLevel);
                }
            }
        }

        [Fact]
        public void ChangeDatabase_not_supported()
        {
            using (var connection = new SqliteConnection())
            {
                Assert.Throws<NotSupportedException>(() => connection.ChangeDatabase(""new""));
            }
        }

        [Fact]
        public void Mars_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var command1 = connection.CreateCommand();
                command1.CommandText = ""SELECT '1A' UNION SELECT '1B';"";

                using (var reader1 = command1.ExecuteReader())
                {
                    reader1.Read();
                    Assert.Equal(""1A"", reader1.GetString(0));

                    var command2 = connection.CreateCommand();
                    command2.CommandText = ""SELECT '2A' UNION SELECT '2B';"";

                    using (var reader2 = command2.ExecuteReader())
                    {
                        reader2.Read();
                        Assert.Equal(""2A"", reader2.GetString(0));

                        reader1.Read();
                        Assert.Equal(""1B"", reader1.GetString(0));

                        reader2.Read();
                        Assert.Equal(""2B"", reader2.GetString(0));
                    }
                }
            }
        }

        [Fact]
        public void EnableExtensions_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var loadExtensionOmitted = connection.ExecuteScalar<long>(
                    ""SELECT COUNT(*) FROM pragma_compile_options WHERE compile_options = 'OMIT_LOAD_EXTENSION';"");
                if (loadExtensionOmitted != 0L)
                {
                    return;
                }

                var sql = ""SELECT load_extension('unknown');"";

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteNonQuery(sql));
                var originalError = ex.Message;

                connection.EnableExtensions();

                ex = Assert.Throws<SqliteException>(() => connection.ExecuteNonQuery(sql));
                var enabledError = ex.Message;

                connection.EnableExtensions(enable: false);

                ex = Assert.Throws<SqliteException>(() => connection.ExecuteNonQuery(sql));
                var disabledError = ex.Message;

                Assert.NotEqual(originalError, enabledError);
                Assert.Equal(originalError, disabledError);
            }
        }

        [Fact]
        public void EnableExtensions_works_when_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var loadExtensionOmitted = connection.ExecuteScalar<long>(
                    ""SELECT COUNT(*) FROM pragma_compile_options WHERE compile_options = 'OMIT_LOAD_EXTENSION';"");
                if (loadExtensionOmitted != 0L)
                {
                    return;
                }

                var sql = ""SELECT load_extension('unknown');"";

                var ex = Assert.Throws<SqliteException>(() => connection.ExecuteNonQuery(sql));
                var originalError = ex.Message;

                connection.Close();
                connection.EnableExtensions();
                connection.Open();

                ex = Assert.Throws<SqliteException>(() => connection.ExecuteNonQuery(sql));
                var enabledError = ex.Message;

                Assert.NotEqual(originalError, enabledError);
            }
        }

        [Fact]
        public void LoadExtension_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var loadExtensionOmitted = connection.ExecuteScalar<long>(
                    ""SELECT COUNT(*) FROM pragma_compile_options WHERE compile_options = 'OMIT_LOAD_EXTENSION';"");
                if (loadExtensionOmitted != 0L)
                {
                    return;
                }

                connection.Close();
                connection.EnableExtensions(false);
                connection.Open();

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteNonQuery(""SELECT load_extension('unknown');""));
                var extensionsDisabledError = ex.Message;

                ex = Assert.Throws<SqliteException>(() => connection.LoadExtension(""unknown""));

                Assert.NotEqual(extensionsDisabledError, ex.Message);
            }
        }

        [Fact]
        public void LoadExtension_works_when_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var loadExtensionOmitted = connection.ExecuteScalar<long>(
                    ""SELECT COUNT(*) FROM pragma_compile_options WHERE compile_options = 'OMIT_LOAD_EXTENSION';"");
                if (loadExtensionOmitted != 0L)
                {
                    return;
                }

                connection.Close();
                connection.EnableExtensions(false);
                connection.Open();

                var ex = Assert.Throws<SqliteException>(
                    () => connection.ExecuteNonQuery(""SELECT load_extension('unknown');""));
                var extensionsDisabledError = ex.Message;

                connection.Close();

                connection.LoadExtension(""unknown"");

                ex = Assert.Throws<SqliteException>(() => connection.Open());

                Assert.NotEqual(extensionsDisabledError, ex.Message);
            }
        }

        [Fact]
        public void DbProviderFactory_works()
        {
            var connection = new SqliteConnection();

            var result = DbProviderFactories.GetFactory(connection);

            Assert.Same(SqliteFactory.Instance, result);
        }

        [Fact]
        public void GetSchema_works()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");

            var dataTable = connection.GetSchema();

            Assert.Equal(DbMetaDataCollectionNames.MetaDataCollections, dataTable.TableName);
            Assert.Collection(
                dataTable.Columns.Cast<DataColumn>(),
                c => Assert.Equal(DbMetaDataColumnNames.CollectionName, c.ColumnName),
                c => Assert.Equal(DbMetaDataColumnNames.NumberOfRestrictions, c.ColumnName),
                c => Assert.Equal(DbMetaDataColumnNames.NumberOfIdentifierParts, c.ColumnName));
            Assert.Collection(
                dataTable.Rows.Cast<DataRow>().Select(r => r.ItemArray),
                r => Assert.Equal(new object[] { DbMetaDataCollectionNames.MetaDataCollections, 0, 0 }, r),
                r => Assert.Equal(new object[] { DbMetaDataCollectionNames.ReservedWords, 0, 0 }, r));
        }

        [Fact]
        public void GetSchema_works_when_no_args()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");

            var dataTable = connection.GetSchema();

            Assert.Equal(DbMetaDataCollectionNames.MetaDataCollections, dataTable.TableName);
        }

        [Theory]
        [InlineData(null)]
        [InlineData("""")]
        [InlineData("" "")]
        [InlineData(""Unknown"")]
        public void GetSchema_throws_when_unknown_collection(string collectionName)
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");

            var ex = Assert.Throws<ArgumentException>(() => connection.GetSchema(collectionName));

            Assert.Equal(Resources.UnknownCollection(collectionName), ex.Message);
        }

        [Fact]
        public void GetSchema_ignores_case()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");

            var dataTable = connection.GetSchema(DbMetaDataCollectionNames.MetaDataCollections.ToUpper());

            Assert.Equal(DbMetaDataCollectionNames.MetaDataCollections, dataTable.TableName);
        }

        [Theory]
        [InlineData(nameof(DbMetaDataCollectionNames.MetaDataCollections), 0)]
        [InlineData(nameof(DbMetaDataCollectionNames.ReservedWords), 0)]
        public void GetSchema_throws_when_unknown_restrictions(string collectionName, int maxRestrictions)
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");

            var ex = Assert.Throws<ArgumentException>(
                () => connection.GetSchema(
                    collectionName,
                    Enumerable.Repeat<string?>(null, maxRestrictions + 1).ToArray()));

            Assert.Equal(Resources.TooManyRestrictions(collectionName), ex.Message);
        }

        [Fact]
        public void GetSchema_allows_null()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");

            var dataTable = connection.GetSchema(DbMetaDataCollectionNames.MetaDataCollections, null!);

            Assert.Equal(DbMetaDataCollectionNames.MetaDataCollections, dataTable.TableName);
        }

        [Fact]
        public void GetSchema_ReservedWords_works()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");
            if (new Version(connection.ServerVersion) < new Version(3, 24, 0))
            {
                // Skip. Native functions not available
                return;
            }

            var dataTable = connection.GetSchema(DbMetaDataCollectionNames.ReservedWords);

            Assert.Equal(DbMetaDataCollectionNames.ReservedWords, dataTable.TableName);
            Assert.Single(dataTable.Columns);
            Assert.Contains(
                dataTable.Rows.Cast<DataRow>(),
                r => r.Field<string>(DbMetaDataColumnNames.ReservedWord) == ""SELECT"");
        }
    }",1,439 334 2000 123 91 2001 93 439 492 2002 40 41 123 490 2003 61 648 59 490 2004 61 418 2005 40 2003 41 59 2006 46 2007 40 2003 44 2004 46 2008 41 59 125 91 2001 93 439 492 2009 40 41 123 490 2010 61 418 2011 40 41 59 2012 46 2013 40 2010 46 2014 41 59 125 91 2001 93 439 492 2015 40 41 123 490 2016 61 418 2017 123 2018 61 424 125 59 2019 46 2020 40 2016 46 2021 41 59 125 91 2001 93 439 492 2022 40 41 123 489 40 490 2023 61 418 2024 40 648 41 41 123 2023 46 2025 40 41 59 490 2026 61 2027 46 2028 60 2029 62 40 40 41 619 2023 46 2030 61 648 41 59 2027 46 2031 40 2032 46 2033 44 2026 46 2034 41 59 125 125 91 2001 93 439 492 2035 40 41 123 490 2036 61 418 2037 40 41 59 490 2038 61 648 59 2036 46 2039 61 2038 59 2040 46 2041 40 2038 44 2036 46 2039 41 59 125 91 2001 93 439 492 2042 40 41 123 490 2043 61 418 2044 40 41 59 2045 46 2046 40 648 44 2043 46 2047 41 59 125 91 2001 93 439 492 2048 40 41 123 490 2049 61 418 2050 40 648 41 59 2051 46 2052 40 648 44 2049 46 2053 41 59 125 91 2001 93 439 492 2054 40 41 123 489 40 490 2055 61 418 2056 40 648 41 41 123 2055 46 2057 40 41 59 490 2058 61 2055 46 2059 59 2060 46 304 40 2061 46 2062 40 2058 41 41 59 2060 46 2063 40 648 44 2061 46 2064 40 2058 41 41 59 125 125 91 2001 93 439 492 2065 40 41 123 490 2066 61 418 2067 40 41 59 2068 46 2069 40 1503 44 2066 46 2070 41 59 125 91 2001 93 439 492 2071 40 41 123 490 2072 61 418 2073 40 648 41 59 2074 46 2075 40 1501 44 2072 46 2076 41 59 125 91 2001 93 439 492 2077 40 41 123 490 2078 61 418 2079 40 648 41 123 2080 61 1502 125 59 2081 46 2082 40 1502 44 2078 46 2083 41 59 125 91 2001 93 439 492 2084 40 41 123 490 2085 61 418 2086 40 41 59 490 2087 61 2085 46 2088 59 2089 46 2090 40 648 44 2087 41 59 125 91 2001 93 439 492 2091 40 41 123 490 2092 61 418 2093 40 41 59 2094 46 2095 40 2096 46 2097 44 2092 46 2098 41 59 125 91 2001 93 439 492 2099 40 41 123 489 490 2100 61 418 2101 40 41 59 2100 46 2102 40 41 59 125 91 2001 93 439 492 2103 40 41 123 461 2104 61 2105 46 2106 40 2107 46 2108 44 648 41 59 392 40 33 2109 46 2110 40 2104 41 41 2109 46 2111 40 2104 41 59 2112 46 2113 46 2114 40 648 44 2104 41 59 474 123 489 40 490 2115 61 418 2116 40 648 41 41 123 2115 46 2117 40 41 59 2118 46 2119 40 2105 46 2106 40 2104 44 648 41 44 2115 46 2120 41 59 125 125 382 123 2112 46 2113 46 2114 40 648 44 424 41 59 125 125 91 2001 93 439 492 2121 40 41 123 489 40 490 2122 61 418 2123 40 648 41 41 123 2122 46 2124 40 41 59 2125 46 2126 40 2127 46 2128 40 2129 46 2130 44 648 41 44 2122 46 2131 41 59 125 125 91 2001 93 439 492 2132 40 41 123 489 40 490 2133 61 418 2134 40 648 41 41 123 490 2135 61 2136 46 2137 60 2138 62 40 40 41 619 2133 46 2139 40 41 41 59 2136 46 2140 40 2141 44 2135 46 2142 41 59 125 125 91 2001 93 439 492 2143 40 41 123 489 40 490 2144 61 418 2145 40 648 41 41 123 490 2146 61 380 59 2147 2148 61 40 2149 44 2150 41 619 123 2146 61 473 59 2151 46 2152 40 2144 44 2149 41 59 2151 46 2152 40 2153 46 2154 44 2150 46 2155 41 59 2151 46 2152 40 2153 46 2156 44 2150 46 2157 41 59 125 59 2144 46 2158 636 2148 59 474 123 2144 46 2159 40 41 59 2160 46 304 40 2146 41 59 2160 46 2161 40 2162 46 2159 44 2144 46 2163 41 59 125 382 123 2144 46 2158 628 2148 59 125 125 125 91 2001 93 439 492 2164 40 41 123 489 40 490 2165 61 418 2166 40 648 41 41 123 2165 46 2167 40 41 59 2165 46 2168 40 648 41 59 125 489 40 490 2165 61 418 2166 40 648 41 41 123 2165 46 2169 40 41 59 490 2170 61 2171 46 2172 60 2173 62 40 40 41 619 2165 46 2174 40 648 41 41 59 2171 46 2175 40 2176 44 2170 46 2177 41 59 125 125 91 2001 93 439 492 2178 40 41 123 489 40 490 2179 61 418 2180 40 648 41 41 123 490 2181 61 2182 46 2183 60 2184 62 40 40 41 619 2179 46 2185 40 41 41 59 2182 46 2186 40 2187 44 2181 46 2188 41 59 125 125 91 2001 93 439 492 2189 40 41 123 490 2190 61 648 59 489 40 490 2191 61 418 2192 40 2190 41 41 123 2191 46 2193 40 41 59 2191 46 2194 40 648 43 648 41 59 489 40 490 2195 61 418 2192 40 2190 41 41 123 2195 46 2193 40 41 59 490 2196 61 2195 46 2197 60 461 62 40 648 41 59 2198 46 2199 40 648 44 2196 41 59 125 125 125 91 2001 93 439 492 2200 40 41 123 35 392 2201 606 2202 2203 40 41 59 35 359 2204 606 2205 2206 40 41 59 35 359 2207 2208 40 41 59 35 360 35 371 35 366 125 437 492 2209 40 41 123 489 40 490 2210 61 418 2211 40 648 41 41 123 490 2212 61 380 59 2210 46 2213 636 40 2214 44 2215 41 619 2212 61 473 59 490 2216 61 2217 46 2218 60 2219 62 40 40 41 619 2210 46 2220 40 41 41 59 2217 46 2221 40 2222 46 2223 40 2224 40 41 41 44 2216 46 2225 41 59 2217 46 302 40 2212 41 59 2217 46 2221 40 2226 46 2227 44 2210 46 2228 41 59 125 125 437 492 2229 40 41 123 489 40 490 2230 61 418 2231 40 648 41 41 123 2230 46 2232 40 41 59 621 2230 46 2233 40 648 41 59 489 40 490 2234 61 418 2231 40 648 41 41 123 490 2235 61 380 59 2234 46 2236 636 40 2237 44 2238 41 619 2235 61 473 59 490 2239 61 2240 46 2241 60 2242 62 40 40 41 619 2234 46 2232 40 41 41 59 2240 46 2243 40 2244 44 2239 46 2245 41 59 2240 46 302 40 2235 41 59 2240 46 2243 40 2246 46 2247 44 2234 46 2248 41 59 125 125 125 437 492 2249 40 41 123 489 490 2250 61 418 2251 40 648 41 59 2250 46 2252 40 41 59 125 35 392 2253 606 2254 91 2001 93 439 492 2255 40 41 123 474 123 489 490 2256 61 418 2257 40 648 41 59 2256 46 2258 40 41 59 621 2256 46 2259 40 648 41 59 489 490 2260 61 418 2257 40 648 41 59 2260 46 2258 40 41 59 2260 46 2259 40 648 41 59 490 2261 61 2260 46 2262 60 413 62 40 648 41 59 2263 46 2264 40 1501 44 2261 41 59 125 382 123 2265 46 2266 40 418 2265 40 648 41 41 59 2265 46 2266 40 418 2265 40 648 41 41 59 2267 46 2268 40 648 41 59 125 125 35 366 91 2269 93 91 2270 40 648 44 1501 41 93 91 2270 40 648 44 1500 41 93 439 492 2271 40 461 2272 44 413 2273 41 123 489 40 490 2274 61 418 2275 40 648 43 2272 41 41 123 2274 46 2276 40 41 59 2277 46 2278 40 2273 44 2274 46 2279 60 413 62 40 648 41 41 59 125 125 91 2001 93 439 492 2280 40 41 123 489 40 490 2281 61 418 2282 40 648 41 41 123 2281 46 2283 40 41 59 2284 46 2285 40 1501 44 2281 46 2286 60 413 62 40 648 41 41 59 125 125 91 2001 93 439 492 2287 40 41 123 489 40 490 2288 61 418 2289 40 648 41 41 123 2288 46 2290 40 41 59 2288 46 2291 40 648 43 648 41 59 489 40 490 2292 61 418 2289 40 648 41 41 123 2292 46 2290 40 41 59 2288 46 2293 40 2292 41 59 490 2294 61 2292 46 2295 60 461 62 40 648 41 59 2296 46 2297 40 648 44 2294 41 59 125 125 125 91 2001 93 439 492 2298 40 41 123 489 40 490 2299 61 418 2300 40 648 41 41 489 40 490 2301 61 418 2300 40 648 41 41 123 2299 46 2302 40 41 59 2299 46 2303 40 648 41 59 2299 46 2304 40 2301 41 59 125 125 91 2001 93 439 492 2305 40 41 123 490 2306 61 418 2307 40 41 59 490 2308 61 418 2307 40 41 59 490 2309 61 2310 46 2311 60 2312 62 40 40 41 619 2306 46 2313 40 2308 41 41 59 2310 46 2314 40 2315 46 2316 40 648 41 44 2309 46 2317 41 59 125 91 2001 93 439 492 2318 40 41 123 489 40 490 2319 61 418 2320 40 648 41 41 123 2319 46 2321 40 41 59 490 2322 61 2323 46 2324 60 2325 62 40 40 41 619 2319 46 2326 40 424 33 41 41 59 2323 46 2327 40 648 44 2322 46 2328 41 59 125 125 91 2001 93 439 492 2329 40 41 123 489 40 490 2330 61 418 2331 40 648 41 41 489 40 490 2332 61 418 2331 40 648 41 41 123 2330 46 2333 40 41 59 2330 46 2334 40 648 41 59 489 40 2330 46 2335 40 41 41 123 2330 46 2334 40 648 41 59 490 2336 61 2337 46 2338 60 2339 62 40 40 41 619 2330 46 2340 40 2332 41 41 59 2337 46 2341 40 2342 44 2336 46 2343 41 59 125 125 125 91 2001 93 439 492 2344 40 41 123 489 40 490 2345 61 418 2346 40 648 41 41 123 490 2347 61 2348 46 2349 60 2350 62 40 40 41 619 2345 46 2351 40 41 41 59 2348 46 2352 40 2353 44 2347 46 2354 41 59 125 125 91 2001 93 439 492 2355 40 41 123 489 40 490 2356 61 418 2357 40 648 41 41 123 2356 46 2358 40 41 59 490 2359 61 380 59 2360 2361 61 40 2362 44 2363 41 619 123 2359 61 473 59 2364 46 2365 40 2356 44 2362 41 59 2364 46 2365 40 2366 46 2358 44 2363 46 2367 41 59 2364 46 2365 40 2366 46 2368 44 2363 46 2369 41 59 125 59 2356 46 2370 636 2361 59 474 123 2356 46 2371 40 41 59 2372 46 304 40 2359 41 59 2372 46 2373 40 2374 46 2375 44 2356 46 2376 41 59 125 382 123 2356 46 2370 628 2361 59 125 125 125 91 2001 93 439 492 2377 40 41 123 490 2378 61 418 2379 40 41 59 2378 46 2380 40 41 59 125 91 2001 93 439 492 2381 40 41 123 489 40 490 2382 61 418 2383 40 648 41 41 123 2382 46 2384 40 41 59 2382 46 2385 40 41 59 2382 46 2385 40 41 59 125 125 91 2001 93 439 492 2386 40 41 123 490 2387 61 418 2388 40 648 41 59 2387 46 2389 40 41 59 2387 46 2390 40 41 59 2391 46 2392 40 2393 46 2394 44 2387 46 2395 41 59 125 91 2001 93 439 492 2396 40 41 123 490 2397 61 418 2398 40 648 41 59 2397 46 2399 40 41 59 2397 46 2400 40 41 59 2397 46 2400 40 41 59 125 91 2001 93 439 492 2401 40 41 123 489 40 490 2402 61 418 2403 40 648 41 41 123 2402 46 2404 40 41 59 489 40 490 2405 61 2402 46 2406 40 41 41 123 490 2407 61 2402 46 2408 40 41 59 2409 46 2410 40 2407 41 59 2409 46 2411 40 2402 44 2407 46 2412 41 59 2409 46 2411 40 2405 44 2407 46 2413 41 59 125 125 125 91 2001 93 439 492 2414 40 41 123 489 40 490 2415 61 418 2416 40 648 41 41 123 2415 46 2417 40 41 59 2415 46 2418 40 648 44 40 2419 44 2420 41 619 461 46 2421 40 2419 44 2420 44 2422 46 2423 41 41 59 2424 46 2425 40 1501 44 2415 46 2426 60 413 62 40 648 41 41 59 125 125 91 2001 93 439 492 2427 40 41 123 489 40 490 2428 61 418 2429 40 648 41 41 123 2428 46 2430 40 41 59 2428 46 2431 40 648 44 40 2432 44 2433 41 619 461 46 2434 40 2432 44 2433 44 2435 46 2436 41 41 59 2428 46 2431 40 648 44 424 41 59 490 2437 61 2438 46 2439 60 2440 62 40 40 41 619 2428 46 2441 60 413 62 40 648 41 41 59 2438 46 2442 40 2443 46 2444 40 2445 44 648 41 44 2437 46 2446 41 59 125 125 91 2001 93 439 492 2447 40 41 123 489 40 490 2448 61 418 2449 40 648 41 41 123 2448 46 2450 40 648 44 40 2451 44 2452 41 619 461 46 2453 40 2451 44 2452 44 2454 46 2455 41 41 59 2448 46 2456 40 41 59 2457 46 2458 40 1501 44 2448 46 2459 60 413 62 40 648 41 41 59 125 125 91 2001 93 439 492 2460 40 41 123 489 40 490 2461 61 418 2462 40 648 41 41 123 2461 46 2463 40 41 59 490 2464 61 2465 46 2466 60 2467 62 40 40 41 619 2461 46 2468 40 424 33 44 424 41 41 59 2465 46 2469 40 648 44 2464 46 2470 41 59 125 125 91 2001 93 439 492 2471 40 41 123 489 40 490 2472 61 418 2473 40 648 41 41 123 2472 46 2474 40 41 59 490 411 61 418 2475 60 461 62 40 41 59 2472 46 2476 40 648 44 411 44 40 2477 44 2478 44 2479 41 619 123 2477 46 2480 40 648 41 59 450 461 46 2481 40 2478 44 2479 44 2482 46 2483 41 59 125 41 59 2484 46 2485 40 1501 44 2472 46 2486 60 413 62 40 648 41 41 59 490 2487 61 2484 46 2488 40 411 41 59 2484 46 2485 40 648 44 2487 41 59 125 125 91 2001 93 439 492 2489 40 41 123 489 40 490 2490 61 418 2491 40 648 41 41 123 2490 46 2492 40 648 44 1501 44 40 413 2493 44 413 2494 44 404 2495 41 619 36 648 41 59 2490 46 2496 40 41 59 490 2497 61 2490 46 2498 60 461 62 40 648 41 59 2499 46 2500 40 648 44 2497 41 59 125 125 91 2001 93 439 492 2501 40 41 123 489 40 490 2502 61 418 2503 40 648 41 41 123 2502 46 2504 40 41 59 490 2505 61 2506 46 2507 60 2508 62 40 40 41 619 2502 46 2509 40 424 33 44 40 41 619 1501 41 41 59 2506 46 2510 40 648 44 2505 46 2511 41 59 125 125 91 2001 93 439 492 2512 40 41 123 489 40 490 2513 61 418 2514 40 648 41 41 123 2513 46 2515 40 41 59 2513 46 2516 40 648 44 1501 44 40 413 2517 44 413 2518 44 404 2519 41 619 36 648 41 59 490 2520 61 2513 46 2521 60 461 62 40 648 41 59 2522 46 2523 40 648 44 2520 41 59 125 125 91 2001 93 439 492 2524 40 41 123 489 40 490 2525 61 418 2526 40 648 41 41 123 2525 46 2527 40 41 59 2525 46 2528 40 648 44 2529 619 461 46 2530 40 648 44 2529 46 2531 40 2532 619 2532 634 2533 40 41 46 2534 633 648 41 41 41 59 490 2535 61 2525 46 2536 60 461 62 40 648 41 59 2537 46 2538 40 648 44 2535 41 59 125 125 91 2001 93 439 492 2539 40 41 123 489 40 490 2540 61 418 2541 40 648 41 41 123 2540 46 2542 40 41 59 2540 46 2543 60 413 62 40 648 44 40 41 619 469 418 2544 40 648 41 41 59 490 2545 61 2546 46 2547 60 2548 62 40 40 41 619 2540 46 2549 60 413 62 40 648 41 41 59 2546 46 2550 40 2551 46 2552 40 2553 44 648 41 44 2545 46 2554 41 59 125 125 91 2001 93 439 492 2555 40 41 123 489 40 490 2556 61 418 2557 40 648 41 41 123 2556 46 2558 40 41 59 2556 46 2559 60 413 62 40 648 44 40 41 619 469 418 2560 40 648 44 1504 41 41 59 490 2561 61 2562 46 2563 60 2560 62 40 40 41 619 2556 46 2564 60 413 62 40 648 41 41 59 2562 46 2565 40 2566 46 2567 40 1504 44 648 41 44 2561 46 2568 41 59 125 125 91 2001 93 439 492 2569 40 41 123 489 40 490 2570 61 418 2571 40 648 41 41 123 2570 46 2572 40 41 59 2570 46 2573 40 648 44 40 41 619 1501 41 59 2570 46 2573 40 648 44 349 40 2574 60 413 62 41 41 59 490 2575 61 2576 46 2577 60 2578 62 40 40 41 619 2570 46 2579 60 413 62 40 648 41 41 59 2576 46 2580 40 2581 46 2582 40 2583 44 648 41 44 2575 46 2584 41 59 125 125 91 2001 93 439 492 2585 40 41 123 489 40 490 2586 61 418 2587 40 648 41 41 123 2586 46 2588 40 41 59 2586 46 2589 60 426 63 62 40 648 44 40 41 619 424 41 59 490 2590 61 2586 46 2591 60 426 62 40 648 41 59 2592 46 2593 40 2594 46 2595 44 2590 41 59 125 125 91 2001 93 439 492 2596 40 41 123 489 40 490 2597 61 418 2598 40 648 41 41 123 2597 46 2599 40 41 59 2597 46 2600 60 426 62 40 648 44 40 41 619 2601 46 2602 41 59 490 2603 61 2597 46 2604 60 426 62 40 648 41 59 2605 46 2606 40 2601 46 2602 44 2603 41 59 125 125 91 2001 93 439 492 2607 40 41 123 489 40 490 2608 61 418 2609 40 648 41 41 123 2608 46 2610 40 41 59 2608 46 2611 40 648 44 40 413 63 2612 41 619 2612 614 424 41 59 490 2613 61 2608 46 2614 60 413 62 40 648 41 59 2615 46 2616 40 1501 44 2613 41 59 125 125 91 2001 93 439 492 2617 40 41 123 489 40 490 2618 61 418 2619 40 648 41 41 123 2618 46 2620 40 41 59 2618 46 2621 40 648 44 40 413 2622 41 619 2622 41 59 490 2623 61 2624 46 2625 60 2626 62 40 40 41 619 2618 46 2627 60 413 62 40 648 41 41 59 2624 46 2628 40 2629 46 2630 40 2631 44 2629 46 2632 40 648 44 1500 41 41 44 2623 46 2633 41 59 125 125 91 2001 93 439 492 2634 40 41 123 489 40 490 2635 61 418 2636 40 648 41 41 123 2635 46 2637 40 41 59 2635 46 2638 40 648 44 40 356 2639 41 619 2639 41 59 490 2640 61 2641 46 2642 60 2643 62 40 40 41 619 2635 46 2644 60 356 62 40 648 41 41 59 2641 46 2645 40 2646 46 2647 40 2648 44 2646 46 2649 40 648 44 1500 41 41 44 2640 46 2650 41 59 2641 46 2645 40 2648 44 2640 46 2651 41 59 125 125 91 2001 93 439 492 2652 40 41 123 489 40 490 2653 61 418 2654 40 648 41 41 123 2653 46 2655 40 41 59 2653 46 2656 40 648 44 40 461 63 2657 41 619 2657 614 424 41 59 490 2658 61 2653 46 2659 60 413 62 40 648 41 59 2660 46 2661 40 1501 44 2658 41 59 125 125 91 2001 93 439 492 2662 40 41 123 489 40 490 2663 61 418 2664 40 648 41 41 123 2663 46 2665 40 41 59 2663 46 2666 40 648 44 40 326 91 93 2667 41 619 2667 614 424 41 59 490 2668 61 2663 46 2669 60 413 62 40 648 41 59 2670 46 2671 40 1501 44 2668 41 59 125 125 91 2001 93 439 492 2672 40 41 123 489 40 490 2673 61 418 2674 40 648 41 41 123 2673 46 2675 40 41 59 2673 46 2676 40 648 44 40 326 91 93 2677 41 619 2677 634 2678 614 1500 41 59 490 2679 61 2673 46 2680 60 413 62 40 648 41 59 2681 46 2682 40 1501 44 2679 41 59 125 125 91 2001 93 439 492 2683 40 41 123 489 40 490 2684 61 418 2685 40 648 41 41 123 2684 46 2686 40 41 59 2684 46 2687 40 648 41 59 2684 46 2688 40 648 44 40 356 2689 41 619 2689 41 59 490 2690 61 2691 46 2692 60 2693 62 40 40 41 619 2684 46 2687 40 648 41 41 59 2691 46 2694 40 2695 46 2696 40 2697 44 648 41 44 2690 46 2698 41 59 125 125 91 2001 93 439 492 2699 40 41 123 489 40 490 2700 61 418 2701 40 648 41 41 123 2700 46 2702 40 41 59 2700 46 2703 40 648 41 59 2700 46 2704 40 648 44 40 356 2705 41 619 2705 44 473 41 59 2706 46 2707 40 1501 44 2700 46 2703 40 648 41 41 59 125 125 91 2001 93 439 492 2708 40 41 123 489 40 490 2709 61 418 2710 40 648 41 41 123 2709 46 2711 40 648 44 648 44 40 461 2712 44 461 2713 44 404 2714 41 619 2712 43 2713 43 2714 44 2712 619 2712 43 648 41 59 2709 46 2715 40 41 59 2709 46 2716 40 648 41 59 490 2717 61 2709 46 2718 60 461 62 40 648 41 59 2719 46 2720 40 648 44 2717 41 59 125 125 91 2001 93 439 492 2721 40 41 123 489 40 490 2722 61 418 2723 40 648 41 41 123 2722 46 2724 40 41 59 490 2725 61 2726 46 2727 60 2728 62 40 40 41 619 2722 46 2729 40 424 33 44 40 461 63 2730 41 619 648 41 41 59 2726 46 2731 40 648 44 2725 46 2732 41 59 125 125 91 2001 93 439 492 2733 40 41 123 489 40 490 2734 61 418 2735 40 648 41 41 123 2734 46 2736 40 41 59 2734 46 2737 40 648 41 59 2734 46 2738 40 648 44 648 44 40 461 2739 44 461 2740 44 404 2741 41 619 2739 43 2740 43 2741 44 2739 619 2739 43 648 41 59 490 2742 61 2734 46 2743 60 461 62 40 648 41 59 2744 46 2745 40 648 44 2742 41 59 125 125 91 2001 93 439 492 2746 40 41 123 489 40 490 2747 61 418 2748 40 648 41 41 123 2747 46 2749 40 41 59 2747 46 2750 40 648 41 59 2747 46 2751 40 648 44 40 461 63 2752 44 426 63 91 93 2753 41 619 2752 43 461 46 2754 40 648 44 2753 41 43 648 41 59 490 2755 61 2747 46 2756 60 461 62 40 648 41 59 2757 46 2758 40 648 44 2755 41 59 125 125 91 2001 93 439 492 2759 40 41 123 489 40 490 2760 61 418 2761 40 648 41 41 123 2760 46 2762 40 41 59 2760 46 2763 40 648 41 59 2760 46 2764 40 648 44 40 461 63 2765 41 619 469 418 2766 40 648 41 41 59 490 2767 61 2768 46 2769 60 2770 62 40 40 41 619 2760 46 2771 60 461 62 40 648 41 41 59 2768 46 2772 40 2773 46 2774 40 2775 44 648 41 44 2767 46 2776 41 59 125 125 91 2001 93 439 492 2777 40 41 123 489 40 490 2778 61 418 2779 40 648 41 41 123 2778 46 2780 40 41 59 2778 46 2781 40 648 41 59 2778 46 2782 60 461 44 461 62 40 648 44 648 44 2783 619 648 44 2783 619 469 418 2784 40 648 41 41 59 490 2785 61 2786 46 2787 60 2788 62 40 40 41 619 2778 46 2789 60 461 62 40 648 41 41 59 2786 46 2790 40 2791 46 2792 40 2793 44 648 41 44 2785 46 2794 41 59 125 125 91 2001 93 439 492 2795 40 41 123 489 40 490 2796 61 418 2797 40 648 41 41 123 2796 46 2798 40 41 59 2796 46 2799 40 648 41 59 2796 46 2800 40 648 44 40 461 63 2801 41 619 469 418 2802 40 648 44 1504 41 41 59 490 2803 61 2804 46 2805 60 2802 62 40 40 41 619 2796 46 2806 60 461 62 40 648 41 41 59 2804 46 2807 40 2808 46 2809 40 1504 44 648 41 44 2803 46 2810 41 59 125 125 91 2001 93 439 492 2811 40 41 123 489 40 490 2812 61 418 2813 40 648 41 41 123 2812 46 2814 40 41 59 2812 46 2815 40 648 41 59 2812 46 2816 40 648 44 40 461 63 2817 41 619 648 41 59 2812 46 2816 40 648 44 349 40 2818 60 461 63 44 461 62 41 41 59 490 2819 61 2820 46 2821 60 2822 62 40 40 41 619 2812 46 2823 60 413 62 40 648 41 41 59 2820 46 2824 40 2825 46 2826 40 2827 44 648 41 44 2819 46 2828 41 59 125 125 91 2001 93 439 492 2829 40 41 123 490 2830 61 418 2831 40 41 59 490 2832 61 2833 46 2834 60 2835 62 40 40 41 619 2830 46 2836 40 41 41 59 2833 46 2837 40 2838 46 2839 40 648 41 44 2832 46 2840 41 59 125 91 2001 93 439 492 2841 40 41 123 489 40 490 2842 61 418 2843 40 648 41 41 123 2842 46 2844 40 41 59 489 40 2842 46 2845 40 41 41 123 490 2846 61 2847 46 2848 60 2849 62 40 40 41 619 2842 46 2845 40 41 41 59 2847 46 2850 40 2851 46 2852 44 2846 46 2853 41 59 125 125 125 91 2001 93 439 492 2854 40 41 123 489 40 490 2855 61 418 2856 40 648 41 41 123 2855 46 2857 40 41 59 489 40 490 2858 61 2855 46 2859 40 2860 46 2861 41 41 123 2862 46 2863 40 2858 41 59 2862 46 2864 40 2855 44 2858 46 2865 41 59 2862 46 2864 40 2860 46 2861 44 2858 46 2860 41 59 125 125 125 91 2001 93 439 492 2866 40 41 123 489 40 490 2867 61 418 2868 40 41 41 123 2869 46 2870 60 2871 62 40 40 41 619 2867 46 2872 40 648 41 41 59 125 125 91 2001 93 439 492 2873 40 41 123 489 40 490 2874 61 418 2875 40 648 41 41 123 2874 46 2876 40 41 59 490 2877 61 2874 46 2878 40 41 59 2877 46 2879 61 648 59 489 40 490 2880 61 2877 46 2881 40 41 41 123 2880 46 2882 40 41 59 2883 46 2884 40 648 44 2880 46 2885 40 1500 41 41 59 490 2886 61 2874 46 2878 40 41 59 2886 46 2879 61 648 59 489 40 490 2887 61 2886 46 2881 40 41 41 123 2887 46 2882 40 41 59 2883 46 2884 40 648 44 2887 46 2885 40 1500 41 41 59 2880 46 2882 40 41 59 2883 46 2884 40 648 44 2880 46 2885 40 1500 41 41 59 2887 46 2882 40 41 59 2883 46 2884 40 648 44 2887 46 2885 40 1500 41 41 59 125 125 125 125 91 2001 93 439 492 2888 40 41 123 489 40 490 2889 61 418 2890 40 648 41 41 123 2889 46 2891 40 41 59 490 2892 61 2889 46 2893 60 413 62 40 648 41 59 392 40 2892 631 1500 41 123 450 59 125 490 2894 61 648 59 490 2895 61 2896 46 2897 60 2898 62 40 40 41 619 2889 46 2899 40 2894 41 41 59 490 2900 61 2895 46 2901 59 2889 46 2902 40 41 59 2895 61 2896 46 2897 60 2898 62 40 40 41 619 2889 46 2899 40 2894 41 41 59 490 2903 61 2895 46 2901 59 2889 46 2902 40 2904 58 380 41 59 2895 61 2896 46 2897 60 2898 62 40 40 41 619 2889 46 2899 40 2894 41 41 59 490 2905 61 2895 46 2901 59 2896 46 2906 40 2900 44 2903 41 59 2896 46 2907 40 2900 44 2905 41 59 125 125 91 2001 93 439 492 2908 40 41 123 489 40 490 2909 61 418 2910 40 648 41 41 123 2909 46 2911 40 41 59 490 2912 61 2909 46 2913 60 413 62 40 648 41 59 392 40 2912 631 1500 41 123 450 59 125 490 2914 61 648 59 490 2915 61 2916 46 2917 60 2918 62 40 40 41 619 2909 46 2919 40 2914 41 41 59 490 2920 61 2915 46 2921 59 2909 46 2922 40 41 59 2909 46 2923 40 41 59 2909 46 2911 40 41 59 2915 61 2916 46 2917 60 2918 62 40 40 41 619 2909 46 2919 40 2914 41 41 59 490 2924 61 2915 46 2921 59 2916 46 2925 40 2920 44 2924 41 59 125 125 91 2001 93 439 492 2926 40 41 123 489 40 490 2927 61 418 2928 40 648 41 41 123 2927 46 2929 40 41 59 490 2930 61 2927 46 2931 60 413 62 40 648 41 59 392 40 2930 631 1500 41 123 450 59 125 2927 46 2932 40 41 59 2927 46 2933 40 380 41 59 2927 46 2929 40 41 59 490 2934 61 2935 46 2936 60 2937 62 40 40 41 619 2927 46 2938 40 648 41 41 59 490 2939 61 2934 46 2940 59 2934 61 2935 46 2936 60 2937 62 40 40 41 619 2927 46 2941 40 648 41 41 59 2935 46 2942 40 2939 44 2934 46 2940 41 59 125 125 91 2001 93 439 492 2943 40 41 123 489 40 490 2944 61 418 2945 40 648 41 41 123 2944 46 2946 40 41 59 490 2947 61 2944 46 2948 60 413 62 40 648 41 59 392 40 2947 631 1500 41 123 450 59 125 2944 46 2949 40 41 59 2944 46 2950 40 380 41 59 2944 46 2946 40 41 59 490 2951 61 2952 46 2953 60 2954 62 40 40 41 619 2944 46 2955 40 648 41 41 59 490 2956 61 2951 46 2957 59 2944 46 2949 40 41 59 2944 46 2958 40 648 41 59 2951 61 2952 46 2953 60 2954 62 40 40 41 619 2944 46 2946 40 41 41 59 2952 46 2959 40 2956 44 2951 46 2957 41 59 125 125 91 2001 93 439 492 2960 40 41 123 490 2961 61 418 2962 40 41 59 490 2963 61 2964 46 2965 40 2961 41 59 2966 46 2967 40 2968 46 2969 44 2963 41 59 125 91 2001 93 439 492 2970 40 41 123 489 490 2971 61 418 2972 40 648 41 59 490 2973 61 2971 46 2974 40 41 59 2975 46 2976 40 2977 46 2978 44 2973 46 2979 41 59 2975 46 2980 40 2973 46 2981 46 2982 60 2983 62 40 41 44 2984 619 2975 46 2976 40 2985 46 2986 44 2984 46 2987 41 44 2984 619 2975 46 2976 40 2985 46 2988 44 2984 46 2987 41 44 2984 619 2975 46 2976 40 2985 46 2989 44 2984 46 2987 41 41 59 2975 46 2980 40 2973 46 2990 46 2982 60 2991 62 40 41 46 2992 40 2993 619 2993 46 2994 41 44 2993 619 2975 46 2976 40 418 426 91 93 123 2977 46 2978 44 1500 44 1500 125 44 2993 41 44 2993 619 2975 46 2976 40 418 426 91 93 123 2977 46 2995 44 1500 44 1500 125 44 2993 41 41 59 125 91 2001 93 439 492 2996 40 41 123 489 490 2997 61 418 2998 40 648 41 59 490 2999 61 2997 46 3000 40 41 59 3001 46 3002 40 3003 46 3004 44 2999 46 3005 41 59 125 91 2269 93 91 2270 40 424 41 93 91 2270 40 648 41 93 91 2270 40 648 41 93 91 2270 40 648 41 93 439 492 3006 40 461 3007 41 123 489 490 3008 61 418 3009 40 648 41 59 490 3010 61 3011 46 3012 60 3013 62 40 40 41 619 3008 46 3014 40 3007 41 41 59 3011 46 3015 40 3016 46 3017 40 3007 41 44 3010 46 3018 41 59 125 91 2001 93 439 492 3019 40 41 123 489 490 3020 61 418 3021 40 648 41 59 490 3022 61 3020 46 3023 40 3024 46 3025 46 3026 40 41 41 59 3027 46 3028 40 3024 46 3025 44 3022 46 3029 41 59 125 91 2269 93 91 2270 40 3030 40 3031 46 3032 41 44 1500 41 93 91 2270 40 3030 40 3031 46 3033 41 44 1500 41 93 439 492 3034 40 461 3007 44 404 3035 41 123 489 490 3036 61 418 3037 40 648 41 59 490 3038 61 3039 46 3040 60 3041 62 40 40 41 619 3036 46 3042 40 3007 44 3043 46 3044 60 461 63 62 40 424 44 3035 43 1501 41 46 3045 40 41 41 41 59 3039 46 3046 40 3047 46 3048 40 3007 41 44 3038 46 3049 41 59 125 91 2001 93 439 492 3050 40 41 123 489 490 3051 61 418 3052 40 648 41 59 490 3053 61 3051 46 3054 40 3031 46 3032 44 424 33 41 59 3055 46 3056 40 3031 46 3032 44 3053 46 3057 41 59 125 91 2001 93 439 492 3058 40 41 123 489 490 3059 61 418 3060 40 648 41 59 392 40 418 3061 40 3059 46 3062 41 60 418 3061 40 1502 44 1503 44 1500 41 41 123 621 450 59 125 490 3063 61 3059 46 3064 40 3031 46 3033 41 59 3065 46 3066 40 3031 46 3033 44 3063 46 3067 41 59 3065 46 3068 40 3063 46 3069 41 59 3065 46 3070 40 3063 46 3071 46 3072 60 3073 62 40 41 44 3074 619 3074 46 3075 60 461 62 40 3076 46 3077 41 614 648 41 59 125 125 
79805,C#,"    public abstract class Plugin : IDisposable
    {
        /// <summary>
        /// A list of all loaded plugins.
        /// </summary>
        public static readonly List<Plugin> Plugins = new();

        internal static readonly List<ILogPlugin> Loggers = new();
        internal static readonly Dictionary<string, IStorageProvider> Storages = new();
        internal static readonly List<IPersistencePlugin> PersistencePlugins = new();
        internal static readonly List<IP2PPlugin> P2PPlugins = new();
        internal static readonly List<IMemoryPoolTxObserverPlugin> TxObserverPlugins = new();

        /// <summary>
        /// The directory containing the plugin dll files. Files can be contained in any subdirectory.
        /// </summary>
        public static readonly string PluginsDirectory = Combine(GetDirectoryName(Assembly.GetEntryAssembly().Location), ""Plugins"");

        private static readonly FileSystemWatcher configWatcher;

        /// <summary>
        /// Indicates the location of the plugin configuration file.
        /// </summary>
        public virtual string ConfigFile => Combine(PluginsDirectory, GetType().Assembly.GetName().Name, ""config.json"");

        /// <summary>
        /// Indicates the name of the plugin.
        /// </summary>
        public virtual string Name => GetType().Name;

        /// <summary>
        /// Indicates the description of the plugin.
        /// </summary>
        public virtual string Description => """";

        /// <summary>
        /// Indicates the location of the plugin dll file.
        /// </summary>
        public virtual string Path => Combine(PluginsDirectory, GetType().Assembly.ManifestModule.ScopeName);

        /// <summary>
        /// Indicates the version of the plugin.
        /// </summary>
        public virtual Version Version => GetType().Assembly.GetName().Version;

        static Plugin()
        {
            if (Directory.Exists(PluginsDirectory))
            {
                configWatcher = new FileSystemWatcher(PluginsDirectory)
                {
                    EnableRaisingEvents = true,
                    IncludeSubdirectories = true,
                    NotifyFilter = NotifyFilters.CreationTime | NotifyFilters.LastWrite | NotifyFilters.Size,
                };
                configWatcher.Changed += ConfigWatcher_Changed;
                configWatcher.Created += ConfigWatcher_Changed;
                AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""Plugin""/> class.
        /// </summary>
        protected Plugin()
        {
            Plugins.Add(this);

            if (this is ILogPlugin logger) Loggers.Add(logger);
            if (this is IStorageProvider storage) Storages.Add(Name, storage);
            if (this is IP2PPlugin p2p) P2PPlugins.Add(p2p);
            if (this is IPersistencePlugin persistence) PersistencePlugins.Add(persistence);
            if (this is IMemoryPoolTxObserverPlugin txObserver) TxObserverPlugins.Add(txObserver);
            if (this is IApplicationEngineProvider provider) ApplicationEngine.SetApplicationEngineProvider(provider);

            Configure();
        }

        /// <summary>
        /// Called when the plugin is loaded and need to load the configure file, or the configuration file has been modified and needs to be reconfigured.
        /// </summary>
        protected virtual void Configure()
        {
        }

        private static void ConfigWatcher_Changed(object sender, FileSystemEventArgs e)
        {
            switch (GetExtension(e.Name))
            {
                case "".json"":
                    try
                    {
                        Plugins.FirstOrDefault(p => p.ConfigFile == e.FullPath)?.Configure();
                    }
                    catch (FormatException) { }
                    break;
                case "".dll"":
                    if (e.ChangeType != WatcherChangeTypes.Created) return;
                    if (GetDirectoryName(e.FullPath) != PluginsDirectory) return;
                    try
                    {
                        LoadPlugin(Assembly.Load(File.ReadAllBytes(e.FullPath)));
                    }
                    catch { }
                    break;
            }
        }

        private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            if (args.Name.Contains("".resources""))
                return null;

            AssemblyName an = new(args.Name);

            Assembly assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.FullName == args.Name);
            if (assembly is null)
                assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == an.Name);
            if (assembly != null) return assembly;

            string filename = an.Name + "".dll"";
            string path = filename;
            if (!File.Exists(path)) path = Combine(GetDirectoryName(Assembly.GetEntryAssembly().Location), filename);
            if (!File.Exists(path)) path = Combine(PluginsDirectory, filename);
            if (!File.Exists(path)) path = Combine(PluginsDirectory, args.RequestingAssembly.GetName().Name, filename);
            if (!File.Exists(path)) return null;

            try
            {
                return Assembly.Load(File.ReadAllBytes(path));
            }
            catch (Exception ex)
            {
                Utility.Log(nameof(Plugin), LogLevel.Error, ex);
                return null;
            }
        }

        public virtual void Dispose()
        {
        }

        /// <summary>
        /// Loads the configuration file from the path of <see cref=""ConfigFile""/>.
        /// </summary>
        /// <returns>The content of the configuration file read.</returns>
        protected IConfigurationSection GetConfiguration()
        {
            return new ConfigurationBuilder().AddJsonFile(ConfigFile, optional: true).Build().GetSection(""PluginConfiguration"");
        }

        private static void LoadPlugin(Assembly assembly)
        {
            foreach (Type type in assembly.ExportedTypes)
            {
                if (!type.IsSubclassOf(typeof(Plugin))) continue;
                if (type.IsAbstract) continue;

                ConstructorInfo constructor = type.GetConstructor(Type.EmptyTypes);
                try
                {
                    constructor?.Invoke(null);
                }
                catch (Exception ex)
                {
                    Utility.Log(nameof(Plugin), LogLevel.Error, ex);
                }
            }
        }

        internal static void LoadPlugins()
        {
            if (!Directory.Exists(PluginsDirectory)) return;
            List<Assembly> assemblies = new();
            foreach (string filename in Directory.EnumerateFiles(PluginsDirectory, ""*.dll"", SearchOption.TopDirectoryOnly))
            {
                try
                {
                    assemblies.Add(Assembly.Load(File.ReadAllBytes(filename)));
                }
                catch { }
            }
            foreach (Assembly assembly in assemblies)
            {
                LoadPlugin(assembly);
            }
        }

        /// <summary>
        /// Write a log for the plugin.
        /// </summary>
        /// <param name=""message"">The message of the log.</param>
        /// <param name=""level"">The level of the log.</param>
        protected void Log(object message, LogLevel level = LogLevel.Info)
        {
            Utility.Log($""{nameof(Plugin)}:{Name}"", level, message);
        }

        /// <summary>
        /// Called when a message to the plugins is received. The messnage is sent by calling <see cref=""SendMessage""/>.
        /// </summary>
        /// <param name=""message"">The received message.</param>
        /// <returns><see langword=""true""/> if the <paramref name=""message""/> has been handled; otherwise, <see langword=""false""/>.</returns>
        /// <remarks>If a message has been handled by a plugin, the other plugins won't receive it anymore.</remarks>
        protected virtual bool OnMessage(object message)
        {
            return false;
        }

        /// <summary>
        /// Called when a <see cref=""NeoSystem""/> is loaded.
        /// </summary>
        /// <param name=""system"">The loaded <see cref=""NeoSystem""/>.</param>
        internal protected virtual void OnSystemLoaded(NeoSystem system)
        {
        }

        /// <summary>
        /// Sends a message to all plugins. It can be handled by <see cref=""OnMessage""/>.
        /// </summary>
        /// <param name=""message"">The message to send.</param>
        /// <returns><see langword=""true""/> if the <paramref name=""message""/> is handled by a plugin; otherwise, <see langword=""false""/>.</returns>
        public static bool SendMessage(object message)
        {
            foreach (Plugin plugin in Plugins)
                if (plugin.OnMessage(message))
                    return true;
            return false;
        }
    }",1,439 305 334 2000 58 2001 123 612 439 457 441 2002 60 2000 62 2003 61 418 40 41 59 406 457 441 2002 60 2004 62 2005 61 418 40 41 59 406 457 441 2006 60 461 44 2007 62 2008 61 418 40 41 59 406 457 441 2002 60 2009 62 2010 61 418 40 41 59 406 457 441 2002 60 2011 62 2012 61 418 40 41 59 406 457 441 2002 60 2013 62 2014 61 418 40 41 59 612 439 457 441 461 2015 61 2016 40 2017 40 2018 46 2019 40 41 46 2020 41 44 648 41 59 437 457 441 2021 2022 59 612 439 491 461 2023 619 2016 40 2015 44 2024 40 41 46 2018 46 2025 40 41 46 2026 44 648 41 59 612 439 491 461 2026 619 2024 40 41 46 2026 59 612 439 491 461 2027 619 648 59 612 439 491 461 2028 619 2016 40 2015 44 2024 40 41 46 2018 46 2029 46 2030 41 59 612 439 491 2031 2031 619 2024 40 41 46 2018 46 2025 40 41 46 2031 59 457 2000 40 41 123 392 40 2032 46 2033 40 2015 41 41 123 2022 61 418 2021 40 2015 41 123 2034 61 473 44 2035 61 473 44 2036 61 2037 46 2038 124 2037 46 2039 124 2037 46 2040 44 125 59 2022 46 2041 636 2042 59 2022 46 2043 636 2042 59 2044 46 2045 46 2046 636 2047 59 125 125 612 438 2000 40 41 123 2003 46 2048 40 467 41 59 392 40 467 407 2004 2049 41 2005 46 2048 40 2049 41 59 392 40 467 407 2007 2050 41 2008 46 2048 40 2026 44 2050 41 59 392 40 467 407 2011 2051 41 2012 46 2048 40 2051 41 59 392 40 467 407 2009 2052 41 2010 46 2048 40 2052 41 59 392 40 467 407 2013 2053 41 2014 46 2048 40 2053 41 59 392 40 467 407 2054 2055 41 2056 46 2057 40 2055 41 59 2058 40 41 59 125 612 438 491 492 2059 40 41 123 125 437 457 492 2060 40 426 2061 44 2062 2063 41 123 464 40 2064 40 2063 46 2026 41 41 123 328 648 58 474 123 2003 46 2065 40 2066 619 2066 46 2023 614 2063 46 2067 41 634 2059 40 41 59 125 329 40 2068 41 123 125 325 59 328 648 58 392 40 2063 46 2069 631 2070 46 2071 41 450 59 392 40 2017 40 2063 46 2072 41 631 2015 41 450 59 474 123 2073 40 2018 46 2074 40 2075 46 2076 40 2063 46 2072 41 41 41 59 125 329 123 125 325 59 125 125 437 457 2018 2077 40 426 2061 44 2078 2079 41 123 392 40 2079 46 2026 46 2080 40 648 41 41 450 424 59 2081 2082 61 418 40 2079 46 2026 41 59 2018 2083 61 2084 46 2085 46 2086 40 41 46 2087 40 2088 619 2088 46 2089 614 2079 46 2026 41 59 392 40 2083 407 424 41 2083 61 2084 46 2085 46 2086 40 41 46 2087 40 2088 619 2088 46 2025 40 41 46 2026 614 2082 46 2026 41 59 392 40 2083 631 424 41 450 2083 59 461 2090 61 2082 46 2026 43 648 59 461 2091 61 2090 59 392 40 33 2092 46 2093 40 2091 41 41 2091 61 2016 40 2017 40 2018 46 2019 40 41 46 2020 41 44 2090 41 59 392 40 33 2092 46 2093 40 2091 41 41 2091 61 2016 40 2015 44 2090 41 59 392 40 33 2092 46 2093 40 2091 41 41 2091 61 2016 40 2015 44 2079 46 2094 46 2025 40 41 46 2026 44 2090 41 59 392 40 33 2092 46 2093 40 2091 41 41 450 424 59 474 123 450 2018 46 2095 40 2092 46 2096 40 2091 41 41 59 125 329 40 2097 2098 41 123 2099 46 2100 40 2101 40 2000 41 44 2102 46 2103 44 2098 41 59 450 424 59 125 125 439 491 492 2104 40 41 123 125 612 438 2105 2106 40 41 123 450 418 2107 40 41 46 2108 40 2023 44 2109 58 473 41 46 2110 40 41 46 2111 40 648 41 59 125 437 457 492 2112 40 2018 2113 41 123 386 40 2114 2115 398 2113 46 2116 41 123 392 40 33 2115 46 2117 40 478 40 2000 41 41 41 344 59 392 40 2115 46 2118 41 344 59 2119 2120 61 2115 46 2121 40 2114 46 2122 41 59 474 123 2120 634 2123 40 424 41 59 125 329 40 2124 2125 41 123 2126 46 2127 40 2128 40 2000 41 44 2129 46 2130 44 2125 41 59 125 125 125 406 457 492 2131 40 41 123 392 40 33 2132 46 2133 40 2015 41 41 450 59 2002 60 2018 62 2134 61 418 40 41 59 386 40 461 2135 398 2132 46 2136 40 2015 44 648 44 2137 46 2138 41 41 123 474 123 2134 46 2139 40 2018 46 2140 40 2141 46 2142 40 2135 41 41 41 59 125 329 123 125 125 386 40 2018 2113 398 2134 41 123 2112 40 2113 41 59 125 125 612 438 492 2143 40 426 2144 44 2145 2146 61 2145 46 2147 41 123 2148 46 2143 40 36 648 44 2146 44 2144 41 59 125 612 438 491 323 2149 40 426 2144 41 123 450 380 59 125 612 406 438 491 492 2150 40 2151 2152 41 123 125 612 439 457 323 2153 40 426 2144 41 123 386 40 2000 2154 398 2003 41 392 40 2154 46 2149 40 2144 41 41 450 473 59 450 380 59 125 125 
79738,C#,"    public class NEP6Wallet : Wallet
    {
        private string password;
        private string name;
        private Version version;
        private readonly Dictionary<UInt160, NEP6Account> accounts;
        private readonly JObject extra;

        /// <summary>
        /// The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.
        /// </summary>
        public readonly ScryptParameters Scrypt;

        public override string Name => name;

        /// <summary>
        /// The version of the wallet standard. It is currently fixed at 1.0 and will be used for functional upgrades in the future.
        /// </summary>
        public override Version Version => version;

        /// <summary>
        /// Loads or creates a wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet file.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""name"">The name of the wallet. If the wallet is loaded from an existing file, this parameter is ignored.</param>
        public NEP6Wallet(string path, ProtocolSettings settings, string name = null) : base(path, settings)
        {
            if (File.Exists(path))
            {
                JObject wallet = JObject.Parse(File.ReadAllBytes(path));
                LoadFromJson(wallet, out Scrypt, out accounts, out extra);
            }
            else
            {
                this.name = name;
                this.version = Version.Parse(""1.0"");
                this.Scrypt = ScryptParameters.Default;
                this.accounts = new Dictionary<UInt160, NEP6Account>();
                this.extra = JObject.Null;
            }
        }

        /// <summary>
        /// Loads the wallet with the specified JSON string.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""json"">The JSON object representing the wallet.</param>
        public NEP6Wallet(string path, ProtocolSettings settings, JObject json) : base(path, settings)
        {
            LoadFromJson(json, out Scrypt, out accounts, out extra);
        }

        private void LoadFromJson(JObject wallet, out ScryptParameters scrypt, out Dictionary<UInt160, NEP6Account> accounts, out JObject extra)
        {
            this.version = Version.Parse(wallet[""version""].AsString());
            this.name = wallet[""name""]?.AsString();
            scrypt = ScryptParameters.FromJson(wallet[""scrypt""]);
            accounts = ((JArray)wallet[""accounts""]).Select(p => NEP6Account.FromJson(p, this)).ToDictionary(p => p.ScriptHash);
            extra = wallet[""extra""];
        }

        private void AddAccount(NEP6Account account)
        {
            lock (accounts)
            {
                if (accounts.TryGetValue(account.ScriptHash, out NEP6Account account_old))
                {
                    account.Label = account_old.Label;
                    account.IsDefault = account_old.IsDefault;
                    account.Lock = account_old.Lock;
                    if (account.Contract == null)
                    {
                        account.Contract = account_old.Contract;
                    }
                    else
                    {
                        NEP6Contract contract_old = (NEP6Contract)account_old.Contract;
                        if (contract_old != null)
                        {
                            NEP6Contract contract = (NEP6Contract)account.Contract;
                            contract.ParameterNames = contract_old.ParameterNames;
                            contract.Deployed = contract_old.Deployed;
                        }
                    }
                    account.Extra = account_old.Extra;
                }
                accounts[account.ScriptHash] = account;
            }
        }

        public override bool Contains(UInt160 scriptHash)
        {
            lock (accounts)
            {
                return accounts.ContainsKey(scriptHash);
            }
        }

        public override WalletAccount CreateAccount(byte[] privateKey)
        {
            if (privateKey is null) throw new ArgumentNullException(nameof(privateKey));
            KeyPair key = new(privateKey);
            if (key.PublicKey.IsInfinity) throw new ArgumentException(null, nameof(privateKey));
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account = new(this, contract.ScriptHash, key, password)
            {
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(Contract contract, KeyPair key = null)
        {
            if (contract is not NEP6Contract nep6contract)
            {
                nep6contract = new NEP6Contract
                {
                    Script = contract.Script,
                    ParameterList = contract.ParameterList,
                    ParameterNames = contract.ParameterList.Select((p, i) => $""parameter{i}"").ToArray(),
                    Deployed = false
                };
            }
            NEP6Account account;
            if (key == null)
                account = new NEP6Account(this, nep6contract.ScriptHash);
            else
                account = new NEP6Account(this, nep6contract.ScriptHash, key, password);
            account.Contract = nep6contract;
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(UInt160 scriptHash)
        {
            NEP6Account account = new(this, scriptHash);
            AddAccount(account);
            return account;
        }

        /// <summary>
        /// Decrypts the specified NEP-2 string with the password of the wallet.
        /// </summary>
        /// <param name=""nep2key"">The NEP-2 string to decrypt.</param>
        /// <returns>The decrypted private key.</returns>
        public KeyPair DecryptKey(string nep2key)
        {
            return new KeyPair(GetPrivateKeyFromNEP2(nep2key, password, ProtocolSettings.AddressVersion, Scrypt.N, Scrypt.R, Scrypt.P));
        }

        public override void Delete()
        {
            if (File.Exists(Path)) File.Delete(Path);
        }

        public override bool DeleteAccount(UInt160 scriptHash)
        {
            lock (accounts)
            {
                return accounts.Remove(scriptHash);
            }
        }

        public override WalletAccount GetAccount(UInt160 scriptHash)
        {
            lock (accounts)
            {
                accounts.TryGetValue(scriptHash, out NEP6Account account);
                return account;
            }
        }

        public override IEnumerable<WalletAccount> GetAccounts()
        {
            lock (accounts)
            {
                foreach (NEP6Account account in accounts.Values)
                    yield return account;
            }
        }

        public WalletAccount GetDefaultAccount()
        {
            NEP6Account first = null;
            lock (accounts)
            {
                foreach (NEP6Account account in accounts.Values)
                {
                    if (account.IsDefault) return account;
                    if (first == null) first = account;
                }
            }
            return first;
        }

        public override WalletAccount Import(X509Certificate2 cert)
        {
            KeyPair key;
            using (ECDsa ecdsa = cert.GetECDsaPrivateKey())
            {
                key = new KeyPair(ecdsa.ExportParameters(true).D);
            }
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account = new(this, contract.ScriptHash, key, password)
            {
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount Import(string wif)
        {
            KeyPair key = new(GetPrivateKeyFromWIF(wif));
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account = new(this, contract.ScriptHash, key, password)
            {
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount Import(string nep2, string passphrase, int N = 16384, int r = 8, int p = 8)
        {
            KeyPair key = new(GetPrivateKeyFromNEP2(nep2, passphrase, ProtocolSettings.AddressVersion, N, r, p));
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account;
            if (Scrypt.N == 16384 && Scrypt.R == 8 && Scrypt.P == 8)
                account = new NEP6Account(this, contract.ScriptHash, nep2);
            else
                account = new NEP6Account(this, contract.ScriptHash, key, passphrase);
            account.Contract = contract;
            AddAccount(account);
            return account;
        }

        internal void Lock()
        {
            password = null;
        }

        /// <summary>
        /// Migrates the accounts from <see cref=""UserWallet""/> to a new <see cref=""NEP6Wallet""/>.
        /// </summary>
        /// <param name=""path"">The path of the new wallet file.</param>
        /// <param name=""db3path"">The path of the db3 wallet file.</param>
        /// <param name=""password"">The password of the wallets.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <returns>The created new wallet.</returns>
        public static NEP6Wallet Migrate(string path, string db3path, string password, ProtocolSettings settings)
        {
            UserWallet wallet_old = UserWallet.Open(db3path, password, settings);
            NEP6Wallet wallet_new = new(path, settings, wallet_old.Name);
            using (wallet_new.Unlock(password))
            {
                foreach (WalletAccount account in wallet_old.GetAccounts())
                {
                    wallet_new.CreateAccount(account.Contract, account.GetKey());
                }
            }
            return wallet_new;
        }

        /// <summary>
        /// Saves the wallet to the file.
        /// </summary>
        public void Save()
        {
            JObject wallet = new();
            wallet[""name""] = name;
            wallet[""version""] = version.ToString();
            wallet[""scrypt""] = Scrypt.ToJson();
            wallet[""accounts""] = new JArray(accounts.Values.Select(p => p.ToJson()));
            wallet[""extra""] = extra;
            File.WriteAllText(Path, wallet.ToString());
        }

        /// <summary>
        /// Unlocks the wallet with the specified password.
        /// </summary>
        /// <param name=""password"">The password of the wallet.</param>
        /// <returns>The object that can be disposed to lock the wallet again.</returns>
        public IDisposable Unlock(string password)
        {
            if (!VerifyPassword(password))
                throw new CryptographicException();
            this.password = password;
            return new WalletLocker(this);
        }

        public override bool VerifyPassword(string password)
        {
            lock (accounts)
            {
                NEP6Account account = accounts.Values.FirstOrDefault(p => !p.Decrypted);
                if (account == null)
                {
                    account = accounts.Values.FirstOrDefault(p => p.HasKey);
                }
                if (account == null) return true;
                if (account.Decrypted)
                {
                    return account.VerifyPassword(password);
                }
                else
                {
                    try
                    {
                        account.GetKey(password);
                        return true;
                    }
                    catch (FormatException)
                    {
                        return false;
                    }
                }
            }
        }

        public override bool ChangePassword(string oldPassword, string newPassword)
        {
            bool succeed = true;
            lock (accounts)
            {
                Parallel.ForEach(accounts.Values, (account, state) =>
                {
                    if (!account.ChangePasswordPrepare(oldPassword, newPassword))
                    {
                        state.Stop();
                        succeed = false;
                    }
                });
            }
            if (succeed)
            {
                foreach (NEP6Account account in accounts.Values)
                    account.ChangePasswordCommit();
                if (password != null)
                    password = newPassword;
            }
            else
            {
                foreach (NEP6Account account in accounts.Values)
                    account.ChangePasswordRoolback();
            }
            return succeed;
        }
    }",1,439 334 2000 58 2001 123 437 461 2002 59 437 461 2003 59 437 2004 2005 59 437 441 2006 60 2007 44 2008 62 2009 59 437 441 2010 2011 59 612 439 441 2012 2013 59 439 431 461 2014 619 2003 59 612 439 431 2004 2004 619 2005 59 612 439 2000 40 461 2015 44 2016 2017 44 461 2003 61 424 41 58 320 40 2015 44 2017 41 123 392 40 2018 46 2019 40 2015 41 41 123 2010 2020 61 2010 46 2021 40 2018 46 2022 40 2015 41 41 59 2023 40 2020 44 430 2013 44 430 2009 44 430 2011 41 59 125 360 123 467 46 2003 61 2003 59 467 46 2005 61 2004 46 2024 40 648 41 59 467 46 2013 61 2012 46 2025 59 467 46 2009 61 418 2006 60 2007 44 2008 62 40 41 59 467 46 2011 61 2010 46 2026 59 125 125 612 439 2000 40 461 2015 44 2016 2017 44 2010 2027 41 58 320 40 2015 44 2017 41 123 2028 40 2027 44 430 2013 44 430 2009 44 430 2011 41 59 125 437 492 2029 40 2010 2030 44 430 2012 2031 44 430 2006 60 2007 44 2008 62 2009 44 430 2010 2011 41 123 467 46 2005 61 2004 46 2032 40 2030 91 648 93 46 2033 40 41 41 59 467 46 2003 61 2030 91 648 93 634 2033 40 41 59 2031 61 2012 46 2034 40 2030 91 648 93 41 59 2009 61 40 40 2035 41 2030 91 648 93 41 46 2036 40 2037 619 2008 46 2034 40 2037 44 467 41 41 46 2038 40 2037 619 2037 46 2039 41 59 2011 61 2030 91 648 93 59 125 437 492 2040 40 2008 2041 41 123 412 40 2009 41 123 392 40 2009 46 2042 40 2041 46 2043 44 430 2008 2044 41 41 123 2041 46 2045 61 2044 46 2045 59 2041 46 2046 61 2044 46 2046 59 2041 46 2047 61 2044 46 2047 59 392 40 2041 46 2048 614 424 41 123 2041 46 2048 61 2044 46 2048 59 125 360 123 2049 2050 61 40 2049 41 2044 46 2048 59 392 40 2050 631 424 41 123 2049 2051 61 40 2049 41 2041 46 2048 59 2051 46 2052 61 2050 46 2052 59 2051 46 2053 61 2050 46 2053 59 125 125 2041 46 2054 61 2044 46 2054 59 125 2009 91 2041 46 2043 93 61 2041 59 125 125 439 431 323 2055 40 2007 2056 41 123 412 40 2009 41 123 450 2009 46 2057 40 2056 41 59 125 125 439 431 2058 2059 40 326 91 93 2060 41 123 392 40 2060 407 424 41 469 418 2061 40 2062 40 2060 41 41 59 2063 2064 61 418 40 2060 41 59 392 40 2064 46 2065 46 2066 41 469 418 2067 40 424 44 2062 40 2060 41 41 59 2068 2069 61 418 40 41 123 2070 61 2071 46 2072 40 2064 46 2065 41 44 2073 61 418 91 93 123 2074 46 2075 125 44 2076 61 418 91 93 123 648 125 44 2077 61 380 125 59 2008 2041 61 418 40 467 44 2069 46 2078 44 2064 44 2002 41 123 2079 61 2069 125 59 2040 40 2041 41 59 450 2041 59 125 439 431 2058 2059 40 2080 2081 44 2082 2083 61 424 41 123 392 40 2081 407 422 2084 2085 41 123 2085 61 418 2084 123 2086 61 2081 46 2086 44 2087 61 2081 46 2087 44 2088 61 2081 46 2087 46 2089 40 40 2090 44 2091 41 619 36 648 41 46 2092 40 41 44 2093 61 380 125 59 125 2008 2041 59 392 40 2083 614 424 41 2041 61 418 2008 40 467 44 2085 46 2094 41 59 360 2041 61 418 2008 40 467 44 2085 46 2094 44 2083 44 2002 41 59 2041 46 2080 61 2085 59 2040 40 2041 41 59 450 2041 59 125 439 431 2058 2059 40 2007 2056 41 123 2008 2041 61 418 40 467 44 2056 41 59 2040 40 2041 41 59 450 2041 59 125 612 439 2082 2095 40 461 2096 41 123 450 418 2082 40 2097 40 2096 44 2002 44 2016 46 2098 44 2013 46 2099 44 2013 46 2100 44 2013 46 2101 41 41 59 125 439 431 492 2102 40 41 123 392 40 2103 46 2104 40 2105 41 41 2103 46 2102 40 2105 41 59 125 439 431 323 2106 40 2007 2056 41 123 412 40 2009 41 123 450 2009 46 2107 40 2056 41 59 125 125 439 431 2058 2108 40 2007 2056 41 123 412 40 2009 41 123 2009 46 2109 40 2056 44 430 2008 2041 41 59 450 2041 59 125 125 439 431 2110 60 2058 62 2111 40 41 123 412 40 2009 41 123 386 40 2008 2041 398 2009 46 2112 41 500 450 2041 59 125 125 439 2058 2113 40 41 123 2008 2114 61 424 59 412 40 2009 41 123 386 40 2008 2041 398 2009 46 2115 41 123 392 40 2041 46 2116 41 450 2041 59 392 40 2114 614 424 41 2114 61 2041 59 125 125 450 2114 59 125 439 431 2058 2117 40 2118 2119 41 123 2082 2083 59 489 40 2120 2121 61 2119 46 2122 40 41 41 123 2083 61 418 2082 40 2121 46 2123 40 473 41 46 2124 41 59 125 2125 2081 61 418 40 41 123 2126 61 2080 46 2127 40 2083 46 2128 41 44 2129 61 418 91 93 123 2130 46 2131 125 44 2132 61 418 91 93 123 648 125 44 2133 61 380 125 59 2008 2041 61 418 40 467 44 2081 46 2134 44 2083 44 2002 41 123 2080 61 2081 125 59 2040 40 2041 41 59 450 2041 59 125 439 431 2058 2117 40 461 2135 41 123 2082 2083 61 418 40 2136 40 2135 41 41 59 2137 2081 61 418 40 41 123 2138 61 2080 46 2139 40 2083 46 2140 41 44 2141 61 418 91 93 123 2142 46 2143 125 44 2144 61 418 91 93 123 648 125 44 2145 61 380 125 59 2008 2041 61 418 40 467 44 2081 46 2146 44 2083 44 2002 41 123 2080 61 2081 125 59 2040 40 2041 41 59 450 2041 59 125 439 431 2058 2117 40 461 2147 44 461 2148 44 404 2149 61 1506 44 404 2150 61 1502 44 404 2151 61 1502 41 123 2082 2083 61 418 40 2152 40 2147 44 2148 44 2016 46 2153 44 2149 44 2150 44 2151 41 41 59 2154 2081 61 418 40 41 123 2155 61 2080 46 2156 40 2083 46 2157 41 44 2158 61 418 91 93 123 2159 46 2160 125 44 2161 61 418 91 93 123 648 125 44 2162 61 380 125 59 2008 2041 59 392 40 2013 46 2149 614 1506 605 2013 46 2163 614 1502 605 2013 46 2164 614 1502 41 2041 61 418 2008 40 467 44 2081 46 2165 44 2147 41 59 360 2041 61 418 2008 40 467 44 2081 46 2165 44 2083 44 2148 41 59 2041 46 2080 61 2081 59 2040 40 2041 41 59 450 2041 59 125 406 492 2166 40 41 123 2002 61 424 59 125 612 439 457 2000 2167 40 461 2015 44 461 2168 44 461 2002 44 2016 2017 41 123 2169 2170 61 2169 46 2171 40 2168 44 2002 44 2017 41 59 2000 2172 61 418 40 2015 44 2017 44 2170 46 2014 41 59 489 40 2172 46 2173 40 2002 41 41 123 386 40 2058 2041 398 2170 46 2111 40 41 41 123 2172 46 2059 40 2041 46 2080 44 2041 46 2174 40 41 41 59 125 125 450 2172 59 125 612 439 492 2175 40 41 123 2010 2030 61 418 40 41 59 2030 91 648 93 61 2003 59 2030 91 648 93 61 2005 46 2176 40 41 59 2030 91 648 93 61 2013 46 2177 40 41 59 2030 91 648 93 61 418 2178 40 2009 46 2179 46 2180 40 2151 619 2151 46 2177 40 41 41 41 59 2030 91 648 93 61 2011 59 2181 46 2182 40 2183 44 2030 46 2176 40 41 41 59 125 612 439 2184 2185 40 461 2002 41 123 392 40 33 2186 40 2002 41 41 469 418 2187 40 41 59 467 46 2002 61 2002 59 450 418 2188 40 467 41 59 125 439 431 323 2189 40 461 2002 41 123 412 40 2009 41 123 2008 2041 61 2009 46 2190 46 2191 40 2151 619 33 2151 46 2192 41 59 392 40 2041 614 424 41 123 2041 61 2009 46 2190 46 2191 40 2151 619 2151 46 2193 41 59 125 392 40 2041 614 424 41 450 473 59 392 40 2041 46 2192 41 123 450 2041 46 2189 40 2002 41 59 125 360 123 474 123 2041 46 2194 40 2002 41 59 450 473 59 125 329 40 2195 41 123 450 380 59 125 125 125 125 439 431 323 2196 40 461 2197 44 461 2198 41 123 323 2199 61 473 59 412 40 2009 41 123 2200 46 2201 40 2009 46 2202 44 40 2041 44 2203 41 619 123 392 40 33 2041 46 2204 40 2197 44 2198 41 41 123 2203 46 2205 40 41 59 2199 61 380 59 125 125 41 59 125 392 40 2199 41 123 386 40 2008 2041 398 2009 46 2206 41 2041 46 2207 40 41 59 392 40 2002 631 424 41 2002 61 2198 59 125 360 123 386 40 2008 2041 398 2009 46 2208 41 2041 46 2209 40 41 59 125 450 2199 59 125 125 
69571,C#,"public class CSharpMigrationsGeneratorTest
{
    private static readonly string _nl = Environment.NewLine;
    private static readonly string _toTable = _nl + @""entityTypeBuilder.ToTable(""""WithAnnotations"""")"";

    [ConditionalFact]
    public void Test_new_annotations_handled_for_entity_types()
    {
        // Only add the annotation here if it will never be present on IEntityType
        var notForEntityType = new HashSet<string>
        {
            CoreAnnotationNames.MaxLength,
            CoreAnnotationNames.Precision,
            CoreAnnotationNames.Scale,
            CoreAnnotationNames.Unicode,
            CoreAnnotationNames.ProductVersion,
            CoreAnnotationNames.ValueGeneratorFactory,
            CoreAnnotationNames.ValueGeneratorFactoryType,
            CoreAnnotationNames.ValueConverter,
            CoreAnnotationNames.ValueConverterType,
            CoreAnnotationNames.ValueComparer,
            CoreAnnotationNames.ValueComparerType,
            CoreAnnotationNames.BeforeSaveBehavior,
            CoreAnnotationNames.AfterSaveBehavior,
            CoreAnnotationNames.ProviderClrType,
            CoreAnnotationNames.EagerLoaded,
            CoreAnnotationNames.DuplicateServiceProperties,
            RelationalAnnotationNames.ColumnName,
            RelationalAnnotationNames.ColumnOrder,
            RelationalAnnotationNames.ColumnType,
            RelationalAnnotationNames.TableColumnMappings,
            RelationalAnnotationNames.ViewColumnMappings,
            RelationalAnnotationNames.SqlQueryColumnMappings,
            RelationalAnnotationNames.FunctionColumnMappings,
            RelationalAnnotationNames.DefaultColumnMappings,
            RelationalAnnotationNames.TableMappings,
            RelationalAnnotationNames.ViewMappings,
            RelationalAnnotationNames.FunctionMappings,
            RelationalAnnotationNames.SqlQueryMappings,
            RelationalAnnotationNames.DefaultMappings,
            RelationalAnnotationNames.ForeignKeyMappings,
            RelationalAnnotationNames.TableIndexMappings,
            RelationalAnnotationNames.UniqueConstraintMappings,
            RelationalAnnotationNames.RelationalOverrides,
            RelationalAnnotationNames.DefaultValueSql,
            RelationalAnnotationNames.ComputedColumnSql,
            RelationalAnnotationNames.DefaultValue,
            RelationalAnnotationNames.Name,
#pragma warning disable CS0618 // Type or member is obsolete
            RelationalAnnotationNames.SequencePrefix,
#pragma warning restore CS0618 // Type or member is obsolete
            RelationalAnnotationNames.Sequences,
            RelationalAnnotationNames.CheckConstraints,
            RelationalAnnotationNames.DefaultSchema,
            RelationalAnnotationNames.Filter,
            RelationalAnnotationNames.DbFunctions,
            RelationalAnnotationNames.MaxIdentifierLength,
            RelationalAnnotationNames.IsFixedLength,
            RelationalAnnotationNames.Collation,
            RelationalAnnotationNames.IsStored,
            RelationalAnnotationNames.RelationalModel,
            RelationalAnnotationNames.ModelDependencies
        };

        // Add a line here if the code generator is supposed to handle this annotation
        // Note that other tests should be added to check code is generated correctly
        var forEntityType = new Dictionary<string, (object, string)>
        {
            {
                RelationalAnnotationNames.TableName,
                (""MyTable"", _nl + ""entityTypeBuilder."" + nameof(RelationalEntityTypeBuilderExtensions.ToTable) + @""(""""MyTable"""")"")
            },
            {
                RelationalAnnotationNames.Schema, (""MySchema"",
                    _nl
                    + ""entityTypeBuilder.""
                    + nameof(RelationalEntityTypeBuilderExtensions.ToTable)
                    + @""(""""WithAnnotations"""", """"MySchema"""")"")
            },
            {
                CoreAnnotationNames.DiscriminatorProperty, (""Id"",
                    _toTable
                    + "";""
                    + _nl
                    + _nl
                    + ""entityTypeBuilder.HasDiscriminator""
                    + @""<int>(""""Id"""")"")
            },
            {
                CoreAnnotationNames.DiscriminatorValue, (""MyDiscriminatorValue"",
                    _toTable
                    + "";""
                    + _nl
                    + _nl
                    + ""entityTypeBuilder.HasDiscriminator""
                    + ""().""
                    + nameof(DiscriminatorBuilder.HasValue)
                    + @""(""""MyDiscriminatorValue"""")"")
            },
            {
                RelationalAnnotationNames.Comment, (""My Comment"",
                    _toTable
                    + "";""
                    + _nl
                    + _nl
                    + @""entityTypeBuilder.HasComment(""""My Comment"""")"")
            },
            {
#pragma warning disable CS0612 // Type or member is obsolete
                CoreAnnotationNames.DefiningQuery,
#pragma warning restore CS0612 // Type or member is obsolete
                (Expression.Lambda(Expression.Constant(null)), """")
            },
            {
                RelationalAnnotationNames.ViewName,
                (""MyView"", _nl + ""entityTypeBuilder."" + nameof(RelationalEntityTypeBuilderExtensions.ToView) + @""(""""MyView"""")"")
            },
            {
                RelationalAnnotationNames.FunctionName,
                (null, _nl + ""entityTypeBuilder."" + nameof(RelationalEntityTypeBuilderExtensions.ToFunction) + @""(null)"")
            },
            {
                RelationalAnnotationNames.SqlQuery,
                (null, _nl + ""entityTypeBuilder."" + nameof(RelationalEntityTypeBuilderExtensions.ToSqlQuery) + @""(null)"")
            }
        };

        MissingAnnotationCheck(
            b => b.Entity<WithAnnotations>().Metadata,
            notForEntityType, forEntityType,
            a => _toTable,
            (g, m, b) => g.TestGenerateEntityTypeAnnotations(""entityTypeBuilder"", (IEntityType)m, b));
    }

    [ConditionalFact]
    public void Test_new_annotations_handled_for_properties()
    {
        // Only add the annotation here if it will never be present on IProperty
        var notForProperty = new HashSet<string>
        {
            CoreAnnotationNames.ProductVersion,
            CoreAnnotationNames.NavigationAccessMode,
            CoreAnnotationNames.EagerLoaded,
            CoreAnnotationNames.QueryFilter,
#pragma warning disable CS0612 // Type or member is obsolete
            CoreAnnotationNames.DefiningQuery,
#pragma warning restore CS0612 // Type or member is obsolete
            CoreAnnotationNames.DiscriminatorProperty,
            CoreAnnotationNames.DiscriminatorValue,
            CoreAnnotationNames.InverseNavigations,
            CoreAnnotationNames.NavigationCandidates,
            CoreAnnotationNames.AmbiguousNavigations,
            CoreAnnotationNames.DuplicateServiceProperties,
            RelationalAnnotationNames.TableName,
            RelationalAnnotationNames.IsTableExcludedFromMigrations,
            RelationalAnnotationNames.ViewName,
            RelationalAnnotationNames.Schema,
            RelationalAnnotationNames.ViewSchema,
            RelationalAnnotationNames.ViewDefinitionSql,
            RelationalAnnotationNames.FunctionName,
            RelationalAnnotationNames.SqlQuery,
            RelationalAnnotationNames.DefaultSchema,
            RelationalAnnotationNames.DefaultMappings,
            RelationalAnnotationNames.TableColumnMappings,
            RelationalAnnotationNames.ViewColumnMappings,
            RelationalAnnotationNames.SqlQueryColumnMappings,
            RelationalAnnotationNames.FunctionColumnMappings,
            RelationalAnnotationNames.DefaultColumnMappings,
            RelationalAnnotationNames.TableMappings,
            RelationalAnnotationNames.ViewMappings,
            RelationalAnnotationNames.FunctionMappings,
            RelationalAnnotationNames.SqlQueryMappings,
            RelationalAnnotationNames.ForeignKeyMappings,
            RelationalAnnotationNames.TableIndexMappings,
            RelationalAnnotationNames.UniqueConstraintMappings,
            RelationalAnnotationNames.Name,
            RelationalAnnotationNames.Sequences,
#pragma warning disable CS0618 // Type or member is obsolete
            RelationalAnnotationNames.SequencePrefix,
#pragma warning restore CS0618 // Type or member is obsolete
            RelationalAnnotationNames.CheckConstraints,
            RelationalAnnotationNames.Filter,
            RelationalAnnotationNames.DbFunctions,
            RelationalAnnotationNames.MaxIdentifierLength,
            RelationalAnnotationNames.RelationalModel,
            RelationalAnnotationNames.ModelDependencies
        };

        var columnMapping = $@""{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasColumnType)}(""""default_int_mapping"""")"";

        // Add a line here if the code generator is supposed to handle this annotation
        // Note that other tests should be added to check code is generated correctly
        var forProperty = new Dictionary<string, (object, string)>
        {
            { CoreAnnotationNames.MaxLength, (256, $@""{_nl}.{nameof(PropertyBuilder.HasMaxLength)}(256){columnMapping}"") },
            { CoreAnnotationNames.Precision, (4, $@""{_nl}.{nameof(PropertyBuilder.HasPrecision)}(4){columnMapping}"") },
            { CoreAnnotationNames.Scale, (null, $@""{columnMapping}"") },
            { CoreAnnotationNames.Unicode, (false, $@""{_nl}.{nameof(PropertyBuilder.IsUnicode)}(false){columnMapping}"") },
            {
                CoreAnnotationNames.ValueConverter, (new ValueConverter<int, long>(v => v, v => (int)v),
                    $@""{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasColumnType)}(""""default_long_mapping"""")"")
            },
            {
                CoreAnnotationNames.ProviderClrType,
                (typeof(long), $@""{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasColumnType)}(""""default_long_mapping"""")"")
            },
            {
                RelationalAnnotationNames.ColumnName,
                (""MyColumn"", $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasColumnName)}(""""MyColumn"""")"")
            },
            {
                RelationalAnnotationNames.ColumnOrder,
                (1, $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasColumnOrder)}(1)"")
            },
            {
                RelationalAnnotationNames.ColumnType,
                (""int"", $@""{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasColumnType)}(""""int"""")"")
            },
            {
                RelationalAnnotationNames.DefaultValueSql,
                (""some SQL"", $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasDefaultValueSql)}(""""some SQL"""")"")
            },
            {
                RelationalAnnotationNames.ComputedColumnSql,
                (""some SQL"", $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasComputedColumnSql)}(""""some SQL"""")"")
            },
            {
                RelationalAnnotationNames.DefaultValue,
                (""1"", $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasDefaultValue)}(""""1"""")"")
            },
            {
                RelationalAnnotationNames.IsFixedLength,
                (true, $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.IsFixedLength)}()"")
            },
            {
                RelationalAnnotationNames.Comment,
                (""My Comment"", $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.HasComment)}(""""My Comment"""")"")
            },
            {
                RelationalAnnotationNames.Collation, (""Some Collation"",
                    $@""{columnMapping}{_nl}.{nameof(RelationalPropertyBuilderExtensions.UseCollation)}(""""Some Collation"""")"")
            },
            {
                RelationalAnnotationNames.IsStored,
                (null, $@""{columnMapping}{_nl}.HasAnnotation(""""{RelationalAnnotationNames.IsStored}"""", null)"")
            }
        };

        MissingAnnotationCheck(
            b => b.Entity<WithAnnotations>().Property(e => e.Id).Metadata,
            notForProperty, forProperty,
            a => $""{columnMapping}"",
            (g, m, b) => g.TestGeneratePropertyAnnotations(""propertyBuilder"", (IProperty)m, b));
    }

    private static void MissingAnnotationCheck(
        Func<ModelBuilder, IMutableAnnotatable> createMetadataItem,
        HashSet<string> invalidAnnotations,
        Dictionary<string, (object Value, string Expected)> validAnnotations,
        Func<string, string> generationDefault,
        Action<TestCSharpSnapshotGenerator, IMutableAnnotatable, IndentedStringBuilder> test)
    {
        var sqlServerTypeMappingSource = new SqlServerTypeMappingSource(
            TestServiceFactory.Instance.Create<TypeMappingSourceDependencies>(),
            TestServiceFactory.Instance.Create<RelationalTypeMappingSourceDependencies>());

        var sqlServerAnnotationCodeGenerator = new SqlServerAnnotationCodeGenerator(
            new AnnotationCodeGeneratorDependencies(sqlServerTypeMappingSource));

        var codeHelper = new CSharpHelper(sqlServerTypeMappingSource);

        var generator = new TestCSharpSnapshotGenerator(
            new CSharpSnapshotGeneratorDependencies(codeHelper, sqlServerTypeMappingSource, sqlServerAnnotationCodeGenerator));

        var coreAnnotations = typeof(CoreAnnotationNames).GetFields().Where(f => f.FieldType == typeof(string)).ToList();

        foreach (var field in coreAnnotations)
        {
            var annotationName = (string)field.GetValue(null);

            Assert.True(
                CoreAnnotationNames.AllNames.Contains(annotationName),
                nameof(CoreAnnotationNames) + ""."" + nameof(CoreAnnotationNames.AllNames) + "" doesn't contain "" + annotationName);
        }

        foreach (var field in coreAnnotations.Concat(
                     typeof(RelationalAnnotationNames).GetFields().Where(f => f.Name != ""Prefix"")))
        {
            var annotationName = (string)field.GetValue(null);

            if (!invalidAnnotations.Contains(annotationName))
            {
                var modelBuilder = RelationalTestHelpers.Instance.CreateConventionBuilder();
                var metadataItem = createMetadataItem(modelBuilder);
                metadataItem.SetAnnotation(
                    annotationName, validAnnotations.ContainsKey(annotationName)
                        ? validAnnotations[annotationName].Value
                        : null);

                modelBuilder.FinalizeModel(designTime: true);

                var sb = new IndentedStringBuilder();

                try
                {
                    // Generator should not throw--either update above, or add to ignored list in generator
                    test(generator, metadataItem, sb);
                }
                catch (Exception e)
                {
                    Assert.False(true, $""Annotation '{annotationName}' was not handled by the code generator: {e.Message}"");
                }

                try
                {
                    var expected = validAnnotations.ContainsKey(annotationName)
                        ? validAnnotations[annotationName].Expected
                        : generationDefault(annotationName);

                    Assert.Equal(
                        string.IsNullOrEmpty(expected) ? expected : $""{expected};{_nl}"",
                        sb.ToString());
                }
                catch (Exception e)
                {
                    throw new Exception(annotationName, e);
                }
            }
        }
    }

    // ReSharper disable once ClassWithVirtualMembersNeverInherited.Local
    private class TestCSharpSnapshotGenerator : CSharpSnapshotGenerator
    {
        public TestCSharpSnapshotGenerator(CSharpSnapshotGeneratorDependencies dependencies)
            : base(dependencies)
        {
        }

        public virtual void TestGenerateEntityTypeAnnotations(
            string builderName,
            IEntityType entityType,
            IndentedStringBuilder stringBuilder)
            => GenerateEntityTypeAnnotations(builderName, entityType, stringBuilder);

        public virtual void TestGeneratePropertyAnnotations(
            string builderName,
            IProperty property,
            IndentedStringBuilder stringBuilder)
            => GeneratePropertyAnnotations(builderName, property, stringBuilder);
    }

    // ReSharper disable once ClassNeverInstantiated.Local
    private class WithAnnotations
    {
        public int Id { get; set; }
    }

    private class Derived : WithAnnotations
    {
    }

    [ConditionalFact]
    public void Snapshot_with_enum_discriminator_uses_converted_values()
    {
        var sqlServerTypeMappingSource = new SqlServerTypeMappingSource(
            TestServiceFactory.Instance.Create<TypeMappingSourceDependencies>(),
            TestServiceFactory.Instance.Create<RelationalTypeMappingSourceDependencies>());

        var codeHelper = new CSharpHelper(
            sqlServerTypeMappingSource);

        var sqlServerAnnotationCodeGenerator = new SqlServerAnnotationCodeGenerator(
            new AnnotationCodeGeneratorDependencies(sqlServerTypeMappingSource));

        var generator = new CSharpMigrationsGenerator(
            new MigrationsCodeGeneratorDependencies(
                sqlServerTypeMappingSource,
                sqlServerAnnotationCodeGenerator),
            new CSharpMigrationsGeneratorDependencies(
                codeHelper,
                new CSharpMigrationOperationGenerator(
                    new CSharpMigrationOperationGeneratorDependencies(
                        codeHelper)),
                new CSharpSnapshotGenerator(
                    new CSharpSnapshotGeneratorDependencies(
                        codeHelper, sqlServerTypeMappingSource, sqlServerAnnotationCodeGenerator))));

        var modelBuilder = RelationalTestHelpers.Instance.CreateConventionBuilder();
        modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
        modelBuilder.Entity<WithAnnotations>(
            eb =>
            {
                eb.HasDiscriminator<RawEnum>(""EnumDiscriminator"")
                    .HasValue(RawEnum.A)
                    .HasValue<Derived>(RawEnum.B);
                eb.Property<RawEnum>(""EnumDiscriminator"").HasConversion<int>();
            });

        var finalizedModel = modelBuilder.FinalizeModel(designTime: true);

        var modelSnapshotCode = generator.GenerateSnapshot(
            ""MyNamespace"",
            typeof(MyContext),
            ""MySnapshot"",
            finalizedModel);

        var snapshotModel = CompileModelSnapshot(modelSnapshotCode, ""MyNamespace.MySnapshot"").Model;

        Assert.Equal((int)RawEnum.A, snapshotModel.FindEntityType(typeof(WithAnnotations)).GetDiscriminatorValue());
        Assert.Equal((int)RawEnum.B, snapshotModel.FindEntityType(typeof(Derived)).GetDiscriminatorValue());
    }

    private static void AssertConverter(ValueConverter valueConverter, string expected)
    {
        var modelBuilder = RelationalTestHelpers.Instance.CreateConventionBuilder();
        var property = modelBuilder.Entity<WithAnnotations>().Property(e => e.Id).Metadata;
        property.SetMaxLength(1000);
        property.SetValueConverter(valueConverter);

        modelBuilder.FinalizeModel();

        var sqlServerTypeMappingSource = new SqlServerTypeMappingSource(
            TestServiceFactory.Instance.Create<TypeMappingSourceDependencies>(),
            TestServiceFactory.Instance.Create<RelationalTypeMappingSourceDependencies>());

        var codeHelper = new CSharpHelper(sqlServerTypeMappingSource);

        var sqlServerAnnotationCodeGenerator = new SqlServerAnnotationCodeGenerator(
            new AnnotationCodeGeneratorDependencies(sqlServerTypeMappingSource));

        var generator = new TestCSharpSnapshotGenerator(
            new CSharpSnapshotGeneratorDependencies(
                codeHelper, sqlServerTypeMappingSource, sqlServerAnnotationCodeGenerator));

        var sb = new IndentedStringBuilder();

        generator.TestGeneratePropertyAnnotations(""propertyBuilder"", (IProperty)property, sb);

        Assert.Equal(expected + _nl + "".HasMaxLength(1000)"", sb.ToString());
    }

    [ConditionalFact]
    public void Migrations_compile()
    {
        var generator = CreateMigrationsCodeGenerator();

        var migrationCode = generator.GenerateMigration(
            ""MyNamespace"",
            ""MyMigration"",
            new MigrationOperation[]
            {
                new SqlOperation { Sql = ""-- TEST"", [""Some:EnumValue""] = RegexOptions.Multiline },
                new AlterColumnOperation
                {
                    Name = ""C2"",
                    Table = ""T1"",
                    ClrType = typeof(Database),
                    OldColumn = new AddColumnOperation { ClrType = typeof(Property) }
                },
                new AddColumnOperation
                {
                    Name = ""C3"",
                    Table = ""T1"",
                    ClrType = typeof(PropertyEntry)
                },
                new InsertDataOperation
                {
                    Table = ""T1"",
                    Columns = new[] { ""Id"", ""C2"", ""C3"" },
                    Values = new object[,] { { 1, null, -1 } }
                }
            },
            Array.Empty<MigrationOperation>());
        Assert.Equal(
            @""using System.Text.RegularExpressions;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;

#nullable disable

namespace MyNamespace
{
    public partial class MyMigration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(""""-- TEST"""")
                .Annotation(""""Some:EnumValue"""", RegexOptions.Multiline);

            migrationBuilder.AlterColumn<Database>(
                name: """"C2"""",
                table: """"T1"""",
                nullable: false,
                oldClrType: typeof(Property));

            migrationBuilder.AddColumn<PropertyEntry>(
                name: """"C3"""",
                table: """"T1"""",
                nullable: false);

            migrationBuilder.InsertData(
                table: """"T1"""",
                columns: new[] { """"Id"""", """"C2"""", """"C3"""" },
                values: new object[] { 1, null, -1 });
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
"",
            migrationCode,
            ignoreLineEndingDifferences: true);

        var modelBuilder = SqlServerTestHelpers.Instance.CreateConventionBuilder(configure: c => c.RemoveAllConventions());
        modelBuilder.HasAnnotation(""Some:EnumValue"", RegexOptions.Multiline);
        modelBuilder.HasAnnotation(RelationalAnnotationNames.DbFunctions, new SortedDictionary<string, IDbFunction>());
        modelBuilder.Entity(
            ""T1"", eb =>
            {
                eb.Property<int>(""Id"");
                eb.Property<string>(""C2"").IsRequired();
                eb.Property<int>(""C3"");
                eb.HasKey(""Id"");
            });
        modelBuilder.HasAnnotation(CoreAnnotationNames.ProductVersion, null);

        var finalizedModel = modelBuilder.FinalizeModel(designTime: true);

        var migrationMetadataCode = generator.GenerateMetadata(
            ""MyNamespace"",
            typeof(MyContext),
            ""MyMigration"",
            ""20150511161616_MyMigration"",
            finalizedModel);
        Assert.Equal(
            @""// <auto-generated />
using System.Text.RegularExpressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Migrations.Design;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MyNamespace
{
    [DbContext(typeof(CSharpMigrationsGeneratorTest.MyContext))]
    [Migration(""""20150511161616_MyMigration"""")]
    partial class MyMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation(""""Some:EnumValue"""", RegexOptions.Multiline);

            modelBuilder.Entity(""""T1"""", b =>
                {
                    b.Property<int>(""""Id"""")
                        .HasColumnType(""""int"""");

                    b.Property<string>(""""C2"""")
                        .IsRequired()
                        .HasColumnType(""""nvarchar(max)"""");

                    b.Property<int>(""""C3"""")
                        .HasColumnType(""""int"""");

                    b.HasKey(""""Id"""");

                    b.ToTable(""""T1"""");
                });
#pragma warning restore 612, 618
        }
    }
}
"",
            migrationMetadataCode,
            ignoreLineEndingDifferences: true);

        var build = new BuildSource
        {
            References =
            {
                BuildReference.ByName(""Microsoft.EntityFrameworkCore.Design.Tests""),
                BuildReference.ByName(""Microsoft.EntityFrameworkCore""),
                BuildReference.ByName(""Microsoft.EntityFrameworkCore.Relational"")
            },
            Sources = { { ""Migration.cs"", migrationCode }, { ""MigrationSnapshot.cs"", migrationMetadataCode } }
        };

        var assembly = build.BuildInMemory();

        var migrationType = assembly.GetType(""MyNamespace.MyMigration"", throwOnError: true, ignoreCase: false);

        var contextTypeAttribute = migrationType.GetCustomAttribute<DbContextAttribute>();
        Assert.NotNull(contextTypeAttribute);
        Assert.Equal(typeof(MyContext), contextTypeAttribute.ContextType);

        var migration = (Migration)Activator.CreateInstance(migrationType);

        Assert.Equal(""20150511161616_MyMigration"", migration.GetId());

        Assert.Equal(4, migration.UpOperations.Count);
        Assert.Empty(migration.DownOperations);
        Assert.Single(migration.TargetModel.GetEntityTypes());
    }

    private enum RawEnum
    {
        A,
        B
    }

    private static int MyDbFunction()
        => throw new NotImplementedException();

    private class EntityWithConstructorBinding
    {
        public EntityWithConstructorBinding(int id)
        {
            Id = id;
        }

        public int Id { get; }
    }

    [ConditionalFact]
    public void Snapshots_compile()
    {
        var generator = CreateMigrationsCodeGenerator();

        var modelBuilder = RelationalTestHelpers.Instance.CreateConventionBuilder();
        modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
        modelBuilder.Entity<EntityWithConstructorBinding>(
            x =>
            {
                x.Property(e => e.Id);

                x.Property<Guid>(""PropertyWithValueGenerator"").HasValueGenerator<GuidValueGenerator>();
            });
        modelBuilder.HasDbFunction(() => MyDbFunction());

        var model = modelBuilder.Model;
        model[""Some:EnumValue""] = RegexOptions.Multiline;

        var entityType = model.AddEntityType(""Cheese"");
        var property1 = entityType.AddProperty(""Pickle"", typeof(StringBuilder));
        property1.SetValueConverter(
            new ValueConverter<StringBuilder, string>(
                v => v.ToString(), v => new StringBuilder(v), new ConverterMappingHints(size: 10)));

        var property2 = entityType.AddProperty(""Ham"", typeof(RawEnum));
        property2.SetValueConverter(
            new ValueConverter<RawEnum, string>(
                v => v.ToString(), v => (RawEnum)Enum.Parse(typeof(RawEnum), v), new ConverterMappingHints(size: 10)));

        entityType.SetPrimaryKey(property2);

        var finalizedModel = modelBuilder.FinalizeModel(designTime: true);

        var modelSnapshotCode = generator.GenerateSnapshot(
            ""MyNamespace"",
            typeof(MyContext),
            ""MySnapshot"",
            finalizedModel);
        Assert.Equal(
            @""// <auto-generated />
using System;
using System.Text.RegularExpressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations.Design;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MyNamespace
{
    [DbContext(typeof(CSharpMigrationsGeneratorTest.MyContext))]
    partial class MySnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation(""""Some:EnumValue"""", RegexOptions.Multiline);

            modelBuilder.Entity(""""Cheese"""", b =>
                {
                    b.Property<string>(""""Ham"""")
                        .HasColumnType(""""just_string(10)"""");

                    b.Property<string>(""""Pickle"""")
                        .HasColumnType(""""just_string(10)"""");

                    b.HasKey(""""Ham"""");

                    b.ToTable(""""Cheese"""");
                });

            modelBuilder.Entity(""""Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGeneratorTest+EntityWithConstructorBinding"""", b =>
                {
                    b.Property<int>(""""Id"""")
                        .ValueGeneratedOnAdd()
                        .HasColumnType(""""default_int_mapping"""");

                    b.Property<Guid>(""""PropertyWithValueGenerator"""")
                        .HasColumnType(""""default_guid_mapping"""");

                    b.HasKey(""""Id"""");

                    b.ToTable(""""EntityWithConstructorBinding"""");
                });
#pragma warning restore 612, 618
        }
    }
}
"", modelSnapshotCode, ignoreLineEndingDifferences: true);

        var snapshot = CompileModelSnapshot(modelSnapshotCode, ""MyNamespace.MySnapshot"");
        Assert.Equal(2, snapshot.Model.GetEntityTypes().Count());
    }

    [ConditionalFact]
    public void Snapshot_with_default_values_are_round_tripped()
    {
        var generator = CreateMigrationsCodeGenerator();

        var modelBuilder = RelationalTestHelpers.Instance.CreateConventionBuilder();
        modelBuilder.Entity<EntityWithEveryPrimitive>(
            eb =>
            {
                eb.Property(e => e.Boolean).HasDefaultValue(false);
                eb.Property(e => e.Byte).HasDefaultValue(byte.MinValue);
                eb.Property(e => e.ByteArray).HasDefaultValue(new byte[] { 0 });
                eb.Property(e => e.Char).HasDefaultValue('0');
                eb.Property(e => e.DateTime).HasDefaultValue(DateTime.MinValue);
                eb.Property(e => e.DateTimeOffset).HasDefaultValue(DateTimeOffset.MinValue);
                eb.Property(e => e.Decimal).HasDefaultValue(decimal.MinValue);
                eb.Property(e => e.Double).HasDefaultValue(double.MinValue); //double.NegativeInfinity
                eb.Property(e => e.Enum).HasDefaultValue(Enum1.Default);
                eb.Property(e => e.NullableEnum).HasDefaultValue(Enum1.Default).HasConversion<string>();
                eb.Property(e => e.Guid).HasDefaultValue(Guid.NewGuid());
                eb.Property(e => e.Int16).HasDefaultValue(short.MaxValue);
                eb.Property(e => e.Int32).HasDefaultValue(int.MaxValue);
                eb.Property(e => e.Int64).HasDefaultValue(long.MaxValue);
                eb.Property(e => e.Single).HasDefaultValue(float.Epsilon);
                eb.Property(e => e.SByte).HasDefaultValue(sbyte.MinValue);
                eb.Property(e => e.String).HasDefaultValue(""'\""'@\r\\\n"");
                eb.Property(e => e.TimeSpan).HasDefaultValue(TimeSpan.MaxValue);
                eb.Property(e => e.UInt16).HasDefaultValue(ushort.MinValue);
                eb.Property(e => e.UInt32).HasDefaultValue(uint.MinValue);
                eb.Property(e => e.UInt64).HasDefaultValue(ulong.MinValue);
                eb.Property(e => e.NullableBoolean).HasDefaultValue(true);
                eb.Property(e => e.NullableByte).HasDefaultValue(byte.MaxValue);
                eb.Property(e => e.NullableChar).HasDefaultValue('\'');
                eb.Property(e => e.NullableDateTime).HasDefaultValue(DateTime.MaxValue);
                eb.Property(e => e.NullableDateTimeOffset).HasDefaultValue(DateTimeOffset.MaxValue);
                eb.Property(e => e.NullableDecimal).HasDefaultValue(decimal.MaxValue);
                eb.Property(e => e.NullableDouble).HasDefaultValue(0.6822871999174);
                eb.Property(e => e.NullableEnum).HasDefaultValue(Enum1.One | Enum1.Two);
                eb.Property(e => e.NullableStringEnum).HasDefaultValue(Enum1.One).HasConversion<string>();
                eb.Property(e => e.NullableGuid).HasDefaultValue(new Guid());
                eb.Property(e => e.NullableInt16).HasDefaultValue(short.MinValue);
                eb.Property(e => e.NullableInt32).HasDefaultValue(int.MinValue);
                eb.Property(e => e.NullableInt64).HasDefaultValue(long.MinValue);
                eb.Property(e => e.NullableSingle).HasDefaultValue(0.3333333f);
                eb.Property(e => e.NullableSByte).HasDefaultValue(sbyte.MinValue);
                eb.Property(e => e.NullableTimeSpan).HasDefaultValue(TimeSpan.MinValue.Add(new TimeSpan()));
                eb.Property(e => e.NullableUInt16).HasDefaultValue(ushort.MaxValue);
                eb.Property(e => e.NullableUInt32).HasDefaultValue(uint.MaxValue);
                eb.Property(e => e.NullableUInt64).HasDefaultValue(ulong.MaxValue);

                eb.HasKey(e => e.Boolean);
            });

        var finalizedModel = modelBuilder.FinalizeModel(designTime: true);

        var modelSnapshotCode = generator.GenerateSnapshot(
            ""MyNamespace"",
            typeof(MyContext),
            ""MySnapshot"",
            finalizedModel);

        var snapshot = CompileModelSnapshot(modelSnapshotCode, ""MyNamespace.MySnapshot"");
        var entityType = snapshot.Model.GetEntityTypes().Single();
        Assert.Equal(typeof(EntityWithEveryPrimitive).FullName + "" (Dictionary<string, object>)"", entityType.DisplayName());

        foreach (var property in modelBuilder.Model.GetEntityTypes().Single().GetProperties())
        {
            var expected = property.GetDefaultValue();
            var actual = entityType.FindProperty(property.Name).GetDefaultValue();

            if (actual != null
                && expected != null)
            {
                if (expected.GetType().IsEnum)
                {
                    actual = actual is string actualString
                        ? Enum.Parse(expected.GetType(), actualString)
                        : Enum.ToObject(expected.GetType(), actual);
                }

                if (actual.GetType() != expected.GetType())
                {
                    actual = Convert.ChangeType(actual, expected.GetType());
                }
            }

            Assert.Equal(expected, actual);
        }
    }

    private class EntityWithEveryPrimitive
    {
        public bool Boolean { get; set; }
        public byte Byte { get; set; }
        public byte[] ByteArray { get; set; }
        public char Char { get; set; }
        public DateTime DateTime { get; set; }
        public DateTimeOffset DateTimeOffset { get; set; }
        public decimal Decimal { get; set; }
        public double Double { get; set; }
        public Enum1 Enum { get; set; }
        public Enum1 StringEnum { get; set; }
        public Guid Guid { get; set; }
        public short Int16 { get; set; }
        public int Int32 { get; set; }
        public long Int64 { get; set; }
        public bool? NullableBoolean { get; set; }
        public byte? NullableByte { get; set; }
        public char? NullableChar { get; set; }
        public DateTime? NullableDateTime { get; set; }
        public DateTimeOffset? NullableDateTimeOffset { get; set; }
        public decimal? NullableDecimal { get; set; }
        public double? NullableDouble { get; set; }
        public Enum1? NullableEnum { get; set; }
        public Enum1? NullableStringEnum { get; set; }
        public Guid? NullableGuid { get; set; }
        public short? NullableInt16 { get; set; }
        public int? NullableInt32 { get; set; }
        public long? NullableInt64 { get; set; }
        public sbyte? NullableSByte { get; set; }
        public float? NullableSingle { get; set; }
        public TimeSpan? NullableTimeSpan { get; set; }
        public ushort? NullableUInt16 { get; set; }
        public uint? NullableUInt32 { get; set; }
        public ulong? NullableUInt64 { get; set; }
        public int PrivateSetter { get; private set; }
        public sbyte SByte { get; set; }
        public float Single { get; set; }
        public string String { get; set; }
        public TimeSpan TimeSpan { get; set; }
        public ushort UInt16 { get; set; }
        public uint UInt32 { get; set; }
        public ulong UInt64 { get; set; }
    }

    [Flags]
    public enum Enum1
    {
        Default = 0,
        One = 1,
        Two = 2
    }

    private ModelSnapshot CompileModelSnapshot(string modelSnapshotCode, string modelSnapshotTypeName)
    {
        var build = new BuildSource
        {
            References =
            {
                BuildReference.ByName(""Microsoft.EntityFrameworkCore.Design.Tests""),
                BuildReference.ByName(""Microsoft.EntityFrameworkCore""),
                BuildReference.ByName(""Microsoft.EntityFrameworkCore.Relational"")
            },
            Sources = { { ""MigrationSnapshot.cs"", modelSnapshotCode } }
        };

        var assembly = build.BuildInMemory();

        var snapshotType = assembly.GetType(modelSnapshotTypeName, throwOnError: true, ignoreCase: false);

        var contextTypeAttribute = snapshotType.GetCustomAttribute<DbContextAttribute>();
        Assert.NotNull(contextTypeAttribute);
        Assert.Equal(typeof(MyContext), contextTypeAttribute.ContextType);

        return (ModelSnapshot)Activator.CreateInstance(snapshotType);
    }

    public class MyContext
    {
    }

    [ConditionalFact]
    public void Namespaces_imported_for_insert_data()
    {
        var generator = CreateMigrationsCodeGenerator();

        var migration = generator.GenerateMigration(
            ""MyNamespace"",
            ""MyMigration"",
            new[]
            {
                new InsertDataOperation
                {
                    Table = ""MyTable"",
                    Columns = new[] { ""Id"", ""MyColumn"" },
                    Values = new object[,] { { 1, null }, { 2, RegexOptions.Multiline } }
                }
            },
            Array.Empty<MigrationOperation>());

        Assert.Contains(""using System.Text.RegularExpressions;"", migration);
    }

    [ConditionalFact]
    public void Namespaces_imported_for_update_data_Values()
    {
        var generator = CreateMigrationsCodeGenerator();

        var migration = generator.GenerateMigration(
            ""MyNamespace"",
            ""MyMigration"",
            new[]
            {
                new UpdateDataOperation
                {
                    Table = ""MyTable"",
                    KeyColumns = new[] { ""Id"" },
                    KeyValues = new object[,] { { 1 } },
                    Columns = new[] { ""MyColumn"" },
                    Values = new object[,] { { RegexOptions.Multiline } }
                }
            },
            Array.Empty<MigrationOperation>());

        Assert.Contains(""using System.Text.RegularExpressions;"", migration);
    }

    [ConditionalFact]
    public void Namespaces_imported_for_update_data_KeyValues()
    {
        var generator = CreateMigrationsCodeGenerator();

        var migration = generator.GenerateMigration(
            ""MyNamespace"",
            ""MyMigration"",
            new[]
            {
                new UpdateDataOperation
                {
                    Table = ""MyTable"",
                    KeyColumns = new[] { ""Id"" },
                    KeyValues = new object[,] { { RegexOptions.Multiline } },
                    Columns = new[] { ""MyColumn"" },
                    Values = new object[,] { { 1 } }
                }
            },
            Array.Empty<MigrationOperation>());

        Assert.Contains(""using System.Text.RegularExpressions;"", migration);
    }

    [ConditionalFact]
    public void Namespaces_imported_for_delete_data()
    {
        var generator = CreateMigrationsCodeGenerator();

        var migration = generator.GenerateMigration(
            ""MyNamespace"",
            ""MyMigration"",
            new[]
            {
                new DeleteDataOperation
                {
                    Table = ""MyTable"",
                    KeyColumns = new[] { ""Id"" },
                    KeyValues = new object[,] { { RegexOptions.Multiline } }
                }
            },
            Array.Empty<MigrationOperation>());

        Assert.Contains(""using System.Text.RegularExpressions;"", migration);
    }

    private static IMigrationsCodeGenerator CreateMigrationsCodeGenerator()
    {
        var testAssembly = typeof(CSharpMigrationsGeneratorTest).Assembly;
        var reporter = new TestOperationReporter();
        return new DesignTimeServicesBuilder(testAssembly, testAssembly, reporter, new string[0])
            .CreateServiceCollection(SqlServerTestHelpers.Instance.CreateContext())
            .BuildServiceProvider(validateScopes: true)
            .GetRequiredService<IMigrationsCodeGenerator>();
    }
}",1,439 334 2000 123 437 457 441 461 2001 61 2002 46 2003 59 437 457 441 461 2004 61 2001 43 64 648 648 648 59 91 2005 93 439 492 2006 40 41 123 621 490 2007 61 418 2008 60 461 62 123 2009 46 2010 44 2009 46 2011 44 2009 46 2012 44 2009 46 2013 44 2009 46 2014 44 2009 46 2015 44 2009 46 2016 44 2009 46 2017 44 2009 46 2018 44 2009 46 2019 44 2009 46 2020 44 2009 46 2021 44 2009 46 2022 44 2009 46 2023 44 2009 46 2024 44 2009 46 2025 44 2026 46 2027 44 2026 46 2028 44 2026 46 2029 44 2026 46 2030 44 2026 46 2031 44 2026 46 2032 44 2026 46 2033 44 2026 46 2034 44 2026 46 2035 44 2026 46 2036 44 2026 46 2037 44 2026 46 2038 44 2026 46 2039 44 2026 46 2040 44 2026 46 2041 44 2026 46 2042 44 2026 46 2043 44 2026 46 2044 44 2026 46 2045 44 2026 46 2046 44 2026 46 2047 44 35 435 2048 2049 2050 621 2026 46 2051 44 35 435 2048 2052 2050 621 2026 46 2053 44 2026 46 2054 44 2026 46 2055 44 2026 46 2056 44 2026 46 2057 44 2026 46 2058 44 2026 46 2059 44 2026 46 2060 44 2026 46 2061 44 2026 46 2062 44 2026 46 2063 125 59 621 621 490 2064 61 418 2065 60 461 44 40 426 44 461 41 62 123 123 2066 46 2067 44 40 648 44 2001 43 648 43 2068 40 2069 46 2070 41 43 64 648 648 648 41 125 44 123 2071 46 2072 44 40 648 44 2001 43 648 43 2073 40 2074 46 2075 41 43 64 648 648 648 648 648 41 125 44 123 2076 46 2077 44 40 648 44 2004 43 648 43 2001 43 2001 43 648 43 64 648 648 648 41 125 44 123 2078 46 2079 44 40 648 44 2004 43 648 43 2001 43 2001 43 648 43 648 43 2080 40 2081 46 2082 41 43 64 648 648 648 41 125 44 123 2083 46 2084 44 40 648 44 2004 43 648 43 2001 43 2001 43 64 648 648 648 41 125 44 123 35 435 2085 2086 2087 621 2088 46 2089 44 35 435 2085 2090 2087 621 40 2091 46 2092 40 2091 46 2093 40 424 41 41 44 648 41 125 44 123 2094 46 2095 44 40 648 44 2001 43 648 43 2096 40 2097 46 2098 41 43 64 648 648 648 41 125 44 123 2099 46 2100 44 40 424 44 2001 43 648 43 2101 40 2102 46 2103 41 43 64 648 41 125 44 123 2104 46 2105 44 40 424 44 2001 43 648 43 2106 40 2107 46 2108 41 43 64 648 41 125 125 59 2109 40 2110 619 2110 46 2111 60 2112 62 40 41 46 2113 44 2007 44 2064 44 2114 619 2004 44 40 2115 44 2116 44 2110 41 619 2115 46 2117 40 648 44 40 2118 41 2116 44 2110 41 41 59 125 91 2005 93 439 492 2119 40 41 123 621 490 2120 61 418 2121 60 461 62 123 2122 46 2123 44 2122 46 2124 44 2122 46 2125 44 2122 46 2126 44 35 435 2127 2128 2129 621 2122 46 2130 44 35 435 2127 2131 2129 621 2122 46 2132 44 2122 46 2133 44 2122 46 2134 44 2122 46 2135 44 2122 46 2136 44 2122 46 2137 44 2138 46 2139 44 2138 46 2140 44 2138 46 2141 44 2138 46 2142 44 2138 46 2143 44 2138 46 2144 44 2138 46 2145 44 2138 46 2146 44 2138 46 2147 44 2138 46 2148 44 2138 46 2149 44 2138 46 2150 44 2138 46 2151 44 2138 46 2152 44 2138 46 2153 44 2138 46 2154 44 2138 46 2155 44 2138 46 2156 44 2138 46 2157 44 2138 46 2158 44 2138 46 2159 44 2138 46 2160 44 2138 46 2161 44 2138 46 2162 44 35 435 2127 2128 2163 621 2138 46 2164 44 35 435 2127 2131 2163 621 2138 46 2165 44 2138 46 2166 44 2138 46 2167 44 2138 46 2168 44 2138 46 2169 44 2138 46 2170 125 59 490 2171 61 36 64 648 648 648 59 621 621 490 2172 61 418 2173 60 461 44 40 426 44 461 41 62 123 123 2174 46 2175 44 40 1504 44 36 64 648 41 125 44 123 2176 46 2177 44 40 1502 44 36 64 648 41 125 44 123 2178 46 2179 44 40 424 44 36 64 648 41 125 44 123 2180 46 2181 44 40 380 44 36 64 648 41 125 44 123 2182 46 2183 44 40 418 2183 60 404 44 413 62 40 2184 619 2184 44 2184 619 40 404 41 2184 41 44 36 64 648 648 648 41 125 44 123 2185 46 2186 44 40 478 40 413 41 44 36 64 648 648 648 41 125 44 123 2187 46 2188 44 40 648 44 36 64 648 648 648 41 125 44 123 2189 46 2190 44 40 1501 44 36 64 648 41 125 44 123 2191 46 2192 44 40 648 44 36 64 648 648 648 41 125 44 123 2193 46 2194 44 40 648 44 36 64 648 648 648 41 125 44 123 2195 46 2196 44 40 648 44 36 64 648 648 648 41 125 44 123 2197 46 2198 44 40 648 44 36 64 648 648 648 41 125 44 123 2199 46 2200 44 40 473 44 36 64 648 41 125 44 123 2201 46 2202 44 40 648 44 36 64 648 648 648 41 125 44 123 2203 46 2204 44 40 648 44 36 64 648 648 648 41 125 44 123 2205 46 2206 44 40 424 44 36 64 648 648 648 41 125 125 59 2207 40 2208 619 2208 46 2209 60 2210 62 40 41 46 2211 40 2212 619 2212 46 2213 41 46 2214 44 2120 44 2172 44 2215 619 36 648 44 40 2216 44 2217 44 2208 41 619 2216 46 2218 40 648 44 40 2219 41 2217 44 2208 41 41 59 125 437 457 492 2220 40 2221 60 2222 44 2223 62 2224 44 2225 60 461 62 2226 44 2227 60 461 44 40 426 2228 44 461 2229 41 62 2230 44 2221 60 461 44 461 62 2231 44 2232 60 2233 44 2223 44 2234 62 2235 41 123 490 2236 61 418 2237 40 2238 46 2239 46 2240 60 2241 62 40 41 44 2238 46 2239 46 2240 60 2242 62 40 41 41 59 490 2243 61 418 2244 40 418 2245 40 2236 41 41 59 490 2246 61 418 2247 40 2236 41 59 490 2248 61 418 2233 40 418 2249 40 2246 44 2236 44 2243 41 41 59 490 2250 61 478 40 2251 41 46 2252 40 41 46 2253 40 2254 619 2254 46 2255 614 478 40 461 41 41 46 2256 40 41 59 386 40 490 2257 398 2250 41 123 490 2258 61 40 461 41 2257 46 2259 40 424 41 59 2260 46 304 40 2251 46 2261 46 2262 40 2258 41 44 2263 40 2251 41 43 648 43 2263 40 2251 46 2261 41 43 648 43 2258 41 59 125 386 40 490 2257 398 2250 46 2264 40 478 40 2265 41 46 2252 40 41 46 2253 40 2254 619 2254 46 2266 631 648 41 41 41 123 490 2267 61 40 461 41 2257 46 2268 40 424 41 59 392 40 33 2226 46 2269 40 2267 41 41 123 490 2270 61 2271 46 2239 46 2272 40 41 59 490 2273 61 2224 40 2270 41 59 2273 46 2274 40 2267 44 2230 46 2275 40 2267 41 63 2230 91 2267 93 46 2228 58 424 41 59 2270 46 2276 40 2277 58 473 41 59 490 2278 61 418 2234 40 41 59 474 123 621 2235 40 2248 44 2273 44 2278 41 59 125 329 40 2279 2280 41 123 2281 46 302 40 473 44 36 648 41 59 125 474 123 490 2282 61 2230 46 2275 40 2267 41 63 2230 91 2267 93 46 2229 58 2231 40 2267 41 59 2283 46 2284 40 461 46 2285 40 2282 41 63 2282 58 36 648 44 2278 46 2286 40 41 41 59 125 329 40 2279 2280 41 123 469 418 2279 40 2267 44 2280 41 59 125 125 125 125 621 437 334 2233 58 2287 123 439 2233 40 2288 2289 41 58 320 40 2289 41 123 125 439 491 492 2290 40 461 2291 44 2292 2293 44 2234 2294 41 619 2295 40 2291 44 2293 44 2294 41 59 439 491 492 2296 40 461 2291 44 2297 2298 44 2234 2294 41 619 2299 40 2291 44 2298 44 2294 41 59 125 621 437 334 2300 123 439 404 2301 123 2302 59 2303 59 125 125 437 334 2304 58 2300 123 125 91 2005 93 439 492 2305 40 41 123 490 2306 61 418 2307 40 2308 46 2309 46 2310 60 2311 62 40 41 44 2308 46 2309 46 2310 60 2312 62 40 41 41 59 490 2313 61 418 2314 40 2306 41 59 490 2315 61 418 2316 40 418 2317 40 2306 41 41 59 490 2318 61 418 2319 40 418 2320 40 2306 44 2315 41 44 418 2321 40 2313 44 418 2322 40 418 2323 40 2313 41 41 44 418 2287 40 418 2324 40 2313 44 2306 44 2315 41 41 41 41 59 490 2325 61 2326 46 2309 46 2327 40 41 59 2325 46 2328 46 2329 40 2330 46 2331 41 59 2325 46 2332 60 2300 62 40 2333 619 123 2333 46 2334 60 2335 62 40 648 41 46 2336 40 2335 46 2337 41 46 2336 60 2304 62 40 2335 46 2338 41 59 2333 46 2339 60 2335 62 40 648 41 46 2340 60 404 62 40 41 59 125 41 59 490 2341 61 2325 46 2342 40 2343 58 473 41 59 490 2344 61 2318 46 2345 40 648 44 478 40 2346 41 44 648 44 2341 41 59 490 2347 61 2348 40 2344 44 648 41 46 2328 59 2349 46 2350 40 40 404 41 2351 46 2352 44 2347 46 2353 40 478 40 2300 41 41 46 2354 40 41 41 59 2349 46 2350 40 40 404 41 2351 46 2355 44 2347 46 2353 40 478 40 2304 41 41 46 2354 40 41 41 59 125 437 457 492 2356 40 2357 2358 44 461 2359 41 123 490 2360 61 2361 46 2362 46 2363 40 41 59 490 2364 61 2360 46 2365 60 2300 62 40 41 46 2366 40 2367 619 2367 46 2368 41 46 2369 59 2364 46 2370 40 1504 41 59 2364 46 2371 40 2358 41 59 2360 46 2372 40 41 59 490 2373 61 418 2374 40 2375 46 2362 46 2376 60 2377 62 40 41 44 2375 46 2362 46 2376 60 2378 62 40 41 41 59 490 2379 61 418 2380 40 2373 41 59 490 2381 61 418 2382 40 418 2383 40 2373 41 41 59 490 2384 61 418 2233 40 418 2385 40 2379 44 2373 44 2381 41 41 59 490 2386 61 418 2234 40 41 59 2384 46 2387 40 648 44 40 2388 41 2364 44 2386 41 59 2389 46 2390 40 2359 43 2001 43 648 44 2386 46 2391 40 41 41 59 125 91 2005 93 439 492 2392 40 41 123 490 2393 61 2394 40 41 59 490 2395 61 2393 46 2396 40 648 44 648 44 418 2397 91 93 123 418 2398 123 2399 61 648 44 91 648 93 61 2400 46 2401 125 44 418 2402 123 2403 61 648 44 2404 61 648 44 2405 61 478 40 2406 41 44 2407 61 418 2408 123 2405 61 478 40 2409 41 125 125 44 418 2410 123 2411 61 648 44 2412 61 648 44 2413 61 478 40 2414 41 125 44 418 2415 123 2416 61 648 44 2417 61 418 91 93 123 648 44 648 44 648 125 44 2418 61 418 426 91 44 93 123 123 1501 44 424 44 45 1501 125 125 125 125 44 2419 46 2420 60 2397 62 40 41 41 59 2421 46 2422 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2395 44 2423 58 473 41 59 490 2424 61 2425 46 2426 46 2427 40 2428 58 2429 619 2429 46 2430 40 41 41 59 2424 46 2431 40 648 44 2432 46 2433 41 59 2424 46 2431 40 2434 46 2435 44 418 2436 60 461 44 2437 62 40 41 41 59 2424 46 2438 40 648 44 2439 619 123 2439 46 2440 60 404 62 40 648 41 59 2439 46 2440 60 461 62 40 648 41 46 2441 40 41 59 2439 46 2440 60 404 62 40 648 41 59 2439 46 2442 40 648 41 59 125 41 59 2424 46 2431 40 2443 46 2444 44 424 41 59 490 2445 61 2424 46 2446 40 2447 58 473 41 59 490 2448 61 2393 46 2449 40 648 44 478 40 2450 41 44 648 44 648 44 2445 41 59 2421 46 2422 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2448 44 2423 58 473 41 59 490 2451 61 418 2452 123 2453 61 123 2454 46 2455 40 648 41 44 2454 46 2455 40 648 41 44 2454 46 2455 40 648 41 125 44 2456 61 123 123 648 44 2395 125 44 123 648 44 2448 125 125 125 59 490 2457 61 2451 46 2458 40 41 59 490 2459 61 2457 46 2460 40 648 44 2461 58 473 44 2462 58 380 41 59 490 2463 61 2459 46 2464 60 2465 62 40 41 59 2421 46 2466 40 2463 41 59 2421 46 2422 40 478 40 2450 41 44 2463 46 2467 41 59 490 2468 61 40 2469 41 2470 46 2471 40 2459 41 59 2421 46 2422 40 648 44 2468 46 2472 40 41 41 59 2421 46 2422 40 1502 44 2468 46 2473 46 2474 41 59 2421 46 2420 40 2468 46 2475 41 59 2421 46 2476 40 2468 46 2477 46 2478 40 41 41 59 125 437 370 2479 123 2480 44 2481 125 437 457 404 2482 40 41 619 469 418 2483 40 41 59 437 334 2484 123 439 2484 40 404 2485 41 123 2486 61 2485 59 125 439 404 2487 123 2488 59 125 125 91 2005 93 439 492 2489 40 41 123 490 2490 61 2491 40 41 59 490 2492 61 2493 46 2494 46 2495 40 41 59 2492 46 2496 46 2497 40 2498 46 2499 41 59 2492 46 2500 60 2484 62 40 2501 619 123 2501 46 2502 40 2503 619 2503 46 2504 41 59 2501 46 2502 60 2505 62 40 648 41 46 2506 60 2507 62 40 41 59 125 41 59 2492 46 2508 40 40 41 619 2482 40 41 41 59 490 2509 61 2492 46 2496 59 2509 91 648 93 61 2510 46 2511 59 490 2512 61 2509 46 2513 40 648 41 59 490 2514 61 2512 46 2515 40 648 44 478 40 2516 41 41 59 2514 46 2517 40 418 2357 60 2516 44 461 62 40 2518 619 2518 46 2519 40 41 44 2518 619 418 2516 40 2518 41 44 418 2520 40 2521 58 1502 41 41 41 59 490 2522 61 2512 46 2515 40 648 44 478 40 2479 41 41 59 2522 46 2517 40 418 2357 60 2479 44 461 62 40 2518 619 2518 46 2519 40 41 44 2518 619 40 2479 41 2523 46 2524 40 478 40 2479 41 44 2518 41 44 418 2520 40 2521 58 1502 41 41 41 59 2512 46 2525 40 2522 41 59 490 2526 61 2492 46 2527 40 2528 58 473 41 59 490 2529 61 2490 46 2530 40 648 44 478 40 2531 41 44 648 44 2526 41 59 2532 46 2533 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2529 44 2534 58 473 41 59 490 2535 61 2536 40 2529 44 648 41 59 2532 46 2533 40 1502 44 2535 46 2496 46 2537 40 41 46 2538 40 41 41 59 125 91 2005 93 439 492 2539 40 41 123 490 2540 61 2541 40 41 59 490 2542 61 2543 46 2544 46 2545 40 41 59 2542 46 2546 60 2547 62 40 2548 619 123 2548 46 2549 40 2550 619 2550 46 2551 41 46 2552 40 380 41 59 2548 46 2549 40 2550 619 2550 46 2553 41 46 2552 40 326 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2555 41 46 2552 40 418 326 91 93 123 1500 125 41 59 2548 46 2549 40 2550 619 2550 46 2556 41 46 2552 40 607 41 59 2548 46 2549 40 2550 619 2550 46 2557 41 46 2552 40 2557 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2558 41 46 2552 40 2558 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2559 41 46 2552 40 345 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2560 41 46 2552 40 356 46 2554 41 59 621 2548 46 2549 40 2550 619 2550 46 2561 41 46 2552 40 2562 46 2563 41 59 2548 46 2549 40 2550 619 2550 46 2564 41 46 2552 40 2562 46 2563 41 46 2565 60 461 62 40 41 59 2548 46 2549 40 2550 619 2550 46 2566 41 46 2552 40 2566 46 2567 40 41 41 59 2548 46 2549 40 2550 619 2550 46 2568 41 46 2552 40 453 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2570 41 46 2552 40 404 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2571 41 46 2552 40 413 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2572 41 46 2552 40 384 46 2573 41 59 2548 46 2549 40 2550 619 2550 46 2574 41 46 2552 40 451 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2575 41 46 2552 40 648 41 59 2548 46 2549 40 2550 619 2550 46 2576 41 46 2552 40 2576 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2577 41 46 2552 40 488 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2578 41 46 2552 40 479 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2579 41 46 2552 40 480 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2580 41 46 2552 40 473 41 59 2548 46 2549 40 2550 619 2550 46 2581 41 46 2552 40 326 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2582 41 46 2552 40 607 41 59 2548 46 2549 40 2550 619 2550 46 2583 41 46 2552 40 2557 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2584 41 46 2552 40 2558 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2585 41 46 2552 40 345 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2586 41 46 2552 40 1499 41 59 2548 46 2549 40 2550 619 2550 46 2564 41 46 2552 40 2562 46 2587 124 2562 46 2588 41 59 2548 46 2549 40 2550 619 2550 46 2589 41 46 2552 40 2562 46 2587 41 46 2565 60 461 62 40 41 59 2548 46 2549 40 2550 619 2550 46 2590 41 46 2552 40 418 2566 40 41 41 59 2548 46 2549 40 2550 619 2550 46 2591 41 46 2552 40 453 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2592 41 46 2552 40 404 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2593 41 46 2552 40 413 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2594 41 46 2552 40 1499 41 59 2548 46 2549 40 2550 619 2550 46 2595 41 46 2552 40 451 46 2554 41 59 2548 46 2549 40 2550 619 2550 46 2596 41 46 2552 40 2576 46 2554 46 2597 40 418 2576 40 41 41 41 59 2548 46 2549 40 2550 619 2550 46 2598 41 46 2552 40 488 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2599 41 46 2552 40 479 46 2569 41 59 2548 46 2549 40 2550 619 2550 46 2600 41 46 2552 40 480 46 2569 41 59 2548 46 2601 40 2550 619 2550 46 2551 41 59 125 41 59 490 2602 61 2542 46 2603 40 2604 58 473 41 59 490 2605 61 2540 46 2606 40 648 44 478 40 2607 41 44 648 44 2602 41 59 490 2608 61 2609 40 2605 44 648 41 59 490 2610 61 2608 46 2611 46 2612 40 41 46 2613 40 41 59 2614 46 2615 40 478 40 2547 41 46 2616 43 648 44 2610 46 2617 40 41 41 59 386 40 490 2618 398 2542 46 2611 46 2612 40 41 46 2613 40 41 46 2619 40 41 41 123 490 2359 61 2618 46 2620 40 41 59 490 2621 61 2610 46 2622 40 2618 46 2623 41 46 2620 40 41 59 392 40 2621 631 424 605 2359 631 424 41 123 392 40 2359 46 2624 40 41 46 2625 41 123 2621 61 2621 407 461 2626 63 2627 46 2628 40 2359 46 2624 40 41 44 2626 41 58 2627 46 2629 40 2359 46 2624 40 41 44 2621 41 59 125 392 40 2621 46 2624 40 41 631 2359 46 2624 40 41 41 123 2621 61 2630 46 2631 40 2621 44 2359 46 2624 40 41 41 59 125 125 2614 46 2615 40 2359 44 2621 41 59 125 125 437 334 2632 123 439 323 2633 123 2634 59 2635 59 125 439 326 2636 123 2637 59 2638 59 125 439 326 91 93 2639 123 2640 59 2641 59 125 439 330 2642 123 2643 59 2644 59 125 439 2645 2645 123 2646 59 2647 59 125 439 2648 2648 123 2649 59 2650 59 125 439 345 2651 123 2652 59 2653 59 125 439 356 2654 123 2655 59 2656 59 125 439 2657 2658 123 2659 59 2660 59 125 439 2657 2661 123 2662 59 2663 59 125 439 2664 2664 123 2665 59 2666 59 125 439 453 2667 123 2668 59 2669 59 125 439 404 2670 123 2671 59 2672 59 125 439 413 2673 123 2674 59 2675 59 125 439 323 63 2676 123 2677 59 2678 59 125 439 326 63 2679 123 2680 59 2681 59 125 439 330 63 2682 123 2683 59 2684 59 125 439 2645 63 2685 123 2686 59 2687 59 125 439 2648 63 2688 123 2689 59 2690 59 125 439 345 63 2691 123 2692 59 2693 59 125 439 356 63 2694 123 2695 59 2696 59 125 439 2657 63 2697 123 2698 59 2699 59 125 439 2657 63 2700 123 2701 59 2702 59 125 439 2664 63 2703 123 2704 59 2705 59 125 439 453 63 2706 123 2707 59 2708 59 125 439 404 63 2709 123 2710 59 2711 59 125 439 413 63 2712 123 2713 59 2714 59 125 439 451 63 2715 123 2716 59 2717 59 125 439 384 63 2718 123 2719 59 2720 59 125 439 2721 63 2722 123 2723 59 2724 59 125 439 488 63 2725 123 2726 59 2727 59 125 439 479 63 2728 123 2729 59 2730 59 125 439 480 63 2731 123 2732 59 2733 59 125 439 404 2734 123 2735 59 437 2736 59 125 439 451 2737 123 2738 59 2739 59 125 439 384 2740 123 2741 59 2742 59 125 439 461 2743 123 2744 59 2745 59 125 439 2721 2721 123 2746 59 2747 59 125 439 488 2748 123 2749 59 2750 59 125 439 479 2751 123 2752 59 2753 59 125 439 480 2754 123 2755 59 2756 59 125 125 91 2757 93 439 370 2758 123 2759 61 1500 44 2760 61 1501 44 2761 61 1502 125 437 2762 2763 40 461 2764 44 461 2765 41 123 490 2766 61 418 2767 123 2768 61 123 2769 46 2770 40 648 41 44 2769 46 2770 40 648 41 44 2769 46 2770 40 648 41 125 44 2771 61 123 123 648 44 2764 125 125 125 59 490 2772 61 2766 46 2773 40 41 59 490 2774 61 2772 46 2775 40 2765 44 2776 58 473 44 2777 58 380 41 59 490 2778 61 2774 46 2779 60 2780 62 40 41 59 2781 46 2782 40 2778 41 59 2781 46 2783 40 478 40 2784 41 44 2778 46 2785 41 59 450 40 2762 41 2786 46 2787 40 2774 41 59 125 439 334 2788 123 125 91 2005 93 439 492 2789 40 41 123 490 2790 61 2791 40 41 59 490 2792 61 2790 46 2793 40 648 44 648 44 418 91 93 123 418 2794 123 2795 61 648 44 2796 61 418 91 93 123 648 44 648 125 44 2797 61 418 426 91 44 93 123 123 1501 44 424 125 44 123 1502 44 2798 46 2799 125 125 125 125 44 2800 46 2801 60 2802 62 40 41 41 59 2803 46 2804 40 648 44 2792 41 59 125 91 2005 93 439 492 2805 40 41 123 490 2806 61 2807 40 41 59 490 2808 61 2806 46 2809 40 648 44 648 44 418 91 93 123 418 2810 123 2811 61 648 44 2812 61 418 91 93 123 648 125 44 2813 61 418 426 91 44 93 123 123 1501 125 125 44 2814 61 418 91 93 123 648 125 44 2815 61 418 426 91 44 93 123 123 2816 46 2817 125 125 125 125 44 2818 46 2819 60 2820 62 40 41 41 59 2821 46 2822 40 648 44 2808 41 59 125 91 2005 93 439 492 2823 40 41 123 490 2824 61 2825 40 41 59 490 2826 61 2824 46 2827 40 648 44 648 44 418 91 93 123 418 2828 123 2829 61 648 44 2830 61 418 91 93 123 648 125 44 2831 61 418 426 91 44 93 123 123 2832 46 2833 125 125 44 2834 61 418 91 93 123 648 125 44 2835 61 418 426 91 44 93 123 123 1501 125 125 125 125 44 2836 46 2837 60 2838 62 40 41 41 59 2839 46 2840 40 648 44 2826 41 59 125 91 2005 93 439 492 2841 40 41 123 490 2842 61 2843 40 41 59 490 2844 61 2842 46 2845 40 648 44 648 44 418 91 93 123 418 2846 123 2847 61 648 44 2848 61 418 91 93 123 648 125 44 2849 61 418 426 91 44 93 123 123 2850 46 2851 125 125 125 125 44 2852 46 2853 60 2854 62 40 41 41 59 2855 46 2856 40 648 44 2844 41 59 125 437 457 2857 2858 40 41 123 490 2859 61 478 40 2000 41 46 2860 59 490 2861 61 418 2862 40 41 59 450 418 2863 40 2859 44 2859 44 2861 44 418 461 91 1500 93 41 46 2864 40 2865 46 2866 46 2867 40 41 41 46 2868 40 2869 58 473 41 46 2870 60 2857 62 40 41 59 125 125 
68987,C#,"public class Property : PropertyBase, IMutableProperty, IConventionProperty, IProperty
{
    private bool? _isConcurrencyToken;
    private bool? _isNullable;
    private ValueGenerated? _valueGenerated;
    private CoreTypeMapping? _typeMapping;
    private InternalPropertyBuilder? _builder;

    private ConfigurationSource? _typeConfigurationSource;
    private ConfigurationSource? _isNullableConfigurationSource;
    private ConfigurationSource? _isConcurrencyTokenConfigurationSource;
    private ConfigurationSource? _valueGeneratedConfigurationSource;
    private ConfigurationSource? _typeMappingConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public Property(
        string name,
        Type clrType,
        PropertyInfo? propertyInfo,
        FieldInfo? fieldInfo,
        EntityType declaringEntityType,
        ConfigurationSource configurationSource,
        ConfigurationSource? typeConfigurationSource)
        : base(name, propertyInfo, fieldInfo, configurationSource)
    {
        DeclaringEntityType = declaringEntityType;
        ClrType = clrType;
        _typeConfigurationSource = typeConfigurationSource;

        _builder = new InternalPropertyBuilder(this, declaringEntityType.Model.Builder);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType DeclaringEntityType { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override TypeBase DeclaringType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override Type ClrType { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder Builder
    {
        [DebuggerStepThrough]
        get => _builder ?? throw new InvalidOperationException(CoreStrings.ObjectRemovedFromModel);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsInModel
        => _builder is not null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetRemovedFromModel()
        => _builder = null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetTypeConfigurationSource()
        => _typeConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdateTypeConfigurationSource(ConfigurationSource configurationSource)
        => _typeConfigurationSource = _typeConfigurationSource.Max(configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsNullable
    {
        get => _isNullable ?? DefaultIsNullable;
        set => SetIsNullable(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsNullable(bool? nullable, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        var isChanging = (nullable ?? DefaultIsNullable) != IsNullable;
        if (nullable == null)
        {
            _isNullable = null;
            _isNullableConfigurationSource = null;
            if (isChanging)
            {
                DeclaringEntityType.Model.ConventionDispatcher.OnPropertyNullableChanged(Builder);
            }

            return nullable;
        }

        if (nullable.Value)
        {
            if (!ClrType.IsNullableType())
            {
                throw new InvalidOperationException(
                    CoreStrings.CannotBeNullable(Name, DeclaringEntityType.DisplayName(), ClrType.ShortDisplayName()));
            }

            if (Keys != null)
            {
                throw new InvalidOperationException(CoreStrings.CannotBeNullablePK(Name, DeclaringEntityType.DisplayName()));
            }
        }

        _isNullableConfigurationSource = configurationSource.Max(_isNullableConfigurationSource);

        _isNullable = nullable;

        return isChanging
            ? DeclaringEntityType.Model.ConventionDispatcher.OnPropertyNullableChanged(Builder)
            : nullable;
    }

    private bool DefaultIsNullable
        => ClrType.IsNullableType();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetIsNullableConfigurationSource()
        => _isNullableConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override FieldInfo? OnFieldInfoSet(FieldInfo? newFieldInfo, FieldInfo? oldFieldInfo)
        => DeclaringEntityType.Model.ConventionDispatcher.OnPropertyFieldChanged(Builder, newFieldInfo, oldFieldInfo);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueGenerated ValueGenerated
    {
        get => _valueGenerated ?? DefaultValueGenerated;
        set => SetValueGenerated(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueGenerated? SetValueGenerated(ValueGenerated? valueGenerated, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        _valueGenerated = valueGenerated;

        _valueGeneratedConfigurationSource = valueGenerated == null
            ? null
            : configurationSource.Max(_valueGeneratedConfigurationSource);

        return valueGenerated;
    }

    private static ValueGenerated DefaultValueGenerated
        => ValueGenerated.Never;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetValueGeneratedConfigurationSource()
        => _valueGeneratedConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsConcurrencyToken
    {
        get => _isConcurrencyToken ?? DefaultIsConcurrencyToken;
        set => SetIsConcurrencyToken(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsConcurrencyToken(bool? concurrencyToken, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (IsConcurrencyToken != concurrencyToken)
        {
            _isConcurrencyToken = concurrencyToken;
        }

        _isConcurrencyTokenConfigurationSource = concurrencyToken == null
            ? null
            : configurationSource.Max(_isConcurrencyTokenConfigurationSource);

        return concurrencyToken;
    }

    private static bool DefaultIsConcurrencyToken
        => false;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetIsConcurrencyTokenConfigurationSource()
        => _isConcurrencyTokenConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual int? SetMaxLength(int? maxLength, ConfigurationSource configurationSource)
    {
        if (maxLength != null
            && maxLength < 0)
        {
            throw new ArgumentOutOfRangeException(nameof(maxLength));
        }

        return (int?)SetOrRemoveAnnotation(CoreAnnotationNames.MaxLength, maxLength, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual int? GetMaxLength()
        => (int?)this[CoreAnnotationNames.MaxLength];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetMaxLengthConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.MaxLength)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsUnicode(bool? unicode, ConfigurationSource configurationSource)
        => (bool?)SetOrRemoveAnnotation(CoreAnnotationNames.Unicode, unicode, configurationSource)?.Value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? IsUnicode()
        => (bool?)this[CoreAnnotationNames.Unicode];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetIsUnicodeConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.Unicode)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual int? SetPrecision(int? precision, ConfigurationSource configurationSource)
    {
        if (precision != null && precision < 0)
        {
            throw new ArgumentOutOfRangeException(nameof(precision));
        }

        return (int?)SetOrRemoveAnnotation(CoreAnnotationNames.Precision, precision, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual int? GetPrecision()
        => (int?)this[CoreAnnotationNames.Precision];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetPrecisionConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.Precision)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual int? SetScale(int? scale, ConfigurationSource configurationSource)
    {
        if (scale != null && scale < 0)
        {
            throw new ArgumentOutOfRangeException(nameof(scale));
        }

        return (int?)SetOrRemoveAnnotation(CoreAnnotationNames.Scale, scale, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual int? GetScale()
        => (int?)this[CoreAnnotationNames.Scale];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetScaleConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.Scale)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertySaveBehavior? SetBeforeSaveBehavior(
        PropertySaveBehavior? beforeSaveBehavior,
        ConfigurationSource configurationSource)
        => (PropertySaveBehavior?)SetOrRemoveAnnotation(CoreAnnotationNames.BeforeSaveBehavior, beforeSaveBehavior, configurationSource)
            ?.Value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertySaveBehavior GetBeforeSaveBehavior()
        => (PropertySaveBehavior?)this[CoreAnnotationNames.BeforeSaveBehavior]
            ?? (ValueGenerated == ValueGenerated.OnAddOrUpdate
                ? PropertySaveBehavior.Ignore
                : PropertySaveBehavior.Save);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetBeforeSaveBehaviorConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.BeforeSaveBehavior)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertySaveBehavior? SetAfterSaveBehavior(
        PropertySaveBehavior? afterSaveBehavior,
        ConfigurationSource configurationSource)
    {
        if (afterSaveBehavior != null)
        {
            var errorMessage = CheckAfterSaveBehavior(afterSaveBehavior.Value);
            if (errorMessage != null)
            {
                throw new InvalidOperationException(errorMessage);
            }
        }

        return (PropertySaveBehavior?)SetOrRemoveAnnotation(
                CoreAnnotationNames.AfterSaveBehavior, afterSaveBehavior, configurationSource)
            ?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertySaveBehavior GetAfterSaveBehavior()
        => (PropertySaveBehavior?)this[CoreAnnotationNames.AfterSaveBehavior]
            ?? (IsKey()
                ? PropertySaveBehavior.Throw
                : ValueGenerated.ForUpdate()
                    ? PropertySaveBehavior.Ignore
                    : PropertySaveBehavior.Save);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetAfterSaveBehaviorConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.AfterSaveBehavior)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? CheckAfterSaveBehavior(PropertySaveBehavior behavior)
        => behavior != PropertySaveBehavior.Throw
            && IsKey()
                ? CoreStrings.KeyPropertyMustBeReadOnly(Name, DeclaringEntityType.DisplayName())
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<IProperty, IEntityType, ValueGenerator>? SetValueGeneratorFactory(
        Func<IProperty, IEntityType, ValueGenerator>? factory,
        ConfigurationSource configurationSource)
    {
        RemoveAnnotation(CoreAnnotationNames.ValueGeneratorFactoryType);
        return (Func<IProperty, IEntityType, ValueGenerator>?)
            SetAnnotation(CoreAnnotationNames.ValueGeneratorFactory, factory, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? SetValueGeneratorFactory(
        Type? factoryType,
        ConfigurationSource configurationSource)
    {
        if (factoryType != null)
        {
            if (!typeof(ValueGeneratorFactory).IsAssignableFrom(factoryType))
            {
                throw new InvalidOperationException(
                    CoreStrings.BadValueGeneratorType(
                        factoryType.ShortDisplayName(), typeof(ValueGeneratorFactory).ShortDisplayName()));
            }

            if (factoryType.IsAbstract
                || !factoryType.GetTypeInfo().DeclaredConstructors.Any(c => c.IsPublic && c.GetParameters().Length == 0))
            {
                throw new InvalidOperationException(
                    CoreStrings.CannotCreateValueGenerator(factoryType.ShortDisplayName(), nameof(SetValueGeneratorFactory)));
            }
        }

        RemoveAnnotation(CoreAnnotationNames.ValueGeneratorFactory);
        return (Type?)SetAnnotation(CoreAnnotationNames.ValueGeneratorFactoryType, factoryType, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<IProperty, IEntityType, ValueGenerator>? GetValueGeneratorFactory()
    {
        var factory = (Func<IProperty, IEntityType, ValueGenerator>?)this[CoreAnnotationNames.ValueGeneratorFactory];
        if (factory == null)
        {
            var factoryType = (Type?)this[CoreAnnotationNames.ValueGeneratorFactoryType];
            if (factoryType != null)
            {
                return ((ValueGeneratorFactory)Activator.CreateInstance(factoryType)!).Create;
            }
        }

        return factory;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetValueGeneratorFactoryConfigurationSource()
        => (FindAnnotation(CoreAnnotationNames.ValueGeneratorFactory)
            ?? FindAnnotation(CoreAnnotationNames.ValueGeneratorFactoryType))?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueConverter? SetValueConverter(
        ValueConverter? converter,
        ConfigurationSource configurationSource)
    {
        var errorString = CheckValueConverter(converter);
        if (errorString != null)
        {
            throw new InvalidOperationException(errorString);
        }

        RemoveAnnotation(CoreAnnotationNames.ValueConverterType);
        return (ValueConverter?)SetOrRemoveAnnotation(CoreAnnotationNames.ValueConverter, converter, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? SetValueConverter(
        Type? converterType,
        ConfigurationSource configurationSource)
    {
        ValueConverter? converter = null;
        if (converterType != null)
        {
            if (!typeof(ValueConverter).IsAssignableFrom(converterType))
            {
                throw new InvalidOperationException(
                    CoreStrings.BadValueConverterType(converterType.ShortDisplayName(), typeof(ValueConverter).ShortDisplayName()));
            }

            try
            {
                converter = (ValueConverter?)Activator.CreateInstance(converterType);
            }
            catch (Exception e)
            {
                throw new InvalidOperationException(
                    CoreStrings.CannotCreateValueConverter(
                        converterType.ShortDisplayName(), nameof(PropertyBuilder.HasConversion)), e);
            }
        }

        SetValueConverter(converter, configurationSource);
        SetOrRemoveAnnotation(CoreAnnotationNames.ValueConverterType, converterType, configurationSource);

        return converterType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueConverter? GetValueConverter()
        => (ValueConverter?)this[CoreAnnotationNames.ValueConverter];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetValueConverterConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.ValueConverter)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? CheckValueConverter(ValueConverter? converter)
        => converter != null
            && converter.ModelClrType.UnwrapNullableType() != ClrType.UnwrapNullableType()
                ? CoreStrings.ConverterPropertyMismatch(
                    converter.ModelClrType.ShortDisplayName(),
                    DeclaringEntityType.DisplayName(),
                    Name,
                    ClrType.ShortDisplayName())
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? SetProviderClrType(Type? providerClrType, ConfigurationSource configurationSource)
        => (Type?)SetOrRemoveAnnotation(CoreAnnotationNames.ProviderClrType, providerClrType, configurationSource)?.Value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? GetProviderClrType()
        => (Type?)this[CoreAnnotationNames.ProviderClrType];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetProviderClrTypeConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.ProviderClrType)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DisallowNull]
    public virtual CoreTypeMapping? TypeMapping
    {
        get => IsReadOnly
            ? NonCapturingLazyInitializer.EnsureInitialized(
                ref _typeMapping, (IProperty)this, static property =>
                    property.DeclaringEntityType.Model.GetModelDependencies().TypeMappingSource.FindMapping(property)!)
            : _typeMapping;

        set => SetTypeMapping(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual CoreTypeMapping? SetTypeMapping(CoreTypeMapping? typeMapping, ConfigurationSource configurationSource)
    {
        _typeMapping = typeMapping;
        _typeMappingConfigurationSource = typeMapping is null
            ? null
            : configurationSource.Max(_typeMappingConfigurationSource);

        return typeMapping;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetTypeMappingConfigurationSource()
        => _typeMappingConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueComparer? SetValueComparer(ValueComparer? comparer, ConfigurationSource configurationSource)
    {
        var errorString = CheckValueComparer(comparer);
        if (errorString != null)
        {
            throw new InvalidOperationException(errorString);
        }

        RemoveAnnotation(CoreAnnotationNames.ValueComparerType);
        return (ValueComparer?)SetOrRemoveAnnotation(CoreAnnotationNames.ValueComparer, comparer, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? SetValueComparer(Type? comparerType, ConfigurationSource configurationSource)
    {
        ValueComparer? comparer = null;
        if (comparerType != null)
        {
            if (!typeof(ValueComparer).IsAssignableFrom(comparerType))
            {
                throw new InvalidOperationException(
                    CoreStrings.BadValueComparerType(comparerType.ShortDisplayName(), typeof(ValueComparer).ShortDisplayName()));
            }

            try
            {
                comparer = (ValueComparer?)Activator.CreateInstance(comparerType);
            }
            catch (Exception e)
            {
                throw new InvalidOperationException(
                    CoreStrings.CannotCreateValueComparer(
                        comparerType.ShortDisplayName(), nameof(PropertyBuilder.HasConversion)), e);
            }
        }

        SetValueComparer(comparer, configurationSource);
        return (Type?)SetOrRemoveAnnotation(CoreAnnotationNames.ValueComparerType, comparerType, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueComparer? GetValueComparer()
        => GetValueComparer(null)
            ?? TypeMapping?.Comparer;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueComparer? GetKeyValueComparer()
        => GetValueComparer(null)
            ?? TypeMapping?.KeyComparer;

    private ValueComparer? GetValueComparer(HashSet<IProperty>? checkedProperties)
    {
        var comparer = (ValueComparer?)this[CoreAnnotationNames.ValueComparer];
        if (comparer != null)
        {
            return comparer;
        }

        var principal = ((Property?)FindFirstDifferentPrincipal());
        if (principal == null)
        {
            return null;
        }

        if (checkedProperties == null)
        {
            checkedProperties = new HashSet<IProperty>();
        }
        else if (checkedProperties.Contains(this))
        {
            return null;
        }

        checkedProperties.Add(this);
        return principal.GetValueComparer(checkedProperties);
    }

    private IProperty? FindFirstDifferentPrincipal()
    {
        var principal = ((IProperty)this).FindFirstPrincipal();

        return principal != this ? principal : null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetValueComparerConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.ValueComparer)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? CheckValueComparer(ValueComparer? comparer)
        => comparer != null
            && comparer.Type.UnwrapNullableType() != ClrType.UnwrapNullableType()
                ? CoreStrings.ComparerPropertyMismatch(
                    comparer.Type.ShortDisplayName(),
                    DeclaringEntityType.DisplayName(),
                    Name,
                    ClrType.ShortDisplayName())
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyKey? PrimaryKey { get; set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual List<Key>? Keys { get; set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsKey()
        => Keys != null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Key> GetContainingKeys()
        => Keys ?? Enumerable.Empty<Key>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual List<ForeignKey>? ForeignKeys { get; set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsForeignKey()
        => ForeignKeys != null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> GetContainingForeignKeys()
        => ForeignKeys ?? Enumerable.Empty<ForeignKey>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual List<Index>? Indexes { get; set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsIndex()
        => Indexes != null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> GetContainingIndexes()
        => Indexes ?? Enumerable.Empty<Index>();

    /// <summary>
    ///     Runs the conventions when an annotation was set or removed.
    /// </summary>
    /// <param name=""name"">The key of the set annotation.</param>
    /// <param name=""annotation"">The annotation set.</param>
    /// <param name=""oldAnnotation"">The old annotation.</param>
    /// <returns>The annotation that was set.</returns>
    protected override IConventionAnnotation? OnAnnotationSet(
        string name,
        IConventionAnnotation? annotation,
        IConventionAnnotation? oldAnnotation)
        => DeclaringType.Model.ConventionDispatcher.OnPropertyAnnotationChanged(Builder, name, annotation, oldAnnotation);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static string Format(IEnumerable<string?> properties)
        => ""{""
            + string.Join(
                "", "",
                properties.Select(p => string.IsNullOrEmpty(p) ? """" : ""'"" + p + ""'""))
            + ""}"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool AreCompatible(IReadOnlyList<Property> properties, EntityType entityType)
        => properties.All(
            property =>
                property.IsShadowProperty()
                || (property.IsIndexerProperty()
                    ? property.PropertyInfo == entityType.FindIndexerPropertyInfo()
                    : ((property.PropertyInfo != null
                            && entityType.GetRuntimeProperties().ContainsKey(property.Name))
                        || (property.FieldInfo != null
                            && entityType.GetRuntimeFields().ContainsKey(property.Name)))));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override string ToString()
        => this.ToDebugString(MetadataDebugStringOptions.SingleLineDefault);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual DebugView DebugView
        => new(
            () => this.ToDebugString(),
            () => this.ToDebugString(MetadataDebugStringOptions.LongDefault));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder IConventionProperty.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionAnnotatableBuilder IConventionAnnotatable.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyEntityType IReadOnlyProperty.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableEntityType IMutableProperty.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionEntityType IConventionProperty.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IEntityType IProperty.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    CoreTypeMapping? IReadOnlyProperty.FindTypeMapping()
        => TypeMapping;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetTypeMapping(CoreTypeMapping typeMapping)
        => SetTypeMapping(typeMapping, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    CoreTypeMapping? IConventionProperty.SetTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation)
        => SetTypeMapping(typeMapping, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyProperty.GetContainingForeignKeys()
        => GetContainingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableForeignKey> IMutableProperty.GetContainingForeignKeys()
        => GetContainingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionForeignKey> IConventionProperty.GetContainingForeignKeys()
        => GetContainingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IProperty.GetContainingForeignKeys()
        => GetContainingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyIndex> IReadOnlyProperty.GetContainingIndexes()
        => GetContainingIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableIndex> IMutableProperty.GetContainingIndexes()
        => GetContainingIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionIndex> IConventionProperty.GetContainingIndexes()
        => GetContainingIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IIndex> IProperty.GetContainingIndexes()
        => GetContainingIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyKey> IReadOnlyProperty.GetContainingKeys()
        => GetContainingKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableKey> IMutableProperty.GetContainingKeys()
        => GetContainingKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionKey> IConventionProperty.GetContainingKeys()
        => GetContainingKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IKey> IProperty.GetContainingKeys()
        => GetContainingKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyKey? IReadOnlyProperty.FindContainingPrimaryKey()
        => PrimaryKey;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool? IConventionProperty.SetIsNullable(bool? nullable, bool fromDataAnnotation)
        => SetIsNullable(
            nullable, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ValueGenerated? IConventionProperty.SetValueGenerated(ValueGenerated? valueGenerated, bool fromDataAnnotation)
        => SetValueGenerated(
            valueGenerated, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool? IConventionProperty.SetIsConcurrencyToken(bool? concurrencyToken, bool fromDataAnnotation)
        => SetIsConcurrencyToken(
            concurrencyToken, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetMaxLength(int? maxLength)
        => SetMaxLength(maxLength, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    int? IConventionProperty.SetMaxLength(int? maxLength, bool fromDataAnnotation)
        => SetMaxLength(maxLength, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetPrecision(int? precision)
        => SetPrecision(precision, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    int? IConventionProperty.SetPrecision(int? precision, bool fromDataAnnotation)
        => SetPrecision(precision, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetScale(int? scale)
        => SetScale(scale, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    int? IConventionProperty.SetScale(int? scale, bool fromDataAnnotation)
        => SetScale(scale, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetIsUnicode(bool? unicode)
        => SetIsUnicode(unicode, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool? IConventionProperty.SetIsUnicode(bool? unicode, bool fromDataAnnotation)
        => SetIsUnicode(unicode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetBeforeSaveBehavior(PropertySaveBehavior? beforeSaveBehavior)
        => SetBeforeSaveBehavior(beforeSaveBehavior, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    PropertySaveBehavior? IConventionProperty.SetBeforeSaveBehavior(
        PropertySaveBehavior? beforeSaveBehavior,
        bool fromDataAnnotation)
        => SetBeforeSaveBehavior(
            beforeSaveBehavior,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetAfterSaveBehavior(PropertySaveBehavior? afterSaveBehavior)
        => SetAfterSaveBehavior(afterSaveBehavior, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    PropertySaveBehavior? IConventionProperty.SetAfterSaveBehavior(
        PropertySaveBehavior? afterSaveBehavior,
        bool fromDataAnnotation)
        => SetAfterSaveBehavior(
            afterSaveBehavior,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetValueGeneratorFactory(Func<IProperty, IEntityType, ValueGenerator>? valueGeneratorFactory)
        => SetValueGeneratorFactory(valueGeneratorFactory, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    Func<IProperty, IEntityType, ValueGenerator>? IConventionProperty.SetValueGeneratorFactory(
        Func<IProperty, IEntityType, ValueGenerator>? valueGeneratorFactory,
        bool fromDataAnnotation)
        => SetValueGeneratorFactory(
            valueGeneratorFactory,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetValueGeneratorFactory(Type? valueGeneratorFactory)
        => SetValueGeneratorFactory(valueGeneratorFactory, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    Type? IConventionProperty.SetValueGeneratorFactory(
        Type? valueGeneratorFactory,
        bool fromDataAnnotation)
        => SetValueGeneratorFactory(
            valueGeneratorFactory,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetValueConverter(ValueConverter? converter)
        => SetValueConverter(converter, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ValueConverter? IConventionProperty.SetValueConverter(ValueConverter? converter, bool fromDataAnnotation)
        => SetValueConverter(
            converter,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetValueConverter(Type? converterType)
        => SetValueConverter(converterType, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    Type? IConventionProperty.SetValueConverter(Type? converterType, bool fromDataAnnotation)
        => SetValueConverter(
            converterType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetProviderClrType(Type? providerClrType)
        => SetProviderClrType(providerClrType, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    Type? IConventionProperty.SetProviderClrType(Type? providerClrType, bool fromDataAnnotation)
        => SetProviderClrType(
            providerClrType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetValueComparer(ValueComparer? comparer)
        => SetValueComparer(comparer, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ValueComparer? IConventionProperty.SetValueComparer(ValueComparer? comparer, bool fromDataAnnotation)
        => SetValueComparer(
            comparer,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableProperty.SetValueComparer(Type? comparerType)
        => SetValueComparer(comparerType, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    Type? IConventionProperty.SetValueComparer(Type? comparerType, bool fromDataAnnotation)
        => SetValueComparer(
            comparerType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ValueComparer IProperty.GetValueComparer()
        => GetValueComparer()!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    ValueComparer IProperty.GetKeyValueComparer()
        => GetKeyValueComparer()!;
}
71814,C#,"    public class SqliteCommandTest
    {
        [Fact]
        public void Ctor_sets_values()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var transaction = connection.BeginTransaction())
                {
                    var command = new SqliteCommand(""SELECT 1;"", connection, transaction);

                    Assert.Equal(""SELECT 1;"", command.CommandText);
                    Assert.Same(connection, command.Connection);
                    Assert.Same(transaction, command.Transaction);
                }
            }
        }

        [Fact]
        public void CommandText_defaults_to_empty()
        {
            var command = new SqliteCommand();

            Assert.Empty(command.CommandText);
        }

        [Fact]
        public void CommandText_coalesces_to_empty()
        {
            var command = new SqliteCommand
            {
                CommandText = null
            };

            Assert.Empty(command.CommandText);
        }

        [Fact]
        public void CommandText_throws_when_set_when_open_reader()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";

                using (var reader = command.ExecuteReader())
                {
                    reader.Read();

                    var ex = Assert.Throws<InvalidOperationException>(() => command.CommandText = ""SELECT 2;"");

                    Assert.Equal(Resources.SetRequiresNoOpenReader(""CommandText""), ex.Message);
                }
            }
        }

        [Fact]
        public void CommandTimeout_works()
        {
            var command = new SqliteCommand
            {
                Connection = new SqliteConnection(""Command Timeout=1"")
                {
                    DefaultTimeout = 2
                },
                CommandTimeout = 3
            };

            Assert.Equal(3, command.CommandTimeout);
        }

        [Fact]
        public void CommandTimeout_defaults_to_connection()
        {
            var command = new SqliteCommand
            {
                Connection = new SqliteConnection(""Default Timeout=1"")
                {
                    DefaultTimeout = 2
                }
            };

            Assert.Equal(2, command.CommandTimeout);
        }

        [Fact]
        public void CommandTimeout_defaults_to_connection_string()
        {
            var command = new SqliteCommand
            {
                Connection = new SqliteConnection(""Default Timeout=1"")
            };

            Assert.Equal(1, command.CommandTimeout);
        }

        [Fact]
        public void CommandTimeout_defaults_to_30()
        {
            var command = new SqliteCommand();

            Assert.Equal(30, command.CommandTimeout);
        }

        [Fact]
        public void Connection_can_be_unset()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                command.Prepare();

                command.Connection = null;
                Assert.Null(command.Connection);
            }
        }

        [Fact]
        public void Connection_throws_when_set_when_open_reader()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";

                using (var reader = command.ExecuteReader())
                {
                    reader.Read();

                    var ex = Assert.Throws<InvalidOperationException>(() => command.Connection = new SqliteConnection());

                    Assert.Equal(Resources.SetRequiresNoOpenReader(""Connection""), ex.Message);
                }
            }
        }

        [Fact]
        public void CommandType_text_by_default()
        {
            Assert.Equal(CommandType.Text, new SqliteCommand().CommandType);
        }

        [Theory]
        [InlineData(CommandType.StoredProcedure)]
        [InlineData(CommandType.TableDirect)]
        public void CommandType_validates_value(CommandType commandType)
        {
            var ex = Assert.Throws<ArgumentException>(() => new SqliteCommand().CommandType = commandType);

            Assert.Equal(Resources.InvalidCommandType(commandType), ex.Message);
        }

        [Fact]
        public void Parameters_works()
        {
            var command = new SqliteCommand();

            var result = command.Parameters;

            Assert.NotNull(result);
            Assert.Same(result, command.Parameters);
        }

        [Fact]
        public void CreateParameter_works()
        {
            Assert.NotNull(new SqliteCommand().CreateParameter());
        }

        [Fact]
        public void Prepare_throws_when_no_connection()
        {
            var ex = Assert.Throws<InvalidOperationException>(() => new SqliteCommand().Prepare());

            Assert.Equal(Resources.CallRequiresOpenConnection(""Prepare""), ex.Message);
        }

        [Fact]
        public void Prepare_throws_when_connection_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var ex = Assert.Throws<InvalidOperationException>(() => connection.CreateCommand().Prepare());

                Assert.Equal(Resources.CallRequiresOpenConnection(""Prepare""), ex.Message);
            }
        }

        [Fact]
        public void Prepare_works_when_no_command_text()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.CreateCommand().Prepare();
            }
        }

        [Fact]
        public void Prepare_throws_when_command_text_contains_dependent_commands()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = ""CREATE TABLE Data (Value); SELECT * FROM Data;"";
                var ex = Assert.Throws<SqliteException>(() => command.Prepare());

                Assert.Equal(Resources.SqliteNativeError(SQLITE_ERROR, ""no such table: Data""), ex.Message);
            }
        }

        [Fact]
        private void Multiple_command_executes_works()
        {
            const int INSERTS = 3;

            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Data (ID integer PRIMARY KEY, Value integer);"");

                using (var command = connection.CreateCommand())
                {
                    command.CommandText = ""INSERT INTO Data (Value) VALUES (@value);"";
                    var valueParam = command.Parameters.AddWithValue(""@value"", -1);

                    Assert.Equal(1, command.ExecuteNonQuery());

                    for (var i = 0; i < INSERTS; i++)
                    {
                        valueParam.Value = i;
                        Assert.Equal(1, command.ExecuteNonQuery());
                    }

                    Assert.Equal(1, command.ExecuteNonQuery());

                    command.CommandText = ""SELECT Value FROM Data ORDER BY ID"";
                    using (var reader = command.ExecuteReader())
                    {
                        Assert.True(reader.Read());
                        Assert.Equal(-1, reader.GetInt32(0));

                        for (var i = 0; i < INSERTS; i++)
                        {
                            Assert.True(reader.Read());
                            Assert.Equal(i, reader.GetInt32(0));
                        }

                        Assert.True(reader.Read());
                        Assert.Equal(INSERTS - 1, reader.GetInt32(0));
                    }
                }
            }
        }

        [Fact]
        public void ExecuteReader_throws_when_no_connection()
        {
            var ex = Assert.Throws<InvalidOperationException>(() => new SqliteCommand().ExecuteReader());

            Assert.Equal(Resources.CallRequiresOpenConnection(""ExecuteReader""), ex.Message);
        }

        [Fact]
        public void ExecuteReader_throws_when_connection_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var ex = Assert.Throws<InvalidOperationException>(() => connection.CreateCommand().ExecuteReader());

                Assert.Equal(Resources.CallRequiresOpenConnection(""ExecuteReader""), ex.Message);
            }
        }

        [Fact]
        public void ExecuteReader_works_when_no_command_text()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using var reader = connection.CreateCommand().ExecuteReader();

                Assert.False(reader.HasRows);
                Assert.Equal(-1, reader.RecordsAffected);
            }
        }

        [Fact]
        public void ExecuteReader_throws_on_error()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""INVALID"";
                connection.Open();

                var ex = Assert.Throws<SqliteException>(() => command.ExecuteReader());

                Assert.Equal(SQLITE_ERROR, ex.SqliteErrorCode);
            }
        }

        [Fact]
        public void ExecuteScalar_throws_when_no_connection()
        {
            var ex = Assert.Throws<InvalidOperationException>(() => new SqliteCommand().ExecuteScalar());

            Assert.Equal(Resources.CallRequiresOpenConnection(""ExecuteScalar""), ex.Message);
        }

        [Fact]
        public void ExecuteScalar_throws_when_connection_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var ex = Assert.Throws<InvalidOperationException>(() => connection.CreateCommand().ExecuteScalar());

                Assert.Equal(Resources.CallRequiresOpenConnection(""ExecuteScalar""), ex.Message);
            }
        }

        [Fact]
        public void ExecuteReader_throws_when_transaction_required()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                connection.Open();

                using (connection.BeginTransaction())
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteReader());

                    Assert.Equal(Resources.TransactionRequired, ex.Message);
                }
            }
        }

        [Fact]
        public void ExecuteScalar_throws_when_no_command_text()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var result = connection.CreateCommand().ExecuteScalar();

                Assert.Null(result);
            }
        }

        [Fact]
        public void ExecuteScalar_processes_dependent_commands()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                var command = connection.CreateCommand();
                command.CommandText = ""CREATE TABLE Data (Value); SELECT * FROM Data;"";

                Assert.Null(command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_null_when_empty()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1 WHERE 0 = 1;"";
                connection.Open();

                Assert.Null(command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_null_when_non_query()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""CREATE TABLE Data (Value);"";
                connection.Open();

                Assert.Null(command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_long_when_integer()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                connection.Open();

                Assert.Equal(1L, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_double_when_real()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 3.14;"";
                connection.Open();

                Assert.Equal(3.14, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_string_when_text()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 'test';"";
                connection.Open();

                Assert.Equal(""test"", command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_byte_array_when_blob()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT x'7e57';"";
                connection.Open();

                Assert.Equal(new byte[] { 0x7e, 0x57 }, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_DBNull_when_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT NULL;"";
                connection.Open();

                Assert.Equal(DBNull.Value, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteReader_binds_parameters()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter;"";
                command.Parameters.AddWithValue(""@Parameter"", 1);
                connection.Open();

                Assert.Equal(1L, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteReader_throws_when_parameter_unset()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter, @Parameter2;"";
                command.Parameters.AddWithValue(""@Parameter"", 1);
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteScalar());
                Assert.Equal(Resources.MissingParameters(""@Parameter2""), ex.Message);
            }
        }

        [Fact]
        public void ExecuteReader_throws_when_reader_open()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteReader());
                    Assert.Equal(Resources.DataReaderOpen, ex.Message);
                }
            }
        }

        [Fact]
        public void ExecuteScalar_returns_long_when_batching()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 42; SELECT 43;"";
                connection.Open();

                Assert.Equal(42L, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_long_when_multiple_columns()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 42, 43;"";
                connection.Open();

                Assert.Equal(42L, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteScalar_returns_long_when_multiple_rows()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 42 UNION SELECT 43;"";
                connection.Open();

                Assert.Equal(42L, command.ExecuteScalar());
            }
        }

        [Fact]
        public void ExecuteNonQuery_throws_when_no_connection()
        {
            var ex = Assert.Throws<InvalidOperationException>(() => new SqliteCommand().ExecuteNonQuery());

            Assert.Equal(Resources.CallRequiresOpenConnection(""ExecuteNonQuery""), ex.Message);
        }

        [Fact]
        public void ExecuteNonQuery_throws_when_connection_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var ex = Assert.Throws<InvalidOperationException>(() => connection.CreateCommand().ExecuteNonQuery());

                Assert.Equal(Resources.CallRequiresOpenConnection(""ExecuteNonQuery""), ex.Message);
            }
        }

        [Fact]
        public void ExecuteNonQuery_works_when_no_command_text()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var result = connection.CreateCommand().ExecuteNonQuery();

                Assert.Equal(-1, result);
            }
        }

        [Fact]
        public void ExecuteReader_throws_when_transaction_mismatched()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                connection.Open();

                using (var otherConnection = new SqliteConnection(""Data Source=:memory:""))
                {
                    otherConnection.Open();

                    using (var transaction = otherConnection.BeginTransaction())
                    {
                        command.Transaction = transaction;

                        var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteReader());

                        Assert.Equal(Resources.TransactionConnectionMismatch, ex.Message);
                    }
                }
            }
        }

        [Fact]
        public void ExecuteReader_throws_when_transaction_completed_externally()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var transaction = connection.BeginTransaction())
                {
                    connection.ExecuteNonQuery(""ROLLBACK;"");

                    var ex = Assert.Throws<InvalidOperationException>(() => connection.ExecuteNonQuery(""SELECT 1;""));

                    Assert.Equal(Resources.TransactionCompleted, ex.Message);
                }
            }
        }

        [Fact]
        public void ExecuteNonQuery_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                connection.Open();

                Assert.Equal(-1, command.ExecuteNonQuery());
            }
        }

        [Fact]
        public void ExecuteReader_works_on_EXPLAIN()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = "" EXPLAIN SELECT 1 WHERE 1 = @a;"";
                connection.Open();

                if (new Version(connection.ServerVersion) < new Version(3, 28, 0))
                {
                    command.Parameters.AddWithValue(""@a"", 1);
                }

                using (var reader = command.ExecuteReader())
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);
                    Assert.Equal(8, reader.FieldCount);
                    Assert.Equal(""Init"", reader.GetString(1));
                }
            }
        }

        [Fact]
        public void ExecuteReader_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    Assert.NotNull(reader);
                }
            }
        }

        [Fact]
        public void ExecuteReader_skips_DML_statements()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");

                var command = connection.CreateCommand();
                command.CommandText = @""
                    INSERT INTO Test VALUES(1);
                    SELECT 1;"";

                using (var reader = command.ExecuteReader())
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.Equal(1L, reader.GetInt64(0));
                }
            }
        }

        [Fact]
        public void ExecuteReader_works_when_comments()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""-- TODO: Write SQL"";
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    Assert.False(reader.HasRows);
                    Assert.Equal(-1, reader.RecordsAffected);
                }
            }
        }

        [Fact]
        public void ExecuteReader_works_when_trailing_comments()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 0; -- My favorite number"";
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    var hasResult = reader.NextResult();
                    Assert.False(hasResult);
                }
            }
        }

        [Fact]
        public void Cancel_does_nothing()
        {
            new SqliteCommand().Cancel();
        }

        [Fact]
        public void ExecuteReader_supports_SequentialAccess()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 0;"";
                connection.Open();

                using (var reader = command.ExecuteReader(CommandBehavior.SequentialAccess))
                {
                    var hasResult = reader.NextResult();
                    Assert.False(hasResult);
                }
            }
        }

        [Fact]
        public void ExecuteReader_supports_SingleResult()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 0;"";
                connection.Open();

                using (var reader = command.ExecuteReader(CommandBehavior.SingleResult))
                {
                    var hasResult = reader.NextResult();
                    Assert.False(hasResult);
                }
            }
        }

        [Fact]
        public void ExecuteReader_supports_SingleRow()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 0;"";
                connection.Open();

                using (var reader = command.ExecuteReader(CommandBehavior.SingleRow))
                {
                    var hasResult = reader.NextResult();
                    Assert.False(hasResult);
                }
            }
        }

        [Fact]
        public void ExecuteReader_supports_CloseConnection()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 0;"";
                connection.Open();

                using (var reader = command.ExecuteReader(CommandBehavior.CloseConnection))
                {
                    var hasResult = reader.NextResult();
                    Assert.False(hasResult);
                }

                Assert.Equal(ConnectionState.Closed, connection.State);
            }
        }

        [Theory]
        [InlineData(true)]
        [InlineData(false)]
        public Task ExecuteReader_retries_when_locked(bool extendedErrorCode)
        {
            const string connectionString = ""Data Source=locked;Mode=Memory;Cache=Shared"";

            var selectedSignal = new AutoResetEvent(initialState: false);

            return Task.WhenAll(
                Task.Run(
                    async () =>
                    {
                        using (var connection = new SqliteConnection(connectionString))
                        {
                            connection.Open();
                            if (extendedErrorCode)
                            {
                                sqlite3_extended_result_codes(connection.Handle, 1);
                            }

                            connection.ExecuteNonQuery(
                                ""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");

                            using (connection.ExecuteReader(""SELECT * FROM Data;""))
                            {
                                selectedSignal.Set();

                                await Task.Delay(1000);
                            }
                        }
                    }),
                Task.Run(
                    () =>
                    {
                        using (var connection = new SqliteConnection(connectionString))
                        {
                            connection.Open();
                            if (extendedErrorCode)
                            {
                                sqlite3_extended_result_codes(connection.Handle, 1);
                            }

                            selectedSignal.WaitOne();

                            var command = connection.CreateCommand();
                            command.CommandText = ""DROP TABLE Data;"";

                            command.ExecuteNonQuery();
                        }
                    }));
        }

        [Fact]
        public async Task ExecuteReader_retries_when_busy()
        {
            const string connectionString = ""Data Source=busy.db"";

            var selectedSignal = new AutoResetEvent(initialState: false);

            try
            {
                await Task.WhenAll(
                    Task.Run(
                        async () =>
                        {
                            using (var connection = new SqliteConnection(connectionString))
                            {
                                connection.Open();

                                connection.ExecuteNonQuery(
                                    ""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");

                                using (connection.ExecuteReader(""SELECT * FROM Data;""))
                                {
                                    selectedSignal.Set();

                                    await Task.Delay(1000);
                                }
                            }
                        }),
                    Task.Run(
                        () =>
                        {
                            using (var connection = new SqliteConnection(connectionString))
                            {
                                connection.Open();

                                selectedSignal.WaitOne();

                                var command = connection.CreateCommand();
                                command.CommandText = ""DROP TABLE Data;"";

                                command.ExecuteNonQuery();
                            }
                        }));
            }
            finally
            {
                SqliteConnection.ClearPool(new SqliteConnection(connectionString));
                File.Delete(""busy.db"");
            }
        }

        [Fact]
        public void ExecuteReader_honors_CommandTimeout()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES (0);"");

                using (connection.ExecuteReader(""SELECT * FROM Data;""))
                {
                    var command = connection.CreateCommand();
                    command.CommandText = ""DROP TABLE Data;"";
                    command.CommandTimeout = 1;

                    var stopwatch = Stopwatch.StartNew();
                    Assert.Throws<SqliteException>(() => command.ExecuteNonQuery());
                    stopwatch.Stop();

                    Assert.InRange(stopwatch.ElapsedMilliseconds, 1000, 1999);
                }
            }
        }

        [Fact]
        public void Can_get_results_from_nonreadonly_statements()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var result = connection.ExecuteScalar<string>(""PRAGMA journal_mode;"");

                Assert.NotNull(result);
            }
        }

        [Fact]
        public void ExecuteReader_works_when_subsequent_DML()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(
                    @""
                    CREATE TABLE Test(Value);
                    INSERT INTO Test VALUES(1), (2);"");

                var command = connection.CreateCommand();
                command.CommandText = @""
                    SELECT Value FROM Test;
                    DELETE FROM Test"";

                using (var reader = command.ExecuteReader())
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.Equal(1L, reader.GetInt64(0));

                    hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.Equal(2L, reader.GetInt64(0));
                }
            }
        }

        [Fact]
        public void ExecuteReader_works_after_failure()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1 FROM dual"";

                var ex = Assert.Throws<SqliteException>(() => command.ExecuteScalar());
                Assert.Equal(SQLITE_ERROR, ex.SqliteErrorCode);

                connection.ExecuteNonQuery(""CREATE TABLE dual (dummy); INSERT INTO dual (dummy) VALUES ('X');"");

                var result = command.ExecuteScalar();

                Assert.Equal(1L, result);
            }
        }
    }
68362,C#,"    public class SqliteCommand : DbCommand
    {
        private SqliteParameterCollection? _parameters;

        private readonly List<(sqlite3_stmt Statement, int ParamCount)> _preparedStatements = new(1);
        private SqliteConnection? _connection;
        private string _commandText = string.Empty;
        private bool _prepared;
        private int? _commandTimeout;

        /// <summary>
        ///     Initializes a new instance of the <see cref=""SqliteCommand"" /> class.
        /// </summary>
        public SqliteCommand()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref=""SqliteCommand"" /> class.
        /// </summary>
        /// <param name=""commandText"">The SQL to execute against the database.</param>
        public SqliteCommand(string? commandText)
            => CommandText = commandText;

        /// <summary>
        ///     Initializes a new instance of the <see cref=""SqliteCommand"" /> class.
        /// </summary>
        /// <param name=""commandText"">The SQL to execute against the database.</param>
        /// <param name=""connection"">The connection used by the command.</param>
        public SqliteCommand(string? commandText, SqliteConnection? connection)
            : this(commandText)
        {
            Connection = connection;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref=""SqliteCommand"" /> class.
        /// </summary>
        /// <param name=""commandText"">The SQL to execute against the database.</param>
        /// <param name=""connection"">The connection used by the command.</param>
        /// <param name=""transaction"">The transaction within which the command executes.</param>
        public SqliteCommand(string? commandText, SqliteConnection? connection, SqliteTransaction? transaction)
            : this(commandText, connection)
            => Transaction = transaction;

        /// <summary>
        ///     Gets or sets a value indicating how <see cref=""CommandText"" /> is interpreted. Only
        ///     <see cref=""CommandType.Text"" /> is supported.
        /// </summary>
        /// <value>A value indicating how <see cref=""CommandText"" /> is interpreted.</value>
        public override CommandType CommandType
        {
            get => CommandType.Text;
            set
            {
                if (value != CommandType.Text)
                {
                    throw new ArgumentException(Resources.InvalidCommandType(value));
                }
            }
        }

        /// <summary>
        ///     Gets or sets the SQL to execute against the database.
        /// </summary>
        /// <value>The SQL to execute against the database.</value>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        [AllowNull]
        public override string CommandText
        {
            get => _commandText;
            set
            {
                if (DataReader != null)
                {
                    throw new InvalidOperationException(Resources.SetRequiresNoOpenReader(nameof(CommandText)));
                }

                if (value != _commandText)
                {
                    DisposePreparedStatements();
                    _commandText = value ?? string.Empty;
                }
            }
        }

        /// <summary>
        ///     Gets or sets the connection used by the command.
        /// </summary>
        /// <value>The connection used by the command.</value>
        public new virtual SqliteConnection? Connection
        {
            get => _connection;
            set
            {
                if (DataReader != null)
                {
                    throw new InvalidOperationException(Resources.SetRequiresNoOpenReader(nameof(Connection)));
                }

                if (value != _connection)
                {
                    DisposePreparedStatements();

                    _connection?.RemoveCommand(this);
                    _connection = value;
                    value?.AddCommand(this);
                }
            }
        }

        /// <summary>
        ///     Gets or sets the connection used by the command. Must be a <see cref=""SqliteConnection"" />.
        /// </summary>
        /// <value>The connection used by the command.</value>
        protected override DbConnection? DbConnection
        {
            get => Connection;
            set => Connection = (SqliteConnection?)value;
        }

        /// <summary>
        ///     Gets or sets the transaction within which the command executes.
        /// </summary>
        /// <value>The transaction within which the command executes.</value>
        public new virtual SqliteTransaction? Transaction { get; set; }

        /// <summary>
        ///     Gets or sets the transaction within which the command executes. Must be a <see cref=""SqliteTransaction"" />.
        /// </summary>
        /// <value>The transaction within which the command executes.</value>
        protected override DbTransaction? DbTransaction
        {
            get => Transaction;
            set => Transaction = (SqliteTransaction?)value;
        }

        /// <summary>
        ///     Gets the collection of parameters used by the command.
        /// </summary>
        /// <value>The collection of parameters used by the command.</value>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/parameters"">Parameters</seealso>
        public new virtual SqliteParameterCollection Parameters
            => _parameters ??= new SqliteParameterCollection();

        /// <summary>
        ///     Gets the collection of parameters used by the command.
        /// </summary>
        /// <value>The collection of parameters used by the command.</value>
        protected override DbParameterCollection DbParameterCollection
            => Parameters;

        /// <summary>
        ///     Gets or sets the number of seconds to wait before terminating the attempt to execute the command.
        ///     Defaults to 30. A value of 0 means no timeout.
        /// </summary>
        /// <value>The number of seconds to wait before terminating the attempt to execute the command.</value>
        /// <remarks>
        ///     The timeout is used when the command is waiting to obtain a lock on the table.
        /// </remarks>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        public override int CommandTimeout
        {
            get => _commandTimeout ?? _connection?.DefaultTimeout ?? 30;
            set => _commandTimeout = value;
        }

        /// <summary>
        ///     Gets or sets a value indicating whether the command should be visible in an interface control.
        /// </summary>
        /// <value>A value indicating whether the command should be visible in an interface control.</value>
        public override bool DesignTimeVisible { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating how the results are applied to the row being updated.
        /// </summary>
        /// <value>A value indicating how the results are applied to the row being updated.</value>
        public override UpdateRowSource UpdatedRowSource { get; set; }

        /// <summary>
        ///     Gets or sets the data reader currently being used by the command, or null if none.
        /// </summary>
        /// <value>The data reader currently being used by the command.</value>
        protected internal virtual SqliteDataReader? DataReader { get; set; }

        /// <summary>
        ///     Releases any resources used by the connection and closes it.
        /// </summary>
        /// <param name=""disposing"">
        ///     <see langword=""true"" /> to release managed and unmanaged resources;
        ///     <see langword=""false"" /> to release only unmanaged resources.
        /// </param>
        protected override void Dispose(bool disposing)
        {
            DisposePreparedStatements(disposing);

            if (disposing)
            {
                _connection?.RemoveCommand(this);
            }

            base.Dispose(disposing);
        }

        /// <summary>
        ///     Creates a new parameter.
        /// </summary>
        /// <returns>The new parameter.</returns>
        public new virtual SqliteParameter CreateParameter()
            => new();

        /// <summary>
        ///     Creates a new parameter.
        /// </summary>
        /// <returns>The new parameter.</returns>
        protected override DbParameter CreateDbParameter()
            => CreateParameter();

        /// <summary>
        ///     Creates a prepared version of the command on the database.
        /// </summary>
        public override void Prepare()
        {
            if (_connection?.State != ConnectionState.Open)
            {
                throw new InvalidOperationException(Resources.CallRequiresOpenConnection(nameof(Prepare)));
            }

            if (_prepared)
            {
                return;
            }

            var timer = new Stopwatch();

            using var enumerator = PrepareAndEnumerateStatements(timer).GetEnumerator();
            while (enumerator.MoveNext())
            {
            }
        }

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> against the database and returns a data reader.
        /// </summary>
        /// <returns>The data reader.</returns>
        /// <exception cref=""SqliteException"">A SQLite error occurs during execution.</exception>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        public new virtual SqliteDataReader ExecuteReader()
            => ExecuteReader(CommandBehavior.Default);

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> against the database and returns a data reader.
        /// </summary>
        /// <param name=""behavior"">A description of the results of the query and its effect on the database.</param>
        /// <returns>The data reader.</returns>
        /// <exception cref=""SqliteException"">A SQLite error occurs during execution.</exception>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        public new virtual SqliteDataReader ExecuteReader(CommandBehavior behavior)
        {
            if (DataReader != null)
            {
                throw new InvalidOperationException(Resources.DataReaderOpen);
            }

            if (_connection?.State != ConnectionState.Open)
            {
                throw new InvalidOperationException(Resources.CallRequiresOpenConnection(nameof(ExecuteReader)));
            }

            if (Transaction != _connection.Transaction)
            {
                throw new InvalidOperationException(
                    Transaction == null
                        ? Resources.TransactionRequired
                        : Resources.TransactionConnectionMismatch);
            }

            if (_connection.Transaction?.ExternalRollback == true)
            {
                throw new InvalidOperationException(Resources.TransactionCompleted);
            }

            var timer = new Stopwatch();
            var closeConnection = behavior.HasFlag(CommandBehavior.CloseConnection);

            var dataReader = new SqliteDataReader(this, timer, GetStatements(timer), closeConnection);
            dataReader.NextResult();

            return DataReader = dataReader;
        }

        private IEnumerable<sqlite3_stmt> GetStatements(Stopwatch timer)
        {
            foreach ((var stmt, var expectedParams) in !_prepared
                ? PrepareAndEnumerateStatements(timer)
                : _preparedStatements)
            {
                var boundParams = _parameters?.Bind(stmt) ?? 0;

                if (expectedParams != boundParams)
                {
                    var unboundParams = new List<string>();
                    for (var i = 1; i <= expectedParams; i++)
                    {
                        var name = sqlite3_bind_parameter_name(stmt, i).utf8_to_string();

                        if (_parameters != null
                            && !_parameters.Cast<SqliteParameter>().Any(p => p.ParameterName == name))
                        {
                            unboundParams.Add(name);
                        }
                    }

                    if (sqlite3_libversion_number() < 3028000 || sqlite3_stmt_isexplain(stmt) == 0)
                    {
                        throw new InvalidOperationException(Resources.MissingParameters(string.Join("", "", unboundParams)));
                    }
                }

                yield return stmt;
            }
        }

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> against the database and returns a data reader.
        /// </summary>
        /// <param name=""behavior"">A description of query's results and its effect on the database.</param>
        /// <returns>The data reader.</returns>
        protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
            => ExecuteReader(behavior);

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> asynchronously against the database and returns a data reader.
        /// </summary>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/async"">Async Limitations</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        public new virtual Task<SqliteDataReader> ExecuteReaderAsync()
            => ExecuteReaderAsync(CommandBehavior.Default, CancellationToken.None);

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> asynchronously against the database and returns a data reader.
        /// </summary>
        /// <param name=""cancellationToken"">The token to monitor for cancellation requests.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/async"">Async Limitations</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        /// <exception cref=""OperationCanceledException"">If the <see cref=""CancellationToken""/> is canceled.</exception>
        public new virtual Task<SqliteDataReader> ExecuteReaderAsync(CancellationToken cancellationToken)
            => ExecuteReaderAsync(CommandBehavior.Default, cancellationToken);

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> asynchronously against the database and returns a data reader.
        /// </summary>
        /// <param name=""behavior"">A description of query's results and its effect on the database.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/async"">Async Limitations</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        public new virtual Task<SqliteDataReader> ExecuteReaderAsync(CommandBehavior behavior)
            => ExecuteReaderAsync(behavior, CancellationToken.None);

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> asynchronously against the database and returns a data reader.
        /// </summary>
        /// <param name=""behavior"">A description of query's results and its effect on the database.</param>
        /// <param name=""cancellationToken"">The token to monitor for cancellation requests.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/async"">Async Limitations</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        /// <exception cref=""OperationCanceledException"">If the <see cref=""CancellationToken""/> is canceled.</exception>
        public new virtual Task<SqliteDataReader> ExecuteReaderAsync(
            CommandBehavior behavior,
            CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();

            return Task.FromResult(ExecuteReader(behavior));
        }

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> asynchronously against the database and returns a data reader.
        /// </summary>
        /// <param name=""behavior"">A description of query's results and its effect on the database.</param>
        /// <param name=""cancellationToken"">The token to monitor for cancellation requests.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/async"">Async Limitations</seealso>
        /// <exception cref=""OperationCanceledException"">If the <see cref=""CancellationToken""/> is canceled.</exception>
        protected override async Task<DbDataReader> ExecuteDbDataReaderAsync(
            CommandBehavior behavior,
            CancellationToken cancellationToken)
            => await ExecuteReaderAsync(behavior, cancellationToken).ConfigureAwait(false);

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> against the database.
        /// </summary>
        /// <returns>The number of rows inserted, updated, or deleted. -1 for SELECT statements.</returns>
        /// <exception cref=""SqliteException"">A SQLite error occurs during execution.</exception>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        public override int ExecuteNonQuery()
        {
            if (_connection?.State != ConnectionState.Open)
            {
                throw new InvalidOperationException(Resources.CallRequiresOpenConnection(nameof(ExecuteNonQuery)));
            }

            var reader = ExecuteReader();
            reader.Dispose();

            return reader.RecordsAffected;
        }

        /// <summary>
        ///     Executes the <see cref=""CommandText"" /> against the database and returns the result.
        /// </summary>
        /// <returns>The first column of the first row of the results, or null if no results.</returns>
        /// <exception cref=""SqliteException"">A SQLite error occurs during execution.</exception>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        public override object? ExecuteScalar()
        {
            if (_connection?.State != ConnectionState.Open)
            {
                throw new InvalidOperationException(Resources.CallRequiresOpenConnection(nameof(ExecuteScalar)));
            }

            using var reader = ExecuteReader();
            return reader.Read()
                ? reader.GetValue(0)
                : null;
        }

        /// <summary>
        ///     Attempts to cancel the execution of the command. Does nothing.
        /// </summary>
        public override void Cancel()
        {
        }

        private IEnumerable<(sqlite3_stmt Statement, int ParamCount)> PrepareAndEnumerateStatements(Stopwatch timer)
        {
            DisposePreparedStatements(disposing: false);

            var byteCount = Encoding.UTF8.GetByteCount(_commandText);
            var sql = new byte[byteCount + 1];
            Encoding.UTF8.GetBytes(_commandText, 0, _commandText.Length, sql, 0);

            int rc;
            sqlite3_stmt stmt;
            var start = 0;
            do
            {
                timer.Start();

                ReadOnlySpan<byte> tail;
                while (IsBusy(rc = sqlite3_prepare_v2(_connection!.Handle, sql.AsSpan(start), out stmt, out tail)))
                {
                    if (CommandTimeout != 0
                        && timer.ElapsedMilliseconds >= CommandTimeout * 1000L)
                    {
                        break;
                    }

                    Thread.Sleep(150);
                }

                timer.Stop();
                start = sql.Length - tail.Length;

                SqliteException.ThrowExceptionForRC(rc, _connection.Handle);

                // Statement was empty, white space, or a comment
                if (stmt.IsInvalid)
                {
                    if (start < byteCount)
                    {
                        continue;
                    }

                    break;
                }

                var paramsCount = sqlite3_bind_parameter_count(stmt);
                var statementWithParams = (stmt, paramsCount);

                _preparedStatements.Add(statementWithParams);

                yield return statementWithParams;
            }
            while (start < byteCount);

            _prepared = true;
        }

        private void DisposePreparedStatements(bool disposing = true)
        {
            if (disposing
                && DataReader != null)
            {
                DataReader.Dispose();
                DataReader = null;
            }

            if (_preparedStatements != null)
            {
                foreach ((var stmt, _) in _preparedStatements)
                {
                    stmt.Dispose();
                }

                _preparedStatements.Clear();
            }

            _prepared = false;
        }

        private static bool IsBusy(int rc)
            => rc == SQLITE_LOCKED
                || rc == SQLITE_BUSY
                || rc == SQLITE_LOCKED_SHAREDCACHE;
    }",1,439 334 2000 58 2001 123 437 2002 63 2003 59 437 441 2004 60 40 2005 2006 44 404 2007 41 62 2008 61 418 40 1501 41 59 437 2009 63 2010 59 437 461 2011 61 461 46 2012 59 437 323 2013 59 437 404 63 2014 59 612 439 2000 40 41 123 125 612 439 2000 40 461 63 2015 41 619 2016 61 2015 59 612 439 2000 40 461 63 2015 44 2009 63 2017 41 58 467 40 2015 41 123 2018 61 2017 59 125 612 439 2000 40 461 63 2015 44 2009 63 2017 44 2019 63 2020 41 58 467 40 2015 44 2017 41 619 2021 61 2020 59 612 439 431 2022 2022 123 2023 619 2022 46 2024 59 2025 123 392 40 2026 631 2022 46 2024 41 123 469 418 2027 40 2028 46 2029 40 2026 41 41 59 125 125 125 612 91 2030 93 439 431 461 2016 123 2031 619 2011 59 2032 123 392 40 2033 631 424 41 123 469 418 2034 40 2035 46 2036 40 2037 40 2016 41 41 41 59 125 392 40 2038 631 2011 41 123 2039 40 41 59 2011 61 2038 633 461 46 2012 59 125 125 125 612 439 418 491 2009 63 2040 123 2041 619 2010 59 2042 123 392 40 2043 631 424 41 123 469 418 2044 40 2045 46 2046 40 2047 40 2040 41 41 41 59 125 392 40 2048 631 2010 41 123 2049 40 41 59 2010 634 2050 40 467 41 59 2010 61 2048 59 2048 634 2051 40 467 41 59 125 125 125 612 438 431 2052 63 2052 123 2053 619 2040 59 2054 619 2040 61 40 2009 63 41 2055 59 125 612 439 418 491 2019 63 2021 123 2056 59 2057 59 125 612 438 431 2058 63 2058 123 2059 619 2021 59 2060 619 2021 61 40 2019 63 41 2061 59 125 612 439 418 491 2002 2062 619 2003 633 61 418 2002 40 41 59 612 438 431 2063 2063 619 2062 59 612 439 431 404 2064 123 2065 619 2014 633 2010 634 2066 633 1503 59 2067 619 2014 61 2068 59 125 612 439 431 323 2069 123 2070 59 2071 59 125 612 439 431 2072 2073 123 2074 59 2075 59 125 612 438 406 491 2076 63 2077 123 2078 59 2079 59 125 612 438 431 492 2080 40 323 2081 41 123 2082 40 2081 41 59 392 40 2081 41 123 2010 634 2083 40 467 41 59 125 320 46 2080 40 2081 41 59 125 612 439 418 491 2084 2085 40 41 619 418 40 41 59 612 438 431 2086 2087 40 41 619 2085 40 41 59 612 439 431 492 2088 40 41 123 392 40 2010 634 2089 631 2090 46 2091 41 123 469 418 2092 40 2093 46 2094 40 2095 40 2088 41 41 41 59 125 392 40 2013 41 123 450 59 125 490 2096 61 418 2097 40 41 59 489 490 2098 61 2099 40 2096 41 46 2100 40 41 59 496 40 2098 46 2101 40 41 41 123 125 125 612 439 418 491 2076 2102 40 41 619 2102 40 2103 46 2104 41 59 612 439 418 491 2076 2102 40 2103 2105 41 123 392 40 2077 631 424 41 123 469 418 2106 40 2107 46 2108 41 59 125 392 40 2010 634 2109 631 2110 46 2111 41 123 469 418 2112 40 2113 46 2114 40 2115 40 2102 41 41 41 59 125 392 40 2021 631 2010 46 2021 41 123 469 418 2116 40 2021 614 424 63 2117 46 2118 58 2117 46 2119 41 59 125 392 40 2010 46 2021 634 2120 614 473 41 123 469 418 2121 40 2122 46 2123 41 59 125 490 2124 61 418 2125 40 41 59 490 2126 61 2105 46 2127 40 2103 46 2128 41 59 490 2129 61 418 2076 40 467 44 2124 44 2130 40 2124 41 44 2126 41 59 2129 46 2131 40 41 59 450 2077 61 2129 59 125 437 2132 60 2005 62 2133 40 2134 2135 41 123 386 40 40 490 2136 44 490 2137 41 398 33 2013 63 2138 40 2135 41 58 2008 41 123 490 2139 61 2003 634 2140 40 2136 41 633 1500 59 392 40 2137 631 2139 41 123 490 2141 61 418 2004 60 461 62 40 41 59 385 40 490 2142 61 1501 59 2142 620 2137 59 2142 637 41 123 490 2143 61 2144 40 2136 44 2142 41 46 2145 40 41 59 392 40 2003 631 424 605 33 2003 46 2146 60 2084 62 40 41 46 2147 40 2148 619 2148 46 2149 614 2143 41 41 123 2141 46 2150 40 2143 41 59 125 125 392 40 2151 40 41 60 1508 606 2152 40 2136 41 614 1500 41 123 469 418 2153 40 2154 46 2155 40 461 46 2156 40 648 44 2141 41 41 41 59 125 125 500 450 2136 59 125 125 612 438 431 2157 2158 40 2103 2105 41 619 2102 40 2105 41 59 612 439 418 491 2159 60 2076 62 2160 40 41 619 2160 40 2103 46 2104 44 2161 46 303 41 59 612 439 418 491 2159 60 2076 62 2160 40 2161 2162 41 619 2160 40 2103 46 2104 44 2162 41 59 612 439 418 491 2159 60 2076 62 2160 40 2103 2105 41 619 2160 40 2105 44 2161 46 303 41 59 612 439 418 491 2159 60 2076 62 2160 40 2103 2105 44 2161 2162 41 123 2162 46 2163 40 41 59 450 2159 46 2164 40 2102 40 2105 41 41 59 125 612 438 431 314 2159 60 2157 62 2165 40 2103 2105 44 2161 2162 41 619 319 2160 40 2105 44 2162 41 46 2166 40 380 41 59 612 439 431 404 2167 40 41 123 392 40 2010 634 2168 631 2169 46 2170 41 123 469 418 2171 40 2172 46 2173 40 2174 40 2167 41 41 41 59 125 490 2175 61 2102 40 41 59 2175 46 2080 40 41 59 450 2175 46 2176 59 125 612 439 431 426 63 2177 40 41 123 392 40 2010 634 2178 631 2179 46 2180 41 123 469 418 2181 40 2182 46 2183 40 2184 40 2177 41 41 41 59 125 489 490 2185 61 2102 40 41 59 450 2185 46 2186 40 41 63 2185 46 2187 40 1500 41 58 424 59 125 612 439 431 492 2188 40 41 123 125 437 2132 60 40 2005 2006 44 404 2007 41 62 2189 40 2134 2135 41 123 2190 40 2081 58 380 41 59 490 2191 61 2192 46 2193 46 2194 40 2011 41 59 490 2195 61 418 326 91 2191 43 1501 93 59 2192 46 2193 46 2196 40 2011 44 1500 44 2011 46 2197 44 2195 44 1500 41 59 404 2198 59 2005 2199 59 490 2200 61 1500 59 355 123 2135 46 2201 40 41 59 2202 60 326 62 2203 59 496 40 2204 40 2198 61 2205 40 2010 33 46 2206 44 2195 46 2207 40 2200 41 44 430 2199 44 430 2203 41 41 41 123 392 40 2064 631 1500 605 2135 46 2208 615 2064 42 1504 41 123 325 59 125 2209 46 2210 40 1504 41 59 125 2135 46 2211 40 41 59 2200 61 2195 46 2197 45 2203 46 2197 59 2212 46 2213 40 2198 44 2010 46 2206 41 59 621 392 40 2199 46 2214 41 123 392 40 2200 60 2191 41 123 344 59 125 325 59 125 490 2215 61 2216 40 2199 41 59 490 2217 61 40 2199 44 2215 41 59 2008 46 2218 40 2217 41 59 500 450 2217 59 125 496 40 2200 60 2191 41 59 2013 61 473 59 125 437 492 2219 40 323 2081 61 473 41 123 392 40 2081 605 2077 631 424 41 123 2077 46 2080 40 41 59 2077 61 424 59 125 392 40 2008 631 424 41 123 386 40 40 490 2220 44 2221 41 398 2008 41 123 2220 46 2080 40 41 59 125 2008 46 2222 40 41 59 125 2013 61 380 59 125 437 457 323 2223 40 404 2224 41 619 2224 614 2225 606 2224 614 2226 606 2224 614 2227 59 125 
72824,C#,"public class StringToNumberConverterTest
{
    private static readonly StringToNumberConverter<ulong> _naturalStringToUlong = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ulongs()
    {
        var converter = _naturalStringToUlong.ConvertToProviderExpression.Compile();

        Assert.Equal(ulong.MaxValue, converter(""18446744073709551615""));
        Assert.Equal((ulong)77, converter(""77""));
        Assert.Equal((ulong)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ulongs_object()
    {
        var converter = _naturalStringToUlong.ConvertToProvider;

        Assert.Equal(ulong.MaxValue, converter(""18446744073709551615""));
        Assert.Equal((ulong)77, converter(""77""));
        Assert.Equal((ulong)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_ulongs_to_natural_strings()
    {
        var converter = _naturalStringToUlong.ConvertFromProviderExpression.Compile();

        Assert.Equal(""18446744073709551615"", converter(ulong.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_ulongs_to_natural_strings_object()
    {
        var converter = _naturalStringToUlong.ConvertFromProvider;

        Assert.Equal(""18446744073709551615"", converter(ulong.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((ulong?)77));
        Assert.Equal(""0"", converter((ulong)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<long> _naturalStringToLong = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_longs()
    {
        var converter = _naturalStringToLong.ConvertToProviderExpression.Compile();

        Assert.Equal(long.MaxValue, converter(""9223372036854775807""));
        Assert.Equal(long.MinValue, converter(""-9223372036854775808""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-9223372036854775809""));
        Assert.Throws<OverflowException>(() => converter(""9223372036854775808""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_longs_object()
    {
        var converter = _naturalStringToLong.ConvertToProvider;

        Assert.Equal(long.MaxValue, converter(""9223372036854775807""));
        Assert.Equal(long.MinValue, converter(""-9223372036854775808""));
        Assert.Equal((long)77, converter(""77""));
        Assert.Equal((long)-77, converter(""-77""));
        Assert.Equal((long)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-9223372036854775809""));
        Assert.Throws<OverflowException>(() => converter(""9223372036854775808""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_longs_to_natural_strings()
    {
        var converter = _naturalStringToLong.ConvertFromProviderExpression.Compile();

        Assert.Equal(""9223372036854775807"", converter(long.MaxValue));
        Assert.Equal(""-9223372036854775808"", converter(long.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_longs_to_natural_strings_object()
    {
        var converter = _naturalStringToLong.ConvertFromProvider;

        Assert.Equal(""9223372036854775807"", converter(long.MaxValue));
        Assert.Equal(""-9223372036854775808"", converter(long.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((long?)77));
        Assert.Equal(""0"", converter((long)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<uint> _naturalStringToUint = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_uints()
    {
        var converter = _naturalStringToUint.ConvertToProviderExpression.Compile();

        Assert.Equal(uint.MaxValue, converter(""4294967295""));
        Assert.Equal((uint)77, converter(""77""));
        Assert.Equal((uint)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""4294967296""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_uints_object()
    {
        var converter = _naturalStringToUint.ConvertToProvider;

        Assert.Equal(uint.MaxValue, converter(""4294967295""));
        Assert.Equal((uint)77, converter(""77""));
        Assert.Equal((uint)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""4294967296""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_uints_to_natural_strings()
    {
        var converter = _naturalStringToUint.ConvertFromProviderExpression.Compile();

        Assert.Equal(""4294967295"", converter(uint.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_uints_to_natural_strings_object()
    {
        var converter = _naturalStringToUint.ConvertFromProvider;

        Assert.Equal(""4294967295"", converter(uint.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((uint?)77));
        Assert.Equal(""0"", converter((uint)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<int> _naturalStringToInt = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ints()
    {
        var converter = _naturalStringToInt.ConvertToProviderExpression.Compile();

        Assert.Equal(int.MaxValue, converter(""2147483647""));
        Assert.Equal(int.MinValue, converter(""-2147483648""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-2147483649""));
        Assert.Throws<OverflowException>(() => converter(""2147483648""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ints_object()
    {
        var converter = _naturalStringToInt.ConvertToProvider;

        Assert.Equal(int.MaxValue, converter(""2147483647""));
        Assert.Equal(int.MinValue, converter(""-2147483648""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));

        Assert.Throws<OverflowException>(() => converter(""-2147483649""));
        Assert.Throws<OverflowException>(() => converter(""2147483648""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_ints_to_natural_strings()
    {
        var converter = _naturalStringToInt.ConvertFromProviderExpression.Compile();

        Assert.Equal(""2147483647"", converter(int.MaxValue));
        Assert.Equal(""-2147483648"", converter(int.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_ints_to_natural_strings_object()
    {
        var converter = _naturalStringToInt.ConvertFromProvider;

        Assert.Equal(""2147483647"", converter(int.MaxValue));
        Assert.Equal(""-2147483648"", converter(int.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((int?)77));
        Assert.Equal(""0"", converter((int?)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<ushort> _naturalStringToUshort = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ushorts()
    {
        var converter = _naturalStringToUshort.ConvertToProviderExpression.Compile();

        Assert.Equal(ushort.MaxValue, converter(""65535""));
        Assert.Equal((ushort)77, converter(""77""));
        Assert.Equal((ushort)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""65536""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ushorts_object()
    {
        var converter = _naturalStringToUshort.ConvertToProvider;

        Assert.Equal(ushort.MaxValue, converter(""65535""));
        Assert.Equal((ushort)77, converter(""77""));
        Assert.Equal((ushort)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""65536""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_ushorts_to_natural_strings()
    {
        var converter = _naturalStringToUshort.ConvertFromProviderExpression.Compile();

        Assert.Equal(""65535"", converter(ushort.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_ushorts_to_natural_strings_object()
    {
        var converter = _naturalStringToUshort.ConvertFromProvider;

        Assert.Equal(""65535"", converter(ushort.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((ushort?)77));
        Assert.Equal(""0"", converter((ushort)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<short> _naturalStringToShort = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_shorts()
    {
        var converter = _naturalStringToShort.ConvertToProviderExpression.Compile();

        Assert.Equal(short.MaxValue, converter(""32767""));
        Assert.Equal(short.MinValue, converter(""-32768""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-32769""));
        Assert.Throws<OverflowException>(() => converter(""32768""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_shorts_object()
    {
        var converter = _naturalStringToShort.ConvertToProvider;

        Assert.Equal(short.MaxValue, converter(""32767""));
        Assert.Equal(short.MinValue, converter(""-32768""));
        Assert.Equal((short)77, converter(""77""));
        Assert.Equal((short)-77, converter(""-77""));
        Assert.Equal((short)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-32769""));
        Assert.Throws<OverflowException>(() => converter(""32768""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_shorts_to_natural_strings()
    {
        var converter = _naturalStringToShort.ConvertFromProviderExpression.Compile();

        Assert.Equal(""32767"", converter(short.MaxValue));
        Assert.Equal(""-32768"", converter(short.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_shorts_to_natural_strings_object()
    {
        var converter = _naturalStringToShort.ConvertFromProvider;

        Assert.Equal(""32767"", converter(short.MaxValue));
        Assert.Equal(""-32768"", converter(short.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((short?)77));
        Assert.Equal(""0"", converter((short)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<byte> _naturalStringToByte = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_bytes()
    {
        var converter = _naturalStringToByte.ConvertToProviderExpression.Compile();

        Assert.Equal(byte.MaxValue, converter(""255""));
        Assert.Equal((byte)77, converter(""77""));
        Assert.Equal((byte)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""256""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_bytes_object()
    {
        var converter = _naturalStringToByte.ConvertToProvider;

        Assert.Equal(byte.MaxValue, converter(""255""));
        Assert.Equal((byte)77, converter(""77""));
        Assert.Equal((byte)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""256""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_bytes_to_natural_strings()
    {
        var converter = _naturalStringToByte.ConvertFromProviderExpression.Compile();

        Assert.Equal(""255"", converter(byte.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_bytes_to_natural_strings_object()
    {
        var converter = _naturalStringToByte.ConvertFromProvider;

        Assert.Equal(""255"", converter(byte.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((byte?)77));
        Assert.Equal(""0"", converter((byte)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<sbyte> _naturalStringToSbyte = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_sbytes()
    {
        var converter = _naturalStringToSbyte.ConvertToProviderExpression.Compile();

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_sbytes_object()
    {
        var converter = _naturalStringToSbyte.ConvertToProvider;

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal((sbyte)77, converter(""77""));
        Assert.Equal((sbyte)-77, converter(""-77""));
        Assert.Equal((sbyte)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_sbytes_to_natural_strings()
    {
        var converter = _naturalStringToSbyte.ConvertFromProviderExpression.Compile();

        Assert.Equal(""127"", converter(sbyte.MaxValue));
        Assert.Equal(""-128"", converter(sbyte.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_sbytes_to_natural_strings_object()
    {
        var converter = _naturalStringToSbyte.ConvertFromProvider;

        Assert.Equal(""127"", converter(sbyte.MaxValue));
        Assert.Equal(""-128"", converter(sbyte.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((sbyte?)77));
        Assert.Equal(""0"", converter((sbyte)0));
        Assert.Null(converter(null));
    }

    private static readonly StringToNumberConverter<decimal> _naturalStringToDecimal = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_decimals()
    {
        var converter = _naturalStringToDecimal.ConvertToProviderExpression.Compile();

        Assert.Equal(decimal.MaxValue, converter(""79228162514264337593543950335""));
        Assert.Equal(decimal.MinValue, converter(""-79228162514264337593543950335""));
        Assert.Equal((decimal)-792264.3375935, converter(""-792264.3375935""));
        Assert.Equal((decimal)0.000000001, converter(""0.000000001""));
        Assert.Equal((decimal)0.00000000000000000001, converter(""0.00000000000000000001""));
        Assert.Equal((decimal)-0.00000000000000000001, converter(""-0.00000000000000000001""));

        Assert.Throws<OverflowException>(() => converter(""-79228162514264337593543950336""));
        Assert.Throws<OverflowException>(() => converter(""79228162514264337593543950336""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_decimals_to_natural_strings()
    {
        var converter = _naturalStringToDecimal.ConvertFromProviderExpression.Compile();

        Assert.Equal(""79228162514264337593543950335"", converter(decimal.MaxValue));
        Assert.Equal(""-79228162514264337593543950335"", converter(decimal.MinValue));
        Assert.Equal(""-792264.3375935"", converter((decimal)-792264.3375935));
        Assert.Equal(""0.000000001"", converter((decimal)0.000000001));
        Assert.Equal(""0.00000000000000000001"", converter((decimal)0.00000000000000000001));
        Assert.Equal(""-0.00000000000000000001"", converter((decimal)-0.00000000000000000001));
    }

    private static readonly StringToNumberConverter<double> _naturalStringToDouble = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_doubles()
    {
        var converter = _naturalStringToDouble.ConvertToProviderExpression.Compile();

        Assert.Equal(double.MaxValue, converter(""1.7976931348623157E+308""));
        Assert.Equal(double.MinValue, converter(""-1.7976931348623157E+308""));
        Assert.Equal(-792264.3375935, converter(""-792264.3375935""));
        Assert.Equal(0.000000001, converter(""1E-09""));
        Assert.Equal(0.00000000000000000001, converter(""1E-20""));
        Assert.Equal(-0.00000000000000000001, converter(""-1E-20""));

        Assert.Equal(double.PositiveInfinity, converter(""1.7976931348623157E+309""));
        Assert.Equal(double.NegativeInfinity, converter(""-1.7976931348623157E+309""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_doubles_to_natural_strings()
    {
        var converter = _naturalStringToDouble.ConvertFromProviderExpression.Compile();

        Assert.Equal(""1.7976931348623157E+308"", converter(double.MaxValue));
        Assert.Equal(""-1.7976931348623157E+308"", converter(double.MinValue));
        Assert.Equal(""-792264.3375935"", converter(-792264.3375935));
        Assert.Equal(""1E-09"", converter(0.000000001));
        Assert.Equal(""1E-20"", converter(0.00000000000000000001));
        Assert.Equal(""-1E-20"", converter(-0.00000000000000000001));
    }

    private static readonly StringToNumberConverter<float> _naturalStringToFloat = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_floats()
    {
        var converter = _naturalStringToFloat.ConvertToProviderExpression.Compile();

        Assert.Equal(float.MaxValue, converter(""3.40282347E+38""));
        Assert.Equal(float.MinValue, converter(""-3.40282347E+38""));
        Assert.Equal((float)-79.3335, converter(""-79.3335""));
        Assert.Equal((float)0.000000001, converter(""1E-09""));
        Assert.Equal((float)0.00000000000000000001, converter(""1E-20""));
        Assert.Equal((float)-0.00000000000000000001, converter(""-1E-20""));

        Assert.Equal(float.PositiveInfinity, converter(""3.40282347E+39""));
        Assert.Equal(float.NegativeInfinity, converter(""-3.40282347E+39""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_floats_to_natural_strings()
    {
        var converter = _naturalStringToFloat.ConvertFromProviderExpression.Compile();

        Assert.Equal(""3.4028235E+38"", converter(float.MaxValue));
        Assert.Equal(""-3.4028235E+38"", converter(float.MinValue));
        Assert.Equal(""-79.3335"", converter((float)-79.3335));
        Assert.Equal(""1E-09"", converter((float)0.000000001));
        Assert.Equal(""1E-20"", converter((float)0.00000000000000000001));
        Assert.Equal(""-1E-20"", converter((float)-0.00000000000000000001));
    }

    private static readonly StringToNumberConverter<sbyte?> _naturalStringToNullableSbyte = new();

    [ConditionalFact]
    public void Can_convert_natural_strings_to_nullable_sbytes()
    {
        var converter = _naturalStringToNullableSbyte.ConvertToProviderExpression.Compile();

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal((sbyte?)77, converter(""77""));
        Assert.Equal((sbyte?)-77, converter(""-77""));
        Assert.Equal((sbyte?)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_nullable_sbytes_object()
    {
        var converter = _naturalStringToNullableSbyte.ConvertToProvider;

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal((sbyte)77, converter(""77""));
        Assert.Equal((sbyte)-77, converter(""-77""));
        Assert.Equal((sbyte?)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_nullable_sbytes_to_natural_strings()
    {
        var converter = _naturalStringToNullableSbyte.ConvertFromProviderExpression.Compile();

        Assert.Equal(""127"", converter(sbyte.MaxValue));
        Assert.Equal(""-128"", converter(sbyte.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_nullable_sbytes_to_natural_strings_object()
    {
        var converter = _naturalStringToNullableSbyte.ConvertFromProvider;

        Assert.Equal(""127"", converter((sbyte?)sbyte.MaxValue));
        Assert.Equal(""-128"", converter((sbyte?)sbyte.MinValue));
        Assert.Equal(""77"", converter((sbyte?)77));
        Assert.Equal(""-77"", converter((sbyte?)-77));
        Assert.Equal(""0"", converter((sbyte?)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void String_to_integer_converter_throws_for_bad_type()
        => Assert.Equal(
            CoreStrings.ConverterBadType(
                typeof(StringNumberConverter<string, Guid, Guid>).ShortDisplayName(),
                ""Guid"",
                ""'int', 'long', 'short', 'byte', 'uint', 'ulong', 'ushort', 'sbyte', 'decimal', 'float', 'double'""),
            Assert.Throws<InvalidOperationException>(
                () => new StringToNumberConverter<Guid>()).Message);
}",1,439 334 2000 123 437 457 441 2001 60 480 62 2002 61 418 40 41 59 91 2003 93 439 492 2004 40 41 123 490 2005 61 2002 46 2006 46 2007 40 41 59 2008 46 2009 40 480 46 2010 44 2005 40 648 41 41 59 2008 46 2009 40 40 480 41 1503 44 2005 40 648 41 41 59 2008 46 2009 40 40 480 41 1500 44 2005 40 648 41 41 59 2008 46 2011 60 2012 62 40 40 41 619 2005 40 648 41 41 59 2008 46 2011 60 2013 62 40 40 41 619 2005 40 648 41 41 59 2008 46 2011 60 2014 62 40 40 41 619 2005 40 424 41 41 59 125 91 2003 93 439 492 2015 40 41 123 490 2016 61 2002 46 2017 59 2018 46 2019 40 480 46 2020 44 2016 40 648 41 41 59 2018 46 2019 40 40 480 41 1503 44 2016 40 648 41 41 59 2018 46 2019 40 40 480 41 1500 44 2016 40 648 41 41 59 2018 46 2021 60 2022 62 40 40 41 619 2016 40 648 41 41 59 2018 46 2021 60 2023 62 40 40 41 619 2016 40 648 41 41 59 2018 46 2024 40 2016 40 424 41 41 59 125 91 2003 93 439 492 2025 40 41 123 490 2026 61 2002 46 2027 46 2028 40 41 59 2029 46 2030 40 648 44 2026 40 480 46 2031 41 41 59 2029 46 2030 40 648 44 2026 40 1503 41 41 59 2029 46 2030 40 648 44 2026 40 1500 41 41 59 125 91 2003 93 439 492 2032 40 41 123 490 2033 61 2002 46 2034 59 2035 46 2036 40 648 44 2033 40 480 46 2037 41 41 59 2035 46 2036 40 648 44 2033 40 1503 41 41 59 2035 46 2036 40 648 44 2033 40 40 480 63 41 1503 41 41 59 2035 46 2036 40 648 44 2033 40 40 480 41 1500 41 41 59 2035 46 2038 40 2033 40 424 41 41 59 125 437 457 441 2001 60 413 62 2039 61 418 40 41 59 91 2003 93 439 492 2040 40 41 123 490 2041 61 2039 46 2042 46 2043 40 41 59 2044 46 2045 40 413 46 2046 44 2041 40 648 41 41 59 2044 46 2045 40 413 46 2047 44 2041 40 648 41 41 59 2044 46 2045 40 1503 44 2041 40 648 41 41 59 2044 46 2045 40 45 1503 44 2041 40 648 41 41 59 2044 46 2045 40 1500 44 2041 40 648 41 41 59 2044 46 2048 60 2049 62 40 40 41 619 2041 40 648 41 41 59 2044 46 2048 60 2049 62 40 40 41 619 2041 40 648 41 41 59 2044 46 2048 60 2050 62 40 40 41 619 2041 40 648 41 41 59 2044 46 2048 60 2051 62 40 40 41 619 2041 40 424 41 41 59 125 91 2003 93 439 492 2052 40 41 123 490 2053 61 2039 46 2054 59 2055 46 2056 40 413 46 2057 44 2053 40 648 41 41 59 2055 46 2056 40 413 46 2058 44 2053 40 648 41 41 59 2055 46 2056 40 40 413 41 1503 44 2053 40 648 41 41 59 2055 46 2056 40 40 413 41 45 1503 44 2053 40 648 41 41 59 2055 46 2056 40 40 413 41 1500 44 2053 40 648 41 41 59 2055 46 2059 60 2060 62 40 40 41 619 2053 40 648 41 41 59 2055 46 2059 60 2060 62 40 40 41 619 2053 40 648 41 41 59 2055 46 2059 60 2061 62 40 40 41 619 2053 40 648 41 41 59 2055 46 2062 40 2053 40 424 41 41 59 125 91 2003 93 439 492 2063 40 41 123 490 2064 61 2039 46 2065 46 2066 40 41 59 2067 46 2068 40 648 44 2064 40 413 46 2069 41 41 59 2067 46 2068 40 648 44 2064 40 413 46 2070 41 41 59 2067 46 2068 40 648 44 2064 40 1503 41 41 59 2067 46 2068 40 648 44 2064 40 45 1503 41 41 59 2067 46 2068 40 648 44 2064 40 1500 41 41 59 125 91 2003 93 439 492 2071 40 41 123 490 2072 61 2039 46 2073 59 2074 46 2075 40 648 44 2072 40 413 46 2076 41 41 59 2074 46 2075 40 648 44 2072 40 413 46 2077 41 41 59 2074 46 2075 40 648 44 2072 40 1503 41 41 59 2074 46 2075 40 648 44 2072 40 45 1503 41 41 59 2074 46 2075 40 648 44 2072 40 40 413 63 41 1503 41 41 59 2074 46 2075 40 648 44 2072 40 40 413 41 1500 41 41 59 2074 46 2078 40 2072 40 424 41 41 59 125 437 457 441 2001 60 479 62 2079 61 418 40 41 59 91 2003 93 439 492 2080 40 41 123 490 2081 61 2079 46 2082 46 2083 40 41 59 2084 46 2085 40 479 46 2086 44 2081 40 648 41 41 59 2084 46 2085 40 40 479 41 1503 44 2081 40 648 41 41 59 2084 46 2085 40 40 479 41 1500 44 2081 40 648 41 41 59 2084 46 2087 60 2088 62 40 40 41 619 2081 40 648 41 41 59 2084 46 2087 60 2088 62 40 40 41 619 2081 40 648 41 41 59 2084 46 2087 60 2089 62 40 40 41 619 2081 40 648 41 41 59 2084 46 2087 60 2090 62 40 40 41 619 2081 40 424 41 41 59 125 91 2003 93 439 492 2091 40 41 123 490 2092 61 2079 46 2093 59 2094 46 2095 40 479 46 2096 44 2092 40 648 41 41 59 2094 46 2095 40 40 479 41 1503 44 2092 40 648 41 41 59 2094 46 2095 40 40 479 41 1500 44 2092 40 648 41 41 59 2094 46 2097 60 2098 62 40 40 41 619 2092 40 648 41 41 59 2094 46 2097 60 2098 62 40 40 41 619 2092 40 648 41 41 59 2094 46 2097 60 2099 62 40 40 41 619 2092 40 648 41 41 59 2094 46 2100 40 2092 40 424 41 41 59 125 91 2003 93 439 492 2101 40 41 123 490 2102 61 2079 46 2103 46 2104 40 41 59 2105 46 2106 40 648 44 2102 40 479 46 2107 41 41 59 2105 46 2106 40 648 44 2102 40 1503 41 41 59 2105 46 2106 40 648 44 2102 40 1500 41 41 59 125 91 2003 93 439 492 2108 40 41 123 490 2109 61 2079 46 2110 59 2111 46 2112 40 648 44 2109 40 479 46 2113 41 41 59 2111 46 2112 40 648 44 2109 40 1503 41 41 59 2111 46 2112 40 648 44 2109 40 40 479 63 41 1503 41 41 59 2111 46 2112 40 648 44 2109 40 40 479 41 1500 41 41 59 2111 46 2114 40 2109 40 424 41 41 59 125 437 457 441 2001 60 404 62 2115 61 418 40 41 59 91 2003 93 439 492 2116 40 41 123 490 2117 61 2115 46 2118 46 2119 40 41 59 2120 46 2121 40 404 46 2122 44 2117 40 648 41 41 59 2120 46 2121 40 404 46 2123 44 2117 40 648 41 41 59 2120 46 2121 40 1503 44 2117 40 648 41 41 59 2120 46 2121 40 45 1503 44 2117 40 648 41 41 59 2120 46 2121 40 1500 44 2117 40 648 41 41 59 2120 46 2124 60 2125 62 40 40 41 619 2117 40 648 41 41 59 2120 46 2124 60 2125 62 40 40 41 619 2117 40 648 41 41 59 2120 46 2124 60 2126 62 40 40 41 619 2117 40 648 41 41 59 2120 46 2124 60 2127 62 40 40 41 619 2117 40 424 41 41 59 125 91 2003 93 439 492 2128 40 41 123 490 2129 61 2115 46 2130 59 2131 46 2132 40 404 46 2133 44 2129 40 648 41 41 59 2131 46 2132 40 404 46 2134 44 2129 40 648 41 41 59 2131 46 2132 40 1503 44 2129 40 648 41 41 59 2131 46 2132 40 45 1503 44 2129 40 648 41 41 59 2131 46 2135 60 2136 62 40 40 41 619 2129 40 648 41 41 59 2131 46 2135 60 2136 62 40 40 41 619 2129 40 648 41 41 59 2131 46 2135 60 2137 62 40 40 41 619 2129 40 648 41 41 59 2131 46 2138 40 2129 40 424 41 41 59 125 91 2003 93 439 492 2139 40 41 123 490 2140 61 2115 46 2141 46 2142 40 41 59 2143 46 2144 40 648 44 2140 40 404 46 2145 41 41 59 2143 46 2144 40 648 44 2140 40 404 46 2146 41 41 59 2143 46 2144 40 648 44 2140 40 1503 41 41 59 2143 46 2144 40 648 44 2140 40 45 1503 41 41 59 2143 46 2144 40 648 44 2140 40 1500 41 41 59 125 91 2003 93 439 492 2147 40 41 123 490 2148 61 2115 46 2149 59 2150 46 2151 40 648 44 2148 40 404 46 2152 41 41 59 2150 46 2151 40 648 44 2148 40 404 46 2153 41 41 59 2150 46 2151 40 648 44 2148 40 1503 41 41 59 2150 46 2151 40 648 44 2148 40 45 1503 41 41 59 2150 46 2151 40 648 44 2148 40 40 404 63 41 1503 41 41 59 2150 46 2151 40 648 44 2148 40 40 404 63 41 1500 41 41 59 2150 46 2154 40 2148 40 424 41 41 59 125 437 457 441 2001 60 488 62 2155 61 418 40 41 59 91 2003 93 439 492 2156 40 41 123 490 2157 61 2155 46 2158 46 2159 40 41 59 2160 46 2161 40 488 46 2162 44 2157 40 648 41 41 59 2160 46 2161 40 40 488 41 1503 44 2157 40 648 41 41 59 2160 46 2161 40 40 488 41 1500 44 2157 40 648 41 41 59 2160 46 2163 60 2164 62 40 40 41 619 2157 40 648 41 41 59 2160 46 2163 60 2164 62 40 40 41 619 2157 40 648 41 41 59 2160 46 2163 60 2165 62 40 40 41 619 2157 40 648 41 41 59 2160 46 2163 60 2166 62 40 40 41 619 2157 40 424 41 41 59 125 91 2003 93 439 492 2167 40 41 123 490 2168 61 2155 46 2169 59 2170 46 2171 40 488 46 2172 44 2168 40 648 41 41 59 2170 46 2171 40 40 488 41 1503 44 2168 40 648 41 41 59 2170 46 2171 40 40 488 41 1500 44 2168 40 648 41 41 59 2170 46 2173 60 2174 62 40 40 41 619 2168 40 648 41 41 59 2170 46 2173 60 2174 62 40 40 41 619 2168 40 648 41 41 59 2170 46 2173 60 2175 62 40 40 41 619 2168 40 648 41 41 59 2170 46 2176 40 2168 40 424 41 41 59 125 91 2003 93 439 492 2177 40 41 123 490 2178 61 2155 46 2179 46 2180 40 41 59 2181 46 2182 40 648 44 2178 40 488 46 2183 41 41 59 2181 46 2182 40 648 44 2178 40 1503 41 41 59 2181 46 2182 40 648 44 2178 40 1500 41 41 59 125 91 2003 93 439 492 2184 40 41 123 490 2185 61 2155 46 2186 59 2187 46 2188 40 648 44 2185 40 488 46 2189 41 41 59 2187 46 2188 40 648 44 2185 40 1503 41 41 59 2187 46 2188 40 648 44 2185 40 40 488 63 41 1503 41 41 59 2187 46 2188 40 648 44 2185 40 40 488 41 1500 41 41 59 2187 46 2190 40 2185 40 424 41 41 59 125 437 457 441 2001 60 453 62 2191 61 418 40 41 59 91 2003 93 439 492 2192 40 41 123 490 2193 61 2191 46 2194 46 2195 40 41 59 2196 46 2197 40 453 46 2198 44 2193 40 648 41 41 59 2196 46 2197 40 453 46 2199 44 2193 40 648 41 41 59 2196 46 2197 40 1503 44 2193 40 648 41 41 59 2196 46 2197 40 45 1503 44 2193 40 648 41 41 59 2196 46 2197 40 1500 44 2193 40 648 41 41 59 2196 46 2200 60 2201 62 40 40 41 619 2193 40 648 41 41 59 2196 46 2200 60 2201 62 40 40 41 619 2193 40 648 41 41 59 2196 46 2200 60 2202 62 40 40 41 619 2193 40 648 41 41 59 2196 46 2200 60 2203 62 40 40 41 619 2193 40 424 41 41 59 125 91 2003 93 439 492 2204 40 41 123 490 2205 61 2191 46 2206 59 2207 46 2208 40 453 46 2209 44 2205 40 648 41 41 59 2207 46 2208 40 453 46 2210 44 2205 40 648 41 41 59 2207 46 2208 40 40 453 41 1503 44 2205 40 648 41 41 59 2207 46 2208 40 40 453 41 45 1503 44 2205 40 648 41 41 59 2207 46 2208 40 40 453 41 1500 44 2205 40 648 41 41 59 2207 46 2211 60 2212 62 40 40 41 619 2205 40 648 41 41 59 2207 46 2211 60 2212 62 40 40 41 619 2205 40 648 41 41 59 2207 46 2211 60 2213 62 40 40 41 619 2205 40 648 41 41 59 2207 46 2214 40 2205 40 424 41 41 59 125 91 2003 93 439 492 2215 40 41 123 490 2216 61 2191 46 2217 46 2218 40 41 59 2219 46 2220 40 648 44 2216 40 453 46 2221 41 41 59 2219 46 2220 40 648 44 2216 40 453 46 2222 41 41 59 2219 46 2220 40 648 44 2216 40 1503 41 41 59 2219 46 2220 40 648 44 2216 40 45 1503 41 41 59 2219 46 2220 40 648 44 2216 40 1500 41 41 59 125 91 2003 93 439 492 2223 40 41 123 490 2224 61 2191 46 2225 59 2226 46 2227 40 648 44 2224 40 453 46 2228 41 41 59 2226 46 2227 40 648 44 2224 40 453 46 2229 41 41 59 2226 46 2227 40 648 44 2224 40 1503 41 41 59 2226 46 2227 40 648 44 2224 40 45 1503 41 41 59 2226 46 2227 40 648 44 2224 40 40 453 63 41 1503 41 41 59 2226 46 2227 40 648 44 2224 40 40 453 41 1500 41 41 59 2226 46 2230 40 2224 40 424 41 41 59 125 437 457 441 2001 60 326 62 2231 61 418 40 41 59 91 2003 93 439 492 2232 40 41 123 490 2233 61 2231 46 2234 46 2235 40 41 59 2236 46 2237 40 326 46 2238 44 2233 40 648 41 41 59 2236 46 2237 40 40 326 41 1503 44 2233 40 648 41 41 59 2236 46 2237 40 40 326 41 1500 44 2233 40 648 41 41 59 2236 46 2239 60 2240 62 40 40 41 619 2233 40 648 41 41 59 2236 46 2239 60 2240 62 40 40 41 619 2233 40 648 41 41 59 2236 46 2239 60 2241 62 40 40 41 619 2233 40 424 41 41 59 125 91 2003 93 439 492 2242 40 41 123 490 2243 61 2231 46 2244 59 2245 46 2246 40 326 46 2247 44 2243 40 648 41 41 59 2245 46 2246 40 40 326 41 1503 44 2243 40 648 41 41 59 2245 46 2246 40 40 326 41 1500 44 2243 40 648 41 41 59 2245 46 2248 60 2249 62 40 40 41 619 2243 40 648 41 41 59 2245 46 2248 60 2249 62 40 40 41 619 2243 40 648 41 41 59 2245 46 2250 40 2243 40 424 41 41 59 125 91 2003 93 439 492 2251 40 41 123 490 2252 61 2231 46 2253 46 2254 40 41 59 2255 46 2256 40 648 44 2252 40 326 46 2257 41 41 59 2255 46 2256 40 648 44 2252 40 1503 41 41 59 2255 46 2256 40 648 44 2252 40 1500 41 41 59 125 91 2003 93 439 492 2258 40 41 123 490 2259 61 2231 46 2260 59 2261 46 2262 40 648 44 2259 40 326 46 2263 41 41 59 2261 46 2262 40 648 44 2259 40 1503 41 41 59 2261 46 2262 40 648 44 2259 40 40 326 63 41 1503 41 41 59 2261 46 2262 40 648 44 2259 40 40 326 41 1500 41 41 59 2261 46 2264 40 2259 40 424 41 41 59 125 437 457 441 2001 60 451 62 2265 61 418 40 41 59 91 2003 93 439 492 2266 40 41 123 490 2267 61 2265 46 2268 46 2269 40 41 59 2270 46 2271 40 451 46 2272 44 2267 40 648 41 41 59 2270 46 2271 40 451 46 2273 44 2267 40 648 41 41 59 2270 46 2271 40 1503 44 2267 40 648 41 41 59 2270 46 2271 40 45 1503 44 2267 40 648 41 41 59 2270 46 2271 40 1500 44 2267 40 648 41 41 59 2270 46 2274 60 2275 62 40 40 41 619 2267 40 648 41 41 59 2270 46 2274 60 2275 62 40 40 41 619 2267 40 648 41 41 59 2270 46 2274 60 2276 62 40 40 41 619 2267 40 648 41 41 59 2270 46 2274 60 2277 62 40 40 41 619 2267 40 424 41 41 59 125 91 2003 93 439 492 2278 40 41 123 490 2279 61 2265 46 2280 59 2281 46 2282 40 451 46 2283 44 2279 40 648 41 41 59 2281 46 2282 40 451 46 2284 44 2279 40 648 41 41 59 2281 46 2282 40 40 451 41 1503 44 2279 40 648 41 41 59 2281 46 2282 40 40 451 41 45 1503 44 2279 40 648 41 41 59 2281 46 2282 40 40 451 41 1500 44 2279 40 648 41 41 59 2281 46 2285 60 2286 62 40 40 41 619 2279 40 648 41 41 59 2281 46 2285 60 2286 62 40 40 41 619 2279 40 648 41 41 59 2281 46 2285 60 2287 62 40 40 41 619 2279 40 648 41 41 59 2281 46 2288 40 2279 40 424 41 41 59 125 91 2003 93 439 492 2289 40 41 123 490 2290 61 2265 46 2291 46 2292 40 41 59 2293 46 2294 40 648 44 2290 40 451 46 2295 41 41 59 2293 46 2294 40 648 44 2290 40 451 46 2296 41 41 59 2293 46 2294 40 648 44 2290 40 1503 41 41 59 2293 46 2294 40 648 44 2290 40 45 1503 41 41 59 2293 46 2294 40 648 44 2290 40 1500 41 41 59 125 91 2003 93 439 492 2297 40 41 123 490 2298 61 2265 46 2299 59 2300 46 2301 40 648 44 2298 40 451 46 2302 41 41 59 2300 46 2301 40 648 44 2298 40 451 46 2303 41 41 59 2300 46 2301 40 648 44 2298 40 1503 41 41 59 2300 46 2301 40 648 44 2298 40 45 1503 41 41 59 2300 46 2301 40 648 44 2298 40 40 451 63 41 1503 41 41 59 2300 46 2301 40 648 44 2298 40 40 451 41 1500 41 41 59 2300 46 2304 40 2298 40 424 41 41 59 125 437 457 441 2001 60 345 62 2305 61 418 40 41 59 91 2003 93 439 492 2306 40 41 123 490 2307 61 2305 46 2308 46 2309 40 41 59 2310 46 2311 40 345 46 2312 44 2307 40 648 41 41 59 2310 46 2311 40 345 46 2313 44 2307 40 648 41 41 59 2310 46 2311 40 40 345 41 45 1507 44 2307 40 648 41 41 59 2310 46 2311 40 40 345 41 1491 44 2307 40 648 41 41 59 2310 46 2311 40 40 345 41 1480 44 2307 40 648 41 41 59 2310 46 2311 40 40 345 41 45 1480 44 2307 40 648 41 41 59 2310 46 2314 60 2315 62 40 40 41 619 2307 40 648 41 41 59 2310 46 2314 60 2315 62 40 40 41 619 2307 40 648 41 41 59 2310 46 2314 60 2316 62 40 40 41 619 2307 40 648 41 41 59 2310 46 2314 60 2317 62 40 40 41 619 2307 40 424 41 41 59 125 91 2003 93 439 492 2318 40 41 123 490 2319 61 2305 46 2320 46 2321 40 41 59 2322 46 2323 40 648 44 2319 40 345 46 2324 41 41 59 2322 46 2323 40 648 44 2319 40 345 46 2325 41 41 59 2322 46 2323 40 648 44 2319 40 40 345 41 45 1507 41 41 59 2322 46 2323 40 648 44 2319 40 40 345 41 1491 41 41 59 2322 46 2323 40 648 44 2319 40 40 345 41 1480 41 41 59 2322 46 2323 40 648 44 2319 40 40 345 41 45 1480 41 41 59 125 437 457 441 2001 60 356 62 2326 61 418 40 41 59 91 2003 93 439 492 2327 40 41 123 490 2328 61 2326 46 2329 46 2330 40 41 59 2331 46 2332 40 356 46 2333 44 2328 40 648 41 41 59 2331 46 2332 40 356 46 2334 44 2328 40 648 41 41 59 2331 46 2332 40 45 1507 44 2328 40 648 41 41 59 2331 46 2332 40 1491 44 2328 40 648 41 41 59 2331 46 2332 40 1480 44 2328 40 648 41 41 59 2331 46 2332 40 45 1480 44 2328 40 648 41 41 59 2331 46 2332 40 356 46 2335 44 2328 40 648 41 41 59 2331 46 2332 40 356 46 2336 44 2328 40 648 41 41 59 2331 46 2337 60 2338 62 40 40 41 619 2328 40 648 41 41 59 2331 46 2337 60 2339 62 40 40 41 619 2328 40 424 41 41 59 125 91 2003 93 439 492 2340 40 41 123 490 2341 61 2326 46 2342 46 2343 40 41 59 2344 46 2345 40 648 44 2341 40 356 46 2346 41 41 59 2344 46 2345 40 648 44 2341 40 356 46 2347 41 41 59 2344 46 2345 40 648 44 2341 40 45 1507 41 41 59 2344 46 2345 40 648 44 2341 40 1491 41 41 59 2344 46 2345 40 648 44 2341 40 1480 41 41 59 2344 46 2345 40 648 44 2341 40 45 1480 41 41 59 125 437 457 441 2001 60 384 62 2348 61 418 40 41 59 91 2003 93 439 492 2349 40 41 123 490 2350 61 2348 46 2351 46 2352 40 41 59 2353 46 2354 40 384 46 2355 44 2350 40 648 41 41 59 2353 46 2354 40 384 46 2356 44 2350 40 648 41 41 59 2353 46 2354 40 40 384 41 45 1503 44 2350 40 648 41 41 59 2353 46 2354 40 40 384 41 1491 44 2350 40 648 41 41 59 2353 46 2354 40 40 384 41 1480 44 2350 40 648 41 41 59 2353 46 2354 40 40 384 41 45 1480 44 2350 40 648 41 41 59 2353 46 2354 40 384 46 2357 44 2350 40 648 41 41 59 2353 46 2354 40 384 46 2358 44 2350 40 648 41 41 59 2353 46 2359 60 2360 62 40 40 41 619 2350 40 648 41 41 59 2353 46 2359 60 2361 62 40 40 41 619 2350 40 424 41 41 59 125 91 2003 93 439 492 2362 40 41 123 490 2363 61 2348 46 2364 46 2365 40 41 59 2366 46 2367 40 648 44 2363 40 384 46 2368 41 41 59 2366 46 2367 40 648 44 2363 40 384 46 2369 41 41 59 2366 46 2367 40 648 44 2363 40 40 384 41 45 1503 41 41 59 2366 46 2367 40 648 44 2363 40 40 384 41 1491 41 41 59 2366 46 2367 40 648 44 2363 40 40 384 41 1480 41 41 59 2366 46 2367 40 648 44 2363 40 40 384 41 45 1480 41 41 59 125 437 457 441 2001 60 451 63 62 2370 61 418 40 41 59 91 2003 93 439 492 2371 40 41 123 490 2372 61 2370 46 2373 46 2374 40 41 59 2375 46 2376 40 451 46 2377 44 2372 40 648 41 41 59 2375 46 2376 40 451 46 2378 44 2372 40 648 41 41 59 2375 46 2376 40 40 451 63 41 1503 44 2372 40 648 41 41 59 2375 46 2376 40 40 451 63 41 45 1503 44 2372 40 648 41 41 59 2375 46 2376 40 40 451 63 41 1500 44 2372 40 648 41 41 59 2375 46 2379 60 2380 62 40 40 41 619 2372 40 648 41 41 59 2375 46 2379 60 2380 62 40 40 41 619 2372 40 648 41 41 59 2375 46 2379 60 2381 62 40 40 41 619 2372 40 648 41 41 59 2375 46 2382 40 2372 40 424 41 41 59 125 91 2003 93 439 492 2383 40 41 123 490 2384 61 2370 46 2385 59 2386 46 2387 40 451 46 2388 44 2384 40 648 41 41 59 2386 46 2387 40 451 46 2389 44 2384 40 648 41 41 59 2386 46 2387 40 40 451 41 1503 44 2384 40 648 41 41 59 2386 46 2387 40 40 451 41 45 1503 44 2384 40 648 41 41 59 2386 46 2387 40 40 451 63 41 1500 44 2384 40 648 41 41 59 2386 46 2390 60 2391 62 40 40 41 619 2384 40 648 41 41 59 2386 46 2390 60 2391 62 40 40 41 619 2384 40 648 41 41 59 2386 46 2390 60 2392 62 40 40 41 619 2384 40 648 41 41 59 2386 46 2393 40 2384 40 424 41 41 59 125 91 2003 93 439 492 2394 40 41 123 490 2395 61 2370 46 2396 46 2397 40 41 59 2398 46 2399 40 648 44 2395 40 451 46 2400 41 41 59 2398 46 2399 40 648 44 2395 40 451 46 2401 41 41 59 2398 46 2399 40 648 44 2395 40 1503 41 41 59 2398 46 2399 40 648 44 2395 40 45 1503 41 41 59 2398 46 2399 40 648 44 2395 40 1500 41 41 59 2398 46 2402 40 2395 40 424 41 41 59 125 91 2003 93 439 492 2403 40 41 123 490 2404 61 2370 46 2405 59 2406 46 2407 40 648 44 2404 40 40 451 63 41 451 46 2408 41 41 59 2406 46 2407 40 648 44 2404 40 40 451 63 41 451 46 2409 41 41 59 2406 46 2407 40 648 44 2404 40 40 451 63 41 1503 41 41 59 2406 46 2407 40 648 44 2404 40 40 451 63 41 45 1503 41 41 59 2406 46 2407 40 648 44 2404 40 40 451 63 41 1500 41 41 59 2406 46 2410 40 2404 40 424 41 41 59 125 91 2003 93 439 492 2411 40 41 619 2412 46 2413 40 2414 46 2415 40 478 40 2416 60 461 44 2417 44 2417 62 41 46 2418 40 41 44 648 44 648 41 44 2412 46 2419 60 2420 62 40 40 41 619 418 2001 60 2417 62 40 41 41 46 2421 41 59 125 
68988,C#,"public class DbParameterCollectionExtensionsTest
{
    [ConditionalFact]
    public void Formats_string_parameter()
        => Assert.Equal(
            ""@param='Muffin'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.String, true, 0, 0, 0));

    [ConditionalFact]
    public void Format_parameter_with_direction()
        => Assert.Equal(
            ""@param='Muffin' (Direction = Output)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Output, DbType.String, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_non_nullable_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (Nullable = false)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.String, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_non_unicode_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (DbType = AnsiString)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.AnsiString, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_non_unicode_non_nullable_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (Nullable = false) (DbType = AnsiString)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.AnsiString, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_non_unicode_non_nullable_sized_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (Nullable = false) (Size = 100) (DbType = AnsiString)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.AnsiString, false, 100, 0, 0));

    [ConditionalFact]
    public void Formats_null_string_parameter()
        => Assert.Equal(
            ""@param=NULL"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", null, true, ParameterDirection.Input, DbType.String, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_null_non_unicode_string_parameter()
        => Assert.Equal(
            ""@param=NULL (DbType = AnsiString)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", null, true, ParameterDirection.Input, DbType.AnsiString, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_fixed_length_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (DbType = StringFixedLength)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.StringFixedLength, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_fixed_length_non_nullable_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (Nullable = false) (DbType = StringFixedLength)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.StringFixedLength, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_fixed_length_non_nullable_sized_string_parameter()
        => Assert.Equal(
            ""@param='Muffin' (Nullable = false) (Size = 100) (DbType = StringFixedLength)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""Muffin"", true, ParameterDirection.Input, DbType.StringFixedLength, false, 100, 0, 0));

    [ConditionalFact]
    public void Formats_null_fixed_length_string_parameter()
        => Assert.Equal(
            ""@param=NULL (DbType = StringFixedLength)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", null, true, ParameterDirection.Input, DbType.StringFixedLength, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_sensitive_string_parameter()
        => Assert.Equal(
            ""@param='?'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""?"", false, ParameterDirection.Input, DbType.String, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_sensitive_non_nullable_string_parameter()
        => Assert.Equal(
            ""@param='?'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""?"", false, ParameterDirection.Input, DbType.String, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_int_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", 777, true, ParameterDirection.Input, DbType.Int32, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_nullable_int_parameter()
        => Assert.Equal(
            ""@param='777' (Nullable = true)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", 777, true, ParameterDirection.Input, DbType.Int32, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_int_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", 777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_int_parameter_with_no_type()
        => Assert.Equal(
            ""@param='777' (DbType = AnsiString)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", 777, true, ParameterDirection.Input, 0, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_null_nullable_int_parameter()
        => Assert.Equal(
            ""@param=NULL (DbType = Int32)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", null, true, ParameterDirection.Input, DbType.Int32, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_sensitive_int_parameter()
        => Assert.Equal(
            ""@param='?' (DbType = Int32)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""?"", false, ParameterDirection.Input, DbType.Int32, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_sensitive_nullable_int_parameter()
        => Assert.Equal(
            ""@param='?' (DbType = Int32)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", ""?"", false, ParameterDirection.Input, DbType.Int32, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_short_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (short)777, true, ParameterDirection.Input, DbType.Int16, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_short_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (short)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_long_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (long)777, true, ParameterDirection.Input, DbType.Int64, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_long_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (long)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_byte_parameter()
        => Assert.Equal(
            ""@param='77'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (byte)77, true, ParameterDirection.Input, DbType.Byte, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_byte_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='77' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (byte)77, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_uint_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (uint)777, true, ParameterDirection.Input, DbType.UInt32, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_uint_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (uint)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_ushort_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (ushort)777, true, ParameterDirection.Input, DbType.UInt16, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_ushort_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (ushort)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_ulong_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (ulong)777, true, ParameterDirection.Input, DbType.UInt64, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_ulong_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (ulong)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_sbyte_parameter()
        => Assert.Equal(
            ""@param='77'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (sbyte)77, true, ParameterDirection.Input, DbType.SByte, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_sbyte_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='77' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (sbyte)77, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_binary_parameter()
        => Assert.Equal(
            ""@param='0x0102'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new byte[] { 1, 2 }, true, ParameterDirection.Input, DbType.Binary, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_binary_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='0x0102' (DbType = Object)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new byte[] { 1, 2 }, true, ParameterDirection.Input, DbType.Object, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_bool_parameter()
        => Assert.Equal(
            ""@param='True'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", true, true, ParameterDirection.Input, DbType.Boolean, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_bool_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='True' (DbType = Int32)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", true, true, ParameterDirection.Input, DbType.Int32, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_decimal_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (decimal)777, true, ParameterDirection.Input, DbType.Decimal, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_decimal_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (decimal)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_decimal_parameter_with_precision()
        => Assert.Equal(
            ""@param='77.7' (Precision = 18)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (decimal)77.7, true, ParameterDirection.Input, DbType.Decimal, false, 0, 18, 0));

    [ConditionalFact]
    public void Formats_decimal_parameter_with_scale()
        => Assert.Equal(
            ""@param='77.7' (Scale = 2)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (decimal)77.7, true, ParameterDirection.Input, DbType.Decimal, false, 0, 0, 2));

    [ConditionalFact]
    public void Formats_decimal_parameter_with_precision_and_scale()
        => Assert.Equal(
            ""@param='77.7' (Precision = 18) (Scale = 2)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (decimal)77.7, true, ParameterDirection.Input, DbType.Decimal, false, 0, 18, 2));

    [ConditionalFact]
    public void Formats_double_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (double)777, true, ParameterDirection.Input, DbType.Double, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_double_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (double)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_float_parameter()
        => Assert.Equal(
            ""@param='777'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (float)777, true, ParameterDirection.Input, DbType.Single, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_float_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='777' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", (float)777, true, ParameterDirection.Input, DbType.VarNumeric, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_Guid_parameter()
        => Assert.Equal(
            ""@param='304afb2a-8b8c-49ac-996e-8561f7559a3f'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", Guid.Parse(""304afb2a-8b8c-49ac-996e-8561f7559a3f""),
                true, ParameterDirection.Input, DbType.Guid, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_Guid_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='304afb2a-8b8c-49ac-996e-8561f7559a3f' (DbType = Binary)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", Guid.Parse(""304afb2a-8b8c-49ac-996e-8561f7559a3f""),
                true, ParameterDirection.Input, DbType.Binary, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_object_parameter()
        => Assert.Equal(
            ""@param='System.Object'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new object(), true, ParameterDirection.Input, DbType.Object, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_object_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='System.Object' (DbType = VarNumeric)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new object(), true, ParameterDirection.Input, DbType.VarNumeric, true, 0, 0, 0));

    [ConditionalFact]
    public void Formats_DateTime_parameter()
        => Assert.Equal(
            ""@param='1973-09-03T00:00:00.0000000'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new DateTime(1973, 9, 3), true, ParameterDirection.Input, DbType.DateTime2, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_DateTime_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='1973-09-03T00:00:00.0000000' (DbType = DateTime)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new DateTime(1973, 9, 3), true, ParameterDirection.Input, DbType.DateTime, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_DateTimeOffset_parameter()
        => Assert.Equal(
            ""@param='1973-09-03T00:00:00.0000000-08:00'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new DateTimeOffset(new DateTime(1973, 9, 3), new TimeSpan(-8, 0, 0)),
                true, ParameterDirection.Input, DbType.DateTimeOffset, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_DateTimeOffset_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='1973-09-03T00:00:00.0000000-08:00' (DbType = Date)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new DateTimeOffset(new DateTime(1973, 9, 3), new TimeSpan(-8, 0, 0)),
                true, ParameterDirection.Input, DbType.Date, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_TimeSpan_parameter()
        => Assert.Equal(
            ""@param='-08:00:00'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new TimeSpan(-8, 0, 0), true, ParameterDirection.Input, DbType.Time, false, 0, 0, 0));

    [ConditionalFact]
    public void Formats_TimeSpan_parameter_with_unusual_type()
        => Assert.Equal(
            ""@param='-08:00:00' (DbType = DateTime)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", new TimeSpan(-8, 0, 0), true, ParameterDirection.Input, DbType.DateTime, false, 0, 0, 0));

    [ConditionalFact]
    public void Short_byte_arrays_are_not_truncated()
    {
        var shortArray = new Guid(""21EC2020-3AEA-4069-A2DD-08002B30309D"").ToByteArray();
        var longerShortArray = shortArray.Concat(shortArray).ToArray();

        Assert.Equal(
            ""@param='0x2020EC21EA3A6940A2DD08002B30309D'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", shortArray, true, ParameterDirection.Input, DbType.Binary, true, 0, 0, 0));

        Assert.Equal(
            ""@param='0x2020EC21EA3A6940A2DD08002B30309D2020EC21EA3A6940A2DD08002B30309D'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", longerShortArray, true, ParameterDirection.Input, DbType.Binary, true, 0, 0, 0));
    }

    [ConditionalFact]
    public void Long_byte_arrays_are_truncated()
    {
        var shortArray = new Guid(""21EC2020-3AEA-4069-A2DD-08002B30309D"").ToByteArray();
        var longArray = shortArray.Concat(shortArray).Concat(shortArray).ToArray();

        Assert.Equal(
            ""@param='0x2020EC21EA3A6940A2DD08002B30309D2020EC21EA3A6940A2DD08002B30309D...'"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", longArray, true, ParameterDirection.Input, DbType.Binary, true, 0, 0, 0));
    }

    [ConditionalFact]
    public void Short_arrays_are_not_truncated()
    {
        var array = new[] { 1, 2, 3, 4, 5 };

        Assert.Equal(
            ""@param={ '1', '2', '3', '4', '5' } (DbType = Object)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", array, true, ParameterDirection.Input, DbType.Object, true, 0, 0, 0));
    }

    [ConditionalFact]
    public void Long_arrays_are_truncated()
    {
        var array = new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

        Assert.Equal(
            ""@param={ '1', '2', '3', '4', '5', ... } (DbType = Object)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", array, true, ParameterDirection.Input, DbType.Object, true, 0, 0, 0));
    }

    [ConditionalFact]
    public void Short_generic_lists_are_not_truncated()
    {
        var array = new List<int>
        {
            1,
            2,
            3,
            4,
            5
        };

        Assert.Equal(
            ""@param={ '1', '2', '3', '4', '5' } (DbType = Object)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", array, true, ParameterDirection.Input, DbType.Object, true, 0, 0, 0));
    }

    [ConditionalFact]
    public void Long_generic_lists_are_truncated()
    {
        var array = new List<int>
        {
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10
        };

        Assert.Equal(
            ""@param={ '1', '2', '3', '4', '5', ... } (DbType = Object)"",
            DbParameterCollectionExtensions.FormatParameter(
                ""@param"", array, true, ParameterDirection.Input, DbType.Object, true, 0, 0, 0));
    }
}",1,439 334 2000 123 91 2001 93 439 492 2002 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2010 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2011 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2012 44 2009 46 2010 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2013 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2010 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2014 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2015 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2016 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2015 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2017 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2015 44 380 44 1503 44 1500 44 1500 41 41 59 91 2001 93 439 492 2018 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 424 44 473 44 2007 46 2008 44 2009 46 2010 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2019 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 424 44 473 44 2007 46 2008 44 2009 46 2015 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2020 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2021 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2022 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2021 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2023 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 473 44 2007 46 2008 44 2009 46 2021 44 380 44 1503 44 1500 44 1500 41 41 59 91 2001 93 439 492 2024 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 424 44 473 44 2007 46 2008 44 2009 46 2021 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2025 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 380 44 2007 46 2008 44 2009 46 2010 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2026 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 380 44 2007 46 2008 44 2009 46 2010 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2027 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 1504 44 473 44 2007 46 2008 44 2009 46 2028 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2029 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 1504 44 473 44 2007 46 2008 44 2009 46 2028 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2030 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2032 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 1504 44 473 44 2007 46 2008 44 1500 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2033 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 424 44 473 44 2007 46 2008 44 2009 46 2028 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2034 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 380 44 2007 46 2008 44 2009 46 2028 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2035 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 648 44 380 44 2007 46 2008 44 2009 46 2028 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2036 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 453 41 1504 44 473 44 2007 46 2008 44 2009 46 2037 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2038 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 453 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2039 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 413 41 1504 44 473 44 2007 46 2008 44 2009 46 2040 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2041 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 413 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2042 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 326 41 1503 44 473 44 2007 46 2008 44 2009 46 2043 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2044 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 326 41 1503 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2045 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 479 41 1504 44 473 44 2007 46 2008 44 2009 46 2046 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2047 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 479 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2048 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 488 41 1504 44 473 44 2007 46 2008 44 2009 46 2049 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2050 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 488 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2051 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 480 41 1504 44 473 44 2007 46 2008 44 2009 46 2052 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2053 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 480 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2054 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 451 41 1503 44 473 44 2007 46 2008 44 2009 46 2055 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2056 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 451 41 1503 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2057 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 326 91 93 123 1501 44 1502 125 44 473 44 2007 46 2008 44 2009 46 2058 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2059 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 326 91 93 123 1501 44 1502 125 44 473 44 2007 46 2008 44 2009 46 2060 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2061 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 473 44 473 44 2007 46 2008 44 2009 46 2062 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2063 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 473 44 473 44 2007 46 2008 44 2009 46 2028 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2064 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 345 41 1504 44 473 44 2007 46 2008 44 2009 46 2065 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2066 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 345 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2067 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 345 41 1503 44 473 44 2007 46 2008 44 2009 46 2065 44 380 44 1500 44 1503 44 1500 41 41 59 91 2001 93 439 492 2068 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 345 41 1503 44 473 44 2007 46 2008 44 2009 46 2065 44 380 44 1500 44 1500 44 1502 41 41 59 91 2001 93 439 492 2069 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 345 41 1503 44 473 44 2007 46 2008 44 2009 46 2065 44 380 44 1500 44 1503 44 1502 41 41 59 91 2001 93 439 492 2070 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 356 41 1504 44 473 44 2007 46 2008 44 2009 46 2071 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2072 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 356 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2073 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 384 41 1504 44 473 44 2007 46 2008 44 2009 46 2074 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2075 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 40 384 41 1504 44 473 44 2007 46 2008 44 2009 46 2031 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2076 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 2077 46 2078 40 648 41 44 473 44 2007 46 2008 44 2009 46 2077 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2079 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 2077 46 2078 40 648 41 44 473 44 2007 46 2008 44 2009 46 2058 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2080 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 426 40 41 44 473 44 2007 46 2008 44 2009 46 2060 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2081 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 426 40 41 44 473 44 2007 46 2008 44 2009 46 2031 44 473 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2082 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 2083 40 1505 44 1502 44 1502 41 44 473 44 2007 46 2008 44 2009 46 2084 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2085 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 2083 40 1505 44 1502 44 1502 41 44 473 44 2007 46 2008 44 2009 46 2083 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2086 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 2087 40 418 2083 40 1505 44 1502 44 1502 41 44 418 2088 40 45 1502 44 1500 44 1500 41 41 44 473 44 2007 46 2008 44 2009 46 2087 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2089 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 2087 40 418 2083 40 1505 44 1502 44 1502 41 44 418 2088 40 45 1502 44 1500 44 1500 41 41 44 473 44 2007 46 2008 44 2009 46 2090 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2091 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 2088 40 45 1502 44 1500 44 1500 41 44 473 44 2007 46 2008 44 2009 46 2092 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2093 40 41 619 2003 46 2004 40 648 44 2005 46 2006 40 648 44 418 2088 40 45 1502 44 1500 44 1500 41 44 473 44 2007 46 2008 44 2009 46 2083 44 380 44 1500 44 1500 44 1500 41 41 59 91 2001 93 439 492 2094 40 41 123 490 2095 61 418 2077 40 648 41 46 2096 40 41 59 490 2097 61 2095 46 2098 40 2095 41 46 2099 40 41 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 2095 44 473 44 2007 46 2008 44 2009 46 2058 44 473 44 1500 44 1500 44 1500 41 41 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 2097 44 473 44 2007 46 2008 44 2009 46 2058 44 473 44 1500 44 1500 44 1500 41 41 59 125 91 2001 93 439 492 2100 40 41 123 490 2101 61 418 2077 40 648 41 46 2102 40 41 59 490 2103 61 2101 46 2104 40 2101 41 46 2104 40 2101 41 46 2105 40 41 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 2103 44 473 44 2007 46 2008 44 2009 46 2058 44 473 44 1500 44 1500 44 1500 41 41 59 125 91 2001 93 439 492 2106 40 41 123 490 310 61 418 91 93 123 1501 44 1502 44 1502 44 1502 44 1502 125 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 310 44 473 44 2007 46 2008 44 2009 46 2060 44 473 44 1500 44 1500 44 1500 41 41 59 125 91 2001 93 439 492 2107 40 41 123 490 310 61 418 91 93 123 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 125 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 310 44 473 44 2007 46 2008 44 2009 46 2060 44 473 44 1500 44 1500 44 1500 41 41 59 125 91 2001 93 439 492 2108 40 41 123 490 310 61 418 2109 60 404 62 123 1501 44 1502 44 1502 44 1502 44 1502 125 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 310 44 473 44 2007 46 2008 44 2009 46 2060 44 473 44 1500 44 1500 44 1500 41 41 59 125 91 2001 93 439 492 2110 40 41 123 490 310 61 418 2111 60 404 62 123 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 125 59 2003 46 2004 40 648 44 2005 46 2006 40 648 44 310 44 473 44 2007 46 2008 44 2009 46 2060 44 473 44 1500 44 1500 44 1500 41 41 59 125 125 
68796,C#,"public abstract class RelationalTypeMappingTest
{
    protected class FakeValueConverter : ValueConverter<object, object>
    {
        public FakeValueConverter()
            : base(_ => _, _ => _)
        {
        }

        public override Type ModelClrType { get; } = typeof(object);
        public override Type ProviderClrType { get; } = typeof(object);
    }

    protected class FakeValueComparer : ValueComparer<object>
    {
        public FakeValueComparer()
            : base(false)
        {
        }

        public override Type Type { get; } = typeof(object);
    }

    [ConditionalTheory]
    [InlineData(typeof(BoolTypeMapping), typeof(bool))]
    [InlineData(typeof(ByteTypeMapping), typeof(byte))]
    [InlineData(typeof(CharTypeMapping), typeof(char))]
    [InlineData(typeof(DateTimeOffsetTypeMapping), typeof(DateTimeOffset))]
    [InlineData(typeof(DateTimeTypeMapping), typeof(DateTime))]
    [InlineData(typeof(DecimalTypeMapping), typeof(decimal))]
    [InlineData(typeof(DoubleTypeMapping), typeof(double))]
    [InlineData(typeof(FloatTypeMapping), typeof(float))]
    [InlineData(typeof(GuidTypeMapping), typeof(Guid))]
    [InlineData(typeof(IntTypeMapping), typeof(int))]
    [InlineData(typeof(LongTypeMapping), typeof(long))]
    [InlineData(typeof(SByteTypeMapping), typeof(sbyte))]
    [InlineData(typeof(ShortTypeMapping), typeof(short))]
    [InlineData(typeof(TimeSpanTypeMapping), typeof(TimeSpan))]
    [InlineData(typeof(UIntTypeMapping), typeof(uint))]
    [InlineData(typeof(ULongTypeMapping), typeof(ulong))]
    [InlineData(typeof(UShortTypeMapping), typeof(ushort))]
    public virtual void Create_and_clone_with_converter(Type mappingType, Type type)
    {
        var mapping = (RelationalTypeMapping)Activator.CreateInstance(
            mappingType,
            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.CreateInstance,
            null,
            new[] { FakeTypeMapping.CreateParameters(type) },
            null,
            null);

        var clone = mapping.Clone(""<clone>"", null);

        Assert.NotSame(mapping, clone);
        Assert.Same(mapping.GetType(), clone.GetType());
        Assert.Equal(""<clone>"", clone.StoreType);
        Assert.Equal(DbType.VarNumeric, clone.DbType);
        Assert.Null(clone.Size);
        Assert.NotNull(mapping.Converter);
        Assert.Same(mapping.Converter, clone.Converter);
        Assert.Same(mapping.Comparer, clone.Comparer);
        Assert.Same(mapping.KeyComparer, clone.KeyComparer);
        Assert.Same(typeof(object), clone.ClrType);
        Assert.Equal(StoreTypePostfix.PrecisionAndScale, clone.StoreTypePostfix);

        var newConverter = new FakeValueConverter();
        clone = (RelationalTypeMapping)mapping.Clone(newConverter);

        Assert.NotSame(mapping, clone);
        Assert.Same(mapping.GetType(), clone.GetType());
        Assert.Equal(""<original>"", clone.StoreType);
        Assert.Equal(DbType.VarNumeric, clone.DbType);
        Assert.Null(clone.Size);
        Assert.NotSame(mapping.Converter, clone.Converter);
        Assert.Same(mapping.Comparer, clone.Comparer);
        Assert.Same(mapping.KeyComparer, clone.KeyComparer);
        Assert.Same(typeof(object), clone.ClrType);
        Assert.Equal(StoreTypePostfix.PrecisionAndScale, clone.StoreTypePostfix);
    }

    [ConditionalFact]
    public virtual void Create_and_clone_sized_mappings_with_converter()
        => ConversionCloneTest(typeof(ByteArrayTypeMapping), typeof(byte[]));

    protected virtual void ConversionCloneTest(
        Type mappingType,
        Type type,
        params object[] additionalArgs)
    {
        var mapping = (RelationalTypeMapping)Activator.CreateInstance(
            mappingType,
            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.CreateInstance,
            null,
            new[]
            {
                FakeTypeMapping.CreateParameters(
                    type,
                    size: 33,
                    fixedLength: true,
                    storeTypePostfix: StoreTypePostfix.Size)
            }.Concat(additionalArgs).ToArray(),
            null,
            null);

        var clone = mapping.Clone(""<clone>"", 66);

        Assert.NotSame(mapping, clone);
        Assert.Same(mapping.GetType(), clone.GetType());
        Assert.Equal(""<original>(33)"", mapping.StoreType);
        Assert.Equal(""<clone>(66)"", clone.StoreType);
        Assert.Equal(DbType.VarNumeric, clone.DbType);
        Assert.Equal(33, mapping.Size);
        Assert.Equal(66, clone.Size);
        Assert.NotNull(mapping.Converter);
        Assert.Same(mapping.Converter, clone.Converter);
        Assert.Same(mapping.Comparer, clone.Comparer);
        Assert.Same(mapping.KeyComparer, clone.KeyComparer);
        Assert.Same(typeof(object), clone.ClrType);
        Assert.True(mapping.IsFixedLength);
        Assert.True(clone.IsFixedLength);
        Assert.Equal(StoreTypePostfix.Size, clone.StoreTypePostfix);

        var newConverter = new FakeValueConverter();
        clone = (RelationalTypeMapping)mapping.Clone(newConverter);

        Assert.NotSame(mapping, clone);
        Assert.Same(mapping.GetType(), clone.GetType());
        Assert.Equal(""<original>(33)"", mapping.StoreType);
        Assert.Equal(""<original>(33)"", clone.StoreType);
        Assert.Equal(DbType.VarNumeric, clone.DbType);
        Assert.Equal(33, mapping.Size);
        Assert.Equal(33, clone.Size);
        Assert.NotSame(mapping.Converter, clone.Converter);
        Assert.Same(mapping.Comparer, clone.Comparer);
        Assert.Same(mapping.KeyComparer, clone.KeyComparer);
        Assert.Same(typeof(object), clone.ClrType);
        Assert.True(mapping.IsFixedLength);
        Assert.True(clone.IsFixedLength);
        Assert.Equal(StoreTypePostfix.Size, clone.StoreTypePostfix);
    }

    [ConditionalFact]
    public virtual void Create_and_clone_unicode_sized_mappings_with_converter()
        => UnicodeConversionCloneTest(typeof(StringTypeMapping), typeof(string));

    protected virtual void UnicodeConversionCloneTest(
        Type mappingType,
        Type type,
        params object[] additionalArgs)
    {
        var mapping = (RelationalTypeMapping)Activator.CreateInstance(
            mappingType,
            BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.CreateInstance,
            null,
            new[]
            {
                FakeTypeMapping.CreateParameters(
                    type,
                    size: 33,
                    unicode: false,
                    fixedLength: true,
                    storeTypePostfix: StoreTypePostfix.Size)
            }.Concat(additionalArgs).ToArray(),
            null,
            null);

        var clone = mapping.Clone(""<clone>"", 66);

        Assert.NotSame(mapping, clone);
        Assert.Same(mapping.GetType(), clone.GetType());
        Assert.Equal(""<original>(33)"", mapping.StoreType);
        Assert.Equal(""<clone>(66)"", clone.StoreType);
        Assert.Equal(DbType.VarNumeric, clone.DbType);
        Assert.Equal(33, mapping.Size);
        Assert.Equal(66, clone.Size);
        Assert.False(mapping.IsUnicode);
        Assert.False(clone.IsUnicode);
        Assert.NotNull(mapping.Converter);
        Assert.Same(mapping.Converter, clone.Converter);
        Assert.Same(mapping.Comparer, clone.Comparer);
        Assert.Same(mapping.KeyComparer, clone.KeyComparer);
        Assert.Same(typeof(object), clone.ClrType);
        Assert.True(mapping.IsFixedLength);
        Assert.True(clone.IsFixedLength);
        Assert.Equal(StoreTypePostfix.Size, clone.StoreTypePostfix);

        var newConverter = new FakeValueConverter();
        clone = (RelationalTypeMapping)mapping.Clone(newConverter);

        Assert.NotSame(mapping, clone);
        Assert.Same(mapping.GetType(), clone.GetType());
        Assert.Equal(""<original>(33)"", mapping.StoreType);
        Assert.Equal(""<original>(33)"", clone.StoreType);
        Assert.Equal(DbType.VarNumeric, clone.DbType);
        Assert.Equal(33, mapping.Size);
        Assert.Equal(33, clone.Size);
        Assert.False(mapping.IsUnicode);
        Assert.False(clone.IsUnicode);
        Assert.NotSame(mapping.Converter, clone.Converter);
        Assert.Same(mapping.Comparer, clone.Comparer);
        Assert.Same(mapping.KeyComparer, clone.KeyComparer);
        Assert.Same(typeof(object), clone.ClrType);
        Assert.True(mapping.IsFixedLength);
        Assert.True(clone.IsFixedLength);
        Assert.Equal(StoreTypePostfix.Size, clone.StoreTypePostfix);
    }

    private class FakeTypeMapping : RelationalTypeMapping
    {
        private FakeTypeMapping(RelationalTypeMappingParameters parameters)
            : base(parameters)
        {
        }

        public FakeTypeMapping()
            : base(""storeType"", typeof(object))
        {
        }

        public static object CreateParameters(
            Type type,
            int? size = null,
            bool unicode = false,
            bool fixedLength = false,
            StoreTypePostfix storeTypePostfix = StoreTypePostfix.PrecisionAndScale)
            => new RelationalTypeMappingParameters(
                new CoreTypeMappingParameters(
                    type,
                    new FakeValueConverter(),
                    new FakeValueComparer(),
                    new FakeValueComparer()),
                ""<original>"",
                storeTypePostfix,
                System.Data.DbType.VarNumeric,
                size: size,
                unicode: unicode,
                fixedLength: fixedLength);

        protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters)
            => new FakeTypeMapping(parameters);
    }

    [ConditionalFact]
    public void Can_create_simple_parameter()
    {
        using var command = CreateTestCommand();
        var parameter = new IntTypeMapping(""int"")
            .CreateParameter(command, ""Name"", 17, nullable: false);

        Assert.Equal(ParameterDirection.Input, parameter.Direction);
        Assert.Equal(""Name"", parameter.ParameterName);
        Assert.Equal(17, parameter.Value);
        Assert.Equal(DbType.Int32, parameter.DbType);
        Assert.False(parameter.IsNullable);
    }

    [ConditionalFact]
    public void Can_create_simple_nullable_parameter()
    {
        using var command = CreateTestCommand();
        var parameter = new IntTypeMapping(""int"")
            .CreateParameter(command, ""Name"", 17, nullable: true);

        Assert.Equal(ParameterDirection.Input, parameter.Direction);
        Assert.Equal(""Name"", parameter.ParameterName);
        Assert.Equal(17, parameter.Value);
        Assert.Equal(DbType.Int32, parameter.DbType);
        Assert.True(parameter.IsNullable);
    }

    [ConditionalFact]
    public void Can_create_simple_parameter_with_DbType()
    {
        using var command = CreateTestCommand();
        var parameter = new IntTypeMapping(""int"", DbType.Int32)
            .CreateParameter(command, ""Name"", 17, nullable: false);

        Assert.Equal(ParameterDirection.Input, parameter.Direction);
        Assert.Equal(""Name"", parameter.ParameterName);
        Assert.Equal(17, parameter.Value);
        Assert.Equal(DbType.Int32, parameter.DbType);
        Assert.False(parameter.IsNullable);
    }

    [ConditionalFact]
    public void Can_create_simple_nullable_parameter_with_DbType()
    {
        using var command = CreateTestCommand();
        var parameter = new IntTypeMapping(""int"", DbType.Int32)
            .CreateParameter(command, ""Name"", 17, nullable: true);

        Assert.Equal(ParameterDirection.Input, parameter.Direction);
        Assert.Equal(""Name"", parameter.ParameterName);
        Assert.Equal(17, parameter.Value);
        Assert.Equal(DbType.Int32, parameter.DbType);
        Assert.True(parameter.IsNullable);
    }

    [ConditionalFact]
    public void Can_create_required_string_parameter()
    {
        using var command = CreateTestCommand();
        var parameter = new StringTypeMapping(""nvarchar(23)"", DbType.String, unicode: true, size: 23)
            .CreateParameter(command, ""Name"", ""Value"", nullable: false);

        Assert.Equal(ParameterDirection.Input, parameter.Direction);
        Assert.Equal(""Name"", parameter.ParameterName);
        Assert.Equal(""Value"", parameter.Value);
        Assert.Equal(DbType.String, parameter.DbType);
        Assert.False(parameter.IsNullable);
        Assert.Equal(5, parameter.Size);
    }

    [ConditionalFact]
    public void Can_create_string_parameter()
    {
        using var command = CreateTestCommand();
        var parameter = new StringTypeMapping(""nvarchar(23)"", DbType.String, unicode: true, size: 23)
            .CreateParameter(command, ""Name"", ""Value"", nullable: true);

        Assert.Equal(ParameterDirection.Input, parameter.Direction);
        Assert.Equal(""Name"", parameter.ParameterName);
        Assert.Equal(""Value"", parameter.Value);
        Assert.Equal(DbType.String, parameter.DbType);
        Assert.True(parameter.IsNullable);
        Assert.Equal(5, parameter.Size);
    }

    protected virtual void Test_GenerateSqlLiteral_helper(
        RelationalTypeMapping typeMapping,
        object value,
        string literalValue)
        => Assert.Equal(literalValue, typeMapping.GenerateSqlLiteral(value));

    [ConditionalFact]
    public virtual void Bool_literal_generated_correctly()
    {
        var typeMapping = new BoolTypeMapping(""bool"");

        Test_GenerateSqlLiteral_helper(typeMapping, true, ""1"");
        Test_GenerateSqlLiteral_helper(typeMapping, false, ""0"");
    }

    [ConditionalFact]
    public virtual void ByteArray_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(new ByteArrayTypeMapping(""byte[]""), new byte[] { 0xDA, 0x7A }, ""X'DA7A'"");

    [ConditionalFact]
    public virtual void Byte_literal_generated_correctly()
    {
        var typeMapping = new ByteTypeMapping(""byte"", DbType.Byte);

        Test_GenerateSqlLiteral_helper(typeMapping, byte.MinValue, ""0"");
        Test_GenerateSqlLiteral_helper(typeMapping, byte.MaxValue, ""255"");
    }

    [ConditionalFact]
    public virtual void Char_literal_generated_correctly()
    {
        Test_GenerateSqlLiteral_helper(new CharTypeMapping(""char""), 'A', ""'A'"");
        Test_GenerateSqlLiteral_helper(new CharTypeMapping(""char""), '\'', ""''''"");
    }

    [ConditionalFact]
    public virtual void DateTimeOffset_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(
            new DateTimeOffsetTypeMapping(""DateTimeOffset""),
            new DateTimeOffset(2015, 3, 12, 13, 36, 37, 371, new TimeSpan(-7, 0, 0)),
            ""TIMESTAMP '2015-03-12 13:36:37.3710000-07:00'"");

    [ConditionalFact]
    public virtual void DateTime_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(
            new DateTimeTypeMapping(""DateTime""),
            new DateTime(2015, 3, 12, 13, 36, 37, 371, DateTimeKind.Utc),
            ""TIMESTAMP '2015-03-12 13:36:37.3710000'"");

    [ConditionalFact]
    public virtual void DateOnly_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(
            new DateOnlyTypeMapping(""DateOnly""),
            new DateOnly(2015, 3, 12),
            ""DATE '2015-03-12'"");

    [ConditionalFact]
    public virtual void TimeOnly_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(
            new TimeOnlyTypeMapping(""TimeOnly""),
            new TimeOnly(13, 10, 15),
            ""TIME '13:10:15'"");

    [ConditionalFact]
    public virtual void TimeOnly_literal_generated_correctly_with_milliseconds()
        => Test_GenerateSqlLiteral_helper(
            new TimeOnlyTypeMapping(""TimeOnly""),
            new TimeOnly(13, 10, 15, 500),
            ""TIME '13:10:15.5'"");

    [ConditionalFact]
    public virtual void Decimal_literal_generated_correctly()
    {
        var typeMapping = new DecimalTypeMapping(""decimal"", DbType.Decimal);

        Test_GenerateSqlLiteral_helper(typeMapping, decimal.MinValue, ""-79228162514264337593543950335.0"");
        Test_GenerateSqlLiteral_helper(typeMapping, decimal.MaxValue, ""79228162514264337593543950335.0"");
    }

    [ConditionalFact]
    public virtual void Double_literal_generated_correctly()
    {
        var typeMapping = new DoubleTypeMapping(""double"", DbType.Double);

        Test_GenerateSqlLiteral_helper(typeMapping, double.NaN, ""NaN"");
        Test_GenerateSqlLiteral_helper(typeMapping, double.PositiveInfinity, ""Infinity"");
        Test_GenerateSqlLiteral_helper(typeMapping, double.NegativeInfinity, ""-Infinity"");
        Test_GenerateSqlLiteral_helper(typeMapping, double.MinValue, ""-1.7976931348623157E+308"");
        Test_GenerateSqlLiteral_helper(typeMapping, double.MaxValue, ""1.7976931348623157E+308"");
    }

    [ConditionalFact]
    public virtual void Float_literal_generated_correctly()
    {
        var typeMapping = new FloatTypeMapping(""float"", DbType.Single);

        Test_GenerateSqlLiteral_helper(typeMapping, float.NaN, ""NaN"");
        Test_GenerateSqlLiteral_helper(typeMapping, float.PositiveInfinity, ""Infinity"");
        Test_GenerateSqlLiteral_helper(typeMapping, float.NegativeInfinity, ""-Infinity"");
        Test_GenerateSqlLiteral_helper(typeMapping, float.MinValue, ""-3.4028235E+38"");
        Test_GenerateSqlLiteral_helper(typeMapping, float.MaxValue, ""3.4028235E+38"");
    }

    [ConditionalFact]
    public virtual void Guid_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(
            new GuidTypeMapping(""guid""),
            new Guid(""c6f43a9e-91e1-45ef-a320-832ea23b7292""),
            ""'c6f43a9e-91e1-45ef-a320-832ea23b7292'"");

    [ConditionalFact]
    public virtual void NullableInt_literal_generated_correctly()
    {
        var typeMapping = new IntTypeMapping(""int?"", DbType.Int32);

        Test_GenerateSqlLiteral_helper(typeMapping, default(int?), ""NULL"");
        Test_GenerateSqlLiteral_helper(typeMapping, (int?)123, ""123"");
    }

    [ConditionalFact]
    public virtual void Int_literal_generated_correctly()
    {
        var typeMapping = new IntTypeMapping(""int"", DbType.Int32);

        Test_GenerateSqlLiteral_helper(typeMapping, int.MinValue, ""-2147483648"");
        Test_GenerateSqlLiteral_helper(typeMapping, int.MaxValue, ""2147483647"");
    }

    [ConditionalFact]
    public virtual void Long_literal_generated_correctly()
    {
        var typeMapping = new LongTypeMapping(""long"", DbType.Int64);

        Test_GenerateSqlLiteral_helper(typeMapping, long.MinValue, ""-9223372036854775808"");
        Test_GenerateSqlLiteral_helper(typeMapping, long.MaxValue, ""9223372036854775807"");
    }

    [ConditionalFact]
    public virtual void SByte_literal_generated_correctly()
    {
        var typeMapping = new SByteTypeMapping(""sbyte"", DbType.SByte);

        Test_GenerateSqlLiteral_helper(typeMapping, sbyte.MinValue, ""-128"");
        Test_GenerateSqlLiteral_helper(typeMapping, sbyte.MaxValue, ""127"");
    }

    [ConditionalFact]
    public virtual void Short_literal_generated_correctly()
    {
        var typeMapping = new ShortTypeMapping(""short"", DbType.Int16);

        Test_GenerateSqlLiteral_helper(typeMapping, short.MinValue, ""-32768"");
        Test_GenerateSqlLiteral_helper(typeMapping, short.MaxValue, ""32767"");
    }

    [ConditionalFact]
    public virtual void String_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(new StringTypeMapping(""string"", DbType.String), ""Text"", ""'Text'"");

    [ConditionalFact]
    public virtual void Timespan_literal_generated_correctly()
        => Test_GenerateSqlLiteral_helper(new TimeSpanTypeMapping(""time""), new TimeSpan(0, 7, 14, 30, 123), ""'07:14:30.1230000'"");

    [ConditionalFact]
    public virtual void UInt_literal_generated_correctly()
    {
        var typeMapping = new UIntTypeMapping(""uint"", DbType.UInt32);

        Test_GenerateSqlLiteral_helper(typeMapping, uint.MinValue, ""0"");
        Test_GenerateSqlLiteral_helper(typeMapping, uint.MaxValue, ""4294967295"");
    }

    [ConditionalFact]
    public virtual void ULong_literal_generated_correctly()
    {
        var typeMapping = new ULongTypeMapping(""ulong"", DbType.UInt64);

        Test_GenerateSqlLiteral_helper(typeMapping, ulong.MinValue, ""0"");
        Test_GenerateSqlLiteral_helper(typeMapping, ulong.MaxValue, ""18446744073709551615"");
    }

    [ConditionalFact]
    public virtual void UShort_literal_generated_correctly()
    {
        var typeMapping = new UShortTypeMapping(""ushort"", DbType.UInt16);

        Test_GenerateSqlLiteral_helper(typeMapping, ushort.MinValue, ""0"");
        Test_GenerateSqlLiteral_helper(typeMapping, ushort.MaxValue, ""65535"");
    }

    [ConditionalFact]
    public virtual void Double_value_comparer_handles_NaN()
    {
        var typeMapping = new DoubleTypeMapping(""double precision"", DbType.Double);

        Assert.True(typeMapping.Comparer.Equals(3.0, 3.0));
        Assert.True(typeMapping.Comparer.Equals(double.NaN, double.NaN));
        Assert.False(typeMapping.Comparer.Equals(3.0, double.NaN));
    }

    [ConditionalFact]
    public virtual void Float_value_comparer_handles_NaN()
    {
        var typeMapping = new FloatTypeMapping(""float"", DbType.Single);

        Assert.True(typeMapping.Comparer.Equals(3.0f, 3.0f));
        Assert.True(typeMapping.Comparer.Equals(float.NaN, float.NaN));
        Assert.False(typeMapping.Comparer.Equals(3.0f, float.NaN));
    }

    [ConditionalFact]
    public virtual void DateTimeOffset_value_comparer_behaves_correctly()
    {
        var typeMapping = new DateTimeOffsetTypeMapping(""datetimeoffset"", DbType.DateTimeOffset);

        var same1 = new DateTimeOffset(2000, 1, 1, 12, 0, 0, TimeSpan.FromHours(0));
        var same2 = new DateTimeOffset(2000, 1, 1, 12, 0, 0, TimeSpan.FromHours(0));
        var different = new DateTimeOffset(2000, 1, 1, 13, 0, 0, TimeSpan.FromHours(1));

        // Note that a difference in offset results in inequality, unlike the .NET default comparison behavior
        Assert.False(typeMapping.Comparer.Equals(same1, different));
        Assert.True(typeMapping.Comparer.Equals(same1, same2));

        var parameters = new[] { Expression.Parameter(typeof(DateTimeOffset)), Expression.Parameter(typeof(DateTimeOffset)) };
        var equalsBody = typeMapping.Comparer.ExtractEqualsBody(parameters[0], parameters[1]);
        var equalsComparer = Expression.Lambda<Func<DateTimeOffset, DateTimeOffset, bool>>(equalsBody, parameters).Compile();

        Assert.False(equalsComparer(same1, different));
        Assert.True(equalsComparer(same1, same2));
    }

    [ConditionalFact]
    public virtual void Primary_key_type_mapping_is_picked_up_by_FK_without_going_through_store_type()
    {
        using var context = new FruityContext(ContextOptions);
        Assert.Same(
            context.Model.FindEntityType(typeof(Banana)).FindProperty(""Id"").GetTypeMapping(),
            context.Model.FindEntityType(typeof(Kiwi)).FindProperty(""BananaId"").GetTypeMapping());
    }

    private class FruityContext : DbContext
    {
        public FruityContext(DbContextOptions options)
            : base(options)
        {
        }

        public DbSet<Banana> Bananas { get; set; }
        public DbSet<Kiwi> Kiwi { get; set; }
    }

    [ConditionalFact]
    public virtual void Primary_key_type_mapping_can_differ_from_FK()
    {
        using var context = new MismatchedFruityContext(ContextOptions);
        Assert.Equal(
            typeof(short),
            context.Model.FindEntityType(typeof(Banana)).FindProperty(""Id"").GetTypeMapping().Converter.ProviderClrType);
        Assert.Null(context.Model.FindEntityType(typeof(Kiwi)).FindProperty(""Id"").GetTypeMapping().Converter);
    }

    private class MismatchedFruityContext : FruityContext
    {
        public MismatchedFruityContext(DbContextOptions options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Banana>().Property(e => e.Id).HasConversion<short>();
            modelBuilder.Entity<Kiwi>().Property(e => e.Id).HasConversion<int>();
            modelBuilder.Entity<Kiwi>().HasOne(e => e.Banana).WithMany(e => e.Kiwis).HasForeignKey(e => e.Id);
        }
    }

    private class Banana
    {
        public int Id { get; set; }

        public ICollection<Kiwi> Kiwis { get; set; }
    }

    private class Kiwi
    {
        public int Id { get; set; }

        public int BananaId { get; set; }
        public Banana Banana { get; set; }
    }

    protected abstract DbContextOptions ContextOptions { get; }

    protected abstract DbCommand CreateTestCommand();
}",1,439 305 334 2000 123 438 334 2001 58 2002 60 426 44 426 62 123 439 2001 40 41 58 320 40 2003 619 2003 44 2003 619 2003 41 123 125 439 431 2004 2005 123 2006 59 125 61 478 40 426 41 59 439 431 2004 2007 123 2008 59 125 61 478 40 426 41 59 125 438 334 2009 58 2010 60 426 62 123 439 2009 40 41 58 320 40 380 41 123 125 439 431 2011 2011 123 2012 59 125 61 478 40 426 41 59 125 91 2013 93 91 2014 40 478 40 2015 41 44 478 40 323 41 41 93 91 2014 40 478 40 2016 41 44 478 40 326 41 41 93 91 2014 40 478 40 2017 41 44 478 40 330 41 41 93 91 2014 40 478 40 2018 41 44 478 40 2019 41 41 93 91 2014 40 478 40 2020 41 44 478 40 2021 41 41 93 91 2014 40 478 40 2022 41 44 478 40 345 41 41 93 91 2014 40 478 40 2023 41 44 478 40 356 41 41 93 91 2014 40 478 40 2024 41 44 478 40 384 41 41 93 91 2014 40 478 40 2025 41 44 478 40 2026 41 41 93 91 2014 40 478 40 2027 41 44 478 40 404 41 41 93 91 2014 40 478 40 2028 41 44 478 40 413 41 41 93 91 2014 40 478 40 2029 41 44 478 40 451 41 41 93 91 2014 40 478 40 2030 41 44 478 40 453 41 41 93 91 2014 40 478 40 2031 41 44 478 40 2032 41 41 93 91 2014 40 478 40 2033 41 44 478 40 479 41 41 93 91 2014 40 478 40 2034 41 44 478 40 480 41 41 93 91 2014 40 478 40 2035 41 44 478 40 488 41 41 93 439 491 492 2036 40 2037 2038 44 2037 2039 41 123 490 2040 61 40 2041 41 2042 46 2043 40 2038 44 2044 46 2045 124 2044 46 2046 124 2044 46 2043 44 424 44 418 91 93 123 2047 46 2048 40 2039 41 125 44 424 44 424 41 59 490 335 61 2040 46 2049 40 648 44 424 41 59 2050 46 2051 40 2040 44 335 41 59 2050 46 2052 40 2040 46 2053 40 41 44 335 46 2053 40 41 41 59 2050 46 2054 40 648 44 335 46 2055 41 59 2050 46 2054 40 2056 46 2057 44 335 46 2056 41 59 2050 46 2058 40 335 46 2059 41 59 2050 46 2060 40 2040 46 2061 41 59 2050 46 2052 40 2040 46 2061 44 335 46 2061 41 59 2050 46 2052 40 2040 46 2062 44 335 46 2062 41 59 2050 46 2052 40 2040 46 2063 44 335 46 2063 41 59 2050 46 2052 40 478 40 426 41 44 335 46 2064 41 59 2050 46 2054 40 2065 46 2066 44 335 46 2065 41 59 490 2067 61 418 2001 40 41 59 335 61 40 2041 41 2040 46 2049 40 2067 41 59 2050 46 2051 40 2040 44 335 41 59 2050 46 2052 40 2040 46 2053 40 41 44 335 46 2053 40 41 41 59 2050 46 2054 40 648 44 335 46 2055 41 59 2050 46 2054 40 2056 46 2057 44 335 46 2056 41 59 2050 46 2058 40 335 46 2059 41 59 2050 46 2051 40 2040 46 2061 44 335 46 2061 41 59 2050 46 2052 40 2040 46 2062 44 335 46 2062 41 59 2050 46 2052 40 2040 46 2063 44 335 46 2063 41 59 2050 46 2052 40 478 40 426 41 44 335 46 2064 41 59 2050 46 2054 40 2065 46 2066 44 335 46 2065 41 59 125 91 2068 93 439 491 492 2069 40 41 619 2070 40 478 40 2071 41 44 478 40 326 91 93 41 41 59 438 491 492 2070 40 2037 2038 44 2037 2039 44 433 426 91 93 2072 41 123 490 2073 61 40 2074 41 2075 46 2076 40 2038 44 2077 46 2078 124 2077 46 2079 124 2077 46 2076 44 424 44 418 91 93 123 2080 46 2081 40 2039 44 2082 58 1503 44 2083 58 473 44 2084 58 2085 46 2086 41 125 46 2087 40 2072 41 46 2088 40 41 44 424 44 424 41 59 490 335 61 2073 46 2089 40 648 44 1503 41 59 2090 46 2091 40 2073 44 335 41 59 2090 46 2092 40 2073 46 2093 40 41 44 335 46 2093 40 41 41 59 2090 46 2094 40 648 44 2073 46 2095 41 59 2090 46 2094 40 648 44 335 46 2095 41 59 2090 46 2094 40 2096 46 2097 44 335 46 2096 41 59 2090 46 2094 40 1503 44 2073 46 2098 41 59 2090 46 2094 40 1503 44 335 46 2098 41 59 2090 46 2099 40 2073 46 2100 41 59 2090 46 2092 40 2073 46 2100 44 335 46 2100 41 59 2090 46 2092 40 2073 46 2101 44 335 46 2101 41 59 2090 46 2092 40 2073 46 2102 44 335 46 2102 41 59 2090 46 2092 40 478 40 426 41 44 335 46 2103 41 59 2090 46 304 40 2073 46 2104 41 59 2090 46 304 40 335 46 2104 41 59 2090 46 2094 40 2105 46 2098 44 335 46 2105 41 59 490 2106 61 418 2001 40 41 59 335 61 40 2074 41 2073 46 2089 40 2106 41 59 2090 46 2091 40 2073 44 335 41 59 2090 46 2092 40 2073 46 2093 40 41 44 335 46 2093 40 41 41 59 2090 46 2094 40 648 44 2073 46 2095 41 59 2090 46 2094 40 648 44 335 46 2095 41 59 2090 46 2094 40 2096 46 2097 44 335 46 2096 41 59 2090 46 2094 40 1503 44 2073 46 2098 41 59 2090 46 2094 40 1503 44 335 46 2098 41 59 2090 46 2091 40 2073 46 2100 44 335 46 2100 41 59 2090 46 2092 40 2073 46 2101 44 335 46 2101 41 59 2090 46 2092 40 2073 46 2102 44 335 46 2102 41 59 2090 46 2092 40 478 40 426 41 44 335 46 2103 41 59 2090 46 304 40 2073 46 2104 41 59 2090 46 304 40 335 46 2104 41 59 2090 46 2094 40 2105 46 2098 44 335 46 2105 41 59 125 91 2068 93 439 491 492 2107 40 41 619 2108 40 478 40 2109 41 44 478 40 461 41 41 59 438 491 492 2108 40 2037 2038 44 2037 2039 44 433 426 91 93 2072 41 123 490 2110 61 40 2111 41 2112 46 2113 40 2038 44 2114 46 2115 124 2114 46 2116 124 2114 46 2113 44 424 44 418 91 93 123 2117 46 2118 40 2039 44 2119 58 1503 44 2120 58 380 44 2121 58 473 44 2122 58 2123 46 2124 41 125 46 2125 40 2072 41 46 2126 40 41 44 424 44 424 41 59 490 335 61 2110 46 2127 40 648 44 1503 41 59 2128 46 2129 40 2110 44 335 41 59 2128 46 2130 40 2110 46 2131 40 41 44 335 46 2131 40 41 41 59 2128 46 2132 40 648 44 2110 46 2133 41 59 2128 46 2132 40 648 44 335 46 2133 41 59 2128 46 2132 40 2134 46 2135 44 335 46 2134 41 59 2128 46 2132 40 1503 44 2110 46 2136 41 59 2128 46 2132 40 1503 44 335 46 2136 41 59 2128 46 302 40 2110 46 2137 41 59 2128 46 302 40 335 46 2137 41 59 2128 46 2138 40 2110 46 2139 41 59 2128 46 2130 40 2110 46 2139 44 335 46 2139 41 59 2128 46 2130 40 2110 46 2140 44 335 46 2140 41 59 2128 46 2130 40 2110 46 2141 44 335 46 2141 41 59 2128 46 2130 40 478 40 426 41 44 335 46 2142 41 59 2128 46 304 40 2110 46 2143 41 59 2128 46 304 40 335 46 2143 41 59 2128 46 2132 40 2144 46 2136 44 335 46 2144 41 59 490 2145 61 418 2001 40 41 59 335 61 40 2111 41 2110 46 2127 40 2145 41 59 2128 46 2129 40 2110 44 335 41 59 2128 46 2130 40 2110 46 2131 40 41 44 335 46 2131 40 41 41 59 2128 46 2132 40 648 44 2110 46 2133 41 59 2128 46 2132 40 648 44 335 46 2133 41 59 2128 46 2132 40 2134 46 2135 44 335 46 2134 41 59 2128 46 2132 40 1503 44 2110 46 2136 41 59 2128 46 2132 40 1503 44 335 46 2136 41 59 2128 46 302 40 2110 46 2137 41 59 2128 46 302 40 335 46 2137 41 59 2128 46 2129 40 2110 46 2139 44 335 46 2139 41 59 2128 46 2130 40 2110 46 2140 44 335 46 2140 41 59 2128 46 2130 40 2110 46 2141 44 335 46 2141 41 59 2128 46 2130 40 478 40 426 41 44 335 46 2142 41 59 2128 46 304 40 2110 46 2143 41 59 2128 46 304 40 335 46 2143 41 59 2128 46 2132 40 2144 46 2136 44 335 46 2144 41 59 125 437 334 2146 58 2147 123 437 2146 40 2148 2149 41 58 320 40 2149 41 123 125 439 2146 40 41 58 320 40 648 44 478 40 426 41 41 123 125 439 457 426 2150 40 2037 2039 44 404 63 2151 61 424 44 323 2152 61 380 44 323 2153 61 380 44 2154 2155 61 2154 46 2156 41 619 418 2148 40 418 2157 40 2039 44 418 2001 40 41 44 418 2009 40 41 44 418 2009 40 41 41 44 648 44 2155 44 2158 46 2159 46 2160 46 2161 44 2151 58 2151 44 2152 58 2152 44 2153 58 2153 41 59 438 431 2147 2162 40 2148 2149 41 619 418 2146 40 2149 41 59 125 91 2068 93 439 492 2163 40 41 123 489 490 2164 61 2165 40 41 59 490 2166 61 418 2027 40 648 41 46 2167 40 2164 44 648 44 1503 44 2168 58 380 41 59 2169 46 2170 40 2171 46 2172 44 2166 46 2173 41 59 2169 46 2170 40 648 44 2166 46 2174 41 59 2169 46 2170 40 1503 44 2166 46 2175 41 59 2169 46 2170 40 2176 46 2177 44 2166 46 2176 41 59 2169 46 302 40 2166 46 2178 41 59 125 91 2068 93 439 492 2179 40 41 123 489 490 2180 61 2181 40 41 59 490 2182 61 418 2027 40 648 41 46 2183 40 2180 44 648 44 1503 44 2184 58 473 41 59 2185 46 2186 40 2187 46 2188 44 2182 46 2189 41 59 2185 46 2186 40 648 44 2182 46 2190 41 59 2185 46 2186 40 1503 44 2182 46 2191 41 59 2185 46 2186 40 2192 46 2193 44 2182 46 2192 41 59 2185 46 304 40 2182 46 2194 41 59 125 91 2068 93 439 492 2195 40 41 123 489 490 2196 61 2197 40 41 59 490 2198 61 418 2027 40 648 44 2199 46 2200 41 46 2201 40 2196 44 648 44 1503 44 2202 58 380 41 59 2203 46 2204 40 2205 46 2206 44 2198 46 2207 41 59 2203 46 2204 40 648 44 2198 46 2208 41 59 2203 46 2204 40 1503 44 2198 46 2209 41 59 2203 46 2204 40 2199 46 2200 44 2198 46 2199 41 59 2203 46 302 40 2198 46 2210 41 59 125 91 2068 93 439 492 2211 40 41 123 489 490 2212 61 2213 40 41 59 490 2214 61 418 2027 40 648 44 2215 46 2216 41 46 2217 40 2212 44 648 44 1503 44 2218 58 473 41 59 2219 46 2220 40 2221 46 2222 44 2214 46 2223 41 59 2219 46 2220 40 648 44 2214 46 2224 41 59 2219 46 2220 40 1503 44 2214 46 2225 41 59 2219 46 2220 40 2215 46 2216 44 2214 46 2215 41 59 2219 46 304 40 2214 46 2226 41 59 125 91 2068 93 439 492 2227 40 41 123 489 490 2228 61 2229 40 41 59 490 2230 61 418 2109 40 648 44 2231 46 2232 44 2233 58 473 44 2234 58 1503 41 46 2235 40 2228 44 648 44 648 44 2236 58 380 41 59 2237 46 2238 40 2239 46 2240 44 2230 46 2241 41 59 2237 46 2238 40 648 44 2230 46 2242 41 59 2237 46 2238 40 648 44 2230 46 2243 41 59 2237 46 2238 40 2231 46 2232 44 2230 46 2231 41 59 2237 46 302 40 2230 46 2244 41 59 2237 46 2238 40 1502 44 2230 46 2245 41 59 125 91 2068 93 439 492 2246 40 41 123 489 490 2247 61 2248 40 41 59 490 2249 61 418 2109 40 648 44 2250 46 2251 44 2252 58 473 44 2253 58 1503 41 46 2254 40 2247 44 648 44 648 44 2255 58 473 41 59 2256 46 2257 40 2258 46 2259 44 2249 46 2260 41 59 2256 46 2257 40 648 44 2249 46 2261 41 59 2256 46 2257 40 648 44 2249 46 2262 41 59 2256 46 2257 40 2250 46 2251 44 2249 46 2250 41 59 2256 46 304 40 2249 46 2263 41 59 2256 46 2257 40 1502 44 2249 46 2264 41 59 125 438 491 492 2265 40 2147 2266 44 426 2267 44 461 2268 41 619 2269 46 2270 40 2268 44 2266 46 2271 40 2267 41 41 59 91 2068 93 439 491 492 2272 40 41 123 490 2266 61 418 2015 40 648 41 59 2265 40 2266 44 473 44 648 41 59 2265 40 2266 44 380 44 648 41 59 125 91 2068 93 439 491 492 2273 40 41 619 2265 40 418 2071 40 648 41 44 418 326 91 93 123 1504 44 1504 125 44 648 41 59 91 2068 93 439 491 492 2274 40 41 123 490 2266 61 418 2016 40 648 44 2275 46 2276 41 59 2265 40 2266 44 326 46 2277 44 648 41 59 2265 40 2266 44 326 46 2278 44 648 41 59 125 91 2068 93 439 491 492 2279 40 41 123 2265 40 418 2017 40 648 41 44 607 44 648 41 59 2265 40 418 2017 40 648 41 44 607 44 648 41 59 125 91 2068 93 439 491 492 2280 40 41 619 2265 40 418 2018 40 648 41 44 418 2019 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 1504 44 418 2032 40 45 1502 44 1500 44 1500 41 41 44 648 41 59 91 2068 93 439 491 492 2281 40 41 619 2265 40 418 2020 40 648 41 44 418 2021 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 1504 44 2282 46 2283 41 44 648 41 59 91 2068 93 439 491 492 2284 40 41 619 2265 40 418 2285 40 648 41 44 418 2286 40 1505 44 1502 44 1503 41 44 648 41 59 91 2068 93 439 491 492 2287 40 41 619 2265 40 418 2288 40 648 41 44 418 2289 40 1503 44 1502 44 1503 41 44 648 41 59 91 2068 93 439 491 492 2290 40 41 619 2265 40 418 2288 40 648 41 44 418 2289 40 1503 44 1502 44 1503 44 1504 41 44 648 41 59 91 2068 93 439 491 492 2291 40 41 123 490 2266 61 418 2022 40 648 44 2292 46 2293 41 59 2265 40 2266 44 345 46 2294 44 648 41 59 2265 40 2266 44 345 46 2295 44 648 41 59 125 91 2068 93 439 491 492 2296 40 41 123 490 2266 61 418 2023 40 648 44 2297 46 2298 41 59 2265 40 2266 44 356 46 2299 44 648 41 59 2265 40 2266 44 356 46 2300 44 648 41 59 2265 40 2266 44 356 46 2301 44 648 41 59 2265 40 2266 44 356 46 2302 44 648 41 59 2265 40 2266 44 356 46 2303 44 648 41 59 125 91 2068 93 439 491 492 2304 40 41 123 490 2266 61 418 2024 40 648 44 2305 46 2306 41 59 2265 40 2266 44 384 46 2307 44 648 41 59 2265 40 2266 44 384 46 2308 44 648 41 59 2265 40 2266 44 384 46 2309 44 648 41 59 2265 40 2266 44 384 46 2310 44 648 41 59 2265 40 2266 44 384 46 2311 44 648 41 59 125 91 2068 93 439 491 492 2312 40 41 619 2265 40 418 2025 40 648 41 44 418 2026 40 648 41 44 648 41 59 91 2068 93 439 491 492 2313 40 41 123 490 2266 61 418 2027 40 648 44 2314 46 2315 41 59 2265 40 2266 44 349 40 404 63 41 44 648 41 59 2265 40 2266 44 40 404 63 41 1504 44 648 41 59 125 91 2068 93 439 491 492 2316 40 41 123 490 2266 61 418 2027 40 648 44 2317 46 2318 41 59 2265 40 2266 44 404 46 2319 44 648 41 59 2265 40 2266 44 404 46 2320 44 648 41 59 125 91 2068 93 439 491 492 2321 40 41 123 490 2266 61 418 2028 40 648 44 2322 46 2323 41 59 2265 40 2266 44 413 46 2324 44 648 41 59 2265 40 2266 44 413 46 2325 44 648 41 59 125 91 2068 93 439 491 492 2326 40 41 123 490 2266 61 418 2029 40 648 44 2327 46 2328 41 59 2265 40 2266 44 451 46 2329 44 648 41 59 2265 40 2266 44 451 46 2330 44 648 41 59 125 91 2068 93 439 491 492 2331 40 41 123 490 2266 61 418 2030 40 648 44 2332 46 2333 41 59 2265 40 2266 44 453 46 2334 44 648 41 59 2265 40 2266 44 453 46 2335 44 648 41 59 125 91 2068 93 439 491 492 2336 40 41 619 2265 40 418 2109 40 648 44 2337 46 2338 41 44 648 44 648 41 59 91 2068 93 439 491 492 2339 40 41 619 2265 40 418 2031 40 648 41 44 418 2032 40 1500 44 1502 44 1503 44 1503 44 1504 41 44 648 41 59 91 2068 93 439 491 492 2340 40 41 123 490 2266 61 418 2033 40 648 44 2337 46 2341 41 59 2265 40 2266 44 479 46 2342 44 648 41 59 2265 40 2266 44 479 46 2343 44 648 41 59 125 91 2068 93 439 491 492 2344 40 41 123 490 2266 61 418 2034 40 648 44 2337 46 2345 41 59 2265 40 2266 44 480 46 2346 44 648 41 59 2265 40 2266 44 480 46 2347 44 648 41 59 125 91 2068 93 439 491 492 2348 40 41 123 490 2266 61 418 2035 40 648 44 2337 46 2349 41 59 2265 40 2266 44 488 46 2350 44 648 41 59 2265 40 2266 44 488 46 2351 44 648 41 59 125 91 2068 93 439 491 492 2352 40 41 123 490 2266 61 418 2023 40 648 44 2337 46 2353 41 59 2269 46 304 40 2266 46 2354 46 2355 40 1502 44 1502 41 41 59 2269 46 304 40 2266 46 2354 46 2355 40 356 46 2356 44 356 46 2356 41 41 59 2269 46 302 40 2266 46 2354 46 2355 40 1502 44 356 46 2356 41 41 59 125 91 2068 93 439 491 492 2357 40 41 123 490 2266 61 418 2024 40 648 44 2337 46 2358 41 59 2269 46 304 40 2266 46 2359 46 2360 40 1502 44 1502 41 41 59 2269 46 304 40 2266 46 2359 46 2360 40 384 46 2361 44 384 46 2361 41 41 59 2269 46 302 40 2266 46 2359 46 2360 40 1502 44 384 46 2361 41 41 59 125 91 2068 93 439 491 492 2362 40 41 123 490 2266 61 418 2018 40 648 44 2337 46 2019 41 59 490 2363 61 418 2019 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2032 46 2364 40 1500 41 41 59 490 2365 61 418 2019 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2032 46 2364 40 1500 41 41 59 490 2366 61 418 2019 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2032 46 2364 40 1501 41 41 59 621 2269 46 302 40 2266 46 2367 46 2368 40 2363 44 2366 41 41 59 2269 46 304 40 2266 46 2367 46 2368 40 2363 44 2365 41 41 59 490 2369 61 418 91 93 123 2370 46 2371 40 478 40 2019 41 41 44 2370 46 2371 40 478 40 2019 41 41 125 59 490 2372 61 2266 46 2367 46 2373 40 2369 91 1500 93 44 2369 91 1501 93 41 59 490 2374 61 2375 46 2376 60 2377 60 2019 44 2019 44 323 640 40 2372 44 2369 41 46 2378 40 41 59 2269 46 302 40 2374 40 2363 44 2366 41 41 59 2269 46 304 40 2374 40 2363 44 2365 41 41 59 125 91 2068 93 439 491 492 2379 40 41 123 489 490 2380 61 418 2381 40 2382 41 59 2269 46 2383 40 2380 46 2384 46 2385 40 478 40 2386 41 41 46 2387 40 648 41 46 2388 40 41 44 2380 46 2384 46 2385 40 478 40 2389 41 41 46 2387 40 648 41 46 2388 40 41 41 59 125 437 334 2390 58 2391 123 439 2390 40 2392 2393 41 58 320 40 2393 41 123 125 439 2394 60 2395 62 2396 123 2397 59 2398 59 125 439 2394 60 2399 62 2399 123 2400 59 2401 59 125 125 91 2068 93 439 491 492 2402 40 41 123 489 490 2403 61 418 2404 40 2405 41 59 2269 46 2270 40 478 40 453 41 44 2403 46 2406 46 2407 40 478 40 2408 41 41 46 2409 40 648 41 46 2410 40 41 46 2411 46 2412 41 59 2269 46 2413 40 2403 46 2406 46 2407 40 478 40 2414 41 41 46 2409 40 648 41 46 2410 40 41 46 2411 41 59 125 437 334 2415 58 2390 123 439 2415 40 2416 2417 41 58 320 40 2417 41 123 125 438 431 492 2418 40 2419 2420 41 123 320 46 2418 40 2420 41 59 2420 46 2421 60 2422 62 40 41 46 2423 40 2424 619 2424 46 2425 41 46 2426 60 453 62 40 41 59 2420 46 2421 60 2427 62 40 41 46 2423 40 2424 619 2424 46 2425 41 46 2426 60 404 62 40 41 59 2420 46 2421 60 2427 62 40 41 46 2428 40 2424 619 2424 46 2422 41 46 2429 40 2424 619 2424 46 2430 41 46 2431 40 2424 619 2424 46 2425 41 59 125 125 437 334 2432 123 439 404 2433 123 2434 59 2435 59 125 439 2436 60 2437 62 2438 123 2439 59 2440 59 125 125 437 334 2441 123 439 404 2442 123 2443 59 2444 59 125 439 404 2445 123 2446 59 2447 59 125 439 2432 2432 123 2448 59 2449 59 125 125 438 305 2450 2451 123 2452 59 125 438 305 2453 2454 40 41 59 125 
68053,C#,"public class InternalModelBuilder : AnnotatableBuilder<Model, InternalModelBuilder>, IConventionModelBuilder
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public InternalModelBuilder(Model metadata)
        : base(metadata, null!)
    {
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override InternalModelBuilder ModelBuilder
        => this;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityTypeBuilder? Entity(
        string name,
        ConfigurationSource configurationSource,
        bool? shouldBeOwned = false)
        => Entity(new TypeIdentity(name), configurationSource, shouldBeOwned);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityTypeBuilder? SharedTypeEntity(
        string name,
        Type? type,
        ConfigurationSource configurationSource,
        bool? shouldBeOwned = false)
        => Entity(new TypeIdentity(name, type ?? Model.DefaultPropertyBagType), configurationSource, shouldBeOwned);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityTypeBuilder? Entity(
        Type type,
        ConfigurationSource configurationSource,
        bool? shouldBeOwned = null)
        => Entity(new TypeIdentity(type, Metadata), configurationSource, shouldBeOwned);

    private InternalEntityTypeBuilder? Entity(
        in TypeIdentity type,
        ConfigurationSource configurationSource,
        bool? shouldBeOwned)
    {
        if (IsIgnored(type, configurationSource))
        {
            return null;
        }

        if (type.Type != null
            && shouldBeOwned != null)
        {
            var configurationType = shouldBeOwned.Value
                ? TypeConfigurationType.OwnedEntityType
                : type.IsNamed
                    ? TypeConfigurationType.SharedTypeEntityType
                    : TypeConfigurationType.EntityType;

            if (!CanBeConfigured(type.Type, configurationType, configurationSource))
            {
                return null;
            }
        }

        using var batch = Metadata.DelayConventions();
        var clrType = type.Type;
        EntityType? entityType;
        EntityType.Snapshot? entityTypeSnapshot = null;
        if (type.IsNamed)
        {
            if (clrType != null)
            {
                entityType = Metadata.FindEntityType(clrType);
                if (entityType != null)
                {
                    Check.DebugAssert(
                        entityType.Name != type.Name || !entityType.HasSharedClrType,
                        ""Shared type entity types shouldn't be named the same as non-shared"");

                    if (!configurationSource.OverridesStrictly(entityType.GetConfigurationSource())
                        && !entityType.IsOwned())
                    {
                        return configurationSource == ConfigurationSource.Explicit
                            ? throw new InvalidOperationException(
                                CoreStrings.ClashingNonSharedType(type.Name, clrType.ShortDisplayName()))
                            : null;
                    }

                    entityTypeSnapshot = InternalEntityTypeBuilder.DetachAllMembers(entityType);

                    // TODO: Use convention batch to track replaced entity type, see #15898
                    HasNoEntityType(entityType, ConfigurationSource.Explicit);
                }
            }

            entityType = Metadata.FindEntityType(type.Name);
        }
        else
        {
            clrType = type.Type!;
            var sharedConfigurationSource = Metadata.FindIsSharedConfigurationSource(clrType);
            if (sharedConfigurationSource != null)
            {
                if (!configurationSource.OverridesStrictly(sharedConfigurationSource.Value))
                {
                    return configurationSource == ConfigurationSource.Explicit
                        ? throw new InvalidOperationException(CoreStrings.ClashingSharedType(clrType.ShortDisplayName()))
                        : null;
                }

                foreach (var sharedTypeEntityType in Metadata.FindEntityTypes(clrType).ToList())
                {
                    HasNoEntityType(sharedTypeEntityType, configurationSource);
                }

                Metadata.RemoveShared(clrType);
            }

            entityType = Metadata.FindEntityType(clrType);
        }

        if (shouldBeOwned == false
            && clrType != null
            && (!configurationSource.OverridesStrictly(Metadata.FindIsOwnedConfigurationSource(clrType))
                || (Metadata.Configuration?.GetConfigurationType(clrType) == TypeConfigurationType.OwnedEntityType
                    && configurationSource != ConfigurationSource.Explicit)))
        {
            if (configurationSource == ConfigurationSource.Explicit)
            {
                throw new InvalidOperationException(
                    CoreStrings.ClashingOwnedEntityType(clrType == null ? type.Name : clrType.ShortDisplayName()));
            }

            return null;
        }

        if (entityType != null)
        {
            if (type.Type == null
                || entityType.ClrType == type.Type)
            {
                if (shouldBeOwned.HasValue)
                {
                    entityType.Builder.IsOwned(shouldBeOwned.Value, configurationSource);
                }

                entityType.UpdateConfigurationSource(configurationSource);
                return entityType.Builder;
            }

            if (configurationSource.OverridesStrictly(entityType.GetConfigurationSource()))
            {
                HasNoEntityType(entityType, configurationSource);
            }
            else
            {
                return configurationSource == ConfigurationSource.Explicit
                    ? throw new InvalidOperationException(
                        CoreStrings.ClashingMismatchedSharedType(type.Name, entityType.ClrType.ShortDisplayName()))
                    : null;
            }
        }

        if (type.Type != null)
        {
            if (shouldBeOwned == null)
            {
                var configurationType = Metadata.Configuration?.GetConfigurationType(type.Type);
                switch (configurationType)
                {
                    case null:
                        break;
                    case TypeConfigurationType.EntityType:
                    case TypeConfigurationType.SharedTypeEntityType:
                    {
                        shouldBeOwned ??= false;
                        break;
                    }
                    case TypeConfigurationType.OwnedEntityType:
                    {
                        shouldBeOwned ??= true;
                        break;
                    }
                    default:
                    {
                        if (configurationSource != ConfigurationSource.Explicit)
                        {
                            return null;
                        }

                        break;
                    }
                }

                shouldBeOwned ??= Metadata.FindIsOwnedConfigurationSource(type.Type) != null;
            }
        }
        else if (shouldBeOwned == null)
        {
            return null;
        }

        Metadata.RemoveIgnored(type.Name);
        entityType = type.IsNamed
            ? clrType == null
                ? Metadata.AddEntityType(type.Name, shouldBeOwned.Value, configurationSource)
                : Metadata.AddEntityType(type.Name, clrType, shouldBeOwned.Value, configurationSource)
            : Metadata.AddEntityType(clrType!, shouldBeOwned.Value, configurationSource);

        if (entityType != null
            && entityTypeSnapshot != null)
        {
            entityTypeSnapshot.Attach(entityType.Builder);
        }

        return entityType?.Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityTypeBuilder? Entity(
        string name,
        string definingNavigationName,
        EntityType definingEntityType,
        ConfigurationSource configurationSource)
        => Entity(new TypeIdentity(name), definingNavigationName, definingEntityType, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityTypeBuilder? Entity(
        Type type,
        string definingNavigationName,
        EntityType definingEntityType,
        ConfigurationSource configurationSource)
        => Entity(new TypeIdentity(type, Metadata), definingNavigationName, definingEntityType, configurationSource);

    private InternalEntityTypeBuilder? Entity(
        in TypeIdentity type,
        string definingNavigationName,
        EntityType definingEntityType,
        ConfigurationSource configurationSource)
        => SharedTypeEntity(
            definingEntityType.GetOwnedName(type.Type?.ShortDisplayName() ?? type.Name, definingNavigationName),
            type.Type, configurationSource, shouldBeOwned: true);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder? RemoveImplicitJoinEntity(EntityType joinEntityType)
    {
        Check.NotNull(joinEntityType, nameof(joinEntityType));

        return !joinEntityType.IsInModel
            ? this
            : !joinEntityType.IsImplicitlyCreatedJoinEntityType
                ? null
                : HasNoEntityType(joinEntityType, ConfigurationSource.Convention);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IConventionOwnedEntityTypeBuilder? Owned(
        Type type,
        ConfigurationSource configurationSource)
    {
        if (IsIgnored(type, configurationSource)
            || !CanBeConfigured(type, TypeConfigurationType.OwnedEntityType, configurationSource))
        {
            return null;
        }

        Metadata.RemoveIgnored(type);
        Metadata.AddOwned(type, ConfigurationSource.Explicit);

        foreach (var entityType in Metadata.FindEntityTypes(type).ToList())
        {
            if (entityType.FindOwnership() != null)
            {
                continue;
            }

            var ownershipCandidates = entityType.GetForeignKeys().Where(
                fk => fk.PrincipalToDependent != null
                    && !fk.PrincipalEntityType.IsInOwnershipPath(type)).ToList();
            if (ownershipCandidates.Count >= 1)
            {
                if (ownershipCandidates[0].Builder.IsOwnership(true, configurationSource) == null)
                {
                    return null;
                }
            }
            else
            {
                if (entityType.Builder.CanSetIsOwned(true, configurationSource))
                {
                    // Discover the ownership when the type is added back
                    HasNoEntityType(entityType, configurationSource);
                }
                else
                {
                    return null;
                }
            }
        }

        return new InternalOwnedEntityTypeBuilder();
    }

    private bool IsOwned(in TypeIdentity type)
        => type.Type != null && Metadata.IsOwned(type.Type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsIgnored(Type type, ConfigurationSource? configurationSource)
        => IsIgnored(new TypeIdentity(type, Metadata), configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsIgnored(string name, ConfigurationSource? configurationSource)
        => IsIgnored(new TypeIdentity(name), configurationSource);

    private bool IsIgnored(in TypeIdentity type, ConfigurationSource? configurationSource)
    {
        if (configurationSource == ConfigurationSource.Explicit)
        {
            return false;
        }

        var ignoredConfigurationSource = Metadata.FindIgnoredConfigurationSource(type.Name);
        if (type.Type != null
            && Metadata.IsIgnoredType(type.Type))
        {
            ignoredConfigurationSource = ConfigurationSource.Explicit;
        }

        return ignoredConfigurationSource.HasValue
            && ignoredConfigurationSource.Value.Overrides(configurationSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanBeConfigured(Type type, TypeConfigurationType configurationType, ConfigurationSource configurationSource)
    {
        if (configurationSource == ConfigurationSource.Explicit)
        {
            return true;
        }

        if (!configurationType.IsEntityType()
            && (!configurationSource.Overrides(Metadata.FindEntityType(type)?.GetConfigurationSource())
                || !configurationSource.Overrides(Metadata.FindIsOwnedConfigurationSource(type))
                || Metadata.IsShared(type)))
        {
            return false;
        }

        var configuredType = ModelBuilder.Metadata.Configuration?.GetConfigurationType(type);
        return configuredType == null
            || configuredType == configurationType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder? Ignore(Type type, ConfigurationSource configurationSource)
        => Ignore(new TypeIdentity(type, Metadata), configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder? Ignore(string name, ConfigurationSource configurationSource)
        => Ignore(new TypeIdentity(name), configurationSource);

    private InternalModelBuilder? Ignore(in TypeIdentity type, ConfigurationSource configurationSource)
    {
        var name = type.Name;
        var ignoredConfigurationSource = Metadata.FindIgnoredConfigurationSource(name);
        if (ignoredConfigurationSource.HasValue)
        {
            if (configurationSource.Overrides(ignoredConfigurationSource)
                && configurationSource != ignoredConfigurationSource)
            {
                Metadata.AddIgnored(name, configurationSource);
            }

            return this;
        }

        if (!CanIgnore(type, configurationSource))
        {
            return null;
        }

        using (Metadata.DelayConventions())
        {
            var entityType = Metadata.FindEntityType(name);
            if (entityType != null)
            {
                HasNoEntityType(entityType, configurationSource);
            }

            if (type.Type == null)
            {
                Metadata.AddIgnored(name, configurationSource);
            }
            else
            {
                Metadata.AddIgnored(type.Type, configurationSource);
            }

            if (type.Type != null)
            {
                Metadata.RemoveOwned(type.Type);
            }

            return this;
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanIgnore(Type type, ConfigurationSource configurationSource)
        => CanIgnore(new TypeIdentity(type, Metadata), configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanIgnore(string name, ConfigurationSource configurationSource)
        => CanIgnore(new TypeIdentity(name), configurationSource);

    private bool CanIgnore(in TypeIdentity type, ConfigurationSource configurationSource)
    {
        var name = type.Name;
        if (Metadata.FindIgnoredConfigurationSource(name).HasValue)
        {
            return true;
        }

        if (IsOwned(type)
            && configurationSource != ConfigurationSource.Explicit)
        {
            return false;
        }

        if (type.Type != null
            && Metadata.FindEntityTypes(type.Type).Any(o => !configurationSource.Overrides(o.GetConfigurationSource())))
        {
            return false;
        }

        if (Metadata.FindEntityType(name)?.GetConfigurationSource().OverridesStrictly(configurationSource) == true)
        {
            return false;
        }

        return true;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder? HasNoEntityType(EntityType entityType, ConfigurationSource configurationSource)
    {
        if (!entityType.IsInModel)
        {
            return this;
        }

        var entityTypeConfigurationSource = entityType.GetConfigurationSource();
        if (!configurationSource.Overrides(entityTypeConfigurationSource))
        {
            return null;
        }

        using (Metadata.DelayConventions())
        {
            foreach (var foreignKey in entityType.GetDeclaredReferencingForeignKeys().ToList())
            {
                if (foreignKey.IsOwnership
                    && configurationSource.Overrides(foreignKey.DeclaringEntityType.GetConfigurationSource()))
                {
                    HasNoEntityType(foreignKey.DeclaringEntityType, configurationSource);
                }
                else
                {
                    var removed = foreignKey.DeclaringEntityType.Builder.HasNoRelationship(foreignKey, configurationSource);
                    Check.DebugAssert(removed != null, ""removed is null"");
                }
            }

            foreach (var skipNavigation in entityType.GetDeclaredReferencingSkipNavigations().ToList())
            {
                var removed = skipNavigation.DeclaringEntityType.Builder.HasNoSkipNavigation(skipNavigation, configurationSource);
                Check.DebugAssert(removed != null, ""removed is null"");
            }

            foreach (var skipNavigation in entityType.GetDeclaredForeignKeys().SelectMany(fk => fk.GetReferencingSkipNavigations())
                         .ToList())
            {
                var removed = skipNavigation.Builder.HasForeignKey(null, configurationSource);
                Check.DebugAssert(removed != null, ""removed is null"");
            }

            foreach (var directlyDerivedType in entityType.GetDirectlyDerivedTypes().ToList())
            {
                var derivedEntityTypeBuilder = directlyDerivedType.Builder
                    .HasBaseType(entityType.BaseType, configurationSource);
                Check.DebugAssert(derivedEntityTypeBuilder != null, ""derivedEntityTypeBuilder is null"");
            }

            Metadata.RemoveEntityType(entityType);
        }

        return this;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder? HasChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        ConfigurationSource configurationSource)
    {
        if (CanSetChangeTrackingStrategy(changeTrackingStrategy, configurationSource))
        {
            Metadata.SetChangeTrackingStrategy(changeTrackingStrategy, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        ConfigurationSource configurationSource)
        => configurationSource.Overrides(Metadata.GetChangeTrackingStrategyConfigurationSource())
            || Metadata.GetChangeTrackingStrategy() == changeTrackingStrategy;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder? UsePropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        ConfigurationSource configurationSource)
    {
        if (CanSetPropertyAccessMode(propertyAccessMode, configurationSource))
        {
            Metadata.SetPropertyAccessMode(propertyAccessMode, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetPropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        ConfigurationSource configurationSource)
        => configurationSource.Overrides(Metadata.GetPropertyAccessModeConfigurationSource())
            || Metadata.GetPropertyAccessMode() == propertyAccessMode;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionModel IConventionModelBuilder.Metadata
    {
        [DebuggerStepThrough]
        get => Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityTypeBuilder? IConventionModelBuilder.Entity(string name, bool? shouldBeOwned, bool fromDataAnnotation)
        => Entity(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention, shouldBeOwned);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityTypeBuilder? IConventionModelBuilder.SharedTypeEntity(
        string name,
        Type type,
        bool? shouldBeOwned,
        bool fromDataAnnotation)
        => SharedTypeEntity(
            name, type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention, shouldBeOwned);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityTypeBuilder? IConventionModelBuilder.Entity(Type type, bool? shouldBeOwned, bool fromDataAnnotation)
        => Entity(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention, shouldBeOwned);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityTypeBuilder? IConventionModelBuilder.Entity(
        string name,
        string definingNavigationName,
        IConventionEntityType definingEntityType,
        bool fromDataAnnotation)
        => Entity(
            name,
            definingNavigationName,
            (EntityType)definingEntityType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityTypeBuilder? IConventionModelBuilder.Entity(
        Type type,
        string definingNavigationName,
        IConventionEntityType definingEntityType,
        bool fromDataAnnotation)
        => Entity(
            type,
            definingNavigationName,
            (EntityType)definingEntityType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionOwnedEntityTypeBuilder? IConventionModelBuilder.Owned(Type type, bool fromDataAnnotation)
        => Owned(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool IConventionModelBuilder.IsIgnored(Type type, bool fromDataAnnotation)
        => IsIgnored(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool IConventionModelBuilder.IsIgnored(string name, bool fromDataAnnotation)
        => IsIgnored(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionModelBuilder? IConventionModelBuilder.Ignore(Type type, bool fromDataAnnotation)
        => Ignore(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionModelBuilder? IConventionModelBuilder.Ignore(string name, bool fromDataAnnotation)
        => Ignore(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionModelBuilder? IConventionModelBuilder.HasNoEntityType(IConventionEntityType entityType, bool fromDataAnnotation)
        => HasNoEntityType(
            (EntityType)entityType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool IConventionModelBuilder.CanIgnore(Type type, bool fromDataAnnotation)
        => CanIgnore(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool IConventionModelBuilder.CanIgnore(string name, bool fromDataAnnotation)
        => CanIgnore(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionModelBuilder? IConventionModelBuilder.HasChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        bool fromDataAnnotation)
        => HasChangeTrackingStrategy(
            changeTrackingStrategy, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool IConventionModelBuilder.CanSetChangeTrackingStrategy(ChangeTrackingStrategy? changeTrackingStrategy, bool fromDataAnnotation)
        => CanSetChangeTrackingStrategy(
            changeTrackingStrategy, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionModelBuilder? IConventionModelBuilder.UsePropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        bool fromDataAnnotation)
        => UsePropertyAccessMode(
            propertyAccessMode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool IConventionModelBuilder.CanSetPropertyAccessMode(PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation)
        => CanSetPropertyAccessMode(
            propertyAccessMode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);
}",1,439 334 2000 58 2001 60 2002 44 2000 62 44 2003 123 612 439 2000 40 2002 2004 41 58 320 40 2004 44 424 33 41 123 125 612 439 431 2000 2005 619 467 59 612 439 491 2006 63 2007 40 461 2008 44 2009 2010 44 323 63 2011 61 380 41 619 2007 40 418 2012 40 2008 41 44 2010 44 2011 41 59 612 439 491 2006 63 2013 40 461 2008 44 2014 63 2015 44 2009 2010 44 323 63 2011 61 380 41 619 2007 40 418 2012 40 2008 44 2015 633 2002 46 2016 41 44 2010 44 2011 41 59 612 439 491 2006 63 2007 40 2014 2015 44 2009 2010 44 323 63 2011 61 424 41 619 2007 40 418 2012 40 2015 44 2017 41 44 2010 44 2011 41 59 437 2006 63 2007 40 398 2012 2015 44 2009 2010 44 323 63 2011 41 123 392 40 2018 40 2015 44 2010 41 41 123 450 424 59 125 392 40 2015 46 2014 631 424 605 2011 631 424 41 123 490 2019 61 2011 46 2020 63 2021 46 2022 58 2015 46 2023 63 2021 46 2024 58 2021 46 2025 59 392 40 33 2026 40 2015 46 2014 44 2019 44 2010 41 41 123 450 424 59 125 125 489 490 2027 61 2017 46 2028 40 41 59 490 2029 61 2015 46 2014 59 2030 63 2031 59 2030 46 2032 63 2033 61 424 59 392 40 2015 46 2034 41 123 392 40 2029 631 424 41 123 2031 61 2017 46 2035 40 2029 41 59 392 40 2031 631 424 41 123 2036 46 2037 40 2031 46 2038 631 2015 46 2038 606 33 2031 46 2039 44 648 41 59 392 40 33 2010 46 2040 40 2031 46 2041 40 41 41 605 33 2031 46 2042 40 41 41 123 450 2010 614 2009 46 2043 63 469 418 2044 40 2045 46 2046 40 2015 46 2038 44 2029 46 2047 40 41 41 41 58 424 59 125 2033 61 2006 46 2048 40 2031 41 59 621 2049 40 2031 44 2009 46 2050 41 59 125 125 2031 61 2017 46 2051 40 2015 46 2052 41 59 125 360 123 2029 61 2015 46 2014 33 59 490 2053 61 2017 46 2054 40 2029 41 59 392 40 2053 631 424 41 123 392 40 33 2010 46 2055 40 2053 46 2056 41 41 123 450 2010 614 2009 46 2057 63 469 418 2058 40 2059 46 2060 40 2029 46 2061 40 41 41 41 58 424 59 125 386 40 490 2062 398 2017 46 2063 40 2029 41 46 2064 40 41 41 123 2065 40 2062 44 2010 41 59 125 2017 46 2066 40 2029 41 59 125 2031 61 2017 46 2067 40 2029 41 59 125 392 40 2011 614 380 605 2029 631 424 605 40 33 2010 46 2068 40 2017 46 2069 40 2029 41 41 606 40 2017 46 2070 634 2071 40 2029 41 614 2072 46 2073 605 2010 631 2009 46 2074 41 41 41 123 392 40 2010 614 2009 46 2074 41 123 469 418 2075 40 2076 46 2077 40 2029 614 424 63 2015 46 2078 58 2029 46 2079 40 41 41 41 59 125 450 424 59 125 392 40 2031 631 424 41 123 392 40 2015 46 2014 614 424 606 2031 46 2080 614 2015 46 2014 41 123 392 40 2011 46 2081 41 123 2031 46 2082 46 2083 40 2011 46 2084 44 2010 41 59 125 2031 46 2085 40 2010 41 59 450 2031 46 2086 59 125 392 40 2010 46 2068 40 2031 46 2087 40 41 41 41 123 2088 40 2031 44 2010 41 59 125 360 123 450 2010 614 2009 46 2074 63 469 418 2089 40 2090 46 2091 40 2015 46 2092 44 2031 46 2080 46 2093 40 41 41 41 58 424 59 125 125 392 40 2015 46 2014 631 424 41 123 392 40 2011 614 424 41 123 490 2094 61 2017 46 2070 634 2071 40 2015 46 2014 41 59 464 40 2094 41 123 328 424 58 325 59 328 2072 46 2030 58 328 2072 46 2095 58 123 2011 633 61 380 59 325 59 125 328 2072 46 2073 58 123 2011 633 61 473 59 325 59 125 349 58 123 392 40 2010 631 2009 46 2074 41 123 450 424 59 125 325 59 125 125 2011 633 61 2017 46 2069 40 2015 46 2014 41 631 424 59 125 125 360 392 40 2011 614 424 41 123 450 424 59 125 2017 46 2096 40 2015 46 2097 41 59 2031 61 2015 46 2034 63 2029 614 424 63 2017 46 2098 40 2015 46 2097 44 2011 46 2099 44 2010 41 58 2017 46 2098 40 2015 46 2097 44 2029 44 2011 46 2099 44 2010 41 58 2017 46 2098 40 2029 33 44 2011 46 2099 44 2010 41 59 392 40 2031 631 424 605 2033 631 424 41 123 2033 46 2100 40 2031 46 2101 41 59 125 450 2031 634 2102 59 125 612 439 491 2006 63 2007 40 461 2008 44 461 2103 44 2104 2105 44 2009 2010 41 619 2007 40 418 2012 40 2008 41 44 2103 44 2105 44 2010 41 59 612 439 491 2006 63 2007 40 2014 2015 44 461 2103 44 2104 2105 44 2009 2010 41 619 2007 40 418 2012 40 2015 44 2017 41 44 2103 44 2105 44 2010 41 59 437 2006 63 2007 40 398 2012 2015 44 461 2103 44 2104 2105 44 2009 2010 41 619 2013 40 2105 46 2106 40 2015 46 2014 634 2107 40 41 633 2015 46 2108 44 2103 41 44 2015 46 2014 44 2010 44 2011 58 473 41 59 612 439 491 2000 63 2109 40 2104 2110 41 123 2111 46 2112 40 2110 44 2113 40 2110 41 41 59 450 33 2110 46 2114 63 467 58 33 2110 46 2115 63 424 58 2116 40 2110 44 2009 46 2117 41 59 125 612 439 491 2118 63 2119 40 2014 2015 44 2009 2010 41 123 392 40 2120 40 2015 44 2010 41 606 33 2121 40 2015 44 2122 46 2123 44 2010 41 41 123 450 424 59 125 2017 46 2124 40 2015 41 59 2017 46 2125 40 2015 44 2009 46 2126 41 59 386 40 490 2127 398 2017 46 2128 40 2015 41 46 2129 40 41 41 123 392 40 2127 46 2130 40 41 631 424 41 123 344 59 125 490 2131 61 2127 46 2132 40 41 46 2133 40 2134 619 2134 46 2135 631 424 605 33 2134 46 2136 46 2137 40 2015 41 41 46 2129 40 41 59 392 40 2131 46 2138 615 1501 41 123 392 40 2131 91 1500 93 46 2139 46 2140 40 473 44 2010 41 614 424 41 123 450 424 59 125 125 360 123 392 40 2127 46 2141 46 2142 40 473 44 2010 41 41 123 621 2143 40 2127 44 2010 41 59 125 360 123 450 424 59 125 125 125 450 418 2144 40 41 59 125 437 323 2145 40 398 2012 2015 41 619 2015 46 2014 631 424 605 2017 46 2145 40 2015 46 2014 41 59 612 439 491 323 2146 40 2014 2015 44 2009 63 2010 41 619 2146 40 418 2012 40 2015 44 2017 41 44 2010 41 59 612 439 491 323 2146 40 461 2008 44 2009 63 2010 41 619 2146 40 418 2012 40 2008 41 44 2010 41 59 437 323 2146 40 398 2012 2015 44 2009 63 2010 41 123 392 40 2010 614 2009 46 2147 41 123 450 380 59 125 490 2148 61 2017 46 2149 40 2015 46 2108 41 59 392 40 2015 46 2014 631 424 605 2017 46 2150 40 2015 46 2014 41 41 123 2148 61 2009 46 2147 59 125 450 2148 46 2151 605 2148 46 2152 46 2153 40 2010 41 59 125 612 439 491 323 2154 40 2014 2015 44 2155 2156 44 2009 2010 41 123 392 40 2010 614 2009 46 2157 41 123 450 473 59 125 392 40 33 2156 46 2158 40 41 605 40 33 2010 46 2159 40 2017 46 2160 40 2015 41 634 2161 40 41 41 606 33 2010 46 2159 40 2017 46 2162 40 2015 41 41 606 2017 46 2163 40 2015 41 41 41 123 450 380 59 125 490 2164 61 2005 46 2017 46 2165 634 2166 40 2015 41 59 450 2164 614 424 606 2164 614 2156 59 125 612 439 491 2000 63 2167 40 2014 2015 44 2009 2010 41 619 2167 40 418 2012 40 2015 44 2017 41 44 2010 41 59 612 439 491 2000 63 2167 40 461 2008 44 2009 2010 41 619 2167 40 418 2012 40 2008 41 44 2010 41 59 437 2000 63 2167 40 398 2012 2015 44 2009 2010 41 123 490 2008 61 2015 46 2108 59 490 2168 61 2017 46 2169 40 2008 41 59 392 40 2168 46 2170 41 123 392 40 2010 46 2171 40 2168 41 605 2010 631 2168 41 123 2017 46 2172 40 2008 44 2010 41 59 125 450 467 59 125 392 40 33 2173 40 2015 44 2010 41 41 123 450 424 59 125 489 40 2017 46 2174 40 41 41 123 490 2175 61 2017 46 2176 40 2008 41 59 392 40 2175 631 424 41 123 2177 40 2175 44 2010 41 59 125 392 40 2015 46 2014 614 424 41 123 2017 46 2178 40 2008 44 2010 41 59 125 360 123 2017 46 2179 40 2015 46 2014 44 2010 41 59 125 392 40 2015 46 2014 631 424 41 123 2017 46 2180 40 2015 46 2014 41 59 125 450 467 59 125 125 612 439 491 323 2181 40 2014 2015 44 2009 2010 41 619 2181 40 418 2012 40 2015 44 2017 41 44 2010 41 59 612 439 491 323 2181 40 461 2008 44 2009 2010 41 619 2181 40 418 2012 40 2008 41 44 2010 41 59 437 323 2181 40 398 2012 2015 44 2009 2010 41 123 490 2008 61 2015 46 2108 59 392 40 2017 46 2182 40 2008 41 46 2183 41 123 450 473 59 125 392 40 2145 40 2015 41 605 2010 631 2009 46 2184 41 123 450 380 59 125 392 40 2015 46 2014 631 424 605 2017 46 2185 40 2015 46 2014 41 46 2186 40 2187 619 33 2010 46 2188 40 2187 46 2189 40 41 41 41 41 123 450 380 59 125 392 40 2017 46 2190 40 2008 41 634 2189 40 41 46 2191 40 2010 41 614 473 41 123 450 380 59 125 450 473 59 125 612 439 491 2000 63 2192 40 2104 2193 44 2009 2010 41 123 392 40 33 2193 46 2194 41 123 450 467 59 125 490 2195 61 2193 46 2196 40 41 59 392 40 33 2010 46 2197 40 2195 41 41 123 450 424 59 125 489 40 2017 46 2198 40 41 41 123 386 40 490 2199 398 2193 46 2200 40 41 46 2201 40 41 41 123 392 40 2199 46 2202 605 2010 46 2197 40 2199 46 2203 46 2196 40 41 41 41 123 2192 40 2199 46 2203 44 2010 41 59 125 360 123 490 2204 61 2199 46 2203 46 2205 46 2206 40 2199 44 2010 41 59 2207 46 2208 40 2204 631 424 44 648 41 59 125 125 386 40 490 2209 398 2193 46 2210 40 41 46 2201 40 41 41 123 490 2211 61 2209 46 2212 46 2213 46 2214 40 2209 44 2010 41 59 2215 46 2216 40 2211 631 424 44 648 41 59 125 386 40 490 2209 398 2193 46 2217 40 41 46 2218 40 2219 619 2219 46 2220 40 41 41 46 2201 40 41 41 123 490 2221 61 2209 46 2222 46 2223 40 424 44 2010 41 59 2224 46 2225 40 2221 631 424 44 648 41 59 125 386 40 490 2226 398 2193 46 2227 40 41 46 2201 40 41 41 123 490 2228 61 2226 46 2229 46 2230 40 2193 46 2231 44 2010 41 59 2232 46 2233 40 2228 631 424 44 648 41 59 125 2017 46 2234 40 2193 41 59 125 450 467 59 125 612 439 491 2000 63 2235 40 2236 63 2237 44 2009 2010 41 123 392 40 2238 40 2237 44 2010 41 41 123 2017 46 2239 40 2237 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2240 40 2236 63 2237 44 2009 2010 41 619 2010 46 2241 40 2017 46 2242 40 41 41 606 2017 46 2243 40 41 614 2237 59 612 439 491 2000 63 2244 40 2245 63 2246 44 2009 2010 41 123 392 40 2247 40 2246 44 2010 41 41 123 2017 46 2248 40 2246 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2249 40 2245 63 2246 44 2009 2010 41 619 2010 46 2241 40 2017 46 2250 40 41 41 606 2017 46 2251 40 41 614 2246 59 612 2252 2003 46 2017 123 91 2253 93 2254 619 2017 59 125 612 91 2255 93 2256 63 2003 46 2007 40 461 2008 44 323 63 2011 44 323 2257 41 619 2007 40 2008 44 2257 63 2009 46 2258 58 2009 46 2259 44 2011 41 59 612 91 2255 93 2256 63 2003 46 2013 40 461 2008 44 2014 2015 44 323 63 2011 44 323 2257 41 619 2013 40 2008 44 2015 44 2257 63 2009 46 2258 58 2009 46 2259 44 2011 41 59 612 91 2255 93 2256 63 2003 46 2007 40 2014 2015 44 323 63 2011 44 323 2257 41 619 2007 40 2015 44 2257 63 2009 46 2258 58 2009 46 2259 44 2011 41 59 612 91 2255 93 2256 63 2003 46 2007 40 461 2008 44 461 2103 44 2260 2105 44 323 2257 41 619 2007 40 2008 44 2103 44 40 2104 41 2105 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2256 63 2003 46 2007 40 2014 2015 44 461 2103 44 2260 2105 44 323 2257 41 619 2007 40 2015 44 2103 44 40 2104 41 2105 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2118 63 2003 46 2119 40 2014 2015 44 323 2257 41 619 2119 40 2015 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 323 2003 46 2146 40 2014 2015 44 323 2257 41 619 2146 40 2015 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 323 2003 46 2146 40 461 2008 44 323 2257 41 619 2146 40 2008 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2003 63 2003 46 2167 40 2014 2015 44 323 2257 41 619 2167 40 2015 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2003 63 2003 46 2167 40 461 2008 44 323 2257 41 619 2167 40 2008 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2003 63 2003 46 2192 40 2260 2193 44 323 2257 41 619 2192 40 40 2104 41 2193 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 323 2003 46 2181 40 2014 2015 44 323 2257 41 619 2181 40 2015 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 323 2003 46 2181 40 461 2008 44 323 2257 41 619 2181 40 2008 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2003 63 2003 46 2235 40 2236 63 2237 44 323 2257 41 619 2235 40 2237 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 323 2003 46 2240 40 2236 63 2237 44 323 2257 41 619 2240 40 2237 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 2003 63 2003 46 2244 40 2245 63 2246 44 323 2257 41 619 2244 40 2246 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 612 91 2255 93 323 2003 46 2249 40 2245 63 2246 44 323 2257 41 619 2249 40 2246 44 2257 63 2009 46 2258 58 2009 46 2259 41 59 125 
70212,C#,"public class SqlServerModificationCommandBatch : AffectedCountModificationCommandBatch
{
    private const int DefaultNetworkPacketSizeBytes = 4096;
    private const int MaxScriptLength = 65536 * DefaultNetworkPacketSizeBytes / 2;
    private const int MaxParameterCount = 2100;
    private const int MaxRowCount = 1000;
    private int _parameterCount = 1; // Implicit parameter for the command text
    private readonly int _maxBatchSize;
    private readonly List<IReadOnlyModificationCommand> _bulkInsertCommands = new();
    private int _commandsLeftToLengthCheck = 50;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public SqlServerModificationCommandBatch(
        ModificationCommandBatchFactoryDependencies dependencies,
        int? maxBatchSize)
        : base(dependencies)
    {
        if (maxBatchSize.HasValue
            && maxBatchSize.Value <= 0)
        {
            throw new ArgumentOutOfRangeException(nameof(maxBatchSize), RelationalStrings.InvalidMaxBatchSize(maxBatchSize.Value));
        }

        _maxBatchSize = Math.Min(maxBatchSize ?? 42, MaxRowCount);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected new virtual ISqlServerUpdateSqlGenerator UpdateSqlGenerator
        => (ISqlServerUpdateSqlGenerator)base.UpdateSqlGenerator;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override bool CanAddCommand(IReadOnlyModificationCommand modificationCommand)
    {
        if (ModificationCommands.Count >= _maxBatchSize)
        {
            return false;
        }

        var additionalParameterCount = CountParameters(modificationCommand);

        if (_parameterCount + additionalParameterCount >= MaxParameterCount)
        {
            return false;
        }

        _parameterCount += additionalParameterCount;
        return true;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override bool IsCommandTextValid()
    {
        if (--_commandsLeftToLengthCheck < 0)
        {
            var commandTextLength = GetCommandText().Length;
            if (commandTextLength >= MaxScriptLength)
            {
                return false;
            }

            var averageCommandLength = commandTextLength / ModificationCommands.Count;
            var expectedAdditionalCommandCapacity = (MaxScriptLength - commandTextLength) / averageCommandLength;
            _commandsLeftToLengthCheck = Math.Max(1, expectedAdditionalCommandCapacity / 4);
        }

        return true;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override int GetParameterCount()
        => _parameterCount;

    private static int CountParameters(IReadOnlyModificationCommand modificationCommand)
    {
        var parameterCount = 0;
        // ReSharper disable once ForCanBeConvertedToForeach
        for (var columnIndex = 0; columnIndex < modificationCommand.ColumnModifications.Count; columnIndex++)
        {
            var columnModification = modificationCommand.ColumnModifications[columnIndex];
            if (columnModification.UseCurrentValueParameter)
            {
                parameterCount++;
            }

            if (columnModification.UseOriginalValueParameter)
            {
                parameterCount++;
            }
        }

        return parameterCount;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override void ResetCommandText()
    {
        base.ResetCommandText();
        _bulkInsertCommands.Clear();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override string GetCommandText()
        => base.GetCommandText() + GetBulkInsertCommandText(ModificationCommands.Count);

    private string GetBulkInsertCommandText(int lastIndex)
    {
        if (_bulkInsertCommands.Count == 0)
        {
            return string.Empty;
        }

        var stringBuilder = new StringBuilder();
        var resultSetMapping = UpdateSqlGenerator.AppendBulkInsertOperation(
            stringBuilder, _bulkInsertCommands, lastIndex - _bulkInsertCommands.Count);
        for (var i = lastIndex - _bulkInsertCommands.Count; i < lastIndex; i++)
        {
            CommandResultSet[i] = resultSetMapping;
        }

        if (resultSetMapping != ResultSetMapping.NoResultSet)
        {
            CommandResultSet[lastIndex - 1] = ResultSetMapping.LastInResultSet;
        }

        return stringBuilder.ToString();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override void UpdateCachedCommandText(int commandPosition)
    {
        var newModificationCommand = ModificationCommands[commandPosition];

        if (newModificationCommand.EntityState == EntityState.Added)
        {
            if (_bulkInsertCommands.Count > 0
                && !CanBeInsertedInSameStatement(_bulkInsertCommands[0], newModificationCommand))
            {
                CachedCommandText.Append(GetBulkInsertCommandText(commandPosition));
                _bulkInsertCommands.Clear();
            }

            _bulkInsertCommands.Add(newModificationCommand);

            LastCachedCommandIndex = commandPosition;
        }
        else
        {
            CachedCommandText.Append(GetBulkInsertCommandText(commandPosition));
            _bulkInsertCommands.Clear();

            base.UpdateCachedCommandText(commandPosition);
        }
    }

    private static bool CanBeInsertedInSameStatement(
        IReadOnlyModificationCommand firstCommand,
        IReadOnlyModificationCommand secondCommand)
        => string.Equals(firstCommand.TableName, secondCommand.TableName, StringComparison.Ordinal)
            && string.Equals(firstCommand.Schema, secondCommand.Schema, StringComparison.Ordinal)
            && firstCommand.ColumnModifications.Where(o => o.IsWrite).Select(o => o.ColumnName).SequenceEqual(
                secondCommand.ColumnModifications.Where(o => o.IsWrite).Select(o => o.ColumnName))
            && firstCommand.ColumnModifications.Where(o => o.IsRead).Select(o => o.ColumnName).SequenceEqual(
                secondCommand.ColumnModifications.Where(o => o.IsRead).Select(o => o.ColumnName));
}",1,439 334 2000 58 2001 123 437 341 404 2002 61 1505 59 437 341 404 2003 61 1506 42 2002 47 1502 59 437 341 404 2004 61 1505 59 437 341 404 2005 61 1504 59 437 404 2006 61 1501 59 621 437 441 404 2007 59 437 441 2008 60 2009 62 2010 61 418 40 41 59 437 404 2011 61 1503 59 612 439 2000 40 2012 2013 44 404 63 2014 41 58 320 40 2013 41 123 392 40 2014 46 2015 605 2014 46 2016 620 1500 41 123 469 418 2017 40 2018 40 2014 41 44 2019 46 2020 40 2014 46 2016 41 41 59 125 2007 61 2021 46 2022 40 2014 633 1503 44 2005 41 59 125 612 438 418 491 2023 2024 619 40 2023 41 320 46 2024 59 612 438 431 323 2025 40 2009 2026 41 123 392 40 2027 46 2028 615 2007 41 123 450 380 59 125 490 2029 61 2030 40 2026 41 59 392 40 2006 43 2029 615 2004 41 123 450 380 59 125 2006 636 2029 59 450 473 59 125 612 438 431 323 2031 40 41 123 392 40 629 2011 60 1500 41 123 490 2032 61 2033 40 41 46 2034 59 392 40 2032 615 2003 41 123 450 380 59 125 490 2035 61 2032 47 2036 46 2037 59 490 2038 61 40 2003 45 2032 41 47 2035 59 2011 61 2039 46 2040 40 1501 44 2038 47 1502 41 59 125 450 473 59 125 612 438 431 404 2041 40 41 619 2006 59 437 457 404 2042 40 2009 2026 41 123 490 2043 61 1500 59 621 385 40 490 2044 61 1500 59 2044 60 2026 46 2045 46 2046 59 2044 637 41 123 490 2047 61 2026 46 2045 91 2044 93 59 392 40 2047 46 2048 41 123 2043 637 59 125 392 40 2047 46 2049 41 123 2043 637 59 125 125 450 2043 59 125 612 438 431 492 2050 40 41 123 320 46 2050 40 41 59 2010 46 2051 40 41 59 125 612 438 431 461 2052 40 41 619 320 46 2052 40 41 43 2053 40 2054 46 2055 41 59 437 461 2053 40 404 2056 41 123 392 40 2010 46 2055 614 1500 41 123 450 461 46 2057 59 125 490 2058 61 418 2059 40 41 59 490 2060 61 2024 46 2061 40 2058 44 2010 44 2056 45 2010 46 2055 41 59 385 40 490 2062 61 2056 45 2010 46 2055 59 2062 60 2056 59 2062 637 41 123 2063 91 2062 93 61 2060 59 125 392 40 2060 631 2064 46 2065 41 123 2066 91 2056 45 1501 93 61 2064 46 2067 59 125 450 2058 46 2068 40 41 59 125 612 438 431 492 2069 40 404 2070 41 123 490 2071 61 2054 91 2070 93 59 392 40 2071 46 2072 614 2072 46 2073 41 123 392 40 2010 46 2055 62 1500 605 33 2074 40 2010 91 1500 93 44 2071 41 41 123 2075 46 2076 40 2053 40 2070 41 41 59 2010 46 2077 40 41 59 125 2010 46 2078 40 2071 41 59 2079 61 2070 59 125 360 123 2080 46 2081 40 2053 40 2070 41 41 59 2010 46 2082 40 41 59 320 46 2069 40 2070 41 59 125 125 437 457 323 2083 40 2009 2084 44 2009 2085 41 619 461 46 2086 40 2084 46 2087 44 2085 46 2087 44 2088 46 2089 41 605 461 46 2086 40 2084 46 2090 44 2085 46 2090 44 2088 46 2089 41 605 2084 46 2091 46 2092 40 2093 619 2093 46 2094 41 46 2095 40 2093 619 2093 46 2096 41 46 2097 40 2085 46 2091 46 2092 40 2093 619 2093 46 2094 41 46 2095 40 2093 619 2093 46 2096 41 41 605 2084 46 2091 46 2092 40 2093 619 2093 46 2098 41 46 2095 40 2093 619 2093 46 2096 41 46 2097 40 2085 46 2091 46 2092 40 2093 619 2093 46 2098 41 46 2095 40 2093 619 2093 46 2096 41 41 59 125 
76284,C#,"    public class ProviderManager : IProviderManager, IDisposable
    {
        private readonly object _refreshQueueLock = new object();
        private readonly ILogger<ProviderManager> _logger;
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly ILibraryMonitor _libraryMonitor;
        private readonly IFileSystem _fileSystem;
        private readonly IServerApplicationPaths _appPaths;
        private readonly ILibraryManager _libraryManager;
        private readonly ISubtitleManager _subtitleManager;
        private readonly IServerConfigurationManager _configurationManager;
        private readonly IBaseItemManager _baseItemManager;
        private readonly ConcurrentDictionary<Guid, double> _activeRefreshes = new ConcurrentDictionary<Guid, double>();
        private readonly CancellationTokenSource _disposeCancellationTokenSource = new CancellationTokenSource();
        private readonly SimplePriorityQueue<Tuple<Guid, MetadataRefreshOptions>> _refreshQueue =
            new SimplePriorityQueue<Tuple<Guid, MetadataRefreshOptions>>();

        private IMetadataService[] _metadataServices = Array.Empty<IMetadataService>();
        private IMetadataProvider[] _metadataProviders = Array.Empty<IMetadataProvider>();
        private IMetadataSaver[] _savers = Array.Empty<IMetadataSaver>();
        private IExternalId[] _externalIds = Array.Empty<IExternalId>();
        private bool _isProcessingRefreshQueue;
        private bool _disposed;

        /// <summary>
        /// Initializes a new instance of the <see cref=""ProviderManager""/> class.
        /// </summary>
        /// <param name=""httpClientFactory"">The Http client factory.</param>
        /// <param name=""subtitleManager"">The subtitle manager.</param>
        /// <param name=""configurationManager"">The configuration manager.</param>
        /// <param name=""libraryMonitor"">The library monitor.</param>
        /// <param name=""logger"">The logger.</param>
        /// <param name=""fileSystem"">The filesystem.</param>
        /// <param name=""appPaths"">The server application paths.</param>
        /// <param name=""libraryManager"">The library manager.</param>
        /// <param name=""baseItemManager"">The BaseItem manager.</param>
        public ProviderManager(
            IHttpClientFactory httpClientFactory,
            ISubtitleManager subtitleManager,
            IServerConfigurationManager configurationManager,
            ILibraryMonitor libraryMonitor,
            ILogger<ProviderManager> logger,
            IFileSystem fileSystem,
            IServerApplicationPaths appPaths,
            ILibraryManager libraryManager,
            IBaseItemManager baseItemManager)
        {
            _logger = logger;
            _httpClientFactory = httpClientFactory;
            _configurationManager = configurationManager;
            _libraryMonitor = libraryMonitor;
            _fileSystem = fileSystem;
            _appPaths = appPaths;
            _libraryManager = libraryManager;
            _subtitleManager = subtitleManager;
            _baseItemManager = baseItemManager;
        }

        /// <inheritdoc/>
        public event EventHandler<GenericEventArgs<BaseItem>> RefreshStarted;

        /// <inheritdoc/>
        public event EventHandler<GenericEventArgs<BaseItem>> RefreshCompleted;

        /// <inheritdoc/>
        public event EventHandler<GenericEventArgs<Tuple<BaseItem, double>>> RefreshProgress;

        private IImageProvider[] ImageProviders { get; set; }

        /// <inheritdoc/>
        public void AddParts(
            IEnumerable<IImageProvider> imageProviders,
            IEnumerable<IMetadataService> metadataServices,
            IEnumerable<IMetadataProvider> metadataProviders,
            IEnumerable<IMetadataSaver> metadataSavers,
            IEnumerable<IExternalId> externalIds)
        {
            ImageProviders = imageProviders.ToArray();

            _metadataServices = metadataServices.OrderBy(i => i.Order).ToArray();
            _metadataProviders = metadataProviders.ToArray();
            _externalIds = externalIds.OrderBy(i => i.ProviderName).ToArray();

            _savers = metadataSavers
                .Where(i => i is not IConfigurableProvider configurable || configurable.IsEnabled)
                .ToArray();
        }

        /// <inheritdoc/>
        public Task<ItemUpdateType> RefreshSingleItem(BaseItem item, MetadataRefreshOptions options, CancellationToken cancellationToken)
        {
            var type = item.GetType();

            var service = _metadataServices.FirstOrDefault(current => current.CanRefreshPrimary(type));

            if (service == null)
            {
                foreach (var current in _metadataServices)
                {
                    if (current.CanRefresh(item))
                    {
                        service = current;
                        break;
                    }
                }
            }

            if (service != null)
            {
                return service.RefreshMetadata(item, options, cancellationToken);
            }

            _logger.LogError(""Unable to find a metadata service for item of type {TypeName}"", item.GetType().Name);
            return Task.FromResult(ItemUpdateType.None);
        }

        /// <inheritdoc/>
        public async Task SaveImage(BaseItem item, string url, ImageType type, int? imageIndex, CancellationToken cancellationToken)
        {
            var httpClient = _httpClientFactory.CreateClient(NamedClient.Default);
            using var response = await httpClient.GetAsync(url, cancellationToken).ConfigureAwait(false);

            if (response.StatusCode != HttpStatusCode.OK)
            {
                throw new HttpRequestException(""Invalid image received."", null, response.StatusCode);
            }

            var contentType = response.Content.Headers.ContentType?.MediaType;

            // Workaround for tvheadend channel icons
            // TODO: Isolate this hack into the tvh plugin
            if (string.IsNullOrEmpty(contentType))
            {
                if (url.IndexOf(""/imagecache/"", StringComparison.OrdinalIgnoreCase) != -1)
                {
                    contentType = ""image/png"";
                }
            }

            // thetvdb will sometimes serve a rubbish 404 html page with a 200 OK code, because reasons...
            if (contentType.Equals(MediaTypeNames.Text.Html, StringComparison.OrdinalIgnoreCase))
            {
                throw new HttpRequestException(""Invalid image received."", null, HttpStatusCode.NotFound);
            }

            await using var stream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false);
            await SaveImage(
                item,
                stream,
                contentType,
                type,
                imageIndex,
                cancellationToken).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public Task SaveImage(BaseItem item, Stream source, string mimeType, ImageType type, int? imageIndex, CancellationToken cancellationToken)
        {
            return new ImageSaver(_configurationManager, _libraryMonitor, _fileSystem, _logger).SaveImage(item, source, mimeType, type, imageIndex, cancellationToken);
        }

        /// <inheritdoc/>
        public Task SaveImage(BaseItem item, string source, string mimeType, ImageType type, int? imageIndex, bool? saveLocallyWithMedia, CancellationToken cancellationToken)
        {
            if (string.IsNullOrWhiteSpace(source))
            {
                throw new ArgumentNullException(nameof(source));
            }

            var fileStream = AsyncFile.OpenRead(source);
            return new ImageSaver(_configurationManager, _libraryMonitor, _fileSystem, _logger).SaveImage(item, fileStream, mimeType, type, imageIndex, saveLocallyWithMedia, cancellationToken);
        }

        /// <inheritdoc/>
        public Task SaveImage(Stream source, string mimeType, string path)
        {
            return new ImageSaver(_configurationManager, _libraryMonitor, _fileSystem, _logger)
                .SaveImage(source, path);
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<RemoteImageInfo>> GetAvailableRemoteImages(BaseItem item, RemoteImageQuery query, CancellationToken cancellationToken)
        {
            var providers = GetRemoteImageProviders(item, query.IncludeDisabledProviders);

            if (!string.IsNullOrEmpty(query.ProviderName))
            {
                var providerName = query.ProviderName;

                providers = providers.Where(i => string.Equals(i.Name, providerName, StringComparison.OrdinalIgnoreCase));
            }

            var preferredLanguage = item.GetPreferredMetadataLanguage();

            var tasks = providers.Select(i => GetImages(item, i, preferredLanguage, query.IncludeAllLanguages, cancellationToken, query.ImageType));

            var results = await Task.WhenAll(tasks).ConfigureAwait(false);

            return results.SelectMany(i => i.ToList());
        }

        /// <summary>
        /// Gets the images.
        /// </summary>
        /// <param name=""item"">The item.</param>
        /// <param name=""provider"">The provider.</param>
        /// <param name=""preferredLanguage"">The preferred language.</param>
        /// <param name=""includeAllLanguages"">Whether to include all languages in results.</param>
        /// <param name=""cancellationToken"">The cancellation token.</param>
        /// <param name=""type"">The type.</param>
        /// <returns>Task{IEnumerable{RemoteImageInfo}}.</returns>
        private async Task<IEnumerable<RemoteImageInfo>> GetImages(
            BaseItem item,
            IRemoteImageProvider provider,
            string preferredLanguage,
            bool includeAllLanguages,
            CancellationToken cancellationToken,
            ImageType? type = null)
        {
            bool hasPreferredLanguage = !string.IsNullOrWhiteSpace(preferredLanguage);

            try
            {
                var result = await provider.GetImages(item, cancellationToken).ConfigureAwait(false);

                if (type.HasValue)
                {
                    result = result.Where(i => i.Type == type.Value);
                }

                if (!includeAllLanguages && hasPreferredLanguage)
                {
                    // Filter out languages that do not match the preferred languages.
                    //
                    // TODO: should exception case of ""en"" (English) eventually be removed?
                    result = result.Where(i => string.IsNullOrWhiteSpace(i.Language) ||
                                               string.Equals(preferredLanguage, i.Language, StringComparison.OrdinalIgnoreCase) ||
                                               string.Equals(i.Language, ""en"", StringComparison.OrdinalIgnoreCase));
                }

                return result.OrderByLanguageDescending(preferredLanguage);
            }
            catch (OperationCanceledException)
            {
                return new List<RemoteImageInfo>();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ""{ProviderName} failed in GetImageInfos for type {ItemType} at {ItemPath}"", provider.GetType().Name, item.GetType().Name, item.Path);
                return new List<RemoteImageInfo>();
            }
        }

        /// <inheritdoc/>
        public IEnumerable<ImageProviderInfo> GetRemoteImageProviderInfo(BaseItem item)
        {
            return GetRemoteImageProviders(item, true).Select(i => new ImageProviderInfo(i.Name, i.GetSupportedImages(item).ToArray()));
        }

        /// <summary>
        /// Gets the image providers for the provided item.
        /// </summary>
        /// <param name=""item"">The item.</param>
        /// <param name=""refreshOptions"">The image refresh options.</param>
        /// <returns>The image providers for the item.</returns>
        public IEnumerable<IImageProvider> GetImageProviders(BaseItem item, ImageRefreshOptions refreshOptions)
        {
            return GetImageProviders(item, _libraryManager.GetLibraryOptions(item), GetMetadataOptions(item), refreshOptions, false);
        }

        private IEnumerable<IImageProvider> GetImageProviders(BaseItem item, LibraryOptions libraryOptions, MetadataOptions options, ImageRefreshOptions refreshOptions, bool includeDisabled)
        {
            // Avoid implicitly captured closure
            var currentOptions = options;

            var typeOptions = libraryOptions.GetTypeOptions(item.GetType().Name);
            var typeFetcherOrder = typeOptions?.ImageFetcherOrder;

            return ImageProviders.Where(i => CanRefresh(i, item, libraryOptions, refreshOptions, includeDisabled))
                .OrderBy(i =>
                {
                    // See if there's a user-defined order
                    if (i is not ILocalImageProvider)
                    {
                        var fetcherOrder = typeFetcherOrder ?? currentOptions.ImageFetcherOrder;
                        var index = Array.IndexOf(fetcherOrder, i.Name);

                        if (index != -1)
                        {
                            return index;
                        }
                    }

                    // Not configured. Just return some high number to put it at the end.
                    return 100;
                })
            .ThenBy(GetOrder);
        }

        /// <summary>
        /// Gets the metadata providers for the provided item.
        /// </summary>
        /// <param name=""item"">The item.</param>
        /// <param name=""libraryOptions"">The library options.</param>
        /// <typeparam name=""T"">The type of metadata provider.</typeparam>
        /// <returns>The metadata providers.</returns>
        public IEnumerable<IMetadataProvider<T>> GetMetadataProviders<T>(BaseItem item, LibraryOptions libraryOptions)
            where T : BaseItem
        {
            var globalMetadataOptions = GetMetadataOptions(item);

            return GetMetadataProvidersInternal<T>(item, libraryOptions, globalMetadataOptions, false, false);
        }

        private IEnumerable<IMetadataProvider<T>> GetMetadataProvidersInternal<T>(BaseItem item, LibraryOptions libraryOptions, MetadataOptions globalMetadataOptions, bool includeDisabled, bool forceEnableInternetMetadata)
            where T : BaseItem
        {
            // Avoid implicitly captured closure
            var currentOptions = globalMetadataOptions;

            return _metadataProviders.OfType<IMetadataProvider<T>>()
                .Where(i => CanRefresh(i, item, libraryOptions, includeDisabled, forceEnableInternetMetadata))
                .OrderBy(i => GetConfiguredOrder(item, i, libraryOptions, globalMetadataOptions))
                .ThenBy(GetDefaultOrder);
        }

        private IEnumerable<IRemoteImageProvider> GetRemoteImageProviders(BaseItem item, bool includeDisabled)
        {
            var options = GetMetadataOptions(item);
            var libraryOptions = _libraryManager.GetLibraryOptions(item);

            return GetImageProviders(
                item,
                libraryOptions,
                options,
                new ImageRefreshOptions(new DirectoryService(_fileSystem)),
                includeDisabled).OfType<IRemoteImageProvider>();
        }

        private bool CanRefresh(
            IMetadataProvider provider,
            BaseItem item,
            LibraryOptions libraryOptions,
            bool includeDisabled,
            bool forceEnableInternetMetadata)
        {
            if (!includeDisabled)
            {
                // If locked only allow local providers
                if (item.IsLocked && provider is not ILocalMetadataProvider && provider is not IForcedProvider)
                {
                    return false;
                }

                if (provider is IRemoteMetadataProvider)
                {
                    if (!forceEnableInternetMetadata && !_baseItemManager.IsMetadataFetcherEnabled(item, libraryOptions, provider.Name))
                    {
                        return false;
                    }
                }
            }

            if (!item.SupportsLocalMetadata && provider is ILocalMetadataProvider)
            {
                return false;
            }

            // If this restriction is ever lifted, movie xml providers will have to be updated to prevent owned items like trailers from reading those files
            if (!item.OwnerId.Equals(Guid.Empty))
            {
                if (provider is ILocalMetadataProvider || provider is IRemoteMetadataProvider)
                {
                    return false;
                }
            }

            return true;
        }

        private bool CanRefresh(
            IImageProvider provider,
            BaseItem item,
            LibraryOptions libraryOptions,
            ImageRefreshOptions refreshOptions,
            bool includeDisabled)
        {
            if (!includeDisabled)
            {
                // If locked only allow local providers
                if (item.IsLocked && provider is not ILocalImageProvider)
                {
                    if (refreshOptions.ImageRefreshMode != MetadataRefreshMode.FullRefresh)
                    {
                        return false;
                    }
                }

                if (provider is IRemoteImageProvider || provider is IDynamicImageProvider)
                {
                    if (!_baseItemManager.IsImageFetcherEnabled(item, libraryOptions, provider.Name))
                    {
                        return false;
                    }
                }
            }

            try
            {
                return provider.Supports(item);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ""{ProviderName} failed in Supports for type {ItemType} at {ItemPath}"", provider.GetType().Name, item.GetType().Name, item.Path);
                return false;
            }
        }

        /// <summary>
        /// Gets the order.
        /// </summary>
        /// <param name=""provider"">The provider.</param>
        /// <returns>System.Int32.</returns>
        private int GetOrder(IImageProvider provider)
        {
            if (provider is not IHasOrder hasOrder)
            {
                return 0;
            }

            return hasOrder.Order;
        }

        private int GetConfiguredOrder(BaseItem item, IMetadataProvider provider, LibraryOptions libraryOptions, MetadataOptions globalMetadataOptions)
        {
            // See if there's a user-defined order
            if (provider is ILocalMetadataProvider)
            {
                var configuredOrder = libraryOptions.LocalMetadataReaderOrder ?? globalMetadataOptions.LocalMetadataReaderOrder;

                var index = Array.IndexOf(configuredOrder, provider.Name);

                if (index != -1)
                {
                    return index;
                }
            }

            // See if there's a user-defined order
            if (provider is IRemoteMetadataProvider)
            {
                var typeOptions = libraryOptions.GetTypeOptions(item.GetType().Name);
                var typeFetcherOrder = typeOptions?.MetadataFetcherOrder;

                var fetcherOrder = typeFetcherOrder ?? globalMetadataOptions.MetadataFetcherOrder;

                var index = Array.IndexOf(fetcherOrder, provider.Name);

                if (index != -1)
                {
                    return index;
                }
            }

            // Not configured. Just return some high number to put it at the end.
            return 100;
        }

        private int GetDefaultOrder(IMetadataProvider provider)
        {
            if (provider is IHasOrder hasOrder)
            {
                return hasOrder.Order;
            }

            return 0;
        }

        /// <inheritdoc/>
        public MetadataPluginSummary[] GetAllMetadataPlugins()
        {
            return new[]
            {
                GetPluginSummary<Movie>(),
                GetPluginSummary<BoxSet>(),
                GetPluginSummary<Book>(),
                GetPluginSummary<Series>(),
                GetPluginSummary<Season>(),
                GetPluginSummary<Episode>(),
                GetPluginSummary<MusicAlbum>(),
                GetPluginSummary<MusicArtist>(),
                GetPluginSummary<Audio>(),
                GetPluginSummary<AudioBook>(),
                GetPluginSummary<Studio>(),
                GetPluginSummary<MusicVideo>(),
                GetPluginSummary<Video>()
            };
        }

        private MetadataPluginSummary GetPluginSummary<T>()
            where T : BaseItem, new()
        {
            // Give it a dummy path just so that it looks like a file system item
            var dummy = new T
            {
                Path = Path.Combine(_appPaths.InternalMetadataPath, ""dummy""),
                ParentId = Guid.NewGuid()
            };

            var options = GetMetadataOptions(dummy);

            var summary = new MetadataPluginSummary
            {
                ItemType = typeof(T).Name
            };

            var libraryOptions = new LibraryOptions();

            var imageProviders = GetImageProviders(
                dummy,
                libraryOptions,
                options,
                new ImageRefreshOptions(new DirectoryService(_fileSystem)),
                true).ToList();

            var pluginList = summary.Plugins.ToList();

            AddMetadataPlugins(pluginList, dummy, libraryOptions, options);
            AddImagePlugins(pluginList, imageProviders);

            var subtitleProviders = _subtitleManager.GetSupportedProviders(dummy);

            // Subtitle fetchers
            pluginList.AddRange(subtitleProviders.Select(i => new MetadataPlugin
            {
                Name = i.Name,
                Type = MetadataPluginType.SubtitleFetcher
            }));

            summary.Plugins = pluginList.ToArray();

            var supportedImageTypes = imageProviders.OfType<IRemoteImageProvider>()
                .SelectMany(i => i.GetSupportedImages(dummy))
                .ToList();

            supportedImageTypes.AddRange(imageProviders.OfType<IDynamicImageProvider>()
                .SelectMany(i => i.GetSupportedImages(dummy)));

            summary.SupportedImageTypes = supportedImageTypes.Distinct().ToArray();

            return summary;
        }

        private void AddMetadataPlugins<T>(List<MetadataPlugin> list, T item, LibraryOptions libraryOptions, MetadataOptions options)
            where T : BaseItem
        {
            var providers = GetMetadataProvidersInternal<T>(item, libraryOptions, options, true, true).ToList();

            // Locals
            list.AddRange(providers.Where(i => i is ILocalMetadataProvider).Select(i => new MetadataPlugin
            {
                Name = i.Name,
                Type = MetadataPluginType.LocalMetadataProvider
            }));

            // Fetchers
            list.AddRange(providers.Where(i => i is IRemoteMetadataProvider).Select(i => new MetadataPlugin
            {
                Name = i.Name,
                Type = MetadataPluginType.MetadataFetcher
            }));

            // Savers
            list.AddRange(_savers.Where(i => IsSaverEnabledForItem(i, item, libraryOptions, ItemUpdateType.MetadataEdit, true)).OrderBy(i => i.Name).Select(i => new MetadataPlugin
            {
                Name = i.Name,
                Type = MetadataPluginType.MetadataSaver
            }));
        }

        private void AddImagePlugins(List<MetadataPlugin> list, List<IImageProvider> imageProviders)
        {
            // Locals
            list.AddRange(imageProviders.Where(i => i is ILocalImageProvider).Select(i => new MetadataPlugin
            {
                Name = i.Name,
                Type = MetadataPluginType.LocalImageProvider
            }));

            // Fetchers
            list.AddRange(imageProviders.Where(i => i is IDynamicImageProvider || (i is IRemoteImageProvider)).Select(i => new MetadataPlugin
            {
                Name = i.Name,
                Type = MetadataPluginType.ImageFetcher
            }));
        }

        /// <inheritdoc/>
        public MetadataOptions GetMetadataOptions(BaseItem item)
        {
            var type = item.GetType().Name;

            return _configurationManager.Configuration.MetadataOptions
                .FirstOrDefault(i => string.Equals(i.ItemType, type, StringComparison.OrdinalIgnoreCase)) ??
                new MetadataOptions();
        }

        /// <inheritdoc/>
        public void SaveMetadata(BaseItem item, ItemUpdateType updateType)
        {
            SaveMetadata(item, updateType, _savers);
        }

        /// <inheritdoc/>
        public void SaveMetadata(BaseItem item, ItemUpdateType updateType, IEnumerable<string> savers)
        {
            SaveMetadata(item, updateType, _savers.Where(i => savers.Contains(i.Name, StringComparer.OrdinalIgnoreCase)));
        }

        /// <summary>
        /// Saves the metadata.
        /// </summary>
        /// <param name=""item"">The item.</param>
        /// <param name=""updateType"">Type of the update.</param>
        /// <param name=""savers"">The savers.</param>
        private void SaveMetadata(BaseItem item, ItemUpdateType updateType, IEnumerable<IMetadataSaver> savers)
        {
            var libraryOptions = _libraryManager.GetLibraryOptions(item);

            foreach (var saver in savers.Where(i => IsSaverEnabledForItem(i, item, libraryOptions, updateType, false)))
            {
                _logger.LogDebug(""Saving {0} to {1}."", item.Path ?? item.Name, saver.Name);

                if (saver is IMetadataFileSaver fileSaver)
                {
                    string path;

                    try
                    {
                        path = fileSaver.GetSavePath(item);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ""Error in {0} GetSavePath"", saver.Name);
                        continue;
                    }

                    try
                    {
                        _libraryMonitor.ReportFileSystemChangeBeginning(path);
                        saver.Save(item, CancellationToken.None);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ""Error in metadata saver"");
                    }
                    finally
                    {
                        _libraryMonitor.ReportFileSystemChangeComplete(path, false);
                    }
                }
                else
                {
                    try
                    {
                        saver.Save(item, CancellationToken.None);
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, ""Error in metadata saver"");
                    }
                }
            }
        }

        /// <summary>
        /// Determines whether [is saver enabled for item] [the specified saver].
        /// </summary>
        private bool IsSaverEnabledForItem(IMetadataSaver saver, BaseItem item, LibraryOptions libraryOptions, ItemUpdateType updateType, bool includeDisabled)
        {
            var options = GetMetadataOptions(item);

            try
            {
                if (!saver.IsEnabledFor(item, updateType))
                {
                    return false;
                }

                if (!includeDisabled)
                {
                    if (libraryOptions.MetadataSavers == null)
                    {
                        if (options.DisabledMetadataSavers.Contains(saver.Name, StringComparer.OrdinalIgnoreCase))
                        {
                            return false;
                        }

                        if (!item.IsSaveLocalMetadataEnabled())
                        {
                            if (updateType >= ItemUpdateType.MetadataEdit)
                            {
                                // Manual edit occurred
                                // Even if save local is off, save locally anyway if the metadata file already exists
                                if (saver is not IMetadataFileSaver fileSaver || !File.Exists(fileSaver.GetSavePath(item)))
                                {
                                    return false;
                                }
                            }
                            else
                            {
                                // Manual edit did not occur
                                // Since local metadata saving is disabled, consider it disabled
                                return false;
                            }
                        }
                    }
                    else
                    {
                        if (!libraryOptions.MetadataSavers.Contains(saver.Name, StringComparer.OrdinalIgnoreCase))
                        {
                            return false;
                        }
                    }
                }

                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ""Error in {0}.IsEnabledFor"", saver.Name);
                return false;
            }
        }

        /// <inheritdoc/>
        public Task<IEnumerable<RemoteSearchResult>> GetRemoteSearchResults<TItemType, TLookupType>(RemoteSearchQuery<TLookupType> searchInfo, CancellationToken cancellationToken)
            where TItemType : BaseItem, new()
            where TLookupType : ItemLookupInfo
        {
            BaseItem referenceItem = null;

            if (!searchInfo.ItemId.Equals(Guid.Empty))
            {
                referenceItem = _libraryManager.GetItemById(searchInfo.ItemId);
            }

            return GetRemoteSearchResults<TItemType, TLookupType>(searchInfo, referenceItem, cancellationToken);
        }

        private async Task<IEnumerable<RemoteSearchResult>> GetRemoteSearchResults<TItemType, TLookupType>(RemoteSearchQuery<TLookupType> searchInfo, BaseItem referenceItem, CancellationToken cancellationToken)
            where TItemType : BaseItem, new()
            where TLookupType : ItemLookupInfo
        {
            LibraryOptions libraryOptions;

            if (referenceItem == null)
            {
                // Give it a dummy path just so that it looks like a file system item
                var dummy = new TItemType
                {
                    Path = Path.Combine(_appPaths.InternalMetadataPath, ""dummy""),
                    ParentId = Guid.NewGuid()
                };

                dummy.SetParent(new Folder());

                referenceItem = dummy;
                libraryOptions = new LibraryOptions();
            }
            else
            {
                libraryOptions = _libraryManager.GetLibraryOptions(referenceItem);
            }

            var options = GetMetadataOptions(referenceItem);

            var providers = GetMetadataProvidersInternal<TItemType>(referenceItem, libraryOptions, options, searchInfo.IncludeDisabledProviders, false)
                .OfType<IRemoteSearchProvider<TLookupType>>();

            if (!string.IsNullOrEmpty(searchInfo.SearchProviderName))
            {
                providers = providers.Where(i => string.Equals(i.Name, searchInfo.SearchProviderName, StringComparison.OrdinalIgnoreCase));
            }

            if (string.IsNullOrWhiteSpace(searchInfo.SearchInfo.MetadataLanguage))
            {
                searchInfo.SearchInfo.MetadataLanguage = _configurationManager.Configuration.PreferredMetadataLanguage;
            }

            if (string.IsNullOrWhiteSpace(searchInfo.SearchInfo.MetadataCountryCode))
            {
                searchInfo.SearchInfo.MetadataCountryCode = _configurationManager.Configuration.MetadataCountryCode;
            }

            var resultList = new List<RemoteSearchResult>();

            foreach (var provider in providers)
            {
                try
                {
                    var results = await GetSearchResults(provider, searchInfo.SearchInfo, cancellationToken).ConfigureAwait(false);

                    foreach (var result in results)
                    {
                        var existingMatch = resultList.FirstOrDefault(i => i.ProviderIds.Any(p => string.Equals(result.GetProviderId(p.Key), p.Value, StringComparison.OrdinalIgnoreCase)));

                        if (existingMatch == null)
                        {
                            resultList.Add(result);
                        }
                        else
                        {
                            foreach (var providerId in result.ProviderIds)
                            {
                                if (!existingMatch.ProviderIds.ContainsKey(providerId.Key))
                                {
                                    existingMatch.ProviderIds.Add(providerId.Key, providerId.Value);
                                }
                            }

                            if (string.IsNullOrWhiteSpace(existingMatch.ImageUrl))
                            {
                                existingMatch.ImageUrl = result.ImageUrl;
                            }
                        }
                    }
                }
#pragma warning disable CA1031 // do not catch general exception types
                catch (Exception ex)
#pragma warning restore CA1031 // do not catch general exception types
                {
                    _logger.LogError(ex, ""Provider {ProviderName} failed to retrieve search results"", provider.Name);
                }
            }

            return resultList;
        }

        private async Task<IEnumerable<RemoteSearchResult>> GetSearchResults<TLookupType>(
            IRemoteSearchProvider<TLookupType> provider,
            TLookupType searchInfo,
            CancellationToken cancellationToken)
            where TLookupType : ItemLookupInfo
        {
            var results = await provider.GetSearchResults(searchInfo, cancellationToken).ConfigureAwait(false);

            var list = results.ToList();

            foreach (var item in list)
            {
                item.SearchProviderName = provider.Name;
            }

            return list;
        }

        /// <inheritdoc/>
        public Task<HttpResponseMessage> GetSearchImage(string providerName, string url, CancellationToken cancellationToken)
        {
            var provider = _metadataProviders.OfType<IRemoteSearchProvider>().FirstOrDefault(i => string.Equals(i.Name, providerName, StringComparison.OrdinalIgnoreCase));

            if (provider == null)
            {
                throw new ArgumentException(""Search provider not found."");
            }

            return provider.GetImageResponse(url, cancellationToken);
        }

        private IEnumerable<IExternalId> GetExternalIds(IHasProviderIds item)
        {
            return _externalIds.Where(i =>
            {
                try
                {
                    return i.Supports(item);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ""Error in {0}.Suports"", i.GetType().Name);
                    return false;
                }
            });
        }

        /// <inheritdoc/>
        public IEnumerable<ExternalUrl> GetExternalUrls(BaseItem item)
        {
            return GetExternalIds(item)
                .Select(i =>
            {
                if (string.IsNullOrEmpty(i.UrlFormatString))
                {
                    return null;
                }

                var value = item.GetProviderId(i.Key);

                if (string.IsNullOrEmpty(value))
                {
                    return null;
                }

                return new ExternalUrl
                {
                    Name = i.ProviderName,
                    Url = string.Format(
                        CultureInfo.InvariantCulture,
                        i.UrlFormatString,
                        value)
                };
            }).Where(i => i != null).Concat(item.GetRelatedUrls());
        }

        /// <inheritdoc/>
        public IEnumerable<ExternalIdInfo> GetExternalIdInfos(IHasProviderIds item)
        {
            return GetExternalIds(item)
                .Select(i => new ExternalIdInfo(
                    name: i.ProviderName,
                    key: i.Key,
                    type: i.Type,
                    urlFormatString: i.UrlFormatString));
        }

        /// <inheritdoc/>
        public Dictionary<Guid, Guid> GetRefreshQueue()
        {
            lock (_refreshQueueLock)
            {
                var dict = new Dictionary<Guid, Guid>();

                foreach (var item in _refreshQueue)
                {
                    dict[item.Item1] = item.Item1;
                }

                return dict;
            }
        }

        /// <inheritdoc/>
        public void OnRefreshStart(BaseItem item)
        {
            _logger.LogDebug(""OnRefreshStart {0}"", item.Id.ToString(""N"", CultureInfo.InvariantCulture));
            _activeRefreshes[item.Id] = 0;
            RefreshStarted?.Invoke(this, new GenericEventArgs<BaseItem>(item));
        }

        /// <inheritdoc/>
        public void OnRefreshComplete(BaseItem item)
        {
            _logger.LogDebug(""OnRefreshComplete {0}"", item.Id.ToString(""N"", CultureInfo.InvariantCulture));

            _activeRefreshes.Remove(item.Id, out _);

            RefreshCompleted?.Invoke(this, new GenericEventArgs<BaseItem>(item));
        }

        /// <inheritdoc/>
        public double? GetRefreshProgress(Guid id)
        {
            if (_activeRefreshes.TryGetValue(id, out double value))
            {
                return value;
            }

            return null;
        }

        /// <inheritdoc/>
        public void OnRefreshProgress(BaseItem item, double progress)
        {
            var id = item.Id;
            _logger.LogDebug(""OnRefreshProgress {0} {1}"", id.ToString(""N"", CultureInfo.InvariantCulture), progress);

            // TODO: Need to hunt down the conditions for this happening
            _activeRefreshes.AddOrUpdate(
                id,
                (_) => throw new InvalidOperationException(
                    string.Format(
                        CultureInfo.InvariantCulture,
                        ""Cannot update refresh progress of item '{0}' ({1}) because a refresh for this item is not running"",
                        item.GetType().Name,
                        item.Id.ToString(""N"", CultureInfo.InvariantCulture))),
                (_, _) => progress);

            RefreshProgress?.Invoke(this, new GenericEventArgs<Tuple<BaseItem, double>>(new Tuple<BaseItem, double>(item, progress)));
        }

        /// <inheritdoc/>
        public void QueueRefresh(Guid itemId, MetadataRefreshOptions options, RefreshPriority priority)
        {
            if (_disposed)
            {
                return;
            }

            _refreshQueue.Enqueue(new Tuple<Guid, MetadataRefreshOptions>(itemId, options), (int)priority);

            lock (_refreshQueueLock)
            {
                if (!_isProcessingRefreshQueue)
                {
                    _isProcessingRefreshQueue = true;
                    Task.Run(StartProcessingRefreshQueue);
                }
            }
        }

        private async Task StartProcessingRefreshQueue()
        {
            var libraryManager = _libraryManager;

            if (_disposed)
            {
                return;
            }

            var cancellationToken = _disposeCancellationTokenSource.Token;

            while (_refreshQueue.TryDequeue(out Tuple<Guid, MetadataRefreshOptions> refreshItem))
            {
                if (_disposed)
                {
                    return;
                }

                try
                {
                    var item = libraryManager.GetItemById(refreshItem.Item1);
                    if (item == null)
                    {
                        continue;
                    }

                    var task = item is MusicArtist artist
                        ? RefreshArtist(artist, refreshItem.Item2, cancellationToken)
                        : RefreshItem(item, refreshItem.Item2, cancellationToken);

                    await task.ConfigureAwait(false);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, ""Error refreshing item"");
                }
            }

            lock (_refreshQueueLock)
            {
                _isProcessingRefreshQueue = false;
            }
        }

        private async Task RefreshItem(BaseItem item, MetadataRefreshOptions options, CancellationToken cancellationToken)
        {
            await item.RefreshMetadata(options, cancellationToken).ConfigureAwait(false);

            // Collection folders don't validate their children so we'll have to simulate that here
            switch (item)
            {
                case CollectionFolder collectionFolder:
                    await RefreshCollectionFolderChildren(options, collectionFolder, cancellationToken).ConfigureAwait(false);
                    break;
                case Folder folder:
                    await folder.ValidateChildren(new SimpleProgress<double>(), options, cancellationToken: cancellationToken).ConfigureAwait(false);
                    break;
            }
        }

        private async Task RefreshCollectionFolderChildren(MetadataRefreshOptions options, CollectionFolder collectionFolder, CancellationToken cancellationToken)
        {
            foreach (var child in collectionFolder.GetPhysicalFolders())
            {
                await child.RefreshMetadata(options, cancellationToken).ConfigureAwait(false);

                await child.ValidateChildren(new SimpleProgress<double>(), options, cancellationToken: cancellationToken).ConfigureAwait(false);
            }
        }

        private async Task RefreshArtist(MusicArtist item, MetadataRefreshOptions options, CancellationToken cancellationToken)
        {
            var albums = _libraryManager
                .GetItemList(new InternalItemsQuery
                {
                    IncludeItemTypes = new[] { BaseItemKind.MusicAlbum },
                    ArtistIds = new[] { item.Id },
                    DtoOptions = new DtoOptions(false)
                    {
                        EnableImages = false
                    }
                })
                .OfType<MusicAlbum>();

            var musicArtists = albums
                .Select(i => i.MusicArtist)
                .Where(i => i != null);

            var musicArtistRefreshTasks = musicArtists.Select(i => i.ValidateChildren(new SimpleProgress<double>(), options, true, cancellationToken));

            await Task.WhenAll(musicArtistRefreshTasks).ConfigureAwait(false);

            try
            {
                await item.RefreshMetadata(options, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ""Error refreshing library"");
            }
        }

        /// <inheritdoc/>
        public Task RefreshFullItem(BaseItem item, MetadataRefreshOptions options, CancellationToken cancellationToken)
        {
            return RefreshItem(item, options, cancellationToken);
        }

        /// <summary>
        /// Runs multiple metadata refreshes concurrently.
        /// </summary>
        /// <param name=""action"">The action to run.</param>
        /// <param name=""cancellationToken"">The cancellation token.</param>
        /// <returns>A <see cref=""Task""/> representing the result of the asynchronous operation.</returns>
        public async Task RunMetadataRefresh(Func<Task> action, CancellationToken cancellationToken)
        {
            // create a variable for this since it is possible MetadataRefreshThrottler could change due to a config update during a scan
            var metadataRefreshThrottler = _baseItemManager.MetadataRefreshThrottler;

            await metadataRefreshThrottler.WaitAsync(cancellationToken).ConfigureAwait(false);

            try
            {
                await action().ConfigureAwait(false);
            }
            finally
            {
                metadataRefreshThrottler.Release();
            }
        }

        /// <inheritdoc/>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Releases unmanaged and optionally managed resources.
        /// </summary>
        /// <param name=""disposing""><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (_disposed)
            {
                return;
            }

            if (!_disposeCancellationTokenSource.IsCancellationRequested)
            {
                _disposeCancellationTokenSource.Cancel();
            }

            if (disposing)
            {
                _disposeCancellationTokenSource.Dispose();
            }

            _disposed = true;
        }
    }",1,439 334 2000 58 2001 44 2002 123 437 441 426 2003 61 418 426 40 41 59 437 441 2004 60 2000 62 2005 59 437 441 2006 2007 59 437 441 2008 2009 59 437 441 2010 2011 59 437 441 2012 2013 59 437 441 2014 2015 59 437 441 2016 2017 59 437 441 2018 2019 59 437 441 2020 2021 59 437 441 2022 60 2023 44 356 62 2024 61 418 2022 60 2023 44 356 62 40 41 59 437 441 2025 2026 61 418 2025 40 41 59 437 441 2027 60 2028 60 2023 44 2029 640 2030 61 418 2027 60 2028 60 2023 44 2029 640 40 41 59 437 2031 91 93 2032 61 2033 46 2034 60 2031 62 40 41 59 437 2035 91 93 2036 61 2033 46 2034 60 2035 62 40 41 59 437 2037 91 93 2038 61 2033 46 2034 60 2037 62 40 41 59 437 2039 91 93 2040 61 2033 46 2034 60 2039 62 40 41 59 437 323 2041 59 437 323 2042 59 612 439 2000 40 2006 2043 44 2016 2044 44 2018 2045 44 2008 2046 44 2004 60 2000 62 2047 44 2010 2048 44 2012 2049 44 2014 2050 44 2020 2051 41 123 2005 61 2047 59 2007 61 2043 59 2019 61 2045 59 2009 61 2046 59 2011 61 2048 59 2013 61 2049 59 2015 61 2050 59 2017 61 2044 59 2021 61 2051 59 125 612 439 373 2052 60 2053 60 2054 640 2055 59 612 439 373 2052 60 2053 60 2054 640 2056 59 612 439 373 2052 60 2053 60 2028 60 2054 44 356 640 62 2057 59 437 2058 91 93 2059 123 2060 59 2061 59 125 612 439 492 2062 40 2063 60 2058 62 2064 44 2063 60 2031 62 2065 44 2063 60 2035 62 2066 44 2063 60 2037 62 2067 44 2063 60 2039 62 2068 41 123 2059 61 2064 46 2069 40 41 59 2032 61 2065 46 2070 40 2071 619 2071 46 2072 41 46 2069 40 41 59 2036 61 2066 46 2069 40 41 59 2040 61 2068 46 2070 40 2071 619 2071 46 2073 41 46 2069 40 41 59 2038 61 2067 46 2074 40 2071 619 2071 407 422 2075 2076 606 2076 46 2077 41 46 2069 40 41 59 125 612 439 2078 60 2079 62 2080 40 2054 2081 44 2029 2082 44 2083 2084 41 123 490 2085 61 2081 46 2086 40 41 59 490 2087 61 2032 46 2088 40 2089 619 2089 46 2090 40 2085 41 41 59 392 40 2087 614 424 41 123 386 40 490 2089 398 2032 41 123 392 40 2089 46 2091 40 2081 41 41 123 2087 61 2089 59 325 59 125 125 125 392 40 2087 631 424 41 123 450 2087 46 2092 40 2081 44 2082 44 2084 41 59 125 2005 46 2093 40 648 44 2081 46 2086 40 41 46 2094 41 59 450 2078 46 2095 40 2079 46 303 41 59 125 612 439 314 2078 2096 40 2054 2081 44 461 2097 44 2098 2099 44 404 63 2100 44 2083 2084 41 123 490 2101 61 2007 46 2102 40 2103 46 2104 41 59 489 490 2105 61 319 2101 46 2106 40 2097 44 2084 41 46 2107 40 380 41 59 392 40 2105 46 2108 631 2109 46 2110 41 123 469 418 2111 40 648 44 424 44 2105 46 2108 41 59 125 490 2112 61 2105 46 2113 46 2114 46 2115 634 2116 59 621 621 392 40 461 46 2117 40 2112 41 41 123 392 40 2097 46 2118 40 648 44 2119 46 2120 41 631 45 1501 41 123 2112 61 648 59 125 125 621 392 40 2112 46 2121 40 2122 46 2123 46 2124 44 2125 46 2126 41 41 123 469 418 2127 40 648 44 424 44 2109 46 2128 41 59 125 319 489 490 2129 61 319 2105 46 2113 46 2130 40 2084 41 46 2107 40 380 41 59 319 2096 40 2081 44 2129 44 2112 44 2099 44 2100 44 2084 41 46 2107 40 380 41 59 125 612 439 2078 2096 40 2054 2081 44 2131 2132 44 461 2133 44 2098 2099 44 404 63 2100 44 2083 2084 41 123 450 418 2134 40 2019 44 2009 44 2011 44 2005 41 46 2096 40 2081 44 2132 44 2133 44 2099 44 2100 44 2084 41 59 125 612 439 2078 2096 40 2054 2081 44 461 2132 44 461 2133 44 2098 2099 44 404 63 2100 44 323 63 2135 44 2083 2084 41 123 392 40 461 46 2136 40 2132 41 41 123 469 418 2137 40 2138 40 2132 41 41 59 125 490 2139 61 2140 46 2141 40 2132 41 59 450 418 2142 40 2019 44 2009 44 2011 44 2005 41 46 2096 40 2081 44 2139 44 2133 44 2099 44 2100 44 2135 44 2084 41 59 125 612 439 2078 2096 40 2131 2132 44 461 2133 44 461 2143 41 123 450 418 2144 40 2019 44 2009 44 2011 44 2005 41 46 2096 40 2132 44 2143 41 59 125 612 439 314 2078 60 2063 60 2145 640 2146 40 2054 2081 44 2147 2148 44 2083 2084 41 123 490 2149 61 2150 40 2081 44 2148 46 2151 41 59 392 40 33 461 46 2152 40 2148 46 2153 41 41 123 490 2154 61 2148 46 2153 59 2149 61 2149 46 2155 40 2156 619 461 46 2157 40 2156 46 2158 44 2154 44 2159 46 2160 41 41 59 125 490 2161 61 2081 46 2162 40 41 59 490 2163 61 2149 46 2164 40 2165 619 2166 40 2081 44 2165 44 2161 44 2148 46 2167 44 2084 44 2148 46 2098 41 41 59 490 2168 61 319 2078 46 2169 40 2163 41 46 2170 40 380 41 59 450 2168 46 2171 40 2165 619 2165 46 2172 40 41 41 59 125 612 437 314 2078 60 2063 60 2145 640 2173 40 2054 2081 44 2174 2175 44 461 2176 44 323 2177 44 2083 2084 44 2098 63 2099 61 424 41 123 323 2178 61 33 461 46 2179 40 2176 41 59 474 123 490 2180 61 319 2175 46 2173 40 2081 44 2084 41 46 2181 40 380 41 59 392 40 2099 46 2182 41 123 2180 61 2180 46 2183 40 2184 619 2184 46 2185 614 2099 46 2186 41 59 125 392 40 33 2177 605 2178 41 123 621 621 621 2180 61 2180 46 2187 40 2188 619 461 46 2179 40 2188 46 2189 41 606 461 46 2190 40 2176 44 2188 46 2189 44 2191 46 2192 41 606 461 46 2190 40 2188 46 2189 44 648 44 2191 46 2192 41 41 59 125 450 2180 46 2193 40 2176 41 59 125 329 40 2194 41 123 450 418 2195 60 2145 62 40 41 59 125 329 40 2196 2197 41 123 2005 46 2198 40 2197 44 648 44 2175 46 2199 40 41 46 2200 44 2081 46 2199 40 41 46 2200 44 2081 46 2201 41 59 450 418 2202 60 2145 62 40 41 59 125 125 612 439 2063 60 2203 62 2204 40 2054 2081 41 123 450 2205 40 2081 44 473 41 46 2206 40 2207 619 418 2203 40 2207 46 2208 44 2207 46 2209 40 2081 41 46 2210 40 41 41 41 59 125 612 439 2063 60 2058 62 2211 40 2054 2081 44 2212 2213 41 123 450 2211 40 2081 44 2015 46 2214 40 2081 41 44 2215 40 2081 41 44 2213 44 380 41 59 125 437 2063 60 2058 62 2211 40 2054 2081 44 2216 2217 44 2218 2082 44 2212 2213 44 323 2219 41 123 621 490 2220 61 2082 59 490 2221 61 2217 46 2222 40 2081 46 2223 40 41 46 2224 41 59 490 2225 61 2221 634 2226 59 450 2059 46 2227 40 2228 619 2229 40 2228 44 2081 44 2217 44 2213 44 2219 41 41 46 2230 40 2228 619 123 621 392 40 2228 407 422 2231 41 123 490 2232 61 2225 633 2220 46 2226 59 490 2233 61 2033 46 2234 40 2232 44 2228 46 2224 41 59 392 40 2233 631 45 1501 41 123 450 2233 59 125 125 621 450 1503 59 125 41 46 2235 40 2236 41 59 125 612 439 2063 60 2035 60 2237 640 2238 60 2237 62 40 2054 2081 44 2216 2217 41 2239 2237 58 2054 123 490 2240 61 2241 40 2081 41 59 450 2242 60 2237 62 40 2081 44 2217 44 2240 44 380 44 380 41 59 125 437 2063 60 2035 60 2237 640 2243 60 2237 62 40 2054 2081 44 2216 2217 44 2218 2244 44 323 2219 44 323 2245 41 2239 2237 58 2054 123 621 490 2246 61 2244 59 450 2036 46 2247 60 2035 60 2237 640 40 41 46 2248 40 2249 619 2250 40 2249 44 2081 44 2217 44 2219 44 2245 41 41 46 2251 40 2249 619 2252 40 2081 44 2249 44 2217 44 2244 41 41 46 2253 40 2254 41 59 125 437 2063 60 2174 62 2255 40 2054 2081 44 323 2219 41 123 490 2082 61 2256 40 2081 41 59 490 2217 61 2015 46 2257 40 2081 41 59 450 2211 40 2081 44 2217 44 2082 44 418 2212 40 418 2258 40 2011 41 41 44 2219 41 46 2259 60 2174 62 40 41 59 125 437 323 2260 40 2035 2175 44 2054 2081 44 2216 2217 44 323 2219 44 323 2245 41 123 392 40 33 2219 41 123 621 392 40 2081 46 2261 605 2175 407 422 2262 605 2175 407 422 2263 41 123 450 380 59 125 392 40 2175 407 2264 41 123 392 40 33 2245 605 33 2021 46 2265 40 2081 44 2217 44 2175 46 2266 41 41 123 450 380 59 125 125 125 392 40 33 2081 46 2267 605 2175 407 2268 41 123 450 380 59 125 621 392 40 33 2081 46 2269 46 2270 40 2023 46 2034 41 41 123 392 40 2175 407 2268 606 2175 407 2271 41 123 450 380 59 125 125 450 473 59 125 437 323 2260 40 2058 2175 44 2054 2081 44 2216 2217 44 2212 2213 44 323 2219 41 123 392 40 33 2219 41 123 621 392 40 2081 46 2272 605 2175 407 422 2273 41 123 392 40 2213 46 2274 631 2275 46 2276 41 123 450 380 59 125 125 392 40 2175 407 2174 606 2175 407 2277 41 123 392 40 33 2021 46 2278 40 2081 44 2217 44 2175 46 2279 41 41 123 450 380 59 125 125 125 474 123 450 2175 46 2280 40 2081 41 59 125 329 40 2281 2282 41 123 2005 46 2283 40 2282 44 648 44 2175 46 2284 40 41 46 2285 44 2081 46 2284 40 41 46 2285 44 2081 46 2286 41 59 450 380 59 125 125 612 437 404 2287 40 2058 2175 41 123 392 40 2175 407 422 2288 2289 41 123 450 1500 59 125 450 2289 46 2290 59 125 437 404 2291 40 2054 2081 44 2035 2175 44 2216 2217 44 2218 2244 41 123 621 392 40 2175 407 2292 41 123 490 2293 61 2217 46 2294 633 2244 46 2294 59 490 2295 61 2033 46 2296 40 2293 44 2175 46 2297 41 59 392 40 2295 631 45 1501 41 123 450 2295 59 125 125 621 392 40 2175 407 2298 41 123 490 2299 61 2217 46 2300 40 2081 46 2301 40 41 46 2302 41 59 490 2303 61 2299 634 2304 59 490 2305 61 2303 633 2244 46 2304 59 490 2306 61 2033 46 2307 40 2305 44 2175 46 2302 41 59 392 40 2306 631 45 1501 41 123 450 2306 59 125 125 621 450 1503 59 125 437 404 2308 40 2035 2175 41 123 392 40 2175 407 2309 2310 41 123 450 2310 46 2311 59 125 450 1500 59 125 612 439 2312 91 93 2313 40 41 123 450 418 91 93 123 2314 60 2315 62 40 41 44 2314 60 2316 62 40 41 44 2314 60 2317 62 40 41 44 2314 60 2318 62 40 41 44 2314 60 2319 62 40 41 44 2314 60 2320 62 40 41 44 2314 60 2321 62 40 41 44 2314 60 2322 62 40 41 44 2314 60 2323 62 40 41 44 2314 60 2324 62 40 41 44 2314 60 2325 62 40 41 44 2314 60 2326 62 40 41 44 2314 60 2327 62 40 41 125 59 125 437 2312 2328 60 2237 62 40 41 2239 2237 58 2054 44 418 40 41 123 621 490 2329 61 418 2237 123 2330 61 2330 46 2331 40 2013 46 2332 44 648 41 44 2333 61 2023 46 2334 40 41 125 59 490 2082 61 2335 40 2329 41 59 490 2336 61 418 2312 123 2337 61 478 40 2237 41 46 2338 125 59 490 2217 61 418 2216 40 41 59 490 2064 61 2211 40 2329 44 2217 44 2082 44 418 2212 40 418 2339 40 2011 41 41 44 473 41 46 2340 40 41 59 490 2341 61 2336 46 2342 46 2340 40 41 59 2343 40 2341 44 2329 44 2217 44 2082 41 59 2344 40 2341 44 2064 41 59 490 2345 61 2017 46 2346 40 2329 41 59 621 2341 46 2347 40 2345 46 2348 40 2349 619 418 2350 123 2351 61 2349 46 2351 44 2352 61 2353 46 2354 125 41 41 59 2336 46 2342 61 2341 46 2355 40 41 59 490 2356 61 2064 46 2357 60 2174 62 40 41 46 2358 40 2349 619 2349 46 2359 40 2329 41 41 46 2340 40 41 59 2356 46 2347 40 2064 46 2357 60 2360 62 40 41 46 2358 40 2349 619 2349 46 2359 40 2329 41 41 41 59 2336 46 2361 61 2356 46 2362 40 41 46 2355 40 41 59 450 2336 59 125 437 492 2363 60 2237 62 40 2364 60 2365 62 411 44 2237 2081 44 2216 2217 44 2218 2082 41 2239 2237 58 2054 123 490 2366 61 2243 60 2237 62 40 2081 44 2217 44 2082 44 473 44 473 41 46 2367 40 41 59 621 411 46 2368 40 2366 46 2369 40 2370 619 2370 407 2371 41 46 2372 40 2370 619 418 2365 123 2373 61 2370 46 2373 44 2374 61 2375 46 2376 125 41 41 59 621 411 46 2368 40 2366 46 2369 40 2370 619 2370 407 2377 41 46 2372 40 2370 619 418 2365 123 2378 61 2370 46 2378 44 2379 61 2380 46 2381 125 41 41 59 621 411 46 2368 40 2038 46 2369 40 2370 619 2382 40 2370 44 2081 44 2217 44 2079 46 2383 44 473 41 41 46 2384 40 2370 619 2370 46 2385 41 46 2372 40 2370 619 418 2365 123 2385 61 2370 46 2385 44 2386 61 2387 46 2388 125 41 41 59 125 437 492 2389 40 2364 60 2365 62 411 44 2364 60 2058 62 2064 41 123 621 411 46 2390 40 2064 46 2391 40 2392 619 2392 407 2393 41 46 2394 40 2392 619 418 2365 123 2395 61 2392 46 2395 44 2396 61 2397 46 2398 125 41 41 59 621 411 46 2390 40 2064 46 2391 40 2392 619 2392 407 2399 606 40 2392 407 2174 41 41 46 2394 40 2392 619 418 2365 123 2400 61 2392 46 2400 44 2401 61 2402 46 2403 125 41 41 59 125 612 439 2218 2404 40 2054 2081 41 123 490 2099 61 2081 46 2405 40 41 46 2406 59 450 2019 46 2407 46 2218 46 2408 40 2409 619 461 46 2410 40 2409 46 2411 44 2099 44 2412 46 2413 41 41 633 418 2218 40 41 59 125 612 439 492 2414 40 2054 2081 44 2079 2415 41 123 2414 40 2081 44 2415 44 2038 41 59 125 612 439 492 2414 40 2054 2081 44 2079 2415 44 2063 60 461 62 2416 41 123 2414 40 2081 44 2415 44 2038 46 2417 40 2418 619 2416 46 2419 40 2418 46 2420 44 2421 46 2422 41 41 41 59 125 612 437 492 2414 40 2054 2081 44 2079 2415 44 2063 60 2037 62 2416 41 123 490 2217 61 2015 46 2423 40 2081 41 59 386 40 490 2424 398 2416 46 2425 40 2426 619 2427 40 2426 44 2081 44 2217 44 2415 44 380 41 41 41 123 2005 46 2428 40 648 44 2081 46 2429 633 2081 46 2430 44 2424 46 2430 41 59 392 40 2424 407 2431 2432 41 123 461 2143 59 474 123 2143 61 2432 46 2433 40 2081 41 59 125 329 40 2434 2435 41 123 2005 46 2436 40 2435 44 648 44 2424 46 2430 41 59 344 59 125 474 123 2009 46 2437 40 2143 41 59 2424 46 2438 40 2081 44 2083 46 303 41 59 125 329 40 2434 2435 41 123 2005 46 2439 40 2435 44 648 41 59 125 382 123 2009 46 2440 40 2143 44 380 41 59 125 125 360 123 474 123 2424 46 2441 40 2081 44 2083 46 303 41 59 125 329 40 2442 2443 41 123 2005 46 2444 40 2443 44 648 41 59 125 125 125 125 612 437 323 2445 40 2037 2446 44 2054 2081 44 2216 2217 44 2079 2415 44 323 2219 41 123 490 2082 61 2404 40 2081 41 59 474 123 392 40 33 2446 46 2447 40 2081 44 2415 41 41 123 450 380 59 125 392 40 33 2219 41 123 392 40 2217 46 2448 614 424 41 123 392 40 2082 46 2449 46 2450 40 2446 46 2451 44 2452 46 2453 41 41 123 450 380 59 125 392 40 33 2081 46 2454 40 41 41 123 392 40 2415 615 2079 46 2455 41 123 621 621 392 40 2446 407 422 2456 2457 606 33 2458 46 2459 40 2457 46 2460 40 2081 41 41 41 123 450 380 59 125 125 360 123 621 621 450 380 59 125 125 125 360 123 392 40 33 2217 46 2448 46 2461 40 2446 46 2462 44 2463 46 2464 41 41 123 450 380 59 125 125 125 450 473 59 125 329 40 2465 2466 41 123 2005 46 2467 40 2466 44 648 44 2446 46 2468 41 59 450 380 59 125 125 612 439 2078 60 2063 60 2469 640 2470 60 2471 44 2472 62 40 2473 60 2472 62 2474 44 2083 2084 41 2239 2471 58 2054 44 418 40 41 2239 2472 58 2475 123 2054 2476 61 424 59 392 40 33 2474 46 2477 46 2478 40 2023 46 2034 41 41 123 2476 61 2015 46 2479 40 2474 46 2477 41 59 125 450 2470 60 2471 44 2472 62 40 2474 44 2476 44 2084 41 59 125 437 314 2078 60 2063 60 2469 640 2470 60 2471 44 2472 62 40 2473 60 2472 62 2474 44 2054 2480 44 2083 2084 41 2239 2471 58 2054 44 418 40 41 2239 2472 58 2475 123 2216 2217 59 392 40 2480 614 424 41 123 621 490 2481 61 418 2471 123 2482 61 2482 46 2483 40 2013 46 2484 44 648 41 44 2485 61 2023 46 2486 40 41 125 59 2481 46 2487 40 418 2488 40 41 41 59 2480 61 2481 59 2217 61 418 2216 40 41 59 125 360 123 2217 61 2015 46 2489 40 2480 41 59 125 490 2082 61 2404 40 2480 41 59 490 2490 61 2243 60 2471 62 40 2480 44 2217 44 2082 44 2474 46 2491 44 380 41 46 2492 60 2493 60 2472 640 40 41 59 392 40 33 461 46 2494 40 2474 46 2495 41 41 123 2490 61 2490 46 2496 40 2497 619 461 46 2498 40 2497 46 2499 44 2474 46 2495 44 2500 46 2501 41 41 59 125 392 40 461 46 2502 40 2474 46 2503 46 2504 41 41 123 2474 46 2503 46 2504 61 2019 46 2505 46 2506 59 125 392 40 461 46 2502 40 2474 46 2503 46 2507 41 41 123 2474 46 2503 46 2507 61 2019 46 2508 46 2507 59 125 490 2509 61 418 2364 60 2469 62 40 41 59 386 40 490 2175 398 2490 41 123 474 123 490 2510 61 319 2511 40 2175 44 2474 46 2503 44 2084 41 46 2512 40 380 41 59 386 40 490 2513 398 2510 41 123 490 2514 61 2509 46 2515 40 2516 619 2516 46 2517 46 2518 40 2519 619 461 46 2520 40 2513 46 2521 40 2519 46 2522 41 44 2519 46 2523 44 2524 46 2525 41 41 41 59 392 40 2514 614 424 41 123 2509 46 2526 40 2513 41 59 125 360 123 386 40 490 2527 398 2513 46 2517 41 123 392 40 33 2514 46 2517 46 2528 40 2527 46 2522 41 41 123 2514 46 2517 46 2529 40 2527 46 2522 44 2527 46 2523 41 59 125 125 392 40 461 46 2502 40 2514 46 2530 41 41 123 2514 46 2530 61 2513 46 2530 59 125 125 125 125 35 435 2531 2532 2533 621 329 40 2534 2535 41 35 435 2531 2536 2533 621 123 2005 46 2537 40 2535 44 648 44 2175 46 2538 41 59 125 125 450 2509 59 125 437 314 2078 60 2063 60 2469 640 2539 60 2472 62 40 2540 60 2472 62 2175 44 2472 2474 44 2083 2084 41 2239 2472 58 2475 123 490 2541 61 319 2175 46 2539 40 2474 44 2084 41 46 2542 40 380 41 59 490 411 61 2541 46 2543 40 41 59 386 40 490 2081 398 411 41 123 2081 46 2544 61 2175 46 2545 59 125 450 411 59 125 612 439 2078 60 2546 62 2547 40 461 2548 44 461 2097 44 2083 2084 41 123 490 2175 61 2036 46 2549 60 2540 62 40 41 46 2550 40 2551 619 461 46 2552 40 2551 46 2553 44 2548 44 2554 46 2555 41 41 59 392 40 2175 614 424 41 123 469 418 2556 40 648 41 59 125 450 2175 46 2557 40 2097 44 2084 41 59 125 437 2063 60 2039 62 2558 40 2559 2081 41 123 450 2040 46 2560 40 2561 619 123 474 123 450 2561 46 2562 40 2081 41 59 125 329 40 2563 2564 41 123 2005 46 2565 40 2564 44 648 44 2561 46 2566 40 41 46 2567 41 59 450 380 59 125 125 41 59 125 612 439 2063 60 2568 62 2569 40 2054 2081 41 123 450 2558 40 2081 41 46 2570 40 2571 619 123 392 40 461 46 2572 40 2571 46 2573 41 41 123 450 424 59 125 490 2574 61 2081 46 2575 40 2571 46 2576 41 59 392 40 461 46 2572 40 2574 41 41 123 450 424 59 125 450 418 2568 123 2577 61 2571 46 2578 44 2579 61 461 46 2580 40 2581 46 2582 44 2571 46 2573 44 2574 41 125 59 125 41 46 2583 40 2571 619 2571 631 424 41 46 2584 40 2081 46 2585 40 41 41 59 125 612 439 2063 60 2586 62 2587 40 2559 2081 41 123 450 2558 40 2081 41 46 2588 40 2589 619 418 2586 40 2590 58 2589 46 2591 44 2592 58 2589 46 2593 44 2099 58 2589 46 2594 44 2595 58 2589 46 2596 41 41 59 125 612 439 2597 60 2023 44 2023 62 2598 40 41 123 412 40 2003 41 123 490 2599 61 418 2597 60 2023 44 2023 62 40 41 59 386 40 490 2081 398 2030 41 123 2599 91 2081 46 2600 93 61 2081 46 2600 59 125 450 2599 59 125 125 612 439 492 2601 40 2054 2081 41 123 2005 46 2602 40 648 44 2081 46 2603 46 2604 40 648 44 2605 46 2606 41 41 59 2024 91 2081 46 2603 93 61 1500 59 2055 634 2607 40 467 44 418 2053 60 2054 62 40 2081 41 41 59 125 612 439 492 2608 40 2054 2081 41 123 2005 46 2609 40 648 44 2081 46 2610 46 2611 40 648 44 2612 46 2613 41 41 59 2024 46 2614 40 2081 46 2610 44 430 2615 41 59 2056 634 2616 40 467 44 418 2053 60 2054 62 40 2081 41 41 59 125 612 439 356 63 2617 40 2023 2618 41 123 392 40 2024 46 2619 40 2618 44 430 356 2620 41 41 123 450 2620 59 125 450 424 59 125 612 439 492 2621 40 2054 2081 44 356 2622 41 123 490 2618 61 2081 46 2623 59 2005 46 2624 40 648 44 2618 46 2625 40 648 44 2626 46 2627 41 44 2622 41 59 621 2024 46 2628 40 2618 44 40 2629 41 619 469 418 2630 40 461 46 2631 40 2626 46 2627 44 648 44 2081 46 2632 40 41 46 2633 44 2081 46 2623 46 2625 40 648 44 2626 46 2627 41 41 41 44 40 2629 44 2629 41 619 2622 41 59 2057 634 2634 40 467 44 418 2053 60 2028 60 2054 44 356 640 40 418 2028 60 2054 44 356 62 40 2081 44 2622 41 41 41 59 125 612 439 492 2635 40 2023 2636 44 2029 2082 44 2637 2638 41 123 392 40 2042 41 123 450 59 125 2030 46 2639 40 418 2028 60 2023 44 2029 62 40 2636 44 2082 41 44 40 404 41 2638 41 59 412 40 2003 41 123 392 40 33 2041 41 123 2041 61 473 59 2078 46 2640 40 2641 41 59 125 125 125 437 314 2078 2642 40 41 123 490 2050 61 2015 59 392 40 2042 41 123 450 59 125 490 2084 61 2026 46 2643 59 496 40 2030 46 2644 40 430 2028 60 2023 44 2029 62 2645 41 41 123 392 40 2042 41 123 450 59 125 474 123 490 2081 61 2050 46 2646 40 2645 46 2647 41 59 392 40 2081 614 424 41 123 344 59 125 490 2648 61 2081 407 2649 2650 63 2651 40 2650 44 2645 46 2652 44 2084 41 58 2653 40 2081 44 2645 46 2652 44 2084 41 59 319 2648 46 2654 40 380 41 59 125 329 40 2655 41 123 325 59 125 329 40 2656 2657 41 123 2005 46 2658 40 2657 44 648 41 59 125 125 412 40 2003 41 123 2041 61 380 59 125 125 437 314 2078 2659 40 2054 2081 44 2029 2082 44 2083 2084 41 123 319 2081 46 2660 40 2082 44 2084 41 46 2661 40 380 41 59 621 464 40 2081 41 123 328 2662 2663 58 319 2664 40 2082 44 2663 44 2084 41 46 2661 40 380 41 59 325 59 328 2665 2666 58 319 2666 46 2667 40 418 2668 60 356 62 40 41 44 2082 44 2084 58 2084 41 46 2661 40 380 41 59 325 59 125 125 437 314 2078 2669 40 2029 2082 44 2670 2671 44 2083 2084 41 123 386 40 490 2672 398 2671 46 2673 40 41 41 123 319 2672 46 2674 40 2082 44 2084 41 46 2675 40 380 41 59 319 2672 46 2676 40 418 2677 60 356 62 40 41 44 2082 44 2084 58 2084 41 46 2675 40 380 41 59 125 125 437 314 2078 2678 40 2679 2081 44 2029 2082 44 2083 2084 41 123 490 2680 61 2015 46 2681 40 418 2682 123 2683 61 418 91 93 123 2684 46 2685 125 44 2686 61 418 91 93 123 2081 46 2687 125 44 2688 61 418 2688 40 380 41 123 2689 61 380 125 125 41 46 2690 60 2691 62 40 41 59 490 2692 61 2680 46 2693 40 2694 619 2694 46 2679 41 46 2695 40 2694 619 2694 631 424 41 59 490 2696 61 2692 46 2693 40 2694 619 2694 46 2697 40 418 2698 60 356 62 40 41 44 2082 44 473 44 2084 41 41 59 319 2078 46 2699 40 2696 41 46 2700 40 380 41 59 474 123 319 2081 46 2701 40 2082 44 2084 41 46 2700 40 380 41 59 125 329 40 2702 2703 41 123 2005 46 2704 40 2703 44 648 41 59 125 125 612 439 2078 2705 40 2054 2081 44 2029 2082 44 2083 2084 41 123 450 2659 40 2081 44 2082 44 2084 41 59 125 612 439 314 2078 2706 40 2707 60 2078 62 2708 44 2083 2084 41 123 621 490 2709 61 2021 46 2710 59 319 2709 46 2711 40 2084 41 46 2712 40 380 41 59 474 123 319 2708 40 41 46 2712 40 380 41 59 125 382 123 2709 46 2713 40 41 59 125 125 612 439 492 2714 40 41 123 2714 40 473 41 59 2715 46 2716 40 467 41 59 125 612 438 491 492 2714 40 323 2717 41 123 392 40 2042 41 123 450 59 125 392 40 33 2026 46 2718 41 123 2026 46 2719 40 41 59 125 392 40 2717 41 123 2026 46 2714 40 41 59 125 2042 61 473 59 125 125 
69739,C#,"public class AnnotationCodeGenerator : IAnnotationCodeGenerator
{
    private static readonly ISet<string> IgnoredRelationalAnnotations = new HashSet<string>
    {
        RelationalAnnotationNames.CheckConstraints,
        RelationalAnnotationNames.Sequences,
        RelationalAnnotationNames.DbFunctions,
        RelationalAnnotationNames.RelationalOverrides
    };

    #region MethodInfos

    private static readonly MethodInfo ModelHasDefaultSchemaMethodInfo
        = typeof(RelationalModelBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalModelBuilderExtensions.HasDefaultSchema), typeof(ModelBuilder), typeof(string));

    private static readonly MethodInfo ModelUseCollationMethodInfo
        = typeof(RelationalModelBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalModelBuilderExtensions.UseCollation), typeof(ModelBuilder), typeof(string));

    private static readonly MethodInfo EntityTypeHasCommentMethodInfo
        = typeof(RelationalEntityTypeBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalEntityTypeBuilderExtensions.HasComment), typeof(EntityTypeBuilder), typeof(string));

    private static readonly MethodInfo PropertyHasColumnNameMethodInfo
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasColumnName), typeof(PropertyBuilder), typeof(string));

    private static readonly MethodInfo PropertyHasColumnOrderMethodInfo
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasColumnOrder), typeof(PropertyBuilder), typeof(int?));

    private static readonly MethodInfo PropertyHasDefaultValueSqlMethodInfo1
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasDefaultValueSql), typeof(PropertyBuilder));

    private static readonly MethodInfo PropertyHasDefaultValueSqlMethodInfo2
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasDefaultValueSql), typeof(PropertyBuilder), typeof(string));

    private static readonly MethodInfo PropertyHasComputedColumnSqlMethodInfo1
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasComputedColumnSql), typeof(PropertyBuilder));

    private static readonly MethodInfo PropertyHasComputedColumnSqlMethodInfo2
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasComputedColumnSql), typeof(PropertyBuilder), typeof(string));

    private static readonly MethodInfo HasComputedColumnSqlMethodInfo3
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasComputedColumnSql), typeof(PropertyBuilder), typeof(string), typeof(bool));

    private static readonly MethodInfo PropertyIsFixedLengthMethodInfo
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.IsFixedLength), typeof(PropertyBuilder), typeof(bool));

    private static readonly MethodInfo PropertyHasCommentMethodInfo
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.HasComment), typeof(PropertyBuilder), typeof(string));

    private static readonly MethodInfo PropertyUseCollationMethodInfo
        = typeof(RelationalPropertyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalPropertyBuilderExtensions.UseCollation), typeof(PropertyBuilder), typeof(string));

    private static readonly MethodInfo KeyHasNameMethodInfo
        = typeof(RelationalKeyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalKeyBuilderExtensions.HasName), typeof(KeyBuilder), typeof(string));

    private static readonly MethodInfo ReferenceReferenceHasConstraintNameMethodInfo
        = typeof(RelationalForeignKeyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalForeignKeyBuilderExtensions.HasConstraintName), typeof(ReferenceReferenceBuilder), typeof(string));

    private static readonly MethodInfo ReferenceCollectionHasConstraintNameMethodInfo
        = typeof(RelationalForeignKeyBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalForeignKeyBuilderExtensions.HasConstraintName), typeof(ReferenceCollectionBuilder), typeof(string));

    private static readonly MethodInfo IndexHasDatabaseNameMethodInfo
        = typeof(RelationalIndexBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalIndexBuilderExtensions.HasDatabaseName), typeof(IndexBuilder), typeof(string));

    private static readonly MethodInfo IndexHasFilterNameMethodInfo
        = typeof(RelationalIndexBuilderExtensions).GetRequiredRuntimeMethod(
            nameof(RelationalIndexBuilderExtensions.HasFilter), typeof(IndexBuilder), typeof(string));

    #endregion MethodInfos

    /// <summary>
    ///     Initializes a new instance of this class.
    /// </summary>
    /// <param name=""dependencies"">Parameter object containing dependencies for this service.</param>
    public AnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies)
    {
        Dependencies = dependencies;
    }

    /// <summary>
    ///     Relational provider-specific dependencies for this service.
    /// </summary>
    protected virtual AnnotationCodeGeneratorDependencies Dependencies { get; }

    /// <inheritdoc />
    public virtual IEnumerable<IAnnotation> FilterIgnoredAnnotations(IEnumerable<IAnnotation> annotations)
        => annotations.Where(
            a => !(CoreAnnotationNames.AllNames.Contains(a.Name)
                || IgnoredRelationalAnnotations.Contains(a.Name)));

    /// <inheritdoc />
    public virtual void RemoveAnnotationsHandledByConventions(IModel model, IDictionary<string, IAnnotation> annotations)
        => RemoveConventionalAnnotationsHelper(model, annotations, IsHandledByConvention);

    /// <inheritdoc />
    public virtual void RemoveAnnotationsHandledByConventions(
        IEntityType entityType,
        IDictionary<string, IAnnotation> annotations)
    {
        annotations.Remove(RelationalAnnotationNames.IsTableExcludedFromMigrations);

        RemoveConventionalAnnotationsHelper(entityType, annotations, IsHandledByConvention);
    }

    /// <inheritdoc />
    public virtual void RemoveAnnotationsHandledByConventions(
        IProperty property,
        IDictionary<string, IAnnotation> annotations)
    {
        var columnName = property.GetColumnBaseName();
        if (columnName == property.Name)
        {
            annotations.Remove(RelationalAnnotationNames.ColumnName);
        }

        RemoveConventionalAnnotationsHelper(property, annotations, IsHandledByConvention);
    }

    /// <inheritdoc />
    public virtual void RemoveAnnotationsHandledByConventions(IKey key, IDictionary<string, IAnnotation> annotations)
        => RemoveConventionalAnnotationsHelper(key, annotations, IsHandledByConvention);

    /// <inheritdoc />
    public virtual void RemoveAnnotationsHandledByConventions(
        IForeignKey foreignKey,
        IDictionary<string, IAnnotation> annotations)
        => RemoveConventionalAnnotationsHelper(foreignKey, annotations, IsHandledByConvention);

    /// <inheritdoc />
    public virtual void RemoveAnnotationsHandledByConventions(IIndex index, IDictionary<string, IAnnotation> annotations)
        => RemoveConventionalAnnotationsHelper(index, annotations, IsHandledByConvention);

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        IModel model,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.DefaultSchema, ModelHasDefaultSchemaMethodInfo,
            methodCallCodeFragments);

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.Collation, ModelUseCollationMethodInfo,
            methodCallCodeFragments);

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(model, annotations, GenerateFluentApi));
        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        IEntityType entityType,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.Comment, EntityTypeHasCommentMethodInfo, methodCallCodeFragments);

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(entityType, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        IProperty property,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.ColumnName, PropertyHasColumnNameMethodInfo, methodCallCodeFragments);

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.ColumnOrder, PropertyHasColumnOrderMethodInfo, methodCallCodeFragments);

        if (TryGetAndRemove(annotations, RelationalAnnotationNames.DefaultValueSql, out string? defaultValueSql))
        {
            methodCallCodeFragments.Add(
                defaultValueSql.Length == 0
                    ? new MethodCallCodeFragment(PropertyHasDefaultValueSqlMethodInfo1)
                    : new MethodCallCodeFragment(PropertyHasDefaultValueSqlMethodInfo2, defaultValueSql));
        }

        if (TryGetAndRemove(annotations, RelationalAnnotationNames.ComputedColumnSql, out string? computedColumnSql))
        {
            methodCallCodeFragments.Add(
                computedColumnSql.Length == 0
                    ? new MethodCallCodeFragment(PropertyHasComputedColumnSqlMethodInfo1)
                    : TryGetAndRemove(annotations, RelationalAnnotationNames.IsStored, out bool isStored)
                        ? new MethodCallCodeFragment(HasComputedColumnSqlMethodInfo3, computedColumnSql, isStored)
                        : new MethodCallCodeFragment(PropertyHasComputedColumnSqlMethodInfo2, computedColumnSql));
        }

        if (TryGetAndRemove(annotations, RelationalAnnotationNames.IsFixedLength, out bool isFixedLength))
        {
            methodCallCodeFragments.Add(
                isFixedLength
                    ? new MethodCallCodeFragment(PropertyIsFixedLengthMethodInfo)
                    : new MethodCallCodeFragment(PropertyIsFixedLengthMethodInfo, isFixedLength));
        }

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.Comment, PropertyHasCommentMethodInfo, methodCallCodeFragments);

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.Collation, PropertyUseCollationMethodInfo, methodCallCodeFragments);

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(property, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        IKey key,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        GenerateSimpleFluentApiCall(annotations, RelationalAnnotationNames.Name, KeyHasNameMethodInfo, methodCallCodeFragments);

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(key, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        IForeignKey foreignKey,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        GenerateSimpleFluentApiCall(
            annotations,
            RelationalAnnotationNames.Name,
            foreignKey.IsUnique ? ReferenceReferenceHasConstraintNameMethodInfo : ReferenceCollectionHasConstraintNameMethodInfo,
            methodCallCodeFragments);

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(foreignKey, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        INavigation navigation,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(navigation, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        ISkipNavigation navigation,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(navigation, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<MethodCallCodeFragment> GenerateFluentApiCalls(
        IIndex index,
        IDictionary<string, IAnnotation> annotations)
    {
        var methodCallCodeFragments = new List<MethodCallCodeFragment>();

        GenerateSimpleFluentApiCall(
            annotations, RelationalAnnotationNames.Name, IndexHasDatabaseNameMethodInfo, methodCallCodeFragments);
        GenerateSimpleFluentApiCall(
            annotations, RelationalAnnotationNames.Filter, IndexHasFilterNameMethodInfo, methodCallCodeFragments);

        methodCallCodeFragments.AddRange(GenerateFluentApiCallsHelper(index, annotations, GenerateFluentApi));

        return methodCallCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<AttributeCodeFragment> GenerateDataAnnotationAttributes(
        IEntityType entityType,
        IDictionary<string, IAnnotation> annotations)
    {
        var attributeCodeFragments = new List<AttributeCodeFragment>();

        attributeCodeFragments.AddRange(GenerateFluentApiCallsHelper(entityType, annotations, GenerateDataAnnotation));

        return attributeCodeFragments;
    }

    /// <inheritdoc />
    public virtual IReadOnlyList<AttributeCodeFragment> GenerateDataAnnotationAttributes(
        IProperty property,
        IDictionary<string, IAnnotation> annotations)
    {
        var attributeCodeFragments = new List<AttributeCodeFragment>();

        if (TryGetAndRemove(annotations, CoreAnnotationNames.MaxLength, out int maxLength))
        {
            attributeCodeFragments.Add(
                new AttributeCodeFragment(
                    property.ClrType == typeof(string)
                        ? typeof(StringLengthAttribute)
                        : typeof(MaxLengthAttribute),
                    maxLength));
        }

        attributeCodeFragments.AddRange(GenerateFluentApiCallsHelper(property, annotations, GenerateDataAnnotation));

        return attributeCodeFragments;
    }

    /// <summary>
    ///     Checks if the given <paramref name=""annotation"" /> is handled by convention when
    ///     applied to the given <paramref name=""model"" />.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""false"" />.
    /// </remarks>
    /// <param name=""model"">The <see cref=""IModel"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns>
    ///     <see langword=""true"" /> if the annotation is handled by convention;
    ///     <see langword=""false"" /> if code must be generated.
    /// </returns>
    protected virtual bool IsHandledByConvention(IModel model, IAnnotation annotation)
        => false;

    /// <summary>
    ///     Checks if the given <paramref name=""annotation"" /> is handled by convention when
    ///     applied to the given <paramref name=""entityType"" />.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""false"" />.
    /// </remarks>
    /// <param name=""entityType"">The <see cref=""IEntityType"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""false"" />.</returns>
    protected virtual bool IsHandledByConvention(IEntityType entityType, IAnnotation annotation)
        => false;

    /// <summary>
    ///     Checks if the given <paramref name=""annotation"" /> is handled by convention when
    ///     applied to the given <paramref name=""key"" />.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""false"" />.
    /// </remarks>
    /// <param name=""key"">The <see cref=""IKey"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""false"" />.</returns>
    protected virtual bool IsHandledByConvention(IKey key, IAnnotation annotation)
        => false;

    /// <summary>
    ///     Checks if the given <paramref name=""annotation"" /> is handled by convention when
    ///     applied to the given <paramref name=""property"" />.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""false"" />.
    /// </remarks>
    /// <param name=""property"">The <see cref=""IProperty"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""false"" />.</returns>
    protected virtual bool IsHandledByConvention(IProperty property, IAnnotation annotation)
        => false;

    /// <summary>
    ///     Checks if the given <paramref name=""annotation"" /> is handled by convention when
    ///     applied to the given <paramref name=""foreignKey"" />.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""false"" />.
    /// </remarks>
    /// <param name=""foreignKey"">The <see cref=""IForeignKey"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""false"" />.</returns>
    protected virtual bool IsHandledByConvention(IForeignKey foreignKey, IAnnotation annotation)
        => false;

    /// <summary>
    ///     Checks if the given <paramref name=""annotation"" /> is handled by convention when
    ///     applied to the given <paramref name=""index"" />.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""false"" />.
    /// </remarks>
    /// <param name=""index"">The <see cref=""IIndex"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""false"" />.</returns>
    protected virtual bool IsHandledByConvention(IIndex index, IAnnotation annotation)
        => false;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""model"">The <see cref=""IModel"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(IModel model, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""entityType"">The <see cref=""IEntityType"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(IEntityType entityType, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""key"">The <see cref=""IKey"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(IKey key, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""property"">The <see cref=""IProperty"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(IProperty property, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""foreignKey"">The <see cref=""IForeignKey"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(IForeignKey foreignKey, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""navigation"">The <see cref=""INavigation"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(INavigation navigation, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""navigation"">The <see cref=""ISkipNavigation"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(ISkipNavigation navigation, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a fluent API call for the given <paramref name=""annotation"" />, or <see langword=""null"" />
    ///     if no fluent API call exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""index"">The <see cref=""IIndex"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual MethodCallCodeFragment? GenerateFluentApi(IIndex index, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a data annotation attribute code fragment for the given <paramref name=""annotation"" />,
    ///     or <see langword=""null"" /> if no data annotation exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""entityType"">The <see cref=""IEntityType"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual AttributeCodeFragment? GenerateDataAnnotation(IEntityType entityType, IAnnotation annotation)
        => null;

    /// <summary>
    ///     Returns a data annotation attribute code fragment for the given <paramref name=""annotation"" />,
    ///     or <see langword=""null"" /> if no data annotation exists for it.
    /// </summary>
    /// <remarks>
    ///     The default implementation always returns <see langword=""null"" />.
    /// </remarks>
    /// <param name=""property"">The <see cref=""IProperty"" />.</param>
    /// <param name=""annotation"">The <see cref=""IAnnotation"" />.</param>
    /// <returns><see langword=""null"" />.</returns>
    protected virtual AttributeCodeFragment? GenerateDataAnnotation(IProperty property, IAnnotation annotation)
        => null;

    private static IEnumerable<TCodeFragment> GenerateFluentApiCallsHelper<TAnnotatable, TCodeFragment>(
        TAnnotatable annotatable,
        IDictionary<string, IAnnotation> annotations,
        Func<TAnnotatable, IAnnotation, TCodeFragment?> generateCodeFragment)
        where TCodeFragment : notnull
    {
        foreach (var (name, annotation) in EnumerateForRemoval(annotations))
        {
            var codeFragment = generateCodeFragment(annotatable, annotation);
            if (codeFragment != null)
            {
                yield return codeFragment;
                annotations.Remove(name);
            }
        }
    }

    private static void RemoveConventionalAnnotationsHelper<TAnnotatable>(
        TAnnotatable annotatable,
        IDictionary<string, IAnnotation> annotations,
        Func<TAnnotatable, IAnnotation, bool> isHandledByConvention)
    {
        foreach (var (name, annotation) in EnumerateForRemoval(annotations))
        {
            if (isHandledByConvention(annotatable, annotation))
            {
                annotations.Remove(name);
            }
        }
    }

    private static bool TryGetAndRemove<T>(
        IDictionary<string, IAnnotation> annotations,
        string annotationName,
        [NotNullWhen(true)] out T? annotationValue)
    {
        if (annotations.TryGetValue(annotationName, out var annotation)
            && annotation.Value != null)
        {
            annotations.Remove(annotationName);
            annotationValue = (T)annotation.Value;
            return true;
        }

        annotationValue = default;
        return false;
    }

    private static void GenerateSimpleFluentApiCall(
        IDictionary<string, IAnnotation> annotations,
        string annotationName,
        MethodInfo methodInfo,
        List<MethodCallCodeFragment> methodCallCodeFragments)
    {
        if (annotations.TryGetValue(annotationName, out var annotation))
        {
            annotations.Remove(annotationName);
            if (annotation.Value is object annotationValue)
            {
                methodCallCodeFragments.Add(
                    new MethodCallCodeFragment(methodInfo, annotationValue));
            }
        }
    }

    // Dictionary is safe for removal during enumeration
    private static IEnumerable<KeyValuePair<string, IAnnotation>> EnumerateForRemoval(IDictionary<string, IAnnotation> annotations)
        => annotations is Dictionary<string, IAnnotation> ? annotations : annotations.ToList();
}",1,439 334 2000 58 2001 123 437 457 441 2002 60 461 62 2003 61 418 2004 60 461 62 123 2005 46 2006 44 2005 46 2007 44 2005 46 2008 44 2005 46 2009 125 59 35 443 437 457 441 2010 2011 61 478 40 2012 41 46 2013 40 2014 40 2012 46 2015 41 44 478 40 2016 41 44 478 40 461 41 41 59 437 457 441 2010 2017 61 478 40 2012 41 46 2013 40 2014 40 2012 46 2018 41 44 478 40 2016 41 44 478 40 461 41 41 59 437 457 441 2010 2019 61 478 40 2020 41 46 2013 40 2014 40 2020 46 2021 41 44 478 40 2022 41 44 478 40 461 41 41 59 437 457 441 2010 2023 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2025 41 44 478 40 2026 41 44 478 40 461 41 41 59 437 457 441 2010 2027 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2028 41 44 478 40 2026 41 44 478 40 404 63 41 41 59 437 457 441 2010 2029 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2030 41 44 478 40 2026 41 41 59 437 457 441 2010 2031 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2030 41 44 478 40 2026 41 44 478 40 461 41 41 59 437 457 441 2010 2032 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2033 41 44 478 40 2026 41 41 59 437 457 441 2010 2034 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2033 41 44 478 40 2026 41 44 478 40 461 41 41 59 437 457 441 2010 2035 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2033 41 44 478 40 2026 41 44 478 40 461 41 44 478 40 323 41 41 59 437 457 441 2010 2036 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2037 41 44 478 40 2026 41 44 478 40 323 41 41 59 437 457 441 2010 2038 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2021 41 44 478 40 2026 41 44 478 40 461 41 41 59 437 457 441 2010 2039 61 478 40 2024 41 46 2013 40 2014 40 2024 46 2018 41 44 478 40 2026 41 44 478 40 461 41 41 59 437 457 441 2010 2040 61 478 40 2041 41 46 2013 40 2014 40 2041 46 2042 41 44 478 40 2043 41 44 478 40 461 41 41 59 437 457 441 2010 2044 61 478 40 2045 41 46 2013 40 2014 40 2045 46 2046 41 44 478 40 2047 41 44 478 40 461 41 41 59 437 457 441 2010 2048 61 478 40 2045 41 46 2013 40 2014 40 2045 46 2046 41 44 478 40 2049 41 44 478 40 461 41 41 59 437 457 441 2010 2050 61 478 40 2051 41 46 2013 40 2014 40 2051 46 2052 41 44 478 40 2053 41 44 478 40 461 41 41 59 437 457 441 2010 2054 61 478 40 2051 41 46 2013 40 2014 40 2051 46 2055 41 44 478 40 2053 41 44 478 40 461 41 41 59 35 367 2056 612 439 2000 40 2057 2058 41 123 2059 61 2058 59 125 612 438 491 2057 2060 123 2061 59 125 612 439 491 2062 60 2063 62 2064 40 2062 60 2063 62 2065 41 619 2065 46 2066 40 2067 619 33 40 2068 46 2069 46 2070 40 2067 46 2071 41 606 2003 46 2070 40 2067 46 2071 41 41 41 59 612 439 491 492 2072 40 2073 2074 44 2075 60 461 44 2063 62 2065 41 619 2076 40 2074 44 2065 44 2077 41 59 612 439 491 492 2072 40 2078 2079 44 2075 60 461 44 2063 62 2065 41 123 2065 46 2080 40 2081 46 2082 41 59 2076 40 2079 44 2065 44 2077 41 59 125 612 439 491 492 2072 40 2083 2084 44 2075 60 461 44 2063 62 2065 41 123 490 2085 61 2084 46 2086 40 41 59 392 40 2085 614 2084 46 2071 41 123 2065 46 2087 40 2088 46 2089 41 59 125 2076 40 2084 44 2065 44 2077 41 59 125 612 439 491 492 2072 40 2090 2091 44 2075 60 461 44 2063 62 2065 41 619 2076 40 2091 44 2065 44 2077 41 59 612 439 491 492 2072 40 2092 2093 44 2075 60 461 44 2063 62 2065 41 619 2076 40 2093 44 2065 44 2077 41 59 612 439 491 492 2072 40 2094 2095 44 2075 60 461 44 2063 62 2065 41 619 2076 40 2095 44 2065 44 2077 41 59 612 439 491 2096 60 2097 62 2098 40 2073 2074 44 2075 60 461 44 2063 62 2065 41 123 490 2099 61 418 2100 60 2097 62 40 41 59 2101 40 2065 44 2102 46 2103 44 2011 44 2099 41 59 2101 40 2065 44 2102 46 2104 44 2017 44 2099 41 59 2099 46 2105 40 2106 40 2074 44 2065 44 2107 41 41 59 450 2099 59 125 612 439 491 2096 60 2097 62 2098 40 2078 2079 44 2075 60 461 44 2063 62 2065 41 123 490 2108 61 418 2109 60 2097 62 40 41 59 2110 40 2065 44 2111 46 2112 44 2019 44 2108 41 59 2108 46 2113 40 2114 40 2079 44 2065 44 2115 41 41 59 450 2108 59 125 612 439 491 2096 60 2097 62 2098 40 2083 2084 44 2075 60 461 44 2063 62 2065 41 123 490 2116 61 418 2117 60 2097 62 40 41 59 2118 40 2065 44 2119 46 2120 44 2023 44 2116 41 59 2118 40 2065 44 2119 46 2121 44 2027 44 2116 41 59 392 40 2122 40 2065 44 2119 46 2123 44 430 461 63 2124 41 41 123 2116 46 2125 40 2124 46 2126 614 1500 63 418 2097 40 2029 41 58 418 2097 40 2031 44 2124 41 41 59 125 392 40 2122 40 2065 44 2119 46 2127 44 430 461 63 2128 41 41 123 2116 46 2129 40 2128 46 2130 614 1500 63 418 2097 40 2032 41 58 2122 40 2065 44 2119 46 2131 44 430 323 2132 41 63 418 2097 40 2035 44 2128 44 2132 41 58 418 2097 40 2034 44 2128 41 41 59 125 392 40 2122 40 2065 44 2119 46 2037 44 430 323 2133 41 41 123 2116 46 2134 40 2133 63 418 2097 40 2036 41 58 418 2097 40 2036 44 2133 41 41 59 125 2118 40 2065 44 2119 46 2135 44 2038 44 2116 41 59 2118 40 2065 44 2119 46 2136 44 2039 44 2116 41 59 2116 46 2137 40 2138 40 2084 44 2065 44 2139 41 41 59 450 2116 59 125 612 439 491 2096 60 2097 62 2098 40 2090 2091 44 2075 60 461 44 2063 62 2065 41 123 490 2140 61 418 2141 60 2097 62 40 41 59 2142 40 2065 44 2143 46 2071 44 2040 44 2140 41 59 2140 46 2144 40 2145 40 2091 44 2065 44 2146 41 41 59 450 2140 59 125 612 439 491 2096 60 2097 62 2098 40 2092 2093 44 2075 60 461 44 2063 62 2065 41 123 490 2147 61 418 2148 60 2097 62 40 41 59 2149 40 2065 44 2150 46 2071 44 2093 46 2151 63 2044 58 2048 44 2147 41 59 2147 46 2152 40 2153 40 2093 44 2065 44 2154 41 41 59 450 2147 59 125 612 439 491 2096 60 2097 62 2098 40 2155 2156 44 2075 60 461 44 2063 62 2065 41 123 490 2157 61 418 2158 60 2097 62 40 41 59 2157 46 2159 40 2160 40 2156 44 2065 44 2161 41 41 59 450 2157 59 125 612 439 491 2096 60 2097 62 2098 40 2162 2156 44 2075 60 461 44 2063 62 2065 41 123 490 2163 61 418 2164 60 2097 62 40 41 59 2163 46 2165 40 2166 40 2156 44 2065 44 2167 41 41 59 450 2163 59 125 612 439 491 2096 60 2097 62 2098 40 2094 2095 44 2075 60 461 44 2063 62 2065 41 123 490 2168 61 418 2169 60 2097 62 40 41 59 2170 40 2065 44 2171 46 2071 44 2050 44 2168 41 59 2170 40 2065 44 2171 46 2172 44 2054 44 2168 41 59 2168 46 2173 40 2174 40 2095 44 2065 44 2175 41 41 59 450 2168 59 125 612 439 491 2096 60 2176 62 2177 40 2078 2079 44 2075 60 461 44 2063 62 2065 41 123 490 2178 61 418 2179 60 2176 62 40 41 59 2178 46 2180 40 2181 40 2079 44 2065 44 2182 41 41 59 450 2178 59 125 612 439 491 2096 60 2176 62 2177 40 2083 2084 44 2075 60 461 44 2063 62 2065 41 123 490 2183 61 418 2184 60 2176 62 40 41 59 392 40 2185 40 2065 44 2068 46 2186 44 430 404 2187 41 41 123 2183 46 2188 40 418 2176 40 2084 46 2189 614 478 40 461 41 63 478 40 2190 41 58 478 40 2191 41 44 2187 41 41 59 125 2183 46 2192 40 2193 40 2084 44 2065 44 2194 41 41 59 450 2183 59 125 612 438 491 323 2077 40 2073 2074 44 2063 2195 41 619 380 59 612 438 491 323 2077 40 2078 2079 44 2063 2195 41 619 380 59 612 438 491 323 2077 40 2090 2091 44 2063 2195 41 619 380 59 612 438 491 323 2077 40 2083 2084 44 2063 2195 41 619 380 59 612 438 491 323 2077 40 2092 2093 44 2063 2195 41 619 380 59 612 438 491 323 2077 40 2094 2095 44 2063 2195 41 619 380 59 612 438 491 2097 63 2196 40 2073 2074 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2078 2079 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2090 2091 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2083 2084 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2092 2093 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2155 2156 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2162 2156 44 2063 2195 41 619 424 59 612 438 491 2097 63 2196 40 2094 2095 44 2063 2195 41 619 424 59 612 438 491 2176 63 2197 40 2078 2079 44 2063 2195 41 619 424 59 612 438 491 2176 63 2197 40 2083 2084 44 2063 2195 41 619 424 59 437 457 2062 60 2198 62 2199 60 2200 44 2198 62 40 2200 2201 44 2075 60 461 44 2063 62 2065 44 2202 60 2200 44 2063 44 2198 63 62 2203 41 2204 2198 58 2205 123 386 40 490 40 2206 44 2195 41 398 2207 40 2065 41 41 123 490 2208 61 2203 40 2201 44 2195 41 59 392 40 2208 631 424 41 123 500 450 2208 59 2065 46 2209 40 2206 41 59 125 125 125 437 457 492 2076 60 2200 62 40 2200 2201 44 2075 60 461 44 2063 62 2065 44 2202 60 2200 44 2063 44 323 62 2210 41 123 386 40 490 40 2211 44 2195 41 398 2212 40 2065 41 41 123 392 40 2210 40 2201 44 2195 41 41 123 2065 46 2213 40 2211 41 59 125 125 125 437 457 323 2214 60 2215 62 40 2075 60 461 44 2063 62 2065 44 461 2216 44 91 2217 40 473 41 93 430 2215 63 2218 41 123 392 40 2065 46 2219 40 2216 44 430 490 2195 41 605 2195 46 2220 631 424 41 123 2065 46 2221 40 2216 41 59 2218 61 40 2215 41 2195 46 2220 59 450 473 59 125 2218 61 349 59 450 380 59 125 437 457 492 2222 40 2075 60 461 44 2063 62 2065 44 461 2216 44 2010 2223 44 2224 60 2097 62 2225 41 123 392 40 2065 46 2226 40 2216 44 430 490 2195 41 41 123 2065 46 2227 40 2216 41 59 392 40 2195 46 2228 407 426 2218 41 123 2225 46 2229 40 418 2097 40 2223 44 2218 41 41 59 125 125 125 621 437 457 2062 60 2230 60 461 44 2063 640 2231 40 2075 60 461 44 2063 62 2065 41 619 2065 407 2232 60 461 44 2063 62 63 2065 58 2065 46 2233 40 41 59 125 
68619,C#,"    internal abstract class SqliteValueReader
    {
        public abstract int FieldCount { get; }

        protected abstract int GetSqliteType(int ordinal);

        public virtual bool IsDBNull(int ordinal)
            => GetSqliteType(ordinal) == SQLITE_NULL;

        public virtual bool GetBoolean(int ordinal)
            => GetInt64(ordinal) != 0;

        public virtual byte GetByte(int ordinal)
            => checked((byte)GetInt64(ordinal));

        public virtual char GetChar(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            if (sqliteType == SQLITE_TEXT)
            {
                var val = GetString(ordinal);
                if (val.Length == 1)
                {
                    return val[0];
                }
            }

            return checked((char)GetInt64(ordinal));
        }

        public virtual DateTime GetDateTime(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_FLOAT:
                case SQLITE_INTEGER:
                    return FromJulianDate(GetDouble(ordinal));

                default:
                    return DateTime.Parse(GetString(ordinal), CultureInfo.InvariantCulture);
            }
        }

        public virtual DateTimeOffset GetDateTimeOffset(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_FLOAT:
                case SQLITE_INTEGER:
                    return new DateTimeOffset(FromJulianDate(GetDouble(ordinal)));

                default:
                    return DateTimeOffset.Parse(GetString(ordinal), CultureInfo.InvariantCulture);
            }
        }

#if NET6_0_OR_GREATER
        public virtual DateOnly GetDateOnly(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_FLOAT:
                case SQLITE_INTEGER:
                    return DateOnly.FromDateTime(FromJulianDate(GetDouble(ordinal)));

                default:
                    return DateOnly.Parse(GetString(ordinal), CultureInfo.InvariantCulture);
            }
        }

        public virtual TimeOnly GetTimeOnly(int ordinal)
            => TimeOnly.Parse(GetString(ordinal), CultureInfo.InvariantCulture);
#endif

        public virtual decimal GetDecimal(int ordinal)
            => decimal.Parse(GetString(ordinal), NumberStyles.Number | NumberStyles.AllowExponent, CultureInfo.InvariantCulture);

        public virtual double GetDouble(int ordinal)
            => IsDBNull(ordinal)
                ? throw new InvalidOperationException(GetOnNullErrorMsg(ordinal))
                : GetDoubleCore(ordinal);

        protected abstract double GetDoubleCore(int ordinal);

        public virtual float GetFloat(int ordinal)
            => (float)GetDouble(ordinal);

        public virtual Guid GetGuid(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_BLOB:
                    var bytes = GetBlob(ordinal)!;
                    return bytes.Length == 16
                        ? new Guid(bytes)
                        : new Guid(Encoding.UTF8.GetString(bytes, 0, bytes.Length));

                default:
                    return new Guid(GetString(ordinal));
            }
        }

        public virtual TimeSpan GetTimeSpan(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_FLOAT:
                case SQLITE_INTEGER:
                    return TimeSpan.FromDays(GetDouble(ordinal));
                default:
                    return TimeSpan.Parse(GetString(ordinal));
            }
        }

        public virtual short GetInt16(int ordinal)
            => checked((short)GetInt64(ordinal));

        public virtual int GetInt32(int ordinal)
            => checked((int)GetInt64(ordinal));

        public virtual long GetInt64(int ordinal)
            => IsDBNull(ordinal)
                ? throw new InvalidOperationException(GetOnNullErrorMsg(ordinal))
                : GetInt64Core(ordinal);

        protected abstract long GetInt64Core(int ordinal);

        public virtual string GetString(int ordinal)
            => IsDBNull(ordinal)
                ? throw new InvalidOperationException(GetOnNullErrorMsg(ordinal))
                : GetStringCore(ordinal);

        protected abstract string GetStringCore(int ordinal);

        public virtual T? GetFieldValue<T>(int ordinal)
        {
            if (IsDBNull(ordinal)
                && typeof(T).IsNullable())
            {
                return GetNull<T>(ordinal);
            }

            var type = typeof(T).UnwrapNullableType().UnwrapEnumType();
            if (type == typeof(bool))
            {
                return (T)(object)GetBoolean(ordinal);
            }

            if (type == typeof(byte))
            {
                return (T)(object)GetByte(ordinal);
            }

            if (type == typeof(byte[]))
            {
                return (T)(object)GetBlob(ordinal)!;
            }

            if (type == typeof(char))
            {
                return (T)(object)GetChar(ordinal);
            }

            if (type == typeof(DateTime))
            {
                return (T)(object)GetDateTime(ordinal);
            }

            if (type == typeof(DateTimeOffset))
            {
                return (T)(object)GetDateTimeOffset(ordinal);
            }

#if NET6_0_OR_GREATER
            if (type == typeof(DateOnly))
            {
                return (T)(object)GetDateOnly(ordinal);
            }

            if (type == typeof(TimeOnly))
            {
                return (T)(object)GetTimeOnly(ordinal);
            }
#endif

            if (type == typeof(DBNull))
            {
                // NB: NULL values handled above
                throw new InvalidCastException();
            }

            if (type == typeof(decimal))
            {
                return (T)(object)GetDecimal(ordinal);
            }

            if (type == typeof(double))
            {
                return (T)(object)GetDouble(ordinal);
            }

            if (type == typeof(float))
            {
                return (T)(object)GetFloat(ordinal);
            }

            if (type == typeof(Guid))
            {
                return (T)(object)GetGuid(ordinal);
            }

            if (type == typeof(int))
            {
                return (T)(object)GetInt32(ordinal);
            }

            if (type == typeof(long))
            {
                return (T)(object)GetInt64(ordinal);
            }

            if (type == typeof(sbyte))
            {
                return (T)(object)checked((sbyte)GetInt64(ordinal));
            }

            if (type == typeof(short))
            {
                return (T)(object)GetInt16(ordinal);
            }

            if (type == typeof(string))
            {
                return (T)(object)GetString(ordinal);
            }

            if (type == typeof(TimeSpan))
            {
                return (T)(object)GetTimeSpan(ordinal);
            }

            if (type == typeof(uint))
            {
                return (T)(object)checked((uint)GetInt64(ordinal));
            }

            if (type == typeof(ulong))
            {
                return (T)(object)((ulong)GetInt64(ordinal));
            }

            if (type == typeof(ushort))
            {
                return (T)(object)checked((ushort)GetInt64(ordinal));
            }

            return (T)GetValue(ordinal)!;
        }

        public virtual object? GetValue(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_INTEGER:
                    return GetInt64(ordinal);

                case SQLITE_FLOAT:
                    return GetDouble(ordinal);

                case SQLITE_TEXT:
                    return GetString(ordinal);

                case SQLITE_NULL:
                    return GetNull<object>(ordinal);

                default:
                    Debug.Assert(sqliteType == SQLITE_BLOB, ""Unexpected column type: "" + sqliteType);
                    return GetBlob(ordinal);
            }
        }

        public virtual int GetValues(object?[] values)
        {
            int i;
            for (i = 0; i < FieldCount; i++)
            {
                values[i] = GetValue(i);
            }

            return i;
        }

        protected virtual byte[]? GetBlob(int ordinal)
            => IsDBNull(ordinal)
                ? GetNull<byte[]>(ordinal)
                : GetBlobCore(ordinal) ?? Array.Empty<byte>();

        protected abstract byte[] GetBlobCore(int ordinal);

        protected virtual T? GetNull<T>(int ordinal)
            => typeof(T) == typeof(DBNull)
                ? (T)(object)DBNull.Value
                : default;

        protected virtual string GetOnNullErrorMsg(int ordinal)
            => Resources.CalledOnNullValue(ordinal);

        private static DateTime FromJulianDate(double julianDate)
        {
            // computeYMD
            var iJD = (long)(julianDate * 86400000.0 + 0.5);
            var Z = (int)((iJD + 43200000) / 86400000);
            var A = (int)((Z - 1867216.25) / 36524.25);
            A = Z + 1 + A - (A / 4);
            var B = A + 1524;
            var C = (int)((B - 122.1) / 365.25);
            var D = (36525 * (C & 32767)) / 100;
            var E = (int)((B - D) / 30.6001);
            var X1 = (int)(30.6001 * E);
            var day = B - D - X1;
            var month = E < 14 ? E - 1 : E - 13;
            var year = month > 2 ? C - 4716 : C - 4715;

            // computeHMS
            var s = (int)((iJD + 43200000) % 86400000);
            var fracSecond = s / 1000.0;
            s = (int)fracSecond;
            fracSecond -= s;
            var hour = s / 3600;
            s -= hour * 3600;
            var minute = s / 60;
            fracSecond += s - minute * 60;

            var second = (int)fracSecond;
            var millisecond = (int)Math.Round((fracSecond - second) * 1000.0);

            return new DateTime(year, month, day, hour, minute, second, millisecond);
        }
    }",1,406 305 334 2000 123 439 305 404 2001 123 2002 59 125 438 305 404 2003 40 404 2004 41 59 439 491 323 2005 40 404 2004 41 619 2003 40 2004 41 614 2006 59 439 491 323 2007 40 404 2004 41 619 2008 40 2004 41 631 1500 59 439 491 326 2009 40 404 2004 41 619 333 40 40 326 41 2008 40 2004 41 41 59 439 491 330 2010 40 404 2004 41 123 490 2011 61 2003 40 2004 41 59 392 40 2011 614 2012 41 123 490 2013 61 2014 40 2004 41 59 392 40 2013 46 2015 614 1501 41 123 450 2013 91 1500 93 59 125 125 450 333 40 40 330 41 2008 40 2004 41 41 59 125 439 491 2016 2017 40 404 2004 41 123 490 2018 61 2003 40 2004 41 59 464 40 2018 41 123 328 2019 58 328 2020 58 450 2021 40 2022 40 2004 41 41 59 349 58 450 2016 46 2023 40 2024 40 2004 41 44 2025 46 2026 41 59 125 125 439 491 2027 2028 40 404 2004 41 123 490 2029 61 2003 40 2004 41 59 464 40 2029 41 123 328 2030 58 328 2031 58 450 418 2027 40 2032 40 2033 40 2004 41 41 41 59 349 58 450 2027 46 2034 40 2035 40 2004 41 44 2036 46 2037 41 59 125 125 35 392 2038 439 491 2039 2040 40 404 2004 41 123 490 2041 61 2003 40 2004 41 59 464 40 2041 41 123 328 2042 58 328 2043 58 450 2039 46 2044 40 2045 40 2046 40 2004 41 41 41 59 349 58 450 2039 46 2047 40 2048 40 2004 41 44 2049 46 2050 41 59 125 125 439 491 2051 2052 40 404 2004 41 619 2051 46 2053 40 2054 40 2004 41 44 2055 46 2056 41 59 35 366 439 491 345 2057 40 404 2004 41 619 345 46 2053 40 2054 40 2004 41 44 2058 46 2059 124 2058 46 2060 44 2055 46 2056 41 59 439 491 356 2061 40 404 2004 41 619 2005 40 2004 41 63 469 418 2062 40 2063 40 2004 41 41 58 2064 40 2004 41 59 438 305 356 2064 40 404 2004 41 59 439 491 384 2065 40 404 2004 41 619 40 384 41 2061 40 2004 41 59 439 491 2066 2067 40 404 2004 41 123 490 2068 61 2003 40 2004 41 59 464 40 2068 41 123 328 2069 58 490 2070 61 2071 40 2004 41 33 59 450 2070 46 2072 614 1503 63 418 2066 40 2070 41 58 418 2066 40 2073 46 2074 46 2054 40 2070 44 1500 44 2070 46 2072 41 41 59 349 58 450 418 2066 40 2054 40 2004 41 41 59 125 125 439 491 2075 2076 40 404 2004 41 123 490 2077 61 2003 40 2004 41 59 464 40 2077 41 123 328 2078 58 328 2079 58 450 2075 46 2080 40 2061 40 2004 41 41 59 349 58 450 2075 46 2053 40 2054 40 2004 41 41 59 125 125 439 491 453 2081 40 404 2004 41 619 333 40 40 453 41 2008 40 2004 41 41 59 439 491 404 2082 40 404 2004 41 619 333 40 40 404 41 2008 40 2004 41 41 59 439 491 413 2008 40 404 2004 41 619 2005 40 2004 41 63 469 418 2062 40 2063 40 2004 41 41 58 2083 40 2004 41 59 438 305 413 2083 40 404 2004 41 59 439 491 461 2054 40 404 2004 41 619 2005 40 2004 41 63 469 418 2062 40 2063 40 2004 41 41 58 2084 40 2004 41 59 438 305 461 2084 40 404 2004 41 59 439 491 2085 63 2086 60 2085 62 40 404 2004 41 123 392 40 2005 40 2004 41 605 478 40 2085 41 46 2087 40 41 41 123 450 2088 60 2085 62 40 2004 41 59 125 490 2089 61 478 40 2085 41 46 2090 40 41 46 2091 40 41 59 392 40 2089 614 478 40 323 41 41 123 450 40 2085 41 40 426 41 2007 40 2004 41 59 125 392 40 2089 614 478 40 326 41 41 123 450 40 2085 41 40 426 41 2009 40 2004 41 59 125 392 40 2089 614 478 40 326 91 93 41 41 123 450 40 2085 41 40 426 41 2092 40 2004 41 33 59 125 392 40 2089 614 478 40 330 41 41 123 450 40 2085 41 40 426 41 2010 40 2004 41 59 125 392 40 2089 614 478 40 2016 41 41 123 450 40 2085 41 40 426 41 2017 40 2004 41 59 125 392 40 2089 614 478 40 2027 41 41 123 450 40 2085 41 40 426 41 2028 40 2004 41 59 125 35 392 2038 392 40 2089 614 478 40 2039 41 41 123 450 40 2085 41 40 426 41 2040 40 2004 41 59 125 392 40 2089 614 478 40 2051 41 41 123 450 40 2085 41 40 426 41 2052 40 2004 41 59 125 35 366 392 40 2089 614 478 40 2093 41 41 123 621 469 418 2094 40 41 59 125 392 40 2089 614 478 40 345 41 41 123 450 40 2085 41 40 426 41 2057 40 2004 41 59 125 392 40 2089 614 478 40 356 41 41 123 450 40 2085 41 40 426 41 2061 40 2004 41 59 125 392 40 2089 614 478 40 384 41 41 123 450 40 2085 41 40 426 41 2065 40 2004 41 59 125 392 40 2089 614 478 40 2066 41 41 123 450 40 2085 41 40 426 41 2067 40 2004 41 59 125 392 40 2089 614 478 40 404 41 41 123 450 40 2085 41 40 426 41 2082 40 2004 41 59 125 392 40 2089 614 478 40 413 41 41 123 450 40 2085 41 40 426 41 2008 40 2004 41 59 125 392 40 2089 614 478 40 451 41 41 123 450 40 2085 41 40 426 41 333 40 40 451 41 2008 40 2004 41 41 59 125 392 40 2089 614 478 40 453 41 41 123 450 40 2085 41 40 426 41 2081 40 2004 41 59 125 392 40 2089 614 478 40 461 41 41 123 450 40 2085 41 40 426 41 2054 40 2004 41 59 125 392 40 2089 614 478 40 2075 41 41 123 450 40 2085 41 40 426 41 2076 40 2004 41 59 125 392 40 2089 614 478 40 479 41 41 123 450 40 2085 41 40 426 41 333 40 40 479 41 2008 40 2004 41 41 59 125 392 40 2089 614 478 40 480 41 41 123 450 40 2085 41 40 426 41 40 40 480 41 2008 40 2004 41 41 59 125 392 40 2089 614 478 40 488 41 41 123 450 40 2085 41 40 426 41 333 40 40 488 41 2008 40 2004 41 41 59 125 450 40 2085 41 2095 40 2004 41 33 59 125 439 491 426 63 2096 40 404 2004 41 123 490 2097 61 2003 40 2004 41 59 464 40 2097 41 123 328 2098 58 450 2008 40 2004 41 59 328 2099 58 450 2061 40 2004 41 59 328 2100 58 450 2054 40 2004 41 59 328 2006 58 450 2101 60 426 62 40 2004 41 59 349 58 2102 46 2103 40 2097 614 2104 44 648 43 2097 41 59 450 2105 40 2004 41 59 125 125 439 491 404 2106 40 426 63 91 93 2107 41 123 404 2108 59 385 40 2108 61 1500 59 2108 60 2001 59 2108 637 41 123 2107 91 2108 93 61 2096 40 2108 41 59 125 450 2108 59 125 438 491 326 91 93 63 2109 40 404 2004 41 619 2005 40 2004 41 63 2110 60 326 91 93 62 40 2004 41 58 2111 40 2004 41 633 2112 46 2113 60 326 62 40 41 59 438 305 326 91 93 2111 40 404 2004 41 59 438 491 2085 63 2110 60 2085 62 40 404 2004 41 619 478 40 2085 41 614 478 40 2114 41 63 40 2085 41 40 426 41 2114 46 2115 58 349 59 438 491 461 2063 40 404 2004 41 619 2116 46 2117 40 2004 41 59 437 457 2016 2118 40 356 2119 41 123 621 490 2120 61 40 413 41 40 2119 42 1509 43 1499 41 59 490 2121 61 40 404 41 40 40 2120 43 1509 41 47 1509 41 59 490 2122 61 40 404 41 40 40 2121 45 1508 41 47 1506 41 59 2122 61 2121 43 1501 43 2122 45 40 2122 47 1502 41 59 490 2123 61 2122 43 1505 59 490 2124 61 40 404 41 40 40 2123 45 1504 41 47 1504 41 59 490 2125 61 40 1506 42 40 2124 38 1506 41 41 47 1503 59 490 2126 61 40 404 41 40 40 2123 45 2125 41 47 1503 41 59 490 2127 61 40 404 41 40 1503 42 2126 41 59 490 2128 61 2123 45 2125 45 2127 59 490 2129 61 2126 60 1503 63 2126 45 1501 58 2126 45 1503 59 490 2130 61 2129 62 1502 63 2124 45 1505 58 2124 45 1505 59 621 490 2131 61 40 404 41 40 40 2120 43 1509 41 37 1509 41 59 490 2132 61 2131 47 1504 59 2131 61 40 404 41 2132 59 2132 628 2131 59 490 2133 61 2131 47 1505 59 2131 628 2133 42 1505 59 490 2134 61 2131 47 1503 59 2132 636 2131 45 2134 42 1503 59 490 2135 61 40 404 41 2132 59 490 2136 61 40 404 41 2137 46 2138 40 40 2132 45 2135 41 42 1504 41 59 450 418 2016 40 2130 44 2129 44 2128 44 2133 44 2134 44 2135 44 2136 41 59 125 125 
71834,C#,"    internal class SqliteDataRecord : SqliteValueReader, IDisposable
    {
        private readonly SqliteConnection _connection;
        private byte[][]? _blobCache;
        private int?[]? _typeCache;
        private Dictionary<string, int>? _columnNameOrdinalCache;
        private string[]? _columnNameCache;
        private bool _stepped;
        private int? _rowidOrdinal;

        public SqliteDataRecord(sqlite3_stmt stmt, bool hasRows, SqliteConnection connection)
        {
            Handle = stmt;
            HasRows = hasRows;
            _connection = connection;
        }

        public virtual object this[string name]
            => GetValue(GetOrdinal(name));

        public virtual object this[int ordinal]
            => GetValue(ordinal);

        public override int FieldCount
            => sqlite3_column_count(Handle);

        public sqlite3_stmt Handle { get; }

        public bool HasRows { get; }

        public override bool IsDBNull(int ordinal)
            => !_stepped || sqlite3_data_count(Handle) == 0
                ? throw new InvalidOperationException(Resources.NoData)
                : base.IsDBNull(ordinal);

        public override object GetValue(int ordinal)
            => !_stepped || sqlite3_data_count(Handle) == 0
                ? throw new InvalidOperationException(Resources.NoData)
                : base.GetValue(ordinal)!;

        protected override double GetDoubleCore(int ordinal)
            => sqlite3_column_double(Handle, ordinal);

        protected override long GetInt64Core(int ordinal)
            => sqlite3_column_int64(Handle, ordinal);

        protected override string GetStringCore(int ordinal)
            => sqlite3_column_text(Handle, ordinal).utf8_to_string();

        public override T GetFieldValue<T>(int ordinal)
        {
            if (typeof(T) == typeof(Stream))
            {
                return (T)(object)GetStream(ordinal);
            }

            if (typeof(T) == typeof(TextReader))
            {
                return (T)(object)GetTextReader(ordinal);
            }

            return base.GetFieldValue<T>(ordinal)!;
        }

        protected override byte[] GetBlob(int ordinal)
            => base.GetBlob(ordinal)!;

        protected override byte[] GetBlobCore(int ordinal)
            => sqlite3_column_blob(Handle, ordinal).ToArray();

        protected override int GetSqliteType(int ordinal)
        {
            var type = sqlite3_column_type(Handle, ordinal);
            if (type == SQLITE_NULL
                && (ordinal < 0 || ordinal >= FieldCount))
            {
                // NB: Message is provided by the framework
                throw new ArgumentOutOfRangeException(nameof(ordinal), ordinal, message: null);
            }

            return type;
        }

        protected override T GetNull<T>(int ordinal)
            => typeof(T) == typeof(DBNull) || typeof(T) == typeof(object)
                ? (T)(object)DBNull.Value
                : throw new InvalidOperationException(GetOnNullErrorMsg(ordinal));

        public virtual string GetName(int ordinal)
        {
            var name = _columnNameCache?[ordinal] ?? sqlite3_column_name(Handle, ordinal).utf8_to_string();
            if (name == null
                && (ordinal < 0 || ordinal >= FieldCount))
            {
                // NB: Message is provided by the framework
                throw new ArgumentOutOfRangeException(nameof(ordinal), ordinal, message: null);
            }

            _columnNameCache ??= new string[FieldCount];
            _columnNameCache[ordinal] = name!;

            return name!;
        }

        public virtual int GetOrdinal(string name)
        {
            if (_columnNameOrdinalCache == null)
            {
                _columnNameOrdinalCache = new Dictionary<string, int>();
                for (var i = 0; i < FieldCount; i++)
                {
                    _columnNameOrdinalCache[GetName(i)] = i;
                }
            }

            if (_columnNameOrdinalCache.TryGetValue(name, out var ordinal))
            {
                return ordinal;
            }

            KeyValuePair<string, int>? match = null;
            foreach (var item in _columnNameOrdinalCache)
            {
                if (string.Equals(name, item.Key, StringComparison.OrdinalIgnoreCase))
                {
                    if (match != null)
                    {
                        throw new InvalidOperationException(
                            Resources.AmbiguousColumnName(name, match.Value.Key, item.Key));
                    }

                    match = item;
                }
            }

            if (match != null)
            {
                _columnNameOrdinalCache.Add(name, match.Value.Value);

                return match.Value.Value;
            }

            // NB: Message is provided by framework
            throw new ArgumentOutOfRangeException(nameof(name), name, message: null);
        }

        public virtual string GetDataTypeName(int ordinal)
        {
            var typeName = sqlite3_column_decltype(Handle, ordinal).utf8_to_string();
            if (typeName != null)
            {
                var i = typeName.IndexOf('(');

                return i == -1
                    ? typeName
                    : typeName.Substring(0, i);
            }

            var sqliteType = GetSqliteType(ordinal);
            switch (sqliteType)
            {
                case SQLITE_INTEGER:
                    return ""INTEGER"";

                case SQLITE_FLOAT:
                    return ""REAL"";

                case SQLITE_TEXT:
                    return ""TEXT"";

                default:
                    Debug.Assert(
                        sqliteType == SQLITE_BLOB || sqliteType == SQLITE_NULL,
                        ""Unexpected column type: "" + sqliteType);
                    return ""BLOB"";
            }
        }

        public virtual Type GetFieldType(int ordinal)
        {
            var sqliteType = GetSqliteType(ordinal);
            if (sqliteType == SQLITE_NULL)
            {
                sqliteType = _typeCache?[ordinal] ?? Sqlite3AffinityType(GetDataTypeName(ordinal));
            }
            else
            {
                _typeCache ??= new int?[FieldCount];
                _typeCache[ordinal] = sqliteType;
            }

            return GetFieldTypeFromSqliteType(sqliteType);
        }

        internal static Type GetFieldTypeFromSqliteType(int sqliteType)
        {
            switch (sqliteType)
            {
                case SQLITE_INTEGER:
                    return typeof(long);

                case SQLITE_FLOAT:
                    return typeof(double);

                case SQLITE_TEXT:
                    return typeof(string);

                default:
                    Debug.Assert(
                        sqliteType == SQLITE_BLOB || sqliteType == SQLITE_NULL,
                        ""Unexpected column type: "" + sqliteType);
                    return typeof(byte[]);
            }
        }

        public static Type GetFieldType(string type)
        {
            switch (type)
            {
                case ""integer"":
                    return typeof(long);

                case ""real"":
                    return typeof(double);

                case ""text"":
                    return typeof(string);

                default:
                    Debug.Assert(type == ""blob"" || type == null, ""Unexpected column type: "" + type);
                    return typeof(byte[]);
            }
        }

        public virtual long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length)
        {
            using var stream = GetStream(ordinal);

            if (buffer == null)
            {
                return stream.Length;
            }

            stream.Position = dataOffset;

            return stream.Read(buffer, bufferOffset, length);
        }

        public virtual long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length)
        {
            using var reader = new StreamReader(GetStream(ordinal), Encoding.UTF8);

            if (buffer == null)
            {
                // TODO: Consider using a stackalloc buffer and reading blocks instead
                var charCount = 0;
                while (reader.Read() != -1)
                {
                    charCount++;
                }

                return charCount;
            }

            for (var position = 0; position < dataOffset; position++)
            {
                if (reader.Read() == -1)
                {
                    // NB: Message is provided by the framework
                    throw new ArgumentOutOfRangeException(nameof(dataOffset), dataOffset, message: null);
                }
            }

            return reader.Read(buffer, bufferOffset, length);
        }

        public virtual Stream GetStream(int ordinal)
        {
            if (ordinal < 0
                || ordinal >= FieldCount)
            {
                throw new ArgumentOutOfRangeException(nameof(ordinal), ordinal, message: null);
            }

            var blobDatabaseName = sqlite3_column_database_name(Handle, ordinal).utf8_to_string();
            var blobTableName = sqlite3_column_table_name(Handle, ordinal).utf8_to_string();

            if (!_rowidOrdinal.HasValue)
            {
                _rowidOrdinal = -1;
                var pkColumns = -1L;

                for (var i = 0; i < FieldCount; i++)
                {
                    if (i == ordinal)
                    {
                        continue;
                    }

                    var databaseName = sqlite3_column_database_name(Handle, i).utf8_to_string();
                    if (databaseName != blobDatabaseName)
                    {
                        continue;
                    }

                    var tableName = sqlite3_column_table_name(Handle, i).utf8_to_string();
                    if (tableName != blobTableName)
                    {
                        continue;
                    }

                    var columnName = sqlite3_column_origin_name(Handle, i).utf8_to_string();
                    if (columnName == ""rowid"")
                    {
                        _rowidOrdinal = i;
                        break;
                    }

                    var rc = sqlite3_table_column_metadata(
                        _connection.Handle,
                        databaseName,
                        tableName,
                        columnName,
                        out var dataType,
                        out var collSeq,
                        out var notNull,
                        out var primaryKey,
                        out var autoInc);
                    SqliteException.ThrowExceptionForRC(rc, _connection.Handle);
                    if (string.Equals(dataType, ""INTEGER"", StringComparison.OrdinalIgnoreCase)
                        && primaryKey != 0)
                    {
                        if (pkColumns < 0L)
                        {
                            using (var command = _connection.CreateCommand())
                            {
                                command.CommandText = ""SELECT COUNT(*) FROM pragma_table_info($table) WHERE pk != 0;"";
                                command.Parameters.AddWithValue(""$table"", tableName);

                                pkColumns = (long)command.ExecuteScalar()!;
                            }
                        }

                        if (pkColumns == 1L)
                        {
                            _rowidOrdinal = i;
                            break;
                        }
                    }
                }

                Debug.Assert(_rowidOrdinal.HasValue);
            }

            if (_rowidOrdinal.Value < 0)
            {
                return new MemoryStream(GetCachedBlob(ordinal), false);
            }

            var blobColumnName = sqlite3_column_origin_name(Handle, ordinal).utf8_to_string();
            var rowid = GetInt32(_rowidOrdinal.Value);

            return new SqliteBlob(_connection, blobDatabaseName, blobTableName, blobColumnName, rowid, readOnly: true);
        }

        public virtual TextReader GetTextReader(int ordinal)
            => IsDBNull(ordinal)
                ? new StringReader(string.Empty)
                : new StreamReader(GetStream(ordinal), Encoding.UTF8);

        public bool Read()
        {
            if (!_stepped)
            {
                _stepped = true;

                return HasRows;
            }

            if (sqlite3_data_count(Handle) == 0)
            {
                return false;
            }

            var rc = sqlite3_step(Handle);
            SqliteException.ThrowExceptionForRC(rc, _connection.Handle);

            if (_blobCache != null)
            {
                Array.Clear(_blobCache, 0, _blobCache.Length);
            }

            return rc != SQLITE_DONE;
        }

        public void Dispose()
            => sqlite3_reset(Handle);

        private byte[] GetCachedBlob(int ordinal)
        {
            if (ordinal < 0
                || ordinal >= FieldCount)
            {
                // NB: Message is provided by the framework
                throw new ArgumentOutOfRangeException(nameof(ordinal), ordinal, message: null);
            }

            var blob = _blobCache?[ordinal];
            if (blob == null)
            {
                blob = GetBlob(ordinal);
                _blobCache ??= new byte[FieldCount][];
                _blobCache[ordinal] = blob;
            }

            return blob;
        }

        internal static int Sqlite3AffinityType(string dataTypeName)
        {
            if (dataTypeName == null)
            {
                // if no type is specified then the column has affinity BLOB
                return SQLITE_BLOB;
            }

            var typeRules = new Func<string, int?>[]
            {
                name => Contains(name, ""INT"") ? SQLITE_INTEGER : (int?)null,
                name => Contains(name, ""CHAR"")
                    || Contains(name, ""CLOB"")
                    || Contains(name, ""TEXT"")
                        ? SQLITE_TEXT
                        : (int?)null,
                name => Contains(name, ""BLOB"") ? SQLITE_BLOB : (int?)null,
                name => Contains(name, ""REAL"")
                    || Contains(name, ""FLOA"")
                    || Contains(name, ""DOUB"")
                        ? SQLITE_FLOAT
                        : (int?)null
            };

            return typeRules.Select(r => r(dataTypeName)).FirstOrDefault(r => r != null) ?? SQLITE_TEXT; // code NUMERICAL affinity as TEXT
        }

        private static bool Contains(string haystack, string needle)
            => haystack.IndexOf(needle, StringComparison.OrdinalIgnoreCase) >= 0;
    }",1,406 334 2000 58 2001 44 2002 123 437 441 2003 2004 59 437 326 91 93 91 93 63 2005 59 437 404 63 91 93 63 2006 59 437 2007 60 461 44 404 62 63 2008 59 437 461 91 93 63 2009 59 437 323 2010 59 437 404 63 2011 59 439 2000 40 2012 2013 44 323 2014 44 2003 2015 41 123 2016 61 2013 59 2017 61 2014 59 2004 61 2015 59 125 439 491 426 467 91 461 2018 93 619 2019 40 2020 40 2018 41 41 59 439 491 426 467 91 404 2021 93 619 2019 40 2021 41 59 439 431 404 2022 619 2023 40 2024 41 59 439 2012 2024 123 2025 59 125 439 323 2026 123 2027 59 125 439 431 323 2028 40 404 2021 41 619 33 2010 606 2029 40 2024 41 614 1500 63 469 418 2030 40 2031 46 2032 41 58 320 46 2028 40 2021 41 59 439 431 426 2019 40 404 2021 41 619 33 2010 606 2029 40 2024 41 614 1500 63 469 418 2030 40 2031 46 2032 41 58 320 46 2019 40 2021 41 33 59 438 431 356 2033 40 404 2021 41 619 2034 40 2024 44 2021 41 59 438 431 413 2035 40 404 2021 41 619 2036 40 2024 44 2021 41 59 438 431 461 2037 40 404 2021 41 619 2038 40 2024 44 2021 41 46 2039 40 41 59 439 431 2040 2041 60 2040 62 40 404 2021 41 123 392 40 478 40 2040 41 614 478 40 2042 41 41 123 450 40 2040 41 40 426 41 2043 40 2021 41 59 125 392 40 478 40 2040 41 614 478 40 2044 41 41 123 450 40 2040 41 40 426 41 2045 40 2021 41 59 125 450 320 46 2041 60 2040 62 40 2021 41 33 59 125 438 431 326 91 93 2046 40 404 2021 41 619 320 46 2046 40 2021 41 33 59 438 431 326 91 93 2047 40 404 2021 41 619 2048 40 2024 44 2021 41 46 2049 40 41 59 438 431 404 2050 40 404 2021 41 123 490 2051 61 2052 40 2024 44 2021 41 59 392 40 2051 614 2053 605 40 2021 60 1500 606 2021 615 2022 41 41 123 621 469 418 2054 40 2055 40 2021 41 44 2021 44 2056 58 424 41 59 125 450 2051 59 125 438 431 2040 2057 60 2040 62 40 404 2021 41 619 478 40 2040 41 614 478 40 2058 41 606 478 40 2040 41 614 478 40 426 41 63 40 2040 41 40 426 41 2058 46 2059 58 469 418 2030 40 2060 40 2021 41 41 59 439 491 461 2061 40 404 2021 41 123 490 2018 61 2009 63 91 2021 93 633 2062 40 2024 44 2021 41 46 2039 40 41 59 392 40 2018 614 424 605 40 2021 60 1500 606 2021 615 2022 41 41 123 621 469 418 2063 40 2064 40 2021 41 44 2021 44 2065 58 424 41 59 125 2009 633 61 418 461 91 2022 93 59 2009 91 2021 93 61 2018 33 59 450 2018 33 59 125 439 491 404 2020 40 461 2018 41 123 392 40 2008 614 424 41 123 2008 61 418 2007 60 461 44 404 62 40 41 59 385 40 490 2066 61 1500 59 2066 60 2022 59 2066 637 41 123 2008 91 2061 40 2066 41 93 61 2066 59 125 125 392 40 2008 46 2067 40 2018 44 430 490 2021 41 41 123 450 2021 59 125 2068 60 461 44 404 62 63 2069 61 424 59 386 40 490 2070 398 2008 41 123 392 40 461 46 2071 40 2018 44 2070 46 2072 44 2073 46 2074 41 41 123 392 40 2069 631 424 41 123 469 418 2030 40 2031 46 2075 40 2018 44 2069 46 2059 46 2072 44 2070 46 2072 41 41 59 125 2069 61 2070 59 125 125 392 40 2069 631 424 41 123 2008 46 2076 40 2018 44 2069 46 2059 46 2059 41 59 450 2069 46 2059 46 2059 59 125 621 469 418 2077 40 2078 40 2018 41 44 2018 44 2079 58 424 41 59 125 439 491 461 2080 40 404 2021 41 123 490 2081 61 2082 40 2024 44 2021 41 46 2039 40 41 59 392 40 2081 631 424 41 123 490 2083 61 2081 46 2084 40 607 41 59 450 2083 614 45 1501 63 2081 58 2081 46 2085 40 1500 44 2083 41 59 125 490 2086 61 2050 40 2021 41 59 464 40 2086 41 123 328 2087 58 450 648 59 328 2088 58 450 648 59 328 2089 58 450 648 59 349 58 2090 46 2091 40 2086 614 2092 606 2086 614 2093 44 648 43 2086 41 59 450 648 59 125 125 439 491 2094 2095 40 404 2021 41 123 490 2096 61 2050 40 2021 41 59 392 40 2096 614 2097 41 123 2096 61 2006 63 91 2021 93 633 2098 40 2080 40 2021 41 41 59 125 360 123 2006 633 61 418 404 63 91 2022 93 59 2006 91 2021 93 61 2096 59 125 450 2099 40 2096 41 59 125 406 457 2094 2100 40 404 2101 41 123 464 40 2101 41 123 328 2102 58 450 478 40 413 41 59 328 2103 58 450 478 40 356 41 59 328 2104 58 450 478 40 461 41 59 349 58 2105 46 2106 40 2101 614 2107 606 2101 614 2108 44 648 43 2101 41 59 450 478 40 326 91 93 41 59 125 125 439 457 2094 2095 40 461 2109 41 123 464 40 2109 41 123 328 648 58 450 478 40 413 41 59 328 648 58 450 478 40 356 41 59 328 648 58 450 478 40 461 41 59 349 58 2110 46 2111 40 2109 614 648 606 2109 614 424 44 648 43 2109 41 59 450 478 40 326 91 93 41 59 125 125 439 491 413 2112 40 404 2021 44 413 2113 44 326 91 93 63 2114 44 404 2115 44 404 2116 41 123 489 490 2117 61 2118 40 2021 41 59 392 40 2114 614 424 41 123 450 2117 46 2119 59 125 2117 46 2120 61 2113 59 450 2117 46 2121 40 2114 44 2115 44 2116 41 59 125 439 491 413 2122 40 404 2021 44 413 2113 44 330 91 93 63 2114 44 404 2115 44 404 2116 41 123 489 490 2123 61 418 2124 40 2125 40 2021 41 44 2126 46 2127 41 59 392 40 2114 614 424 41 123 621 490 2128 61 1500 59 496 40 2123 46 2129 40 41 631 45 1501 41 123 2128 637 59 125 450 2128 59 125 385 40 490 2130 61 1500 59 2130 60 2113 59 2130 637 41 123 392 40 2123 46 2131 40 41 614 45 1501 41 123 621 469 418 2132 40 2133 40 2113 41 44 2113 44 2134 58 424 41 59 125 125 450 2123 46 2135 40 2114 44 2115 44 2116 41 59 125 439 491 2136 2137 40 404 2021 41 123 392 40 2021 60 1500 606 2021 615 2022 41 123 469 418 2138 40 2139 40 2021 41 44 2021 44 2140 58 424 41 59 125 490 2141 61 2142 40 2024 44 2021 41 46 2039 40 41 59 490 2143 61 2144 40 2024 44 2021 41 46 2039 40 41 59 392 40 33 2011 46 2145 41 123 2011 61 45 1501 59 490 2146 61 45 1501 59 385 40 490 2147 61 1500 59 2147 60 2022 59 2147 637 41 123 392 40 2147 614 2021 41 123 344 59 125 490 2148 61 2142 40 2024 44 2147 41 46 2039 40 41 59 392 40 2148 631 2141 41 123 344 59 125 490 2149 61 2144 40 2024 44 2147 41 46 2039 40 41 59 392 40 2149 631 2143 41 123 344 59 125 490 2150 61 2151 40 2024 44 2147 41 46 2039 40 41 59 392 40 2150 614 648 41 123 2011 61 2147 59 325 59 125 490 2152 61 2153 40 2004 46 2024 44 2148 44 2149 44 2150 44 430 490 2154 44 430 490 2155 44 430 490 2156 44 430 490 2157 44 430 490 2158 41 59 2159 46 2160 40 2152 44 2004 46 2024 41 59 392 40 461 46 2161 40 2154 44 648 44 2162 46 2163 41 605 2157 631 1500 41 123 392 40 2146 60 1500 41 123 489 40 490 2164 61 2004 46 2165 40 41 41 123 2164 46 2166 61 648 59 2164 46 2167 46 2168 40 648 44 2149 41 59 2146 61 40 413 41 2164 46 2169 40 41 33 59 125 125 392 40 2146 614 1501 41 123 2011 61 2147 59 325 59 125 125 125 2170 46 2171 40 2011 46 2145 41 59 125 392 40 2011 46 2059 60 1500 41 123 450 418 2172 40 2173 40 2021 41 44 380 41 59 125 490 2174 61 2175 40 2024 44 2021 41 46 2039 40 41 59 490 2176 61 2177 40 2011 46 2059 41 59 450 418 2178 40 2004 44 2141 44 2143 44 2174 44 2176 44 2179 58 473 41 59 125 439 491 2180 2181 40 404 2021 41 619 2028 40 2021 41 63 418 2182 40 461 46 2183 41 58 418 2184 40 2137 40 2021 41 44 2185 46 2186 41 59 439 323 2187 40 41 123 392 40 33 2010 41 123 2010 61 473 59 450 2026 59 125 392 40 2029 40 2024 41 614 1500 41 123 450 380 59 125 490 2188 61 2189 40 2024 41 59 2190 46 2191 40 2188 44 2004 46 2024 41 59 392 40 2005 631 424 41 123 2192 46 2193 40 2005 44 1500 44 2005 46 2194 41 59 125 450 2188 631 2195 59 125 439 492 2196 40 41 619 2197 40 2024 41 59 437 326 91 93 2198 40 404 2021 41 123 392 40 2021 60 1500 606 2021 615 2022 41 123 621 469 418 2199 40 2200 40 2021 41 44 2021 44 2201 58 424 41 59 125 490 2202 61 2005 63 91 2021 93 59 392 40 2202 614 424 41 123 2202 61 2046 40 2021 41 59 2005 633 61 418 326 91 2022 93 91 93 59 2005 91 2021 93 61 2202 59 125 450 2202 59 125 406 457 404 2203 40 461 2204 41 123 392 40 2204 614 424 41 123 621 450 2205 59 125 490 2206 61 418 2207 60 461 44 404 63 62 91 93 123 2018 619 2208 40 2018 44 648 41 63 2209 58 40 404 63 41 424 44 2018 619 2208 40 2018 44 648 41 606 2208 40 2018 44 648 41 606 2208 40 2018 44 648 41 63 2210 58 40 404 63 41 424 44 2018 619 2208 40 2018 44 648 41 63 2211 58 40 404 63 41 424 44 2018 619 2208 40 2018 44 648 41 606 2208 40 2018 44 648 41 606 2208 40 2018 44 648 41 63 2212 58 40 404 63 41 424 125 59 450 2206 46 2213 40 2214 619 2214 40 2204 41 41 46 2215 40 2214 619 2214 631 424 41 633 2216 59 621 125 437 457 323 2217 40 461 2218 44 461 2219 41 619 2218 46 2220 40 2219 44 2221 46 2222 41 615 1500 59 125 
68366,C#,"    public class SqliteDataReader : DbDataReader
    {
        private readonly SqliteCommand _command;
        private readonly bool _closeConnection;
        private readonly Stopwatch _timer;
        private IEnumerator<sqlite3_stmt>? _stmtEnumerator;
        private SqliteDataRecord? _record;
        private bool _closed;
        private int _recordsAffected = -1;

        internal SqliteDataReader(
            SqliteCommand command,
            Stopwatch timer,
            IEnumerable<sqlite3_stmt> stmts,
            bool closeConnection)
        {
            _command = command;
            _timer = timer;
            _stmtEnumerator = stmts.GetEnumerator();
            _closeConnection = closeConnection;
        }

        /// <summary>
        ///     Gets the depth of nesting for the current row. Always zero.
        /// </summary>
        /// <value>The depth of nesting for the current row.</value>
        public override int Depth
            => 0;

        /// <summary>
        ///     Gets the number of columns in the current row.
        /// </summary>
        /// <value>The number of columns in the current row.</value>
        public override int FieldCount
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(FieldCount)))
                : (_record?.FieldCount ?? 0);

        /// <summary>
        ///     Gets a handle to underlying prepared statement.
        /// </summary>
        /// <value>A handle to underlying prepared statement.</value>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/interop"">Interoperability</seealso>
        public virtual sqlite3_stmt? Handle
            => _record?.Handle;

        /// <summary>
        ///     Gets a value indicating whether the data reader contains any rows.
        /// </summary>
        /// <value>A value indicating whether the data reader contains any rows.</value>
        public override bool HasRows
            => _record?.HasRows ?? false;

        /// <summary>
        ///     Gets a value indicating whether the data reader is closed.
        /// </summary>
        /// <value>A value indicating whether the data reader is closed.</value>
        public override bool IsClosed
            => _closed;

        /// <summary>
        ///     Gets the number of rows inserted, updated, or deleted. -1 for SELECT statements.
        /// </summary>
        /// <value>The number of rows inserted, updated, or deleted.</value>
        public override int RecordsAffected
            => _recordsAffected;

        /// <summary>
        ///     Gets the value of the specified column.
        /// </summary>
        /// <param name=""name"">The name of the column. The value is case-sensitive.</param>
        /// <returns>The value.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/types"">Data Types</seealso>
        public override object this[string name]
            => _record == null
                ? throw new InvalidOperationException(Resources.NoData)
                : _record[name];

        /// <summary>
        ///     Gets the value of the specified column.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/types"">Data Types</seealso>
        public override object this[int ordinal]
            => _record == null
                ? throw new InvalidOperationException(Resources.NoData)
                : _record[ordinal];

        /// <summary>
        ///     Gets an enumerator that can be used to iterate through the rows in the data reader.
        /// </summary>
        /// <returns>The enumerator.</returns>
        public override IEnumerator GetEnumerator()
            => new DbEnumerator(this, closeReader: false);

        /// <summary>
        ///     Advances to the next row in the result set.
        /// </summary>
        /// <returns><see langword=""true"" /> if there are more rows; otherwise, <see langword=""false"" />.</returns>
        public override bool Read()
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(Read)))
                : (_record?.Read() ?? false);

        /// <summary>
        ///     Advances to the next result set for batched statements.
        /// </summary>
        /// <returns><see langword=""true"" /> if there are more result sets; otherwise, <see langword=""false"" />.</returns>
        /// <exception cref=""SqliteException"">A SQLite error occurs during execution.</exception>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/batching"">Batching</seealso>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/database-errors"">Database Errors</seealso>
        public override bool NextResult()
        {
            if (_closed)
            {
                throw new InvalidOperationException(Resources.DataReaderClosed(nameof(NextResult)));
            }

            if (_record != null)
            {
                _record.Dispose();
                _record = null;
            }

            sqlite3_stmt stmt;
            int rc;

            while (_stmtEnumerator!.MoveNext())
            {
                try
                {
                    stmt = _stmtEnumerator.Current;

                    _timer.Start();

                    while (IsBusy(rc = sqlite3_step(stmt)))
                    {
                        if (_command.CommandTimeout != 0
                            && _timer.ElapsedMilliseconds >= _command.CommandTimeout * 1000L)
                        {
                            break;
                        }

                        sqlite3_reset(stmt);

                        // TODO: Consider having an async path that uses Task.Delay()
                        Thread.Sleep(150);
                    }

                    _timer.Stop();

                    SqliteException.ThrowExceptionForRC(rc, _command.Connection!.Handle);

                    // It's a SELECT statement
                    if (sqlite3_column_count(stmt) != 0)
                    {
                        _record = new SqliteDataRecord(stmt, rc != SQLITE_DONE, _command.Connection);

                        return true;
                    }

                    while (rc != SQLITE_DONE)
                    {
                        rc = sqlite3_step(stmt);
                        SqliteException.ThrowExceptionForRC(rc, _command.Connection.Handle);
                    }

                    sqlite3_reset(stmt);

                    var changes = sqlite3_changes(_command.Connection.Handle);
                    if (_recordsAffected == -1)
                    {
                        _recordsAffected = changes;
                    }
                    else
                    {
                        _recordsAffected += changes;
                    }
                }
                catch
                {
                    sqlite3_reset(_stmtEnumerator.Current);
                    _stmtEnumerator.Dispose();
                    _stmtEnumerator = null;
                    Dispose();

                    throw;
                }
            }

            return false;
        }

        private static bool IsBusy(int rc)
            => rc == SQLITE_LOCKED
                || rc == SQLITE_BUSY
                || rc == SQLITE_LOCKED_SHAREDCACHE;

        /// <summary>
        ///     Closes the data reader.
        /// </summary>
        public override void Close()
            => Dispose(true);

        /// <summary>
        ///     Releases any resources used by the data reader and closes it.
        /// </summary>
        /// <param name=""disposing"">
        ///     <see langword=""true"" /> to release managed and unmanaged resources;
        ///     <see langword=""false"" /> to release only unmanaged resources.
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (!disposing || _closed)
            {
                return;
            }

            _command.DataReader = null;

            _record?.Dispose();

            if (_stmtEnumerator != null)
            {
                try
                {
                    while (NextResult())
                    {
                        _record!.Dispose();
                    }
                }
                catch
                {
                }
            }

            _stmtEnumerator?.Dispose();

            _closed = true;

            if (_closeConnection)
            {
                _command.Connection!.Close();
            }
        }

        /// <summary>
        ///     Gets the name of the specified column.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The name of the column.</returns>
        public override string GetName(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetName)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetName(ordinal);

        /// <summary>
        ///     Gets the ordinal of the specified column.
        /// </summary>
        /// <param name=""name"">The name of the column.</param>
        /// <returns>The zero-based column ordinal.</returns>
        public override int GetOrdinal(string name)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetOrdinal)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetOrdinal(name);

        /// <summary>
        ///     Gets the declared data type name of the specified column. The storage class is returned for computed
        ///     columns.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The data type name of the column.</returns>
        /// <remarks>Due to SQLite's dynamic type system, this may not reflect the actual type of the value.</remarks>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/types"">Data Types</seealso>
        public override string GetDataTypeName(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetDataTypeName)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetDataTypeName(ordinal);

        /// <summary>
        ///     Gets the data type of the specified column.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The data type of the column.</returns>
        public override Type GetFieldType(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetFieldType)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetFieldType(ordinal);

        /// <summary>
        ///     Gets a value indicating whether the specified column is <see cref=""DBNull"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns><see langword=""true"" /> if the specified column is <see cref=""DBNull"" />; otherwise, <see langword=""false"" />.</returns>
        public override bool IsDBNull(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(IsDBNull)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.IsDBNull(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""bool"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override bool GetBoolean(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetBoolean)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetBoolean(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""byte"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override byte GetByte(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetByte)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetByte(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""char"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override char GetChar(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetChar)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetChar(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""DateTime"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override DateTime GetDateTime(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetDateTime)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetDateTime(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""DateTimeOffset"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public virtual DateTimeOffset GetDateTimeOffset(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetDateTimeOffset)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetDateTimeOffset(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""TimeSpan"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public virtual TimeSpan GetTimeSpan(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetTimeSpan)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetTimeSpan(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""decimal"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override decimal GetDecimal(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetDecimal)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetDecimal(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""double"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override double GetDouble(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetDouble)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetDouble(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""float"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override float GetFloat(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetFloat)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetFloat(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""Guid"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override Guid GetGuid(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetGuid)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetGuid(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""short"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override short GetInt16(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetInt16)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetInt16(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""int"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override int GetInt32(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetInt32)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetInt32(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""long"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override long GetInt64(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetInt64)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetInt64(ordinal);

        /// <summary>
        ///     Gets the value of the specified column as a <see cref=""string"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        public override string GetString(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetString)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetString(ordinal);

        /// <summary>
        ///     Reads a stream of bytes from the specified column. Not supported.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <param name=""dataOffset"">The index from which to begin the read operation.</param>
        /// <param name=""buffer"">The buffer into which the data is copied.</param>
        /// <param name=""bufferOffset"">The index to which the data will be copied.</param>
        /// <param name=""length"">The maximum number of bytes to read.</param>
        /// <returns>The actual number of bytes read.</returns>
        public override long GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetBytes)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetBytes(ordinal, dataOffset, buffer, bufferOffset, length);

        /// <summary>
        ///     Reads a stream of characters from the specified column. Not supported.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <param name=""dataOffset"">The index from which to begin the read operation.</param>
        /// <param name=""buffer"">The buffer into which the data is copied.</param>
        /// <param name=""bufferOffset"">The index to which the data will be copied.</param>
        /// <param name=""length"">The maximum number of characters to read.</param>
        /// <returns>The actual number of characters read.</returns>
        public override long GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetChars)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetChars(ordinal, dataOffset, buffer, bufferOffset, length);

        /// <summary>
        ///     Retrieves data as a Stream. If the reader includes rowid (or any of its aliases), a
        ///     <see cref=""SqliteBlob"" /> is returned. Otherwise, the all of the data is read into memory and a
        ///     <see cref=""MemoryStream"" /> is returned.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The returned object.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/blob-io"">BLOB I/O</seealso>
        public override Stream GetStream(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetStream)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetStream(ordinal);

        /// <summary>
        ///     Retrieves data as a <see cref=""TextReader"" />.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The returned object.</returns>
        public override TextReader GetTextReader(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetTextReader)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetTextReader(ordinal);

        /// <summary>
        ///     Gets the value of the specified column.
        /// </summary>
        /// <typeparam name=""T"">The type of the value.</typeparam>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/types"">Data Types</seealso>
        public override T GetFieldValue<T>(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetFieldValue)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetFieldValue<T>(ordinal);

        /// <summary>
        ///     Gets the value of the specified column.
        /// </summary>
        /// <param name=""ordinal"">The zero-based column ordinal.</param>
        /// <returns>The value of the column.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/types"">Data Types</seealso>
        public override object GetValue(int ordinal)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetValue)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetValue(ordinal);

        /// <summary>
        ///     Gets the column values of the current row.
        /// </summary>
        /// <param name=""values"">An array into which the values are copied.</param>
        /// <returns>The number of values copied into the array.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/types"">Data Types</seealso>
        public override int GetValues(object?[] values)
            => _closed
                ? throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetValues)))
                : _record == null
                    ? throw new InvalidOperationException(Resources.NoData)
                    : _record.GetValues(values);

        /// <summary>
        ///     Returns a System.Data.DataTable that describes the column metadata of the System.Data.Common.DbDataReader.
        /// </summary>
        /// <returns>A System.Data.DataTable that describes the column metadata.</returns>
        /// <seealso href=""https://docs.microsoft.com/dotnet/standard/data/sqlite/metadata"">Metadata</seealso>
        public override DataTable GetSchemaTable()
        {
            if (_closed)
            {
                throw new InvalidOperationException(Resources.DataReaderClosed(nameof(GetSchemaTable)));
            }

            if (_record == null)
            {
                throw new InvalidOperationException(Resources.NoData);
            }

            var schemaTable = new DataTable(""SchemaTable"");

            var ColumnName = new DataColumn(SchemaTableColumn.ColumnName, typeof(string));
            var ColumnOrdinal = new DataColumn(SchemaTableColumn.ColumnOrdinal, typeof(int));
            var ColumnSize = new DataColumn(SchemaTableColumn.ColumnSize, typeof(int));
            var NumericPrecision = new DataColumn(SchemaTableColumn.NumericPrecision, typeof(short));
            var NumericScale = new DataColumn(SchemaTableColumn.NumericScale, typeof(short));

            var DataType = new DataColumn(SchemaTableColumn.DataType, typeof(Type));
            var DataTypeName = new DataColumn(""DataTypeName"", typeof(string));

            var IsLong = new DataColumn(SchemaTableColumn.IsLong, typeof(bool));
            var AllowDBNull = new DataColumn(SchemaTableColumn.AllowDBNull, typeof(bool));

            var IsUnique = new DataColumn(SchemaTableColumn.IsUnique, typeof(bool));
            var IsKey = new DataColumn(SchemaTableColumn.IsKey, typeof(bool));
            var IsAutoIncrement = new DataColumn(SchemaTableOptionalColumn.IsAutoIncrement, typeof(bool));

            var BaseCatalogName = new DataColumn(SchemaTableOptionalColumn.BaseCatalogName, typeof(string));
            var BaseSchemaName = new DataColumn(SchemaTableColumn.BaseSchemaName, typeof(string));
            var BaseTableName = new DataColumn(SchemaTableColumn.BaseTableName, typeof(string));
            var BaseColumnName = new DataColumn(SchemaTableColumn.BaseColumnName, typeof(string));

            var BaseServerName = new DataColumn(SchemaTableOptionalColumn.BaseServerName, typeof(string));
            var IsAliased = new DataColumn(SchemaTableColumn.IsAliased, typeof(bool));
            var IsExpression = new DataColumn(SchemaTableColumn.IsExpression, typeof(bool));

            var columns = schemaTable.Columns;

            columns.Add(ColumnName);
            columns.Add(ColumnOrdinal);
            columns.Add(ColumnSize);
            columns.Add(NumericPrecision);
            columns.Add(NumericScale);
            columns.Add(IsUnique);
            columns.Add(IsKey);
            columns.Add(BaseServerName);
            columns.Add(BaseCatalogName);
            columns.Add(BaseColumnName);
            columns.Add(BaseSchemaName);
            columns.Add(BaseTableName);
            columns.Add(DataType);
            columns.Add(DataTypeName);
            columns.Add(AllowDBNull);
            columns.Add(IsAliased);
            columns.Add(IsExpression);
            columns.Add(IsAutoIncrement);
            columns.Add(IsLong);

            for (var i = 0; i < FieldCount; i++)
            {
                var schemaRow = schemaTable.NewRow();
                schemaRow[ColumnName] = GetName(i);
                schemaRow[ColumnOrdinal] = i;
                schemaRow[ColumnSize] = -1;
                schemaRow[NumericPrecision] = DBNull.Value;
                schemaRow[NumericScale] = DBNull.Value;
                schemaRow[BaseServerName] = _command.Connection!.DataSource;
                var databaseName = sqlite3_column_database_name(_record.Handle, i).utf8_to_string();
                schemaRow[BaseCatalogName] = databaseName;
                var columnName = sqlite3_column_origin_name(_record.Handle, i).utf8_to_string();
                schemaRow[BaseColumnName] = columnName;
                schemaRow[BaseSchemaName] = DBNull.Value;
                var tableName = sqlite3_column_table_name(_record.Handle, i).utf8_to_string();
                schemaRow[BaseTableName] = tableName;
                schemaRow[DataType] = GetFieldType(i);
                var dataTypeName = GetDataTypeName(i);
                schemaRow[DataTypeName] = dataTypeName;
                schemaRow[IsAliased] = columnName != GetName(i);
                schemaRow[IsExpression] = columnName == null;
                schemaRow[IsLong] = DBNull.Value;

                var eponymousVirtualTable = false;
                if (tableName != null
                    && columnName != null)
                {
                    using (var command = _command.Connection.CreateCommand())
                    {
                        command.CommandText = new StringBuilder()
                            .AppendLine(""SELECT COUNT(*)"")
                            .AppendLine(""FROM pragma_index_list($table) i, pragma_index_info(i.name) c"")
                            .AppendLine(""WHERE \""unique\"" = 1 AND c.name = $column AND"")
                            .AppendLine(""NOT EXISTS (SELECT * FROM pragma_index_info(i.name) c2 WHERE c2.name != c.name);"").ToString();
                        command.Parameters.AddWithValue(""$table"", tableName);
                        command.Parameters.AddWithValue(""$column"", columnName);

                        var cnt = (long)command.ExecuteScalar()!;
                        schemaRow[IsUnique] = cnt != 0;

                        command.Parameters.Clear();
                        var columnType = ""typeof(\"""" + columnName.Replace(""\"""", ""\""\"""") + ""\"")"";
                        command.CommandText = new StringBuilder()
                            .AppendLine($""SELECT {columnType}"")
                            .AppendLine($""FROM \""{tableName}\"""")
                            .AppendLine($""WHERE {columnType} != 'null'"")
                            .AppendLine($""GROUP BY {columnType}"")
                            .AppendLine(""ORDER BY count() DESC"")
                            .AppendLine(""LIMIT 1;"").ToString();

                        var type = (string?)command.ExecuteScalar();
                        schemaRow[DataType] =
                            (type != null)
                                ? SqliteDataRecord.GetFieldType(type)
                                : SqliteDataRecord.GetFieldTypeFromSqliteType(
                                    SqliteDataRecord.Sqlite3AffinityType(dataTypeName));

                        command.CommandText = ""SELECT COUNT(*) FROM sqlite_master WHERE name = $name AND type IN ('table', 'view')"";
                        command.Parameters.AddWithValue(""$name"", tableName);

                        eponymousVirtualTable = (long)command.ExecuteScalar()! == 0L;
                    }

                    if (databaseName != null
                        && !eponymousVirtualTable)
                    {
                        var rc = sqlite3_table_column_metadata(
                            _command.Connection.Handle, databaseName, tableName, columnName, out var dataType, out var collSeq,
                            out var notNull, out var primaryKey, out var autoInc);
                        SqliteException.ThrowExceptionForRC(rc, _command.Connection.Handle);

                        schemaRow[IsKey] = primaryKey != 0;
                        schemaRow[AllowDBNull] = notNull == 0;
                        schemaRow[IsAutoIncrement] = autoInc != 0;
                    }
                }

                schemaTable.Rows.Add(schemaRow);
            }

            return schemaTable;
        }
    }",1,439 334 2000 58 2001 123 437 441 2002 2003 59 437 441 323 2004 59 437 441 2005 2006 59 437 2007 60 2008 62 63 2009 59 437 2010 63 2011 59 437 323 2012 59 437 404 2013 61 45 1501 59 406 2000 40 2002 2014 44 2005 2015 44 2016 60 2008 62 2017 44 323 2018 41 123 2003 61 2014 59 2006 61 2015 59 2009 61 2017 46 2019 40 41 59 2004 61 2018 59 125 612 439 431 404 2020 619 1500 59 612 439 431 404 2021 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2021 41 41 41 58 40 2011 634 2021 633 1500 41 59 612 439 491 2008 63 2026 619 2011 634 2026 59 612 439 431 323 2027 619 2011 634 2027 633 380 59 612 439 431 323 2028 619 2012 59 612 439 431 404 2029 619 2013 59 612 439 431 426 467 91 461 2030 93 619 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 91 2030 93 59 612 439 431 426 467 91 404 2032 93 619 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 91 2032 93 59 612 439 431 2007 2033 40 41 619 418 2034 40 467 44 2035 58 380 41 59 612 439 431 323 2036 40 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2036 41 41 41 58 40 2011 634 2036 40 41 633 380 41 59 612 439 431 323 2037 40 41 123 392 40 2012 41 123 469 418 2022 40 2023 46 2024 40 2025 40 2037 41 41 41 59 125 392 40 2011 631 424 41 123 2011 46 2038 40 41 59 2011 61 424 59 125 2008 2039 59 404 2040 59 496 40 2009 33 46 2041 40 41 41 123 474 123 2039 61 2009 46 2042 59 2006 46 2043 40 41 59 496 40 2044 40 2040 61 2045 40 2039 41 41 41 123 392 40 2003 46 2046 631 1500 605 2006 46 2047 615 2003 46 2046 42 1504 41 123 325 59 125 2048 40 2039 41 59 621 2049 46 2050 40 1504 41 59 125 2006 46 2051 40 41 59 2052 46 2053 40 2040 44 2003 46 2054 33 46 2026 41 59 621 392 40 2055 40 2039 41 631 1500 41 123 2011 61 418 2010 40 2039 44 2040 631 2056 44 2003 46 2054 41 59 450 473 59 125 496 40 2040 631 2057 41 123 2040 61 2045 40 2039 41 59 2052 46 2053 40 2040 44 2003 46 2054 46 2026 41 59 125 2058 40 2039 41 59 490 2059 61 2060 40 2003 46 2054 46 2026 41 59 392 40 2013 614 45 1501 41 123 2013 61 2059 59 125 360 123 2013 636 2059 59 125 125 329 123 2061 40 2009 46 2062 41 59 2009 46 2063 40 41 59 2009 61 424 59 2063 40 41 59 469 59 125 125 450 380 59 125 437 457 323 2064 40 404 2065 41 619 2065 614 2066 606 2065 614 2067 606 2065 614 2068 59 612 439 431 492 2069 40 41 619 2070 40 473 41 59 612 438 431 492 2070 40 323 2071 41 123 392 40 33 2071 606 2012 41 123 450 59 125 2003 46 2072 61 424 59 2011 634 2070 40 41 59 392 40 2009 631 424 41 123 474 123 496 40 2037 40 41 41 123 2011 33 46 2070 40 41 59 125 125 329 123 125 125 2009 634 2070 40 41 59 2012 61 473 59 392 40 2004 41 123 2003 46 2073 33 46 2069 40 41 59 125 125 612 439 431 461 2074 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2074 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2074 40 2032 41 59 612 439 431 404 2075 40 461 2030 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2075 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2075 40 2030 41 59 612 439 431 461 2076 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2076 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2076 40 2032 41 59 612 439 431 2077 2078 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2078 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2078 40 2032 41 59 612 439 431 323 2079 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2079 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2079 40 2032 41 59 612 439 431 323 2080 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2080 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2080 40 2032 41 59 612 439 431 326 2081 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2081 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2081 40 2032 41 59 612 439 431 330 2082 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2082 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2082 40 2032 41 59 612 439 431 2083 2084 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2084 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2084 40 2032 41 59 612 439 491 2085 2086 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2086 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2086 40 2032 41 59 612 439 491 2087 2088 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2088 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2088 40 2032 41 59 612 439 431 345 2089 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2089 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2089 40 2032 41 59 612 439 431 356 2090 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2090 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2090 40 2032 41 59 612 439 431 384 2091 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2091 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2091 40 2032 41 59 612 439 431 2092 2093 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2093 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2093 40 2032 41 59 612 439 431 453 2094 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2094 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2094 40 2032 41 59 612 439 431 404 2095 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2095 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2095 40 2032 41 59 612 439 431 413 2096 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2096 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2096 40 2032 41 59 612 439 431 461 2097 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2097 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2097 40 2032 41 59 612 439 431 413 2098 40 404 2032 44 413 2099 44 326 91 93 63 2100 44 404 2101 44 404 2102 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2098 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2098 40 2032 44 2099 44 2100 44 2101 44 2102 41 59 612 439 431 413 2103 40 404 2032 44 413 2099 44 330 91 93 63 2100 44 404 2101 44 404 2102 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2103 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2103 40 2032 44 2099 44 2100 44 2101 44 2102 41 59 612 439 431 2104 2105 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2105 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2105 40 2032 41 59 612 439 431 2106 2107 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2107 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2107 40 2032 41 59 612 439 431 2108 2109 60 2108 62 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2109 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2109 60 2108 62 40 2032 41 59 612 439 431 426 2110 40 404 2032 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2110 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2110 40 2032 41 59 612 439 431 404 2111 40 426 63 91 93 2112 41 619 2012 63 469 418 2022 40 2023 46 2024 40 2025 40 2111 41 41 41 58 2011 614 424 63 469 418 2022 40 2023 46 2031 41 58 2011 46 2111 40 2112 41 59 612 439 431 2113 2114 40 41 123 392 40 2012 41 123 469 418 2022 40 2023 46 2024 40 2025 40 2114 41 41 41 59 125 392 40 2011 614 424 41 123 469 418 2022 40 2023 46 2031 41 59 125 490 2115 61 418 2113 40 648 41 59 490 2116 61 418 2117 40 2118 46 2116 44 478 40 461 41 41 59 490 2119 61 418 2117 40 2118 46 2119 44 478 40 404 41 41 59 490 2120 61 418 2117 40 2118 46 2120 44 478 40 404 41 41 59 490 2121 61 418 2117 40 2118 46 2121 44 478 40 453 41 41 59 490 2122 61 418 2117 40 2118 46 2122 44 478 40 453 41 41 59 490 2123 61 418 2117 40 2118 46 2123 44 478 40 2077 41 41 59 490 2124 61 418 2117 40 648 44 478 40 461 41 41 59 490 2125 61 418 2117 40 2118 46 2125 44 478 40 323 41 41 59 490 2126 61 418 2117 40 2118 46 2126 44 478 40 323 41 41 59 490 2127 61 418 2117 40 2118 46 2127 44 478 40 323 41 41 59 490 2128 61 418 2117 40 2118 46 2128 44 478 40 323 41 41 59 490 2129 61 418 2117 40 2130 46 2129 44 478 40 323 41 41 59 490 2131 61 418 2117 40 2130 46 2131 44 478 40 461 41 41 59 490 2132 61 418 2117 40 2118 46 2132 44 478 40 461 41 41 59 490 2133 61 418 2117 40 2118 46 2133 44 478 40 461 41 41 59 490 2134 61 418 2117 40 2118 46 2134 44 478 40 461 41 41 59 490 2135 61 418 2117 40 2130 46 2135 44 478 40 461 41 41 59 490 2136 61 418 2117 40 2118 46 2136 44 478 40 323 41 41 59 490 2137 61 418 2117 40 2118 46 2137 44 478 40 323 41 41 59 490 2138 61 2115 46 2139 59 2138 46 2140 40 2116 41 59 2138 46 2140 40 2119 41 59 2138 46 2140 40 2120 41 59 2138 46 2140 40 2121 41 59 2138 46 2140 40 2122 41 59 2138 46 2140 40 2127 41 59 2138 46 2140 40 2128 41 59 2138 46 2140 40 2135 41 59 2138 46 2140 40 2131 41 59 2138 46 2140 40 2134 41 59 2138 46 2140 40 2132 41 59 2138 46 2140 40 2133 41 59 2138 46 2140 40 2123 41 59 2138 46 2140 40 2124 41 59 2138 46 2140 40 2126 41 59 2138 46 2140 40 2136 41 59 2138 46 2140 40 2137 41 59 2138 46 2140 40 2129 41 59 2138 46 2140 40 2125 41 59 385 40 490 2141 61 1500 59 2141 60 2021 59 2141 637 41 123 490 2142 61 2115 46 2143 40 41 59 2142 91 2116 93 61 2074 40 2141 41 59 2142 91 2119 93 61 2141 59 2142 91 2120 93 61 45 1501 59 2142 91 2121 93 61 2144 46 2145 59 2142 91 2122 93 61 2144 46 2145 59 2142 91 2135 93 61 2003 46 2146 33 46 2147 59 490 2148 61 2149 40 2011 46 2026 44 2141 41 46 2150 40 41 59 2142 91 2131 93 61 2148 59 490 2151 61 2152 40 2011 46 2026 44 2141 41 46 2150 40 41 59 2142 91 2134 93 61 2151 59 2142 91 2132 93 61 2144 46 2145 59 490 2153 61 2154 40 2011 46 2026 44 2141 41 46 2150 40 41 59 2142 91 2133 93 61 2153 59 2142 91 2123 93 61 2078 40 2141 41 59 490 2155 61 2076 40 2141 41 59 2142 91 2124 93 61 2155 59 2142 91 2136 93 61 2151 631 2074 40 2141 41 59 2142 91 2137 93 61 2151 614 424 59 2142 91 2125 93 61 2144 46 2145 59 490 2156 61 380 59 392 40 2153 631 424 605 2151 631 424 41 123 489 40 490 2014 61 2003 46 2146 46 2157 40 41 41 123 2014 46 2158 61 418 2159 40 41 46 2160 40 648 41 46 2160 40 648 41 46 2160 40 648 41 46 2160 40 648 41 46 2161 40 41 59 2014 46 2162 46 2163 40 648 44 2153 41 59 2014 46 2162 46 2163 40 648 44 2151 41 59 490 2164 61 40 413 41 2014 46 2165 40 41 33 59 2142 91 2127 93 61 2164 631 1500 59 2014 46 2162 46 2166 40 41 59 490 2167 61 648 43 2151 46 2168 40 648 44 648 41 43 648 59 2014 46 2158 61 418 2159 40 41 46 2160 40 36 648 41 46 2160 40 36 648 41 46 2160 40 36 648 41 46 2160 40 36 648 41 46 2160 40 648 41 46 2160 40 648 41 46 2161 40 41 59 490 2169 61 40 461 63 41 2014 46 2165 40 41 59 2142 91 2123 93 61 40 2169 631 424 41 63 2010 46 2078 40 2169 41 58 2010 46 2170 40 2010 46 2171 40 2155 41 41 59 2014 46 2158 61 648 59 2014 46 2162 46 2163 40 648 44 2153 41 59 2156 61 40 413 41 2014 46 2165 40 41 33 614 1500 59 125 392 40 2148 631 424 605 33 2156 41 123 490 2065 61 2172 40 2003 46 2146 46 2026 44 2148 44 2153 44 2151 44 430 490 2173 44 430 490 2174 44 430 490 2175 44 430 490 2176 44 430 490 2177 41 59 2178 46 2179 40 2065 44 2003 46 2146 46 2026 41 59 2142 91 2128 93 61 2176 631 1500 59 2142 91 2126 93 61 2175 614 1500 59 2142 91 2129 93 61 2177 631 1500 59 125 125 2115 46 2180 46 2140 40 2142 41 59 125 450 2115 59 125 125 
71108,C#,"public class EnumToNumberConverterTest
{
    private static readonly ValueConverter<Beatles, int> _enumToNumber
        = new EnumToNumberConverter<Beatles, int>();

    [ConditionalFact]
    public void Can_convert_enums_to_numbers()
    {
        var converter = _enumToNumber.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_enums_to_numbers_object()
    {
        var converter = _enumToNumber.ConvertToProvider;

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default(Beatles)));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_numbers_to_enums()
    {
        var converter = _enumToNumber.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    [ConditionalFact]
    public void Can_convert_numbers_to_enums_object()
    {
        var converter = _enumToNumber.ConvertFromProvider;

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default(Beatles), converter(0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Ordering_preserved_for_enums_to_numbers()
        => ValueConverterTest.OrderingTest(_enumToNumber, Beatles.Ringo, Beatles.George, Beatles.Paul, Beatles.John);

    private static readonly ValueConverter<Beatles, double> _enumToDouble
        = new EnumToNumberConverter<Beatles, double>();

    [ConditionalFact]
    public void Can_convert_enums_to_doubles()
    {
        var converter = _enumToDouble.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_doubles_to_enums()
    {
        var converter = _enumToDouble.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    private static readonly ValueConverter<Beatles, decimal> _enumToDecimal
        = new EnumToNumberConverter<Beatles, decimal>();

    [ConditionalFact]
    public void Can_convert_enums_to_decimals()
    {
        var converter = _enumToDecimal.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_decimals_to_enums()
    {
        var converter = _enumToDecimal.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    private static readonly ValueConverter<Beatles, float> _enumToFloat
        = new EnumToNumberConverter<Beatles, float>();

    [ConditionalFact]
    public void Can_convert_enums_to_floats()
    {
        var converter = _enumToFloat.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_floats_to_enums()
    {
        var converter = _enumToFloat.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    private static readonly ValueConverter<Beatles, byte> _enumToByte
        = new EnumToNumberConverter<Beatles, byte>();

    [ConditionalFact]
    public void Can_convert_enums_to_bytes()
    {
        var converter = _enumToByte.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_bytes_to_enums()
    {
        var converter = _enumToByte.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    private static readonly ValueConverter<Beatles, sbyte> _enumToSByte
        = new EnumToNumberConverter<Beatles, sbyte>();

    [ConditionalFact]
    public void Can_convert_enums_to_sbytes()
    {
        var converter = _enumToSByte.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_sbytes_to_enums()
    {
        var converter = _enumToSByte.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    private static readonly ValueConverter<Beatles, long> _enumToLong
        = new EnumToNumberConverter<Beatles, long>();

    [ConditionalFact]
    public void Can_convert_enums_to_longs()
    {
        var converter = _enumToLong.ConvertToProviderExpression.Compile();

        Assert.Equal(7, converter(Beatles.John));
        Assert.Equal(4, converter(Beatles.Paul));
        Assert.Equal(1, converter(Beatles.George));
        Assert.Equal(-1, converter(Beatles.Ringo));
        Assert.Equal(77, converter((Beatles)77));
        Assert.Equal(0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_longs_to_enums()
    {
        var converter = _enumToLong.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal(Beatles.Ringo, converter(-1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    private static readonly ValueConverter<Beatles, ulong> _enumToULong
        = new EnumToNumberConverter<Beatles, ulong>();

    [ConditionalFact]
    public void Can_convert_enums_to_ulongs()
    {
        var converter = _enumToULong.ConvertToProviderExpression.Compile();

        Assert.Equal((ulong)7, converter(Beatles.John));
        Assert.Equal((ulong)4, converter(Beatles.Paul));
        Assert.Equal((ulong)1, converter(Beatles.George));
        Assert.Equal((ulong)77, converter((Beatles)77));
        Assert.Equal((ulong)0, converter(default));
    }

    [ConditionalFact]
    public void Can_convert_ulongs_to_enums()
    {
        var converter = _enumToULong.ConvertFromProviderExpression.Compile();

        Assert.Equal(Beatles.John, converter(7));
        Assert.Equal(Beatles.Paul, converter(4));
        Assert.Equal(Beatles.George, converter(1));
        Assert.Equal((Beatles)77, converter(77));
        Assert.Equal(default, converter(0));
    }

    [ConditionalFact]
    public void Enum_to_integer_converter_throws_for_bad_types()
    {
        Assert.Equal(
            CoreStrings.ConverterBadType(
                typeof(EnumToNumberConverter<Guid, int>).ShortDisplayName(),
                ""Guid"",
                ""enum types""),
            Assert.Throws<InvalidOperationException>(
                () => new EnumToNumberConverter<Guid, int>()).Message);

        Assert.Equal(
            CoreStrings.ConverterBadType(
                typeof(EnumToNumberConverter<Beatles, Guid>).ShortDisplayName(),
                ""Guid"",
                ""'int', 'long', 'short', 'byte', 'uint', 'ulong', 'ushort', 'sbyte', 'double', 'float', 'decimal'""),
            Assert.Throws<InvalidOperationException>(
                () => new EnumToNumberConverter<Beatles, Guid>()).Message);
    }

    private enum Beatles
    {
        John = 7,
        Paul = 4,
        George = 1,
        Ringo = -1
    }
}",1,439 334 2000 123 437 457 441 2001 60 2002 44 404 62 2003 61 418 2004 60 2002 44 404 62 40 41 59 91 2005 93 439 492 2006 40 41 123 490 2007 61 2003 46 2008 46 2009 40 41 59 2010 46 2011 40 1502 44 2007 40 2002 46 2012 41 41 59 2010 46 2011 40 1502 44 2007 40 2002 46 2013 41 41 59 2010 46 2011 40 1501 44 2007 40 2002 46 2014 41 41 59 2010 46 2011 40 45 1501 44 2007 40 2002 46 2015 41 41 59 2010 46 2011 40 1503 44 2007 40 40 2002 41 1503 41 41 59 2010 46 2011 40 1500 44 2007 40 349 41 41 59 125 91 2005 93 439 492 2016 40 41 123 490 2017 61 2003 46 2018 59 2019 46 2020 40 1502 44 2017 40 2002 46 2021 41 41 59 2019 46 2020 40 1502 44 2017 40 2002 46 2022 41 41 59 2019 46 2020 40 1501 44 2017 40 2002 46 2023 41 41 59 2019 46 2020 40 45 1501 44 2017 40 2002 46 2024 41 41 59 2019 46 2020 40 1503 44 2017 40 40 2002 41 1503 41 41 59 2019 46 2020 40 1500 44 2017 40 349 40 2002 41 41 41 59 2019 46 2025 40 2017 40 424 41 41 59 125 91 2005 93 439 492 2026 40 41 123 490 2027 61 2003 46 2028 46 2029 40 41 59 2030 46 2031 40 2002 46 2032 44 2027 40 1502 41 41 59 2030 46 2031 40 2002 46 2033 44 2027 40 1502 41 41 59 2030 46 2031 40 2002 46 2034 44 2027 40 1501 41 41 59 2030 46 2031 40 2002 46 2035 44 2027 40 45 1501 41 41 59 2030 46 2031 40 40 2002 41 1503 44 2027 40 1503 41 41 59 2030 46 2031 40 349 44 2027 40 1500 41 41 59 125 91 2005 93 439 492 2036 40 41 123 490 2037 61 2003 46 2038 59 2039 46 2040 40 2002 46 2041 44 2037 40 1502 41 41 59 2039 46 2040 40 2002 46 2042 44 2037 40 1502 41 41 59 2039 46 2040 40 2002 46 2043 44 2037 40 1501 41 41 59 2039 46 2040 40 2002 46 2044 44 2037 40 45 1501 41 41 59 2039 46 2040 40 40 2002 41 1503 44 2037 40 1503 41 41 59 2039 46 2040 40 349 40 2002 41 44 2037 40 1500 41 41 59 2039 46 2045 40 2037 40 424 41 41 59 125 91 2005 93 439 492 2046 40 41 619 2047 46 2048 40 2003 44 2002 46 2049 44 2002 46 2050 44 2002 46 2051 44 2002 46 2052 41 59 437 457 441 2001 60 2002 44 356 62 2053 61 418 2004 60 2002 44 356 62 40 41 59 91 2005 93 439 492 2054 40 41 123 490 2055 61 2053 46 2056 46 2057 40 41 59 2058 46 2059 40 1502 44 2055 40 2002 46 2052 41 41 59 2058 46 2059 40 1502 44 2055 40 2002 46 2051 41 41 59 2058 46 2059 40 1501 44 2055 40 2002 46 2050 41 41 59 2058 46 2059 40 45 1501 44 2055 40 2002 46 2049 41 41 59 2058 46 2059 40 1503 44 2055 40 40 2002 41 1503 41 41 59 2058 46 2059 40 1500 44 2055 40 349 41 41 59 125 91 2005 93 439 492 2060 40 41 123 490 2061 61 2053 46 2062 46 2063 40 41 59 2064 46 2065 40 2002 46 2052 44 2061 40 1502 41 41 59 2064 46 2065 40 2002 46 2051 44 2061 40 1502 41 41 59 2064 46 2065 40 2002 46 2050 44 2061 40 1501 41 41 59 2064 46 2065 40 2002 46 2049 44 2061 40 45 1501 41 41 59 2064 46 2065 40 40 2002 41 1503 44 2061 40 1503 41 41 59 2064 46 2065 40 349 44 2061 40 1500 41 41 59 125 437 457 441 2001 60 2002 44 345 62 2066 61 418 2004 60 2002 44 345 62 40 41 59 91 2005 93 439 492 2067 40 41 123 490 2068 61 2066 46 2069 46 2070 40 41 59 2071 46 2072 40 1502 44 2068 40 2002 46 2052 41 41 59 2071 46 2072 40 1502 44 2068 40 2002 46 2051 41 41 59 2071 46 2072 40 1501 44 2068 40 2002 46 2050 41 41 59 2071 46 2072 40 45 1501 44 2068 40 2002 46 2049 41 41 59 2071 46 2072 40 1503 44 2068 40 40 2002 41 1503 41 41 59 2071 46 2072 40 1500 44 2068 40 349 41 41 59 125 91 2005 93 439 492 2073 40 41 123 490 2074 61 2066 46 2075 46 2076 40 41 59 2077 46 2078 40 2002 46 2052 44 2074 40 1502 41 41 59 2077 46 2078 40 2002 46 2051 44 2074 40 1502 41 41 59 2077 46 2078 40 2002 46 2050 44 2074 40 1501 41 41 59 2077 46 2078 40 2002 46 2049 44 2074 40 45 1501 41 41 59 2077 46 2078 40 40 2002 41 1503 44 2074 40 1503 41 41 59 2077 46 2078 40 349 44 2074 40 1500 41 41 59 125 437 457 441 2001 60 2002 44 384 62 2079 61 418 2004 60 2002 44 384 62 40 41 59 91 2005 93 439 492 2080 40 41 123 490 2081 61 2079 46 2082 46 2083 40 41 59 2084 46 2085 40 1502 44 2081 40 2002 46 2052 41 41 59 2084 46 2085 40 1502 44 2081 40 2002 46 2051 41 41 59 2084 46 2085 40 1501 44 2081 40 2002 46 2050 41 41 59 2084 46 2085 40 45 1501 44 2081 40 2002 46 2049 41 41 59 2084 46 2085 40 1503 44 2081 40 40 2002 41 1503 41 41 59 2084 46 2085 40 1500 44 2081 40 349 41 41 59 125 91 2005 93 439 492 2086 40 41 123 490 2087 61 2079 46 2088 46 2089 40 41 59 2090 46 2091 40 2002 46 2052 44 2087 40 1502 41 41 59 2090 46 2091 40 2002 46 2051 44 2087 40 1502 41 41 59 2090 46 2091 40 2002 46 2050 44 2087 40 1501 41 41 59 2090 46 2091 40 2002 46 2049 44 2087 40 45 1501 41 41 59 2090 46 2091 40 40 2002 41 1503 44 2087 40 1503 41 41 59 2090 46 2091 40 349 44 2087 40 1500 41 41 59 125 437 457 441 2001 60 2002 44 326 62 2092 61 418 2004 60 2002 44 326 62 40 41 59 91 2005 93 439 492 2093 40 41 123 490 2094 61 2092 46 2095 46 2096 40 41 59 2097 46 2098 40 1502 44 2094 40 2002 46 2052 41 41 59 2097 46 2098 40 1502 44 2094 40 2002 46 2051 41 41 59 2097 46 2098 40 1501 44 2094 40 2002 46 2050 41 41 59 2097 46 2098 40 1503 44 2094 40 40 2002 41 1503 41 41 59 2097 46 2098 40 1500 44 2094 40 349 41 41 59 125 91 2005 93 439 492 2099 40 41 123 490 2100 61 2092 46 2101 46 2102 40 41 59 2103 46 2104 40 2002 46 2052 44 2100 40 1502 41 41 59 2103 46 2104 40 2002 46 2051 44 2100 40 1502 41 41 59 2103 46 2104 40 2002 46 2050 44 2100 40 1501 41 41 59 2103 46 2104 40 40 2002 41 1503 44 2100 40 1503 41 41 59 2103 46 2104 40 349 44 2100 40 1500 41 41 59 125 437 457 441 2001 60 2002 44 451 62 2105 61 418 2004 60 2002 44 451 62 40 41 59 91 2005 93 439 492 2106 40 41 123 490 2107 61 2105 46 2108 46 2109 40 41 59 2110 46 2111 40 1502 44 2107 40 2002 46 2052 41 41 59 2110 46 2111 40 1502 44 2107 40 2002 46 2051 41 41 59 2110 46 2111 40 1501 44 2107 40 2002 46 2050 41 41 59 2110 46 2111 40 45 1501 44 2107 40 2002 46 2049 41 41 59 2110 46 2111 40 1503 44 2107 40 40 2002 41 1503 41 41 59 2110 46 2111 40 1500 44 2107 40 349 41 41 59 125 91 2005 93 439 492 2112 40 41 123 490 2113 61 2105 46 2114 46 2115 40 41 59 2116 46 2117 40 2002 46 2052 44 2113 40 1502 41 41 59 2116 46 2117 40 2002 46 2051 44 2113 40 1502 41 41 59 2116 46 2117 40 2002 46 2050 44 2113 40 1501 41 41 59 2116 46 2117 40 2002 46 2049 44 2113 40 45 1501 41 41 59 2116 46 2117 40 40 2002 41 1503 44 2113 40 1503 41 41 59 2116 46 2117 40 349 44 2113 40 1500 41 41 59 125 437 457 441 2001 60 2002 44 413 62 2118 61 418 2004 60 2002 44 413 62 40 41 59 91 2005 93 439 492 2119 40 41 123 490 2120 61 2118 46 2121 46 2122 40 41 59 2123 46 2124 40 1502 44 2120 40 2002 46 2052 41 41 59 2123 46 2124 40 1502 44 2120 40 2002 46 2051 41 41 59 2123 46 2124 40 1501 44 2120 40 2002 46 2050 41 41 59 2123 46 2124 40 45 1501 44 2120 40 2002 46 2049 41 41 59 2123 46 2124 40 1503 44 2120 40 40 2002 41 1503 41 41 59 2123 46 2124 40 1500 44 2120 40 349 41 41 59 125 91 2005 93 439 492 2125 40 41 123 490 2126 61 2118 46 2127 46 2128 40 41 59 2129 46 2130 40 2002 46 2052 44 2126 40 1502 41 41 59 2129 46 2130 40 2002 46 2051 44 2126 40 1502 41 41 59 2129 46 2130 40 2002 46 2050 44 2126 40 1501 41 41 59 2129 46 2130 40 2002 46 2049 44 2126 40 45 1501 41 41 59 2129 46 2130 40 40 2002 41 1503 44 2126 40 1503 41 41 59 2129 46 2130 40 349 44 2126 40 1500 41 41 59 125 437 457 441 2001 60 2002 44 480 62 2131 61 418 2004 60 2002 44 480 62 40 41 59 91 2005 93 439 492 2132 40 41 123 490 2133 61 2131 46 2134 46 2135 40 41 59 2136 46 2137 40 40 480 41 1502 44 2133 40 2002 46 2052 41 41 59 2136 46 2137 40 40 480 41 1502 44 2133 40 2002 46 2051 41 41 59 2136 46 2137 40 40 480 41 1501 44 2133 40 2002 46 2050 41 41 59 2136 46 2137 40 40 480 41 1503 44 2133 40 40 2002 41 1503 41 41 59 2136 46 2137 40 40 480 41 1500 44 2133 40 349 41 41 59 125 91 2005 93 439 492 2138 40 41 123 490 2139 61 2131 46 2140 46 2141 40 41 59 2142 46 2143 40 2002 46 2052 44 2139 40 1502 41 41 59 2142 46 2143 40 2002 46 2051 44 2139 40 1502 41 41 59 2142 46 2143 40 2002 46 2050 44 2139 40 1501 41 41 59 2142 46 2143 40 40 2002 41 1503 44 2139 40 1503 41 41 59 2142 46 2143 40 349 44 2139 40 1500 41 41 59 125 91 2005 93 439 492 2144 40 41 123 2145 46 2146 40 2147 46 2148 40 478 40 2004 60 2149 44 404 62 41 46 2150 40 41 44 648 44 648 41 44 2145 46 2151 60 2152 62 40 40 41 619 418 2004 60 2149 44 404 62 40 41 41 46 2153 41 59 2145 46 2146 40 2147 46 2148 40 478 40 2004 60 2002 44 2149 62 41 46 2150 40 41 44 648 44 648 41 44 2145 46 2151 60 2152 62 40 40 41 619 418 2004 60 2002 44 2149 62 40 41 41 46 2153 41 59 125 437 370 2002 123 2052 61 1502 44 2051 61 1502 44 2050 61 1501 44 2049 61 45 1501 125 125 
70498,C#,"public class EntityFinder<TEntity> : IEntityFinder<TEntity>
    where TEntity : class
{
    private readonly IStateManager _stateManager;
    private readonly IDbSetSource _setSource;
    private readonly IDbSetCache _setCache;
    private readonly IEntityType _entityType;
    private readonly IQueryable<TEntity> _queryRoot;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public EntityFinder(
        IStateManager stateManager,
        IDbSetSource setSource,
        IDbSetCache setCache,
        IEntityType entityType)
    {
        _stateManager = stateManager;
        _setSource = setSource;
        _setCache = setCache;
        _entityType = entityType;
        _queryRoot = (IQueryable<TEntity>)BuildQueryRoot(entityType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual TEntity? Find(object?[]? keyValues)
        => keyValues == null || keyValues.Any(v => v == null)
            ? null
            : (FindTracked(keyValues!, out var keyProperties)
                ?? _queryRoot.FirstOrDefault(BuildLambda(keyProperties, new ValueBuffer(keyValues))));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    object? IEntityFinder.Find(object?[]? keyValues)
        => Find(keyValues);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ValueTask<TEntity?> FindAsync(object?[]? keyValues, CancellationToken cancellationToken = default)
    {
        if (keyValues == null
            || keyValues.Any(v => v == null))
        {
            return default;
        }

        var tracked = FindTracked(keyValues!, out var keyProperties);
        return tracked != null
            ? new ValueTask<TEntity?>(tracked)
            : new ValueTask<TEntity?>(
                _queryRoot.FirstOrDefaultAsync(BuildLambda(keyProperties, new ValueBuffer(keyValues)), cancellationToken));
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    ValueTask<object?> IEntityFinder.FindAsync(object?[]? keyValues, CancellationToken cancellationToken)
    {
        if (keyValues == null
            || keyValues.Any(v => v == null))
        {
            return default;
        }

        var tracked = FindTracked(keyValues!, out var keyProperties);
        return tracked != null
            ? new ValueTask<object?>(tracked)
            : new ValueTask<object?>(
                _queryRoot.FirstOrDefaultAsync(
                    BuildObjectLambda(keyProperties, new ValueBuffer(keyValues)), cancellationToken));
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void Load(INavigation navigation, InternalEntityEntry entry)
    {
        if (entry.EntityState == EntityState.Detached)
        {
            throw new InvalidOperationException(CoreStrings.CannotLoadDetached(navigation.Name, entry.EntityType.DisplayName()));
        }

        var keyValues = GetLoadValues(navigation, entry);
        // Short-circuit for any null key values for perf and because of #6129
        if (keyValues != null)
        {
            Query(navigation, keyValues).Load();
        }

        entry.SetIsLoaded(navigation);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual async Task LoadAsync(
        INavigation navigation,
        InternalEntityEntry entry,
        CancellationToken cancellationToken = default)
    {
        if (entry.EntityState == EntityState.Detached)
        {
            throw new InvalidOperationException(CoreStrings.CannotLoadDetached(navigation.Name, entry.EntityType.DisplayName()));
        }

        // Short-circuit for any null key values for perf and because of #6129
        var keyValues = GetLoadValues(navigation, entry);
        if (keyValues != null)
        {
            await Query(navigation, keyValues).LoadAsync(cancellationToken)
                .ConfigureAwait(false);
        }

        entry.SetIsLoaded(navigation);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IQueryable<TEntity> Query(INavigation navigation, InternalEntityEntry entry)
    {
        if (entry.EntityState == EntityState.Detached)
        {
            throw new InvalidOperationException(CoreStrings.CannotLoadDetached(navigation.Name, entry.EntityType.DisplayName()));
        }

        var keyValues = GetLoadValues(navigation, entry);
        // Short-circuit for any null key values for perf and because of #6129
        if (keyValues == null)
        {
            // Creates an empty Queryable that works with Async. Has to be an EF query because it
            // could be used in a composition.
            return _queryRoot.Where(e => false);
        }

        return Query(navigation, keyValues);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual object[]? GetDatabaseValues(InternalEntityEntry entry)
        => GetDatabaseValuesQuery(entry)?.FirstOrDefault();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Task<object[]?> GetDatabaseValuesAsync(
        InternalEntityEntry entry,
        CancellationToken cancellationToken = default)
        => GetDatabaseValuesQuery(entry)?.FirstOrDefaultAsync(cancellationToken) ?? Task.FromResult((object[]?)null);

    private IQueryable<object[]>? GetDatabaseValuesQuery(InternalEntityEntry entry)
    {
        var entityType = entry.EntityType;
        var properties = entityType.FindPrimaryKey()!.Properties;

        var keyValues = new object[properties.Count];
        for (var i = 0; i < keyValues.Length; i++)
        {
            var keyValue = entry[properties[i]];
            if (keyValue == null)
            {
                return null;
            }

            keyValues[i] = keyValue;
        }

        return _queryRoot.AsNoTracking().IgnoreQueryFilters()
            .Where(BuildObjectLambda(properties, new ValueBuffer(keyValues)))
            .Select(BuildProjection(entityType));
    }

    private IQueryable<TEntity> Query(INavigation navigation, object[] keyValues)
        => _queryRoot.Where(BuildLambda(GetLoadProperties(navigation), new ValueBuffer(keyValues))).AsTracking();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IQueryable IEntityFinder.Query(INavigation navigation, InternalEntityEntry entry)
        => Query(navigation, entry);

    private static object[]? GetLoadValues(INavigation navigation, InternalEntityEntry entry)
    {
        var properties = navigation.IsOnDependent
            ? navigation.ForeignKey.Properties
            : navigation.ForeignKey.PrincipalKey.Properties;

        var values = new object[properties.Count];

        for (var i = 0; i < values.Length; i++)
        {
            var value = entry[properties[i]];
            if (value == null)
            {
                return null;
            }

            values[i] = value;
        }

        return values;
    }

    private static IReadOnlyList<IProperty> GetLoadProperties(INavigation navigation)
        => navigation.IsOnDependent
            ? navigation.ForeignKey.PrincipalKey.Properties
            : navigation.ForeignKey.Properties;

    private TEntity? FindTracked(object[] keyValues, out IReadOnlyList<IProperty> keyProperties)
    {
        var key = _entityType.FindPrimaryKey()!;
        keyProperties = key.Properties;

        if (keyProperties.Count != keyValues.Length)
        {
            if (keyProperties.Count == 1)
            {
                throw new ArgumentException(
                    CoreStrings.FindNotCompositeKey(typeof(TEntity).ShortDisplayName(), keyValues.Length));
            }

            throw new ArgumentException(
                CoreStrings.FindValueCountMismatch(typeof(TEntity).ShortDisplayName(), keyProperties.Count, keyValues.Length));
        }

        for (var i = 0; i < keyValues.Length; i++)
        {
            var valueType = keyValues[i].GetType();
            var propertyType = keyProperties[i].ClrType;
            if (valueType != propertyType.UnwrapNullableType())
            {
                throw new ArgumentException(
                    CoreStrings.FindValueTypeMismatch(
                        i, typeof(TEntity).ShortDisplayName(), valueType.ShortDisplayName(), propertyType.ShortDisplayName()));
            }
        }

        return _stateManager.TryGetEntry(key, keyValues)?.Entity as TEntity;
    }

    private static Expression<Func<TEntity, bool>> BuildLambda(IReadOnlyList<IProperty> keyProperties, ValueBuffer keyValues)
    {
        var entityParameter = Expression.Parameter(typeof(TEntity), ""e"");

        return Expression.Lambda<Func<TEntity, bool>>(
            ExpressionExtensions.BuildPredicate(keyProperties, keyValues, entityParameter), entityParameter);
    }

    private static Expression<Func<object, bool>> BuildObjectLambda(IReadOnlyList<IProperty> keyProperties, ValueBuffer keyValues)
    {
        var entityParameter = Expression.Parameter(typeof(object), ""e"");

        return Expression.Lambda<Func<object, bool>>(
            ExpressionExtensions.BuildPredicate(keyProperties, keyValues, entityParameter), entityParameter);
    }

    private IQueryable BuildQueryRoot(IEntityType entityType)
        => entityType.FindOwnership() is IForeignKey ownership
            ? BuildQueryRoot(ownership.PrincipalEntityType, entityType, ownership.PrincipalToDependent!.Name)
            : entityType.HasSharedClrType
                ? (IQueryable)_setCache.GetOrAddSet(_setSource, entityType.Name, entityType.ClrType)
                : (IQueryable)_setCache.GetOrAddSet(_setSource, entityType.ClrType);

    private IQueryable BuildQueryRoot(IEntityType ownerEntityType, IEntityType entityType, string navigationName)
    {
        var queryRoot = BuildQueryRoot(ownerEntityType);
        var collectionNavigation = ownerEntityType.FindNavigation(navigationName)!.IsCollection;

        return (IQueryable)(collectionNavigation ? SelectManyMethod : SelectMethod)
            .MakeGenericMethod(ownerEntityType.ClrType, entityType.ClrType)
            .Invoke(null, new object[] { queryRoot, navigationName })!;
    }

    private static readonly MethodInfo SelectMethod
        = typeof(EntityFinder<TEntity>).GetTypeInfo().GetDeclaredMethods(nameof(Select)).Single(mi => mi.IsGenericMethodDefinition);

    private static IQueryable<TResult> Select<TSource, TResult>(
        IQueryable<TSource> source,
        string propertyName)
        where TResult : class
        where TSource : class
    {
        var parameter = Expression.Parameter(typeof(TSource), ""e"");
        return source.Select(
            Expression.Lambda<Func<TSource, TResult>>(
                Expression.MakeMemberAccess(parameter, typeof(TSource).GetAnyProperty(propertyName)!),
                parameter));
    }

    private static readonly MethodInfo SelectManyMethod
        = typeof(EntityFinder<TEntity>).GetTypeInfo().GetDeclaredMethods(nameof(SelectMany)).Single(mi => mi.IsGenericMethodDefinition);

    private static IQueryable<TResult> SelectMany<TSource, TResult>(
        IQueryable<TSource> source,
        string propertyName)
        where TResult : class
        where TSource : class
    {
        var parameter = Expression.Parameter(typeof(TSource), ""e"");
        return source.SelectMany(
            Expression.Lambda<Func<TSource, IEnumerable<TResult>>>(
                Expression.MakeMemberAccess(parameter, typeof(TSource).GetAnyProperty(propertyName)!),
                parameter));
    }

    private static Expression<Func<object, object[]>> BuildProjection(IEntityType entityType)
    {
        var entityParameter = Expression.Parameter(typeof(object), ""e"");

        var projections = new List<Expression>();
        foreach (var property in entityType.GetProperties())
        {
            projections.Add(
                Expression.Convert(
                    Expression.Convert(
                        Expression.Call(
                            EF.PropertyMethod.MakeGenericMethod(property.ClrType),
                            entityParameter,
                            Expression.Constant(property.Name, typeof(string))),
                        property.ClrType),
                    typeof(object)));
        }

        return Expression.Lambda<Func<object, object[]>>(
            Expression.NewArrayInit(typeof(object), projections),
            entityParameter);
    }
}",1,439 334 2000 60 2001 62 58 2002 60 2001 62 2003 2001 58 334 123 437 441 2004 2005 59 437 441 2006 2007 59 437 441 2008 2009 59 437 441 2010 2011 59 437 441 2012 60 2001 62 2013 59 612 439 2000 40 2004 2014 44 2006 2015 44 2008 2016 44 2010 2017 41 123 2005 61 2014 59 2007 61 2015 59 2009 61 2016 59 2011 61 2017 59 2013 61 40 2012 60 2001 62 41 2018 40 2017 41 59 125 612 439 491 2001 63 2019 40 426 63 91 93 63 2020 41 619 2020 614 424 606 2020 46 2021 40 2022 619 2022 614 424 41 63 424 58 40 2023 40 2020 33 44 430 490 2024 41 633 2013 46 2025 40 2026 40 2024 44 418 2027 40 2020 41 41 41 41 59 612 426 63 2002 46 2019 40 426 63 91 93 63 2020 41 619 2019 40 2020 41 59 612 439 491 2028 60 2001 63 62 2029 40 426 63 91 93 63 2020 44 2030 2031 61 349 41 123 392 40 2020 614 424 606 2020 46 2021 40 2022 619 2022 614 424 41 41 123 450 349 59 125 490 2032 61 2023 40 2020 33 44 430 490 2024 41 59 450 2032 631 424 63 418 2028 60 2001 63 62 40 2032 41 58 418 2028 60 2001 63 62 40 2013 46 2033 40 2026 40 2024 44 418 2027 40 2020 41 41 44 2031 41 41 59 125 612 2028 60 426 63 62 2002 46 2029 40 426 63 91 93 63 2020 44 2030 2031 41 123 392 40 2020 614 424 606 2020 46 2021 40 2022 619 2022 614 424 41 41 123 450 349 59 125 490 2034 61 2023 40 2020 33 44 430 490 2024 41 59 450 2034 631 424 63 418 2028 60 426 63 62 40 2034 41 58 418 2028 60 426 63 62 40 2013 46 2035 40 2036 40 2024 44 418 2027 40 2020 41 41 44 2031 41 41 59 125 612 439 491 492 2037 40 2038 2039 44 2040 2041 41 123 392 40 2041 46 2042 614 2042 46 2043 41 123 469 418 2044 40 2045 46 2046 40 2039 46 2047 44 2041 46 2048 46 2049 40 41 41 41 59 125 490 2020 61 2050 40 2039 44 2041 41 59 621 392 40 2020 631 424 41 123 2051 40 2039 44 2020 41 46 2037 40 41 59 125 2041 46 2052 40 2039 41 59 125 612 439 491 314 2053 2054 40 2038 2039 44 2040 2041 44 2030 2031 61 349 41 123 392 40 2041 46 2055 614 2055 46 2056 41 123 469 418 2057 40 2058 46 2059 40 2039 46 2060 44 2041 46 2061 46 2062 40 41 41 41 59 125 621 490 2020 61 2063 40 2039 44 2041 41 59 392 40 2020 631 424 41 123 319 2064 40 2039 44 2020 41 46 2054 40 2031 41 46 2065 40 380 41 59 125 2041 46 2066 40 2039 41 59 125 612 439 491 2012 60 2001 62 2067 40 2038 2039 44 2040 2041 41 123 392 40 2041 46 2068 614 2068 46 2069 41 123 469 418 2070 40 2071 46 2072 40 2039 46 2073 44 2041 46 2074 46 2075 40 41 41 41 59 125 490 2020 61 2076 40 2039 44 2041 41 59 621 392 40 2020 614 424 41 123 621 621 450 2013 46 2077 40 2078 619 380 41 59 125 450 2067 40 2039 44 2020 41 59 125 612 439 491 426 91 93 63 2079 40 2040 2041 41 619 2080 40 2041 41 634 2025 40 41 59 612 439 491 2053 60 426 91 93 63 62 2081 40 2040 2041 44 2030 2031 61 349 41 619 2080 40 2041 41 634 2082 40 2031 41 633 2053 46 2083 40 40 426 91 93 63 41 424 41 59 437 2012 60 426 91 93 62 63 2080 40 2040 2041 41 123 490 2017 61 2041 46 2084 59 490 2085 61 2017 46 2086 40 41 33 46 2087 59 490 2020 61 418 426 91 2085 46 2088 93 59 385 40 490 2089 61 1500 59 2089 60 2020 46 2090 59 2089 637 41 123 490 2091 61 2041 91 2085 91 2089 93 93 59 392 40 2091 614 424 41 123 450 424 59 125 2020 91 2089 93 61 2091 59 125 450 2013 46 2092 40 41 46 2093 40 41 46 2094 40 2095 40 2085 44 418 2027 40 2020 41 41 41 46 2096 40 2097 40 2017 41 41 59 125 437 2012 60 2001 62 2067 40 2038 2039 44 426 91 93 2020 41 619 2013 46 2098 40 2026 40 2099 40 2039 41 44 418 2027 40 2020 41 41 41 46 2100 40 41 59 612 2012 2002 46 2067 40 2038 2039 44 2040 2041 41 619 2067 40 2039 44 2041 41 59 437 457 426 91 93 63 2101 40 2038 2039 44 2040 2041 41 123 490 2102 61 2039 46 2103 63 2039 46 2104 46 2105 58 2039 46 2104 46 2106 46 2105 59 490 2107 61 418 426 91 2102 46 2108 93 59 385 40 490 2109 61 1500 59 2109 60 2107 46 2110 59 2109 637 41 123 490 2111 61 2041 91 2102 91 2109 93 93 59 392 40 2111 614 424 41 123 450 424 59 125 2107 91 2109 93 61 2111 59 125 450 2107 59 125 437 457 2112 60 2113 62 2099 40 2038 2039 41 619 2039 46 2114 63 2039 46 2115 46 2116 46 2117 58 2039 46 2115 46 2117 59 437 2001 63 2023 40 426 91 93 2020 44 430 2112 60 2113 62 2024 41 123 490 2118 61 2011 46 2119 40 41 33 59 2024 61 2118 46 2117 59 392 40 2024 46 2120 631 2020 46 2121 41 123 392 40 2024 46 2120 614 1501 41 123 469 418 2122 40 2123 46 2124 40 478 40 2001 41 46 2125 40 41 44 2020 46 2121 41 41 59 125 469 418 2126 40 2127 46 2128 40 478 40 2001 41 46 2129 40 41 44 2024 46 2120 44 2020 46 2121 41 41 59 125 385 40 490 2130 61 1500 59 2130 60 2020 46 2121 59 2130 637 41 123 490 2131 61 2020 91 2130 93 46 2132 40 41 59 490 2133 61 2024 91 2130 93 46 2134 59 392 40 2131 631 2133 46 2135 40 41 41 123 469 418 2136 40 2137 46 2138 40 2130 44 478 40 2001 41 46 2139 40 41 44 2131 46 2139 40 41 44 2133 46 2139 40 41 41 41 59 125 125 450 2005 46 2140 40 2118 44 2020 41 634 2141 311 2001 59 125 437 457 2142 60 2143 60 2001 44 323 640 2026 40 2112 60 2113 62 2024 44 2027 2020 41 123 490 2144 61 2142 46 2145 40 478 40 2001 41 44 648 41 59 450 2142 46 2146 60 2143 60 2001 44 323 640 40 2147 46 2148 40 2024 44 2020 44 2144 41 44 2144 41 59 125 437 457 2142 60 2143 60 426 44 323 640 2149 40 2112 60 2113 62 2024 44 2027 2020 41 123 490 2150 61 2142 46 2151 40 478 40 426 41 44 648 41 59 450 2142 46 2152 60 2143 60 426 44 323 640 40 2153 46 2154 40 2024 44 2020 44 2150 41 44 2150 41 59 125 437 2012 2155 40 2010 2017 41 619 2017 46 2156 40 41 407 2157 2158 63 2155 40 2158 46 2159 44 2017 44 2158 46 2160 33 46 2161 41 58 2017 46 2162 63 40 2012 41 2009 46 2163 40 2007 44 2017 46 2161 44 2017 46 2164 41 58 40 2012 41 2009 46 2163 40 2007 44 2017 46 2164 41 59 437 2012 2155 40 2010 2165 44 2010 2017 44 461 2166 41 123 490 2167 61 2155 40 2165 41 59 490 2168 61 2165 46 2169 40 2166 41 33 46 2170 59 450 40 2012 41 40 2168 63 2171 58 2172 41 46 2173 40 2165 46 2164 44 2017 46 2164 41 46 2174 40 424 44 418 426 91 93 123 2167 44 2166 125 41 33 59 125 437 457 441 2175 2176 61 478 40 2000 60 2001 62 41 46 2177 40 41 46 2178 40 2179 40 2180 41 41 46 2181 40 2182 619 2182 46 2183 41 59 437 457 2012 60 2184 62 2180 60 2185 44 2184 62 40 2012 60 2185 62 2186 44 461 2187 41 2003 2184 58 334 2003 2185 58 334 123 490 2188 61 2142 46 2189 40 478 40 2185 41 44 648 41 59 450 2186 46 2180 40 2142 46 2190 60 2143 60 2185 44 2184 640 40 2142 46 2191 40 2188 44 478 40 2185 41 46 2192 40 2187 41 33 41 44 2188 41 41 59 125 437 457 441 2175 2193 61 478 40 2000 60 2001 62 41 46 2177 40 41 46 2178 40 2179 40 2194 41 41 46 2181 40 2182 619 2182 46 2183 41 59 437 457 2012 60 2184 62 2194 60 2185 44 2184 62 40 2012 60 2185 62 2186 44 461 2187 41 2003 2184 58 334 2003 2185 58 334 123 490 2195 61 2142 46 2196 40 478 40 2185 41 44 648 41 59 450 2186 46 2194 40 2142 46 2197 60 2143 60 2185 44 2198 60 2184 640 62 40 2142 46 2199 40 2195 44 478 40 2185 41 46 2200 40 2187 41 33 41 44 2195 41 41 59 125 437 457 2142 60 2143 60 426 44 426 91 93 640 2201 40 2010 2017 41 123 490 2202 61 2142 46 2203 40 478 40 426 41 44 648 41 59 490 2204 61 418 2205 60 2142 62 40 41 59 386 40 490 2206 398 2017 46 2207 40 41 41 123 2204 46 2208 40 2142 46 2209 40 2142 46 2209 40 2142 46 2210 40 2211 46 2212 46 2213 40 2206 46 2164 41 44 2202 44 2142 46 2214 40 2206 46 2161 44 478 40 461 41 41 41 44 2206 46 2164 41 44 478 40 426 41 41 41 59 125 450 2142 46 2215 60 2143 60 426 44 426 91 93 640 40 2142 46 2216 40 478 40 426 41 44 2204 41 44 2202 41 59 125 125 
76893,C#,"    public class HdHomerunHost : BaseTunerHost, ITunerHost, IConfigurableTunerHost
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly IServerApplicationHost _appHost;
        private readonly ISocketFactory _socketFactory;
        private readonly IStreamHelper _streamHelper;

        private readonly JsonSerializerOptions _jsonOptions;

        private readonly Dictionary<string, DiscoverResponse> _modelCache = new Dictionary<string, DiscoverResponse>();

        public HdHomerunHost(
            IServerConfigurationManager config,
            ILogger<HdHomerunHost> logger,
            IFileSystem fileSystem,
            IHttpClientFactory httpClientFactory,
            IServerApplicationHost appHost,
            ISocketFactory socketFactory,
            IStreamHelper streamHelper,
            IMemoryCache memoryCache)
            : base(config, logger, fileSystem, memoryCache)
        {
            _httpClientFactory = httpClientFactory;
            _appHost = appHost;
            _socketFactory = socketFactory;
            _streamHelper = streamHelper;

            _jsonOptions = JsonDefaults.Options;
        }

        public string Name => ""HD Homerun"";

        public override string Type => ""hdhomerun"";

        protected override string ChannelIdPrefix => ""hdhr_"";

        private string GetChannelId(Channels i)
            => ChannelIdPrefix + i.GuideNumber;

        internal async Task<List<Channels>> GetLineup(TunerHostInfo info, CancellationToken cancellationToken)
        {
            var model = await GetModelInfo(info, false, cancellationToken).ConfigureAwait(false);

            using var response = await _httpClientFactory.CreateClient(NamedClient.Default).GetAsync(model.LineupURL ?? model.BaseURL + ""/lineup.json"", HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            await using var stream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false);
            var lineup = await JsonSerializer.DeserializeAsync<List<Channels>>(stream, _jsonOptions, cancellationToken)
                .ConfigureAwait(false) ?? new List<Channels>();

            if (info.ImportFavoritesOnly)
            {
                lineup = lineup.Where(i => i.Favorite).ToList();
            }

            return lineup.Where(i => !i.DRM).ToList();
        }

        protected override async Task<List<ChannelInfo>> GetChannelsInternal(TunerHostInfo tuner, CancellationToken cancellationToken)
        {
            var lineup = await GetLineup(tuner, cancellationToken).ConfigureAwait(false);

            return lineup.Select(i => new HdHomerunChannelInfo
            {
                Name = i.GuideName,
                Number = i.GuideNumber,
                Id = GetChannelId(i),
                IsFavorite = i.Favorite,
                TunerHostId = tuner.Id,
                IsHD = i.HD,
                AudioCodec = i.AudioCodec,
                VideoCodec = i.VideoCodec,
                ChannelType = ChannelType.TV,
                IsLegacyTuner = (i.URL ?? string.Empty).StartsWith(""hdhomerun"", StringComparison.OrdinalIgnoreCase),
                Path = i.URL
            }).Cast<ChannelInfo>().ToList();
        }

        internal async Task<DiscoverResponse> GetModelInfo(TunerHostInfo info, bool throwAllExceptions, CancellationToken cancellationToken)
        {
            var cacheKey = info.Id;

            lock (_modelCache)
            {
                if (!string.IsNullOrEmpty(cacheKey))
                {
                    if (_modelCache.TryGetValue(cacheKey, out DiscoverResponse response))
                    {
                        return response;
                    }
                }
            }

            try
            {
                using var response = await _httpClientFactory.CreateClient(NamedClient.Default)
                    .GetAsync(GetApiUrl(info) + ""/discover.json"", HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                    .ConfigureAwait(false);
                response.EnsureSuccessStatusCode();
                await using var stream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false);
                var discoverResponse = await JsonSerializer.DeserializeAsync<DiscoverResponse>(stream, _jsonOptions, cancellationToken)
                    .ConfigureAwait(false);

                if (!string.IsNullOrEmpty(cacheKey))
                {
                    lock (_modelCache)
                    {
                        _modelCache[cacheKey] = discoverResponse;
                    }
                }

                return discoverResponse;
            }
            catch (HttpRequestException ex)
            {
                if (!throwAllExceptions && ex.StatusCode.HasValue && ex.StatusCode.Value == HttpStatusCode.NotFound)
                {
                    const string DefaultValue = ""HDHR"";
                    var response = new DiscoverResponse
                    {
                        ModelNumber = DefaultValue
                    };
                    if (!string.IsNullOrEmpty(cacheKey))
                    {
                        // HDHR4 doesn't have this api
                        lock (_modelCache)
                        {
                            _modelCache[cacheKey] = response;
                        }
                    }

                    return response;
                }

                throw;
            }
        }

        private async Task<List<LiveTvTunerInfo>> GetTunerInfosHttp(TunerHostInfo info, CancellationToken cancellationToken)
        {
            var model = await GetModelInfo(info, false, cancellationToken).ConfigureAwait(false);

            using var response = await _httpClientFactory.CreateClient(NamedClient.Default)
                .GetAsync(string.Format(CultureInfo.InvariantCulture, ""{0}/tuners.html"", GetApiUrl(info)), HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                .ConfigureAwait(false);
            await using var stream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false);
            using var sr = new StreamReader(stream, System.Text.Encoding.UTF8);
            var tuners = new List<LiveTvTunerInfo>();
            await foreach (var line in sr.ReadAllLinesAsync().ConfigureAwait(false))
            {
                string stripedLine = StripXML(line);
                if (stripedLine.Contains(""Channel"", StringComparison.Ordinal))
                {
                    LiveTvTunerStatus status;
                    var index = stripedLine.IndexOf(""Channel"", StringComparison.OrdinalIgnoreCase);
                    var name = stripedLine.Substring(0, index - 1);
                    var currentChannel = stripedLine.Substring(index + 7);
                    if (string.Equals(currentChannel, ""none"", StringComparison.Ordinal))
                    {
                        status = LiveTvTunerStatus.LiveTv;
                    }
                    else
                    {
                        status = LiveTvTunerStatus.Available;
                    }

                    tuners.Add(new LiveTvTunerInfo
                    {
                        Name = name,
                        SourceType = string.IsNullOrWhiteSpace(model.ModelNumber) ? Name : model.ModelNumber,
                        ProgramName = currentChannel,
                        Status = status
                    });
                }
            }

            return tuners;
        }

        private static string StripXML(string source)
        {
            if (string.IsNullOrEmpty(source))
            {
                return string.Empty;
            }

            char[] buffer = new char[source.Length];
            int bufferIndex = 0;
            bool inside = false;

            for (int i = 0; i < source.Length; i++)
            {
                char let = source[i];
                if (let == '<')
                {
                    inside = true;
                    continue;
                }

                if (let == '>')
                {
                    inside = false;
                    continue;
                }

                if (!inside)
                {
                    buffer[bufferIndex++] = let;
                }
            }

            return new string(buffer, 0, bufferIndex);
        }

        private async Task<List<LiveTvTunerInfo>> GetTunerInfosUdp(TunerHostInfo info, CancellationToken cancellationToken)
        {
            var model = await GetModelInfo(info, false, cancellationToken).ConfigureAwait(false);

            var tuners = new List<LiveTvTunerInfo>(model.TunerCount);

            var uri = new Uri(GetApiUrl(info));

            using (var manager = new HdHomerunManager())
            {
                // Legacy HdHomeruns are IPv4 only
                var ipInfo = IPAddress.Parse(uri.Host);

                for (int i = 0; i < model.TunerCount; i++)
                {
                    var name = string.Format(CultureInfo.InvariantCulture, ""Tuner {0}"", i + 1);
                    var currentChannel = ""none""; // TODO: Get current channel and map back to Station Id
                    var isAvailable = await manager.CheckTunerAvailability(ipInfo, i, cancellationToken).ConfigureAwait(false);
                    var status = isAvailable ? LiveTvTunerStatus.Available : LiveTvTunerStatus.LiveTv;
                    tuners.Add(new LiveTvTunerInfo
                    {
                        Name = name,
                        SourceType = string.IsNullOrWhiteSpace(model.ModelNumber) ? Name : model.ModelNumber,
                        ProgramName = currentChannel,
                        Status = status
                    });
                }
            }

            return tuners;
        }

        public async Task<List<LiveTvTunerInfo>> GetTunerInfos(CancellationToken cancellationToken)
        {
            var list = new List<LiveTvTunerInfo>();

            foreach (var host in GetConfiguration().TunerHosts
                .Where(i => string.Equals(i.Type, Type, StringComparison.OrdinalIgnoreCase)))
            {
                try
                {
                    list.AddRange(await GetTunerInfos(host, cancellationToken).ConfigureAwait(false));
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, ""Error getting tuner info"");
                }
            }

            return list;
        }

        public async Task<List<LiveTvTunerInfo>> GetTunerInfos(TunerHostInfo info, CancellationToken cancellationToken)
        {
            // TODO Need faster way to determine UDP vs HTTP
            var channels = await GetChannels(info, true, cancellationToken).ConfigureAwait(false);

            var hdHomerunChannelInfo = channels.FirstOrDefault() as HdHomerunChannelInfo;

            if (hdHomerunChannelInfo == null || hdHomerunChannelInfo.IsLegacyTuner)
            {
                return await GetTunerInfosUdp(info, cancellationToken).ConfigureAwait(false);
            }

            return await GetTunerInfosHttp(info, cancellationToken).ConfigureAwait(false);
        }

        private static string GetApiUrl(TunerHostInfo info)
        {
            var url = info.Url;

            if (string.IsNullOrWhiteSpace(url))
            {
                throw new ArgumentException(""Invalid tuner info"");
            }

            if (!url.StartsWith(""http"", StringComparison.OrdinalIgnoreCase))
            {
                url = ""http://"" + url;
            }

            return new Uri(url).AbsoluteUri.TrimEnd('/');
        }

        private static string GetHdHrIdFromChannelId(string channelId)
        {
            return channelId.Split('_')[1];
        }

        private MediaSourceInfo GetMediaSource(TunerHostInfo info, string channelId, ChannelInfo channelInfo, string profile)
        {
            int? width = null;
            int? height = null;
            bool isInterlaced = true;
            string videoCodec = null;

            int? videoBitrate = null;

            var isHd = channelInfo.IsHD ?? true;

            if (string.Equals(profile, ""mobile"", StringComparison.OrdinalIgnoreCase))
            {
                width = 1280;
                height = 720;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 2000000;
            }
            else if (string.Equals(profile, ""heavy"", StringComparison.OrdinalIgnoreCase))
            {
                width = 1920;
                height = 1080;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 15000000;
            }
            else if (string.Equals(profile, ""internet720"", StringComparison.OrdinalIgnoreCase))
            {
                width = 1280;
                height = 720;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 8000000;
            }
            else if (string.Equals(profile, ""internet540"", StringComparison.OrdinalIgnoreCase))
            {
                width = 960;
                height = 540;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 2500000;
            }
            else if (string.Equals(profile, ""internet480"", StringComparison.OrdinalIgnoreCase))
            {
                width = 848;
                height = 480;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 2000000;
            }
            else if (string.Equals(profile, ""internet360"", StringComparison.OrdinalIgnoreCase))
            {
                width = 640;
                height = 360;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 1500000;
            }
            else if (string.Equals(profile, ""internet240"", StringComparison.OrdinalIgnoreCase))
            {
                width = 432;
                height = 240;
                isInterlaced = false;
                videoCodec = ""h264"";
                videoBitrate = 1000000;
            }
            else
            {
                // This is for android tv's 1200 condition. Remove once not needed anymore so that we can avoid possible side effects of dummying up this data
                if (isHd)
                {
                    width = 1920;
                    height = 1080;
                }
            }

            if (string.IsNullOrWhiteSpace(videoCodec))
            {
                videoCodec = channelInfo.VideoCodec;
            }

            string audioCodec = channelInfo.AudioCodec;

            videoBitrate ??= isHd ? 15000000 : 2000000;

            int? audioBitrate = isHd ? 448000 : 192000;

            // normalize
            if (string.Equals(videoCodec, ""mpeg2"", StringComparison.OrdinalIgnoreCase))
            {
                videoCodec = ""mpeg2video"";
            }

            string nal = null;
            if (string.Equals(videoCodec, ""h264"", StringComparison.OrdinalIgnoreCase))
            {
                nal = ""0"";
            }

            var url = GetApiUrl(info);

            var id = profile;
            if (string.IsNullOrWhiteSpace(id))
            {
                id = ""native"";
            }

            id += ""_"" + channelId.GetMD5().ToString(""N"", CultureInfo.InvariantCulture) + ""_"" + url.GetMD5().ToString(""N"", CultureInfo.InvariantCulture);

            var mediaSource = new MediaSourceInfo
            {
                Path = url,
                Protocol = MediaProtocol.Udp,
                MediaStreams = new List<MediaStream>
                {
                    new MediaStream
                    {
                        Type = MediaStreamType.Video,
                        // Set the index to -1 because we don't know the exact index of the video stream within the container
                        Index = -1,
                        IsInterlaced = isInterlaced,
                        Codec = videoCodec,
                        Width = width,
                        Height = height,
                        BitRate = videoBitrate,
                        NalLengthSize = nal
                    },
                    new MediaStream
                    {
                        Type = MediaStreamType.Audio,
                        // Set the index to -1 because we don't know the exact index of the audio stream within the container
                        Index = -1,
                        Codec = audioCodec,
                        BitRate = audioBitrate
                    }
                },
                RequiresOpening = true,
                RequiresClosing = true,
                BufferMs = 0,
                Container = ""ts"",
                Id = id,
                SupportsDirectPlay = false,
                SupportsDirectStream = true,
                SupportsTranscoding = true,
                IsInfiniteStream = true,
                IgnoreDts = true,
                // IgnoreIndex = true,
                // ReadAtNativeFramerate = true
            };

            mediaSource.InferTotalBitrate();

            return mediaSource;
        }

        protected override async Task<List<MediaSourceInfo>> GetChannelStreamMediaSources(TunerHostInfo tuner, ChannelInfo channel, CancellationToken cancellationToken)
        {
            var list = new List<MediaSourceInfo>();

            var channelId = channel.Id;
            var hdhrId = GetHdHrIdFromChannelId(channelId);

            if (channel is HdHomerunChannelInfo hdHomerunChannelInfo && hdHomerunChannelInfo.IsLegacyTuner)
            {
                list.Add(GetMediaSource(tuner, hdhrId, channel, ""native""));
            }
            else
            {
                var modelInfo = await GetModelInfo(tuner, false, cancellationToken).ConfigureAwait(false);

                if (modelInfo != null && modelInfo.SupportsTranscoding)
                {
                    if (tuner.AllowHWTranscoding)
                    {
                        list.Add(GetMediaSource(tuner, hdhrId, channel, ""heavy""));

                        list.Add(GetMediaSource(tuner, hdhrId, channel, ""internet540""));
                        list.Add(GetMediaSource(tuner, hdhrId, channel, ""internet480""));
                        list.Add(GetMediaSource(tuner, hdhrId, channel, ""internet360""));
                        list.Add(GetMediaSource(tuner, hdhrId, channel, ""internet240""));
                        list.Add(GetMediaSource(tuner, hdhrId, channel, ""mobile""));
                    }

                    list.Add(GetMediaSource(tuner, hdhrId, channel, ""native""));
                }

                if (list.Count == 0)
                {
                    list.Add(GetMediaSource(tuner, hdhrId, channel, ""native""));
                }
            }

            return list;
        }

        protected override async Task<ILiveStream> GetChannelStream(TunerHostInfo tunerHost, ChannelInfo channel, string streamId, List<ILiveStream> currentLiveStreams, CancellationToken cancellationToken)
        {
            var tunerCount = tunerHost.TunerCount;

            if (tunerCount > 0)
            {
                var tunerHostId = tunerHost.Id;
                var liveStreams = currentLiveStreams.Where(i => string.Equals(i.TunerHostId, tunerHostId, StringComparison.OrdinalIgnoreCase));

                if (liveStreams.Count() >= tunerCount)
                {
                    throw new LiveTvConflictException(""HDHomeRun simultaneous stream limit has been reached."");
                }
            }

            var profile = streamId.AsSpan().LeftPart('_').ToString();

            Logger.LogInformation(""GetChannelStream: channel id: {0}. stream id: {1} profile: {2}"", channel.Id, streamId, profile);

            var hdhrId = GetHdHrIdFromChannelId(channel.Id);

            var hdhomerunChannel = channel as HdHomerunChannelInfo;

            var modelInfo = await GetModelInfo(tunerHost, false, cancellationToken).ConfigureAwait(false);

            if (!modelInfo.SupportsTranscoding)
            {
                profile = ""native"";
            }

            var mediaSource = GetMediaSource(tunerHost, hdhrId, channel, profile);

            if (hdhomerunChannel != null && hdhomerunChannel.IsLegacyTuner)
            {
                return new HdHomerunUdpStream(
                    mediaSource,
                    tunerHost,
                    streamId,
                    new LegacyHdHomerunChannelCommands(hdhomerunChannel.Path),
                    modelInfo.TunerCount,
                    FileSystem,
                    Logger,
                    Config,
                    _appHost,
                    _streamHelper);
            }

            var enableHttpStream = true;
            if (enableHttpStream)
            {
                mediaSource.Protocol = MediaProtocol.Http;

                var httpUrl = channel.Path;

                // If raw was used, the tuner doesn't support params
                if (!string.IsNullOrWhiteSpace(profile) && !string.Equals(profile, ""native"", StringComparison.OrdinalIgnoreCase))
                {
                    httpUrl += ""?transcode="" + profile;
                }

                mediaSource.Path = httpUrl;

                return new SharedHttpStream(
                    mediaSource,
                    tunerHost,
                    streamId,
                    FileSystem,
                    _httpClientFactory,
                    Logger,
                    Config,
                    _appHost,
                    _streamHelper);
            }

            return new HdHomerunUdpStream(
                mediaSource,
                tunerHost,
                streamId,
                new HdHomerunChannelCommands(hdhomerunChannel.Number, profile),
                modelInfo.TunerCount,
                FileSystem,
                Logger,
                Config,
                _appHost,
                _streamHelper);
        }

        public async Task Validate(TunerHostInfo info)
        {
            lock (_modelCache)
            {
                _modelCache.Clear();
            }

            try
            {
                // Test it by pulling down the lineup
                var modelInfo = await GetModelInfo(info, true, CancellationToken.None).ConfigureAwait(false);
                info.DeviceId = modelInfo.DeviceID;
            }
            catch (HttpRequestException ex)
            {
                if (ex.StatusCode.HasValue && ex.StatusCode.Value == System.Net.HttpStatusCode.NotFound)
                {
                    // HDHR4 doesn't have this api
                    return;
                }

                throw;
            }
        }

        public async Task<List<TunerHostInfo>> DiscoverDevices(int discoveryDurationMs, CancellationToken cancellationToken)
        {
            lock (_modelCache)
            {
                _modelCache.Clear();
            }

            using var timedCancellationToken = new CancellationTokenSource(discoveryDurationMs);
            using var linkedCancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(timedCancellationToken.Token, cancellationToken);
            cancellationToken = linkedCancellationTokenSource.Token;
            var list = new List<TunerHostInfo>();

            // Create udp broadcast discovery message
            byte[] discBytes = { 0, 2, 0, 12, 1, 4, 255, 255, 255, 255, 2, 4, 255, 255, 255, 255, 115, 204, 125, 143 };
            using (var udpClient = _socketFactory.CreateUdpBroadcastSocket(0))
            {
                // Need a way to set the Receive timeout on the socket otherwise this might never timeout?
                try
                {
                    await udpClient.SendToAsync(discBytes, 0, discBytes.Length, new IPEndPoint(IPAddress.Parse(""255.255.255.255""), 65001), cancellationToken).ConfigureAwait(false);
                    var receiveBuffer = new byte[8192];

                    while (!cancellationToken.IsCancellationRequested)
                    {
                        var response = await udpClient.ReceiveAsync(receiveBuffer, 0, receiveBuffer.Length, cancellationToken).ConfigureAwait(false);
                        var deviceIp = response.RemoteEndPoint.Address.ToString();

                        // check to make sure we have enough bytes received to be a valid message and make sure the 2nd byte is the discover reply byte
                        if (response.ReceivedBytes > 13 && response.Buffer[1] == 3)
                        {
                            var deviceAddress = ""http://"" + deviceIp;

                            var info = await TryGetTunerHostInfo(deviceAddress, cancellationToken).ConfigureAwait(false);

                            if (info != null)
                            {
                                list.Add(info);
                            }
                        }
                    }
                }
                catch (OperationCanceledException)
                {
                }
                catch (Exception ex)
                {
                    // Socket timeout indicates all messages have been received.
                    Logger.LogError(ex, ""Error while sending discovery message"");
                }
            }

            return list;
        }

        internal async Task<TunerHostInfo> TryGetTunerHostInfo(string url, CancellationToken cancellationToken)
        {
            var hostInfo = new TunerHostInfo
            {
                Type = Type,
                Url = url
            };

            var modelInfo = await GetModelInfo(hostInfo, false, cancellationToken).ConfigureAwait(false);

            hostInfo.DeviceId = modelInfo.DeviceID;
            hostInfo.FriendlyName = modelInfo.FriendlyName;
            hostInfo.TunerCount = modelInfo.TunerCount;

            return hostInfo;
        }

        private class HdHomerunChannelInfo : ChannelInfo
        {
            public bool IsLegacyTuner { get; set; }
        }
    }",1,439 334 2000 58 2001 44 2002 44 2003 123 437 441 2004 2005 59 437 441 2006 2007 59 437 441 2008 2009 59 437 441 2010 2011 59 437 441 2012 2013 59 437 441 2014 60 461 44 2015 62 2016 61 418 2014 60 461 44 2015 62 40 41 59 439 2000 40 2017 2018 44 2019 60 2000 62 2020 44 2021 2022 44 2004 2023 44 2006 2024 44 2008 2025 44 2010 2026 44 2027 2028 41 58 320 40 2018 44 2020 44 2022 44 2028 41 123 2005 61 2023 59 2007 61 2024 59 2009 61 2025 59 2011 61 2026 59 2013 61 2029 46 2030 59 125 439 461 2031 619 648 59 439 431 461 2032 619 648 59 438 431 461 2033 619 648 59 437 461 2034 40 2035 2036 41 619 2033 43 2036 46 2037 59 406 314 2038 60 2039 60 2035 640 2040 40 2041 2042 44 2043 2044 41 123 490 2045 61 319 2046 40 2042 44 380 44 2044 41 46 2047 40 380 41 59 489 490 2048 61 319 2005 46 2049 40 2050 46 2051 41 46 2052 40 2045 46 2053 633 2045 46 2054 43 648 44 2055 46 2056 44 2044 41 46 2047 40 380 41 59 319 489 490 2057 61 319 2048 46 2058 46 2059 40 2044 41 46 2047 40 380 41 59 490 2060 61 319 2061 46 2062 60 2039 60 2035 640 40 2057 44 2013 44 2044 41 46 2047 40 380 41 633 418 2039 60 2035 62 40 41 59 392 40 2042 46 2063 41 123 2060 61 2060 46 2064 40 2036 619 2036 46 2065 41 46 2066 40 41 59 125 450 2060 46 2067 40 2036 619 33 2036 46 2068 41 46 2069 40 41 59 125 438 431 314 2038 60 2039 60 2070 640 2071 40 2041 2072 44 2043 2044 41 123 490 2073 61 319 2040 40 2072 44 2044 41 46 2074 40 380 41 59 450 2073 46 2075 40 2036 619 418 2076 123 2031 61 2036 46 2077 44 2078 61 2036 46 2037 44 2079 61 2034 40 2036 41 44 2080 61 2036 46 2081 44 2082 61 2072 46 2079 44 2083 61 2036 46 2084 44 2085 61 2036 46 2085 44 2086 61 2036 46 2086 44 2087 61 2087 46 2088 44 2089 61 40 2036 46 2090 633 461 46 2091 41 46 2092 40 648 44 2093 46 2094 41 44 2095 61 2036 46 2090 125 41 46 2096 60 2070 62 40 41 46 2097 40 41 59 125 406 314 2038 60 2015 62 2098 40 2041 2042 44 323 2099 44 2043 2044 41 123 490 2100 61 2042 46 2101 59 412 40 2016 41 123 392 40 33 461 46 2102 40 2100 41 41 123 392 40 2016 46 2103 40 2100 44 430 2015 2104 41 41 123 450 2104 59 125 125 125 474 123 489 490 2105 61 319 2005 46 2106 40 2107 46 2108 41 46 2109 40 2110 40 2042 41 43 648 44 2111 46 2112 44 2044 41 46 2113 40 380 41 59 2105 46 2114 40 41 59 319 489 490 2115 61 319 2105 46 2116 46 2117 40 2044 41 46 2113 40 380 41 59 490 2118 61 319 2119 46 2120 60 2015 62 40 2115 44 2013 44 2044 41 46 2113 40 380 41 59 392 40 33 461 46 2121 40 2100 41 41 123 412 40 2016 41 123 2016 91 2100 93 61 2118 59 125 125 450 2118 59 125 329 40 2122 2123 41 123 392 40 33 2099 605 2123 46 2124 46 2125 605 2123 46 2124 46 2126 614 2127 46 2128 41 123 341 461 2129 61 648 59 490 2130 61 418 2015 123 2131 61 2129 125 59 392 40 33 461 46 2132 40 2100 41 41 123 621 412 40 2016 41 123 2016 91 2100 93 61 2130 59 125 125 450 2130 59 125 469 59 125 125 437 314 2038 60 2039 60 2133 640 2134 40 2041 2042 44 2043 2044 41 123 490 2135 61 319 2098 40 2042 44 380 44 2044 41 46 2136 40 380 41 59 489 490 2137 61 319 2005 46 2138 40 2139 46 2140 41 46 2141 40 461 46 2142 40 2143 46 2144 44 648 44 2145 40 2042 41 41 44 2146 46 2147 44 2044 41 46 2136 40 380 41 59 319 489 490 2148 61 319 2137 46 2149 46 2150 40 2044 41 46 2136 40 380 41 59 489 490 2151 61 418 2152 40 2148 44 2153 46 2154 46 2155 46 2156 41 59 490 2157 61 418 2039 60 2133 62 40 41 59 319 386 40 490 2158 398 2151 46 2159 40 41 46 2136 40 380 41 41 123 461 2160 61 2161 40 2158 41 59 392 40 2160 46 2162 40 648 44 2163 46 2164 41 41 123 2165 2166 59 490 2167 61 2160 46 2168 40 648 44 2163 46 2169 41 59 490 2170 61 2160 46 2171 40 1500 44 2167 45 1501 41 59 490 2172 61 2160 46 2171 40 2167 43 1502 41 59 392 40 461 46 2173 40 2172 44 648 44 2163 46 2164 41 41 123 2166 61 2165 46 2174 59 125 360 123 2166 61 2165 46 2175 59 125 2157 46 2176 40 418 2133 123 2031 61 2170 44 2177 61 461 46 2178 40 2135 46 2179 41 63 2031 58 2135 46 2179 44 2180 61 2172 44 2181 61 2166 125 41 59 125 125 450 2157 59 125 437 457 461 2182 40 461 2183 41 123 392 40 461 46 2184 40 2183 41 41 123 450 461 46 2185 59 125 330 91 93 2186 61 418 330 91 2183 46 2187 93 59 404 2188 61 1500 59 323 2189 61 380 59 385 40 404 2036 61 1500 59 2036 60 2183 46 2187 59 2036 637 41 123 330 2190 61 2183 91 2036 93 59 392 40 2190 614 607 41 123 2189 61 473 59 344 59 125 392 40 2190 614 607 41 123 2189 61 380 59 344 59 125 392 40 33 2189 41 123 2186 91 2188 637 93 61 2190 59 125 125 450 418 461 40 2186 44 1500 44 2188 41 59 125 437 314 2038 60 2039 60 2133 640 2191 40 2041 2042 44 2043 2044 41 123 490 2192 61 319 2098 40 2042 44 380 44 2044 41 46 2193 40 380 41 59 490 2194 61 418 2039 60 2133 62 40 2192 46 2195 41 59 490 2196 61 418 2197 40 2198 40 2042 41 41 59 489 40 490 2199 61 418 2200 40 41 41 123 621 490 2201 61 2202 46 2203 40 2196 46 2204 41 59 385 40 404 2036 61 1500 59 2036 60 2192 46 2195 59 2036 637 41 123 490 2205 61 461 46 2206 40 2207 46 2208 44 648 44 2036 43 1501 41 59 490 2209 61 648 59 621 490 2210 61 319 2199 46 2211 40 2201 44 2036 44 2044 41 46 2193 40 380 41 59 490 2212 61 2210 63 2213 46 2214 58 2213 46 2215 59 2194 46 2216 40 418 2133 123 2031 61 2205 44 2217 61 461 46 2218 40 2192 46 2219 41 63 2031 58 2192 46 2219 44 2220 61 2209 44 2221 61 2212 125 41 59 125 125 450 2194 59 125 439 314 2038 60 2039 60 2133 640 2222 40 2043 2044 41 123 490 411 61 418 2039 60 2133 62 40 41 59 386 40 490 2223 398 2224 40 41 46 2225 46 2226 40 2036 619 461 46 2227 40 2036 46 2032 44 2032 44 2228 46 2229 41 41 41 123 474 123 411 46 2230 40 319 2222 40 2223 44 2044 41 46 2231 40 380 41 41 59 125 329 40 2232 2233 41 123 2234 46 2235 40 2233 44 648 41 59 125 125 450 411 59 125 439 314 2038 60 2039 60 2133 640 2222 40 2041 2042 44 2043 2044 41 123 621 490 2236 61 319 2237 40 2042 44 473 44 2044 41 46 2238 40 380 41 59 490 2239 61 2236 46 2240 40 41 311 2241 59 392 40 2239 614 424 606 2239 46 2242 41 123 450 319 2191 40 2042 44 2044 41 46 2238 40 380 41 59 125 450 319 2134 40 2042 44 2044 41 46 2238 40 380 41 59 125 437 457 461 2243 40 2041 2042 41 123 490 2244 61 2042 46 2245 59 392 40 461 46 2246 40 2244 41 41 123 469 418 2247 40 648 41 59 125 392 40 33 2244 46 2248 40 648 44 2249 46 2250 41 41 123 2244 61 648 43 2244 59 125 450 418 2251 40 2244 41 46 2252 46 2253 40 607 41 59 125 437 457 461 2254 40 461 2255 41 123 450 2255 46 2256 40 607 41 91 1501 93 59 125 437 2257 2258 40 2041 2042 44 461 2255 44 2070 2259 44 461 2260 41 123 404 63 2261 61 424 59 404 63 2262 61 424 59 323 2263 61 473 59 461 2264 61 424 59 404 63 2265 61 424 59 490 2266 61 2259 46 2267 633 473 59 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1505 59 2262 61 1504 59 2263 61 380 59 2264 61 648 59 2265 61 1508 59 125 360 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1505 59 2262 61 1505 59 2263 61 380 59 2264 61 648 59 2265 61 1509 59 125 360 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1505 59 2262 61 1504 59 2263 61 380 59 2264 61 648 59 2265 61 1508 59 125 360 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1504 59 2262 61 1504 59 2263 61 380 59 2264 61 648 59 2265 61 1508 59 125 360 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1504 59 2262 61 1504 59 2263 61 380 59 2264 61 648 59 2265 61 1508 59 125 360 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1504 59 2262 61 1504 59 2263 61 380 59 2264 61 648 59 2265 61 1508 59 125 360 392 40 461 46 2268 40 2260 44 648 44 2269 46 2270 41 41 123 2261 61 1504 59 2262 61 1504 59 2263 61 380 59 2264 61 648 59 2265 61 1507 59 125 360 123 621 392 40 2266 41 123 2261 61 1505 59 2262 61 1505 59 125 125 392 40 461 46 2271 40 2264 41 41 123 2264 61 2259 46 2272 59 125 461 2273 61 2259 46 2274 59 2265 633 61 2266 63 1509 58 1508 59 404 63 2275 61 2266 63 1507 58 1507 59 621 392 40 461 46 2268 40 2264 44 648 44 2269 46 2270 41 41 123 2264 61 648 59 125 461 2276 61 424 59 392 40 461 46 2268 40 2264 44 648 44 2269 46 2270 41 41 123 2276 61 648 59 125 490 2277 61 2243 40 2042 41 59 490 2278 61 2260 59 392 40 461 46 2271 40 2278 41 41 123 2278 61 648 59 125 2278 636 648 43 2255 46 2279 40 41 46 2280 40 648 44 2281 46 2282 41 43 648 43 2277 46 2279 40 41 46 2280 40 648 44 2281 46 2282 41 59 490 2283 61 418 2257 123 2284 61 2277 44 2285 61 2286 46 2287 44 2288 61 418 2039 60 2289 62 123 418 2289 123 2032 61 2290 46 2291 44 621 2292 61 45 1501 44 2293 61 2263 44 2294 61 2264 44 2295 61 2261 44 2296 61 2262 44 2297 61 2265 44 2298 61 2276 125 44 418 2289 123 2032 61 2299 46 2300 44 621 2301 61 45 1501 44 2302 61 2273 44 2303 61 2275 125 125 44 2304 61 473 44 2305 61 473 44 2306 61 1500 44 2307 61 648 44 2308 61 2278 44 2309 61 380 44 2310 61 473 44 2311 61 473 44 2312 61 473 44 2313 61 473 44 621 621 125 59 2283 46 2314 40 41 59 450 2283 59 125 438 431 314 2038 60 2039 60 2257 640 2315 40 2041 2072 44 2070 2316 44 2043 2044 41 123 490 411 61 418 2039 60 2257 62 40 41 59 490 2255 61 2316 46 2317 59 490 2318 61 2254 40 2255 41 59 392 40 2316 407 2319 2320 605 2320 46 2321 41 123 411 46 2322 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 125 360 123 490 2323 61 319 2098 40 2072 44 380 44 2044 41 46 2324 40 380 41 59 392 40 2323 631 424 605 2323 46 2325 41 123 392 40 2072 46 2326 41 123 411 46 2327 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 411 46 2327 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 411 46 2327 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 411 46 2327 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 411 46 2327 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 411 46 2327 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 125 411 46 2328 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 125 392 40 411 46 2329 614 1500 41 123 411 46 2330 40 2258 40 2072 44 2318 44 2316 44 648 41 41 59 125 125 450 411 59 125 438 431 314 2038 60 2331 62 2332 40 2041 2333 44 2070 2316 44 461 2334 44 2039 60 2331 62 2335 44 2043 2044 41 123 490 2336 61 2333 46 2337 59 392 40 2336 62 1500 41 123 490 2338 61 2333 46 2339 59 490 2340 61 2335 46 2341 40 2036 619 461 46 2342 40 2036 46 2343 44 2338 44 2344 46 2345 41 41 59 392 40 2340 46 2346 40 41 615 2336 41 123 469 418 2347 40 648 41 59 125 125 490 2260 61 2334 46 2348 40 41 46 2349 40 607 41 46 2350 40 41 59 2351 46 2352 40 648 44 2316 46 2353 44 2334 44 2260 41 59 490 2354 61 2254 40 2316 46 2353 41 59 490 2355 61 2316 311 2356 59 490 2357 61 319 2098 40 2333 44 380 44 2044 41 46 2358 40 380 41 59 392 40 33 2357 46 2359 41 123 2260 61 648 59 125 490 2360 61 2258 40 2333 44 2354 44 2316 44 2260 41 59 392 40 2355 631 424 605 2355 46 2361 41 123 450 418 2362 40 2360 44 2333 44 2334 44 418 2363 40 2355 46 2364 41 44 2357 46 2337 44 2365 44 2351 44 2366 44 2007 44 2011 41 59 125 490 2367 61 473 59 392 40 2367 41 123 2360 46 2368 61 2369 46 2370 59 490 2371 61 2316 46 2372 59 621 392 40 33 461 46 2373 40 2260 41 605 33 461 46 2374 40 2260 44 648 44 2375 46 2376 41 41 123 2371 636 648 43 2260 59 125 2360 46 2372 61 2371 59 450 418 2377 40 2360 44 2333 44 2334 44 2378 44 2005 44 2351 44 2379 44 2007 44 2011 41 59 125 450 418 2380 40 2360 44 2333 44 2334 44 418 2381 40 2355 46 2382 44 2260 41 44 2357 46 2337 44 2383 44 2351 44 2384 44 2007 44 2011 41 59 125 439 314 2038 2385 40 2041 2042 41 123 412 40 2016 41 123 2016 46 2386 40 41 59 125 474 123 621 490 2387 61 319 2098 40 2042 44 473 44 2043 46 303 41 46 2388 40 380 41 59 2042 46 2389 61 2387 46 2390 59 125 329 40 2391 2392 41 123 392 40 2392 46 2393 46 2394 605 2392 46 2393 46 2395 614 2396 46 2397 46 2398 46 2399 41 123 621 450 59 125 469 59 125 125 439 314 2038 60 2039 60 2041 640 2400 40 404 2401 44 2043 2044 41 123 412 40 2016 41 123 2016 46 2402 40 41 59 125 489 490 2403 61 418 2404 40 2401 41 59 489 490 2405 61 2404 46 2406 40 2403 46 2407 44 2044 41 59 2044 61 2405 46 2407 59 490 411 61 418 2039 60 2041 62 40 41 59 621 326 91 93 2408 61 123 1500 44 1502 44 1500 44 1503 44 1501 44 1502 44 1504 44 1504 44 1504 44 1504 44 1502 44 1502 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 125 59 489 40 490 2409 61 2009 46 2410 40 1500 41 41 123 621 474 123 319 2409 46 2411 40 2408 44 1500 44 2408 46 2412 44 418 2413 40 2414 46 2415 40 648 41 44 1506 41 44 2044 41 46 2416 40 380 41 59 490 2417 61 418 326 91 1505 93 59 496 40 33 2044 46 2418 41 123 490 2419 61 319 2409 46 2420 40 2417 44 1500 44 2417 46 2412 44 2044 41 46 2416 40 380 41 59 490 2421 61 2419 46 2422 46 2423 46 2424 40 41 59 621 392 40 2419 46 2425 62 1503 605 2419 46 2426 91 1501 93 614 1502 41 123 490 2427 61 648 43 2421 59 490 2042 61 319 2428 40 2427 44 2044 41 46 2416 40 380 41 59 392 40 2042 631 424 41 123 411 46 2429 40 2042 41 59 125 125 125 125 329 40 2430 41 123 125 329 40 2431 2432 41 123 621 2433 46 2434 40 2432 44 648 41 59 125 125 450 411 59 125 406 314 2038 60 2041 62 2435 40 461 2436 44 2043 2044 41 123 490 2437 61 418 2041 123 2032 61 2032 44 2438 61 2436 125 59 490 2439 61 319 2098 40 2437 44 380 44 2044 41 46 2440 40 380 41 59 2437 46 2441 61 2439 46 2442 59 2437 46 2443 61 2439 46 2443 59 2437 46 2444 61 2439 46 2444 59 450 2437 59 125 437 334 2445 58 2070 123 439 323 2446 123 2447 59 2448 59 125 125 125 
76822,C#,"    public class EpisodeNfoParser : BaseNfoParser<Episode>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref=""EpisodeNfoParser""/> class.
        /// </summary>
        /// <param name=""logger"">Instance of the <see cref=""ILogger{BaseNfoParser}""/> interface.</param>
        /// <param name=""config"">Instance of the <see cref=""IConfigurationManager""/> interface.</param>
        /// <param name=""providerManager"">Instance of the <see cref=""IProviderManager""/> interface.</param>
        /// <param name=""userManager"">Instance of the <see cref=""IUserManager""/> interface.</param>
        /// <param name=""userDataManager"">Instance of the <see cref=""IUserDataManager""/> interface.</param>
        /// <param name=""directoryService"">Instance of the <see cref=""IDirectoryService""/> interface.</param>
        public EpisodeNfoParser(
            ILogger logger,
            IConfigurationManager config,
            IProviderManager providerManager,
            IUserManager userManager,
            IUserDataManager userDataManager,
            IDirectoryService directoryService)
            : base(logger, config, providerManager, userManager, userDataManager, directoryService)
        {
        }

        /// <inheritdoc />
        protected override void Fetch(MetadataResult<Episode> item, string metadataFile, XmlReaderSettings settings, CancellationToken cancellationToken)
        {
            item.ResetPeople();

            var xmlFile = File.ReadAllText(metadataFile);

            var srch = ""</episodedetails>"";
            var index = xmlFile.IndexOf(srch, StringComparison.OrdinalIgnoreCase);

            var xml = xmlFile;

            if (index != -1)
            {
                xml = xmlFile.Substring(0, index + srch.Length);
                xmlFile = xmlFile.Substring(index + srch.Length);
            }

            // These are not going to be valid xml so no sense in causing the provider to fail and spamming the log with exceptions
            try
            {
                // Extract episode details from the first episodedetails block
                using (var stringReader = new StringReader(xml))
                using (var reader = XmlReader.Create(stringReader, settings))
                {
                    reader.MoveToContent();
                    reader.Read();

                    // Loop through each element
                    while (!reader.EOF && reader.ReadState == ReadState.Interactive)
                    {
                        cancellationToken.ThrowIfCancellationRequested();

                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            FetchDataFromXmlNode(reader, item);
                        }
                        else
                        {
                            reader.Read();
                        }
                    }
                }

                // Extract the last episode number from nfo
                // This is needed because XBMC metadata uses multiple episodedetails blocks instead of episodenumberend tag
                while ((index = xmlFile.IndexOf(srch, StringComparison.OrdinalIgnoreCase)) != -1)
                {
                    xml = xmlFile.Substring(0, index + srch.Length);
                    xmlFile = xmlFile.Substring(index + srch.Length);

                    using (var stringReader = new StringReader(xml))
                    using (var reader = XmlReader.Create(stringReader, settings))
                    {
                        reader.MoveToContent();

                        if (reader.ReadToDescendant(""episode"") && int.TryParse(reader.ReadElementContentAsString(), out var num))
                        {
                            item.Item.IndexNumberEnd = Math.Max(num, item.Item.IndexNumberEnd ?? num);
                        }
                    }
                }
            }
            catch (XmlException)
            {
            }
        }

        /// <inheritdoc />
        protected override void FetchDataFromXmlNode(XmlReader reader, MetadataResult<Episode> itemResult)
        {
            var item = itemResult.Item;

            switch (reader.Name)
            {
                case ""season"":
                    {
                        var number = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(number))
                        {
                            if (int.TryParse(number, out var num))
                            {
                                item.ParentIndexNumber = num;
                            }
                        }

                        break;
                    }

                case ""episode"":
                    {
                        var number = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(number))
                        {
                            if (int.TryParse(number, out var num))
                            {
                                item.IndexNumber = num;
                            }
                        }

                        break;
                    }

                case ""episodenumberend"":
                    {
                        var number = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(number))
                        {
                            if (int.TryParse(number, out var num))
                            {
                                item.IndexNumberEnd = num;
                            }
                        }

                        break;
                    }

                case ""airsbefore_episode"":
                    {
                        var val = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(val))
                        {
                            // int.TryParse is local aware, so it can be problematic, force us culture
                            if (int.TryParse(val, NumberStyles.Integer, CultureInfo.InvariantCulture, out var rval))
                            {
                                item.AirsBeforeEpisodeNumber = rval;
                            }
                        }

                        break;
                    }

                case ""airsafter_season"":
                    {
                        var val = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(val))
                        {
                            // int.TryParse is local aware, so it can be problematic, force us culture
                            if (int.TryParse(val, NumberStyles.Integer, CultureInfo.InvariantCulture, out var rval))
                            {
                                item.AirsAfterSeasonNumber = rval;
                            }
                        }

                        break;
                    }

                case ""airsbefore_season"":
                    {
                        var val = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(val))
                        {
                            // int.TryParse is local aware, so it can be problematic, force us culture
                            if (int.TryParse(val, NumberStyles.Integer, CultureInfo.InvariantCulture, out var rval))
                            {
                                item.AirsBeforeSeasonNumber = rval;
                            }
                        }

                        break;
                    }

                case ""displayseason"":
                    {
                        var val = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(val))
                        {
                            // int.TryParse is local aware, so it can be problematic, force us culture
                            if (int.TryParse(val, NumberStyles.Integer, CultureInfo.InvariantCulture, out var rval))
                            {
                                item.AirsBeforeSeasonNumber = rval;
                            }
                        }

                        break;
                    }

                case ""displayepisode"":
                    {
                        var val = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(val))
                        {
                            // int.TryParse is local aware, so it can be problematic, force us culture
                            if (int.TryParse(val, NumberStyles.Integer, CultureInfo.InvariantCulture, out var rval))
                            {
                                item.AirsBeforeEpisodeNumber = rval;
                            }
                        }

                        break;
                    }

                case ""showtitle"":
                    {
                        var showtitle = reader.ReadElementContentAsString();

                        if (!string.IsNullOrWhiteSpace(showtitle))
                        {
                            item.SeriesName = showtitle;
                        }

                        break;
                    }

                default:
                    base.FetchDataFromXmlNode(reader, itemResult);
                    break;
            }
        }
    }",1,439 334 2000 58 2001 60 2002 62 123 612 439 2000 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 41 58 320 40 2004 44 2006 44 2008 44 2010 44 2012 44 2014 41 123 125 612 438 431 492 2015 40 2016 60 2002 62 2017 44 461 2018 44 2019 2020 44 2021 2022 41 123 2017 46 2023 40 41 59 490 2024 61 2025 46 2026 40 2018 41 59 490 2027 61 648 59 490 2028 61 2024 46 2029 40 2027 44 2030 46 2031 41 59 490 2032 61 2024 59 392 40 2028 631 45 1501 41 123 2032 61 2024 46 2033 40 1500 44 2028 43 2027 46 2034 41 59 2024 61 2024 46 2033 40 2028 43 2027 46 2034 41 59 125 621 474 123 621 489 40 490 2035 61 418 2036 40 2032 41 41 489 40 490 2037 61 2038 46 2039 40 2035 44 2020 41 41 123 2037 46 2040 40 41 59 2037 46 2041 40 41 59 621 496 40 33 2037 46 2042 605 2037 46 2043 614 2043 46 2044 41 123 2022 46 2045 40 41 59 392 40 2037 46 2046 614 2047 46 2048 41 123 2049 40 2037 44 2017 41 59 125 360 123 2037 46 2041 40 41 59 125 125 125 621 621 496 40 40 2028 61 2024 46 2029 40 2027 44 2030 46 2031 41 41 631 45 1501 41 123 2032 61 2024 46 2050 40 1500 44 2028 43 2027 46 2051 41 59 2024 61 2024 46 2050 40 2028 43 2027 46 2051 41 59 489 40 490 2035 61 418 2036 40 2032 41 41 489 40 490 2037 61 2038 46 2039 40 2035 44 2020 41 41 123 2037 46 2052 40 41 59 392 40 2037 46 2053 40 648 41 605 404 46 2054 40 2037 46 2055 40 41 44 430 490 2056 41 41 123 2017 46 2057 46 2058 61 2059 46 2060 40 2056 44 2017 46 2057 46 2058 633 2056 41 59 125 125 125 125 329 40 2061 41 123 125 125 612 438 431 492 2062 40 2063 2064 44 2016 60 2002 62 2065 41 123 490 2017 61 2065 46 2066 59 464 40 2064 46 2067 41 123 328 648 58 123 490 2068 61 2064 46 2069 40 41 59 392 40 33 461 46 2070 40 2068 41 41 123 392 40 404 46 2071 40 2068 44 430 490 2072 41 41 123 2017 46 2073 61 2072 59 125 125 325 59 125 328 648 58 123 490 2074 61 2064 46 2075 40 41 59 392 40 33 461 46 2076 40 2074 41 41 123 392 40 404 46 2077 40 2074 44 430 490 2078 41 41 123 2017 46 2079 61 2078 59 125 125 325 59 125 328 648 58 123 490 2080 61 2064 46 2081 40 41 59 392 40 33 461 46 2082 40 2080 41 41 123 392 40 404 46 2083 40 2080 44 430 490 2084 41 41 123 2017 46 2085 61 2084 59 125 125 325 59 125 328 648 58 123 490 2086 61 2064 46 2087 40 41 59 392 40 33 461 46 2088 40 2086 41 41 123 621 392 40 404 46 2089 40 2086 44 2090 46 2091 44 2092 46 2093 44 430 490 2094 41 41 123 2017 46 2095 61 2094 59 125 125 325 59 125 328 648 58 123 490 2096 61 2064 46 2097 40 41 59 392 40 33 461 46 2098 40 2096 41 41 123 621 392 40 404 46 2099 40 2096 44 2100 46 2101 44 2102 46 2103 44 430 490 2104 41 41 123 2017 46 2105 61 2104 59 125 125 325 59 125 328 648 58 123 490 2106 61 2064 46 2107 40 41 59 392 40 33 461 46 2108 40 2106 41 41 123 621 392 40 404 46 2109 40 2106 44 2110 46 2111 44 2112 46 2113 44 430 490 2114 41 41 123 2017 46 2115 61 2114 59 125 125 325 59 125 328 648 58 123 490 2116 61 2064 46 2117 40 41 59 392 40 33 461 46 2118 40 2116 41 41 123 621 392 40 404 46 2119 40 2116 44 2120 46 2121 44 2122 46 2123 44 430 490 2124 41 41 123 2017 46 2125 61 2124 59 125 125 325 59 125 328 648 58 123 490 2126 61 2064 46 2127 40 41 59 392 40 33 461 46 2128 40 2126 41 41 123 621 392 40 404 46 2129 40 2126 44 2130 46 2131 44 2132 46 2133 44 430 490 2134 41 41 123 2017 46 2135 61 2134 59 125 125 325 59 125 328 648 58 123 490 2136 61 2064 46 2137 40 41 59 392 40 33 461 46 2138 40 2136 41 41 123 2017 46 2139 61 2136 59 125 325 59 125 349 58 320 46 2062 40 2064 44 2065 41 59 325 59 125 125 125 
79732,C#,"    public abstract class Wallet
    {
        /// <summary>
        /// The <see cref=""Neo.ProtocolSettings""/> to be used by the wallet.
        /// </summary>
        public ProtocolSettings ProtocolSettings { get; }

        /// <summary>
        /// The name of the wallet.
        /// </summary>
        public abstract string Name { get; }

        /// <summary>
        /// The path of the wallet.
        /// </summary>
        public string Path { get; }

        /// <summary>
        /// The version of the wallet.
        /// </summary>
        public abstract Version Version { get; }

        /// <summary>
        /// Changes the password of the wallet.
        /// </summary>
        /// <param name=""oldPassword"">The old password of the wallet.</param>
        /// <param name=""newPassword"">The new password to be used.</param>
        /// <returns><see langword=""true""/> if the password is changed successfully; otherwise, <see langword=""false""/>.</returns>
        public abstract bool ChangePassword(string oldPassword, string newPassword);

        /// <summary>
        /// Determines whether the specified account is included in the wallet.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns><see langword=""true""/> if the account is included in the wallet; otherwise, <see langword=""false""/>.</returns>
        public abstract bool Contains(UInt160 scriptHash);

        /// <summary>
        /// Creates a standard account with the specified private key.
        /// </summary>
        /// <param name=""privateKey"">The private key of the account.</param>
        /// <returns>The created account.</returns>
        public abstract WalletAccount CreateAccount(byte[] privateKey);

        /// <summary>
        /// Creates a contract account for the wallet.
        /// </summary>
        /// <param name=""contract"">The contract of the account.</param>
        /// <param name=""key"">The private key of the account.</param>
        /// <returns>The created account.</returns>
        public abstract WalletAccount CreateAccount(Contract contract, KeyPair key = null);

        /// <summary>
        /// Creates a watch-only account for the wallet.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns>The created account.</returns>
        public abstract WalletAccount CreateAccount(UInt160 scriptHash);

        /// <summary>
        /// Deletes the entire database of the wallet.
        /// </summary>
        public abstract void Delete();

        /// <summary>
        /// Deletes an account from the wallet.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns><see langword=""true""/> if the account is removed; otherwise, <see langword=""false""/>.</returns>
        public abstract bool DeleteAccount(UInt160 scriptHash);

        /// <summary>
        /// Gets the account with the specified hash.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns>The account with the specified hash.</returns>
        public abstract WalletAccount GetAccount(UInt160 scriptHash);

        /// <summary>
        /// Gets all the accounts from the wallet.
        /// </summary>
        /// <returns>All accounts in the wallet.</returns>
        public abstract IEnumerable<WalletAccount> GetAccounts();

        /// <summary>
        /// Initializes a new instance of the <see cref=""Wallet""/> class.
        /// </summary>
        /// <param name=""path"">The path of the wallet file.</param>
        /// <param name=""settings"">The <see cref=""Neo.ProtocolSettings""/> to be used by the wallet.</param>
        protected Wallet(string path, ProtocolSettings settings)
        {
            this.ProtocolSettings = settings;
            this.Path = path;
        }

        /// <summary>
        /// Creates a standard account for the wallet.
        /// </summary>
        /// <returns>The created account.</returns>
        public WalletAccount CreateAccount()
        {
            byte[] privateKey = new byte[32];
        generate:
            try
            {
                using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
                {
                    rng.GetBytes(privateKey);
                }
                return CreateAccount(privateKey);
            }
            catch (ArgumentException)
            {
                goto generate;
            }
            finally
            {
                Array.Clear(privateKey, 0, privateKey.Length);
            }
        }

        /// <summary>
        /// Creates a contract account for the wallet.
        /// </summary>
        /// <param name=""contract"">The contract of the account.</param>
        /// <param name=""privateKey"">The private key of the account.</param>
        /// <returns>The created account.</returns>
        public WalletAccount CreateAccount(Contract contract, byte[] privateKey)
        {
            if (privateKey == null) return CreateAccount(contract);
            return CreateAccount(contract, new KeyPair(privateKey));
        }

        private static List<(UInt160 Account, BigInteger Value)> FindPayingAccounts(List<(UInt160 Account, BigInteger Value)> orderedAccounts, BigInteger amount)
        {
            var result = new List<(UInt160 Account, BigInteger Value)>();
            BigInteger sum_balance = orderedAccounts.Select(p => p.Value).Sum();
            if (sum_balance == amount)
            {
                result.AddRange(orderedAccounts);
                orderedAccounts.Clear();
            }
            else
            {
                for (int i = 0; i < orderedAccounts.Count; i++)
                {
                    if (orderedAccounts[i].Value < amount)
                        continue;
                    if (orderedAccounts[i].Value == amount)
                    {
                        result.Add(orderedAccounts[i]);
                        orderedAccounts.RemoveAt(i);
                    }
                    else
                    {
                        result.Add((orderedAccounts[i].Account, amount));
                        orderedAccounts[i] = (orderedAccounts[i].Account, orderedAccounts[i].Value - amount);
                    }
                    break;
                }
                if (result.Count == 0)
                {
                    int i = orderedAccounts.Count - 1;
                    while (orderedAccounts[i].Value <= amount)
                    {
                        result.Add(orderedAccounts[i]);
                        amount -= orderedAccounts[i].Value;
                        orderedAccounts.RemoveAt(i);
                        i--;
                    }
                    if (amount > 0)
                    {
                        for (i = 0; i < orderedAccounts.Count; i++)
                        {
                            if (orderedAccounts[i].Value < amount)
                                continue;
                            if (orderedAccounts[i].Value == amount)
                            {
                                result.Add(orderedAccounts[i]);
                                orderedAccounts.RemoveAt(i);
                            }
                            else
                            {
                                result.Add((orderedAccounts[i].Account, amount));
                                orderedAccounts[i] = (orderedAccounts[i].Account, orderedAccounts[i].Value - amount);
                            }
                            break;
                        }
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Gets the account with the specified public key.
        /// </summary>
        /// <param name=""pubkey"">The public key of the account.</param>
        /// <returns>The account with the specified public key.</returns>
        public WalletAccount GetAccount(ECPoint pubkey)
        {
            return GetAccount(Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash());
        }

        /// <summary>
        /// Gets the available balance for the specified asset in the wallet.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""asset_id"">The id of the asset.</param>
        /// <returns>The available balance for the specified asset.</returns>
        public BigDecimal GetAvailable(DataCache snapshot, UInt160 asset_id)
        {
            UInt160[] accounts = GetAccounts().Where(p => !p.WatchOnly).Select(p => p.ScriptHash).ToArray();
            return GetBalance(snapshot, asset_id, accounts);
        }

        /// <summary>
        /// Gets the balance for the specified asset in the wallet.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""asset_id"">The id of the asset.</param>
        /// <param name=""accounts"">The accounts to be counted.</param>
        /// <returns>The balance for the specified asset.</returns>
        public BigDecimal GetBalance(DataCache snapshot, UInt160 asset_id, params UInt160[] accounts)
        {
            byte[] script;
            using (ScriptBuilder sb = new())
            {
                sb.EmitPush(0);
                foreach (UInt160 account in accounts)
                {
                    sb.EmitDynamicCall(asset_id, ""balanceOf"", CallFlags.ReadOnly, account);
                    sb.Emit(OpCode.ADD);
                }
                sb.EmitDynamicCall(asset_id, ""decimals"", CallFlags.ReadOnly);
                script = sb.ToArray();
            }
            using ApplicationEngine engine = ApplicationEngine.Run(script, snapshot, settings: ProtocolSettings, gas: 0_60000000L * accounts.Length);
            if (engine.State == VMState.FAULT)
                return new BigDecimal(BigInteger.Zero, 0);
            byte decimals = (byte)engine.ResultStack.Pop().GetInteger();
            BigInteger amount = engine.ResultStack.Pop().GetInteger();
            return new BigDecimal(amount, decimals);
        }

        private static byte[] Decrypt(byte[] data, byte[] key)
        {
            using Aes aes = Aes.Create();
            aes.Key = key;
            aes.Mode = CipherMode.ECB;
            aes.Padding = PaddingMode.None;
            using ICryptoTransform decryptor = aes.CreateDecryptor();
            return decryptor.TransformFinalBlock(data, 0, data.Length);
        }

        /// <summary>
        /// Decodes a private key from the specified NEP-2 string.
        /// </summary>
        /// <param name=""nep2"">The NEP-2 string to be decoded.</param>
        /// <param name=""passphrase"">The passphrase of the private key.</param>
        /// <param name=""version"">The address version of NEO system.</param>
        /// <param name=""N"">The N field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""r"">The R field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""p"">The P field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <returns>The decoded private key.</returns>
        public static byte[] GetPrivateKeyFromNEP2(string nep2, string passphrase, byte version, int N = 16384, int r = 8, int p = 8)
        {
            if (nep2 == null) throw new ArgumentNullException(nameof(nep2));
            if (passphrase == null) throw new ArgumentNullException(nameof(passphrase));
            byte[] data = nep2.Base58CheckDecode();
            if (data.Length != 39 || data[0] != 0x01 || data[1] != 0x42 || data[2] != 0xe0)
                throw new FormatException();
            byte[] addresshash = new byte[4];
            Buffer.BlockCopy(data, 3, addresshash, 0, 4);
            byte[] datapassphrase = Encoding.UTF8.GetBytes(passphrase);
            byte[] derivedkey = SCrypt.Generate(datapassphrase, addresshash, N, r, p, 64);
            Array.Clear(datapassphrase, 0, datapassphrase.Length);
            byte[] derivedhalf1 = derivedkey[..32];
            byte[] derivedhalf2 = derivedkey[32..];
            Array.Clear(derivedkey, 0, derivedkey.Length);
            byte[] encryptedkey = new byte[32];
            Buffer.BlockCopy(data, 7, encryptedkey, 0, 32);
            Array.Clear(data, 0, data.Length);
            byte[] prikey = XOR(Decrypt(encryptedkey, derivedhalf2), derivedhalf1);
            Array.Clear(derivedhalf1, 0, derivedhalf1.Length);
            Array.Clear(derivedhalf2, 0, derivedhalf2.Length);
            ECPoint pubkey = Cryptography.ECC.ECCurve.Secp256r1.G * prikey;
            UInt160 script_hash = Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash();
            string address = script_hash.ToAddress(version);
            if (!Encoding.ASCII.GetBytes(address).Sha256().Sha256().AsSpan(0, 4).SequenceEqual(addresshash))
                throw new FormatException();
            return prikey;
        }

        /// <summary>
        /// Decodes a private key from the specified WIF string.
        /// </summary>
        /// <param name=""wif"">The WIF string to be decoded.</param>
        /// <returns>The decoded private key.</returns>
        public static byte[] GetPrivateKeyFromWIF(string wif)
        {
            if (wif is null) throw new ArgumentNullException(nameof(wif));
            byte[] data = wif.Base58CheckDecode();
            if (data.Length != 34 || data[0] != 0x80 || data[33] != 0x01)
                throw new FormatException();
            byte[] privateKey = new byte[32];
            Buffer.BlockCopy(data, 1, privateKey, 0, privateKey.Length);
            Array.Clear(data, 0, data.Length);
            return privateKey;
        }

        private static Signer[] GetSigners(UInt160 sender, Signer[] cosigners)
        {
            for (int i = 0; i < cosigners.Length; i++)
            {
                if (cosigners[i].Account.Equals(sender))
                {
                    if (i == 0) return cosigners;
                    List<Signer> list = new(cosigners);
                    list.RemoveAt(i);
                    list.Insert(0, cosigners[i]);
                    return list.ToArray();
                }
            }
            return cosigners.Prepend(new Signer
            {
                Account = sender,
                Scopes = WitnessScope.None
            }).ToArray();
        }

        /// <summary>
        /// Imports an account from a <see cref=""X509Certificate2""/>.
        /// </summary>
        /// <param name=""cert"">The <see cref=""X509Certificate2""/> to import.</param>
        /// <returns>The imported account.</returns>
        public virtual WalletAccount Import(X509Certificate2 cert)
        {
            byte[] privateKey;
            using (ECDsa ecdsa = cert.GetECDsaPrivateKey())
            {
                privateKey = ecdsa.ExportParameters(true).D;
            }
            WalletAccount account = CreateAccount(privateKey);
            Array.Clear(privateKey, 0, privateKey.Length);
            return account;
        }

        /// <summary>
        /// Imports an account from the specified WIF string.
        /// </summary>
        /// <param name=""wif"">The WIF string to import.</param>
        /// <returns>The imported account.</returns>
        public virtual WalletAccount Import(string wif)
        {
            byte[] privateKey = GetPrivateKeyFromWIF(wif);
            WalletAccount account = CreateAccount(privateKey);
            Array.Clear(privateKey, 0, privateKey.Length);
            return account;
        }

        /// <summary>
        /// Imports an account from the specified NEP-2 string.
        /// </summary>
        /// <param name=""nep2"">The NEP-2 string to import.</param>
        /// <param name=""passphrase"">The passphrase of the private key.</param>
        /// <param name=""N"">The N field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""r"">The R field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""p"">The P field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <returns>The imported account.</returns>
        public virtual WalletAccount Import(string nep2, string passphrase, int N = 16384, int r = 8, int p = 8)
        {
            byte[] privateKey = GetPrivateKeyFromNEP2(nep2, passphrase, ProtocolSettings.AddressVersion, N, r, p);
            WalletAccount account = CreateAccount(privateKey);
            Array.Clear(privateKey, 0, privateKey.Length);
            return account;
        }

        /// <summary>
        /// Makes a transaction to transfer assets.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""outputs"">The array of <see cref=""TransferOutput""/> that contain the asset, amount, and targets of the transfer.</param>
        /// <param name=""from"">The account to transfer from.</param>
        /// <param name=""cosigners"">The cosigners to be added to the transction.</param>
        /// <returns>The created transction.</returns>
        public Transaction MakeTransaction(DataCache snapshot, TransferOutput[] outputs, UInt160 from = null, Signer[] cosigners = null)
        {
            UInt160[] accounts;
            if (from is null)
            {
                accounts = GetAccounts().Where(p => !p.Lock && !p.WatchOnly).Select(p => p.ScriptHash).ToArray();
            }
            else
            {
                accounts = new[] { from };
            }
            Dictionary<UInt160, Signer> cosignerList = cosigners?.ToDictionary(p => p.Account) ?? new Dictionary<UInt160, Signer>();
            byte[] script;
            List<(UInt160 Account, BigInteger Value)> balances_gas = null;
            using (ScriptBuilder sb = new())
            {
                foreach (var (assetId, group, sum) in outputs.GroupBy(p => p.AssetId, (k, g) => (k, g, g.Select(p => p.Value.Value).Sum())))
                {
                    var balances = new List<(UInt160 Account, BigInteger Value)>();
                    foreach (UInt160 account in accounts)
                    {
                        using ScriptBuilder sb2 = new();
                        sb2.EmitDynamicCall(assetId, ""balanceOf"", CallFlags.ReadOnly, account);
                        using ApplicationEngine engine = ApplicationEngine.Run(sb2.ToArray(), snapshot, settings: ProtocolSettings);
                        if (engine.State != VMState.HALT)
                            throw new InvalidOperationException($""Execution for {assetId}.balanceOf('{account}' fault"");
                        BigInteger value = engine.ResultStack.Pop().GetInteger();
                        if (value.Sign > 0) balances.Add((account, value));
                    }
                    BigInteger sum_balance = balances.Select(p => p.Value).Sum();
                    if (sum_balance < sum)
                        throw new InvalidOperationException($""It does not have enough balance, expected: {sum} found: {sum_balance}"");
                    foreach (TransferOutput output in group)
                    {
                        balances = balances.OrderBy(p => p.Value).ToList();
                        var balances_used = FindPayingAccounts(balances, output.Value.Value);
                        foreach (var (account, value) in balances_used)
                        {
                            if (cosignerList.TryGetValue(account, out Signer signer))
                            {
                                if (signer.Scopes != WitnessScope.Global)
                                    signer.Scopes |= WitnessScope.CalledByEntry;
                            }
                            else
                            {
                                cosignerList.Add(account, new Signer
                                {
                                    Account = account,
                                    Scopes = WitnessScope.CalledByEntry
                                });
                            }
                            sb.EmitDynamicCall(output.AssetId, ""transfer"", account, output.ScriptHash, value, output.Data);
                            sb.Emit(OpCode.ASSERT);
                        }
                    }
                    if (assetId.Equals(NativeContract.GAS.Hash))
                        balances_gas = balances;
                }
                script = sb.ToArray();
            }
            if (balances_gas is null)
                balances_gas = accounts.Select(p => (Account: p, Value: NativeContract.GAS.BalanceOf(snapshot, p))).Where(p => p.Value.Sign > 0).ToList();

            return MakeTransaction(snapshot, script, cosignerList.Values.ToArray(), Array.Empty<TransactionAttribute>(), balances_gas);
        }

        /// <summary>
        /// Makes a transaction to run a smart contract.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""script"">The script to be loaded in the transaction.</param>
        /// <param name=""sender"">The sender of the transaction.</param>
        /// <param name=""cosigners"">The cosigners to be added to the transction.</param>
        /// <param name=""attributes"">The attributes to be added to the transction.</param>
        /// <param name=""maxGas"">The maximum gas that can be spent to execute the script.</param>
        /// <returns>The created transction.</returns>
        public Transaction MakeTransaction(DataCache snapshot, byte[] script, UInt160 sender = null, Signer[] cosigners = null, TransactionAttribute[] attributes = null, long maxGas = ApplicationEngine.TestModeGas)
        {
            UInt160[] accounts;
            if (sender is null)
            {
                accounts = GetAccounts().Where(p => !p.Lock && !p.WatchOnly).Select(p => p.ScriptHash).ToArray();
            }
            else
            {
                accounts = new[] { sender };
            }
            var balances_gas = accounts.Select(p => (Account: p, Value: NativeContract.GAS.BalanceOf(snapshot, p))).Where(p => p.Value.Sign > 0).ToList();
            return MakeTransaction(snapshot, script, cosigners ?? Array.Empty<Signer>(), attributes ?? Array.Empty<TransactionAttribute>(), balances_gas, maxGas);
        }

        private Transaction MakeTransaction(DataCache snapshot, byte[] script, Signer[] cosigners, TransactionAttribute[] attributes, List<(UInt160 Account, BigInteger Value)> balances_gas, long maxGas = ApplicationEngine.TestModeGas)
        {
            Random rand = new();
            foreach (var (account, value) in balances_gas)
            {
                Transaction tx = new()
                {
                    Version = 0,
                    Nonce = (uint)rand.Next(),
                    Script = script,
                    ValidUntilBlock = NativeContract.Ledger.CurrentIndex(snapshot) + ProtocolSettings.MaxValidUntilBlockIncrement,
                    Signers = GetSigners(account, cosigners),
                    Attributes = attributes,
                };

                // will try to execute 'transfer' script to check if it works 
                using (ApplicationEngine engine = ApplicationEngine.Run(script, snapshot.CreateSnapshot(), tx, settings: ProtocolSettings, gas: maxGas))
                {
                    if (engine.State == VMState.FAULT)
                    {
                        throw new InvalidOperationException($""Failed execution for '{Convert.ToBase64String(script)}'"", engine.FaultException);
                    }
                    tx.SystemFee = engine.GasConsumed;
                }

                tx.NetworkFee = CalculateNetworkFee(snapshot, tx);
                if (value >= tx.SystemFee + tx.NetworkFee) return tx;
            }
            throw new InvalidOperationException(""Insufficient GAS"");
        }

        /// <summary>
        /// Calculates the network fee for the specified transaction.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""tx"">The transaction to calculate.</param>
        /// <returns>The network fee of the transaction.</returns>
        public long CalculateNetworkFee(DataCache snapshot, Transaction tx)
        {
            UInt160[] hashes = tx.GetScriptHashesForVerifying(snapshot);

            // base size for transaction: includes const_header + signers + attributes + script + hashes
            int size = Transaction.HeaderSize + tx.Signers.GetVarSize() + tx.Attributes.GetVarSize() + tx.Script.GetVarSize() + IO.Helper.GetVarSize(hashes.Length);
            uint exec_fee_factor = NativeContract.Policy.GetExecFeeFactor(snapshot);
            long networkFee = 0;
            int index = -1;
            foreach (UInt160 hash in hashes)
            {
                index++;
                byte[] witness_script = GetAccount(hash)?.Contract?.Script;
                byte[] invocationScript = null;

                if (tx.Witnesses != null)
                {
                    if (witness_script is null)
                    {
                        // Try to find the script in the witnesses
                        Witness witness = tx.Witnesses[index];
                        witness_script = witness?.VerificationScript;

                        if (witness_script is null || witness_script.Length == 0)
                        {
                            // Then it's a contract-based witness, so try to get the corresponding invocation script for it
                            invocationScript = witness?.InvocationScript;
                        }
                    }
                }

                if (witness_script is null || witness_script.Length == 0)
                {
                    var contract = NativeContract.ContractManagement.GetContract(snapshot, hash);
                    if (contract is null)
                        throw new ArgumentException($""The smart contract or address {hash} is not found"");
                    var md = contract.Manifest.Abi.GetMethod(""verify"", -1);
                    if (md is null)
                        throw new ArgumentException($""The smart contract {contract.Hash} haven't got verify method"");
                    if (md.ReturnType != ContractParameterType.Boolean)
                        throw new ArgumentException(""The verify method doesn't return boolean value."");
                    if (md.Parameters.Length > 0 && invocationScript is null)
                        throw new ArgumentException(""The verify method requires parameters that need to be passed via the witness' invocation script."");

                    // Empty verification and non-empty invocation scripts
                    var invSize = invocationScript != null ? invocationScript.GetVarSize() : Array.Empty<byte>().GetVarSize();
                    size += Array.Empty<byte>().GetVarSize() + invSize;

                    // Check verify cost
                    using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot.CreateSnapshot(), settings: ProtocolSettings);
                    engine.LoadContract(contract, md, CallFlags.ReadOnly);
                    if (invocationScript != null) engine.LoadScript(invocationScript, configureState: p => p.CallFlags = CallFlags.None);
                    if (engine.Execute() == VMState.FAULT) throw new ArgumentException($""Smart contract {contract.Hash} verification fault."");
                    if (!engine.ResultStack.Pop().GetBoolean()) throw new ArgumentException($""Smart contract {contract.Hash} returns false."");

                    networkFee += engine.GasConsumed;
                }
                else if (witness_script.IsSignatureContract())
                {
                    size += 67 + witness_script.GetVarSize();
                    networkFee += exec_fee_factor * SignatureContractCost();
                }
                else if (witness_script.IsMultiSigContract(out int m, out int n))
                {
                    int size_inv = 66 * m;
                    size += IO.Helper.GetVarSize(size_inv) + size_inv + witness_script.GetVarSize();
                    networkFee += exec_fee_factor * MultiSignatureContractCost(m, n);
                }
                else
                {
                    //We can support more contract types in the future.
                }
            }
            networkFee += size * NativeContract.Policy.GetFeePerByte(snapshot);
            return networkFee;
        }

        /// <summary>
        /// Signs the <see cref=""IVerifiable""/> in the specified <see cref=""ContractParametersContext""/> with the wallet.
        /// </summary>
        /// <param name=""context"">The <see cref=""ContractParametersContext""/> to be used.</param>
        /// <returns><see langword=""true""/> if the signature is successfully added to the context; otherwise, <see langword=""false""/>.</returns>
        public bool Sign(ContractParametersContext context)
        {
            if (context.Network != ProtocolSettings.Network) return false;
            bool fSuccess = false;
            foreach (UInt160 scriptHash in context.ScriptHashes)
            {
                WalletAccount account = GetAccount(scriptHash);

                if (account != null)
                {
                    // Try to sign self-contained multiSig

                    Contract multiSigContract = account.Contract;

                    if (multiSigContract != null &&
                        multiSigContract.Script.IsMultiSigContract(out int m, out ECPoint[] points))
                    {
                        foreach (var point in points)
                        {
                            account = GetAccount(point);
                            if (account?.HasKey != true) continue;
                            KeyPair key = account.GetKey();
                            byte[] signature = context.Verifiable.Sign(key, context.Network);
                            fSuccess |= context.AddSignature(multiSigContract, key.PublicKey, signature);
                            if (fSuccess) m--;
                            if (context.Completed || m <= 0) break;
                        }
                        continue;
                    }
                    else if (account.HasKey)
                    {
                        // Try to sign with regular accounts
                        KeyPair key = account.GetKey();
                        byte[] signature = context.Verifiable.Sign(key, context.Network);
                        fSuccess |= context.AddSignature(account.Contract, key.PublicKey, signature);
                        continue;
                    }
                }

                // Try Smart contract verification

                var contract = NativeContract.ContractManagement.GetContract(context.Snapshot, scriptHash);

                if (contract != null)
                {
                    var deployed = new DeployedContract(contract);

                    // Only works with verify without parameters

                    if (deployed.ParameterList.Length == 0)
                    {
                        fSuccess |= context.Add(deployed);
                    }
                }
            }

            return fSuccess;
        }

        /// <summary>
        /// Checks that the specified password is correct for the wallet.
        /// </summary>
        /// <param name=""password"">The password to be checked.</param>
        /// <returns><see langword=""true""/> if the password is correct; otherwise, <see langword=""false""/>.</returns>
        public abstract bool VerifyPassword(string password);
    }",1,439 305 334 2000 123 612 439 2001 2001 123 2002 59 125 612 439 305 461 2003 123 2004 59 125 612 439 461 2005 123 2006 59 125 612 439 305 2007 2007 123 2008 59 125 612 439 305 323 2009 40 461 2010 44 461 2011 41 59 612 439 305 323 2012 40 2013 2014 41 59 612 439 305 2015 2016 40 326 91 93 2017 41 59 612 439 305 2015 2016 40 2018 2019 44 2020 2021 61 424 41 59 612 439 305 2015 2016 40 2013 2014 41 59 612 439 305 492 2022 40 41 59 612 439 305 323 2023 40 2013 2014 41 59 612 439 305 2015 2024 40 2013 2014 41 59 612 439 305 2025 60 2015 62 2026 40 41 59 612 438 2000 40 461 2027 44 2001 2028 41 123 467 46 2001 61 2028 59 467 46 2005 61 2027 59 125 612 439 2015 2016 40 41 123 326 91 93 2017 61 418 326 91 1503 93 59 2029 58 474 123 489 40 2030 2031 61 2030 46 2032 40 41 41 123 2031 46 2033 40 2017 41 59 125 450 2016 40 2017 41 59 125 329 40 2034 41 123 391 2029 59 125 382 123 2035 46 2036 40 2017 44 1500 44 2017 46 2037 41 59 125 125 612 439 2015 2016 40 2018 2019 44 326 91 93 2017 41 123 392 40 2017 614 424 41 450 2016 40 2019 41 59 450 2016 40 2019 44 418 2020 40 2017 41 41 59 125 437 457 2038 60 40 2013 2039 44 2040 2041 41 62 2042 40 2038 60 40 2013 2039 44 2040 2041 41 62 2043 44 2040 2044 41 123 490 2045 61 418 2038 60 40 2013 2039 44 2040 2041 41 62 40 41 59 2040 2046 61 2043 46 2047 40 2048 619 2048 46 2041 41 46 2049 40 41 59 392 40 2046 614 2044 41 123 2045 46 2050 40 2043 41 59 2043 46 2051 40 41 59 125 360 123 385 40 404 2052 61 1500 59 2052 60 2043 46 2053 59 2052 637 41 123 392 40 2043 91 2052 93 46 2041 60 2044 41 344 59 392 40 2043 91 2052 93 46 2041 614 2044 41 123 2045 46 2054 40 2043 91 2052 93 41 59 2043 46 2055 40 2052 41 59 125 360 123 2045 46 2056 40 40 2043 91 2052 93 46 2039 44 2044 41 41 59 2043 91 2052 93 61 40 2043 91 2052 93 46 2039 44 2043 91 2052 93 46 2041 45 2044 41 59 125 325 59 125 392 40 2045 46 2053 614 1500 41 123 404 2052 61 2043 46 2053 45 1501 59 496 40 2043 91 2052 93 46 2041 620 2044 41 123 2045 46 2057 40 2043 91 2052 93 41 59 2044 628 2043 91 2052 93 46 2041 59 2043 46 2058 40 2052 41 59 2052 629 59 125 392 40 2044 62 1500 41 123 385 40 2052 61 1500 59 2052 60 2043 46 2053 59 2052 637 41 123 392 40 2043 91 2052 93 46 2041 60 2044 41 344 59 392 40 2043 91 2052 93 46 2041 614 2044 41 123 2045 46 2059 40 2043 91 2052 93 41 59 2043 46 2060 40 2052 41 59 125 360 123 2045 46 2061 40 40 2043 91 2052 93 46 2039 44 2044 41 41 59 2043 91 2052 93 61 40 2043 91 2052 93 46 2039 44 2043 91 2052 93 46 2041 45 2044 41 59 125 325 59 125 125 125 125 450 2045 59 125 612 439 2015 2024 40 2062 2063 41 123 450 2024 40 2018 46 2064 40 2063 41 46 2065 40 41 41 59 125 612 439 2066 2067 40 2068 2069 44 2013 2070 41 123 2013 91 93 2071 61 2026 40 41 46 2072 40 2073 619 33 2073 46 2074 41 46 2075 40 2073 619 2073 46 2076 41 46 2077 40 41 59 450 2078 40 2069 44 2070 44 2071 41 59 125 612 439 2066 2079 40 2068 2069 44 2013 2070 44 433 2013 91 93 2080 41 123 326 91 93 2081 59 489 40 2082 2083 61 418 40 41 41 123 2083 46 2084 40 1500 41 59 386 40 2013 2085 398 2080 41 123 2083 46 2086 40 2070 44 648 44 2087 46 2088 44 2085 41 59 2083 46 2089 40 2090 46 2091 41 59 125 2083 46 2092 40 2070 44 648 44 2093 46 2094 41 59 2081 61 2083 46 2095 40 41 59 125 489 2096 2097 61 2096 46 2098 40 2081 44 2069 44 2028 58 2001 44 2099 58 1500 42 2080 46 2100 41 59 392 40 2097 46 2101 614 2102 46 2103 41 450 418 2066 40 2040 46 2104 44 1500 41 59 326 2105 61 40 326 41 2097 46 2106 46 2107 40 41 46 2108 40 41 59 2040 2044 61 2097 46 2106 46 2107 40 41 46 2108 40 41 59 450 418 2066 40 2044 44 2105 41 59 125 437 457 326 91 93 2109 40 326 91 93 2110 44 326 91 93 2021 41 123 489 2111 2112 61 2111 46 2113 40 41 59 2112 46 2114 61 2021 59 2112 46 2115 61 2116 46 2117 59 2112 46 2118 61 2119 46 303 59 489 2120 2121 61 2112 46 2122 40 41 59 450 2121 46 2123 40 2110 44 1500 44 2110 46 2124 41 59 125 612 439 457 326 91 93 2125 40 461 2126 44 461 2127 44 326 2128 44 404 2129 61 1506 44 404 2130 61 1502 44 404 2131 61 1502 41 123 392 40 2126 614 424 41 469 418 2132 40 2133 40 2126 41 41 59 392 40 2127 614 424 41 469 418 2132 40 2133 40 2127 41 41 59 326 91 93 2110 61 2126 46 2134 40 41 59 392 40 2110 46 2135 631 1503 606 2110 91 1500 93 631 1501 606 2110 91 1501 93 631 1503 606 2110 91 1502 93 631 1504 41 469 418 2136 40 41 59 326 91 93 2137 61 418 326 91 1502 93 59 2138 46 2139 40 2110 44 1502 44 2137 44 1500 44 1502 41 59 326 91 93 2140 61 2141 46 2142 46 2143 40 2127 41 59 326 91 93 2144 61 2145 46 2146 40 2140 44 2137 44 2129 44 2130 44 2131 44 1503 41 59 2147 46 2148 40 2140 44 1500 44 2140 46 2135 41 59 326 91 93 2149 61 2144 91 46 46 1503 93 59 326 91 93 2150 61 2144 91 1503 93 59 2147 46 2148 40 2144 44 1500 44 2144 46 2135 41 59 326 91 93 2151 61 418 326 91 1503 93 59 2138 46 2139 40 2110 44 1502 44 2151 44 1500 44 1503 41 59 2147 46 2148 40 2110 44 1500 44 2110 46 2135 41 59 326 91 93 2152 61 2153 40 2109 40 2151 44 2150 41 44 2149 41 59 2147 46 2148 40 2149 44 1500 44 2149 46 2135 41 59 2147 46 2148 40 2150 44 1500 44 2150 46 2135 41 59 2062 2063 61 2154 46 2155 46 2156 46 2157 46 2158 42 2152 59 2013 2159 61 2018 46 2160 40 2063 41 46 2161 40 41 59 461 2162 61 2159 46 2163 40 2128 41 59 392 40 33 2141 46 2164 46 2143 40 2162 41 46 2165 40 41 46 2165 40 41 46 2166 40 1500 44 1502 41 46 2167 40 2137 41 41 469 418 2136 40 41 59 450 2152 59 125 612 439 457 326 91 93 2168 40 461 2169 41 123 392 40 2169 407 424 41 469 418 2170 40 2171 40 2169 41 41 59 326 91 93 2110 61 2169 46 2172 40 41 59 392 40 2110 46 2173 631 1503 606 2110 91 1500 93 631 1504 606 2110 91 1503 93 631 1501 41 469 418 2174 40 41 59 326 91 93 2017 61 418 326 91 1503 93 59 2175 46 2176 40 2110 44 1501 44 2017 44 1500 44 2017 46 2173 41 59 2177 46 2178 40 2110 44 1500 44 2110 46 2173 41 59 450 2017 59 125 437 457 2179 91 93 2180 40 2013 2181 44 2179 91 93 2182 41 123 385 40 404 2183 61 1500 59 2183 60 2182 46 2184 59 2183 637 41 123 392 40 2182 91 2183 93 46 2039 46 2185 40 2181 41 41 123 392 40 2183 614 1500 41 450 2182 59 2038 60 2179 62 411 61 418 40 2182 41 59 411 46 2186 40 2183 41 59 411 46 2187 40 1500 44 2182 91 2183 93 41 59 450 411 46 2188 40 41 59 125 125 450 2182 46 2189 40 418 2179 123 2039 61 2181 44 2190 61 2191 46 303 125 41 46 2192 40 41 59 125 612 439 491 2015 2193 40 2194 2195 41 123 326 91 93 2017 59 489 40 2196 2197 61 2195 46 2198 40 41 41 123 2017 61 2197 46 2199 40 473 41 46 2200 59 125 2015 2201 61 2016 40 2017 41 59 2202 46 2203 40 2017 44 1500 44 2017 46 2204 41 59 450 2201 59 125 612 439 491 2015 2193 40 461 2169 41 123 326 91 93 2017 61 2168 40 2169 41 59 2015 2205 61 2016 40 2017 41 59 2206 46 2207 40 2017 44 1500 44 2017 46 2208 41 59 450 2205 59 125 612 439 491 2015 2193 40 461 2126 44 461 2127 44 404 2129 61 1506 44 404 2130 61 1502 44 404 2131 61 1502 41 123 326 91 93 2017 61 2125 40 2126 44 2127 44 2001 46 2209 44 2129 44 2130 44 2131 41 59 2015 2210 61 2016 40 2017 41 59 2211 46 2212 40 2017 44 1500 44 2017 46 2213 41 59 450 2210 59 125 612 439 2214 2215 40 2068 2069 44 2216 91 93 2217 44 2013 388 61 424 44 2179 91 93 2182 61 424 41 123 2013 91 93 2080 59 392 40 388 407 424 41 123 2080 61 2026 40 41 46 2218 40 2131 619 33 2131 46 2219 605 33 2131 46 2220 41 46 2221 40 2131 619 2131 46 2222 41 46 2223 40 41 59 125 360 123 2080 61 418 91 93 123 388 125 59 125 2224 60 2013 44 2179 62 2225 61 2182 634 2226 40 2131 619 2131 46 2039 41 633 418 2224 60 2013 44 2179 62 40 41 59 326 91 93 2227 59 2038 60 40 2013 2039 44 2040 2041 41 62 2228 61 424 59 489 40 2229 2230 61 418 40 41 41 123 386 40 490 40 2231 44 2232 44 2233 41 398 2217 46 2234 40 2131 619 2131 46 2235 44 40 2236 44 2237 41 619 40 2236 44 2237 44 2237 46 2238 40 2131 619 2131 46 2041 46 2041 41 46 2239 40 41 41 41 41 123 490 2240 61 418 2038 60 40 2013 2039 44 2040 2041 41 62 40 41 59 386 40 2013 2241 398 2080 41 123 489 2229 2242 61 418 40 41 59 2242 46 2243 40 2231 44 648 44 2244 46 2245 44 2241 41 59 489 2246 2247 61 2246 46 2248 40 2242 46 2249 40 41 44 2069 44 2028 58 2001 41 59 392 40 2247 46 2250 631 2251 46 2252 41 469 418 2253 40 36 648 41 59 2040 2254 61 2247 46 2255 46 2256 40 41 46 2257 40 41 59 392 40 2254 46 2258 62 1500 41 2240 46 2259 40 40 2241 44 2254 41 41 59 125 2040 2260 61 2240 46 2238 40 2131 619 2131 46 2041 41 46 2239 40 41 59 392 40 2260 60 2233 41 469 418 2261 40 36 648 41 59 386 40 2216 2262 398 2232 41 123 2240 61 2240 46 2263 40 2131 619 2131 46 2041 41 46 2264 40 41 59 490 2265 61 2042 40 2240 44 2262 46 2041 46 2041 41 59 386 40 490 40 2241 44 2266 41 398 2265 41 123 392 40 2225 46 2267 40 2241 44 430 2179 2268 41 41 123 392 40 2268 46 2269 631 2270 46 2271 41 2268 46 2269 635 2270 46 2272 59 125 360 123 2225 46 2273 40 2241 44 418 2179 123 2039 61 2241 44 2274 61 2275 46 2276 125 41 59 125 2230 46 2277 40 2262 46 2235 44 648 44 2241 44 2262 46 2278 44 2266 44 2262 46 2279 41 59 2230 46 2280 40 2281 46 2282 41 59 125 125 392 40 2231 46 2283 40 2284 46 2285 46 2286 41 41 2228 61 2240 59 125 2227 61 2230 46 2287 40 41 59 125 392 40 2228 407 424 41 2228 61 2080 46 2288 40 2131 619 40 2039 58 2131 44 2041 58 2289 46 2290 46 2291 40 2069 44 2131 41 41 41 46 2292 40 2131 619 2131 46 2041 46 2293 62 1500 41 46 2294 40 41 59 450 2215 40 2069 44 2227 44 2225 46 2295 46 2296 40 41 44 2297 46 2298 60 2299 62 40 41 44 2228 41 59 125 612 439 2214 2215 40 2068 2069 44 326 91 93 2300 44 2013 2181 61 424 44 2179 91 93 2182 61 424 44 2301 91 93 2302 61 424 44 413 2303 61 2304 46 2305 41 123 2013 91 93 2080 59 392 40 2181 407 424 41 123 2080 61 2026 40 41 46 2306 40 2131 619 33 2131 46 2307 605 33 2131 46 2308 41 46 2309 40 2131 619 2131 46 2310 41 46 2311 40 41 59 125 360 123 2080 61 418 91 93 123 2181 125 59 125 490 2312 61 2080 46 2313 40 2131 619 40 2039 58 2131 44 2041 58 2314 46 2315 46 2316 40 2069 44 2131 41 41 41 46 2317 40 2131 619 2131 46 2041 46 2318 62 1500 41 46 2319 40 41 59 450 2215 40 2069 44 2300 44 2182 633 2320 46 2321 60 2179 62 40 41 44 2302 633 2320 46 2321 60 2301 62 40 41 44 2312 44 2303 41 59 125 437 2214 2215 40 2068 2069 44 326 91 93 2300 44 2179 91 93 2182 44 2301 91 93 2302 44 2038 60 40 2013 2039 44 2040 2041 41 62 2322 44 413 2303 61 2304 46 2305 41 123 2323 2324 61 418 40 41 59 386 40 490 40 2325 44 2326 41 398 2322 41 123 2214 2327 61 418 40 41 123 2007 61 1500 44 2328 61 40 479 41 2324 46 2329 40 41 44 2330 61 2300 44 2331 61 2332 46 2333 46 2334 40 2069 41 43 2001 46 2335 44 2336 61 2180 40 2325 44 2182 41 44 2337 61 2302 44 125 59 621 489 40 2304 2338 61 2304 46 2339 40 2300 44 2069 46 2340 40 41 44 2327 44 2028 58 2001 44 2341 58 2303 41 41 123 392 40 2338 46 2342 614 2343 46 2344 41 123 469 418 2345 40 36 648 44 2338 46 2346 41 59 125 2327 46 2347 61 2338 46 2348 59 125 2327 46 2349 61 2350 40 2069 44 2327 41 59 392 40 2326 615 2327 46 2351 43 2327 46 2349 41 450 2327 59 125 469 418 2352 40 648 41 59 125 612 439 413 2353 40 2068 2069 44 2214 2354 41 123 2013 91 93 2355 61 2354 46 2356 40 2069 41 59 621 404 2357 61 2214 46 2358 43 2354 46 2359 46 2360 40 41 43 2354 46 2361 46 2360 40 41 43 2354 46 2362 46 2360 40 41 43 2363 46 2364 46 2360 40 2355 46 2365 41 59 479 2366 61 2367 46 2368 46 2369 40 2069 41 59 413 2370 61 1500 59 404 2371 61 45 1501 59 386 40 2013 2372 398 2355 41 123 2371 637 59 326 91 93 2373 61 2024 40 2372 41 634 2018 634 2362 59 326 91 93 2374 61 424 59 392 40 2354 46 2375 631 424 41 123 392 40 2373 407 424 41 123 621 2376 2377 61 2354 46 2375 91 2371 93 59 2373 61 2377 634 2378 59 392 40 2373 407 424 606 2373 46 2365 614 1500 41 123 621 2374 61 2377 634 2379 59 125 125 125 392 40 2373 407 424 606 2373 46 2365 614 1500 41 123 490 2019 61 2367 46 2380 46 2381 40 2069 44 2372 41 59 392 40 2019 407 424 41 469 418 2382 40 36 648 41 59 490 2383 61 2019 46 2384 46 2385 46 2386 40 648 44 45 1501 41 59 392 40 2383 407 424 41 469 418 2382 40 36 648 41 59 392 40 2383 46 2387 631 2388 46 2389 41 469 418 2382 40 648 41 59 392 40 2383 46 2390 46 2365 62 1500 605 2374 407 424 41 469 418 2382 40 648 41 59 621 490 2391 61 2374 631 424 63 2374 46 2360 40 41 58 2392 46 2393 60 326 62 40 41 46 2360 40 41 59 2357 636 2392 46 2393 60 326 62 40 41 46 2360 40 41 43 2391 59 621 489 2304 2394 61 2304 46 2395 40 2396 46 2397 44 2354 44 2069 46 2398 40 41 44 2028 58 2001 41 59 2394 46 2399 40 2019 44 2383 44 2400 46 2401 41 59 392 40 2374 631 424 41 2394 46 2402 40 2374 44 2403 58 2131 619 2131 46 2400 61 2400 46 303 41 59 392 40 2394 46 2404 40 41 614 2405 46 2406 41 469 418 2382 40 36 648 41 59 392 40 33 2394 46 2407 46 2408 40 41 46 2409 40 41 41 469 418 2382 40 36 648 41 59 2370 636 2394 46 2410 59 125 360 392 40 2373 46 2411 40 41 41 123 2357 636 1503 43 2373 46 2360 40 41 59 2370 636 2366 42 2412 40 41 59 125 360 392 40 2373 46 2413 40 430 404 2414 44 430 404 2415 41 41 123 404 2416 61 1503 42 2414 59 2357 636 2363 46 2364 46 2360 40 2416 41 43 2416 43 2373 46 2360 40 41 59 2370 636 2366 42 2417 40 2414 44 2415 41 59 125 360 123 621 125 125 2370 636 2357 42 2367 46 2368 46 2418 40 2069 41 59 450 2370 59 125 612 439 323 2419 40 2420 2421 41 123 392 40 2421 46 2422 631 2001 46 2422 41 450 380 59 323 2423 61 380 59 386 40 2013 2014 398 2421 46 2424 41 123 2015 2425 61 2024 40 2014 41 59 392 40 2425 631 424 41 123 621 2018 2426 61 2425 46 2018 59 392 40 2426 631 424 605 2426 46 2427 46 2428 40 430 404 2429 44 430 2062 91 93 2430 41 41 123 386 40 490 2431 398 2430 41 123 2425 61 2024 40 2431 41 59 392 40 2425 634 2432 631 473 41 344 59 2020 2021 61 2425 46 2433 40 41 59 326 91 93 2434 61 2421 46 2435 46 2419 40 2021 44 2421 46 2422 41 59 2423 635 2421 46 2436 40 2426 44 2021 46 2437 44 2434 41 59 392 40 2423 41 2429 629 59 392 40 2421 46 2438 606 2429 620 1500 41 325 59 125 344 59 125 360 392 40 2425 46 2439 41 123 621 2020 2021 61 2425 46 2440 40 41 59 326 91 93 2441 61 2421 46 2442 46 2419 40 2021 44 2421 46 2422 41 59 2423 635 2421 46 2443 40 2425 46 2018 44 2021 46 2444 44 2441 41 59 344 59 125 125 621 490 2019 61 2445 46 2446 46 2447 40 2421 46 2448 44 2014 41 59 392 40 2019 631 424 41 123 490 2449 61 418 2450 40 2019 41 59 621 392 40 2449 46 2451 46 2452 614 1500 41 123 2423 635 2421 46 2453 40 2449 41 59 125 125 125 450 2423 59 125 612 439 305 323 2454 40 461 2455 41 59 125 
69307,C#,"public class GraphUpdatesInMemoryTest : GraphUpdatesTestBase<GraphUpdatesInMemoryTest.InMemoryFixture>
{
    public GraphUpdatesInMemoryTest(InMemoryFixture fixture)
        : base(fixture)
    {
    }

    // In-memory database does not have database default values
    public override Task Can_insert_when_FK_has_default_value(bool async)
        => Task.CompletedTask;

    public override void Required_many_to_one_dependents_are_cascade_deleted_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Optional_many_to_one_dependents_are_orphaned_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_many_to_one_dependents_with_alternate_key_are_cascade_deleted_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Optional_many_to_one_dependents_with_alternate_key_are_orphaned_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Optional_one_to_one_relationships_are_one_to_one(
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_one_to_one_relationships_are_one_to_one(
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Save_required_one_to_one_changed_by_reference(
        ChangeMechanism changeMechanism,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Sever_required_one_to_one(
        ChangeMechanism changeMechanism,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_one_to_one_are_cascade_deleted_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_non_PK_one_to_one_are_cascade_deleted_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Optional_one_to_one_are_orphaned_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_one_to_one_are_cascade_detached_when_Added(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_non_PK_one_to_one_are_cascade_detached_when_Added(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Optional_one_to_one_with_AK_relationships_are_one_to_one(
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_one_to_one_with_AK_relationships_are_one_to_one(
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_one_to_one_with_alternate_key_are_cascade_deleted_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_non_PK_one_to_one_with_alternate_key_are_cascade_deleted_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Optional_one_to_one_with_alternate_key_are_orphaned_in_store(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_non_PK_one_to_one_with_alternate_key_are_cascade_detached_when_Added(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    public override void Required_one_to_one_with_alternate_key_are_cascade_detached_when_Added(
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        // FK uniqueness not enforced in in-memory database
    }

    protected override void ExecuteWithStrategyInTransaction(
        Action<DbContext> testOperation,
        Action<DbContext> nestedTestOperation1 = null,
        Action<DbContext> nestedTestOperation2 = null,
        Action<DbContext> nestedTestOperation3 = null)
    {
        base.ExecuteWithStrategyInTransaction(testOperation, nestedTestOperation1, nestedTestOperation2, nestedTestOperation3);
        Fixture.Reseed();
    }

    protected override async Task ExecuteWithStrategyInTransactionAsync(
        Func<DbContext, Task> testOperation,
        Func<DbContext, Task> nestedTestOperation1 = null,
        Func<DbContext, Task> nestedTestOperation2 = null,
        Func<DbContext, Task> nestedTestOperation3 = null)
    {
        await base.ExecuteWithStrategyInTransactionAsync(
            testOperation, nestedTestOperation1, nestedTestOperation2, nestedTestOperation3);

        Fixture.Reseed();
    }

    public class InMemoryFixture : GraphUpdatesFixtureBase
    {
        protected override string StoreName { get; } = ""GraphUpdatesTest"";

        protected override ITestStoreFactory TestStoreFactory
            => InMemoryTestStoreFactory.Instance;

        public override DbContextOptionsBuilder AddOptions(DbContextOptionsBuilder builder)
            => base.AddOptions(builder).ConfigureWarnings(w => w.Log(InMemoryEventId.TransactionIgnoredWarning));
    }
}",1,439 334 2000 58 2001 60 2000 46 2002 62 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 125 621 439 431 2004 2005 40 323 314 41 619 2004 46 2006 59 439 431 492 2007 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2011 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2012 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2013 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2014 40 2008 63 2010 41 123 621 125 439 431 492 2015 40 2008 63 2010 41 123 621 125 439 431 492 2016 40 2017 2018 44 2008 63 2010 41 123 621 125 439 431 492 2019 40 2017 2018 44 2008 63 2010 41 123 621 125 439 431 492 2020 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2021 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2022 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2023 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2024 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2025 40 2008 63 2010 41 123 621 125 439 431 492 2026 40 2008 63 2010 41 123 621 125 439 431 492 2027 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2028 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2029 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2030 40 2008 63 2009 44 2008 63 2010 41 123 621 125 439 431 492 2031 40 2008 63 2009 44 2008 63 2010 41 123 621 125 438 431 492 2032 40 2033 60 2034 62 2035 44 2033 60 2034 62 2036 61 424 44 2033 60 2034 62 2037 61 424 44 2033 60 2034 62 2038 61 424 41 123 320 46 2032 40 2035 44 2036 44 2037 44 2038 41 59 2039 46 2040 40 41 59 125 438 431 314 2004 2041 40 2042 60 2034 44 2004 62 2035 44 2042 60 2034 44 2004 62 2036 61 424 44 2042 60 2034 44 2004 62 2037 61 424 44 2042 60 2034 44 2004 62 2038 61 424 41 123 319 320 46 2041 40 2035 44 2036 44 2037 44 2038 41 59 2043 46 2044 40 41 59 125 439 334 2002 58 2045 123 438 431 461 2046 123 2047 59 125 61 648 59 438 431 2048 2049 619 2050 46 2051 59 439 431 2052 2053 40 2052 2054 41 619 320 46 2053 40 2054 41 46 2055 40 2056 619 2056 46 2057 40 2058 46 2059 41 41 59 125 125 
76237,C#,"    public static class ProviderUtils
    {
        public static void MergeBaseItemData<T>(
            MetadataResult<T> sourceResult,
            MetadataResult<T> targetResult,
            MetadataField[] lockedFields,
            bool replaceData,
            bool mergeMetadataSettings)
            where T : BaseItem
        {
            var source = sourceResult.Item;
            var target = targetResult.Item;

            if (source == null)
            {
                throw new ArgumentException(""Item cannot be null."", nameof(sourceResult));
            }

            if (target == null)
            {
                throw new ArgumentException(""Item cannot be null."", nameof(targetResult));
            }

            if (!lockedFields.Contains(MetadataField.Name))
            {
                if (replaceData || string.IsNullOrEmpty(target.Name))
                {
                    // Safeguard against incoming data having an empty name
                    if (!string.IsNullOrWhiteSpace(source.Name))
                    {
                        target.Name = source.Name;
                    }
                }
            }

            if (replaceData || string.IsNullOrEmpty(target.OriginalTitle))
            {
                // Safeguard against incoming data having an empty name
                if (!string.IsNullOrWhiteSpace(source.OriginalTitle))
                {
                    target.OriginalTitle = source.OriginalTitle;
                }
            }

            if (replaceData || !target.CommunityRating.HasValue)
            {
                target.CommunityRating = source.CommunityRating;
            }

            if (replaceData || !target.EndDate.HasValue)
            {
                target.EndDate = source.EndDate;
            }

            if (!lockedFields.Contains(MetadataField.Genres))
            {
                if (replaceData || target.Genres.Length == 0)
                {
                    target.Genres = source.Genres;
                }
            }

            if (replaceData || !target.IndexNumber.HasValue)
            {
                target.IndexNumber = source.IndexNumber;
            }

            if (!lockedFields.Contains(MetadataField.OfficialRating))
            {
                if (replaceData || string.IsNullOrEmpty(target.OfficialRating))
                {
                    target.OfficialRating = source.OfficialRating;
                }
            }

            if (replaceData || string.IsNullOrEmpty(target.CustomRating))
            {
                target.CustomRating = source.CustomRating;
            }

            if (replaceData || string.IsNullOrEmpty(target.Tagline))
            {
                target.Tagline = source.Tagline;
            }

            if (!lockedFields.Contains(MetadataField.Overview))
            {
                if (replaceData || string.IsNullOrEmpty(target.Overview))
                {
                    target.Overview = source.Overview;
                }
            }

            if (replaceData || !target.ParentIndexNumber.HasValue)
            {
                target.ParentIndexNumber = source.ParentIndexNumber;
            }

            if (!lockedFields.Contains(MetadataField.Cast))
            {
                if (replaceData || targetResult.People == null || targetResult.People.Count == 0)
                {
                    targetResult.People = sourceResult.People;
                }
                else if (targetResult.People != null && sourceResult.People != null)
                {
                    MergePeople(sourceResult.People, targetResult.People);
                }
            }

            if (replaceData || !target.PremiereDate.HasValue)
            {
                target.PremiereDate = source.PremiereDate;
            }

            if (replaceData || !target.ProductionYear.HasValue)
            {
                target.ProductionYear = source.ProductionYear;
            }

            if (!lockedFields.Contains(MetadataField.Runtime))
            {
                if (replaceData || !target.RunTimeTicks.HasValue)
                {
                    if (target is not Audio && target is not Video)
                    {
                        target.RunTimeTicks = source.RunTimeTicks;
                    }
                }
            }

            if (!lockedFields.Contains(MetadataField.Studios))
            {
                if (replaceData || target.Studios.Length == 0)
                {
                    target.Studios = source.Studios;
                }
            }

            if (!lockedFields.Contains(MetadataField.Tags))
            {
                if (replaceData || target.Tags.Length == 0)
                {
                    target.Tags = source.Tags;
                }
            }

            if (!lockedFields.Contains(MetadataField.ProductionLocations))
            {
                if (replaceData || target.ProductionLocations.Length == 0)
                {
                    target.ProductionLocations = source.ProductionLocations;
                }
            }

            foreach (var id in source.ProviderIds)
            {
                var key = id.Key;

                // Don't replace existing Id's.
                if (replaceData || !target.ProviderIds.ContainsKey(key))
                {
                    target.ProviderIds[key] = id.Value;
                }
            }

            MergeAlbumArtist(source, target, replaceData);
            MergeCriticRating(source, target, replaceData);
            MergeTrailers(source, target, replaceData);
            MergeVideoInfo(source, target, replaceData);
            MergeDisplayOrder(source, target, replaceData);

            if (replaceData || string.IsNullOrEmpty(target.ForcedSortName))
            {
                var forcedSortName = source.ForcedSortName;

                if (!string.IsNullOrWhiteSpace(forcedSortName))
                {
                    target.ForcedSortName = forcedSortName;
                }
            }

            if (mergeMetadataSettings)
            {
                target.LockedFields = source.LockedFields;
                target.IsLocked = source.IsLocked;

                // Grab the value if it's there, but if not then don't overwrite the default
                if (source.DateCreated != default)
                {
                    target.DateCreated = source.DateCreated;
                }

                target.PreferredMetadataCountryCode = source.PreferredMetadataCountryCode;
                target.PreferredMetadataLanguage = source.PreferredMetadataLanguage;
            }
        }

        private static void MergePeople(List<PersonInfo> source, List<PersonInfo> target)
        {
            foreach (var person in target)
            {
                var normalizedName = person.Name.RemoveDiacritics();
                var personInSource = source.FirstOrDefault(i => string.Equals(i.Name.RemoveDiacritics(), normalizedName, StringComparison.OrdinalIgnoreCase));

                if (personInSource != null)
                {
                    foreach (var providerId in personInSource.ProviderIds)
                    {
                        if (!person.ProviderIds.ContainsKey(providerId.Key))
                        {
                            person.ProviderIds[providerId.Key] = providerId.Value;
                        }
                    }

                    if (string.IsNullOrWhiteSpace(person.ImageUrl))
                    {
                        person.ImageUrl = personInSource.ImageUrl;
                    }
                }
            }
        }

        private static void MergeDisplayOrder(BaseItem source, BaseItem target, bool replaceData)
        {
            if (source is IHasDisplayOrder sourceHasDisplayOrder
                && target is IHasDisplayOrder targetHasDisplayOrder)
            {
                if (replaceData || string.IsNullOrEmpty(targetHasDisplayOrder.DisplayOrder))
                {
                    var displayOrder = sourceHasDisplayOrder.DisplayOrder;

                    if (!string.IsNullOrWhiteSpace(displayOrder))
                    {
                        targetHasDisplayOrder.DisplayOrder = displayOrder;
                    }
                }
            }
        }

        private static void MergeAlbumArtist(BaseItem source, BaseItem target, bool replaceData)
        {
            if (source is IHasAlbumArtist sourceHasAlbumArtist
                && target is IHasAlbumArtist targetHasAlbumArtist)
            {
                if (replaceData || targetHasAlbumArtist.AlbumArtists.Count == 0)
                {
                    targetHasAlbumArtist.AlbumArtists = sourceHasAlbumArtist.AlbumArtists;
                }
            }
        }

        private static void MergeCriticRating(BaseItem source, BaseItem target, bool replaceData)
        {
            if (replaceData || !target.CriticRating.HasValue)
            {
                target.CriticRating = source.CriticRating;
            }
        }

        private static void MergeTrailers(BaseItem source, BaseItem target, bool replaceData)
        {
            if (replaceData || target.RemoteTrailers.Count == 0)
            {
                target.RemoteTrailers = source.RemoteTrailers;
            }
        }

        private static void MergeVideoInfo(BaseItem source, BaseItem target, bool replaceData)
        {
            if (source is Video sourceCast && target is Video targetCast)
            {
                if (replaceData || targetCast.Video3DFormat == null)
                {
                    targetCast.Video3DFormat = sourceCast.Video3DFormat;
                }
            }
        }
    }",1,439 457 334 2000 123 439 457 492 2001 60 2002 62 40 2003 60 2002 62 2004 44 2003 60 2002 62 2005 44 2006 91 93 2007 44 323 2008 44 323 2009 41 2010 2002 58 2011 123 490 2012 61 2004 46 2013 59 490 2014 61 2005 46 2013 59 392 40 2012 614 424 41 123 469 418 2015 40 648 44 2016 40 2004 41 41 59 125 392 40 2014 614 424 41 123 469 418 2017 40 648 44 2018 40 2005 41 41 59 125 392 40 33 2007 46 2019 40 2006 46 2020 41 41 123 392 40 2008 606 461 46 2021 40 2014 46 2020 41 41 123 621 392 40 33 461 46 2022 40 2012 46 2020 41 41 123 2014 46 2020 61 2012 46 2020 59 125 125 125 392 40 2008 606 461 46 2023 40 2014 46 2024 41 41 123 621 392 40 33 461 46 2025 40 2012 46 2024 41 41 123 2014 46 2024 61 2012 46 2024 59 125 125 392 40 2008 606 33 2014 46 2026 46 2027 41 123 2014 46 2026 61 2012 46 2026 59 125 392 40 2008 606 33 2014 46 2028 46 2027 41 123 2014 46 2028 61 2012 46 2028 59 125 392 40 33 2007 46 2019 40 2006 46 2029 41 41 123 392 40 2008 606 2014 46 2029 46 2030 614 1500 41 123 2014 46 2029 61 2012 46 2029 59 125 125 392 40 2008 606 33 2014 46 2031 46 2027 41 123 2014 46 2031 61 2012 46 2031 59 125 392 40 33 2007 46 2019 40 2006 46 2032 41 41 123 392 40 2008 606 461 46 2023 40 2014 46 2032 41 41 123 2014 46 2032 61 2012 46 2032 59 125 125 392 40 2008 606 461 46 2023 40 2014 46 2033 41 41 123 2014 46 2033 61 2012 46 2033 59 125 392 40 2008 606 461 46 2023 40 2014 46 2034 41 41 123 2014 46 2034 61 2012 46 2034 59 125 392 40 33 2007 46 2019 40 2006 46 2035 41 41 123 392 40 2008 606 461 46 2023 40 2014 46 2035 41 41 123 2014 46 2035 61 2012 46 2035 59 125 125 392 40 2008 606 33 2014 46 2036 46 2027 41 123 2014 46 2036 61 2012 46 2036 59 125 392 40 33 2007 46 2019 40 2006 46 2037 41 41 123 392 40 2008 606 2005 46 2038 614 424 606 2005 46 2038 46 2039 614 1500 41 123 2005 46 2038 61 2004 46 2038 59 125 360 392 40 2005 46 2038 631 424 605 2004 46 2038 631 424 41 123 2040 40 2004 46 2038 44 2005 46 2038 41 59 125 125 392 40 2008 606 33 2014 46 2041 46 2027 41 123 2014 46 2041 61 2012 46 2041 59 125 392 40 2008 606 33 2014 46 2042 46 2027 41 123 2014 46 2042 61 2012 46 2042 59 125 392 40 33 2007 46 2019 40 2006 46 2043 41 41 123 392 40 2008 606 33 2014 46 2044 46 2027 41 123 392 40 2014 407 422 2045 605 2014 407 422 2046 41 123 2014 46 2044 61 2012 46 2044 59 125 125 125 392 40 33 2007 46 2019 40 2006 46 2047 41 41 123 392 40 2008 606 2014 46 2047 46 2048 614 1500 41 123 2014 46 2047 61 2012 46 2047 59 125 125 392 40 33 2007 46 2019 40 2006 46 2049 41 41 123 392 40 2008 606 2014 46 2049 46 2050 614 1500 41 123 2014 46 2049 61 2012 46 2049 59 125 125 392 40 33 2007 46 2019 40 2006 46 2051 41 41 123 392 40 2008 606 2014 46 2051 46 2052 614 1500 41 123 2014 46 2051 61 2012 46 2051 59 125 125 386 40 490 2053 398 2012 46 2054 41 123 490 2055 61 2053 46 2056 59 621 392 40 2008 606 33 2014 46 2054 46 2057 40 2055 41 41 123 2014 46 2054 91 2055 93 61 2053 46 2058 59 125 125 2059 40 2012 44 2014 44 2008 41 59 2060 40 2012 44 2014 44 2008 41 59 2061 40 2012 44 2014 44 2008 41 59 2062 40 2012 44 2014 44 2008 41 59 2063 40 2012 44 2014 44 2008 41 59 392 40 2008 606 461 46 2023 40 2014 46 2064 41 41 123 490 2065 61 2012 46 2064 59 392 40 33 461 46 2066 40 2065 41 41 123 2014 46 2064 61 2065 59 125 125 392 40 2009 41 123 2014 46 2067 61 2012 46 2067 59 2014 46 2068 61 2012 46 2068 59 621 392 40 2012 46 2069 631 349 41 123 2014 46 2069 61 2012 46 2069 59 125 2014 46 2070 61 2012 46 2070 59 2014 46 2071 61 2012 46 2071 59 125 125 437 457 492 2072 40 2073 60 2074 62 2075 44 2073 60 2074 62 2076 41 123 386 40 490 2077 398 2076 41 123 490 2078 61 2077 46 2079 46 2080 40 41 59 490 2081 61 2075 46 2082 40 2083 619 461 46 2084 40 2083 46 2079 46 2080 40 41 44 2078 44 2085 46 2086 41 41 59 392 40 2081 631 424 41 123 386 40 490 2087 398 2081 46 2088 41 123 392 40 33 2077 46 2088 46 2089 40 2087 46 2090 41 41 123 2077 46 2088 91 2087 46 2090 93 61 2087 46 2091 59 125 125 392 40 461 46 2092 40 2077 46 2093 41 41 123 2077 46 2093 61 2081 46 2093 59 125 125 125 125 437 457 492 2094 40 2011 2075 44 2011 2076 44 323 2008 41 123 392 40 2075 407 2095 2096 605 2076 407 2095 2097 41 123 392 40 2008 606 461 46 2098 40 2097 46 2099 41 41 123 490 2100 61 2096 46 2099 59 392 40 33 461 46 2101 40 2100 41 41 123 2097 46 2099 61 2100 59 125 125 125 125 437 457 492 2102 40 2011 2075 44 2011 2076 44 323 2008 41 123 392 40 2075 407 2103 2104 605 2076 407 2103 2105 41 123 392 40 2008 606 2105 46 2106 46 2107 614 1500 41 123 2105 46 2106 61 2104 46 2106 59 125 125 125 437 457 492 2108 40 2011 2075 44 2011 2076 44 323 2008 41 123 392 40 2008 606 33 2076 46 2109 46 2110 41 123 2076 46 2109 61 2075 46 2109 59 125 125 437 457 492 2111 40 2011 2075 44 2011 2076 44 323 2008 41 123 392 40 2008 606 2076 46 2112 46 2113 614 1500 41 123 2076 46 2112 61 2075 46 2112 59 125 125 437 457 492 2114 40 2011 2075 44 2011 2076 44 323 2008 41 123 392 40 2075 407 2115 2116 605 2076 407 2115 2117 41 123 392 40 2008 606 2117 46 2118 614 424 41 123 2117 46 2118 61 2116 46 2118 59 125 125 125 125 
70157,C#,"public class ExecutionStrategyTest : IClassFixture<ExecutionStrategyTest.ExecutionStrategyFixture>
{
    public ExecutionStrategyTest(ExecutionStrategyFixture fixture)
    {
        Fixture = fixture;
        Fixture.TestStore.CloseConnection();
        Fixture.TestSqlLoggerFactory.Clear();
    }

    protected ExecutionStrategyFixture Fixture { get; }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 1, MemberType = typeof(DataGenerator))]
    public void Handles_commit_failure(bool realFailure)
    {
        // Use all overloads of ExecuteInTransaction
        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                () => { db.SaveChanges(false); },
                () => db.Products.AsNoTracking().Any()));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                () => db.SaveChanges(false),
                () => db.Products.AsNoTracking().Any()));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                db,
                c => { c.SaveChanges(false); },
                c => c.Products.AsNoTracking().Any()));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                db,
                c => c.SaveChanges(false),
                c => c.Products.AsNoTracking().Any()));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                () => { db.SaveChanges(false); },
                () => db.Products.AsNoTracking().Any(),
                IsolationLevel.Serializable));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                () => db.SaveChanges(false),
                () => db.Products.AsNoTracking().Any(),
                IsolationLevel.Serializable));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                db,
                c => { c.SaveChanges(false); },
                c => c.Products.AsNoTracking().Any(),
                IsolationLevel.Serializable));

        Test_commit_failure(
            realFailure, (e, db) => e.ExecuteInTransaction(
                db,
                c => c.SaveChanges(false),
                c => c.Products.AsNoTracking().Any(),
                IsolationLevel.Serializable));
    }

    private void Test_commit_failure(bool realFailure, Action<TestSqlServerRetryingExecutionStrategy, ExecutionStrategyContext> execute)
    {
        CleanContext();

        using (var context = CreateContext())
        {
            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.CommitFailures.Enqueue(new bool?[] { realFailure });
            Fixture.TestSqlLoggerFactory.Clear();

            context.Products.Add(new Product());
            execute(new TestSqlServerRetryingExecutionStrategy(context), context);
            context.ChangeTracker.AcceptAllChanges();

            var retryMessage =
                ""A transient exception occurred during execution. The operation will be retried after 0ms.""
                + Environment.NewLine
                + ""Microsoft.Data.SqlClient.SqlException (0x80131904): Bang!"";
            if (realFailure)
            {
                var logEntry = Fixture.TestSqlLoggerFactory.Log.Single(l => l.Id == CoreEventId.ExecutionStrategyRetrying);
                Assert.Contains(retryMessage, logEntry.Message);
                Assert.Equal(LogLevel.Information, logEntry.Level);
            }
            else
            {
                Assert.Empty(Fixture.TestSqlLoggerFactory.Log.Where(l => l.Id == CoreEventId.ExecutionStrategyRetrying));
            }

            Assert.Equal(realFailure ? 3 : 2, connection.OpenCount);
        }

        using (var context = CreateContext())
        {
            Assert.Equal(1, context.Products.Count());
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 1, MemberType = typeof(DataGenerator))]
    public async Task Handles_commit_failure_async(bool realFailure)
    {
        // Use all overloads of ExecuteInTransactionAsync
        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                () => db.SaveChangesAsync(false),
                () => db.Products.AsNoTracking().AnyAsync()));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                async ct => { await db.SaveChangesAsync(false); },
                ct => db.Products.AsNoTracking().AnyAsync(),
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                ct => db.SaveChangesAsync(false, ct),
                ct => db.Products.AsNoTracking().AnyAsync(),
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                db,
                async (c, ct) => { await c.SaveChangesAsync(false, ct); },
                (c, ct) => c.Products.AsNoTracking().AnyAsync(),
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                db,
                (c, ct) => c.SaveChangesAsync(false, ct),
                (c, ct) => c.Products.AsNoTracking().AnyAsync(),
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                () => db.SaveChangesAsync(false),
                () => db.Products.AsNoTracking().AnyAsync(),
                IsolationLevel.Serializable));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                async ct => { await db.SaveChangesAsync(false, ct); },
                ct => db.Products.AsNoTracking().AnyAsync(ct),
                IsolationLevel.Serializable,
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                ct => db.SaveChangesAsync(false, ct),
                ct => db.Products.AsNoTracking().AnyAsync(ct),
                IsolationLevel.Serializable,
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                db,
                async (c, ct) => { await c.SaveChangesAsync(false, ct); },
                (c, ct) => c.Products.AsNoTracking().AnyAsync(ct),
                IsolationLevel.Serializable,
                CancellationToken.None));

        await Test_commit_failure_async(
            realFailure, (e, db) => e.ExecuteInTransactionAsync(
                db,
                (c, ct) => c.SaveChangesAsync(false, ct),
                (c, ct) => c.Products.AsNoTracking().AnyAsync(ct),
                IsolationLevel.Serializable,
                CancellationToken.None));
    }

    private async Task Test_commit_failure_async(
        bool realFailure,
        Func<TestSqlServerRetryingExecutionStrategy, ExecutionStrategyContext, Task> execute)
    {
        CleanContext();

        using (var context = CreateContext())
        {
            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.CommitFailures.Enqueue(new bool?[] { realFailure });
            Fixture.TestSqlLoggerFactory.Clear();

            context.Products.Add(new Product());
            await execute(new TestSqlServerRetryingExecutionStrategy(context), context);
            context.ChangeTracker.AcceptAllChanges();

            var retryMessage =
                ""A transient exception occurred during execution. The operation will be retried after 0ms.""
                + Environment.NewLine
                + ""Microsoft.Data.SqlClient.SqlException (0x80131904): Bang!"";
            if (realFailure)
            {
                var logEntry = Fixture.TestSqlLoggerFactory.Log.Single(l => l.Id == CoreEventId.ExecutionStrategyRetrying);
                Assert.Contains(retryMessage, logEntry.Message);
                Assert.Equal(LogLevel.Information, logEntry.Level);
            }
            else
            {
                Assert.Empty(Fixture.TestSqlLoggerFactory.Log.Where(l => l.Id == CoreEventId.ExecutionStrategyRetrying));
            }

            Assert.Equal(realFailure ? 3 : 2, connection.OpenCount);
        }

        using (var context = CreateContext())
        {
            Assert.Equal(1, await context.Products.CountAsync());
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 1, MemberType = typeof(DataGenerator))]
    public void Handles_commit_failure_multiple_SaveChanges(bool realFailure)
    {
        CleanContext();

        using var context1 = CreateContext();
        var connection = (TestSqlServerConnection)context1.GetService<ISqlServerConnection>();

        using (var context2 = CreateContext())
        {
            connection.CommitFailures.Enqueue(new bool?[] { realFailure });

            context1.Products.Add(new Product());
            context2.Products.Add(new Product());

            new TestSqlServerRetryingExecutionStrategy(context1).ExecuteInTransaction(
                context1,
                c1 =>
                {
                    context2.Database.UseTransaction(null);
                    context2.Database.UseTransaction(context1.Database.CurrentTransaction.GetDbTransaction());

                    c1.SaveChanges(false);

                    return context2.SaveChanges(false);
                },
                c => c.Products.AsNoTracking().Any());

            context1.ChangeTracker.AcceptAllChanges();
            context2.ChangeTracker.AcceptAllChanges();
        }

        using var context = CreateContext();
        Assert.Equal(2, context.Products.Count());
    }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 4, MemberType = typeof(DataGenerator))]
    public async Task Retries_SaveChanges_on_execution_failure(
        bool realFailure,
        bool externalStrategy,
        bool openConnection,
        bool async)
    {
        CleanContext();

        using (var context = CreateContext())
        {
            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.ExecutionFailures.Enqueue(new bool?[] { null, realFailure });

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);

            if (openConnection)
            {
                if (async)
                {
                    await context.Database.OpenConnectionAsync();
                }
                else
                {
                    context.Database.OpenConnection();
                }

                Assert.Equal(ConnectionState.Open, context.Database.GetDbConnection().State);
            }

            context.Products.Add(new Product());
            context.Products.Add(new Product());

            if (async)
            {
                if (externalStrategy)
                {
                    await new TestSqlServerRetryingExecutionStrategy(context).ExecuteInTransactionAsync(
                        context,
                        (c, ct) => c.SaveChangesAsync(false, ct),
                        (c, _) =>
                        {
                            Assert.True(false);
                            return Task.FromResult(false);
                        });

                    context.ChangeTracker.AcceptAllChanges();
                }
                else
                {
                    await context.SaveChangesAsync();
                }
            }
            else
            {
                if (externalStrategy)
                {
                    new TestSqlServerRetryingExecutionStrategy(context).ExecuteInTransaction(
                        context,
                        c => c.SaveChanges(false),
                        c =>
                        {
                            Assert.True(false);
                            return false;
                        });

                    context.ChangeTracker.AcceptAllChanges();
                }
                else
                {
                    context.SaveChanges();
                }
            }

            Assert.Equal(2, connection.OpenCount);
            Assert.Equal(4, connection.ExecutionCount);

            Assert.Equal(
                openConnection
                    ? ConnectionState.Open
                    : ConnectionState.Closed, context.Database.GetDbConnection().State);

            if (openConnection)
            {
                if (async)
                {
                    await context.Database.CloseConnectionAsync();
                }
                else
                {
                    context.Database.CloseConnection();
                }
            }

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);
        }

        using (var context = CreateContext())
        {
            Assert.Equal(2, context.Products.Count());
        }
    }

    [ConditionalTheory] // Issue #25946
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 3, MemberType = typeof(DataGenerator))]
    public async Task Retries_SaveChanges_on_execution_failure_with_two_contexts(
        bool realFailure,
        bool openConnection,
        bool async)
    {
        CleanContext();

        using (var context = CreateContext())
        {
            using var auditContext = new AuditContext();

            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.ExecutionFailures.Enqueue(new bool?[] { null, realFailure });

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);

            if (openConnection)
            {
                if (async)
                {
                    await context.Database.OpenConnectionAsync();
                }
                else
                {
                    context.Database.OpenConnection();
                }

                Assert.Equal(ConnectionState.Open, context.Database.GetDbConnection().State);
            }

            context.Products.Add(new Product());
            context.Products.Add(new Product());

            var throwTransientError = true;

            if (async)
            {
                await new TestSqlServerRetryingExecutionStrategy(context).ExecuteInTransactionAsync(
                    (MainContext: context, AuditContext: auditContext),
                    async (c, ct) =>
                    {
                        var result = await c.MainContext.SaveChangesAsync(false, ct);

                        c.AuditContext.ChangeTracker.Clear();
                        c.AuditContext.Database.SetDbConnection(c.MainContext.Database.GetDbConnection());

                        var currentTransaction = c.AuditContext.Database.CurrentTransaction;
                        if (throwTransientError)
                        {
                            Assert.Null(currentTransaction);
                        }
                        else
                        {
                            Assert.NotNull(currentTransaction);
                        }

                        await c.AuditContext.Database.UseTransactionAsync(
                            c.MainContext.Database.CurrentTransaction!.GetDbTransaction(), ct);

                        Assert.NotSame(currentTransaction, c.AuditContext.Database.CurrentTransaction);

                        await c.AuditContext.Audits.AddAsync(new Audit(), ct);
                        await c.AuditContext.SaveChangesAsync(ct);

                        if (throwTransientError)
                        {
                            throwTransientError = false;
                            throw SqlExceptionFactory.CreateSqlException(10928);
                        }

                        return result;
                    },
                    (c, _) =>
                    {
                        Assert.True(false);
                        return Task.FromResult(false);
                    });

                context.ChangeTracker.AcceptAllChanges();
            }
            else
            {
                new TestSqlServerRetryingExecutionStrategy(context).ExecuteInTransaction(
                    (MainContext: context, AuditContext: auditContext),
                    c =>
                    {
                        var result = c.MainContext.SaveChanges(false);

                        c.AuditContext.ChangeTracker.Clear();
                        c.AuditContext.Database.SetDbConnection(c.MainContext.Database.GetDbConnection());

                        var currentTransaction = c.AuditContext.Database.CurrentTransaction;
                        if (throwTransientError)
                        {
                            Assert.Null(currentTransaction);
                        }
                        else
                        {
                            Assert.NotNull(currentTransaction);
                        }

                        c.AuditContext.Database.UseTransaction(c.MainContext.Database.CurrentTransaction!.GetDbTransaction());

                        Assert.NotSame(currentTransaction, c.AuditContext.Database.CurrentTransaction);

                        c.AuditContext.Audits.Add(new Audit());
                        c.AuditContext.SaveChanges();

                        if (throwTransientError)
                        {
                            throwTransientError = false;
                            throw SqlExceptionFactory.CreateSqlException(10928);
                        }

                        return result;
                    },
                    c =>
                    {
                        Assert.True(false);
                        return false;
                    });

                context.ChangeTracker.AcceptAllChanges();
            }

            Assert.Equal(openConnection ? 2 : 3, connection.OpenCount);
            Assert.Equal(6, connection.ExecutionCount);

            Assert.Equal(
                openConnection
                    ? ConnectionState.Open
                    : ConnectionState.Closed, context.Database.GetDbConnection().State);

            if (openConnection)
            {
                if (async)
                {
                    await context.Database.CloseConnectionAsync();
                }
                else
                {
                    context.Database.CloseConnection();
                }
            }

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);
        }

        using (var context = CreateContext())
        {
            Assert.Equal(2, context.Products.Count());
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 2, MemberType = typeof(DataGenerator))]
    public async Task Retries_query_on_execution_failure(bool externalStrategy, bool async)
    {
        CleanContext();

        using (var context = CreateContext())
        {
            context.Products.Add(new Product());
            context.Products.Add(new Product());

            context.SaveChanges();
        }

        using (var context = CreateContext())
        {
            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.ExecutionFailures.Enqueue(new bool?[] { true });

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);

            List<Product> list;
            if (async)
            {
                if (externalStrategy)
                {
                    list = await new TestSqlServerRetryingExecutionStrategy(context)
                        .ExecuteAsync(context, (c, ct) => c.Products.ToListAsync(ct), null);
                }
                else
                {
                    list = await context.Products.ToListAsync();
                }
            }
            else
            {
                if (externalStrategy)
                {
                    list = new TestSqlServerRetryingExecutionStrategy(context)
                        .Execute(context, c => c.Products.ToList(), null);
                }
                else
                {
                    list = context.Products.ToList();
                }
            }

            Assert.Equal(2, list.Count);
            Assert.Equal(1, connection.OpenCount);
            Assert.Equal(2, connection.ExecutionCount);

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 2, MemberType = typeof(DataGenerator))]
    public async Task Retries_FromSqlRaw_on_execution_failure(bool externalStrategy, bool async)
    {
        CleanContext();

        using (var context = CreateContext())
        {
            context.Products.Add(new Product());
            context.Products.Add(new Product());

            context.SaveChanges();
        }

        using (var context = CreateContext())
        {
            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.ExecutionFailures.Enqueue(new bool?[] { true });

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);

            List<Product> list;
            if (async)
            {
                if (externalStrategy)
                {
                    list = await new TestSqlServerRetryingExecutionStrategy(context)
                        .ExecuteAsync(
                            context, (c, ct) => c.Set<Product>().FromSqlRaw(
                                @""SELECT [ID], [name]
                              FROM [Products]"").ToListAsync(ct), null);
                }
                else
                {
                    list = await context.Set<Product>().FromSqlRaw(
                        @""SELECT [ID], [name]
                              FROM [Products]"").ToListAsync();
                }
            }
            else
            {
                if (externalStrategy)
                {
                    list = new TestSqlServerRetryingExecutionStrategy(context)
                        .Execute(
                            context, c => c.Set<Product>().FromSqlRaw(
                                @""SELECT [ID], [name]
                              FROM [Products]"").ToList(), null);
                }
                else
                {
                    list = context.Set<Product>().FromSqlRaw(
                        @""SELECT [ID], [name]
                              FROM [Products]"").ToList();
                }
            }

            Assert.Equal(2, list.Count);
            Assert.Equal(1, connection.OpenCount);
            Assert.Equal(2, connection.ExecutionCount);

            Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(DataGenerator.GetBoolCombinations), 2, MemberType = typeof(DataGenerator))]
    public async Task Retries_OpenConnection_on_execution_failure(bool externalStrategy, bool async)
    {
        using var context = CreateContext();
        var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

        connection.OpenFailures.Enqueue(new bool?[] { true });

        Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);

        if (async)
        {
            if (externalStrategy)
            {
                await new TestSqlServerRetryingExecutionStrategy(context).ExecuteAsync(
                    context,
                    c => c.Database.OpenConnectionAsync());
            }
            else
            {
                await context.Database.OpenConnectionAsync();
            }
        }
        else
        {
            if (externalStrategy)
            {
                new TestSqlServerRetryingExecutionStrategy(context).Execute(
                    context,
                    c => c.Database.OpenConnection());
            }
            else
            {
                context.Database.OpenConnection();
            }
        }

        Assert.Equal(2, connection.OpenCount);

        if (async)
        {
            context.Database.CloseConnection();
        }
        else
        {
            await context.Database.CloseConnectionAsync();
        }

        Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task Retries_BeginTransaction_on_execution_failure(bool async)
    {
        using var context = CreateContext();
        var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

        connection.OpenFailures.Enqueue(new bool?[] { true });

        Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);

        if (async)
        {
            var transaction = await new TestSqlServerRetryingExecutionStrategy(context).ExecuteAsync(
                context,
                c => context.Database.BeginTransactionAsync());

            transaction.Dispose();
        }
        else
        {
            var transaction = new TestSqlServerRetryingExecutionStrategy(context).Execute(
                context,
                c => context.Database.BeginTransaction());

            transaction.Dispose();
        }

        Assert.Equal(2, connection.OpenCount);

        Assert.Equal(ConnectionState.Closed, context.Database.GetDbConnection().State);
    }

    [ConditionalFact]
    public void Verification_is_retried_using_same_retry_limit()
    {
        CleanContext();

        using (var context = CreateContext())
        {
            var connection = (TestSqlServerConnection)context.GetService<ISqlServerConnection>();

            connection.ExecutionFailures.Enqueue(new bool?[] { true, null, true, true });
            connection.CommitFailures.Enqueue(new bool?[] { true, true, true, true });

            context.Products.Add(new Product());
            Assert.Throws<RetryLimitExceededException>(
                () =>
                    new TestSqlServerRetryingExecutionStrategy(context, TimeSpan.FromMilliseconds(100))
                        .ExecuteInTransaction(
                            context,
                            c => c.SaveChanges(false),
                            c => false));
            context.ChangeTracker.AcceptAllChanges();

            Assert.Equal(7, connection.OpenCount);
            Assert.Equal(7, connection.ExecutionCount);
        }

        using (var context = CreateContext())
        {
            Assert.Equal(0, context.Products.Count());
        }
    }

    protected class ExecutionStrategyContext : DbContext
    {
        public ExecutionStrategyContext(DbContextOptions options)
            : base(options)
        {
        }

        public DbSet<Product> Products { get; set; }
        public DbSet<Audit> Audits { get; set; }
    }

    protected class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class AuditContext : DbContext
    {
        public DbSet<Audit> Audits { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder.UseSqlServer();
    }

    public class Audit
    {
        public int AuditId { get; set; }
    }

    protected virtual ExecutionStrategyContext CreateContext()
        => (ExecutionStrategyContext)Fixture.CreateContext();

    private void CleanContext()
    {
        using var context = CreateContext();
        foreach (var product in context.Products.ToList())
        {
            context.Remove(product);
            context.SaveChanges();
        }
    }

    public class ExecutionStrategyFixture : SharedStoreFixtureBase<DbContext>
    {
        protected override bool UsePooling
            => false;

        protected override string StoreName { get; } = nameof(ExecutionStrategyTest);

        public new RelationalTestStore TestStore
            => (RelationalTestStore)base.TestStore;

        public TestSqlLoggerFactory TestSqlLoggerFactory
            => (TestSqlLoggerFactory)ListLoggerFactory;

        protected override ITestStoreFactory TestStoreFactory
            => SqlServerTestStoreFactory.Instance;

        protected override Type ContextType { get; } = typeof(ExecutionStrategyContext);

        protected override IServiceCollection AddServices(IServiceCollection serviceCollection)
            => base.AddServices(serviceCollection)
                .AddSingleton<IRelationalTransactionFactory, TestRelationalTransactionFactory>()
                .AddScoped<ISqlServerConnection, TestSqlServerConnection>()
                .AddSingleton<IRelationalCommandBuilderFactory, TestRelationalCommandBuilderFactory>();

        public override DbContextOptionsBuilder AddOptions(DbContextOptionsBuilder builder)
        {
            var options = base.AddOptions(builder);
            new SqlServerDbContextOptionsBuilder(options).MaxBatchSize(1);
            return options;
        }

        protected override bool ShouldLogCategory(string logCategory)
            => logCategory == DbLoggerCategory.Infrastructure.Name;
    }
}",1,439 334 2000 58 2001 60 2000 46 2002 62 123 439 2000 40 2002 2003 41 123 2004 61 2003 59 2004 46 2005 46 2006 40 41 59 2004 46 2007 46 2008 40 41 59 125 438 2002 2009 123 2010 59 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1501 44 2016 61 478 40 2014 41 41 93 439 492 2017 40 323 2018 41 123 621 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 40 41 619 123 2021 46 2023 40 380 41 59 125 44 40 41 619 2021 46 2024 46 2025 40 41 46 2026 40 41 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 40 41 619 2021 46 2027 40 380 41 44 40 41 619 2021 46 2024 46 2025 40 41 46 2026 40 41 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 2021 44 2028 619 123 2028 46 2027 40 380 41 59 125 44 2028 619 2028 46 2024 46 2025 40 41 46 2026 40 41 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 2021 44 2028 619 2028 46 2027 40 380 41 44 2028 619 2028 46 2024 46 2025 40 41 46 2026 40 41 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 40 41 619 123 2021 46 2027 40 380 41 59 125 44 40 41 619 2021 46 2024 46 2025 40 41 46 2026 40 41 44 2029 46 2030 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 40 41 619 2021 46 2027 40 380 41 44 40 41 619 2021 46 2024 46 2025 40 41 46 2026 40 41 44 2029 46 2030 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 2021 44 2028 619 123 2028 46 2027 40 380 41 59 125 44 2028 619 2028 46 2024 46 2025 40 41 46 2026 40 41 44 2029 46 2030 41 41 59 2019 40 2018 44 40 2020 44 2021 41 619 2020 46 2022 40 2021 44 2028 619 2028 46 2027 40 380 41 44 2028 619 2028 46 2024 46 2025 40 41 46 2026 40 41 44 2029 46 2030 41 41 59 125 437 492 2031 40 323 2018 44 2032 60 2033 44 2034 62 2035 41 123 2036 40 41 59 489 40 490 2037 61 2038 40 41 41 123 490 2039 61 40 2040 41 2037 46 2041 60 2042 62 40 41 59 2039 46 2043 46 2044 40 418 323 63 91 93 123 2018 125 41 59 2009 46 2045 46 2046 40 41 59 2037 46 2047 46 2048 40 418 2049 40 41 41 59 2035 40 418 2033 40 2037 41 44 2037 41 59 2037 46 2050 46 2051 40 41 59 490 2052 61 648 43 2053 46 2054 43 648 59 392 40 2018 41 123 490 2055 61 2009 46 2045 46 2056 46 2057 40 2058 619 2058 46 2059 614 2060 46 2061 41 59 2062 46 2063 40 2052 44 2055 46 2064 41 59 2062 46 2065 40 2066 46 2067 44 2055 46 2068 41 59 125 360 123 2069 46 2070 40 2009 46 2045 46 2071 46 2072 40 2073 619 2073 46 2074 614 2075 46 2076 41 41 59 125 2077 46 2078 40 2018 63 1502 58 1502 44 2039 46 2079 41 59 125 489 40 490 2037 61 2038 40 41 41 123 2080 46 2081 40 1501 44 2037 46 2082 46 2083 40 41 41 59 125 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1501 44 2016 61 478 40 2014 41 41 93 439 314 2084 2085 40 323 2018 41 123 621 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 40 41 619 2088 46 2090 40 380 41 44 40 41 619 2088 46 2091 46 2092 40 41 46 2093 40 41 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 314 2094 619 123 319 2088 46 2090 40 380 41 59 125 44 2094 619 2088 46 2091 46 2092 40 41 46 2093 40 41 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 2094 619 2088 46 2090 40 380 44 2094 41 44 2094 619 2088 46 2091 46 2092 40 41 46 2093 40 41 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 2088 44 314 40 2096 44 2094 41 619 123 319 2096 46 2090 40 380 44 2094 41 59 125 44 40 2096 44 2094 41 619 2096 46 2091 46 2092 40 41 46 2093 40 41 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 2088 44 40 2096 44 2094 41 619 2096 46 2090 40 380 44 2094 41 44 40 2096 44 2094 41 619 2096 46 2091 46 2092 40 41 46 2093 40 41 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 40 41 619 2088 46 2090 40 380 41 44 40 41 619 2088 46 2091 46 2092 40 41 46 2093 40 41 44 2097 46 2098 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 314 2094 619 123 319 2088 46 2090 40 380 44 2094 41 59 125 44 2094 619 2088 46 2091 46 2092 40 41 46 2093 40 2094 41 44 2097 46 2098 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 2094 619 2088 46 2090 40 380 44 2094 41 44 2094 619 2088 46 2091 46 2092 40 41 46 2093 40 2094 41 44 2097 46 2098 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 2088 44 314 40 2096 44 2094 41 619 123 319 2096 46 2090 40 380 44 2094 41 59 125 44 40 2096 44 2094 41 619 2096 46 2091 46 2092 40 41 46 2093 40 2094 41 44 2097 46 2098 44 2095 46 303 41 41 59 319 2086 40 2018 44 40 2087 44 2088 41 619 2087 46 2089 40 2088 44 40 2096 44 2094 41 619 2096 46 2090 40 380 44 2094 41 44 40 2096 44 2094 41 619 2096 46 2091 46 2092 40 41 46 2093 40 2094 41 44 2097 46 2098 44 2095 46 303 41 41 59 125 437 314 2084 2099 40 323 2018 44 2100 60 2033 44 2034 44 2084 62 2035 41 123 2101 40 41 59 489 40 490 2102 61 2103 40 41 41 123 490 2104 61 40 2105 41 2102 46 2106 60 2107 62 40 41 59 2104 46 2108 46 2109 40 418 323 63 91 93 123 2018 125 41 59 2009 46 2110 46 2111 40 41 59 2102 46 2112 46 2113 40 418 2114 40 41 41 59 319 2035 40 418 2033 40 2102 41 44 2102 41 59 2102 46 2115 46 2116 40 41 59 490 2117 61 648 43 2118 46 2119 43 648 59 392 40 2018 41 123 490 2120 61 2009 46 2110 46 2121 46 2122 40 2123 619 2123 46 2124 614 2125 46 2126 41 59 2127 46 2128 40 2117 44 2120 46 2129 41 59 2127 46 2130 40 2131 46 2132 44 2120 46 2133 41 59 125 360 123 2134 46 2135 40 2009 46 2110 46 2136 46 2137 40 2138 619 2138 46 2139 614 2140 46 2141 41 41 59 125 2142 46 2143 40 2018 63 1502 58 1502 44 2104 46 2144 41 59 125 489 40 490 2102 61 2103 40 41 41 123 2145 46 2146 40 1501 44 319 2102 46 2147 46 2148 40 41 41 59 125 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1501 44 2016 61 478 40 2014 41 41 93 439 492 2149 40 323 2018 41 123 2150 40 41 59 489 490 2151 61 2152 40 41 59 490 2153 61 40 2154 41 2151 46 2155 60 2156 62 40 41 59 489 40 490 2157 61 2152 40 41 41 123 2153 46 2158 46 2159 40 418 323 63 91 93 123 2018 125 41 59 2151 46 2160 46 2161 40 418 2162 40 41 41 59 2157 46 2160 46 2161 40 418 2162 40 41 41 59 418 2033 40 2151 41 46 2163 40 2151 44 2164 619 123 2157 46 2165 46 2166 40 424 41 59 2157 46 2165 46 2166 40 2151 46 2165 46 2167 46 2168 40 41 41 59 2164 46 2169 40 380 41 59 450 2157 46 2169 40 380 41 59 125 44 2170 619 2170 46 2160 46 2171 40 41 46 2172 40 41 41 59 2151 46 2173 46 2174 40 41 59 2157 46 2173 46 2174 40 41 59 125 489 490 2175 61 2152 40 41 59 2176 46 2177 40 1502 44 2175 46 2178 46 2179 40 41 41 59 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1502 44 2016 61 478 40 2014 41 41 93 439 314 2084 2180 40 323 2018 44 323 2181 44 323 2182 44 323 314 41 123 2183 40 41 59 489 40 490 2184 61 2185 40 41 41 123 490 2186 61 40 2187 41 2184 46 2188 60 2189 62 40 41 59 2186 46 2190 46 2191 40 418 323 63 91 93 123 424 44 2018 125 41 59 2192 46 2193 40 2194 46 2195 44 2184 46 2196 46 2197 40 41 46 2198 41 59 392 40 2182 41 123 392 40 314 41 123 319 2184 46 2196 46 2199 40 41 59 125 360 123 2184 46 2196 46 2200 40 41 59 125 2192 46 2193 40 2194 46 2201 44 2184 46 2196 46 2197 40 41 46 2198 41 59 125 2184 46 2202 46 2203 40 418 2204 40 41 41 59 2184 46 2202 46 2203 40 418 2204 40 41 41 59 392 40 314 41 123 392 40 2181 41 123 319 418 2033 40 2184 41 46 2205 40 2184 44 40 2206 44 2207 41 619 2206 46 2208 40 380 44 2207 41 44 40 2206 44 2209 41 619 123 2192 46 304 40 380 41 59 450 2084 46 2210 40 380 41 59 125 41 59 2184 46 2211 46 2212 40 41 59 125 360 123 319 2184 46 2213 40 41 59 125 125 360 123 392 40 2181 41 123 418 2033 40 2184 41 46 2214 40 2184 44 2215 619 2215 46 2216 40 380 41 44 2215 619 123 2192 46 304 40 380 41 59 450 380 59 125 41 59 2184 46 2217 46 2218 40 41 59 125 360 123 2184 46 2219 40 41 59 125 125 2192 46 2193 40 1502 44 2186 46 2220 41 59 2192 46 2193 40 1502 44 2186 46 2221 41 59 2192 46 2193 40 2182 63 2194 46 2222 58 2194 46 2195 44 2184 46 2196 46 2197 40 41 46 2198 41 59 392 40 2182 41 123 392 40 314 41 123 319 2184 46 2196 46 2223 40 41 59 125 360 123 2184 46 2196 46 2224 40 41 59 125 125 2192 46 2193 40 2194 46 2195 44 2184 46 2196 46 2197 40 41 46 2198 41 59 125 489 40 490 2184 61 2185 40 41 41 123 2225 46 2226 40 1502 44 2184 46 2227 46 2228 40 41 41 59 125 125 91 2011 93 621 91 2012 40 2013 40 2014 46 2015 41 44 1502 44 2016 61 478 40 2014 41 41 93 439 314 2084 2229 40 323 2018 44 323 2182 44 323 314 41 123 2230 40 41 59 489 40 490 2231 61 2232 40 41 41 123 489 490 2233 61 418 2234 40 41 59 490 2235 61 40 2236 41 2231 46 2237 60 2238 62 40 41 59 2235 46 2239 46 2240 40 418 323 63 91 93 123 424 44 2018 125 41 59 2241 46 2242 40 2243 46 2244 44 2231 46 2245 46 2246 40 41 46 2247 41 59 392 40 2182 41 123 392 40 314 41 123 319 2231 46 2245 46 2248 40 41 59 125 360 123 2231 46 2245 46 2249 40 41 59 125 2241 46 2242 40 2243 46 2250 44 2231 46 2245 46 2246 40 41 46 2247 41 59 125 2231 46 2251 46 2252 40 418 2253 40 41 41 59 2231 46 2251 46 2252 40 418 2253 40 41 41 59 490 2254 61 473 59 392 40 314 41 123 319 418 2033 40 2231 41 46 2255 40 40 2256 58 2231 44 2234 58 2233 41 44 314 40 2257 44 2258 41 619 123 490 2259 61 319 2257 46 2256 46 2260 40 380 44 2258 41 59 2257 46 2234 46 2261 46 2262 40 41 59 2257 46 2234 46 2245 46 2263 40 2257 46 2256 46 2245 46 2246 40 41 41 59 490 2264 61 2257 46 2234 46 2245 46 2265 59 392 40 2254 41 123 2241 46 2266 40 2264 41 59 125 360 123 2241 46 2267 40 2264 41 59 125 319 2257 46 2234 46 2245 46 2268 40 2257 46 2256 46 2245 46 2265 33 46 2269 40 41 44 2258 41 59 2241 46 2270 40 2264 44 2257 46 2234 46 2245 46 2265 41 59 319 2257 46 2234 46 2271 46 2272 40 418 2273 40 41 44 2258 41 59 319 2257 46 2234 46 2260 40 2258 41 59 392 40 2254 41 123 2254 61 380 59 469 2274 46 2275 40 1506 41 59 125 450 2259 59 125 44 40 2257 44 2276 41 619 123 2241 46 304 40 380 41 59 450 2084 46 2277 40 380 41 59 125 41 59 2231 46 2278 46 2279 40 41 59 125 360 123 418 2033 40 2231 41 46 2280 40 40 2281 58 2231 44 2234 58 2233 41 44 2282 619 123 490 2283 61 2282 46 2281 46 2284 40 380 41 59 2282 46 2234 46 2285 46 2286 40 41 59 2282 46 2234 46 2245 46 2287 40 2282 46 2281 46 2245 46 2246 40 41 41 59 490 2288 61 2282 46 2234 46 2245 46 2289 59 392 40 2254 41 123 2241 46 2290 40 2288 41 59 125 360 123 2241 46 2291 40 2288 41 59 125 2282 46 2234 46 2245 46 2292 40 2282 46 2281 46 2245 46 2289 33 46 2293 40 41 41 59 2241 46 2294 40 2288 44 2282 46 2234 46 2245 46 2289 41 59 2282 46 2234 46 2295 46 2252 40 418 2296 40 41 41 59 2282 46 2234 46 2284 40 41 59 392 40 2254 41 123 2254 61 380 59 469 2297 46 2298 40 1506 41 59 125 450 2283 59 125 44 2282 619 123 2241 46 304 40 380 41 59 450 380 59 125 41 59 2231 46 2299 46 2300 40 41 59 125 2241 46 2242 40 2182 63 1502 58 1502 44 2235 46 2301 41 59 2241 46 2242 40 1502 44 2235 46 2302 41 59 2241 46 2242 40 2182 63 2243 46 2303 58 2243 46 2244 44 2231 46 2245 46 2246 40 41 46 2247 41 59 392 40 2182 41 123 392 40 314 41 123 319 2231 46 2245 46 2304 40 41 59 125 360 123 2231 46 2245 46 2305 40 41 59 125 125 2241 46 2242 40 2243 46 2244 44 2231 46 2245 46 2246 40 41 46 2247 41 59 125 489 40 490 2231 61 2232 40 41 41 123 2306 46 2307 40 1502 44 2231 46 2308 46 2309 40 41 41 59 125 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1502 44 2016 61 478 40 2014 41 41 93 439 314 2084 2310 40 323 2181 44 323 314 41 123 2311 40 41 59 489 40 490 2312 61 2313 40 41 41 123 2312 46 2314 46 2315 40 418 2316 40 41 41 59 2312 46 2314 46 2315 40 418 2316 40 41 41 59 2312 46 2317 40 41 59 125 489 40 490 2312 61 2313 40 41 41 123 490 2318 61 40 2319 41 2312 46 2320 60 2321 62 40 41 59 2318 46 2322 46 2323 40 418 323 63 91 93 123 473 125 41 59 2324 46 2325 40 2326 46 2327 44 2312 46 2328 46 2329 40 41 46 2330 41 59 2331 60 2332 62 411 59 392 40 314 41 123 392 40 2181 41 123 411 61 319 418 2033 40 2312 41 46 2333 40 2312 44 40 2334 44 2335 41 619 2334 46 2336 46 2337 40 2335 41 44 424 41 59 125 360 123 411 61 319 2312 46 2338 46 2339 40 41 59 125 125 360 123 392 40 2181 41 123 411 61 418 2033 40 2312 41 46 2340 40 2312 44 2341 619 2341 46 2342 46 2343 40 41 44 424 41 59 125 360 123 411 61 2312 46 2344 46 2345 40 41 59 125 125 2324 46 2325 40 1502 44 411 46 2346 41 59 2324 46 2325 40 1501 44 2318 46 2347 41 59 2324 46 2325 40 1502 44 2318 46 2348 41 59 2324 46 2325 40 2326 46 2327 44 2312 46 2328 46 2329 40 41 46 2330 41 59 125 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1502 44 2016 61 478 40 2014 41 41 93 439 314 2084 2349 40 323 2181 44 323 314 41 123 2350 40 41 59 489 40 490 2351 61 2352 40 41 41 123 2351 46 2353 46 2354 40 418 2355 40 41 41 59 2351 46 2353 46 2354 40 418 2355 40 41 41 59 2351 46 2356 40 41 59 125 489 40 490 2351 61 2352 40 41 41 123 490 2357 61 40 2358 41 2351 46 2359 60 2360 62 40 41 59 2357 46 2361 46 2362 40 418 323 63 91 93 123 473 125 41 59 2363 46 2364 40 2365 46 2366 44 2351 46 2367 46 2368 40 41 46 2369 41 59 2370 60 2371 62 411 59 392 40 314 41 123 392 40 2181 41 123 411 61 319 418 2033 40 2351 41 46 2372 40 2351 44 40 2373 44 2374 41 619 2373 46 2375 60 2371 62 40 41 46 2376 40 64 648 41 46 2377 40 2374 41 44 424 41 59 125 360 123 411 61 319 2351 46 2378 60 2371 62 40 41 46 2379 40 64 648 41 46 2380 40 41 59 125 125 360 123 392 40 2181 41 123 411 61 418 2033 40 2351 41 46 2381 40 2351 44 2382 619 2382 46 2383 60 2371 62 40 41 46 2384 40 64 648 41 46 2385 40 41 44 424 41 59 125 360 123 411 61 2351 46 2386 60 2371 62 40 41 46 2387 40 64 648 41 46 2388 40 41 59 125 125 2363 46 2364 40 1502 44 411 46 2389 41 59 2363 46 2364 40 1501 44 2357 46 2390 41 59 2363 46 2364 40 1502 44 2357 46 2391 41 59 2363 46 2364 40 2365 46 2366 44 2351 46 2367 46 2368 40 41 46 2369 41 59 125 125 91 2011 93 91 2012 40 2013 40 2014 46 2015 41 44 1502 44 2016 61 478 40 2014 41 41 93 439 314 2084 2392 40 323 2181 44 323 314 41 123 489 490 2393 61 2394 40 41 59 490 2395 61 40 2396 41 2393 46 2397 60 2398 62 40 41 59 2395 46 2399 46 2400 40 418 323 63 91 93 123 473 125 41 59 2401 46 2402 40 2403 46 2404 44 2393 46 2405 46 2406 40 41 46 2407 41 59 392 40 314 41 123 392 40 2181 41 123 319 418 2033 40 2393 41 46 2408 40 2393 44 2409 619 2409 46 2405 46 2410 40 41 41 59 125 360 123 319 2393 46 2405 46 2411 40 41 59 125 125 360 123 392 40 2181 41 123 418 2033 40 2393 41 46 2412 40 2393 44 2413 619 2413 46 2405 46 2414 40 41 41 59 125 360 123 2393 46 2405 46 2415 40 41 59 125 125 2401 46 2402 40 1502 44 2395 46 2416 41 59 392 40 314 41 123 2393 46 2405 46 2417 40 41 59 125 360 123 319 2393 46 2405 46 2418 40 41 59 125 2401 46 2402 40 2403 46 2404 44 2393 46 2405 46 2406 40 41 46 2407 41 59 125 91 2011 93 91 2419 40 380 41 93 91 2419 40 473 41 93 439 314 2084 2420 40 323 314 41 123 489 490 2421 61 2422 40 41 59 490 2423 61 40 2424 41 2421 46 2425 60 2426 62 40 41 59 2423 46 2427 46 2428 40 418 323 63 91 93 123 473 125 41 59 2429 46 2430 40 2431 46 2432 44 2421 46 2433 46 2434 40 41 46 2435 41 59 392 40 314 41 123 490 2436 61 319 418 2033 40 2421 41 46 2437 40 2421 44 2438 619 2421 46 2433 46 2439 40 41 41 59 2436 46 2440 40 41 59 125 360 123 490 2441 61 418 2033 40 2421 41 46 2442 40 2421 44 2443 619 2421 46 2433 46 2444 40 41 41 59 2441 46 2445 40 41 59 125 2429 46 2430 40 1502 44 2423 46 2446 41 59 2429 46 2430 40 2431 46 2432 44 2421 46 2433 46 2434 40 41 46 2435 41 59 125 91 2447 93 439 492 2448 40 41 123 2449 40 41 59 489 40 490 2450 61 2451 40 41 41 123 490 2452 61 40 2453 41 2450 46 2454 60 2455 62 40 41 59 2452 46 2456 46 2457 40 418 323 63 91 93 123 473 44 424 44 473 44 473 125 41 59 2452 46 2458 46 2457 40 418 323 63 91 93 123 473 44 473 44 473 44 473 125 41 59 2450 46 2459 46 2460 40 418 2461 40 41 41 59 2462 46 2463 60 2464 62 40 40 41 619 418 2033 40 2450 44 2465 46 2466 40 1503 41 41 46 2467 40 2450 44 2468 619 2468 46 2469 40 380 41 44 2468 619 380 41 41 59 2450 46 2470 46 2471 40 41 59 2462 46 2472 40 1502 44 2452 46 2473 41 59 2462 46 2472 40 1502 44 2452 46 2474 41 59 125 489 40 490 2450 61 2451 40 41 41 123 2475 46 2476 40 1500 44 2450 46 2477 46 2478 40 41 41 59 125 125 438 334 2034 58 2479 123 439 2034 40 2480 2481 41 58 320 40 2481 41 123 125 439 2482 60 2483 62 2484 123 2485 59 2486 59 125 439 2482 60 2487 62 2488 123 2489 59 2490 59 125 125 438 334 2491 123 439 404 2492 123 2493 59 2494 59 125 439 461 2495 123 2496 59 2497 59 125 125 439 334 2498 58 2479 123 439 2499 60 2500 62 2501 123 2502 59 2503 59 125 438 431 492 2504 40 2505 2506 41 619 2506 46 2507 40 41 59 125 439 334 2508 123 439 404 2509 123 2510 59 2511 59 125 125 438 491 2034 2512 40 41 619 40 2034 41 2009 46 2512 40 41 59 437 492 2513 40 41 123 489 490 2514 61 2512 40 41 59 386 40 490 2515 398 2514 46 2516 46 2517 40 41 41 123 2514 46 2518 40 2515 41 59 2514 46 2519 40 41 59 125 125 439 334 2002 58 2520 60 2479 62 123 438 431 323 2521 619 380 59 438 431 461 2522 123 2523 59 125 61 2013 40 2000 41 59 439 418 2524 2525 619 40 2524 41 320 46 2525 59 439 2526 2526 619 40 2526 41 2527 59 438 431 2528 2529 619 2530 46 2531 59 438 431 2532 2533 123 2534 59 125 61 478 40 2034 41 59 438 431 2535 2536 40 2535 2537 41 619 320 46 2536 40 2537 41 46 2538 60 2539 44 2540 62 40 41 46 2541 60 2542 44 2543 62 40 41 46 2538 60 2544 44 2545 62 40 41 59 439 431 2546 2547 40 2546 2548 41 123 490 2549 61 320 46 2547 40 2548 41 59 418 2550 40 2549 41 46 2551 40 1501 41 59 450 2549 59 125 438 431 323 2552 40 461 2553 41 619 2553 614 2554 46 2555 46 2556 59 125 125 
71573,C#,"public class BuiltInDataTypesSqliteTest : BuiltInDataTypesTestBase<BuiltInDataTypesSqliteTest.BuiltInDataTypesSqliteFixture>
{
    public BuiltInDataTypesSqliteTest(BuiltInDataTypesSqliteFixture fixture, ITestOutputHelper testOutputHelper)
        : base(fixture)
    {
        fixture.TestSqlLoggerFactory.Clear();
        //fixture.TestSqlLoggerFactory.SetTestOutputHelper(testOutputHelper);
    }

    [ConditionalFact]
    public virtual void Can_insert_and_query_decimal()
    {
        using (var context = CreateContext())
        {
            context.Set<BuiltInNullableDataTypes>().Add(
                new BuiltInNullableDataTypes { Id = 14, TestNullableDecimal = 3m });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            var entity = context.Set<BuiltInNullableDataTypes>().Single(e => e.Id == 14);

            Assert.Same(entity, context.Set<BuiltInNullableDataTypes>().Single(e => e.Id == 14 && e.TestNullableDecimal == 3m));
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedDataTypes>().Add(CreateMappedDataTypes(66));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedDataTypes(context.Set<MappedDataTypes>().Single(e => e.Id == 66), 66);
        }
    }

    private static void AssertMappedDataTypes(MappedDataTypes entity, int id)
    {
        Assert.Equal(id, entity.Id);
        Assert.Equal(78L, entity.Integer);
        Assert.Equal(84.4, entity.Real);
        Assert.Equal(""don't"", entity.SomeString);
        Assert.Equal(""G"", entity.Text);
        Assert.Equal(new byte[] { 86 }, entity.Blob);
    }

    private static MappedDataTypes CreateMappedDataTypes(int id)
        => new()
        {
            Id = id,
            Int = 77,
            Integer = 78L,
            Real = 84.4,
            SomeString = ""don't"",
            Text = ""G"",
            Blob = new byte[] { 86 }
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_nullable_data_types()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypes>().Add(CreateMappedNullableDataTypes(69));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 69), 69);
        }
    }

    private static void AssertMappedNullableDataTypes(MappedNullableDataTypes entity, int id)
    {
        Assert.Equal(id, entity.Id);
        Assert.Equal(78L, entity.Integer);
        Assert.Equal(84.4, entity.Real);
        Assert.Equal(""don't"", entity.SomeString);
        Assert.Equal(""G"", entity.Text);
        Assert.Equal(new byte[] { 86 }, entity.Blob);
    }

    private static MappedNullableDataTypes CreateMappedNullableDataTypes(int id)
        => new()
        {
            Id = id,
            Int = 77,
            Integer = 78L,
            Real = 84.4,
            SomeString = ""don't"",
            Text = ""G"",
            Blob = new byte[] { 86 }
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_set_to_null()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypes>().Add(
                new MappedNullableDataTypes { Id = 78 });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 78), 78);
        }
    }

    private static void AssertNullMappedNullableDataTypes(MappedNullableDataTypes entity, int id)
    {
        Assert.Equal(id, entity.Id);
        Assert.Null(entity.Integer);
        Assert.Null(entity.Real);
        Assert.Null(entity.Text);
        Assert.Null(entity.SomeString);
        Assert.Null(entity.Blob);
        Assert.Null(entity.Int);
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_sized_data_types()
    {
        // Size expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypes>().Add(CreateMappedSizedDataTypes(77));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 77), 77);
        }
    }

    private static void AssertMappedSizedDataTypes(MappedSizedDataTypes entity, int id)
    {
        Assert.Equal(id, entity.Id);
        Assert.Equal(""Into"", entity.Nvarchar);
        Assert.Equal(new byte[] { 10, 11, 12, 13 }, entity.Binary);
    }

    private static MappedSizedDataTypes CreateMappedSizedDataTypes(int id)
        => new()
        {
            Id = id,
            Nvarchar = ""Into"",
            Binary = new byte[] { 10, 11, 12, 13 }
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_nulls_for_all_mapped_sized_data_types()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypes>().Add(
                new MappedSizedDataTypes { Id = 78 });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 78), 78);
        }
    }

    private static void AssertNullMappedSizedDataTypes(MappedSizedDataTypes entity, int id)
    {
        Assert.Equal(id, entity.Id);
        Assert.Null(entity.Nvarchar);
        Assert.Null(entity.Binary);
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_scale()
    {
        // Scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedScaledDataTypes>().Add(CreateMappedScaledDataTypes(77));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedScaledDataTypes(context.Set<MappedScaledDataTypes>().Single(e => e.Id == 77), 77);
        }
    }

    private static void AssertMappedScaledDataTypes(MappedScaledDataTypes entity, int id)
    {
        Assert.Equal(id, entity.Id);
        Assert.Equal(83.3f, entity.Float);
        Assert.Equal(new DateTimeOffset(new DateTime(2016, 1, 2, 11, 11, 12), TimeSpan.Zero), entity.Datetimeoffset);
        Assert.Equal(new DateTime(2017, 1, 2, 12, 11, 12), entity.Datetime2);
        Assert.Equal(101.1m, entity.Decimal);
    }

    private static MappedScaledDataTypes CreateMappedScaledDataTypes(int id)
        => new()
        {
            Id = id,
            Float = 83.3f,
            Datetimeoffset = new DateTimeOffset(new DateTime(2016, 1, 2, 11, 11, 12), TimeSpan.Zero),
            Datetime2 = new DateTime(2017, 1, 2, 12, 11, 12),
            Decimal = 101.1m
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_precision_and_scale()
    {
        // Precision and scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedPrecisionAndScaledDataTypes>().Add(
                new MappedPrecisionAndScaledDataTypes { Id = 77, Decimal = 101.1m });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            var entity = context.Set<MappedPrecisionAndScaledDataTypes>().Single(e => e.Id == 77);

            Assert.Equal(101.1m, entity.Decimal);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_Identity()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedDataTypesWithIdentity>().Add(CreateMappedDataTypesWithIdentity(66));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedDataTypesWithIdentity(context.Set<MappedDataTypesWithIdentity>().Single(e => e.AltId == 66), 66);
        }
    }

    private static void AssertMappedDataTypesWithIdentity(MappedDataTypesWithIdentity entity, int id)
    {
        Assert.Equal(id, entity.AltId);
        Assert.Equal(78L, entity.Integer);
        Assert.Equal(84.4, entity.Real);
        Assert.Equal(""don't"", entity.SomeString);
        Assert.Equal(""G"", entity.Text);
        Assert.Equal(new byte[] { 86 }, entity.Blob);
    }

    private static MappedDataTypesWithIdentity CreateMappedDataTypesWithIdentity(int id)
        => new()
        {
            AltId = id,
            Int = 77,
            Integer = 78L,
            Real = 84.4,
            SomeString = ""don't"",
            Text = ""G"",
            Blob = new byte[] { 86 }
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_nullable_data_types_with_Identity()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypesWithIdentity>().Add(CreateMappedNullableDataTypesWithIdentity(69));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 69), 69);
        }
    }

    private static void AssertMappedNullableDataTypesWithIdentity(MappedNullableDataTypesWithIdentity entity, int id)
    {
        Assert.Equal(id, entity.AltId);
        Assert.Equal(78L, entity.Integer);
        Assert.Equal(84.4, entity.Real);
        Assert.Equal(""don't"", entity.SomeString);
        Assert.Equal(""G"", entity.Text);
        Assert.Equal(new byte[] { 86 }, entity.Blob);
    }

    private static MappedNullableDataTypesWithIdentity CreateMappedNullableDataTypesWithIdentity(int id)
        => new()
        {
            AltId = id,
            Int = 77,
            Integer = 78L,
            Real = 84.4,
            SomeString = ""don't"",
            Text = ""G"",
            Blob = new byte[] { 86 }
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_set_to_null_with_Identity()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypesWithIdentity>().Add(
                new MappedNullableDataTypesWithIdentity { AltId = 78 });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 78), 78);
        }
    }

    private static void AssertNullMappedNullableDataTypesWithIdentity(MappedNullableDataTypesWithIdentity entity, int id)
    {
        Assert.Equal(id, entity.AltId);
        Assert.Null(entity.Integer);
        Assert.Null(entity.Real);
        Assert.Null(entity.Text);
        Assert.Null(entity.SomeString);
        Assert.Null(entity.Blob);
        Assert.Null(entity.Int);
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_sized_data_types_with_Identity()
    {
        // Size expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypesWithIdentity>().Add(CreateMappedSizedDataTypesWithIdentity(77));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedSizedDataTypesWithIdentity(context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 77), 77);
        }
    }

    private static void AssertMappedSizedDataTypesWithIdentity(MappedSizedDataTypesWithIdentity entity, int id)
    {
        Assert.Equal(id, entity.AltId);
        Assert.Equal(""Into"", entity.Nvarchar);
        Assert.Equal(new byte[] { 10, 11, 12, 13 }, entity.Binary);
    }

    private static MappedSizedDataTypesWithIdentity CreateMappedSizedDataTypesWithIdentity(int id)
        => new()
        {
            AltId = id,
            Nvarchar = ""Into"",
            Binary = new byte[] { 10, 11, 12, 13 }
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_nulls_for_all_mapped_sized_data_types_with_Identity()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypesWithIdentity>().Add(
                new MappedSizedDataTypesWithIdentity { AltId = 78 });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedSizedDataTypesWithIdentity(context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 78), 78);
        }
    }

    private static void AssertNullMappedSizedDataTypesWithIdentity(MappedSizedDataTypesWithIdentity entity, int id)
    {
        Assert.Equal(id, entity.AltId);
        Assert.Null(entity.Nvarchar);
        Assert.Null(entity.Binary);
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_scale_with_Identity()
    {
        // Scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedScaledDataTypesWithIdentity>().Add(CreateMappedScaledDataTypesWithIdentity(77));

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedScaledDataTypesWithIdentity(context.Set<MappedScaledDataTypesWithIdentity>().Single(e => e.AltId == 77), 77);
        }
    }

    private static void AssertMappedScaledDataTypesWithIdentity(MappedScaledDataTypesWithIdentity entity, int id)
    {
        Assert.Equal(id, entity.AltId);
        Assert.Equal(83.3f, entity.Float);
        Assert.Equal(new DateTimeOffset(new DateTime(2016, 1, 2, 11, 11, 12), TimeSpan.Zero), entity.Datetimeoffset);
        Assert.Equal(new DateTime(2017, 1, 2, 12, 11, 12), entity.Datetime2);
        Assert.Equal(101.1m, entity.Decimal);
    }

    private static MappedScaledDataTypesWithIdentity CreateMappedScaledDataTypesWithIdentity(int id)
        => new()
        {
            AltId = id,
            Float = 83.3f,
            Datetimeoffset = new DateTimeOffset(new DateTime(2016, 1, 2, 11, 11, 12), TimeSpan.Zero),
            Datetime2 = new DateTime(2017, 1, 2, 12, 11, 12),
            Decimal = 101.1m
        };

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_precision_and_scale_with_Identity()
    {
        // Precision and scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Add(
                new MappedPrecisionAndScaledDataTypesWithIdentity { AltId = 77, Decimal = 101.1m });

            Assert.Equal(1, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            var entity = context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Single(e => e.AltId == 77);

            Assert.Equal(101.1m, entity.Decimal);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedDataTypes>().Add(CreateMappedDataTypes(166));
            context.Set<MappedDataTypes>().Add(CreateMappedDataTypes(167));
            context.Set<MappedDataTypes>().Add(CreateMappedDataTypes(168));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedDataTypes(context.Set<MappedDataTypes>().Single(e => e.Id == 166), 166);
            AssertMappedDataTypes(context.Set<MappedDataTypes>().Single(e => e.Id == 167), 167);
            AssertMappedDataTypes(context.Set<MappedDataTypes>().Single(e => e.Id == 168), 168);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_nullable_data_types_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypes>().Add(CreateMappedNullableDataTypes(169));
            context.Set<MappedNullableDataTypes>().Add(CreateMappedNullableDataTypes(170));
            context.Set<MappedNullableDataTypes>().Add(CreateMappedNullableDataTypes(171));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 169), 169);
            AssertMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 170), 170);
            AssertMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 171), 171);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_set_to_null_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypes>().Add(
                new MappedNullableDataTypes { Id = 278 });
            context.Set<MappedNullableDataTypes>().Add(
                new MappedNullableDataTypes { Id = 279 });
            context.Set<MappedNullableDataTypes>().Add(
                new MappedNullableDataTypes { Id = 280 });

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 278), 278);
            AssertNullMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 279), 279);
            AssertNullMappedNullableDataTypes(context.Set<MappedNullableDataTypes>().Single(e => e.Id == 280), 280);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_sized_data_types_in_batch()
    {
        // Size expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypes>().Add(CreateMappedSizedDataTypes(177));
            context.Set<MappedSizedDataTypes>().Add(CreateMappedSizedDataTypes(178));
            context.Set<MappedSizedDataTypes>().Add(CreateMappedSizedDataTypes(179));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 177), 177);
            AssertMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 178), 178);
            AssertMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 179), 179);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_nulls_for_all_mapped_sized_data_types_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypes>().Add(
                new MappedSizedDataTypes { Id = 278 });
            context.Set<MappedSizedDataTypes>().Add(
                new MappedSizedDataTypes { Id = 279 });
            context.Set<MappedSizedDataTypes>().Add(
                new MappedSizedDataTypes { Id = 280 });

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 278), 278);
            AssertNullMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 279), 279);
            AssertNullMappedSizedDataTypes(context.Set<MappedSizedDataTypes>().Single(e => e.Id == 280), 280);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_scale_in_batch()
    {
        // Scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedScaledDataTypes>().Add(CreateMappedScaledDataTypes(177));
            context.Set<MappedScaledDataTypes>().Add(CreateMappedScaledDataTypes(178));
            context.Set<MappedScaledDataTypes>().Add(CreateMappedScaledDataTypes(179));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedScaledDataTypes(context.Set<MappedScaledDataTypes>().Single(e => e.Id == 177), 177);
            AssertMappedScaledDataTypes(context.Set<MappedScaledDataTypes>().Single(e => e.Id == 178), 178);
            AssertMappedScaledDataTypes(context.Set<MappedScaledDataTypes>().Single(e => e.Id == 179), 179);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_precision_and_scale_in_batch()
    {
        // Precision and scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedPrecisionAndScaledDataTypes>().Add(
                new MappedPrecisionAndScaledDataTypes { Id = 177, Decimal = 101.1m });
            context.Set<MappedPrecisionAndScaledDataTypes>().Add(
                new MappedPrecisionAndScaledDataTypes { Id = 178, Decimal = 101.1m });
            context.Set<MappedPrecisionAndScaledDataTypes>().Add(
                new MappedPrecisionAndScaledDataTypes { Id = 179, Decimal = 101.1m });

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            var entity = context.Set<MappedPrecisionAndScaledDataTypes>().Single(e => e.Id == 177);

            Assert.Equal(101.1m, entity.Decimal);

            entity = context.Set<MappedPrecisionAndScaledDataTypes>().Single(e => e.Id == 178);

            Assert.Equal(101.1m, entity.Decimal);

            entity = context.Set<MappedPrecisionAndScaledDataTypes>().Single(e => e.Id == 179);

            Assert.Equal(101.1m, entity.Decimal);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_Identity_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedDataTypesWithIdentity>().Add(CreateMappedDataTypesWithIdentity(166));
            context.Set<MappedDataTypesWithIdentity>().Add(CreateMappedDataTypesWithIdentity(167));
            context.Set<MappedDataTypesWithIdentity>().Add(CreateMappedDataTypesWithIdentity(168));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedDataTypesWithIdentity(context.Set<MappedDataTypesWithIdentity>().Single(e => e.AltId == 166), 166);
            AssertMappedDataTypesWithIdentity(context.Set<MappedDataTypesWithIdentity>().Single(e => e.AltId == 167), 167);
            AssertMappedDataTypesWithIdentity(context.Set<MappedDataTypesWithIdentity>().Single(e => e.AltId == 168), 168);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_nullable_data_types_with_Identity_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypesWithIdentity>().Add(CreateMappedNullableDataTypesWithIdentity(169));
            context.Set<MappedNullableDataTypesWithIdentity>().Add(CreateMappedNullableDataTypesWithIdentity(170));
            context.Set<MappedNullableDataTypesWithIdentity>().Add(CreateMappedNullableDataTypesWithIdentity(171));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 169), 169);
            AssertMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 170), 170);
            AssertMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 171), 171);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_set_to_null_with_Identity_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedNullableDataTypesWithIdentity>().Add(
                new MappedNullableDataTypesWithIdentity { AltId = 278 });
            context.Set<MappedNullableDataTypesWithIdentity>().Add(
                new MappedNullableDataTypesWithIdentity { AltId = 279 });
            context.Set<MappedNullableDataTypesWithIdentity>().Add(
                new MappedNullableDataTypesWithIdentity { AltId = 280 });

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 278), 278);
            AssertNullMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 279), 279);
            AssertNullMappedNullableDataTypesWithIdentity(
                context.Set<MappedNullableDataTypesWithIdentity>().Single(e => e.AltId == 280), 280);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_sized_data_types_with_Identity_in_batch()
    {
        // Size expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypesWithIdentity>().Add(CreateMappedSizedDataTypesWithIdentity(177));
            context.Set<MappedSizedDataTypesWithIdentity>().Add(CreateMappedSizedDataTypesWithIdentity(178));
            context.Set<MappedSizedDataTypesWithIdentity>().Add(CreateMappedSizedDataTypesWithIdentity(179));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedSizedDataTypesWithIdentity(context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 177), 177);
            AssertMappedSizedDataTypesWithIdentity(context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 178), 178);
            AssertMappedSizedDataTypesWithIdentity(context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 179), 179);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_nulls_for_all_mapped_sized_data_types_with_Identity_in_batch()
    {
        using (var context = CreateContext())
        {
            context.Set<MappedSizedDataTypesWithIdentity>().Add(
                new MappedSizedDataTypesWithIdentity { AltId = 278 });
            context.Set<MappedSizedDataTypesWithIdentity>().Add(
                new MappedSizedDataTypesWithIdentity { AltId = 279 });
            context.Set<MappedSizedDataTypesWithIdentity>().Add(
                new MappedSizedDataTypesWithIdentity { AltId = 280 });

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertNullMappedSizedDataTypesWithIdentity(
                context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 278), 278);
            AssertNullMappedSizedDataTypesWithIdentity(
                context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 279), 279);
            AssertNullMappedSizedDataTypesWithIdentity(
                context.Set<MappedSizedDataTypesWithIdentity>().Single(e => e.AltId == 280), 280);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_scale_with_Identity_in_batch()
    {
        // Scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedScaledDataTypesWithIdentity>().Add(CreateMappedScaledDataTypesWithIdentity(177));
            context.Set<MappedScaledDataTypesWithIdentity>().Add(CreateMappedScaledDataTypesWithIdentity(178));
            context.Set<MappedScaledDataTypesWithIdentity>().Add(CreateMappedScaledDataTypesWithIdentity(179));

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            AssertMappedScaledDataTypesWithIdentity(context.Set<MappedScaledDataTypesWithIdentity>().Single(e => e.AltId == 177), 177);
            AssertMappedScaledDataTypesWithIdentity(context.Set<MappedScaledDataTypesWithIdentity>().Single(e => e.AltId == 178), 178);
            AssertMappedScaledDataTypesWithIdentity(context.Set<MappedScaledDataTypesWithIdentity>().Single(e => e.AltId == 179), 179);
        }
    }

    [ConditionalFact]
    public virtual void Can_insert_and_read_back_all_mapped_data_types_with_precision_and_scale_with_Identity_in_batch()
    {
        // Precision and scale expected to be ignored, but everything should still work

        using (var context = CreateContext())
        {
            context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Add(
                new MappedPrecisionAndScaledDataTypesWithIdentity { AltId = 177, Decimal = 101.1m });
            context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Add(
                new MappedPrecisionAndScaledDataTypesWithIdentity { AltId = 178, Decimal = 101.1m });
            context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Add(
                new MappedPrecisionAndScaledDataTypesWithIdentity { AltId = 179, Decimal = 101.1m });

            Assert.Equal(3, context.SaveChanges());
        }

        using (var context = CreateContext())
        {
            var entity = context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Single(e => e.AltId == 177);
            Assert.Equal(101.1m, entity.Decimal);

            entity = context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Single(e => e.AltId == 178);
            Assert.Equal(101.1m, entity.Decimal);

            entity = context.Set<MappedPrecisionAndScaledDataTypesWithIdentity>().Single(e => e.AltId == 179);
            Assert.Equal(101.1m, entity.Decimal);
        }
    }

    [ConditionalFact]
    public void Can_get_column_types_from_built_model()
    {
        using var context = CreateContext();
        var typeMapper = context.GetService<IRelationalTypeMappingSource>();

        foreach (var property in context.Model.GetEntityTypes().SelectMany(e => e.GetDeclaredProperties()))
        {
            var columnType = property.GetColumnType();
            Assert.NotNull(columnType);

            if (property[RelationalAnnotationNames.ColumnType] == null)
            {
                Assert.Equal(
                    columnType.ToLowerInvariant(),
                    typeMapper.FindMapping(property).StoreType.ToLowerInvariant());
            }
        }
    }

    [ConditionalFact]
    public virtual void Cant_query_Min_of_converted_types()
    {
        using var context = CreateContext();
        var min = new BuiltInNullableDataTypes
        {
            Id = 201,
            PartitionId = 200,
            TestNullableDecimal = 2.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
            TestNullableTimeSpan = TimeSpan.FromDays(2),
            TestNullableUnsignedInt64 = 0
        };
        context.Add(min);

        var max = new BuiltInNullableDataTypes
        {
            Id = 202,
            PartitionId = 200,
            TestNullableDecimal = 10.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
            TestNullableTimeSpan = TimeSpan.FromDays(10),
            TestNullableUnsignedInt64 = long.MaxValue + 1ul
        };
        context.Add(max);

        context.SaveChanges();

        var query = context.Set<BuiltInNullableDataTypes>()
            .Where(e => e.PartitionId == 200)
            .GroupBy(_ => true);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Min), typeof(decimal).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Min(e => e.TestNullableDecimal)).ToList()).Message);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Min), typeof(DateTimeOffset).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Min(e => e.TestNullableDateTimeOffset)).ToList()).Message);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Min), typeof(TimeSpan).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Min(e => e.TestNullableTimeSpan)).ToList()).Message);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Min), typeof(ulong).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Min(e => e.TestNullableUnsignedInt64)).ToList()).Message);
    }

    [ConditionalFact]
    public virtual void Cant_query_Max_of_converted_types()
    {
        using var context = CreateContext();
        var min = new BuiltInNullableDataTypes
        {
            Id = 203,
            PartitionId = 201,
            TestNullableDecimal = 2.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
            TestNullableTimeSpan = TimeSpan.FromDays(2),
            TestNullableUnsignedInt64 = 0
        };
        context.Add(min);

        var max = new BuiltInNullableDataTypes
        {
            Id = 204,
            PartitionId = 201,
            TestNullableDecimal = 10.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
            TestNullableTimeSpan = TimeSpan.FromDays(10),
            TestNullableUnsignedInt64 = long.MaxValue + 1ul
        };
        context.Add(max);

        context.SaveChanges();

        var query = context.Set<BuiltInNullableDataTypes>()
            .Where(e => e.PartitionId == 201)
            .GroupBy(_ => true);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Max), typeof(decimal).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Max(e => e.TestNullableDecimal)).ToList()).Message);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Max), typeof(DateTimeOffset).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Max(e => e.TestNullableDateTimeOffset)).ToList()).Message);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Max), typeof(TimeSpan).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Max(e => e.TestNullableTimeSpan)).ToList()).Message);

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Max), typeof(ulong).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => query.Select(g => g.Max(e => e.TestNullableUnsignedInt64)).ToList()).Message);
    }

    [ConditionalFact]
    public virtual void Cant_query_Average_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInNullableDataTypes
            {
                Id = 205,
                PartitionId = 202,
                TestNullableDecimal = 1.000000000000003m
            });

        context.Add(
            new BuiltInNullableDataTypes
            {
                Id = 206,
                PartitionId = 202,
                TestNullableDecimal = 1.000000000000001m
            });

        context.SaveChanges();

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Average), typeof(decimal).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => context.Set<BuiltInNullableDataTypes>()
                    .Where(e => e.PartitionId == 202)
                    .Average(e => e.TestNullableDecimal)).Message);
    }

    [ConditionalFact]
    public virtual void Cant_query_Sum_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 205,
                PartitionId = 203,
                TestDecimal = 1.000000000000001m
            });

        context.Add(
            new BuiltInDataTypes
            {
                Id = 206,
                PartitionId = 203,
                TestDecimal = 1.000000000000001m
            });

        context.SaveChanges();

        Assert.Equal(
            SqliteStrings.AggregateOperationNotSupported(nameof(Queryable.Sum), typeof(decimal).ShortDisplayName()),
            Assert.Throws<NotSupportedException>(
                () => context.Set<BuiltInDataTypes>()
                    .Where(e => e.PartitionId == 203)
                    .Sum(e => e.TestDecimal)).Message);
    }

    [ConditionalFact]
    public virtual void Can_query_negation_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 207,
                PartitionId = 204,
                TestDecimal = 1.000000000000001m,
                TestTimeSpan = TimeSpan.FromMinutes(1)
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new BuiltInDataTypes
                {
                    Id = e.Id,
                    TestDecimal = -e.TestDecimal,
                    TestTimeSpan = -e.TestTimeSpan
                })
            .First(e => e.Id == 207);

        Assert.Equal(-1.000000000000001m, result.TestDecimal);
        Assert.Equal(TimeSpan.FromMinutes(-1), result.TestTimeSpan);
    }

    [ConditionalFact]
    public virtual void Can_query_add_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 208,
                PartitionId = 204,
                TestDecimal = 1.000000000000001m,
                TestDateTime = new DateTime(2018, 1, 1, 0, 0, 0),
                TestDateTimeOffset = new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                TestTimeSpan = TimeSpan.FromMinutes(1),
                TestUnsignedInt64 = ulong.MaxValue - 1ul
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new BuiltInDataTypes
                {
                    Id = e.Id,
                    TestDecimal = e.TestDecimal + 1m,
                    TestDateTime = e.TestDateTime + new TimeSpan(0, 1, 0),
                    TestDateTimeOffset = e.TestDateTimeOffset + new TimeSpan(0, 1, 0),
                    TestTimeSpan = e.TestTimeSpan + new TimeSpan(0, 1, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 + 1ul
                })
            .First(e => e.Id == 208);

        Assert.Equal(2.000000000000001m, result.TestDecimal);
        Assert.Equal(new DateTime(2018, 1, 1, 0, 1, 0), result.TestDateTime);
        Assert.Equal(new DateTimeOffset(2018, 1, 1, 0, 1, 0, TimeSpan.Zero), result.TestDateTimeOffset);
        Assert.Equal(TimeSpan.FromMinutes(2), result.TestTimeSpan);
        Assert.Equal(ulong.MaxValue, result.TestUnsignedInt64);
    }

    [ConditionalFact]
    public virtual void Can_query_subtract_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 209,
                PartitionId = 204,
                TestDecimal = 2.000000000000001m,
                TestDateTime = new DateTime(2018, 1, 1, 0, 1, 0),
                TestDateTimeOffset = new DateTimeOffset(2018, 1, 1, 0, 1, 0, TimeSpan.Zero),
                TestTimeSpan = TimeSpan.FromMinutes(2),
                TestUnsignedInt64 = ulong.MaxValue
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal - 1m,
                    TestDateTime1 = e.TestDateTime - new TimeSpan(0, 1, 0),
                    TestDateTime2 = e.TestDateTime - new DateTime(2018, 1, 1, 0, 0, 0),
                    TestDateTimeOffset1 = e.TestDateTimeOffset - new TimeSpan(0, 1, 0),
                    TestDateTimeOffset2 = e.TestDateTimeOffset - new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero),
                    TestTimeSpan = e.TestTimeSpan - new TimeSpan(0, 1, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 - 1ul
                })
            .First(e => e.Id == 209);

        Assert.Equal(1.000000000000001m, result.TestDecimal);
        Assert.Equal(new DateTime(2018, 1, 1, 0, 0, 0), result.TestDateTime1);
        Assert.Equal(TimeSpan.FromMinutes(1), result.TestDateTime2);
        Assert.Equal(new DateTimeOffset(2018, 1, 1, 0, 0, 0, TimeSpan.Zero), result.TestDateTimeOffset1);
        Assert.Equal(TimeSpan.FromMinutes(1), result.TestDateTimeOffset2);
        Assert.Equal(TimeSpan.FromMinutes(1), result.TestTimeSpan);
        Assert.Equal(ulong.MaxValue - 1ul, result.TestUnsignedInt64);
    }

    [ConditionalFact]
    public virtual void Can_query_less_than_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 210,
                PartitionId = 204,
                TestDecimal = 2,
                TestDateTime = new DateTime(2018, 2, 2, 0, 0, 0),
                TestDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
                TestTimeSpan = TimeSpan.FromDays(2),
                TestUnsignedInt64 = 0,
                TestCharacter = 'A'
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal < 10m,
                    TestDateTime = e.TestDateTime < new DateTime(2018, 10, 10, 0, 0, 0),
                    TestDateTimeOffset =
                        e.TestDateTimeOffset < new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
                    TestTimeSpan = e.TestTimeSpan < new TimeSpan(10, 0, 0, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 < ulong.MaxValue,
                    TestCharacter = e.TestCharacter < 'B'
                })
            .First(e => e.Id == 210);

        Assert.True(result.TestDecimal);
        Assert.True(result.TestDateTime);
        Assert.True(result.TestDateTimeOffset);
        Assert.True(result.TestTimeSpan);
        Assert.True(result.TestUnsignedInt64);
        Assert.True(result.TestCharacter);
    }

    [ConditionalFact]
    public virtual void Can_query_less_than_or_equal_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 211,
                PartitionId = 204,
                TestDecimal = 2,
                TestDateTime = new DateTime(2018, 2, 2, 0, 0, 0),
                TestDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
                TestTimeSpan = TimeSpan.FromDays(2),
                TestUnsignedInt64 = 0,
                TestCharacter = 'A'
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal <= 10m,
                    TestDateTime = e.TestDateTime <= new DateTime(2018, 10, 10, 0, 0, 0),
                    TestDateTimeOffset =
                        e.TestDateTimeOffset <= new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
                    TestTimeSpan = e.TestTimeSpan <= new TimeSpan(10, 0, 0, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 <= ulong.MaxValue,
                    TestCharacter = e.TestCharacter <= 'B'
                })
            .First(e => e.Id == 211);

        Assert.True(result.TestDecimal);
        Assert.True(result.TestDateTime);
        Assert.True(result.TestDateTimeOffset);
        Assert.True(result.TestTimeSpan);
        Assert.True(result.TestUnsignedInt64);
        Assert.True(result.TestCharacter);
    }

    [ConditionalFact]
    public virtual void Can_query_greater_than_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 212,
                PartitionId = 204,
                TestDecimal = 2,
                TestDateTime = new DateTime(2018, 2, 2, 0, 0, 0),
                TestDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
                TestTimeSpan = TimeSpan.FromDays(2),
                TestUnsignedInt64 = 0,
                TestCharacter = 'A'
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal > 10m,
                    TestDateTime = e.TestDateTime > new DateTime(2018, 10, 10, 0, 0, 0),
                    TestDateTimeOffset =
                        e.TestDateTimeOffset > new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
                    TestTimeSpan = e.TestTimeSpan > new TimeSpan(10, 0, 0, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 > ulong.MaxValue,
                    TestCharacter = e.TestCharacter > 'B'
                })
            .First(e => e.Id == 212);

        Assert.False(result.TestDecimal);
        Assert.False(result.TestDateTime);
        Assert.False(result.TestDateTimeOffset);
        Assert.False(result.TestTimeSpan);
        Assert.False(result.TestUnsignedInt64);
        Assert.False(result.TestCharacter);
    }

    [ConditionalFact]
    public virtual void Can_query_greater_than_or_equal_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 213,
                PartitionId = 204,
                TestDecimal = 2,
                TestDateTime = new DateTime(2018, 2, 2, 0, 0, 0),
                TestDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
                TestTimeSpan = TimeSpan.FromDays(2),
                TestUnsignedInt64 = 0,
                TestCharacter = 'A'
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal >= 10m,
                    TestDateTime = e.TestDateTime >= new DateTime(2018, 10, 10, 0, 0, 0),
                    TestDateTimeOffset =
                        e.TestDateTimeOffset >= new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
                    TestTimeSpan = e.TestTimeSpan >= new TimeSpan(10, 0, 0, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 >= ulong.MaxValue,
                    TestCharacter = e.TestCharacter >= 'B'
                })
            .First(e => e.Id == 213);

        Assert.False(result.TestDecimal);
        Assert.False(result.TestDateTime);
        Assert.False(result.TestDateTimeOffset);
        Assert.False(result.TestTimeSpan);
        Assert.False(result.TestUnsignedInt64);
        Assert.False(result.TestCharacter);
    }

    [ConditionalFact]
    public virtual void Can_query_divide_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 214,
                PartitionId = 204,
                TestDecimal = 2.000000000000002m,
                TestTimeSpan = TimeSpan.FromMinutes(2),
                TestUnsignedInt64 = ulong.MaxValue
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal / 2m,
                    TestTimeSpan1 = e.TestTimeSpan / 2.0,
                    TestTimeSpan2 = e.TestTimeSpan / new TimeSpan(0, 2, 0),
                    TestUnsignedInt64 = e.TestUnsignedInt64 / 5ul
                })
            .First(e => e.Id == 214);

        Assert.Equal(1.000000000000001m, result.TestDecimal);
        Assert.Equal(TimeSpan.FromMinutes(1), result.TestTimeSpan1);
        Assert.Equal(1.0, result.TestTimeSpan2);
        Assert.Equal(ulong.MaxValue / 5, result.TestUnsignedInt64);
    }

    [ConditionalFact]
    public virtual void Can_query_multiply_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 215,
                PartitionId = 204,
                TestDecimal = 1.000000000000001m,
                TestTimeSpan = TimeSpan.FromMinutes(1),
                TestUnsignedInt64 = ulong.MaxValue / 5
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new
                {
                    e.Id,
                    TestDecimal = e.TestDecimal * 2m,
                    TestTimeSpan1 = e.TestTimeSpan * 2.0,
                    TestTimeSpan2 = 2.0 * e.TestTimeSpan,
                    TestUnsignedInt64 = e.TestUnsignedInt64 * 5ul
                })
            .First(e => e.Id == 215);

        Assert.Equal(2.000000000000002m, result.TestDecimal);
        Assert.Equal(TimeSpan.FromMinutes(2), result.TestTimeSpan1);
        Assert.Equal(TimeSpan.FromMinutes(2), result.TestTimeSpan2);
        Assert.Equal(ulong.MaxValue, result.TestUnsignedInt64);
    }

    [ConditionalFact]
    public virtual void Can_query_modulo_of_converted_types()
    {
        using var context = CreateContext();
        context.Add(
            new BuiltInDataTypes
            {
                Id = 216,
                PartitionId = 204,
                TestDecimal = 3.000000000000003m,
                TestDouble = 1.5,
                TestSingle = 1.5f,
                TestUnsignedInt64 = 10000000000000000001
            });

        context.SaveChanges();

        var result = context.Set<BuiltInDataTypes>()
            .Select(
                e => new BuiltInDataTypes
                {
                    Id = e.Id,
                    TestDecimal = e.TestDecimal % 2.000000000000002m,
                    TestDouble = e.TestDouble % 1.0,
                    TestSingle = e.TestSingle % 1.0f,
                    TestUnsignedInt64 = e.TestUnsignedInt64 % 10000000000000000000
                })
            .First(e => e.Id == 216);

        Assert.Equal(1.000000000000001m, result.TestDecimal);
        Assert.Equal(0.5, result.TestDouble);
        Assert.Equal(0.5f, result.TestSingle);
        Assert.Equal(1ul, result.TestUnsignedInt64);
    }

    [ConditionalFact]
    public virtual void Cant_query_OrderBy_of_converted_types()
    {
        using var context = CreateContext();
        var min = new BuiltInNullableDataTypes
        {
            Id = 217,
            PartitionId = 205,
            TestNullableDecimal = 2.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
            TestNullableTimeSpan = TimeSpan.FromDays(2),
            TestNullableUnsignedInt64 = 0
        };
        context.Add(min);

        var max = new BuiltInNullableDataTypes
        {
            Id = 218,
            PartitionId = 205,
            TestNullableDecimal = 10.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
            TestNullableTimeSpan = TimeSpan.FromDays(10),
            TestNullableUnsignedInt64 = long.MaxValue + 1ul
        };
        context.Add(max);

        context.SaveChanges();

        var query = context.Set<BuiltInNullableDataTypes>()
            .Where(e => e.PartitionId == 205);

        var ex = Assert.Throws<NotSupportedException>(
            () => query
                .OrderBy(e => e.TestNullableDecimal)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""decimal""), ex.Message);

        ex = Assert.Throws<NotSupportedException>(
            () => query
                .OrderBy(e => e.TestNullableDateTimeOffset)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""DateTimeOffset""), ex.Message);

        ex = Assert.Throws<NotSupportedException>(
            () => query
                .OrderBy(e => e.TestNullableTimeSpan)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""TimeSpan""), ex.Message);

        ex = Assert.Throws<NotSupportedException>(
            () => query
                .OrderBy(e => e.TestNullableUnsignedInt64)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""ulong""), ex.Message);
    }

    [ConditionalFact]
    public virtual void Cant_query_ThenBy_of_converted_types()
    {
        using var context = CreateContext();
        var min = new BuiltInNullableDataTypes
        {
            Id = 219,
            PartitionId = 206,
            TestNullableDecimal = 2.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 12, 0, 0, TimeSpan.Zero),
            TestNullableTimeSpan = TimeSpan.FromDays(2),
            TestNullableUnsignedInt64 = 0
        };
        context.Add(min);

        var max = new BuiltInNullableDataTypes
        {
            Id = 220,
            PartitionId = 206,
            TestNullableDecimal = 10.000000000000001m,
            TestNullableDateTimeOffset = new DateTimeOffset(2018, 1, 1, 11, 0, 0, TimeSpan.FromHours(-2)),
            TestNullableTimeSpan = TimeSpan.FromDays(10),
            TestNullableUnsignedInt64 = long.MaxValue + 1ul
        };
        context.Add(max);

        context.SaveChanges();

        var query = context.Set<BuiltInNullableDataTypes>()
            .Where(e => e.PartitionId == 206)
            .OrderBy(e => e.PartitionId);

        var ex = Assert.Throws<NotSupportedException>(
            () => query
                .ThenBy(e => e.TestNullableDecimal)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""decimal""), ex.Message);

        ex = Assert.Throws<NotSupportedException>(
            () => query
                .ThenBy(e => e.TestNullableDateTimeOffset)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""DateTimeOffset""), ex.Message);

        ex = Assert.Throws<NotSupportedException>(
            () => query
                .ThenBy(e => e.TestNullableTimeSpan)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""TimeSpan""), ex.Message);

        ex = Assert.Throws<NotSupportedException>(
            () => query
                .ThenBy(e => e.TestNullableUnsignedInt64)
                .First());
        Assert.Equal(SqliteStrings.OrderByNotSupported(""ulong""), ex.Message);
    }

    [ConditionalFact]
    public virtual void Can_query_using_char_ToLower()
    {
        using var context = CreateContext();

        var results = context.Set<ObjectBackedDataTypes>()
            .Select(e => char.ToLower(e.Character)).ToList();

        AssertSql(
            @""SELECT lower(""""o"""".""""Character"""")
FROM """"ObjectBackedDataTypes"""" AS """"o"""""");

        var expectedResults = context.Set<ObjectBackedDataTypes>().AsEnumerable()
            .Select(e => char.ToLower(e.Character)).ToList();

        Assert.Equal(expectedResults, results);
    }

    [ConditionalFact]
    public virtual void Can_query_using_char_ToUpper()
    {
        using var context = CreateContext();

        var results = context.Set<ObjectBackedDataTypes>()
            .Select(e => char.ToUpper(e.Character)).ToList();

        AssertSql(
            @""SELECT upper(""""o"""".""""Character"""")
FROM """"ObjectBackedDataTypes"""" AS """"o"""""");

        var expectedResults = context.Set<ObjectBackedDataTypes>().AsEnumerable()
            .Select(e => char.ToUpper(e.Character)).ToList();

        Assert.Equal(expectedResults, results);
    }

    [ConditionalFact]
    public virtual void Can_query_using_hex_function()
    {
        using var context = CreateContext();

        var results = context.Set<ObjectBackedDataTypes>()
            .Select(e => EF.Functions.Hex(e.Bytes)).ToList();

        AssertSql(
            @""SELECT hex(""""o"""".""""Bytes"""")
FROM """"ObjectBackedDataTypes"""" AS """"o"""""");

        var expectedResults = context.Set<ObjectBackedDataTypes>().AsEnumerable()
            .Select(e => string.Concat(e.Bytes.Select(b => b.ToString(""X2"")))).ToList();

        Assert.Equal(expectedResults, results);
    }

    [ConditionalFact]
    public virtual void Can_query_using_substr_function()
    {
        using var context = CreateContext();

        var results = context.Set<ObjectBackedDataTypes>()
            .Select(e => EF.Functions.Substr(e.Bytes, 2)).ToList();

        AssertSql(
            @""SELECT substr(""""o"""".""""Bytes"""", 2)
FROM """"ObjectBackedDataTypes"""" AS """"o"""""");

        var expectedResults = context.Set<ObjectBackedDataTypes>().AsEnumerable()
            .Select(e => e.Bytes.Skip(1).ToArray()).ToList();

        Assert.Equal(expectedResults, results);
    }

    [ConditionalFact]
    public virtual void Can_query_using_substr_function_with_length()
    {
        using var context = CreateContext();

        var results = context.Set<ObjectBackedDataTypes>()
            .Select(e => EF.Functions.Substr(e.Bytes, 1, 1)).ToList();

        AssertSql(
            @""SELECT substr(""""o"""".""""Bytes"""", 1, 1)
FROM """"ObjectBackedDataTypes"""" AS """"o"""""");

        var expectedResults = context.Set<ObjectBackedDataTypes>().AsEnumerable()
            .Select(e => e.Bytes.Take(1).ToArray()).ToList();

        Assert.Equal(expectedResults, results);
    }

    public override void Object_to_string_conversion()
    {
        base.Object_to_string_conversion();

        AssertSql(
            @""SELECT CAST(""""b"""".""""TestSignedByte"""" AS TEXT), CAST(""""b"""".""""TestByte"""" AS TEXT), CAST(""""b"""".""""TestInt16"""" AS TEXT), CAST(""""b"""".""""TestUnsignedInt16"""" AS TEXT), CAST(""""b"""".""""TestInt32"""" AS TEXT), CAST(""""b"""".""""TestUnsignedInt32"""" AS TEXT), CAST(""""b"""".""""TestInt64"""" AS TEXT), """"b"""".""""TestUnsignedInt64"""", CAST(""""b"""".""""TestSingle"""" AS TEXT), CAST(""""b"""".""""TestDouble"""" AS TEXT), CAST(""""b"""".""""TestDecimal"""" AS TEXT), CAST(""""b"""".""""TestCharacter"""" AS TEXT), CAST(""""b"""".""""TestDateTime"""" AS TEXT), CAST(""""b"""".""""TestDateTimeOffset"""" AS TEXT), CAST(""""b"""".""""TestTimeSpan"""" AS TEXT)
FROM """"BuiltInDataTypes"""" AS """"b""""
WHERE """"b"""".""""Id"""" = 13"");
    }

    [ConditionalFact]
    public virtual void Projecting_aritmetic_operations_on_decimals()
    {
        using var context = CreateContext();
        var expected = (from dt1 in context.Set<BuiltInDataTypes>().ToList()
                        from dt2 in context.Set<BuiltInDataTypes>().ToList()
                        orderby dt1.Id, dt2.Id
                        select new
                        {
                            add = dt1.TestDecimal + dt2.TestDecimal,
                            subtract = dt1.TestDecimal - dt2.TestDecimal,
                            multiply = dt1.TestDecimal * dt2.TestDecimal,
                            divide = dt1.TestDecimal / dt2.TestDecimal,
                            negate = -dt1.TestDecimal
                        }).ToList();

        Fixture.TestSqlLoggerFactory.Clear();

        var actual = (from dt1 in context.Set<BuiltInDataTypes>()
                      from dt2 in context.Set<BuiltInDataTypes>()
                      orderby dt1.Id, dt2.Id
                      select new
                      {
                          add = dt1.TestDecimal + dt2.TestDecimal,
                          subtract = dt1.TestDecimal - dt2.TestDecimal,
                          multiply = dt1.TestDecimal * dt2.TestDecimal,
                          divide = dt1.TestDecimal / dt2.TestDecimal,
                          negate = -dt1.TestDecimal
                      }).ToList();

        Assert.Equal(expected.Count, actual.Count);
        for (var i = 0; i < expected.Count; i++)
        {
            Assert.Equal(expected[i].add, actual[i].add);
            Assert.Equal(expected[i].subtract, actual[i].subtract);
            Assert.Equal(expected[i].multiply, actual[i].multiply);
            Assert.Equal(expected[i].divide, actual[i].divide);
            Assert.Equal(expected[i].negate, actual[i].negate);
        }

        AssertSql(
            @""SELECT ef_add(""""b"""".""""TestDecimal"""", """"b0"""".""""TestDecimal"""") AS """"add"""", ef_add(""""b"""".""""TestDecimal"""", ef_negate(""""b0"""".""""TestDecimal"""")) AS """"subtract"""", ef_multiply(""""b"""".""""TestDecimal"""", """"b0"""".""""TestDecimal"""") AS """"multiply"""", ef_divide(""""b"""".""""TestDecimal"""", """"b0"""".""""TestDecimal"""") AS """"divide"""", ef_negate(""""b"""".""""TestDecimal"""") AS """"negate""""
FROM """"BuiltInDataTypes"""" AS """"b""""
CROSS JOIN """"BuiltInDataTypes"""" AS """"b0""""
ORDER BY """"b"""".""""Id"""", """"b0"""".""""Id"""""");
    }

    private void AssertTranslationFailed(Action testCode)
        => Assert.Contains(
            CoreStrings.TranslationFailed("""")[21..],
            Assert.Throws<InvalidOperationException>(testCode).Message);

    private void AssertSql(params string[] expected)
        => Fixture.TestSqlLoggerFactory.AssertBaseline(expected);

    public class BuiltInDataTypesSqliteFixture : BuiltInDataTypesFixtureBase
    {
        public override bool StrictEquality
            => false;

        public override bool SupportsAnsi
            => false;

        public override bool SupportsUnicodeToAnsiConversion
            => true;

        public override bool SupportsLargeStringComparisons
            => true;

        public override bool SupportsDecimalComparisons
            => false;

        public override bool PreservesDateTimeKind
            => false;

        protected override ITestStoreFactory TestStoreFactory
            => SqliteTestStoreFactory.Instance;

        public TestSqlLoggerFactory TestSqlLoggerFactory
            => (TestSqlLoggerFactory)ListLoggerFactory;

        protected override void OnModelCreating(ModelBuilder modelBuilder, DbContext context)
        {
            base.OnModelCreating(modelBuilder, context);

            modelBuilder.Entity<MappedDataTypes>(
                b =>
                {
                    b.Property(e => e.Id).ValueGeneratedNever();
                    b.Property(e => e.Integer).HasColumnType(""Integer"");
                    b.Property(e => e.Real).HasColumnType(""Real"");
                    b.Property(e => e.Text).HasColumnType(""Text"").IsRequired();
                    b.Property(e => e.Blob).HasColumnType(""Blob"").IsRequired();
                    b.Property(e => e.SomeString).HasColumnType(""SomeString"").IsRequired();
                    b.Property(e => e.Int).HasColumnType(""Int"");
                });

            modelBuilder.Entity<MappedNullableDataTypes>(
                b =>
                {
                    b.Property(e => e.Id).ValueGeneratedNever();
                    b.Property(e => e.Integer).HasColumnType(""Integer"");
                    b.Property(e => e.Real).HasColumnType(""Real"");
                    b.Property(e => e.Text).HasColumnType(""Text"");
                    b.Property(e => e.Blob).HasColumnType(""Blob"");
                    b.Property(e => e.SomeString).HasColumnType(""SomeString"");
                    b.Property(e => e.Int).HasColumnType(""Int"");
                });

            modelBuilder.Entity<MappedSizedDataTypes>(
                b =>
                {
                    b.Property(e => e.Id).ValueGeneratedNever();
                    b.Property(e => e.Nvarchar).HasColumnType(""nvarchar(3)"");
                    b.Property(e => e.Binary).HasColumnType(""varbinary(3)"");
                });

            modelBuilder.Entity<MappedScaledDataTypes>(
                b =>
                {
                    b.Property(e => e.Id).ValueGeneratedNever();
                    b.Property(e => e.Float).HasColumnType(""real(3)"");
                    b.Property(e => e.Datetimeoffset).HasColumnType(""datetimeoffset(3)"");
                    b.Property(e => e.Datetime2).HasColumnType(""datetime2(3)"");
                    b.Property(e => e.Decimal).HasColumnType(""decimal(3)"");
                });

            modelBuilder.Entity<MappedPrecisionAndScaledDataTypes>(
                b =>
                {
                    b.Property(e => e.Id).ValueGeneratedNever();
                    b.Property(e => e.Decimal).HasColumnType(""decimal(5, 2)"");
                });

            modelBuilder.Entity<MappedDataTypesWithIdentity>(
                b =>
                {
                    b.Property(e => e.Integer).HasColumnType(""Integer"");
                    b.Property(e => e.Real).HasColumnType(""Real"");
                    b.Property(e => e.Text).HasColumnType(""Text"").IsRequired();
                    b.Property(e => e.Blob).HasColumnType(""Blob"").IsRequired();
                    b.Property(e => e.SomeString).HasColumnType(""SomeString"").IsRequired();
                    b.Property(e => e.Int).HasColumnType(""Int"");
                });

            modelBuilder.Entity<MappedNullableDataTypesWithIdentity>(
                b =>
                {
                    b.Property(e => e.Integer).HasColumnType(""Integer"");
                    b.Property(e => e.Real).HasColumnType(""Real"");
                    b.Property(e => e.Text).HasColumnType(""Text"");
                    b.Property(e => e.Blob).HasColumnType(""Blob"");
                    b.Property(e => e.SomeString).HasColumnType(""SomeString"");
                    b.Property(e => e.Int).HasColumnType(""Int"");
                });

            modelBuilder.Entity<MappedSizedDataTypesWithIdentity>(
                b =>
                {
                    b.Property(e => e.Nvarchar).HasColumnType(""nvarchar(3)"");
                    b.Property(e => e.Binary).HasColumnType(""varbinary(3)"");
                });

            modelBuilder.Entity<MappedScaledDataTypesWithIdentity>(
                b =>
                {
                    b.Property(e => e.Float).HasColumnType(""real(3)"");
                    b.Property(e => e.Datetimeoffset).HasColumnType(""datetimeoffset(3)"");
                    b.Property(e => e.Datetime2).HasColumnType(""datetime2(3)"");
                    b.Property(e => e.Decimal).HasColumnType(""decimal(3)"");
                });

            modelBuilder.Entity<MappedPrecisionAndScaledDataTypesWithIdentity>(
                b => b.Property(e => e.Decimal).HasColumnType(""decimal(5, 2)""));
        }

        public override bool SupportsBinaryKeys
            => true;

        public override DateTime DefaultDateTime
            => new();
    }

    protected class MappedDataTypes
    {
        public int Id { get; set; }
        public long Integer { get; set; }
        public double Real { get; set; }
        public string Text { get; set; }
        public byte[] Blob { get; set; }
        public string SomeString { get; set; }
        public int Int { get; set; }
    }

    protected class MappedSizedDataTypes
    {
        public int Id { get; set; }
        public string Nvarchar { get; set; }
        public byte[] Binary { get; set; }
    }

    protected class MappedScaledDataTypes
    {
        public int Id { get; set; }
        public float Float { get; set; }
        public DateTimeOffset Datetimeoffset { get; set; }
        public DateTime Datetime2 { get; set; }
        public decimal Decimal { get; set; }
    }

    protected class MappedPrecisionAndScaledDataTypes
    {
        public int Id { get; set; }
        public decimal Decimal { get; set; }
    }

    protected class MappedNullableDataTypes
    {
        public int Id { get; set; }
        public long? Integer { get; set; }
        public double? Real { get; set; }
        public string Text { get; set; }
        public byte[] Blob { get; set; }
        public string SomeString { get; set; }
        public int? Int { get; set; }
    }

    protected class MappedDataTypesWithIdentity
    {
        public int Id { get; set; }
        public int AltId { get; set; }
        public long Integer { get; set; }
        public double Real { get; set; }
        public string Text { get; set; }
        public byte[] Blob { get; set; }
        public string SomeString { get; set; }
        public int Int { get; set; }
    }

    protected class MappedSizedDataTypesWithIdentity
    {
        public int Id { get; set; }
        public int AltId { get; set; }
        public string Nvarchar { get; set; }
        public byte[] Binary { get; set; }
    }

    protected class MappedScaledDataTypesWithIdentity
    {
        public int Id { get; set; }
        public int AltId { get; set; }
        public float Float { get; set; }
        public DateTimeOffset Datetimeoffset { get; set; }
        public DateTime Datetime2 { get; set; }
        public decimal Decimal { get; set; }
    }

    protected class MappedPrecisionAndScaledDataTypesWithIdentity
    {
        public int Id { get; set; }
        public int AltId { get; set; }
        public decimal Decimal { get; set; }
    }

    protected class MappedNullableDataTypesWithIdentity
    {
        public int Id { get; set; }
        public int AltId { get; set; }
        public long? Integer { get; set; }
        public double? Real { get; set; }
        public string Text { get; set; }
        public byte[] Blob { get; set; }
        public string SomeString { get; set; }
        public int? Int { get; set; }
    }
}",1,439 334 2000 58 2001 60 2000 46 2002 62 123 439 2000 40 2002 2003 44 2004 2005 41 58 320 40 2003 41 123 2003 46 2006 46 2007 40 41 59 621 125 91 2008 93 439 491 492 2009 40 41 123 489 40 490 2010 61 2011 40 41 41 123 2010 46 2012 60 2013 62 40 41 46 2014 40 418 2013 123 2015 61 1503 44 2016 61 1502 125 41 59 2017 46 2018 40 1501 44 2010 46 2019 40 41 41 59 125 489 40 490 2010 61 2011 40 41 41 123 490 2020 61 2010 46 2021 60 2022 62 40 41 46 2023 40 2024 619 2024 46 2025 614 1503 41 59 2026 46 2027 40 2020 44 2010 46 2021 60 2022 62 40 41 46 2023 40 2024 619 2024 46 2025 614 1503 605 2024 46 2028 614 1502 41 41 59 125 125 91 2008 93 439 491 492 2029 40 41 123 489 40 490 2030 61 2031 40 41 41 123 2030 46 2032 60 2033 62 40 41 46 2034 40 2035 40 1503 41 41 59 2036 46 2037 40 1501 44 2030 46 2038 40 41 41 59 125 489 40 490 2030 61 2031 40 41 41 123 2039 40 2030 46 2040 60 2041 62 40 41 46 2042 40 2043 619 2043 46 2044 614 1503 41 44 1503 41 59 125 125 437 457 492 2045 40 2046 2047 44 404 2048 41 123 2049 46 2050 40 2048 44 2047 46 2051 41 59 2049 46 2050 40 1503 44 2047 46 2052 41 59 2049 46 2050 40 1503 44 2047 46 2053 41 59 2049 46 2050 40 648 44 2047 46 2054 41 59 2049 46 2050 40 648 44 2047 46 2055 41 59 2049 46 2050 40 418 326 91 93 123 1503 125 44 2047 46 2056 41 59 125 437 457 2046 2057 40 404 2048 41 619 418 40 41 123 2058 61 2048 44 2059 61 1503 44 2060 61 1503 44 2061 61 1503 44 2062 61 648 44 2063 61 648 44 2064 61 418 326 91 93 123 1503 125 125 59 91 2008 93 439 491 492 2065 40 41 123 489 40 490 2066 61 2067 40 41 41 123 2066 46 2068 60 2069 62 40 41 46 2070 40 2071 40 1503 41 41 59 2072 46 2073 40 1501 44 2066 46 2074 40 41 41 59 125 489 40 490 2066 61 2067 40 41 41 123 2075 40 2066 46 2076 60 2077 62 40 41 46 2078 40 2079 619 2079 46 2080 614 1503 41 44 1503 41 59 125 125 437 457 492 2081 40 2082 2047 44 404 2048 41 123 2083 46 2084 40 2048 44 2047 46 2085 41 59 2083 46 2084 40 1503 44 2047 46 2086 41 59 2083 46 2084 40 1503 44 2047 46 2087 41 59 2083 46 2084 40 648 44 2047 46 2088 41 59 2083 46 2084 40 648 44 2047 46 2089 41 59 2083 46 2084 40 418 326 91 93 123 1503 125 44 2047 46 2090 41 59 125 437 457 2082 2091 40 404 2048 41 619 418 40 41 123 2092 61 2048 44 2093 61 1503 44 2094 61 1503 44 2095 61 1503 44 2096 61 648 44 2097 61 648 44 2098 61 418 326 91 93 123 1503 125 125 59 91 2008 93 439 491 492 2099 40 41 123 489 40 490 2100 61 2101 40 41 41 123 2100 46 2102 60 2082 62 40 41 46 2103 40 418 2082 123 2104 61 1503 125 41 59 2105 46 2106 40 1501 44 2100 46 2107 40 41 41 59 125 489 40 490 2100 61 2101 40 41 41 123 2108 40 2100 46 2109 60 2082 62 40 41 46 2110 40 2111 619 2111 46 2112 614 1503 41 44 1503 41 59 125 125 437 457 492 2113 40 2082 2047 44 404 2048 41 123 2114 46 2115 40 2048 44 2047 46 2116 41 59 2114 46 2117 40 2047 46 2118 41 59 2114 46 2117 40 2047 46 2119 41 59 2114 46 2117 40 2047 46 2120 41 59 2114 46 2117 40 2047 46 2121 41 59 2114 46 2117 40 2047 46 2122 41 59 2114 46 2117 40 2047 46 2123 41 59 125 91 2008 93 439 491 492 2124 40 41 123 621 489 40 490 2125 61 2126 40 41 41 123 2125 46 2127 60 2128 62 40 41 46 2129 40 2130 40 1503 41 41 59 2131 46 2132 40 1501 44 2125 46 2133 40 41 41 59 125 489 40 490 2125 61 2126 40 41 41 123 2134 40 2125 46 2135 60 2136 62 40 41 46 2137 40 2138 619 2138 46 2139 614 1503 41 44 1503 41 59 125 125 437 457 492 2140 40 2141 2047 44 404 2048 41 123 2142 46 2143 40 2048 44 2047 46 2144 41 59 2142 46 2143 40 648 44 2047 46 2145 41 59 2142 46 2143 40 418 326 91 93 123 1502 44 1503 44 1503 44 1503 125 44 2047 46 2146 41 59 125 437 457 2141 2147 40 404 2048 41 619 418 40 41 123 2148 61 2048 44 2149 61 648 44 2150 61 418 326 91 93 123 1502 44 1503 44 1503 44 1503 125 125 59 91 2008 93 439 491 492 2151 40 41 123 489 40 490 2152 61 2153 40 41 41 123 2152 46 2154 60 2141 62 40 41 46 2155 40 418 2141 123 2156 61 1503 125 41 59 2157 46 2158 40 1501 44 2152 46 2159 40 41 41 59 125 489 40 490 2152 61 2153 40 41 41 123 2160 40 2152 46 2161 60 2141 62 40 41 46 2162 40 2163 619 2163 46 2164 614 1503 41 44 1503 41 59 125 125 437 457 492 2165 40 2141 2047 44 404 2048 41 123 2166 46 2167 40 2048 44 2047 46 2168 41 59 2166 46 2169 40 2047 46 2170 41 59 2166 46 2169 40 2047 46 2171 41 59 125 91 2008 93 439 491 492 2172 40 41 123 621 489 40 490 2173 61 2174 40 41 41 123 2173 46 2175 60 2176 62 40 41 46 2177 40 2178 40 1503 41 41 59 2179 46 2180 40 1501 44 2173 46 2181 40 41 41 59 125 489 40 490 2173 61 2174 40 41 41 123 2182 40 2173 46 2183 60 2184 62 40 41 46 2185 40 2186 619 2186 46 2187 614 1503 41 44 1503 41 59 125 125 437 457 492 2188 40 2189 2047 44 404 2048 41 123 2190 46 2191 40 2048 44 2047 46 2192 41 59 2190 46 2191 40 1503 44 2047 46 2193 41 59 2190 46 2191 40 418 2194 40 418 2195 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2196 46 2197 41 44 2047 46 2198 41 59 2190 46 2191 40 418 2195 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2047 46 2199 41 59 2190 46 2191 40 1504 44 2047 46 2200 41 59 125 437 457 2189 2201 40 404 2048 41 619 418 40 41 123 2202 61 2048 44 2203 61 1503 44 2204 61 418 2205 40 418 2206 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2207 46 2208 41 44 2209 61 418 2206 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2210 61 1504 125 59 91 2008 93 439 491 492 2211 40 41 123 621 489 40 490 2212 61 2213 40 41 41 123 2212 46 2214 60 2215 62 40 41 46 2216 40 418 2215 123 2217 61 1503 44 2218 61 1504 125 41 59 2219 46 2220 40 1501 44 2212 46 2221 40 41 41 59 125 489 40 490 2212 61 2213 40 41 41 123 490 2047 61 2212 46 2222 60 2223 62 40 41 46 2224 40 2225 619 2225 46 2226 614 1503 41 59 2227 46 2228 40 1504 44 2047 46 2229 41 59 125 125 91 2008 93 439 491 492 2230 40 41 123 489 40 490 2231 61 2232 40 41 41 123 2231 46 2233 60 2234 62 40 41 46 2235 40 2236 40 1503 41 41 59 2237 46 2238 40 1501 44 2231 46 2239 40 41 41 59 125 489 40 490 2231 61 2232 40 41 41 123 2240 40 2231 46 2241 60 2242 62 40 41 46 2243 40 2244 619 2244 46 2245 614 1503 41 44 1503 41 59 125 125 437 457 492 2246 40 2247 2047 44 404 2048 41 123 2248 46 2249 40 2048 44 2047 46 2250 41 59 2248 46 2249 40 1503 44 2047 46 2251 41 59 2248 46 2249 40 1503 44 2047 46 2252 41 59 2248 46 2249 40 648 44 2047 46 2253 41 59 2248 46 2249 40 648 44 2047 46 2254 41 59 2248 46 2249 40 418 326 91 93 123 1503 125 44 2047 46 2255 41 59 125 437 457 2247 2256 40 404 2048 41 619 418 40 41 123 2257 61 2048 44 2258 61 1503 44 2259 61 1503 44 2260 61 1503 44 2261 61 648 44 2262 61 648 44 2263 61 418 326 91 93 123 1503 125 125 59 91 2008 93 439 491 492 2264 40 41 123 489 40 490 2265 61 2266 40 41 41 123 2265 46 2267 60 2268 62 40 41 46 2269 40 2270 40 1503 41 41 59 2271 46 2272 40 1501 44 2265 46 2273 40 41 41 59 125 489 40 490 2265 61 2266 40 41 41 123 2274 40 2265 46 2275 60 2276 62 40 41 46 2277 40 2278 619 2278 46 2279 614 1503 41 44 1503 41 59 125 125 437 457 492 2280 40 2281 2047 44 404 2048 41 123 2282 46 2283 40 2048 44 2047 46 2284 41 59 2282 46 2283 40 1503 44 2047 46 2285 41 59 2282 46 2283 40 1503 44 2047 46 2286 41 59 2282 46 2283 40 648 44 2047 46 2287 41 59 2282 46 2283 40 648 44 2047 46 2288 41 59 2282 46 2283 40 418 326 91 93 123 1503 125 44 2047 46 2289 41 59 125 437 457 2281 2290 40 404 2048 41 619 418 40 41 123 2291 61 2048 44 2292 61 1503 44 2293 61 1503 44 2294 61 1503 44 2295 61 648 44 2296 61 648 44 2297 61 418 326 91 93 123 1503 125 125 59 91 2008 93 439 491 492 2298 40 41 123 489 40 490 2299 61 2300 40 41 41 123 2299 46 2301 60 2281 62 40 41 46 2302 40 418 2281 123 2303 61 1503 125 41 59 2304 46 2305 40 1501 44 2299 46 2306 40 41 41 59 125 489 40 490 2299 61 2300 40 41 41 123 2307 40 2299 46 2308 60 2281 62 40 41 46 2309 40 2310 619 2310 46 2311 614 1503 41 44 1503 41 59 125 125 437 457 492 2312 40 2281 2047 44 404 2048 41 123 2313 46 2314 40 2048 44 2047 46 2315 41 59 2313 46 2316 40 2047 46 2317 41 59 2313 46 2316 40 2047 46 2318 41 59 2313 46 2316 40 2047 46 2319 41 59 2313 46 2316 40 2047 46 2320 41 59 2313 46 2316 40 2047 46 2321 41 59 2313 46 2316 40 2047 46 2322 41 59 125 91 2008 93 439 491 492 2323 40 41 123 621 489 40 490 2324 61 2325 40 41 41 123 2324 46 2326 60 2327 62 40 41 46 2328 40 2329 40 1503 41 41 59 2330 46 2331 40 1501 44 2324 46 2332 40 41 41 59 125 489 40 490 2324 61 2325 40 41 41 123 2333 40 2324 46 2334 60 2335 62 40 41 46 2336 40 2337 619 2337 46 2338 614 1503 41 44 1503 41 59 125 125 437 457 492 2339 40 2340 2047 44 404 2048 41 123 2341 46 2342 40 2048 44 2047 46 2343 41 59 2341 46 2342 40 648 44 2047 46 2344 41 59 2341 46 2342 40 418 326 91 93 123 1502 44 1503 44 1503 44 1503 125 44 2047 46 2345 41 59 125 437 457 2340 2346 40 404 2048 41 619 418 40 41 123 2347 61 2048 44 2348 61 648 44 2349 61 418 326 91 93 123 1502 44 1503 44 1503 44 1503 125 125 59 91 2008 93 439 491 492 2350 40 41 123 489 40 490 2351 61 2352 40 41 41 123 2351 46 2353 60 2340 62 40 41 46 2354 40 418 2340 123 2355 61 1503 125 41 59 2356 46 2357 40 1501 44 2351 46 2358 40 41 41 59 125 489 40 490 2351 61 2352 40 41 41 123 2359 40 2351 46 2360 60 2340 62 40 41 46 2361 40 2362 619 2362 46 2363 614 1503 41 44 1503 41 59 125 125 437 457 492 2364 40 2340 2047 44 404 2048 41 123 2365 46 2366 40 2048 44 2047 46 2367 41 59 2365 46 2368 40 2047 46 2369 41 59 2365 46 2368 40 2047 46 2370 41 59 125 91 2008 93 439 491 492 2371 40 41 123 621 489 40 490 2372 61 2373 40 41 41 123 2372 46 2374 60 2375 62 40 41 46 2376 40 2377 40 1503 41 41 59 2378 46 2379 40 1501 44 2372 46 2380 40 41 41 59 125 489 40 490 2372 61 2373 40 41 41 123 2381 40 2372 46 2382 60 2383 62 40 41 46 2384 40 2385 619 2385 46 2386 614 1503 41 44 1503 41 59 125 125 437 457 492 2387 40 2388 2047 44 404 2048 41 123 2389 46 2390 40 2048 44 2047 46 2391 41 59 2389 46 2390 40 1503 44 2047 46 2392 41 59 2389 46 2390 40 418 2393 40 418 2394 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2395 46 2396 41 44 2047 46 2397 41 59 2389 46 2390 40 418 2394 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2047 46 2398 41 59 2389 46 2390 40 1504 44 2047 46 2399 41 59 125 437 457 2388 2400 40 404 2048 41 619 418 40 41 123 2401 61 2048 44 2402 61 1503 44 2403 61 418 2404 40 418 2405 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2406 46 2407 41 44 2408 61 418 2405 40 1505 44 1501 44 1502 44 1503 44 1503 44 1503 41 44 2409 61 1504 125 59 91 2008 93 439 491 492 2410 40 41 123 621 489 40 490 2411 61 2412 40 41 41 123 2411 46 2413 60 2414 62 40 41 46 2415 40 418 2414 123 2416 61 1503 44 2417 61 1504 125 41 59 2418 46 2419 40 1501 44 2411 46 2420 40 41 41 59 125 489 40 490 2411 61 2412 40 41 41 123 490 2047 61 2411 46 2421 60 2422 62 40 41 46 2423 40 2424 619 2424 46 2425 614 1503 41 59 2426 46 2427 40 1504 44 2047 46 2428 41 59 125 125 91 2008 93 439 491 492 2429 40 41 123 489 40 490 2430 61 2431 40 41 41 123 2430 46 2432 60 2046 62 40 41 46 2433 40 2057 40 1504 41 41 59 2430 46 2432 60 2046 62 40 41 46 2433 40 2057 40 1504 41 41 59 2430 46 2432 60 2046 62 40 41 46 2433 40 2057 40 1504 41 41 59 2434 46 2435 40 1502 44 2430 46 2436 40 41 41 59 125 489 40 490 2430 61 2431 40 41 41 123 2045 40 2430 46 2437 60 2046 62 40 41 46 2438 40 2439 619 2439 46 2440 614 1504 41 44 1504 41 59 2045 40 2430 46 2437 60 2046 62 40 41 46 2438 40 2439 619 2439 46 2440 614 1504 41 44 1504 41 59 2045 40 2430 46 2437 60 2046 62 40 41 46 2438 40 2439 619 2439 46 2440 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2441 40 41 123 489 40 490 2442 61 2443 40 41 41 123 2442 46 2444 60 2082 62 40 41 46 2445 40 2091 40 1504 41 41 59 2442 46 2444 60 2082 62 40 41 46 2445 40 2091 40 1504 41 41 59 2442 46 2444 60 2082 62 40 41 46 2445 40 2091 40 1504 41 41 59 2446 46 2447 40 1502 44 2442 46 2448 40 41 41 59 125 489 40 490 2442 61 2443 40 41 41 123 2081 40 2442 46 2449 60 2082 62 40 41 46 2450 40 2451 619 2451 46 2452 614 1504 41 44 1504 41 59 2081 40 2442 46 2449 60 2082 62 40 41 46 2450 40 2451 619 2451 46 2452 614 1504 41 44 1504 41 59 2081 40 2442 46 2449 60 2082 62 40 41 46 2450 40 2451 619 2451 46 2452 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2453 40 41 123 489 40 490 2454 61 2455 40 41 41 123 2454 46 2456 60 2082 62 40 41 46 2457 40 418 2082 123 2458 61 1504 125 41 59 2454 46 2456 60 2082 62 40 41 46 2457 40 418 2082 123 2459 61 1504 125 41 59 2454 46 2456 60 2082 62 40 41 46 2457 40 418 2082 123 2460 61 1504 125 41 59 2461 46 2462 40 1502 44 2454 46 2463 40 41 41 59 125 489 40 490 2454 61 2455 40 41 41 123 2113 40 2454 46 2464 60 2082 62 40 41 46 2465 40 2466 619 2466 46 2467 614 1504 41 44 1504 41 59 2113 40 2454 46 2464 60 2082 62 40 41 46 2465 40 2466 619 2466 46 2467 614 1504 41 44 1504 41 59 2113 40 2454 46 2464 60 2082 62 40 41 46 2465 40 2466 619 2466 46 2467 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2468 40 41 123 621 489 40 490 2469 61 2470 40 41 41 123 2469 46 2471 60 2141 62 40 41 46 2472 40 2147 40 1504 41 41 59 2469 46 2471 60 2141 62 40 41 46 2472 40 2147 40 1504 41 41 59 2469 46 2471 60 2141 62 40 41 46 2472 40 2147 40 1504 41 41 59 2473 46 2474 40 1502 44 2469 46 2475 40 41 41 59 125 489 40 490 2469 61 2470 40 41 41 123 2140 40 2469 46 2476 60 2141 62 40 41 46 2477 40 2478 619 2478 46 2479 614 1504 41 44 1504 41 59 2140 40 2469 46 2476 60 2141 62 40 41 46 2477 40 2478 619 2478 46 2479 614 1504 41 44 1504 41 59 2140 40 2469 46 2476 60 2141 62 40 41 46 2477 40 2478 619 2478 46 2479 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2480 40 41 123 489 40 490 2481 61 2482 40 41 41 123 2481 46 2483 60 2141 62 40 41 46 2484 40 418 2141 123 2485 61 1504 125 41 59 2481 46 2483 60 2141 62 40 41 46 2484 40 418 2141 123 2486 61 1504 125 41 59 2481 46 2483 60 2141 62 40 41 46 2484 40 418 2141 123 2487 61 1504 125 41 59 2488 46 2489 40 1502 44 2481 46 2490 40 41 41 59 125 489 40 490 2481 61 2482 40 41 41 123 2165 40 2481 46 2491 60 2141 62 40 41 46 2492 40 2493 619 2493 46 2494 614 1504 41 44 1504 41 59 2165 40 2481 46 2491 60 2141 62 40 41 46 2492 40 2493 619 2493 46 2494 614 1504 41 44 1504 41 59 2165 40 2481 46 2491 60 2141 62 40 41 46 2492 40 2493 619 2493 46 2494 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2495 40 41 123 621 489 40 490 2496 61 2497 40 41 41 123 2496 46 2498 60 2189 62 40 41 46 2499 40 2201 40 1504 41 41 59 2496 46 2498 60 2189 62 40 41 46 2499 40 2201 40 1504 41 41 59 2496 46 2498 60 2189 62 40 41 46 2499 40 2201 40 1504 41 41 59 2500 46 2501 40 1502 44 2496 46 2502 40 41 41 59 125 489 40 490 2496 61 2497 40 41 41 123 2188 40 2496 46 2503 60 2189 62 40 41 46 2504 40 2505 619 2505 46 2506 614 1504 41 44 1504 41 59 2188 40 2496 46 2503 60 2189 62 40 41 46 2504 40 2505 619 2505 46 2506 614 1504 41 44 1504 41 59 2188 40 2496 46 2503 60 2189 62 40 41 46 2504 40 2505 619 2505 46 2506 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2507 40 41 123 621 489 40 490 2508 61 2509 40 41 41 123 2508 46 2510 60 2511 62 40 41 46 2512 40 418 2511 123 2513 61 1504 44 2514 61 1504 125 41 59 2508 46 2510 60 2511 62 40 41 46 2512 40 418 2511 123 2515 61 1504 44 2516 61 1504 125 41 59 2508 46 2510 60 2511 62 40 41 46 2512 40 418 2511 123 2517 61 1504 44 2518 61 1504 125 41 59 2519 46 2520 40 1502 44 2508 46 2521 40 41 41 59 125 489 40 490 2508 61 2509 40 41 41 123 490 2047 61 2508 46 2522 60 2523 62 40 41 46 2524 40 2525 619 2525 46 2526 614 1504 41 59 2527 46 2528 40 1504 44 2047 46 2529 41 59 2047 61 2508 46 2522 60 2523 62 40 41 46 2524 40 2525 619 2525 46 2526 614 1504 41 59 2527 46 2528 40 1504 44 2047 46 2529 41 59 2047 61 2508 46 2522 60 2523 62 40 41 46 2524 40 2525 619 2525 46 2526 614 1504 41 59 2527 46 2528 40 1504 44 2047 46 2529 41 59 125 125 91 2008 93 439 491 492 2530 40 41 123 489 40 490 2531 61 2532 40 41 41 123 2531 46 2533 60 2247 62 40 41 46 2534 40 2256 40 1504 41 41 59 2531 46 2533 60 2247 62 40 41 46 2534 40 2256 40 1504 41 41 59 2531 46 2533 60 2247 62 40 41 46 2534 40 2256 40 1504 41 41 59 2535 46 2536 40 1502 44 2531 46 2537 40 41 41 59 125 489 40 490 2531 61 2532 40 41 41 123 2246 40 2531 46 2538 60 2247 62 40 41 46 2539 40 2540 619 2540 46 2541 614 1504 41 44 1504 41 59 2246 40 2531 46 2538 60 2247 62 40 41 46 2539 40 2540 619 2540 46 2541 614 1504 41 44 1504 41 59 2246 40 2531 46 2538 60 2247 62 40 41 46 2539 40 2540 619 2540 46 2541 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2542 40 41 123 489 40 490 2543 61 2544 40 41 41 123 2543 46 2545 60 2281 62 40 41 46 2546 40 2290 40 1504 41 41 59 2543 46 2545 60 2281 62 40 41 46 2546 40 2290 40 1504 41 41 59 2543 46 2545 60 2281 62 40 41 46 2546 40 2290 40 1504 41 41 59 2547 46 2548 40 1502 44 2543 46 2549 40 41 41 59 125 489 40 490 2543 61 2544 40 41 41 123 2280 40 2543 46 2550 60 2281 62 40 41 46 2551 40 2552 619 2552 46 2553 614 1504 41 44 1504 41 59 2280 40 2543 46 2550 60 2281 62 40 41 46 2551 40 2552 619 2552 46 2553 614 1504 41 44 1504 41 59 2280 40 2543 46 2550 60 2281 62 40 41 46 2551 40 2552 619 2552 46 2553 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2554 40 41 123 489 40 490 2555 61 2556 40 41 41 123 2555 46 2557 60 2281 62 40 41 46 2558 40 418 2281 123 2559 61 1504 125 41 59 2555 46 2557 60 2281 62 40 41 46 2558 40 418 2281 123 2560 61 1504 125 41 59 2555 46 2557 60 2281 62 40 41 46 2558 40 418 2281 123 2561 61 1504 125 41 59 2562 46 2563 40 1502 44 2555 46 2564 40 41 41 59 125 489 40 490 2555 61 2556 40 41 41 123 2312 40 2555 46 2565 60 2281 62 40 41 46 2566 40 2567 619 2567 46 2568 614 1504 41 44 1504 41 59 2312 40 2555 46 2565 60 2281 62 40 41 46 2566 40 2567 619 2567 46 2568 614 1504 41 44 1504 41 59 2312 40 2555 46 2565 60 2281 62 40 41 46 2566 40 2567 619 2567 46 2568 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2569 40 41 123 621 489 40 490 2570 61 2571 40 41 41 123 2570 46 2572 60 2340 62 40 41 46 2573 40 2346 40 1504 41 41 59 2570 46 2572 60 2340 62 40 41 46 2573 40 2346 40 1504 41 41 59 2570 46 2572 60 2340 62 40 41 46 2573 40 2346 40 1504 41 41 59 2574 46 2575 40 1502 44 2570 46 2576 40 41 41 59 125 489 40 490 2570 61 2571 40 41 41 123 2339 40 2570 46 2577 60 2340 62 40 41 46 2578 40 2579 619 2579 46 2580 614 1504 41 44 1504 41 59 2339 40 2570 46 2577 60 2340 62 40 41 46 2578 40 2579 619 2579 46 2580 614 1504 41 44 1504 41 59 2339 40 2570 46 2577 60 2340 62 40 41 46 2578 40 2579 619 2579 46 2580 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2581 40 41 123 489 40 490 2582 61 2583 40 41 41 123 2582 46 2584 60 2340 62 40 41 46 2585 40 418 2340 123 2586 61 1504 125 41 59 2582 46 2584 60 2340 62 40 41 46 2585 40 418 2340 123 2587 61 1504 125 41 59 2582 46 2584 60 2340 62 40 41 46 2585 40 418 2340 123 2588 61 1504 125 41 59 2589 46 2590 40 1502 44 2582 46 2591 40 41 41 59 125 489 40 490 2582 61 2583 40 41 41 123 2364 40 2582 46 2592 60 2340 62 40 41 46 2593 40 2594 619 2594 46 2595 614 1504 41 44 1504 41 59 2364 40 2582 46 2592 60 2340 62 40 41 46 2593 40 2594 619 2594 46 2595 614 1504 41 44 1504 41 59 2364 40 2582 46 2592 60 2340 62 40 41 46 2593 40 2594 619 2594 46 2595 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2596 40 41 123 621 489 40 490 2597 61 2598 40 41 41 123 2597 46 2599 60 2388 62 40 41 46 2600 40 2400 40 1504 41 41 59 2597 46 2599 60 2388 62 40 41 46 2600 40 2400 40 1504 41 41 59 2597 46 2599 60 2388 62 40 41 46 2600 40 2400 40 1504 41 41 59 2601 46 2602 40 1502 44 2597 46 2603 40 41 41 59 125 489 40 490 2597 61 2598 40 41 41 123 2387 40 2597 46 2604 60 2388 62 40 41 46 2605 40 2606 619 2606 46 2607 614 1504 41 44 1504 41 59 2387 40 2597 46 2604 60 2388 62 40 41 46 2605 40 2606 619 2606 46 2607 614 1504 41 44 1504 41 59 2387 40 2597 46 2604 60 2388 62 40 41 46 2605 40 2606 619 2606 46 2607 614 1504 41 44 1504 41 59 125 125 91 2008 93 439 491 492 2608 40 41 123 621 489 40 490 2609 61 2610 40 41 41 123 2609 46 2611 60 2612 62 40 41 46 2613 40 418 2612 123 2614 61 1504 44 2615 61 1504 125 41 59 2609 46 2611 60 2612 62 40 41 46 2613 40 418 2612 123 2616 61 1504 44 2617 61 1504 125 41 59 2609 46 2611 60 2612 62 40 41 46 2613 40 418 2612 123 2618 61 1504 44 2619 61 1504 125 41 59 2620 46 2621 40 1502 44 2609 46 2622 40 41 41 59 125 489 40 490 2609 61 2610 40 41 41 123 490 2047 61 2609 46 2623 60 2624 62 40 41 46 2625 40 2626 619 2626 46 2627 614 1504 41 59 2628 46 2629 40 1504 44 2047 46 2630 41 59 2047 61 2609 46 2623 60 2624 62 40 41 46 2625 40 2626 619 2626 46 2627 614 1504 41 59 2628 46 2629 40 1504 44 2047 46 2630 41 59 2047 61 2609 46 2623 60 2624 62 40 41 46 2625 40 2626 619 2626 46 2627 614 1504 41 59 2628 46 2629 40 1504 44 2047 46 2630 41 59 125 125 91 2008 93 439 492 2631 40 41 123 489 490 2632 61 2633 40 41 59 490 2634 61 2632 46 2635 60 2636 62 40 41 59 386 40 490 2637 398 2632 46 2638 46 2639 40 41 46 2640 40 2641 619 2641 46 2642 40 41 41 41 123 490 2643 61 2637 46 2644 40 41 59 2645 46 2646 40 2643 41 59 392 40 2637 91 2647 46 2648 93 614 424 41 123 2645 46 2649 40 2643 46 2650 40 41 44 2634 46 2651 40 2637 41 46 2652 46 2650 40 41 41 59 125 125 125 91 2008 93 439 491 492 2653 40 41 123 489 490 2654 61 2655 40 41 59 490 2656 61 418 2657 123 2658 61 1504 44 2659 61 1504 44 2660 61 1502 44 2661 61 418 2662 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2663 46 2664 41 44 2665 61 2663 46 2666 40 1502 41 44 2667 61 1500 125 59 2654 46 2668 40 2656 41 59 490 2669 61 418 2657 123 2670 61 1504 44 2671 61 1504 44 2672 61 1502 44 2673 61 418 2674 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2675 46 2676 40 45 1502 41 41 44 2677 61 2675 46 2678 40 1502 41 44 2679 61 413 46 2680 43 1501 125 59 2654 46 2668 40 2669 41 59 2654 46 2681 40 41 59 490 2682 61 2654 46 2683 60 2657 62 40 41 46 2684 40 2685 619 2685 46 2686 614 1504 41 46 2687 40 2688 619 473 41 59 2689 46 2690 40 2691 46 2692 40 2693 40 2694 46 2695 41 44 478 40 345 41 46 2696 40 41 41 44 2689 46 2697 60 2698 62 40 40 41 619 2682 46 2699 40 2700 619 2700 46 2695 40 2685 619 2685 46 2701 41 41 46 2702 40 41 41 46 2703 41 59 2689 46 2690 40 2691 46 2692 40 2693 40 2694 46 2695 41 44 478 40 2704 41 46 2696 40 41 41 44 2689 46 2697 60 2698 62 40 40 41 619 2682 46 2699 40 2700 619 2700 46 2695 40 2685 619 2685 46 2705 41 41 46 2702 40 41 41 46 2703 41 59 2689 46 2690 40 2691 46 2692 40 2693 40 2694 46 2695 41 44 478 40 2706 41 46 2696 40 41 41 44 2689 46 2697 60 2698 62 40 40 41 619 2682 46 2699 40 2700 619 2700 46 2695 40 2685 619 2685 46 2707 41 41 46 2702 40 41 41 46 2703 41 59 2689 46 2690 40 2691 46 2692 40 2693 40 2694 46 2695 41 44 478 40 480 41 46 2696 40 41 41 44 2689 46 2697 60 2698 62 40 40 41 619 2682 46 2699 40 2700 619 2700 46 2695 40 2685 619 2685 46 2708 41 41 46 2702 40 41 41 46 2703 41 59 125 91 2008 93 439 491 492 2709 40 41 123 489 490 2710 61 2711 40 41 59 490 2712 61 418 2713 123 2714 61 1504 44 2715 61 1504 44 2716 61 1502 44 2717 61 418 2718 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2719 46 2720 41 44 2721 61 2719 46 2722 40 1502 41 44 2723 61 1500 125 59 2710 46 2724 40 2712 41 59 490 2725 61 418 2713 123 2726 61 1504 44 2727 61 1504 44 2728 61 1502 44 2729 61 418 2730 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2731 46 2732 40 45 1502 41 41 44 2733 61 2731 46 2734 40 1502 41 44 2735 61 413 46 2736 43 1501 125 59 2710 46 2724 40 2725 41 59 2710 46 2737 40 41 59 490 2738 61 2710 46 2739 60 2713 62 40 41 46 2740 40 2741 619 2741 46 2742 614 1504 41 46 2743 40 2744 619 473 41 59 2745 46 2746 40 2747 46 2748 40 2749 40 2750 46 2751 41 44 478 40 345 41 46 2752 40 41 41 44 2745 46 2753 60 2754 62 40 40 41 619 2738 46 2755 40 2756 619 2756 46 2751 40 2741 619 2741 46 2757 41 41 46 2758 40 41 41 46 2759 41 59 2745 46 2746 40 2747 46 2748 40 2749 40 2750 46 2751 41 44 478 40 2760 41 46 2752 40 41 41 44 2745 46 2753 60 2754 62 40 40 41 619 2738 46 2755 40 2756 619 2756 46 2751 40 2741 619 2741 46 2761 41 41 46 2758 40 41 41 46 2759 41 59 2745 46 2746 40 2747 46 2748 40 2749 40 2750 46 2751 41 44 478 40 2762 41 46 2752 40 41 41 44 2745 46 2753 60 2754 62 40 40 41 619 2738 46 2755 40 2756 619 2756 46 2751 40 2741 619 2741 46 2763 41 41 46 2758 40 41 41 46 2759 41 59 2745 46 2746 40 2747 46 2748 40 2749 40 2750 46 2751 41 44 478 40 480 41 46 2752 40 41 41 44 2745 46 2753 60 2754 62 40 40 41 619 2738 46 2755 40 2756 619 2756 46 2751 40 2741 619 2741 46 2764 41 41 46 2758 40 41 41 46 2759 41 59 125 91 2008 93 439 491 492 2765 40 41 123 489 490 2766 61 2767 40 41 59 2766 46 2768 40 418 2769 123 2770 61 1504 44 2771 61 1504 44 2772 61 1502 125 41 59 2766 46 2768 40 418 2769 123 2773 61 1504 44 2774 61 1504 44 2775 61 1502 125 41 59 2766 46 2776 40 41 59 2777 46 2778 40 2779 46 2780 40 2781 40 2782 46 2783 41 44 478 40 345 41 46 2784 40 41 41 44 2777 46 2785 60 2786 62 40 40 41 619 2766 46 2787 60 2769 62 40 41 46 2788 40 2789 619 2789 46 2790 614 1504 41 46 2783 40 2789 619 2789 46 2791 41 41 46 2792 41 59 125 91 2008 93 439 491 492 2793 40 41 123 489 490 2794 61 2795 40 41 59 2794 46 2796 40 418 2797 123 2798 61 1504 44 2799 61 1504 44 2800 61 1502 125 41 59 2794 46 2796 40 418 2797 123 2801 61 1504 44 2802 61 1504 44 2803 61 1502 125 41 59 2794 46 2804 40 41 59 2805 46 2806 40 2807 46 2808 40 2809 40 2810 46 2811 41 44 478 40 345 41 46 2812 40 41 41 44 2805 46 2813 60 2814 62 40 40 41 619 2794 46 2815 60 2797 62 40 41 46 2816 40 2817 619 2817 46 2818 614 1504 41 46 2811 40 2817 619 2817 46 2819 41 41 46 2820 41 59 125 91 2008 93 439 491 492 2821 40 41 123 489 490 2822 61 2823 40 41 59 2822 46 2824 40 418 2825 123 2826 61 1504 44 2827 61 1504 44 2828 61 1502 44 2829 61 2830 46 2831 40 1501 41 125 41 59 2822 46 2832 40 41 59 490 2833 61 2822 46 2834 60 2825 62 40 41 46 2835 40 2836 619 418 2825 123 2837 61 2836 46 2837 44 2838 61 45 2836 46 2838 44 2839 61 45 2836 46 2839 125 41 46 2840 40 2836 619 2836 46 2841 614 1504 41 59 2842 46 2843 40 45 1502 44 2833 46 2844 41 59 2842 46 2843 40 2845 46 2846 40 45 1501 41 44 2833 46 2847 41 59 125 91 2008 93 439 491 492 2848 40 41 123 489 490 2849 61 2850 40 41 59 2849 46 2851 40 418 2852 123 2853 61 1504 44 2854 61 1504 44 2855 61 1502 44 2856 61 418 2857 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 44 2858 61 418 2859 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 44 2860 46 2861 41 44 2862 61 2860 46 2863 40 1501 41 44 2864 61 480 46 2865 45 1501 125 41 59 2849 46 2866 40 41 59 490 2867 61 2849 46 2868 60 2852 62 40 41 46 2869 40 2870 619 418 2852 123 2871 61 2870 46 2871 44 2872 61 2870 46 2872 43 1501 44 2873 61 2870 46 2873 43 418 2874 40 1500 44 1501 44 1500 41 44 2875 61 2870 46 2875 43 418 2874 40 1500 44 1501 44 1500 41 44 2876 61 2870 46 2876 43 418 2874 40 1500 44 1501 44 1500 41 44 2877 61 2870 46 2877 43 1501 125 41 46 2878 40 2870 619 2870 46 2879 614 1504 41 59 2880 46 2881 40 1502 44 2867 46 2882 41 59 2880 46 2881 40 418 2883 40 1505 44 1501 44 1501 44 1500 44 1501 44 1500 41 44 2867 46 2884 41 59 2880 46 2881 40 418 2885 40 1505 44 1501 44 1501 44 1500 44 1501 44 1500 44 2886 46 2887 41 44 2867 46 2888 41 59 2880 46 2881 40 2886 46 2889 40 1502 41 44 2867 46 2890 41 59 2880 46 2881 40 480 46 2891 44 2867 46 2892 41 59 125 91 2008 93 439 491 492 2893 40 41 123 489 490 2894 61 2895 40 41 59 2894 46 2896 40 418 2897 123 2898 61 1504 44 2899 61 1504 44 2900 61 1502 44 2901 61 418 2902 40 1505 44 1501 44 1501 44 1500 44 1501 44 1500 41 44 2903 61 418 2904 40 1505 44 1501 44 1501 44 1500 44 1501 44 1500 44 2905 46 2906 41 44 2907 61 2905 46 2908 40 1502 41 44 2909 61 480 46 2910 125 41 59 2894 46 2911 40 41 59 490 2912 61 2894 46 2913 60 2897 62 40 41 46 2914 40 2915 619 418 123 2915 46 2916 44 2917 61 2915 46 2917 45 1501 44 2918 61 2915 46 2919 45 418 2920 40 1500 44 1501 44 1500 41 44 2921 61 2915 46 2919 45 418 2922 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 44 2923 61 2915 46 2924 45 418 2920 40 1500 44 1501 44 1500 41 44 2925 61 2915 46 2924 45 418 2926 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 44 2920 46 2927 41 44 2928 61 2915 46 2928 45 418 2920 40 1500 44 1501 44 1500 41 44 2929 61 2915 46 2929 45 1501 125 41 46 2930 40 2915 619 2915 46 2931 614 1504 41 59 2932 46 2933 40 1502 44 2912 46 2934 41 59 2932 46 2933 40 418 2935 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 41 44 2912 46 2936 41 59 2932 46 2933 40 2937 46 2938 40 1501 41 44 2912 46 2939 41 59 2932 46 2933 40 418 2940 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 44 2937 46 2941 41 44 2912 46 2942 41 59 2932 46 2933 40 2937 46 2938 40 1501 41 44 2912 46 2943 41 59 2932 46 2933 40 2937 46 2938 40 1501 41 44 2912 46 2944 41 59 2932 46 2933 40 480 46 2945 45 1501 44 2912 46 2946 41 59 125 91 2008 93 439 491 492 2947 40 41 123 489 490 2948 61 2949 40 41 59 2948 46 2950 40 418 2951 123 2952 61 1504 44 2953 61 1504 44 2954 61 1502 44 2955 61 418 2956 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 2957 61 418 2958 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2959 46 2960 41 44 2961 61 2959 46 2962 40 1502 41 44 2963 61 1500 44 2964 61 607 125 41 59 2948 46 2965 40 41 59 490 2966 61 2948 46 2967 60 2951 62 40 41 46 2968 40 2969 619 418 123 2969 46 2970 44 2971 61 2969 46 2971 60 1502 44 2972 61 2969 46 2972 60 418 2973 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 2974 61 2969 46 2974 60 418 2975 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 2976 46 2977 40 45 1502 41 41 44 2978 61 2969 46 2978 60 418 2976 40 1502 44 1500 44 1500 44 1500 41 44 2979 61 2969 46 2979 60 480 46 2980 44 2981 61 2969 46 2981 60 607 125 41 46 2982 40 2969 619 2969 46 2983 614 1504 41 59 2984 46 304 40 2966 46 2985 41 59 2984 46 304 40 2966 46 2986 41 59 2984 46 304 40 2966 46 2987 41 59 2984 46 304 40 2966 46 2988 41 59 2984 46 304 40 2966 46 2989 41 59 2984 46 304 40 2966 46 2990 41 59 125 91 2008 93 439 491 492 2991 40 41 123 489 490 2992 61 2993 40 41 59 2992 46 2994 40 418 2995 123 2996 61 1504 44 2997 61 1504 44 2998 61 1502 44 2999 61 418 3000 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 3001 61 418 3002 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3003 46 3004 41 44 3005 61 3003 46 3006 40 1502 41 44 3007 61 1500 44 3008 61 607 125 41 59 2992 46 3009 40 41 59 490 3010 61 2992 46 3011 60 2995 62 40 41 46 3012 40 3013 619 418 123 3013 46 3014 44 3015 61 3013 46 3015 620 1502 44 3016 61 3013 46 3016 620 418 3017 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 3018 61 3013 46 3018 620 418 3019 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3020 46 3021 40 45 1502 41 41 44 3022 61 3013 46 3022 620 418 3020 40 1502 44 1500 44 1500 44 1500 41 44 3023 61 3013 46 3023 620 480 46 3024 44 3025 61 3013 46 3025 620 607 125 41 46 3026 40 3013 619 3013 46 3027 614 1504 41 59 3028 46 304 40 3010 46 3029 41 59 3028 46 304 40 3010 46 3030 41 59 3028 46 304 40 3010 46 3031 41 59 3028 46 304 40 3010 46 3032 41 59 3028 46 304 40 3010 46 3033 41 59 3028 46 304 40 3010 46 3034 41 59 125 91 2008 93 439 491 492 3035 40 41 123 489 490 3036 61 3037 40 41 59 3036 46 3038 40 418 3039 123 3040 61 1504 44 3041 61 1504 44 3042 61 1502 44 3043 61 418 3044 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 3045 61 418 3046 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3047 46 3048 41 44 3049 61 3047 46 3050 40 1502 41 44 3051 61 1500 44 3052 61 607 125 41 59 3036 46 3053 40 41 59 490 3054 61 3036 46 3055 60 3039 62 40 41 46 3056 40 3057 619 418 123 3057 46 3058 44 3059 61 3057 46 3059 62 1502 44 3060 61 3057 46 3060 62 418 3061 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 3062 61 3057 46 3062 62 418 3063 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3064 46 3065 40 45 1502 41 41 44 3066 61 3057 46 3066 62 418 3064 40 1502 44 1500 44 1500 44 1500 41 44 3067 61 3057 46 3067 62 480 46 3068 44 3069 61 3057 46 3069 62 607 125 41 46 3070 40 3057 619 3057 46 3071 614 1504 41 59 3072 46 302 40 3054 46 3073 41 59 3072 46 302 40 3054 46 3074 41 59 3072 46 302 40 3054 46 3075 41 59 3072 46 302 40 3054 46 3076 41 59 3072 46 302 40 3054 46 3077 41 59 3072 46 302 40 3054 46 3078 41 59 125 91 2008 93 439 491 492 3079 40 41 123 489 490 3080 61 3081 40 41 59 3080 46 3082 40 418 3083 123 3084 61 1504 44 3085 61 1504 44 3086 61 1502 44 3087 61 418 3088 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 3089 61 418 3090 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3091 46 3092 41 44 3093 61 3091 46 3094 40 1502 41 44 3095 61 1500 44 3096 61 607 125 41 59 3080 46 3097 40 41 59 490 3098 61 3080 46 3099 60 3083 62 40 41 46 3100 40 3101 619 418 123 3101 46 3102 44 3103 61 3101 46 3103 615 1502 44 3104 61 3101 46 3104 615 418 3105 40 1505 44 1502 44 1502 44 1500 44 1500 44 1500 41 44 3106 61 3101 46 3106 615 418 3107 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3108 46 3109 40 45 1502 41 41 44 3110 61 3101 46 3110 615 418 3108 40 1502 44 1500 44 1500 44 1500 41 44 3111 61 3101 46 3111 615 480 46 3112 44 3113 61 3101 46 3113 615 607 125 41 46 3114 40 3101 619 3101 46 3115 614 1504 41 59 3116 46 302 40 3098 46 3117 41 59 3116 46 302 40 3098 46 3118 41 59 3116 46 302 40 3098 46 3119 41 59 3116 46 302 40 3098 46 3120 41 59 3116 46 302 40 3098 46 3121 41 59 3116 46 302 40 3098 46 3122 41 59 125 91 2008 93 439 491 492 3123 40 41 123 489 490 3124 61 3125 40 41 59 3124 46 3126 40 418 3127 123 3128 61 1504 44 3129 61 1504 44 3130 61 1502 44 3131 61 3132 46 3133 40 1502 41 44 3134 61 480 46 3135 125 41 59 3124 46 3136 40 41 59 490 3137 61 3124 46 3138 60 3127 62 40 41 46 3139 40 3140 619 418 123 3140 46 3141 44 3142 61 3140 46 3142 47 1502 44 3143 61 3140 46 3144 47 1502 44 3145 61 3140 46 3144 47 418 3146 40 1500 44 1502 44 1500 41 44 3147 61 3140 46 3147 47 1502 125 41 46 3148 40 3140 619 3140 46 3149 614 1504 41 59 3150 46 3151 40 1502 44 3137 46 3152 41 59 3150 46 3151 40 3153 46 3154 40 1501 41 44 3137 46 3155 41 59 3150 46 3151 40 1501 44 3137 46 3156 41 59 3150 46 3151 40 480 46 3157 47 1502 44 3137 46 3158 41 59 125 91 2008 93 439 491 492 3159 40 41 123 489 490 3160 61 3161 40 41 59 3160 46 3162 40 418 3163 123 3164 61 1504 44 3165 61 1504 44 3166 61 1502 44 3167 61 3168 46 3169 40 1501 41 44 3170 61 480 46 3171 47 1502 125 41 59 3160 46 3172 40 41 59 490 3173 61 3160 46 3174 60 3163 62 40 41 46 3175 40 3176 619 418 123 3176 46 3177 44 3178 61 3176 46 3178 42 1502 44 3179 61 3176 46 3180 42 1502 44 3181 61 1502 42 3176 46 3180 44 3182 61 3176 46 3182 42 1502 125 41 46 3183 40 3176 619 3176 46 3184 614 1504 41 59 3185 46 3186 40 1502 44 3173 46 3187 41 59 3185 46 3186 40 3188 46 3189 40 1502 41 44 3173 46 3190 41 59 3185 46 3186 40 3188 46 3189 40 1502 41 44 3173 46 3191 41 59 3185 46 3186 40 480 46 3192 44 3173 46 3193 41 59 125 91 2008 93 439 491 492 3194 40 41 123 489 490 3195 61 3196 40 41 59 3195 46 3197 40 418 3198 123 3199 61 1504 44 3200 61 1504 44 3201 61 1502 44 3202 61 1502 44 3203 61 1502 44 3204 61 1520 125 41 59 3195 46 3205 40 41 59 490 3206 61 3195 46 3207 60 3198 62 40 41 46 3208 40 3209 619 418 3198 123 3210 61 3209 46 3210 44 3211 61 3209 46 3211 37 1502 44 3212 61 3209 46 3212 37 1501 44 3213 61 3209 46 3213 37 1501 44 3214 61 3209 46 3214 37 1520 125 41 46 3215 40 3209 619 3209 46 3216 614 1504 41 59 3217 46 3218 40 1502 44 3206 46 3219 41 59 3217 46 3218 40 1499 44 3206 46 3220 41 59 3217 46 3218 40 1499 44 3206 46 3221 41 59 3217 46 3218 40 1501 44 3206 46 3222 41 59 125 91 2008 93 439 491 492 3223 40 41 123 489 490 3224 61 3225 40 41 59 490 3226 61 418 3227 123 3228 61 1504 44 3229 61 1504 44 3230 61 1502 44 3231 61 418 3232 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3233 46 3234 41 44 3235 61 3233 46 3236 40 1502 41 44 3237 61 1500 125 59 3224 46 3238 40 3226 41 59 490 3239 61 418 3227 123 3240 61 1504 44 3241 61 1504 44 3242 61 1502 44 3243 61 418 3244 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3245 46 3246 40 45 1502 41 41 44 3247 61 3245 46 3248 40 1502 41 44 3249 61 413 46 3250 43 1501 125 59 3224 46 3238 40 3239 41 59 3224 46 3251 40 41 59 490 3252 61 3224 46 3253 60 3227 62 40 41 46 3254 40 3255 619 3255 46 3256 614 1504 41 59 490 3257 61 3258 46 3259 60 3260 62 40 40 41 619 3252 46 3261 40 3255 619 3255 46 3262 41 46 3263 40 41 41 59 3258 46 3264 40 3265 46 3266 40 648 41 44 3257 46 3267 41 59 3257 61 3258 46 3259 60 3260 62 40 40 41 619 3252 46 3261 40 3255 619 3255 46 3268 41 46 3263 40 41 41 59 3258 46 3264 40 3265 46 3266 40 648 41 44 3257 46 3267 41 59 3257 61 3258 46 3259 60 3260 62 40 40 41 619 3252 46 3261 40 3255 619 3255 46 3269 41 46 3263 40 41 41 59 3258 46 3264 40 3265 46 3266 40 648 41 44 3257 46 3267 41 59 3257 61 3258 46 3259 60 3260 62 40 40 41 619 3252 46 3261 40 3255 619 3255 46 3270 41 46 3263 40 41 41 59 3258 46 3264 40 3265 46 3266 40 648 41 44 3257 46 3267 41 59 125 91 2008 93 439 491 492 3271 40 41 123 489 490 3272 61 3273 40 41 59 490 3274 61 418 3275 123 3276 61 1504 44 3277 61 1504 44 3278 61 1502 44 3279 61 418 3280 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3281 46 3282 41 44 3283 61 3281 46 3284 40 1502 41 44 3285 61 1500 125 59 3272 46 3286 40 3274 41 59 490 3287 61 418 3275 123 3288 61 1504 44 3289 61 1504 44 3290 61 1502 44 3291 61 418 3292 40 1505 44 1501 44 1501 44 1503 44 1500 44 1500 44 3293 46 3294 40 45 1502 41 41 44 3295 61 3293 46 3296 40 1502 41 44 3297 61 413 46 3298 43 1501 125 59 3272 46 3286 40 3287 41 59 3272 46 3299 40 41 59 490 3300 61 3272 46 3301 60 3275 62 40 41 46 3302 40 3303 619 3303 46 3304 614 1504 41 46 3305 40 3303 619 3303 46 3304 41 59 490 3306 61 3307 46 3308 60 3309 62 40 40 41 619 3300 46 3310 40 3303 619 3303 46 3311 41 46 3312 40 41 41 59 3307 46 3313 40 3314 46 3315 40 648 41 44 3306 46 3316 41 59 3306 61 3307 46 3308 60 3309 62 40 40 41 619 3300 46 3310 40 3303 619 3303 46 3317 41 46 3312 40 41 41 59 3307 46 3313 40 3314 46 3315 40 648 41 44 3306 46 3316 41 59 3306 61 3307 46 3308 60 3309 62 40 40 41 619 3300 46 3310 40 3303 619 3303 46 3318 41 46 3312 40 41 41 59 3307 46 3313 40 3314 46 3315 40 648 41 44 3306 46 3316 41 59 3306 61 3307 46 3308 60 3309 62 40 40 41 619 3300 46 3310 40 3303 619 3303 46 3319 41 46 3312 40 41 41 59 3307 46 3313 40 3314 46 3315 40 648 41 44 3306 46 3316 41 59 125 91 2008 93 439 491 492 3320 40 41 123 489 490 3321 61 3322 40 41 59 490 3323 61 3321 46 3324 60 3325 62 40 41 46 3326 40 3327 619 330 46 3328 40 3327 46 3329 41 41 46 3330 40 41 59 3331 40 64 648 648 648 648 648 648 648 648 648 41 59 490 3332 61 3321 46 3324 60 3325 62 40 41 46 3333 40 41 46 3326 40 3327 619 330 46 3328 40 3327 46 3329 41 41 46 3330 40 41 59 3334 46 3335 40 3332 44 3323 41 59 125 91 2008 93 439 491 492 3336 40 41 123 489 490 3337 61 3338 40 41 59 490 3339 61 3337 46 3340 60 3341 62 40 41 46 3342 40 3343 619 330 46 3344 40 3343 46 3345 41 41 46 3346 40 41 59 3347 40 64 648 648 648 648 648 648 648 648 648 41 59 490 3348 61 3337 46 3340 60 3341 62 40 41 46 3349 40 41 46 3342 40 3343 619 330 46 3344 40 3343 46 3345 41 41 46 3346 40 41 59 3350 46 3351 40 3348 44 3339 41 59 125 91 2008 93 439 491 492 3352 40 41 123 489 490 3353 61 3354 40 41 59 490 3355 61 3353 46 3356 60 3357 62 40 41 46 3358 40 3359 619 3360 46 3361 46 3362 40 3359 46 3363 41 41 46 3364 40 41 59 3365 40 64 648 648 648 648 648 648 648 648 648 41 59 490 3366 61 3353 46 3356 60 3357 62 40 41 46 3367 40 41 46 3358 40 3359 619 461 46 3368 40 3359 46 3363 46 3358 40 3369 619 3369 46 3370 40 648 41 41 41 41 46 3364 40 41 59 3371 46 3372 40 3366 44 3355 41 59 125 91 2008 93 439 491 492 3373 40 41 123 489 490 3374 61 3375 40 41 59 490 3376 61 3374 46 3377 60 3378 62 40 41 46 3379 40 3380 619 3381 46 3382 46 3383 40 3380 46 3384 44 1502 41 41 46 3385 40 41 59 3386 40 64 648 648 648 648 648 648 648 648 648 41 59 490 3387 61 3374 46 3377 60 3378 62 40 41 46 3388 40 41 46 3379 40 3380 619 3380 46 3384 46 3389 40 1501 41 46 3390 40 41 41 46 3385 40 41 59 3391 46 3392 40 3387 44 3376 41 59 125 91 2008 93 439 491 492 3393 40 41 123 489 490 3394 61 3395 40 41 59 490 3396 61 3394 46 3397 60 3398 62 40 41 46 3399 40 3400 619 3401 46 3402 46 3403 40 3400 46 3404 44 1501 44 1501 41 41 46 3405 40 41 59 3406 40 64 648 648 648 648 648 648 648 648 648 41 59 490 3407 61 3394 46 3397 60 3398 62 40 41 46 3408 40 41 46 3399 40 3400 619 3400 46 3404 46 3409 40 1501 41 46 3410 40 41 41 46 3405 40 41 59 3411 46 3412 40 3407 44 3396 41 59 125 439 431 492 3413 40 41 123 320 46 3413 40 41 59 3414 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 41 59 125 91 2008 93 439 491 492 3415 40 41 123 489 490 3416 61 3417 40 41 59 490 3418 61 40 388 3419 398 3416 46 3420 60 3421 62 40 41 46 3422 40 41 388 3423 398 3416 46 3420 60 3421 62 40 41 46 3422 40 41 3424 3419 46 3425 44 3423 46 3425 3426 418 123 3427 61 3419 46 3428 43 3423 46 3428 44 3429 61 3419 46 3428 45 3423 46 3428 44 3430 61 3419 46 3428 42 3423 46 3428 44 3431 61 3419 46 3428 47 3423 46 3428 44 3432 61 45 3419 46 3428 125 41 46 3422 40 41 59 3433 46 3434 46 3435 40 41 59 490 3436 61 40 388 3419 398 3416 46 3420 60 3421 62 40 41 388 3423 398 3416 46 3420 60 3421 62 40 41 3424 3419 46 3425 44 3423 46 3425 3426 418 123 3437 61 3419 46 3438 43 3423 46 3438 44 3439 61 3419 46 3438 45 3423 46 3438 44 3440 61 3419 46 3438 42 3423 46 3438 44 3441 61 3419 46 3438 47 3423 46 3438 44 3442 61 45 3419 46 3438 125 41 46 3422 40 41 59 3443 46 3444 40 3418 46 3445 44 3436 46 3445 41 59 385 40 490 3446 61 1500 59 3446 60 3418 46 3445 59 3446 637 41 123 3443 46 3444 40 3418 91 3446 93 46 3447 44 3436 91 3446 93 46 3447 41 59 3443 46 3444 40 3418 91 3446 93 46 3448 44 3436 91 3446 93 46 3448 41 59 3443 46 3444 40 3418 91 3446 93 46 3449 44 3436 91 3446 93 46 3449 41 59 3443 46 3444 40 3418 91 3446 93 46 3450 44 3436 91 3446 93 46 3450 41 59 3443 46 3444 40 3418 91 3446 93 46 3451 44 3436 91 3446 93 46 3451 41 59 125 3452 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 41 59 125 437 492 3453 40 3454 3455 41 619 3456 46 3457 40 3458 46 3459 40 648 41 91 1503 93 44 3456 46 3460 60 3461 62 40 3455 41 46 3462 41 59 437 492 3463 40 433 461 91 93 3464 41 619 3465 46 3466 46 3467 40 3464 41 59 439 334 2002 58 3468 123 439 431 323 3469 619 380 59 439 431 323 3470 619 380 59 439 431 323 3471 619 473 59 439 431 323 3472 619 473 59 439 431 323 3473 619 380 59 439 431 323 3474 619 380 59 438 431 3475 3476 619 3477 46 3478 59 439 3466 3466 619 40 3466 41 3479 59 438 431 492 3480 40 3481 3482 44 3483 3484 41 123 320 46 3480 40 3482 44 3484 41 59 3482 46 3485 60 2046 62 40 3486 619 123 3486 46 3487 40 3488 619 3488 46 3489 41 46 3490 40 41 59 3486 46 3487 40 3488 619 3488 46 3491 41 46 3492 40 648 41 59 3486 46 3487 40 3488 619 3488 46 3493 41 46 3492 40 648 41 59 3486 46 3487 40 3488 619 3488 46 3494 41 46 3492 40 648 41 46 3495 40 41 59 3486 46 3487 40 3488 619 3488 46 3496 41 46 3492 40 648 41 46 3495 40 41 59 3486 46 3487 40 3488 619 3488 46 3497 41 46 3492 40 648 41 46 3495 40 41 59 3486 46 3487 40 3488 619 3488 46 3498 41 46 3492 40 648 41 59 125 41 59 3482 46 3485 60 2082 62 40 3486 619 123 3486 46 3499 40 3500 619 3500 46 3501 41 46 3502 40 41 59 3486 46 3499 40 3500 619 3500 46 3503 41 46 3504 40 648 41 59 3486 46 3499 40 3500 619 3500 46 3505 41 46 3504 40 648 41 59 3486 46 3499 40 3500 619 3500 46 3506 41 46 3504 40 648 41 59 3486 46 3499 40 3500 619 3500 46 3507 41 46 3504 40 648 41 59 3486 46 3499 40 3500 619 3500 46 3508 41 46 3504 40 648 41 59 3486 46 3499 40 3500 619 3500 46 3509 41 46 3504 40 648 41 59 125 41 59 3482 46 3485 60 2141 62 40 3486 619 123 3486 46 3510 40 3511 619 3511 46 3512 41 46 3513 40 41 59 3486 46 3510 40 3511 619 3511 46 3514 41 46 3515 40 648 41 59 3486 46 3510 40 3511 619 3511 46 3516 41 46 3515 40 648 41 59 125 41 59 3482 46 3485 60 2189 62 40 3486 619 123 3486 46 3517 40 3518 619 3518 46 3519 41 46 3520 40 41 59 3486 46 3517 40 3518 619 3518 46 3521 41 46 3522 40 648 41 59 3486 46 3517 40 3518 619 3518 46 3523 41 46 3522 40 648 41 59 3486 46 3517 40 3518 619 3518 46 3524 41 46 3522 40 648 41 59 3486 46 3517 40 3518 619 3518 46 3525 41 46 3522 40 648 41 59 125 41 59 3482 46 3485 60 3526 62 40 3486 619 123 3486 46 3527 40 3528 619 3528 46 3529 41 46 3530 40 41 59 3486 46 3527 40 3528 619 3528 46 3531 41 46 3532 40 648 41 59 125 41 59 3482 46 3485 60 2247 62 40 3486 619 123 3486 46 3533 40 3534 619 3534 46 3535 41 46 3536 40 648 41 59 3486 46 3533 40 3534 619 3534 46 3537 41 46 3536 40 648 41 59 3486 46 3533 40 3534 619 3534 46 3538 41 46 3536 40 648 41 46 3539 40 41 59 3486 46 3533 40 3534 619 3534 46 3540 41 46 3536 40 648 41 46 3539 40 41 59 3486 46 3533 40 3534 619 3534 46 3541 41 46 3536 40 648 41 46 3539 40 41 59 3486 46 3533 40 3534 619 3534 46 3542 41 46 3536 40 648 41 59 125 41 59 3482 46 3485 60 2281 62 40 3486 619 123 3486 46 3543 40 3544 619 3544 46 3545 41 46 3546 40 648 41 59 3486 46 3543 40 3544 619 3544 46 3547 41 46 3546 40 648 41 59 3486 46 3543 40 3544 619 3544 46 3548 41 46 3546 40 648 41 59 3486 46 3543 40 3544 619 3544 46 3549 41 46 3546 40 648 41 59 3486 46 3543 40 3544 619 3544 46 3550 41 46 3546 40 648 41 59 3486 46 3543 40 3544 619 3544 46 3551 41 46 3546 40 648 41 59 125 41 59 3482 46 3485 60 2340 62 40 3486 619 123 3486 46 3552 40 3553 619 3553 46 3554 41 46 3555 40 648 41 59 3486 46 3552 40 3553 619 3553 46 3556 41 46 3555 40 648 41 59 125 41 59 3482 46 3485 60 2388 62 40 3486 619 123 3486 46 3557 40 3558 619 3558 46 3559 41 46 3560 40 648 41 59 3486 46 3557 40 3558 619 3558 46 3561 41 46 3560 40 648 41 59 3486 46 3557 40 3558 619 3558 46 3562 41 46 3560 40 648 41 59 3486 46 3557 40 3558 619 3558 46 3563 41 46 3560 40 648 41 59 125 41 59 3482 46 3485 60 3564 62 40 3486 619 3486 46 3565 40 3566 619 3566 46 3567 41 46 3568 40 648 41 41 59 125 439 431 323 3569 619 473 59 439 431 3570 3571 619 418 40 41 59 125 438 334 2046 123 439 404 3572 123 3573 59 3574 59 125 439 413 3575 123 3576 59 3577 59 125 439 356 3578 123 3579 59 3580 59 125 439 461 3581 123 3582 59 3583 59 125 439 326 91 93 3584 123 3585 59 3586 59 125 439 461 3587 123 3588 59 3589 59 125 439 404 3590 123 3591 59 3592 59 125 125 438 334 2141 123 439 404 3593 123 3594 59 3595 59 125 439 461 3596 123 3597 59 3598 59 125 439 326 91 93 3599 123 3600 59 3601 59 125 125 438 334 2189 123 439 404 3602 123 3603 59 3604 59 125 439 384 3605 123 3606 59 3607 59 125 439 3608 3609 123 3610 59 3611 59 125 439 3612 3613 123 3614 59 3615 59 125 439 345 3616 123 3617 59 3618 59 125 125 438 334 3619 123 439 404 3620 123 3621 59 3622 59 125 439 345 3623 123 3624 59 3625 59 125 125 438 334 2082 123 439 404 3626 123 3627 59 3628 59 125 439 413 63 3629 123 3630 59 3631 59 125 439 356 63 3632 123 3633 59 3634 59 125 439 461 3635 123 3636 59 3637 59 125 439 326 91 93 3638 123 3639 59 3640 59 125 439 461 3641 123 3642 59 3643 59 125 439 404 63 3644 123 3645 59 3646 59 125 125 438 334 2247 123 439 404 3647 123 3648 59 3649 59 125 439 404 3650 123 3651 59 3652 59 125 439 413 3653 123 3654 59 3655 59 125 439 356 3656 123 3657 59 3658 59 125 439 461 3659 123 3660 59 3661 59 125 439 326 91 93 3662 123 3663 59 3664 59 125 439 461 3665 123 3666 59 3667 59 125 439 404 3668 123 3669 59 3670 59 125 125 438 334 2340 123 439 404 3671 123 3672 59 3673 59 125 439 404 3674 123 3675 59 3676 59 125 439 461 3677 123 3678 59 3679 59 125 439 326 91 93 3680 123 3681 59 3682 59 125 125 438 334 2388 123 439 404 3683 123 3684 59 3685 59 125 439 404 3686 123 3687 59 3688 59 125 439 384 3689 123 3690 59 3691 59 125 439 3692 3693 123 3694 59 3695 59 125 439 3696 3697 123 3698 59 3699 59 125 439 345 3700 123 3701 59 3702 59 125 125 438 334 3703 123 439 404 3704 123 3705 59 3706 59 125 439 404 3707 123 3708 59 3709 59 125 439 345 3710 123 3711 59 3712 59 125 125 438 334 2281 123 439 404 3713 123 3714 59 3715 59 125 439 404 3716 123 3717 59 3718 59 125 439 413 63 3719 123 3720 59 3721 59 125 439 356 63 3722 123 3723 59 3724 59 125 439 461 3725 123 3726 59 3727 59 125 439 326 91 93 3728 123 3729 59 3730 59 125 439 461 3731 123 3732 59 3733 59 125 439 404 63 3734 123 3735 59 3736 59 125 125 125 
72788,C#,"public class ForeignKeyTest
{
    [ConditionalFact]
    public void Throws_when_model_is_readonly()
    {
        var model = CreateModel();
        var entityType = model.AddEntityType(""E"");
        var dependentProp = entityType.AddProperty(""P"", typeof(int));
        var principalProp = entityType.AddProperty(""Id"", typeof(int));
        var key = entityType.AddKey(principalProp);
        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, key, entityType);

        model.FinalizeModel();

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => entityType.AddForeignKey(new[] { principalProp }, key, entityType)).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => entityType.RemoveForeignKey(foreignKey)).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsRequired = false).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsRequiredDependent = false).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsOwnership = false).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsUnique = false).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.SetDependentToPrincipal((string)null)).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.SetPrincipalToDependent((string)null)).Message);

        Assert.Equal(
            CoreStrings.ModelReadOnly,
            Assert.Throws<InvalidOperationException>(() => foreignKey.SetProperties(new[] { principalProp }, key)).Message);
    }

    [ConditionalFact]
    public void Can_create_foreign_key()
    {
        var entityType = (IConventionEntityType)CreateModel().AddEntityType(""E"");
        var dependentProp = entityType.AddProperty(""P"", typeof(int));
        var principalProp = entityType.AddProperty(""Id"", typeof(int));
        entityType.SetPrimaryKey(principalProp);

        var foreignKey = entityType.AddForeignKey(
            new[] { dependentProp }, entityType.FindPrimaryKey(), entityType);
        foreignKey.SetIsUnique(true);

        Assert.Same(entityType, foreignKey.PrincipalEntityType);
        Assert.Same(principalProp, foreignKey.PrincipalKey.Properties.Single());
        Assert.Same(dependentProp, foreignKey.Properties.Single());
        Assert.True(foreignKey.IsUnique);
        Assert.Same(entityType.FindPrimaryKey(), foreignKey.PrincipalKey);
        Assert.Equal(ConfigurationSource.Convention, foreignKey.GetConfigurationSource());

        ((ForeignKey)foreignKey).UpdateConfigurationSource(ConfigurationSource.DataAnnotation);

        Assert.Equal(ConfigurationSource.DataAnnotation, foreignKey.GetConfigurationSource());
    }

    [ConditionalFact]
    public void Constructor_throws_when_referenced_key_not_on_referenced_entity()
    {
        var model = CreateModel();

        var principalEntityType = model.AddEntityType(""R"");
        var dependentEntityType = model.AddEntityType(""D"");
        var fk = dependentEntityType.AddProperty(""Fk"", typeof(int));

        var principalKey = dependentEntityType.SetPrimaryKey(fk);

        Assert.Equal(
            CoreStrings.ForeignKeyReferencedEntityKeyMismatch(""{'Fk'}"", ""R (Dictionary<string, object>)""),
            Assert.Throws<InvalidOperationException>(
                () => dependentEntityType.AddForeignKey(new[] { fk }, principalKey, principalEntityType)).Message);
    }

    [ConditionalFact]
    public void Constructor_throws_when_principal_and_dependent_property_count_do_not_match()
    {
        var model = CreateModel();
        var dependentEntityType = model.AddEntityType(""D"");
        var principalEntityType = model.AddEntityType(""P"");

        var dependentProperty1 = dependentEntityType.AddProperty(""P1"", typeof(int));
        var dependentProperty2 = dependentEntityType.AddProperty(""P2"", typeof(int));

        var idProperty = principalEntityType.AddProperty(""Id"", typeof(int));
        principalEntityType.SetPrimaryKey(idProperty);

        Assert.Equal(
            CoreStrings.ForeignKeyCountMismatch(
                ""{'P1', 'P2'}"", ""D (Dictionary<string, object>)"", ""{'Id'}"", ""P (Dictionary<string, object>)""),
            Assert.Throws<InvalidOperationException>(
                    () => dependentEntityType.AddForeignKey(
                        new[] { dependentProperty1, dependentProperty2 }, principalEntityType.FindPrimaryKey(), principalEntityType))
                .Message);
    }

    [ConditionalFact]
    public void Constructor_throws_when_principal_and_dependent_property_types_do_not_match()
    {
        var dependentEntityType = CreateModel().AddEntityType(""D"");
        var principalEntityType = CreateModel().AddEntityType(""P"");

        var dependentProperty1 = dependentEntityType.AddProperty(""P1"", typeof(int));
        var dependentProperty2 = dependentEntityType.AddProperty(""P2"", typeof(string));

        var property2 = principalEntityType.AddProperty(""Id1"", typeof(int));
        var property3 = principalEntityType.AddProperty(""Id2"", typeof(int));
        principalEntityType.SetPrimaryKey(
            new[] { property2, property3 });

        Assert.Equal(
            CoreStrings.ForeignKeyTypeMismatch(
                ""{'P1' : int, 'P2' : string}"", ""D (Dictionary<string, object>)"", ""{'Id1' : int, 'Id2' : int}"",
                ""P (Dictionary<string, object>)""),
            Assert.Throws<InvalidOperationException>(
                    () => dependentEntityType.AddForeignKey(
                        new[] { dependentProperty1, dependentProperty2 }, principalEntityType.FindPrimaryKey(), principalEntityType))
                .Message);
    }

    [ConditionalFact]
    public void Can_create_foreign_key_with_non_pk_principal()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var keyProp = entityType.AddProperty(""Id"", typeof(int));
        var dependentProp = entityType.AddProperty(""P"", typeof(int));
        var principalProp = entityType.AddProperty(""U"", typeof(int));
        entityType.SetPrimaryKey(keyProp);
        var principalKey = entityType.AddKey(principalProp);

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, principalKey, entityType);
        foreignKey.IsUnique = false;

        Assert.Same(entityType, foreignKey.PrincipalEntityType);
        Assert.Same(principalProp, foreignKey.PrincipalKey.Properties.Single());
        Assert.Same(dependentProp, foreignKey.Properties.Single());
        Assert.False(foreignKey.IsUnique);
        Assert.Same(principalKey, foreignKey.PrincipalKey);
    }

    [ConditionalFact]
    public void IsRequired_and_IsUnique_false_when_dependent_property_not_nullable()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var property = entityType.AddProperty(""Id"", typeof(int));
        entityType.SetPrimaryKey(property);
        var dependentProp = entityType.AddProperty(""P"", typeof(int));

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, entityType.FindPrimaryKey(), entityType);

        Assert.False(dependentProp.IsNullable);
        Assert.True(foreignKey.IsRequired);
        Assert.False(foreignKey.IsUnique);
    }

    [ConditionalFact]
    public void IsRequired_and_IsUnique_false_when_dependent_property_nullable()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var property = entityType.AddProperty(""Id"", typeof(int));
        entityType.SetPrimaryKey(property);
        var dependentProp = entityType.AddProperty(""P"", typeof(int?));

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, entityType.FindPrimaryKey(), entityType);

        Assert.True(dependentProp.IsNullable);
        Assert.False(foreignKey.IsRequired);
        Assert.False(foreignKey.IsUnique);
    }

    [ConditionalFact]
    public void IsRequired_false_when_no_part_of_composite_FK_is_nullable()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var property = entityType.AddProperty(""Id1"", typeof(int));
        var property1 = entityType.AddProperty(""Id2"", typeof(string));
        property1.IsNullable = false;
        entityType.SetPrimaryKey(
            new[] { property, property1 });

        var dependentProp1 = entityType.AddProperty(""P1"", typeof(int));
        var dependentProp2 = entityType.AddProperty(""P2"", typeof(string));

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp1, dependentProp2 }, entityType.FindPrimaryKey(), entityType);

        Assert.False(foreignKey.IsRequired);

        dependentProp2.IsNullable = false;

        Assert.False(foreignKey.IsRequired);
    }

    [ConditionalFact]
    public void Setting_IsRequired_to_true_does_not_configure_FK_properties_as_non_nullable()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var property = entityType.AddProperty(""Id1"", typeof(int));
        var property3 = entityType.AddProperty(""Id2"", typeof(string));
        property3.IsNullable = false;
        entityType.SetPrimaryKey(
            new[] { property, property3 });

        var dependentProp1 = entityType.AddProperty(""P1"", typeof(int));
        var dependentProp2 = entityType.AddProperty(""P2"", typeof(string));

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp1, dependentProp2 }, entityType.FindPrimaryKey(), entityType);
        foreignKey.IsRequired = true;

        Assert.True(foreignKey.IsRequired);
        Assert.False(dependentProp1.IsNullable);
        Assert.True(dependentProp2.IsNullable);
    }

    [ConditionalFact]
    public void Setting_IsRequired_to_false_will_not_configure_FK_properties_as_nullable()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var property = entityType.AddProperty(""Id1"", typeof(int));
        var property1 = entityType.AddProperty(""Id2"", typeof(string));
        property1.IsNullable = false;
        entityType.SetPrimaryKey(
            new[] { property, property1 });

        var dependentProp1 = entityType.AddProperty(""P1"", typeof(int?));
        dependentProp1.IsNullable = false;
        var dependentProp2 = entityType.AddProperty(""P2"", typeof(string));
        dependentProp2.IsNullable = false;

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp1, dependentProp2 }, entityType.FindPrimaryKey(), entityType);
        foreignKey.IsRequired = false;

        Assert.False(foreignKey.IsRequired);
        Assert.False(dependentProp1.IsNullable);
        Assert.False(dependentProp2.IsNullable);
    }

    [ConditionalFact]
    public void IsRequiredDependent_throws_for_incompatible_uniqueness()
    {
        var foreignKey = CreateOneToManyFK();

        Assert.Equal(
            CoreStrings.NonUniqueRequiredDependentForeignKey(
                ""{'Id'}"",
                nameof(OneToManyDependent)),
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsRequiredDependent = true).Message);
    }

    private IMutableForeignKey CreateOneToManyFK()
    {
        var model = CreateModel();
        var principalEntityType = model.AddEntityType(typeof(OneToManyPrincipal));
        var property = principalEntityType.AddProperty(NavigationBase.IdProperty);
        var pk = principalEntityType.SetPrimaryKey(property);

        var dependentEntityType = model.AddEntityType(typeof(OneToManyDependent));
        var fkProp = dependentEntityType.AddProperty(NavigationBase.IdProperty);
        var fk = dependentEntityType.AddForeignKey(new[] { fkProp }, pk, principalEntityType);
        fk.SetPrincipalToDependent(NavigationBase.OneToManyDependentsProperty);
        fk.SetDependentToPrincipal(NavigationBase.OneToManyPrincipalProperty);
        return fk;
    }

    private IMutableForeignKey CreateOneToManySameBaseFK()
    {
        var model = CreateModel();

        var baseEntityType = model.AddEntityType(typeof(NavigationBase));
        var property1 = baseEntityType.AddProperty(NavigationBase.IdProperty);
        var pk = baseEntityType.SetPrimaryKey(property1);

        var principalEntityType = model.AddEntityType(typeof(OneToManyPrincipal));
        principalEntityType.BaseType = baseEntityType;

        var dependentEntityType = model.AddEntityType(typeof(OneToManyDependent));
        dependentEntityType.BaseType = baseEntityType;
        var fk = dependentEntityType.AddForeignKey(new[] { property1 }, pk, principalEntityType);
        fk.SetPrincipalToDependent(NavigationBase.OneToManyDependentsProperty);
        fk.SetDependentToPrincipal(NavigationBase.OneToManyPrincipalProperty);
        return fk;
    }

    private IMutableForeignKey CreateOneToManySameHierarchyFK()
    {
        var model = CreateModel();

        var baseEntityType = model.AddEntityType(typeof(NavigationBase));
        var property1 = baseEntityType.AddProperty(NavigationBase.IdProperty);
        var pk = baseEntityType.SetPrimaryKey(property1);

        var dependentEntityType = model.AddEntityType(typeof(OneToManyDependent));
        dependentEntityType.BaseType = baseEntityType;
        var fk = dependentEntityType.AddForeignKey(new[] { property1 }, pk, baseEntityType);
        fk.SetPrincipalToDependent(NavigationBase.OneToManyDependentsProperty);
        return fk;
    }

    public abstract class NavigationBase
    {
        public static readonly PropertyInfo IdProperty = typeof(NavigationBase).GetProperty(nameof(Id));

        public static readonly PropertyInfo OneToManyDependentsProperty =
            typeof(NavigationBase).GetProperty(nameof(OneToManyDependents));

        public static readonly PropertyInfo OneToManyPrincipalProperty = typeof(NavigationBase).GetProperty(nameof(OneToManyPrincipal));

        public int Id { get; set; }
        public IEnumerable<OneToManyDependent> OneToManyDependents { get; set; }
        public OneToManyPrincipal OneToManyPrincipal { get; set; }
    }

    public class OneToManyPrincipal : NavigationBase
    {
        public IEnumerable<OneToManyDependent> Deception { get; set; }
    }

    public class DerivedOneToManyPrincipal : OneToManyPrincipal
    {
    }

    public class OneToManyDependent : NavigationBase
    {
        public static readonly PropertyInfo DeceptionProperty = typeof(OneToManyDependent).GetProperty(nameof(Deception));

        public OneToManyPrincipal Deception { get; set; }
    }

    public class DerivedOneToManyDependent : OneToManyDependent
    {
    }

    [ConditionalFact]
    public void Throws_when_setting_navigation_to_principal_on_wrong_FK()
    {
        var foreignKey1 = CreateOneToManyFK();
        foreignKey1.SetDependentToPrincipal(OneToManyDependent.DeceptionProperty);

        var newFkProp = foreignKey1.DeclaringEntityType.AddProperty(""FkProp"", typeof(int));
        var foreignKey2 = foreignKey1.DeclaringEntityType.AddForeignKey(
            new[] { newFkProp },
            foreignKey1.PrincipalEntityType.FindPrimaryKey(),
            foreignKey1.PrincipalEntityType);

        Assert.Equal(
            CoreStrings.NavigationForWrongForeignKey(
                nameof(OneToManyDependent.Deception),
                nameof(OneToManyDependent),
                foreignKey2.Properties.Format(),
                foreignKey1.Properties.Format()),
            Assert.Throws<InvalidOperationException>(
                ()
                    => foreignKey2.SetDependentToPrincipal(OneToManyDependent.DeceptionProperty)).Message);
    }

    [ConditionalFact]
    public void Throws_when_setting_navigation_to_dependent_on_wrong_FK()
    {
        var foreignKey1 = CreateOneToManyFK();
        foreignKey1.SetDependentToPrincipal(OneToManyDependent.DeceptionProperty);

        var newFkProp = foreignKey1.DeclaringEntityType.AddProperty(""FkProp"", typeof(int));
        var foreignKey2 = foreignKey1.DeclaringEntityType.AddForeignKey(
            new[] { newFkProp },
            foreignKey1.PrincipalEntityType.FindPrimaryKey(),
            foreignKey1.PrincipalEntityType);

        Assert.Equal(
            CoreStrings.NavigationForWrongForeignKey(
                nameof(OneToManyDependent.Deception),
                nameof(OneToManyDependent),
                foreignKey2.Properties.Format(),
                foreignKey1.Properties.Format()),
            Assert.Throws<InvalidOperationException>(
                ()
                    => foreignKey2.SetDependentToPrincipal(OneToManyDependent.DeceptionProperty)).Message);
    }

    [ConditionalFact]
    public void IsUnique_throws_for_incompatible_navigation()
    {
        var foreignKey = CreateOneToManyFK();
        foreignKey.SetPrincipalToDependent(nameof(OneToManyPrincipal.Deception));

        Assert.Equal(
            CoreStrings.UnableToSetIsUnique(
                ""True"",
                nameof(OneToManyPrincipal.Deception),
                nameof(OneToManyPrincipal)),
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsUnique = true).Message);
    }

    [ConditionalFact]
    public void IsUnique_throws_for_incompatible_required_dependent()
    {
        var foreignKey = CreateOneToManyFK();
        foreignKey.SetPrincipalToDependent((string)null);
        foreignKey.IsUnique = true;
        foreignKey.IsRequiredDependent = true;

        Assert.Equal(
            CoreStrings.NonUniqueRequiredDependentForeignKey(
                ""{'Id'}"",
                nameof(OneToManyDependent)),
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsUnique = false).Message);
    }

    private IMutableForeignKey CreateSelfRefFK(bool useAltKey = false)
    {
        var entityType = CreateModel().AddEntityType(typeof(SelfRef));
        var pk = entityType.SetPrimaryKey(entityType.AddProperty(SelfRef.IdProperty));

        var property = entityType.AddProperty(""AltId"", typeof(int));
        var principalKey = useAltKey
            ? entityType.AddKey(property)
            : pk;

        var fk = entityType.AddForeignKey(new[] { pk.Properties.Single() }, principalKey, entityType);
        fk.IsUnique = true;
        fk.SetDependentToPrincipal(SelfRef.SelfRefPrincipalProperty);
        fk.SetPrincipalToDependent(SelfRef.SelfRefDependentProperty);
        return fk;
    }

    private class SelfRef
    {
        public static readonly PropertyInfo IdProperty = typeof(SelfRef).GetProperty(""Id"");
        public static readonly PropertyInfo SelfRefIdProperty = typeof(SelfRef).GetProperty(nameof(SelfRefId));
        public static readonly PropertyInfo SelfRefPrincipalProperty = typeof(SelfRef).GetProperty(nameof(SelfRefPrincipal));
        public static readonly PropertyInfo SelfRefDependentProperty = typeof(SelfRef).GetProperty(nameof(SelfRefDependent));

        public int Id { get; set; }
        public SelfRef SelfRefPrincipal { get; set; }
        public SelfRef SelfRefDependent { get; set; }
        public int? SelfRefId { get; set; }
    }

    [ConditionalFact]
    public void IsSelfReferencing_returns_true_for_self_ref_foreign_keys()
    {
        var fk = CreateSelfRefFK();

        Assert.True(fk.IsSelfReferencing());
    }

    [ConditionalFact]
    public void IsSelfReferencing_returns_true_for_non_pk_self_ref_foreign_keys()
    {
        var fk = CreateSelfRefFK(useAltKey: true);

        Assert.True(fk.IsSelfReferencing());
    }

    [ConditionalFact]
    public void IsSelfReferencing_returns_false_for_same_hierarchy_foreign_keys()
    {
        var fk = CreateOneToManySameHierarchyFK();

        Assert.False(fk.IsSelfReferencing());
    }

    [ConditionalFact]
    public void IsSelfReferencing_returns_false_for_same_base_foreign_keys()
    {
        var fk = CreateOneToManySameBaseFK();

        Assert.False(fk.IsSelfReferencing());
    }

    [ConditionalFact]
    public void IsSelfReferencing_returns_false_for_non_hierarchical_foreign_keys()
    {
        var fk = CreateOneToManyFK();

        Assert.False(fk.IsSelfReferencing());
    }

    [ConditionalFact]
    public void IsBaseLinking_returns_true_for_self_ref_foreign_keys()
    {
        var fk = CreateSelfRefFK();

        Assert.True(fk.IsBaseLinking());
    }

    [ConditionalFact]
    public void IsBaseLinking_returns_false_for_non_pk_self_ref_foreign_keys()
    {
        var fk = CreateSelfRefFK(useAltKey: true);

        Assert.False(fk.IsBaseLinking());
    }

    [ConditionalFact]
    public void IsBaseLinking_returns_true_for_same_hierarchy_foreign_keys()
    {
        var fk = CreateOneToManySameHierarchyFK();

        Assert.True(fk.IsBaseLinking());
    }

    [ConditionalFact]
    public void IsBaseLinking_returns_true_for_same_base_foreign_keys()
    {
        var fk = CreateOneToManySameBaseFK();

        Assert.True(fk.IsBaseLinking());
    }

    [ConditionalFact]
    public void IsSelfPrimaryKeyReferencing_returns_false_for_non_hierarchical_foreign_keys()
    {
        var fk = CreateOneToManyFK();

        Assert.False(fk.IsBaseLinking());
    }

    [ConditionalFact]
    public void Can_change_cascade_delete_flag()
    {
        var entityType = CreateModel().AddEntityType(""E"");
        var keyProp = entityType.AddProperty(""Id"", typeof(int));
        var dependentProp = entityType.AddProperty(""P"", typeof(int));
        var principalProp = entityType.AddProperty(""U"", typeof(int));
        entityType.SetPrimaryKey(keyProp);
        var principalKey = entityType.AddKey(principalProp);

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, principalKey, entityType);

        Assert.Equal(DeleteBehavior.ClientSetNull, foreignKey.DeleteBehavior);

        foreignKey.DeleteBehavior = DeleteBehavior.Cascade;

        Assert.Equal(DeleteBehavior.Cascade, foreignKey.DeleteBehavior);

        foreignKey.DeleteBehavior = DeleteBehavior.Restrict;

        Assert.Equal(DeleteBehavior.Restrict, foreignKey.DeleteBehavior);

        foreignKey.DeleteBehavior = DeleteBehavior.SetNull;

        Assert.Equal(DeleteBehavior.SetNull, foreignKey.DeleteBehavior);

        foreignKey.DeleteBehavior = DeleteBehavior.ClientSetNull;

        Assert.Equal(DeleteBehavior.ClientSetNull, foreignKey.DeleteBehavior);
    }

    [ConditionalFact]
    public void Can_change_cascade_ownership()
    {
        var entityType = CreateModel().AddOwnedEntityType(""E"");
        var keyProp = entityType.AddProperty(""Id"", typeof(int));
        var dependentProp = entityType.AddProperty(""P"", typeof(int));
        var principalProp = entityType.AddProperty(""U"", typeof(int));
        entityType.SetPrimaryKey(keyProp);
        var principalKey = entityType.AddKey(principalProp);

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, principalKey, entityType);
        foreignKey.SetPrincipalToDependent(""S"");

        Assert.False(foreignKey.IsOwnership);

        foreignKey.IsOwnership = true;

        Assert.True(foreignKey.IsOwnership);

        Assert.Equal(
            CoreStrings.OwnershipToDependent(
                ""S"",
                ""E (Dictionary<string, object>)"",
                ""E (Dictionary<string, object>)""),
            Assert.Throws<InvalidOperationException>(() => foreignKey.SetPrincipalToDependent((string)null)).Message);
    }

    [ConditionalFact]
    public void IsOwnership_throws_when_no_navigation()
    {
        var entityType = CreateModel().AddOwnedEntityType(""E"");
        var keyProp = entityType.AddProperty(""Id"", typeof(int));
        var dependentProp = entityType.AddProperty(""P"", typeof(int));
        var principalProp = entityType.AddProperty(""U"", typeof(int));
        entityType.SetPrimaryKey(keyProp);
        var principalKey = entityType.AddKey(principalProp);

        var foreignKey = entityType.AddForeignKey(new[] { dependentProp }, principalKey, entityType);

        Assert.False(foreignKey.IsOwnership);

        Assert.Equal(
            CoreStrings.NavigationlessOwnership(
                ""E (Dictionary<string, object>)"",
                ""E (Dictionary<string, object>)""),
            Assert.Throws<InvalidOperationException>(() => foreignKey.IsOwnership = true).Message);
    }

    [ConditionalFact]
    public void Can_find_targets_for_non_hierarchical_foreign_keys()
    {
        var fk = CreateOneToManyFK();

        Assert.Same(fk.PrincipalEntityType, fk.GetRelatedEntityType(fk.DeclaringEntityType));
        Assert.Same(fk.DeclaringEntityType, fk.GetRelatedEntityType(fk.PrincipalEntityType));
        Assert.Equal(new[] { fk.PrincipalToDependent }, fk.FindNavigationsFrom(fk.PrincipalEntityType));
        Assert.Equal(new[] { fk.DependentToPrincipal }, fk.FindNavigationsFrom(fk.DeclaringEntityType));
        Assert.Equal(new[] { fk.DependentToPrincipal }, fk.FindNavigationsTo(fk.PrincipalEntityType));
        Assert.Equal(new[] { fk.PrincipalToDependent }, fk.FindNavigationsTo(fk.DeclaringEntityType));

        Assert.Equal(new[] { fk.PrincipalToDependent }, fk.FindNavigationsFromInHierarchy(fk.PrincipalEntityType));
        Assert.Equal(new[] { fk.DependentToPrincipal }, fk.FindNavigationsFromInHierarchy(fk.DeclaringEntityType));
        Assert.Equal(new[] { fk.DependentToPrincipal }, fk.FindNavigationsToInHierarchy(fk.PrincipalEntityType));
        Assert.Equal(new[] { fk.PrincipalToDependent }, fk.FindNavigationsToInHierarchy(fk.DeclaringEntityType));
    }

    [ConditionalFact]
    public void Can_find_targets_for_same_base_foreign_keys()
    {
        var fk = CreateOneToManySameBaseFK();

        var model = fk.DeclaringEntityType.Model;
        var derivedPrincipal = model.AddEntityType(typeof(DerivedOneToManyPrincipal));
        derivedPrincipal.BaseType = fk.PrincipalEntityType;

        var derivedDependent = model.AddEntityType(typeof(DerivedOneToManyDependent));
        derivedDependent.BaseType = fk.DeclaringEntityType;

        Assert.Same(fk.PrincipalEntityType, fk.GetRelatedEntityType(fk.DeclaringEntityType));
        Assert.Same(fk.DeclaringEntityType, fk.GetRelatedEntityType(fk.PrincipalEntityType));
        Assert.Same(fk.PrincipalToDependent, fk.FindNavigationsFrom(fk.PrincipalEntityType).SingleOrDefault());
        Assert.Same(fk.DependentToPrincipal, fk.FindNavigationsFrom(fk.DeclaringEntityType).SingleOrDefault());
        Assert.Same(fk.DependentToPrincipal, fk.FindNavigationsTo(fk.PrincipalEntityType).SingleOrDefault());
        Assert.Same(fk.PrincipalToDependent, fk.FindNavigationsTo(fk.DeclaringEntityType).SingleOrDefault());

        Assert.Same(fk.PrincipalToDependent, fk.FindNavigationsFromInHierarchy(fk.PrincipalEntityType).SingleOrDefault());
        Assert.Same(fk.DependentToPrincipal, fk.FindNavigationsFromInHierarchy(fk.DeclaringEntityType).SingleOrDefault());
        Assert.Same(fk.DependentToPrincipal, fk.FindNavigationsToInHierarchy(fk.PrincipalEntityType).SingleOrDefault());
        Assert.Same(fk.PrincipalToDependent, fk.FindNavigationsToInHierarchy(fk.DeclaringEntityType).SingleOrDefault());

        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                derivedDependent.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.GetRelatedEntityType(derivedDependent)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                derivedPrincipal.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.GetRelatedEntityType(derivedPrincipal)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                derivedPrincipal.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsFrom(derivedPrincipal)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                derivedDependent.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsFrom(derivedDependent)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                derivedPrincipal.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsTo(derivedPrincipal)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                derivedDependent.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsTo(derivedDependent)).Message);

        Assert.Equal(new[] { fk.PrincipalToDependent }.Where(n => n != null), fk.FindNavigationsFromInHierarchy(derivedPrincipal));
        Assert.Equal(new[] { fk.DependentToPrincipal }.Where(n => n != null), fk.FindNavigationsFromInHierarchy(derivedDependent));
        Assert.Equal(new[] { fk.DependentToPrincipal }.Where(n => n != null), fk.FindNavigationsToInHierarchy(derivedPrincipal));
        Assert.Equal(new[] { fk.PrincipalToDependent }.Where(n => n != null), fk.FindNavigationsToInHierarchy(derivedDependent));
    }

    [ConditionalFact]
    public void Can_find_targets_for_self_ref_foreign_keys()
    {
        var fk = CreateSelfRefFK();

        Assert.Same(fk.PrincipalEntityType, fk.GetRelatedEntityType(fk.DeclaringEntityType));
        Assert.Same(fk.DeclaringEntityType, fk.GetRelatedEntityType(fk.PrincipalEntityType));

        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsFrom(fk.PrincipalEntityType).ToArray());
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsFrom(fk.DeclaringEntityType).ToArray());
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsTo(fk.PrincipalEntityType).ToArray());
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsTo(fk.DeclaringEntityType).ToArray());

        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsFromInHierarchy(fk.PrincipalEntityType).ToArray());
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsFromInHierarchy(fk.DeclaringEntityType).ToArray());
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsToInHierarchy(fk.PrincipalEntityType).ToArray());
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal },
            fk.FindNavigationsToInHierarchy(fk.DeclaringEntityType).ToArray());
    }

    [ConditionalFact]
    public void Can_finding_targets_for_same_hierarchy_foreign_keys()
    {
        var fk = CreateOneToManySameHierarchyFK();

        Assert.Same(fk.PrincipalEntityType, fk.GetRelatedEntityType(fk.DeclaringEntityType));
        Assert.Same(fk.DeclaringEntityType, fk.GetRelatedEntityType(fk.PrincipalEntityType));
        Assert.Same(fk.PrincipalToDependent, fk.FindNavigationsFrom(fk.PrincipalEntityType).SingleOrDefault());
        Assert.Same(fk.DependentToPrincipal, fk.FindNavigationsFrom(fk.DeclaringEntityType).SingleOrDefault());
        Assert.Same(fk.DependentToPrincipal, fk.FindNavigationsTo(fk.PrincipalEntityType).SingleOrDefault());
        Assert.Same(fk.PrincipalToDependent, fk.FindNavigationsTo(fk.DeclaringEntityType).SingleOrDefault());

        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal }.Where(n => n != null),
            fk.FindNavigationsFromInHierarchy(fk.PrincipalEntityType));
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal }.Where(n => n != null),
            fk.FindNavigationsFromInHierarchy(fk.DeclaringEntityType));
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal }.Where(n => n != null),
            fk.FindNavigationsToInHierarchy(fk.PrincipalEntityType));
        Assert.Equal(
            new[] { fk.PrincipalToDependent, fk.DependentToPrincipal }.Where(n => n != null),
            fk.FindNavigationsToInHierarchy(fk.DeclaringEntityType));
    }

    [ConditionalFact]
    public void Finding_targets_throws_for_entity_types_not_in_the_relationship()
    {
        var fk = CreateOneToManyFK();
        var unrelatedType = fk.DeclaringEntityType.Model.AddEntityType(typeof(NavigationBase));

        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.GetRelatedEntityType(unrelatedType)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.GetRelatedEntityType(unrelatedType)).Message);

        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsFrom(unrelatedType)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsFrom(unrelatedType)).Message);

        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsTo(unrelatedType)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationshipStrict(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsTo(unrelatedType)).Message);

        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationship(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsFromInHierarchy(unrelatedType)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationship(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsFromInHierarchy(unrelatedType)).Message);

        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationship(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsToInHierarchy(unrelatedType)).Message);
        Assert.Equal(
            CoreStrings.EntityTypeNotInRelationship(
                unrelatedType.DisplayName(), fk.DeclaringEntityType.DisplayName(), fk.PrincipalEntityType.DisplayName()),
            Assert.Throws<InvalidOperationException>(() => fk.FindNavigationsToInHierarchy(unrelatedType)).Message);
    }

    private static IMutableModel CreateModel()
        => new Model();
}",1,439 334 2000 123 91 2001 93 439 492 2002 40 41 123 490 2003 61 2004 40 41 59 490 2005 61 2003 46 2006 40 648 41 59 490 2007 61 2005 46 2008 40 648 44 478 40 404 41 41 59 490 2009 61 2005 46 2008 40 648 44 478 40 404 41 41 59 490 2010 61 2005 46 2011 40 2009 41 59 490 2012 61 2005 46 2013 40 418 91 93 123 2007 125 44 2010 44 2005 41 59 2003 46 2014 40 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2005 46 2013 40 418 91 93 123 2009 125 44 2010 44 2005 41 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2005 46 2022 40 2012 41 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2023 61 380 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2024 61 380 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2025 61 380 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2026 61 380 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2027 40 40 461 41 424 41 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2028 40 40 461 41 424 41 41 46 2021 41 59 2015 46 2016 40 2017 46 2018 44 2015 46 2019 60 2020 62 40 40 41 619 2012 46 2029 40 418 91 93 123 2009 125 44 2010 41 41 46 2021 41 59 125 91 2001 93 439 492 2030 40 41 123 490 2031 61 40 2032 41 2033 40 41 46 2034 40 648 41 59 490 2035 61 2031 46 2036 40 648 44 478 40 404 41 41 59 490 2037 61 2031 46 2036 40 648 44 478 40 404 41 41 59 2031 46 2038 40 2037 41 59 490 2039 61 2031 46 2040 40 418 91 93 123 2035 125 44 2031 46 2041 40 41 44 2031 41 59 2039 46 2042 40 473 41 59 2043 46 2044 40 2031 44 2039 46 2045 41 59 2043 46 2044 40 2037 44 2039 46 2046 46 2047 46 2048 40 41 41 59 2043 46 2044 40 2035 44 2039 46 2047 46 2048 40 41 41 59 2043 46 304 40 2039 46 2049 41 59 2043 46 2044 40 2031 46 2041 40 41 44 2039 46 2046 41 59 2043 46 2050 40 2051 46 2052 44 2039 46 2053 40 41 41 59 40 40 2054 41 2039 41 46 2055 40 2051 46 2056 41 59 2043 46 2050 40 2051 46 2056 44 2039 46 2053 40 41 41 59 125 91 2001 93 439 492 2057 40 41 123 490 2058 61 2059 40 41 59 490 2060 61 2058 46 2061 40 648 41 59 490 2062 61 2058 46 2061 40 648 41 59 490 2063 61 2062 46 2064 40 648 44 478 40 404 41 41 59 490 2065 61 2062 46 2066 40 2063 41 59 2067 46 2068 40 2069 46 2070 40 648 44 648 41 44 2067 46 2071 60 2072 62 40 40 41 619 2062 46 2073 40 418 91 93 123 2063 125 44 2065 44 2060 41 41 46 2074 41 59 125 91 2001 93 439 492 2075 40 41 123 490 2076 61 2077 40 41 59 490 2078 61 2076 46 2079 40 648 41 59 490 2080 61 2076 46 2079 40 648 41 59 490 2081 61 2078 46 2082 40 648 44 478 40 404 41 41 59 490 2083 61 2078 46 2082 40 648 44 478 40 404 41 41 59 490 2084 61 2080 46 2082 40 648 44 478 40 404 41 41 59 2080 46 2085 40 2084 41 59 2086 46 2087 40 2088 46 2089 40 648 44 648 44 648 44 648 41 44 2086 46 2090 60 2091 62 40 40 41 619 2078 46 2092 40 418 91 93 123 2081 44 2083 125 44 2080 46 2093 40 41 44 2080 41 41 46 2094 41 59 125 91 2001 93 439 492 2095 40 41 123 490 2096 61 2097 40 41 46 2098 40 648 41 59 490 2099 61 2097 40 41 46 2098 40 648 41 59 490 2100 61 2096 46 2101 40 648 44 478 40 404 41 41 59 490 2102 61 2096 46 2101 40 648 44 478 40 461 41 41 59 490 2103 61 2099 46 2101 40 648 44 478 40 404 41 41 59 490 2104 61 2099 46 2101 40 648 44 478 40 404 41 41 59 2099 46 2105 40 418 91 93 123 2103 44 2104 125 41 59 2106 46 2107 40 2108 46 2109 40 648 44 648 44 648 44 648 41 44 2106 46 2110 60 2111 62 40 40 41 619 2096 46 2112 40 418 91 93 123 2100 44 2102 125 44 2099 46 2113 40 41 44 2099 41 41 46 2114 41 59 125 91 2001 93 439 492 2115 40 41 123 490 2116 61 2117 40 41 46 2118 40 648 41 59 490 2119 61 2116 46 2120 40 648 44 478 40 404 41 41 59 490 2121 61 2116 46 2120 40 648 44 478 40 404 41 41 59 490 2122 61 2116 46 2120 40 648 44 478 40 404 41 41 59 2116 46 2123 40 2119 41 59 490 2124 61 2116 46 2125 40 2122 41 59 490 2126 61 2116 46 2127 40 418 91 93 123 2121 125 44 2124 44 2116 41 59 2126 46 2128 61 380 59 2129 46 2130 40 2116 44 2126 46 2131 41 59 2129 46 2130 40 2122 44 2126 46 2132 46 2133 46 2134 40 41 41 59 2129 46 2130 40 2121 44 2126 46 2133 46 2134 40 41 41 59 2129 46 302 40 2126 46 2128 41 59 2129 46 2130 40 2124 44 2126 46 2132 41 59 125 91 2001 93 439 492 2135 40 41 123 490 2136 61 2137 40 41 46 2138 40 648 41 59 490 2139 61 2136 46 2140 40 648 44 478 40 404 41 41 59 2136 46 2141 40 2139 41 59 490 2142 61 2136 46 2140 40 648 44 478 40 404 41 41 59 490 2143 61 2136 46 2144 40 418 91 93 123 2142 125 44 2136 46 2145 40 41 44 2136 41 59 2146 46 302 40 2142 46 2147 41 59 2146 46 304 40 2143 46 2148 41 59 2146 46 302 40 2143 46 2149 41 59 125 91 2001 93 439 492 2150 40 41 123 490 2151 61 2152 40 41 46 2153 40 648 41 59 490 2154 61 2151 46 2155 40 648 44 478 40 404 41 41 59 2151 46 2156 40 2154 41 59 490 2157 61 2151 46 2155 40 648 44 478 40 404 63 41 41 59 490 2158 61 2151 46 2159 40 418 91 93 123 2157 125 44 2151 46 2160 40 41 44 2151 41 59 2161 46 304 40 2157 46 2162 41 59 2161 46 302 40 2158 46 2163 41 59 2161 46 302 40 2158 46 2164 41 59 125 91 2001 93 439 492 2165 40 41 123 490 2166 61 2167 40 41 46 2168 40 648 41 59 490 2169 61 2166 46 2170 40 648 44 478 40 404 41 41 59 490 2171 61 2166 46 2170 40 648 44 478 40 461 41 41 59 2171 46 2172 61 380 59 2166 46 2173 40 418 91 93 123 2169 44 2171 125 41 59 490 2174 61 2166 46 2170 40 648 44 478 40 404 41 41 59 490 2175 61 2166 46 2170 40 648 44 478 40 461 41 41 59 490 2176 61 2166 46 2177 40 418 91 93 123 2174 44 2175 125 44 2166 46 2178 40 41 44 2166 41 59 2179 46 302 40 2176 46 2180 41 59 2175 46 2172 61 380 59 2179 46 302 40 2176 46 2180 41 59 125 91 2001 93 439 492 2181 40 41 123 490 2182 61 2183 40 41 46 2184 40 648 41 59 490 2185 61 2182 46 2186 40 648 44 478 40 404 41 41 59 490 2187 61 2182 46 2186 40 648 44 478 40 461 41 41 59 2187 46 2188 61 380 59 2182 46 2189 40 418 91 93 123 2185 44 2187 125 41 59 490 2190 61 2182 46 2186 40 648 44 478 40 404 41 41 59 490 2191 61 2182 46 2186 40 648 44 478 40 461 41 41 59 490 2192 61 2182 46 2193 40 418 91 93 123 2190 44 2191 125 44 2182 46 2194 40 41 44 2182 41 59 2192 46 2195 61 473 59 2196 46 304 40 2192 46 2195 41 59 2196 46 302 40 2190 46 2188 41 59 2196 46 304 40 2191 46 2188 41 59 125 91 2001 93 439 492 2197 40 41 123 490 2198 61 2199 40 41 46 2200 40 648 41 59 490 2201 61 2198 46 2202 40 648 44 478 40 404 41 41 59 490 2203 61 2198 46 2202 40 648 44 478 40 461 41 41 59 2203 46 2204 61 380 59 2198 46 2205 40 418 91 93 123 2201 44 2203 125 41 59 490 2206 61 2198 46 2202 40 648 44 478 40 404 63 41 41 59 2206 46 2204 61 380 59 490 2207 61 2198 46 2202 40 648 44 478 40 461 41 41 59 2207 46 2204 61 380 59 490 2208 61 2198 46 2209 40 418 91 93 123 2206 44 2207 125 44 2198 46 2210 40 41 44 2198 41 59 2208 46 2211 61 380 59 2212 46 302 40 2208 46 2211 41 59 2212 46 302 40 2206 46 2204 41 59 2212 46 302 40 2207 46 2204 41 59 125 91 2001 93 439 492 2213 40 41 123 490 2214 61 2215 40 41 59 2216 46 2217 40 2218 46 2219 40 648 44 2220 40 2221 41 41 44 2216 46 2222 60 2223 62 40 40 41 619 2214 46 2224 61 473 41 46 2225 41 59 125 437 2226 2227 40 41 123 490 2228 61 2229 40 41 59 490 2230 61 2228 46 2231 40 478 40 2232 41 41 59 490 2233 61 2230 46 2234 40 2235 46 2236 41 59 490 2237 61 2230 46 2238 40 2233 41 59 490 2239 61 2228 46 2231 40 478 40 2240 41 41 59 490 2241 61 2239 46 2234 40 2235 46 2236 41 59 490 2242 61 2239 46 2243 40 418 91 93 123 2241 125 44 2237 44 2230 41 59 2242 46 2244 40 2235 46 2245 41 59 2242 46 2246 40 2235 46 2247 41 59 450 2242 59 125 437 2226 2248 40 41 123 490 2249 61 2250 40 41 59 490 2251 61 2249 46 2252 40 478 40 2253 41 41 59 490 2254 61 2251 46 2255 40 2253 46 2256 41 59 490 2257 61 2251 46 2258 40 2254 41 59 490 2259 61 2249 46 2252 40 478 40 2260 41 41 59 2259 46 2261 61 2251 59 490 2262 61 2249 46 2252 40 478 40 2263 41 41 59 2262 46 2261 61 2251 59 490 2264 61 2262 46 2265 40 418 91 93 123 2254 125 44 2257 44 2259 41 59 2264 46 2266 40 2253 46 2267 41 59 2264 46 2268 40 2253 46 2269 41 59 450 2264 59 125 437 2226 2270 40 41 123 490 2271 61 2272 40 41 59 490 2273 61 2271 46 2274 40 478 40 2275 41 41 59 490 2276 61 2273 46 2277 40 2275 46 2278 41 59 490 2279 61 2273 46 2280 40 2276 41 59 490 2281 61 2271 46 2274 40 478 40 2282 41 41 59 2281 46 2283 61 2273 59 490 2284 61 2281 46 2285 40 418 91 93 123 2276 125 44 2279 44 2273 41 59 2284 46 2286 40 2275 46 2287 41 59 450 2284 59 125 439 305 334 2288 123 439 457 441 2289 2290 61 478 40 2288 41 46 2291 40 2292 40 2293 41 41 59 439 457 441 2289 2294 61 478 40 2288 41 46 2291 40 2292 40 2295 41 41 59 439 457 441 2289 2296 61 478 40 2288 41 46 2291 40 2292 40 2297 41 41 59 439 404 2293 123 2298 59 2299 59 125 439 2300 60 2301 62 2295 123 2302 59 2303 59 125 439 2297 2297 123 2304 59 2305 59 125 125 439 334 2306 58 2288 123 439 2307 60 2308 62 2309 123 2310 59 2311 59 125 125 439 334 2312 58 2306 123 125 439 334 2313 58 2288 123 439 457 441 2314 2315 61 478 40 2313 41 46 2316 40 2317 40 2318 41 41 59 439 2306 2318 123 2319 59 2320 59 125 125 439 334 2321 58 2313 123 125 91 2001 93 439 492 2322 40 41 123 490 2323 61 2227 40 41 59 2323 46 2324 40 2313 46 2325 41 59 490 2326 61 2323 46 2327 46 2328 40 648 44 478 40 404 41 41 59 490 2329 61 2323 46 2327 46 2330 40 418 91 93 123 2326 125 44 2323 46 2331 46 2332 40 41 44 2323 46 2331 41 59 2333 46 2334 40 2335 46 2336 40 2337 40 2313 46 2338 41 44 2337 40 2313 41 44 2329 46 2339 46 2340 40 41 44 2323 46 2339 46 2340 40 41 41 44 2333 46 2341 60 2342 62 40 40 41 619 2329 46 2324 40 2313 46 2325 41 41 46 2343 41 59 125 91 2001 93 439 492 2344 40 41 123 490 2345 61 2227 40 41 59 2345 46 2346 40 2313 46 2347 41 59 490 2348 61 2345 46 2349 46 2350 40 648 44 478 40 404 41 41 59 490 2351 61 2345 46 2349 46 2352 40 418 91 93 123 2348 125 44 2345 46 2353 46 2354 40 41 44 2345 46 2353 41 59 2355 46 2356 40 2357 46 2358 40 2359 40 2313 46 2360 41 44 2359 40 2313 41 44 2351 46 2361 46 2362 40 41 44 2345 46 2361 46 2362 40 41 41 44 2355 46 2363 60 2364 62 40 40 41 619 2351 46 2346 40 2313 46 2347 41 41 46 2365 41 59 125 91 2001 93 439 492 2366 40 41 123 490 2367 61 2227 40 41 59 2367 46 2368 40 2369 40 2306 46 2370 41 41 59 2371 46 2372 40 2373 46 2374 40 648 44 2369 40 2306 46 2370 41 44 2369 40 2306 41 41 44 2371 46 2375 60 2376 62 40 40 41 619 2367 46 2377 61 473 41 46 2378 41 59 125 91 2001 93 439 492 2379 40 41 123 490 2380 61 2227 40 41 59 2380 46 2381 40 40 461 41 424 41 59 2380 46 2382 61 473 59 2380 46 2383 61 473 59 2384 46 2385 40 2386 46 2387 40 648 44 2388 40 2313 41 41 44 2384 46 2389 60 2390 62 40 40 41 619 2380 46 2382 61 380 41 46 2391 41 59 125 437 2226 2392 40 323 2393 61 380 41 123 490 2394 61 2395 40 41 46 2396 40 478 40 2397 41 41 59 490 2398 61 2394 46 2399 40 2394 46 2400 40 2397 46 2401 41 41 59 490 2402 61 2394 46 2400 40 648 44 478 40 404 41 41 59 490 2403 61 2393 63 2394 46 2404 40 2402 41 58 2398 59 490 2405 61 2394 46 2406 40 418 91 93 123 2398 46 2407 46 2408 40 41 125 44 2403 44 2394 41 59 2405 46 2409 61 473 59 2405 46 2410 40 2397 46 2411 41 59 2405 46 2412 40 2397 46 2413 41 59 450 2405 59 125 437 334 2414 123 439 457 441 2415 2416 61 478 40 2414 41 46 2417 40 648 41 59 439 457 441 2415 2418 61 478 40 2414 41 46 2417 40 2419 40 2420 41 41 59 439 457 441 2415 2421 61 478 40 2414 41 46 2417 40 2419 40 2422 41 41 59 439 457 441 2415 2423 61 478 40 2414 41 46 2417 40 2419 40 2424 41 41 59 439 404 2425 123 2426 59 2427 59 125 439 2414 2422 123 2428 59 2429 59 125 439 2414 2424 123 2430 59 2431 59 125 439 404 63 2420 123 2432 59 2433 59 125 125 91 2001 93 439 492 2434 40 41 123 490 2435 61 2392 40 41 59 2436 46 304 40 2435 46 2437 40 41 41 59 125 91 2001 93 439 492 2438 40 41 123 490 2439 61 2392 40 2393 58 473 41 59 2440 46 304 40 2439 46 2441 40 41 41 59 125 91 2001 93 439 492 2442 40 41 123 490 2443 61 2270 40 41 59 2444 46 302 40 2443 46 2445 40 41 41 59 125 91 2001 93 439 492 2446 40 41 123 490 2447 61 2248 40 41 59 2448 46 302 40 2447 46 2449 40 41 41 59 125 91 2001 93 439 492 2450 40 41 123 490 2451 61 2227 40 41 59 2452 46 302 40 2451 46 2453 40 41 41 59 125 91 2001 93 439 492 2454 40 41 123 490 2455 61 2392 40 41 59 2456 46 304 40 2455 46 2457 40 41 41 59 125 91 2001 93 439 492 2458 40 41 123 490 2459 61 2392 40 2393 58 473 41 59 2460 46 302 40 2459 46 2461 40 41 41 59 125 91 2001 93 439 492 2462 40 41 123 490 2463 61 2270 40 41 59 2464 46 304 40 2463 46 2465 40 41 41 59 125 91 2001 93 439 492 2466 40 41 123 490 2467 61 2248 40 41 59 2468 46 304 40 2467 46 2469 40 41 41 59 125 91 2001 93 439 492 2470 40 41 123 490 2471 61 2227 40 41 59 2472 46 302 40 2471 46 2473 40 41 41 59 125 91 2001 93 439 492 2474 40 41 123 490 2475 61 2476 40 41 46 2477 40 648 41 59 490 2478 61 2475 46 2479 40 648 44 478 40 404 41 41 59 490 2480 61 2475 46 2479 40 648 44 478 40 404 41 41 59 490 2481 61 2475 46 2479 40 648 44 478 40 404 41 41 59 2475 46 2482 40 2478 41 59 490 2483 61 2475 46 2484 40 2481 41 59 490 2485 61 2475 46 2486 40 418 91 93 123 2480 125 44 2483 44 2475 41 59 2487 46 2488 40 2489 46 2490 44 2485 46 2489 41 59 2485 46 2489 61 2489 46 2491 59 2487 46 2488 40 2489 46 2491 44 2485 46 2489 41 59 2485 46 2489 61 2489 46 2492 59 2487 46 2488 40 2489 46 2492 44 2485 46 2489 41 59 2485 46 2489 61 2489 46 2493 59 2487 46 2488 40 2489 46 2493 44 2485 46 2489 41 59 2485 46 2489 61 2489 46 2490 59 2487 46 2488 40 2489 46 2490 44 2485 46 2489 41 59 125 91 2001 93 439 492 2494 40 41 123 490 2495 61 2496 40 41 46 2497 40 648 41 59 490 2498 61 2495 46 2499 40 648 44 478 40 404 41 41 59 490 2500 61 2495 46 2499 40 648 44 478 40 404 41 41 59 490 2501 61 2495 46 2499 40 648 44 478 40 404 41 41 59 2495 46 2502 40 2498 41 59 490 2503 61 2495 46 2504 40 2501 41 59 490 2505 61 2495 46 2506 40 418 91 93 123 2500 125 44 2503 44 2495 41 59 2505 46 2507 40 648 41 59 2508 46 302 40 2505 46 2509 41 59 2505 46 2509 61 473 59 2508 46 304 40 2505 46 2509 41 59 2508 46 2510 40 2511 46 2512 40 648 44 648 44 648 41 44 2508 46 2513 60 2514 62 40 40 41 619 2505 46 2507 40 40 461 41 424 41 41 46 2515 41 59 125 91 2001 93 439 492 2516 40 41 123 490 2517 61 2518 40 41 46 2519 40 648 41 59 490 2520 61 2517 46 2521 40 648 44 478 40 404 41 41 59 490 2522 61 2517 46 2521 40 648 44 478 40 404 41 41 59 490 2523 61 2517 46 2521 40 648 44 478 40 404 41 41 59 2517 46 2524 40 2520 41 59 490 2525 61 2517 46 2526 40 2523 41 59 490 2527 61 2517 46 2528 40 418 91 93 123 2522 125 44 2525 44 2517 41 59 2529 46 302 40 2527 46 2530 41 59 2529 46 2531 40 2532 46 2533 40 648 44 648 41 44 2529 46 2534 60 2535 62 40 40 41 619 2527 46 2530 61 473 41 46 2536 41 59 125 91 2001 93 439 492 2537 40 41 123 490 2538 61 2227 40 41 59 2539 46 2540 40 2538 46 2541 44 2538 46 2542 40 2538 46 2543 41 41 59 2539 46 2540 40 2538 46 2543 44 2538 46 2542 40 2538 46 2541 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2545 125 44 2538 46 2546 40 2538 46 2541 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2547 125 44 2538 46 2546 40 2538 46 2543 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2548 125 44 2538 46 2549 40 2538 46 2541 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2550 125 44 2538 46 2549 40 2538 46 2543 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2551 125 44 2538 46 2552 40 2538 46 2541 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2553 125 44 2538 46 2552 40 2538 46 2543 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2554 125 44 2538 46 2555 40 2538 46 2541 41 41 59 2539 46 2544 40 418 91 93 123 2538 46 2556 125 44 2538 46 2555 40 2538 46 2543 41 41 59 125 91 2001 93 439 492 2557 40 41 123 490 2558 61 2248 40 41 59 490 2559 61 2558 46 2560 46 2561 59 490 2562 61 2559 46 2563 40 478 40 2312 41 41 59 2562 46 2564 61 2558 46 2565 59 490 2566 61 2559 46 2563 40 478 40 2321 41 41 59 2566 46 2564 61 2558 46 2560 59 2567 46 2568 40 2558 46 2565 44 2558 46 2569 40 2558 46 2560 41 41 59 2567 46 2568 40 2558 46 2560 44 2558 46 2569 40 2558 46 2565 41 41 59 2567 46 2568 40 2558 46 2570 44 2558 46 2571 40 2558 46 2565 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2573 44 2558 46 2571 40 2558 46 2560 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2573 44 2558 46 2574 40 2558 46 2565 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2570 44 2558 46 2574 40 2558 46 2560 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2570 44 2558 46 2575 40 2558 46 2565 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2573 44 2558 46 2575 40 2558 46 2560 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2573 44 2558 46 2576 40 2558 46 2565 41 46 2572 40 41 41 59 2567 46 2568 40 2558 46 2570 44 2558 46 2576 40 2558 46 2560 41 46 2572 40 41 41 59 2567 46 2577 40 2578 46 2579 40 2566 46 2580 40 41 44 2558 46 2560 46 2580 40 41 44 2558 46 2565 46 2580 40 41 41 44 2567 46 2581 60 2582 62 40 40 41 619 2558 46 2569 40 2566 41 41 46 2583 41 59 2567 46 2577 40 2578 46 2579 40 2562 46 2580 40 41 44 2558 46 2560 46 2580 40 41 44 2558 46 2565 46 2580 40 41 41 44 2567 46 2581 60 2582 62 40 40 41 619 2558 46 2569 40 2562 41 41 46 2583 41 59 2567 46 2577 40 2578 46 2579 40 2562 46 2580 40 41 44 2558 46 2560 46 2580 40 41 44 2558 46 2565 46 2580 40 41 41 44 2567 46 2581 60 2582 62 40 40 41 619 2558 46 2571 40 2562 41 41 46 2583 41 59 2567 46 2577 40 2578 46 2579 40 2566 46 2580 40 41 44 2558 46 2560 46 2580 40 41 44 2558 46 2565 46 2580 40 41 41 44 2567 46 2581 60 2582 62 40 40 41 619 2558 46 2571 40 2566 41 41 46 2583 41 59 2567 46 2577 40 2578 46 2579 40 2562 46 2580 40 41 44 2558 46 2560 46 2580 40 41 44 2558 46 2565 46 2580 40 41 41 44 2567 46 2581 60 2582 62 40 40 41 619 2558 46 2574 40 2562 41 41 46 2583 41 59 2567 46 2577 40 2578 46 2579 40 2566 46 2580 40 41 44 2558 46 2560 46 2580 40 41 44 2558 46 2565 46 2580 40 41 41 44 2567 46 2581 60 2582 62 40 40 41 619 2558 46 2574 40 2566 41 41 46 2583 41 59 2567 46 2577 40 418 91 93 123 2558 46 2570 125 46 2584 40 2585 619 2585 631 424 41 44 2558 46 2575 40 2562 41 41 59 2567 46 2577 40 418 91 93 123 2558 46 2573 125 46 2584 40 2585 619 2585 631 424 41 44 2558 46 2575 40 2566 41 41 59 2567 46 2577 40 418 91 93 123 2558 46 2573 125 46 2584 40 2585 619 2585 631 424 41 44 2558 46 2576 40 2562 41 41 59 2567 46 2577 40 418 91 93 123 2558 46 2570 125 46 2584 40 2585 619 2585 631 424 41 44 2558 46 2576 40 2566 41 41 59 125 91 2001 93 439 492 2586 40 41 123 490 2587 61 2392 40 41 59 2588 46 2589 40 2587 46 2590 44 2587 46 2591 40 2587 46 2592 41 41 59 2588 46 2589 40 2587 46 2592 44 2587 46 2591 40 2587 46 2590 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2594 44 2587 46 2595 125 44 2587 46 2596 40 2587 46 2590 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2598 44 2587 46 2599 125 44 2587 46 2596 40 2587 46 2592 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2600 44 2587 46 2601 125 44 2587 46 2602 40 2587 46 2590 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2603 44 2587 46 2604 125 44 2587 46 2602 40 2587 46 2592 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2605 44 2587 46 2606 125 44 2587 46 2607 40 2587 46 2590 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2608 44 2587 46 2609 125 44 2587 46 2607 40 2587 46 2592 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2610 44 2587 46 2611 125 44 2587 46 2612 40 2587 46 2590 41 46 2597 40 41 41 59 2588 46 2593 40 418 91 93 123 2587 46 2613 44 2587 46 2614 125 44 2587 46 2612 40 2587 46 2592 41 46 2597 40 41 41 59 125 91 2001 93 439 492 2615 40 41 123 490 2616 61 2270 40 41 59 2617 46 2618 40 2616 46 2619 44 2616 46 2620 40 2616 46 2621 41 41 59 2617 46 2618 40 2616 46 2621 44 2616 46 2620 40 2616 46 2619 41 41 59 2617 46 2618 40 2616 46 2622 44 2616 46 2623 40 2616 46 2619 41 46 2624 40 41 41 59 2617 46 2618 40 2616 46 2625 44 2616 46 2623 40 2616 46 2621 41 46 2624 40 41 41 59 2617 46 2618 40 2616 46 2625 44 2616 46 2626 40 2616 46 2619 41 46 2624 40 41 41 59 2617 46 2618 40 2616 46 2622 44 2616 46 2626 40 2616 46 2621 41 46 2624 40 41 41 59 2617 46 2627 40 418 91 93 123 2616 46 2622 44 2616 46 2625 125 46 2628 40 2629 619 2629 631 424 41 44 2616 46 2630 40 2616 46 2619 41 41 59 2617 46 2627 40 418 91 93 123 2616 46 2622 44 2616 46 2625 125 46 2628 40 2629 619 2629 631 424 41 44 2616 46 2630 40 2616 46 2621 41 41 59 2617 46 2627 40 418 91 93 123 2616 46 2622 44 2616 46 2625 125 46 2628 40 2629 619 2629 631 424 41 44 2616 46 2631 40 2616 46 2619 41 41 59 2617 46 2627 40 418 91 93 123 2616 46 2622 44 2616 46 2625 125 46 2628 40 2629 619 2629 631 424 41 44 2616 46 2631 40 2616 46 2621 41 41 59 125 91 2001 93 439 492 2632 40 41 123 490 2633 61 2227 40 41 59 490 2634 61 2633 46 2635 46 2636 46 2637 40 478 40 2288 41 41 59 2638 46 2639 40 2640 46 2641 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2646 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2641 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2646 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2641 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2648 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2641 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2648 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2641 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2649 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2641 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2649 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2650 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2651 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2650 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2651 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2650 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2652 40 2634 41 41 46 2647 41 59 2638 46 2639 40 2640 46 2650 40 2634 46 2642 40 41 44 2633 46 2635 46 2642 40 41 44 2633 46 2643 46 2642 40 41 41 44 2638 46 2644 60 2645 62 40 40 41 619 2633 46 2652 40 2634 41 41 46 2647 41 59 125 437 457 2653 2654 40 41 619 418 2655 40 41 59 125 
72581,C#,"public class ConvertToProviderTypesSqlServerTest : ConvertToProviderTypesTestBase<
    ConvertToProviderTypesSqlServerTest.ConvertToProviderTypesSqlServerFixture>
{
    public ConvertToProviderTypesSqlServerTest(ConvertToProviderTypesSqlServerFixture fixture)
        : base(fixture)
    {
    }

    [ConditionalFact]
    public virtual void Columns_have_expected_data_types()
    {
        var actual = BuiltInDataTypesSqlServerTest.QueryForColumnTypes(
            CreateContext(),
            nameof(ObjectBackedDataTypes), nameof(NullableBackedDataTypes), nameof(NonNullableBackedDataTypes));

        const string expected = @""Animal.Id ---> [int] [Precision = 10 Scale = 0]
AnimalDetails.AnimalId ---> [nullable int] [Precision = 10 Scale = 0]
AnimalDetails.BoolField ---> [int] [Precision = 10 Scale = 0]
AnimalDetails.Id ---> [int] [Precision = 10 Scale = 0]
AnimalIdentification.AnimalId ---> [int] [Precision = 10 Scale = 0]
AnimalIdentification.Id ---> [int] [Precision = 10 Scale = 0]
AnimalIdentification.Method ---> [nvarchar] [MaxLength = 6]
BinaryForeignKeyDataType.BinaryKeyDataTypeId ---> [nullable nvarchar] [MaxLength = 450]
BinaryForeignKeyDataType.Id ---> [int] [Precision = 10 Scale = 0]
BinaryKeyDataType.Ex ---> [nullable nvarchar] [MaxLength = -1]
BinaryKeyDataType.Id ---> [nvarchar] [MaxLength = 450]
BuiltInDataTypes.Enum16 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.Enum32 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.Enum64 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.Enum8 ---> [nchar] [MaxLength = 17]
BuiltInDataTypes.EnumS8 ---> [varchar] [MaxLength = -1]
BuiltInDataTypes.EnumU16 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.EnumU32 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.EnumU64 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.Id ---> [int] [Precision = 10 Scale = 0]
BuiltInDataTypes.PartitionId ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestBoolean ---> [nvarchar] [MaxLength = 1]
BuiltInDataTypes.TestByte ---> [int] [Precision = 10 Scale = 0]
BuiltInDataTypes.TestCharacter ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestDateTime ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestDateTimeOffset ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestDecimal ---> [varbinary] [MaxLength = 16]
BuiltInDataTypes.TestDouble ---> [decimal] [Precision = 38 Scale = 17]
BuiltInDataTypes.TestInt16 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestInt32 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestInt64 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestSignedByte ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestSingle ---> [decimal] [Precision = 38 Scale = 17]
BuiltInDataTypes.TestTimeSpan ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypes.TestUnsignedInt16 ---> [decimal] [Precision = 20 Scale = 0]
BuiltInDataTypes.TestUnsignedInt32 ---> [decimal] [Precision = 20 Scale = 0]
BuiltInDataTypes.TestUnsignedInt64 ---> [decimal] [Precision = 20 Scale = 0]
BuiltInDataTypesShadow.Enum16 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.Enum32 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.Enum64 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.Enum8 ---> [nvarchar] [MaxLength = -1]
BuiltInDataTypesShadow.EnumS8 ---> [nvarchar] [MaxLength = -1]
BuiltInDataTypesShadow.EnumU16 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.EnumU32 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.EnumU64 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.Id ---> [int] [Precision = 10 Scale = 0]
BuiltInDataTypesShadow.PartitionId ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestBoolean ---> [nvarchar] [MaxLength = 1]
BuiltInDataTypesShadow.TestByte ---> [int] [Precision = 10 Scale = 0]
BuiltInDataTypesShadow.TestCharacter ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestDateTime ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestDateTimeOffset ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestDecimal ---> [varbinary] [MaxLength = 16]
BuiltInDataTypesShadow.TestDouble ---> [decimal] [Precision = 38 Scale = 17]
BuiltInDataTypesShadow.TestInt16 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestInt32 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestInt64 ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestSignedByte ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestSingle ---> [decimal] [Precision = 38 Scale = 17]
BuiltInDataTypesShadow.TestTimeSpan ---> [bigint] [Precision = 19 Scale = 0]
BuiltInDataTypesShadow.TestUnsignedInt16 ---> [decimal] [Precision = 20 Scale = 0]
BuiltInDataTypesShadow.TestUnsignedInt32 ---> [decimal] [Precision = 20 Scale = 0]
BuiltInDataTypesShadow.TestUnsignedInt64 ---> [decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypes.Enum16 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.Enum32 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.Enum64 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.Enum8 ---> [nullable nvarchar] [MaxLength = -1]
BuiltInNullableDataTypes.EnumS8 ---> [nullable nvarchar] [MaxLength = -1]
BuiltInNullableDataTypes.EnumU16 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.EnumU32 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.EnumU64 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.Id ---> [int] [Precision = 10 Scale = 0]
BuiltInNullableDataTypes.PartitionId ---> [bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestByteArray ---> [nullable varbinary] [MaxLength = -1]
BuiltInNullableDataTypes.TestNullableBoolean ---> [nullable nvarchar] [MaxLength = 1]
BuiltInNullableDataTypes.TestNullableByte ---> [nullable int] [Precision = 10 Scale = 0]
BuiltInNullableDataTypes.TestNullableCharacter ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableDateTime ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableDateTimeOffset ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableDecimal ---> [nullable varbinary] [MaxLength = 16]
BuiltInNullableDataTypes.TestNullableDouble ---> [nullable decimal] [Precision = 38 Scale = 17]
BuiltInNullableDataTypes.TestNullableInt16 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableInt32 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableInt64 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableSignedByte ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableSingle ---> [nullable decimal] [Precision = 38 Scale = 17]
BuiltInNullableDataTypes.TestNullableTimeSpan ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypes.TestNullableUnsignedInt16 ---> [nullable decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypes.TestNullableUnsignedInt32 ---> [nullable decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypes.TestNullableUnsignedInt64 ---> [nullable decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypes.TestString ---> [nullable nvarchar] [MaxLength = -1]
BuiltInNullableDataTypesShadow.Enum16 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.Enum32 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.Enum64 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.Enum8 ---> [nullable nvarchar] [MaxLength = -1]
BuiltInNullableDataTypesShadow.EnumS8 ---> [nullable nvarchar] [MaxLength = -1]
BuiltInNullableDataTypesShadow.EnumU16 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.EnumU32 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.EnumU64 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.Id ---> [int] [Precision = 10 Scale = 0]
BuiltInNullableDataTypesShadow.PartitionId ---> [bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestByteArray ---> [nullable varbinary] [MaxLength = -1]
BuiltInNullableDataTypesShadow.TestNullableBoolean ---> [nullable nvarchar] [MaxLength = 1]
BuiltInNullableDataTypesShadow.TestNullableByte ---> [nullable int] [Precision = 10 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableCharacter ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableDateTime ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableDateTimeOffset ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableDecimal ---> [nullable varbinary] [MaxLength = 16]
BuiltInNullableDataTypesShadow.TestNullableDouble ---> [nullable decimal] [Precision = 38 Scale = 17]
BuiltInNullableDataTypesShadow.TestNullableInt16 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableInt32 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableInt64 ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableSignedByte ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableSingle ---> [nullable decimal] [Precision = 38 Scale = 17]
BuiltInNullableDataTypesShadow.TestNullableTimeSpan ---> [nullable bigint] [Precision = 19 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableUnsignedInt16 ---> [nullable decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableUnsignedInt32 ---> [nullable decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypesShadow.TestNullableUnsignedInt64 ---> [nullable decimal] [Precision = 20 Scale = 0]
BuiltInNullableDataTypesShadow.TestString ---> [nullable nvarchar] [MaxLength = -1]
DateTimeEnclosure.DateTimeOffset ---> [nullable datetimeoffset] [Precision = 7]
DateTimeEnclosure.Id ---> [int] [Precision = 10 Scale = 0]
EmailTemplate.Id ---> [uniqueidentifier]
EmailTemplate.TemplateType ---> [int] [Precision = 10 Scale = 0]
MaxLengthDataTypes.ByteArray5 ---> [nullable nvarchar] [MaxLength = 8]
MaxLengthDataTypes.ByteArray9000 ---> [nullable nvarchar] [MaxLength = -1]
MaxLengthDataTypes.Id ---> [int] [Precision = 10 Scale = 0]
MaxLengthDataTypes.String3 ---> [nullable varbinary] [MaxLength = 3]
MaxLengthDataTypes.String9000 ---> [nullable varbinary] [MaxLength = -1]
StringEnclosure.Id ---> [int] [Precision = 10 Scale = 0]
StringEnclosure.Value ---> [nullable nvarchar] [MaxLength = -1]
StringForeignKeyDataType.Id ---> [int] [Precision = 10 Scale = 0]
StringForeignKeyDataType.StringKeyDataTypeId ---> [nullable varbinary] [MaxLength = 900]
StringKeyDataType.Id ---> [varbinary] [MaxLength = 900]
UnicodeDataTypes.Id ---> [int] [Precision = 10 Scale = 0]
UnicodeDataTypes.StringAnsi ---> [nullable varchar] [MaxLength = -1]
UnicodeDataTypes.StringAnsi3 ---> [nullable varchar] [MaxLength = 3]
UnicodeDataTypes.StringAnsi9000 ---> [nullable varchar] [MaxLength = -1]
UnicodeDataTypes.StringDefault ---> [nullable nvarchar] [MaxLength = -1]
UnicodeDataTypes.StringUnicode ---> [nullable nvarchar] [MaxLength = -1]
"";

        Assert.Equal(expected, actual, ignoreLineEndingDifferences: true);
    }

    public override void Object_to_string_conversion()
    {
        // Return values are not string
    }

    public class ConvertToProviderTypesSqlServerFixture : ConvertToProviderTypesFixtureBase
    {
        public override bool StrictEquality
            => true;

        public override bool SupportsAnsi
            => true;

        public override bool SupportsUnicodeToAnsiConversion
            => true;

        public override bool SupportsLargeStringComparisons
            => true;

        protected override ITestStoreFactory TestStoreFactory
            => SqlServerTestStoreFactory.Instance;

        public override bool SupportsBinaryKeys
            => true;

        public override bool SupportsDecimalComparisons
            => true;

        public override DateTime DefaultDateTime
            => new();

        public override bool PreservesDateTimeKind
            => false;

        public override DbContextOptionsBuilder AddOptions(DbContextOptionsBuilder builder)
            => base
                .AddOptions(builder)
                .ConfigureWarnings(
                    c => c.Log(SqlServerEventId.DecimalTypeDefaultWarning));

        protected override void OnModelCreating(ModelBuilder modelBuilder, DbContext context)
        {
            base.OnModelCreating(modelBuilder, context);

            modelBuilder.Entity<BuiltInDataTypes>().Property(e => e.Enum8).IsFixedLength();
        }
    }
}",1,439 334 2000 58 2001 60 2000 46 2002 62 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 125 91 2004 93 439 491 492 2005 40 41 123 490 2006 61 2007 46 2008 40 2009 40 41 44 2010 40 2011 41 44 2010 40 2012 41 44 2010 40 2013 41 41 59 341 461 2014 61 64 648 59 2015 46 2016 40 2014 44 2006 44 2017 58 473 41 59 125 439 431 492 2018 40 41 123 621 125 439 334 2002 58 2019 123 439 431 323 2020 619 473 59 439 431 323 2021 619 473 59 439 431 323 2022 619 473 59 439 431 323 2023 619 473 59 438 431 2024 2025 619 2026 46 2027 59 439 431 323 2028 619 473 59 439 431 323 2029 619 473 59 439 431 2030 2031 619 418 40 41 59 439 431 323 2032 619 380 59 439 431 2033 2034 40 2033 2035 41 619 320 46 2034 40 2035 41 46 2036 40 2037 619 2037 46 2038 40 2039 46 2040 41 41 59 438 431 492 2041 40 2042 2043 44 2044 2045 41 123 320 46 2041 40 2043 44 2045 41 59 2043 46 2046 60 2047 62 40 41 46 2048 40 2049 619 2049 46 2050 41 46 2051 40 41 59 125 125 125 
72803,C#,"public class ReaderModificationCommandBatchTest
{
    [ConditionalFact]
    public void AddCommand_adds_command_if_possible()
    {
        var command = CreateModificationCommand(""T1"", null, true, columnModifications: null);

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);
        batch.ShouldAddCommand = true;
        batch.ShouldValidateSql = true;

        batch.AddCommand(command);

        Assert.Equal(2, batch.ModificationCommands.Count);
        Assert.Same(command, batch.ModificationCommands[0]);
        Assert.Equal("".."", batch.CommandText);
    }

    [ConditionalFact]
    public void AddCommand_does_not_add_command_if_not_possible()
    {
        var command = CreateModificationCommand(""T1"", null, true, columnModifications: null);

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);
        batch.ShouldAddCommand = false;
        batch.ShouldValidateSql = true;

        batch.AddCommand(command);

        Assert.Equal(1, batch.ModificationCommands.Count);
        Assert.Equal(""."", batch.CommandText);
    }

    [ConditionalFact]
    public void AddCommand_does_not_add_command_if_resulting_sql_is_invalid()
    {
        var command = CreateModificationCommand(""T1"", null, true, columnModifications: null);

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);
        batch.ShouldAddCommand = true;
        batch.ShouldValidateSql = false;

        batch.AddCommand(command);

        Assert.Equal(1, batch.ModificationCommands.Count);
        Assert.Equal(""."", batch.CommandText);
    }

    [ConditionalFact]
    public void UpdateCommandText_compiles_inserts()
    {
        var entry = CreateEntry(EntityState.Added);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var fakeSqlGenerator = new FakeSqlGenerator(
            RelationalTestHelpers.Instance.CreateContextServices().GetRequiredService<UpdateSqlGeneratorDependencies>());
        var batch = new ModificationCommandBatchFake(fakeSqlGenerator);
        batch.AddCommand(command);

        batch.UpdateCachedCommandTextBase(0);

        Assert.Equal(1, fakeSqlGenerator.AppendBatchHeaderCalls);
        Assert.Equal(1, fakeSqlGenerator.AppendInsertOperationCalls);
    }

    [ConditionalFact]
    public void UpdateCommandText_compiles_updates()
    {
        var entry = CreateEntry(EntityState.Modified, generateKeyValues: true);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var fakeSqlGenerator = new FakeSqlGenerator(
            RelationalTestHelpers.Instance.CreateContextServices().GetRequiredService<UpdateSqlGeneratorDependencies>());
        var batch = new ModificationCommandBatchFake(fakeSqlGenerator);
        batch.AddCommand(command);

        batch.UpdateCachedCommandTextBase(0);

        Assert.Equal(1, fakeSqlGenerator.AppendBatchHeaderCalls);
        Assert.Equal(1, fakeSqlGenerator.AppendUpdateOperationCalls);
    }

    [ConditionalFact]
    public void UpdateCommandText_compiles_deletes()
    {
        var entry = CreateEntry(EntityState.Deleted);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var fakeSqlGenerator = new FakeSqlGenerator(
            RelationalTestHelpers.Instance.CreateContextServices().GetRequiredService<UpdateSqlGeneratorDependencies>());
        var batch = new ModificationCommandBatchFake(fakeSqlGenerator);
        batch.AddCommand(command);

        batch.UpdateCachedCommandTextBase(0);

        Assert.Equal(1, fakeSqlGenerator.AppendBatchHeaderCalls);
        Assert.Equal(1, fakeSqlGenerator.AppendDeleteOperationCalls);
    }

    [ConditionalFact]
    public void UpdateCommandText_compiles_multiple_commands()
    {
        var entry = CreateEntry(EntityState.Added);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var fakeSqlGenerator = new FakeSqlGenerator(
            RelationalTestHelpers.Instance.CreateContextServices().GetRequiredService<UpdateSqlGeneratorDependencies>());
        var batch = new ModificationCommandBatchFake(fakeSqlGenerator);
        batch.AddCommand(command);
        batch.AddCommand(command);

        Assert.Equal("".."", batch.CommandText);

        Assert.Equal(1, fakeSqlGenerator.AppendBatchHeaderCalls);
    }

    [ConditionalFact]
    public async Task ExecuteAsync_executes_batch_commands_and_consumes_reader()
    {
        var entry = CreateEntry(EntityState.Added);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var dbDataReader = CreateFakeDataReader();

        var connection = CreateConnection(dbDataReader);

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        await batch.ExecuteAsync(connection);

        Assert.Equal(1, dbDataReader.ReadAsyncCount);
        Assert.Equal(1, dbDataReader.GetInt32Count);
    }

    [ConditionalFact]
    public async Task ExecuteAsync_saves_store_generated_values()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        entry.SetTemporaryValue(entry.EntityType.FindPrimaryKey().Properties[0], -1);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var connection = CreateConnection(
            CreateFakeDataReader(
                new[] { ""Col1"" }, new List<object[]> { new object[] { 42 } }));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        await batch.ExecuteAsync(connection);

        Assert.Equal(42, entry[entry.EntityType.FindProperty(""Id"")]);
        Assert.Equal(""Test"", entry[entry.EntityType.FindProperty(""Name"")]);
    }

    [ConditionalFact]
    public async Task ExecuteAsync_saves_store_generated_values_on_non_key_columns()
    {
        var entry = CreateEntry(
            EntityState.Added, generateKeyValues: true, computeNonKeyValue: true);
        entry.SetTemporaryValue(entry.EntityType.FindPrimaryKey().Properties[0], -1);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var connection = CreateConnection(
            CreateFakeDataReader(
                new[] { ""Col1"", ""Col2"" }, new List<object[]> { new object[] { 42, ""FortyTwo"" } }));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        await batch.ExecuteAsync(connection);

        Assert.Equal(42, entry[entry.EntityType.FindProperty(""Id"")]);
        Assert.Equal(""FortyTwo"", entry[entry.EntityType.FindProperty(""Name"")]);
    }

    [ConditionalFact]
    public async Task ExecuteAsync_saves_store_generated_values_when_updating()
    {
        var entry = CreateEntry(
            EntityState.Modified, generateKeyValues: true, computeNonKeyValue: true);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var connection = CreateConnection(
            CreateFakeDataReader(
                new[] { ""Col2"" }, new List<object[]> { new object[] { ""FortyTwo"" } }));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        await batch.ExecuteAsync(connection);

        Assert.Equal(1, entry[entry.EntityType.FindProperty(""Id"")]);
        Assert.Equal(""FortyTwo"", entry[entry.EntityType.FindProperty(""Name"")]);
    }

    [ConditionalFact]
    public async Task Exception_not_thrown_for_more_than_one_row_returned_for_single_command()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        entry.SetTemporaryValue(entry.EntityType.FindPrimaryKey().Properties[0], -1);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var connection = CreateConnection(
            CreateFakeDataReader(
                new[] { ""Col1"" },
                new List<object[]> { new object[] { 42 }, new object[] { 43 } }));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        await batch.ExecuteAsync(connection);

        Assert.Equal(42, entry[entry.EntityType.FindProperty(""Id"")]);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task Exception_thrown_if_rows_returned_for_command_without_store_generated_values_is_not_1(bool async)
    {
        var entry = CreateEntry(EntityState.Added);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var connection = CreateConnection(
            CreateFakeDataReader(
                new[] { ""Col1"" }, new List<object[]> { new object[] { 42 } }));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        var exception = async
            ? await Assert.ThrowsAsync<DbUpdateConcurrencyException>(() => batch.ExecuteAsync(connection))
            : Assert.Throws<DbUpdateConcurrencyException>(() => batch.Execute(connection));

        Assert.Equal(RelationalStrings.UpdateConcurrencyException(1, 42), exception.Message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task Exception_thrown_if_no_rows_returned_for_command_with_store_generated_values(bool async)
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        entry.SetTemporaryValue(entry.EntityType.FindPrimaryKey().Properties[0], -1);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var connection = CreateConnection(
            CreateFakeDataReader(new[] { ""Col1"" }, new List<object[]>()));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        var exception = async
            ? await Assert.ThrowsAsync<DbUpdateConcurrencyException>(() => batch.ExecuteAsync(connection))
            : Assert.Throws<DbUpdateConcurrencyException>(() => batch.Execute(connection));

        Assert.Equal(RelationalStrings.UpdateConcurrencyException(1, 0), exception.Message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task DbException_is_wrapped_with_DbUpdateException(bool async)
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var originalException = new FakeDbException();

        var connection = CreateConnection(
            new FakeCommandExecutor(
                executeReaderAsync: (c, b, ct) => throw originalException,
                executeReader: (c, b) => throw originalException));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        var actualException = async
            ? await Assert.ThrowsAsync<DbUpdateException>(() => batch.ExecuteAsync(connection))
            : Assert.Throws<DbUpdateException>(() => batch.Execute(connection));

        Assert.Same(originalException, actualException.InnerException);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task OperationCanceledException_is_not_wrapped_with_DbUpdateException(bool async)
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);

        var command = CreateModificationCommand(""T1"", null, new ParameterNameGenerator().GenerateNext, true, null);
        command.AddEntry(entry, true);

        var originalException = new OperationCanceledException();

        var connection = CreateConnection(
            new FakeCommandExecutor(
                executeReaderAsync: (c, b, ct) => throw originalException,
                executeReader: (c, b) => throw originalException));

        var batch = new ModificationCommandBatchFake();
        batch.AddCommand(command);

        var actualException = async
            ? await Assert.ThrowsAsync<OperationCanceledException>(() => batch.ExecuteAsync(connection))
            : Assert.Throws<OperationCanceledException>(() => batch.Execute(connection));

        Assert.Same(originalException, actualException);
    }

    [ConditionalFact]
    public void CreateStoreCommand_creates_parameters_for_each_ModificationCommand()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        var property = entry.EntityType.FindProperty(""Id"");
        entry.SetTemporaryValue(property, 1);

        var batch = new ModificationCommandBatchFake();
        var parameterNameGenerator = new ParameterNameGenerator();

        batch.AddCommand(
            CreateModificationCommand(
                ""T1"",
                null,
                true,
                new[]
                {
                    new ColumnModificationParameters(
                        entry,
                        property,
                        property.GetTableColumnMappings().Single().Column,
                        parameterNameGenerator.GenerateNext,
                        property.GetTableColumnMappings().Single().TypeMapping,
                        false, true, false, false, true)
                }));

        batch.AddCommand(
            CreateModificationCommand(
                ""T1"",
                null,
                true,
                new[]
                {
                    new ColumnModificationParameters(
                        entry,
                        property,
                        property.GetTableColumnMappings().Single().Column,
                        parameterNameGenerator.GenerateNext,
                        property.GetTableColumnMappings().Single().TypeMapping,
                        false, true, false, false, true)
                }));

        var storeCommand = batch.CreateStoreCommandBase();

        Assert.Equal(2, storeCommand.RelationalCommand.Parameters.Count);
        Assert.Equal(""p0"", storeCommand.RelationalCommand.Parameters[0].InvariantName);
        Assert.Equal(""p1"", storeCommand.RelationalCommand.Parameters[1].InvariantName);

        Assert.Equal(2, storeCommand.ParameterValues.Count);
        Assert.Equal(1, storeCommand.ParameterValues[""p0""]);
        Assert.Equal(1, storeCommand.ParameterValues[""p1""]);
    }

    [ConditionalFact]
    public void PopulateParameters_creates_parameter_for_write_ModificationCommand()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        var property = entry.EntityType.FindProperty(""Id"");
        entry.SetTemporaryValue(property, 1);

        var batch = new ModificationCommandBatchFake();
        var parameterNameGenerator = new ParameterNameGenerator();
        batch.AddCommand(
            CreateModificationCommand(
                ""T1"",
                null,
                true,
                new[]
                {
                    new ColumnModificationParameters(
                        entry,
                        property,
                        property.GetTableColumnMappings().Single().Column,
                        parameterNameGenerator.GenerateNext,
                        property.GetTableColumnMappings().Single().TypeMapping,
                        valueIsRead: false, valueIsWrite: true, columnIsKey: false, columnIsCondition: false,
                        sensitiveLoggingEnabled: true)
                }));

        var storeCommand = batch.CreateStoreCommandBase();

        Assert.Equal(1, storeCommand.RelationalCommand.Parameters.Count);
        Assert.Equal(""p0"", storeCommand.RelationalCommand.Parameters[0].InvariantName);

        Assert.Equal(1, storeCommand.ParameterValues.Count);
        Assert.Equal(1, storeCommand.ParameterValues[""p0""]);
    }

    [ConditionalFact]
    public void PopulateParameters_creates_parameter_for_condition_ModificationCommand()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        var property = entry.EntityType.FindProperty(""Id"");
        entry.SetTemporaryValue(property, 1);

        var batch = new ModificationCommandBatchFake();
        var parameterNameGenerator = new ParameterNameGenerator();
        batch.AddCommand(
            CreateModificationCommand(
                ""T1"",
                null,
                true,
                new[]
                {
                    new ColumnModificationParameters(
                        entry,
                        property,
                        property.GetTableColumnMappings().Single().Column,
                        parameterNameGenerator.GenerateNext,
                        property.GetTableColumnMappings().Single().TypeMapping,
                        valueIsRead: false, valueIsWrite: false, columnIsKey: false, columnIsCondition: true,
                        sensitiveLoggingEnabled: true)
                }));

        var storeCommand = batch.CreateStoreCommandBase();

        Assert.Equal(1, storeCommand.RelationalCommand.Parameters.Count);
        Assert.Equal(""p0"", storeCommand.RelationalCommand.Parameters[0].InvariantName);

        Assert.Equal(1, storeCommand.ParameterValues.Count);
        Assert.Equal(1, storeCommand.ParameterValues[""p0""]);
    }

    [ConditionalFact]
    public void PopulateParameters_creates_parameters_for_write_and_condition_ModificationCommand()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        var property = entry.EntityType.FindProperty(""Id"");
        entry.SetTemporaryValue(property, 1);

        var batch = new ModificationCommandBatchFake();
        var parameterNameGenerator = new ParameterNameGenerator();
        batch.AddCommand(
            CreateModificationCommand(
                ""T1"",
                null,
                true,
                new[]
                {
                    new ColumnModificationParameters(
                        entry,
                        property,
                        property.GetTableColumnMappings().Single().Column,
                        parameterNameGenerator.GenerateNext,
                        property.GetTableColumnMappings().Single().TypeMapping,
                        valueIsRead: false, valueIsWrite: true, columnIsKey: false, columnIsCondition: true,
                        sensitiveLoggingEnabled: true)
                }));

        var storeCommand = batch.CreateStoreCommandBase();

        Assert.Equal(2, storeCommand.RelationalCommand.Parameters.Count);
        Assert.Equal(""p0"", storeCommand.RelationalCommand.Parameters[0].InvariantName);
        Assert.Equal(""p1"", storeCommand.RelationalCommand.Parameters[1].InvariantName);

        Assert.Equal(2, storeCommand.ParameterValues.Count);
        Assert.Equal(1, storeCommand.ParameterValues[""p0""]);
        Assert.Equal(1, storeCommand.ParameterValues[""p1""]);
    }

    [ConditionalFact]
    public void PopulateParameters_does_not_create_parameter_for_read_ModificationCommand()
    {
        var entry = CreateEntry(EntityState.Added, generateKeyValues: true);
        var property = entry.EntityType.FindProperty(""Id"");
        entry.SetTemporaryValue(property, -1);

        var batch = new ModificationCommandBatchFake();
        var parameterNameGenerator = new ParameterNameGenerator();
        batch.AddCommand(
            CreateModificationCommand(
                ""T1"",
                null,
                true,
                new[]
                {
                    new ColumnModificationParameters(
                        entry,
                        property,
                        property.GetTableColumnMappings().Single().Column,
                        parameterNameGenerator.GenerateNext,
                        property.GetTableColumnMappings().Single().TypeMapping,
                        valueIsRead: true, valueIsWrite: false, columnIsKey: false, columnIsCondition: false,
                        sensitiveLoggingEnabled: true)
                }));

        var storeCommand = batch.CreateStoreCommandBase();

        Assert.Equal(0, storeCommand.RelationalCommand.Parameters.Count);
    }

    private class T1
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    private static IModel BuildModel(bool generateKeyValues, bool computeNonKeyValue)
    {
        var modelBuilder = RelationalTestHelpers.Instance.CreateConventionBuilder();
        var entityType = modelBuilder.Entity<T1>();

        entityType.Property(t => t.Id).HasColumnName(""Col1"");
        if (!generateKeyValues)
        {
            entityType.Property(t => t.Id).ValueGeneratedNever();
        }

        entityType.Property(t => t.Name).HasColumnName(""Col2"");
        if (computeNonKeyValue)
        {
            entityType.Property(t => t.Name).ValueGeneratedOnAddOrUpdate();
        }

        return modelBuilder.FinalizeModel();
    }

    private static InternalEntityEntry CreateEntry(
        EntityState entityState,
        bool generateKeyValues = false,
        bool computeNonKeyValue = false)
    {
        var model = BuildModel(generateKeyValues, computeNonKeyValue);

        return RelationalTestHelpers.Instance.CreateInternalEntry(
            model, entityState, new T1 { Id = 1, Name = computeNonKeyValue ? null : ""Test"" });
    }

    private static FakeDbDataReader CreateFakeDataReader(string[] columnNames = null, IList<object[]> results = null)
    {
        results ??= new List<object[]> { new object[] { 1 } };
        columnNames ??= new[] { ""RowsAffected"" };

        return new FakeDbDataReader(columnNames, results);
    }

    private class ModificationCommandBatchFake : AffectedCountModificationCommandBatch
    {
        public ModificationCommandBatchFake(
            IUpdateSqlGenerator sqlGenerator = null)
            : base(CreateDependencies(sqlGenerator))
        {
            ShouldAddCommand = true;
            ShouldValidateSql = true;
        }

        private static ModificationCommandBatchFactoryDependencies CreateDependencies(
            IUpdateSqlGenerator sqlGenerator)
        {
            var typeMappingSource = new TestRelationalTypeMappingSource(
                TestServiceFactory.Instance.Create<TypeMappingSourceDependencies>(),
                TestServiceFactory.Instance.Create<RelationalTypeMappingSourceDependencies>());

            var logger = new FakeRelationalCommandDiagnosticsLogger();

            return new ModificationCommandBatchFactoryDependencies(
                new RelationalCommandBuilderFactory(
                    new RelationalCommandBuilderDependencies(
                        typeMappingSource,
                        new ExceptionDetector())),
                new RelationalSqlGenerationHelper(
                    new RelationalSqlGenerationHelperDependencies()),
                sqlGenerator
                ?? new FakeSqlGenerator(
                    RelationalTestHelpers.Instance.CreateContextServices()
                        .GetRequiredService<UpdateSqlGeneratorDependencies>()),
                new TypedRelationalValueBufferFactoryFactory(
                    new RelationalValueBufferFactoryDependencies(
                        typeMappingSource,
                        new CoreSingletonOptions())),
                new CurrentDbContext(new FakeDbContext()),
                logger);
        }

        public string CommandText
            => GetCommandText();

        public bool ShouldAddCommand { get; set; }

        protected override bool CanAddCommand(IReadOnlyModificationCommand modificationCommand)
            => ShouldAddCommand;

        public bool ShouldValidateSql { get; set; }

        protected override bool IsCommandTextValid()
            => ShouldValidateSql;

        protected override void UpdateCachedCommandText(int commandIndex)
            => CachedCommandText.Append(""."");

        public void UpdateCachedCommandTextBase(int commandIndex)
            => base.UpdateCachedCommandText(commandIndex);

        public RawSqlCommand CreateStoreCommandBase()
            => CreateStoreCommand();
    }

    private class FakeDbContext : DbContext
    {
    }

    private const string ConnectionString = ""Fake Connection String"";

    private static FakeRelationalConnection CreateConnection(FakeCommandExecutor executor)
        => CreateConnection(
            CreateOptions(
                new FakeRelationalOptionsExtension().WithConnection(
                    new FakeDbConnection(ConnectionString, executor))));

    private static FakeRelationalConnection CreateConnection(DbDataReader dbDataReader)
        => CreateConnection(
            new FakeCommandExecutor(
                executeReaderAsync: (c, b, ct) => Task.FromResult(dbDataReader),
                executeReader: (c, b) => dbDataReader));

    private static FakeRelationalConnection CreateConnection(IDbContextOptions options = null)
        => new(options ?? CreateOptions());

    public static IDbContextOptions CreateOptions(RelationalOptionsExtension optionsExtension = null)
    {
        var optionsBuilder = new DbContextOptionsBuilder();

        ((IDbContextOptionsBuilderInfrastructure)optionsBuilder)
            .AddOrUpdateExtension(
                optionsExtension
                ?? new FakeRelationalOptionsExtension().WithConnectionString(ConnectionString));

        return optionsBuilder.Options;
    }

    private static IModificationCommand CreateModificationCommand(
        string table,
        string schema,
        Func<string> generateParameterName,
        bool sensitiveLoggingEnabled,
        IComparer<IUpdateEntry> comparer)
    {
        var modificationCommandParameters = new ModificationCommandParameters(
            table,
            schema,
            sensitiveLoggingEnabled,
            comparer,
            generateParameterName,
            logger: null);
        return CreateModificationCommandSource().CreateModificationCommand(modificationCommandParameters);
    }

    private static IModificationCommand CreateModificationCommand(
        string name,
        string schema,
        bool sensitiveLoggingEnabled,
        IReadOnlyList<ColumnModificationParameters> columnModifications)
    {
        var modificationCommandParameters = new ModificationCommandParameters(
            name, schema, sensitiveLoggingEnabled);

        var modificationCommand = CreateModificationCommandSource().CreateModificationCommand(
            modificationCommandParameters);

        if (columnModifications != null)
        {
            foreach (var columnModification in columnModifications)
            {
                modificationCommand.AddColumnModification(columnModification);
            }
        }

        return modificationCommand;
    }

    private static ModificationCommandFactory CreateModificationCommandSource()
        => new();
}
71325,C#,"public class ChangeTrackerTest
{
    [ConditionalTheory]
    [InlineData(0, 0)]
    [InlineData(1, 0)]
    [InlineData(0, 1)]
    [InlineData(1, 1)]
    public void Can_Add_with_identifying_relationships_dependent_first(int principalKeyValue, int dependentKeyValue)
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Add(new DependentGG { Id = dependentKeyValue, PrincipalGG = new PrincipalGG { Id = principalKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added1).State);
        Assert.Equal(EntityState.Added, context.Entry(added1.PrincipalGG).State);

        var added2 = context.Add(new DependentNG { Id = dependentKeyValue, PrincipalNG = new PrincipalNG { Id = principalKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added2).State);
        Assert.Equal(EntityState.Added, context.Entry(added2.PrincipalNG).State);

        var added3 = context.Add(new DependentNN { Id = dependentKeyValue, PrincipalNN = new PrincipalNN { Id = principalKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added3).State);
        Assert.Equal(EntityState.Added, context.Entry(added3.PrincipalNN).State);

        var added4 = context.Add(new DependentGN { Id = dependentKeyValue, PrincipalGN = new PrincipalGN { Id = principalKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added4).State);
        Assert.Equal(EntityState.Added, context.Entry(added4.PrincipalGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalTheory]
    [InlineData(0, 0)]
    [InlineData(1, 0)]
    [InlineData(0, 1)]
    [InlineData(1, 1)]
    public void Can_Add_with_identifying_relationships_principal_first(int principalKeyValue, int dependentKeyValue)
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Add(new PrincipalGG { Id = principalKeyValue, DependentGG = new DependentGG { Id = dependentKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added1).State);
        Assert.Equal(EntityState.Added, context.Entry(added1.DependentGG).State);

        var added2 = context.Add(new PrincipalNG { Id = principalKeyValue, DependentNG = new DependentNG { Id = dependentKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added2).State);
        Assert.Equal(EntityState.Added, context.Entry(added2.DependentNG).State);

        var added3 = context.Add(new PrincipalNN { Id = principalKeyValue, DependentNN = new DependentNN { Id = dependentKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added3).State);
        Assert.Equal(EntityState.Added, context.Entry(added3.DependentNN).State);

        var added4 = context.Add(new PrincipalGN { Id = principalKeyValue, DependentGN = new DependentGN { Id = dependentKeyValue } })
            .Entity;
        Assert.Equal(EntityState.Added, context.Entry(added4).State);
        Assert.Equal(EntityState.Added, context.Entry(added4.DependentGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_dependent_first()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new DependentGG { PrincipalGG = new PrincipalGG() }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added1).State);
        Assert.Equal(EntityState.Added, context.Entry(added1.PrincipalGG).State);

        var added2 = context.Attach(new DependentNG { PrincipalNG = new PrincipalNG() }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added2.PrincipalNG).State);

        var added3 = context.Attach(new DependentNN { PrincipalNN = new PrincipalNN() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.PrincipalNN).State);

        var added4 = context.Attach(new DependentGN { PrincipalGN = new PrincipalGN() }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added4).State);
        Assert.Equal(EntityState.Added, context.Entry(added4.PrincipalGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_dependent_first_with_principal_keys_set()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new DependentGG { PrincipalGG = new PrincipalGG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added1).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added1.PrincipalGG).State);

        var added2 = context.Attach(new DependentNG { PrincipalNG = new PrincipalNG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added2.PrincipalNG).State);

        var added3 = context.Attach(new DependentNN { PrincipalNN = new PrincipalNN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.PrincipalNN).State);

        var added4 = context.Attach(new DependentGN { PrincipalGN = new PrincipalGN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added4).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added4.PrincipalGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_dependent_first_with_dependent_keys_set()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new DependentGG { Id = 1, PrincipalGG = new PrincipalGG() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added1).State);
        Assert.Equal(EntityState.Added, context.Entry(added1.PrincipalGG).State);

        var added2 = context.Attach(new DependentNG { Id = 1, PrincipalNG = new PrincipalNG() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added2.PrincipalNG).State);

        var added3 = context.Attach(new DependentNN { Id = 1, PrincipalNN = new PrincipalNN() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.PrincipalNN).State);

        var added4 = context.Attach(new DependentGN { Id = 1, PrincipalGN = new PrincipalGN() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added4).State);
        Assert.Equal(EntityState.Added, context.Entry(added4.PrincipalGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_dependent_first_with_all_keys_set()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new DependentGG { Id = 1, PrincipalGG = new PrincipalGG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added1).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added1.PrincipalGG).State);

        var added2 = context.Attach(new DependentNG { Id = 1, PrincipalNG = new PrincipalNG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added2.PrincipalNG).State);

        var added3 = context.Attach(new DependentNN { Id = 1, PrincipalNN = new PrincipalNN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.PrincipalNN).State);

        var added4 = context.Attach(new DependentGN { Id = 1, PrincipalGN = new PrincipalGN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added4).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added4.PrincipalGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_principal_first()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new PrincipalGG { DependentGG = new DependentGG() }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added1).State);
        Assert.Equal(EntityState.Added, context.Entry(added1.DependentGG).State);

        var added2 = context.Attach(new PrincipalNG { DependentNG = new DependentNG() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added2).State);
        Assert.Equal(EntityState.Added, context.Entry(added2.DependentNG).State);

        var added3 = context.Attach(new PrincipalNN { DependentNN = new DependentNN() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.DependentNN).State);

        var added4 = context.Attach(new PrincipalGN { DependentGN = new DependentGN() }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added4).State);
        Assert.Equal(EntityState.Added, context.Entry(added4.DependentGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_principal_first_with_principal_keys_set()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new PrincipalGG { Id = 1, DependentGG = new DependentGG() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added1).State);
        Assert.Equal(EntityState.Added, context.Entry(added1.DependentGG).State);

        var added2 = context.Attach(new PrincipalNG { Id = 1, DependentNG = new DependentNG() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added2).State);
        Assert.Equal(EntityState.Added, context.Entry(added2.DependentNG).State);

        var added3 = context.Attach(new PrincipalNN { Id = 1, DependentNN = new DependentNN() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.DependentNN).State);

        var added4 = context.Attach(new PrincipalGN { Id = 1, DependentGN = new DependentGN() }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added4).State);
        Assert.Equal(EntityState.Added, context.Entry(added4.DependentGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_principal_first_with_dependent_keys_set()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new PrincipalGG { DependentGG = new DependentGG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added1).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added1.DependentGG).State);

        var added2 = context.Attach(new PrincipalNG { DependentNG = new DependentNG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added2.DependentNG).State);

        var added3 = context.Attach(new PrincipalNN { DependentNN = new DependentNN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.DependentNN).State);

        var added4 = context.Attach(new PrincipalGN { DependentGN = new DependentGN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Added, context.Entry(added4).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added4.DependentGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Can_Attach_with_identifying_relationships_principal_first_with_all_keys_set()
    {
        using var context = new EarlyLearningCenter();

        var added1 = context.Attach(new PrincipalGG { Id = 1, DependentGG = new DependentGG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added1).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added1.DependentGG).State);

        var added2 = context.Attach(new PrincipalNG { Id = 1, DependentNG = new DependentNG { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added2.DependentNG).State);

        var added3 = context.Attach(new PrincipalNN { Id = 1, DependentNN = new DependentNN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added3).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added3.DependentNN).State);

        var added4 = context.Attach(new PrincipalGN { Id = 1, DependentGN = new DependentGN { Id = 1 } }).Entity;
        Assert.Equal(EntityState.Unchanged, context.Entry(added4).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(added4.DependentGN).State);

        Assert.Equal(8, context.ChangeTracker.Entries().Count());
    }

    [ConditionalFact]
    public void Change_tracker_can_be_cleared()
    {
        Seed();

        using var context = new LikeAZooContext();

        var cats = context.Cats.ToList();
        var hats = context.Set<Hat>().ToList();

        Assert.Equal(3, context.ChangeTracker.Entries().Count());
        Assert.Equal(EntityState.Unchanged, context.Entry(cats[0]).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(hats[0]).State);

        context.ChangeTracker.Clear();

        Assert.Empty(context.ChangeTracker.Entries());
        Assert.Equal(EntityState.Detached, context.Entry(cats[0]).State);
        Assert.Equal(EntityState.Detached, context.Entry(hats[0]).State);

        var catsAgain = context.Cats.ToList();
        var hatsAgain = context.Set<Hat>().ToList();

        Assert.Equal(3, context.ChangeTracker.Entries().Count());
        Assert.Equal(EntityState.Unchanged, context.Entry(catsAgain[0]).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(hatsAgain[0]).State);

        Assert.Equal(EntityState.Detached, context.Entry(cats[0]).State);
        Assert.Equal(EntityState.Detached, context.Entry(hats[0]).State);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task Keys_generated_on_behalf_of_a_principal_are_not_saved(bool async)
    {
        using var context = new WeakHerosContext();

        var entity = new Weak { Id = Guid.NewGuid() };

        if (async)
        {
            await context.AddAsync(entity);
        }
        else
        {
            context.Add(entity);
        }

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Equal(
            CoreStrings.UnknownKeyValue(nameof(Weak), nameof(Weak.HeroId)),
            (await Assert.ThrowsAsync<InvalidOperationException>(
                async () => _ = async ? await context.SaveChangesAsync() : context.SaveChanges()))
            .Message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task Attached_owned_entity_without_owner_not_saved(bool async)
    {
        using var context = new WeakHerosContext();

        if (async)
        {
            await context.AddAsync(new Skinner());
        }
        else
        {
            context.Add(new Skinner());
        }

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Equal(
            CoreStrings.SaveOwnedWithoutOwner(nameof(Skinner)),
            (await Assert.ThrowsAsync<InvalidOperationException>(
                async () => _ = async ? await context.SaveChangesAsync() : context.SaveChanges()))
            .Message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task Attached_owned_collection_entity_without_owner_not_saved(bool async)
    {
        using var context = new WeakHerosContext();

        if (async)
        {
            await context.AddAsync(new TheStreets());
        }
        else
        {
            context.Add(new TheStreets());
        }

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Equal(
            CoreStrings.SaveOwnedWithoutOwner(nameof(TheStreets)),
            (await Assert.ThrowsAsync<InvalidOperationException>(
                async () => _ = async ? await context.SaveChangesAsync() : context.SaveChanges()))
            .Message);
    }

    public class Hero
    {
        public Guid Id { get; set; }
        public ICollection<Weak> Weaks { get; set; }
    }

    public class Weak
    {
        public Guid Id { get; set; }
        public Guid HeroId { get; set; }

        public Hero Hero { get; set; }
    }

    public class Mike
    {
        public Guid Id { get; set; }
        public ICollection<TheStreets> TheStreets { get; set; }
        public Skinner TheHero { get; set; }
    }

    public class Skinner
    {
    }

    public class TheStreets
    {
    }

    public class WeakHerosContext : DbContext
    {
        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Weak>(
                b =>
                {
                    b.HasKey(e => new { e.Id, e.HeroId });
                    b.HasOne(e => e.Hero).WithMany(e => e.Weaks).HasForeignKey(e => e.HeroId);
                });

            modelBuilder.Entity<Mike>(
                b =>
                {
                    b.OwnsOne(e => e.TheHero);
                    b.OwnsMany(e => e.TheStreets);
                });
        }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder.UseInMemoryDatabase(nameof(WeakHerosContext));
    }

    [ConditionalFact]
    public void DetectChanges_is_logged()
    {
        Seed();

        using var context = new LikeAZooContext();
        _loggerFactory.Log.Clear();

        context.SaveChanges();

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.DetectChangesStarting.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            CoreResources.LogDetectChangesStarting(new TestLogger<TestLoggingDefinitions>())
                .GenerateMessage(nameof(LikeAZooContext)), message);

        (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.DetectChangesCompleted.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            CoreResources.LogDetectChangesCompleted(new TestLogger<TestLoggingDefinitions>())
                .GenerateMessage(nameof(LikeAZooContext)), message);
    }

    [ConditionalTheory]
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void Detect_property_change_is_logged(bool sensitive, bool callDetectChangesTwice)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Find(1);

        _loggerFactory.Log.Clear();

        cat.Name = ""Smoke-a-doke"";

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.PropertyChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogPropertyChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                    nameof(Cat), nameof(Cat.Name), ""Smokey"", ""Smoke-a-doke"", ""{Id: 1}"")
                : CoreResources.LogPropertyChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Cat), nameof(Cat.Name)),
            message);

        _loggerFactory.Log.Clear();

        cat.Name = ""Little Artichoke"";

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        Assert.Empty(_loggerFactory.Log.Where(e => e.Id.Id == CoreEventId.PropertyChangeDetected.Id));
    }

    [ConditionalTheory] // Issue #21896
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void Property_changes_on_Deleted_entities_are_not_continually_detected(bool sensitive, bool callDetectChangesTwice)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Find(1);

        _loggerFactory.Log.Clear();

        context.Entry(cat).State = EntityState.Deleted;

        cat.Name = ""Smoke-a-doke"";

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        Assert.Empty(_loggerFactory.Log.Where(e => e.Id.Id == CoreEventId.PropertyChangeDetected.Id));

        _loggerFactory.Log.Clear();

        cat.Name = ""Little Artichoke"";

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        Assert.Empty(_loggerFactory.Log.Where(e => e.Id.Id == CoreEventId.PropertyChangeDetected.Id));
    }

    [ConditionalTheory]
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void Detect_foreign_key_property_change_is_logged(bool sensitive, bool callDetectChangesTwice)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Include(e => e.Hats).Single(e => e.Id == 1);

        _loggerFactory.Log.Clear();

        var hat = cat.Hats.Single(h => h.Id == 77);
        hat.CatId = 2;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.ForeignKeyChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogForeignKeyChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.CatId), 1, 2, ""{Id: 77}"")
                : CoreResources.LogForeignKeyChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.CatId)),
            message);

        _loggerFactory.Log.Clear();

        hat.CatId = 1;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.ForeignKeyChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogForeignKeyChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.CatId), 2, 1, ""{Id: 77}"")
                : CoreResources.LogForeignKeyChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.CatId)),
            message);
    }

    [ConditionalTheory]
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void Detect_collection_change_is_logged(bool sensitive, bool callDetectChangesTwice)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Include(e => e.Hats).Single(e => e.Id == 1);
        var hat = cat.Hats.Single(h => h.Id == 77);

        _loggerFactory.Log.Clear();

        cat.Hats.Clear();

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.CollectionChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogCollectionChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(0, 1, nameof(Cat), nameof(Cat.Hats), ""{Id: 1}"")
                : CoreResources.LogCollectionChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(0, 1, nameof(Cat), nameof(Cat.Hats)),
            message);

        _loggerFactory.Log.Clear();

        cat.Hats.Add(hat);

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.CollectionChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogCollectionChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(1, 0, nameof(Cat), nameof(Cat.Hats), ""{Id: 1}"")
                : CoreResources.LogCollectionChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(1, 0, nameof(Cat), nameof(Cat.Hats)),
            message);
    }

    [ConditionalTheory]
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void Detect_skip_collection_change_is_logged(bool sensitive, bool callDetectChangesTwice)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Include(e => e.Mats).Single(e => e.Id == 1);
        var mat = cat.Mats.Single(h => h.Id == 77);

        _loggerFactory.Log.Clear();

        cat.Mats.Clear();

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.SkipCollectionChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogSkipCollectionChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(0, 1, nameof(Cat), nameof(Cat.Mats), ""{Id: 1}"")
                : CoreResources.LogSkipCollectionChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(0, 1, nameof(Cat), nameof(Cat.Mats)),
            message);

        _loggerFactory.Log.Clear();

        cat.Mats.Add(mat);

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.SkipCollectionChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogSkipCollectionChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(1, 0, nameof(Cat), nameof(Cat.Mats), ""{Id: 1}"")
                : CoreResources.LogSkipCollectionChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(1, 0, nameof(Cat), nameof(Cat.Mats)),
            message);
    }

    [ConditionalTheory]
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void Detect_reference_change_is_logged(bool sensitive, bool callDetectChangesTwice)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Include(e => e.Hats).Single(e => e.Id == 1);
        var hat = cat.Hats.Single(h => h.Id == 77);

        _loggerFactory.Log.Clear();

        hat.Cat = null;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.ReferenceChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogReferenceChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.Cat), ""{Id: 77}"")
                : CoreResources.LogReferenceChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.Cat)),
            message);

        _loggerFactory.Log.Clear();

        hat.Cat = cat;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.ReferenceChangeDetected.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogReferenceChangeDetectedSensitive(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.Cat), ""{Id: 77}"")
                : CoreResources.LogReferenceChangeDetected(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(Hat), nameof(Hat.Cat)),
            message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Start_tracking_is_logged_from_query(bool sensitive)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        _loggerFactory.Log.Clear();
        context.Cats.Find(1);

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.StartedTracking.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogStartedTrackingSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                    nameof(LikeAZooContextSensitive), nameof(Cat), ""{Id: 1}"")
                : CoreResources.LogStartedTracking(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(LikeAZooContext), nameof(Cat)),
            message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Start_tracking_is_logged_from_attach(bool sensitive)
    {
        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        _loggerFactory.Log.Clear();
        context.Attach(new Hat(88));

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.StartedTracking.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogStartedTrackingSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                    nameof(LikeAZooContextSensitive), nameof(Hat), ""{Id: 88}"")
                : CoreResources.LogStartedTracking(new TestLogger<TestLoggingDefinitions>())
                    .GenerateMessage(nameof(LikeAZooContext), nameof(Hat)),
            message);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void State_change_is_logged(bool sensitive)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        var cat = context.Cats.Find(1);

        _loggerFactory.Log.Clear();

        context.Entry(cat).State = EntityState.Deleted;

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.StateChanged.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            sensitive
                ? CoreResources.LogStateChangedSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                    nameof(Cat), ""{Id: 1}"", nameof(LikeAZooContextSensitive), EntityState.Unchanged, EntityState.Deleted)
                : CoreResources.LogStateChanged(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                    nameof(Cat), nameof(LikeAZooContext), EntityState.Unchanged, EntityState.Deleted),
            message);
    }

    [ConditionalTheory]
    [InlineData(false, false, false)]
    [InlineData(true, false, false)]
    [InlineData(false, true, false)]
    [InlineData(true, true, false)]
    [InlineData(false, false, true)]
    [InlineData(true, false, true)]
    [InlineData(false, true, true)]
    [InlineData(true, true, true)]
    public async Task Value_generation_is_logged(bool sensitive, bool async, bool temporary)
    {
        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        ResetValueGenerator(
            context,
            context.Model.FindEntityType(typeof(Hat)).FindProperty(nameof(Hat.Id)),
            temporary);

        _loggerFactory.Log.Clear();

        if (async)
        {
            context.Add(new Hat(0));
        }
        else
        {
            await context.AddAsync(new Hat(0));
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.ValueGenerated.Id);
        Assert.Equal(LogLevel.Debug, level);

        if (temporary)
        {
            Assert.Equal(
                sensitive
                    ? CoreResources.LogTempValueGeneratedSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(LikeAZooContextSensitive), 1, nameof(Hat.Id), nameof(Hat))
                    : CoreResources.LogTempValueGenerated(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(LikeAZooContext), nameof(Hat.Id), nameof(Hat)),
                message);
        }
        else
        {
            Assert.Equal(
                sensitive
                    ? CoreResources.LogValueGeneratedSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(LikeAZooContextSensitive), 1, nameof(Hat.Id), nameof(Hat))
                    : CoreResources.LogValueGenerated(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(LikeAZooContext), nameof(Hat.Id), nameof(Hat)),
                message);
        }
    }

    private static void ResetValueGenerator(DbContext context, IProperty property, bool generateTemporaryValues)
    {
        var cache = context.GetService<IValueGeneratorCache>();

        var generator = (ResettableValueGenerator)cache.GetOrAdd(
            property,
            property.DeclaringEntityType,
            (p, e) => new ResettableValueGenerator());

        generator.Reset(generateTemporaryValues);
    }

    private class ResettableValueGenerator : ValueGenerator<int>
    {
        private int _current;
        private bool _generatesTemporaryValues;

        public override bool GeneratesTemporaryValues
            => _generatesTemporaryValues;

        public override int Next(EntityEntry entry)
            => Interlocked.Increment(ref _current);

        public void Reset(bool generateTemporaryValues)
        {
            _generatesTemporaryValues = generateTemporaryValues;
            _current = 0;
        }
    }

    [ConditionalTheory]
    [InlineData(false, CascadeTiming.OnSaveChanges, CascadeTiming.OnSaveChanges)]
    [InlineData(false, CascadeTiming.OnSaveChanges, CascadeTiming.Immediate)]
    [InlineData(false, CascadeTiming.OnSaveChanges, CascadeTiming.Never)]
    [InlineData(false, CascadeTiming.OnSaveChanges, null)]
    [InlineData(false, CascadeTiming.Immediate, CascadeTiming.OnSaveChanges)]
    [InlineData(false, CascadeTiming.Immediate, CascadeTiming.Immediate)]
    [InlineData(false, CascadeTiming.Immediate, CascadeTiming.Never)]
    [InlineData(false, CascadeTiming.Immediate, null)]
    [InlineData(false, CascadeTiming.Never, CascadeTiming.OnSaveChanges)]
    [InlineData(false, CascadeTiming.Never, CascadeTiming.Immediate)]
    [InlineData(false, CascadeTiming.Never, CascadeTiming.Never)]
    [InlineData(false, CascadeTiming.Never, null)]
    [InlineData(false, null, CascadeTiming.OnSaveChanges)]
    [InlineData(false, null, CascadeTiming.Immediate)]
    [InlineData(false, null, CascadeTiming.Never)]
    [InlineData(false, null, null)]
    [InlineData(true, CascadeTiming.OnSaveChanges, CascadeTiming.OnSaveChanges)]
    [InlineData(true, CascadeTiming.OnSaveChanges, CascadeTiming.Immediate)]
    [InlineData(true, CascadeTiming.OnSaveChanges, CascadeTiming.Never)]
    [InlineData(true, CascadeTiming.OnSaveChanges, null)]
    [InlineData(true, CascadeTiming.Immediate, CascadeTiming.OnSaveChanges)]
    [InlineData(true, CascadeTiming.Immediate, CascadeTiming.Immediate)]
    [InlineData(true, CascadeTiming.Immediate, CascadeTiming.Never)]
    [InlineData(true, CascadeTiming.Immediate, null)]
    [InlineData(true, CascadeTiming.Never, CascadeTiming.OnSaveChanges)]
    [InlineData(true, CascadeTiming.Never, CascadeTiming.Immediate)]
    [InlineData(true, CascadeTiming.Never, CascadeTiming.Never)]
    [InlineData(true, CascadeTiming.Never, null)]
    [InlineData(true, null, CascadeTiming.OnSaveChanges)]
    [InlineData(true, null, CascadeTiming.Immediate)]
    [InlineData(true, null, CascadeTiming.Never)]
    [InlineData(true, null, null)]
    public void Cascade_delete_is_logged(
        bool sensitive,
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        if (cascadeDeleteTiming.HasValue)
        {
            context.ChangeTracker.CascadeDeleteTiming = cascadeDeleteTiming.Value;
        }

        if (deleteOrphansTiming.HasValue)
        {
            context.ChangeTracker.DeleteOrphansTiming = deleteOrphansTiming.Value;
        }

        var cat = context.Cats.Include(e => e.Hats).Single(e => e.Id == 1);

        LogLevel? cascadeDeleteLevel = null;
        string cascadeDeleteMessage = null;
        string deleteOrphansMessage = null;

        void CaptureMessages()
        {
            (cascadeDeleteLevel, _, cascadeDeleteMessage, _, _) =
                _loggerFactory.Log.FirstOrDefault(e => e.Id.Id == CoreEventId.CascadeDelete.Id);
            (_, _, deleteOrphansMessage, _, _) =
                _loggerFactory.Log.FirstOrDefault(e => e.Id.Id == CoreEventId.CascadeDeleteOrphan.Id);
        }

        void ClearMessages()
            => _loggerFactory.Log.Clear();

        switch (cascadeDeleteTiming)
        {
            case CascadeTiming.Immediate:
            case null:
                ClearMessages();

                context.Entry(cat).State = EntityState.Deleted;

                CaptureMessages();

                context.SaveChanges();
                break;
            case CascadeTiming.OnSaveChanges:
                context.Entry(cat).State = EntityState.Deleted;

                ClearMessages();

                context.SaveChanges();

                CaptureMessages();
                break;
            case CascadeTiming.Never:
                ClearMessages();

                context.Entry(cat).State = EntityState.Deleted;

                Assert.Throws<InvalidOperationException>(() => context.SaveChanges());

                CaptureMessages();
                break;
        }

        Assert.Null(deleteOrphansMessage);

        if (cascadeDeleteTiming == CascadeTiming.Never)
        {
            Assert.Null(cascadeDeleteMessage);
        }
        else
        {
            Assert.Equal(LogLevel.Debug, cascadeDeleteLevel);
            Assert.Equal(
                sensitive
                    ? CoreResources.LogCascadeDeleteSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(Hat), ""{Id: 77}"", EntityState.Deleted, nameof(Cat), ""{Id: 1}"")
                    : CoreResources.LogCascadeDelete(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(Hat), EntityState.Deleted, nameof(Cat)),
                cascadeDeleteMessage);
        }
    }

    [ConditionalTheory]
    [InlineData(false, CascadeTiming.OnSaveChanges, CascadeTiming.OnSaveChanges)]
    [InlineData(false, CascadeTiming.OnSaveChanges, CascadeTiming.Immediate)]
    [InlineData(false, CascadeTiming.OnSaveChanges, CascadeTiming.Never)]
    [InlineData(false, CascadeTiming.OnSaveChanges, null)]
    [InlineData(false, CascadeTiming.Immediate, CascadeTiming.OnSaveChanges)]
    [InlineData(false, CascadeTiming.Immediate, CascadeTiming.Immediate)]
    [InlineData(false, CascadeTiming.Immediate, CascadeTiming.Never)]
    [InlineData(false, CascadeTiming.Immediate, null)]
    [InlineData(false, CascadeTiming.Never, CascadeTiming.OnSaveChanges)]
    [InlineData(false, CascadeTiming.Never, CascadeTiming.Immediate)]
    [InlineData(false, CascadeTiming.Never, CascadeTiming.Never)]
    [InlineData(false, CascadeTiming.Never, null)]
    [InlineData(false, null, CascadeTiming.OnSaveChanges)]
    [InlineData(false, null, CascadeTiming.Immediate)]
    [InlineData(false, null, CascadeTiming.Never)]
    [InlineData(false, null, null)]
    [InlineData(true, CascadeTiming.OnSaveChanges, CascadeTiming.OnSaveChanges)]
    [InlineData(true, CascadeTiming.OnSaveChanges, CascadeTiming.Immediate)]
    [InlineData(true, CascadeTiming.OnSaveChanges, CascadeTiming.Never)]
    [InlineData(true, CascadeTiming.OnSaveChanges, null)]
    [InlineData(true, CascadeTiming.Immediate, CascadeTiming.OnSaveChanges)]
    [InlineData(true, CascadeTiming.Immediate, CascadeTiming.Immediate)]
    [InlineData(true, CascadeTiming.Immediate, CascadeTiming.Never)]
    [InlineData(true, CascadeTiming.Immediate, null)]
    [InlineData(true, CascadeTiming.Never, CascadeTiming.OnSaveChanges)]
    [InlineData(true, CascadeTiming.Never, CascadeTiming.Immediate)]
    [InlineData(true, CascadeTiming.Never, CascadeTiming.Never)]
    [InlineData(true, CascadeTiming.Never, null)]
    [InlineData(true, null, CascadeTiming.OnSaveChanges)]
    [InlineData(true, null, CascadeTiming.Immediate)]
    [InlineData(true, null, CascadeTiming.Never)]
    [InlineData(true, null, null)]
    public void Cascade_delete_orphan_is_logged(
        bool sensitive,
        CascadeTiming? cascadeDeleteTiming,
        CascadeTiming? deleteOrphansTiming)
    {
        Seed(sensitive);

        using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
        if (cascadeDeleteTiming.HasValue)
        {
            context.ChangeTracker.CascadeDeleteTiming = cascadeDeleteTiming.Value;
        }

        if (deleteOrphansTiming.HasValue)
        {
            context.ChangeTracker.DeleteOrphansTiming = deleteOrphansTiming.Value;
        }

        var cat = context.Cats.Include(e => e.Hats).Single(e => e.Id == 1);

        LogLevel? deleteOrphansLevel = null;
        string cascadeDeleteMessage = null;
        string deleteOrphansMessage = null;

        void CaptureMessages()
        {
            (_, _, cascadeDeleteMessage, _, _) = _loggerFactory.Log.FirstOrDefault(e => e.Id.Id == CoreEventId.CascadeDelete.Id);
            (deleteOrphansLevel, _, deleteOrphansMessage, _, _) =
                _loggerFactory.Log.FirstOrDefault(e => e.Id.Id == CoreEventId.CascadeDeleteOrphan.Id);
        }

        void ClearMessages()
            => _loggerFactory.Log.Clear();

        switch (deleteOrphansTiming)
        {
            case CascadeTiming.Immediate:
            case null:
                ClearMessages();

                cat.Hats.Clear();
                context.ChangeTracker.DetectChanges();

                CaptureMessages();

                context.SaveChanges();
                break;
            case CascadeTiming.OnSaveChanges:
                cat.Hats.Clear();
                context.ChangeTracker.DetectChanges();

                ClearMessages();

                context.SaveChanges();

                CaptureMessages();
                break;
            case CascadeTiming.Never:
                ClearMessages();

                cat.Hats.Clear();
                context.ChangeTracker.DetectChanges();

                Assert.Throws<InvalidOperationException>(() => context.SaveChanges());

                CaptureMessages();
                break;
        }

        Assert.Null(cascadeDeleteMessage);

        if (deleteOrphansTiming == CascadeTiming.Never)
        {
            Assert.Null(deleteOrphansMessage);
        }
        else
        {
            Assert.Equal(LogLevel.Debug, deleteOrphansLevel);
            Assert.Equal(
                sensitive
                    ? CoreResources.LogCascadeDeleteOrphanSensitive(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(
                        nameof(Hat), ""{Id: 77}"", EntityState.Deleted, nameof(Cat))
                    : CoreResources.LogCascadeDeleteOrphan(new TestLogger<TestLoggingDefinitions>())
                        .GenerateMessage(nameof(Hat), EntityState.Deleted, nameof(Cat)),
                deleteOrphansMessage);
        }
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public async Task SaveChanges_is_logged(bool async)
    {
        Seed();

        using var context = new LikeAZooContext();
        var cat = context.Cats.Find(1);

        context.Entry(cat).State = EntityState.Deleted;

        _loggerFactory.Log.Clear();

        if (async)
        {
            await context.SaveChangesAsync();
        }
        else
        {
            context.SaveChanges();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.SaveChangesStarting.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            CoreResources.LogSaveChangesStarting(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(nameof(LikeAZooContext)),
            message);

        (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.SaveChangesCompleted.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            CoreResources.LogSaveChangesCompleted(new TestLogger<TestLoggingDefinitions>())
                .GenerateMessage(nameof(LikeAZooContext), 1), message);
    }

    [ConditionalFact]
    public void Context_Dispose_is_logged()
    {
        using (var context = new LikeAZooContext())
        {
            context.Cats.Find(1);

            _loggerFactory.Log.Clear();
        }

        var (level, _, message, _, _) = _loggerFactory.Log.Single(e => e.Id.Id == CoreEventId.ContextDisposed.Id);
        Assert.Equal(LogLevel.Debug, level);
        Assert.Equal(
            CoreResources.LogContextDisposed(new TestLogger<TestLoggingDefinitions>()).GenerateMessage(nameof(LikeAZooContext)),
            message);
    }

    [ConditionalFact]
    public void State_change_events_fire_from_query()
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        Seed(usePool: true);

        using (var scope = _poolProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

            RegisterEvents(context, tracked, changed);

            Assert.Equal(2, context.Cats.OrderBy(e => e.Id).ToList().Count);

            Assert.Equal(2, tracked.Count);
            Assert.Empty(changed);

            AssertTrackedEvent(context, 1, EntityState.Unchanged, tracked[0], fromQuery: true);
            AssertTrackedEvent(context, 2, EntityState.Unchanged, tracked[1], fromQuery: true);
        }

        using (var scope = _poolProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

            Assert.Equal(2, context.Cats.OrderBy(e => e.Id).ToList().Count);

            Assert.Equal(2, tracked.Count);
            Assert.Empty(changed);
        }
    }

    [ConditionalFact]
    public void State_change_events_fire_from_Attach()
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        using var scope = _poolProvider.CreateScope();
        var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

        RegisterEvents(context, tracked, changed);

        context.Attach(new Cat(1));

        Assert.False(context.ChangeTracker.HasChanges());

        Assert.Single(tracked);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 1, EntityState.Unchanged, tracked[0], fromQuery: false);

        context.Entry(new Cat(2)).State = EntityState.Unchanged;

        Assert.False(context.ChangeTracker.HasChanges());

        Assert.Equal(2, tracked.Count);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 2, EntityState.Unchanged, tracked[1], fromQuery: false);
    }

    [ConditionalFact]
    public void State_change_events_fire_from_Add()
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        using var scope = _poolProvider.CreateScope();
        var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

        RegisterEvents(context, tracked, changed);

        context.Add(new Cat(1));

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Single(tracked);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 1, EntityState.Added, tracked[0], fromQuery: false);

        context.Entry(new Cat(2)).State = EntityState.Added;

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Equal(2, tracked.Count);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 2, EntityState.Added, tracked[1], fromQuery: false);
    }

    [ConditionalFact]
    public void State_change_events_fire_from_Update()
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        using var scope = _poolProvider.CreateScope();
        var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

        RegisterEvents(context, tracked, changed);

        context.Update(new Cat(1));

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Single(tracked);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 1, EntityState.Modified, tracked[0], fromQuery: false);

        context.Entry(new Cat(2)).State = EntityState.Modified;

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Equal(2, tracked.Count);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 2, EntityState.Modified, tracked[1], fromQuery: false);
    }

    [ConditionalFact]
    public void State_change_events_fire_for_tracked_state_changes()
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        using (var scope = _poolProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

            RegisterEvents(context, tracked, changed);

            context.AddRange(new Cat(1), new Cat(2));

            Assert.True(context.ChangeTracker.HasChanges());

            Assert.Equal(2, tracked.Count);
            Assert.Empty(changed);

            AssertTrackedEvent(context, 1, EntityState.Added, tracked[0], fromQuery: false);
            AssertTrackedEvent(context, 2, EntityState.Added, tracked[1], fromQuery: false);

            context.Entry(context.Cats.Find(1)).State = EntityState.Unchanged;
            context.Entry(context.Cats.Find(2)).State = EntityState.Modified;

            Assert.Equal(2, tracked.Count);
            Assert.Equal(2, changed.Count);

            Assert.True(context.ChangeTracker.HasChanges());

            AssertChangedEvent(context, 1, EntityState.Added, EntityState.Unchanged, changed[0]);
            AssertChangedEvent(context, 2, EntityState.Added, EntityState.Modified, changed[1]);

            context.Entry(context.Cats.Find(1)).State = EntityState.Added;
            context.Entry(context.Cats.Find(2)).State = EntityState.Deleted;

            Assert.Equal(2, tracked.Count);
            Assert.Equal(4, changed.Count);

            AssertChangedEvent(context, 1, EntityState.Unchanged, EntityState.Added, changed[2]);
            AssertChangedEvent(context, 2, EntityState.Modified, EntityState.Deleted, changed[3]);

            context.Remove(context.Cats.Find(1));
            context.Entry(context.Cats.Find(2)).State = EntityState.Detached;

            Assert.False(context.ChangeTracker.HasChanges());

            Assert.Equal(2, tracked.Count);
            Assert.Equal(6, changed.Count);

            AssertChangedEvent(context, null, EntityState.Added, EntityState.Detached, changed[4]);
            AssertChangedEvent(context, null, EntityState.Deleted, EntityState.Detached, changed[5]);
        }

        using (var scope = _poolProvider.CreateScope())
        {
            var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

            context.AddRange(new Cat(1), new Cat(2));

            context.Entry(context.Cats.Find(1)).State = EntityState.Unchanged;
            context.Entry(context.Cats.Find(2)).State = EntityState.Modified;

            context.Entry(context.Cats.Find(1)).State = EntityState.Added;
            context.Entry(context.Cats.Find(2)).State = EntityState.Deleted;

            context.Remove(context.Cats.Find(1));
            context.Entry(context.Cats.Find(2)).State = EntityState.Detached;

            Assert.Equal(2, tracked.Count);
            Assert.Equal(6, changed.Count);
        }
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void State_change_events_fire_when_saving_changes(bool callDetectChangesTwice)
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        Seed(usePool: true);

        using var scope = _poolProvider.CreateScope();
        var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

        RegisterEvents(context, tracked, changed);

        var cat1 = context.Cats.Find(1);

        Assert.Single(tracked);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 1, EntityState.Unchanged, tracked[0], fromQuery: true);

        context.Add(new Cat(3));
        cat1.Name = ""Clippy"";

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        Assert.Equal(2, tracked.Count);
        Assert.Single(changed);

        AssertTrackedEvent(context, 3, EntityState.Added, tracked[1], fromQuery: false);
        AssertChangedEvent(context, 1, EntityState.Unchanged, EntityState.Modified, changed[0]);

        Assert.True(context.ChangeTracker.HasChanges());

        context.SaveChanges();

        Assert.False(context.ChangeTracker.HasChanges());

        Assert.Equal(2, tracked.Count);
        Assert.Equal(3, changed.Count);

        AssertChangedEvent(context, 1, EntityState.Modified, EntityState.Unchanged, changed[2]);
        AssertChangedEvent(context, 3, EntityState.Added, EntityState.Unchanged, changed[1]);

        context.Database.EnsureDeleted();
    }

    [ConditionalFact]
    public void State_change_events_fire_when_property_modified_flags_cause_state_change()
    {
        var tracked = new List<EntityTrackedEventArgs>();
        var changed = new List<EntityStateChangedEventArgs>();

        using var scope = _poolProvider.CreateScope();
        var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

        RegisterEvents(context, tracked, changed);

        var cat = context.Attach(
            new Cat(3) { Name = ""Achilles"" }).Entity;

        Assert.False(context.ChangeTracker.HasChanges());

        Assert.Single(tracked);
        Assert.Empty(changed);

        AssertTrackedEvent(context, 3, EntityState.Unchanged, tracked[0], fromQuery: false);

        context.Entry(cat).Property(e => e.Name).IsModified = true;

        Assert.True(context.ChangeTracker.HasChanges());

        Assert.Single(tracked);
        Assert.Single(changed);

        AssertChangedEvent(context, 3, EntityState.Unchanged, EntityState.Modified, changed[0]);

        context.Entry(cat).Property(e => e.Name).IsModified = false;

        Assert.False(context.ChangeTracker.HasChanges());

        Assert.Single(tracked);
        Assert.Equal(2, changed.Count);

        AssertChangedEvent(context, 3, EntityState.Modified, EntityState.Unchanged, changed[1]);
    }

    [ConditionalFact]
    public void State_change_events_are_limited_to_the_current_context()
    {
        var tracked1 = new List<EntityTrackedEventArgs>();
        var changed1 = new List<EntityStateChangedEventArgs>();
        var tracked2 = new List<EntityTrackedEventArgs>();
        var changed2 = new List<EntityStateChangedEventArgs>();

        Seed(usePool: true);

        using var scope = _poolProvider.CreateScope();
        var context = scope.ServiceProvider.GetService<LikeAZooContextPooled>();

        RegisterEvents(context, tracked1, changed1);

        using (var scope2 = _poolProvider.CreateScope())
        {
            var context2 = scope2.ServiceProvider.GetService<LikeAZooContextPooled>();

            RegisterEvents(context2, tracked2, changed2);

            Assert.Equal(2, context2.Cats.OrderBy(e => e.Id).ToList().Count);

            Assert.Equal(2, tracked2.Count);
            Assert.Empty(changed2);

            context2.Entry(context2.Cats.Find(1)).State = EntityState.Modified;

            Assert.Equal(2, tracked2.Count);
            Assert.Single(changed2);

            Assert.Empty(tracked1);
            Assert.Empty(changed1);
        }

        Assert.Equal(2, context.Cats.OrderBy(e => e.Id).ToList().Count);

        Assert.Equal(2, tracked1.Count);
        Assert.Empty(changed1);

        context.Entry(context.Cats.Find(1)).State = EntityState.Modified;

        Assert.Equal(2, tracked1.Count);
        Assert.Single(changed1);

        Assert.Equal(2, tracked2.Count);
        Assert.Single(changed2);

        context.Database.EnsureDeleted();
    }

    private static void AssertTrackedEvent(
        LikeAZooContext context,
        int id,
        EntityState newState,
        EntityTrackedEventArgs tracked,
        bool fromQuery)
    {
        Assert.Equal(newState, tracked.Entry.State);
        Assert.Equal(fromQuery, tracked.FromQuery);
        Assert.Same(context.Cats.Find(id), tracked.Entry.Entity);
    }

    private static void AssertChangedEvent(
        LikeAZooContext context,
        int? id,
        EntityState oldState,
        EntityState newState,
        EntityStateChangedEventArgs changed)
    {
        Assert.Equal(oldState, changed.OldState);
        Assert.Equal(newState, changed.NewState);
        Assert.Equal(newState, changed.Entry.State);

        if (id != null)
        {
            Assert.Same(context.Cats.Find(id), changed.Entry.Entity);
        }
    }

    private static void RegisterEvents(
        LikeAZooContext context,
        IList<EntityTrackedEventArgs> tracked,
        IList<EntityStateChangedEventArgs> changed)
    {
        context.ChangeTracker.Tracked += (s, e) =>
        {
            Assert.Same(context.ChangeTracker, s);
            tracked.Add(e);
        };

        context.ChangeTracker.StateChanged += (s, e) =>
        {
            Assert.Same(context.ChangeTracker, s);
            Assert.Equal(e.NewState, e.Entry.State);
            changed.Add(e);
        };
    }

    private class Cat
    {
        public Cat(int id)
        {
            Id = id;
        }

        // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
        public int Id { get; private set; }

        public string Name { get; set; }

        public ICollection<Hat> Hats { get; } = new List<Hat>();

        public ICollection<Mat> Mats { get; } = new List<Mat>();
    }

    private class Hat
    {
        public Hat(int id)
        {
            Id = id;
        }

        // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
        public int Id { get; private set; }

        public string Color { get; set; }

        public int CatId { get; set; }
        public Cat Cat { get; set; }
    }

    private class Mat
    {
        public Mat(int id)
        {
            Id = id;
        }

        // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
        public int Id { get; private set; }

        public ICollection<Cat> Cats { get; } = new List<Cat>();
    }

    private class CatMat
    {
        public int CatId { get; set; }
        public int MatId { get; set; }
    }

    private static readonly ListLoggerFactory _loggerFactory = new();

    private static readonly IServiceProvider _serviceProvider
        = InMemoryFixture.BuildServiceProvider(_loggerFactory);

    private static readonly IServiceProvider _sensitiveProvider
        = InMemoryFixture.BuildServiceProvider(_loggerFactory);

    private static readonly IServiceProvider _poolProvider
        = new ServiceCollection()
            .AddDbContextPool<LikeAZooContextPooled>(
                p => p.UseInMemoryDatabase(nameof(LikeAZooContextPooled))
                    .UseInternalServiceProvider(InMemoryFixture.BuildServiceProvider(_loggerFactory)))
            .BuildServiceProvider(validateScopes: true);

    private class LikeAZooContextPooled : LikeAZooContext
    {
        public LikeAZooContextPooled(DbContextOptions<LikeAZooContextPooled> options)
            : base(options)
        {
        }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
        }
    }

    private class LikeAZooContext : DbContext
    {
        public LikeAZooContext()
        {
        }

        protected LikeAZooContext(DbContextOptions options)
            : base(options)
        {
        }

        public DbSet<Cat> Cats { get; set; }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(_serviceProvider)
                .UseInMemoryDatabase(nameof(LikeAZooContext));

        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder
                .Entity<Cat>()
                .Property(e => e.Id)
                .HasValueGenerator<InMemoryIntegerValueGenerator<int>>();

            modelBuilder
                .Entity<Hat>()
                .Property(e => e.Id)
                .HasValueGenerator<InMemoryIntegerValueGenerator<int>>();

            modelBuilder.Entity<Mat>(
                b =>
                {
                    b.Property(e => e.Id).HasValueGenerator<InMemoryIntegerValueGenerator<int>>();
                    b.HasMany(e => e.Cats)
                        .WithMany(e => e.Mats)
                        .UsingEntity<CatMat>(
                            ts => ts.HasOne<Cat>().WithMany(),
                            ts => ts.HasOne<Mat>().WithMany())
                        .HasKey(ts => new { ts.CatId, ts.MatId });
                });
        }
    }

    private class LikeAZooContextSensitive : LikeAZooContext
    {
        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .EnableSensitiveDataLogging()
                .UseInternalServiceProvider(_sensitiveProvider)
                .UseInMemoryDatabase(nameof(LikeAZooContextSensitive));
    }

    private void Seed(bool sensitive = false, bool usePool = false)
    {
        void Seed(LikeAZooContext context)
        {
            context.Database.EnsureDeleted();

            var cat1 = new Cat(1) { Name = ""Smokey"" };
            var cat2 = new Cat(2) { Name = ""Sid"" };

            cat1.Hats.Add(new Hat(77) { Color = ""Pine Green"" });

            context.AddRange(cat1, cat2);

            var mat = new Mat(77);
            context.Add(mat);
            cat1.Mats.Add(mat);

            context.SaveChanges();
        }

        if (usePool)
        {
            using var scope = _poolProvider.CreateScope();
            Seed(scope.ServiceProvider.GetService<LikeAZooContextPooled>());
        }
        else
        {
            using var context = sensitive ? new LikeAZooContextSensitive() : new LikeAZooContext();
            Seed(context);
        }
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Can_remove_dependent_identifying_one_to_many(bool saveEntities)
    {
        using var context = new EarlyLearningCenter();
        var product = new Product();
        var order = new Order();
        var orderDetails = new OrderDetails { Order = order, Product = product };

        context.Add(orderDetails);
        if (saveEntities)
        {
            context.SaveChanges();
        }

        var expectedState = saveEntities ? EntityState.Unchanged : EntityState.Added;

        Assert.Equal(expectedState, context.Entry(product).State);
        Assert.Equal(expectedState, context.Entry(order).State);
        Assert.Equal(expectedState, context.Entry(orderDetails).State);

        Assert.Same(orderDetails, product.OrderDetails.Single());
        Assert.Same(orderDetails, order.OrderDetails.Single());

        order.OrderDetails.Remove(orderDetails);

        Assert.Equal(expectedState, context.Entry(product).State);
        Assert.Equal(expectedState, context.Entry(order).State);
        Assert.Equal(saveEntities ? EntityState.Deleted : EntityState.Detached, context.Entry(orderDetails).State);

        Assert.Empty(product.OrderDetails);
        Assert.Empty(order.OrderDetails);

        context.SaveChanges();

        Assert.Equal(EntityState.Unchanged, context.Entry(product).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(order).State);
        Assert.Equal(EntityState.Detached, context.Entry(orderDetails).State);

        Assert.Empty(product.OrderDetails);
        Assert.Empty(order.OrderDetails);
    }

    [ConditionalFact]
    public void Keyless_type_negative_cases()
    {
        using var context = new EarlyLearningCenter();
        var whoAmI = new WhoAmI();

        Assert.Equal(
            CoreStrings.KeylessTypeTracked(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Add(whoAmI)).Message);

        Assert.Equal(
            CoreStrings.KeylessTypeTracked(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Remove(whoAmI)).Message);

        Assert.Equal(
            CoreStrings.KeylessTypeTracked(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Attach(whoAmI)).Message);

        Assert.Equal(
            CoreStrings.KeylessTypeTracked(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Update(whoAmI)).Message);

        Assert.Equal(
            CoreStrings.InvalidSetKeylessOperation(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Find<WhoAmI>(1)).Message);

        Assert.Equal(
            CoreStrings.InvalidSetKeylessOperation(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Set<WhoAmI>().Local).Message);

        Assert.Equal(
            CoreStrings.KeylessTypeTracked(""WhoAmI""),
            Assert.Throws<InvalidOperationException>(() => context.Entry(whoAmI)).Message);
    }

    [ConditionalFact]
    public void Can_get_all_entries()
    {
        using var context = new EarlyLearningCenter();
        var category = context.Add(new Category()).Entity;
        var product = context.Add(new Product()).Entity;

        Assert.Equal(
            new object[] { category, product },
            context.ChangeTracker.Entries().Select(e => e.Entity).OrderBy(e => e.GetType().Name));
    }

    [ConditionalFact]
    public void Can_get_all_entities_for_an_entity_of_a_given_type()
    {
        using var context = new EarlyLearningCenter();
        var category = context.Add(new Category()).Entity;
        var product = context.Add(new Product()).Entity;

        Assert.Equal(
            new object[] { product },
            context.ChangeTracker.Entries<Product>().Select(e => e.Entity).OrderBy(e => e.GetType().Name));

        Assert.Equal(
            new object[] { category },
            context.ChangeTracker.Entries<Category>().Select(e => e.Entity).OrderBy(e => e.GetType().Name));

        Assert.Equal(
            new object[] { category, product },
            context.ChangeTracker.Entries<object>().Select(e => e.Entity).OrderBy(e => e.GetType().Name));
    }

    [ConditionalFact]
    public void Can_get_Context()
    {
        using var context = new EarlyLearningCenter();
        Assert.Same(context, context.ChangeTracker.Context);
    }

    [ConditionalTheory] // Issue #17828
    [InlineData(false, false)]
    [InlineData(true, false)]
    [InlineData(false, true)]
    [InlineData(true, true)]
    public void DetectChanges_reparents_even_when_immediate_cascade_enabled(bool delayCascade, bool callDetectChangesTwice)
    {
        using var context = new EarlyLearningCenter();

        // Construct initial state
        var parent1 = new Category { Id = 1 };
        var parent2 = new Category { Id = 2 };
        var child = new Product { Id = 3, Category = parent1 };

        context.AddRange(parent1, parent2, child);
        context.ChangeTracker.AcceptAllChanges();

        Assert.Equal(3, context.ChangeTracker.Entries().Count());
        Assert.Equal(EntityState.Unchanged, context.Entry(parent1).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(parent2).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(child).State);

        if (delayCascade)
        {
            context.ChangeTracker.CascadeDeleteTiming = CascadeTiming.OnSaveChanges;
        }

        child.Category = parent2;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        context.Remove(parent1);

        Assert.Equal(3, context.ChangeTracker.Entries().Count());
        Assert.Equal(EntityState.Deleted, context.Entry(parent1).State);
        Assert.Equal(EntityState.Unchanged, context.Entry(parent2).State);
        Assert.Equal(EntityState.Modified, context.Entry(child).State);
    }

    [ConditionalTheory] // Issue #19203
    [InlineData(false, false)]
    [InlineData(false, true)]
    [InlineData(true, false)]
    [InlineData(true, true)]
    public void Dependent_FKs_are_not_nulled_when_principal_is_detached(bool delayCascade, bool trackNewDependents)
    {
        using var context = new EarlyLearningCenter();

        var category = new OptionalCategory
        {
            Id = 1,
            Products = new List<OptionalProduct>
            {
                new() { Id = 1 },
                new() { Id = 2 },
                new() { Id = 3 }
            }
        };

        context.Attach(category);

        var categoryEntry = context.Entry(category);
        var product0Entry = context.Entry(category.Products[0]);
        var product1Entry = context.Entry(category.Products[1]);
        var product2Entry = context.Entry(category.Products[2]);

        Assert.Equal(EntityState.Unchanged, categoryEntry.State);
        Assert.Equal(EntityState.Unchanged, product0Entry.State);
        Assert.Equal(EntityState.Unchanged, product1Entry.State);
        Assert.Equal(EntityState.Unchanged, product2Entry.State);

        if (delayCascade)
        {
            context.ChangeTracker.CascadeDeleteTiming = CascadeTiming.OnSaveChanges;
        }

        context.Entry(category).State = EntityState.Detached;

        Assert.Equal(EntityState.Detached, categoryEntry.State);

        Assert.Equal(EntityState.Unchanged, product0Entry.State);
        Assert.Equal(EntityState.Unchanged, product1Entry.State);
        Assert.Equal(EntityState.Unchanged, product2Entry.State);

        var newCategory = new OptionalCategory { Id = 1, };

        if (trackNewDependents)
        {
            newCategory.Products = new List<OptionalProduct>
            {
                new() { Id = 1 },
                new() { Id = 2 },
                new() { Id = 3 }
            };
        }

        if (trackNewDependents)
        {
            Assert.Equal(
                CoreStrings.IdentityConflict(nameof(OptionalProduct), ""{'Id'}""),
                Assert.Throws<InvalidOperationException>(() => context.Attach(newCategory)).Message);
        }
        else
        {
            context.Update(newCategory);

            Assert.Equal(4, context.ChangeTracker.Entries().Count());

            categoryEntry = context.Entry(newCategory);
            product0Entry = context.Entry(newCategory.Products[0]);
            product1Entry = context.Entry(newCategory.Products[1]);
            product2Entry = context.Entry(newCategory.Products[2]);

            Assert.Equal(EntityState.Modified, categoryEntry.State);

            Assert.Equal(EntityState.Unchanged, product0Entry.State);
            Assert.Equal(EntityState.Unchanged, product1Entry.State);
            Assert.Equal(EntityState.Unchanged, product2Entry.State);

            Assert.Same(newCategory.Products[0], category.Products[0]);
            Assert.Same(newCategory.Products[1], category.Products[1]);
            Assert.Same(newCategory.Products[2], category.Products[2]);

            Assert.Same(newCategory, newCategory.Products[0].Category);
            Assert.Same(newCategory, newCategory.Products[1].Category);
            Assert.Same(newCategory, newCategory.Products[2].Category);

            Assert.Equal(newCategory.Id, product0Entry.Property(""CategoryId"").CurrentValue);
            Assert.Equal(newCategory.Id, product1Entry.Property(""CategoryId"").CurrentValue);
            Assert.Equal(newCategory.Id, product2Entry.Property(""CategoryId"").CurrentValue);
        }
    }

    [ConditionalTheory] // Issues #16546 #25360
    [InlineData(false, false, false, true, false)]
    [InlineData(true, false, false, true, false)]
    [InlineData(false, true, false, true, false)]
    [InlineData(true, true, false, true, false)]
    [InlineData(false, false, true, true, false)]
    [InlineData(true, false, true, true, false)]
    [InlineData(false, true, false, false, true)]
    [InlineData(true, true, false, false, true)]
    [InlineData(false, false, true, false, true)]
    [InlineData(true, false, true, false, true)]
    [InlineData(false, true, false, true, true)]
    [InlineData(true, true, false, true, true)]
    [InlineData(false, false, true, true, true)]
    [InlineData(true, false, true, true, true)]
    public void Optional_relationship_with_cascade_still_cascades(
        bool delayCascade,
        bool setProperty,
        bool setCurrentValue,
        bool useForeignKey,
        bool useNavigation)
    {
        Kontainer detachedContainer;
        using (var context = new KontainerContext())
        {
            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();

            context.Add(
                new Kontainer
                {
                    Name = ""C1"",
                    Rooms = { new KontainerRoom { Number = 1, Troduct = new Troduct { Description = ""Heavy Engine XT3"" } } }
                }
            );

            context.SaveChanges();

            detachedContainer = context.Set<Kontainer>()
                .Include(container => container.Rooms)
                .ThenInclude(room => room.Troduct)
                .AsNoTracking()
                .Single();
        }

        using (var context = new KontainerContext())
        {
            var attachedContainer = context.Set<Kontainer>()
                .Include(container => container.Rooms)
                .ThenInclude(room => room.Troduct)
                .Single();

            var attachedRoom = attachedContainer.Rooms.Single();
            var attachedTroduct = attachedRoom.Troduct;

            Assert.Equal(3, context.ChangeTracker.Entries().Count());
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedContainer).State);
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedRoom).State);
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedTroduct).State);

            if (delayCascade)
            {
                context.ChangeTracker.DeleteOrphansTiming = CascadeTiming.OnSaveChanges;
            }

            if (setProperty)
            {
                if (useForeignKey)
                {
                    attachedRoom.TroductId = null;
                }

                if (useNavigation)
                {
                    attachedRoom.Troduct = null;
                }
            }
            else if (setCurrentValue)
            {
                if (useForeignKey)
                {
                    context.Entry(attachedRoom).Property(e => e.TroductId).CurrentValue = null;
                }

                if (useNavigation)
                {
                    context.Entry(attachedRoom).Reference(e => e.Troduct).CurrentValue = null;
                }
            }
            else
            {
                var detachedRoom = detachedContainer.Rooms.Single();
                detachedRoom.TroductId = null;
                context.Entry(attachedRoom).CurrentValues.SetValues(detachedRoom);
            }

            Assert.Equal(3, context.ChangeTracker.Entries().Count());
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedContainer).State);
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedTroduct).State);

            if (delayCascade)
            {
                Assert.Equal(EntityState.Modified, context.Entry(attachedRoom).State);
            }
            else
            {
                // Deleted because FK with cascade has been set to null
                Assert.Equal(EntityState.Deleted, context.Entry(attachedRoom).State);
            }

            context.ChangeTracker.CascadeChanges();

            Assert.Equal(3, context.ChangeTracker.Entries().Count());
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedContainer).State);
            Assert.Equal(EntityState.Unchanged, context.Entry(attachedTroduct).State);
            Assert.Equal(EntityState.Deleted, context.Entry(attachedRoom).State);

            context.SaveChanges();
        }
    }

    private class Kontainer
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public List<KontainerRoom> Rooms { get; } = new();
    }

    private class KontainerRoom
    {
        public int Id { get; set; }
        public int Number { get; set; }
        public int KontainerId { get; set; }
        public Kontainer Kontainer { get; set; }
        public int? TroductId { get; set; }
        public Troduct Troduct { get; set; }
    }

    private class Troduct
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public List<KontainerRoom> Rooms { get; } = new();
    }

    private class KontainerContext : DbContext
    {
        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
            => modelBuilder.Entity<KontainerRoom>()
                .HasOne(room => room.Troduct)
                .WithMany(product => product.Rooms)
                .HasForeignKey(room => room.TroductId)
                .IsRequired(false)
                .OnDelete(DeleteBehavior.Cascade);

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(InMemoryFixture.DefaultServiceProvider)
                .UseInMemoryDatabase(nameof(KontainerContext));
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Adding_derived_owned_throws(bool useAdd)
    {
        using var context = new EarlyLearningCenter();
        var dreams = new Dreams { Sweet = new Sweet { Id = 1 }, Are = new OfThis() };

        context.Entry(dreams.Sweet).State = EntityState.Unchanged;

        if (useAdd)
        {
            Assert.Equal(
                CoreStrings.TrackingTypeMismatch(nameof(OfThis), ""Dreams.Are#AreMade""),
                Assert.Throws<InvalidOperationException>(() => context.Add(dreams)).Message);
        }
        else
        {
            Assert.Equal(
                CoreStrings.TrackingTypeMismatch(nameof(OfThis), ""Dreams.Are#AreMade""),
                Assert.Throws<InvalidOperationException>(
                    () =>
                        context.ChangeTracker.TrackGraph(
                            dreams, e =>
                            {
                                e.Entry.State = e.Entry.IsKeySet && !e.Entry.Metadata.IsOwned()
                                    ? EntityState.Unchanged
                                    : EntityState.Added;
                            })).Message);
        }
    }

    [ConditionalFact]
    public void Moving_derived_owned_to_non_derived_reference_throws()
    {
        using var context = new EarlyLearningCenter();
        var dreams = new Dreams { Sweet = new Sweet { Id = 1 }, OfThis = new OfThis() };

        context.Entry(dreams.Sweet).State = EntityState.Unchanged;
        context.Add(dreams);

        dreams.Are = dreams.OfThis;
        dreams.OfThis = null;

        Assert.Equal(
            CoreStrings.TrackingTypeMismatch(nameof(OfThis), ""Dreams.Are#AreMade""),
            Assert.Throws<InvalidOperationException>(() => context.Entry(dreams)).Message);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_principal_and_then_identifying_dependents_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var product1 = new Product
        {
            Details = new ProductDetails { Tag = new ProductDetailsTag { TagDetails = new ProductDetailsTagDetails() } }
        };
        var product2 = new Product
        {
            Details = new ProductDetails { Tag = new ProductDetailsTag { TagDetails = new ProductDetailsTagDetails() } }
        };

        context.Add(product1);
        context.Add(product1.Details);
        context.Add(product1.Details.Tag);
        context.Add(product1.Details.Tag.TagDetails);
        context.Add(product2);
        context.Add(product2.Details);
        context.Add(product2.Details.Tag);
        context.Add(product2.Details.Tag.TagDetails);

        AssertProductAndDetailsFixedUp(context, product1.Details.Tag.TagDetails, product2.Details.Tag.TagDetails);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_identifying_dependents_and_then_principal_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var tagDetails1 = new ProductDetailsTagDetails
        {
            Tag = new ProductDetailsTag { Details = new ProductDetails { Product = new Product() } }
        };

        var tagDetails2 = new ProductDetailsTagDetails
        {
            Tag = new ProductDetailsTag { Details = new ProductDetails { Product = new Product() } }
        };

        context.Add(tagDetails1);
        context.Add(tagDetails1.Tag);
        context.Add(tagDetails1.Tag.Details);
        context.Add(tagDetails1.Tag.Details.Product);
        context.Add(tagDetails2);
        context.Add(tagDetails2.Tag);
        context.Add(tagDetails2.Tag.Details);
        context.Add(tagDetails2.Tag.Details.Product);

        AssertProductAndDetailsFixedUp(context, tagDetails1, tagDetails2);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_identifying_dependents_and_then_principal_interleaved_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var tagDetails1 = new ProductDetailsTagDetails
        {
            Tag = new ProductDetailsTag { Details = new ProductDetails { Product = new Product() } }
        };

        var tagDetails2 = new ProductDetailsTagDetails
        {
            Tag = new ProductDetailsTag { Details = new ProductDetails { Product = new Product() } }
        };

        context.Add(tagDetails1);
        context.Add(tagDetails2);
        context.Add(tagDetails1.Tag);
        context.Add(tagDetails2.Tag);
        context.Add(tagDetails2.Tag.Details);
        context.Add(tagDetails1.Tag.Details);
        context.Add(tagDetails1.Tag.Details.Product);
        context.Add(tagDetails2.Tag.Details.Product);

        AssertProductAndDetailsFixedUp(context, tagDetails1, tagDetails2);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_identifying_dependents_and_principal_starting_in_the_middle_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var tagDetails1 = new ProductDetailsTagDetails
        {
            Tag = new ProductDetailsTag { Details = new ProductDetails { Product = new Product() } }
        };

        var tagDetails2 = new ProductDetailsTagDetails
        {
            Tag = new ProductDetailsTag { Details = new ProductDetails { Product = new Product() } }
        };

        context.Add(tagDetails1.Tag);
        context.Add(tagDetails2.Tag);
        context.Add(tagDetails1);
        context.Add(tagDetails2);
        context.Add(tagDetails2.Tag.Details);
        context.Add(tagDetails1.Tag.Details);
        context.Add(tagDetails1.Tag.Details.Product);
        context.Add(tagDetails2.Tag.Details.Product);

        AssertProductAndDetailsFixedUp(context, tagDetails1, tagDetails2);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_principal_and_identifying_dependents_starting_in_the_middle_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var product1 = new Product
        {
            Details = new ProductDetails { Tag = new ProductDetailsTag { TagDetails = new ProductDetailsTagDetails() } }
        };
        var product2 = new Product
        {
            Details = new ProductDetails { Tag = new ProductDetailsTag { TagDetails = new ProductDetailsTagDetails() } }
        };

        context.Add(product1.Details);
        context.Add(product2.Details);
        context.Add(product1.Details.Tag.TagDetails);
        context.Add(product1);
        context.Add(product1.Details.Tag);
        context.Add(product2.Details.Tag);
        context.Add(product2.Details.Tag.TagDetails);
        context.Add(product2);

        AssertProductAndDetailsFixedUp(context, product1.Details.Tag.TagDetails, product2.Details.Tag.TagDetails);
    }

    [ConditionalTheory] // Issue #1207
    [InlineData(false)]
    [InlineData(true)]
    public void Can_add_identifying_dependents_and_principal_with_post_nav_fixup_with_key_generation(bool callDetectChangesTwice)
    {
        using var context = new EarlyLearningCenter();
        var product1 = new Product();
        var details1 = new ProductDetails();
        var tag1 = new ProductDetailsTag();
        var tagDetails1 = new ProductDetailsTagDetails();

        var product2 = new Product();
        var details2 = new ProductDetails();
        var tag2 = new ProductDetailsTag();
        var tagDetails2 = new ProductDetailsTagDetails();

        context.Add(product1);
        context.Add(tagDetails2);
        context.Add(details1);
        context.Add(tag2);
        context.Add(details2);
        context.Add(tag1);
        context.Add(tagDetails1);
        context.Add(product2);

        product1.Details = details1;
        details1.Tag = tag1;
        tag1.TagDetails = tagDetails1;

        product2.Details = details2;
        details2.Tag = tag2;
        tag2.TagDetails = tagDetails2;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        AssertProductAndDetailsFixedUp(context, product1.Details.Tag.TagDetails, product2.Details.Tag.TagDetails);
    }

    [ConditionalTheory] // Issue #1207
    [InlineData(false)]
    [InlineData(true)]
    public void Can_add_identifying_dependents_and_principal_with_reverse_post_nav_fixup_with_key_generation(
        bool callDetectChangesTwice)
    {
        using var context = new EarlyLearningCenter();
        var product1 = new Product();
        var details1 = new ProductDetails();
        var tag1 = new ProductDetailsTag();
        var tagDetails1 = new ProductDetailsTagDetails();

        var product2 = new Product();
        var details2 = new ProductDetails();
        var tag2 = new ProductDetailsTag();
        var tagDetails2 = new ProductDetailsTagDetails();

        context.Add(product1);
        context.Add(tagDetails2);
        context.Add(details1);
        context.Add(tag2);
        context.Add(details2);
        context.Add(tag1);
        context.Add(tagDetails1);
        context.Add(product2);

        tagDetails1.Tag = tag1;
        tag1.Details = details1;
        details1.Product = product1;

        tagDetails2.Tag = tag2;
        tag2.Details = details2;
        details2.Product = product2;

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        AssertProductAndDetailsFixedUp(context, product1.Details.Tag.TagDetails, product2.Details.Tag.TagDetails);
    }

    private static void AssertProductAndDetailsFixedUp(
        DbContext context,
        ProductDetailsTagDetails tagDetails1,
        ProductDetailsTagDetails tagDetails2)
    {
        Assert.Equal(8, context.ChangeTracker.Entries().Count());

        Assert.Equal(EntityState.Added, context.Entry(tagDetails1).State);
        Assert.Equal(EntityState.Added, context.Entry(tagDetails1.Tag).State);
        Assert.Equal(EntityState.Added, context.Entry(tagDetails1.Tag.Details).State);
        Assert.Equal(EntityState.Added, context.Entry(tagDetails1.Tag.Details.Product).State);

        Assert.Equal(EntityState.Added, context.Entry(tagDetails2).State);
        Assert.Equal(EntityState.Added, context.Entry(tagDetails2.Tag).State);
        Assert.Equal(EntityState.Added, context.Entry(tagDetails2.Tag.Details).State);
        Assert.Equal(EntityState.Added, context.Entry(tagDetails2.Tag.Details.Product).State);

        Assert.Equal(tagDetails1.Id, tagDetails1.Tag.Id);
        Assert.Equal(tagDetails1.Id, tagDetails1.Tag.Details.Id);
        Assert.Equal(tagDetails1.Id, tagDetails1.Tag.Details.Product.Id);
        Assert.True(tagDetails1.Id > 0);

        Assert.Equal(tagDetails2.Id, tagDetails2.Tag.Id);
        Assert.Equal(tagDetails2.Id, tagDetails2.Tag.Details.Id);
        Assert.Equal(tagDetails2.Id, tagDetails2.Tag.Details.Product.Id);
        Assert.True(tagDetails2.Id > 0);

        Assert.Same(tagDetails1, tagDetails1.Tag.TagDetails);
        Assert.Same(tagDetails1.Tag, tagDetails1.Tag.Details.Tag);
        Assert.Same(tagDetails1.Tag.Details, tagDetails1.Tag.Details.Product.Details);

        Assert.Same(tagDetails2, tagDetails2.Tag.TagDetails);
        Assert.Same(tagDetails2.Tag, tagDetails2.Tag.Details.Tag);
        Assert.Same(tagDetails2.Tag.Details, tagDetails2.Tag.Details.Product.Details);

        var product1 = tagDetails1.Tag.Details.Product;
        Assert.Same(product1, product1.Details.Product);
        Assert.Same(product1.Details, product1.Details.Tag.Details);
        Assert.Same(product1.Details.Tag, product1.Details.Tag.TagDetails.Tag);

        var product2 = tagDetails2.Tag.Details.Product;
        Assert.Same(product2, product2.Details.Product);
        Assert.Same(product2.Details, product2.Details.Tag.Details);
        Assert.Same(product2.Details.Tag, product2.Details.Tag.TagDetails.Tag);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_identifying_one_to_many_via_principal_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var product1 = new Product();
        var product2 = new Product();

        var order1 = new Order();
        var order2 = new Order();

        var orderDetails1a = new OrderDetails { Order = order1, Product = product1 };
        var orderDetails1b = new OrderDetails { Order = order1, Product = product2 };
        var orderDetails2a = new OrderDetails { Order = order2, Product = product1 };
        var orderDetails2b = new OrderDetails { Order = order2, Product = product2 };

        context.Add(product1);
        context.Add(order1);
        context.Add(orderDetails1a);
        context.Add(orderDetails1b);
        context.Add(product2);
        context.Add(order2);
        context.Add(orderDetails2a);
        context.Add(orderDetails2b);

        AssertOrderAndDetailsFixedUp(context, orderDetails1a, orderDetails1b, orderDetails2a, orderDetails2b);
    }

    [ConditionalFact] // Issue #1207
    public void Can_add_identifying_one_to_many_via_dependents_with_key_generation()
    {
        using var context = new EarlyLearningCenter();
        var product1 = new Product();
        var product2 = new Product();

        var order1 = new Order();
        var order2 = new Order();

        var orderDetails1a = new OrderDetails { Order = order1, Product = product1 };
        var orderDetails1b = new OrderDetails { Order = order1, Product = product2 };
        var orderDetails2a = new OrderDetails { Order = order2, Product = product1 };
        var orderDetails2b = new OrderDetails { Order = order2, Product = product2 };

        context.Add(orderDetails1a);
        context.Add(orderDetails2a);
        context.Add(orderDetails1b);
        context.Add(orderDetails2b);
        context.Add(order1);
        context.Add(product1);
        context.Add(order2);
        context.Add(product2);

        AssertOrderAndDetailsFixedUp(context, orderDetails1a, orderDetails1b, orderDetails2a, orderDetails2b);
    }

    private static void AssertOrderAndDetailsFixedUp(
        DbContext context,
        OrderDetails orderDetails1a,
        OrderDetails orderDetails1b,
        OrderDetails orderDetails2a,
        OrderDetails orderDetails2b)
    {
        Assert.Equal(8, context.ChangeTracker.Entries().Count());

        Assert.Equal(EntityState.Added, context.Entry(orderDetails1a).State);
        Assert.Equal(EntityState.Added, context.Entry(orderDetails1b).State);
        Assert.Equal(EntityState.Added, context.Entry(orderDetails1a.Order).State);
        Assert.Equal(EntityState.Added, context.Entry(orderDetails1b.Product).State);

        Assert.Equal(EntityState.Added, context.Entry(orderDetails2a).State);
        Assert.Equal(EntityState.Added, context.Entry(orderDetails2b).State);
        Assert.Equal(EntityState.Added, context.Entry(orderDetails2a.Order).State);
        Assert.Equal(EntityState.Added, context.Entry(orderDetails2b.Product).State);

        Assert.Equal(orderDetails1a.OrderId, orderDetails1a.Order.Id);
        Assert.Equal(orderDetails1b.OrderId, orderDetails1b.Order.Id);
        Assert.Equal(orderDetails1a.ProductId, orderDetails1a.Product.Id);
        Assert.Equal(orderDetails1b.ProductId, orderDetails1b.Product.Id);
        Assert.True(orderDetails1a.OrderId > 0);
        Assert.True(orderDetails1b.OrderId > 0);
        Assert.True(orderDetails1a.ProductId > 0);
        Assert.True(orderDetails1b.ProductId > 0);

        Assert.Equal(orderDetails2a.OrderId, orderDetails2a.Order.Id);
        Assert.Equal(orderDetails2b.OrderId, orderDetails2b.Order.Id);
        Assert.Equal(orderDetails2a.ProductId, orderDetails2a.Product.Id);
        Assert.Equal(orderDetails2b.ProductId, orderDetails2b.Product.Id);
        Assert.True(orderDetails2a.OrderId > 0);
        Assert.True(orderDetails2b.OrderId > 0);
        Assert.True(orderDetails2a.ProductId > 0);
        Assert.True(orderDetails2b.ProductId > 0);

        Assert.Same(orderDetails1a.Order, orderDetails1b.Order);
        Assert.Same(orderDetails2a.Order, orderDetails2b.Order);

        Assert.Same(orderDetails1a.Product, orderDetails2a.Product);
        Assert.Same(orderDetails1b.Product, orderDetails2b.Product);

        Assert.Equal(2, orderDetails1a.Order.OrderDetails.Count);
        Assert.Equal(2, orderDetails2a.Order.OrderDetails.Count);

        Assert.Contains(orderDetails1a, orderDetails1a.Order.OrderDetails);
        Assert.Contains(orderDetails1b, orderDetails1a.Order.OrderDetails);
        Assert.Contains(orderDetails2a, orderDetails2a.Order.OrderDetails);
        Assert.Contains(orderDetails2b, orderDetails2a.Order.OrderDetails);

        Assert.Equal(2, orderDetails1a.Product.OrderDetails.Count);
        Assert.Equal(2, orderDetails1b.Product.OrderDetails.Count);

        Assert.Contains(orderDetails1a, orderDetails1a.Product.OrderDetails);
        Assert.Contains(orderDetails2a, orderDetails1a.Product.OrderDetails);
        Assert.Contains(orderDetails1b, orderDetails1b.Product.OrderDetails);
        Assert.Contains(orderDetails2b, orderDetails1b.Product.OrderDetails);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Entries_calls_DetectChanges_by_default(bool useGenericOverload)
    {
        using var context = new EarlyLearningCenter();
        var entry = context.Attach(
            new Product { Id = 1, CategoryId = 66 });

        entry.Entity.CategoryId = 77;

        Assert.Equal(EntityState.Unchanged, entry.State);

        if (useGenericOverload)
        {
            context.ChangeTracker.Entries<Product>();
        }
        else
        {
            context.ChangeTracker.Entries();
        }

        Assert.Equal(EntityState.Modified, entry.State);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Auto_DetectChanges_for_Entries_can_be_switched_off(bool useGenericOverload)
    {
        using var context = new EarlyLearningCenter();
        context.ChangeTracker.AutoDetectChangesEnabled = false;

        var entry = context.Attach(
            new Product { Id = 1, CategoryId = 66 });

        entry.Entity.CategoryId = 77;

        Assert.Equal(EntityState.Unchanged, entry.State);

        if (useGenericOverload)
        {
            context.ChangeTracker.Entries<Product>();
        }
        else
        {
            context.ChangeTracker.Entries();
        }

        Assert.Equal(EntityState.Unchanged, entry.State);
    }

    [ConditionalTheory]
    [InlineData(false)]
    [InlineData(true)]
    public void Explicitly_calling_DetectChanges_works_even_if_auto_DetectChanges_is_switched_off(bool callDetectChangesTwice)
    {
        using var context = new EarlyLearningCenter();
        context.ChangeTracker.AutoDetectChangesEnabled = false;

        var entry = context.Attach(
            new Product { Id = 1, CategoryId = 66 });

        entry.Entity.CategoryId = 77;

        Assert.Equal(EntityState.Unchanged, entry.State);

        context.ChangeTracker.DetectChanges();

        if (callDetectChangesTwice)
        {
            context.ChangeTracker.DetectChanges();
        }

        Assert.Equal(EntityState.Modified, entry.State);
    }

    [ConditionalFact]
    public void Does_not_throw_when_instance_of_unmapped_derived_type_is_used()
    {
        using var context = new EarlyLearningCenter();
        Assert.Same(
            context.Model.FindEntityType(typeof(Product)),
            context.Add(new SpecialProduct()).Metadata);
    }

    [ConditionalFact]
    public void Shadow_properties_are_not_included_in_update_unless_value_explicitly_set()
    {
        int id;

        using (var context = new TheShadows())
        {
            var entry = context.Add(new Dark());

            Assert.NotEqual(0, id = entry.Property<int>(""Id"").CurrentValue);
            Assert.Equal(0, entry.Property<int>(""SomeInt"").CurrentValue);
            Assert.Null(entry.Property<string>(""SomeString"").CurrentValue);

            entry.Property<int>(""SomeInt"").CurrentValue = 77;
            entry.Property<string>(""SomeString"").CurrentValue = ""Morden"";

            context.SaveChanges();
        }

        AssertValuesSaved(id, 77, ""Morden"");

        using (var context = new TheShadows())
        {
            var entry = context.Entry(new Dark());
            entry.Property<int>(""Id"").CurrentValue = id;
            entry.State = EntityState.Modified;

            context.SaveChanges();
        }

        AssertValuesSaved(id, 77, ""Morden"");

        using (var context = new TheShadows())
        {
            var entry = context.Entry(new Dark());
            entry.Property<int>(""Id"").CurrentValue = id;
            entry.Property<int>(""SomeInt"").CurrentValue = 78;
            entry.Property<string>(""SomeString"").CurrentValue = ""Mr"";
            entry.State = EntityState.Modified;

            context.SaveChanges();
        }

        AssertValuesSaved(id, 78, ""Mr"");

        using (var context = new TheShadows())
        {
            var entry = context.Entry(new Dark());
            entry.Property<int>(""Id"").CurrentValue = id;
            entry.State = EntityState.Modified;
            entry.Property<int>(""SomeInt"").CurrentValue = 0;
            entry.Property<string>(""SomeString"").CurrentValue = null;

            context.SaveChanges();
        }

        AssertValuesSaved(id, 0, null);
    }

    private static void AssertValuesSaved(int id, int someInt, string someString)
    {
        using var context = new TheShadows();
        var entry = context.Entry(context.Set<Dark>().Single(e => EF.Property<int>(e, ""Id"") == id));

        Assert.Equal(id, entry.Property<int>(""Id"").CurrentValue);
        Assert.Equal(someInt, entry.Property<int>(""SomeInt"").CurrentValue);
        Assert.Equal(someString, entry.Property<string>(""SomeString"").CurrentValue);
    }

    private class TheShadows : DbContext
    {
        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
            => modelBuilder.Entity<Dark>(
                b =>
                {
                    b.Property<int>(""Id"").ValueGeneratedOnAdd();
                    b.Property<int>(""SomeInt"");
                    b.Property<string>(""SomeString"");
                });

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(InMemoryFixture.DefaultServiceProvider)
                .UseInMemoryDatabase(nameof(TheShadows));
    }

    private class Dark
    {
    }

    private class Category
    {
        public int Id { get; set; }

        public List<Product> Products { get; set; }
    }

    private class Product
    {
        public int Id { get; set; }

        public int CategoryId { get; set; }
        public Category Category { get; set; }

        public ProductDetails Details { get; set; }

        // ReSharper disable once CollectionNeverUpdated.Local
        // ReSharper disable once MemberHidesStaticFromOuterClass
        public List<OrderDetails> OrderDetails { get; set; }
    }

    private class OptionalCategory
    {
        public int Id { get; set; }

        public List<OptionalProduct> Products { get; set; }
    }

    private class OptionalProduct
    {
        public int Id { get; set; }

        public int? CategoryId { get; set; }
        public OptionalCategory Category { get; set; }
    }

    private class SpecialProduct : Product
    {
    }

    private class ProductDetails
    {
        public int Id { get; set; }

        public Product Product { get; set; }

        public ProductDetailsTag Tag { get; set; }
    }

    private class ProductDetailsTag
    {
        public int Id { get; set; }

        public ProductDetails Details { get; set; }

        public ProductDetailsTagDetails TagDetails { get; set; }
    }

    private class ProductDetailsTagDetails
    {
        public int Id { get; set; }

        public ProductDetailsTag Tag { get; set; }
    }

    private class Order
    {
        public int Id { get; set; }

        // ReSharper disable once CollectionNeverUpdated.Local
        // ReSharper disable once MemberHidesStaticFromOuterClass
        public List<OrderDetails> OrderDetails { get; set; }
    }

    private class OrderDetails
    {
        public int OrderId { get; set; }
        public int ProductId { get; set; }

        public Order Order { get; set; }
        public Product Product { get; set; }
    }

    private class Sweet
    {
        public int? Id { get; set; }
        public Dreams Dreams { get; set; }
    }

    private class Dreams
    {
        public Sweet Sweet { get; set; }
        public AreMade Are { get; set; }
        public AreMade Made { get; set; }
        public OfThis OfThis { get; set; }
    }

    private class AreMade
    {
    }

    private class OfThis : AreMade
    {
    }

    private class WhoAmI
    {
        public string ToDisagree { get; set; }
    }

    private class PrincipalGG
    {
        public int Id { get; set; }
        public DependentGG DependentGG { get; set; }
    }

    private class DependentGG
    {
        public int Id { get; set; }
        public PrincipalGG PrincipalGG { get; set; }
    }

    private class PrincipalNN
    {
        public int Id { get; set; }
        public DependentNN DependentNN { get; set; }
    }

    private class DependentNN
    {
        public int Id { get; set; }
        public PrincipalNN PrincipalNN { get; set; }
    }

    private class PrincipalNG
    {
        public int Id { get; set; }
        public DependentNG DependentNG { get; set; }
    }

    private class DependentNG
    {
        public int Id { get; set; }
        public PrincipalNG PrincipalNG { get; set; }
    }

    private class PrincipalGN
    {
        public int Id { get; set; }
        public DependentGN DependentGN { get; set; }
    }

    private class DependentGN
    {
        public int Id { get; set; }
        public PrincipalGN PrincipalGN { get; set; }
    }

    private class EarlyLearningCenter : DbContext
    {
        private readonly IServiceProvider _serviceProvider;

        public EarlyLearningCenter()
        {
            _serviceProvider = InMemoryTestHelpers.Instance.CreateServiceProvider();
        }

        protected internal override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Sweet>().OwnsOne(
                e => e.Dreams, b =>
                {
                    b.WithOwner(e => e.Sweet);
                    b.OwnsOne(e => e.Are);
                    b.OwnsOne(e => e.Made);
                    b.OwnsOne(e => e.OfThis);
                });

            modelBuilder.Entity<WhoAmI>().HasNoKey();

            modelBuilder
                .Entity<Category>().HasMany(e => e.Products).WithOne(e => e.Category);

            modelBuilder
                .Entity<ProductDetailsTag>().HasOne(e => e.TagDetails).WithOne(e => e.Tag)
                .HasForeignKey<ProductDetailsTagDetails>(e => e.Id);

            modelBuilder
                .Entity<ProductDetails>().HasOne(e => e.Tag).WithOne(e => e.Details)
                .HasForeignKey<ProductDetailsTag>(e => e.Id);

            modelBuilder
                .Entity<Product>().HasOne(e => e.Details).WithOne(e => e.Product)
                .HasForeignKey<ProductDetails>(e => e.Id);

            modelBuilder.Entity<OrderDetails>(
                b =>
                {
                    b.HasKey(
                        e => new { e.OrderId, e.ProductId });
                    b.HasOne(e => e.Order).WithMany(e => e.OrderDetails).HasForeignKey(e => e.OrderId);
                    b.HasOne(e => e.Product).WithMany(e => e.OrderDetails).HasForeignKey(e => e.ProductId);
                });

            modelBuilder.Entity<OptionalProduct>();

            modelBuilder.Entity<PrincipalNN>(
                b =>
                {
                    b.HasOne(e => e.DependentNN)
                        .WithOne(e => e.PrincipalNN)
                        .HasForeignKey<DependentNN>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedNever();
                });

            modelBuilder.Entity<DependentNN>().Property(e => e.Id).ValueGeneratedNever();

            modelBuilder.Entity<PrincipalGG>(
                b =>
                {
                    b.HasOne(e => e.DependentGG)
                        .WithOne(e => e.PrincipalGG)
                        .HasForeignKey<DependentGG>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedOnAdd();
                });

            modelBuilder.Entity<DependentGG>().Property(e => e.Id).ValueGeneratedOnAdd();

            modelBuilder.Entity<PrincipalNG>(
                b =>
                {
                    b.HasOne(e => e.DependentNG)
                        .WithOne(e => e.PrincipalNG)
                        .HasForeignKey<DependentNG>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedNever();
                });

            modelBuilder.Entity<DependentNG>().Property(e => e.Id).HasValueGenerator<DummyValueGenerator>();

            modelBuilder.Entity<PrincipalGN>(
                b =>
                {
                    b.HasOne(e => e.DependentGN)
                        .WithOne(e => e.PrincipalGN)
                        .HasForeignKey<DependentGN>(e => e.Id);

                    b.Property(e => e.Id).ValueGeneratedOnAdd();
                });

            modelBuilder.Entity<DependentGN>().Property(e => e.Id).ValueGeneratedNever();
        }

        private class DummyValueGenerator : ValueGenerator<int>
        {
            private static int _value;

            public override int Next(EntityEntry entry)
                => _value++;

            public override bool GeneratesTemporaryValues
                => false;
        }

        protected internal override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder
                .UseInternalServiceProvider(_serviceProvider)
                .UseInMemoryDatabase(nameof(EarlyLearningCenter));
    }
}
68847,C#,"public class NumberToStringConverterTest
{
    private static readonly NumberToStringConverter<ulong> _ulongToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_ulongs_to_natural_strings()
    {
        var converter = _ulongToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""18446744073709551615"", converter(ulong.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_ulongs_to_natural_strings_object()
    {
        var converter = _ulongToNaturalString.ConvertToProvider;

        Assert.Equal(""18446744073709551615"", converter(ulong.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((ulong?)77));
        Assert.Equal(""0"", converter((ulong)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ulongs()
    {
        var converter = _ulongToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(ulong.MaxValue, converter(""18446744073709551615""));
        Assert.Equal((ulong)77, converter(""77""));
        Assert.Equal((ulong)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ulongs_object()
    {
        var converter = _ulongToNaturalString.ConvertFromProvider;

        Assert.Equal(ulong.MaxValue, converter(""18446744073709551615""));
        Assert.Equal((ulong)77, converter(""77""));
        Assert.Equal((ulong)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<long> _longToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_longs_to_natural_strings()
    {
        var converter = _longToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""9223372036854775807"", converter(long.MaxValue));
        Assert.Equal(""-9223372036854775808"", converter(long.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_longs_to_natural_strings_object()
    {
        var converter = _longToNaturalString.ConvertToProvider;

        Assert.Equal(""9223372036854775807"", converter(long.MaxValue));
        Assert.Equal(""-9223372036854775808"", converter(long.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((long?)77));
        Assert.Equal(""0"", converter((long)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_longs()
    {
        var converter = _longToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(long.MaxValue, converter(""9223372036854775807""));
        Assert.Equal(long.MinValue, converter(""-9223372036854775808""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-9223372036854775809""));
        Assert.Throws<OverflowException>(() => converter(""9223372036854775808""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_longs_object()
    {
        var converter = _longToNaturalString.ConvertFromProvider;

        Assert.Equal(long.MaxValue, converter(""9223372036854775807""));
        Assert.Equal(long.MinValue, converter(""-9223372036854775808""));
        Assert.Equal((long)77, converter(""77""));
        Assert.Equal((long)-77, converter(""-77""));
        Assert.Equal((long)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-9223372036854775809""));
        Assert.Throws<OverflowException>(() => converter(""9223372036854775808""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<uint> _uintToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_uints_to_natural_strings()
    {
        var converter = _uintToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""4294967295"", converter(uint.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_uints_to_natural_strings_object()
    {
        var converter = _uintToNaturalString.ConvertToProvider;

        Assert.Equal(""4294967295"", converter(uint.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((uint?)77));
        Assert.Equal(""0"", converter((uint)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_uints()
    {
        var converter = _uintToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(uint.MaxValue, converter(""4294967295""));
        Assert.Equal((uint)77, converter(""77""));
        Assert.Equal((uint)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""4294967296""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_uints_object()
    {
        var converter = _uintToNaturalString.ConvertFromProvider;

        Assert.Equal(uint.MaxValue, converter(""4294967295""));
        Assert.Equal((uint)77, converter(""77""));
        Assert.Equal((uint)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""4294967296""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<int> _intToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_ints_to_natural_strings()
    {
        var converter = _intToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""2147483647"", converter(int.MaxValue));
        Assert.Equal(""-2147483648"", converter(int.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_ints_to_natural_strings_object()
    {
        var converter = _intToNaturalString.ConvertToProvider;

        Assert.Equal(""2147483647"", converter(int.MaxValue));
        Assert.Equal(""-2147483648"", converter(int.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((int?)77));
        Assert.Equal(""0"", converter((int?)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ints()
    {
        var converter = _intToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(int.MaxValue, converter(""2147483647""));
        Assert.Equal(int.MinValue, converter(""-2147483648""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-2147483649""));
        Assert.Throws<OverflowException>(() => converter(""2147483648""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ints_object()
    {
        var converter = _intToNaturalString.ConvertFromProvider;

        Assert.Equal(int.MaxValue, converter(""2147483647""));
        Assert.Equal(int.MinValue, converter(""-2147483648""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));

        Assert.Throws<OverflowException>(() => converter(""-2147483649""));
        Assert.Throws<OverflowException>(() => converter(""2147483648""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<ushort> _ushortToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_ushorts_to_natural_strings()
    {
        var converter = _ushortToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""65535"", converter(ushort.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_ushorts_to_natural_strings_object()
    {
        var converter = _ushortToNaturalString.ConvertToProvider;

        Assert.Equal(""65535"", converter(ushort.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((ushort?)77));
        Assert.Equal(""0"", converter((ushort)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ushorts()
    {
        var converter = _ushortToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(ushort.MaxValue, converter(""65535""));
        Assert.Equal((ushort)77, converter(""77""));
        Assert.Equal((ushort)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""65536""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_ushorts_object()
    {
        var converter = _ushortToNaturalString.ConvertFromProvider;

        Assert.Equal(ushort.MaxValue, converter(""65535""));
        Assert.Equal((ushort)77, converter(""77""));
        Assert.Equal((ushort)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""65536""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<short> _shortToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_shorts_to_natural_strings()
    {
        var converter = _shortToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""32767"", converter(short.MaxValue));
        Assert.Equal(""-32768"", converter(short.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_shorts_to_natural_strings_object()
    {
        var converter = _shortToNaturalString.ConvertToProvider;

        Assert.Equal(""32767"", converter(short.MaxValue));
        Assert.Equal(""-32768"", converter(short.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((short?)77));
        Assert.Equal(""0"", converter((short)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_shorts()
    {
        var converter = _shortToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(short.MaxValue, converter(""32767""));
        Assert.Equal(short.MinValue, converter(""-32768""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-32769""));
        Assert.Throws<OverflowException>(() => converter(""32768""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_shorts_object()
    {
        var converter = _shortToNaturalString.ConvertFromProvider;

        Assert.Equal(short.MaxValue, converter(""32767""));
        Assert.Equal(short.MinValue, converter(""-32768""));
        Assert.Equal((short)77, converter(""77""));
        Assert.Equal((short)-77, converter(""-77""));
        Assert.Equal((short)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-32769""));
        Assert.Throws<OverflowException>(() => converter(""32768""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<byte> _byteToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_bytes_to_natural_strings()
    {
        var converter = _byteToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""255"", converter(byte.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_bytes_to_natural_strings_object()
    {
        var converter = _byteToNaturalString.ConvertToProvider;

        Assert.Equal(""255"", converter(byte.MaxValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""77"", converter((byte?)77));
        Assert.Equal(""0"", converter((byte)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_bytes()
    {
        var converter = _byteToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(byte.MaxValue, converter(""255""));
        Assert.Equal((byte)77, converter(""77""));
        Assert.Equal((byte)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""256""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_bytes_object()
    {
        var converter = _byteToNaturalString.ConvertFromProvider;

        Assert.Equal(byte.MaxValue, converter(""255""));
        Assert.Equal((byte)77, converter(""77""));
        Assert.Equal((byte)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-1""));
        Assert.Throws<OverflowException>(() => converter(""256""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<sbyte> _sbyteToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_sbytes_to_natural_strings()
    {
        var converter = _sbyteToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""127"", converter(sbyte.MaxValue));
        Assert.Equal(""-128"", converter(sbyte.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
    }

    [ConditionalFact]
    public void Can_convert_sbytes_to_natural_strings_object()
    {
        var converter = _sbyteToNaturalString.ConvertToProvider;

        Assert.Equal(""127"", converter(sbyte.MaxValue));
        Assert.Equal(""-128"", converter(sbyte.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""77"", converter((sbyte?)77));
        Assert.Equal(""0"", converter((sbyte)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_sbytes()
    {
        var converter = _sbyteToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal(77, converter(""77""));
        Assert.Equal(-77, converter(""-77""));
        Assert.Equal(0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_sbytes_object()
    {
        var converter = _sbyteToNaturalString.ConvertFromProvider;

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal((sbyte)77, converter(""77""));
        Assert.Equal((sbyte)-77, converter(""-77""));
        Assert.Equal((sbyte)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<decimal> _decimalToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_decimals_to_natural_strings()
    {
        var converter = _decimalToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""79228162514264337593543950335"", converter(decimal.MaxValue));
        Assert.Equal(""-79228162514264337593543950335"", converter(decimal.MinValue));
        Assert.Equal(""-792264.3375935"", converter((decimal)-792264.3375935));
        Assert.Equal(""0.000000001"", converter((decimal)0.000000001));
        Assert.Equal(""0.00000000000000000001"", converter((decimal)0.00000000000000000001));
        Assert.Equal(""-0.00000000000000000001"", converter((decimal)-0.00000000000000000001));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_decimals()
    {
        var converter = _decimalToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(decimal.MaxValue, converter(""79228162514264337593543950335""));
        Assert.Equal(decimal.MinValue, converter(""-79228162514264337593543950335""));
        Assert.Equal((decimal)-792264.3375935, converter(""-792264.3375935""));
        Assert.Equal((decimal)0.000000001, converter(""0.000000001""));
        Assert.Equal((decimal)0.00000000000000000001, converter(""0.00000000000000000001""));
        Assert.Equal((decimal)-0.00000000000000000001, converter(""-0.00000000000000000001""));

        Assert.Throws<OverflowException>(() => converter(""-79228162514264337593543950336""));
        Assert.Throws<OverflowException>(() => converter(""79228162514264337593543950336""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_decimals_to_natural_strings_object()
    {
        var converter = _decimalToNaturalString.ConvertToProvider;

        Assert.Equal(""79228162514264337593543950335"", converter(decimal.MaxValue));
        Assert.Equal(""-79228162514264337593543950335"", converter(decimal.MinValue));
        Assert.Equal(""-792264.3375935"", converter((decimal)-792264.3375935));
        Assert.Equal(""0.000000001"", converter((decimal)0.000000001));
        Assert.Equal(""0.00000000000000000001"", converter((decimal)0.00000000000000000001));
        Assert.Equal(""-0.00000000000000000001"", converter((decimal)-0.00000000000000000001));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_decimals_object()
    {
        var converter = _decimalToNaturalString.ConvertFromProvider;

        Assert.Equal(decimal.MaxValue, converter(""79228162514264337593543950335""));
        Assert.Equal(decimal.MinValue, converter(""-79228162514264337593543950335""));
        Assert.Equal((decimal)-792264.3375935, converter(""-792264.3375935""));
        Assert.Equal((decimal)0.000000001, converter(""0.000000001""));
        Assert.Equal((decimal)0.00000000000000000001, converter(""0.00000000000000000001""));
        Assert.Equal((decimal)-0.00000000000000000001, converter(""-0.00000000000000000001""));

        Assert.Throws<OverflowException>(() => converter(""-79228162514264337593543950336""));
        Assert.Throws<OverflowException>(() => converter(""79228162514264337593543950336""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<double> _doubleToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_doubles_to_natural_strings()
    {
        var converter = _doubleToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""1.7976931348623157E+308"", converter(double.MaxValue));
        Assert.Equal(""-1.7976931348623157E+308"", converter(double.MinValue));
        Assert.Equal(""-792264.3375935"", converter(-792264.3375935));
        Assert.Equal(""1E-09"", converter(0.000000001));
        Assert.Equal(""1E-20"", converter(0.00000000000000000001));
        Assert.Equal(""-1E-20"", converter(-0.00000000000000000001));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_doubles()
    {
        var converter = _doubleToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(double.MaxValue, converter(""1.7976931348623157E+308""));
        Assert.Equal(double.MinValue, converter(""-1.7976931348623157E+308""));
        Assert.Equal(-792264.3375935, converter(""-792264.3375935""));
        Assert.Equal(0.000000001, converter(""1E-09""));
        Assert.Equal(0.00000000000000000001, converter(""1E-20""));
        Assert.Equal(-0.00000000000000000001, converter(""-1E-20""));

        Assert.Equal(double.PositiveInfinity, converter(""1.7976931348623157E+309""));
        Assert.Equal(double.NegativeInfinity, converter(""-1.7976931348623157E+309""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_doubles_to_natural_strings_object()
    {
        var converter = _doubleToNaturalString.ConvertToProvider;

        Assert.Equal(""1.7976931348623157E+308"", converter(double.MaxValue));
        Assert.Equal(""-1.7976931348623157E+308"", converter(double.MinValue));
        Assert.Equal(""-792264.3375935"", converter(-792264.3375935));
        Assert.Equal(""1E-09"", converter(0.000000001));
        Assert.Equal(""1E-20"", converter(0.00000000000000000001));
        Assert.Equal(""-1E-20"", converter(-0.00000000000000000001));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_doubles_object()
    {
        var converter = _doubleToNaturalString.ConvertFromProvider;

        Assert.Equal(double.MaxValue, converter(""1.7976931348623157E+308""));
        Assert.Equal(double.MinValue, converter(""-1.7976931348623157E+308""));
        Assert.Equal(-792264.3375935, converter(""-792264.3375935""));
        Assert.Equal(0.000000001, converter(""1E-09""));
        Assert.Equal(0.00000000000000000001, converter(""1E-20""));
        Assert.Equal(-0.00000000000000000001, converter(""-1E-20""));

        Assert.Equal(double.PositiveInfinity, converter(""1.7976931348623157E+309""));
        Assert.Equal(double.NegativeInfinity, converter(""-1.7976931348623157E+309""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<float> _floatToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_floats_to_natural_strings()
    {
        var converter = _floatToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""3.4028235E+38"", converter(float.MaxValue));
        Assert.Equal(""-3.4028235E+38"", converter(float.MinValue));
        Assert.Equal(""-79.3335"", converter((float)-79.3335));
        Assert.Equal(""1E-09"", converter((float)0.000000001));
        Assert.Equal(""1E-20"", converter((float)0.00000000000000000001));
        Assert.Equal(""-1E-20"", converter((float)-0.00000000000000000001));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_floats()
    {
        var converter = _floatToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(float.MaxValue, converter(""3.40282347E+38""));
        Assert.Equal(float.MinValue, converter(""-3.40282347E+38""));
        Assert.Equal((float)-79.3335, converter(""-79.3335""));
        Assert.Equal((float)0.000000001, converter(""1E-09""));
        Assert.Equal((float)0.00000000000000000001, converter(""1E-20""));
        Assert.Equal((float)-0.00000000000000000001, converter(""-1E-20""));

        Assert.Equal(float.PositiveInfinity, converter(""3.40282347E+39""));
        Assert.Equal(float.NegativeInfinity, converter(""-3.40282347E+39""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Throws<ArgumentNullException>(() => converter(null));
    }

    [ConditionalFact]
    public void Can_convert_floats_to_natural_strings_object()
    {
        var converter = _floatToNaturalString.ConvertToProvider;

        Assert.Equal(""3.4028235E+38"", converter(float.MaxValue));
        Assert.Equal(""-3.4028235E+38"", converter(float.MinValue));
        Assert.Equal(""-79.3335"", converter((float)-79.3335));
        Assert.Equal(""1E-09"", converter((float)0.000000001));
        Assert.Equal(""1E-20"", converter((float)0.00000000000000000001));
        Assert.Equal(""-1E-20"", converter((float)-0.00000000000000000001));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_floats_object()
    {
        var converter = _floatToNaturalString.ConvertFromProvider;

        Assert.Equal(float.MaxValue, converter(""3.40282347E+38""));
        Assert.Equal(float.MinValue, converter(""-3.40282347E+38""));
        Assert.Equal((float)-79.3335, converter(""-79.3335""));
        Assert.Equal((float)0.000000001, converter(""1E-09""));
        Assert.Equal((float)0.00000000000000000001, converter(""1E-20""));
        Assert.Equal((float)-0.00000000000000000001, converter(""-1E-20""));

        Assert.Equal(float.PositiveInfinity, converter(""3.40282347E+39""));
        Assert.Equal(float.NegativeInfinity, converter(""-3.40282347E+39""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    private static readonly NumberToStringConverter<sbyte?> _nullableSbyteToNaturalString = new();

    [ConditionalFact]
    public void Can_convert_nullable_sbytes_to_natural_strings()
    {
        var converter = _nullableSbyteToNaturalString.ConvertToProviderExpression.Compile();

        Assert.Equal(""127"", converter(sbyte.MaxValue));
        Assert.Equal(""-128"", converter(sbyte.MinValue));
        Assert.Equal(""77"", converter(77));
        Assert.Equal(""-77"", converter(-77));
        Assert.Equal(""0"", converter(0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_nullable_sbytes_to_natural_strings_object()
    {
        var converter = _nullableSbyteToNaturalString.ConvertToProvider;

        Assert.Equal(""127"", converter((sbyte?)sbyte.MaxValue));
        Assert.Equal(""-128"", converter((sbyte?)sbyte.MinValue));
        Assert.Equal(""77"", converter((sbyte?)77));
        Assert.Equal(""-77"", converter((sbyte?)-77));
        Assert.Equal(""0"", converter((sbyte?)0));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_nullable_sbytes()
    {
        var converter = _nullableSbyteToNaturalString.ConvertFromProviderExpression.Compile();

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal((sbyte?)77, converter(""77""));
        Assert.Equal((sbyte?)-77, converter(""-77""));
        Assert.Equal((sbyte?)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Can_convert_natural_strings_to_nullable_sbytes_object()
    {
        var converter = _nullableSbyteToNaturalString.ConvertFromProvider;

        Assert.Equal(sbyte.MaxValue, converter(""127""));
        Assert.Equal(sbyte.MinValue, converter(""-128""));
        Assert.Equal((sbyte)77, converter(""77""));
        Assert.Equal((sbyte)-77, converter(""-77""));
        Assert.Equal((sbyte?)0, converter(""0""));

        Assert.Throws<OverflowException>(() => converter(""-129""));
        Assert.Throws<OverflowException>(() => converter(""128""));
        Assert.Throws<FormatException>(() => converter(""Not a number""));
        Assert.Null(converter(null));
    }

    [ConditionalFact]
    public void Integer_to_string_converter_throws_for_bad_type()
        => Assert.Equal(
            CoreStrings.ConverterBadType(
                typeof(StringNumberConverter<Guid, string, Guid>).ShortDisplayName(),
                ""Guid"",
                ""'int', 'long', 'short', 'byte', 'uint', 'ulong', 'ushort', 'sbyte', 'decimal', 'float', 'double'""),
            Assert.Throws<InvalidOperationException>(
                () => new NumberToStringConverter<Guid>()).Message);
}",1,439 334 2000 123 437 457 441 2001 60 480 62 2002 61 418 40 41 59 91 2003 93 439 492 2004 40 41 123 490 2005 61 2002 46 2006 46 2007 40 41 59 2008 46 2009 40 648 44 2005 40 480 46 2010 41 41 59 2008 46 2009 40 648 44 2005 40 1503 41 41 59 2008 46 2009 40 648 44 2005 40 1500 41 41 59 125 91 2003 93 439 492 2011 40 41 123 490 2012 61 2002 46 2013 59 2014 46 2015 40 648 44 2012 40 480 46 2016 41 41 59 2014 46 2015 40 648 44 2012 40 1503 41 41 59 2014 46 2015 40 648 44 2012 40 40 480 63 41 1503 41 41 59 2014 46 2015 40 648 44 2012 40 40 480 41 1500 41 41 59 2014 46 2017 40 2012 40 424 41 41 59 125 91 2003 93 439 492 2018 40 41 123 490 2019 61 2002 46 2020 46 2021 40 41 59 2022 46 2023 40 480 46 2024 44 2019 40 648 41 41 59 2022 46 2023 40 40 480 41 1503 44 2019 40 648 41 41 59 2022 46 2023 40 40 480 41 1500 44 2019 40 648 41 41 59 2022 46 2025 60 2026 62 40 40 41 619 2019 40 648 41 41 59 2022 46 2025 60 2027 62 40 40 41 619 2019 40 648 41 41 59 2022 46 2025 60 2028 62 40 40 41 619 2019 40 424 41 41 59 125 91 2003 93 439 492 2029 40 41 123 490 2030 61 2002 46 2031 59 2032 46 2033 40 480 46 2034 44 2030 40 648 41 41 59 2032 46 2033 40 40 480 41 1503 44 2030 40 648 41 41 59 2032 46 2033 40 40 480 41 1500 44 2030 40 648 41 41 59 2032 46 2035 60 2036 62 40 40 41 619 2030 40 648 41 41 59 2032 46 2035 60 2037 62 40 40 41 619 2030 40 648 41 41 59 2032 46 2038 40 2030 40 424 41 41 59 125 437 457 441 2001 60 413 62 2039 61 418 40 41 59 91 2003 93 439 492 2040 40 41 123 490 2041 61 2039 46 2042 46 2043 40 41 59 2044 46 2045 40 648 44 2041 40 413 46 2046 41 41 59 2044 46 2045 40 648 44 2041 40 413 46 2047 41 41 59 2044 46 2045 40 648 44 2041 40 1503 41 41 59 2044 46 2045 40 648 44 2041 40 45 1503 41 41 59 2044 46 2045 40 648 44 2041 40 1500 41 41 59 125 91 2003 93 439 492 2048 40 41 123 490 2049 61 2039 46 2050 59 2051 46 2052 40 648 44 2049 40 413 46 2053 41 41 59 2051 46 2052 40 648 44 2049 40 413 46 2054 41 41 59 2051 46 2052 40 648 44 2049 40 1503 41 41 59 2051 46 2052 40 648 44 2049 40 45 1503 41 41 59 2051 46 2052 40 648 44 2049 40 40 413 63 41 1503 41 41 59 2051 46 2052 40 648 44 2049 40 40 413 41 1500 41 41 59 2051 46 2055 40 2049 40 424 41 41 59 125 91 2003 93 439 492 2056 40 41 123 490 2057 61 2039 46 2058 46 2059 40 41 59 2060 46 2061 40 413 46 2062 44 2057 40 648 41 41 59 2060 46 2061 40 413 46 2063 44 2057 40 648 41 41 59 2060 46 2061 40 1503 44 2057 40 648 41 41 59 2060 46 2061 40 45 1503 44 2057 40 648 41 41 59 2060 46 2061 40 1500 44 2057 40 648 41 41 59 2060 46 2064 60 2065 62 40 40 41 619 2057 40 648 41 41 59 2060 46 2064 60 2065 62 40 40 41 619 2057 40 648 41 41 59 2060 46 2064 60 2066 62 40 40 41 619 2057 40 648 41 41 59 2060 46 2064 60 2067 62 40 40 41 619 2057 40 424 41 41 59 125 91 2003 93 439 492 2068 40 41 123 490 2069 61 2039 46 2070 59 2071 46 2072 40 413 46 2073 44 2069 40 648 41 41 59 2071 46 2072 40 413 46 2074 44 2069 40 648 41 41 59 2071 46 2072 40 40 413 41 1503 44 2069 40 648 41 41 59 2071 46 2072 40 40 413 41 45 1503 44 2069 40 648 41 41 59 2071 46 2072 40 40 413 41 1500 44 2069 40 648 41 41 59 2071 46 2075 60 2076 62 40 40 41 619 2069 40 648 41 41 59 2071 46 2075 60 2076 62 40 40 41 619 2069 40 648 41 41 59 2071 46 2075 60 2077 62 40 40 41 619 2069 40 648 41 41 59 2071 46 2078 40 2069 40 424 41 41 59 125 437 457 441 2001 60 479 62 2079 61 418 40 41 59 91 2003 93 439 492 2080 40 41 123 490 2081 61 2079 46 2082 46 2083 40 41 59 2084 46 2085 40 648 44 2081 40 479 46 2086 41 41 59 2084 46 2085 40 648 44 2081 40 1503 41 41 59 2084 46 2085 40 648 44 2081 40 1500 41 41 59 125 91 2003 93 439 492 2087 40 41 123 490 2088 61 2079 46 2089 59 2090 46 2091 40 648 44 2088 40 479 46 2092 41 41 59 2090 46 2091 40 648 44 2088 40 1503 41 41 59 2090 46 2091 40 648 44 2088 40 40 479 63 41 1503 41 41 59 2090 46 2091 40 648 44 2088 40 40 479 41 1500 41 41 59 2090 46 2093 40 2088 40 424 41 41 59 125 91 2003 93 439 492 2094 40 41 123 490 2095 61 2079 46 2096 46 2097 40 41 59 2098 46 2099 40 479 46 2100 44 2095 40 648 41 41 59 2098 46 2099 40 40 479 41 1503 44 2095 40 648 41 41 59 2098 46 2099 40 40 479 41 1500 44 2095 40 648 41 41 59 2098 46 2101 60 2102 62 40 40 41 619 2095 40 648 41 41 59 2098 46 2101 60 2102 62 40 40 41 619 2095 40 648 41 41 59 2098 46 2101 60 2103 62 40 40 41 619 2095 40 648 41 41 59 2098 46 2101 60 2104 62 40 40 41 619 2095 40 424 41 41 59 125 91 2003 93 439 492 2105 40 41 123 490 2106 61 2079 46 2107 59 2108 46 2109 40 479 46 2110 44 2106 40 648 41 41 59 2108 46 2109 40 40 479 41 1503 44 2106 40 648 41 41 59 2108 46 2109 40 40 479 41 1500 44 2106 40 648 41 41 59 2108 46 2111 60 2112 62 40 40 41 619 2106 40 648 41 41 59 2108 46 2111 60 2112 62 40 40 41 619 2106 40 648 41 41 59 2108 46 2111 60 2113 62 40 40 41 619 2106 40 648 41 41 59 2108 46 2114 40 2106 40 424 41 41 59 125 437 457 441 2001 60 404 62 2115 61 418 40 41 59 91 2003 93 439 492 2116 40 41 123 490 2117 61 2115 46 2118 46 2119 40 41 59 2120 46 2121 40 648 44 2117 40 404 46 2122 41 41 59 2120 46 2121 40 648 44 2117 40 404 46 2123 41 41 59 2120 46 2121 40 648 44 2117 40 1503 41 41 59 2120 46 2121 40 648 44 2117 40 45 1503 41 41 59 2120 46 2121 40 648 44 2117 40 1500 41 41 59 125 91 2003 93 439 492 2124 40 41 123 490 2125 61 2115 46 2126 59 2127 46 2128 40 648 44 2125 40 404 46 2129 41 41 59 2127 46 2128 40 648 44 2125 40 404 46 2130 41 41 59 2127 46 2128 40 648 44 2125 40 1503 41 41 59 2127 46 2128 40 648 44 2125 40 45 1503 41 41 59 2127 46 2128 40 648 44 2125 40 40 404 63 41 1503 41 41 59 2127 46 2128 40 648 44 2125 40 40 404 63 41 1500 41 41 59 2127 46 2131 40 2125 40 424 41 41 59 125 91 2003 93 439 492 2132 40 41 123 490 2133 61 2115 46 2134 46 2135 40 41 59 2136 46 2137 40 404 46 2138 44 2133 40 648 41 41 59 2136 46 2137 40 404 46 2139 44 2133 40 648 41 41 59 2136 46 2137 40 1503 44 2133 40 648 41 41 59 2136 46 2137 40 45 1503 44 2133 40 648 41 41 59 2136 46 2137 40 1500 44 2133 40 648 41 41 59 2136 46 2140 60 2141 62 40 40 41 619 2133 40 648 41 41 59 2136 46 2140 60 2141 62 40 40 41 619 2133 40 648 41 41 59 2136 46 2140 60 2142 62 40 40 41 619 2133 40 648 41 41 59 2136 46 2140 60 2143 62 40 40 41 619 2133 40 424 41 41 59 125 91 2003 93 439 492 2144 40 41 123 490 2145 61 2115 46 2146 59 2147 46 2148 40 404 46 2149 44 2145 40 648 41 41 59 2147 46 2148 40 404 46 2150 44 2145 40 648 41 41 59 2147 46 2148 40 1503 44 2145 40 648 41 41 59 2147 46 2148 40 45 1503 44 2145 40 648 41 41 59 2147 46 2151 60 2152 62 40 40 41 619 2145 40 648 41 41 59 2147 46 2151 60 2152 62 40 40 41 619 2145 40 648 41 41 59 2147 46 2151 60 2153 62 40 40 41 619 2145 40 648 41 41 59 2147 46 2154 40 2145 40 424 41 41 59 125 437 457 441 2001 60 488 62 2155 61 418 40 41 59 91 2003 93 439 492 2156 40 41 123 490 2157 61 2155 46 2158 46 2159 40 41 59 2160 46 2161 40 648 44 2157 40 488 46 2162 41 41 59 2160 46 2161 40 648 44 2157 40 1503 41 41 59 2160 46 2161 40 648 44 2157 40 1500 41 41 59 125 91 2003 93 439 492 2163 40 41 123 490 2164 61 2155 46 2165 59 2166 46 2167 40 648 44 2164 40 488 46 2168 41 41 59 2166 46 2167 40 648 44 2164 40 1503 41 41 59 2166 46 2167 40 648 44 2164 40 40 488 63 41 1503 41 41 59 2166 46 2167 40 648 44 2164 40 40 488 41 1500 41 41 59 2166 46 2169 40 2164 40 424 41 41 59 125 91 2003 93 439 492 2170 40 41 123 490 2171 61 2155 46 2172 46 2173 40 41 59 2174 46 2175 40 488 46 2176 44 2171 40 648 41 41 59 2174 46 2175 40 40 488 41 1503 44 2171 40 648 41 41 59 2174 46 2175 40 40 488 41 1500 44 2171 40 648 41 41 59 2174 46 2177 60 2178 62 40 40 41 619 2171 40 648 41 41 59 2174 46 2177 60 2178 62 40 40 41 619 2171 40 648 41 41 59 2174 46 2177 60 2179 62 40 40 41 619 2171 40 648 41 41 59 2174 46 2177 60 2180 62 40 40 41 619 2171 40 424 41 41 59 125 91 2003 93 439 492 2181 40 41 123 490 2182 61 2155 46 2183 59 2184 46 2185 40 488 46 2186 44 2182 40 648 41 41 59 2184 46 2185 40 40 488 41 1503 44 2182 40 648 41 41 59 2184 46 2185 40 40 488 41 1500 44 2182 40 648 41 41 59 2184 46 2187 60 2188 62 40 40 41 619 2182 40 648 41 41 59 2184 46 2187 60 2188 62 40 40 41 619 2182 40 648 41 41 59 2184 46 2187 60 2189 62 40 40 41 619 2182 40 648 41 41 59 2184 46 2190 40 2182 40 424 41 41 59 125 437 457 441 2001 60 453 62 2191 61 418 40 41 59 91 2003 93 439 492 2192 40 41 123 490 2193 61 2191 46 2194 46 2195 40 41 59 2196 46 2197 40 648 44 2193 40 453 46 2198 41 41 59 2196 46 2197 40 648 44 2193 40 453 46 2199 41 41 59 2196 46 2197 40 648 44 2193 40 1503 41 41 59 2196 46 2197 40 648 44 2193 40 45 1503 41 41 59 2196 46 2197 40 648 44 2193 40 1500 41 41 59 125 91 2003 93 439 492 2200 40 41 123 490 2201 61 2191 46 2202 59 2203 46 2204 40 648 44 2201 40 453 46 2205 41 41 59 2203 46 2204 40 648 44 2201 40 453 46 2206 41 41 59 2203 46 2204 40 648 44 2201 40 1503 41 41 59 2203 46 2204 40 648 44 2201 40 45 1503 41 41 59 2203 46 2204 40 648 44 2201 40 40 453 63 41 1503 41 41 59 2203 46 2204 40 648 44 2201 40 40 453 41 1500 41 41 59 2203 46 2207 40 2201 40 424 41 41 59 125 91 2003 93 439 492 2208 40 41 123 490 2209 61 2191 46 2210 46 2211 40 41 59 2212 46 2213 40 453 46 2214 44 2209 40 648 41 41 59 2212 46 2213 40 453 46 2215 44 2209 40 648 41 41 59 2212 46 2213 40 1503 44 2209 40 648 41 41 59 2212 46 2213 40 45 1503 44 2209 40 648 41 41 59 2212 46 2213 40 1500 44 2209 40 648 41 41 59 2212 46 2216 60 2217 62 40 40 41 619 2209 40 648 41 41 59 2212 46 2216 60 2217 62 40 40 41 619 2209 40 648 41 41 59 2212 46 2216 60 2218 62 40 40 41 619 2209 40 648 41 41 59 2212 46 2216 60 2219 62 40 40 41 619 2209 40 424 41 41 59 125 91 2003 93 439 492 2220 40 41 123 490 2221 61 2191 46 2222 59 2223 46 2224 40 453 46 2225 44 2221 40 648 41 41 59 2223 46 2224 40 453 46 2226 44 2221 40 648 41 41 59 2223 46 2224 40 40 453 41 1503 44 2221 40 648 41 41 59 2223 46 2224 40 40 453 41 45 1503 44 2221 40 648 41 41 59 2223 46 2224 40 40 453 41 1500 44 2221 40 648 41 41 59 2223 46 2227 60 2228 62 40 40 41 619 2221 40 648 41 41 59 2223 46 2227 60 2228 62 40 40 41 619 2221 40 648 41 41 59 2223 46 2227 60 2229 62 40 40 41 619 2221 40 648 41 41 59 2223 46 2230 40 2221 40 424 41 41 59 125 437 457 441 2001 60 326 62 2231 61 418 40 41 59 91 2003 93 439 492 2232 40 41 123 490 2233 61 2231 46 2234 46 2235 40 41 59 2236 46 2237 40 648 44 2233 40 326 46 2238 41 41 59 2236 46 2237 40 648 44 2233 40 1503 41 41 59 2236 46 2237 40 648 44 2233 40 1500 41 41 59 125 91 2003 93 439 492 2239 40 41 123 490 2240 61 2231 46 2241 59 2242 46 2243 40 648 44 2240 40 326 46 2244 41 41 59 2242 46 2243 40 648 44 2240 40 1503 41 41 59 2242 46 2243 40 648 44 2240 40 40 326 63 41 1503 41 41 59 2242 46 2243 40 648 44 2240 40 40 326 41 1500 41 41 59 2242 46 2245 40 2240 40 424 41 41 59 125 91 2003 93 439 492 2246 40 41 123 490 2247 61 2231 46 2248 46 2249 40 41 59 2250 46 2251 40 326 46 2252 44 2247 40 648 41 41 59 2250 46 2251 40 40 326 41 1503 44 2247 40 648 41 41 59 2250 46 2251 40 40 326 41 1500 44 2247 40 648 41 41 59 2250 46 2253 60 2254 62 40 40 41 619 2247 40 648 41 41 59 2250 46 2253 60 2254 62 40 40 41 619 2247 40 648 41 41 59 2250 46 2253 60 2255 62 40 40 41 619 2247 40 424 41 41 59 125 91 2003 93 439 492 2256 40 41 123 490 2257 61 2231 46 2258 59 2259 46 2260 40 326 46 2261 44 2257 40 648 41 41 59 2259 46 2260 40 40 326 41 1503 44 2257 40 648 41 41 59 2259 46 2260 40 40 326 41 1500 44 2257 40 648 41 41 59 2259 46 2262 60 2263 62 40 40 41 619 2257 40 648 41 41 59 2259 46 2262 60 2263 62 40 40 41 619 2257 40 648 41 41 59 2259 46 2264 40 2257 40 424 41 41 59 125 437 457 441 2001 60 451 62 2265 61 418 40 41 59 91 2003 93 439 492 2266 40 41 123 490 2267 61 2265 46 2268 46 2269 40 41 59 2270 46 2271 40 648 44 2267 40 451 46 2272 41 41 59 2270 46 2271 40 648 44 2267 40 451 46 2273 41 41 59 2270 46 2271 40 648 44 2267 40 1503 41 41 59 2270 46 2271 40 648 44 2267 40 45 1503 41 41 59 2270 46 2271 40 648 44 2267 40 1500 41 41 59 125 91 2003 93 439 492 2274 40 41 123 490 2275 61 2265 46 2276 59 2277 46 2278 40 648 44 2275 40 451 46 2279 41 41 59 2277 46 2278 40 648 44 2275 40 451 46 2280 41 41 59 2277 46 2278 40 648 44 2275 40 1503 41 41 59 2277 46 2278 40 648 44 2275 40 45 1503 41 41 59 2277 46 2278 40 648 44 2275 40 40 451 63 41 1503 41 41 59 2277 46 2278 40 648 44 2275 40 40 451 41 1500 41 41 59 2277 46 2281 40 2275 40 424 41 41 59 125 91 2003 93 439 492 2282 40 41 123 490 2283 61 2265 46 2284 46 2285 40 41 59 2286 46 2287 40 451 46 2288 44 2283 40 648 41 41 59 2286 46 2287 40 451 46 2289 44 2283 40 648 41 41 59 2286 46 2287 40 1503 44 2283 40 648 41 41 59 2286 46 2287 40 45 1503 44 2283 40 648 41 41 59 2286 46 2287 40 1500 44 2283 40 648 41 41 59 2286 46 2290 60 2291 62 40 40 41 619 2283 40 648 41 41 59 2286 46 2290 60 2291 62 40 40 41 619 2283 40 648 41 41 59 2286 46 2290 60 2292 62 40 40 41 619 2283 40 648 41 41 59 2286 46 2290 60 2293 62 40 40 41 619 2283 40 424 41 41 59 125 91 2003 93 439 492 2294 40 41 123 490 2295 61 2265 46 2296 59 2297 46 2298 40 451 46 2299 44 2295 40 648 41 41 59 2297 46 2298 40 451 46 2300 44 2295 40 648 41 41 59 2297 46 2298 40 40 451 41 1503 44 2295 40 648 41 41 59 2297 46 2298 40 40 451 41 45 1503 44 2295 40 648 41 41 59 2297 46 2298 40 40 451 41 1500 44 2295 40 648 41 41 59 2297 46 2301 60 2302 62 40 40 41 619 2295 40 648 41 41 59 2297 46 2301 60 2302 62 40 40 41 619 2295 40 648 41 41 59 2297 46 2301 60 2303 62 40 40 41 619 2295 40 648 41 41 59 2297 46 2304 40 2295 40 424 41 41 59 125 437 457 441 2001 60 345 62 2305 61 418 40 41 59 91 2003 93 439 492 2306 40 41 123 490 2307 61 2305 46 2308 46 2309 40 41 59 2310 46 2311 40 648 44 2307 40 345 46 2312 41 41 59 2310 46 2311 40 648 44 2307 40 345 46 2313 41 41 59 2310 46 2311 40 648 44 2307 40 40 345 41 45 1507 41 41 59 2310 46 2311 40 648 44 2307 40 40 345 41 1491 41 41 59 2310 46 2311 40 648 44 2307 40 40 345 41 1480 41 41 59 2310 46 2311 40 648 44 2307 40 40 345 41 45 1480 41 41 59 125 91 2003 93 439 492 2314 40 41 123 490 2315 61 2305 46 2316 46 2317 40 41 59 2318 46 2319 40 345 46 2320 44 2315 40 648 41 41 59 2318 46 2319 40 345 46 2321 44 2315 40 648 41 41 59 2318 46 2319 40 40 345 41 45 1507 44 2315 40 648 41 41 59 2318 46 2319 40 40 345 41 1491 44 2315 40 648 41 41 59 2318 46 2319 40 40 345 41 1480 44 2315 40 648 41 41 59 2318 46 2319 40 40 345 41 45 1480 44 2315 40 648 41 41 59 2318 46 2322 60 2323 62 40 40 41 619 2315 40 648 41 41 59 2318 46 2322 60 2323 62 40 40 41 619 2315 40 648 41 41 59 2318 46 2322 60 2324 62 40 40 41 619 2315 40 648 41 41 59 2318 46 2322 60 2325 62 40 40 41 619 2315 40 424 41 41 59 125 91 2003 93 439 492 2326 40 41 123 490 2327 61 2305 46 2328 59 2329 46 2330 40 648 44 2327 40 345 46 2331 41 41 59 2329 46 2330 40 648 44 2327 40 345 46 2332 41 41 59 2329 46 2330 40 648 44 2327 40 40 345 41 45 1507 41 41 59 2329 46 2330 40 648 44 2327 40 40 345 41 1491 41 41 59 2329 46 2330 40 648 44 2327 40 40 345 41 1480 41 41 59 2329 46 2330 40 648 44 2327 40 40 345 41 45 1480 41 41 59 125 91 2003 93 439 492 2333 40 41 123 490 2334 61 2305 46 2335 59 2336 46 2337 40 345 46 2338 44 2334 40 648 41 41 59 2336 46 2337 40 345 46 2339 44 2334 40 648 41 41 59 2336 46 2337 40 40 345 41 45 1507 44 2334 40 648 41 41 59 2336 46 2337 40 40 345 41 1491 44 2334 40 648 41 41 59 2336 46 2337 40 40 345 41 1480 44 2334 40 648 41 41 59 2336 46 2337 40 40 345 41 45 1480 44 2334 40 648 41 41 59 2336 46 2340 60 2341 62 40 40 41 619 2334 40 648 41 41 59 2336 46 2340 60 2341 62 40 40 41 619 2334 40 648 41 41 59 2336 46 2340 60 2342 62 40 40 41 619 2334 40 648 41 41 59 2336 46 2343 40 2334 40 424 41 41 59 125 437 457 441 2001 60 356 62 2344 61 418 40 41 59 91 2003 93 439 492 2345 40 41 123 490 2346 61 2344 46 2347 46 2348 40 41 59 2349 46 2350 40 648 44 2346 40 356 46 2351 41 41 59 2349 46 2350 40 648 44 2346 40 356 46 2352 41 41 59 2349 46 2350 40 648 44 2346 40 45 1507 41 41 59 2349 46 2350 40 648 44 2346 40 1491 41 41 59 2349 46 2350 40 648 44 2346 40 1480 41 41 59 2349 46 2350 40 648 44 2346 40 45 1480 41 41 59 125 91 2003 93 439 492 2353 40 41 123 490 2354 61 2344 46 2355 46 2356 40 41 59 2357 46 2358 40 356 46 2359 44 2354 40 648 41 41 59 2357 46 2358 40 356 46 2360 44 2354 40 648 41 41 59 2357 46 2358 40 45 1507 44 2354 40 648 41 41 59 2357 46 2358 40 1491 44 2354 40 648 41 41 59 2357 46 2358 40 1480 44 2354 40 648 41 41 59 2357 46 2358 40 45 1480 44 2354 40 648 41 41 59 2357 46 2358 40 356 46 2361 44 2354 40 648 41 41 59 2357 46 2358 40 356 46 2362 44 2354 40 648 41 41 59 2357 46 2363 60 2364 62 40 40 41 619 2354 40 648 41 41 59 2357 46 2363 60 2365 62 40 40 41 619 2354 40 424 41 41 59 125 91 2003 93 439 492 2366 40 41 123 490 2367 61 2344 46 2368 59 2369 46 2370 40 648 44 2367 40 356 46 2371 41 41 59 2369 46 2370 40 648 44 2367 40 356 46 2372 41 41 59 2369 46 2370 40 648 44 2367 40 45 1507 41 41 59 2369 46 2370 40 648 44 2367 40 1491 41 41 59 2369 46 2370 40 648 44 2367 40 1480 41 41 59 2369 46 2370 40 648 44 2367 40 45 1480 41 41 59 125 91 2003 93 439 492 2373 40 41 123 490 2374 61 2344 46 2375 59 2376 46 2377 40 356 46 2378 44 2374 40 648 41 41 59 2376 46 2377 40 356 46 2379 44 2374 40 648 41 41 59 2376 46 2377 40 45 1507 44 2374 40 648 41 41 59 2376 46 2377 40 1491 44 2374 40 648 41 41 59 2376 46 2377 40 1480 44 2374 40 648 41 41 59 2376 46 2377 40 45 1480 44 2374 40 648 41 41 59 2376 46 2377 40 356 46 2380 44 2374 40 648 41 41 59 2376 46 2377 40 356 46 2381 44 2374 40 648 41 41 59 2376 46 2382 60 2383 62 40 40 41 619 2374 40 648 41 41 59 2376 46 2384 40 2374 40 424 41 41 59 125 437 457 441 2001 60 384 62 2385 61 418 40 41 59 91 2003 93 439 492 2386 40 41 123 490 2387 61 2385 46 2388 46 2389 40 41 59 2390 46 2391 40 648 44 2387 40 384 46 2392 41 41 59 2390 46 2391 40 648 44 2387 40 384 46 2393 41 41 59 2390 46 2391 40 648 44 2387 40 40 384 41 45 1503 41 41 59 2390 46 2391 40 648 44 2387 40 40 384 41 1491 41 41 59 2390 46 2391 40 648 44 2387 40 40 384 41 1480 41 41 59 2390 46 2391 40 648 44 2387 40 40 384 41 45 1480 41 41 59 125 91 2003 93 439 492 2394 40 41 123 490 2395 61 2385 46 2396 46 2397 40 41 59 2398 46 2399 40 384 46 2400 44 2395 40 648 41 41 59 2398 46 2399 40 384 46 2401 44 2395 40 648 41 41 59 2398 46 2399 40 40 384 41 45 1503 44 2395 40 648 41 41 59 2398 46 2399 40 40 384 41 1491 44 2395 40 648 41 41 59 2398 46 2399 40 40 384 41 1480 44 2395 40 648 41 41 59 2398 46 2399 40 40 384 41 45 1480 44 2395 40 648 41 41 59 2398 46 2399 40 384 46 2402 44 2395 40 648 41 41 59 2398 46 2399 40 384 46 2403 44 2395 40 648 41 41 59 2398 46 2404 60 2405 62 40 40 41 619 2395 40 648 41 41 59 2398 46 2404 60 2406 62 40 40 41 619 2395 40 424 41 41 59 125 91 2003 93 439 492 2407 40 41 123 490 2408 61 2385 46 2409 59 2410 46 2411 40 648 44 2408 40 384 46 2412 41 41 59 2410 46 2411 40 648 44 2408 40 384 46 2413 41 41 59 2410 46 2411 40 648 44 2408 40 40 384 41 45 1503 41 41 59 2410 46 2411 40 648 44 2408 40 40 384 41 1491 41 41 59 2410 46 2411 40 648 44 2408 40 40 384 41 1480 41 41 59 2410 46 2411 40 648 44 2408 40 40 384 41 45 1480 41 41 59 125 91 2003 93 439 492 2414 40 41 123 490 2415 61 2385 46 2416 59 2417 46 2418 40 384 46 2419 44 2415 40 648 41 41 59 2417 46 2418 40 384 46 2420 44 2415 40 648 41 41 59 2417 46 2418 40 40 384 41 45 1503 44 2415 40 648 41 41 59 2417 46 2418 40 40 384 41 1491 44 2415 40 648 41 41 59 2417 46 2418 40 40 384 41 1480 44 2415 40 648 41 41 59 2417 46 2418 40 40 384 41 45 1480 44 2415 40 648 41 41 59 2417 46 2418 40 384 46 2421 44 2415 40 648 41 41 59 2417 46 2418 40 384 46 2422 44 2415 40 648 41 41 59 2417 46 2423 60 2424 62 40 40 41 619 2415 40 648 41 41 59 2417 46 2425 40 2415 40 424 41 41 59 125 437 457 441 2001 60 451 63 62 2426 61 418 40 41 59 91 2003 93 439 492 2427 40 41 123 490 2428 61 2426 46 2429 46 2430 40 41 59 2431 46 2432 40 648 44 2428 40 451 46 2433 41 41 59 2431 46 2432 40 648 44 2428 40 451 46 2434 41 41 59 2431 46 2432 40 648 44 2428 40 1503 41 41 59 2431 46 2432 40 648 44 2428 40 45 1503 41 41 59 2431 46 2432 40 648 44 2428 40 1500 41 41 59 2431 46 2435 40 2428 40 424 41 41 59 125 91 2003 93 439 492 2436 40 41 123 490 2437 61 2426 46 2438 59 2439 46 2440 40 648 44 2437 40 40 451 63 41 451 46 2441 41 41 59 2439 46 2440 40 648 44 2437 40 40 451 63 41 451 46 2442 41 41 59 2439 46 2440 40 648 44 2437 40 40 451 63 41 1503 41 41 59 2439 46 2440 40 648 44 2437 40 40 451 63 41 45 1503 41 41 59 2439 46 2440 40 648 44 2437 40 40 451 63 41 1500 41 41 59 2439 46 2443 40 2437 40 424 41 41 59 125 91 2003 93 439 492 2444 40 41 123 490 2445 61 2426 46 2446 46 2447 40 41 59 2448 46 2449 40 451 46 2450 44 2445 40 648 41 41 59 2448 46 2449 40 451 46 2451 44 2445 40 648 41 41 59 2448 46 2449 40 40 451 63 41 1503 44 2445 40 648 41 41 59 2448 46 2449 40 40 451 63 41 45 1503 44 2445 40 648 41 41 59 2448 46 2449 40 40 451 63 41 1500 44 2445 40 648 41 41 59 2448 46 2452 60 2453 62 40 40 41 619 2445 40 648 41 41 59 2448 46 2452 60 2453 62 40 40 41 619 2445 40 648 41 41 59 2448 46 2452 60 2454 62 40 40 41 619 2445 40 648 41 41 59 2448 46 2455 40 2445 40 424 41 41 59 125 91 2003 93 439 492 2456 40 41 123 490 2457 61 2426 46 2458 59 2459 46 2460 40 451 46 2461 44 2457 40 648 41 41 59 2459 46 2460 40 451 46 2462 44 2457 40 648 41 41 59 2459 46 2460 40 40 451 41 1503 44 2457 40 648 41 41 59 2459 46 2460 40 40 451 41 45 1503 44 2457 40 648 41 41 59 2459 46 2460 40 40 451 63 41 1500 44 2457 40 648 41 41 59 2459 46 2463 60 2464 62 40 40 41 619 2457 40 648 41 41 59 2459 46 2463 60 2464 62 40 40 41 619 2457 40 648 41 41 59 2459 46 2463 60 2465 62 40 40 41 619 2457 40 648 41 41 59 2459 46 2466 40 2457 40 424 41 41 59 125 91 2003 93 439 492 2467 40 41 619 2468 46 2469 40 2470 46 2471 40 478 40 2472 60 2473 44 461 44 2473 62 41 46 2474 40 41 44 648 44 648 41 44 2468 46 2475 60 2476 62 40 40 41 619 418 2001 60 2473 62 40 41 41 46 2477 41 59 125 
70110,C#,"public class SpatialQuerySqlServerGeometryTest : SpatialQueryRelationalTestBase<SpatialQuerySqlServerGeometryFixture>
{
    public SpatialQuerySqlServerGeometryTest(SpatialQuerySqlServerGeometryFixture fixture, ITestOutputHelper testOutputHelper)
        : base(fixture)
    {
        Fixture.TestSqlLoggerFactory.Clear();
        //Fixture.TestSqlLoggerFactory.SetTestOutputHelper(testOutputHelper);
    }

    protected override bool CanExecuteQueryString
        => true;

    public override async Task SimpleSelect(bool async)
    {
        await base.SimpleSelect(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Geometry], [p].[Point], [p].[PointM], [p].[PointZ], [p].[PointZM]
FROM [PointEntity] AS [p]"",
            //
            @""SELECT [l].[Id], [l].[LineString]
FROM [LineStringEntity] AS [l]"",
            //
            @""SELECT [p].[Id], [p].[Polygon]
FROM [PolygonEntity] AS [p]"",
            //
            @""SELECT [m].[Id], [m].[MultiLineString]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override async Task WithConversion(bool async)
    {
        await base.WithConversion(async);

        AssertSql(
            @""SELECT [g].[Id], [g].[Location]
FROM [GeoPointEntity] AS [g]"");
    }

    public override async Task Area(bool async)
    {
        await base.Area(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STArea() AS [Area]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task AsBinary(bool async)
    {
        await base.AsBinary(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STAsBinary() AS [Binary]
FROM [PointEntity] AS [p]"");
    }

    public override async Task AsBinary_with_null_check(bool async)
    {
        await base.AsBinary_with_null_check(async);

        AssertSql(
            @""SELECT [p].[Id], CASE
    WHEN [p].[Point] IS NULL THEN NULL
    ELSE [p].[Point].STAsBinary()
END AS [Binary]
FROM [PointEntity] AS [p]"");
    }

    public override async Task AsText(bool async)
    {
        await base.AsText(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].AsTextZM() AS [Text]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Boundary(bool async)
    {
        await base.Boundary(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STBoundary() AS [Boundary]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Buffer(bool async)
    {
        await base.Buffer(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STBuffer(1.0E0) AS [Buffer]
FROM [PolygonEntity] AS [p]"");
    }

    // No SqlServer Translation
    public override Task Buffer_quadrantSegments(bool async)
        => Task.CompletedTask;

    public override async Task Centroid(bool async)
    {
        await base.Centroid(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STCentroid() AS [Centroid]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Contains(bool async)
    {
        await base.Contains(async);

        AssertSql(
            @""@__point_0='0x00000000010C000000000000D03F000000000000D03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STContains(@__point_0) AS [Contains]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task ConvexHull(bool async)
    {
        await base.ConvexHull(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STConvexHull() AS [ConvexHull]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task IGeometryCollection_Count(bool async)
    {
        await base.IGeometryCollection_Count(async);

        AssertSql(
            @""SELECT [m].[Id], [m].[MultiLineString].STNumGeometries() AS [Count]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override async Task LineString_Count(bool async)
    {
        await base.LineString_Count(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STNumPoints() AS [Count]
FROM [LineStringEntity] AS [l]"");
    }

    // No SqlServer Translation
    public override Task CoveredBy(bool async)
        => Task.CompletedTask;

    // No SqlServer Translation
    public override Task Covers(bool async)
        => Task.CompletedTask;

    public override async Task Crosses(bool async)
    {
        await base.Crosses(async);

        AssertSql(
            @""@__lineString_0='0x000000000114000000000000E03F000000000000E0BF000000000000E03F0000...' (Size = 38) (DbType = Object)

SELECT [l].[Id], [l].[LineString].STCrosses(@__lineString_0) AS [Crosses]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task Difference(bool async)
    {
        await base.Difference(async);

        AssertSql(
            @""@__polygon_0='0x0000000001040400000000000000000000000000000000000000000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STDifference(@__polygon_0) AS [Difference]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Distance_on_converted_geometry_type(bool async)
    {
        await base.Distance_on_converted_geometry_type(async);

        AssertSql(
            @""@__point_0='0x00000000010C000000000000F03F0000000000000000' (Nullable = false) (Size = 22) (DbType = Object)

SELECT [g].[Id], [g].[Location].STDistance(@__point_0) AS [Distance]
FROM [GeoPointEntity] AS [g]"");
    }

    public override async Task Distance_on_converted_geometry_type_lhs(bool async)
    {
        await base.Distance_on_converted_geometry_type_lhs(async);

        AssertSql(
            @""@__point_0='0x00000000010C000000000000F03F0000000000000000' (Nullable = false) (Size = 22) (DbType = Object)

SELECT [g].[Id], @__point_0.STDistance([g].[Location]) AS [Distance]
FROM [GeoPointEntity] AS [g]"");
    }

    public override async Task Distance_on_converted_geometry_type_constant(bool async)
    {
        await base.Distance_on_converted_geometry_type_constant(async);

        AssertSql(
            @""SELECT [g].[Id], [g].[Location].STDistance(geometry::Parse('POINT (0 1)')) AS [Distance]
FROM [GeoPointEntity] AS [g]"");
    }

    public override async Task Distance_on_converted_geometry_type_constant_lhs(bool async)
    {
        await base.Distance_on_converted_geometry_type_constant_lhs(async);

        AssertSql(
            @""SELECT [g].[Id], geometry::Parse('POINT (0 1)').STDistance([g].[Location]) AS [Distance]
FROM [GeoPointEntity] AS [g]"");
    }

    public override async Task Distance_constant(bool async)
    {
        await base.Distance_constant(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STDistance('POINT (0 1)') AS [Distance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Distance_constant_srid_4326(bool async)
    {
        await AssertQuery(
            async,
            ss => ss.Set<PointEntity>()
                .Select(e => new { e.Id, Distance = (double?)e.Point.Distance(new Point(1, 1) { SRID = 4326 }) }),
            ss => ss.Set<PointEntity>().Select(
                e => new { e.Id, Distance = e.Point == null ? (double?)null : e.Point.Distance(new Point(1, 1) { SRID = 4326 }) }),
            elementSorter: e => e.Id,
            elementAsserter: (e, a) =>
            {
                Assert.Equal(e.Id, a.Id);
                Assert.Null(a.Distance);
            });

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STDistance(geometry::STGeomFromText('POINT (1 1)', 4326)) AS [Distance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Distance_constant_lhs(bool async)
    {
        await base.Distance_constant_lhs(async);

        AssertSql(
            @""SELECT [p].[Id], geometry::Parse('POINT (0 1)').STDistance([p].[Point]) AS [Distance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Dimension(bool async)
    {
        await base.Dimension(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STDimension() AS [Dimension]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Disjoint_with_cast_to_nullable(bool async)
    {
        await base.Disjoint_with_cast_to_nullable(async);

        AssertSql(
            @""@__point_0='0x00000000010C000000000000F03F000000000000F03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STDisjoint(@__point_0) AS [Disjoint]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Disjoint_with_null_check(bool async)
    {
        await base.Disjoint_with_null_check(async);

        AssertSql(
            @""@__point_0='0x00000000010C000000000000F03F000000000000F03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], CASE
    WHEN [p].[Polygon] IS NULL THEN NULL
    ELSE [p].[Polygon].STDisjoint(@__point_0)
END AS [Disjoint]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Distance_with_null_check(bool async)
    {
        await base.Distance_with_null_check(async);

        AssertSql(
            @""@__point_0='0x00000000010C0000000000000000000000000000F03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], [p].[Point].STDistance(@__point_0) AS [Distance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Distance_with_cast_to_nullable(bool async)
    {
        await base.Distance_with_cast_to_nullable(async);

        AssertSql(
            @""@__point_0='0x00000000010C0000000000000000000000000000F03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], [p].[Point].STDistance(@__point_0) AS [Distance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Distance_geometry(bool async)
    {
        await base.Distance_geometry(async);

        AssertSql(
            @""@__point_0='0x00000000010C0000000000000000000000000000F03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], [p].[Geometry].STDistance(@__point_0) AS [Distance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task EndPoint(bool async)
    {
        await base.EndPoint(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STEndPoint() AS [EndPoint]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task Envelope(bool async)
    {
        await base.Envelope(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STEnvelope() AS [Envelope]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task EqualsTopologically(bool async)
    {
        await base.EqualsTopologically(async);

        AssertSql(
            @""@__point_0='0x00000000010C00000000000000000000000000000000' (Size = 22) (DbType = Object)

SELECT [p].[Id], [p].[Point].STEquals(@__point_0) AS [EqualsTopologically]
FROM [PointEntity] AS [p]"");
    }

    public override async Task ExteriorRing(bool async)
    {
        await base.ExteriorRing(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STExteriorRing() AS [ExteriorRing]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task GeometryType(bool async)
    {
        await base.GeometryType(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STGeometryType() AS [GeometryType]
FROM [PointEntity] AS [p]"");
    }

    public override async Task GetGeometryN(bool async)
    {
        await base.GetGeometryN(async);

        AssertSql(
            @""SELECT [m].[Id], [m].[MultiLineString].STGeometryN(0 + 1) AS [Geometry0]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override Task GetGeometryN_with_null_argument(bool async)
        // 'geometry::STGeometryN' failed because parameter 1 is not allowed to be null.
        => Task.CompletedTask;

    public override async Task GetInteriorRingN(bool async)
    {
        await base.GetInteriorRingN(async);

        AssertSql(
            @""SELECT [p].[Id], CASE
    WHEN [p].[Polygon].STNumInteriorRing() = 0 THEN NULL
    ELSE [p].[Polygon].STInteriorRingN(0 + 1)
END AS [InteriorRing0]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task GetPointN(bool async)
    {
        await base.GetPointN(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STPointN(0 + 1) AS [Point0]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task InteriorPoint(bool async)
    {
        await base.InteriorPoint(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STPointOnSurface() AS [InteriorPoint], [p].[Polygon]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Intersection(bool async)
    {
        await base.Intersection(async);

        AssertSql(
            @""@__polygon_0='0x0000000001040400000000000000000000000000000000000000000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STIntersection(@__polygon_0) AS [Intersection]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Intersects(bool async)
    {
        await base.Intersects(async);

        AssertSql(
            @""@__lineString_0='0x000000000114000000000000E03F000000000000E0BF000000000000E03F0000...' (Size = 38) (DbType = Object)

SELECT [l].[Id], [l].[LineString].STIntersects(@__lineString_0) AS [Intersects]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task ICurve_IsClosed(bool async)
    {
        await base.ICurve_IsClosed(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STIsClosed() AS [IsClosed]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task IMultiCurve_IsClosed(bool async)
    {
        await base.IMultiCurve_IsClosed(async);

        AssertSql(
            @""SELECT [m].[Id], [m].[MultiLineString].STIsClosed() AS [IsClosed]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override async Task IsEmpty(bool async)
    {
        await base.IsEmpty(async);

        AssertSql(
            @""SELECT [m].[Id], [m].[MultiLineString].STIsEmpty() AS [IsEmpty]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override async Task IsRing(bool async)
    {
        await base.IsRing(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STIsRing() AS [IsRing]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task IsSimple(bool async)
    {
        await base.IsSimple(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STIsSimple() AS [IsSimple]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task IsValid(bool async)
    {
        await base.IsValid(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STIsValid() AS [IsValid]
FROM [PointEntity] AS [p]"");
    }

    public override async Task IsWithinDistance(bool async)
    {
        await base.IsWithinDistance(async);

        AssertSql(
            @""@__point_0='0x00000000010C0000000000000000000000000000F03F' (Size = 22) (DbType = Object)

SELECT [p].[Id], CASE
    WHEN [p].[Point].STDistance(@__point_0) <= 1.0E0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsWithinDistance]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Item(bool async)
    {
        await base.Item(async);

        AssertSql(
            @""SELECT [m].[Id], [m].[MultiLineString].STGeometryN(0 + 1) AS [Item0]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override async Task Length(bool async)
    {
        await base.Length(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STLength() AS [Length]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task M(bool async)
    {
        await base.M(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].M AS [M]
FROM [PointEntity] AS [p]"");
    }

    // No SqlServer Translation
    public override Task Normalized(bool async)
        => Task.CompletedTask;

    public override async Task NumGeometries(bool async)
    {
        await base.NumGeometries(async);

        AssertSql(
            @""SELECT [m].[Id], [m].[MultiLineString].STNumGeometries() AS [NumGeometries]
FROM [MultiLineStringEntity] AS [m]"");
    }

    public override async Task NumInteriorRings(bool async)
    {
        await base.NumInteriorRings(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STNumInteriorRing() AS [NumInteriorRings]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task NumPoints(bool async)
    {
        await base.NumPoints(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STNumPoints() AS [NumPoints]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task OgcGeometryType(bool async)
    {
        await base.OgcGeometryType(async);

        AssertSql(
            @""SELECT [p].[Id], CASE [p].[Point].STGeometryType()
    WHEN N'Point' THEN 1
    WHEN N'LineString' THEN 2
    WHEN N'Polygon' THEN 3
    WHEN N'MultiPoint' THEN 4
    WHEN N'MultiLineString' THEN 5
    WHEN N'MultiPolygon' THEN 6
    WHEN N'GeometryCollection' THEN 7
    WHEN N'CircularString' THEN 8
    WHEN N'CompoundCurve' THEN 9
    WHEN N'CurvePolygon' THEN 10
END AS [OgcGeometryType]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Overlaps(bool async)
    {
        await base.Overlaps(async);

        AssertSql(
            @""@__polygon_0='0x0000000001040400000000000000000000000000000000000000000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STOverlaps(@__polygon_0) AS [Overlaps]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task PointOnSurface(bool async)
    {
        await base.PointOnSurface(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Polygon].STPointOnSurface() AS [PointOnSurface], [p].[Polygon]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Relate(bool async)
    {
        await base.Relate(async);

        AssertSql(
            @""@__polygon_0='0x0000000001040400000000000000000000000000000000000000000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STRelate(@__polygon_0, N'212111212') AS [Relate]
FROM [PolygonEntity] AS [p]"");
    }

    // No SqlServer Translation
    public override Task Reverse(bool async)
        => Task.CompletedTask;

    public override async Task SRID(bool async)
    {
        await base.SRID(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STSrid AS [SRID]
FROM [PointEntity] AS [p]"");
    }

    public override async Task SRID_geometry(bool async)
    {
        await base.SRID_geometry(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Geometry].STSrid AS [SRID]
FROM [PointEntity] AS [p]"");
    }

    public override async Task StartPoint(bool async)
    {
        await base.StartPoint(async);

        AssertSql(
            @""SELECT [l].[Id], [l].[LineString].STStartPoint() AS [StartPoint]
FROM [LineStringEntity] AS [l]"");
    }

    public override async Task SymmetricDifference(bool async)
    {
        await base.SymmetricDifference(async);

        AssertSql(
            @""@__polygon_0='0x0000000001040400000000000000000000000000000000000000000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STSymDifference(@__polygon_0) AS [SymmetricDifference]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task ToBinary(bool async)
    {
        await base.ToBinary(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STAsBinary() AS [Binary]
FROM [PointEntity] AS [p]"");
    }

    public override async Task ToText(bool async)
    {
        await base.ToText(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].AsTextZM() AS [Text]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Touches(bool async)
    {
        await base.Touches(async);

        AssertSql(
            @""@__polygon_0='0x000000000104040000000000000000000000000000000000F03F000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STTouches(@__polygon_0) AS [Touches]
FROM [PolygonEntity] AS [p]"");
    }

    public override async Task Union(bool async)
    {
        await base.Union(async);

        AssertSql(
            @""@__polygon_0='0x0000000001040400000000000000000000000000000000000000000000000000...' (Size = 96) (DbType = Object)

SELECT [p].[Id], [p].[Polygon].STUnion(@__polygon_0) AS [Union]
FROM [PolygonEntity] AS [p]"");
    }

    // No SqlServer Translation
    public override Task Union_void(bool async)
        => Task.CompletedTask;

    public override async Task Within(bool async)
    {
        await base.Within(async);

        AssertSql(
            @""@__polygon_0='0x00000000010405000000000000000000F0BF000000000000F0BF000000000000...' (Size = 112) (DbType = Object)

SELECT [p].[Id], [p].[Point].STWithin(@__polygon_0) AS [Within]
FROM [PointEntity] AS [p]"");
    }

    public override async Task X(bool async)
    {
        await base.X(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STX AS [X]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Y(bool async)
    {
        await base.Y(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].STY AS [Y]
FROM [PointEntity] AS [p]"");
    }

    public override async Task Z(bool async)
    {
        await base.Z(async);

        AssertSql(
            @""SELECT [p].[Id], [p].[Point].Z AS [Z]
FROM [PointEntity] AS [p]"");
    }

    public override async Task XY_with_collection_join(bool async)
    {
        await base.XY_with_collection_join(async);

        AssertSql(
            @""SELECT [t].[Id], [t].[c], [t].[c0], [p0].[Id], [p0].[Geometry], [p0].[Point], [p0].[PointM], [p0].[PointZ], [p0].[PointZM]
FROM (
    SELECT TOP(1) [p].[Id], [p].[Point].STX AS [c], [p].[Point].STY AS [c0]
    FROM [PointEntity] AS [p]
    ORDER BY [p].[Id]
) AS [t]
LEFT JOIN [PointEntity] AS [p0] ON [t].[Id] = [p0].[Id]
ORDER BY [t].[Id]"");
    }

    public override async Task IsEmpty_equal_to_null(bool async)
    {
        await base.IsEmpty_equal_to_null(async);

        AssertSql(
            @""SELECT [p].[Id]
FROM [PointEntity] AS [p]
WHERE [p].[Point] IS NULL"");
    }

    public override async Task IsEmpty_not_equal_to_null(bool async)
    {
        await base.IsEmpty_not_equal_to_null(async);

        AssertSql(
            @""SELECT [p].[Id]
FROM [PointEntity] AS [p]
WHERE [p].[Point] IS NOT NULL"");
    }

    public override async Task Intersects_equal_to_null(bool async)
    {
        await base.Intersects_equal_to_null(async);

        AssertSql(
            @""SELECT [l].[Id]
FROM [LineStringEntity] AS [l]
WHERE [l].[LineString] IS NULL"",
            //
            @""SELECT [l].[Id]
FROM [LineStringEntity] AS [l]
WHERE [l].[LineString] IS NULL"");
    }

    public override async Task Intersects_not_equal_to_null(bool async)
    {
        await base.Intersects_not_equal_to_null(async);

        AssertSql(
            @""SELECT [l].[Id]
FROM [LineStringEntity] AS [l]
WHERE [l].[LineString] IS NOT NULL"",
            //
            @""SELECT [l].[Id]
FROM [LineStringEntity] AS [l]
WHERE [l].[LineString] IS NOT NULL"");
    }

    private void AssertSql(params string[] expected)
        => Fixture.TestSqlLoggerFactory.AssertBaseline(expected);
}",1,439 334 2000 58 2001 60 2002 62 123 439 2000 40 2002 2003 44 2004 2005 41 58 320 40 2003 41 123 2006 46 2007 46 2008 40 41 59 621 125 438 431 323 2009 619 473 59 439 431 314 2010 2011 40 323 314 41 123 319 320 46 2011 40 314 41 59 2012 40 64 648 44 621 64 648 44 621 64 648 44 621 64 648 41 59 125 439 431 314 2010 2013 40 323 314 41 123 319 320 46 2013 40 314 41 59 2014 40 64 648 41 59 125 439 431 314 2010 2015 40 323 314 41 123 319 320 46 2015 40 314 41 59 2016 40 64 648 41 59 125 439 431 314 2010 2017 40 323 314 41 123 319 320 46 2017 40 314 41 59 2018 40 64 648 41 59 125 439 431 314 2010 2019 40 323 314 41 123 319 320 46 2019 40 314 41 59 2020 40 64 648 41 59 125 439 431 314 2010 2021 40 323 314 41 123 319 320 46 2021 40 314 41 59 2022 40 64 648 41 59 125 439 431 314 2010 2023 40 323 314 41 123 319 320 46 2023 40 314 41 59 2024 40 64 648 41 59 125 439 431 314 2010 2025 40 323 314 41 123 319 320 46 2025 40 314 41 59 2026 40 64 648 41 59 125 621 439 431 2010 2027 40 323 314 41 619 2010 46 2028 59 439 431 314 2010 2029 40 323 314 41 123 319 320 46 2029 40 314 41 59 2030 40 64 648 41 59 125 439 431 314 2010 2031 40 323 314 41 123 319 320 46 2031 40 314 41 59 2032 40 64 648 41 59 125 439 431 314 2010 2033 40 323 314 41 123 319 320 46 2033 40 314 41 59 2034 40 64 648 41 59 125 439 431 314 2010 2035 40 323 314 41 123 319 320 46 2035 40 314 41 59 2036 40 64 648 41 59 125 439 431 314 2010 2037 40 323 314 41 123 319 320 46 2037 40 314 41 59 2038 40 64 648 41 59 125 621 439 431 2010 2039 40 323 314 41 619 2010 46 2028 59 621 439 431 2010 2040 40 323 314 41 619 2010 46 2028 59 439 431 314 2010 2041 40 323 314 41 123 319 320 46 2041 40 314 41 59 2042 40 64 648 41 59 125 439 431 314 2010 2043 40 323 314 41 123 319 320 46 2043 40 314 41 59 2044 40 64 648 41 59 125 439 431 314 2010 2045 40 323 314 41 123 319 320 46 2045 40 314 41 59 2046 40 64 648 41 59 125 439 431 314 2010 2047 40 323 314 41 123 319 320 46 2047 40 314 41 59 2048 40 64 648 41 59 125 439 431 314 2010 2049 40 323 314 41 123 319 320 46 2049 40 314 41 59 2050 40 64 648 41 59 125 439 431 314 2010 2051 40 323 314 41 123 319 320 46 2051 40 314 41 59 2052 40 64 648 41 59 125 439 431 314 2010 2053 40 323 314 41 123 319 320 46 2053 40 314 41 59 2054 40 64 648 41 59 125 439 431 314 2010 2055 40 323 314 41 123 319 2056 40 314 44 2057 619 2057 46 2058 60 2059 62 40 41 46 2060 40 2061 619 418 123 2061 46 2062 44 2063 61 40 356 63 41 2061 46 2064 46 2063 40 418 2064 40 1501 44 1501 41 123 2065 61 1505 125 41 125 41 44 2057 619 2057 46 2058 60 2059 62 40 41 46 2060 40 2061 619 418 123 2061 46 2066 44 2067 61 2061 46 2068 614 424 63 40 356 63 41 424 58 2061 46 2068 46 2067 40 418 2068 40 1501 44 1501 41 123 2069 61 1505 125 41 125 41 44 2070 58 2061 619 2061 46 2071 44 2072 58 40 2061 44 2073 41 619 123 2074 46 2075 40 2061 46 2071 44 2073 46 2071 41 59 2074 46 2076 40 2073 46 2077 41 59 125 41 59 2078 40 64 648 41 59 125 439 431 314 2010 2079 40 323 314 41 123 319 320 46 2079 40 314 41 59 2080 40 64 648 41 59 125 439 431 314 2010 2081 40 323 314 41 123 319 320 46 2081 40 314 41 59 2082 40 64 648 41 59 125 439 431 314 2010 2083 40 323 314 41 123 319 320 46 2083 40 314 41 59 2084 40 64 648 41 59 125 439 431 314 2010 2085 40 323 314 41 123 319 320 46 2085 40 314 41 59 2086 40 64 648 41 59 125 439 431 314 2010 2087 40 323 314 41 123 319 320 46 2087 40 314 41 59 2088 40 64 648 41 59 125 439 431 314 2010 2089 40 323 314 41 123 319 320 46 2089 40 314 41 59 2090 40 64 648 41 59 125 439 431 314 2010 2091 40 323 314 41 123 319 320 46 2091 40 314 41 59 2092 40 64 648 41 59 125 439 431 314 2010 2093 40 323 314 41 123 319 320 46 2093 40 314 41 59 2094 40 64 648 41 59 125 439 431 314 2010 2095 40 323 314 41 123 319 320 46 2095 40 314 41 59 2096 40 64 648 41 59 125 439 431 314 2010 2097 40 323 314 41 123 319 320 46 2097 40 314 41 59 2098 40 64 648 41 59 125 439 431 314 2010 2099 40 323 314 41 123 319 320 46 2099 40 314 41 59 2100 40 64 648 41 59 125 439 431 314 2010 2101 40 323 314 41 123 319 320 46 2101 40 314 41 59 2102 40 64 648 41 59 125 439 431 314 2010 2103 40 323 314 41 123 319 320 46 2103 40 314 41 59 2104 40 64 648 41 59 125 439 431 2010 2105 40 323 314 41 621 619 2010 46 2028 59 439 431 314 2010 2106 40 323 314 41 123 319 320 46 2106 40 314 41 59 2107 40 64 648 41 59 125 439 431 314 2010 2108 40 323 314 41 123 319 320 46 2108 40 314 41 59 2109 40 64 648 41 59 125 439 431 314 2010 2110 40 323 314 41 123 319 320 46 2110 40 314 41 59 2111 40 64 648 41 59 125 439 431 314 2010 2112 40 323 314 41 123 319 320 46 2112 40 314 41 59 2113 40 64 648 41 59 125 439 431 314 2010 2114 40 323 314 41 123 319 320 46 2114 40 314 41 59 2115 40 64 648 41 59 125 439 431 314 2010 2116 40 323 314 41 123 319 320 46 2116 40 314 41 59 2117 40 64 648 41 59 125 439 431 314 2010 2118 40 323 314 41 123 319 320 46 2118 40 314 41 59 2119 40 64 648 41 59 125 439 431 314 2010 2120 40 323 314 41 123 319 320 46 2120 40 314 41 59 2121 40 64 648 41 59 125 439 431 314 2010 2122 40 323 314 41 123 319 320 46 2122 40 314 41 59 2123 40 64 648 41 59 125 439 431 314 2010 2124 40 323 314 41 123 319 320 46 2124 40 314 41 59 2125 40 64 648 41 59 125 439 431 314 2010 2126 40 323 314 41 123 319 320 46 2126 40 314 41 59 2127 40 64 648 41 59 125 439 431 314 2010 2128 40 323 314 41 123 319 320 46 2128 40 314 41 59 2129 40 64 648 41 59 125 439 431 314 2010 2130 40 323 314 41 123 319 320 46 2130 40 314 41 59 2131 40 64 648 41 59 125 439 431 314 2010 2132 40 323 314 41 123 319 320 46 2132 40 314 41 59 2133 40 64 648 41 59 125 439 431 314 2010 2134 40 323 314 41 123 319 320 46 2134 40 314 41 59 2135 40 64 648 41 59 125 621 439 431 2010 2136 40 323 314 41 619 2010 46 2028 59 439 431 314 2010 2137 40 323 314 41 123 319 320 46 2137 40 314 41 59 2138 40 64 648 41 59 125 439 431 314 2010 2139 40 323 314 41 123 319 320 46 2139 40 314 41 59 2140 40 64 648 41 59 125 439 431 314 2010 2141 40 323 314 41 123 319 320 46 2141 40 314 41 59 2142 40 64 648 41 59 125 439 431 314 2010 2143 40 323 314 41 123 319 320 46 2143 40 314 41 59 2144 40 64 648 41 59 125 439 431 314 2010 2145 40 323 314 41 123 319 320 46 2145 40 314 41 59 2146 40 64 648 41 59 125 439 431 314 2010 2147 40 323 314 41 123 319 320 46 2147 40 314 41 59 2148 40 64 648 41 59 125 439 431 314 2010 2149 40 323 314 41 123 319 320 46 2149 40 314 41 59 2150 40 64 648 41 59 125 621 439 431 2010 2151 40 323 314 41 619 2010 46 2028 59 439 431 314 2010 2152 40 323 314 41 123 319 320 46 2152 40 314 41 59 2153 40 64 648 41 59 125 439 431 314 2010 2154 40 323 314 41 123 319 320 46 2154 40 314 41 59 2155 40 64 648 41 59 125 439 431 314 2010 2156 40 323 314 41 123 319 320 46 2156 40 314 41 59 2157 40 64 648 41 59 125 439 431 314 2010 2158 40 323 314 41 123 319 320 46 2158 40 314 41 59 2159 40 64 648 41 59 125 439 431 314 2010 2160 40 323 314 41 123 319 320 46 2160 40 314 41 59 2161 40 64 648 41 59 125 439 431 314 2010 2162 40 323 314 41 123 319 320 46 2162 40 314 41 59 2163 40 64 648 41 59 125 439 431 314 2010 2164 40 323 314 41 123 319 320 46 2164 40 314 41 59 2165 40 64 648 41 59 125 439 431 314 2010 2166 40 323 314 41 123 319 320 46 2166 40 314 41 59 2167 40 64 648 41 59 125 621 439 431 2010 2168 40 323 314 41 619 2010 46 2028 59 439 431 314 2010 2169 40 323 314 41 123 319 320 46 2169 40 314 41 59 2170 40 64 648 41 59 125 439 431 314 2010 2171 40 323 314 41 123 319 320 46 2171 40 314 41 59 2172 40 64 648 41 59 125 439 431 314 2010 2173 40 323 314 41 123 319 320 46 2173 40 314 41 59 2174 40 64 648 41 59 125 439 431 314 2010 2175 40 323 314 41 123 319 320 46 2175 40 314 41 59 2176 40 64 648 41 59 125 439 431 314 2010 2177 40 323 314 41 123 319 320 46 2177 40 314 41 59 2178 40 64 648 41 59 125 439 431 314 2010 2179 40 323 314 41 123 319 320 46 2179 40 314 41 59 2180 40 64 648 41 59 125 439 431 314 2010 2181 40 323 314 41 123 319 320 46 2181 40 314 41 59 2182 40 64 648 41 59 125 439 431 314 2010 2183 40 323 314 41 123 319 320 46 2183 40 314 41 59 2184 40 64 648 44 621 64 648 41 59 125 439 431 314 2010 2185 40 323 314 41 123 319 320 46 2185 40 314 41 59 2186 40 64 648 44 621 64 648 41 59 125 437 492 2187 40 433 461 91 93 2188 41 619 2189 46 2190 46 2191 40 2188 41 59 125 
79757,C#,"    public class Transaction : IEquatable<Transaction>, IInventory, IInteroperable
    {
        /// <summary>
        /// The maximum size of a transaction.
        /// </summary>
        public const int MaxTransactionSize = 102400;

        /// <summary>
        /// The maximum number of attributes that can be contained within a transaction.
        /// </summary>
        public const int MaxTransactionAttributes = 16;

        private byte version;
        private uint nonce;
        private long sysfee;
        private long netfee;
        private uint validUntilBlock;
        private Signer[] _signers;
        private TransactionAttribute[] attributes;
        private byte[] script;
        private Witness[] witnesses;

        /// <summary>
        /// The size of a transaction header.
        /// </summary>
        public const int HeaderSize =
            sizeof(byte) +  //Version
            sizeof(uint) +  //Nonce
            sizeof(long) +  //SystemFee
            sizeof(long) +  //NetworkFee
            sizeof(uint);   //ValidUntilBlock

        private Dictionary<Type, TransactionAttribute[]> _attributesCache;
        /// <summary>
        /// The attributes of the transaction.
        /// </summary>
        public TransactionAttribute[] Attributes
        {
            get => attributes;
            set { attributes = value; _attributesCache = null; _hash = null; _size = 0; }
        }

        /// <summary>
        /// The <see cref=""NetworkFee""/> for the transaction divided by its <see cref=""Size""/>.
        /// </summary>
        public long FeePerByte => NetworkFee / Size;

        private UInt256 _hash = null;
        public UInt256 Hash
        {
            get
            {
                if (_hash == null)
                {
                    _hash = this.CalculateHash();
                }
                return _hash;
            }
        }

        InventoryType IInventory.InventoryType => InventoryType.TX;

        /// <summary>
        /// The network fee of the transaction.
        /// </summary>
        public long NetworkFee //Distributed to consensus nodes.
        {
            get => netfee;
            set { netfee = value; _hash = null; }
        }

        /// <summary>
        /// The nonce of the transaction.
        /// </summary>
        public uint Nonce
        {
            get => nonce;
            set { nonce = value; _hash = null; }
        }

        /// <summary>
        /// The script of the transaction.
        /// </summary>
        public byte[] Script
        {
            get => script;
            set { script = value; _hash = null; _size = 0; }
        }

        /// <summary>
        /// The sender is the first signer of the transaction, regardless of its <see cref=""WitnessScope""/>.
        /// </summary>
        /// <remarks>Note: The sender will pay the fees of the transaction.</remarks>
        public UInt160 Sender => _signers[0].Account;

        /// <summary>
        /// The signers of the transaction.
        /// </summary>
        public Signer[] Signers
        {
            get => _signers;
            set { _signers = value; _hash = null; _size = 0; }
        }

        private int _size;
        public int Size
        {
            get
            {
                if (_size == 0)
                {
                    _size = HeaderSize +
                        Signers.GetVarSize() +      // Signers
                        Attributes.GetVarSize() +   // Attributes
                        Script.GetVarSize() +       // Script
                        Witnesses.GetVarSize();     // Witnesses
                }
                return _size;
            }
        }

        /// <summary>
        /// The system fee of the transaction.
        /// </summary>
        public long SystemFee //Fee to be burned.
        {
            get => sysfee;
            set { sysfee = value; _hash = null; }
        }

        /// <summary>
        /// Indicates that the transaction is only valid before this block height.
        /// </summary>
        public uint ValidUntilBlock
        {
            get => validUntilBlock;
            set { validUntilBlock = value; _hash = null; }
        }

        /// <summary>
        /// The version of the transaction.
        /// </summary>
        public byte Version
        {
            get => version;
            set { version = value; _hash = null; }
        }

        public Witness[] Witnesses
        {
            get => witnesses;
            set { witnesses = value; _size = 0; }
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            int startPosition = -1;
            if (reader.BaseStream.CanSeek)
                startPosition = (int)reader.BaseStream.Position;
            DeserializeUnsigned(reader);
            Witnesses = reader.ReadSerializableArray<Witness>(Signers.Length);
            if (Witnesses.Length != Signers.Length) throw new FormatException();
            if (startPosition >= 0)
                _size = (int)reader.BaseStream.Position - startPosition;
        }

        private static IEnumerable<TransactionAttribute> DeserializeAttributes(BinaryReader reader, int maxCount)
        {
            int count = (int)reader.ReadVarInt((ulong)maxCount);
            HashSet<TransactionAttributeType> hashset = new();
            while (count-- > 0)
            {
                TransactionAttribute attribute = TransactionAttribute.DeserializeFrom(reader);
                if (!attribute.AllowMultiple && !hashset.Add(attribute.Type))
                    throw new FormatException();
                yield return attribute;
            }
        }

        private static IEnumerable<Signer> DeserializeSigners(BinaryReader reader, int maxCount)
        {
            int count = (int)reader.ReadVarInt((ulong)maxCount);
            if (count == 0) throw new FormatException();
            HashSet<UInt160> hashset = new();
            for (int i = 0; i < count; i++)
            {
                Signer signer = reader.ReadSerializable<Signer>();
                if (!hashset.Add(signer.Account)) throw new FormatException();
                yield return signer;
            }
        }

        public void DeserializeUnsigned(BinaryReader reader)
        {
            Version = reader.ReadByte();
            if (Version > 0) throw new FormatException();
            Nonce = reader.ReadUInt32();
            SystemFee = reader.ReadInt64();
            if (SystemFee < 0) throw new FormatException();
            NetworkFee = reader.ReadInt64();
            if (NetworkFee < 0) throw new FormatException();
            if (SystemFee + NetworkFee < SystemFee) throw new FormatException();
            ValidUntilBlock = reader.ReadUInt32();
            Signers = DeserializeSigners(reader, MaxTransactionAttributes).ToArray();
            Attributes = DeserializeAttributes(reader, MaxTransactionAttributes - Signers.Length).ToArray();
            Script = reader.ReadVarBytes(ushort.MaxValue);
            if (Script.Length == 0) throw new FormatException();
        }

        public bool Equals(Transaction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return Hash.Equals(other.Hash);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Transaction);
        }

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            throw new NotSupportedException();
        }

        /// <summary>
        /// Gets the attribute of the specified type.
        /// </summary>
        /// <typeparam name=""T"">The type of the attribute.</typeparam>
        /// <returns>The first attribute of this type. Or <see langword=""null""/> if there is no attribute of this type.</returns>
        public T GetAttribute<T>() where T : TransactionAttribute
        {
            return GetAttributes<T>().FirstOrDefault();
        }

        /// <summary>
        /// Gets all attributes of the specified type.
        /// </summary>
        /// <typeparam name=""T"">The type of the attributes.</typeparam>
        /// <returns>All the attributes of this type.</returns>
        public IEnumerable<T> GetAttributes<T>() where T : TransactionAttribute
        {
            _attributesCache ??= attributes.GroupBy(p => p.GetType()).ToDictionary(p => p.Key, p => p.ToArray());
            if (_attributesCache.TryGetValue(typeof(T), out var result))
                return result.OfType<T>();
            return Enumerable.Empty<T>();
        }

        public override int GetHashCode()
        {
            return Hash.GetHashCode();
        }

        public UInt160[] GetScriptHashesForVerifying(DataCache snapshot)
        {
            return Signers.Select(p => p.Account).ToArray();
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            ((IVerifiable)this).SerializeUnsigned(writer);
            writer.Write(Witnesses);
        }

        void IVerifiable.SerializeUnsigned(BinaryWriter writer)
        {
            writer.Write(Version);
            writer.Write(Nonce);
            writer.Write(SystemFee);
            writer.Write(NetworkFee);
            writer.Write(ValidUntilBlock);
            writer.Write(Signers);
            writer.Write(Attributes);
            writer.WriteVarBytes(Script);
        }

        /// <summary>
        /// Converts the transaction to a JSON object.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used during the conversion.</param>
        /// <returns>The transaction represented by a JSON object.</returns>
        public JObject ToJson(ProtocolSettings settings)
        {
            JObject json = new();
            json[""hash""] = Hash.ToString();
            json[""size""] = Size;
            json[""version""] = Version;
            json[""nonce""] = Nonce;
            json[""sender""] = Sender.ToAddress(settings.AddressVersion);
            json[""sysfee""] = SystemFee.ToString();
            json[""netfee""] = NetworkFee.ToString();
            json[""validuntilblock""] = ValidUntilBlock;
            json[""signers""] = Signers.Select(p => p.ToJson()).ToArray();
            json[""attributes""] = Attributes.Select(p => p.ToJson()).ToArray();
            json[""script""] = Convert.ToBase64String(Script);
            json[""witnesses""] = Witnesses.Select(p => p.ToJson()).ToArray();
            return json;
        }

        /// <summary>
        /// Verifies the transaction.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used to verify the transaction.</param>
        /// <param name=""snapshot"">The snapshot used to verify the transaction.</param>
        /// <param name=""context"">The <see cref=""TransactionVerificationContext""/> used to verify the transaction.</param>
        /// <returns>The result of the verification.</returns>
        public VerifyResult Verify(ProtocolSettings settings, DataCache snapshot, TransactionVerificationContext context)
        {
            VerifyResult result = VerifyStateIndependent(settings);
            if (result != VerifyResult.Succeed) return result;
            return VerifyStateDependent(settings, snapshot, context);
        }

        /// <summary>
        /// Verifies the state-dependent part of the transaction.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used to verify the transaction.</param>
        /// <param name=""snapshot"">The snapshot used to verify the transaction.</param>
        /// <param name=""context"">The <see cref=""TransactionVerificationContext""/> used to verify the transaction.</param>
        /// <returns>The result of the verification.</returns>
        public virtual VerifyResult VerifyStateDependent(ProtocolSettings settings, DataCache snapshot, TransactionVerificationContext context)
        {
            uint height = NativeContract.Ledger.CurrentIndex(snapshot);
            if (ValidUntilBlock <= height || ValidUntilBlock > height + settings.MaxValidUntilBlockIncrement)
                return VerifyResult.Expired;
            UInt160[] hashes = GetScriptHashesForVerifying(snapshot);
            foreach (UInt160 hash in hashes)
                if (NativeContract.Policy.IsBlocked(snapshot, hash))
                    return VerifyResult.PolicyFail;
            if (!(context?.CheckTransaction(this, snapshot) ?? true)) return VerifyResult.InsufficientFunds;
            foreach (TransactionAttribute attribute in Attributes)
                if (!attribute.Verify(snapshot, this))
                    return VerifyResult.InvalidAttribute;
            long net_fee = NetworkFee - Size * NativeContract.Policy.GetFeePerByte(snapshot);
            if (net_fee < 0) return VerifyResult.InsufficientFunds;

            if (net_fee > MaxVerificationGas) net_fee = MaxVerificationGas;
            uint execFeeFactor = NativeContract.Policy.GetExecFeeFactor(snapshot);
            for (int i = 0; i < hashes.Length; i++)
            {
                if (witnesses[i].VerificationScript.IsSignatureContract())
                    net_fee -= execFeeFactor * SignatureContractCost();
                else if (witnesses[i].VerificationScript.IsMultiSigContract(out int m, out int n))
                {
                    net_fee -= execFeeFactor * MultiSignatureContractCost(m, n);
                }
                else
                {
                    if (!this.VerifyWitness(settings, snapshot, hashes[i], witnesses[i], net_fee, out long fee))
                        return VerifyResult.Invalid;
                    net_fee -= fee;
                }
                if (net_fee < 0) return VerifyResult.InsufficientFunds;
            }
            return VerifyResult.Succeed;
        }

        /// <summary>
        /// Verifies the state-independent part of the transaction.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used to verify the transaction.</param>
        /// <returns>The result of the verification.</returns>
        public virtual VerifyResult VerifyStateIndependent(ProtocolSettings settings)
        {
            if (Size > MaxTransactionSize) return VerifyResult.OverSize;
            try
            {
                _ = new Script(Script, true);
            }
            catch (BadScriptException)
            {
                return VerifyResult.InvalidScript;
            }
            UInt160[] hashes = GetScriptHashesForVerifying(null);
            for (int i = 0; i < hashes.Length; i++)
            {
                if (witnesses[i].VerificationScript.IsSignatureContract())
                {
                    if (hashes[i] != witnesses[i].ScriptHash) return VerifyResult.Invalid;
                    var pubkey = witnesses[i].VerificationScript.AsSpan(2..35);
                    try
                    {
                        if (!Crypto.VerifySignature(this.GetSignData(settings.Network), witnesses[i].InvocationScript.AsSpan(2), pubkey, ECCurve.Secp256r1))
                            return VerifyResult.InvalidSignature;
                    }
                    catch
                    {
                        return VerifyResult.Invalid;
                    }
                }
                else if (witnesses[i].VerificationScript.IsMultiSigContract(out var m, out ECPoint[] points))
                {
                    if (hashes[i] != witnesses[i].ScriptHash) return VerifyResult.Invalid;
                    var signatures = GetMultiSignatures(witnesses[i].InvocationScript);
                    if (signatures.Length != m) return VerifyResult.Invalid;
                    var n = points.Length;
                    var message = this.GetSignData(settings.Network);
                    try
                    {
                        for (int x = 0, y = 0; x < m && y < n;)
                        {
                            if (Crypto.VerifySignature(message, signatures[x], points[y]))
                                x++;
                            y++;
                            if (m - x > n - y)
                                return VerifyResult.InvalidSignature;
                        }
                    }
                    catch
                    {
                        return VerifyResult.Invalid;
                    }
                }
            }
            return VerifyResult.Succeed;
        }

        public StackItem ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Array(referenceCounter, new StackItem[]
            {
                // Computed properties
                Hash.ToArray(),

                // Transaction properties
                (int)Version,
                Nonce,
                Sender.ToArray(),
                SystemFee,
                NetworkFee,
                ValidUntilBlock,
                Script,
            });
        }

        private static byte[][] GetMultiSignatures(byte[] script)
        {
            int i = 0;
            var signatures = new List<byte[]>();
            while (i < script.Length)
            {
                if (script[i++] != (byte)OpCode.PUSHDATA1) return null;
                if (i + 65 > script.Length) return null;
                if (script[i++] != 64) return null;
                signatures.Add(script[i..(i + 64)]);
                i += 64;
            }
            return signatures.ToArray();
        }
    }",1,439 334 2000 58 2001 60 2000 62 44 2002 44 2003 123 612 439 341 404 2004 61 1507 59 612 439 341 404 2005 61 1503 59 437 326 2006 59 437 479 2007 59 437 413 2008 59 437 413 2009 59 437 479 2010 59 437 2011 91 93 2012 59 437 2013 91 93 2014 59 437 326 91 93 2015 59 437 2016 91 93 2017 59 612 439 341 404 2018 61 455 40 326 41 43 621 455 40 479 41 43 621 455 40 413 41 43 621 455 40 413 41 43 621 455 40 479 41 59 621 437 2019 60 2020 44 2013 91 93 62 2021 59 612 439 2013 91 93 2022 123 2023 619 2014 59 2024 123 2014 61 2025 59 2021 61 424 59 2026 61 424 59 2027 61 1500 59 125 125 612 439 413 2028 619 2029 47 2030 59 437 2031 2032 61 424 59 439 2031 2033 123 2034 123 392 40 2032 614 424 41 123 2032 61 467 46 2035 40 41 59 125 450 2032 59 125 125 2036 2002 46 2036 619 2036 46 2037 59 612 439 413 2029 621 123 2038 619 2009 59 2039 123 2009 61 2040 59 2032 61 424 59 125 125 612 439 479 2041 123 2042 619 2007 59 2043 123 2007 61 2044 59 2032 61 424 59 125 125 612 439 326 91 93 2045 123 2046 619 2015 59 2047 123 2015 61 2048 59 2032 61 424 59 2049 61 1500 59 125 125 612 439 2050 2051 619 2012 91 1500 93 46 2052 59 612 439 2011 91 93 2053 123 2054 619 2012 59 2055 123 2012 61 2056 59 2032 61 424 59 2057 61 1500 59 125 125 437 404 2058 59 439 404 2030 123 2059 123 392 40 2058 614 1500 41 123 2058 61 2018 43 2053 46 2060 40 41 43 621 2022 46 2060 40 41 43 621 2045 46 2060 40 41 43 621 2061 46 2060 40 41 59 621 125 450 2058 59 125 125 612 439 413 2062 621 123 2063 619 2008 59 2064 123 2008 61 2065 59 2032 61 424 59 125 125 612 439 479 2066 123 2067 619 2010 59 2068 123 2010 61 2069 59 2032 61 424 59 125 125 612 439 326 2070 123 2071 619 2006 59 2072 123 2006 61 2073 59 2032 61 424 59 125 125 439 2016 91 93 2074 123 2075 619 2017 59 2076 123 2017 61 2077 59 2058 61 1500 59 125 125 492 2078 46 2079 40 2080 2081 41 123 404 2082 61 45 1501 59 392 40 2081 46 2083 46 2084 41 2082 61 40 404 41 2081 46 2083 46 2085 59 2086 40 2081 41 59 2074 61 2081 46 2087 60 2016 62 40 2053 46 2088 41 59 392 40 2074 46 2088 631 2053 46 2088 41 469 418 2089 40 41 59 392 40 2082 615 1500 41 2058 61 40 404 41 2081 46 2083 46 2085 45 2082 59 125 437 457 2090 60 2013 62 2091 40 2080 2081 44 404 2092 41 123 404 2093 61 40 404 41 2081 46 2094 40 40 480 41 2092 41 59 2095 60 2096 62 2097 61 418 40 41 59 496 40 2093 629 62 1500 41 123 2013 2098 61 2013 46 2099 40 2081 41 59 392 40 33 2098 46 2100 605 33 2097 46 2101 40 2098 46 2020 41 41 469 418 2102 40 41 59 500 450 2098 59 125 125 437 457 2090 60 2011 62 2103 40 2080 2081 44 404 2092 41 123 404 2104 61 40 404 41 2081 46 2105 40 40 480 41 2092 41 59 392 40 2104 614 1500 41 469 418 2106 40 41 59 2107 60 2050 62 2108 61 418 40 41 59 385 40 404 2109 61 1500 59 2109 60 2104 59 2109 637 41 123 2011 2110 61 2081 46 2111 60 2011 62 40 41 59 392 40 33 2108 46 2112 40 2110 46 2052 41 41 469 418 2106 40 41 59 500 450 2110 59 125 125 439 492 2113 40 2080 2081 41 123 2070 61 2081 46 2114 40 41 59 392 40 2070 62 1500 41 469 418 2115 40 41 59 2041 61 2081 46 2116 40 41 59 2062 61 2081 46 2117 40 41 59 392 40 2062 60 1500 41 469 418 2115 40 41 59 2029 61 2081 46 2117 40 41 59 392 40 2029 60 1500 41 469 418 2115 40 41 59 392 40 2062 43 2029 60 2062 41 469 418 2115 40 41 59 2066 61 2081 46 2116 40 41 59 2053 61 2103 40 2081 44 2005 41 46 2118 40 41 59 2022 61 2091 40 2081 44 2005 45 2053 46 2119 41 46 2118 40 41 59 2045 61 2081 46 2120 40 488 46 2121 41 59 392 40 2045 46 2119 614 1500 41 469 418 2115 40 41 59 125 439 323 2122 40 2000 2123 41 123 392 40 2123 407 424 41 450 380 59 392 40 2124 40 467 44 2123 41 41 450 473 59 450 2033 46 2122 40 2123 46 2033 41 59 125 439 431 323 2122 40 426 2125 41 123 450 2122 40 2125 311 2000 41 59 125 492 2003 46 2126 40 2127 2128 41 123 469 418 2129 40 41 59 125 612 439 2130 2131 60 2130 62 40 41 2132 2130 58 2013 123 450 2133 60 2130 62 40 41 46 2134 40 41 59 125 612 439 2090 60 2130 62 2135 60 2130 62 40 41 2132 2130 58 2013 123 2021 633 61 2014 46 2136 40 2137 619 2137 46 2138 40 41 41 46 2139 40 2137 619 2137 46 2140 44 2137 619 2137 46 2141 40 41 41 59 392 40 2021 46 2142 40 478 40 2130 41 44 430 490 2143 41 41 450 2143 46 2144 60 2130 62 40 41 59 450 2145 46 2146 60 2130 62 40 41 59 125 439 431 404 2147 40 41 123 450 2033 46 2147 40 41 59 125 439 2050 91 93 2148 40 2149 2150 41 123 450 2053 46 2151 40 2152 619 2152 46 2052 41 46 2153 40 41 59 125 492 2078 46 2154 40 2155 2156 41 123 40 40 2157 41 467 41 46 2158 40 2156 41 59 2156 46 2159 40 2074 41 59 125 492 2160 46 2161 40 2155 2156 41 123 2156 46 2162 40 2070 41 59 2156 46 2162 40 2041 41 59 2156 46 2162 40 2062 41 59 2156 46 2162 40 2029 41 59 2156 46 2162 40 2066 41 59 2156 46 2162 40 2053 41 59 2156 46 2162 40 2022 41 59 2156 46 2163 40 2045 41 59 125 612 439 2164 2165 40 2166 2167 41 123 2164 2168 61 418 40 41 59 2168 91 648 93 61 2033 46 2169 40 41 59 2168 91 648 93 61 2030 59 2168 91 648 93 61 2070 59 2168 91 648 93 61 2041 59 2168 91 648 93 61 2051 46 2170 40 2167 46 2171 41 59 2168 91 648 93 61 2062 46 2169 40 41 59 2168 91 648 93 61 2029 46 2169 40 41 59 2168 91 648 93 61 2066 59 2168 91 648 93 61 2053 46 2172 40 2173 619 2173 46 2165 40 41 41 46 2174 40 41 59 2168 91 648 93 61 2022 46 2172 40 2173 619 2173 46 2165 40 41 41 46 2174 40 41 59 2168 91 648 93 61 2175 46 2176 40 2045 41 59 2168 91 648 93 61 2074 46 2172 40 2173 619 2173 46 2165 40 41 41 46 2174 40 41 59 450 2168 59 125 612 439 2177 2178 40 2166 2167 44 2149 2150 44 2179 2180 41 123 2177 2181 61 2182 40 2167 41 59 392 40 2181 631 2177 46 2183 41 450 2181 59 450 2184 40 2167 44 2150 44 2180 41 59 125 612 439 491 2177 2185 40 2166 2167 44 2149 2150 44 2179 2180 41 123 479 2186 61 2187 46 2188 46 2189 40 2150 41 59 392 40 2066 620 2186 606 2066 62 2186 43 2167 46 2190 41 450 2177 46 2191 59 2050 91 93 2192 61 2148 40 2150 41 59 386 40 2050 2193 398 2192 41 392 40 2187 46 2194 46 2195 40 2150 44 2193 41 41 450 2177 46 2196 59 392 40 33 40 2180 634 2197 40 467 44 2150 41 633 473 41 41 450 2177 46 2198 59 386 40 2013 2199 398 2022 41 392 40 33 2199 46 2178 40 2150 44 467 41 41 450 2177 46 2200 59 413 2201 61 2029 45 2030 42 2187 46 2194 46 2202 40 2150 41 59 392 40 2201 60 1500 41 450 2177 46 2198 59 392 40 2201 62 2203 41 2201 61 2203 59 479 2204 61 2187 46 2194 46 2205 40 2150 41 59 385 40 404 2206 61 1500 59 2206 60 2192 46 2207 59 2206 637 41 123 392 40 2017 91 2206 93 46 2208 46 2209 40 41 41 2201 628 2204 42 2210 40 41 59 360 392 40 2017 91 2206 93 46 2208 46 2211 40 430 404 2212 44 430 404 2213 41 41 123 2201 628 2204 42 2214 40 2212 44 2213 41 59 125 360 123 392 40 33 467 46 2215 40 2167 44 2150 44 2192 91 2206 93 44 2017 91 2206 93 44 2201 44 430 413 2216 41 41 450 2177 46 2217 59 2201 628 2216 59 125 392 40 2201 60 1500 41 450 2177 46 2198 59 125 450 2177 46 2218 59 125 612 439 491 2177 2219 40 2166 2167 41 123 392 40 2030 62 2004 41 450 2177 46 2220 59 474 123 2221 61 418 2045 40 2045 44 473 41 59 125 329 40 2222 41 123 450 2177 46 2223 59 125 2050 91 93 2224 61 2148 40 424 41 59 385 40 404 2225 61 1500 59 2225 60 2224 46 2226 59 2225 637 41 123 392 40 2017 91 2225 93 46 2227 46 2228 40 41 41 123 392 40 2224 91 2225 93 631 2017 91 2225 93 46 2229 41 450 2177 46 2230 59 490 2231 61 2017 91 2225 93 46 2227 46 2232 40 1502 41 59 474 123 392 40 33 2233 46 2234 40 467 46 2235 40 2167 46 2236 41 44 2017 91 2225 93 46 2237 46 2232 40 1502 41 44 2231 44 2238 46 2239 41 41 450 2177 46 2240 59 125 329 123 450 2177 46 2230 59 125 125 360 392 40 2017 91 2225 93 46 2227 46 2241 40 430 490 2242 44 430 2243 91 93 2244 41 41 123 392 40 2224 91 2225 93 631 2017 91 2225 93 46 2245 41 450 2177 46 2246 59 490 2247 61 2248 40 2017 91 2225 93 46 2249 41 59 392 40 2247 46 2226 631 2242 41 450 2177 46 2246 59 490 2250 61 2244 46 2226 59 490 2251 61 467 46 2252 40 2167 46 2253 41 59 474 123 385 40 404 2254 61 1500 44 2255 61 1500 59 2254 60 2242 605 2255 60 2250 59 41 123 392 40 2256 46 2257 40 2251 44 2247 91 2254 93 44 2244 91 2255 93 41 41 2254 637 59 2255 637 59 392 40 2242 45 2254 62 2250 45 2255 41 450 2177 46 2258 59 125 125 329 123 450 2177 46 2246 59 125 125 125 450 2177 46 2259 59 125 439 2127 2260 40 2261 2262 41 123 450 418 2263 40 2262 44 418 2127 91 93 123 621 2033 46 2264 40 41 44 621 40 404 41 2070 44 2041 44 2051 46 2264 40 41 44 2062 44 2029 44 2066 44 2045 44 125 41 59 125 437 457 326 91 93 91 93 2265 40 326 91 93 2015 41 123 404 2266 61 1500 59 490 2267 61 418 2268 60 326 91 93 62 40 41 59 496 40 2266 60 2015 46 2269 41 123 392 40 2015 91 2266 637 93 631 40 326 41 2270 46 2271 41 450 424 59 392 40 2266 43 1503 62 2015 46 2269 41 450 424 59 392 40 2015 91 2266 637 93 631 1503 41 450 424 59 2267 46 2272 40 2015 91 2266 46 46 40 2266 43 1503 41 93 41 59 2266 636 1503 59 125 450 2267 46 2273 40 41 59 125 125 
67978,C#,"public static class EntityTypeExtensions
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static string DisplayName(this TypeBase entityType)
        => ((IReadOnlyTypeBase)entityType).DisplayName();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static string ShortName(this TypeBase entityType)
        => ((IReadOnlyTypeBase)entityType).ShortName();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static MemberInfo GetNavigationMemberInfo(
        this IReadOnlyEntityType entityType,
        string navigationName)
    {
        MemberInfo? memberInfo;
        if (entityType.IsPropertyBag)
        {
            memberInfo = entityType.FindIndexerPropertyInfo()!;
        }
        else
        {
            memberInfo = entityType.ClrType.GetMembersInHierarchy(navigationName).FirstOrDefault();

            if (memberInfo == null)
            {
                throw new InvalidOperationException(
                    CoreStrings.NoClrNavigation(navigationName, entityType.DisplayName()));
            }
        }

        return memberInfo;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool IsOwned(this IReadOnlyEntityType entityType)
        => entityType.IsOwned();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IReadOnlyForeignKey? FindDeclaredOwnership(this IReadOnlyEntityType entityType)
        => entityType.GetDeclaredForeignKeys().FirstOrDefault(fk => fk.IsOwnership);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IConventionForeignKey? FindDeclaredOwnership(this IConventionEntityType entityType)
        => entityType.GetDeclaredForeignKeys().FirstOrDefault(fk => fk.IsOwnership);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IReadOnlyEntityType? FindInOwnershipPath(this IReadOnlyEntityType entityType, Type targetType)
    {
        if (entityType.ClrType == targetType)
        {
            return entityType;
        }

        var owner = entityType;
        while (true)
        {
            var ownership = owner.FindOwnership();
            if (ownership == null)
            {
                return null;
            }

            owner = ownership.PrincipalEntityType;
            if (owner.ClrType.IsAssignableFrom(targetType))
            {
                return owner;
            }
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool IsInOwnershipPath(this IReadOnlyEntityType entityType, Type targetType)
        => entityType.FindInOwnershipPath(targetType) != null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool IsInOwnershipPath(this IReadOnlyEntityType entityType, IReadOnlyEntityType targetType)
    {
        if (entityType == targetType)
        {
            return true;
        }

        var owner = entityType;
        while (true)
        {
            var ownership = owner.FindOwnership();
            if (ownership == null)
            {
                return false;
            }

            owner = ownership.PrincipalEntityType;
            if (owner.IsAssignableFrom(targetType))
            {
                return true;
            }
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public static string GetOwnedName(this IReadOnlyTypeBase type, string simpleName, string ownershipNavigation)
        => type.Name + ""."" + ownershipNavigation + ""#"" + simpleName;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool UseEagerSnapshots(this IReadOnlyEntityType entityType)
    {
        var changeTrackingStrategy = entityType.GetChangeTrackingStrategy();

        return changeTrackingStrategy == ChangeTrackingStrategy.Snapshot
            || changeTrackingStrategy == ChangeTrackingStrategy.ChangedNotifications;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static int StoreGeneratedCount(this IEntityType entityType)
        => GetCounts(entityType).StoreGeneratedCount;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static int RelationshipPropertyCount(this IEntityType entityType)
        => GetCounts(entityType).RelationshipCount;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static int OriginalValueCount(this IEntityType entityType)
        => GetCounts(entityType).OriginalValueCount;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static int ShadowPropertyCount(this IEntityType entityType)
        => GetCounts(entityType).ShadowCount;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static int NavigationCount(this IEntityType entityType)
        => GetCounts(entityType).NavigationCount;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static int PropertyCount(this IEntityType entityType)
        => GetCounts(entityType).PropertyCount;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static PropertyCounts GetCounts(this IEntityType entityType)
        => ((IRuntimeEntityType)entityType).Counts;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static PropertyCounts CalculateCounts(this IRuntimeEntityType entityType)
    {
        var index = 0;
        var navigationIndex = 0;
        var originalValueIndex = 0;
        var shadowIndex = 0;
        var relationshipIndex = 0;
        var storeGenerationIndex = 0;

        var baseCounts = entityType.BaseType?.GetCounts();
        if (baseCounts != null)
        {
            index = baseCounts.PropertyCount;
            navigationIndex = baseCounts.NavigationCount;
            originalValueIndex = baseCounts.OriginalValueCount;
            shadowIndex = baseCounts.ShadowCount;
            relationshipIndex = baseCounts.RelationshipCount;
            storeGenerationIndex = baseCounts.StoreGeneratedCount;
        }

        foreach (var property in entityType.GetDeclaredProperties())
        {
            var indexes = new PropertyIndexes(
                index: index++,
                originalValueIndex: property.RequiresOriginalValue() ? originalValueIndex++ : -1,
                shadowIndex: property.IsShadowProperty() ? shadowIndex++ : -1,
                relationshipIndex: property.IsKey() || property.IsForeignKey() ? relationshipIndex++ : -1,
                storeGenerationIndex: property.MayBeStoreGenerated() ? storeGenerationIndex++ : -1);

            ((IRuntimePropertyBase)property).PropertyIndexes = indexes;
        }

        var isNotifying = entityType.GetChangeTrackingStrategy() != ChangeTrackingStrategy.Snapshot;

        foreach (var navigation in entityType.GetDeclaredNavigations()
                     .Union<IPropertyBase>(entityType.GetDeclaredSkipNavigations()))
        {
            var indexes = new PropertyIndexes(
                index: navigationIndex++,
                originalValueIndex: -1,
                shadowIndex: navigation.IsShadowProperty() ? shadowIndex++ : -1,
                relationshipIndex: ((IReadOnlyNavigationBase)navigation).IsCollection && isNotifying ? -1 : relationshipIndex++,
                storeGenerationIndex: -1);

            ((IRuntimePropertyBase)navigation).PropertyIndexes = indexes;
        }

        foreach (var serviceProperty in entityType.GetDeclaredServiceProperties())
        {
            var indexes = new PropertyIndexes(
                index: -1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);

            ((IRuntimePropertyBase)serviceProperty).PropertyIndexes = indexes;
        }

        return new PropertyCounts(
            index,
            navigationIndex,
            originalValueIndex,
            shadowIndex,
            relationshipIndex,
            storeGenerationIndex);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static Func<MaterializationContext, object> GetInstanceFactory(this IEntityType entityType)
        => ((IRuntimeEntityType)entityType).InstanceFactory;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static Func<ISnapshot> GetEmptyShadowValuesFactory(this IEntityType entityType)
        => ((IRuntimeEntityType)entityType).EmptyShadowValuesFactory;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static EntityType? LeastDerivedType(this EntityType entityType, EntityType otherEntityType)
        => (EntityType?)((IReadOnlyEntityType)entityType).LeastDerivedType(otherEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool IsAssignableFrom(this EntityType entityType, IReadOnlyEntityType otherEntityType)
        => ((IReadOnlyEntityType)entityType).IsAssignableFrom(otherEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool IsStrictlyDerivedFrom(this EntityType entityType, IReadOnlyEntityType otherEntityType)
        => ((IReadOnlyEntityType)entityType).IsStrictlyDerivedFrom(otherEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static object? GetDiscriminatorValue(this EntityType entityType)
        => ((IReadOnlyEntityType)entityType).GetDiscriminatorValue();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IReadOnlyKey? FindDeclaredPrimaryKey(this IReadOnlyEntityType entityType)
        => entityType.BaseType == null ? entityType.FindPrimaryKey() : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IEnumerable<IReadOnlyNavigation> FindDerivedNavigations(
        this IReadOnlyEntityType entityType,
        string navigationName)
        => entityType.GetDerivedNavigations().Where(navigation => navigationName == navigation.Name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IEnumerable<IPropertyBase> GetPropertiesAndNavigations(
        this IEntityType entityType)
        => entityType.GetProperties().Concat<IPropertyBase>(entityType.GetNavigations());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static IProperty CheckPropertyBelongsToType(
        this IEntityType entityType,
        IProperty property)
    {
        Check.NotNull(property, nameof(property));

        if (!property.DeclaringEntityType.IsAssignableFrom(entityType))
        {
            throw new InvalidOperationException(
                CoreStrings.PropertyDoesNotBelong(property.Name, property.DeclaringEntityType.DisplayName(), entityType.DisplayName()));
        }

        return property;
    }
}",1,439 457 334 2000 123 612 439 457 461 2001 40 467 2002 2003 41 619 40 40 2004 41 2003 41 46 2001 40 41 59 612 439 457 461 2005 40 467 2002 2003 41 619 40 40 2004 41 2003 41 46 2005 40 41 59 612 439 457 2006 2007 40 467 2008 2003 44 461 2009 41 123 2006 63 2010 59 392 40 2003 46 2011 41 123 2010 61 2003 46 2012 40 41 33 59 125 360 123 2010 61 2003 46 2013 46 2014 40 2009 41 46 2015 40 41 59 392 40 2010 614 424 41 123 469 418 2016 40 2017 46 2018 40 2009 44 2003 46 2001 40 41 41 41 59 125 125 450 2010 59 125 612 439 457 323 2019 40 467 2008 2003 41 619 2003 46 2019 40 41 59 612 439 457 2020 63 2021 40 467 2008 2003 41 619 2003 46 2022 40 41 46 2023 40 2024 619 2024 46 2025 41 59 612 439 457 2026 63 2021 40 467 2027 2003 41 619 2003 46 2022 40 41 46 2023 40 2024 619 2024 46 2025 41 59 612 439 457 2008 63 2028 40 467 2008 2003 44 2029 2030 41 123 392 40 2003 46 2031 614 2030 41 123 450 2003 59 125 490 2032 61 2003 59 496 40 473 41 123 490 2033 61 2032 46 2034 40 41 59 392 40 2033 614 424 41 123 450 424 59 125 2032 61 2033 46 2035 59 392 40 2032 46 2031 46 2036 40 2030 41 41 123 450 2032 59 125 125 125 612 439 457 323 2037 40 467 2008 2003 44 2029 2030 41 619 2003 46 2028 40 2030 41 631 424 59 612 439 457 323 2037 40 467 2008 2003 44 2008 2030 41 123 392 40 2003 614 2030 41 123 450 473 59 125 490 2038 61 2003 59 496 40 473 41 123 490 2039 61 2038 46 2040 40 41 59 392 40 2039 614 424 41 123 450 380 59 125 2038 61 2039 46 2041 59 392 40 2038 46 2042 40 2030 41 41 123 450 473 59 125 125 125 612 91 2043 93 439 457 461 2044 40 467 2004 2045 44 461 2046 44 461 2047 41 619 2045 46 2048 43 648 43 2047 43 648 43 2046 59 612 439 457 323 2049 40 467 2008 2003 41 123 490 2050 61 2003 46 2051 40 41 59 450 2050 614 2052 46 2053 606 2050 614 2052 46 2054 59 125 612 439 457 404 2055 40 467 2056 2003 41 619 2057 40 2003 41 46 2055 59 612 439 457 404 2058 40 467 2056 2003 41 619 2057 40 2003 41 46 2059 59 612 439 457 404 2060 40 467 2056 2003 41 619 2057 40 2003 41 46 2060 59 612 439 457 404 2061 40 467 2056 2003 41 619 2057 40 2003 41 46 2062 59 612 439 457 404 2063 40 467 2056 2003 41 619 2057 40 2003 41 46 2063 59 612 439 457 404 2064 40 467 2056 2003 41 619 2057 40 2003 41 46 2064 59 612 439 457 2065 2057 40 467 2056 2003 41 619 40 40 2066 41 2003 41 46 2067 59 612 439 457 2065 2068 40 467 2066 2003 41 123 490 2069 61 1500 59 490 2070 61 1500 59 490 2071 61 1500 59 490 2072 61 1500 59 490 2073 61 1500 59 490 2074 61 1500 59 490 2075 61 2003 46 2076 634 2057 40 41 59 392 40 2075 631 424 41 123 2069 61 2075 46 2064 59 2070 61 2075 46 2063 59 2071 61 2075 46 2060 59 2072 61 2075 46 2062 59 2073 61 2075 46 2059 59 2074 61 2075 46 2055 59 125 386 40 490 2077 398 2003 46 2078 40 41 41 123 490 2079 61 418 2080 40 2069 58 2069 637 44 2071 58 2077 46 2081 40 41 63 2071 637 58 45 1501 44 2072 58 2077 46 2082 40 41 63 2072 637 58 45 1501 44 2073 58 2077 46 2083 40 41 606 2077 46 2084 40 41 63 2073 637 58 45 1501 44 2074 58 2077 46 2085 40 41 63 2074 637 58 45 1501 41 59 40 40 2086 41 2077 41 46 2080 61 2079 59 125 490 2087 61 2003 46 2088 40 41 631 2089 46 2090 59 386 40 490 2091 398 2003 46 2092 40 41 46 2093 60 2094 62 40 2003 46 2095 40 41 41 41 123 490 2096 61 418 2097 40 2069 58 2070 637 44 2071 58 45 1501 44 2072 58 2091 46 2098 40 41 63 2072 637 58 45 1501 44 2073 58 40 40 2099 41 2091 41 46 2100 605 2087 63 45 1501 58 2073 637 44 2074 58 45 1501 41 59 40 40 2101 41 2091 41 46 2097 61 2096 59 125 386 40 490 2102 398 2003 46 2103 40 41 41 123 490 2104 61 418 2105 40 2069 58 45 1501 44 2071 58 45 1501 44 2072 58 45 1501 44 2073 58 45 1501 44 2074 58 45 1501 41 59 40 40 2106 41 2102 41 46 2105 61 2104 59 125 450 418 2065 40 2069 44 2070 44 2071 44 2072 44 2073 44 2074 41 59 125 612 439 457 2107 60 2108 44 426 62 2109 40 467 2056 2003 41 619 40 40 2066 41 2003 41 46 2110 59 612 439 457 2107 60 2111 62 2112 40 467 2056 2003 41 619 40 40 2066 41 2003 41 46 2113 59 612 439 457 2114 63 2115 40 467 2114 2003 44 2114 2116 41 619 40 2114 63 41 40 40 2008 41 2003 41 46 2115 40 2116 41 59 612 439 457 323 2117 40 467 2114 2003 44 2008 2116 41 619 40 40 2008 41 2003 41 46 2117 40 2116 41 59 612 439 457 323 2118 40 467 2114 2003 44 2008 2116 41 619 40 40 2008 41 2003 41 46 2118 40 2116 41 59 612 439 457 426 63 2119 40 467 2114 2003 41 619 40 40 2008 41 2003 41 46 2119 40 41 59 612 439 457 2120 63 2121 40 467 2008 2003 41 619 2003 46 2122 614 424 63 2003 46 2123 40 41 58 424 59 612 439 457 2124 60 2125 62 2126 40 467 2008 2003 44 461 2009 41 619 2003 46 2127 40 41 46 2128 40 2129 619 2009 614 2129 46 2048 41 59 612 439 457 2124 60 2130 62 2131 40 467 2056 2003 41 619 2003 46 2132 40 41 46 2133 60 2130 62 40 2003 46 2134 40 41 41 59 612 439 457 2135 2136 40 467 2056 2003 44 2135 2137 41 123 2138 46 2139 40 2137 44 2140 40 2137 41 41 59 392 40 33 2137 46 2141 46 2117 40 2003 41 41 123 469 418 2142 40 2143 46 2144 40 2137 46 2048 44 2137 46 2141 46 2001 40 41 44 2003 46 2001 40 41 41 41 59 125 450 2137 59 125 125 
70991,C#,"public class CSharpEntityTypeGeneratorTest : ModelCodeGeneratorTestBase
{
    [ConditionalFact]
    public void KeylessAttribute_is_generated_for_key_less_entity()
        => Test(
            modelBuilder => modelBuilder.Entity(""Vista"").HasNoKey(),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [Keyless]
    public partial class Vista
    {
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Vista.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Vista> Vista { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Vista"");
                Assert.Null(entityType.FindPrimaryKey());
            });

    [ConditionalFact]
    public void TableAttribute_is_generated_for_custom_name()
        => Test(
            modelBuilder =>
            {
                modelBuilder.Entity(
                    ""Vista"",
                    b =>
                    {
                        b.ToTable(""Vistas""); // Default name is ""Vista"" in the absence of pluralizer
                        b.Property<int>(""Id"");
                        b.HasKey(""Id"");
                    });
            },
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [Table(""""Vistas"""")]
    public partial class Vista
    {
        [Key]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Vista.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Vista"");
                Assert.Equal(""Vistas"", entityType.GetTableName());
                Assert.Null(entityType.GetSchema());
            });

    [ConditionalFact]
    public void TableAttribute_is_not_generated_for_default_schema()
        => Test(
            modelBuilder =>
            {
                modelBuilder.HasDefaultSchema(""dbo"");
                modelBuilder.Entity(
                    ""Vista"",
                    b =>
                    {
                        b.ToTable(""Vista"", ""dbo""); // Default name is ""Vista"" in the absence of pluralizer
                        b.Property<int>(""Id"");
                        b.HasKey(""Id"");
                    });
            },
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Vista
    {
        [Key]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Vista.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Vista"");
                Assert.Equal(""Vista"", entityType.GetTableName());
                Assert.Null(entityType.GetSchema()); // Takes through model default schema
            });

    [ConditionalFact]
    public void TableAttribute_is_generated_for_non_default_schema()
        => Test(
            modelBuilder =>
            {
                modelBuilder.HasDefaultSchema(""dbo"");
                modelBuilder.Entity(
                    ""Vista"",
                    b =>
                    {
                        b.ToTable(""Vista"", ""custom"");
                        b.Property<int>(""Id"");
                        b.HasKey(""Id"");
                    });
            },
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [Table(""""Vista"""", Schema = """"custom"""")]
    public partial class Vista
    {
        [Key]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Vista.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Vista"");
                Assert.Equal(""Vista"", entityType.GetTableName());
                Assert.Equal(""custom"", entityType.GetSchema());
            });

    [ConditionalFact]
    public void TableAttribute_is_not_generated_for_views()
        => Test(
            modelBuilder => modelBuilder.Entity(""Vista"").ToView(""Vistas"", ""dbo""),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [Keyless]
    public partial class Vista
    {
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Vista.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Vista"");
                Assert.Equal(""Vistas"", entityType.GetViewName());
                Assert.Null(entityType.GetTableName());
                Assert.Equal(""dbo"", entityType.GetViewSchema());
                Assert.Null(entityType.GetSchema());
            });

    [ConditionalFact]
    public void IndexAttribute_is_generated_for_multiple_indexes_with_name_unique()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""EntityWithIndexes"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<int>(""A"");
                        x.Property<int>(""B"");
                        x.Property<int>(""C"");
                        x.HasKey(""Id"");
                        x.HasIndex(new[] { ""A"", ""B"" }, ""IndexOnAAndB"")
                            .IsUnique();
                        x.HasIndex(new[] { ""B"", ""C"" }, ""IndexOnBAndC"");
                        x.HasIndex(""C"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [Index(""""C"""")]
    [Index(""""A"""", """"B"""", Name = """"IndexOnAAndB"""", IsUnique = true)]
    [Index(""""B"""", """"C"""", Name = """"IndexOnBAndC"""")]
    public partial class EntityWithIndexes
    {
        [Key]
        public int Id { get; set; }
        public int A { get; set; }
        public int B { get; set; }
        public int C { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""EntityWithIndexes.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.EntityWithIndexes"");
                var indexes = entityType.GetIndexes();
                Assert.Collection(
                    indexes,
                    t => Assert.Null(t.Name),
                    t => Assert.Equal(""IndexOnAAndB"", t.Name),
                    t => Assert.Equal(""IndexOnBAndC"", t.Name));
            });

    [ConditionalFact]
    public void Entity_with_indexes_generates_IndexAttribute_only_for_indexes_without_annotations()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""EntityWithIndexes"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<int>(""A"");
                        x.Property<int>(""B"");
                        x.Property<int>(""C"");
                        x.HasKey(""Id"");
                        x.HasIndex(new[] { ""A"", ""B"" }, ""IndexOnAAndB"")
                            .IsUnique();
                        x.HasIndex(new[] { ""B"", ""C"" }, ""IndexOnBAndC"")
                            .HasFilter(""Filter SQL"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [Index(""""A"""", """"B"""", Name = """"IndexOnAAndB"""", IsUnique = true)]
    public partial class EntityWithIndexes
    {
        [Key]
        public int Id { get; set; }
        public int A { get; set; }
        public int B { get; set; }
        public int C { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""EntityWithIndexes.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EntityWithIndexes> EntityWithIndexes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EntityWithIndexes>(entity =>
            {
                entity.HasIndex(e => new { e.B, e.C }, """"IndexOnBAndC"""")
                    .HasFilter(""""Filter SQL"""");

                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
                Assert.Equal(2, model.FindEntityType(""TestNamespace.EntityWithIndexes"").GetIndexes().Count()));

    [ConditionalFact]
    public void KeyAttribute_is_generated_for_single_property_and_no_fluent_api()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""PrimaryKey"");
                        x.HasKey(""PrimaryKey"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int PrimaryKey { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Entity> Entity { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Entity>(entity =>
            {
                entity.Property(e => e.PrimaryKey).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
                Assert.Equal(""PrimaryKey"", model.FindEntityType(""TestNamespace.Entity"").FindPrimaryKey().Properties[0].Name));

    [ConditionalFact]
    public void KeyAttribute_is_generated_on_multiple_properties_but_configuring_using_fluent_api_for_composite_key()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Key"");
                        x.Property<int>(""Serial"");
                        x.HasKey(""Key"", ""Serial"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        [Key]
        public int Key { get; set; }
        [Key]
        public int Serial { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Post> Post { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Post>(entity =>
            {
                entity.HasKey(e => new { e.Key, e.Serial });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");
                Assert.Equal(new[] { ""Key"", ""Serial"" }, postType.FindPrimaryKey().Properties.Select(p => p.Name));
            });

    [ConditionalFact]
    public void Required_and_not_required_properties_without_nrt()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<string>(""RequiredString"").IsRequired();
                        x.Property<string>(""NonRequiredString"");
                        x.Property<int>(""RequiredInt"");
                        x.Property<int?>(""NonRequiredInt"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        public int? NonRequiredInt { get; set; }
        public string NonRequiredString { get; set; }
        public int RequiredInt { get; set; }
        [Required]
        public string RequiredString { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Entity"");
                Assert.False(entityType.GetProperty(""RequiredString"").IsNullable);
                Assert.True(entityType.GetProperty(""NonRequiredString"").IsNullable);
                Assert.False(entityType.GetProperty(""RequiredInt"").IsNullable);
                Assert.True(entityType.GetProperty(""NonRequiredInt"").IsNullable);
            });

    [ConditionalFact]
    public void Required_and_not_required_properties_with_nrt()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<string>(""RequiredString"").IsRequired();
                        x.Property<string>(""NonRequiredString"");
                        x.Property<int>(""RequiredInt"");
                        x.Property<int?>(""NonRequiredInt"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true, UseNullableReferenceTypes = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        public int? NonRequiredInt { get; set; }
        public string? NonRequiredString { get; set; }
        public int RequiredInt { get; set; }
        public string RequiredString { get; set; } = null!;
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Entity"");
                Assert.False(entityType.GetProperty(""RequiredString"").IsNullable);
                Assert.True(entityType.GetProperty(""NonRequiredString"").IsNullable);
                Assert.False(entityType.GetProperty(""RequiredInt"").IsNullable);
                Assert.True(entityType.GetProperty(""NonRequiredInt"").IsNullable);
            });

    [ConditionalFact]
    public void Required_and_not_required_navigations_without_nrt()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");

                        x.HasOne(""Dependent1"", ""RequiredReferenceNavigation"").WithMany(""Entity"").IsRequired();
                        x.HasOne(""Dependent2"", ""OptionalReferenceNavigation"").WithMany(""Entity"");
                        x.HasOne(""Dependent3"", ""RequiredValueNavigation"").WithMany(""Entity"").IsRequired();
                        x.HasOne(""Dependent4"", ""OptionalValueNavigation"").WithMany(""Entity"");
                    })
                .Entity(""Dependent1"", x => x.Property<string>(""Id""))
                .Entity(""Dependent2"", x => x.Property<string>(""Id""))
                .Entity(""Dependent3"", x => x.Property<int>(""Id""))
                .Entity(""Dependent4"", x => x.Property<int>(""Id"")),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        public string OptionalReferenceNavigationId { get; set; }
        public int? OptionalValueNavigationId { get; set; }
        [Required]
        public string RequiredReferenceNavigationId { get; set; }
        public int RequiredValueNavigationId { get; set; }

        [ForeignKey(""""OptionalReferenceNavigationId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent2 OptionalReferenceNavigation { get; set; }
        [ForeignKey(""""OptionalValueNavigationId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent4 OptionalValueNavigation { get; set; }
        [ForeignKey(""""RequiredReferenceNavigationId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent1 RequiredReferenceNavigation { get; set; }
        [ForeignKey(""""RequiredValueNavigationId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent3 RequiredValueNavigation { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Entity"");

                Assert.False(entityType.GetProperty(""RequiredReferenceNavigationId"").IsNullable);
                Assert.True(entityType.GetProperty(""OptionalReferenceNavigationId"").IsNullable);
                Assert.False(entityType.GetProperty(""RequiredValueNavigationId"").IsNullable);
                Assert.True(entityType.GetProperty(""OptionalValueNavigationId"").IsNullable);

                Assert.True(entityType.FindNavigation(""RequiredReferenceNavigation"")!.ForeignKey.IsRequired);
                Assert.False(entityType.FindNavigation(""OptionalReferenceNavigation"")!.ForeignKey.IsRequired);
                Assert.True(entityType.FindNavigation(""RequiredValueNavigation"")!.ForeignKey.IsRequired);
                Assert.False(entityType.FindNavigation(""OptionalValueNavigation"")!.ForeignKey.IsRequired);
            });

    [ConditionalFact]
    public void Required_and_not_required_reference_navigations_with_nrt()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");

                        x.HasOne(""Dependent1"", ""RequiredNavigationWithReferenceForeignKey"").WithOne(""Entity"").IsRequired();
                        x.HasOne(""Dependent2"", ""OptionalNavigationWithReferenceForeignKey"").WithOne(""Entity"");
                        x.HasOne(""Dependent3"", ""RequiredNavigationWithValueForeignKey"").WithOne(""Entity"").IsRequired();
                        x.HasOne(""Dependent4"", ""OptionalNavigationWithValueForeignKey"").WithOne(""Entity"");
                    })
                .Entity(""Dependent1"", x => x.Property<string>(""Id""))
                .Entity(""Dependent2"", x => x.Property<string>(""Id""))
                .Entity(""Dependent3"", x => x.Property<int>(""Id""))
                .Entity(""Dependent4"", x => x.Property<int>(""Id"")),
            new ModelCodeGenerationOptions { UseDataAnnotations = true, UseNullableReferenceTypes = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        public string? OptionalNavigationWithReferenceForeignKeyId { get; set; }
        public int? OptionalNavigationWithValueForeignKeyId { get; set; }
        public string RequiredNavigationWithReferenceForeignKeyId { get; set; } = null!;
        public int RequiredNavigationWithValueForeignKeyId { get; set; }

        [ForeignKey(""""OptionalNavigationWithReferenceForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent2? OptionalNavigationWithReferenceForeignKey { get; set; }
        [ForeignKey(""""OptionalNavigationWithValueForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent4? OptionalNavigationWithValueForeignKey { get; set; }
        [ForeignKey(""""RequiredNavigationWithReferenceForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent1 RequiredNavigationWithReferenceForeignKey { get; set; } = null!;
        [ForeignKey(""""RequiredNavigationWithValueForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent3 RequiredNavigationWithValueForeignKey { get; set; } = null!;
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Entity"");

                Assert.False(entityType.GetProperty(""RequiredNavigationWithReferenceForeignKeyId"").IsNullable);
                Assert.True(entityType.GetProperty(""OptionalNavigationWithReferenceForeignKeyId"").IsNullable);
                Assert.False(entityType.GetProperty(""RequiredNavigationWithValueForeignKeyId"").IsNullable);
                Assert.True(entityType.GetProperty(""OptionalNavigationWithValueForeignKeyId"").IsNullable);

                Assert.True(entityType.FindNavigation(""RequiredNavigationWithReferenceForeignKey"")!.ForeignKey.IsRequired);
                Assert.False(entityType.FindNavigation(""OptionalNavigationWithReferenceForeignKey"")!.ForeignKey.IsRequired);
                Assert.True(entityType.FindNavigation(""RequiredNavigationWithValueForeignKey"")!.ForeignKey.IsRequired);
                Assert.False(entityType.FindNavigation(""OptionalNavigationWithValueForeignKey"")!.ForeignKey.IsRequired);
            });

    [ConditionalFact]
    public void Required_and_not_required_collection_navigations_with_nrt()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");

                        x.HasOne(""Dependent1"", ""RequiredNavigationWithReferenceForeignKey"").WithMany(""Entity"").IsRequired();
                        x.HasOne(""Dependent2"", ""OptionalNavigationWithReferenceForeignKey"").WithMany(""Entity"");
                        x.HasOne(""Dependent3"", ""RequiredNavigationWithValueForeignKey"").WithMany(""Entity"").IsRequired();
                        x.HasOne(""Dependent4"", ""OptionalNavigationWithValueForeignKey"").WithMany(""Entity"");
                    })
                .Entity(""Dependent1"", x => x.Property<string>(""Id""))
                .Entity(""Dependent2"", x => x.Property<string>(""Id""))
                .Entity(""Dependent3"", x => x.Property<int>(""Id""))
                .Entity(""Dependent4"", x => x.Property<int>(""Id"")),
            new ModelCodeGenerationOptions { UseDataAnnotations = true, UseNullableReferenceTypes = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        public string? OptionalNavigationWithReferenceForeignKeyId { get; set; }
        public int? OptionalNavigationWithValueForeignKeyId { get; set; }
        public string RequiredNavigationWithReferenceForeignKeyId { get; set; } = null!;
        public int RequiredNavigationWithValueForeignKeyId { get; set; }

        [ForeignKey(""""OptionalNavigationWithReferenceForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent2? OptionalNavigationWithReferenceForeignKey { get; set; }
        [ForeignKey(""""OptionalNavigationWithValueForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent4? OptionalNavigationWithValueForeignKey { get; set; }
        [ForeignKey(""""RequiredNavigationWithReferenceForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent1 RequiredNavigationWithReferenceForeignKey { get; set; } = null!;
        [ForeignKey(""""RequiredNavigationWithValueForeignKeyId"""")]
        [InverseProperty(""""Entity"""")]
        public virtual Dependent3 RequiredNavigationWithValueForeignKey { get; set; } = null!;
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));

                for (var i = 1; i <= 4; i++)
                {
                    Assert.Contains(
                        ""public virtual ICollection<Entity> Entity { get; set; }"",
                        code.AdditionalFiles.Single(f => f.Path == $""Dependent{i}.cs"").Code);
                }
            },
            model =>
            {
                var entityType = model.FindEntityType(""TestNamespace.Entity"");

                Assert.False(entityType.GetProperty(""RequiredNavigationWithReferenceForeignKeyId"").IsNullable);
                Assert.True(entityType.GetProperty(""OptionalNavigationWithReferenceForeignKeyId"").IsNullable);
                Assert.False(entityType.GetProperty(""RequiredNavigationWithValueForeignKeyId"").IsNullable);
                Assert.True(entityType.GetProperty(""OptionalNavigationWithValueForeignKeyId"").IsNullable);

                Assert.True(entityType.FindNavigation(""RequiredNavigationWithReferenceForeignKey"")!.ForeignKey.IsRequired);
                Assert.False(entityType.FindNavigation(""OptionalNavigationWithReferenceForeignKey"")!.ForeignKey.IsRequired);
                Assert.True(entityType.FindNavigation(""RequiredNavigationWithValueForeignKey"")!.ForeignKey.IsRequired);
                Assert.False(entityType.FindNavigation(""OptionalNavigationWithValueForeignKey"")!.ForeignKey.IsRequired);
            });

    [ConditionalFact]
    public void RequiredAttribute_is_not_generated_for_key_property()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<string>(""RequiredString"");
                        x.HasKey(""RequiredString"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public string RequiredString { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
                Assert.False(model.FindEntityType(""TestNamespace.Entity"").GetProperty(""RequiredString"").IsNullable));

    [ConditionalFact]
    public void ColumnAttribute_is_generated_for_property()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<string>(""A"").HasColumnName(""propertyA"");
                        x.Property<string>(""B"").HasColumnType(""nchar(10)"");
                        x.Property<string>(""C"").HasColumnName(""random"").HasColumnType(""varchar(200)"");
                        x.Property<decimal>(""D"").HasColumnType(""numeric(18, 2)"");
                        x.Property<string>(""E"").HasMaxLength(100);
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        [Column(""""propertyA"""")]
        public string A { get; set; }
        [Column(TypeName = """"nchar(10)"""")]
        public string B { get; set; }
        [Column(""""random"""", TypeName = """"varchar(200)"""")]
        public string C { get; set; }
        [Column(TypeName = """"numeric(18, 2)"""")]
        public decimal D { get; set; }
        [StringLength(100)]
        public string E { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Entity> Entity { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Entity>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
            {
                var entitType = model.FindEntityType(""TestNamespace.Entity"");
                Assert.Equal(""propertyA"", entitType.GetProperty(""A"").GetColumnBaseName());
                Assert.Equal(""nchar(10)"", entitType.GetProperty(""B"").GetColumnType());
                Assert.Equal(""random"", entitType.GetProperty(""C"").GetColumnBaseName());
                Assert.Equal(""varchar(200)"", entitType.GetProperty(""C"").GetColumnType());
            });

    [ConditionalFact]
    public void MaxLengthAttribute_is_generated_for_property()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<string>(""A"").HasMaxLength(34);
                        x.Property<byte[]>(""B"").HasMaxLength(10);
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        [StringLength(34)]
        public string A { get; set; }
        [MaxLength(10)]
        public byte[] B { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entitType = model.FindEntityType(""TestNamespace.Entity"");
                Assert.Equal(34, entitType.GetProperty(""A"").GetMaxLength());
                Assert.Equal(10, entitType.GetProperty(""B"").GetMaxLength());
            });

    [ConditionalFact]
    public void UnicodeAttribute_is_generated_for_property()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<string>(""A"").HasMaxLength(34).IsUnicode();
                        x.Property<string>(""B"").HasMaxLength(34).IsUnicode(false);
                        x.Property<string>(""C"").HasMaxLength(34);
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        [StringLength(34)]
        [Unicode]
        public string A { get; set; }
        [StringLength(34)]
        [Unicode(false)]
        public string B { get; set; }
        [StringLength(34)]
        public string C { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entitType = model.FindEntityType(""TestNamespace.Entity"");
                Assert.True(entitType.GetProperty(""A"").IsUnicode());
                Assert.False(entitType.GetProperty(""B"").IsUnicode());
                Assert.Null(entitType.GetProperty(""C"").IsUnicode());
            });

    [ConditionalFact]
    public void PrecisionAttribute_is_generated_for_property()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<decimal>(""A"").HasPrecision(10);
                        x.Property<decimal>(""B"").HasPrecision(14, 3);
                        x.Property<DateTime>(""C"").HasPrecision(5);
                        x.Property<DateTimeOffset>(""D"").HasPrecision(3);
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        [Precision(10)]
        public decimal A { get; set; }
        [Precision(14, 3)]
        public decimal B { get; set; }
        [Precision(5)]
        public DateTime C { get; set; }
        [Precision(3)]
        public DateTimeOffset D { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model =>
            {
                var entitType = model.FindEntityType(""TestNamespace.Entity"");
                Assert.Equal(10, entitType.GetProperty(""A"").GetPrecision());
                Assert.Equal(14, entitType.GetProperty(""B"").GetPrecision());
                Assert.Equal(3, entitType.GetProperty(""B"").GetScale());
                Assert.Equal(5, entitType.GetProperty(""C"").GetPrecision());
                Assert.Equal(3, entitType.GetProperty(""D"").GetPrecision());
            });

    [ConditionalFact]
    public void Comments_are_generated()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.HasComment(""Entity Comment"");
                        x.Property<int>(""Id"").HasComment(""Property Comment"");
                    })
            ,
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    /// <summary>
    /// Entity Comment
    /// </summary>
    public partial class Entity
    {
        /// <summary>
        /// Property Comment
        /// </summary>
        [Key]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model => { });

    [ConditionalFact]
    public void Comments_complex_are_generated()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        x.HasComment(
                            @""Entity Comment
On multiple lines
With XML content <br/>"");
                        x.Property<int>(""Id"").HasComment(
                            @""Property Comment
On multiple lines
With XML content <br/>"");
                    })
            ,
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    /// <summary>
    /// Entity Comment
    /// On multiple lines
    /// With XML content &lt;br/&gt;
    /// </summary>
    public partial class Entity
    {
        /// <summary>
        /// Property Comment
        /// On multiple lines
        /// With XML content &lt;br/&gt;
        /// </summary>
        [Key]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model => { });

    [ConditionalFact]
    public void Properties_are_sorted_in_order_of_definition_in_table()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Entity"",
                    x =>
                    {
                        // Order would be PK first and then rest alphabetically since they are all shadow
                        x.Property<int>(""Id"");
                        x.Property<string>(""LastProperty"");
                        x.Property<string>(""FirstProperty"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Entity
    {
        [Key]
        public int Id { get; set; }
        public string FirstProperty { get; set; }
        public string LastProperty { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Entity.cs""));
            },
            model => { });

    [ConditionalFact]
    public void Navigation_properties_are_sorted_after_properties_and_collection_are_initialized_in_ctor()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Person"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Contribution"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Id"");

                        x.HasOne(""Person"", ""Author"").WithMany(""Posts"");
                        x.HasMany(""Contribution"", ""Contributions"").WithOne();
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        public Post()
        {
            Contributions = new HashSet<Contribution>();
        }

        [Key]
        public int Id { get; set; }
        public int? AuthorId { get; set; }

        [ForeignKey(""""AuthorId"""")]
        [InverseProperty(""""Posts"""")]
        public virtual Person Author { get; set; }
        public virtual ICollection<Contribution> Contributions { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Person
    {
        public Person()
        {
            Posts = new HashSet<Post>();
        }

        [Key]
        public int Id { get; set; }

        [InverseProperty(""""Author"""")]
        public virtual ICollection<Post> Posts { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Person.cs""));
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");
                var authorNavigation = postType.FindNavigation(""Author"");
                Assert.True(authorNavigation.IsOnDependent);
                Assert.Equal(""TestNamespace.Person"", authorNavigation.ForeignKey.PrincipalEntityType.Name);

                var contributionsNav = postType.FindNavigation(""Contributions"");
                Assert.False(contributionsNav.IsOnDependent);
                Assert.Equal(""TestNamespace.Contribution"", contributionsNav.ForeignKey.DeclaringEntityType.Name);
            });

    [ConditionalFact]
    public void ForeignKeyAttribute_is_generated_for_composite_fk()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x =>
                    {
                        x.Property<int>(""Id1"");
                        x.Property<int>(""Id2"");
                        x.HasKey(""Id1"", ""Id2"");
                    })
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Id"");

                        x.HasOne(""Blog"", ""BlogNavigation"").WithMany(""Posts"").HasForeignKey(""BlogId1"", ""BlogId2"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        [Key]
        public int Id { get; set; }
        public int? BlogId1 { get; set; }
        public int? BlogId2 { get; set; }

        [ForeignKey(""""BlogId1,BlogId2"""")]
        [InverseProperty(""""Posts"""")]
        public virtual Blog BlogNavigation { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<Post> Post { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>(entity =>
            {
                entity.HasKey(e => new { e.Id1, e.Id2 });
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");
                var blogNavigation = postType.FindNavigation(""BlogNavigation"");
                Assert.Equal(""TestNamespace.Blog"", blogNavigation.ForeignKey.PrincipalEntityType.Name);
                Assert.Equal(new[] { ""BlogId1"", ""BlogId2"" }, blogNavigation.ForeignKey.Properties.Select(p => p.Name));
            });

    [ConditionalFact]
    public void ForeignKeyAttribute_InversePropertyAttribute_is_not_generated_for_alternate_key()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<int>(""Id1"");
                        x.Property<int>(""Id2"");
                    })
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Id"");

                        x.HasOne(""Blog"", ""BlogNavigation"").WithMany(""Posts"")
                            .HasPrincipalKey(""Id1"", ""Id2"")
                            .HasForeignKey(""BlogId1"", ""BlogId2"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        [Key]
        public int Id { get; set; }
        public int? BlogId1 { get; set; }
        public int? BlogId2 { get; set; }

        public virtual Blog BlogNavigation { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<Post> Post { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();

                entity.HasOne(d => d.BlogNavigation)
                    .WithMany(p => p.Posts)
                    .HasPrincipalKey(p => new { p.Id1, p.Id2 })
                    .HasForeignKey(d => new { d.BlogId1, d.BlogId2 });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");
                var blogNavigation = postType.FindNavigation(""BlogNavigation"");
                Assert.Equal(""TestNamespace.Blog"", blogNavigation.ForeignKey.PrincipalEntityType.Name);
                Assert.Equal(new[] { ""BlogId1"", ""BlogId2"" }, blogNavigation.ForeignKey.Properties.Select(p => p.Name));
                Assert.Equal(new[] { ""Id1"", ""Id2"" }, blogNavigation.ForeignKey.PrincipalKey.Properties.Select(p => p.Name));
            });

    [ConditionalFact]
    public void InverseProperty_when_navigation_property_with_same_type_and_navigation_name()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.HasOne(""Blog"", ""Blog"").WithMany(""Posts"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        [Key]
        public int Id { get; set; }
        public int? BlogId { get; set; }

        [ForeignKey(""""BlogId"""")]
        [InverseProperty(""""Posts"""")]
        public virtual Blog Blog { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");
                var blogNavigation = postType.FindNavigation(""Blog"");

                var foreignKeyProperty = Assert.Single(blogNavigation.ForeignKey.Properties);
                Assert.Equal(""BlogId"", foreignKeyProperty.Name);

                var inverseNavigation = blogNavigation.Inverse;
                Assert.Equal(""TestNamespace.Blog"", inverseNavigation.DeclaringEntityType.Name);
                Assert.Equal(""Posts"", inverseNavigation.Name);
            });

    [ConditionalFact]
    public void InverseProperty_when_navigation_property_with_same_type_and_property_name()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.HasOne(""Blog"", ""BlogNavigation"").WithMany(""Posts"").HasForeignKey(""Blog"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        [Key]
        public int Id { get; set; }
        public int? Blog { get; set; }

        [ForeignKey(""""Blog"""")]
        [InverseProperty(""""Posts"""")]
        public virtual Blog BlogNavigation { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");
                var blogNavigation = postType.FindNavigation(""BlogNavigation"");

                var foreignKeyProperty = Assert.Single(blogNavigation.ForeignKey.Properties);
                Assert.Equal(""Blog"", foreignKeyProperty.Name);

                var inverseNavigation = blogNavigation.Inverse;
                Assert.Equal(""TestNamespace.Blog"", inverseNavigation.DeclaringEntityType.Name);
                Assert.Equal(""Posts"", inverseNavigation.Name);
            });

    [ConditionalFact]
    public void InverseProperty_when_navigation_property_with_same_type_and_other_navigation_name()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.HasOne(""Blog"", ""Blog"").WithMany(""Posts"");
                        x.HasOne(""Blog"", ""OriginalBlog"").WithMany(""OriginalPosts"").HasForeignKey(""OriginalBlogId"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        [Key]
        public int Id { get; set; }
        public int? BlogId { get; set; }
        public int? OriginalBlogId { get; set; }

        [ForeignKey(""""BlogId"""")]
        [InverseProperty(""""Posts"""")]
        public virtual Blog Blog { get; set; }
        [ForeignKey(""""OriginalBlogId"""")]
        [InverseProperty(""""OriginalPosts"""")]
        public virtual Blog OriginalBlog { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""Post.cs""));
            },
            model =>
            {
                var postType = model.FindEntityType(""TestNamespace.Post"");

                var blogNavigation = postType.FindNavigation(""Blog"");

                var foreignKeyProperty = Assert.Single(blogNavigation.ForeignKey.Properties);
                Assert.Equal(""BlogId"", foreignKeyProperty.Name);

                var inverseNavigation = blogNavigation.Inverse;
                Assert.Equal(""TestNamespace.Blog"", inverseNavigation.DeclaringEntityType.Name);
                Assert.Equal(""Posts"", inverseNavigation.Name);

                var originalBlogNavigation = postType.FindNavigation(""OriginalBlog"");

                var originalForeignKeyProperty = Assert.Single(originalBlogNavigation.ForeignKey.Properties);
                Assert.Equal(""OriginalBlogId"", originalForeignKeyProperty.Name);

                var originalInverseNavigation = originalBlogNavigation.Inverse;
                Assert.Equal(""TestNamespace.Blog"", originalInverseNavigation.DeclaringEntityType.Name);
                Assert.Equal(""OriginalPosts"", originalInverseNavigation.Name);
            });

    [ConditionalFact]
    public void Entity_with_custom_annotation()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""EntityWithAnnotation"",
                    x =>
                    {
                        x.HasAnnotation(""Custom:EntityAnnotation"", ""first argument"");
                        x.Property<int>(""Id"");
                        x.HasKey(""Id"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    [CustomEntityDataAnnotation(""""first argument"""")]
    public partial class EntityWithAnnotation
    {
        [Key]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""EntityWithAnnotation.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EntityWithAnnotation> EntityWithAnnotation { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EntityWithAnnotation>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            assertModel: null,
            skipBuild: true);

    [ConditionalFact]
    public void Entity_property_with_custom_annotation()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""EntityWithPropertyAnnotation"",
                    x =>
                    {
                        x.Property<int>(""Id"")
                            .HasAnnotation(""Custom:PropertyAnnotation"", ""first argument"");
                        x.HasKey(""Id"");
                    }),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class EntityWithPropertyAnnotation
    {
        [Key]
        [CustomPropertyDataAnnotation(""""first argument"""")]
        public int Id { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(f => f.Path == ""EntityWithPropertyAnnotation.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EntityWithPropertyAnnotation> EntityWithPropertyAnnotation { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EntityWithPropertyAnnotation>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);
            },
            assertModel: null,
            skipBuild: true);

    [ConditionalFact]
    public void Scaffold_skip_navigations_default()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x => x.Property<int>(""Id""))
                .Entity(""BlogPost"", _ => { })
                .Entity(""Blog"")
                .HasMany(""Post"", ""Posts"")
                .WithMany(""Blogs"")
                .UsingEntity(""BlogPost""),
            new ModelCodeGenerationOptions { UseDataAnnotations = false },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<Post> Post { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();

                entity.HasMany(d => d.Posts)
                    .WithMany(p => p.Blogs)
                    .UsingEntity<Dictionary<string, object>>(
                        """"BlogPost"""",
                        l => l.HasOne<Post>().WithMany().HasForeignKey(""""PostsId""""),
                        r => r.HasOne<Blog>().WithMany().HasForeignKey(""""BlogsId""""),
                        j =>
                        {
                            j.HasKey(""""BlogsId"""", """"PostsId"""");

                            j.ToTable(""""BlogPost"""");

                            j.HasIndex(new[] { """"PostsId"""" }, """"IX_BlogPost_PostsId"""");
                        });
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;

namespace TestNamespace
{
    public partial class Blog
    {
        public Blog()
        {
            Posts = new HashSet<Post>();
        }

        public int Id { get; set; }

        public virtual ICollection<Post> Posts { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(e => e.Path == ""Blog.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;

namespace TestNamespace
{
    public partial class Post
    {
        public Post()
        {
            Blogs = new HashSet<Blog>();
        }

        public int Id { get; set; }

        public virtual ICollection<Blog> Blogs { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(e => e.Path == ""Post.cs""));

                Assert.Equal(2, code.AdditionalFiles.Count);
            },
            model =>
            {
                var blogType = model.FindEntityType(""TestNamespace.Blog"");
                Assert.Empty(blogType.GetNavigations());
                var postsNavigation = Assert.Single(blogType.GetSkipNavigations());
                Assert.Equal(""Posts"", postsNavigation.Name);

                var postType = model.FindEntityType(""TestNamespace.Post"");
                Assert.Empty(postType.GetNavigations());
                var blogsNavigation = Assert.Single(postType.GetSkipNavigations());
                Assert.Equal(""Blogs"", blogsNavigation.Name);

                Assert.Equal(postsNavigation, blogsNavigation.Inverse);
                Assert.Equal(blogsNavigation, postsNavigation.Inverse);

                var joinEntityType = blogsNavigation.ForeignKey.DeclaringEntityType;
                Assert.Equal(""BlogPost"", joinEntityType.Name);
                Assert.Equal(typeof(Dictionary<string, object>), joinEntityType.ClrType);
                Assert.Single(joinEntityType.GetIndexes());
                Assert.Equal(2, joinEntityType.GetForeignKeys().Count());
            });

    [ConditionalFact]
    public void Scaffold_skip_navigations_different_key_type()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x => x.Property<string>(""Id""))
                .Entity(""BlogPost"", _ => { })
                .Entity(""Blog"")
                .HasMany(""Post"", ""Posts"")
                .WithMany(""Blogs"")
                .UsingEntity(""BlogPost""),
            new ModelCodeGenerationOptions { UseDataAnnotations = false },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<Post> Post { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();

                entity.HasMany(d => d.Posts)
                    .WithMany(p => p.Blogs)
                    .UsingEntity<Dictionary<string, object>>(
                        """"BlogPost"""",
                        l => l.HasOne<Post>().WithMany().HasForeignKey(""""PostsId""""),
                        r => r.HasOne<Blog>().WithMany().HasForeignKey(""""BlogsId""""),
                        j =>
                        {
                            j.HasKey(""""BlogsId"""", """"PostsId"""");

                            j.ToTable(""""BlogPost"""");

                            j.HasIndex(new[] { """"PostsId"""" }, """"IX_BlogPost_PostsId"""");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;

namespace TestNamespace
{
    public partial class Blog
    {
        public Blog()
        {
            Posts = new HashSet<Post>();
        }

        public int Id { get; set; }

        public virtual ICollection<Post> Posts { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(e => e.Path == ""Blog.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;

namespace TestNamespace
{
    public partial class Post
    {
        public Post()
        {
            Blogs = new HashSet<Blog>();
        }

        public string Id { get; set; }

        public virtual ICollection<Blog> Blogs { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(e => e.Path == ""Post.cs""));

                Assert.Equal(2, code.AdditionalFiles.Count);
            },
            model =>
            {
                var blogType = model.FindEntityType(""TestNamespace.Blog"");
                Assert.Empty(blogType.GetNavigations());
                var postsNavigation = Assert.Single(blogType.GetSkipNavigations());
                Assert.Equal(""Posts"", postsNavigation.Name);

                var postType = model.FindEntityType(""TestNamespace.Post"");
                Assert.Empty(postType.GetNavigations());
                var blogsNavigation = Assert.Single(postType.GetSkipNavigations());
                Assert.Equal(""Blogs"", blogsNavigation.Name);

                Assert.Equal(postsNavigation, blogsNavigation.Inverse);
                Assert.Equal(blogsNavigation, postsNavigation.Inverse);

                var joinEntityType = blogsNavigation.ForeignKey.DeclaringEntityType;
                Assert.Equal(""BlogPost"", joinEntityType.Name);
                Assert.Equal(typeof(Dictionary<string, object>), joinEntityType.ClrType);
                Assert.Single(joinEntityType.GetIndexes());
                Assert.Equal(2, joinEntityType.GetForeignKeys().Count());
            });

    [ConditionalFact]
    public void Scaffold_skip_navigations_default_data_annotations()
        => Test(
            modelBuilder => modelBuilder
                .Entity(
                    ""Blog"",
                    x => x.Property<int>(""Id""))
                .Entity(
                    ""Post"",
                    x => x.Property<int>(""Id""))
                .Entity(""BlogPost"", _ => { })
                .Entity(""Blog"")
                .HasMany(""Post"", ""Posts"")
                .WithMany(""Blogs"")
                .UsingEntity(""BlogPost""),
            new ModelCodeGenerationOptions { UseDataAnnotations = true },
            code =>
            {
                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Blog> Blog { get; set; }
        public virtual DbSet<Post> Post { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                    + DesignStrings.SensitiveInformationWarning
                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Blog>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();

                entity.HasMany(d => d.Posts)
                    .WithMany(p => p.Blogs)
                    .UsingEntity<Dictionary<string, object>>(
                        """"BlogPost"""",
                        l => l.HasOne<Post>().WithMany().HasForeignKey(""""PostsId""""),
                        r => r.HasOne<Blog>().WithMany().HasForeignKey(""""BlogsId""""),
                        j =>
                        {
                            j.HasKey(""""BlogsId"""", """"PostsId"""");

                            j.ToTable(""""BlogPost"""");

                            j.HasIndex(new[] { """"PostsId"""" }, """"IX_BlogPost_PostsId"""");
                        });
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                    code.ContextFile);

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Blog
    {
        public Blog()
        {
            Posts = new HashSet<Post>();
        }

        [Key]
        public int Id { get; set; }

        [ForeignKey(""""BlogsId"""")]
        [InverseProperty(""""Blogs"""")]
        public virtual ICollection<Post> Posts { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(e => e.Path == ""Blog.cs""));

                AssertFileContents(
                    @""using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace TestNamespace
{
    public partial class Post
    {
        public Post()
        {
            Blogs = new HashSet<Blog>();
        }

        [Key]
        public int Id { get; set; }

        [ForeignKey(""""PostsId"""")]
        [InverseProperty(""""Posts"""")]
        public virtual ICollection<Blog> Blogs { get; set; }
    }
}
"",
                    code.AdditionalFiles.Single(e => e.Path == ""Post.cs""));

                Assert.Equal(2, code.AdditionalFiles.Count);
            },
            model =>
            {
                var blogType = model.FindEntityType(""TestNamespace.Blog"");
                Assert.Empty(blogType.GetNavigations());
                var postsNavigation = Assert.Single(blogType.GetSkipNavigations());
                Assert.Equal(""Posts"", postsNavigation.Name);

                var postType = model.FindEntityType(""TestNamespace.Post"");
                Assert.Empty(postType.GetNavigations());
                var blogsNavigation = Assert.Single(postType.GetSkipNavigations());
                Assert.Equal(""Blogs"", blogsNavigation.Name);

                Assert.Equal(postsNavigation, blogsNavigation.Inverse);
                Assert.Equal(blogsNavigation, postsNavigation.Inverse);

                var joinEntityType = blogsNavigation.ForeignKey.DeclaringEntityType;
                Assert.Equal(""BlogPost"", joinEntityType.Name);
                Assert.Equal(typeof(Dictionary<string, object>), joinEntityType.ClrType);
                Assert.Single(joinEntityType.GetIndexes());
                Assert.Equal(2, joinEntityType.GetForeignKeys().Count());
            });

    protected override void AddModelServices(IServiceCollection services)
        => services.Replace(ServiceDescriptor.Singleton<IRelationalAnnotationProvider, TestModelAnnotationProvider>());

    protected override void AddScaffoldingServices(IServiceCollection services)
        => services.Replace(ServiceDescriptor.Singleton<IAnnotationCodeGenerator, TestModelAnnotationCodeGenerator>());

    private class TestModelAnnotationProvider : SqlServerAnnotationProvider
    {
        public TestModelAnnotationProvider(RelationalAnnotationProviderDependencies dependencies)
            : base(dependencies)
        {
        }

        public override IEnumerable<IAnnotation> For(ITable table, bool designTime)
        {
            foreach (var annotation in base.For(table, designTime))
            {
                yield return annotation;
            }

            var entityType = table.EntityTypeMappings.First().EntityType;

            foreach (var annotation in entityType.GetAnnotations().Where(a => a.Name == ""Custom:EntityAnnotation""))
            {
                yield return annotation;
            }
        }

        public override IEnumerable<IAnnotation> For(IColumn column, bool designTime)
        {
            foreach (var annotation in base.For(column, designTime))
            {
                yield return annotation;
            }

            var properties = column.PropertyMappings.Select(m => m.Property);
            var annotations = properties.SelectMany(p => p.GetAnnotations()).GroupBy(a => a.Name).Select(g => g.First());

            foreach (var annotation in annotations.Where(a => a.Name == ""Custom:PropertyAnnotation""))
            {
                yield return annotation;
            }
        }
    }

    private class TestModelAnnotationCodeGenerator : SqlServerAnnotationCodeGenerator
    {
        public TestModelAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies)
            : base(dependencies)
        {
        }

        protected override AttributeCodeFragment GenerateDataAnnotation(IEntityType entityType, IAnnotation annotation)
            => annotation.Name switch
            {
                ""Custom:EntityAnnotation"" => new AttributeCodeFragment(
                    typeof(CustomEntityDataAnnotationAttribute), annotation.Value as string),
                _ => base.GenerateDataAnnotation(entityType, annotation)
            };

        protected override AttributeCodeFragment GenerateDataAnnotation(IProperty property, IAnnotation annotation)
            => annotation.Name switch
            {
                ""Custom:PropertyAnnotation"" => new AttributeCodeFragment(
                    typeof(CustomPropertyDataAnnotationAttribute), annotation.Value as string),
                _ => base.GenerateDataAnnotation(property, annotation)
            };
    }

    [AttributeUsage(AttributeTargets.Class)]
    public class CustomEntityDataAnnotationAttribute : Attribute
    {
        public CustomEntityDataAnnotationAttribute(string argument)
        {
            Argument = argument;
        }

        public virtual string Argument { get; }
    }

    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
    public class CustomPropertyDataAnnotationAttribute : Attribute
    {
        public CustomPropertyDataAnnotationAttribute(string argument)
        {
            Argument = argument;
        }

        public virtual string Argument { get; }
    }
}",1,439 334 2000 58 2001 123 91 2002 93 439 492 2003 40 41 619 2004 40 2005 619 2005 46 2006 40 648 41 46 2007 40 41 44 418 2008 123 2009 61 473 125 44 2010 619 123 2011 40 64 648 44 2010 46 2012 46 2013 40 2014 619 2014 46 2015 614 648 41 41 59 2011 40 64 648 43 2016 46 2017 43 64 648 648 648 44 2010 46 2018 41 59 125 44 2019 619 123 490 2020 61 2019 46 2021 40 648 41 59 2022 46 2023 40 2020 46 2024 40 41 41 59 125 41 59 91 2002 93 439 492 2025 40 41 619 2004 40 2005 619 123 2005 46 2006 40 648 44 2026 619 123 2026 46 2027 40 648 41 59 621 2026 46 2028 60 404 62 40 648 41 59 2026 46 2029 40 648 41 59 125 41 59 125 44 418 2008 123 2030 61 473 125 44 2010 619 123 2031 40 64 648 648 648 44 2010 46 2032 46 2033 40 2034 619 2034 46 2035 614 648 41 41 59 125 44 2019 619 123 490 2036 61 2019 46 2037 40 648 41 59 2038 46 2039 40 648 44 2036 46 2040 40 41 41 59 2038 46 2041 40 2036 46 2042 40 41 41 59 125 41 59 91 2002 93 439 492 2043 40 41 619 2004 40 2005 619 123 2005 46 2044 40 648 41 59 2005 46 2006 40 648 44 2045 619 123 2045 46 2046 40 648 44 648 41 59 621 2045 46 2047 60 404 62 40 648 41 59 2045 46 2048 40 648 41 59 125 41 59 125 44 418 2008 123 2049 61 473 125 44 2010 619 123 2050 40 64 648 44 2010 46 2051 46 2052 40 2053 619 2053 46 2054 614 648 41 41 59 125 44 2019 619 123 490 2055 61 2019 46 2056 40 648 41 59 2057 46 2058 40 648 44 2055 46 2059 40 41 41 59 2057 46 2060 40 2055 46 2061 40 41 41 59 621 125 41 59 91 2002 93 439 492 2062 40 41 619 2004 40 2005 619 123 2005 46 2063 40 648 41 59 2005 46 2006 40 648 44 2064 619 123 2064 46 2065 40 648 44 648 41 59 2064 46 2066 60 404 62 40 648 41 59 2064 46 2067 40 648 41 59 125 41 59 125 44 418 2008 123 2068 61 473 125 44 2010 619 123 2069 40 64 648 648 648 648 648 44 2010 46 2070 46 2071 40 2072 619 2072 46 2073 614 648 41 41 59 125 44 2019 619 123 490 2074 61 2019 46 2075 40 648 41 59 2076 46 2077 40 648 44 2074 46 2078 40 41 41 59 2076 46 2077 40 648 44 2074 46 2079 40 41 41 59 125 41 59 91 2002 93 439 492 2080 40 41 619 2004 40 2005 619 2005 46 2006 40 648 41 46 2081 40 648 44 648 41 44 418 2008 123 2082 61 473 125 44 2010 619 123 2083 40 64 648 44 2010 46 2084 46 2085 40 2086 619 2086 46 2087 614 648 41 41 59 125 44 2019 619 123 490 2088 61 2019 46 2089 40 648 41 59 2090 46 2091 40 648 44 2088 46 2092 40 41 41 59 2090 46 2093 40 2088 46 2094 40 41 41 59 2090 46 2091 40 648 44 2088 46 2095 40 41 41 59 2090 46 2093 40 2088 46 2096 40 41 41 59 125 41 59 91 2002 93 439 492 2097 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2099 60 404 62 40 648 41 59 2098 46 2099 60 404 62 40 648 41 59 2098 46 2099 60 404 62 40 648 41 59 2098 46 2099 60 404 62 40 648 41 59 2098 46 2100 40 648 41 59 2098 46 2101 40 418 91 93 123 648 44 648 125 44 648 41 46 2102 40 41 59 2098 46 2101 40 418 91 93 123 648 44 648 125 44 648 41 59 2098 46 2101 40 648 41 59 125 41 44 418 2008 123 2103 61 473 125 44 2010 619 123 2104 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2105 46 2106 40 2107 619 2107 46 2108 614 648 41 41 59 125 44 2019 619 123 490 2109 61 2019 46 2110 40 648 41 59 490 2111 61 2109 46 2112 40 41 59 2113 46 2114 40 2111 44 2115 619 2113 46 2116 40 2115 46 2117 41 44 2115 619 2113 46 2118 40 648 44 2115 46 2117 41 44 2115 619 2113 46 2118 40 648 44 2115 46 2117 41 41 59 125 41 59 91 2002 93 439 492 2119 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2120 60 404 62 40 648 41 59 2098 46 2120 60 404 62 40 648 41 59 2098 46 2120 60 404 62 40 648 41 59 2098 46 2120 60 404 62 40 648 41 59 2098 46 2121 40 648 41 59 2098 46 2122 40 418 91 93 123 648 44 648 125 44 648 41 46 2123 40 41 59 2098 46 2122 40 418 91 93 123 648 44 648 125 44 648 41 46 2124 40 648 41 59 125 41 44 418 2008 123 2125 61 473 125 44 2010 619 123 2126 40 64 648 648 648 648 648 648 648 44 2010 46 2127 46 2128 40 2129 619 2129 46 2130 614 648 41 41 59 2126 40 64 648 43 2131 46 2132 43 64 648 648 648 648 648 648 648 44 2010 46 2133 41 59 125 44 2019 619 2134 46 2135 40 1502 44 2019 46 2136 40 648 41 46 2137 40 41 46 2138 40 41 41 41 59 91 2002 93 439 492 2139 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2140 60 404 62 40 648 41 59 2098 46 2141 40 648 41 59 125 41 44 418 2008 123 2142 61 473 125 44 2010 619 123 2143 40 64 648 44 2010 46 2144 46 2145 40 2146 619 2146 46 2147 614 648 41 41 59 2143 40 64 648 43 2148 46 2149 43 64 648 648 648 44 2010 46 2150 41 59 125 44 2019 619 2134 46 2135 40 648 44 2019 46 2136 40 648 41 46 2151 40 41 46 2152 91 1500 93 46 2153 41 41 59 91 2002 93 439 492 2154 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2155 60 404 62 40 648 41 59 2098 46 2155 60 404 62 40 648 41 59 2098 46 2156 40 648 44 648 41 59 125 41 44 418 2008 123 2157 61 473 125 44 2010 619 123 2158 40 64 648 44 2010 46 2159 46 2160 40 2161 619 2161 46 2162 614 648 41 41 59 2158 40 64 648 43 2163 46 2164 43 64 648 648 648 44 2010 46 2165 41 59 125 44 2019 619 123 490 2166 61 2019 46 2136 40 648 41 59 2134 46 2135 40 418 91 93 123 648 44 648 125 44 2166 46 2151 40 41 46 2152 46 2167 40 2168 619 2168 46 2153 41 41 59 125 41 59 91 2002 93 439 492 2169 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2170 60 404 62 40 648 41 59 2098 46 2170 60 461 62 40 648 41 46 2171 40 41 59 2098 46 2170 60 461 62 40 648 41 59 2098 46 2170 60 404 62 40 648 41 59 2098 46 2170 60 404 63 62 40 648 41 59 125 41 44 418 2008 123 2172 61 473 125 44 2010 619 123 2173 40 64 648 44 2010 46 2174 46 2175 40 2176 619 2176 46 2177 614 648 41 41 59 125 44 2019 619 123 490 2178 61 2019 46 2136 40 648 41 59 2134 46 302 40 2178 46 2179 40 648 41 46 2180 41 59 2134 46 304 40 2178 46 2179 40 648 41 46 2180 41 59 2134 46 302 40 2178 46 2179 40 648 41 46 2180 41 59 2134 46 304 40 2178 46 2179 40 648 41 46 2180 41 59 125 41 59 91 2002 93 439 492 2181 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2182 60 404 62 40 648 41 59 2098 46 2182 60 461 62 40 648 41 46 2183 40 41 59 2098 46 2182 60 461 62 40 648 41 59 2098 46 2182 60 404 62 40 648 41 59 2098 46 2182 60 404 63 62 40 648 41 59 125 41 44 418 2008 123 2184 61 473 44 2185 61 473 125 44 2010 619 123 2186 40 64 648 44 2010 46 2187 46 2188 40 2189 619 2189 46 2190 614 648 41 41 59 125 44 2019 619 123 490 2191 61 2019 46 2136 40 648 41 59 2134 46 302 40 2191 46 2192 40 648 41 46 2193 41 59 2134 46 304 40 2191 46 2192 40 648 41 46 2193 41 59 2134 46 302 40 2191 46 2192 40 648 41 46 2193 41 59 2134 46 304 40 2191 46 2192 40 648 41 46 2193 41 59 125 41 59 91 2002 93 439 492 2194 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2195 60 404 62 40 648 41 59 2098 46 2196 40 648 44 648 41 46 2197 40 648 41 46 2198 40 41 59 2098 46 2196 40 648 44 648 41 46 2197 40 648 41 59 2098 46 2196 40 648 44 648 41 46 2197 40 648 41 46 2198 40 41 59 2098 46 2196 40 648 44 648 41 46 2197 40 648 41 59 125 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 44 418 2008 123 2200 61 473 125 44 2010 619 123 2201 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2202 46 2203 40 2204 619 2204 46 2205 614 648 41 41 59 125 44 2019 619 123 490 2206 61 2019 46 2136 40 648 41 59 2134 46 302 40 2206 46 2207 40 648 41 46 2208 41 59 2134 46 304 40 2206 46 2207 40 648 41 46 2208 41 59 2134 46 302 40 2206 46 2207 40 648 41 46 2208 41 59 2134 46 304 40 2206 46 2207 40 648 41 46 2208 41 59 2134 46 304 40 2206 46 2209 40 648 41 33 46 2210 46 2211 41 59 2134 46 302 40 2206 46 2209 40 648 41 33 46 2210 46 2211 41 59 2134 46 304 40 2206 46 2209 40 648 41 33 46 2210 46 2211 41 59 2134 46 302 40 2206 46 2209 40 648 41 33 46 2210 46 2211 41 59 125 41 59 91 2002 93 439 492 2212 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2213 40 648 44 648 41 46 2214 40 648 41 46 2215 40 41 59 2098 46 2213 40 648 44 648 41 46 2214 40 648 41 59 2098 46 2213 40 648 44 648 41 46 2214 40 648 41 46 2215 40 41 59 2098 46 2213 40 648 44 648 41 46 2214 40 648 41 59 125 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 44 418 2008 123 2216 61 473 44 2217 61 473 125 44 2010 619 123 2218 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2219 46 2220 40 2221 619 2221 46 2222 614 648 41 41 59 125 44 2019 619 123 490 2223 61 2019 46 2136 40 648 41 59 2134 46 302 40 2223 46 2224 40 648 41 46 2225 41 59 2134 46 304 40 2223 46 2224 40 648 41 46 2225 41 59 2134 46 302 40 2223 46 2224 40 648 41 46 2225 41 59 2134 46 304 40 2223 46 2224 40 648 41 46 2225 41 59 2134 46 304 40 2223 46 2226 40 648 41 33 46 2227 46 2228 41 59 2134 46 302 40 2223 46 2226 40 648 41 33 46 2227 46 2228 41 59 2134 46 304 40 2223 46 2226 40 648 41 33 46 2227 46 2228 41 59 2134 46 302 40 2223 46 2226 40 648 41 33 46 2227 46 2228 41 59 125 41 59 91 2002 93 439 492 2229 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2230 40 648 44 648 41 46 2231 40 648 41 46 2232 40 41 59 2098 46 2230 40 648 44 648 41 46 2231 40 648 41 59 2098 46 2230 40 648 44 648 41 46 2231 40 648 41 46 2232 40 41 59 2098 46 2230 40 648 44 648 41 46 2231 40 648 41 59 125 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 44 418 2008 123 2233 61 473 44 2234 61 473 125 44 2010 619 123 2235 40 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2236 46 2237 40 2238 619 2238 46 2239 614 648 41 41 59 385 40 490 2240 61 1501 59 2240 620 1502 59 2240 637 41 123 2134 46 2241 40 648 44 2010 46 2236 46 2237 40 2238 619 2238 46 2239 614 36 648 41 46 2242 41 59 125 125 44 2019 619 123 490 2243 61 2019 46 2136 40 648 41 59 2134 46 302 40 2243 46 2244 40 648 41 46 2245 41 59 2134 46 304 40 2243 46 2244 40 648 41 46 2245 41 59 2134 46 302 40 2243 46 2244 40 648 41 46 2245 41 59 2134 46 304 40 2243 46 2244 40 648 41 46 2245 41 59 2134 46 304 40 2243 46 2246 40 648 41 33 46 2247 46 2248 41 59 2134 46 302 40 2243 46 2246 40 648 41 33 46 2247 46 2248 41 59 2134 46 304 40 2243 46 2246 40 648 41 33 46 2247 46 2248 41 59 2134 46 302 40 2243 46 2246 40 648 41 33 46 2247 46 2248 41 59 125 41 59 91 2002 93 439 492 2249 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 461 62 40 648 41 59 2098 46 2250 40 648 41 59 125 41 44 418 2008 123 2251 61 473 125 44 2010 619 123 2252 40 64 648 44 2010 46 2253 46 2254 40 2255 619 2255 46 2256 614 648 41 41 59 125 44 2019 619 2134 46 302 40 2019 46 2136 40 648 41 46 2257 40 648 41 46 2258 41 41 59 91 2002 93 439 492 2259 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 461 62 40 648 41 46 2260 40 648 41 59 2098 46 2199 60 461 62 40 648 41 46 2261 40 648 41 59 2098 46 2199 60 461 62 40 648 41 46 2260 40 648 41 46 2261 40 648 41 59 2098 46 2199 60 345 62 40 648 41 46 2261 40 648 41 59 2098 46 2199 60 461 62 40 648 41 46 2262 40 1503 41 59 125 41 44 418 2008 123 2263 61 473 125 44 2010 619 123 2264 40 64 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2265 46 2266 40 2267 619 2267 46 2268 614 648 41 41 59 2264 40 64 648 43 2269 46 2270 43 64 648 648 648 44 2010 46 2271 41 59 125 44 2019 619 123 490 2272 61 2019 46 2136 40 648 41 59 2134 46 2135 40 648 44 2272 46 2257 40 648 41 46 2273 40 41 41 59 2134 46 2135 40 648 44 2272 46 2257 40 648 41 46 2274 40 41 41 59 2134 46 2135 40 648 44 2272 46 2257 40 648 41 46 2273 40 41 41 59 2134 46 2135 40 648 44 2272 46 2257 40 648 41 46 2274 40 41 41 59 125 41 59 91 2002 93 439 492 2275 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 461 62 40 648 41 46 2276 40 1503 41 59 2098 46 2199 60 326 91 93 62 40 648 41 46 2276 40 1502 41 59 125 41 44 418 2008 123 2277 61 473 125 44 2010 619 123 2278 40 64 648 44 2010 46 2279 46 2280 40 2281 619 2281 46 2282 614 648 41 41 59 125 44 2019 619 123 490 2283 61 2019 46 2136 40 648 41 59 2134 46 2135 40 1503 44 2283 46 2257 40 648 41 46 2284 40 41 41 59 2134 46 2135 40 1502 44 2283 46 2257 40 648 41 46 2284 40 41 41 59 125 41 59 91 2002 93 439 492 2285 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 461 62 40 648 41 46 2286 40 1503 41 46 2287 40 41 59 2098 46 2199 60 461 62 40 648 41 46 2286 40 1503 41 46 2287 40 380 41 59 2098 46 2199 60 461 62 40 648 41 46 2286 40 1503 41 59 125 41 44 418 2008 123 2288 61 473 125 44 2010 619 123 2289 40 64 648 44 2010 46 2290 46 2291 40 2292 619 2292 46 2293 614 648 41 41 59 125 44 2019 619 123 490 2294 61 2019 46 2136 40 648 41 59 2134 46 304 40 2294 46 2257 40 648 41 46 2295 40 41 41 59 2134 46 302 40 2294 46 2257 40 648 41 46 2295 40 41 41 59 2134 46 2296 40 2294 46 2257 40 648 41 46 2295 40 41 41 59 125 41 59 91 2002 93 439 492 2297 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 345 62 40 648 41 46 2298 40 1502 41 59 2098 46 2199 60 345 62 40 648 41 46 2298 40 1503 44 1502 41 59 2098 46 2199 60 2299 62 40 648 41 46 2298 40 1502 41 59 2098 46 2199 60 2300 62 40 648 41 46 2298 40 1502 41 59 125 41 44 418 2008 123 2301 61 473 125 44 2010 619 123 2302 40 64 648 44 2010 46 2303 46 2304 40 2305 619 2305 46 2306 614 648 41 41 59 125 44 2019 619 123 490 2307 61 2019 46 2136 40 648 41 59 2134 46 2135 40 1502 44 2307 46 2257 40 648 41 46 2308 40 41 41 59 2134 46 2135 40 1503 44 2307 46 2257 40 648 41 46 2308 40 41 41 59 2134 46 2135 40 1502 44 2307 46 2257 40 648 41 46 2309 40 41 41 59 2134 46 2135 40 1502 44 2307 46 2257 40 648 41 46 2308 40 41 41 59 2134 46 2135 40 1502 44 2307 46 2257 40 648 41 46 2308 40 41 41 59 125 41 59 91 2002 93 439 492 2310 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2311 40 648 41 59 2098 46 2199 60 404 62 40 648 41 46 2311 40 648 41 59 125 41 44 418 2008 123 2312 61 473 125 44 2010 619 123 2313 40 64 648 44 2010 46 2314 46 2315 40 2316 619 2316 46 2317 614 648 41 41 59 125 44 2019 619 123 125 41 59 91 2002 93 439 492 2318 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2319 40 64 648 41 59 2098 46 2199 60 404 62 40 648 41 46 2319 40 64 648 41 59 125 41 44 418 2008 123 2320 61 473 125 44 2010 619 123 2321 40 64 648 44 2010 46 2322 46 2323 40 2324 619 2324 46 2325 614 648 41 41 59 125 44 2019 619 123 125 41 59 91 2002 93 439 492 2326 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 621 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 461 62 40 648 41 59 2098 46 2199 60 461 62 40 648 41 59 125 41 44 418 2008 123 2327 61 473 125 44 2010 619 123 2328 40 64 648 44 2010 46 2329 46 2330 40 2331 619 2331 46 2332 614 648 41 41 59 125 44 2019 619 123 125 41 59 91 2002 93 439 492 2333 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2334 40 648 44 648 41 46 2335 40 648 41 59 2098 46 2336 40 648 44 648 41 46 2337 40 41 59 125 41 44 418 2008 123 2338 61 473 125 44 2010 619 123 2339 40 64 648 648 648 648 648 44 2010 46 2340 46 2341 40 2342 619 2342 46 2343 614 648 41 41 59 2339 40 64 648 648 648 44 2010 46 2340 46 2341 40 2342 619 2342 46 2343 614 648 41 41 59 125 44 2019 619 123 490 2344 61 2019 46 2136 40 648 41 59 490 2345 61 2344 46 2346 40 648 41 59 2134 46 304 40 2345 46 2347 41 59 2134 46 2135 40 648 44 2345 46 2348 46 2349 46 2153 41 59 490 2350 61 2344 46 2346 40 648 41 59 2134 46 302 40 2350 46 2347 41 59 2134 46 2135 40 648 44 2350 46 2348 46 2351 46 2153 41 59 125 41 59 91 2002 93 439 492 2352 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 404 62 40 648 41 59 2098 46 2353 40 648 44 648 41 59 125 41 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2354 40 648 44 648 41 46 2355 40 648 41 46 2356 40 648 44 648 41 59 125 41 44 418 2008 123 2357 61 473 125 44 2010 619 123 2358 40 64 648 648 648 648 648 44 2010 46 2359 46 2360 40 2361 619 2361 46 2362 614 648 41 41 59 2358 40 64 648 43 2363 46 2364 43 64 648 648 648 44 2010 46 2365 41 59 125 44 2019 619 123 490 2366 61 2019 46 2136 40 648 41 59 490 2367 61 2366 46 2368 40 648 41 59 2134 46 2135 40 648 44 2367 46 2369 46 2370 46 2153 41 59 2134 46 2135 40 418 91 93 123 648 44 648 125 44 2367 46 2369 46 2152 46 2371 40 2372 619 2372 46 2153 41 41 59 125 41 59 91 2002 93 439 492 2373 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 404 62 40 648 41 59 2098 46 2199 60 404 62 40 648 41 59 125 41 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2374 40 648 44 648 41 46 2375 40 648 41 46 2376 40 648 44 648 41 46 2377 40 648 44 648 41 59 125 41 44 418 2008 123 2378 61 473 125 44 2010 619 123 2379 40 64 648 44 2010 46 2380 46 2381 40 2382 619 2382 46 2383 614 648 41 41 59 2379 40 64 648 43 2384 46 2385 43 64 648 648 648 44 2010 46 2386 41 59 125 44 2019 619 123 490 2387 61 2019 46 2136 40 648 41 59 490 2388 61 2387 46 2389 40 648 41 59 2134 46 2135 40 648 44 2388 46 2390 46 2391 46 2153 41 59 2134 46 2135 40 418 91 93 123 648 44 648 125 44 2388 46 2390 46 2152 46 2392 40 2393 619 2393 46 2153 41 41 59 2134 46 2135 40 418 91 93 123 648 44 648 125 44 2388 46 2390 46 2394 46 2152 46 2392 40 2393 619 2393 46 2153 41 41 59 125 41 59 91 2002 93 439 492 2395 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2396 40 648 44 648 41 46 2397 40 648 41 59 125 41 44 418 2008 123 2398 61 473 125 44 2010 619 123 2399 40 64 648 648 648 648 648 44 2010 46 2400 46 2401 40 2402 619 2402 46 2403 614 648 41 41 59 125 44 2019 619 123 490 2404 61 2019 46 2136 40 648 41 59 490 2405 61 2404 46 2406 40 648 41 59 490 2407 61 2134 46 2408 40 2405 46 2409 46 2152 41 59 2134 46 2135 40 648 44 2407 46 2153 41 59 490 2410 61 2405 46 2411 59 2134 46 2135 40 648 44 2410 46 2412 46 2153 41 59 2134 46 2135 40 648 44 2410 46 2153 41 59 125 41 59 91 2002 93 439 492 2413 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2414 40 648 44 648 41 46 2415 40 648 41 46 2416 40 648 41 59 125 41 44 418 2008 123 2417 61 473 125 44 2010 619 123 2418 40 64 648 648 648 648 648 44 2010 46 2419 46 2420 40 2421 619 2421 46 2422 614 648 41 41 59 125 44 2019 619 123 490 2423 61 2019 46 2136 40 648 41 59 490 2424 61 2423 46 2425 40 648 41 59 490 2426 61 2134 46 2427 40 2424 46 2428 46 2152 41 59 2134 46 2135 40 648 44 2426 46 2153 41 59 490 2429 61 2424 46 2430 59 2134 46 2135 40 648 44 2429 46 2431 46 2153 41 59 2134 46 2135 40 648 44 2429 46 2153 41 59 125 41 59 91 2002 93 439 492 2432 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 59 2098 46 2433 40 648 44 648 41 46 2434 40 648 41 59 2098 46 2433 40 648 44 648 41 46 2434 40 648 41 46 2435 40 648 41 59 125 41 44 418 2008 123 2436 61 473 125 44 2010 619 123 2437 40 64 648 648 648 648 648 648 648 648 648 44 2010 46 2438 46 2439 40 2440 619 2440 46 2441 614 648 41 41 59 125 44 2019 619 123 490 2442 61 2019 46 2136 40 648 41 59 490 2443 61 2442 46 2444 40 648 41 59 490 2445 61 2134 46 2446 40 2443 46 2447 46 2152 41 59 2134 46 2135 40 648 44 2445 46 2153 41 59 490 2448 61 2443 46 2449 59 2134 46 2135 40 648 44 2448 46 2450 46 2153 41 59 2134 46 2135 40 648 44 2448 46 2153 41 59 490 2451 61 2442 46 2444 40 648 41 59 490 2452 61 2134 46 2446 40 2451 46 2447 46 2152 41 59 2134 46 2135 40 648 44 2452 46 2153 41 59 490 2453 61 2451 46 2449 59 2134 46 2135 40 648 44 2453 46 2450 46 2153 41 59 2134 46 2135 40 648 44 2453 46 2153 41 59 125 41 59 91 2002 93 439 492 2454 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2455 40 648 44 648 41 59 2098 46 2199 60 404 62 40 648 41 59 2098 46 2456 40 648 41 59 125 41 44 418 2008 123 2457 61 473 125 44 2010 619 123 2458 40 64 648 648 648 44 2010 46 2459 46 2460 40 2461 619 2461 46 2462 614 648 41 41 59 2458 40 64 648 43 2463 46 2464 43 64 648 648 648 44 2010 46 2465 41 59 125 44 2466 58 424 44 2467 58 473 41 59 91 2002 93 439 492 2468 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 123 2098 46 2199 60 404 62 40 648 41 46 2469 40 648 44 648 41 59 2098 46 2470 40 648 41 59 125 41 44 418 2008 123 2471 61 473 125 44 2010 619 123 2472 40 64 648 648 648 44 2010 46 2473 46 2474 40 2475 619 2475 46 2476 614 648 41 41 59 2472 40 64 648 43 2477 46 2478 43 64 648 648 648 44 2010 46 2479 41 59 125 44 2466 58 424 44 2467 58 473 41 59 91 2002 93 439 492 2480 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2481 619 123 125 41 46 2006 40 648 41 46 2482 40 648 44 648 41 46 2483 40 648 41 46 2484 40 648 41 44 418 2008 123 2485 61 380 125 44 2010 619 123 2486 40 64 648 43 2487 46 2488 43 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2489 41 59 2486 40 64 648 44 2010 46 2490 46 2491 40 2492 619 2492 46 2493 614 648 41 41 59 2486 40 64 648 44 2010 46 2490 46 2491 40 2492 619 2492 46 2493 614 648 41 41 59 2134 46 2135 40 1502 44 2010 46 2490 46 2138 41 59 125 44 2019 619 123 490 2494 61 2019 46 2136 40 648 41 59 2134 46 2495 40 2494 46 2496 40 41 41 59 490 2497 61 2134 46 2498 40 2494 46 2499 40 41 41 59 2134 46 2135 40 648 44 2497 46 2153 41 59 490 2500 61 2019 46 2136 40 648 41 59 2134 46 2495 40 2500 46 2496 40 41 41 59 490 2501 61 2134 46 2498 40 2500 46 2499 40 41 41 59 2134 46 2135 40 648 44 2501 46 2153 41 59 2134 46 2135 40 2497 44 2501 46 2502 41 59 2134 46 2135 40 2501 44 2497 46 2502 41 59 490 2503 61 2501 46 2504 46 2505 59 2134 46 2135 40 648 44 2503 46 2153 41 59 2134 46 2135 40 478 40 2506 60 461 44 426 62 41 44 2503 46 2507 41 59 2134 46 2498 40 2503 46 2137 40 41 41 59 2134 46 2135 40 1502 44 2503 46 2508 40 41 46 2138 40 41 41 59 125 41 59 91 2002 93 439 492 2509 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 461 62 40 648 41 41 46 2006 40 648 44 2481 619 123 125 41 46 2006 40 648 41 46 2482 40 648 44 648 41 46 2483 40 648 41 46 2484 40 648 41 44 418 2008 123 2510 61 380 125 44 2010 619 123 2511 40 64 648 43 2512 46 2513 43 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2514 41 59 2511 40 64 648 44 2010 46 2515 46 2516 40 2517 619 2517 46 2518 614 648 41 41 59 2511 40 64 648 44 2010 46 2515 46 2516 40 2517 619 2517 46 2518 614 648 41 41 59 2134 46 2135 40 1502 44 2010 46 2515 46 2138 41 59 125 44 2019 619 123 490 2519 61 2019 46 2136 40 648 41 59 2134 46 2520 40 2519 46 2521 40 41 41 59 490 2522 61 2134 46 2523 40 2519 46 2524 40 41 41 59 2134 46 2135 40 648 44 2522 46 2153 41 59 490 2525 61 2019 46 2136 40 648 41 59 2134 46 2520 40 2525 46 2521 40 41 41 59 490 2526 61 2134 46 2523 40 2525 46 2524 40 41 41 59 2134 46 2135 40 648 44 2526 46 2153 41 59 2134 46 2135 40 2522 44 2526 46 2527 41 59 2134 46 2135 40 2526 44 2522 46 2527 41 59 490 2528 61 2526 46 2529 46 2530 59 2134 46 2135 40 648 44 2528 46 2153 41 59 2134 46 2135 40 478 40 2531 60 461 44 426 62 41 44 2528 46 2532 41 59 2134 46 2523 40 2528 46 2137 40 41 41 59 2134 46 2135 40 1502 44 2528 46 2533 40 41 46 2138 40 41 41 59 125 41 59 91 2002 93 439 492 2534 40 41 619 2004 40 2005 619 2005 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2098 619 2098 46 2199 60 404 62 40 648 41 41 46 2006 40 648 44 2481 619 123 125 41 46 2006 40 648 41 46 2482 40 648 44 648 41 46 2483 40 648 41 46 2484 40 648 41 44 418 2008 123 2535 61 473 125 44 2010 619 123 2536 40 64 648 43 2537 46 2538 43 64 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2539 41 59 2536 40 64 648 648 648 648 648 44 2010 46 2540 46 2541 40 2542 619 2542 46 2543 614 648 41 41 59 2536 40 64 648 648 648 648 648 44 2010 46 2540 46 2541 40 2542 619 2542 46 2543 614 648 41 41 59 2134 46 2135 40 1502 44 2010 46 2540 46 2138 41 59 125 44 2019 619 123 490 2544 61 2019 46 2136 40 648 41 59 2134 46 2545 40 2544 46 2546 40 41 41 59 490 2547 61 2134 46 2548 40 2544 46 2549 40 41 41 59 2134 46 2135 40 648 44 2547 46 2153 41 59 490 2550 61 2019 46 2136 40 648 41 59 2134 46 2545 40 2550 46 2546 40 41 41 59 490 2551 61 2134 46 2548 40 2550 46 2549 40 41 41 59 2134 46 2135 40 648 44 2551 46 2153 41 59 2134 46 2135 40 2547 44 2551 46 2552 41 59 2134 46 2135 40 2551 44 2547 46 2552 41 59 490 2553 61 2551 46 2554 46 2555 59 2134 46 2135 40 648 44 2553 46 2153 41 59 2134 46 2135 40 478 40 2556 60 461 44 426 62 41 44 2553 46 2557 41 59 2134 46 2548 40 2553 46 2137 40 41 41 59 2134 46 2135 40 1502 44 2553 46 2558 40 41 46 2138 40 41 41 59 125 41 59 438 431 492 2559 40 2560 2561 41 619 2561 46 2562 40 2563 46 2564 60 2565 44 2566 62 40 41 41 59 438 431 492 2567 40 2560 2561 41 619 2561 46 2562 40 2563 46 2564 60 2568 44 2569 62 40 41 41 59 437 334 2566 58 2570 123 439 2566 40 2571 2572 41 58 320 40 2572 41 123 125 439 431 2573 60 2574 62 2575 40 2576 2577 44 323 2578 41 123 386 40 490 2579 398 320 46 2575 40 2577 44 2578 41 41 123 500 450 2579 59 125 490 2580 61 2577 46 2581 46 2582 40 41 46 2583 59 386 40 490 2579 398 2580 46 2584 40 41 46 2585 40 2586 619 2586 46 2153 614 648 41 41 123 500 450 2579 59 125 125 439 431 2573 60 2574 62 2575 40 2587 2588 44 323 2578 41 123 386 40 490 2589 398 320 46 2575 40 2588 44 2578 41 41 123 500 450 2589 59 125 490 2590 61 2588 46 2591 46 2592 40 2593 619 2593 46 2199 41 59 490 2594 61 2590 46 2595 40 2596 619 2596 46 2597 40 41 41 46 2598 40 2599 619 2599 46 2153 41 46 2592 40 2600 619 2600 46 2601 40 41 41 59 386 40 490 2589 398 2594 46 2602 40 2599 619 2599 46 2153 614 648 41 41 123 500 450 2589 59 125 125 125 437 334 2569 58 2603 123 439 2569 40 2604 2605 41 58 320 40 2605 41 123 125 438 431 2606 2607 40 2608 2609 44 2610 2611 41 619 2611 46 2153 464 123 648 619 418 2606 40 478 40 2612 41 44 2611 46 2613 311 461 41 44 2481 619 320 46 2607 40 2609 44 2611 41 125 59 438 431 2606 2607 40 2614 2615 44 2610 2611 41 619 2611 46 2153 464 123 648 619 418 2606 40 478 40 2616 41 44 2611 46 2617 311 461 41 44 2481 619 320 46 2607 40 2615 44 2611 41 125 59 125 91 2618 40 2619 46 2620 41 93 439 334 2621 58 2622 123 439 2621 40 461 2623 41 123 2624 61 2623 59 125 439 491 461 2625 123 2626 59 125 125 91 2618 40 2619 46 2199 124 2619 46 2627 41 93 439 334 2628 58 2622 123 439 2628 40 461 2629 41 123 2630 61 2629 59 125 439 491 461 2631 123 2632 59 125 125 125 
68448,C#,"public class ForeignKey : ConventionAnnotatable, IMutableForeignKey, IConventionForeignKey, IRuntimeForeignKey
{
    private DeleteBehavior? _deleteBehavior;
    private bool? _isUnique;
    private bool _isRequired;
    private bool? _isRequiredDependent;
    private bool? _isOwnership;
    private InternalForeignKeyBuilder? _builder;

    private ConfigurationSource _configurationSource;
    private ConfigurationSource? _propertiesConfigurationSource;
    private ConfigurationSource? _principalKeyConfigurationSource;
    private ConfigurationSource? _isUniqueConfigurationSource;
    private ConfigurationSource? _isRequiredConfigurationSource;
    private ConfigurationSource? _isRequiredDependentConfigurationSource;
    private ConfigurationSource? _deleteBehaviorConfigurationSource;
    private ConfigurationSource? _principalEndConfigurationSource;
    private ConfigurationSource? _isOwnershipConfigurationSource;
    private ConfigurationSource? _dependentToPrincipalConfigurationSource;
    private ConfigurationSource? _principalToDependentConfigurationSource;
    private object? _dependentKeyValueFactory;
    private Func<IDependentsMap>? _dependentsMapFactory;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public ForeignKey(
        IReadOnlyList<Property> dependentProperties,
        Key principalKey,
        EntityType dependentEntityType,
        EntityType principalEntityType,
        ConfigurationSource configurationSource)
    {
        Validate(dependentProperties, principalKey, dependentEntityType, principalEntityType);

        Properties = dependentProperties;
        PrincipalKey = principalKey;
        DeclaringEntityType = dependentEntityType;
        PrincipalEntityType = principalEntityType;
        _configurationSource = configurationSource;
        _isRequired = DefaultIsRequired;

        if (principalEntityType.FindKey(principalKey.Properties) != principalKey)
        {
            throw new InvalidOperationException(
                CoreStrings.ForeignKeyReferencedEntityKeyMismatch(
                    principalKey.Properties.Format(),
                    principalEntityType.DisplayName()));
        }

        _builder = new InternalForeignKeyBuilder(this, dependentEntityType.Model.Builder);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyList<Property> Properties { get; private set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key PrincipalKey { get; private set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType DeclaringEntityType { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType PrincipalEntityType { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalForeignKeyBuilder Builder
    {
        [DebuggerStepThrough]
        get => _builder ?? throw new InvalidOperationException(CoreStrings.ObjectRemovedFromModel);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsInModel
        => _builder is not null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetRemovedFromModel()
        => _builder = null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override bool IsReadOnly
        => DeclaringEntityType.Model.IsReadOnly;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ISet<SkipNavigation>? ReferencingSkipNavigations { get; set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetReferencingSkipNavigations()
        => ReferencingSkipNavigations ?? Enumerable.Empty<SkipNavigation>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource GetConfigurationSource()
        => _configurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource)
    {
        _configurationSource = _configurationSource.Max(configurationSource);

        DeclaringEntityType.UpdateConfigurationSource(configurationSource);
        PrincipalEntityType.UpdateConfigurationSource(configurationSource);
    }

    /// <summary>
    ///     Runs the conventions when an annotation was set or removed.
    /// </summary>
    /// <param name=""name"">The key of the set annotation.</param>
    /// <param name=""annotation"">The annotation set.</param>
    /// <param name=""oldAnnotation"">The old annotation.</param>
    /// <returns>The annotation that was set.</returns>
    protected override IConventionAnnotation? OnAnnotationSet(
        string name,
        IConventionAnnotation? annotation,
        IConventionAnnotation? oldAnnotation)
        => Builder.ModelBuilder.Metadata.ConventionDispatcher.OnForeignKeyAnnotationChanged(Builder, name, annotation, oldAnnotation);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyList<Property> SetProperties(
        IReadOnlyList<Property> properties,
        Key principalKey,
        ConfigurationSource? configurationSource)
    {
        EnsureMutable();

        var oldProperties = Properties;
        var oldPrincipalKey = PrincipalKey;

        if (oldProperties.SequenceEqual(properties)
            && oldPrincipalKey == principalKey)
        {
            if (configurationSource != null)
            {
                UpdatePropertiesConfigurationSource(configurationSource.Value);
                UpdatePrincipalKeyConfigurationSource(configurationSource.Value);
            }

            return oldProperties;
        }

        Validate(properties, principalKey, DeclaringEntityType, PrincipalEntityType);

        DeclaringEntityType.OnForeignKeyUpdating(this);

        Properties = properties;
        PrincipalKey = principalKey;

        DeclaringEntityType.OnForeignKeyUpdated(this);

        if (configurationSource != null)
        {
            UpdatePropertiesConfigurationSource(configurationSource.Value);
            UpdatePrincipalKeyConfigurationSource(configurationSource.Value);
        }

        return (IReadOnlyList<Property>)DeclaringEntityType.Model.ConventionDispatcher
            .OnForeignKeyPropertiesChanged(Builder, oldProperties, oldPrincipalKey)!;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetPropertiesConfigurationSource()
        => _propertiesConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdatePropertiesConfigurationSource(ConfigurationSource configurationSource)
    {
        _propertiesConfigurationSource = configurationSource.Max(_propertiesConfigurationSource);
        foreach (var property in Properties)
        {
            property.UpdateConfigurationSource(configurationSource);
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetPrincipalKeyConfigurationSource()
        => _principalKeyConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdatePrincipalKeyConfigurationSource(ConfigurationSource configurationSource)
    {
        _principalKeyConfigurationSource = configurationSource.Max(_principalKeyConfigurationSource);
        PrincipalKey.UpdateConfigurationSource(configurationSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetPrincipalEndConfigurationSource()
        => _principalEndConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetPrincipalEndConfigurationSource(ConfigurationSource? configurationSource)
        => _principalEndConfigurationSource = configurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdatePrincipalEndConfigurationSource(ConfigurationSource configurationSource)
        => _principalEndConfigurationSource = configurationSource.Max(_principalEndConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? DependentToPrincipal { [DebuggerStepThrough] get; private set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? SetDependentToPrincipal(
        string? name,
        ConfigurationSource configurationSource)
        => Navigation(MemberIdentity.Create(name), configurationSource, pointsToPrincipal: true);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? SetDependentToPrincipal(
        MemberInfo? property,
        ConfigurationSource configurationSource)
        => Navigation(MemberIdentity.Create(property), configurationSource, pointsToPrincipal: true);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? SetDependentToPrincipal(
        MemberIdentity? property,
        ConfigurationSource configurationSource)
        => Navigation(property, configurationSource, pointsToPrincipal: true);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetDependentToPrincipalConfigurationSource()
        => _dependentToPrincipalConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdateDependentToPrincipalConfigurationSource(ConfigurationSource? configurationSource)
        => _dependentToPrincipalConfigurationSource = configurationSource.Max(_dependentToPrincipalConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? PrincipalToDependent { [DebuggerStepThrough] get; private set; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? SetPrincipalToDependent(string? name, ConfigurationSource configurationSource)
        => Navigation(MemberIdentity.Create(name), configurationSource, pointsToPrincipal: false);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? SetPrincipalToDependent(MemberInfo? property, ConfigurationSource configurationSource)
        => Navigation(MemberIdentity.Create(property), configurationSource, pointsToPrincipal: false);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? SetPrincipalToDependent(MemberIdentity? property, ConfigurationSource configurationSource)
        => Navigation(property, configurationSource, pointsToPrincipal: false);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetPrincipalToDependentConfigurationSource()
        => _principalToDependentConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdatePrincipalToDependentConfigurationSource(ConfigurationSource? configurationSource)
        => _principalToDependentConfigurationSource = configurationSource.Max(_principalToDependentConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    private Navigation? Navigation(
        MemberIdentity? propertyIdentity,
        ConfigurationSource configurationSource,
        bool pointsToPrincipal)
    {
        EnsureMutable();

        var name = propertyIdentity?.Name;
        if (name != null)
        {
            if (pointsToPrincipal
                && PrincipalEntityType.IsKeyless)
            {
                throw new InvalidOperationException(
                    CoreStrings.NavigationToKeylessType(name, PrincipalEntityType.DisplayName()));
            }

            if (!pointsToPrincipal
                && DeclaringEntityType.IsKeyless)
            {
                throw new InvalidOperationException(
                    CoreStrings.NavigationToKeylessType(name, DeclaringEntityType.DisplayName()));
            }
        }

        var oldNavigation = pointsToPrincipal ? DependentToPrincipal : PrincipalToDependent;
        if (name == oldNavigation?.Name)
        {
            var oldConfigurationSource = pointsToPrincipal
                ? _dependentToPrincipalConfigurationSource
                : _principalToDependentConfigurationSource;

            if (pointsToPrincipal)
            {
                UpdateDependentToPrincipalConfigurationSource(configurationSource);
            }
            else
            {
                UpdatePrincipalToDependentConfigurationSource(configurationSource);
            }

            if (name == null
                && configurationSource.OverridesStrictly(oldConfigurationSource))
            {
                DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyNullNavigationSet(Builder, pointsToPrincipal);
            }

            return oldNavigation!;
        }

        if (name == null
            && IsOwnership
            && !pointsToPrincipal)
        {
            throw new InvalidOperationException(
                CoreStrings.OwnershipToDependent(
                    oldNavigation?.Name, PrincipalEntityType.DisplayName(), DeclaringEntityType.DisplayName()));
        }

        if (oldNavigation != null)
        {
            Check.DebugAssert(oldNavigation.Name != null, ""oldNavigation.Name is null"");
            oldNavigation.SetRemovedFromModel();
            if (pointsToPrincipal)
            {
                DeclaringEntityType.RemoveNavigation(oldNavigation.Name);
            }
            else
            {
                PrincipalEntityType.RemoveNavigation(oldNavigation.Name);
            }
        }

        Navigation? navigation = null;
        if (propertyIdentity?.Name != null)
        {
            navigation = pointsToPrincipal
                ? DeclaringEntityType.AddNavigation(propertyIdentity.Value, this, pointsToPrincipal: true)
                : PrincipalEntityType.AddNavigation(propertyIdentity.Value, this, pointsToPrincipal: false);
        }

        if (pointsToPrincipal)
        {
            DependentToPrincipal = navigation;
            UpdateDependentToPrincipalConfigurationSource(configurationSource);
        }
        else
        {
            PrincipalToDependent = navigation;
            UpdatePrincipalToDependentConfigurationSource(configurationSource);
        }

        if (oldNavigation != null)
        {
            Check.DebugAssert(oldNavigation.Name != null, ""oldNavigation.Name is null"");

            string? removedNavigationName;
            if (pointsToPrincipal)
            {
                removedNavigationName = DeclaringEntityType.Model.ConventionDispatcher.OnNavigationRemoved(
                    DeclaringEntityType.Builder,
                    PrincipalEntityType.Builder,
                    oldNavigation.Name,
                    oldNavigation.GetIdentifyingMemberInfo());
            }
            else
            {
                removedNavigationName = DeclaringEntityType.Model.ConventionDispatcher.OnNavigationRemoved(
                    PrincipalEntityType.Builder,
                    DeclaringEntityType.Builder,
                    oldNavigation.Name,
                    oldNavigation.GetIdentifyingMemberInfo());
            }

            if (navigation == null)
            {
                DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyNullNavigationSet(Builder, pointsToPrincipal);
                return oldNavigation.Name == removedNavigationName ? oldNavigation : null;
            }
        }

        if (navigation != null)
        {
            navigation = (Navigation?)DeclaringEntityType.Model.ConventionDispatcher.OnNavigationAdded(navigation.Builder)?.Metadata;
        }
        else
        {
            DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyNullNavigationSet(Builder, pointsToPrincipal);
        }

        return navigation;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsUnique
    {
        get => _isUnique ?? DefaultIsUnique;
        set => SetIsUnique(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsUnique(bool? unique, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        var oldUnique = IsUnique;
        _isUnique = unique;

        if (unique == false
            && IsRequiredDependent)
        {
            throw new InvalidOperationException(
                CoreStrings.NonUniqueRequiredDependentForeignKey(Properties.Format(), DeclaringEntityType.DisplayName()));
        }

        var navigationMember = PrincipalToDependent?.GetIdentifyingMemberInfo();
        if (unique.HasValue
            && navigationMember != null)
        {
            if (!Internal.Navigation.IsCompatible(
                    PrincipalToDependent!.Name,
                    navigationMember,
                    PrincipalEntityType,
                    DeclaringEntityType,
                    !unique,
                    shouldThrow: false))
            {
                throw new InvalidOperationException(
                    CoreStrings.UnableToSetIsUnique(
                        unique.Value,
                        PrincipalToDependent.Name,
                        PrincipalEntityType.DisplayName()));
            }
        }

        _isUniqueConfigurationSource = unique == null
            ? null
            : configurationSource.Max(_isUniqueConfigurationSource);

        return IsUnique != oldUnique
            ? DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyUniquenessChanged(Builder)
            : oldUnique;
    }

    private const bool DefaultIsUnique = false;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetIsUniqueConfigurationSource()
        => _isUniqueConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsRequired
    {
        get => _isRequired;
        set => SetIsRequired(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsRequired(bool? required, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        var oldRequired = IsRequired;
        _isRequired = required ?? DefaultIsRequired;

        _isRequiredConfigurationSource = required == null
            ? null
            : configurationSource.Max(_isRequiredConfigurationSource);

        return IsRequired != oldRequired
            ? DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyRequirednessChanged(Builder)
            : oldRequired;
    }

    private bool DefaultIsRequired
        => !Properties.Any(p => p.IsNullable);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetIsRequiredConfigurationSource()
        => _isRequiredConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetIsRequiredConfigurationSource(ConfigurationSource? configurationSource)
        => _isRequiredConfigurationSource = configurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsRequiredDependent
    {
        get => _isRequiredDependent ?? DefaultIsRequiredDependent;
        set => SetIsRequiredDependent(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsRequiredDependent(bool? required, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (!IsUnique
            && required == true)
        {
            throw new InvalidOperationException(
                CoreStrings.NonUniqueRequiredDependentForeignKey(Properties.Format(), DeclaringEntityType.DisplayName()));
        }

        var oldRequired = IsRequiredDependent;
        _isRequiredDependent = required;

        _isRequiredDependentConfigurationSource = required == null
            ? null
            : configurationSource.Max(_isRequiredConfigurationSource);

        return IsRequiredDependent != oldRequired
            ? DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyDependentRequirednessChanged(Builder)
            : oldRequired;
    }

    private const bool DefaultIsRequiredDependent = false;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetIsRequiredDependentConfigurationSource()
        => _isRequiredDependentConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetIsRequiredDependentConfigurationSource(ConfigurationSource? configurationSource)
        => _isRequiredDependentConfigurationSource = configurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual DeleteBehavior DeleteBehavior
    {
        get => _deleteBehavior ?? DefaultDeleteBehavior;
        set => SetDeleteBehavior(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual DeleteBehavior? SetDeleteBehavior(DeleteBehavior? deleteBehavior, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        _deleteBehavior = deleteBehavior;

        if (deleteBehavior == null)
        {
            _deleteBehaviorConfigurationSource = null;
        }
        else
        {
            UpdateDeleteBehaviorConfigurationSource(configurationSource);
        }

        return DeleteBehavior;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public const DeleteBehavior DefaultDeleteBehavior
        = DeleteBehavior.ClientSetNull;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetDeleteBehaviorConfigurationSource()
        => _deleteBehaviorConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdateDeleteBehaviorConfigurationSource(ConfigurationSource configurationSource)
        => _deleteBehaviorConfigurationSource = configurationSource.Max(_deleteBehaviorConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsOwnership
    {
        get => _isOwnership ?? DefaultIsOwnership;
        set => SetIsOwnership(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsOwnership(bool? ownership, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (ownership == true)
        {
            if (!DeclaringEntityType.IsOwned())
            {
                throw new InvalidOperationException(CoreStrings.ClashingNonOwnedEntityType(DeclaringEntityType.DisplayName()));
            }

            if (PrincipalToDependent == null)
            {
                throw new InvalidOperationException(
                    CoreStrings.NavigationlessOwnership(
                        PrincipalEntityType.DisplayName(), DeclaringEntityType.DisplayName()));
            }
        }

        var oldIsOwnership = IsOwnership;
        _isOwnership = ownership;

        if (_isOwnership == null)
        {
            _isOwnershipConfigurationSource = null;
        }
        else
        {
            UpdateIsOwnershipConfigurationSource(configurationSource);
        }

        return IsOwnership != oldIsOwnership
            ? DeclaringEntityType.Model.ConventionDispatcher.OnForeignKeyOwnershipChanged(Builder)
            : oldIsOwnership;
    }

    private const bool DefaultIsOwnership = false;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetIsOwnershipConfigurationSource()
        => _isOwnershipConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void UpdateIsOwnershipConfigurationSource(ConfigurationSource configurationSource)
        => _isOwnershipConfigurationSource = configurationSource.Max(_isOwnershipConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> FindNavigationsFromInHierarchy(EntityType entityType)
        => ((IReadOnlyForeignKey)this).FindNavigationsFromInHierarchy(entityType).Cast<Navigation>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> FindNavigationsTo(EntityType entityType)
        => ((IReadOnlyForeignKey)this).FindNavigationsTo(entityType).Cast<Navigation>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType ResolveOtherEntityType(EntityType entityType)
        => (EntityType)((IReadOnlyForeignKey)this).GetRelatedEntityType(entityType);

    // Note: This is set and used only by IdentityMapFactoryFactory, which ensures thread-safety
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual object DependentKeyValueFactory
    {
        get
        {
            if (_dependentKeyValueFactory == null)
            {
                EnsureReadOnly();
            }

            return _dependentKeyValueFactory!;
        }

        set
        {
            EnsureReadOnly();

            _dependentKeyValueFactory = value;
        }
    }

    // Note: This is set and used only by IdentityMapFactoryFactory, which ensures thread-safety
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<IDependentsMap> DependentsMapFactory
    {
        get
        {
            if (_dependentsMapFactory == null)
            {
                EnsureReadOnly();
            }

            return _dependentsMapFactory!;
        }

        set
        {
            EnsureReadOnly();

            _dependentsMapFactory = value;
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual DebugView DebugView
        => new(
            () => ((IReadOnlyForeignKey)this).ToDebugString(),
            () => ((IReadOnlyForeignKey)this).ToDebugString(MetadataDebugStringOptions.LongDefault));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override string ToString()
        => ((IReadOnlyForeignKey)this).ToDebugString(MetadataDebugStringOptions.SingleLineDefault);

    private static void Validate(
        IReadOnlyList<Property> properties,
        Key principalKey,
        EntityType declaringEntityType,
        EntityType principalEntityType)
    {
        for (var i = 0; i < properties.Count; i++)
        {
            var property = properties[i];
            for (var j = i + 1; j < properties.Count; j++)
            {
                if (property == properties[j])
                {
                    throw new InvalidOperationException(CoreStrings.DuplicatePropertyInForeignKey(properties.Format(), property.Name));
                }
            }

            var actualProperty = declaringEntityType.FindProperty(property.Name);
            if (actualProperty?.DeclaringEntityType.IsAssignableFrom(property.DeclaringEntityType) != true
                || !property.IsInModel)
            {
                throw new InvalidOperationException(
                    CoreStrings.ForeignKeyPropertiesWrongEntity(
                        properties.Format(), declaringEntityType.DisplayName()));
            }
        }

        AreCompatible(
            principalEntityType,
            dependentEntityType: declaringEntityType,
            navigationToPrincipal: null,
            navigationToDependent: null,
            dependentProperties: properties,
            principalProperties: principalKey.Properties,
            unique: null,
            shouldThrow: true);

        var duplicateForeignKey = declaringEntityType.FindForeignKeysInHierarchy(
            properties, principalKey, principalEntityType).FirstOrDefault();
        if (duplicateForeignKey != null)
        {
            throw new InvalidOperationException(
                CoreStrings.DuplicateForeignKey(
                    properties.Format(),
                    declaringEntityType.DisplayName(),
                    duplicateForeignKey.DeclaringEntityType.DisplayName(),
                    principalKey.Properties.Format(),
                    principalEntityType.DisplayName()));
        }

        if (principalEntityType.Model != declaringEntityType.Model)
        {
            throw new InvalidOperationException(
                CoreStrings.EntityTypeModelMismatch(
                    declaringEntityType.DisplayName(), principalEntityType.DisplayName()));
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool AreCompatible(
        EntityType principalEntityType,
        EntityType dependentEntityType,
        MemberInfo? navigationToPrincipal,
        MemberInfo? navigationToDependent,
        IReadOnlyList<IReadOnlyProperty>? dependentProperties,
        IReadOnlyList<IReadOnlyProperty>? principalProperties,
        bool? unique,
        bool shouldThrow)
    {
        Check.NotNull(principalEntityType, nameof(principalEntityType));
        Check.NotNull(dependentEntityType, nameof(dependentEntityType));

        if (navigationToPrincipal != null
            && !Internal.Navigation.IsCompatible(
                navigationToPrincipal.Name,
                navigationToPrincipal,
                dependentEntityType,
                principalEntityType,
                shouldBeCollection: false,
                shouldThrow: shouldThrow))
        {
            return false;
        }

        if (navigationToDependent != null
            && !Internal.Navigation.IsCompatible(
                navigationToDependent.Name,
                navigationToDependent,
                principalEntityType,
                dependentEntityType,
                shouldBeCollection: !unique,
                shouldThrow: shouldThrow))
        {
            return false;
        }

        return principalProperties == null
            || dependentProperties == null
            || AreCompatible(
                principalProperties,
                dependentProperties,
                principalEntityType,
                dependentEntityType,
                shouldThrow);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static bool AreCompatible(
        IReadOnlyList<IReadOnlyProperty> principalProperties,
        IReadOnlyList<IReadOnlyProperty> dependentProperties,
        IReadOnlyEntityType principalEntityType,
        IReadOnlyEntityType dependentEntityType,
        bool shouldThrow)
    {
        Check.NotNull(principalProperties, nameof(principalProperties));
        Check.NotNull(dependentProperties, nameof(dependentProperties));
        Check.NotNull(principalEntityType, nameof(principalEntityType));
        Check.NotNull(dependentEntityType, nameof(dependentEntityType));

        if (!ArePropertyCountsEqual(principalProperties, dependentProperties))
        {
            if (shouldThrow)
            {
                throw new InvalidOperationException(
                    CoreStrings.ForeignKeyCountMismatch(
                        dependentProperties.Format(),
                        dependentEntityType.DisplayName(),
                        principalProperties.Format(),
                        principalEntityType.DisplayName()));
            }

            return false;
        }

        if (!ArePropertyTypesCompatible(principalProperties, dependentProperties))
        {
            if (shouldThrow)
            {
                throw new InvalidOperationException(
                    CoreStrings.ForeignKeyTypeMismatch(
                        dependentProperties.Format(includeTypes: true),
                        dependentEntityType.DisplayName(),
                        principalProperties.Format(includeTypes: true),
                        principalEntityType.DisplayName()));
            }

            return false;
        }

        return true;
    }

    private static bool ArePropertyCountsEqual(
        IReadOnlyList<IReadOnlyProperty> principalProperties,
        IReadOnlyList<IReadOnlyProperty> dependentProperties)
        => principalProperties.Count == dependentProperties.Count;

    private static bool ArePropertyTypesCompatible(
        IReadOnlyList<IReadOnlyProperty> principalProperties,
        IReadOnlyList<IReadOnlyProperty> dependentProperties)
        => principalProperties.Select(p => p.ClrType.UnwrapNullableType()).SequenceEqual(
            dependentProperties.Select(p => p.ClrType.UnwrapNullableType()));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyList<IReadOnlyProperty> IReadOnlyForeignKey.Properties
    {
        [DebuggerStepThrough]
        get => Properties;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyKey IReadOnlyForeignKey.PrincipalKey
    {
        [DebuggerStepThrough]
        get => PrincipalKey;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyEntityType IReadOnlyForeignKey.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyEntityType IReadOnlyForeignKey.PrincipalEntityType
    {
        [DebuggerStepThrough]
        get => PrincipalEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyNavigation? IReadOnlyForeignKey.DependentToPrincipal
    {
        [DebuggerStepThrough]
        get => DependentToPrincipal;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyNavigation? IReadOnlyForeignKey.PrincipalToDependent
    {
        [DebuggerStepThrough]
        get => PrincipalToDependent;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyList<IMutableProperty> IMutableForeignKey.Properties
    {
        [DebuggerStepThrough]
        get => Properties;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableKey IMutableForeignKey.PrincipalKey
    {
        [DebuggerStepThrough]
        get => PrincipalKey;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableEntityType IMutableForeignKey.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableEntityType IMutableForeignKey.PrincipalEntityType
    {
        [DebuggerStepThrough]
        get => PrincipalEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableNavigation? IMutableForeignKey.DependentToPrincipal
    {
        [DebuggerStepThrough]
        get => DependentToPrincipal;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableNavigation? IMutableForeignKey.PrincipalToDependent
    {
        [DebuggerStepThrough]
        get => PrincipalToDependent;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableForeignKey.SetProperties(IReadOnlyList<IMutableProperty> properties, IMutableKey principalKey)
        => SetProperties(
            properties as IReadOnlyList<Property> ?? properties.Cast<Property>().ToArray(),
            (Key)principalKey,
            ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableNavigation? IMutableForeignKey.SetDependentToPrincipal(string? name)
        => SetDependentToPrincipal(name, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableNavigation? IMutableForeignKey.SetDependentToPrincipal(MemberInfo? property)
        => SetDependentToPrincipal(property, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableNavigation? IMutableForeignKey.SetPrincipalToDependent(string? name)
        => SetPrincipalToDependent(name, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableNavigation? IMutableForeignKey.SetPrincipalToDependent(MemberInfo? property)
        => SetPrincipalToDependent(property, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionEntityType IConventionForeignKey.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IEntityType IForeignKey.DeclaringEntityType
    {
        [DebuggerStepThrough]
        get => DeclaringEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionEntityType IConventionForeignKey.PrincipalEntityType
    {
        [DebuggerStepThrough]
        get => PrincipalEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IEntityType IForeignKey.PrincipalEntityType
    {
        [DebuggerStepThrough]
        get => PrincipalEntityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionKey IConventionForeignKey.PrincipalKey
    {
        [DebuggerStepThrough]
        get => PrincipalKey;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IKey IForeignKey.PrincipalKey
    {
        [DebuggerStepThrough]
        get => PrincipalKey;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyList<IConventionProperty> IConventionForeignKey.Properties
    {
        [DebuggerStepThrough]
        get => Properties;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyList<IProperty> IForeignKey.Properties
    {
        [DebuggerStepThrough]
        get => Properties;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionNavigation? IConventionForeignKey.DependentToPrincipal
    {
        [DebuggerStepThrough]
        get => DependentToPrincipal;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    INavigation? IForeignKey.DependentToPrincipal
    {
        [DebuggerStepThrough]
        get => DependentToPrincipal;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionNavigation? IConventionForeignKey.PrincipalToDependent
    {
        [DebuggerStepThrough]
        get => PrincipalToDependent;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    INavigation? IForeignKey.PrincipalToDependent
    {
        [DebuggerStepThrough]
        get => PrincipalToDependent;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionForeignKeyBuilder IConventionForeignKey.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionAnnotatableBuilder IConventionAnnotatable.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <inheritdoc />
    [DebuggerStepThrough]
    IReadOnlyList<IConventionProperty> IConventionForeignKey.SetProperties(
        IReadOnlyList<IConventionProperty> properties,
        IConventionKey principalKey,
        bool fromDataAnnotation)
        => SetProperties(
            properties.Cast<Property>().ToArray(), (Key)principalKey,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    IConventionNavigation? IConventionForeignKey.SetDependentToPrincipal(string? name, bool fromDataAnnotation)
        => SetDependentToPrincipal(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    IConventionNavigation? IConventionForeignKey.SetDependentToPrincipal(MemberInfo? property, bool fromDataAnnotation)
        => SetDependentToPrincipal(property, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    IConventionNavigation? IConventionForeignKey.SetPrincipalToDependent(string? name, bool fromDataAnnotation)
        => SetPrincipalToDependent(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    IConventionNavigation? IConventionForeignKey.SetPrincipalToDependent(MemberInfo? property, bool fromDataAnnotation)
        => SetPrincipalToDependent(property, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    IEnumerable<IReadOnlySkipNavigation> IReadOnlyForeignKey.GetReferencingSkipNavigations()
        => GetReferencingSkipNavigations();

    /// <inheritdoc />
    [DebuggerStepThrough]
    bool? IConventionForeignKey.SetIsUnique(bool? unique, bool fromDataAnnotation)
        => SetIsUnique(unique, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    bool? IConventionForeignKey.SetIsRequired(bool? required, bool fromDataAnnotation)
        => SetIsRequired(required, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    bool? IConventionForeignKey.SetIsRequiredDependent(bool? required, bool fromDataAnnotation)
        => SetIsRequiredDependent(required, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    bool? IConventionForeignKey.SetIsOwnership(bool? ownership, bool fromDataAnnotation)
        => SetIsOwnership(ownership, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    DeleteBehavior? IConventionForeignKey.SetDeleteBehavior(DeleteBehavior? deleteBehavior, bool fromDataAnnotation)
        => SetDeleteBehavior(deleteBehavior, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    [DebuggerStepThrough]
    IDependentKeyValueFactory<TKey>? IForeignKey.GetDependentKeyValueFactory<TKey>()
        => (IDependentKeyValueFactory<TKey>?)DependentKeyValueFactory;
}",1,439 334 2000 58 2001 44 2002 44 2003 44 2004 123 437 2005 63 2006 59 437 323 63 2007 59 437 323 2008 59 437 323 63 2009 59 437 323 63 2010 59 437 2011 63 2012 59 437 2013 2014 59 437 2013 63 2015 59 437 2013 63 2016 59 437 2013 63 2017 59 437 2013 63 2018 59 437 2013 63 2019 59 437 2013 63 2020 59 437 2013 63 2021 59 437 2013 63 2022 59 437 2013 63 2023 59 437 2013 63 2024 59 437 426 63 2025 59 437 2026 60 2027 62 63 2028 59 612 439 2000 40 2029 60 2030 62 2031 44 2032 2033 44 2034 2035 44 2034 2036 44 2013 2037 41 123 2038 40 2031 44 2033 44 2035 44 2036 41 59 2039 61 2031 59 2040 61 2033 59 2041 61 2035 59 2042 61 2036 59 2014 61 2037 59 2008 61 2043 59 392 40 2036 46 2044 40 2033 46 2039 41 631 2033 41 123 469 418 2045 40 2046 46 2047 40 2033 46 2039 46 2048 40 41 44 2036 46 2049 40 41 41 41 59 125 2012 61 418 2011 40 467 44 2035 46 2050 46 2051 41 59 125 612 439 491 2029 60 2030 62 2052 123 2053 59 437 2054 59 125 612 439 491 2032 2055 123 2056 59 437 2057 59 125 612 439 491 2034 2058 123 2059 59 125 612 439 491 2034 2060 123 2061 59 125 612 439 491 2011 2062 123 91 2063 93 2064 619 2012 633 469 418 2065 40 2066 46 2067 41 59 125 612 439 491 323 2068 619 2012 407 422 424 59 612 439 491 492 2069 40 41 619 2012 61 424 59 612 439 431 323 2070 619 2058 46 2071 46 2070 59 612 439 491 2072 60 2073 62 63 2074 123 2075 59 2076 59 125 612 439 491 2077 60 2073 62 2078 40 41 619 2074 633 2079 46 2080 60 2073 62 40 41 59 612 91 2081 93 439 491 2013 2082 40 41 619 2014 59 612 439 491 492 2083 40 2013 2037 41 123 2014 61 2014 46 2084 40 2037 41 59 2058 46 2083 40 2037 41 59 2060 46 2083 40 2037 41 59 125 612 438 431 2085 63 2086 40 461 2087 44 2085 63 2088 44 2085 63 2089 41 619 2062 46 2090 46 2091 46 2092 46 2093 40 2062 44 2087 44 2088 44 2089 41 59 612 439 491 2029 60 2030 62 2094 40 2029 60 2030 62 2095 44 2032 2033 44 2013 63 2037 41 123 2096 40 41 59 490 2097 61 2052 59 490 2098 61 2055 59 392 40 2097 46 2099 40 2095 41 605 2098 614 2033 41 123 392 40 2037 631 424 41 123 2100 40 2037 46 2101 41 59 2102 40 2037 46 2101 41 59 125 450 2097 59 125 2103 40 2095 44 2033 44 2058 44 2060 41 59 2058 46 2104 40 467 41 59 2052 61 2095 59 2055 61 2033 59 2058 46 2105 40 467 41 59 392 40 2037 631 424 41 123 2106 40 2037 46 2107 41 59 2108 40 2037 46 2107 41 59 125 450 40 2029 60 2030 62 41 2058 46 2071 46 2092 46 2109 40 2062 44 2097 44 2098 41 33 59 125 612 91 2081 93 439 491 2013 63 2110 40 41 619 2015 59 612 439 491 492 2111 40 2013 2037 41 123 2015 61 2037 46 2112 40 2015 41 59 386 40 490 2113 398 2052 41 123 2113 46 2083 40 2037 41 59 125 125 612 91 2081 93 439 491 2013 63 2114 40 41 619 2016 59 612 439 491 492 2115 40 2013 2037 41 123 2016 61 2037 46 2116 40 2016 41 59 2055 46 2083 40 2037 41 59 125 612 91 2081 93 439 491 2013 63 2117 40 41 619 2021 59 612 439 491 492 2118 40 2013 63 2037 41 619 2021 61 2037 59 612 439 491 492 2119 40 2013 2037 41 619 2021 61 2037 46 2120 40 2021 41 59 612 439 491 2121 63 2122 123 91 2081 93 2123 59 437 2124 59 125 612 439 491 2121 63 2125 40 461 63 2087 44 2013 2037 41 619 2121 40 2126 46 2127 40 2087 41 44 2037 44 2128 58 473 41 59 612 439 491 2121 63 2125 40 2129 63 2130 44 2013 2037 41 619 2121 40 2126 46 2127 40 2130 41 44 2037 44 2128 58 473 41 59 612 439 491 2121 63 2125 40 2126 63 2130 44 2013 2037 41 619 2121 40 2130 44 2037 44 2128 58 473 41 59 612 91 2081 93 439 491 2013 63 2131 40 41 619 2023 59 612 439 491 492 2132 40 2013 63 2037 41 619 2023 61 2037 46 2120 40 2023 41 59 612 439 491 2121 63 2133 123 91 2081 93 2134 59 437 2135 59 125 612 439 491 2121 63 2136 40 461 63 2087 44 2013 2037 41 619 2121 40 2126 46 2127 40 2087 41 44 2037 44 2128 58 380 41 59 612 439 491 2121 63 2136 40 2129 63 2130 44 2013 2037 41 619 2121 40 2126 46 2127 40 2130 41 44 2037 44 2128 58 380 41 59 612 439 491 2121 63 2136 40 2126 63 2130 44 2013 2037 41 619 2121 40 2130 44 2037 44 2128 58 380 41 59 612 91 2081 93 439 491 2013 63 2137 40 41 619 2024 59 612 439 491 492 2138 40 2013 63 2037 41 619 2024 61 2037 46 2120 40 2024 41 59 612 437 2121 63 2121 40 2126 63 2139 44 2013 2037 44 323 2128 41 123 2140 40 41 59 490 2087 61 2139 634 2141 59 392 40 2087 631 424 41 123 392 40 2128 605 2060 46 2142 41 123 469 418 2143 40 2144 46 2145 40 2087 44 2060 46 2146 40 41 41 41 59 125 392 40 33 2128 605 2058 46 2142 41 123 469 418 2147 40 2148 46 2149 40 2087 44 2058 46 2150 40 41 41 41 59 125 125 490 2151 61 2128 63 2122 58 2133 59 392 40 2087 614 2151 634 2141 41 123 490 2152 61 2128 63 2023 58 2024 59 392 40 2128 41 123 2132 40 2037 41 59 125 360 123 2138 40 2037 41 59 125 392 40 2087 614 424 605 2037 46 2153 40 2152 41 41 123 2058 46 2071 46 2092 46 2154 40 2062 44 2128 41 59 125 450 2151 33 59 125 392 40 2087 614 424 605 2155 605 33 2128 41 123 469 418 2156 40 2157 46 2158 40 2151 634 2141 44 2060 46 2159 40 41 44 2058 46 2159 40 41 41 41 59 125 392 40 2151 631 424 41 123 2160 46 2161 40 2151 46 2141 631 424 44 648 41 59 2151 46 2069 40 41 59 392 40 2128 41 123 2058 46 2162 40 2151 46 2141 41 59 125 360 123 2060 46 2163 40 2151 46 2141 41 59 125 125 2121 63 2164 61 424 59 392 40 2139 634 2141 631 424 41 123 2164 61 2128 63 2058 46 2165 40 2139 46 2166 44 467 44 2128 58 473 41 58 2060 46 2165 40 2139 46 2166 44 467 44 2128 58 380 41 59 125 392 40 2128 41 123 2122 61 2164 59 2132 40 2037 41 59 125 360 123 2133 61 2164 59 2138 40 2037 41 59 125 392 40 2151 631 424 41 123 2167 46 2168 40 2151 46 2141 631 424 44 648 41 59 461 63 2169 59 392 40 2128 41 123 2169 61 2058 46 2071 46 2092 46 2170 40 2058 46 2062 44 2060 46 2062 44 2151 46 2141 44 2151 46 2171 40 41 41 59 125 360 123 2169 61 2058 46 2071 46 2092 46 2172 40 2060 46 2062 44 2058 46 2062 44 2151 46 2141 44 2151 46 2173 40 41 41 59 125 392 40 2164 614 424 41 123 2058 46 2071 46 2092 46 2174 40 2062 44 2128 41 59 450 2151 46 2141 614 2169 63 2151 58 424 59 125 125 392 40 2164 631 424 41 123 2164 61 40 2121 63 41 2058 46 2071 46 2092 46 2175 40 2164 46 2062 41 634 2091 59 125 360 123 2058 46 2071 46 2092 46 2176 40 2062 44 2128 41 59 125 450 2164 59 125 612 439 491 323 2177 123 2178 619 2007 633 2179 59 2180 619 2181 40 2182 44 2013 46 2183 41 59 125 612 439 491 323 63 2184 40 323 63 2185 44 2013 2037 41 123 2186 40 41 59 490 2187 61 2177 59 2007 61 2185 59 392 40 2185 614 380 605 2188 41 123 469 418 2189 40 2190 46 2191 40 2052 46 2192 40 41 44 2058 46 2193 40 41 41 41 59 125 490 2194 61 2133 634 2195 40 41 59 392 40 2185 46 2196 605 2194 631 424 41 123 392 40 33 2197 46 2121 46 2198 40 2133 33 46 2199 44 2194 44 2060 44 2058 44 33 2185 44 2200 58 380 41 41 123 469 418 2201 40 2202 46 2203 40 2185 46 2204 44 2133 46 2199 44 2060 46 2205 40 41 41 41 59 125 125 2017 61 2185 614 424 63 424 58 2037 46 2120 40 2017 41 59 450 2177 631 2187 63 2058 46 2071 46 2092 46 2206 40 2062 41 58 2187 59 125 437 341 323 2207 61 380 59 612 91 2081 93 439 491 2013 63 2208 40 41 619 2017 59 612 439 491 323 2209 123 2210 619 2008 59 2211 619 2212 40 2213 44 2013 46 2214 41 59 125 612 439 491 323 63 2215 40 323 63 2216 44 2013 2037 41 123 2217 40 41 59 490 2218 61 2209 59 2008 61 2216 633 2219 59 2018 61 2216 614 424 63 424 58 2037 46 2120 40 2018 41 59 450 2209 631 2218 63 2058 46 2071 46 2092 46 2220 40 2062 41 58 2218 59 125 437 323 2221 619 33 2052 46 2222 40 2223 619 2223 46 2224 41 59 612 91 2081 93 439 491 2013 63 2225 40 41 619 2018 59 612 439 491 492 2226 40 2013 63 2037 41 619 2018 61 2037 59 612 439 491 323 2227 123 2228 619 2009 633 2229 59 2230 619 2231 40 2232 44 2013 46 2233 41 59 125 612 439 491 323 63 2234 40 323 63 2216 44 2013 2037 41 123 2235 40 41 59 392 40 33 2177 605 2216 614 473 41 123 469 418 2236 40 2237 46 2238 40 2052 46 2239 40 41 44 2058 46 2240 40 41 41 41 59 125 490 2241 61 2227 59 2009 61 2216 59 2019 61 2216 614 424 63 424 58 2037 46 2120 40 2018 41 59 450 2227 631 2241 63 2058 46 2071 46 2092 46 2242 40 2062 41 58 2241 59 125 437 341 323 2243 61 380 59 612 91 2081 93 439 491 2013 63 2244 40 41 619 2019 59 612 439 491 492 2245 40 2013 63 2037 41 619 2019 61 2037 59 612 439 491 2005 2005 123 2246 619 2006 633 2247 59 2248 619 2249 40 2250 44 2013 46 2251 41 59 125 612 439 491 2005 63 2252 40 2005 63 2253 44 2013 2037 41 123 2254 40 41 59 2006 61 2253 59 392 40 2253 614 424 41 123 2020 61 424 59 125 360 123 2255 40 2037 41 59 125 450 2005 59 125 612 439 341 2005 2256 61 2005 46 2257 59 612 91 2081 93 439 491 2013 63 2258 40 41 619 2020 59 612 439 491 492 2259 40 2013 2037 41 619 2020 61 2037 46 2120 40 2020 41 59 612 439 491 323 2260 123 2261 619 2010 633 2262 59 2263 619 2264 40 2265 44 2013 46 2266 41 59 125 612 439 491 323 63 2267 40 323 63 2268 44 2013 2037 41 123 2269 40 41 59 392 40 2268 614 473 41 123 392 40 33 2058 46 2270 40 41 41 123 469 418 2271 40 2272 46 2273 40 2058 46 2274 40 41 41 41 59 125 392 40 2133 614 424 41 123 469 418 2275 40 2276 46 2277 40 2060 46 2278 40 41 44 2058 46 2278 40 41 41 41 59 125 125 490 2279 61 2260 59 2010 61 2268 59 392 40 2010 614 424 41 123 2022 61 424 59 125 360 123 2280 40 2037 41 59 125 450 2260 631 2279 63 2058 46 2071 46 2092 46 2281 40 2062 41 58 2279 59 125 437 341 323 2282 61 380 59 612 91 2081 93 439 491 2013 63 2283 40 41 619 2022 59 612 439 491 492 2284 40 2013 2037 41 619 2022 61 2037 46 2120 40 2022 41 59 612 439 491 2077 60 2121 62 2285 40 2034 2286 41 619 40 40 2287 41 467 41 46 2285 40 2286 41 46 2288 60 2121 62 40 41 59 612 439 491 2077 60 2121 62 2289 40 2034 2286 41 619 40 40 2287 41 467 41 46 2289 40 2286 41 46 2288 60 2121 62 40 41 59 612 439 491 2034 2290 40 2034 2286 41 619 40 2034 41 40 40 2287 41 467 41 46 2291 40 2286 41 59 621 612 439 491 426 2292 123 2293 123 392 40 2025 614 424 41 123 2294 40 41 59 125 450 2025 33 59 125 2295 123 2296 40 41 59 2025 61 2297 59 125 125 621 612 439 491 2026 60 2027 62 2298 123 2299 123 392 40 2028 614 424 41 123 2300 40 41 59 125 450 2028 33 59 125 2301 123 2302 40 41 59 2028 61 2303 59 125 125 612 439 491 2304 2304 619 418 40 40 41 619 40 40 2287 41 467 41 46 2305 40 41 44 40 41 619 40 40 2287 41 467 41 46 2305 40 2306 46 2307 41 41 59 612 439 431 461 2308 40 41 619 40 40 2287 41 467 41 46 2305 40 2306 46 2309 41 59 437 457 492 2310 40 2029 60 2030 62 2095 44 2032 2033 44 2034 2311 44 2034 2036 41 123 385 40 490 2312 61 1500 59 2312 60 2095 46 2313 59 2312 637 41 123 490 2130 61 2095 91 2312 93 59 385 40 490 2314 61 2312 43 1501 59 2314 60 2095 46 2313 59 2314 637 41 123 392 40 2130 614 2095 91 2314 93 41 123 469 418 2315 40 2316 46 2317 40 2095 46 2318 40 41 44 2130 46 2319 41 41 59 125 125 490 2320 61 2311 46 2321 40 2130 46 2322 41 59 392 40 2320 634 2058 46 2323 40 2130 46 2058 41 631 473 606 33 2130 46 2068 41 123 469 418 2324 40 2325 46 2326 40 2095 46 2327 40 41 44 2311 46 2328 40 41 41 41 59 125 125 2329 40 2036 44 2035 58 2311 44 2330 58 424 44 2331 58 424 44 2031 58 2095 44 2332 58 2033 46 2052 44 2185 58 424 44 2333 58 473 41 59 490 2334 61 2311 46 2335 40 2095 44 2033 44 2036 41 46 2336 40 41 59 392 40 2334 631 424 41 123 469 418 2337 40 2338 46 2339 40 2095 46 2340 40 41 44 2311 46 2341 40 41 44 2334 46 2058 46 2341 40 41 44 2033 46 2052 46 2340 40 41 44 2036 46 2341 40 41 41 41 59 125 392 40 2036 46 2071 631 2311 46 2071 41 123 469 418 2342 40 2343 46 2344 40 2311 46 2345 40 41 44 2036 46 2345 40 41 41 41 59 125 125 612 439 457 323 2346 40 2034 2036 44 2034 2035 44 2129 63 2347 44 2129 63 2348 44 2029 60 2349 62 63 2031 44 2029 60 2349 62 63 2350 44 323 63 2185 44 323 2351 41 123 2352 46 2353 40 2036 44 2354 40 2036 41 41 59 2352 46 2353 40 2035 44 2354 40 2035 41 41 59 392 40 2347 631 424 605 33 2355 46 2121 46 2356 40 2347 46 2357 44 2347 44 2035 44 2036 44 2358 58 380 44 2351 58 2351 41 41 123 450 380 59 125 392 40 2348 631 424 605 33 2355 46 2121 46 2356 40 2348 46 2357 44 2348 44 2036 44 2035 44 2358 58 33 2185 44 2351 58 2351 41 41 123 450 380 59 125 450 2350 614 424 606 2031 614 424 606 2346 40 2350 44 2031 44 2036 44 2035 44 2351 41 59 125 612 439 457 323 2346 40 2029 60 2349 62 2350 44 2029 60 2349 62 2031 44 2359 2036 44 2359 2035 44 323 2351 41 123 2360 46 2361 40 2350 44 2362 40 2350 41 41 59 2360 46 2361 40 2031 44 2362 40 2031 41 41 59 2360 46 2361 40 2036 44 2362 40 2036 41 41 59 2360 46 2361 40 2035 44 2362 40 2035 41 41 59 392 40 33 2363 40 2350 44 2031 41 41 123 392 40 2351 41 123 469 418 2364 40 2365 46 2366 40 2031 46 2367 40 41 44 2035 46 2368 40 41 44 2350 46 2367 40 41 44 2036 46 2368 40 41 41 41 59 125 450 380 59 125 392 40 33 2369 40 2350 44 2031 41 41 123 392 40 2351 41 123 469 418 2370 40 2371 46 2372 40 2031 46 2373 40 2374 58 473 41 44 2035 46 2375 40 41 44 2350 46 2373 40 2374 58 473 41 44 2036 46 2375 40 41 41 41 59 125 450 380 59 125 450 473 59 125 437 457 323 2376 40 2029 60 2349 62 2350 44 2029 60 2349 62 2031 41 619 2350 46 2377 614 2031 46 2377 59 437 457 323 2378 40 2029 60 2349 62 2350 44 2029 60 2349 62 2031 41 619 2350 46 2379 40 2223 619 2223 46 2380 46 2381 40 41 41 46 2382 40 2031 46 2379 40 2223 619 2223 46 2380 46 2381 40 41 41 41 59 612 2029 60 2349 62 2287 46 2052 123 91 2081 93 2383 619 2052 59 125 612 2384 2287 46 2055 123 91 2081 93 2385 619 2055 59 125 612 2359 2287 46 2058 123 91 2081 93 2386 619 2058 59 125 612 2359 2287 46 2060 123 91 2081 93 2387 619 2060 59 125 612 2388 63 2287 46 2122 123 91 2081 93 2389 619 2122 59 125 612 2388 63 2287 46 2133 123 91 2081 93 2390 619 2133 59 125 612 2029 60 2391 62 2002 46 2052 123 91 2081 93 2392 619 2052 59 125 612 2393 2002 46 2055 123 91 2081 93 2394 619 2055 59 125 612 2395 2002 46 2058 123 91 2081 93 2396 619 2058 59 125 612 2395 2002 46 2060 123 91 2081 93 2397 619 2060 59 125 612 2398 63 2002 46 2122 123 91 2081 93 2399 619 2122 59 125 612 2398 63 2002 46 2133 123 91 2081 93 2400 619 2133 59 125 612 91 2081 93 492 2002 46 2094 40 2029 60 2391 62 2095 44 2393 2033 41 619 2094 40 2095 311 2029 60 2030 62 633 2095 46 2288 60 2030 62 40 41 46 2401 40 41 44 40 2032 41 2033 44 2013 46 2402 41 59 612 2398 63 2002 46 2125 40 461 63 2087 41 619 2125 40 2087 44 2013 46 2402 41 59 612 91 2081 93 2398 63 2002 46 2125 40 2129 63 2130 41 619 2125 40 2130 44 2013 46 2402 41 59 612 91 2081 93 2398 63 2002 46 2136 40 461 63 2087 41 619 2136 40 2087 44 2013 46 2402 41 59 612 91 2081 93 2398 63 2002 46 2136 40 2129 63 2130 41 619 2136 40 2130 44 2013 46 2402 41 59 612 2403 2003 46 2058 123 91 2081 93 2404 619 2058 59 125 612 2405 2406 46 2058 123 91 2081 93 2407 619 2058 59 125 612 2403 2003 46 2060 123 91 2081 93 2408 619 2060 59 125 612 2405 2406 46 2060 123 91 2081 93 2409 619 2060 59 125 612 2410 2003 46 2055 123 91 2081 93 2411 619 2055 59 125 612 2412 2406 46 2055 123 91 2081 93 2413 619 2055 59 125 612 2029 60 2414 62 2003 46 2052 123 91 2081 93 2415 619 2052 59 125 612 2029 60 2416 62 2406 46 2052 123 91 2081 93 2417 619 2052 59 125 612 2418 63 2003 46 2122 123 91 2081 93 2419 619 2122 59 125 612 2420 63 2406 46 2122 123 91 2081 93 2421 619 2122 59 125 612 2418 63 2003 46 2133 123 91 2081 93 2422 619 2133 59 125 612 2420 63 2406 46 2133 123 91 2081 93 2423 619 2133 59 125 612 2424 2003 46 2062 123 91 2081 93 2425 619 2062 59 125 612 2426 2427 46 2062 123 91 2081 93 2428 619 2062 59 125 612 91 2081 93 2029 60 2414 62 2003 46 2094 40 2029 60 2414 62 2095 44 2410 2033 44 323 2429 41 619 2094 40 2095 46 2288 60 2030 62 40 41 46 2401 40 41 44 40 2032 41 2033 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2418 63 2003 46 2125 40 461 63 2087 44 323 2429 41 619 2125 40 2087 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2418 63 2003 46 2125 40 2129 63 2130 44 323 2429 41 619 2125 40 2130 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2418 63 2003 46 2136 40 461 63 2087 44 323 2429 41 619 2136 40 2087 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2418 63 2003 46 2136 40 2129 63 2130 44 323 2429 41 619 2136 40 2130 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2077 60 2432 62 2287 46 2078 40 41 619 2078 40 41 59 612 91 2081 93 323 63 2003 46 2184 40 323 63 2185 44 323 2429 41 619 2184 40 2185 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 323 63 2003 46 2215 40 323 63 2216 44 323 2429 41 619 2215 40 2216 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 323 63 2003 46 2234 40 323 63 2216 44 323 2429 41 619 2234 40 2216 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 323 63 2003 46 2267 40 323 63 2268 44 323 2429 41 619 2267 40 2268 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2005 63 2003 46 2252 40 2005 63 2253 44 323 2429 41 619 2252 40 2253 44 2429 63 2013 46 2430 58 2013 46 2431 41 59 612 91 2081 93 2433 60 2434 62 63 2406 46 2435 60 2434 62 40 41 619 40 2433 60 2434 62 63 41 2292 59 125 
68363,C#,"    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager(""Microsoft.Data.Sqlite.Properties.Resources"", typeof(Resources).Assembly);

        /// <summary>
        /// {methodName} can only be called when the connection is open.
        /// </summary>
        public static string CallRequiresOpenConnection(object methodName)
            => string.Format(
                GetString(""CallRequiresOpenConnection"", nameof(methodName)),
                methodName);

        /// <summary>
        /// ConnectionString cannot be set when the connection is open.
        /// </summary>
        public static string ConnectionStringRequiresClosedConnection
            => GetString(""ConnectionStringRequiresClosedConnection"");

        /// <summary>
        /// Invalid attempt to call {operation} when reader is closed.
        /// </summary>
        public static string DataReaderClosed(object operation)
            => string.Format(
                GetString(""DataReaderClosed"", nameof(operation)),
                operation);

        /// <summary>
        /// The CommandType '{commandType}' is not supported.
        /// </summary>
        public static string InvalidCommandType(object commandType)
            => string.Format(
                GetString(""InvalidCommandType"", nameof(commandType)),
                commandType);

        /// <summary>
        /// The IsolationLevel '{isolationLevel}' is not supported.
        /// </summary>
        public static string InvalidIsolationLevel(object isolationLevel)
            => string.Format(
                GetString(""InvalidIsolationLevel"", nameof(isolationLevel)),
                isolationLevel);

        /// <summary>
        /// The ParameterDirection '{direction}' is not supported.
        /// </summary>
        public static string InvalidParameterDirection(object direction)
            => string.Format(
                GetString(""InvalidParameterDirection"", nameof(direction)),
                direction);

        /// <summary>
        /// Connection string keyword '{keyword}' is not supported. For a possible alternative, see https://go.microsoft.com/fwlink/?linkid=2142181.
        /// </summary>
        public static string KeywordNotSupported(object keyword)
            => string.Format(
                GetString(""KeywordNotSupported"", nameof(keyword)),
                keyword);

        /// <summary>
        /// Must add values for the following parameters: {parameters}
        /// </summary>
        public static string MissingParameters(object parameters)
            => string.Format(
                GetString(""MissingParameters"", nameof(parameters)),
                parameters);

        /// <summary>
        /// No data exists for the row/column.
        /// </summary>
        public static string NoData
            => GetString(""NoData"");

        /// <summary>
        /// SqliteConnection does not support nested transactions.
        /// </summary>
        public static string ParallelTransactionsNotSupported
            => GetString(""ParallelTransactionsNotSupported"");

        /// <summary>
        /// A SqliteParameter with ParameterName '{parameterName}' is not contained by this SqliteParameterCollection.
        /// </summary>
        public static string ParameterNotFound(object parameterName)
            => string.Format(
                GetString(""ParameterNotFound"", nameof(parameterName)),
                parameterName);

        /// <summary>
        /// {propertyName} must be set.
        /// </summary>
        public static string RequiresSet(object propertyName)
            => string.Format(
                GetString(""RequiresSet"", nameof(propertyName)),
                propertyName);

        /// <summary>
        /// This SqliteTransaction has completed; it is no longer usable.
        /// </summary>
        public static string TransactionCompleted
            => GetString(""TransactionCompleted"");

        /// <summary>
        /// The transaction object is not associated with the same connection object as this command.
        /// </summary>
        public static string TransactionConnectionMismatch
            => GetString(""TransactionConnectionMismatch"");

        /// <summary>
        /// Execute requires the command to have a transaction object when the connection assigned to the command is in a pending local transaction.  The Transaction property of the command has not been initialized.
        /// </summary>
        public static string TransactionRequired
            => GetString(""TransactionRequired"");

        /// <summary>
        /// No mapping exists from object type {typeName} to a known managed provider native type.
        /// </summary>
        public static string UnknownDataType(object typeName)
            => string.Format(
                GetString(""UnknownDataType"", nameof(typeName)),
                typeName);

        /// <summary>
        /// SQLite Error {errorCode}: '{message}'.
        /// </summary>
        public static string SqliteNativeError(object errorCode, object message)
            => string.Format(
                GetString(""SqliteNativeError"", nameof(errorCode), nameof(message)),
                errorCode, message);

        /// <summary>
        /// For more information on this error code see https://www.sqlite.org/rescode.html
        /// </summary>
        public static string DefaultNativeError
            => GetString(""DefaultNativeError"");

        /// <summary>
        /// Cannot bind the value for parameter '{parameterName}' because multiple matching parameters were found in the command text. Specify the parameter name with the symbol prefix, e.g. '@{parameterName}'.
        /// </summary>
        public static string AmbiguousParameterName(object parameterName)
            => string.Format(
                GetString(""AmbiguousParameterName"", nameof(parameterName)),
                parameterName);

        /// <summary>
        /// The {enumType} enumeration value, {value}, is invalid.
        /// </summary>
        public static string InvalidEnumValue(object enumType, object value)
            => string.Format(
                GetString(""InvalidEnumValue"", nameof(enumType), nameof(value)),
                enumType, value);

        /// <summary>
        /// Cannot convert object of type '{sourceType}' to object of type '{targetType}'.
        /// </summary>
        public static string ConvertFailed(object sourceType, object targetType)
            => string.Format(
                GetString(""ConvertFailed"", nameof(sourceType), nameof(targetType)),
                sourceType, targetType);

        /// <summary>
        /// Cannot store 'NaN' values.
        /// </summary>
        public static string CannotStoreNaN
            => GetString(""CannotStoreNaN"");

        /// <summary>
        /// An open reader is already associated with this command. Close it before opening a new one.
        /// </summary>
        public static string DataReaderOpen
            => GetString(""DataReaderOpen"");

        /// <summary>
        /// An open reader is associated with this command. Close it before changing the {propertyName} property.
        /// </summary>
        public static string SetRequiresNoOpenReader(object propertyName)
            => string.Format(
                GetString(""SetRequiresNoOpenReader"", nameof(propertyName)),
                propertyName);

        /// <summary>
        /// The data is NULL at ordinal {ordinal}. This method can't be called on NULL values. Check using IsDBNull before calling.
        /// </summary>
        public static string CalledOnNullValue(object ordinal)
            => string.Format(
                GetString(""CalledOnNullValue"", nameof(ordinal)),
                ordinal);

        /// <summary>
        /// The SQL function '{function}' was called with a NULL argument at ordinal {ordinal}. Create the function using a Nullable parameter or rewrite your query to avoid passing NULL.
        /// </summary>
        public static string UDFCalledWithNull(object function, object ordinal)
            => string.Format(
                GetString(""UDFCalledWithNull"", nameof(function), nameof(ordinal)),
                function, ordinal);

        /// <summary>
        /// SqliteBlob can only be used when the connection is open.
        /// </summary>
        public static string SqlBlobRequiresOpenConnection
            => GetString(""SqlBlobRequiresOpenConnection"");

        /// <summary>
        /// Offset and count were out of bounds for the buffer.
        /// </summary>
        public static string InvalidOffsetAndCount
            => GetString(""InvalidOffsetAndCount"");

        /// <summary>
        /// The size of a blob may not be changed by the SqliteBlob API. Use an UPDATE command instead.
        /// </summary>
        public static string ResizeNotSupported
            => GetString(""ResizeNotSupported"");

        /// <summary>
        /// An attempt was made to move the position before the beginning of the stream.
        /// </summary>
        public static string SeekBeforeBegin
            => GetString(""SeekBeforeBegin"");

        /// <summary>
        /// Stream does not support writing.
        /// </summary>
        public static string WriteNotSupported
            => GetString(""WriteNotSupported"");

        /// <summary>
        /// You specified a password in the connection string, but the native SQLite library '{libraryName}' doesn't support encryption.
        /// </summary>
        public static string EncryptionNotSupported(object libraryName)
            => string.Format(
                GetString(""EncryptionNotSupported"", nameof(libraryName)),
                libraryName);

        /// <summary>
        /// More restrictions were provided than the collection '{collectionName}' supports.
        /// </summary>
        public static string TooManyRestrictions(object collectionName)
            => string.Format(
                GetString(""TooManyRestrictions"", nameof(collectionName)),
                collectionName);

        /// <summary>
        /// The requested collection '{collectionName}' is not defined.
        /// </summary>
        public static string UnknownCollection(object collectionName)
            => string.Format(
                GetString(""UnknownCollection"", nameof(collectionName)),
                collectionName);

        /// <summary>
        /// The name '{name}' is ambiguous between columns '{column1}' and '{column2}'. Specify one using its exact case.
        /// </summary>
        public static string AmbiguousColumnName(object name, object column1, object column2)
            => string.Format(
                GetString(""AmbiguousColumnName"", nameof(name), nameof(column1), nameof(column2)),
                name, column1, column2);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name)!;
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace(""{"" + formatterNames[i] + ""}"", ""{"" + i + ""}"");
            }

            return value;
        }
    }",1,406 457 334 2000 123 437 457 441 2001 2002 61 418 2001 40 648 44 478 40 2000 41 46 2003 41 59 612 439 457 461 2004 40 426 2005 41 619 461 46 2006 40 2007 40 648 44 2008 40 2005 41 41 44 2005 41 59 612 439 457 461 2009 619 2007 40 648 41 59 612 439 457 461 2010 40 426 2011 41 619 461 46 2006 40 2007 40 648 44 2008 40 2011 41 41 44 2011 41 59 612 439 457 461 2012 40 426 2013 41 619 461 46 2006 40 2007 40 648 44 2008 40 2013 41 41 44 2013 41 59 612 439 457 461 2014 40 426 2015 41 619 461 46 2006 40 2007 40 648 44 2008 40 2015 41 41 44 2015 41 59 612 439 457 461 2016 40 426 2017 41 619 461 46 2006 40 2007 40 648 44 2008 40 2017 41 41 44 2017 41 59 612 439 457 461 2018 40 426 2019 41 619 461 46 2006 40 2007 40 648 44 2008 40 2019 41 41 44 2019 41 59 612 439 457 461 2020 40 426 2021 41 619 461 46 2006 40 2007 40 648 44 2008 40 2021 41 41 44 2021 41 59 612 439 457 461 2022 619 2007 40 648 41 59 612 439 457 461 2023 619 2007 40 648 41 59 612 439 457 461 2024 40 426 2025 41 619 461 46 2006 40 2007 40 648 44 2008 40 2025 41 41 44 2025 41 59 612 439 457 461 2026 40 426 2027 41 619 461 46 2006 40 2007 40 648 44 2008 40 2027 41 41 44 2027 41 59 612 439 457 461 2028 619 2007 40 648 41 59 612 439 457 461 2029 619 2007 40 648 41 59 612 439 457 461 2030 619 2007 40 648 41 59 612 439 457 461 2031 40 426 2032 41 619 461 46 2006 40 2007 40 648 44 2008 40 2032 41 41 44 2032 41 59 612 439 457 461 2033 40 426 2034 44 426 2035 41 619 461 46 2006 40 2007 40 648 44 2008 40 2034 41 44 2008 40 2035 41 41 44 2034 44 2035 41 59 612 439 457 461 2036 619 2007 40 648 41 59 612 439 457 461 2037 40 426 2025 41 619 461 46 2006 40 2007 40 648 44 2008 40 2025 41 41 44 2025 41 59 612 439 457 461 2038 40 426 2039 44 426 2040 41 619 461 46 2006 40 2007 40 648 44 2008 40 2039 41 44 2008 40 2040 41 41 44 2039 44 2040 41 59 612 439 457 461 2041 40 426 2042 44 426 2043 41 619 461 46 2006 40 2007 40 648 44 2008 40 2042 41 44 2008 40 2043 41 41 44 2042 44 2043 41 59 612 439 457 461 2044 619 2007 40 648 41 59 612 439 457 461 2045 619 2007 40 648 41 59 612 439 457 461 2046 40 426 2027 41 619 461 46 2006 40 2007 40 648 44 2008 40 2027 41 41 44 2027 41 59 612 439 457 461 2047 40 426 2048 41 619 461 46 2006 40 2007 40 648 44 2008 40 2048 41 41 44 2048 41 59 612 439 457 461 2049 40 426 389 44 426 2048 41 619 461 46 2006 40 2007 40 648 44 2008 40 389 41 44 2008 40 2048 41 41 44 389 44 2048 41 59 612 439 457 461 2050 619 2007 40 648 41 59 612 439 457 461 2051 619 2007 40 648 41 59 612 439 457 461 2052 619 2007 40 648 41 59 612 439 457 461 2053 619 2007 40 648 41 59 612 439 457 461 2054 619 2007 40 648 41 59 612 439 457 461 2055 40 426 2056 41 619 461 46 2006 40 2007 40 648 44 2008 40 2056 41 41 44 2056 41 59 612 439 457 461 2057 40 426 2058 41 619 461 46 2006 40 2007 40 648 44 2008 40 2058 41 41 44 2058 41 59 612 439 457 461 2059 40 426 2058 41 619 461 46 2006 40 2007 40 648 44 2008 40 2058 41 41 44 2058 41 59 612 439 457 461 2060 40 426 2061 44 426 2062 44 426 2063 41 619 461 46 2006 40 2007 40 648 44 2008 40 2061 41 44 2008 40 2062 41 44 2008 40 2063 41 41 44 2061 44 2062 44 2063 41 59 437 457 461 2007 40 461 2061 44 433 461 91 93 2064 41 123 490 2040 61 2002 46 2007 40 2061 41 33 59 385 40 490 2065 61 1500 59 2065 60 2064 46 2066 59 2065 637 41 123 2040 61 2040 46 2067 40 648 43 2064 91 2065 93 43 648 44 648 43 2065 43 648 41 59 125 450 2040 59 125 125 
79733,C#,"    public class ContractParametersContext
    {
        private class ContextItem
        {
            public readonly byte[] Script;
            public readonly ContractParameter[] Parameters;
            public readonly Dictionary<ECPoint, byte[]> Signatures;

            public ContextItem(Contract contract)
            {
                this.Script = contract.Script;
                this.Parameters = contract.ParameterList.Select(p => new ContractParameter { Type = p }).ToArray();
                this.Signatures = new Dictionary<ECPoint, byte[]>();
            }

            public ContextItem(JObject json)
            {
                this.Script = Convert.FromBase64String(json[""script""].AsString());
                this.Parameters = ((JArray)json[""parameters""]).Select(p => ContractParameter.FromJson(p)).ToArray();
                this.Signatures = json[""signatures""].Properties.Select(p => new
                {
                    PublicKey = ECPoint.Parse(p.Key, ECCurve.Secp256r1),
                    Signature = Convert.FromBase64String(p.Value.AsString())
                }).ToDictionary(p => p.PublicKey, p => p.Signature);
            }

            public JObject ToJson()
            {
                JObject json = new();
                json[""script""] = Convert.ToBase64String(Script);
                json[""parameters""] = new JArray(Parameters.Select(p => p.ToJson()));
                json[""signatures""] = new JObject();
                foreach (var signature in Signatures)
                    json[""signatures""][signature.Key.ToString()] = Convert.ToBase64String(signature.Value);
                return json;
            }
        }

        /// <summary>
        /// The <see cref=""IVerifiable""/> to add witnesses.
        /// </summary>
        public readonly IVerifiable Verifiable;

        /// <summary>
        /// The snapshot used to read data.
        /// </summary>
        public readonly DataCache Snapshot;

        /// <summary>
        /// The magic number of the network.
        /// </summary>
        public readonly uint Network;

        private readonly Dictionary<UInt160, ContextItem> ContextItems;

        /// <summary>
        /// Determines whether all witnesses are ready to be added.
        /// </summary>
        public bool Completed
        {
            get
            {
                if (ContextItems.Count < ScriptHashes.Count)
                    return false;
                return ContextItems.Values.All(p => p != null && p.Parameters.All(q => q.Value != null));
            }
        }

        private UInt160[] _ScriptHashes = null;
        /// <summary>
        /// Gets the script hashes to be verified for the <see cref=""Verifiable""/>.
        /// </summary>
        public IReadOnlyList<UInt160> ScriptHashes => _ScriptHashes ??= Verifiable.GetScriptHashesForVerifying(Snapshot);

        /// <summary>
        /// Initializes a new instance of the <see cref=""ContractParametersContext""/> class.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""verifiable"">The <see cref=""IVerifiable""/> to add witnesses.</param>
        /// <param name=""network"">The magic number of the network.</param>
        public ContractParametersContext(DataCache snapshot, IVerifiable verifiable, uint network)
        {
            this.Verifiable = verifiable;
            this.Snapshot = snapshot;
            this.ContextItems = new Dictionary<UInt160, ContextItem>();
            this.Network = network;
        }

        /// <summary>
        /// Adds a parameter to the specified witness script.
        /// </summary>
        /// <param name=""contract"">The contract contains the script.</param>
        /// <param name=""index"">The index of the parameter.</param>
        /// <param name=""parameter"">The value of the parameter.</param>
        /// <returns><see langword=""true""/> if the parameter is added successfully; otherwise, <see langword=""false""/>.</returns>
        public bool Add(Contract contract, int index, object parameter)
        {
            ContextItem item = CreateItem(contract);
            if (item == null) return false;
            item.Parameters[index].Value = parameter;
            return true;
        }

        /// <summary>
        /// Adds parameters to the specified witness script.
        /// </summary>
        /// <param name=""contract"">The contract contains the script.</param>
        /// <param name=""parameters"">The values of the parameters.</param>
        /// <returns><see langword=""true""/> if the parameters are added successfully; otherwise, <see langword=""false""/>.</returns>
        public bool Add(Contract contract, params object[] parameters)
        {
            ContextItem item = CreateItem(contract);
            if (item == null) return false;
            for (int index = 0; index < parameters.Length; index++)
            {
                item.Parameters[index].Value = parameters[index];
            }
            return true;
        }

        /// <summary>
        /// Adds a signature to the specified witness script.
        /// </summary>
        /// <param name=""contract"">The contract contains the script.</param>
        /// <param name=""pubkey"">The public key for the signature.</param>
        /// <param name=""signature"">The signature.</param>
        /// <returns><see langword=""true""/> if the signature is added successfully; otherwise, <see langword=""false""/>.</returns>
        public bool AddSignature(Contract contract, ECPoint pubkey, byte[] signature)
        {
            if (contract.Script.IsMultiSigContract(out _, out ECPoint[] points))
            {
                if (!points.Contains(pubkey)) return false;
                ContextItem item = CreateItem(contract);
                if (item == null) return false;
                if (item.Parameters.All(p => p.Value != null)) return false;
                if (!item.Signatures.TryAdd(pubkey, signature))
                    return false;
                if (item.Signatures.Count == contract.ParameterList.Length)
                {
                    Dictionary<ECPoint, int> dic = points.Select((p, i) => new
                    {
                        PublicKey = p,
                        Index = i
                    }).ToDictionary(p => p.PublicKey, p => p.Index);
                    byte[][] sigs = item.Signatures.Select(p => new
                    {
                        Signature = p.Value,
                        Index = dic[p.Key]
                    }).OrderByDescending(p => p.Index).Select(p => p.Signature).ToArray();
                    for (int i = 0; i < sigs.Length; i++)
                        if (!Add(contract, i, sigs[i]))
                            throw new InvalidOperationException();
                }
                return true;
            }
            else
            {
                int index = -1;
                for (int i = 0; i < contract.ParameterList.Length; i++)
                    if (contract.ParameterList[i] == ContractParameterType.Signature)
                        if (index >= 0)
                            throw new NotSupportedException();
                        else
                            index = i;

                if (index == -1)
                {
                    // unable to find ContractParameterType.Signature in contract.ParameterList 
                    // return now to prevent array index out of bounds exception
                    return false;
                }
                ContextItem item = CreateItem(contract);
                if (item == null) return false;
                if (!item.Signatures.TryAdd(pubkey, signature))
                    return false;
                item.Parameters[index].Value = signature;
                return true;
            }
        }

        private ContextItem CreateItem(Contract contract)
        {
            if (ContextItems.TryGetValue(contract.ScriptHash, out ContextItem item))
                return item;
            if (!ScriptHashes.Contains(contract.ScriptHash))
                return null;
            item = new ContextItem(contract);
            ContextItems.Add(contract.ScriptHash, item);
            return item;
        }

        /// <summary>
        /// Converts the context from a JSON object.
        /// </summary>
        /// <param name=""json"">The context represented by a JSON object.</param>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The converted context.</returns>
        public static ContractParametersContext FromJson(JObject json, DataCache snapshot)
        {
            var type = typeof(ContractParametersContext).GetTypeInfo().Assembly.GetType(json[""type""].AsString());
            if (!typeof(IVerifiable).IsAssignableFrom(type)) throw new FormatException();

            var verifiable = (IVerifiable)Activator.CreateInstance(type);
            using (MemoryStream ms = new(Convert.FromBase64String(json[""data""].AsString()), false))
            using (BinaryReader reader = new(ms, Utility.StrictUTF8))
            {
                verifiable.DeserializeUnsigned(reader);
            }
            if (json.ContainsProperty(""hash""))
            {
                UInt256 hash = UInt256.Parse(json[""hash""].GetString());
                if (hash != verifiable.Hash) throw new FormatException();
            }
            ContractParametersContext context = new(snapshot, verifiable, (uint)json[""network""].GetInt32());
            foreach (var property in json[""items""].Properties)
            {
                context.ContextItems.Add(UInt160.Parse(property.Key), new ContextItem(property.Value));
            }
            return context;
        }

        /// <summary>
        /// Gets the parameter with the specified index from the witness script.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <param name=""index"">The specified index.</param>
        /// <returns>The parameter with the specified index.</returns>
        public ContractParameter GetParameter(UInt160 scriptHash, int index)
        {
            return GetParameters(scriptHash)?[index];
        }

        /// <summary>
        /// Gets the parameters from the witness script.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <returns>The parameters from the witness script.</returns>
        public IReadOnlyList<ContractParameter> GetParameters(UInt160 scriptHash)
        {
            if (!ContextItems.TryGetValue(scriptHash, out ContextItem item))
                return null;
            return item.Parameters;
        }

        /// <summary>
        /// Gets the signatures from the witness script.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <returns>The signatures from the witness script.</returns>
        public IReadOnlyDictionary<ECPoint, byte[]> GetSignatures(UInt160 scriptHash)
        {
            if (!ContextItems.TryGetValue(scriptHash, out ContextItem item))
                return null;
            return item.Signatures;
        }

        /// <summary>
        /// Gets the witness script with the specified hash.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <returns>The witness script.</returns>
        public byte[] GetScript(UInt160 scriptHash)
        {
            if (!ContextItems.TryGetValue(scriptHash, out ContextItem item))
                return null;
            return item.Script;
        }

        /// <summary>
        /// Gets the witnesses of the <see cref=""Verifiable""/>.
        /// </summary>
        /// <returns>The witnesses of the <see cref=""Verifiable""/>.</returns>
        /// <exception cref=""InvalidOperationException"">The witnesses are not ready to be added.</exception>
        public Witness[] GetWitnesses()
        {
            if (!Completed) throw new InvalidOperationException();
            Witness[] witnesses = new Witness[ScriptHashes.Count];
            for (int i = 0; i < ScriptHashes.Count; i++)
            {
                ContextItem item = ContextItems[ScriptHashes[i]];
                using ScriptBuilder sb = new();
                for (int j = item.Parameters.Length - 1; j >= 0; j--)
                {
                    sb.EmitPush(item.Parameters[j]);
                }
                witnesses[i] = new Witness
                {
                    InvocationScript = sb.ToArray(),
                    VerificationScript = item.Script ?? Array.Empty<byte>()
                };
            }
            return witnesses;
        }

        /// <summary>
        /// Parses the context from a JSON <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The JSON <see cref=""string""/>.</param>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The parsed context.</returns>
        public static ContractParametersContext Parse(string value, DataCache snapshot)
        {
            return FromJson(JObject.Parse(value), snapshot);
        }

        /// <summary>
        /// Converts the context to a JSON object.
        /// </summary>
        /// <returns>The context represented by a JSON object.</returns>
        public JObject ToJson()
        {
            JObject json = new();
            json[""type""] = Verifiable.GetType().FullName;
            json[""hash""] = Verifiable.Hash.ToString();
            using (MemoryStream ms = new())
            using (BinaryWriter writer = new(ms, Utility.StrictUTF8))
            {
                Verifiable.SerializeUnsigned(writer);
                writer.Flush();
                json[""data""] = Convert.ToBase64String(ms.ToArray());
            }
            json[""items""] = new JObject();
            foreach (var item in ContextItems)
                json[""items""][item.Key.ToString()] = item.Value.ToJson();
            json[""network""] = Network;
            return json;
        }

        public override string ToString()
        {
            return ToJson().ToString();
        }
    }",1,439 334 2000 123 437 334 2001 123 439 441 326 91 93 2002 59 439 441 2003 91 93 2004 59 439 441 2005 60 2006 44 326 91 93 62 2007 59 439 2001 40 2008 2009 41 123 467 46 2002 61 2009 46 2002 59 467 46 2004 61 2009 46 2010 46 2011 40 2012 619 418 2003 123 2013 61 2012 125 41 46 2014 40 41 59 467 46 2007 61 418 2005 60 2006 44 326 91 93 62 40 41 59 125 439 2001 40 2015 2016 41 123 467 46 2002 61 2017 46 2018 40 2016 91 648 93 46 2019 40 41 41 59 467 46 2004 61 40 40 2020 41 2016 91 648 93 41 46 2021 40 2022 619 2003 46 2023 40 2022 41 41 46 2024 40 41 59 467 46 2007 61 2016 91 648 93 46 2025 46 2021 40 2022 619 418 123 2026 61 2006 46 2027 40 2022 46 2028 44 2029 46 2030 41 44 2031 61 2017 46 2018 40 2022 46 2032 46 2019 40 41 41 125 41 46 2033 40 2022 619 2022 46 2034 44 2022 619 2022 46 2035 41 59 125 439 2015 2036 40 41 123 2015 2016 61 418 40 41 59 2016 91 648 93 61 2037 46 2038 40 2002 41 59 2016 91 648 93 61 418 2039 40 2004 46 2040 40 2041 619 2041 46 2036 40 41 41 41 59 2016 91 648 93 61 418 2015 40 41 59 386 40 490 2042 398 2007 41 2016 91 648 93 91 2042 46 2043 46 2044 40 41 93 61 2037 46 2038 40 2042 46 2045 41 59 450 2016 59 125 125 612 439 441 2046 2047 59 612 439 441 2048 2049 59 612 439 441 479 2050 59 437 441 2051 60 2052 44 2001 62 2053 59 612 439 323 2054 123 2055 123 392 40 2053 46 2056 60 2057 46 2056 41 450 380 59 450 2053 46 2058 46 2059 40 2060 619 2060 631 424 605 2060 46 2061 46 2059 40 2062 619 2062 46 2063 631 424 41 41 59 125 125 437 2052 91 93 2064 61 424 59 612 439 2065 60 2052 62 2066 619 2064 633 61 2047 46 2067 40 2049 41 59 612 439 2000 40 2048 2068 44 2046 2069 44 479 2070 41 123 467 46 2047 61 2069 59 467 46 2049 61 2068 59 467 46 2053 61 418 2051 60 2052 44 2001 62 40 41 59 467 46 2050 61 2070 59 125 612 439 323 2071 40 2072 2073 44 404 2074 44 426 2075 41 123 2001 2076 61 2077 40 2073 41 59 392 40 2076 614 424 41 450 380 59 2076 46 2078 91 2074 93 46 2079 61 2075 59 450 473 59 125 612 439 323 2071 40 2072 2073 44 433 426 91 93 2080 41 123 2001 2081 61 2082 40 2073 41 59 392 40 2081 614 424 41 450 380 59 385 40 404 2074 61 1500 59 2074 60 2080 46 2083 59 2074 637 41 123 2081 46 2084 91 2074 93 46 2085 61 2080 91 2074 93 59 125 450 473 59 125 612 439 323 2086 40 2072 2073 44 2087 2088 44 326 91 93 2089 41 123 392 40 2073 46 2090 46 2091 40 430 2092 44 430 2087 91 93 2093 41 41 123 392 40 33 2093 46 2094 40 2088 41 41 450 380 59 2001 2095 61 2096 40 2073 41 59 392 40 2095 614 424 41 450 380 59 392 40 2095 46 2097 46 2098 40 2099 619 2099 46 2100 631 424 41 41 450 380 59 392 40 33 2095 46 2101 46 2102 40 2088 44 2089 41 41 450 380 59 392 40 2095 46 2101 46 2103 614 2073 46 2104 46 2105 41 123 2051 60 2087 44 404 62 2106 61 2093 46 2107 40 40 2099 44 2108 41 619 418 123 2109 61 2099 44 2110 61 2108 125 41 46 2111 40 2099 619 2099 46 2112 44 2099 619 2099 46 2113 41 59 326 91 93 91 93 2114 61 2095 46 2101 46 2107 40 2099 619 418 123 2115 61 2099 46 2100 44 2113 61 2106 91 2099 46 2116 93 125 41 46 2117 40 2099 619 2099 46 2113 41 46 2107 40 2099 619 2099 46 2118 41 46 2119 40 41 59 385 40 404 2108 61 1500 59 2108 60 2114 46 2105 59 2108 637 41 392 40 33 2071 40 2073 44 2108 44 2114 91 2108 93 41 41 469 418 2120 40 41 59 125 450 473 59 125 360 123 404 2074 61 45 1501 59 385 40 404 2121 61 1500 59 2121 60 2073 46 2122 46 2123 59 2121 637 41 392 40 2073 46 2122 91 2121 93 614 2124 46 2125 41 392 40 2074 615 1500 41 469 418 2126 40 41 59 360 2074 61 2121 59 392 40 2074 614 45 1501 41 123 621 621 450 380 59 125 2001 2127 61 2128 40 2073 41 59 392 40 2127 614 424 41 450 380 59 392 40 33 2127 46 2129 46 2130 40 2088 44 2089 41 41 450 380 59 2127 46 2131 91 2074 93 46 2132 61 2089 59 450 473 59 125 125 437 2001 2133 40 2072 2073 41 123 392 40 2053 46 2134 40 2073 46 2135 44 430 2001 2136 41 41 450 2136 59 392 40 33 2066 46 2137 40 2073 46 2135 41 41 450 424 59 2136 61 418 2001 40 2073 41 59 2053 46 2071 40 2073 46 2135 44 2136 41 59 450 2136 59 125 612 439 457 2000 2138 40 2139 2140 44 2048 2068 41 123 490 2141 61 478 40 2000 41 46 2142 40 41 46 2143 46 2144 40 2140 91 648 93 46 2145 40 41 41 59 392 40 33 478 40 2046 41 46 2146 40 2141 41 41 469 418 2147 40 41 59 490 2069 61 40 2046 41 2148 46 2149 40 2141 41 59 489 40 2150 2151 61 418 40 2152 46 2153 40 2140 91 648 93 46 2145 40 41 41 44 380 41 41 489 40 2154 2155 61 418 40 2151 44 2156 46 2157 41 41 123 2069 46 2158 40 2155 41 59 125 392 40 2140 46 2159 40 648 41 41 123 2160 2161 61 2160 46 2162 40 2140 91 648 93 46 2163 40 41 41 59 392 40 2161 631 2069 46 2164 41 469 418 2147 40 41 59 125 2000 2165 61 418 40 2068 44 2069 44 40 479 41 2140 91 648 93 46 2166 40 41 41 59 386 40 490 2167 398 2140 91 648 93 46 2168 41 123 2165 46 2053 46 2071 40 2052 46 2169 40 2167 46 2170 41 44 418 2001 40 2167 46 2171 41 41 59 125 450 2165 59 125 612 439 2172 2173 40 2052 2174 44 404 2074 41 123 450 2175 40 2174 41 63 91 2074 93 59 125 612 439 2065 60 2172 62 2176 40 2052 2174 41 123 392 40 33 2053 46 2177 40 2174 44 430 2001 2178 41 41 450 424 59 450 2178 46 2179 59 125 612 439 2180 60 2087 44 326 91 93 62 2181 40 2052 2174 41 123 392 40 33 2053 46 2182 40 2174 44 430 2001 2183 41 41 450 424 59 450 2183 46 2184 59 125 612 439 326 91 93 2185 40 2052 2174 41 123 392 40 33 2053 46 2186 40 2174 44 430 2001 2187 41 41 450 424 59 450 2187 46 2188 59 125 612 439 2189 91 93 2190 40 41 123 392 40 33 2054 41 469 418 2191 40 41 59 2189 91 93 2192 61 418 2189 91 2066 46 2193 93 59 385 40 404 2194 61 1500 59 2194 60 2066 46 2193 59 2194 637 41 123 2001 2195 61 2053 91 2066 91 2194 93 93 59 489 2196 2197 61 418 40 41 59 385 40 404 2198 61 2195 46 2199 46 2200 45 1501 59 2198 615 1500 59 2198 629 41 123 2197 46 2201 40 2195 46 2199 91 2198 93 41 59 125 2192 91 2194 93 61 418 2189 123 2202 61 2197 46 2203 40 41 44 2204 61 2195 46 2205 633 2206 46 2207 60 326 62 40 41 125 59 125 450 2192 59 125 612 439 457 2000 2208 40 461 2209 44 2048 2068 41 123 450 2138 40 2139 46 2208 40 2209 41 44 2068 41 59 125 612 439 2139 2210 40 41 123 2139 2140 61 418 40 41 59 2140 91 648 93 61 2047 46 2211 40 41 46 2212 59 2140 91 648 93 61 2047 46 2213 46 2214 40 41 59 489 40 2215 2216 61 418 40 41 41 489 40 2217 2218 61 418 40 2216 44 2219 46 2220 41 41 123 2047 46 2221 40 2218 41 59 2218 46 2222 40 41 59 2140 91 648 93 61 2223 46 2224 40 2216 46 2225 40 41 41 59 125 2140 91 648 93 61 418 2139 40 41 59 386 40 490 2226 398 2053 41 2140 91 648 93 91 2226 46 2227 46 2214 40 41 93 61 2226 46 2228 46 2210 40 41 59 2140 91 648 93 61 2050 59 450 2140 59 125 439 431 461 2229 40 41 123 450 2210 40 41 46 2229 40 41 59 125 125 
69333,C#,"    public class SqliteParameterTest
    {
        [Fact]
        public void Ctor_sets_name_and_value()
        {
            var result = new SqliteParameter(""@Parameter"", 1);

            Assert.Equal(""@Parameter"", result.ParameterName);
            Assert.Equal(1, result.Value);
        }

        [Fact]
        public void Ctor_sets_other_values()
        {
            var result = new SqliteParameter(""@Parameter"", SqliteType.Integer, 8, ""Column"");

            Assert.Equal(""@Parameter"", result.ParameterName);
            Assert.Equal(SqliteType.Integer, result.SqliteType);
            Assert.Equal(8, result.Size);
            Assert.Equal(""Column"", result.SourceColumn);
        }

        [Fact]
        public void ParameterName_defaults_to_empty()
        {
            var parameter = new SqliteParameter();

            Assert.Empty(parameter.ParameterName);
        }

        [Fact]
        public void ParameterName_coalesces_to_empty()
        {
            var parameter = new SqliteParameter
            {
                ParameterName = null
            };

            Assert.Empty(parameter.ParameterName);
        }

        [Fact]
        public void SourceColumn_defaults_to_empty()
        {
            var parameter = new SqliteParameter();

            Assert.Empty(parameter.SourceColumn);
        }

        [Fact]
        public void SourceColumn_coalesces_to_empty()
        {
            var parameter = new SqliteParameter
            {
                SourceColumn = null
            };

            Assert.Empty(parameter.SourceColumn);
        }

        [Fact]
        public void DbType_defaults_to_string()
        {
            Assert.Equal(DbType.String, new SqliteParameter().DbType);
        }

        [Fact]
        public void Size_validates_argument()
        {
            var parameter = new SqliteParameter();

            var ex = Assert.Throws<ArgumentOutOfRangeException>(() => parameter.Size = -2);

            Assert.Equal(""value"", ex.ParamName);
            Assert.Equal(-2, ex.ActualValue);
        }

        [Fact]
        public void SqliteType_defaults_to_text()
        {
            Assert.Equal(SqliteType.Text, new SqliteParameter().SqliteType);
        }

        [Fact]
        public void Direction_input_by_default()
        {
            Assert.Equal(ParameterDirection.Input, new SqliteParameter().Direction);
        }

        [Fact]
        public void Direction_validates_value()
        {
            var ex = Assert.Throws<ArgumentException>(() => new SqliteParameter().Direction = ParameterDirection.Output);
            Assert.Equal(Resources.InvalidParameterDirection(ParameterDirection.Output), ex.Message);
        }

        [Fact]
        public void ResetDbType_works()
        {
            var parameter = new SqliteParameter { DbType = DbType.Int64, SqliteType = SqliteType.Integer };

            parameter.ResetDbType();

            Assert.Equal(DbType.String, parameter.DbType);
            Assert.Equal(SqliteType.Text, parameter.SqliteType);
        }

        [Fact]
        public void ResetSqliteType_works()
        {
            var parameter = new SqliteParameter { DbType = DbType.Int64, SqliteType = SqliteType.Integer };

            parameter.ResetSqliteType();

            Assert.Equal(DbType.String, parameter.DbType);
            Assert.Equal(SqliteType.Text, parameter.SqliteType);
        }

        [Fact]
        public void Bind_requires_set_name()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter;"";
                command.Parameters.Add(new SqliteParameter { Value = 1 });
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteNonQuery());

                Assert.Equal(Resources.RequiresSet(""ParameterName""), ex.Message);
            }
        }

        [Fact]
        public void Bind_requires_set_value()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter;"";
                command.Parameters.Add(new SqliteParameter { ParameterName = ""@Parameter"" });
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteNonQuery());

                Assert.Equal(Resources.RequiresSet(""Value""), ex.Message);
            }
        }

        [Fact]
        public void Bind_is_noop_on_unknown_parameter()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT 1;"";
                command.Parameters.AddWithValue(""@Unknown"", 1);
                connection.Open();

                command.ExecuteNonQuery();
            }
        }

        [Theory]
        [InlineData(true, 1L)]
        [InlineData((byte)1, 1L)]
        [InlineData('A', 65L, SqliteType.Integer)]
        [InlineData('A', ""A"")]
        [InlineData(3.14, 3.14)]
        [InlineData(3f, 3.0)]
        [InlineData(1, 1L)]
        [InlineData(1L, 1L)]
        [InlineData((sbyte)1, 1L)]
        [InlineData((short)1, 1L)]
        [InlineData(""test"", ""test"")]
        [InlineData(1u, 1L)]
        [InlineData(1ul, 1L)]
        [InlineData((ushort)1, 1L)]
        [InlineData(""测试测试测试"", ""测试测试测试"")]
        [InlineData(double.NegativeInfinity, double.NegativeInfinity)]
        [InlineData(double.PositiveInfinity, double.PositiveInfinity)]
        [InlineData(float.NegativeInfinity, double.NegativeInfinity)]
        [InlineData(float.PositiveInfinity, double.PositiveInfinity)]
        public void Bind_works(object value, object coercedValue, SqliteType? sqliteType = null)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter;"";
                var sqliteParameter = command.Parameters.AddWithValue(""@Parameter"", value);
                if (sqliteType.HasValue)
                {
                    sqliteParameter.SqliteType = sqliteType.Value;
                }

                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(coercedValue, result);
            }
        }

        [Theory]
        [InlineData(double.NaN)]
        [InlineData(float.NaN)]
        public void Bind_throws_for_nan(object value)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter;"";
                command.Parameters.AddWithValue(""@Parameter"", value);
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteScalar());
                Assert.Equal(Resources.CannotStoreNaN, ex.Message);
            }
        }

        [Fact]
        public void Bind_works_when_byte_array()
        {
            var bytes = new byte[] { 0x7E, 0x57 };
            Bind_works(bytes, bytes);
        }

        [Fact]
        public void Bind_works_when_DateTime()
            => Bind_works(new DateTime(2014, 4, 14, 11, 13, 59), ""2014-04-14 11:13:59"");

        [Fact]
        public void Bind_works_when_DateTime_with_SqliteType_Real()
            => Bind_works(new DateTime(2014, 4, 14, 11, 13, 59), 2456761.9680439816, SqliteType.Real);

        [Fact]
        public void Bind_works_when_DateTimeOffset()
            => Bind_works(new DateTimeOffset(2014, 4, 14, 11, 13, 59, new TimeSpan(-8, 0, 0)), ""2014-04-14 11:13:59-08:00"");

        [Fact]
        public void Bind_works_when_DateTimeOffset_with_SqliteType_Real()
            => Bind_works(
                new DateTimeOffset(new DateTime(2014, 4, 14, 11, 13, 59)),
                2456761.9680439816,
                SqliteType.Real);

        [Fact]
        public void Bind_works_when_DateOnly()
            => Bind_works(new DateOnly(2014, 4, 14), ""2014-04-14"");

        [Fact]
        public void Bind_works_when_DateOnly_with_SqliteType_Real()
            => Bind_works(new DateOnly(2014, 4, 14), 2456761.5, SqliteType.Real);

        [Fact]
        public void Bind_works_when_TimeOnly()
            => Bind_works(new TimeOnly(13, 10, 15), ""13:10:15"");

        [Fact]
        public void Bind_works_when_TimeOnly_with_milliseconds()
            => Bind_works(new TimeOnly(13, 10, 15, 500), ""13:10:15.5000000"");

        [Fact]
        public void Bind_works_when_TimeOnly_with_SqliteType_Real()
            => Bind_works(new TimeOnly(13, 10, 15), 0.5487847222222222, SqliteType.Real);

        [Fact]
        public void Bind_works_when_DBNull()
            => Bind_works(DBNull.Value, DBNull.Value);

        [Fact]
        public void Bind_works_when_decimal()
            => Bind_works(3.14m, ""3.14"");

        [Fact]
        public void Bind_works_when_decimal_with_integral_value()
            => Bind_works(3m, ""3.0"");

        [Fact]
        public void Bind_works_when_Enum()
            => Bind_works(MyEnum.One, 1L);

        [Fact]
        public void Bind_works_when_Guid_with_SqliteType_Blob()
            => Bind_works(
                new Guid(""1c902ddb-f4b6-4945-af38-0dc1b0760465""),
                new byte[] { 0xDB, 0x2D, 0x90, 0x1C, 0xB6, 0xF4, 0x45, 0x49, 0xAF, 0x38, 0x0D, 0xC1, 0xB0, 0x76, 0x04, 0x65 },
                SqliteType.Blob);

        [Fact]
        public void Bind_works_when_Guid()
            => Bind_works(
                new Guid(""1c902ddb-f4b6-4945-af38-0dc1b0760465""),
                ""1C902DDB-F4B6-4945-AF38-0DC1B0760465"");

        [Fact]
        public void Bind_works_when_Nullable()
            => Bind_works((int?)1, 1L);

        [Fact]
        public void Bind_works_when_TimeSpan()
            => Bind_works(new TimeSpan(11, 19, 32), ""11:19:32"");

        [Fact]
        public void Bind_works_when_TimeSpan_with_SqliteType_Real()
            => Bind_works(new TimeSpan(11, 19, 32), 0.47189814814814812, SqliteType.Real);

        [Fact]
        public void Bind_throws_when_unknown()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Parameter;"";
                command.Parameters.AddWithValue(""@Parameter"", new object());
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteScalar());

                Assert.Equal(Resources.UnknownDataType(typeof(object)), ex.Message);
            }
        }

        [Fact]
        public void Bind_binds_string_values_without_embedded_nulls()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Text || 'ing';"";
                command.Parameters.AddWithValue(""@Text"", ""test"");
                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(""testing"", result);
            }
        }

        [Fact]
        public void Bind_with_restricted_size_works_on_string_values()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Text;"";
                command.Parameters.AddWithValue(""@Text"", ""ABCDE"").Size = 3;
                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(""ABC"", result);
            }
        }

        [Fact]
        public void Bind_with_sentinel_size_works_on_string_values()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT $value;"";
                command.Parameters.AddWithValue(""$value"", ""TEST"").Size = -1;
                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(""TEST"", result);
            }
        }

        [Fact]
        public void Bind_with_restricted_size_works_on_blob_values()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Blob;"";
                command.Parameters.AddWithValue(""@Blob"", new byte[] { 1, 2, 3, 4, 5 }).Size = 3;
                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(new byte[] { 1, 2, 3 }, result);
            }
        }

        [Fact]
        public void Bind_with_sentinel_size_works_on_blob_values()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT $value;"";
                command.Parameters.AddWithValue(""$value"", new byte[] { 0x7E, 0x57 }).Size = -1;
                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(new byte[] { 0x7E, 0x57 }, result);
            }
        }

        [Theory]
        [InlineData(""@Parameter"")]
        [InlineData(""$Parameter"")]
        [InlineData("":Parameter"")]
        public void Bind_does_not_require_prefix(string parameterName)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT "" + parameterName;
                command.Parameters.AddWithValue(""Parameter"", ""harvest"");
                connection.Open();

                var result = command.ExecuteScalar();

                Assert.Equal(""harvest"", result);
            }
        }

        [Fact]
        public void Bind_throws_for_ambiguous_parameters()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Param, $Param"";
                command.Parameters.AddWithValue(""Param"", 1);
                connection.Open();

                var ex = Assert.Throws<InvalidOperationException>(() => command.ExecuteScalar());

                Assert.Equal(Resources.AmbiguousParameterName(""Param""), ex.Message);
            }
        }

        [Fact]
        public void Bind_with_prefixed_names()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand();
                command.CommandText = ""SELECT @Param, $Param, :Param"";
                command.Parameters.AddWithValue(""@Param"", 1);
                command.Parameters.AddWithValue(""$Param"", 2);
                command.Parameters.AddWithValue("":Param"", 3);
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    Assert.Equal(1, reader.GetFieldValue<int>(0));
                    Assert.Equal(2, reader.GetFieldValue<int>(1));
                    Assert.Equal(3, reader.GetFieldValue<int>(2));
                }
            }
        }

        [Fact]
        [UseCulture(""ar-SA"")]
        public void Bind_DateTime_with_Arabic_Culture()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Person(DateOfBirth datetime);"");

                var command = connection.CreateCommand();
                command.CommandText = ""INSERT INTO Person(DateOfBirth) VALUES (@DateOfBirth);"";
                var date = new DateTime(2018, 3, 25);
                command.Parameters.AddWithValue(""DateOfBirth"", date);
                Assert.Equal(1, command.ExecuteNonQuery());

                command.CommandText = ""SELECT DateOfBirth FROM Person;"";
                var result = command.ExecuteScalar()!;
                Assert.Equal(""2018-03-25 00:00:00"", (string)result);

                using (var reader = command.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    Assert.Equal(""2018-03-25 00:00:00"", reader.GetString(0));
                    Assert.Equal(date, reader.GetDateTime(0));
                }
            }
        }

        [Fact]
        [UseCulture(""ar-SA"")]
        public void Bind_DateTimeOffset_with_Arabic_Culture()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(date TEXT);"");

                var command = connection.CreateCommand();
                command.CommandText = ""INSERT INTO Test(date) VALUES (@date);"";
                var date = new DateTimeOffset(new DateTime(2018, 3, 25), new TimeSpan());
                command.Parameters.AddWithValue(""date"", date);
                Assert.Equal(1, command.ExecuteNonQuery());

                command.CommandText = ""SELECT date FROM Test;"";
                var result = command.ExecuteScalar()!;
                Assert.Equal(""2018-03-25 00:00:00+00:00"", (string)result);

                using (var reader = command.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    Assert.Equal(""2018-03-25 00:00:00+00:00"", reader.GetString(0));
                    Assert.Equal(date, reader.GetDateTimeOffset(0));
                }
            }
        }

        [Fact]
        public void Add_range_of_parameters_using_DbCommand_base_class()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                var command = connection.CreateCommand() as DbCommand;
                command.CommandText = ""SELECT @Value1, @Value2;"";

                var parameterValue1 = new SqliteParameter(""@Value1"", SqliteType.Text);
                parameterValue1.Value = ""ABCDE"";

                var parameterValue2 = new SqliteParameter(""@Value2"", SqliteType.Text);
                parameterValue2.Value = ""FGHIJ"";

                var parameters = new[] { parameterValue1, parameterValue2 };

                command.Parameters.AddRange(parameters);
                connection.Open();

                using (var reader = command.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    Assert.Equal(parameterValue1.Value, reader.GetString(0));
                    Assert.Equal(parameterValue2.Value, reader.GetString(1));
                }
            }
        }

        private enum MyEnum
        {
            One = 1
        }
    }",1,439 334 2000 123 91 2001 93 439 492 2002 40 41 123 490 2003 61 418 2004 40 648 44 1501 41 59 2005 46 2006 40 648 44 2003 46 2007 41 59 2005 46 2006 40 1501 44 2003 46 2008 41 59 125 91 2001 93 439 492 2009 40 41 123 490 2010 61 418 2011 40 648 44 2012 46 2013 44 1502 44 648 41 59 2014 46 2015 40 648 44 2010 46 2016 41 59 2014 46 2015 40 2012 46 2013 44 2010 46 2012 41 59 2014 46 2015 40 1502 44 2010 46 2017 41 59 2014 46 2015 40 648 44 2010 46 2018 41 59 125 91 2001 93 439 492 2019 40 41 123 490 2020 61 418 2021 40 41 59 2022 46 2023 40 2020 46 2024 41 59 125 91 2001 93 439 492 2025 40 41 123 490 2026 61 418 2027 123 2028 61 424 125 59 2029 46 2030 40 2026 46 2031 41 59 125 91 2001 93 439 492 2032 40 41 123 490 2033 61 418 2034 40 41 59 2035 46 2036 40 2033 46 2037 41 59 125 91 2001 93 439 492 2038 40 41 123 490 2039 61 418 2040 123 2041 61 424 125 59 2042 46 2043 40 2039 46 2044 41 59 125 91 2001 93 439 492 2045 40 41 123 2046 46 2047 40 2048 46 2049 44 418 2050 40 41 46 2048 41 59 125 91 2001 93 439 492 2051 40 41 123 490 2052 61 418 2053 40 41 59 490 2054 61 2055 46 2056 60 2057 62 40 40 41 619 2052 46 2058 61 45 1502 41 59 2055 46 2059 40 648 44 2054 46 2060 41 59 2055 46 2059 40 45 1502 44 2054 46 2061 41 59 125 91 2001 93 439 492 2062 40 41 123 2063 46 2064 40 2065 46 2066 44 418 2067 40 41 46 2065 41 59 125 91 2001 93 439 492 2068 40 41 123 2069 46 2070 40 2071 46 2072 44 418 2073 40 41 46 2074 41 59 125 91 2001 93 439 492 2075 40 41 123 490 2076 61 2077 46 2078 60 2079 62 40 40 41 619 418 2080 40 41 46 2081 61 2082 46 2083 41 59 2077 46 2084 40 2085 46 2086 40 2082 46 2083 41 44 2076 46 2087 41 59 125 91 2001 93 439 492 2088 40 41 123 490 2089 61 418 2090 123 2091 61 2091 46 2092 44 2093 61 2093 46 2094 125 59 2089 46 2095 40 41 59 2096 46 2097 40 2098 46 2099 44 2089 46 2098 41 59 2096 46 2097 40 2100 46 2101 44 2089 46 2100 41 59 125 91 2001 93 439 492 2102 40 41 123 490 2103 61 418 2104 123 2105 61 2105 46 2106 44 2107 61 2107 46 2108 125 59 2103 46 2109 40 41 59 2110 46 2111 40 2112 46 2113 44 2103 46 2112 41 59 2110 46 2111 40 2114 46 2115 44 2103 46 2114 41 59 125 91 2001 93 439 492 2116 40 41 123 489 40 490 2117 61 418 2118 40 648 41 41 123 490 2119 61 2117 46 2120 40 41 59 2119 46 2121 61 648 59 2119 46 2122 46 2123 40 418 2124 123 2125 61 1501 125 41 59 2117 46 2126 40 41 59 490 2127 61 2128 46 2129 60 2130 62 40 40 41 619 2119 46 2131 40 41 41 59 2128 46 2132 40 2133 46 2134 40 648 41 44 2127 46 2135 41 59 125 125 91 2001 93 439 492 2136 40 41 123 489 40 490 2137 61 418 2138 40 648 41 41 123 490 2139 61 2137 46 2140 40 41 59 2139 46 2141 61 648 59 2139 46 2142 46 2143 40 418 2144 123 2145 61 648 125 41 59 2137 46 2146 40 41 59 490 2147 61 2148 46 2149 60 2150 62 40 40 41 619 2139 46 2151 40 41 41 59 2148 46 2152 40 2153 46 2154 40 648 41 44 2147 46 2155 41 59 125 125 91 2001 93 439 492 2156 40 41 123 489 40 490 2157 61 418 2158 40 648 41 41 123 490 2159 61 2157 46 2160 40 41 59 2159 46 2161 61 648 59 2159 46 2162 46 2163 40 648 44 1501 41 59 2157 46 2164 40 41 59 2159 46 2165 40 41 59 125 125 91 2166 93 91 2167 40 473 44 1501 41 93 91 2167 40 40 326 41 1501 44 1501 41 93 91 2167 40 607 44 1503 44 2168 46 2169 41 93 91 2167 40 607 44 648 41 93 91 2167 40 1502 44 1502 41 93 91 2167 40 1502 44 1502 41 93 91 2167 40 1501 44 1501 41 93 91 2167 40 1501 44 1501 41 93 91 2167 40 40 451 41 1501 44 1501 41 93 91 2167 40 40 453 41 1501 44 1501 41 93 91 2167 40 648 44 648 41 93 91 2167 40 1501 44 1501 41 93 91 2167 40 1501 44 1501 41 93 91 2167 40 40 488 41 1501 44 1501 41 93 91 2167 40 648 44 648 41 93 91 2167 40 356 46 2170 44 356 46 2170 41 93 91 2167 40 356 46 2171 44 356 46 2171 41 93 91 2167 40 384 46 2170 44 356 46 2170 41 93 91 2167 40 384 46 2171 44 356 46 2171 41 93 439 492 2172 40 426 2173 44 426 2174 44 2168 63 2175 61 424 41 123 489 40 490 2176 61 418 2177 40 648 41 41 123 490 2178 61 2176 46 2179 40 41 59 2178 46 2180 61 648 59 490 2181 61 2178 46 2182 46 2183 40 648 44 2173 41 59 392 40 2175 46 2184 41 123 2181 46 2168 61 2175 46 2185 59 125 2176 46 2186 40 41 59 490 2187 61 2178 46 2188 40 41 59 2189 46 2190 40 2174 44 2187 41 59 125 125 91 2166 93 91 2167 40 356 46 2191 41 93 91 2167 40 384 46 2191 41 93 439 492 2192 40 426 2173 41 123 489 40 490 2193 61 418 2194 40 648 41 41 123 490 2195 61 2193 46 2196 40 41 59 2195 46 2197 61 648 59 2195 46 2198 46 2199 40 648 44 2173 41 59 2193 46 2200 40 41 59 490 2201 61 2202 46 2203 60 2204 62 40 40 41 619 2195 46 2205 40 41 41 59 2202 46 2206 40 2207 46 2208 44 2201 46 2209 41 59 125 125 91 2001 93 439 492 2210 40 41 123 490 2211 61 418 326 91 93 123 1504 44 1503 125 59 2172 40 2211 44 2211 41 59 125 91 2001 93 439 492 2212 40 41 619 2172 40 418 2213 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 44 648 41 59 91 2001 93 439 492 2214 40 41 619 2172 40 418 2213 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 44 1508 44 2168 46 2215 41 59 91 2001 93 439 492 2216 40 41 619 2172 40 418 2217 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 44 418 2218 40 45 1502 44 1500 44 1500 41 41 44 648 41 59 91 2001 93 439 492 2219 40 41 619 2172 40 418 2217 40 418 2213 40 1505 44 1502 44 1503 44 1503 44 1503 44 1503 41 41 44 1508 44 2168 46 2215 41 59 91 2001 93 439 492 2220 40 41 619 2172 40 418 2221 40 1505 44 1502 44 1503 41 44 648 41 59 91 2001 93 439 492 2222 40 41 619 2172 40 418 2221 40 1505 44 1502 44 1503 41 44 1508 44 2168 46 2215 41 59 91 2001 93 439 492 2223 40 41 619 2172 40 418 2224 40 1503 44 1502 44 1503 41 44 648 41 59 91 2001 93 439 492 2225 40 41 619 2172 40 418 2224 40 1503 44 1502 44 1503 44 1504 41 44 648 41 59 91 2001 93 439 492 2226 40 41 619 2172 40 418 2224 40 1503 44 1502 44 1503 41 44 1499 44 2168 46 2215 41 59 91 2001 93 439 492 2227 40 41 619 2172 40 2228 46 2229 44 2228 46 2229 41 59 91 2001 93 439 492 2230 40 41 619 2172 40 1502 44 648 41 59 91 2001 93 439 492 2231 40 41 619 2172 40 1502 44 648 41 59 91 2001 93 439 492 2232 40 41 619 2172 40 2233 46 2234 44 1501 41 59 91 2001 93 439 492 2235 40 41 619 2172 40 418 2236 40 648 41 44 418 326 91 93 123 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1503 44 1503 44 1504 44 1504 44 1504 44 1502 44 1504 125 44 2168 46 2237 41 59 91 2001 93 439 492 2238 40 41 619 2172 40 418 2236 40 648 41 44 648 41 59 91 2001 93 439 492 2239 40 41 619 2172 40 40 404 63 41 1501 44 1501 41 59 91 2001 93 439 492 2240 40 41 619 2172 40 418 2218 40 1503 44 1503 44 1503 41 44 648 41 59 91 2001 93 439 492 2241 40 41 619 2172 40 418 2218 40 1503 44 1503 44 1503 41 44 1499 44 2168 46 2215 41 59 91 2001 93 439 492 2242 40 41 123 489 40 490 2243 61 418 2244 40 648 41 41 123 490 2245 61 2243 46 2246 40 41 59 2245 46 2247 61 648 59 2245 46 2248 46 2249 40 648 44 418 426 40 41 41 59 2243 46 2250 40 41 59 490 2251 61 2252 46 2253 60 2254 62 40 40 41 619 2245 46 2255 40 41 41 59 2252 46 2256 40 2257 46 2258 40 478 40 426 41 41 44 2251 46 2259 41 59 125 125 91 2001 93 439 492 2260 40 41 123 489 40 490 2261 61 418 2262 40 648 41 41 123 490 2263 61 2261 46 2264 40 41 59 2263 46 2265 61 648 59 2263 46 2266 46 2267 40 648 44 648 41 59 2261 46 2268 40 41 59 490 2269 61 2263 46 2270 40 41 59 2271 46 2272 40 648 44 2269 41 59 125 125 91 2001 93 439 492 2273 40 41 123 489 40 490 2274 61 418 2275 40 648 41 41 123 490 2276 61 2274 46 2277 40 41 59 2276 46 2278 61 648 59 2276 46 2279 46 2280 40 648 44 648 41 46 2281 61 1502 59 2274 46 2282 40 41 59 490 2283 61 2276 46 2284 40 41 59 2285 46 2286 40 648 44 2283 41 59 125 125 91 2001 93 439 492 2287 40 41 123 489 40 490 2288 61 418 2289 40 648 41 41 123 490 2290 61 2288 46 2291 40 41 59 2290 46 2292 61 648 59 2290 46 2293 46 2294 40 648 44 648 41 46 2295 61 45 1501 59 2288 46 2296 40 41 59 490 2297 61 2290 46 2298 40 41 59 2299 46 2300 40 648 44 2297 41 59 125 125 91 2001 93 439 492 2301 40 41 123 489 40 490 2302 61 418 2303 40 648 41 41 123 490 2304 61 2302 46 2305 40 41 59 2304 46 2306 61 648 59 2304 46 2307 46 2308 40 648 44 418 326 91 93 123 1501 44 1502 44 1502 44 1502 44 1502 125 41 46 2309 61 1502 59 2302 46 2310 40 41 59 490 2311 61 2304 46 2312 40 41 59 2313 46 2314 40 418 326 91 93 123 1501 44 1502 44 1502 125 44 2311 41 59 125 125 91 2001 93 439 492 2315 40 41 123 489 40 490 2316 61 418 2317 40 648 41 41 123 490 2318 61 2316 46 2319 40 41 59 2318 46 2320 61 648 59 2318 46 2321 46 2322 40 648 44 418 326 91 93 123 1504 44 1503 125 41 46 2323 61 45 1501 59 2316 46 2324 40 41 59 490 2325 61 2318 46 2326 40 41 59 2327 46 2328 40 418 326 91 93 123 1504 44 1503 125 44 2325 41 59 125 125 91 2166 93 91 2167 40 648 41 93 91 2167 40 648 41 93 91 2167 40 648 41 93 439 492 2329 40 461 2330 41 123 489 40 490 2331 61 418 2332 40 648 41 41 123 490 2333 61 2331 46 2334 40 41 59 2333 46 2335 61 648 43 2330 59 2333 46 2336 46 2337 40 648 44 648 41 59 2331 46 2338 40 41 59 490 2339 61 2333 46 2340 40 41 59 2341 46 2342 40 648 44 2339 41 59 125 125 91 2001 93 439 492 2343 40 41 123 489 40 490 2344 61 418 2345 40 648 41 41 123 490 2346 61 2344 46 2347 40 41 59 2346 46 2348 61 648 59 2346 46 2349 46 2350 40 648 44 1501 41 59 2344 46 2351 40 41 59 490 2352 61 2353 46 2354 60 2355 62 40 40 41 619 2346 46 2356 40 41 41 59 2353 46 2357 40 2358 46 2359 40 648 41 44 2352 46 2360 41 59 125 125 91 2001 93 439 492 2361 40 41 123 489 40 490 2362 61 418 2363 40 648 41 41 123 490 2364 61 2362 46 2365 40 41 59 2364 46 2366 61 648 59 2364 46 2367 46 2368 40 648 44 1501 41 59 2364 46 2367 46 2368 40 648 44 1502 41 59 2364 46 2367 46 2368 40 648 44 1502 41 59 2362 46 2369 40 41 59 489 40 490 2370 61 2364 46 2371 40 41 41 123 2372 46 304 40 2370 46 2373 40 41 41 59 2372 46 2374 40 1501 44 2370 46 2375 60 404 62 40 1500 41 41 59 2372 46 2374 40 1502 44 2370 46 2375 60 404 62 40 1501 41 41 59 2372 46 2374 40 1502 44 2370 46 2375 60 404 62 40 1502 41 41 59 125 125 125 91 2001 93 91 2376 40 648 41 93 439 492 2377 40 41 123 489 40 490 2378 61 418 2379 40 648 41 41 123 2378 46 2380 40 41 59 2378 46 2381 40 648 41 59 490 2382 61 2378 46 2383 40 41 59 2382 46 2384 61 648 59 490 2385 61 418 2213 40 1505 44 1502 44 1503 41 59 2382 46 2386 46 2387 40 648 44 2385 41 59 2388 46 2389 40 1501 44 2382 46 2381 40 41 41 59 2382 46 2384 61 648 59 490 2390 61 2382 46 2391 40 41 33 59 2388 46 2389 40 648 44 40 461 41 2390 41 59 489 40 490 2392 61 2382 46 2393 40 41 41 123 2388 46 304 40 2392 46 2394 40 41 41 59 2388 46 2389 40 648 44 2392 46 2395 40 1500 41 41 59 2388 46 2389 40 2385 44 2392 46 2396 40 1500 41 41 59 125 125 125 91 2001 93 91 2376 40 648 41 93 439 492 2397 40 41 123 489 40 490 2398 61 418 2399 40 648 41 41 123 2398 46 2400 40 41 59 2398 46 2401 40 648 41 59 490 2402 61 2398 46 2403 40 41 59 2402 46 2404 61 648 59 490 2405 61 418 2217 40 418 2213 40 1505 44 1502 44 1503 41 44 418 2218 40 41 41 59 2402 46 2406 46 2407 40 648 44 2405 41 59 2408 46 2409 40 1501 44 2402 46 2401 40 41 41 59 2402 46 2404 61 648 59 490 2410 61 2402 46 2411 40 41 33 59 2408 46 2409 40 648 44 40 461 41 2410 41 59 489 40 490 2412 61 2402 46 2413 40 41 41 123 2408 46 304 40 2412 46 2414 40 41 41 59 2408 46 2409 40 648 44 2412 46 2415 40 1500 41 41 59 2408 46 2409 40 2405 44 2412 46 2416 40 1500 41 41 59 125 125 125 91 2001 93 439 492 2417 40 41 123 489 40 490 2418 61 418 2419 40 648 41 41 123 490 2420 61 2418 46 2421 40 41 311 2422 59 2420 46 2423 61 648 59 490 2424 61 418 2425 40 648 44 2168 46 2426 41 59 2424 46 2229 61 648 59 490 2427 61 418 2425 40 648 44 2168 46 2426 41 59 2427 46 2229 61 648 59 490 2428 61 418 91 93 123 2424 44 2427 125 59 2420 46 2429 46 2430 40 2428 41 59 2418 46 2431 40 41 59 489 40 490 2432 61 2420 46 2433 40 41 41 123 2434 46 304 40 2432 46 2435 40 41 41 59 2434 46 2436 40 2424 46 2229 44 2432 46 2437 40 1500 41 41 59 2434 46 2436 40 2427 46 2229 44 2432 46 2437 40 1501 41 41 59 125 125 125 437 370 2233 123 2234 61 1501 125 125 
76320,C#,"    public class Season : Folder, IHasSeries, IHasLookupInfo<SeasonInfo>
    {
        [JsonIgnore]
        public override bool SupportsAddingToPlaylist => true;

        [JsonIgnore]
        public override bool IsPreSorted => true;

        [JsonIgnore]
        public override bool SupportsDateLastMediaAdded => false;

        [JsonIgnore]
        public override bool SupportsPeople => true;

        [JsonIgnore]
        public override bool SupportsInheritedParentImages => true;

        [JsonIgnore]
        public override Guid DisplayParentId => SeriesId;

        /// <summary>
        /// Gets this Episode's Series Instance.
        /// </summary>
        /// <value>The series.</value>
        [JsonIgnore]
        public Series Series
        {
            get
            {
                var seriesId = SeriesId;
                if (seriesId == Guid.Empty)
                {
                    seriesId = FindSeriesId();
                }

                return seriesId == Guid.Empty ? null : (LibraryManager.GetItemById(seriesId) as Series);
            }
        }

        [JsonIgnore]
        public string SeriesPath
        {
            get
            {
                var series = Series;

                if (series != null)
                {
                    return series.Path;
                }

                return System.IO.Path.GetDirectoryName(Path);
            }
        }

        [JsonIgnore]
        public string SeriesPresentationUniqueKey { get; set; }

        [JsonIgnore]
        public string SeriesName { get; set; }

        [JsonIgnore]
        public Guid SeriesId { get; set; }

        public override double GetDefaultPrimaryImageAspectRatio()
        {
            double value = 2;
            value /= 3;

            return value;
        }

        public string FindSeriesSortName()
        {
            var series = Series;
            return series == null ? SeriesName : series.SortName;
        }

        public override List<string> GetUserDataKeys()
        {
            var list = base.GetUserDataKeys();

            var series = Series;
            if (series != null)
            {
                var newList = series.GetUserDataKeys();
                var suffix = (IndexNumber ?? 0).ToString(""000"", CultureInfo.InvariantCulture);
                for (int i = 0; i < newList.Count; i++)
                {
                    newList[i] = newList[i] + suffix;
                }

                newList.AddRange(list);
                list = newList;
            }

            return list;
        }

        public override int GetChildCount(User user)
        {
            var result = GetChildren(user, true).Count;

            return result;
        }

        public override string CreatePresentationUniqueKey()
        {
            if (IndexNumber.HasValue)
            {
                var series = Series;
                if (series != null)
                {
                    return series.PresentationUniqueKey + ""-"" + (IndexNumber ?? 0).ToString(""000"", CultureInfo.InvariantCulture);
                }
            }

            return base.CreatePresentationUniqueKey();
        }

        /// <summary>
        /// Creates the name of the sort.
        /// </summary>
        /// <returns>System.String.</returns>
        protected override string CreateSortName()
        {
            return IndexNumber != null ? IndexNumber.Value.ToString(""0000"", CultureInfo.InvariantCulture) : Name;
        }

        protected override QueryResult<BaseItem> GetItemsInternal(InternalItemsQuery query)
        {
            if (query.User == null)
            {
                return base.GetItemsInternal(query);
            }

            var user = query.User;

            Func<BaseItem, bool> filter = i => UserViewBuilder.Filter(i, user, query, UserDataManager, LibraryManager);

            var items = GetEpisodes(user, query.DtoOptions).Where(filter);

            return PostFilterAndSort(items, query, false);
        }

        /// <summary>
        /// Gets the episodes.
        /// </summary>
        /// <param name=""user"">The user.</param>
        /// <param name=""options"">The options to use.</param>
        /// <returns>Set of episodes.</returns>
        public List<BaseItem> GetEpisodes(User user, DtoOptions options)
        {
            return GetEpisodes(Series, user, options);
        }

        public List<BaseItem> GetEpisodes(Series series, User user, DtoOptions options)
        {
            return GetEpisodes(series, user, null, options);
        }

        public List<BaseItem> GetEpisodes(Series series, User user, IEnumerable<Episode> allSeriesEpisodes, DtoOptions options)
        {
            return series.GetSeasonEpisodes(this, user, allSeriesEpisodes, options);
        }

        public List<BaseItem> GetEpisodes()
        {
            return Series.GetSeasonEpisodes(this, null, null, new DtoOptions(true));
        }

        public override List<BaseItem> GetChildren(User user, bool includeLinkedChildren, InternalItemsQuery query)
        {
            return GetEpisodes(user, new DtoOptions(true));
        }

        protected override bool GetBlockUnratedValue(User user)
        {
            // Don't block. Let either the entire series rating or episode rating determine it
            return false;
        }

        public override UnratedItem GetBlockUnratedType()
        {
            return UnratedItem.Series;
        }

        public string FindSeriesPresentationUniqueKey()
        {
            var series = Series;
            return series == null ? null : series.PresentationUniqueKey;
        }

        public string FindSeriesName()
        {
            var series = Series;
            return series == null ? SeriesName : series.Name;
        }

        public Guid FindSeriesId()
        {
            var series = FindParent<Series>();
            return series?.Id ?? Guid.Empty;
        }

        /// <summary>
        /// Gets the lookup information.
        /// </summary>
        /// <returns>SeasonInfo.</returns>
        public SeasonInfo GetLookupInfo()
        {
            var id = GetItemLookupInfo<SeasonInfo>();

            var series = Series;

            if (series != null)
            {
                id.SeriesProviderIds = series.ProviderIds;
            }

            return id;
        }

        /// <summary>
        /// This is called before any metadata refresh and returns true or false indicating if changes were made.
        /// </summary>
        /// <param name=""replaceAllMetadata""><c>true</c> to replace metdata, <c>false</c> to not.</param>
        /// <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        public override bool BeforeMetadataRefresh(bool replaceAllMetadata)
        {
            var hasChanges = base.BeforeMetadataRefresh(replaceAllMetadata);

            if (!IndexNumber.HasValue && !string.IsNullOrEmpty(Path))
            {
                IndexNumber ??= LibraryManager.GetSeasonNumberFromPath(Path);

                // If a change was made record it
                if (IndexNumber.HasValue)
                {
                    hasChanges = true;
                }
            }

            return hasChanges;
        }
    }",1,439 334 2000 58 2001 44 2002 44 2003 60 2004 62 123 91 2005 93 439 431 323 2006 619 473 59 91 2005 93 439 431 323 2007 619 473 59 91 2005 93 439 431 323 2008 619 380 59 91 2005 93 439 431 323 2009 619 473 59 91 2005 93 439 431 323 2010 619 473 59 91 2005 93 439 431 2011 2012 619 2013 59 612 91 2005 93 439 2014 2014 123 2015 123 490 2016 61 2013 59 392 40 2016 614 2011 46 2017 41 123 2016 61 2018 40 41 59 125 450 2016 614 2011 46 2017 63 424 58 40 2019 46 2020 40 2016 41 311 2014 41 59 125 125 91 2005 93 439 461 2021 123 2022 123 490 2023 61 2014 59 392 40 2023 631 424 41 123 450 2023 46 2024 59 125 450 2025 46 2026 46 2027 46 2028 40 2027 41 59 125 125 91 2005 93 439 461 2029 123 2030 59 2031 59 125 91 2005 93 439 461 2032 123 2033 59 2034 59 125 91 2005 93 439 2011 2013 123 2035 59 2036 59 125 439 431 356 2037 40 41 123 356 2038 61 1502 59 2038 609 1502 59 450 2038 59 125 439 461 2039 40 41 123 490 2040 61 2014 59 450 2040 614 424 63 2032 58 2040 46 2041 59 125 439 431 2042 60 461 62 2043 40 41 123 490 411 61 320 46 2043 40 41 59 490 2044 61 2014 59 392 40 2044 631 424 41 123 490 2045 61 2044 46 2043 40 41 59 490 2046 61 40 2047 633 1500 41 46 2048 40 648 44 2049 46 2050 41 59 385 40 404 2051 61 1500 59 2051 60 2045 46 2052 59 2051 637 41 123 2045 91 2051 93 61 2045 91 2051 93 43 2046 59 125 2045 46 2053 40 411 41 59 411 61 2045 59 125 450 411 59 125 439 431 404 2054 40 2055 2056 41 123 490 2057 61 2058 40 2056 44 473 41 46 2059 59 450 2057 59 125 439 431 461 2060 40 41 123 392 40 2061 46 2062 41 123 490 2063 61 2014 59 392 40 2063 631 424 41 123 450 2063 46 2064 43 648 43 40 2061 633 1500 41 46 2065 40 648 44 2066 46 2067 41 59 125 125 450 320 46 2060 40 41 59 125 612 438 431 461 2068 40 41 123 450 2069 631 424 63 2069 46 2070 46 2071 40 648 44 2072 46 2073 41 58 2074 59 125 438 431 2075 60 2076 62 2077 40 2078 2079 41 123 392 40 2079 46 2055 614 424 41 123 450 320 46 2077 40 2079 41 59 125 490 2056 61 2079 46 2055 59 2080 60 2076 44 323 62 2081 61 2082 619 2083 46 2084 40 2082 44 2056 44 2079 44 2085 44 2086 41 59 490 2087 61 2088 40 2056 44 2079 46 2089 41 46 2090 40 2081 41 59 450 2091 40 2087 44 2079 44 380 41 59 125 612 439 2042 60 2076 62 2092 40 2055 2056 44 2093 2094 41 123 450 2092 40 2014 44 2056 44 2094 41 59 125 439 2042 60 2076 62 2092 40 2014 2095 44 2055 2056 44 2093 2094 41 123 450 2092 40 2095 44 2056 44 424 44 2094 41 59 125 439 2042 60 2076 62 2092 40 2014 2095 44 2055 2056 44 2096 60 2097 62 2098 44 2093 2094 41 123 450 2095 46 2099 40 467 44 2056 44 2098 44 2094 41 59 125 439 2042 60 2076 62 2092 40 41 123 450 2014 46 2100 40 467 44 424 44 424 44 418 2093 40 473 41 41 59 125 439 431 2042 60 2076 62 2101 40 2055 2056 44 323 2102 44 2078 2079 41 123 450 2092 40 2056 44 418 2093 40 473 41 41 59 125 438 431 323 2103 40 2055 2056 41 123 621 450 380 59 125 439 431 2104 2105 40 41 123 450 2104 46 2014 59 125 439 461 2106 40 41 123 490 2095 61 2014 59 450 2095 614 424 63 424 58 2095 46 2107 59 125 439 461 2108 40 41 123 490 2095 61 2014 59 450 2095 614 424 63 2032 58 2095 46 2109 59 125 439 2011 2110 40 41 123 490 2095 61 2111 60 2014 62 40 41 59 450 2095 634 2112 633 2011 46 2113 59 125 612 439 2004 2114 40 41 123 490 2115 61 2116 60 2004 62 40 41 59 490 2095 61 2014 59 392 40 2095 631 424 41 123 2115 46 2117 61 2095 46 2118 59 125 450 2115 59 125 612 439 431 323 2119 40 323 2120 41 123 490 2121 61 320 46 2119 40 2120 41 59 392 40 33 2122 46 2123 605 33 461 46 2124 40 2125 41 41 123 2122 633 61 2126 46 2127 40 2125 41 59 621 392 40 2122 46 2123 41 123 2121 61 473 59 125 125 450 2121 59 125 125 
68616,C#,"public class SqlServerUpdateSqlGenerator : UpdateSqlGenerator, ISqlServerUpdateSqlGenerator
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public SqlServerUpdateSqlGenerator(
        UpdateSqlGeneratorDependencies dependencies)
        : base(dependencies)
    {
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ResultSetMapping AppendBulkInsertOperation(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IReadOnlyModificationCommand> modificationCommands,
        int commandPosition)
    {
        var table = StoreObjectIdentifier.Table(modificationCommands[0].TableName, modificationCommands[0].Schema);
        if (modificationCommands.Count == 1)
        {
            return modificationCommands[0].ColumnModifications.All(
                o =>
                    !o.IsKey
                    || !o.IsRead
                    || o.Property?.GetValueGenerationStrategy(table) == SqlServerValueGenerationStrategy.IdentityColumn)
                ? AppendInsertOperation(commandStringBuilder, modificationCommands[0], commandPosition)
                : AppendInsertOperationWithServerKeys(
                    commandStringBuilder,
                    modificationCommands[0],
                    modificationCommands[0].ColumnModifications.Where(o => o.IsKey).ToList(),
                    modificationCommands[0].ColumnModifications.Where(o => o.IsRead).ToList(),
                    commandPosition);
        }

        var readOperations = modificationCommands[0].ColumnModifications.Where(o => o.IsRead).ToList();
        var writeOperations = modificationCommands[0].ColumnModifications.Where(o => o.IsWrite).ToList();
        var keyOperations = modificationCommands[0].ColumnModifications.Where(o => o.IsKey).ToList();

        var defaultValuesOnly = writeOperations.Count == 0;
        var nonIdentityOperations = modificationCommands[0].ColumnModifications
            .Where(o => o.Property?.GetValueGenerationStrategy(table) != SqlServerValueGenerationStrategy.IdentityColumn)
            .ToList();

        if (defaultValuesOnly)
        {
            if (nonIdentityOperations.Count == 0
                || readOperations.Count == 0)
            {
                foreach (var modification in modificationCommands)
                {
                    AppendInsertOperation(commandStringBuilder, modification, commandPosition);
                }

                return readOperations.Count == 0
                    ? ResultSetMapping.NoResultSet
                    : ResultSetMapping.LastInResultSet;
            }

            if (nonIdentityOperations.Count > 1)
            {
                nonIdentityOperations.RemoveRange(1, nonIdentityOperations.Count - 1);
            }
        }

        if (readOperations.Count == 0)
        {
            return AppendBulkInsertWithoutServerValues(commandStringBuilder, modificationCommands, writeOperations);
        }

        if (defaultValuesOnly)
        {
            return AppendBulkInsertWithServerValuesOnly(
                commandStringBuilder, modificationCommands, commandPosition, nonIdentityOperations, keyOperations, readOperations);
        }

        if (modificationCommands[0].Entries.SelectMany(e => e.EntityType.GetAllBaseTypesInclusive())
            .Any(e => e.IsMemoryOptimized()))
        {
            if (!nonIdentityOperations.Any(o => o.IsRead && o.IsKey))
            {
                foreach (var modification in modificationCommands)
                {
                    AppendInsertOperation(commandStringBuilder, modification, commandPosition++);
                }
            }
            else
            {
                foreach (var modification in modificationCommands)
                {
                    AppendInsertOperationWithServerKeys(
                        commandStringBuilder, modification, keyOperations, readOperations, commandPosition++);
                }
            }

            return ResultSetMapping.LastInResultSet;
        }

        return AppendBulkInsertWithServerValues(
            commandStringBuilder, modificationCommands, commandPosition, writeOperations, keyOperations, readOperations);
    }

    private ResultSetMapping AppendBulkInsertWithoutServerValues(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IReadOnlyModificationCommand> modificationCommands,
        List<IColumnModification> writeOperations)
    {
        Check.DebugAssert(writeOperations.Count > 0, $""writeOperations.Count is {writeOperations.Count}"");

        var name = modificationCommands[0].TableName;
        var schema = modificationCommands[0].Schema;

        AppendInsertCommandHeader(commandStringBuilder, name, schema, writeOperations);
        AppendValuesHeader(commandStringBuilder, writeOperations);
        AppendValues(commandStringBuilder, name, schema, writeOperations);
        for (var i = 1; i < modificationCommands.Count; i++)
        {
            commandStringBuilder.AppendLine("","");
            AppendValues(
                commandStringBuilder, name, schema, modificationCommands[i].ColumnModifications.Where(o => o.IsWrite).ToList());
        }

        commandStringBuilder.AppendLine(SqlGenerationHelper.StatementTerminator);

        return ResultSetMapping.NoResultSet;
    }

    private const string InsertedTableBaseName = ""@inserted"";
    private const string ToInsertTableAlias = ""i"";
    private const string PositionColumnName = ""_Position"";
    private const string PositionColumnDeclaration = ""["" + PositionColumnName + ""] [int]"";
    private const string FullPositionColumnName = ToInsertTableAlias + ""."" + PositionColumnName;

    private ResultSetMapping AppendBulkInsertWithServerValues(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IReadOnlyModificationCommand> modificationCommands,
        int commandPosition,
        List<IColumnModification> writeOperations,
        List<IColumnModification> keyOperations,
        List<IColumnModification> readOperations)
    {
        AppendDeclareTable(
            commandStringBuilder,
            InsertedTableBaseName,
            commandPosition,
            keyOperations,
            PositionColumnDeclaration);

        var name = modificationCommands[0].TableName;
        var schema = modificationCommands[0].Schema;

        AppendMergeCommandHeader(
            commandStringBuilder,
            name,
            schema,
            ToInsertTableAlias,
            modificationCommands,
            writeOperations,
            PositionColumnName);
        AppendOutputClause(
            commandStringBuilder,
            keyOperations,
            InsertedTableBaseName,
            commandPosition,
            FullPositionColumnName);
        commandStringBuilder.AppendLine(SqlGenerationHelper.StatementTerminator);

        AppendSelectCommand(
            commandStringBuilder, readOperations, keyOperations, InsertedTableBaseName, commandPosition, name, schema,
            orderColumn: PositionColumnName);

        return ResultSetMapping.NotLastInResultSet;
    }

    private ResultSetMapping AppendBulkInsertWithServerValuesOnly(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IReadOnlyModificationCommand> modificationCommands,
        int commandPosition,
        List<IColumnModification> nonIdentityOperations,
        List<IColumnModification> keyOperations,
        List<IColumnModification> readOperations)
    {
        AppendDeclareTable(commandStringBuilder, InsertedTableBaseName, commandPosition, keyOperations);

        var name = modificationCommands[0].TableName;
        var schema = modificationCommands[0].Schema;
        AppendInsertCommandHeader(commandStringBuilder, name, schema, nonIdentityOperations);
        AppendOutputClause(commandStringBuilder, keyOperations, InsertedTableBaseName, commandPosition);
        AppendValuesHeader(commandStringBuilder, nonIdentityOperations);
        AppendValues(commandStringBuilder, name, schema, nonIdentityOperations);
        for (var i = 1; i < modificationCommands.Count; i++)
        {
            commandStringBuilder.AppendLine("","");
            AppendValues(commandStringBuilder, name, schema, nonIdentityOperations);
        }

        commandStringBuilder.Append(SqlGenerationHelper.StatementTerminator);

        AppendSelectCommand(commandStringBuilder, readOperations, keyOperations, InsertedTableBaseName, commandPosition, name, schema);

        return ResultSetMapping.NotLastInResultSet;
    }

    private void AppendMergeCommandHeader(
        StringBuilder commandStringBuilder,
        string name,
        string? schema,
        string toInsertTableAlias,
        IReadOnlyList<IReadOnlyModificationCommand> modificationCommands,
        IReadOnlyList<IColumnModification> writeOperations,
        string? additionalColumns = null)
    {
        commandStringBuilder.Append(""MERGE "");
        SqlGenerationHelper.DelimitIdentifier(commandStringBuilder, name, schema);

        commandStringBuilder
            .Append("" USING ("");

        AppendValuesHeader(commandStringBuilder, writeOperations);
        AppendValues(commandStringBuilder, writeOperations, ""0"");
        for (var i = 1; i < modificationCommands.Count; i++)
        {
            commandStringBuilder.AppendLine("","");
            AppendValues(
                commandStringBuilder,
                modificationCommands[i].ColumnModifications.Where(o => o.IsWrite).ToList(),
                i.ToString(CultureInfo.InvariantCulture));
        }

        commandStringBuilder
            .Append("") AS "").Append(toInsertTableAlias)
            .Append("" ("")
            .AppendJoin(
                writeOperations,
                SqlGenerationHelper,
                (sb, o, helper) => helper.DelimitIdentifier(sb, o.ColumnName));
        if (additionalColumns != null)
        {
            commandStringBuilder
                .Append("", "")
                .Append(additionalColumns);
        }

        commandStringBuilder
            .Append(')')
            .AppendLine("" ON 1=0"")
            .AppendLine(""WHEN NOT MATCHED THEN"");

        commandStringBuilder
            .Append(""INSERT "")
            .Append('(')
            .AppendJoin(
                writeOperations,
                SqlGenerationHelper,
                (sb, o, helper) => helper.DelimitIdentifier(sb, o.ColumnName))
            .Append(')');

        AppendValuesHeader(commandStringBuilder, writeOperations);
        commandStringBuilder
            .Append('(')
            .AppendJoin(
                writeOperations,
                (toInsertTableAlias, SqlGenerationHelper),
                static (sb, o, state) =>
                {
                    var (alias, helper) = state;
                    sb.Append(alias).Append('.');
                    helper.DelimitIdentifier(sb, o.ColumnName);
                })
            .Append(')');
    }

    private void AppendValues(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IColumnModification> operations,
        string additionalLiteral)
    {
        if (operations.Count > 0)
        {
            commandStringBuilder
                .Append('(')
                .AppendJoin(
                    operations,
                    SqlGenerationHelper,
                    (sb, o, helper) =>
                    {
                        if (o.IsWrite)
                        {
                            helper.GenerateParameterName(sb, o.ParameterName!);
                        }
                        else
                        {
                            sb.Append(""DEFAULT"");
                        }
                    })
                .Append("", "")
                .Append(additionalLiteral)
                .Append(')');
        }
    }

    private void AppendDeclareTable(
        StringBuilder commandStringBuilder,
        string name,
        int index,
        IReadOnlyList<IColumnModification> operations,
        string? additionalColumns = null)
    {
        commandStringBuilder
            .Append(""DECLARE "")
            .Append(name)
            .Append(index)
            .Append("" TABLE ("")
            .AppendJoin(
                operations,
                this,
                (sb, o, generator) =>
                {
                    generator.SqlGenerationHelper.DelimitIdentifier(sb, o.ColumnName);
                    sb.Append(' ').Append(GetTypeNameForCopy(o.Property!));
                });

        if (additionalColumns != null)
        {
            commandStringBuilder
                .Append("", "")
                .Append(additionalColumns);
        }

        commandStringBuilder
            .Append(')')
            .AppendLine(SqlGenerationHelper.StatementTerminator);
    }

    private static string GetTypeNameForCopy(IProperty property)
    {
        var typeName = property.GetColumnType();

        return property.ClrType == typeof(byte[])
            && (typeName.Equals(""rowversion"", StringComparison.OrdinalIgnoreCase)
                || typeName.Equals(""timestamp"", StringComparison.OrdinalIgnoreCase))
                ? property.IsNullable ? ""varbinary(8)"" : ""binary(8)""
                : typeName;
    }

    // ReSharper disable once ParameterTypeCanBeEnumerable.Local
    private void AppendOutputClause(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IColumnModification> operations,
        string tableName,
        int tableIndex,
        string? additionalColumns = null)
    {
        commandStringBuilder
            .AppendLine()
            .Append(""OUTPUT "")
            .AppendJoin(
                operations,
                SqlGenerationHelper,
                (sb, o, helper) =>
                {
                    sb.Append(""INSERTED."");
                    helper.DelimitIdentifier(sb, o.ColumnName);
                });

        if (additionalColumns != null)
        {
            commandStringBuilder
                .Append("", "").Append(additionalColumns);
        }

        commandStringBuilder.AppendLine()
            .Append(""INTO "").Append(tableName).Append(tableIndex);
    }

    private ResultSetMapping AppendInsertOperationWithServerKeys(
        StringBuilder commandStringBuilder,
        IReadOnlyModificationCommand command,
        IReadOnlyList<IColumnModification> keyOperations,
        IReadOnlyList<IColumnModification> readOperations,
        int commandPosition)
    {
        var name = command.TableName;
        var schema = command.Schema;
        var operations = command.ColumnModifications;

        var writeOperations = operations.Where(o => o.IsWrite).ToList();

        AppendDeclareTable(commandStringBuilder, InsertedTableBaseName, commandPosition, keyOperations);

        AppendInsertCommandHeader(commandStringBuilder, name, schema, writeOperations);
        AppendOutputClause(commandStringBuilder, keyOperations, InsertedTableBaseName, commandPosition);
        AppendValuesHeader(commandStringBuilder, writeOperations);
        AppendValues(commandStringBuilder, name, schema, writeOperations);
        commandStringBuilder.Append(SqlGenerationHelper.StatementTerminator);

        return AppendSelectCommand(
            commandStringBuilder, readOperations, keyOperations, InsertedTableBaseName, commandPosition, name, schema);
    }

    private ResultSetMapping AppendSelectCommand(
        StringBuilder commandStringBuilder,
        IReadOnlyList<IColumnModification> readOperations,
        IReadOnlyList<IColumnModification> keyOperations,
        string insertedTableName,
        int insertedTableIndex,
        string tableName,
        string? schema,
        string? orderColumn = null)
    {
        if (readOperations.SequenceEqual(keyOperations))
        {
            commandStringBuilder
                .AppendLine()
                .Append(""SELECT "")
                .AppendJoin(
                    readOperations,
                    SqlGenerationHelper,
                    (sb, o, helper) => helper.DelimitIdentifier(sb, o.ColumnName, ""i""))
                .Append("" FROM "")
                .Append(insertedTableName).Append(insertedTableIndex).Append("" i"");
        }
        else
        {
            commandStringBuilder
                .AppendLine()
                .Append(""SELECT "")
                .AppendJoin(
                    readOperations,
                    SqlGenerationHelper,
                    (sb, o, helper) => helper.DelimitIdentifier(sb, o.ColumnName, ""t""))
                .Append("" FROM "");
            SqlGenerationHelper.DelimitIdentifier(commandStringBuilder, tableName, schema);
            commandStringBuilder
                .AppendLine("" t"")
                .Append(""INNER JOIN "")
                .Append(insertedTableName).Append(insertedTableIndex)
                .Append("" i"")
                .Append("" ON "")
                .AppendJoin(
                    keyOperations, (sb, c) =>
                    {
                        sb.Append('(');
                        SqlGenerationHelper.DelimitIdentifier(sb, c.ColumnName, ""t"");
                        sb.Append("" = "");
                        SqlGenerationHelper.DelimitIdentifier(sb, c.ColumnName, ""i"");
                        sb.Append(')');
                    }, "" AND "");
        }

        if (orderColumn != null)
        {
            commandStringBuilder
                .AppendLine()
                .Append(""ORDER BY "");
            SqlGenerationHelper.DelimitIdentifier(commandStringBuilder, orderColumn, ""i"");
        }

        commandStringBuilder
            .AppendLine(SqlGenerationHelper.StatementTerminator)
            .AppendLine();

        return ResultSetMapping.LastInResultSet;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override ResultSetMapping AppendSelectAffectedCountCommand(
        StringBuilder commandStringBuilder,
        string name,
        string? schema,
        int commandPosition)
    {
        commandStringBuilder
            .Append(""SELECT @@ROWCOUNT"")
            .AppendLine(SqlGenerationHelper.StatementTerminator)
            .AppendLine();

        return ResultSetMapping.LastInResultSet;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override void AppendBatchHeader(StringBuilder commandStringBuilder)
        => commandStringBuilder
            .Append(""SET NOCOUNT ON"")
            .AppendLine(SqlGenerationHelper.StatementTerminator);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, IColumnModification columnModification)
    {
        SqlGenerationHelper.DelimitIdentifier(commandStringBuilder, columnModification.ColumnName);
        commandStringBuilder.Append("" = "");

        commandStringBuilder.Append(""scope_identity()"");
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected)
        => commandStringBuilder
            .Append(""@@ROWCOUNT = "")
            .Append(expectedRowsAffected.ToString(CultureInfo.InvariantCulture));
}",1,439 334 2000 58 2001 44 2002 123 612 439 2000 40 2003 2004 41 58 320 40 2004 41 123 125 612 439 491 2005 2006 40 2007 2008 44 2009 60 2010 62 2011 44 404 2012 41 123 490 2013 61 2014 46 2015 40 2011 91 1500 93 46 2016 44 2011 91 1500 93 46 2017 41 59 392 40 2011 46 2018 614 1501 41 123 450 2011 91 1500 93 46 2019 46 2020 40 2021 619 33 2021 46 2022 606 33 2021 46 2023 606 2021 46 2024 634 2025 40 2013 41 614 2026 46 2027 41 63 2028 40 2008 44 2011 91 1500 93 44 2012 41 58 2029 40 2008 44 2011 91 1500 93 44 2011 91 1500 93 46 2019 46 2030 40 2021 619 2021 46 2022 41 46 2031 40 41 44 2011 91 1500 93 46 2019 46 2030 40 2021 619 2021 46 2023 41 46 2031 40 41 44 2012 41 59 125 490 2032 61 2011 91 1500 93 46 2033 46 2034 40 2035 619 2035 46 2036 41 46 2037 40 41 59 490 2038 61 2011 91 1500 93 46 2033 46 2034 40 2035 619 2035 46 2039 41 46 2037 40 41 59 490 2040 61 2011 91 1500 93 46 2033 46 2034 40 2035 619 2035 46 2041 41 46 2037 40 41 59 490 2042 61 2038 46 2018 614 1500 59 490 2043 61 2011 91 1500 93 46 2033 46 2034 40 2035 619 2035 46 2044 634 2045 40 2013 41 631 2046 46 2047 41 46 2037 40 41 59 392 40 2042 41 123 392 40 2043 46 2018 614 1500 606 2032 46 2018 614 1500 41 123 386 40 490 2048 398 2011 41 123 2049 40 2008 44 2048 44 2012 41 59 125 450 2032 46 2018 614 1500 63 2005 46 2050 58 2005 46 2051 59 125 392 40 2043 46 2018 62 1501 41 123 2043 46 2052 40 1501 44 2043 46 2018 45 1501 41 59 125 125 392 40 2032 46 2018 614 1500 41 123 450 2053 40 2008 44 2011 44 2038 41 59 125 392 40 2042 41 123 450 2054 40 2008 44 2011 44 2012 44 2043 44 2040 44 2032 41 59 125 392 40 2011 91 1500 93 46 2055 46 2056 40 2057 619 2057 46 2058 46 2059 40 41 41 46 2060 40 2057 619 2057 46 2061 40 41 41 41 123 392 40 33 2043 46 2060 40 2035 619 2035 46 2036 605 2035 46 2041 41 41 123 386 40 490 2062 398 2011 41 123 2063 40 2008 44 2062 44 2012 637 41 59 125 125 360 123 386 40 490 2064 398 2011 41 123 2065 40 2008 44 2064 44 2040 44 2032 44 2012 637 41 59 125 125 450 2005 46 2066 59 125 450 2067 40 2008 44 2011 44 2012 44 2038 44 2040 44 2032 41 59 125 437 2005 2068 40 2007 2008 44 2009 60 2010 62 2011 44 2069 60 2070 62 2071 41 123 2072 46 2073 40 2071 46 2074 62 1500 44 36 648 41 59 490 2075 61 2011 91 1500 93 46 2076 59 490 2077 61 2011 91 1500 93 46 2078 59 2079 40 2008 44 2075 44 2077 44 2071 41 59 2080 40 2008 44 2071 41 59 2081 40 2008 44 2075 44 2077 44 2071 41 59 385 40 490 2082 61 1501 59 2082 60 2011 46 2074 59 2082 637 41 123 2008 46 2083 40 648 41 59 2081 40 2008 44 2075 44 2077 44 2011 91 2082 93 46 2084 46 2085 40 2086 619 2086 46 2087 41 46 2088 40 41 41 59 125 2008 46 2089 40 2090 46 2091 41 59 450 2005 46 2092 59 125 437 341 461 2093 61 648 59 437 341 461 2094 61 648 59 437 341 461 2095 61 648 59 437 341 461 2096 61 648 43 2095 43 648 59 437 341 461 2097 61 2094 43 648 43 2095 59 437 2005 2098 40 2007 2008 44 2009 60 2010 62 2011 44 404 2012 44 2069 60 2070 62 2071 44 2069 60 2070 62 2099 44 2069 60 2070 62 2100 41 123 2101 40 2008 44 2093 44 2012 44 2099 44 2096 41 59 490 2102 61 2011 91 1500 93 46 2103 59 490 2104 61 2011 91 1500 93 46 2105 59 2106 40 2008 44 2102 44 2104 44 2094 44 2011 44 2071 44 2095 41 59 2107 40 2008 44 2099 44 2093 44 2012 44 2097 41 59 2008 46 2108 40 2109 46 2110 41 59 2111 40 2008 44 2100 44 2099 44 2093 44 2012 44 2102 44 2104 44 2112 58 2095 41 59 450 2005 46 2113 59 125 437 2005 2114 40 2007 2008 44 2009 60 2010 62 2011 44 404 2012 44 2069 60 2070 62 2115 44 2069 60 2070 62 2099 44 2069 60 2070 62 2100 41 123 2116 40 2008 44 2093 44 2012 44 2099 41 59 490 2117 61 2011 91 1500 93 46 2118 59 490 2119 61 2011 91 1500 93 46 2120 59 2121 40 2008 44 2117 44 2119 44 2115 41 59 2122 40 2008 44 2099 44 2093 44 2012 41 59 2123 40 2008 44 2115 41 59 2124 40 2008 44 2117 44 2119 44 2115 41 59 385 40 490 2125 61 1501 59 2125 60 2011 46 2126 59 2125 637 41 123 2008 46 2127 40 648 41 59 2124 40 2008 44 2117 44 2119 44 2115 41 59 125 2008 46 2128 40 2129 46 2130 41 59 2131 40 2008 44 2100 44 2099 44 2093 44 2012 44 2117 44 2119 41 59 450 2005 46 2132 59 125 437 492 2133 40 2007 2008 44 461 2134 44 461 63 2135 44 461 2136 44 2009 60 2010 62 2011 44 2009 60 2070 62 2071 44 461 63 2137 61 424 41 123 2008 46 2138 40 648 41 59 2139 46 2140 40 2008 44 2134 44 2135 41 59 2008 46 2138 40 648 41 59 2141 40 2008 44 2071 41 59 2142 40 2008 44 2071 44 648 41 59 385 40 490 2143 61 1501 59 2143 60 2011 46 2144 59 2143 637 41 123 2008 46 2145 40 648 41 59 2142 40 2008 44 2011 91 2143 93 46 2146 46 2147 40 2148 619 2148 46 2149 41 46 2150 40 41 44 2143 46 2151 40 2152 46 2153 41 41 59 125 2008 46 2138 40 648 41 46 2138 40 2136 41 46 2138 40 648 41 46 2154 40 2071 44 2139 44 40 2155 44 2156 44 2157 41 619 2157 46 2140 40 2155 44 2156 46 2158 41 41 59 392 40 2137 631 424 41 123 2008 46 2138 40 648 41 46 2138 40 2137 41 59 125 2008 46 2138 40 607 41 46 2159 40 648 41 46 2159 40 648 41 59 2008 46 2138 40 648 41 46 2138 40 607 41 46 2154 40 2071 44 2139 44 40 2155 44 2156 44 2157 41 619 2157 46 2140 40 2155 44 2156 46 2158 41 41 46 2138 40 607 41 59 2141 40 2008 44 2071 41 59 2008 46 2138 40 607 41 46 2154 40 2071 44 40 2136 44 2139 41 44 457 40 2155 44 2156 44 2160 41 619 123 490 40 2161 44 2157 41 61 2160 59 2155 46 2138 40 2161 41 46 2138 40 607 41 59 2157 46 2140 40 2155 44 2156 46 2158 41 59 125 41 46 2138 40 607 41 59 125 437 492 2162 40 2007 2008 44 2009 60 2070 62 2163 44 461 2164 41 123 392 40 2163 46 2165 62 1500 41 123 2008 46 2166 40 607 41 46 2167 40 2163 44 2168 44 40 2169 44 2170 44 2171 41 619 123 392 40 2170 46 2172 41 123 2171 46 2173 40 2169 44 2170 46 2174 33 41 59 125 360 123 2169 46 2166 40 648 41 59 125 125 41 46 2166 40 648 41 46 2166 40 2164 41 46 2166 40 607 41 59 125 125 437 492 2175 40 2007 2008 44 461 2134 44 404 2176 44 2009 60 2070 62 2163 44 461 63 2137 61 424 41 123 2008 46 2177 40 648 41 46 2177 40 2134 41 46 2177 40 2176 41 46 2177 40 648 41 46 2178 40 2163 44 467 44 40 2179 44 2180 44 2181 41 619 123 2181 46 2182 46 2183 40 2179 44 2180 46 2184 41 59 2179 46 2177 40 607 41 46 2177 40 2185 40 2180 46 2186 33 41 41 59 125 41 59 392 40 2137 631 424 41 123 2008 46 2177 40 648 41 46 2177 40 2137 41 59 125 2008 46 2177 40 607 41 46 2187 40 2188 46 2189 41 59 125 437 457 461 2190 40 2191 2192 41 123 490 2193 61 2192 46 2194 40 41 59 450 2192 46 2195 614 478 40 326 91 93 41 605 40 2193 46 2196 40 648 44 2197 46 2198 41 606 2193 46 2196 40 648 44 2197 46 2198 41 41 63 2192 46 2199 63 648 58 648 58 2193 59 125 621 437 492 2200 40 2007 2008 44 2009 60 2070 62 2163 44 461 2201 44 404 2202 44 461 63 2137 61 424 41 123 2008 46 2203 40 41 46 2204 40 648 41 46 2205 40 2163 44 2206 44 40 2207 44 2208 44 2209 41 619 123 2207 46 2204 40 648 41 59 2209 46 2210 40 2207 44 2208 46 2211 41 59 125 41 59 392 40 2137 631 424 41 123 2008 46 2204 40 648 41 46 2204 40 2137 41 59 125 2008 46 2203 40 41 46 2204 40 648 41 46 2204 40 2201 41 46 2204 40 2202 41 59 125 437 2005 2212 40 2007 2008 44 2010 2213 44 2009 60 2070 62 2099 44 2009 60 2070 62 2100 44 404 2012 41 123 490 2134 61 2213 46 2214 59 490 2135 61 2213 46 2215 59 490 2163 61 2213 46 2216 59 490 2071 61 2163 46 2217 40 2218 619 2218 46 2219 41 46 2220 40 41 59 2175 40 2008 44 2093 44 2012 44 2099 41 59 2221 40 2008 44 2134 44 2135 44 2071 41 59 2200 40 2008 44 2099 44 2093 44 2012 41 59 2222 40 2008 44 2071 41 59 2162 40 2008 44 2134 44 2135 44 2071 41 59 2008 46 2223 40 2224 46 2225 41 59 450 2226 40 2008 44 2100 44 2099 44 2093 44 2012 44 2134 44 2135 41 59 125 437 2005 2227 40 2007 2008 44 2009 60 2070 62 2100 44 2009 60 2070 62 2099 44 461 2228 44 404 2229 44 461 2201 44 461 63 2135 44 461 63 2230 61 424 41 123 392 40 2100 46 2231 40 2099 41 41 123 2008 46 2232 40 41 46 2233 40 648 41 46 2234 40 2100 44 2235 44 40 2236 44 2237 44 2238 41 619 2238 46 2239 40 2236 44 2237 46 2240 44 648 41 41 46 2233 40 648 41 46 2233 40 2228 41 46 2233 40 2229 41 46 2233 40 648 41 59 125 360 123 2008 46 2241 40 41 46 2242 40 648 41 46 2243 40 2100 44 2244 44 40 2245 44 2246 44 2247 41 619 2247 46 2248 40 2245 44 2246 46 2249 44 648 41 41 46 2242 40 648 41 59 2244 46 2248 40 2008 44 2201 44 2135 41 59 2008 46 2241 40 648 41 46 2242 40 648 41 46 2242 40 2228 41 46 2242 40 2229 41 46 2242 40 648 41 46 2242 40 648 41 46 2243 40 2099 44 40 2245 44 2250 41 619 123 2245 46 2242 40 607 41 59 2244 46 2248 40 2245 44 2250 46 2249 44 648 41 59 2245 46 2242 40 648 41 59 2244 46 2248 40 2245 44 2250 46 2249 44 648 41 59 2245 46 2242 40 607 41 59 125 44 648 41 59 125 392 40 2230 631 424 41 123 2008 46 2251 40 41 46 2252 40 648 41 59 2253 46 2254 40 2008 44 2230 44 648 41 59 125 2008 46 2255 40 2256 46 2257 41 46 2255 40 41 59 450 2005 46 2258 59 125 612 438 431 2005 2259 40 2007 2008 44 461 2134 44 461 63 2135 44 404 2012 41 123 2008 46 2260 40 648 41 46 2261 40 2262 46 2263 41 46 2261 40 41 59 450 2005 46 2264 59 125 612 439 431 492 2265 40 2007 2008 41 619 2008 46 2266 40 648 41 46 2267 40 2268 46 2269 41 59 612 438 431 492 2270 40 2007 2008 44 2070 2271 41 123 2268 46 2272 40 2008 44 2271 46 2273 41 59 2008 46 2266 40 648 41 59 2008 46 2266 40 648 41 59 125 612 438 431 492 2274 40 2007 2008 44 404 2275 41 619 2008 46 2266 40 648 41 46 2266 40 2275 46 2276 40 2277 46 2278 41 41 59 125 
68667,C#,"public class IdentityMap<TKey> : IIdentityMap
    where TKey : notnull
{
    private readonly bool _sensitiveLoggingEnabled;
    private readonly Dictionary<TKey, InternalEntityEntry> _identityMap;
    private readonly IForeignKey[]? _foreignKeys;
    private Dictionary<IForeignKey, IDependentsMap>? _dependentMaps;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public IdentityMap(
        IKey key,
        IPrincipalKeyValueFactory<TKey> principalKeyValueFactory,
        bool sensitiveLoggingEnabled)
    {
        _sensitiveLoggingEnabled = sensitiveLoggingEnabled;
        Key = key;
        PrincipalKeyValueFactory = principalKeyValueFactory;
        _identityMap = new Dictionary<TKey, InternalEntityEntry>(principalKeyValueFactory.EqualityComparer);

        if (key.IsPrimaryKey())
        {
            _foreignKeys = key.DeclaringEntityType
                .GetDerivedTypesInclusive()
                .SelectMany(t => t.GetDeclaredForeignKeys())
                .ToArray();
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual IPrincipalKeyValueFactory<TKey> PrincipalKeyValueFactory { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IKey Key { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool Contains(in ValueBuffer valueBuffer)
    {
        var key = PrincipalKeyValueFactory.CreateFromBuffer(valueBuffer);
        return key != null && _identityMap.ContainsKey((TKey)key);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool Contains(IForeignKey foreignKey, in ValueBuffer valueBuffer)
        => foreignKey.GetDependentKeyValueFactory<TKey>()!.TryCreateFromBuffer(valueBuffer, out var key)
            && _identityMap.ContainsKey(key);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityEntry? TryGetEntry(object?[] keyValues)
    {
        var key = PrincipalKeyValueFactory.CreateFromKeyValues(keyValues);
        return key != null && _identityMap.TryGetValue((TKey)key, out var entry) ? entry : null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityEntry? TryGetEntry(object?[] keyValues, bool throwOnNullKey, out bool hasNullKey)
    {
        var key = PrincipalKeyValueFactory.CreateFromKeyValues(keyValues);

        if (key == null)
        {
            if (throwOnNullKey)
            {
                if (Key.IsPrimaryKey())
                {
                    throw new InvalidOperationException(
                        CoreStrings.InvalidKeyValue(
                            Key.DeclaringEntityType.DisplayName(),
                            PrincipalKeyValueFactory.FindNullPropertyInKeyValues(keyValues)!.Name));
                }

                throw new InvalidOperationException(
                    CoreStrings.InvalidAlternateKeyValue(
                        Key.DeclaringEntityType.DisplayName(),
                        PrincipalKeyValueFactory.FindNullPropertyInKeyValues(keyValues)!.Name));
            }

            hasNullKey = true;

            return null;
        }

        hasNullKey = false;

        try
        {
            return _identityMap.TryGetValue((TKey)key, out var entry)
                ? entry
                : null;
        }
        catch (InvalidCastException e)
        {
            throw new InvalidOperationException(
                // ReSharper disable once PossibleNullReferenceException
                CoreStrings.ErrorMaterializingPropertyInvalidCast(
                    Key.DeclaringEntityType.DisplayName(),
                    Key.Properties.First().Name,
                    typeof(TKey),
                    key.GetType()),
                e);
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityEntry? TryGetEntry(IForeignKey foreignKey, InternalEntityEntry dependentEntry)
        => foreignKey.GetDependentKeyValueFactory<TKey>()!.TryCreateFromCurrentValues(dependentEntry, out var key)
            && _identityMap.TryGetValue(key, out var entry)
                ? entry
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityEntry? TryGetEntryUsingPreStoreGeneratedValues(
        IForeignKey foreignKey,
        InternalEntityEntry dependentEntry)
        => foreignKey.GetDependentKeyValueFactory<TKey>()!.TryCreateFromPreStoreGeneratedCurrentValues(dependentEntry, out var key)
            && _identityMap.TryGetValue(key, out var entry)
                ? entry
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityEntry? TryGetEntryUsingRelationshipSnapshot(IForeignKey foreignKey, InternalEntityEntry dependentEntry)
        => foreignKey.GetDependentKeyValueFactory<TKey>()!.TryCreateFromRelationshipSnapshot(dependentEntry, out var key)
            && _identityMap.TryGetValue(key, out var entry)
                ? entry
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void AddOrUpdate(InternalEntityEntry entry)
        => Add(PrincipalKeyValueFactory.CreateFromCurrentValues(entry), entry, updateDuplicate: true);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void Add(InternalEntityEntry entry)
        => Add(PrincipalKeyValueFactory.CreateFromCurrentValues(entry), entry);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void Add(object[] keyValues, InternalEntityEntry entry)
        => Add((TKey)PrincipalKeyValueFactory.CreateFromKeyValues(keyValues)!, entry);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void Add(TKey key, InternalEntityEntry entry)
        => Add(key, entry, updateDuplicate: false);

    private void ThrowIdentityConflict(InternalEntityEntry entry)
    {
        if (entry.EntityType.IsOwned())
        {
            if (_sensitiveLoggingEnabled)
            {
                throw new InvalidOperationException(
                    CoreStrings.IdentityConflictOwnedSensitive(
                        entry.EntityType.DisplayName(),
                        entry.BuildCurrentValuesString(Key.Properties)));
            }

            throw new InvalidOperationException(
                CoreStrings.IdentityConflictOwned(
                    entry.EntityType.DisplayName(),
                    Key.Properties.Format()));
        }

        if (_sensitiveLoggingEnabled)
        {
            throw new InvalidOperationException(
                CoreStrings.IdentityConflictSensitive(
                    entry.EntityType.DisplayName(),
                    entry.BuildCurrentValuesString(Key.Properties)));
        }

        throw new InvalidOperationException(
            CoreStrings.IdentityConflict(
                entry.EntityType.DisplayName(),
                Key.Properties.Format()));
    }

    private void Add(TKey key, InternalEntityEntry entry, bool updateDuplicate)
    {
        if (_identityMap.TryGetValue(key, out var existingEntry))
        {
            var bothStatesEquivalent = (entry.EntityState == EntityState.Deleted) == (existingEntry.EntityState == EntityState.Deleted);
            if (!updateDuplicate)
            {
                if (existingEntry == entry)
                {
                    return;
                }

                if (bothStatesEquivalent)
                {
                    ThrowIdentityConflict(entry);
                }

                if (existingEntry.SharedIdentityEntry != null)
                {
                    if (existingEntry.SharedIdentityEntry == entry)
                    {
                        return;
                    }

                    ThrowIdentityConflict(entry);
                }
            }

            if (!bothStatesEquivalent
                && Key.IsPrimaryKey())
            {
                entry.SharedIdentityEntry = existingEntry;
                existingEntry.SharedIdentityEntry = entry;
                if (existingEntry.EntityState != EntityState.Deleted)
                {
                    return;
                }
            }
        }

        _identityMap[key] = entry;

        if (_dependentMaps != null
            && _foreignKeys != null)
        {
            foreach (var foreignKey in _foreignKeys)
            {
                if (_dependentMaps.TryGetValue(foreignKey, out var map))
                {
                    if (existingEntry != null)
                    {
                        map.Remove(existingEntry);
                    }

                    map.Add(entry);
                }
            }
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IDependentsMap GetDependentsMap(IForeignKey foreignKey)
    {
        _dependentMaps ??= new Dictionary<IForeignKey, IDependentsMap>(LegacyReferenceEqualityComparer.Instance);

        if (!_dependentMaps.TryGetValue(foreignKey, out var map))
        {
            map = ((IRuntimeForeignKey)foreignKey).DependentsMapFactory();

            foreach (var value in _identityMap.Values)
            {
                map.Add(value);
            }

            _dependentMaps[foreignKey] = map;
        }

        return map;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IDependentsMap? FindDependentsMap(IForeignKey foreignKey)
        => _dependentMaps != null
            && _dependentMaps.TryGetValue(foreignKey, out var map)
                ? map
                : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void Clear()
    {
        _identityMap?.Clear();
        _dependentMaps?.Clear();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void Remove(InternalEntityEntry entry)
        => Remove(PrincipalKeyValueFactory.CreateFromCurrentValues(entry), entry);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry)
        => Remove(PrincipalKeyValueFactory.CreateFromRelationshipSnapshot(entry), entry);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void Remove(TKey key, InternalEntityEntry entry)
    {
        InternalEntityEntry? otherEntry = null;
        if (entry.SharedIdentityEntry != null)
        {
            otherEntry = entry.SharedIdentityEntry;
            otherEntry.SharedIdentityEntry = null;
            entry.SharedIdentityEntry = null;

            if (otherEntry.EntityState != EntityState.Deleted)
            {
                return;
            }
        }

        if (otherEntry == null)
        {
            if (_identityMap.TryGetValue(key, out var existingEntry)
                && existingEntry == entry)
            {
                _identityMap.Remove(key);
            }
        }
        else
        {
            _identityMap[key] = otherEntry;
        }

        if (_dependentMaps != null
            && _foreignKeys != null)
        {
            foreach (var foreignKey in _foreignKeys)
            {
                if (_dependentMaps.TryGetValue(foreignKey, out var map))
                {
                    map.Remove(entry);
                    if (otherEntry != null)
                    {
                        map.Add(otherEntry);
                    }
                }
            }
        }
    }
}",1,439 334 2000 60 2001 62 58 2002 2003 2001 58 2004 123 437 441 323 2005 59 437 441 2006 60 2001 44 2007 62 2008 59 437 441 2009 91 93 63 2010 59 437 2006 60 2009 44 2011 62 63 2012 59 612 439 2000 40 2013 2014 44 2015 60 2001 62 2016 44 323 2017 41 123 2005 61 2017 59 2018 61 2014 59 2019 61 2016 59 2008 61 418 2006 60 2001 44 2007 62 40 2016 46 2020 41 59 392 40 2014 46 2021 40 41 41 123 2010 61 2014 46 2022 46 2023 40 41 46 2024 40 2025 619 2025 46 2026 40 41 41 46 2027 40 41 59 125 125 612 438 491 2015 60 2001 62 2028 123 2029 59 125 612 439 491 2013 2030 123 2031 59 125 612 439 491 323 2032 40 398 2033 2034 41 123 490 2014 61 2028 46 2035 40 2034 41 59 450 2014 631 424 605 2008 46 2036 40 40 2001 41 2014 41 59 125 612 439 491 323 2032 40 2009 2037 44 398 2033 2034 41 619 2037 46 2038 60 2001 62 40 41 33 46 2039 40 2034 44 430 490 2014 41 605 2008 46 2040 40 2014 41 59 612 439 491 2007 63 2041 40 426 63 91 93 2042 41 123 490 2014 61 2028 46 2043 40 2042 41 59 450 2014 631 424 605 2008 46 2044 40 40 2001 41 2014 44 430 490 2045 41 63 2045 58 424 59 125 612 439 491 2007 63 2041 40 426 63 91 93 2042 44 323 2046 44 430 323 2047 41 123 490 2014 61 2028 46 2048 40 2042 41 59 392 40 2014 614 424 41 123 392 40 2046 41 123 392 40 2030 46 2049 40 41 41 123 469 418 2050 40 2051 46 2052 40 2030 46 2053 46 2054 40 41 44 2028 46 2055 40 2042 41 33 46 2056 41 41 59 125 469 418 2057 40 2058 46 2059 40 2030 46 2060 46 2061 40 41 44 2028 46 2062 40 2042 41 33 46 2063 41 41 59 125 2047 61 473 59 450 424 59 125 2047 61 380 59 474 123 450 2008 46 2064 40 40 2001 41 2014 44 430 490 2065 41 63 2065 58 424 59 125 329 40 2066 2067 41 123 469 418 2068 40 621 2069 46 2070 40 2030 46 2071 46 2072 40 41 44 2030 46 2073 46 2074 40 41 46 2075 44 478 40 2001 41 44 2014 46 2076 40 41 41 44 2067 41 59 125 125 612 439 491 2007 63 2041 40 2009 2037 44 2007 2077 41 619 2037 46 2038 60 2001 62 40 41 33 46 2078 40 2077 44 430 490 2014 41 605 2008 46 2079 40 2014 44 430 490 2080 41 63 2080 58 424 59 612 439 491 2007 63 2081 40 2009 2037 44 2007 2077 41 619 2037 46 2038 60 2001 62 40 41 33 46 2082 40 2077 44 430 490 2014 41 605 2008 46 2079 40 2014 44 430 490 2080 41 63 2080 58 424 59 612 439 491 2007 63 2083 40 2009 2037 44 2007 2077 41 619 2037 46 2038 60 2001 62 40 41 33 46 2084 40 2077 44 430 490 2014 41 605 2008 46 2079 40 2014 44 430 490 2080 41 63 2080 58 424 59 612 439 491 492 2085 40 2007 2080 41 619 2086 40 2028 46 2087 40 2080 41 44 2080 44 2088 58 473 41 59 612 439 491 492 2086 40 2007 2080 41 619 2086 40 2028 46 2087 40 2080 41 44 2080 41 59 612 439 491 492 2086 40 426 91 93 2042 44 2007 2080 41 619 2086 40 40 2001 41 2028 46 2089 40 2042 41 33 44 2080 41 59 612 438 491 492 2086 40 2001 2014 44 2007 2080 41 619 2086 40 2014 44 2080 44 2088 58 380 41 59 437 492 2090 40 2007 2080 41 123 392 40 2080 46 2091 46 2092 40 41 41 123 392 40 2005 41 123 469 418 2093 40 2094 46 2095 40 2080 46 2091 46 2096 40 41 44 2080 46 2097 40 2030 46 2098 41 41 41 59 125 469 418 2099 40 2100 46 2101 40 2080 46 2091 46 2102 40 41 44 2030 46 2103 46 2104 40 41 41 41 59 125 392 40 2005 41 123 469 418 2105 40 2106 46 2107 40 2080 46 2091 46 2108 40 41 44 2080 46 2109 40 2030 46 2110 41 41 41 59 125 469 418 2111 40 2112 46 2113 40 2080 46 2091 46 2114 40 41 44 2030 46 2115 46 2116 40 41 41 41 59 125 437 492 2086 40 2001 2014 44 2007 2080 44 323 2088 41 123 392 40 2008 46 2079 40 2014 44 430 490 2117 41 41 123 490 2118 61 40 2080 46 2119 614 2119 46 2120 41 614 40 2117 46 2119 614 2119 46 2120 41 59 392 40 33 2088 41 123 392 40 2117 614 2080 41 123 450 59 125 392 40 2118 41 123 2090 40 2080 41 59 125 392 40 2117 46 2121 631 424 41 123 392 40 2117 46 2121 614 2080 41 123 450 59 125 2090 40 2080 41 59 125 125 392 40 33 2118 605 2030 46 2122 40 41 41 123 2080 46 2123 61 2117 59 2117 46 2123 61 2080 59 392 40 2117 46 2119 631 2119 46 2120 41 123 450 59 125 125 125 2008 91 2014 93 61 2080 59 392 40 2012 631 424 605 2010 631 424 41 123 386 40 490 2037 398 2010 41 123 392 40 2012 46 2079 40 2037 44 430 490 2124 41 41 123 392 40 2117 631 424 41 123 2124 46 2125 40 2117 41 59 125 2124 46 2086 40 2080 41 59 125 125 125 125 612 439 491 2011 2126 40 2009 2037 41 123 2012 633 61 418 2006 60 2009 44 2011 62 40 2127 46 2128 41 59 392 40 33 2012 46 2079 40 2037 44 430 490 2129 41 41 123 2129 61 40 40 2130 41 2037 41 46 2131 40 41 59 386 40 490 2132 398 2008 46 2133 41 123 2129 46 2086 40 2132 41 59 125 2012 91 2037 93 61 2129 59 125 450 2129 59 125 612 439 491 2011 63 2134 40 2009 2037 41 619 2012 631 424 605 2012 46 2079 40 2037 44 430 490 2135 41 63 2135 58 424 59 612 439 491 492 2136 40 41 123 2008 634 2136 40 41 59 2012 634 2136 40 41 59 125 612 439 491 492 2137 40 2007 2080 41 619 2137 40 2028 46 2087 40 2080 41 44 2080 41 59 612 439 491 492 2138 40 2007 2080 41 619 2137 40 2028 46 2139 40 2080 41 44 2080 41 59 612 438 491 492 2137 40 2001 2014 44 2007 2080 41 123 2007 63 2140 61 424 59 392 40 2080 46 2141 631 424 41 123 2140 61 2080 46 2141 59 2140 46 2141 61 424 59 2080 46 2141 61 424 59 392 40 2140 46 2142 631 2142 46 2143 41 123 450 59 125 125 392 40 2140 614 424 41 123 392 40 2008 46 2079 40 2014 44 430 490 2144 41 605 2144 614 2080 41 123 2008 46 2137 40 2014 41 59 125 125 360 123 2008 91 2014 93 61 2140 59 125 392 40 2012 631 424 605 2010 631 424 41 123 386 40 490 2037 398 2010 41 123 392 40 2012 46 2079 40 2037 44 430 490 2135 41 41 123 2135 46 2137 40 2080 41 59 392 40 2140 631 424 41 123 2135 46 2086 40 2140 41 59 125 125 125 125 125 125 
79821,C#,"    public class UserWallet : Wallet
    {
        private readonly object db_lock = new();
        private readonly byte[] iv;
        private readonly byte[] salt;
        private readonly byte[] masterKey;
        private readonly ScryptParameters scrypt;
        private readonly Dictionary<UInt160, UserWalletAccount> accounts;

        public override string Name => GetFileNameWithoutExtension(Path);

        public override Version Version
        {
            get
            {
                byte[] buffer = LoadStoredData(""Version"");
                if (buffer == null || buffer.Length < 16) return new Version(0, 0);
                int major = BinaryPrimitives.ReadInt32LittleEndian(buffer);
                int minor = BinaryPrimitives.ReadInt32LittleEndian(buffer.AsSpan(4));
                int build = BinaryPrimitives.ReadInt32LittleEndian(buffer.AsSpan(8));
                int revision = BinaryPrimitives.ReadInt32LittleEndian(buffer.AsSpan(12));
                return new Version(major, minor, build, revision);
            }
        }

        private UserWallet(string path, byte[] passwordKey, ProtocolSettings settings) : base(path, settings)
        {
            this.salt = LoadStoredData(""Salt"");
            byte[] passwordHash = LoadStoredData(""PasswordHash"");
            if (passwordHash != null && !passwordHash.SequenceEqual(passwordKey.Concat(salt).ToArray().Sha256()))
                throw new CryptographicException();
            this.iv = LoadStoredData(""IV"");
            this.masterKey = Decrypt(LoadStoredData(""MasterKey""), passwordKey, iv);
            this.scrypt = new ScryptParameters
                (
                BinaryPrimitives.ReadInt32LittleEndian(LoadStoredData(""ScryptN"")),
                BinaryPrimitives.ReadInt32LittleEndian(LoadStoredData(""ScryptR"")),
                BinaryPrimitives.ReadInt32LittleEndian(LoadStoredData(""ScryptP""))
                );
            this.accounts = LoadAccounts();
        }

        private UserWallet(string path, byte[] passwordKey, ProtocolSettings settings, ScryptParameters scrypt) : base(path, settings)
        {
            this.iv = new byte[16];
            this.salt = new byte[20];
            this.masterKey = new byte[32];
            this.scrypt = scrypt;
            this.accounts = new Dictionary<UInt160, UserWalletAccount>();
            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(iv);
                rng.GetBytes(salt);
                rng.GetBytes(masterKey);
            }
            Version version = Assembly.GetExecutingAssembly().GetName().Version;
            byte[] versionBuffer = new byte[sizeof(int) * 4];
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer, version.Major);
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer.AsSpan(4), version.Minor);
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer.AsSpan(8), version.Build);
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer.AsSpan(12), version.Revision);
            BuildDatabase();
            SaveStoredData(""IV"", iv);
            SaveStoredData(""Salt"", salt);
            SaveStoredData(""PasswordHash"", passwordKey.Concat(salt).ToArray().Sha256());
            SaveStoredData(""MasterKey"", Encrypt(masterKey, passwordKey, iv));
            SaveStoredData(""Version"", versionBuffer);
            SaveStoredData(""ScryptN"", this.scrypt.N);
            SaveStoredData(""ScryptR"", this.scrypt.R);
            SaveStoredData(""ScryptP"", this.scrypt.P);
        }

        private void AddAccount(UserWalletAccount account)
        {
            lock (accounts)
            {
                if (accounts.TryGetValue(account.ScriptHash, out UserWalletAccount account_old))
                {
                    if (account.Contract == null)
                    {
                        account.Contract = account_old.Contract;
                    }
                }
                accounts[account.ScriptHash] = account;
            }
            lock (db_lock)
            {
                using WalletDataContext ctx = new(Path);
                if (account.HasKey)
                {
                    string passphrase = Encoding.UTF8.GetString(masterKey);
                    Account db_account = ctx.Accounts.FirstOrDefault(p => p.PublicKeyHash == account.Key.PublicKeyHash.ToArray());
                    if (db_account == null)
                    {
                        db_account = ctx.Accounts.Add(new Account
                        {
                            Nep2key = account.Key.Export(passphrase, ProtocolSettings.AddressVersion, scrypt.N, scrypt.R, scrypt.P),
                            PublicKeyHash = account.Key.PublicKeyHash.ToArray()
                        }).Entity;
                    }
                    else
                    {
                        db_account.Nep2key = account.Key.Export(passphrase, ProtocolSettings.AddressVersion, scrypt.N, scrypt.R, scrypt.P);
                    }
                }
                if (account.Contract != null)
                {
                    Contract db_contract = ctx.Contracts.FirstOrDefault(p => p.ScriptHash == account.Contract.ScriptHash.ToArray());
                    if (db_contract != null)
                    {
                        db_contract.PublicKeyHash = account.Key.PublicKeyHash.ToArray();
                    }
                    else
                    {
                        ctx.Contracts.Add(new Contract
                        {
                            RawData = ((VerificationContract)account.Contract).ToArray(),
                            ScriptHash = account.Contract.ScriptHash.ToArray(),
                            PublicKeyHash = account.Key.PublicKeyHash.ToArray()
                        });
                    }
                }
                //add address
                {
                    Address db_address = ctx.Addresses.FirstOrDefault(p => p.ScriptHash == account.ScriptHash.ToArray());
                    if (db_address == null)
                    {
                        ctx.Addresses.Add(new Address
                        {
                            ScriptHash = account.ScriptHash.ToArray()
                        });
                    }
                }
                ctx.SaveChanges();
            }
        }

        private void BuildDatabase()
        {
            using WalletDataContext ctx = new(Path);
            ctx.Database.EnsureDeleted();
            ctx.Database.EnsureCreated();
        }

        public override bool ChangePassword(string oldPassword, string newPassword)
        {
            if (!VerifyPassword(oldPassword)) return false;
            byte[] passwordKey = newPassword.ToAesKey();
            try
            {
                SaveStoredData(""PasswordHash"", passwordKey.Concat(salt).ToArray().Sha256());
                SaveStoredData(""MasterKey"", Encrypt(masterKey, passwordKey, iv));
                return true;
            }
            finally
            {
                Array.Clear(passwordKey, 0, passwordKey.Length);
            }
        }

        public override bool Contains(UInt160 scriptHash)
        {
            lock (accounts)
            {
                return accounts.ContainsKey(scriptHash);
            }
        }

        /// <summary>
        /// Creates a new wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""scrypt"">The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.</param>
        /// <returns>The created wallet.</returns>
        public static UserWallet Create(string path, string password, ProtocolSettings settings, ScryptParameters scrypt = null)
        {
            return new UserWallet(path, password.ToAesKey(), settings, scrypt ?? ScryptParameters.Default);
        }

        /// <summary>
        /// Creates a new wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""scrypt"">The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.</param>
        /// <returns>The created wallet.</returns>
        public static UserWallet Create(string path, SecureString password, ProtocolSettings settings, ScryptParameters scrypt = null)
        {
            return new UserWallet(path, password.ToAesKey(), settings, scrypt ?? ScryptParameters.Default);
        }

        public override WalletAccount CreateAccount(byte[] privateKey)
        {
            KeyPair key = new(privateKey);
            VerificationContract contract = new()
            {
                Script = SmartContract.Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature }
            };
            UserWalletAccount account = new(contract.ScriptHash, ProtocolSettings)
            {
                Key = key,
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(SmartContract.Contract contract, KeyPair key = null)
        {
            if (contract is not VerificationContract verification_contract)
            {
                verification_contract = new VerificationContract
                {
                    Script = contract.Script,
                    ParameterList = contract.ParameterList
                };
            }
            UserWalletAccount account = new(verification_contract.ScriptHash, ProtocolSettings)
            {
                Key = key,
                Contract = verification_contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(UInt160 scriptHash)
        {
            UserWalletAccount account = new(scriptHash, ProtocolSettings);
            AddAccount(account);
            return account;
        }

        public override void Delete()
        {
            using WalletDataContext ctx = new(Path);
            ctx.Database.EnsureDeleted();
        }

        public override bool DeleteAccount(UInt160 scriptHash)
        {
            UserWalletAccount account;
            lock (accounts)
            {
                if (accounts.TryGetValue(scriptHash, out account))
                    accounts.Remove(scriptHash);
            }
            if (account != null)
            {
                lock (db_lock)
                {
                    using WalletDataContext ctx = new(Path);
                    if (account.HasKey)
                    {
                        Account db_account = ctx.Accounts.First(p => p.PublicKeyHash == account.Key.PublicKeyHash.ToArray());
                        ctx.Accounts.Remove(db_account);
                    }
                    if (account.Contract != null)
                    {
                        Contract db_contract = ctx.Contracts.First(p => p.ScriptHash == scriptHash.ToArray());
                        ctx.Contracts.Remove(db_contract);
                    }
                    //delete address
                    {
                        Address db_address = ctx.Addresses.First(p => p.ScriptHash == scriptHash.ToArray());
                        ctx.Addresses.Remove(db_address);
                    }
                    ctx.SaveChanges();
                }
                return true;
            }
            return false;
        }

        public override WalletAccount GetAccount(UInt160 scriptHash)
        {
            lock (accounts)
            {
                accounts.TryGetValue(scriptHash, out UserWalletAccount account);
                return account;
            }
        }

        public override IEnumerable<WalletAccount> GetAccounts()
        {
            lock (accounts)
            {
                foreach (UserWalletAccount account in accounts.Values)
                    yield return account;
            }
        }

        private Dictionary<UInt160, UserWalletAccount> LoadAccounts()
        {
            using WalletDataContext ctx = new(Path);
            string passphrase = Encoding.UTF8.GetString(masterKey);
            Dictionary<UInt160, UserWalletAccount> accounts = ctx.Addresses.Select(p => p.ScriptHash).AsEnumerable().Select(p => new UserWalletAccount(new UInt160(p), ProtocolSettings)).ToDictionary(p => p.ScriptHash);
            foreach (Contract db_contract in ctx.Contracts.Include(p => p.Account))
            {
                VerificationContract contract = db_contract.RawData.AsSerializable<VerificationContract>();
                UserWalletAccount account = accounts[contract.ScriptHash];
                account.Contract = contract;
                account.Key = new KeyPair(GetPrivateKeyFromNEP2(db_contract.Account.Nep2key, passphrase, ProtocolSettings.AddressVersion, scrypt.N, scrypt.R, scrypt.P));
            }
            return accounts;
        }

        private byte[] LoadStoredData(string name)
        {
            using WalletDataContext ctx = new(Path);
            return ctx.Keys.FirstOrDefault(p => p.Name == name)?.Value;
        }

        /// <summary>
        /// Opens a wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <returns>The opened wallet.</returns>
        public static UserWallet Open(string path, string password, ProtocolSettings settings)
        {
            return new UserWallet(path, password.ToAesKey(), settings);
        }

        /// <summary>
        /// Opens a wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <returns>The opened wallet.</returns>
        public static UserWallet Open(string path, SecureString password, ProtocolSettings settings)
        {
            return new UserWallet(path, password.ToAesKey(), settings);
        }

        private void SaveStoredData(string name, int value)
        {
            byte[] data = new byte[sizeof(int)];
            BinaryPrimitives.WriteInt32LittleEndian(data, value);
            SaveStoredData(name, data);
        }

        private void SaveStoredData(string name, byte[] value)
        {
            lock (db_lock)
            {
                using WalletDataContext ctx = new(Path);
                SaveStoredData(ctx, name, value);
                ctx.SaveChanges();
            }
        }

        private static void SaveStoredData(WalletDataContext ctx, string name, byte[] value)
        {
            Key key = ctx.Keys.FirstOrDefault(p => p.Name == name);
            if (key == null)
            {
                ctx.Keys.Add(new Key
                {
                    Name = name,
                    Value = value
                });
            }
            else
            {
                key.Value = value;
            }
        }

        public override bool VerifyPassword(string password)
        {
            return password.ToAesKey().Concat(salt).ToArray().Sha256().SequenceEqual(LoadStoredData(""PasswordHash""));
        }

        private static byte[] Encrypt(byte[] data, byte[] key, byte[] iv)
        {
            if (data == null || key == null || iv == null) throw new ArgumentNullException();
            if (data.Length % 16 != 0 || key.Length != 32 || iv.Length != 16) throw new ArgumentException();
            using Aes aes = Aes.Create();
            aes.Padding = PaddingMode.None;
            using ICryptoTransform encryptor = aes.CreateEncryptor(key, iv);
            return encryptor.TransformFinalBlock(data, 0, data.Length);
        }

        private static byte[] Decrypt(byte[] data, byte[] key, byte[] iv)
        {
            if (data == null || key == null || iv == null) throw new ArgumentNullException();
            if (data.Length % 16 != 0 || key.Length != 32 || iv.Length != 16) throw new ArgumentException();
            using Aes aes = Aes.Create();
            aes.Padding = PaddingMode.None;
            using ICryptoTransform decryptor = aes.CreateDecryptor(key, iv);
            return decryptor.TransformFinalBlock(data, 0, data.Length);
        }
    }",1,439 334 2000 58 2001 123 437 441 426 2002 61 418 40 41 59 437 441 326 91 93 2003 59 437 441 326 91 93 2004 59 437 441 326 91 93 2005 59 437 441 2006 2007 59 437 441 2008 60 2009 44 2010 62 2011 59 439 431 461 2012 619 2013 40 2014 41 59 439 431 2015 2015 123 2016 123 326 91 93 2017 61 2018 40 648 41 59 392 40 2017 614 424 606 2017 46 2019 60 1503 41 450 418 2015 40 1500 44 1500 41 59 404 2020 61 2021 46 2022 40 2017 41 59 404 2023 61 2021 46 2022 40 2017 46 2024 40 1502 41 41 59 404 2025 61 2021 46 2022 40 2017 46 2024 40 1502 41 41 59 404 2026 61 2021 46 2022 40 2017 46 2024 40 1503 41 41 59 450 418 2015 40 2020 44 2023 44 2025 44 2026 41 59 125 125 437 2000 40 461 2027 44 326 91 93 2028 44 2029 2030 41 58 320 40 2027 44 2030 41 123 467 46 2004 61 2031 40 648 41 59 326 91 93 2032 61 2031 40 648 41 59 392 40 2032 631 424 605 33 2032 46 2033 40 2028 46 2034 40 2004 41 46 2035 40 41 46 2036 40 41 41 41 469 418 2037 40 41 59 467 46 2003 61 2031 40 648 41 59 467 46 2005 61 2038 40 2031 40 648 41 44 2028 44 2003 41 59 467 46 2007 61 418 2006 40 2039 46 2040 40 2031 40 648 41 41 44 2039 46 2040 40 2031 40 648 41 41 44 2039 46 2040 40 2031 40 648 41 41 41 59 467 46 2011 61 2041 40 41 59 125 437 2000 40 461 2027 44 326 91 93 2028 44 2029 2030 44 2006 2007 41 58 320 40 2027 44 2030 41 123 467 46 2003 61 418 326 91 1503 93 59 467 46 2004 61 418 326 91 1503 93 59 467 46 2005 61 418 326 91 1503 93 59 467 46 2007 61 2007 59 467 46 2011 61 418 2008 60 2009 44 2010 62 40 41 59 489 40 2042 2043 61 2042 46 2044 40 41 41 123 2043 46 2045 40 2003 41 59 2043 46 2045 40 2004 41 59 2043 46 2045 40 2005 41 59 125 2015 2046 61 2047 46 2048 40 41 46 2049 40 41 46 2015 59 326 91 93 2050 61 418 326 91 455 40 404 41 42 1502 93 59 2051 46 2052 40 2050 44 2046 46 2053 41 59 2051 46 2052 40 2050 46 2054 40 1502 41 44 2046 46 2055 41 59 2051 46 2052 40 2050 46 2054 40 1502 41 44 2046 46 2056 41 59 2051 46 2052 40 2050 46 2054 40 1503 41 44 2046 46 2057 41 59 2058 40 41 59 2059 40 648 44 2003 41 59 2059 40 648 44 2004 41 59 2059 40 648 44 2028 46 2060 40 2004 41 46 2061 40 41 46 2062 40 41 41 59 2059 40 648 44 2063 40 2005 44 2028 44 2003 41 41 59 2059 40 648 44 2050 41 59 2059 40 648 44 467 46 2007 46 2064 41 59 2059 40 648 44 467 46 2007 46 2065 41 59 2059 40 648 44 467 46 2007 46 2066 41 59 125 437 492 2067 40 2010 2068 41 123 412 40 2011 41 123 392 40 2011 46 2069 40 2068 46 2070 44 430 2010 2071 41 41 123 392 40 2068 46 2072 614 424 41 123 2068 46 2072 61 2071 46 2072 59 125 125 2011 91 2068 46 2070 93 61 2068 59 125 412 40 2002 41 123 489 2073 2074 61 418 40 2014 41 59 392 40 2068 46 2075 41 123 461 2076 61 2077 46 2078 46 2079 40 2005 41 59 2080 2081 61 2074 46 2082 46 2083 40 2084 619 2084 46 2085 614 2068 46 2086 46 2085 46 2087 40 41 41 59 392 40 2081 614 424 41 123 2081 61 2074 46 2082 46 2088 40 418 2080 123 2089 61 2068 46 2086 46 2090 40 2076 44 2029 46 2091 44 2007 46 2092 44 2007 46 2093 44 2007 46 2094 41 44 2085 61 2068 46 2086 46 2085 46 2087 40 41 125 41 46 2095 59 125 360 123 2081 46 2096 61 2068 46 2086 46 2097 40 2076 44 2029 46 2098 44 2007 46 2099 44 2007 46 2100 44 2007 46 2101 41 59 125 125 392 40 2068 46 2102 631 424 41 123 2102 2103 61 2074 46 2104 46 2105 40 2106 619 2106 46 2107 614 2068 46 2102 46 2107 46 2108 40 41 41 59 392 40 2103 631 424 41 123 2103 46 2109 61 2068 46 2110 46 2109 46 2108 40 41 59 125 360 123 2074 46 2104 46 2111 40 418 2102 123 2112 61 40 40 2113 41 2068 46 2102 41 46 2108 40 41 44 2107 61 2068 46 2102 46 2107 46 2108 40 41 44 2114 61 2068 46 2115 46 2114 46 2108 40 41 125 41 59 125 125 621 123 2116 2117 61 2074 46 2118 46 2119 40 2120 619 2120 46 2121 614 2068 46 2121 46 2122 40 41 41 59 392 40 2117 614 424 41 123 2074 46 2118 46 2123 40 418 2116 123 2121 61 2068 46 2121 46 2122 40 41 125 41 59 125 125 2074 46 2124 40 41 59 125 125 437 492 2125 40 41 123 489 2126 2127 61 418 40 2014 41 59 2127 46 2128 46 2129 40 41 59 2127 46 2128 46 2130 40 41 59 125 439 431 323 2131 40 461 2132 44 461 2133 41 123 392 40 33 2134 40 2132 41 41 450 380 59 326 91 93 2028 61 2133 46 2135 40 41 59 474 123 2136 40 648 44 2028 46 2137 40 2004 41 46 2138 40 41 46 2139 40 41 41 59 2136 40 648 44 2140 40 2005 44 2028 44 2003 41 41 59 450 473 59 125 382 123 2141 46 2142 40 2028 44 1500 44 2028 46 2143 41 59 125 125 439 431 323 2144 40 2009 2145 41 123 412 40 2011 41 123 450 2011 46 2146 40 2145 41 59 125 125 612 439 457 2000 2147 40 461 2027 44 461 2148 44 2029 2030 44 2006 2007 61 424 41 123 450 418 2000 40 2027 44 2148 46 2149 40 41 44 2030 44 2007 633 2006 46 2150 41 59 125 612 439 457 2000 2147 40 461 2027 44 2151 2148 44 2029 2030 44 2006 2007 61 424 41 123 450 418 2000 40 2027 44 2148 46 2152 40 41 44 2030 44 2007 633 2006 46 2153 41 59 125 439 431 2154 2155 40 326 91 93 2156 41 123 2157 2158 61 418 40 2156 41 59 2159 2160 61 418 40 41 123 2161 61 2162 46 2163 46 2164 40 2158 46 2165 41 44 2166 61 418 91 93 123 2167 46 2168 125 125 59 2010 2068 61 418 40 2160 46 2169 44 2029 41 123 2170 61 2158 44 2171 61 2160 125 59 2067 40 2068 41 59 450 2068 59 125 439 431 2154 2155 40 2172 46 2173 2174 44 2175 2176 61 424 41 123 392 40 2174 407 422 2177 2178 41 123 2178 61 418 2177 123 2179 61 2174 46 2179 44 2180 61 2174 46 2180 125 59 125 2010 2068 61 418 40 2178 46 2181 44 2029 41 123 2182 61 2176 44 2173 61 2178 125 59 2067 40 2068 41 59 450 2068 59 125 439 431 2154 2155 40 2009 2145 41 123 2010 2068 61 418 40 2145 44 2029 41 59 2067 40 2068 41 59 450 2068 59 125 439 431 492 2183 40 41 123 489 2184 2185 61 418 40 2014 41 59 2185 46 2186 46 2187 40 41 59 125 439 431 323 2188 40 2009 2145 41 123 2010 2068 59 412 40 2011 41 123 392 40 2011 46 2189 40 2145 44 430 2068 41 41 2011 46 2190 40 2145 41 59 125 392 40 2068 631 424 41 123 412 40 2002 41 123 489 2191 2192 61 418 40 2014 41 59 392 40 2068 46 2193 41 123 2194 2195 61 2192 46 2196 46 2197 40 2198 619 2198 46 2199 614 2068 46 2200 46 2199 46 2201 40 41 41 59 2192 46 2196 46 2202 40 2195 41 59 125 392 40 2068 46 2173 631 424 41 123 2173 2203 61 2192 46 2204 46 2205 40 2206 619 2206 46 2207 614 2145 46 2208 40 41 41 59 2192 46 2204 46 2209 40 2203 41 59 125 621 123 2210 2211 61 2192 46 2212 46 2213 40 2214 619 2214 46 2215 614 2145 46 2216 40 41 41 59 2192 46 2212 46 2217 40 2211 41 59 125 2192 46 2218 40 41 59 125 450 473 59 125 450 380 59 125 439 431 2154 2219 40 2009 2145 41 123 412 40 2011 41 123 2011 46 2220 40 2145 44 430 2010 2068 41 59 450 2068 59 125 125 439 431 2221 60 2154 62 2222 40 41 123 412 40 2011 41 123 386 40 2010 2068 398 2011 46 2223 41 500 450 2068 59 125 125 437 2008 60 2009 44 2010 62 2224 40 41 123 489 2225 2226 61 418 40 2014 41 59 461 2227 61 2228 46 2229 46 2230 40 2005 41 59 2008 60 2009 44 2010 62 2011 61 2226 46 2231 46 2232 40 2233 619 2233 46 2234 41 46 2235 40 41 46 2232 40 2233 619 418 2010 40 418 2009 40 2233 41 44 2029 41 41 46 2236 40 2233 619 2233 46 2234 41 59 386 40 2173 2237 398 2226 46 2238 46 2239 40 2233 619 2233 46 2240 41 41 123 2241 2174 61 2237 46 2242 46 2243 60 2241 62 40 41 59 2010 2068 61 2011 91 2174 46 2234 93 59 2068 46 2173 61 2174 59 2068 46 2244 61 418 2175 40 2245 40 2237 46 2240 46 2246 44 2227 44 2029 46 2247 44 2007 46 2248 44 2007 46 2249 44 2007 46 2250 41 41 59 125 450 2011 59 125 437 326 91 93 2251 40 461 2252 41 123 489 2253 2254 61 418 40 2014 41 59 450 2254 46 2255 46 2256 40 2257 619 2257 46 2012 614 2252 41 634 2258 59 125 612 439 457 2000 2259 40 461 2027 44 461 2148 44 2029 2030 41 123 450 418 2000 40 2027 44 2148 46 2260 40 41 44 2030 41 59 125 612 439 457 2000 2259 40 461 2027 44 2151 2148 44 2029 2030 41 123 450 418 2000 40 2027 44 2148 46 2261 40 41 44 2030 41 59 125 437 492 2262 40 461 2252 44 404 2263 41 123 326 91 93 2264 61 418 326 91 455 40 404 41 93 59 2265 46 2266 40 2264 44 2263 41 59 2262 40 2252 44 2264 41 59 125 437 492 2262 40 461 2252 44 326 91 93 2263 41 123 412 40 2002 41 123 489 2267 2268 61 418 40 2014 41 59 2262 40 2268 44 2252 44 2263 41 59 2268 46 2269 40 41 59 125 125 437 457 492 2262 40 2270 2271 44 461 2252 44 326 91 93 2263 41 123 2272 2176 61 2271 46 2273 46 2274 40 2275 619 2275 46 2012 614 2252 41 59 392 40 2176 614 424 41 123 2271 46 2273 46 2276 40 418 2272 123 2012 61 2252 44 2277 61 2263 125 41 59 125 360 123 2176 46 2278 61 2263 59 125 125 439 431 323 2279 40 461 2148 41 123 450 2148 46 2280 40 41 46 2281 40 2004 41 46 2282 40 41 46 2283 40 41 46 2284 40 2251 40 648 41 41 59 125 437 457 326 91 93 2285 40 326 91 93 2286 44 326 91 93 2176 44 326 91 93 2003 41 123 392 40 2286 614 424 606 2176 614 424 606 2003 614 424 41 469 418 2287 40 41 59 392 40 2286 46 2288 37 1503 631 1500 606 2176 46 2288 631 1503 606 2003 46 2288 631 1503 41 469 418 2289 40 41 59 489 2290 2291 61 2290 46 2147 40 41 59 2291 46 2292 61 2293 46 303 59 489 2294 2295 61 2291 46 2296 40 2176 44 2003 41 59 450 2295 46 2297 40 2286 44 1500 44 2286 46 2288 41 59 125 437 457 326 91 93 2298 40 326 91 93 2286 44 326 91 93 2176 44 326 91 93 2003 41 123 392 40 2286 614 424 606 2176 614 424 606 2003 614 424 41 469 418 2299 40 41 59 392 40 2286 46 2300 37 1503 631 1500 606 2176 46 2300 631 1503 606 2003 46 2300 631 1503 41 469 418 2301 40 41 59 489 2302 2303 61 2302 46 2147 40 41 59 2303 46 2304 61 2305 46 303 59 489 2306 2307 61 2303 46 2308 40 2176 44 2003 41 59 450 2307 46 2309 40 2286 44 1500 44 2286 46 2300 41 59 125 125 
89395,C#,"    public class ControllerWindow : Window
    {
        private readonly PlayerIndex _playerIndex;
        private readonly InputConfig _inputConfig;

        private bool _isWaitingForInput;

#pragma warning disable CS0649, IDE0044
        [GUI] Adjustment   _controllerStrongRumble;
        [GUI] Adjustment   _controllerWeakRumble;
        [GUI] Adjustment   _controllerDeadzoneLeft;
        [GUI] Adjustment   _controllerDeadzoneRight;
        [GUI] Adjustment   _controllerTriggerThreshold;
        [GUI] Adjustment   _slotNumber;
        [GUI] Adjustment   _altSlotNumber;
        [GUI] Adjustment   _sensitivity;
        [GUI] Adjustment   _gyroDeadzone;
        [GUI] CheckButton  _enableMotion;
        [GUI] CheckButton  _enableCemuHook;
        [GUI] CheckButton  _mirrorInput;
        [GUI] Entry        _dsuServerHost;
        [GUI] Entry        _dsuServerPort;
        [GUI] ComboBoxText _inputDevice;
        [GUI] ComboBoxText _profile;
        [GUI] Box          _settingsBox;
        [GUI] Box          _motionAltBox;
        [GUI] Box          _motionBox;
        [GUI] Box          _dsuServerHostBox;
        [GUI] Box          _dsuServerPortBox;
        [GUI] Box          _motionControllerSlot;
        [GUI] Grid         _leftStickKeyboard;
        [GUI] Grid         _leftStickController;
        [GUI] Box          _deadZoneLeftBox;
        [GUI] Grid         _rightStickKeyboard;
        [GUI] Grid         _rightStickController;
        [GUI] Box          _deadZoneRightBox;
        [GUI] Grid         _leftSideTriggerBox;
        [GUI] Grid         _rightSideTriggerBox;
        [GUI] Box          _triggerThresholdBox;
        [GUI] ComboBoxText _controllerType;
        [GUI] ToggleButton _lStick;
        [GUI] CheckButton  _invertLStickX;
        [GUI] CheckButton  _invertLStickY;
        [GUI] ToggleButton _lStickUp;
        [GUI] ToggleButton _lStickDown;
        [GUI] ToggleButton _lStickLeft;
        [GUI] ToggleButton _lStickRight;
        [GUI] ToggleButton _lStickButton;
        [GUI] ToggleButton _dpadUp;
        [GUI] ToggleButton _dpadDown;
        [GUI] ToggleButton _dpadLeft;
        [GUI] ToggleButton _dpadRight;
        [GUI] ToggleButton _minus;
        [GUI] ToggleButton _l;
        [GUI] ToggleButton _zL;
        [GUI] ToggleButton _rStick;
        [GUI] CheckButton  _invertRStickX;
        [GUI] CheckButton  _invertRStickY;
        [GUI] ToggleButton _rStickUp;
        [GUI] ToggleButton _rStickDown;
        [GUI] ToggleButton _rStickLeft;
        [GUI] ToggleButton _rStickRight;
        [GUI] ToggleButton _rStickButton;
        [GUI] ToggleButton _a;
        [GUI] ToggleButton _b;
        [GUI] ToggleButton _x;
        [GUI] ToggleButton _y;
        [GUI] ToggleButton _plus;
        [GUI] ToggleButton _r;
        [GUI] ToggleButton _zR;
        [GUI] ToggleButton _lSl;
        [GUI] ToggleButton _lSr;
        [GUI] ToggleButton _rSl;
        [GUI] ToggleButton _rSr;
        [GUI] Image        _controllerImage;
        [GUI] CheckButton  _enableRumble;
        [GUI] Box          _rumbleBox;
#pragma warning restore CS0649, IDE0044

        private MainWindow _mainWindow;
        private IGamepadDriver _gtk3KeyboardDriver;
        private IGamepad _selectedGamepad;
        private bool _mousePressed;
        private bool _middleMousePressed;

        public ControllerWindow(MainWindow mainWindow, PlayerIndex controllerId) : this(mainWindow, new Builder(""Ryujinx.Ui.Windows.ControllerWindow.glade""), controllerId) { }

        private ControllerWindow(MainWindow mainWindow, Builder builder, PlayerIndex controllerId) : base(builder.GetObject(""_controllerWin"").Handle)
        {
            _mainWindow = mainWindow;
            _selectedGamepad = null;

            // NOTE: To get input in this window, we need to bind a custom keyboard driver instead of using the InputManager one as the main window isn't focused...
            _gtk3KeyboardDriver = new GTK3KeyboardDriver(this);

            Icon = new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Logo_Ryujinx.png"");

            builder.Autoconnect(this);

            _playerIndex = controllerId;
            _inputConfig = ConfigurationState.Instance.Hid.InputConfig.Value.Find(inputConfig => inputConfig.PlayerIndex == _playerIndex);

            Title = $""Ryujinx - Controller Settings - {_playerIndex}"";

            if (_playerIndex == PlayerIndex.Handheld)
            {
                _controllerType.Append(ControllerType.Handheld.ToString(), ""Handheld"");
                _controllerType.Sensitive = false;
            }
            else
            {
                _controllerType.Append(ControllerType.ProController.ToString(), ""Pro Controller"");
                _controllerType.Append(ControllerType.JoyconPair.ToString(), ""Joycon Pair"");
                _controllerType.Append(ControllerType.JoyconLeft.ToString(), ""Joycon Left"");
                _controllerType.Append(ControllerType.JoyconRight.ToString(), ""Joycon Right"");
            }

            _controllerType.Active = 0; // Set initial value to first in list.

            // Bind Events.
            _lStick.Clicked         += ButtonForStick_Pressed;
            _lStickUp.Clicked       += Button_Pressed;
            _lStickDown.Clicked     += Button_Pressed;
            _lStickLeft.Clicked     += Button_Pressed;
            _lStickRight.Clicked    += Button_Pressed;
            _lStickButton.Clicked   += Button_Pressed;
            _dpadUp.Clicked         += Button_Pressed;
            _dpadDown.Clicked       += Button_Pressed;
            _dpadLeft.Clicked       += Button_Pressed;
            _dpadRight.Clicked      += Button_Pressed;
            _minus.Clicked          += Button_Pressed;
            _l.Clicked              += Button_Pressed;
            _zL.Clicked             += Button_Pressed;
            _lSl.Clicked            += Button_Pressed;
            _lSr.Clicked            += Button_Pressed;
            _rStick.Clicked         += ButtonForStick_Pressed;
            _rStickUp.Clicked       += Button_Pressed;
            _rStickDown.Clicked     += Button_Pressed;
            _rStickLeft.Clicked     += Button_Pressed;
            _rStickRight.Clicked    += Button_Pressed;
            _rStickButton.Clicked   += Button_Pressed;
            _a.Clicked              += Button_Pressed;
            _b.Clicked              += Button_Pressed;
            _x.Clicked              += Button_Pressed;
            _y.Clicked              += Button_Pressed;
            _plus.Clicked           += Button_Pressed;
            _r.Clicked              += Button_Pressed;
            _zR.Clicked             += Button_Pressed;
            _rSl.Clicked            += Button_Pressed;
            _rSr.Clicked            += Button_Pressed;
            _enableCemuHook.Clicked += CemuHookCheckButtonPressed;

            // Setup current values.
            UpdateInputDeviceList();
            SetAvailableOptions();

            ClearValues();
            if (_inputDevice.ActiveId != null)
            {
                SetCurrentValues();
            }

            mainWindow.InputManager.GamepadDriver.OnGamepadConnected += HandleOnGamepadConnected;
            mainWindow.InputManager.GamepadDriver.OnGamepadDisconnected += HandleOnGamepadDisconnected;

            if (_mainWindow.RendererWidget != null)
            {
                _mainWindow.RendererWidget.NpadManager.BlockInputUpdates();
            }
        }

        private void CemuHookCheckButtonPressed(object sender, EventArgs e)
        {
            UpdateCemuHookSpecificFieldsVisibility();
        }

        private void HandleOnGamepadDisconnected(string id)
        {
            Application.Invoke(delegate
            {
                UpdateInputDeviceList();
            });
        }

        private void HandleOnGamepadConnected(string id)
        {
            Application.Invoke(delegate
            {
                UpdateInputDeviceList();
            });
        }

        protected override void OnDestroyed()
        {
            _mainWindow.InputManager.GamepadDriver.OnGamepadConnected -= HandleOnGamepadConnected;
            _mainWindow.InputManager.GamepadDriver.OnGamepadDisconnected -= HandleOnGamepadDisconnected;

            if (_mainWindow.RendererWidget != null)
            {
                _mainWindow.RendererWidget.NpadManager.UnblockInputUpdates();
            }

            _selectedGamepad?.Dispose();

            _gtk3KeyboardDriver.Dispose();
        }

        private static string GetShrinkedGamepadName(string str)
        {
            const string ShrinkChars = ""..."";
            const int MaxSize = 50;

            if (str.Length > MaxSize)
            {
                return str.Substring(0, MaxSize - ShrinkChars.Length) + ShrinkChars;
            }

            return str;
        }

        private void UpdateInputDeviceList()
        {
            _inputDevice.RemoveAll();
            _inputDevice.Append(""disabled"", ""Disabled"");
            _inputDevice.SetActiveId(""disabled"");

            foreach (string id in _mainWindow.InputManager.KeyboardDriver.GamepadsIds)
            {
                IGamepad gamepad = _mainWindow.InputManager.KeyboardDriver.GetGamepad(id);

                if (gamepad != null)
                {
                    _inputDevice.Append($""keyboard/{id}"", GetShrinkedGamepadName($""{gamepad.Name} ({id})""));

                    gamepad.Dispose();
                }
            }

            foreach (string id in _mainWindow.InputManager.GamepadDriver.GamepadsIds)
            {
                IGamepad gamepad = _mainWindow.InputManager.GamepadDriver.GetGamepad(id);

                if (gamepad != null)
                {
                    _inputDevice.Append($""controller/{id}"", GetShrinkedGamepadName($""{gamepad.Name} ({id})""));

                    gamepad.Dispose();
                }
            }

            switch (_inputConfig)
            {
                case StandardKeyboardInputConfig keyboard:
                    _inputDevice.SetActiveId($""keyboard/{keyboard.Id}"");
                    break;
                case StandardControllerInputConfig controller:
                    _inputDevice.SetActiveId($""controller/{controller.Id}"");
                    break;
            }
        }

        private void UpdateCemuHookSpecificFieldsVisibility()
        {
            if (_enableCemuHook.Active)
            {
                _dsuServerHostBox.Show();
                _dsuServerPortBox.Show();
                _motionControllerSlot.Show();
                _motionAltBox.Show();
                _mirrorInput.Show();
            }
            else
            {
                _dsuServerHostBox.Hide();
                _dsuServerPortBox.Hide();
                _motionControllerSlot.Hide();
                _motionAltBox.Hide();
                _mirrorInput.Hide();
            }
        }

        private void SetAvailableOptions()
        {
            if (_inputDevice.ActiveId != null && _inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                ShowAll();
                _leftStickController.Hide();
                _rightStickController.Hide();
                _deadZoneLeftBox.Hide();
                _deadZoneRightBox.Hide();
                _triggerThresholdBox.Hide();
                _motionBox.Hide();
                _rumbleBox.Hide();
            }
            else if (_inputDevice.ActiveId != null && _inputDevice.ActiveId.StartsWith(""controller""))
            {
                ShowAll();
                _leftStickKeyboard.Hide();
                _rightStickKeyboard.Hide();

                UpdateCemuHookSpecificFieldsVisibility();
            }
            else
            {
                _settingsBox.Hide();
            }

            ClearValues();
        }

        private void SetCurrentValues()
        {
            SetControllerSpecificFields();

            SetProfiles();

            if (_inputDevice.ActiveId.StartsWith(""keyboard"") && _inputConfig is StandardKeyboardInputConfig)
            {
                SetValues(_inputConfig);
            }
            else if (_inputDevice.ActiveId.StartsWith(""controller"") && _inputConfig is StandardControllerInputConfig)
            {
                SetValues(_inputConfig);
            }
        }

        private void SetControllerSpecificFields()
        {
            _leftSideTriggerBox.Hide();
            _rightSideTriggerBox.Hide();
            _motionAltBox.Hide();

            switch (_controllerType.ActiveId)
            {
                case ""JoyconLeft"":
                    _leftSideTriggerBox.Show();
                    break;
                case ""JoyconRight"":
                    _rightSideTriggerBox.Show();
                    break;
                case ""JoyconPair"":
                    _motionAltBox.Show();
                    break;
            }

            _controllerImage.Pixbuf = _controllerType.ActiveId switch
            {
                ""ProController"" => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_ProCon.svg"", 400, 400),
                ""JoyconLeft""    => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_JoyConLeft.svg"", 400, 500),
                ""JoyconRight""   => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_JoyConRight.svg"", 400, 500),
                _               => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_JoyConPair.svg"", 400, 500),
            };
        }

        private void ClearValues()
        {
            _lStick.Label                     = ""Unbound"";
            _lStickUp.Label                   = ""Unbound"";
            _lStickDown.Label                 = ""Unbound"";
            _lStickLeft.Label                 = ""Unbound"";
            _lStickRight.Label                = ""Unbound"";
            _lStickButton.Label               = ""Unbound"";
            _dpadUp.Label                     = ""Unbound"";
            _dpadDown.Label                   = ""Unbound"";
            _dpadLeft.Label                   = ""Unbound"";
            _dpadRight.Label                  = ""Unbound"";
            _minus.Label                      = ""Unbound"";
            _l.Label                          = ""Unbound"";
            _zL.Label                         = ""Unbound"";
            _lSl.Label                        = ""Unbound"";
            _lSr.Label                        = ""Unbound"";
            _rStick.Label                     = ""Unbound"";
            _rStickUp.Label                   = ""Unbound"";
            _rStickDown.Label                 = ""Unbound"";
            _rStickLeft.Label                 = ""Unbound"";
            _rStickRight.Label                = ""Unbound"";
            _rStickButton.Label               = ""Unbound"";
            _a.Label                          = ""Unbound"";
            _b.Label                          = ""Unbound"";
            _x.Label                          = ""Unbound"";
            _y.Label                          = ""Unbound"";
            _plus.Label                       = ""Unbound"";
            _r.Label                          = ""Unbound"";
            _zR.Label                         = ""Unbound"";
            _rSl.Label                        = ""Unbound"";
            _rSr.Label                        = ""Unbound"";
            _controllerStrongRumble.Value     = 1;
            _controllerWeakRumble.Value       = 1;
            _controllerDeadzoneLeft.Value     = 0;
            _controllerDeadzoneRight.Value    = 0;
            _controllerTriggerThreshold.Value = 0;
            _mirrorInput.Active               = false;
            _enableMotion.Active              = false;
            _enableCemuHook.Active            = false;
            _slotNumber.Value                 = 0;
            _altSlotNumber.Value              = 0;
            _sensitivity.Value                = 100;
            _gyroDeadzone.Value               = 1;
            _dsuServerHost.Buffer.Text        = """";
            _dsuServerPort.Buffer.Text        = """";
            _enableRumble.Active              = false;
        }

        private void SetValues(InputConfig config)
        {
            switch (config)
            {
                case StandardKeyboardInputConfig keyboardConfig:
                    if (!_controllerType.SetActiveId(keyboardConfig.ControllerType.ToString()))
                    {
                        _controllerType.SetActiveId(_playerIndex == PlayerIndex.Handheld
                            ? ControllerType.Handheld.ToString()
                            : ControllerType.ProController.ToString());
                    }

                    _lStickUp.Label            = keyboardConfig.LeftJoyconStick.StickUp.ToString();
                    _lStickDown.Label          = keyboardConfig.LeftJoyconStick.StickDown.ToString();
                    _lStickLeft.Label          = keyboardConfig.LeftJoyconStick.StickLeft.ToString();
                    _lStickRight.Label         = keyboardConfig.LeftJoyconStick.StickRight.ToString();
                    _lStickButton.Label        = keyboardConfig.LeftJoyconStick.StickButton.ToString();
                    _dpadUp.Label              = keyboardConfig.LeftJoycon.DpadUp.ToString();
                    _dpadDown.Label            = keyboardConfig.LeftJoycon.DpadDown.ToString();
                    _dpadLeft.Label            = keyboardConfig.LeftJoycon.DpadLeft.ToString();
                    _dpadRight.Label           = keyboardConfig.LeftJoycon.DpadRight.ToString();
                    _minus.Label               = keyboardConfig.LeftJoycon.ButtonMinus.ToString();
                    _l.Label                   = keyboardConfig.LeftJoycon.ButtonL.ToString();
                    _zL.Label                  = keyboardConfig.LeftJoycon.ButtonZl.ToString();
                    _lSl.Label                 = keyboardConfig.LeftJoycon.ButtonSl.ToString();
                    _lSr.Label                 = keyboardConfig.LeftJoycon.ButtonSr.ToString();
                    _rStickUp.Label            = keyboardConfig.RightJoyconStick.StickUp.ToString();
                    _rStickDown.Label          = keyboardConfig.RightJoyconStick.StickDown.ToString();
                    _rStickLeft.Label          = keyboardConfig.RightJoyconStick.StickLeft.ToString();
                    _rStickRight.Label         = keyboardConfig.RightJoyconStick.StickRight.ToString();
                    _rStickButton.Label        = keyboardConfig.RightJoyconStick.StickButton.ToString();
                    _a.Label                   = keyboardConfig.RightJoycon.ButtonA.ToString();
                    _b.Label                   = keyboardConfig.RightJoycon.ButtonB.ToString();
                    _x.Label                   = keyboardConfig.RightJoycon.ButtonX.ToString();
                    _y.Label                   = keyboardConfig.RightJoycon.ButtonY.ToString();
                    _plus.Label                = keyboardConfig.RightJoycon.ButtonPlus.ToString();
                    _r.Label                   = keyboardConfig.RightJoycon.ButtonR.ToString();
                    _zR.Label                  = keyboardConfig.RightJoycon.ButtonZr.ToString();
                    _rSl.Label                 = keyboardConfig.RightJoycon.ButtonSl.ToString();
                    _rSr.Label                 = keyboardConfig.RightJoycon.ButtonSr.ToString();
                    break;

                case StandardControllerInputConfig controllerConfig:
                    if (!_controllerType.SetActiveId(controllerConfig.ControllerType.ToString()))
                    {
                        _controllerType.SetActiveId(_playerIndex == PlayerIndex.Handheld
                            ? ControllerType.Handheld.ToString()
                            : ControllerType.ProController.ToString());
                    }

                    _lStick.Label                     = controllerConfig.LeftJoyconStick.Joystick.ToString();
                    _invertLStickX.Active             = controllerConfig.LeftJoyconStick.InvertStickX;
                    _invertLStickY.Active             = controllerConfig.LeftJoyconStick.InvertStickY;
                    _lStickButton.Label               = controllerConfig.LeftJoyconStick.StickButton.ToString();
                    _dpadUp.Label                     = controllerConfig.LeftJoycon.DpadUp.ToString();
                    _dpadDown.Label                   = controllerConfig.LeftJoycon.DpadDown.ToString();
                    _dpadLeft.Label                   = controllerConfig.LeftJoycon.DpadLeft.ToString();
                    _dpadRight.Label                  = controllerConfig.LeftJoycon.DpadRight.ToString();
                    _minus.Label                      = controllerConfig.LeftJoycon.ButtonMinus.ToString();
                    _l.Label                          = controllerConfig.LeftJoycon.ButtonL.ToString();
                    _zL.Label                         = controllerConfig.LeftJoycon.ButtonZl.ToString();
                    _lSl.Label                        = controllerConfig.LeftJoycon.ButtonSl.ToString();
                    _lSr.Label                        = controllerConfig.LeftJoycon.ButtonSr.ToString();
                    _rStick.Label                     = controllerConfig.RightJoyconStick.Joystick.ToString();
                    _invertRStickX.Active             = controllerConfig.RightJoyconStick.InvertStickX;
                    _invertRStickY.Active             = controllerConfig.RightJoyconStick.InvertStickY;
                    _rStickButton.Label               = controllerConfig.RightJoyconStick.StickButton.ToString();
                    _a.Label                          = controllerConfig.RightJoycon.ButtonA.ToString();
                    _b.Label                          = controllerConfig.RightJoycon.ButtonB.ToString();
                    _x.Label                          = controllerConfig.RightJoycon.ButtonX.ToString();
                    _y.Label                          = controllerConfig.RightJoycon.ButtonY.ToString();
                    _plus.Label                       = controllerConfig.RightJoycon.ButtonPlus.ToString();
                    _r.Label                          = controllerConfig.RightJoycon.ButtonR.ToString();
                    _zR.Label                         = controllerConfig.RightJoycon.ButtonZr.ToString();
                    _rSl.Label                        = controllerConfig.RightJoycon.ButtonSl.ToString();
                    _rSr.Label                        = controllerConfig.RightJoycon.ButtonSr.ToString();
                    _controllerStrongRumble.Value     = controllerConfig.Rumble.StrongRumble;
                    _controllerWeakRumble.Value       = controllerConfig.Rumble.WeakRumble;
                    _enableRumble.Active              = controllerConfig.Rumble.EnableRumble;
                    _controllerDeadzoneLeft.Value     = controllerConfig.DeadzoneLeft;
                    _controllerDeadzoneRight.Value    = controllerConfig.DeadzoneRight;
                    _controllerTriggerThreshold.Value = controllerConfig.TriggerThreshold;
                    _sensitivity.Value                = controllerConfig.Motion.Sensitivity;
                    _gyroDeadzone.Value               = controllerConfig.Motion.GyroDeadzone;
                    _enableMotion.Active              = controllerConfig.Motion.EnableMotion;
                    _enableCemuHook.Active            = controllerConfig.Motion.MotionBackend == MotionInputBackendType.CemuHook;

                    if (controllerConfig.Motion is CemuHookMotionConfigController cemuHookMotionConfig)
                    {
                        _slotNumber.Value             = cemuHookMotionConfig.Slot;
                        _altSlotNumber.Value          = cemuHookMotionConfig.AltSlot;
                        _mirrorInput.Active           = cemuHookMotionConfig.MirrorInput;
                        _dsuServerHost.Buffer.Text    = cemuHookMotionConfig.DsuServerHost;
                        _dsuServerPort.Buffer.Text    = cemuHookMotionConfig.DsuServerPort.ToString();
                    }

                    break;
            }
        }

        private InputConfig GetValues()
        {
            if (_inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                Enum.TryParse(_lStickUp.Label,     out Key lStickUp);
                Enum.TryParse(_lStickDown.Label,   out Key lStickDown);
                Enum.TryParse(_lStickLeft.Label,   out Key lStickLeft);
                Enum.TryParse(_lStickRight.Label,  out Key lStickRight);
                Enum.TryParse(_lStickButton.Label, out Key lStickButton);
                Enum.TryParse(_dpadUp.Label,       out Key lDPadUp);
                Enum.TryParse(_dpadDown.Label,     out Key lDPadDown);
                Enum.TryParse(_dpadLeft.Label,     out Key lDPadLeft);
                Enum.TryParse(_dpadRight.Label,    out Key lDPadRight);
                Enum.TryParse(_minus.Label,        out Key lButtonMinus);
                Enum.TryParse(_l.Label,            out Key lButtonL);
                Enum.TryParse(_zL.Label,           out Key lButtonZl);
                Enum.TryParse(_lSl.Label,          out Key lButtonSl);
                Enum.TryParse(_lSr.Label,          out Key lButtonSr);

                Enum.TryParse(_rStickUp.Label,     out Key rStickUp);
                Enum.TryParse(_rStickDown.Label,   out Key rStickDown);
                Enum.TryParse(_rStickLeft.Label,   out Key rStickLeft);
                Enum.TryParse(_rStickRight.Label,  out Key rStickRight);
                Enum.TryParse(_rStickButton.Label, out Key rStickButton);
                Enum.TryParse(_a.Label,            out Key rButtonA);
                Enum.TryParse(_b.Label,            out Key rButtonB);
                Enum.TryParse(_x.Label,            out Key rButtonX);
                Enum.TryParse(_y.Label,            out Key rButtonY);
                Enum.TryParse(_plus.Label,         out Key rButtonPlus);
                Enum.TryParse(_r.Label,            out Key rButtonR);
                Enum.TryParse(_zR.Label,           out Key rButtonZr);
                Enum.TryParse(_rSl.Label,          out Key rButtonSl);
                Enum.TryParse(_rSr.Label,          out Key rButtonSr);

                return new StandardKeyboardInputConfig
                {
                    Backend          = InputBackendType.WindowKeyboard,
                    Version          = InputConfig.CurrentVersion,
                    Id               = _inputDevice.ActiveId.Split(""/"")[1],
                    ControllerType   = Enum.Parse<ControllerType>(_controllerType.ActiveId),
                    PlayerIndex      = _playerIndex,
                    LeftJoycon       = new LeftJoyconCommonConfig<Key>
                    {
                        ButtonMinus  = lButtonMinus,
                        ButtonL      = lButtonL,
                        ButtonZl     = lButtonZl,
                        ButtonSl     = lButtonSl,
                        ButtonSr     = lButtonSr,
                        DpadUp       = lDPadUp,
                        DpadDown     = lDPadDown,
                        DpadLeft     = lDPadLeft,
                        DpadRight    = lDPadRight
                    },
                    LeftJoyconStick = new JoyconConfigKeyboardStick<Key>
                    {
                        StickUp      = lStickUp,
                        StickDown    = lStickDown,
                        StickLeft    = lStickLeft,
                        StickRight   = lStickRight,
                        StickButton  = lStickButton,
                    },
                    RightJoycon      = new RightJoyconCommonConfig<Key>
                    {
                        ButtonA      = rButtonA,
                        ButtonB      = rButtonB,
                        ButtonX      = rButtonX,
                        ButtonY      = rButtonY,
                        ButtonPlus   = rButtonPlus,
                        ButtonR      = rButtonR,
                        ButtonZr     = rButtonZr,
                        ButtonSl     = rButtonSl,
                        ButtonSr     = rButtonSr
                    },
                    RightJoyconStick = new JoyconConfigKeyboardStick<Key>
                    {
                        StickUp      = rStickUp,
                        StickDown    = rStickDown,
                        StickLeft    = rStickLeft,
                        StickRight   = rStickRight,
                        StickButton  = rStickButton,
                    },
                };
            }
            
            if (_inputDevice.ActiveId.StartsWith(""controller""))
            {
                Enum.TryParse(_lStick.Label,      out ConfigStickInputId lStick);
                Enum.TryParse(_lStickButton.Label, out ConfigGamepadInputId lStickButton);
                Enum.TryParse(_minus.Label,        out ConfigGamepadInputId lButtonMinus);
                Enum.TryParse(_l.Label,            out ConfigGamepadInputId lButtonL);
                Enum.TryParse(_zL.Label,           out ConfigGamepadInputId lButtonZl);
                Enum.TryParse(_lSl.Label,          out ConfigGamepadInputId lButtonSl);
                Enum.TryParse(_lSr.Label,          out ConfigGamepadInputId lButtonSr);
                Enum.TryParse(_dpadUp.Label,       out ConfigGamepadInputId lDPadUp);
                Enum.TryParse(_dpadDown.Label,     out ConfigGamepadInputId lDPadDown);
                Enum.TryParse(_dpadLeft.Label,     out ConfigGamepadInputId lDPadLeft);
                Enum.TryParse(_dpadRight.Label,    out ConfigGamepadInputId lDPadRight);

                Enum.TryParse(_rStick.Label,      out ConfigStickInputId rStick);
                Enum.TryParse(_rStickButton.Label, out ConfigGamepadInputId rStickButton);
                Enum.TryParse(_a.Label,            out ConfigGamepadInputId rButtonA);
                Enum.TryParse(_b.Label,            out ConfigGamepadInputId rButtonB);
                Enum.TryParse(_x.Label,            out ConfigGamepadInputId rButtonX);
                Enum.TryParse(_y.Label,            out ConfigGamepadInputId rButtonY);
                Enum.TryParse(_plus.Label,         out ConfigGamepadInputId rButtonPlus);
                Enum.TryParse(_r.Label,            out ConfigGamepadInputId rButtonR);
                Enum.TryParse(_zR.Label,           out ConfigGamepadInputId rButtonZr);
                Enum.TryParse(_rSl.Label,          out ConfigGamepadInputId rButtonSl);
                Enum.TryParse(_rSr.Label,          out ConfigGamepadInputId rButtonSr);

                int.TryParse(_dsuServerPort.Buffer.Text, out int port);

                MotionConfigController motionConfig;

                if (_enableCemuHook.Active)
                {
                    motionConfig      = new CemuHookMotionConfigController
                    {
                        MotionBackend = MotionInputBackendType.CemuHook,
                        EnableMotion  = _enableMotion.Active,
                        Sensitivity   = (int)_sensitivity.Value,
                        GyroDeadzone  = _gyroDeadzone.Value,
                        MirrorInput   = _mirrorInput.Active,
                        Slot          = (int)_slotNumber.Value,
                        AltSlot       = (int)_altSlotNumber.Value,
                        DsuServerHost = _dsuServerHost.Buffer.Text,
                        DsuServerPort = port
                    };
                }
                else
                {
                    motionConfig      = new StandardMotionConfigController
                    {
                        MotionBackend = MotionInputBackendType.GamepadDriver,
                        EnableMotion  = _enableMotion.Active,
                        Sensitivity   = (int)_sensitivity.Value,
                        GyroDeadzone  = _gyroDeadzone.Value,
                    };
                }

                return new StandardControllerInputConfig
                {
                    Backend          = InputBackendType.GamepadSDL2,
                    Version          = InputConfig.CurrentVersion,
                    Id               = _inputDevice.ActiveId.Split(""/"")[1].Split("" "")[0],
                    ControllerType   = Enum.Parse<ControllerType>(_controllerType.ActiveId),
                    PlayerIndex      = _playerIndex,
                    DeadzoneLeft     = (float)_controllerDeadzoneLeft.Value,
                    DeadzoneRight    = (float)_controllerDeadzoneRight.Value,
                    TriggerThreshold = (float)_controllerTriggerThreshold.Value,
                    LeftJoycon       = new LeftJoyconCommonConfig<ConfigGamepadInputId>
                    {
                        ButtonMinus  = lButtonMinus,
                        ButtonL      = lButtonL,
                        ButtonZl     = lButtonZl,
                        ButtonSl     = lButtonSl,
                        ButtonSr     = lButtonSr,
                        DpadUp       = lDPadUp,
                        DpadDown     = lDPadDown,
                        DpadLeft     = lDPadLeft,
                        DpadRight    = lDPadRight
                    },
                    LeftJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                    {
                        InvertStickX = _invertLStickX.Active,
                        Joystick     = lStick,
                        InvertStickY = _invertLStickY.Active,
                        StickButton  = lStickButton,
                    },
                    RightJoycon      = new RightJoyconCommonConfig<ConfigGamepadInputId>
                    {
                        ButtonA      = rButtonA,
                        ButtonB      = rButtonB,
                        ButtonX      = rButtonX,
                        ButtonY      = rButtonY,
                        ButtonPlus   = rButtonPlus,
                        ButtonR      = rButtonR,
                        ButtonZr     = rButtonZr,
                        ButtonSl     = rButtonSl,
                        ButtonSr     = rButtonSr
                    },
                    RightJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                    {
                        InvertStickX = _invertRStickX.Active,
                        Joystick     = rStick,
                        InvertStickY = _invertRStickY.Active,
                        StickButton  = rStickButton,
                    },
                    Motion           = motionConfig,
                    Rumble           = new RumbleConfigController
                    {
                        StrongRumble = (float)_controllerStrongRumble.Value,
                        WeakRumble   = (float)_controllerWeakRumble.Value,
                        EnableRumble = _enableRumble.Active
                    }
                };
            }

            if (!_inputDevice.ActiveId.StartsWith(""disabled""))
            {
                GtkDialog.CreateErrorDialog(""Invalid data detected in one or more fields; the configuration was not saved."");
            }

            return null;
        }

        private string GetProfileBasePath()
        {
            if (_inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                return System.IO.Path.Combine(AppDataManager.ProfilesDirPath, ""keyboard"");
            }
            else if (_inputDevice.ActiveId.StartsWith(""controller""))
            {
                return System.IO.Path.Combine(AppDataManager.ProfilesDirPath, ""controller"");
            }

            return AppDataManager.ProfilesDirPath;
        }

        //
        // Events
        //
        private void InputDevice_Changed(object sender, EventArgs args)
        {
            SetAvailableOptions();
            SetControllerSpecificFields();

            _selectedGamepad?.Dispose();
            _selectedGamepad = null;

            if (_inputDevice.ActiveId != null)
            {
                SetProfiles();

                string id = GetCurrentGamepadId();

                if (_inputDevice.ActiveId.StartsWith(""keyboard""))
                {
                    if (_inputConfig is StandardKeyboardInputConfig)
                    {
                        SetValues(_inputConfig);
                    }

                    if (_mainWindow.InputManager.KeyboardDriver is GTK3KeyboardDriver)
                    {
                        // NOTE: To get input in this window, we need to bind a custom keyboard driver instead of using the InputManager one as the main window isn't focused...
                        _selectedGamepad = _gtk3KeyboardDriver.GetGamepad(id);
                    }
                    else
                    {
                        _selectedGamepad = _mainWindow.InputManager.KeyboardDriver.GetGamepad(id);
                    }
                }
                else if (_inputDevice.ActiveId.StartsWith(""controller""))
                {
                    if (_inputConfig is StandardControllerInputConfig)
                    {
                        SetValues(_inputConfig);
                    }

                    _selectedGamepad = _mainWindow.InputManager.GamepadDriver.GetGamepad(id);
                }
            }
        }

        private string GetCurrentGamepadId()
        {
            if (_inputDevice.ActiveId == null || _inputDevice.ActiveId == ""disabled"")
            {
                return null;
            }

            return _inputDevice.ActiveId.Split(""/"")[1].Split("" "")[0];
        }

        private void Controller_Changed(object sender, EventArgs args)
        {
            SetControllerSpecificFields();
        }

        private IButtonAssigner CreateButtonAssigner(bool forStick)
        {
            IButtonAssigner assigner;

            if (_inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                assigner = new KeyboardKeyAssigner((IKeyboard)_selectedGamepad);
            }
            else if (_inputDevice.ActiveId.StartsWith(""controller""))
            {
                assigner = new GamepadButtonAssigner(_selectedGamepad, (float)_controllerTriggerThreshold.Value, forStick);
            }
            else
            {
                throw new Exception(""Controller not supported"");
            }
            
            return assigner;
        }

        private void HandleButtonPressed(ToggleButton button, bool forStick)
        {
            if (_isWaitingForInput)
            {
                button.Active = false;

                return;
            }

            _mousePressed = false;

            ButtonPressEvent += MouseClick;

            IButtonAssigner assigner = CreateButtonAssigner(forStick);

            _isWaitingForInput = true;

            // Open GTK3 keyboard for cancel operations
            IKeyboard keyboard = (IKeyboard)_gtk3KeyboardDriver.GetGamepad(""0"");

            Thread inputThread = new Thread(() =>
            {
                assigner.Initialize();

                while (true)
                {
                    Thread.Sleep(10);
                    assigner.ReadInput();

                    if (_mousePressed || keyboard.IsPressed(Ryujinx.Input.Key.Escape) || assigner.HasAnyButtonPressed() || assigner.ShouldCancel())
                    {
                        break;
                    }
                }

                string pressedButton = assigner.GetPressedButton();

                Application.Invoke(delegate
                {
                    if (_middleMousePressed)
                    {
                        button.Label = ""Unbound"";
                    }
                    else if (pressedButton != """")
                    {
                        button.Label = pressedButton;
                    }

                    _middleMousePressed = false;

                    ButtonPressEvent -= MouseClick;
                    keyboard.Dispose();

                    button.Active = false;
                    _isWaitingForInput = false;
                });
            });

            inputThread.Name = ""GUI.InputThread"";
            inputThread.IsBackground = true;
            inputThread.Start();
        }

        private void Button_Pressed(object sender, EventArgs args)
        {
            HandleButtonPressed((ToggleButton)sender, false);
        }

        private void ButtonForStick_Pressed(object sender, EventArgs args)
        {
            HandleButtonPressed((ToggleButton)sender, true);
        }

        private void MouseClick(object sender, ButtonPressEventArgs args)
        {
            _mousePressed = true;
            _middleMousePressed = args.Event.Button == 2;
        }

        private void SetProfiles()
        {
            _profile.RemoveAll();

            string basePath = GetProfileBasePath();

            if (!Directory.Exists(basePath))
            {
                Directory.CreateDirectory(basePath);
            }

            if (_inputDevice.ActiveId == null|| _inputDevice.ActiveId.Equals(""disabled""))
            {
                _profile.Append(""default"", ""None"");
            }
            else
            {
                _profile.Append(""default"", ""Default"");

                foreach (string profile in Directory.GetFiles(basePath, ""*.*"", SearchOption.AllDirectories))
                {
                    _profile.Append(System.IO.Path.GetFileName(profile), System.IO.Path.GetFileNameWithoutExtension(profile));
                }
            }

            _profile.SetActiveId(""default"");
        }

        private void ProfileLoad_Activated(object sender, EventArgs args)
        {
            ((ToggleButton)sender).SetStateFlags(StateFlags.Normal, true);

            if (_inputDevice.ActiveId == ""disabled"" || _profile.ActiveId == null) return;

            InputConfig config = null;
            int         pos    = _profile.Active;

            if (_profile.ActiveId == ""default"")
            {
                if (_inputDevice.ActiveId.StartsWith(""keyboard""))
                {
                    config = new StandardKeyboardInputConfig
                    {
                        Version          = InputConfig.CurrentVersion,
                        Backend          = InputBackendType.WindowKeyboard,
                        Id               = null,
                        ControllerType   = ControllerType.ProController,
                        LeftJoycon       = new LeftJoyconCommonConfig<Key>
                        {
                            DpadUp       = Key.Up,
                            DpadDown     = Key.Down,
                            DpadLeft     = Key.Left,
                            DpadRight    = Key.Right,
                            ButtonMinus  = Key.Minus,
                            ButtonL      = Key.E,
                            ButtonZl     = Key.Q,
                            ButtonSl     = Key.Unbound,
                            ButtonSr     = Key.Unbound
                        },

                        LeftJoyconStick  = new JoyconConfigKeyboardStick<Key>
                        {
                            StickUp      = Key.W,
                            StickDown    = Key.S,
                            StickLeft    = Key.A,
                            StickRight   = Key.D,
                            StickButton  = Key.F,
                        },

                        RightJoycon      = new RightJoyconCommonConfig<Key>
                        {
                            ButtonA      = Key.Z,
                            ButtonB      = Key.X,
                            ButtonX      = Key.C,
                            ButtonY      = Key.V,
                            ButtonPlus   = Key.Plus,
                            ButtonR      = Key.U,
                            ButtonZr     = Key.O,
                            ButtonSl     = Key.Unbound,
                            ButtonSr     = Key.Unbound
                        },

                        RightJoyconStick = new JoyconConfigKeyboardStick<Key>
                        {
                            StickUp      = Key.I,
                            StickDown    = Key.K,
                            StickLeft    = Key.J,
                            StickRight   = Key.L,
                            StickButton  = Key.H,
                        }
                    };
                }
                else if (_inputDevice.ActiveId.StartsWith(""controller""))
                {
                    bool isNintendoStyle = _inputDevice.ActiveText.Contains(""Nintendo"");

                    config = new StandardControllerInputConfig
                    {
                        Version          = InputConfig.CurrentVersion,
                        Backend          = InputBackendType.GamepadSDL2,
                        Id               = null,
                        ControllerType   = ControllerType.JoyconPair,
                        DeadzoneLeft     = 0.1f,
                        DeadzoneRight    = 0.1f,
                        TriggerThreshold = 0.5f,
                        LeftJoycon = new LeftJoyconCommonConfig<ConfigGamepadInputId>
                        {
                            DpadUp       = ConfigGamepadInputId.DpadUp,
                            DpadDown     = ConfigGamepadInputId.DpadDown,
                            DpadLeft     = ConfigGamepadInputId.DpadLeft,
                            DpadRight    = ConfigGamepadInputId.DpadRight,
                            ButtonMinus  = ConfigGamepadInputId.Minus,
                            ButtonL      = ConfigGamepadInputId.LeftShoulder,
                            ButtonZl     = ConfigGamepadInputId.LeftTrigger,
                            ButtonSl     = ConfigGamepadInputId.Unbound,
                            ButtonSr     = ConfigGamepadInputId.Unbound,
                        },

                        LeftJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                        {
                            Joystick     = ConfigStickInputId.Left,
                            StickButton  = ConfigGamepadInputId.LeftStick,
                            InvertStickX = false,
                            InvertStickY = false,
                        },

                        RightJoycon = new RightJoyconCommonConfig<ConfigGamepadInputId>
                        {
                            ButtonA      = isNintendoStyle ? ConfigGamepadInputId.A : ConfigGamepadInputId.B,
                            ButtonB      = isNintendoStyle ? ConfigGamepadInputId.B : ConfigGamepadInputId.A,
                            ButtonX      = isNintendoStyle ? ConfigGamepadInputId.X : ConfigGamepadInputId.Y,
                            ButtonY      = isNintendoStyle ? ConfigGamepadInputId.Y : ConfigGamepadInputId.X,
                            ButtonPlus   = ConfigGamepadInputId.Plus,
                            ButtonR      = ConfigGamepadInputId.RightShoulder,
                            ButtonZr     = ConfigGamepadInputId.RightTrigger,
                            ButtonSl     = ConfigGamepadInputId.Unbound,
                            ButtonSr     = ConfigGamepadInputId.Unbound,
                        },

                        RightJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                        {
                            Joystick     = ConfigStickInputId.Right,
                            StickButton  = ConfigGamepadInputId.RightStick,
                            InvertStickX = false,
                            InvertStickY = false,
                        },

                        Motion = new StandardMotionConfigController
                        {
                            MotionBackend = MotionInputBackendType.GamepadDriver,
                            EnableMotion = true,
                            Sensitivity  = 100,
                            GyroDeadzone = 1,
                        },
                        Rumble = new RumbleConfigController
                        {
                            StrongRumble = 1f,
                            WeakRumble   = 1f,
                            EnableRumble = false
                        }
                    };
                }
            }
            else
            {
                string path = System.IO.Path.Combine(GetProfileBasePath(), _profile.ActiveId);

                if (!File.Exists(path))
                {
                    if (pos >= 0)
                    {
                        _profile.Remove(pos);
                    }

                    return;
                }

                try
                {
                    using (Stream stream = File.OpenRead(path))
                    {
                        config = JsonHelper.Deserialize<InputConfig>(stream);
                    }
                }
                catch (JsonException) { }
            }

            SetValues(config);
        }

        private void ProfileAdd_Activated(object sender, EventArgs args)
        {
            ((ToggleButton)sender).SetStateFlags(StateFlags.Normal, true);

            if (_inputDevice.ActiveId == ""disabled"") return;

            InputConfig   inputConfig   = GetValues();
            ProfileDialog profileDialog = new ProfileDialog();

            if (inputConfig == null) return;

            if (profileDialog.Run() == (int)ResponseType.Ok)
            {
                string path = System.IO.Path.Combine(GetProfileBasePath(), profileDialog.FileName);
                string jsonString;

                jsonString = JsonHelper.Serialize(inputConfig, true);

                File.WriteAllText(path, jsonString);
            }

            profileDialog.Dispose();

            SetProfiles();
        }

        private void ProfileRemove_Activated(object sender, EventArgs args)
        {
            ((ToggleButton) sender).SetStateFlags(StateFlags.Normal, true);

            if (_inputDevice.ActiveId == ""disabled"" || _profile.ActiveId == ""default"" || _profile.ActiveId == null) return;

            MessageDialog confirmDialog = GtkDialog.CreateConfirmationDialog(""Deleting Profile"", ""This action is irreversible, are you sure you want to continue?"");

            if (confirmDialog.Run() == (int)ResponseType.Yes)
            {
                string path = System.IO.Path.Combine(GetProfileBasePath(), _profile.ActiveId);

                if (File.Exists(path))
                {
                    File.Delete(path);
                }

                SetProfiles();
            }
        }

        private void SaveToggle_Activated(object sender, EventArgs args)
        {
            InputConfig inputConfig = GetValues();

            var newConfig = new List<InputConfig>();
            newConfig.AddRange(ConfigurationState.Instance.Hid.InputConfig.Value);

            if (_inputConfig == null && inputConfig != null)
            {
                newConfig.Add(inputConfig);
            }
            else
            {
                if (_inputDevice.ActiveId == ""disabled"")
                {
                    newConfig.Remove(_inputConfig);
                }
                else if (inputConfig != null)
                {
                    int index = newConfig.IndexOf(_inputConfig);

                    newConfig[index] = inputConfig;
                }
            }

            if (_mainWindow.RendererWidget != null)
            {
                _mainWindow.RendererWidget.NpadManager.ReloadConfiguration(newConfig, ConfigurationState.Instance.Hid.EnableKeyboard, ConfigurationState.Instance.Hid.EnableMouse);
            }

            // Atomically replace and signal input change.
            // NOTE: Do not modify InputConfig.Value directly as other code depends on the on-change event.
            ConfigurationState.Instance.Hid.InputConfig.Value = newConfig;

            ConfigurationState.Instance.ToFileFormat().SaveConfig(Program.ConfigurationPath);

            Dispose();
        }

        private void CloseToggle_Activated(object sender, EventArgs args)
        {
            Dispose();
        }
    }",1,439 334 2000 58 2001 123 437 441 2002 2003 59 437 441 2004 2005 59 437 323 2006 59 35 435 2007 2008 2009 44 2010 91 2011 93 2012 2013 59 91 2011 93 2012 2014 59 91 2011 93 2012 2015 59 91 2011 93 2012 2016 59 91 2011 93 2012 2017 59 91 2011 93 2012 2018 59 91 2011 93 2012 2019 59 91 2011 93 2012 2020 59 91 2011 93 2012 2021 59 91 2011 93 2022 2023 59 91 2011 93 2022 2024 59 91 2011 93 2022 2025 59 91 2011 93 2026 2027 59 91 2011 93 2026 2028 59 91 2011 93 2029 2030 59 91 2011 93 2029 2031 59 91 2011 93 2032 2033 59 91 2011 93 2032 2034 59 91 2011 93 2032 2035 59 91 2011 93 2032 2036 59 91 2011 93 2032 2037 59 91 2011 93 2032 2038 59 91 2011 93 2039 2040 59 91 2011 93 2039 2041 59 91 2011 93 2032 2042 59 91 2011 93 2039 2043 59 91 2011 93 2039 2044 59 91 2011 93 2032 2045 59 91 2011 93 2039 2046 59 91 2011 93 2039 2047 59 91 2011 93 2032 2048 59 91 2011 93 2029 2049 59 91 2011 93 2050 2051 59 91 2011 93 2022 2052 59 91 2011 93 2022 2053 59 91 2011 93 2050 2054 59 91 2011 93 2050 2055 59 91 2011 93 2050 2056 59 91 2011 93 2050 2057 59 91 2011 93 2050 2058 59 91 2011 93 2050 2059 59 91 2011 93 2050 2060 59 91 2011 93 2050 2061 59 91 2011 93 2050 2062 59 91 2011 93 2050 2063 59 91 2011 93 2050 2064 59 91 2011 93 2050 2065 59 91 2011 93 2050 2066 59 91 2011 93 2022 2067 59 91 2011 93 2022 2068 59 91 2011 93 2050 2069 59 91 2011 93 2050 2070 59 91 2011 93 2050 2071 59 91 2011 93 2050 2072 59 91 2011 93 2050 2073 59 91 2011 93 2050 2074 59 91 2011 93 2050 2075 59 91 2011 93 2050 2076 59 91 2011 93 2050 2077 59 91 2011 93 2050 2078 59 91 2011 93 2050 2079 59 91 2011 93 2050 2080 59 91 2011 93 2050 2081 59 91 2011 93 2050 2082 59 91 2011 93 2050 2083 59 91 2011 93 2050 2084 59 91 2011 93 2085 2086 59 91 2011 93 2022 2087 59 91 2011 93 2032 2088 59 35 435 2007 2089 2009 44 2010 437 2090 2091 59 437 2092 2093 59 437 2094 2095 59 437 323 2096 59 437 323 2097 59 439 2000 40 2090 2098 44 2002 2099 41 58 467 40 2098 44 418 2100 40 648 41 44 2099 41 123 125 437 2000 40 2090 2098 44 2100 2101 44 2002 2099 41 58 320 40 2101 46 2102 40 648 41 46 2103 41 123 2091 61 2098 59 2095 61 424 59 621 2093 61 418 2104 40 467 41 59 2105 61 418 2106 46 2107 40 2108 46 2109 40 41 44 648 41 59 2101 46 2110 40 467 41 59 2003 61 2099 59 2005 61 2111 46 2112 46 2113 46 2004 46 2114 46 2115 40 2116 619 2116 46 2002 614 2003 41 59 2117 61 36 648 59 392 40 2003 614 2002 46 2118 41 123 2049 46 2119 40 2120 46 2118 46 2121 40 41 44 648 41 59 2049 46 2122 61 380 59 125 360 123 2049 46 2123 40 2124 46 2125 46 2126 40 41 44 648 41 59 2049 46 2123 40 2124 46 2127 46 2126 40 41 44 648 41 59 2049 46 2123 40 2124 46 2128 46 2126 40 41 44 648 41 59 2049 46 2123 40 2124 46 2129 46 2126 40 41 44 648 41 59 125 2049 46 2130 61 1500 59 621 621 2051 46 2131 636 2132 59 2054 46 2131 636 2133 59 2055 46 2131 636 2133 59 2056 46 2131 636 2133 59 2057 46 2131 636 2133 59 2058 46 2131 636 2133 59 2059 46 2131 636 2133 59 2060 46 2131 636 2133 59 2061 46 2131 636 2133 59 2062 46 2131 636 2133 59 2063 46 2131 636 2133 59 2064 46 2131 636 2133 59 2065 46 2131 636 2133 59 2081 46 2131 636 2133 59 2082 46 2131 636 2133 59 2066 46 2131 636 2132 59 2069 46 2131 636 2133 59 2070 46 2131 636 2133 59 2071 46 2131 636 2133 59 2072 46 2131 636 2133 59 2073 46 2131 636 2133 59 2074 46 2131 636 2133 59 2075 46 2131 636 2133 59 2076 46 2131 636 2133 59 2077 46 2131 636 2133 59 2078 46 2131 636 2133 59 2079 46 2131 636 2133 59 2080 46 2131 636 2133 59 2083 46 2131 636 2133 59 2084 46 2131 636 2133 59 2024 46 2131 636 2134 59 621 2135 40 41 59 2136 40 41 59 2137 40 41 59 392 40 2030 46 2138 631 424 41 123 2139 40 41 59 125 2098 46 2140 46 2141 46 2142 636 2143 59 2098 46 2140 46 2141 46 2144 636 2145 59 392 40 2091 46 2146 631 424 41 123 2091 46 2146 46 2147 46 2148 40 41 59 125 125 437 492 2149 40 426 2150 44 2151 2152 41 123 2153 40 41 59 125 437 492 2154 40 461 2155 41 123 2156 46 2157 40 352 123 2158 40 41 59 125 41 59 125 437 492 2159 40 461 2155 41 123 2160 46 2161 40 352 123 2162 40 41 59 125 41 59 125 438 431 492 2163 40 41 123 2091 46 2164 46 2165 46 2166 628 2159 59 2091 46 2164 46 2165 46 2167 628 2154 59 392 40 2091 46 2168 631 424 41 123 2091 46 2168 46 2169 46 2170 40 41 59 125 2095 634 2171 40 41 59 2093 46 2171 40 41 59 125 437 457 461 2172 40 461 2173 41 123 341 461 2174 61 648 59 341 404 2175 61 1503 59 392 40 2173 46 2176 62 2175 41 123 450 2173 46 2177 40 1500 44 2175 45 2174 46 2176 41 43 2174 59 125 450 2173 59 125 437 492 2178 40 41 123 2030 46 2179 40 41 59 2030 46 2180 40 648 44 648 41 59 2030 46 2181 40 648 41 59 386 40 461 2155 398 2091 46 2182 46 2183 46 2184 41 123 2094 2185 61 2091 46 2182 46 2183 46 2186 40 2155 41 59 392 40 2185 631 424 41 123 2030 46 2180 40 36 648 44 2172 40 36 648 41 41 59 2185 46 2187 40 41 59 125 125 386 40 461 2155 398 2091 46 2182 46 2188 46 2184 41 123 2094 2189 61 2091 46 2182 46 2188 46 2190 40 2155 41 59 392 40 2189 631 424 41 123 2030 46 2180 40 36 648 44 2172 40 36 648 41 41 59 2189 46 2191 40 41 59 125 125 464 40 2005 41 123 328 2192 2193 58 2030 46 2181 40 36 648 41 59 325 59 328 2194 2195 58 2030 46 2181 40 36 648 41 59 325 59 125 125 437 492 2196 40 41 123 392 40 2024 46 2197 41 123 2036 46 2198 40 41 59 2037 46 2198 40 41 59 2038 46 2198 40 41 59 2034 46 2198 40 41 59 2025 46 2198 40 41 59 125 360 123 2036 46 2199 40 41 59 2037 46 2199 40 41 59 2038 46 2199 40 41 59 2034 46 2199 40 41 59 2025 46 2199 40 41 59 125 125 437 492 2200 40 41 123 392 40 2030 46 2201 631 424 605 2030 46 2201 46 2202 40 648 41 41 123 2203 40 41 59 2041 46 2204 40 41 59 2044 46 2204 40 41 59 2042 46 2204 40 41 59 2045 46 2204 40 41 59 2048 46 2204 40 41 59 2035 46 2204 40 41 59 2088 46 2204 40 41 59 125 360 392 40 2030 46 2201 631 424 605 2030 46 2201 46 2202 40 648 41 41 123 2205 40 41 59 2040 46 2206 40 41 59 2043 46 2206 40 41 59 2196 40 41 59 125 360 123 2033 46 2207 40 41 59 125 2208 40 41 59 125 437 492 2209 40 41 123 2210 40 41 59 2211 40 41 59 392 40 2030 46 2212 46 2213 40 648 41 605 2005 407 2214 41 123 2215 40 2005 41 59 125 360 392 40 2030 46 2212 46 2213 40 648 41 605 2005 407 2216 41 123 2217 40 2005 41 59 125 125 437 492 2218 40 41 123 2046 46 2219 40 41 59 2047 46 2219 40 41 59 2034 46 2219 40 41 59 464 40 2049 46 2220 41 123 328 648 58 2046 46 2221 40 41 59 325 59 328 648 58 2047 46 2221 40 41 59 325 59 328 648 58 2034 46 2221 40 41 59 325 59 125 2086 46 2222 61 2049 46 2220 464 123 648 619 418 2223 46 2222 40 2224 46 2225 40 41 44 648 44 1504 44 1504 41 44 648 619 418 2223 46 2222 40 2224 46 2225 40 41 44 648 44 1504 44 1504 41 44 648 619 418 2223 46 2222 40 2224 46 2225 40 41 44 648 44 1504 44 1504 41 44 2226 619 418 2223 46 2222 40 2224 46 2225 40 41 44 648 44 1504 44 1504 41 44 125 59 125 437 492 2227 40 41 123 2051 46 2228 61 648 59 2054 46 2228 61 648 59 2055 46 2228 61 648 59 2056 46 2228 61 648 59 2057 46 2228 61 648 59 2058 46 2228 61 648 59 2059 46 2228 61 648 59 2060 46 2228 61 648 59 2061 46 2228 61 648 59 2062 46 2228 61 648 59 2063 46 2228 61 648 59 2064 46 2228 61 648 59 2065 46 2228 61 648 59 2081 46 2228 61 648 59 2082 46 2228 61 648 59 2066 46 2228 61 648 59 2069 46 2228 61 648 59 2070 46 2228 61 648 59 2071 46 2228 61 648 59 2072 46 2228 61 648 59 2073 46 2228 61 648 59 2074 46 2228 61 648 59 2075 46 2228 61 648 59 2076 46 2228 61 648 59 2077 46 2228 61 648 59 2078 46 2228 61 648 59 2079 46 2228 61 648 59 2080 46 2228 61 648 59 2083 46 2228 61 648 59 2084 46 2228 61 648 59 2013 46 2229 61 1501 59 2014 46 2229 61 1501 59 2015 46 2229 61 1500 59 2016 46 2229 61 1500 59 2017 46 2229 61 1500 59 2025 46 2230 61 380 59 2023 46 2230 61 380 59 2024 46 2230 61 380 59 2018 46 2229 61 1500 59 2019 46 2229 61 1500 59 2020 46 2229 61 1503 59 2021 46 2229 61 1501 59 2027 46 2231 46 2232 61 648 59 2028 46 2231 46 2232 61 648 59 2087 46 2230 61 380 59 125 437 492 2233 40 2004 2234 41 123 464 40 2234 41 123 328 2235 2236 58 392 40 33 2049 46 2237 40 2236 46 2238 46 2239 40 41 41 41 123 2049 46 2237 40 2003 614 2002 46 2240 63 2238 46 2240 46 2239 40 41 58 2238 46 2241 46 2239 40 41 41 59 125 2054 46 2242 61 2236 46 2243 46 2244 46 2239 40 41 59 2055 46 2242 61 2236 46 2243 46 2245 46 2239 40 41 59 2056 46 2242 61 2236 46 2243 46 2246 46 2239 40 41 59 2057 46 2242 61 2236 46 2243 46 2247 46 2239 40 41 59 2058 46 2242 61 2236 46 2243 46 2248 46 2239 40 41 59 2059 46 2242 61 2236 46 2249 46 2250 46 2239 40 41 59 2060 46 2242 61 2236 46 2249 46 2251 46 2239 40 41 59 2061 46 2242 61 2236 46 2249 46 2252 46 2239 40 41 59 2062 46 2242 61 2236 46 2249 46 2253 46 2239 40 41 59 2063 46 2242 61 2236 46 2249 46 2254 46 2239 40 41 59 2064 46 2242 61 2236 46 2249 46 2255 46 2239 40 41 59 2065 46 2242 61 2236 46 2249 46 2256 46 2239 40 41 59 2081 46 2242 61 2236 46 2249 46 2257 46 2239 40 41 59 2082 46 2242 61 2236 46 2249 46 2258 46 2239 40 41 59 2069 46 2242 61 2236 46 2259 46 2244 46 2239 40 41 59 2070 46 2242 61 2236 46 2259 46 2245 46 2239 40 41 59 2071 46 2242 61 2236 46 2259 46 2246 46 2239 40 41 59 2072 46 2242 61 2236 46 2259 46 2247 46 2239 40 41 59 2073 46 2242 61 2236 46 2259 46 2248 46 2239 40 41 59 2074 46 2242 61 2236 46 2260 46 2261 46 2239 40 41 59 2075 46 2242 61 2236 46 2260 46 2262 46 2239 40 41 59 2076 46 2242 61 2236 46 2260 46 2263 46 2239 40 41 59 2077 46 2242 61 2236 46 2260 46 2264 46 2239 40 41 59 2078 46 2242 61 2236 46 2260 46 2265 46 2239 40 41 59 2079 46 2242 61 2236 46 2260 46 2266 46 2239 40 41 59 2080 46 2242 61 2236 46 2260 46 2267 46 2239 40 41 59 2083 46 2242 61 2236 46 2260 46 2257 46 2239 40 41 59 2084 46 2242 61 2236 46 2260 46 2258 46 2239 40 41 59 325 59 328 2268 2269 58 392 40 33 2049 46 2237 40 2269 46 2238 46 2239 40 41 41 41 123 2049 46 2237 40 2003 614 2002 46 2270 63 2238 46 2270 46 2239 40 41 58 2238 46 2271 46 2239 40 41 41 59 125 2051 46 2242 61 2269 46 2243 46 2272 46 2239 40 41 59 2052 46 2273 61 2269 46 2243 46 2274 59 2053 46 2273 61 2269 46 2243 46 2275 59 2058 46 2242 61 2269 46 2243 46 2248 46 2239 40 41 59 2059 46 2242 61 2269 46 2249 46 2250 46 2239 40 41 59 2060 46 2242 61 2269 46 2249 46 2251 46 2239 40 41 59 2061 46 2242 61 2269 46 2249 46 2252 46 2239 40 41 59 2062 46 2242 61 2269 46 2249 46 2253 46 2239 40 41 59 2063 46 2242 61 2269 46 2249 46 2254 46 2239 40 41 59 2064 46 2242 61 2269 46 2249 46 2255 46 2239 40 41 59 2065 46 2242 61 2269 46 2249 46 2256 46 2239 40 41 59 2081 46 2242 61 2269 46 2249 46 2257 46 2239 40 41 59 2082 46 2242 61 2269 46 2249 46 2258 46 2239 40 41 59 2066 46 2242 61 2269 46 2259 46 2272 46 2239 40 41 59 2067 46 2273 61 2269 46 2259 46 2274 59 2068 46 2273 61 2269 46 2259 46 2275 59 2073 46 2242 61 2269 46 2259 46 2248 46 2239 40 41 59 2074 46 2242 61 2269 46 2260 46 2261 46 2239 40 41 59 2075 46 2242 61 2269 46 2260 46 2262 46 2239 40 41 59 2076 46 2242 61 2269 46 2260 46 2263 46 2239 40 41 59 2077 46 2242 61 2269 46 2260 46 2264 46 2239 40 41 59 2078 46 2242 61 2269 46 2260 46 2265 46 2239 40 41 59 2079 46 2242 61 2269 46 2260 46 2266 46 2239 40 41 59 2080 46 2242 61 2269 46 2260 46 2267 46 2239 40 41 59 2083 46 2242 61 2269 46 2260 46 2257 46 2239 40 41 59 2084 46 2242 61 2269 46 2260 46 2258 46 2239 40 41 59 2013 46 2276 61 2269 46 2277 46 2278 59 2014 46 2276 61 2269 46 2277 46 2279 59 2087 46 2273 61 2269 46 2277 46 2280 59 2015 46 2276 61 2269 46 2281 59 2016 46 2276 61 2269 46 2282 59 2017 46 2276 61 2269 46 2283 59 2020 46 2276 61 2269 46 2284 46 2285 59 2021 46 2276 61 2269 46 2284 46 2286 59 2023 46 2273 61 2269 46 2284 46 2287 59 2024 46 2273 61 2269 46 2284 46 2288 614 2289 46 2290 59 392 40 2269 46 2284 407 2291 2292 41 123 2018 46 2276 61 2292 46 2293 59 2019 46 2276 61 2292 46 2294 59 2025 46 2273 61 2292 46 2295 59 2027 46 2296 46 2297 61 2292 46 2298 59 2028 46 2296 46 2297 61 2292 46 2299 46 2239 40 41 59 125 325 59 125 125 437 2004 2300 40 41 123 392 40 2030 46 2301 46 2302 40 648 41 41 123 2303 46 2304 40 2054 46 2305 44 430 2306 2307 41 59 2303 46 2304 40 2055 46 2305 44 430 2306 2308 41 59 2303 46 2304 40 2056 46 2305 44 430 2306 2309 41 59 2303 46 2304 40 2057 46 2305 44 430 2306 2310 41 59 2303 46 2304 40 2058 46 2305 44 430 2306 2311 41 59 2303 46 2304 40 2059 46 2305 44 430 2306 2312 41 59 2303 46 2304 40 2060 46 2305 44 430 2306 2313 41 59 2303 46 2304 40 2061 46 2305 44 430 2306 2314 41 59 2303 46 2304 40 2062 46 2305 44 430 2306 2315 41 59 2303 46 2304 40 2063 46 2305 44 430 2306 2316 41 59 2303 46 2304 40 2064 46 2305 44 430 2306 2317 41 59 2303 46 2304 40 2065 46 2305 44 430 2306 2318 41 59 2303 46 2304 40 2081 46 2305 44 430 2306 2319 41 59 2303 46 2304 40 2082 46 2305 44 430 2306 2320 41 59 2303 46 2304 40 2069 46 2305 44 430 2306 2321 41 59 2303 46 2304 40 2070 46 2305 44 430 2306 2322 41 59 2303 46 2304 40 2071 46 2305 44 430 2306 2323 41 59 2303 46 2304 40 2072 46 2305 44 430 2306 2324 41 59 2303 46 2304 40 2073 46 2305 44 430 2306 2325 41 59 2303 46 2304 40 2074 46 2305 44 430 2306 2326 41 59 2303 46 2304 40 2075 46 2305 44 430 2306 2327 41 59 2303 46 2304 40 2076 46 2305 44 430 2306 2328 41 59 2303 46 2304 40 2077 46 2305 44 430 2306 2329 41 59 2303 46 2304 40 2078 46 2305 44 430 2306 2330 41 59 2303 46 2304 40 2079 46 2305 44 430 2306 2331 41 59 2303 46 2304 40 2080 46 2305 44 430 2306 2332 41 59 2303 46 2304 40 2083 46 2305 44 430 2306 2333 41 59 2303 46 2304 40 2084 46 2305 44 430 2306 2334 41 59 450 418 2335 123 2336 61 2337 46 2338 44 2339 61 2004 46 2340 44 2341 61 2030 46 2301 46 2342 40 648 41 91 1501 93 44 2343 61 2303 46 2344 60 2343 62 40 2049 46 2301 41 44 2002 61 2003 44 2345 61 418 2346 60 2306 62 123 2347 61 2316 44 2348 61 2317 44 2349 61 2318 44 2350 61 2319 44 2351 61 2320 44 2352 61 2312 44 2353 61 2313 44 2354 61 2314 44 2355 61 2315 125 44 2356 61 418 2357 60 2306 62 123 2358 61 2307 44 2359 61 2308 44 2360 61 2309 44 2361 61 2310 44 2362 61 2311 44 125 44 2363 61 418 2364 60 2306 62 123 2365 61 2326 44 2366 61 2327 44 2367 61 2328 44 2368 61 2329 44 2369 61 2330 44 2370 61 2331 44 2371 61 2332 44 2372 61 2333 44 2373 61 2334 125 44 2374 61 418 2357 60 2306 62 123 2375 61 2321 44 2376 61 2322 44 2377 61 2323 44 2378 61 2324 44 2379 61 2325 44 125 44 125 59 125 392 40 2030 46 2301 46 2302 40 648 41 41 123 2380 46 2381 40 2051 46 2382 44 430 2383 2384 41 59 2380 46 2381 40 2058 46 2382 44 430 2385 2386 41 59 2380 46 2381 40 2063 46 2382 44 430 2385 2387 41 59 2380 46 2381 40 2064 46 2382 44 430 2385 2388 41 59 2380 46 2381 40 2065 46 2382 44 430 2385 2389 41 59 2380 46 2381 40 2081 46 2382 44 430 2385 2390 41 59 2380 46 2381 40 2082 46 2382 44 430 2385 2391 41 59 2380 46 2381 40 2059 46 2382 44 430 2385 2392 41 59 2380 46 2381 40 2060 46 2382 44 430 2385 2393 41 59 2380 46 2381 40 2061 46 2382 44 430 2385 2394 41 59 2380 46 2381 40 2062 46 2382 44 430 2385 2395 41 59 2380 46 2381 40 2066 46 2382 44 430 2383 2396 41 59 2380 46 2381 40 2073 46 2382 44 430 2385 2397 41 59 2380 46 2381 40 2074 46 2382 44 430 2385 2398 41 59 2380 46 2381 40 2075 46 2382 44 430 2385 2399 41 59 2380 46 2381 40 2076 46 2382 44 430 2385 2400 41 59 2380 46 2381 40 2077 46 2382 44 430 2385 2401 41 59 2380 46 2381 40 2078 46 2382 44 430 2385 2402 41 59 2380 46 2381 40 2079 46 2382 44 430 2385 2403 41 59 2380 46 2381 40 2080 46 2382 44 430 2385 2404 41 59 2380 46 2381 40 2083 46 2382 44 430 2385 2405 41 59 2380 46 2381 40 2084 46 2382 44 430 2385 2406 41 59 404 46 2381 40 2028 46 2407 46 2408 44 430 404 2409 41 59 2410 2411 59 392 40 2024 46 2412 41 123 2411 61 418 2413 123 2414 61 2415 46 2416 44 2417 61 2023 46 2412 44 2418 61 40 404 41 2020 46 2419 44 2420 61 2021 46 2419 44 2421 61 2025 46 2412 44 2422 61 40 404 41 2018 46 2419 44 2423 61 40 404 41 2019 46 2419 44 2424 61 2027 46 2407 46 2408 44 2425 61 2409 125 59 125 360 123 2411 61 418 2426 123 2427 61 2428 46 2429 44 2430 61 2023 46 2412 44 2431 61 40 404 41 2020 46 2432 44 2433 61 2021 46 2432 44 125 59 125 450 418 2434 123 2435 61 2436 46 2437 44 2438 61 2004 46 2439 44 2440 61 2030 46 2301 46 2441 40 648 41 91 1501 93 46 2441 40 648 41 91 1500 93 44 2442 61 2380 46 2443 60 2442 62 40 2049 46 2301 41 44 2002 61 2003 44 2444 61 40 384 41 2015 46 2445 44 2446 61 40 384 41 2016 46 2445 44 2447 61 40 384 41 2017 46 2445 44 2448 61 418 2449 60 2385 62 123 2450 61 2387 44 2451 61 2388 44 2452 61 2389 44 2453 61 2390 44 2454 61 2391 44 2455 61 2392 44 2456 61 2393 44 2457 61 2394 44 2458 61 2395 125 44 2459 61 418 2460 60 2385 44 2383 62 123 2461 61 2052 46 2412 44 2462 61 2384 44 2463 61 2053 46 2412 44 2464 61 2386 44 125 44 2465 61 418 2466 60 2385 62 123 2467 61 2398 44 2468 61 2399 44 2469 61 2400 44 2470 61 2401 44 2471 61 2402 44 2472 61 2403 44 2473 61 2404 44 2474 61 2405 44 2475 61 2406 125 44 2476 61 418 2460 60 2385 44 2383 62 123 2477 61 2067 46 2412 44 2478 61 2396 44 2479 61 2068 46 2412 44 2480 61 2397 44 125 44 2481 61 2411 44 2482 61 418 2483 123 2484 61 40 384 41 2013 46 2445 44 2485 61 40 384 41 2014 46 2445 44 2486 61 2087 46 2412 125 125 59 125 392 40 33 2030 46 2301 46 2302 40 648 41 41 123 2487 46 2488 40 648 41 59 125 450 424 59 125 437 461 2489 40 41 123 392 40 2030 46 2490 46 2491 40 648 41 41 123 450 2492 46 2493 46 2494 46 2495 40 2496 46 2497 44 648 41 59 125 360 392 40 2030 46 2490 46 2491 40 648 41 41 123 450 2498 46 2499 46 2500 46 2501 40 2502 46 2503 44 648 41 59 125 450 2504 46 2505 59 125 621 621 621 437 492 2506 40 426 2150 44 2151 2507 41 123 2200 40 41 59 2218 40 41 59 2095 634 2508 40 41 59 2095 61 424 59 392 40 2030 46 2509 631 424 41 123 2510 40 41 59 461 2155 61 2511 40 41 59 392 40 2030 46 2509 46 2512 40 648 41 41 123 392 40 2005 407 2513 41 123 2233 40 2005 41 59 125 392 40 2091 46 2514 46 2515 407 2516 41 123 621 2095 61 2093 46 2517 40 2155 41 59 125 360 123 2095 61 2091 46 2514 46 2515 46 2518 40 2155 41 59 125 125 360 392 40 2030 46 2509 46 2512 40 648 41 41 123 392 40 2005 407 2519 41 123 2233 40 2005 41 59 125 2095 61 2091 46 2520 46 2521 46 2522 40 2155 41 59 125 125 125 437 461 2523 40 41 123 392 40 2030 46 2524 614 424 606 2030 46 2524 614 648 41 123 450 424 59 125 450 2030 46 2524 46 2525 40 648 41 91 1501 93 46 2525 40 648 41 91 1500 93 59 125 437 492 2526 40 426 2150 44 2151 2507 41 123 2218 40 41 59 125 437 2527 2528 40 323 2529 41 123 2527 2530 59 392 40 2030 46 2531 46 2532 40 648 41 41 123 2530 61 418 2533 40 40 2534 41 2095 41 59 125 360 392 40 2030 46 2531 46 2532 40 648 41 41 123 2530 61 418 2535 40 2095 44 40 384 41 2017 46 2536 44 2529 41 59 125 360 123 469 418 2537 40 648 41 59 125 450 2530 59 125 437 492 2538 40 2050 2539 44 323 2529 41 123 392 40 2006 41 123 2539 46 2540 61 380 59 450 59 125 2096 61 380 59 2541 636 2542 59 2527 2543 61 2528 40 2529 41 59 2006 61 473 59 621 2544 2545 61 40 2544 41 2093 46 2546 40 648 41 59 2547 2548 61 418 2547 40 40 41 619 123 2543 46 2549 40 41 59 496 40 473 41 123 2547 46 2550 40 1502 41 59 2543 46 2551 40 41 59 392 40 2096 606 2545 46 2552 40 2553 46 2554 46 2555 46 2556 41 606 2543 46 2557 40 41 606 2543 46 2558 40 41 41 123 325 59 125 125 461 2559 61 2543 46 2560 40 41 59 2561 46 2562 40 352 123 392 40 2097 41 123 2539 46 2563 61 648 59 125 360 392 40 2559 631 648 41 123 2539 46 2564 61 2559 59 125 2097 61 380 59 2541 628 2542 59 2545 46 2565 40 41 59 2539 46 2566 61 380 59 2006 61 380 59 125 41 59 125 41 59 2548 46 2567 61 648 59 2548 46 2568 61 473 59 2548 46 2569 40 41 59 125 437 492 2570 40 426 2150 44 2151 2507 41 123 2538 40 40 2050 41 2150 44 380 41 59 125 437 492 2571 40 426 2150 44 2151 2507 41 123 2538 40 40 2050 41 2150 44 473 41 59 125 437 492 2572 40 426 2150 44 2573 2507 41 123 2096 61 473 59 2097 61 2507 46 2574 46 2575 614 1502 59 125 437 492 2576 40 41 123 2031 46 2577 40 41 59 461 2578 61 2489 40 41 59 392 40 33 2579 46 2580 40 2578 41 41 123 2579 46 2581 40 2578 41 59 125 392 40 2030 46 2582 614 424 606 2030 46 2582 46 2583 40 648 41 41 123 2031 46 2584 40 648 44 648 41 59 125 360 123 2031 46 2585 40 648 44 648 41 59 386 40 461 2586 398 2579 46 2587 40 2578 44 648 44 2588 46 2589 41 41 123 2031 46 2585 40 2590 46 2591 46 2592 46 2593 40 2586 41 44 2590 46 2591 46 2592 46 2594 40 2586 41 41 59 125 125 2031 46 2595 40 648 41 59 125 437 492 2596 40 426 2150 44 2151 2507 41 123 40 40 2050 41 2150 41 46 2597 40 2598 46 2599 44 473 41 59 392 40 2030 46 2600 614 648 606 2031 46 2600 614 424 41 450 59 2004 2234 61 424 59 404 2601 61 2031 46 2602 59 392 40 2031 46 2600 614 648 41 123 392 40 2030 46 2600 46 2603 40 648 41 41 123 2234 61 418 2604 123 2605 61 2004 46 2606 44 2607 61 2608 46 2609 44 2610 61 424 44 2611 61 2611 46 2612 44 2613 61 418 2614 60 2615 62 123 2616 61 2615 46 2617 44 2618 61 2615 46 2619 44 2620 61 2615 46 2621 44 2622 61 2615 46 2623 44 2624 61 2615 46 2625 44 2626 61 2615 46 2627 44 2628 61 2615 46 2629 44 2630 61 2615 46 2631 44 2632 61 2615 46 2631 125 44 2633 61 418 2634 60 2615 62 123 2635 61 2615 46 2636 44 2637 61 2615 46 2638 44 2639 61 2615 46 2640 44 2641 61 2615 46 2642 44 2643 61 2615 46 2644 44 125 44 2645 61 418 2646 60 2615 62 123 2647 61 2615 46 2648 44 2649 61 2615 46 2650 44 2651 61 2615 46 2652 44 2653 61 2615 46 2654 44 2655 61 2615 46 2656 44 2657 61 2615 46 2658 44 2659 61 2615 46 2660 44 2661 61 2615 46 2662 44 2663 61 2615 46 2662 125 44 2664 61 418 2634 60 2615 62 123 2665 61 2615 46 2666 44 2667 61 2615 46 2668 44 2669 61 2615 46 2670 44 2671 61 2615 46 2672 44 2673 61 2615 46 2674 44 125 125 59 125 360 392 40 2030 46 2600 46 2603 40 648 41 41 123 323 2675 61 2030 46 2676 46 2677 40 648 41 59 2234 61 418 2678 123 2679 61 2004 46 2680 44 2681 61 2682 46 2683 44 2684 61 424 44 2685 61 2685 46 2686 44 2687 61 1499 44 2688 61 1499 44 2689 61 1499 44 2690 61 418 2691 60 2692 62 123 2693 61 2692 46 2693 44 2694 61 2692 46 2694 44 2695 61 2692 46 2695 44 2696 61 2692 46 2696 44 2697 61 2692 46 2698 44 2699 61 2692 46 2700 44 2701 61 2692 46 2702 44 2703 61 2692 46 2704 44 2705 61 2692 46 2704 44 125 44 2706 61 418 2707 60 2692 44 2708 62 123 2709 61 2708 46 2710 44 2711 61 2692 46 2712 44 2713 61 380 44 2714 61 380 44 125 44 2715 61 418 2716 60 2692 62 123 2717 61 2675 63 2692 46 2718 58 2692 46 2719 44 2720 61 2675 63 2692 46 2719 58 2692 46 2718 44 2721 61 2675 63 2692 46 2722 58 2692 46 2723 44 2724 61 2675 63 2692 46 2723 58 2692 46 2722 44 2725 61 2692 46 2726 44 2727 61 2692 46 2728 44 2729 61 2692 46 2730 44 2731 61 2692 46 2732 44 2733 61 2692 46 2732 44 125 44 2734 61 418 2707 60 2692 44 2708 62 123 2735 61 2708 46 2736 44 2737 61 2692 46 2738 44 2739 61 380 44 2740 61 380 44 125 44 2741 61 418 2742 123 2743 61 2744 46 2745 44 2746 61 473 44 2747 61 1503 44 2748 61 1501 44 125 44 2749 61 418 2750 123 2751 61 1501 44 2752 61 1501 44 2753 61 380 125 125 59 125 125 360 123 461 2754 61 2755 46 2756 46 2757 46 2758 40 2489 40 41 44 2031 46 2600 41 59 392 40 33 2759 46 2760 40 2754 41 41 123 392 40 2601 615 1500 41 123 2031 46 2761 40 2601 41 59 125 450 59 125 474 123 489 40 2762 2763 61 2759 46 2764 40 2754 41 41 123 2234 61 2765 46 2766 60 2004 62 40 2763 41 59 125 125 329 40 2767 41 123 125 125 2233 40 2234 41 59 125 437 492 2768 40 426 2150 44 2151 2507 41 123 40 40 2050 41 2150 41 46 2769 40 2770 46 2771 44 473 41 59 392 40 2030 46 2772 614 648 41 450 59 2004 2773 61 2300 40 41 59 2774 2775 61 418 2774 40 41 59 392 40 2773 614 424 41 450 59 392 40 2775 46 2776 40 41 614 40 404 41 2777 46 2778 41 123 461 2779 61 2780 46 2781 46 2782 46 2783 40 2489 40 41 44 2775 46 2784 41 59 461 2785 59 2785 61 2786 46 2787 40 2773 44 473 41 59 2788 46 2789 40 2779 44 2785 41 59 125 2775 46 2790 40 41 59 2576 40 41 59 125 437 492 2791 40 426 2150 44 2151 2507 41 123 40 40 2050 41 2150 41 46 2792 40 2793 46 2794 44 473 41 59 392 40 2030 46 2795 614 648 606 2031 46 2795 614 648 606 2031 46 2795 614 424 41 450 59 2796 2797 61 2798 46 2799 40 648 44 648 41 59 392 40 2797 46 2800 40 41 614 40 404 41 2801 46 2802 41 123 461 2803 61 2804 46 2805 46 2806 46 2807 40 2489 40 41 44 2031 46 2795 41 59 392 40 2808 46 2809 40 2803 41 41 123 2808 46 2810 40 2803 41 59 125 2576 40 41 59 125 125 437 492 2811 40 426 2150 44 2151 2507 41 123 2004 2812 61 2300 40 41 59 490 2813 61 418 2814 60 2004 62 40 41 59 2813 46 2815 40 2816 46 2817 46 2818 46 2004 46 2819 41 59 392 40 2005 614 424 605 2812 631 424 41 123 2813 46 2820 40 2812 41 59 125 360 123 392 40 2030 46 2821 614 648 41 123 2813 46 2822 40 2005 41 59 125 360 392 40 2812 631 424 41 123 404 2823 61 2813 46 2824 40 2005 41 59 2813 91 2823 93 61 2812 59 125 125 392 40 2091 46 2825 631 424 41 123 2091 46 2825 46 2826 46 2827 40 2813 44 2816 46 2817 46 2818 46 2828 44 2816 46 2817 46 2818 46 2829 41 59 125 621 621 2816 46 2817 46 2818 46 2004 46 2819 61 2813 59 2816 46 2817 46 2830 40 41 46 2831 40 2832 46 2833 41 59 2834 40 41 59 125 437 492 2835 40 426 2150 44 2151 2507 41 123 2836 40 41 59 125 125 
79726,C#,"    public class ECPoint : IComparable<ECPoint>, IEquatable<ECPoint>, ISerializable
    {
        internal ECFieldElement X, Y;
        internal readonly ECCurve Curve;
        private byte[] _compressedPoint, _uncompressedPoint;

        /// <summary>
        /// Indicates whether it is a point at infinity.
        /// </summary>
        public bool IsInfinity
        {
            get { return X == null && Y == null; }
        }

        public int Size => IsInfinity ? 1 : 33;

        private static IO.Caching.ECPointCache pointCacheK1 { get; } = new(1000);
        private static IO.Caching.ECPointCache pointCacheR1 { get; } = new(1000);

        /// <summary>
        /// Initializes a new instance of the <see cref=""ECPoint""/> class with the secp256r1 curve.
        /// </summary>
        public ECPoint() : this(null, null, ECCurve.Secp256r1) { }

        internal ECPoint(ECFieldElement x, ECFieldElement y, ECCurve curve)
        {
            if ((x is null ^ y is null) || (curve is null))
                throw new ArgumentException(""Exactly one of the field elements is null"");
            this.X = x;
            this.Y = y;
            this.Curve = curve;
        }

        public int CompareTo(ECPoint other)
        {
            if (!Curve.Equals(other.Curve)) throw new InvalidOperationException(""Invalid comparision for points with different curves"");
            if (ReferenceEquals(this, other)) return 0;
            int result = X.CompareTo(other.X);
            if (result != 0) return result;
            return Y.CompareTo(other.Y);
        }

        /// <summary>
        /// Decode an <see cref=""ECPoint""/> object from a sequence of byte.
        /// </summary>
        /// <param name=""encoded"">The sequence of byte to be decoded.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The decoded point.</returns>
        public static ECPoint DecodePoint(ReadOnlySpan<byte> encoded, ECCurve curve)
        {
            ECPoint p = null;
            switch (encoded[0])
            {
                case 0x02: // compressed
                case 0x03: // compressed
                    {
                        if (encoded.Length != (curve.ExpectedECPointLength + 1))
                            throw new FormatException(""Incorrect length for compressed encoding"");
                        p = DecompressPoint(encoded, curve);
                        break;
                    }
                case 0x04: // uncompressed
                    {
                        if (encoded.Length != (2 * curve.ExpectedECPointLength + 1))
                            throw new FormatException(""Incorrect length for uncompressed/hybrid encoding"");
                        BigInteger X1 = new(encoded[1..(1 + curve.ExpectedECPointLength)], isUnsigned: true, isBigEndian: true);
                        BigInteger Y1 = new(encoded[(1 + curve.ExpectedECPointLength)..], isUnsigned: true, isBigEndian: true);
                        p = new ECPoint(new ECFieldElement(X1, curve), new ECFieldElement(Y1, curve), curve)
                        {
                            _uncompressedPoint = encoded.ToArray()
                        };
                        break;
                    }
                default:
                    throw new FormatException(""Invalid point encoding "" + encoded[0]);
            }
            return p;
        }

        private static ECPoint DecompressPoint(ReadOnlySpan<byte> encoded, ECCurve curve)
        {
            ECPointCache pointCache = null;
            if (curve == ECCurve.Secp256k1) pointCache = pointCacheK1;
            else if (curve == ECCurve.Secp256r1) pointCache = pointCacheR1;
            else throw new FormatException(""Invalid curve "" + curve);

            byte[] compressedPoint = encoded.ToArray();
            if (!pointCache.TryGet(compressedPoint, out ECPoint p))
            {
                int yTilde = encoded[0] & 1;
                BigInteger X1 = new(encoded[1..], isUnsigned: true, isBigEndian: true);
                p = DecompressPoint(yTilde, X1, curve);
                p._compressedPoint = compressedPoint;
                pointCache.Add(p);
            }
            return p;
        }

        private static ECPoint DecompressPoint(int yTilde, BigInteger X1, ECCurve curve)
        {
            ECFieldElement x = new(X1, curve);
            ECFieldElement alpha = x * (x.Square() + curve.A) + curve.B;
            ECFieldElement beta = alpha.Sqrt();

            //
            // if we can't find a sqrt we haven't got a point on the
            // curve - run!
            //
            if (beta == null)
                throw new ArithmeticException(""Invalid point compression"");

            BigInteger betaValue = beta.Value;
            int bit0 = betaValue.IsEven ? 0 : 1;

            if (bit0 != yTilde)
            {
                // Use the other root
                beta = new ECFieldElement(curve.Q - betaValue, curve);
            }

            return new ECPoint(x, beta, curve);
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            ECPoint p = DeserializeFrom(reader, Curve);
            X = p.X;
            Y = p.Y;
        }

        /// <summary>
        /// Deserializes an <see cref=""ECPoint""/> object from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The deserialized point.</returns>
        public static ECPoint DeserializeFrom(BinaryReader reader, ECCurve curve)
        {
            Span<byte> buffer = stackalloc byte[1 + curve.ExpectedECPointLength * 2];
            buffer[0] = reader.ReadByte();
            switch (buffer[0])
            {
                case 0x02:
                case 0x03:
                    {
                        if (reader.Read(buffer[1..(1 + curve.ExpectedECPointLength)]) != curve.ExpectedECPointLength)
                        {
                            throw new FormatException();
                        }
                        return DecodePoint(buffer[..(1 + curve.ExpectedECPointLength)], curve);
                    }
                case 0x04:
                    {
                        if (reader.Read(buffer[1..(1 + curve.ExpectedECPointLength * 2)]) != curve.ExpectedECPointLength * 2)
                        {
                            throw new FormatException();
                        }
                        return DecodePoint(buffer, curve);
                    }
                default:
                    throw new FormatException(""Invalid point encoding "" + buffer[0]);
            }
        }

        /// <summary>
        /// Encodes an <see cref=""ECPoint""/> object to a byte array.
        /// </summary>
        /// <param name=""commpressed"">Indicates whether to encode it in a compressed format.</param>
        /// <returns>The encoded point.</returns>
        /// <remarks>Note: The return should't be modified because it could be cached.</remarks>
        public byte[] EncodePoint(bool commpressed)
        {
            if (IsInfinity) return new byte[1];
            byte[] data;
            if (commpressed)
            {
                if (_compressedPoint != null) return _compressedPoint;
                data = new byte[33];
            }
            else
            {
                if (_uncompressedPoint != null) return _uncompressedPoint;
                data = new byte[65];
                byte[] yBytes = Y.Value.ToByteArray(isUnsigned: true, isBigEndian: true);
                Buffer.BlockCopy(yBytes, 0, data, 65 - yBytes.Length, yBytes.Length);
            }
            byte[] xBytes = X.Value.ToByteArray(isUnsigned: true, isBigEndian: true);
            Buffer.BlockCopy(xBytes, 0, data, 33 - xBytes.Length, xBytes.Length);
            data[0] = commpressed ? Y.Value.IsEven ? (byte)0x02 : (byte)0x03 : (byte)0x04;
            if (commpressed) _compressedPoint = data;
            else _uncompressedPoint = data;
            return data;
        }

        public bool Equals(ECPoint other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (IsInfinity && other.IsInfinity) return true;
            if (IsInfinity || other.IsInfinity) return false;
            return X.Equals(other.X) && Y.Equals(other.Y);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as ECPoint);
        }

        /// <summary>
        /// Constructs an <see cref=""ECPoint""/> object from a byte array.
        /// </summary>
        /// <param name=""bytes"">The byte array to be used to construct the object.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The decoded point.</returns>
        public static ECPoint FromBytes(byte[] bytes, ECCurve curve)
        {
            return bytes.Length switch
            {
                33 or 65 => DecodePoint(bytes, curve),
                64 or 72 => DecodePoint(Concat(new byte[] { 0x04 }, bytes[^64..]), curve),
                96 or 104 => DecodePoint(Concat(new byte[] { 0x04 }, bytes[^96..^32]), curve),
                _ => throw new FormatException(),
            };
        }

        public override int GetHashCode()
        {
            return X.GetHashCode() + Y.GetHashCode();
        }

        internal static ECPoint Multiply(ECPoint p, BigInteger k)
        {
            // floor(log2(k))
            int m = (int)k.GetBitLength();

            // width of the Window NAF
            sbyte width;

            // Required length of precomputation array
            int reqPreCompLen;

            // Determine optimal width and corresponding length of precomputation
            // array based on literature values
            if (m < 13)
            {
                width = 2;
                reqPreCompLen = 1;
            }
            else if (m < 41)
            {
                width = 3;
                reqPreCompLen = 2;
            }
            else if (m < 121)
            {
                width = 4;
                reqPreCompLen = 4;
            }
            else if (m < 337)
            {
                width = 5;
                reqPreCompLen = 8;
            }
            else if (m < 897)
            {
                width = 6;
                reqPreCompLen = 16;
            }
            else if (m < 2305)
            {
                width = 7;
                reqPreCompLen = 32;
            }
            else
            {
                width = 8;
                reqPreCompLen = 127;
            }

            // The length of the precomputation array
            int preCompLen = 1;

            ECPoint[] preComp = new ECPoint[] { p };
            ECPoint twiceP = p.Twice();

            if (preCompLen < reqPreCompLen)
            {
                // Precomputation array must be made bigger, copy existing preComp
                // array into the larger new preComp array
                ECPoint[] oldPreComp = preComp;
                preComp = new ECPoint[reqPreCompLen];
                Array.Copy(oldPreComp, 0, preComp, 0, preCompLen);

                for (int i = preCompLen; i < reqPreCompLen; i++)
                {
                    // Compute the new ECPoints for the precomputation array.
                    // The values 1, 3, 5, ..., 2^(width-1)-1 times p are
                    // computed
                    preComp[i] = twiceP + preComp[i - 1];
                }
            }

            // Compute the Window NAF of the desired width
            sbyte[] wnaf = WindowNaf(width, k);
            int l = wnaf.Length;

            // Apply the Window NAF to p using the precomputed ECPoint values.
            ECPoint q = p.Curve.Infinity;
            for (int i = l - 1; i >= 0; i--)
            {
                q = q.Twice();

                if (wnaf[i] != 0)
                {
                    if (wnaf[i] > 0)
                    {
                        q += preComp[(wnaf[i] - 1) / 2];
                    }
                    else
                    {
                        // wnaf[i] < 0
                        q -= preComp[(-wnaf[i] - 1) / 2];
                    }
                }
            }

            return q;
        }

        /// <summary>
        /// Parse the <see cref=""ECPoint""/> object from a <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The <see cref=""string""/> to be parsed.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The parsed point.</returns>
        public static ECPoint Parse(string value, ECCurve curve)
        {
            return DecodePoint(value.HexToBytes(), curve);
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.Write(EncodePoint(true));
        }

        public override string ToString()
        {
            return EncodePoint(true).ToHexString();
        }

        /// <summary>
        /// Try parse the <see cref=""ECPoint""/> object from a <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The <see cref=""string""/> to be parsed.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <param name=""point"">The parsed point.</param>
        /// <returns><see langword=""true""/> if <paramref name=""value""/> was converted successfully; otherwise, <see langword=""false""/>.</returns>
        public static bool TryParse(string value, ECCurve curve, out ECPoint point)
        {
            try
            {
                point = Parse(value, curve);
                return true;
            }
            catch (FormatException)
            {
                point = null;
                return false;
            }
        }

        internal ECPoint Twice()
        {
            if (this.IsInfinity)
                return this;
            if (this.Y.Value.Sign == 0)
                return Curve.Infinity;
            ECFieldElement TWO = new(2, Curve);
            ECFieldElement THREE = new(3, Curve);
            ECFieldElement gamma = (this.X.Square() * THREE + Curve.A) / (Y * TWO);
            ECFieldElement x3 = gamma.Square() - this.X * TWO;
            ECFieldElement y3 = gamma * (this.X - x3) - this.Y;
            return new ECPoint(x3, y3, Curve);
        }

        private static sbyte[] WindowNaf(sbyte width, BigInteger k)
        {
            sbyte[] wnaf = new sbyte[k.GetBitLength() + 1];
            short pow2wB = (short)(1 << width);
            int i = 0;
            int length = 0;
            while (k.Sign > 0)
            {
                if (!k.IsEven)
                {
                    BigInteger remainder = k % pow2wB;
                    if (remainder.TestBit(width - 1))
                    {
                        wnaf[i] = (sbyte)(remainder - pow2wB);
                    }
                    else
                    {
                        wnaf[i] = (sbyte)remainder;
                    }
                    k -= wnaf[i];
                    length = i;
                }
                else
                {
                    wnaf[i] = 0;
                }
                k >>= 1;
                i++;
            }
            length++;
            sbyte[] wnafShort = new sbyte[length];
            Array.Copy(wnaf, 0, wnafShort, 0, length);
            return wnafShort;
        }

        public static ECPoint operator -(ECPoint x)
        {
            return new ECPoint(x.X, -x.Y, x.Curve);
        }

        public static ECPoint operator *(ECPoint p, byte[] n)
        {
            if (p == null || n == null)
                throw new ArgumentNullException();
            if (n.Length != 32)
                throw new ArgumentException(null, nameof(n));
            if (p.IsInfinity)
                return p;
            BigInteger k = new(n, isUnsigned: true, isBigEndian: true);
            if (k.Sign == 0)
                return p.Curve.Infinity;
            return Multiply(p, k);
        }

        public static ECPoint operator +(ECPoint x, ECPoint y)
        {
            if (x.IsInfinity)
                return y;
            if (y.IsInfinity)
                return x;
            if (x.X.Equals(y.X))
            {
                if (x.Y.Equals(y.Y))
                    return x.Twice();
                return x.Curve.Infinity;
            }
            ECFieldElement gamma = (y.Y - x.Y) / (y.X - x.X);
            ECFieldElement x3 = gamma.Square() - x.X - y.X;
            ECFieldElement y3 = gamma * (x.X - x3) - x.Y;
            return new ECPoint(x3, y3, x.Curve);
        }

        public static ECPoint operator -(ECPoint x, ECPoint y)
        {
            if (y.IsInfinity)
                return x;
            return x + (-y);
        }
    }",1,439 334 2000 58 2001 60 2000 62 44 2002 60 2000 62 44 2003 123 406 2004 2005 44 2006 59 406 441 2007 2008 59 437 326 91 93 2009 44 2010 59 612 439 323 2011 123 2012 123 450 2005 614 424 605 2006 614 424 59 125 125 439 404 2013 619 2011 63 1501 58 1503 59 437 457 2014 46 2015 46 2016 2017 123 2018 59 125 61 418 40 1504 41 59 437 457 2014 46 2015 46 2016 2019 123 2020 59 125 61 418 40 1504 41 59 612 439 2000 40 41 58 467 40 424 44 424 44 2007 46 2021 41 123 125 406 2000 40 2004 2022 44 2004 2023 44 2007 2024 41 123 392 40 40 2022 407 424 94 2023 407 424 41 606 40 2024 407 424 41 41 469 418 2025 40 648 41 59 467 46 2005 61 2022 59 467 46 2006 61 2023 59 467 46 2008 61 2024 59 125 439 404 2026 40 2000 2027 41 123 392 40 33 2008 46 2028 40 2027 46 2008 41 41 469 418 2029 40 648 41 59 392 40 2030 40 467 44 2027 41 41 450 1500 59 404 2031 61 2005 46 2026 40 2027 46 2005 41 59 392 40 2031 631 1500 41 450 2031 59 450 2006 46 2026 40 2027 46 2006 41 59 125 612 439 457 2000 2032 40 2033 60 326 62 2034 44 2007 2024 41 123 2000 2035 61 424 59 464 40 2034 91 1500 93 41 123 328 1502 58 621 328 1502 58 621 123 392 40 2034 46 2036 631 40 2024 46 2037 43 1501 41 41 469 418 2038 40 648 41 59 2035 61 2039 40 2034 44 2024 41 59 325 59 125 328 1502 58 621 123 392 40 2034 46 2040 631 40 1502 42 2024 46 2041 43 1501 41 41 469 418 2042 40 648 41 59 2043 2044 61 418 40 2034 91 1501 40 1501 43 2024 46 2041 41 93 44 2045 58 473 44 2046 58 473 41 59 2043 2047 61 418 40 2034 91 40 1501 43 2024 46 2041 41 46 46 93 44 2045 58 473 44 2046 58 473 41 59 2035 61 418 2000 40 418 2004 40 2044 44 2024 41 44 418 2004 40 2047 44 2024 41 44 2024 41 123 2010 61 2034 46 2048 40 41 125 59 325 59 125 349 58 469 418 2049 40 648 43 2034 91 1500 93 41 59 125 450 2035 59 125 437 457 2000 2050 40 2033 60 326 62 2034 44 2007 2024 41 123 2016 2051 61 424 59 392 40 2024 614 2007 46 2052 41 2051 61 2017 59 360 392 40 2024 614 2007 46 2021 41 2051 61 2019 59 360 469 418 2053 40 648 43 2024 41 59 326 91 93 2054 61 2034 46 2055 40 41 59 392 40 33 2051 46 2056 40 2054 44 430 2000 2057 41 41 123 404 2058 61 2034 91 1500 93 38 1501 59 2059 2060 61 418 40 2034 91 1501 93 44 2061 58 473 44 2062 58 473 41 59 2057 61 2050 40 2058 44 2060 44 2024 41 59 2057 46 2009 61 2054 59 2051 46 2063 40 2057 41 59 125 450 2057 59 125 437 457 2000 2050 40 404 2064 44 2065 2066 44 2007 2024 41 123 2004 2022 61 418 40 2066 44 2024 41 59 2004 2067 61 2022 42 40 2022 46 2068 40 41 43 2024 46 2069 41 43 2024 46 2070 59 2004 2071 61 2067 46 2072 40 41 59 621 621 621 621 392 40 2071 614 424 41 469 418 2073 40 648 41 59 2065 2074 61 2071 46 2075 59 404 2076 61 2074 46 2077 63 1500 58 1501 59 392 40 2076 631 2064 41 123 621 2071 61 418 2004 40 2024 46 2078 45 2074 44 2024 41 59 125 450 418 2000 40 2022 44 2071 44 2024 41 59 125 492 2003 46 2079 40 2080 2081 41 123 2000 2082 61 2083 40 2081 44 2008 41 59 2005 61 2082 46 2005 59 2006 61 2082 46 2006 59 125 612 439 457 2000 2084 40 2080 2081 44 2007 2024 41 123 2085 60 326 62 2086 61 456 326 91 1501 43 2024 46 2087 42 1502 93 59 2086 91 1500 93 61 2081 46 2088 40 41 59 464 40 2086 91 1500 93 41 123 328 1502 58 328 1502 58 123 392 40 2081 46 2089 40 2086 91 1501 40 1501 43 2024 46 2087 41 93 41 631 2024 46 2087 41 123 469 418 2090 40 41 59 125 450 2032 40 2086 91 46 46 40 1501 43 2024 46 2087 41 93 44 2024 41 59 125 328 1502 58 123 392 40 2081 46 2091 40 2086 91 1501 40 1501 43 2024 46 2087 42 1502 41 93 41 631 2024 46 2087 42 1502 41 123 469 418 2092 40 41 59 125 450 2032 40 2086 44 2024 41 59 125 349 58 469 418 2093 40 648 43 2086 91 1500 93 41 59 125 125 612 439 326 91 93 2094 40 323 2095 41 123 392 40 2011 41 450 418 326 91 1501 93 59 326 91 93 2096 59 392 40 2095 41 123 392 40 2009 631 424 41 450 2009 59 2096 61 418 326 91 1503 93 59 125 360 123 392 40 2010 631 424 41 450 2010 59 2096 61 418 326 91 1503 93 59 326 91 93 2097 61 2006 46 2098 46 2099 40 2100 58 473 44 2101 58 473 41 59 2102 46 2103 40 2097 44 1500 44 2096 44 1503 45 2097 46 2104 44 2097 46 2104 41 59 125 326 91 93 2105 61 2005 46 2106 46 2107 40 2108 58 473 44 2109 58 473 41 59 2110 46 2111 40 2105 44 1500 44 2096 44 1503 45 2105 46 2112 44 2105 46 2112 41 59 2096 91 1500 93 61 2095 63 2006 46 2106 46 2113 63 40 326 41 1502 58 40 326 41 1502 58 40 326 41 1502 59 392 40 2095 41 2009 61 2096 59 360 2010 61 2096 59 450 2096 59 125 439 323 2114 40 2000 2027 41 123 392 40 2115 40 467 44 2027 41 41 450 473 59 392 40 2027 407 424 41 450 380 59 392 40 2011 605 2027 46 2011 41 450 473 59 392 40 2011 606 2027 46 2011 41 450 380 59 450 2005 46 2114 40 2027 46 2005 41 605 2006 46 2114 40 2027 46 2006 41 59 125 439 431 323 2114 40 426 2116 41 123 450 2114 40 2116 311 2000 41 59 125 612 439 457 2000 2117 40 326 91 93 2118 44 2007 2024 41 123 450 2118 46 2119 464 123 1503 428 1503 619 2032 40 2118 44 2024 41 44 1503 428 1503 619 2032 40 2120 40 418 326 91 93 123 1502 125 44 2118 91 94 1503 93 41 44 2024 41 44 1503 428 1504 619 2032 40 2120 40 418 326 91 93 123 1502 125 44 2118 91 94 1503 94 1503 93 41 44 2024 41 44 2121 619 469 418 2122 40 41 44 125 59 125 439 431 404 2123 40 41 123 450 2005 46 2123 40 41 43 2006 46 2123 40 41 59 125 406 457 2000 2124 40 2000 2125 44 2065 2126 41 123 621 404 2127 61 40 404 41 2126 46 2128 40 41 59 621 451 2129 59 621 404 2130 59 621 621 392 40 2127 60 1503 41 123 2129 61 1502 59 2130 61 1501 59 125 360 392 40 2127 60 1503 41 123 2129 61 1502 59 2130 61 1502 59 125 360 392 40 2127 60 1504 41 123 2129 61 1502 59 2130 61 1502 59 125 360 392 40 2127 60 1504 41 123 2129 61 1502 59 2130 61 1502 59 125 360 392 40 2127 60 1504 41 123 2129 61 1502 59 2130 61 1503 59 125 360 392 40 2127 60 1505 41 123 2129 61 1502 59 2130 61 1503 59 125 360 123 2129 61 1502 59 2130 61 1504 59 125 621 404 2131 61 1501 59 2000 91 93 2132 61 418 2000 91 93 123 2125 125 59 2000 2133 61 2125 46 2134 40 41 59 392 40 2131 60 2130 41 123 621 621 2000 91 93 2135 61 2132 59 2132 61 418 2000 91 2130 93 59 2136 46 2137 40 2135 44 1500 44 2132 44 1500 44 2131 41 59 385 40 404 2138 61 2131 59 2138 60 2130 59 2138 637 41 123 621 621 621 2132 91 2138 93 61 2133 43 2132 91 2138 45 1501 93 59 125 125 621 451 91 93 2139 61 2140 40 2129 44 2126 41 59 404 2141 61 2139 46 2142 59 621 2000 2143 61 2125 46 2008 46 2144 59 385 40 404 2145 61 2141 45 1501 59 2145 615 1500 59 2145 629 41 123 2143 61 2143 46 2134 40 41 59 392 40 2139 91 2145 93 631 1500 41 123 392 40 2139 91 2145 93 62 1500 41 123 2143 636 2132 91 40 2139 91 2145 93 45 1501 41 47 1502 93 59 125 360 123 621 2143 628 2132 91 40 45 2139 91 2145 93 45 1501 41 47 1502 93 59 125 125 125 450 2143 59 125 612 439 457 2000 2146 40 461 2147 44 2007 2024 41 123 450 2032 40 2147 46 2148 40 41 44 2024 41 59 125 492 2003 46 2149 40 2150 2151 41 123 2151 46 2152 40 2094 40 473 41 41 59 125 439 431 461 2153 40 41 123 450 2094 40 473 41 46 2154 40 41 59 125 612 439 457 323 2155 40 461 2147 44 2007 2024 44 430 2000 2156 41 123 474 123 2156 61 2146 40 2147 44 2024 41 59 450 473 59 125 329 40 2157 41 123 2156 61 424 59 450 380 59 125 125 406 2000 2158 40 41 123 392 40 467 46 2011 41 450 467 59 392 40 467 46 2006 46 2159 46 2160 614 1500 41 450 2008 46 2161 59 2004 2162 61 418 40 1502 44 2008 41 59 2004 2163 61 418 40 1502 44 2008 41 59 2004 2164 61 40 467 46 2005 46 2165 40 41 42 2163 43 2008 46 2166 41 47 40 2006 42 2162 41 59 2004 2167 61 2164 46 2165 40 41 45 467 46 2005 42 2162 59 2004 2168 61 2164 42 40 467 46 2005 45 2167 41 45 467 46 2006 59 450 418 2000 40 2167 44 2168 44 2008 41 59 125 437 457 451 91 93 2169 40 451 2170 44 2065 2126 41 123 451 91 93 2171 61 418 451 91 2126 46 2172 40 41 43 1501 93 59 453 2173 61 40 453 41 40 1501 622 2170 41 59 404 2174 61 1500 59 404 2175 61 1500 59 496 40 2126 46 2176 62 1500 41 123 392 40 33 2126 46 2177 41 123 2065 2178 61 2126 37 2173 59 392 40 2178 46 2179 40 2170 45 1501 41 41 123 2171 91 2174 93 61 40 451 41 40 2178 45 2173 41 59 125 360 123 2171 91 2174 93 61 40 451 41 2178 59 125 2126 628 2171 91 2174 93 59 2175 61 2174 59 125 360 123 2171 91 2174 93 61 1500 59 125 2126 643 1501 59 2174 637 59 125 2175 637 59 451 91 93 2180 61 418 451 91 2175 93 59 2181 46 2182 40 2171 44 1500 44 2180 44 1500 44 2175 41 59 450 2180 59 125 439 457 2000 427 45 40 2000 2022 41 123 450 418 2000 40 2022 46 2005 44 45 2022 46 2006 44 2022 46 2008 41 59 125 439 457 2000 427 42 40 2000 2125 44 326 91 93 2183 41 123 392 40 2125 614 424 606 2183 614 424 41 469 418 2184 40 41 59 392 40 2183 46 2185 631 1503 41 469 418 2186 40 424 44 2187 40 2183 41 41 59 392 40 2125 46 2011 41 450 2125 59 2065 2126 61 418 40 2183 44 2188 58 473 44 2189 58 473 41 59 392 40 2126 46 2190 614 1500 41 450 2125 46 2008 46 2191 59 450 2124 40 2125 44 2126 41 59 125 439 457 2000 427 43 40 2000 2022 44 2000 2023 41 123 392 40 2022 46 2011 41 450 2023 59 392 40 2023 46 2011 41 450 2022 59 392 40 2022 46 2005 46 2114 40 2023 46 2005 41 41 123 392 40 2022 46 2006 46 2114 40 2023 46 2006 41 41 450 2022 46 2158 40 41 59 450 2022 46 2008 46 2192 59 125 2004 2193 61 40 2023 46 2006 45 2022 46 2006 41 47 40 2023 46 2005 45 2022 46 2005 41 59 2004 2194 61 2193 46 2195 40 41 45 2022 46 2005 45 2023 46 2005 59 2004 2196 61 2193 42 40 2022 46 2005 45 2194 41 45 2022 46 2006 59 450 418 2000 40 2194 44 2196 44 2022 46 2008 41 59 125 439 457 2000 427 45 40 2000 2022 44 2000 2023 41 123 392 40 2023 46 2011 41 450 2022 59 450 2022 43 40 45 2023 41 59 125 125 
68556,C#,"public class CSharpHelper : ICSharpHelper
{
    private readonly ITypeMappingSource _typeMappingSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public CSharpHelper(ITypeMappingSource typeMappingSource)
    {
        _typeMappingSource = typeMappingSource;
    }

    private static readonly IReadOnlyCollection<string> Keywords = new[]
    {
        ""__arglist"",
        ""__makeref"",
        ""__reftype"",
        ""__refvalue"",
        ""abstract"",
        ""as"",
        ""base"",
        ""bool"",
        ""break"",
        ""byte"",
        ""case"",
        ""catch"",
        ""char"",
        ""checked"",
        ""class"",
        ""const"",
        ""continue"",
        ""decimal"",
        ""default"",
        ""delegate"",
        ""do"",
        ""double"",
        ""else"",
        ""enum"",
        ""event"",
        ""explicit"",
        ""extern"",
        ""false"",
        ""finally"",
        ""fixed"",
        ""float"",
        ""for"",
        ""foreach"",
        ""goto"",
        ""if"",
        ""implicit"",
        ""in"",
        ""int"",
        ""interface"",
        ""internal"",
        ""is"",
        ""lock"",
        ""long"",
        ""namespace"",
        ""new"",
        ""null"",
        ""object"",
        ""operator"",
        ""out"",
        ""override"",
        ""params"",
        ""private"",
        ""protected"",
        ""public"",
        ""readonly"",
        ""ref"",
        ""return"",
        ""sbyte"",
        ""sealed"",
        ""short"",
        ""sizeof"",
        ""stackalloc"",
        ""static"",
        ""string"",
        ""struct"",
        ""switch"",
        ""this"",
        ""throw"",
        ""true"",
        ""try"",
        ""typeof"",
        ""uint"",
        ""ulong"",
        ""unchecked"",
        ""unsafe"",
        ""ushort"",
        ""using"",
        ""virtual"",
        ""void"",
        ""volatile"",
        ""while""
    };

    private static readonly IReadOnlyDictionary<Type, Func<CSharpHelper, object, string>> LiteralFuncs =
        new Dictionary<Type, Func<CSharpHelper, object, string>>
        {
            { typeof(bool), (c, v) => c.Literal((bool)v) },
            { typeof(byte), (c, v) => c.Literal((byte)v) },
            { typeof(byte[]), (c, v) => c.Literal((byte[])v) },
            { typeof(char), (c, v) => c.Literal((char)v) },
            { typeof(DateOnly), (c, v) => c.Literal((DateOnly)v) },
            { typeof(DateTime), (c, v) => c.Literal((DateTime)v) },
            { typeof(DateTimeOffset), (c, v) => c.Literal((DateTimeOffset)v) },
            { typeof(decimal), (c, v) => c.Literal((decimal)v) },
            { typeof(double), (c, v) => c.Literal((double)v) },
            { typeof(float), (c, v) => c.Literal((float)v) },
            { typeof(Guid), (c, v) => c.Literal((Guid)v) },
            { typeof(int), (c, v) => c.Literal((int)v) },
            { typeof(long), (c, v) => c.Literal((long)v) },
            { typeof(NestedClosureCodeFragment), (c, v) => c.Fragment((NestedClosureCodeFragment)v, 0) },
            { typeof(object[]), (c, v) => c.Literal((object[])v) },
            { typeof(object[,]), (c, v) => c.Literal((object[,])v) },
            { typeof(sbyte), (c, v) => c.Literal((sbyte)v) },
            { typeof(short), (c, v) => c.Literal((short)v) },
            { typeof(string), (c, v) => c.Literal((string)v) },
            { typeof(TimeOnly), (c, v) => c.Literal((TimeOnly)v) },
            { typeof(TimeSpan), (c, v) => c.Literal((TimeSpan)v) },
            { typeof(uint), (c, v) => c.Literal((uint)v) },
            { typeof(ulong), (c, v) => c.Literal((ulong)v) },
            { typeof(ushort), (c, v) => c.Literal((ushort)v) },
            { typeof(BigInteger), (c, v) => c.Literal((BigInteger)v) },
            { typeof(Type), (c, v) => c.Literal((Type)v) }
        };

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Lambda(IReadOnlyList<string> properties, string? lambdaIdentifier)
    {
        lambdaIdentifier ??= ""x"";
        var builder = new StringBuilder();
        builder.Append(lambdaIdentifier);
        builder.Append("" => "");

        if (properties.Count == 1)
        {
            builder
                .Append(lambdaIdentifier)
                .Append('.')
                .Append(properties[0]);
        }
        else
        {
            builder.Append(""new { "");
            builder.AppendJoin("", "", properties.Select(p => $""{lambdaIdentifier}.{p}""));
            builder.Append("" }"");
        }

        return builder.ToString();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Reference(Type type, bool? fullName = null)
    {
        fullName ??= type.IsNested ? ShouldUseFullName(type.DeclaringType!) : ShouldUseFullName(type);

        return type.DisplayName(fullName.Value, compilable: true);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool ShouldUseFullName(Type type)
        => ShouldUseFullName(type.Name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool ShouldUseFullName(string shortTypeName)
        => false;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Identifier(string name, ICollection<string>? scope = null, bool? capitalize = null)
    {
        var builder = new StringBuilder();
        var partStart = 0;

        for (var i = 0; i < name.Length; i++)
        {
            if (!IsIdentifierPartCharacter(name[i]))
            {
                if (partStart != i)
                {
                    builder.Append(name, partStart, i - partStart);
                }

                partStart = i + 1;
            }
        }

        if (partStart != name.Length)
        {
            builder.Append(name[partStart..]);
        }

        if (builder.Length == 0
            || !IsIdentifierStartCharacter(builder[0]))
        {
            builder.Insert(0, '_');
        }

        if (capitalize != null)
        {
            ChangeFirstLetterCase(builder, capitalize.Value);
        }

        var identifier = builder.ToString();
        if (scope != null)
        {
            var uniqueIdentifier = identifier;
            var qualifier = 0;
            while (scope.Contains(uniqueIdentifier))
            {
                uniqueIdentifier = identifier + qualifier++;
            }

            scope.Add(uniqueIdentifier);
            identifier = uniqueIdentifier;
        }

        return Keywords.Contains(identifier) ? ""@"" + identifier : identifier;
    }

    private static void ChangeFirstLetterCase(StringBuilder builder, bool capitalize)
    {
        if (builder.Length == 0)
        {
            return;
        }

        var first = builder[index: 0];
        if (char.IsUpper(first) == capitalize)
        {
            return;
        }

        builder.Remove(startIndex: 0, length: 1)
            .Insert(index: 0, value: capitalize ? char.ToUpperInvariant(first) : char.ToLowerInvariant(first));
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Namespace(params string[] name)
    {
        var @namespace = new StringBuilder();
        foreach (var piece in name.Where(p => !string.IsNullOrEmpty(p))
                     .SelectMany(p => p.Split(new[] { '.' }, StringSplitOptions.RemoveEmptyEntries)))
        {
            var identifier = Identifier(piece);
            if (!string.IsNullOrEmpty(identifier))
            {
                @namespace.Append(identifier)
                    .Append('.');
            }
        }

        return @namespace.Length > 0 ? @namespace.Remove(@namespace.Length - 1, 1).ToString() : ""_"";
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(string value)
        // do not use @"""" syntax as in Migrations this can get indented at a newline and so add spaces to the literal
        => ""\"""" + value.Replace(@""\"", @""\\"").Replace(""\"""", ""\\\"""").Replace(""\n"", @""\n"").Replace(""\r"", @""\r"") + ""\"""";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(bool value)
        => value ? ""true"" : ""false"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(byte value)
        => ""(byte)"" + value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(char value)
        => ""\'"" + (value == '\'' ? ""\\'"" : value.ToString()) + ""\'"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(DateOnly value)
        => string.Format(
            CultureInfo.InvariantCulture,
            ""new DateOnly({0}, {1}, {2})"",
            value.Year,
            value.Month,
            value.Day);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(DateTime value)
        => string.Format(
                CultureInfo.InvariantCulture,
                ""new DateTime({0}, {1}, {2}, {3}, {4}, {5}, {6}, DateTimeKind.{7})"",
                value.Year,
                value.Month,
                value.Day,
                value.Hour,
                value.Minute,
                value.Second,
                value.Millisecond,
                value.Kind)
            + (value.Ticks % 10000 == 0
                ? """"
                : string.Format(
                    CultureInfo.InvariantCulture,
                    "".AddTicks({0})"",
                    value.Ticks % 10000));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(DateTimeOffset value)
        => ""new DateTimeOffset("" + Literal(value.DateTime) + "", "" + Literal(value.Offset) + "")"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(decimal value)
        => value.ToString(CultureInfo.InvariantCulture) + ""m"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(double value)
        => EnsureDecimalPlaces(value);

    private static string EnsureDecimalPlaces(double number)
    {
        var literal = number.ToString(""G17"", CultureInfo.InvariantCulture);

        if (double.IsNaN(number))
        {
            return $""double.{nameof(double.NaN)}"";
        }

        if (double.IsNegativeInfinity(number))
        {
            return $""double.{nameof(double.NegativeInfinity)}"";
        }

        if (double.IsPositiveInfinity(number))
        {
            return $""double.{nameof(double.PositiveInfinity)}"";
        }

        return !literal.Contains('E')
            && !literal.Contains('e')
            && !literal.Contains('.')
                ? literal + "".0""
                : literal;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(float value)
        => value.ToString(CultureInfo.InvariantCulture) + ""f"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(Guid value)
        => ""new Guid(\"""" + value + ""\"")"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(int value)
        => value.ToString(CultureInfo.InvariantCulture);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(long value)
        => value.ToString(CultureInfo.InvariantCulture) + ""L"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(sbyte value)
        => ""(sbyte)"" + value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(short value)
        => ""(short)"" + value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(TimeOnly value)
    {
        var result = value.Millisecond == 0
            ? string.Format(
                CultureInfo.InvariantCulture, ""new TimeOnly({0}, {1}, {2})"", value.Hour, value.Minute, value.Second)
            : string.Format(
                CultureInfo.InvariantCulture, ""new TimeOnly({0}, {1}, {2}, {3})"", value.Hour, value.Minute, value.Second,
                value.Millisecond);

        if (value.Ticks % 10000 > 0)
        {
            result += string.Format(
                CultureInfo.InvariantCulture,
                "".Add(TimeSpan.FromTicks({0}))"",
                value.Ticks % 10000);
        }

        return result;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(TimeSpan value)
        => value.Ticks % 10000 == 0
            ? string.Format(
                CultureInfo.InvariantCulture,
                ""new TimeSpan({0}, {1}, {2}, {3}, {4})"",
                value.Days,
                value.Hours,
                value.Minutes,
                value.Seconds,
                value.Milliseconds)
            : string.Format(
                CultureInfo.InvariantCulture,
                ""new TimeSpan({0})"",
                value.Ticks);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(uint value)
        => value + ""u"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(ulong value)
        => value + ""ul"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(ushort value)
        => ""(ushort)"" + value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(BigInteger value)
        => $""BigInteger.Parse(\""{value.ToString(NumberFormatInfo.InvariantInfo)}\"", NumberFormatInfo.InvariantInfo)"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(Type value, bool? useFullName = null)
        => $""typeof({Reference(value, useFullName)})"";

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal<T>(T? value)
        where T : struct
        => UnknownLiteral(value);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal<T>(T[] values, bool vertical = false)
        => Array(typeof(T), values, vertical);

    private string Array(Type type, IEnumerable values, bool vertical = false)
    {
        var builder = new IndentedStringBuilder();

        builder.Append(""new"");

        var valuesList = values.Cast<object?>().ToList();

        if (valuesList.Count == 0)
        {
            builder
                .Append("" "")
                .Append(Reference(type))
                .Append(""[0]"");
        }
        else
        {
            var byteArray = type == typeof(byte);
            if (byteArray)
            {
                builder.Append("" byte"");
            }
            else if (type == typeof(object))
            {
                builder.Append("" object"");
            }

            if (vertical)
            {
                builder.AppendLine(""[]"");
            }
            else
            {
                builder.Append(""[] "");
            }

            builder.Append(""{"");

            if (vertical)
            {
                builder.AppendLine();
                builder.IncrementIndent();
            }
            else
            {
                builder.Append("" "");
            }

            var first = true;
            foreach (var value in valuesList)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    builder.Append("","");

                    if (vertical)
                    {
                        builder.AppendLine();
                    }
                    else
                    {
                        builder.Append("" "");
                    }
                }

                builder.Append(
                    byteArray
                        ? Literal((int)(byte)value!)
                        : UnknownLiteral(value));
            }

            if (vertical)
            {
                builder.AppendLine();
                builder.DecrementIndent();
            }
            else
            {
                builder.Append("" "");
            }

            builder.Append(""}"");
        }

        return builder.ToString();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(object?[,] values)
    {
        var builder = new IndentedStringBuilder();

        builder
            .AppendLine(""new object[,]"")
            .AppendLine(""{"");

        using (builder.Indent())
        {
            var rowCount = values.GetLength(0);
            var valueCount = values.GetLength(1);
            for (var i = 0; i < rowCount; i++)
            {
                if (i != 0)
                {
                    builder.AppendLine("","");
                }

                builder.Append(""{ "");

                for (var j = 0; j < valueCount; j++)
                {
                    if (j != 0)
                    {
                        builder.Append("", "");
                    }

                    builder.Append(UnknownLiteral(values[i, j]));
                }

                builder.Append("" }"");
            }
        }

        builder
            .AppendLine()
            .Append(""}"");

        return builder.ToString();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Literal(Enum value)
    {
        var type = value.GetType();
        var name = Enum.GetName(type, value);

        return name == null
            ? GetCompositeEnumValue(type, value)
            : GetSimpleEnumValue(type, name);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual string GetSimpleEnumValue(Type type, string name)
        => Reference(type) + ""."" + name;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual string GetCompositeEnumValue(Type type, Enum flags)
    {
        var allValues = new HashSet<Enum>(GetFlags(flags));
        foreach (var currentValue in allValues.ToList())
        {
            var decomposedValues = GetFlags(currentValue);
            if (decomposedValues.Count > 1)
            {
                allValues.ExceptWith(decomposedValues.Where(v => !Equals(v, currentValue)));
            }
        }

        return allValues.Aggregate(
            (string?)null,
            (previous, current) =>
                previous == null
                    ? GetSimpleEnumValue(type, Enum.GetName(type, current)!)
                    : previous + "" | "" + GetSimpleEnumValue(type, Enum.GetName(type, current)!))!;
    }

    internal static IReadOnlyCollection<Enum> GetFlags(Enum flags)
    {
        var values = new List<Enum>();
        var type = flags.GetType();
        var defaultValue = Enum.ToObject(type, value: 0);
        foreach (Enum currValue in Enum.GetValues(type))
        {
            if (currValue.Equals(defaultValue))
            {
                continue;
            }

            if (flags.HasFlag(currValue))
            {
                values.Add(currValue);
            }
        }

        return values;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string UnknownLiteral(object? value)
    {
        if (value is null)
        {
            return ""null"";
        }

        var literalType = value.GetType();

        if (LiteralFuncs.TryGetValue(literalType.UnwrapNullableType(), out var literalFunc))
        {
            return literalFunc(this, value);
        }

        if (value is Enum enumValue)
        {
            return Literal(enumValue);
        }

        if (value is Type type)
        {
            return Literal(type);
        }

        if (value is Array array)
        {
            return Array(literalType.GetElementType()!, array);
        }

        var mapping = _typeMappingSource.FindMapping(literalType);
        if (mapping != null)
        {
            var builder = new StringBuilder();
            var expression = mapping.GenerateCodeLiteral(value);
            var handled = HandleExpression(expression, builder);

            if (!handled)
            {
                throw new NotSupportedException(
                    DesignStrings.LiteralExpressionNotSupported(
                        expression.ToString(),
                        literalType.ShortDisplayName()));
            }

            return builder.ToString();
        }

        throw new InvalidOperationException(DesignStrings.UnknownLiteral(literalType));
    }

    private bool HandleExpression(Expression expression, StringBuilder builder, bool simple = false)
    {
        // Only handle trivially simple cases for `new` and factory methods
        switch (expression.NodeType)
        {
            case ExpressionType.NewArrayInit:
                builder
                    .Append(""new "")
                    .Append(Reference(expression.Type.GetElementType()!))
                    .Append(""[] { "");

                HandleList(((NewArrayExpression)expression).Expressions, builder, simple: true);

                builder
                    .Append("" }"");

                return true;
            case ExpressionType.Convert:
                builder
                    .Append('(')
                    .Append(Reference(expression.Type, fullName: true))
                    .Append(')');

                return HandleExpression(((UnaryExpression)expression).Operand, builder);
            case ExpressionType.New:
                builder
                    .Append(""new "")
                    .Append(Reference(expression.Type, fullName: true));

                return HandleArguments(((NewExpression)expression).Arguments, builder);
            case ExpressionType.Call:
            {
                var callExpression = (MethodCallExpression)expression;
                if (callExpression.Method.IsStatic)
                {
                    builder
                        .Append(Reference(callExpression.Method.DeclaringType!, fullName: true));
                }
                else
                {
                    if (!HandleExpression(callExpression.Object!, builder))
                    {
                        return false;
                    }
                }

                builder
                    .Append('.')
                    .Append(callExpression.Method.Name);

                return HandleArguments(callExpression.Arguments, builder);
            }
            case ExpressionType.Constant:
            {
                var value = ((ConstantExpression)expression).Value;

                builder
                    .Append(
                        simple
                        && value?.GetType()?.IsNumeric() == true
                            ? value
                            : UnknownLiteral(value));
                return true;
            }
            case ExpressionType.MemberAccess:
            {
                var memberExpression = (MemberExpression)expression;
                if (memberExpression.Expression == null)
                {
                    builder
                        .Append(Reference(memberExpression.Member.DeclaringType!, fullName: true));
                }
                else
                {
                    if (!HandleExpression(memberExpression.Expression, builder))
                    {
                        return false;
                    }
                }

                builder
                    .Append('.')
                    .Append(memberExpression.Member.Name);

                return true;
            }
            case ExpressionType.Add:
            {
                var binaryExpression = (BinaryExpression)expression;
                if (!HandleExpression(binaryExpression.Left, builder))
                {
                    return false;
                }

                builder.Append("" + "");

                return HandleExpression(binaryExpression.Right, builder);
            }
        }

        return false;
    }

    private bool HandleArguments(IEnumerable<Expression> argumentExpressions, StringBuilder builder)
    {
        builder.Append('(');

        if (!HandleList(argumentExpressions, builder))
        {
            return false;
        }

        builder.Append(')');

        return true;
    }

    private bool HandleList(IEnumerable<Expression> argumentExpressions, StringBuilder builder, bool simple = false)
    {
        var separator = string.Empty;
        foreach (var expression in argumentExpressions)
        {
            builder.Append(separator);

            if (!HandleExpression(expression, builder, simple))
            {
                return false;
            }

            separator = "", "";
        }

        return true;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string Fragment(MethodCallCodeFragment fragment, string? instanceIdentifier = null, bool typeQualified = false)
        => Fragment(fragment, typeQualified, instanceIdentifier, indent: 0);

    private string Fragment(MethodCallCodeFragment fragment, bool typeQualified, string? instanceIdentifier, int indent)
    {
        var builder = new IndentedStringBuilder();
        var current = fragment;

        if (typeQualified)
        {
            if (instanceIdentifier is null || fragment.MethodInfo is null || fragment.ChainedCall is not null)
            {
                throw new ArgumentException(DesignStrings.CannotGenerateTypeQualifiedMethodCall);
            }

            builder
                .Append(fragment.DeclaringType!)
                .Append('.')
                .Append(fragment.Method)
                .Append('(')
                .Append(instanceIdentifier);

            for (var i = 0; i < fragment.Arguments.Count; i++)
            {
                builder.Append("", "");
                Argument(fragment.Arguments[i]);
            }

            builder.Append(')');

            return builder.ToString();
        }

        // Non-type-qualified fragment

        if (instanceIdentifier is not null)
        {
            builder.Append(instanceIdentifier);

            if (current.ChainedCall is not null)
            {
                builder
                    .AppendLine()
                    .IncrementIndent();
            }
        }

        while (true)
        {
            builder
                .Append('.')
                .Append(current.Method)
                .Append('(');

            for (var i = 0; i < current.Arguments.Count; i++)
            {
                if (i != 0)
                {
                    builder.Append("", "");
                }

                Argument(current.Arguments[i]);
            }

            builder.Append(')');

            if (current.ChainedCall is null)
            {
                break;
            }

            builder.AppendLine();
            current = current.ChainedCall;
        }

        return builder.ToString();

        void Argument(object? argument)
        {
            if (argument is NestedClosureCodeFragment nestedFragment)
            {
                builder.Append(Fragment(nestedFragment, indent));
            }
            else
            {
                builder.Append(UnknownLiteral(argument));
            }
        }
    }

    private string Fragment(NestedClosureCodeFragment fragment, int indent)
    {
        if (fragment.MethodCalls.Count == 1)
        {
            return fragment.Parameter + "" => "" + Fragment(fragment.MethodCalls[0], typeQualified: false, fragment.Parameter, indent);
        }

        var builder = new IndentedStringBuilder();
        builder.AppendLine(fragment.Parameter + "" =>"");
        for (var i = -1; i < indent; i++)
        {
            builder.IncrementIndent();
        }

        builder.AppendLine(""{"");
        using (builder.Indent())
        {
            foreach (var methodCall in fragment.MethodCalls)
            {
                builder.AppendLines(Fragment(methodCall, typeQualified: false, fragment.Parameter, indent + 1), skipFinalNewline: true);
                builder.AppendLine("";"");
            }
        }

        builder.AppendLine(""}"");

        return builder.ToString();
    }

    private static bool IsIdentifierStartCharacter(char ch)
    {
        if (ch < 'a')
        {
            return ch >= 'A' && (ch <= 'Z'
                || ch == '_');
        }

        if (ch <= 'z')
        {
            return true;
        }

        return ch > '\u007F' && IsLetterChar(CharUnicodeInfo.GetUnicodeCategory(ch));
    }

    private static bool IsIdentifierPartCharacter(char ch)
    {
        if (ch < 'a')
        {
            return ch < 'A'
                ? ch >= '0'
                && ch <= '9'
                : ch <= 'Z'
                || ch == '_';
        }

        if (ch <= 'z')
        {
            return true;
        }

        if (ch <= '\u007F')
        {
            return false;
        }

        var cat = CharUnicodeInfo.GetUnicodeCategory(ch);
        if (IsLetterChar(cat))
        {
            return true;
        }

        switch (cat)
        {
            case UnicodeCategory.DecimalDigitNumber:
            case UnicodeCategory.ConnectorPunctuation:
            case UnicodeCategory.NonSpacingMark:
            case UnicodeCategory.SpacingCombiningMark:
            case UnicodeCategory.Format:
                return true;
        }

        return false;
    }

    private static bool IsLetterChar(UnicodeCategory cat)
    {
        switch (cat)
        {
            case UnicodeCategory.UppercaseLetter:
            case UnicodeCategory.LowercaseLetter:
            case UnicodeCategory.TitlecaseLetter:
            case UnicodeCategory.ModifierLetter:
            case UnicodeCategory.OtherLetter:
            case UnicodeCategory.LetterNumber:
                return true;
        }

        return false;
    }
}",1,439 334 2000 58 2001 123 437 441 2002 2003 59 612 439 2000 40 2002 2004 41 123 2003 61 2004 59 125 437 457 441 2005 60 461 62 2006 61 418 91 93 123 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 44 648 125 59 437 457 441 2007 60 2008 44 2009 60 2000 44 426 44 461 640 2010 61 418 2011 60 2008 44 2009 60 2000 44 426 44 461 640 123 123 478 40 323 41 44 40 2012 44 2013 41 619 2012 46 2014 40 40 323 41 2013 41 125 44 123 478 40 326 41 44 40 2015 44 2016 41 619 2015 46 2017 40 40 326 41 2016 41 125 44 123 478 40 326 91 93 41 44 40 2018 44 2019 41 619 2018 46 2020 40 40 326 91 93 41 2019 41 125 44 123 478 40 330 41 44 40 2021 44 2022 41 619 2021 46 2023 40 40 330 41 2022 41 125 44 123 478 40 2024 41 44 40 2025 44 2026 41 619 2025 46 2027 40 40 2024 41 2026 41 125 44 123 478 40 2028 41 44 40 2029 44 2030 41 619 2029 46 2031 40 40 2028 41 2030 41 125 44 123 478 40 2032 41 44 40 2033 44 2034 41 619 2033 46 2035 40 40 2032 41 2034 41 125 44 123 478 40 345 41 44 40 2036 44 2037 41 619 2036 46 2038 40 40 345 41 2037 41 125 44 123 478 40 356 41 44 40 2039 44 2040 41 619 2039 46 2041 40 40 356 41 2040 41 125 44 123 478 40 384 41 44 40 2042 44 2043 41 619 2042 46 2044 40 40 384 41 2043 41 125 44 123 478 40 2045 41 44 40 2046 44 2047 41 619 2046 46 2048 40 40 2045 41 2047 41 125 44 123 478 40 404 41 44 40 2049 44 2050 41 619 2049 46 2051 40 40 404 41 2050 41 125 44 123 478 40 413 41 44 40 2052 44 2053 41 619 2052 46 2054 40 40 413 41 2053 41 125 44 123 478 40 2055 41 44 40 2056 44 2057 41 619 2056 46 2058 40 40 2055 41 2057 44 1500 41 125 44 123 478 40 426 91 93 41 44 40 2059 44 2060 41 619 2059 46 2061 40 40 426 91 93 41 2060 41 125 44 123 478 40 426 91 44 93 41 44 40 2062 44 2063 41 619 2062 46 2064 40 40 426 91 44 93 41 2063 41 125 44 123 478 40 451 41 44 40 2065 44 2066 41 619 2065 46 2067 40 40 451 41 2066 41 125 44 123 478 40 453 41 44 40 2068 44 2069 41 619 2068 46 2070 40 40 453 41 2069 41 125 44 123 478 40 461 41 44 40 2071 44 2072 41 619 2071 46 2073 40 40 461 41 2072 41 125 44 123 478 40 2074 41 44 40 2075 44 2076 41 619 2075 46 2077 40 40 2074 41 2076 41 125 44 123 478 40 2078 41 44 40 2079 44 2080 41 619 2079 46 2081 40 40 2078 41 2080 41 125 44 123 478 40 479 41 44 40 2082 44 2083 41 619 2082 46 2084 40 40 479 41 2083 41 125 44 123 478 40 480 41 44 40 2085 44 2086 41 619 2085 46 2087 40 40 480 41 2086 41 125 44 123 478 40 488 41 44 40 2088 44 2089 41 619 2088 46 2090 40 40 488 41 2089 41 125 44 123 478 40 2091 41 44 40 2092 44 2093 41 619 2092 46 2094 40 40 2091 41 2093 41 125 44 123 478 40 2008 41 44 40 2095 44 2096 41 619 2095 46 2097 40 40 2008 41 2096 41 125 125 59 612 439 491 461 2098 40 2099 60 461 62 2100 44 461 63 2101 41 123 2101 633 61 648 59 490 2102 61 418 2103 40 41 59 2102 46 2104 40 2101 41 59 2102 46 2104 40 648 41 59 392 40 2100 46 2105 614 1501 41 123 2102 46 2104 40 2101 41 46 2104 40 607 41 46 2104 40 2100 91 1500 93 41 59 125 360 123 2102 46 2104 40 648 41 59 2102 46 2106 40 648 44 2100 46 2107 40 2108 619 36 648 41 41 59 2102 46 2104 40 648 41 59 125 450 2102 46 2109 40 41 59 125 612 439 491 461 2110 40 2008 2111 44 323 63 2112 61 424 41 123 2112 633 61 2111 46 2113 63 2114 40 2111 46 2115 33 41 58 2114 40 2111 41 59 450 2111 46 2116 40 2112 46 2117 44 2118 58 473 41 59 125 612 439 491 323 2119 40 2008 2111 41 619 2119 40 2111 46 2120 41 59 612 439 491 323 2119 40 461 2121 41 619 380 59 612 439 491 461 2122 40 461 2123 44 2124 60 461 62 63 2125 61 424 44 323 63 2126 61 424 41 123 490 2127 61 418 2128 40 41 59 490 2129 61 1500 59 385 40 490 2130 61 1500 59 2130 60 2123 46 2131 59 2130 637 41 123 392 40 33 2132 40 2123 91 2130 93 41 41 123 392 40 2129 631 2130 41 123 2127 46 2133 40 2123 44 2129 44 2130 45 2129 41 59 125 2129 61 2130 43 1501 59 125 125 392 40 2129 631 2123 46 2131 41 123 2127 46 2134 40 2123 91 2129 46 46 93 41 59 125 392 40 2127 46 2131 614 1500 606 33 2135 40 2127 91 1500 93 41 41 123 2127 46 2136 40 1500 44 607 41 59 125 392 40 2126 631 424 41 123 2137 40 2127 44 2126 46 2138 41 59 125 490 2139 61 2127 46 2140 40 41 59 392 40 2125 631 424 41 123 490 2141 61 2139 59 490 2142 61 1500 59 496 40 2125 46 2143 40 2141 41 41 123 2141 61 2139 43 2142 637 59 125 2125 46 2144 40 2141 41 59 2139 61 2141 59 125 450 2006 46 2145 40 2139 41 63 648 43 2139 58 2139 59 125 437 457 492 2146 40 2147 2148 44 323 2126 41 123 392 40 2148 46 2149 614 1500 41 123 450 59 125 490 2150 61 2148 91 2151 58 1500 93 59 392 40 330 46 2152 40 2150 41 614 2126 41 123 450 59 125 2148 46 2153 40 2154 58 1500 44 2155 58 1501 41 46 2156 40 2151 58 1500 44 2157 58 2126 63 330 46 2158 40 2150 41 58 330 46 2159 40 2150 41 41 59 125 612 439 491 461 2160 40 433 461 91 93 2123 41 123 490 64 416 61 418 2147 40 41 59 386 40 490 2161 398 2123 46 2162 40 2163 619 33 461 46 2164 40 2163 41 41 46 2165 40 2163 619 2163 46 2166 40 418 91 93 123 607 125 44 2167 46 2168 41 41 41 123 490 2169 61 2122 40 2161 41 59 392 40 33 461 46 2164 40 2169 41 41 123 64 416 46 2170 40 2169 41 46 2170 40 607 41 59 125 125 450 64 416 46 2171 62 1500 63 64 416 46 2172 40 64 416 46 2171 45 1501 44 1501 41 46 2173 40 41 58 648 59 125 612 439 491 461 2174 40 461 2175 41 621 619 648 43 2175 46 2176 40 64 648 92 92 648 92 648 44 648 41 46 2176 40 648 44 64 648 41 46 2176 40 648 44 64 648 41 43 648 59 612 439 491 461 2174 40 323 2175 41 619 2175 63 648 58 648 59 612 439 491 461 2174 40 326 2175 41 619 648 43 2175 59 612 439 491 461 2174 40 330 2175 41 619 648 43 40 2175 614 607 63 648 58 2175 46 2177 40 41 41 43 648 59 612 439 491 461 2174 40 2178 2175 41 619 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2182 44 2175 46 2183 44 2175 46 2184 41 59 612 439 491 461 2174 40 2185 2175 41 619 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2182 44 2175 46 2183 44 2175 46 2184 44 2175 46 2186 44 2175 46 2187 44 2175 46 2188 44 2175 46 2189 44 2175 46 2190 41 43 40 2175 46 2191 37 1505 614 1500 63 648 58 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2191 37 1505 41 41 59 612 439 491 461 2174 40 2192 2175 41 619 648 43 2174 40 2175 46 2185 41 43 648 43 2174 40 2175 46 2193 41 43 648 59 612 439 491 461 2174 40 345 2175 41 619 2175 46 2177 40 2180 46 2181 41 43 648 59 612 439 491 461 2174 40 356 2175 41 619 2194 40 2175 41 59 437 457 461 2194 40 356 2195 41 123 490 2196 61 2195 46 2177 40 648 44 2180 46 2181 41 59 392 40 356 46 2197 40 2195 41 41 123 450 36 648 59 125 392 40 356 46 2198 40 2195 41 41 123 450 36 648 59 125 392 40 356 46 2199 40 2195 41 41 123 450 36 648 59 125 450 33 2196 46 2200 40 607 41 605 33 2196 46 2200 40 607 41 605 33 2196 46 2200 40 607 41 63 2196 43 648 58 2196 59 125 612 439 491 461 2174 40 384 2175 41 619 2175 46 2177 40 2180 46 2181 41 43 648 59 612 439 491 461 2174 40 2201 2175 41 619 648 43 2175 43 648 59 612 439 491 461 2174 40 404 2175 41 619 2175 46 2177 40 2180 46 2181 41 59 612 439 491 461 2174 40 413 2175 41 619 2175 46 2177 40 2180 46 2181 41 43 648 59 612 439 491 461 2174 40 451 2175 41 619 648 43 2175 59 612 439 491 461 2174 40 453 2175 41 619 648 43 2175 59 612 439 491 461 2174 40 2202 2175 41 123 490 2203 61 2175 46 2189 614 1500 63 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2186 44 2175 46 2187 44 2175 46 2188 41 58 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2186 44 2175 46 2187 44 2175 46 2188 44 2175 46 2189 41 59 392 40 2175 46 2191 37 1505 62 1500 41 123 2203 636 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2191 37 1505 41 59 125 450 2203 59 125 612 439 491 461 2174 40 2204 2175 41 619 2175 46 2191 37 1505 614 1500 63 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2205 44 2175 46 2206 44 2175 46 2207 44 2175 46 2208 44 2175 46 2209 41 58 461 46 2179 40 2180 46 2181 44 648 44 2175 46 2191 41 59 612 439 491 461 2174 40 479 2175 41 619 2175 43 648 59 612 439 491 461 2174 40 480 2175 41 619 2175 43 648 59 612 439 491 461 2174 40 488 2175 41 619 648 43 2175 59 612 439 491 461 2174 40 2210 2175 41 619 36 648 59 612 439 491 461 2174 40 2008 2175 44 323 63 2211 61 424 41 619 36 648 59 612 439 491 461 2174 60 2212 62 40 2212 63 2175 41 2213 2212 58 462 619 2214 40 2175 41 59 612 439 491 461 2174 60 2212 62 40 2212 91 93 2215 44 323 2216 61 380 41 619 2217 40 478 40 2212 41 44 2215 44 2216 41 59 437 461 2217 40 2008 2111 44 2218 2215 44 323 2216 61 380 41 123 490 2148 61 418 2219 40 41 59 2148 46 2220 40 648 41 59 490 2221 61 2215 46 2222 60 426 63 62 40 41 46 2223 40 41 59 392 40 2221 46 2224 614 1500 41 123 2148 46 2220 40 648 41 46 2220 40 2110 40 2111 41 41 46 2220 40 648 41 59 125 360 123 490 2225 61 2111 614 478 40 326 41 59 392 40 2225 41 123 2148 46 2220 40 648 41 59 125 360 392 40 2111 614 478 40 426 41 41 123 2148 46 2220 40 648 41 59 125 392 40 2216 41 123 2148 46 2226 40 648 41 59 125 360 123 2148 46 2220 40 648 41 59 125 2148 46 2220 40 648 41 59 392 40 2216 41 123 2148 46 2227 40 41 59 2148 46 2228 40 41 59 125 360 123 2148 46 2220 40 648 41 59 125 490 2229 61 473 59 386 40 490 2175 398 2221 41 123 392 40 2229 41 123 2229 61 380 59 125 360 123 2148 46 2220 40 648 41 59 392 40 2216 41 123 2148 46 2230 40 41 59 125 360 123 2148 46 2220 40 648 41 59 125 125 2148 46 2220 40 2225 63 2174 40 40 404 41 40 326 41 2175 33 41 58 2214 40 2175 41 41 59 125 392 40 2216 41 123 2148 46 2231 40 41 59 2148 46 2232 40 41 59 125 360 123 2148 46 2220 40 648 41 59 125 2148 46 2220 40 648 41 59 125 450 2148 46 2177 40 41 59 125 612 439 491 461 2174 40 426 63 91 44 93 2215 41 123 490 2148 61 418 2233 40 41 59 2148 46 2234 40 648 41 46 2234 40 648 41 59 489 40 2148 46 2235 40 41 41 123 490 2236 61 2215 46 2237 40 1500 41 59 490 2238 61 2215 46 2237 40 1501 41 59 385 40 490 2239 61 1500 59 2239 60 2236 59 2239 637 41 123 392 40 2239 631 1500 41 123 2148 46 2234 40 648 41 59 125 2148 46 2240 40 648 41 59 385 40 490 2241 61 1500 59 2241 60 2238 59 2241 637 41 123 392 40 2241 631 1500 41 123 2148 46 2240 40 648 41 59 125 2148 46 2240 40 2214 40 2215 91 2239 44 2241 93 41 41 59 125 2148 46 2240 40 648 41 59 125 125 2148 46 2234 40 41 46 2242 40 648 41 59 450 2148 46 2177 40 41 59 125 612 439 491 461 2174 40 2243 2175 41 123 490 2111 61 2175 46 2244 40 41 59 490 2123 61 2243 46 2245 40 2111 44 2175 41 59 450 2123 614 424 63 2246 40 2111 44 2175 41 58 2247 40 2111 44 2123 41 59 125 612 438 491 461 2248 40 2008 2111 44 461 2123 41 619 2110 40 2111 41 43 648 43 2123 59 612 438 491 461 2249 40 2008 2111 44 2243 2250 41 123 490 2251 61 418 2252 60 2243 62 40 2253 40 2250 41 41 59 386 40 490 2254 398 2251 46 2255 40 41 41 123 490 2256 61 2253 40 2254 41 59 392 40 2256 46 2257 62 1501 41 123 2251 46 2258 40 2256 46 2259 40 2260 619 33 2261 40 2260 44 2254 41 41 41 59 125 125 450 2251 46 2262 40 40 461 63 41 424 44 40 2263 44 2264 41 619 2263 614 424 63 2248 40 2111 44 2243 46 2265 40 2111 44 2264 41 33 41 58 2263 43 648 43 2248 40 2111 44 2243 46 2265 40 2111 44 2264 41 33 41 41 33 59 125 406 457 2005 60 2243 62 2266 40 2243 2250 41 123 490 2215 61 418 2267 60 2243 62 40 41 59 490 2111 61 2250 46 2268 40 41 59 490 2269 61 2243 46 2270 40 2111 44 2175 58 1500 41 59 386 40 2243 2271 398 2243 46 2272 40 2111 41 41 123 392 40 2271 46 2273 40 2269 41 41 123 344 59 125 392 40 2250 46 2274 40 2271 41 41 123 2215 46 2275 40 2271 41 59 125 125 450 2215 59 125 612 439 491 461 2214 40 426 63 2175 41 123 392 40 2175 407 424 41 123 450 648 59 125 490 2276 61 2175 46 2277 40 41 59 392 40 2010 46 2278 40 2276 46 2279 40 41 44 430 490 2280 41 41 123 450 2280 40 467 44 2175 41 59 125 392 40 2175 407 2243 2281 41 123 450 2174 40 2281 41 59 125 392 40 2175 407 2008 2111 41 123 450 2174 40 2111 41 59 125 392 40 2175 407 2217 310 41 123 450 2217 40 2276 46 2282 40 41 33 44 310 41 59 125 490 2283 61 2003 46 2284 40 2276 41 59 392 40 2283 631 424 41 123 490 2148 61 418 2147 40 41 59 490 2285 61 2283 46 2286 40 2175 41 59 490 2287 61 2288 40 2285 44 2148 41 59 392 40 33 2287 41 123 469 418 2289 40 2290 46 2291 40 2285 46 2177 40 41 44 2276 46 2292 40 41 41 41 59 125 450 2148 46 2177 40 41 59 125 469 418 2293 40 2294 46 2214 40 2276 41 41 59 125 437 323 2295 40 2296 2297 44 2147 2148 44 323 2298 61 380 41 123 621 464 40 2297 46 2299 41 123 328 2300 46 2301 58 2148 46 2302 40 648 41 46 2302 40 2110 40 2297 46 2008 46 2303 40 41 33 41 41 46 2302 40 648 41 59 2304 40 40 40 2305 41 2297 41 46 2306 44 2148 44 2298 58 473 41 59 2148 46 2302 40 648 41 59 450 473 59 328 2300 46 2307 58 2148 46 2302 40 607 41 46 2302 40 2110 40 2297 46 2008 44 2112 58 473 41 41 46 2302 40 607 41 59 450 2295 40 40 40 2308 41 2297 41 46 2309 44 2148 41 59 328 2300 46 2310 58 2148 46 2302 40 648 41 46 2302 40 2110 40 2297 46 2008 44 2112 58 473 41 41 59 450 2311 40 40 40 2312 41 2297 41 46 2313 44 2148 41 59 328 2300 46 2314 58 123 490 2315 61 40 2316 41 2297 59 392 40 2315 46 2317 46 2318 41 123 2148 46 2302 40 2110 40 2315 46 2317 46 2319 33 44 2112 58 473 41 41 59 125 360 123 392 40 33 2295 40 2315 46 2320 33 44 2148 41 41 123 450 380 59 125 125 2148 46 2302 40 607 41 46 2302 40 2315 46 2317 46 2120 41 59 450 2311 40 2315 46 2313 44 2148 41 59 125 328 2300 46 2321 58 123 490 2175 61 40 40 2322 41 2297 41 46 2323 59 2148 46 2302 40 2298 605 2175 634 2324 40 41 634 2325 40 41 614 473 63 2175 58 2214 40 2175 41 41 59 450 473 59 125 328 2300 46 2326 58 123 490 2327 61 40 2328 41 2297 59 392 40 2327 46 2296 614 424 41 123 2148 46 2302 40 2110 40 2327 46 2329 46 2330 33 44 2112 58 473 41 41 59 125 360 123 392 40 33 2295 40 2327 46 2296 44 2148 41 41 123 450 380 59 125 125 2148 46 2302 40 607 41 46 2302 40 2327 46 2331 46 2120 41 59 450 473 59 125 328 2300 46 2332 58 123 490 2333 61 40 2334 41 2297 59 392 40 33 2295 40 2333 46 2335 44 2148 41 41 123 450 380 59 125 2148 46 2302 40 648 41 59 450 2295 40 2333 46 2336 44 2148 41 59 125 125 450 380 59 125 437 323 2337 40 2218 60 2296 62 2338 44 2147 2148 41 123 2148 46 2339 40 607 41 59 392 40 33 2340 40 2338 44 2148 41 41 123 450 380 59 125 2148 46 2339 40 607 41 59 450 473 59 125 437 323 2341 40 2218 60 2296 62 2338 44 2147 2148 44 323 2298 61 380 41 123 490 2342 61 461 46 2343 59 386 40 490 2297 398 2338 41 123 2148 46 2344 40 2342 41 59 392 40 33 2295 40 2297 44 2148 44 2298 41 41 123 450 380 59 125 2342 61 648 59 125 450 473 59 125 612 439 491 461 2345 40 2346 2347 44 461 63 2348 61 424 44 323 2349 61 380 41 619 2345 40 2347 44 2349 44 2348 44 2350 58 1500 41 59 437 461 2345 40 2346 2347 44 323 2349 44 461 63 2348 44 404 2350 41 123 490 2148 61 418 2351 40 41 59 490 2352 61 2347 59 392 40 2349 41 123 392 40 2348 407 424 606 2347 46 2353 407 424 606 2347 46 2354 407 422 424 41 123 469 418 2355 40 2356 46 2357 41 59 125 2148 46 2358 40 2347 46 2359 33 41 46 2358 40 607 41 46 2358 40 2347 46 2360 41 46 2358 40 607 41 46 2358 40 2348 41 59 385 40 490 2361 61 1500 59 2361 60 2347 46 2362 46 2363 59 2361 637 41 123 2148 46 2358 40 648 41 59 2364 40 2347 46 2362 91 2361 93 41 59 125 2148 46 2358 40 607 41 59 450 2148 46 2177 40 41 59 125 621 392 40 2348 407 422 424 41 123 2148 46 2365 40 2348 41 59 392 40 2352 46 2366 407 422 424 41 123 2148 46 2367 40 41 46 2368 40 41 59 125 125 496 40 473 41 123 2148 46 2369 40 607 41 46 2369 40 2352 46 2370 41 46 2369 40 607 41 59 385 40 490 2371 61 1500 59 2371 60 2352 46 2372 46 2373 59 2371 637 41 123 392 40 2371 631 1500 41 123 2148 46 2369 40 648 41 59 125 2374 40 2352 46 2372 91 2371 93 41 59 125 2148 46 2369 40 607 41 59 392 40 2352 46 2375 407 424 41 123 325 59 125 2148 46 2376 40 41 59 2352 61 2352 46 2375 59 125 450 2148 46 2177 40 41 59 492 2377 40 426 63 2378 41 123 392 40 2378 407 2379 2380 41 123 2148 46 2381 40 2345 40 2380 44 2350 41 41 59 125 360 123 2148 46 2382 40 2214 40 2378 41 41 59 125 125 125 437 461 2345 40 2383 2347 44 404 2350 41 123 392 40 2347 46 2384 46 2385 614 1501 41 123 450 2347 46 2386 43 648 43 2345 40 2347 46 2384 91 1500 93 44 2349 58 380 44 2347 46 2386 44 2350 41 59 125 490 2148 61 418 2387 40 41 59 2148 46 2388 40 2347 46 2389 43 648 41 59 385 40 490 2390 61 45 1501 59 2390 60 2350 59 2390 637 41 123 2148 46 2391 40 41 59 125 2148 46 2388 40 648 41 59 489 40 2148 46 2392 40 41 41 123 386 40 490 2393 398 2347 46 2384 41 123 2148 46 2394 40 2345 40 2393 44 2349 58 380 44 2347 46 2389 44 2350 43 1501 41 44 2395 58 473 41 59 2148 46 2388 40 648 41 59 125 125 2148 46 2388 40 648 41 59 450 2148 46 2177 40 41 59 125 437 457 323 2396 40 330 2397 41 123 392 40 2397 60 607 41 123 450 2397 615 607 605 40 2397 620 607 606 2397 614 607 41 59 125 392 40 2397 620 607 41 123 450 473 59 125 450 2397 62 607 605 2398 40 2399 46 2400 40 2397 41 41 59 125 437 457 323 2401 40 330 2397 41 123 392 40 2397 60 607 41 123 450 2397 60 607 63 2397 615 607 605 2397 620 607 58 2397 620 607 606 2397 614 607 59 125 392 40 2397 620 607 41 123 450 473 59 125 392 40 2397 620 607 41 123 450 380 59 125 490 2402 61 2403 46 2404 40 2397 41 59 392 40 2405 40 2402 41 41 123 450 473 59 125 464 40 2402 41 123 328 2406 46 2407 58 328 2406 46 2408 58 328 2406 46 2409 58 328 2406 46 2410 58 328 2406 46 2179 58 450 473 59 125 450 380 59 125 437 457 323 2411 40 2412 2413 41 123 464 40 2413 41 123 328 2412 46 2414 58 328 2412 46 2415 58 328 2412 46 2416 58 328 2412 46 2417 58 328 2412 46 2418 58 328 2412 46 2419 58 450 473 59 125 450 380 59 125 125 
76193,C#,"    public class Folder : BaseItem
    {
        public Folder()
        {
            LinkedChildren = Array.Empty<LinkedChild>();
        }

        public static IUserViewManager UserViewManager { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is root.
        /// </summary>
        /// <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        public bool IsRoot { get; set; }

        public LinkedChild[] LinkedChildren { get; set; }

        [JsonIgnore]
        public DateTime? DateLastMediaAdded { get; set; }

        [JsonIgnore]
        public override bool SupportsThemeMedia => true;

        [JsonIgnore]
        public virtual bool IsPreSorted => false;

        [JsonIgnore]
        public virtual bool IsPhysicalRoot => false;

        [JsonIgnore]
        public override bool SupportsInheritedParentImages => true;

        [JsonIgnore]
        public override bool SupportsPlayedStatus => true;

        /// <summary>
        /// Gets a value indicating whether this instance is folder.
        /// </summary>
        /// <value><c>true</c> if this instance is folder; otherwise, <c>false</c>.</value>
        [JsonIgnore]
        public override bool IsFolder => true;

        [JsonIgnore]
        public override bool IsDisplayedAsFolder => true;

        [JsonIgnore]
        public virtual bool SupportsCumulativeRunTimeTicks => false;

        [JsonIgnore]
        public virtual bool SupportsDateLastMediaAdded => false;

        [JsonIgnore]
        public override string FileNameWithoutExtension
        {
            get
            {
                if (IsFileProtocol)
                {
                    return System.IO.Path.GetFileName(Path);
                }

                return null;
            }
        }

        /// <summary>
        /// Gets the actual children.
        /// </summary>
        /// <value>The actual children.</value>
        [JsonIgnore]
        public virtual IEnumerable<BaseItem> Children => LoadChildren();

        /// <summary>
        /// Gets thread-safe access to all recursive children of this folder - without regard to user.
        /// </summary>
        /// <value>The recursive children.</value>
        [JsonIgnore]
        public IEnumerable<BaseItem> RecursiveChildren => GetRecursiveChildren();

        [JsonIgnore]
        protected virtual bool SupportsShortcutChildren => false;

        protected virtual bool FilterLinkedChildrenPerUser => false;

        [JsonIgnore]
        protected override bool SupportsOwnedItems => base.SupportsOwnedItems || SupportsShortcutChildren;

        [JsonIgnore]
        public virtual bool SupportsUserDataFromChildren
        {
            get
            {
                // These are just far too slow.
                if (this is ICollectionFolder)
                {
                    return false;
                }

                if (this is UserView)
                {
                    return false;
                }

                if (this is UserRootFolder)
                {
                    return false;
                }

                if (this is Channel)
                {
                    return false;
                }

                if (SourceType != SourceType.Library)
                {
                    return false;
                }

                if (this is IItemByName)
                {
                    if (this is not IHasDualAccess hasDualAccess || hasDualAccess.IsAccessedByName)
                    {
                        return false;
                    }
                }

                return true;
            }
        }

        public static ICollectionManager CollectionManager { get; set; }

        public override bool CanDelete()
        {
            if (IsRoot)
            {
                return false;
            }

            return base.CanDelete();
        }

        public override bool RequiresRefresh()
        {
            var baseResult = base.RequiresRefresh();

            if (SupportsCumulativeRunTimeTicks && !RunTimeTicks.HasValue)
            {
                baseResult = true;
            }

            return baseResult;
        }

        protected override bool IsAllowTagFilterEnforced()
        {
            if (this is ICollectionFolder)
            {
                return false;
            }

            if (this is UserView)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Adds the child.
        /// </summary>
        /// <param name=""item"">The item.</param>
        /// <exception cref=""InvalidOperationException"">Unable to add  + item.Name.</exception>
        public void AddChild(BaseItem item)
        {
            item.SetParent(this);

            if (item.Id.Equals(Guid.Empty))
            {
                item.Id = LibraryManager.GetNewItemId(item.Path, item.GetType());
            }

            if (item.DateCreated == DateTime.MinValue)
            {
                item.DateCreated = DateTime.UtcNow;
            }

            if (item.DateModified == DateTime.MinValue)
            {
                item.DateModified = DateTime.UtcNow;
            }

            LibraryManager.CreateItem(item, this);
        }

        public override bool IsVisible(User user)
        {
            if (this is ICollectionFolder && this is not BasePluginFolder)
            {
                var blockedMediaFolders = user.GetPreferenceValues<Guid>(PreferenceKind.BlockedMediaFolders);
                if (blockedMediaFolders.Length > 0)
                {
                    if (blockedMediaFolders.Contains(Id))
                    {
                        return false;
                    }
                }
                else
                {
                    if (!user.HasPermission(PermissionKind.EnableAllFolders)
                        && !user.GetPreferenceValues<Guid>(PreferenceKind.EnabledFolders).Contains(Id))
                    {
                        return false;
                    }
                }
            }

            return base.IsVisible(user);
        }

        /// <summary>
        /// Loads our children.  Validation will occur externally.
        /// We want this synchronous.
        /// </summary>
        /// <returns>Returns children.</returns>
        protected virtual List<BaseItem> LoadChildren()
        {
            // logger.LogDebug(""Loading children from {0} {1} {2}"", GetType().Name, Id, Path);
            // just load our children from the repo - the library will be validated and maintained in other processes
            return GetCachedChildren();
        }

        public override double? GetRefreshProgress()
        {
            return ProviderManager.GetRefreshProgress(Id);
        }

        public Task ValidateChildren(IProgress<double> progress, CancellationToken cancellationToken)
        {
            return ValidateChildren(progress, new MetadataRefreshOptions(new DirectoryService(FileSystem)), cancellationToken: cancellationToken);
        }

        /// <summary>
        /// Validates that the children of the folder still exist.
        /// </summary>
        /// <param name=""progress"">The progress.</param>
        /// <param name=""metadataRefreshOptions"">The metadata refresh options.</param>
        /// <param name=""recursive"">if set to <c>true</c> [recursive].</param>
        /// <param name=""cancellationToken"">The cancellation token.</param>
        /// <returns>Task.</returns>
        public Task ValidateChildren(IProgress<double> progress, MetadataRefreshOptions metadataRefreshOptions, bool recursive = true,  CancellationToken cancellationToken = default)
        {
            return ValidateChildrenInternal(progress, recursive, true, metadataRefreshOptions, metadataRefreshOptions.DirectoryService, cancellationToken);
        }

        private Dictionary<Guid, BaseItem> GetActualChildrenDictionary()
        {
            var dictionary = new Dictionary<Guid, BaseItem>();

            var childrenList = Children.ToList();

            foreach (var child in childrenList)
            {
                var id = child.Id;
                if (dictionary.ContainsKey(id))
                {
                    Logger.LogError(
                        ""Found folder containing items with duplicate id. Path: {Path}, Child Name: {ChildName}"",
                        Path ?? Name,
                        child.Path ?? child.Name);
                }
                else
                {
                    dictionary[id] = child;
                }
            }

            return dictionary;
        }

        protected override void TriggerOnRefreshStart()
        {
        }

        protected override void TriggerOnRefreshComplete()
        {
        }

        /// <summary>
        /// Validates the children internal.
        /// </summary>
        /// <param name=""progress"">The progress.</param>
        /// <param name=""recursive"">if set to <c>true</c> [recursive].</param>
        /// <param name=""refreshChildMetadata"">if set to <c>true</c> [refresh child metadata].</param>
        /// <param name=""refreshOptions"">The refresh options.</param>
        /// <param name=""directoryService"">The directory service.</param>
        /// <param name=""cancellationToken"">The cancellation token.</param>
        /// <returns>Task.</returns>
        protected virtual async Task ValidateChildrenInternal(IProgress<double> progress, bool recursive, bool refreshChildMetadata, MetadataRefreshOptions refreshOptions, IDirectoryService directoryService, CancellationToken cancellationToken)
        {
            if (recursive)
            {
                ProviderManager.OnRefreshStart(this);
            }

            try
            {
                await ValidateChildrenInternal2(progress, recursive, refreshChildMetadata, refreshOptions, directoryService, cancellationToken).ConfigureAwait(false);
            }
            finally
            {
                if (recursive)
                {
                    ProviderManager.OnRefreshComplete(this);
                }
            }
        }

        private async Task ValidateChildrenInternal2(IProgress<double> progress, bool recursive, bool refreshChildMetadata, MetadataRefreshOptions refreshOptions, IDirectoryService directoryService, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();

            var validChildren = new List<BaseItem>();
            var validChildrenNeedGeneration = false;

            if (IsFileProtocol)
            {
                IEnumerable<BaseItem> nonCachedChildren;

                try
                {
                    nonCachedChildren = GetNonCachedChildren(directoryService);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, ""Error retrieving children folder"");
                    return;
                }

                progress.Report(ProgressHelpers.RetrievedChildren);

                if (recursive)
                {
                    ProviderManager.OnRefreshProgress(this, ProgressHelpers.RetrievedChildren);
                }

                // Build a dictionary of the current children we have now by Id so we can compare quickly and easily
                var currentChildren = GetActualChildrenDictionary();

                // Create a list for our validated children
                var newItems = new List<BaseItem>();

                cancellationToken.ThrowIfCancellationRequested();

                foreach (var child in nonCachedChildren)
                {
                    if (currentChildren.TryGetValue(child.Id, out BaseItem currentChild))
                    {
                        validChildren.Add(currentChild);

                        if (currentChild.UpdateFromResolvedItem(child) > ItemUpdateType.None)
                        {
                            await currentChild.UpdateToRepositoryAsync(ItemUpdateType.MetadataImport, cancellationToken).ConfigureAwait(false);
                        }
                        else
                        {
                            // metadata is up-to-date; make sure DB has correct images dimensions and hash
                            await LibraryManager.UpdateImagesAsync(currentChild).ConfigureAwait(false);
                        }

                        continue;
                    }

                    // Brand new item - needs to be added
                    child.SetParent(this);
                    newItems.Add(child);
                    validChildren.Add(child);
                }

                // If any items were added or removed....
                if (newItems.Count > 0 || currentChildren.Count != validChildren.Count)
                {
                    // That's all the new and changed ones - now see if there are any that are missing
                    var itemsRemoved = currentChildren.Values.Except(validChildren).ToList();

                    foreach (var item in itemsRemoved)
                    {
                        if (item.IsFileProtocol)
                        {
                            Logger.LogDebug(""Removed item: {Path}"", item.Path);

                            item.SetParent(null);
                            LibraryManager.DeleteItem(item, new DeleteOptions { DeleteFileLocation = false }, this, false);
                        }
                    }

                    LibraryManager.CreateItems(newItems, this, cancellationToken);
                }
            }
            else
            {
                validChildrenNeedGeneration = true;
            }

            progress.Report(ProgressHelpers.UpdatedChildItems);

            if (recursive)
            {
                ProviderManager.OnRefreshProgress(this, ProgressHelpers.UpdatedChildItems);
            }

            cancellationToken.ThrowIfCancellationRequested();

            if (recursive)
            {
                var innerProgress = new ActionableProgress<double>();

                var folder = this;
                innerProgress.RegisterAction(innerPercent =>
                {
                    var percent = ProgressHelpers.GetProgress(ProgressHelpers.UpdatedChildItems, ProgressHelpers.ScannedSubfolders, innerPercent);

                    progress.Report(percent);

                    ProviderManager.OnRefreshProgress(folder, percent);
                });

                if (validChildrenNeedGeneration)
                {
                    validChildren = Children.ToList();
                    validChildrenNeedGeneration = false;
                }

                await ValidateSubFolders(validChildren.OfType<Folder>().ToList(), directoryService, innerProgress, cancellationToken).ConfigureAwait(false);
            }

            if (refreshChildMetadata)
            {
                progress.Report(ProgressHelpers.ScannedSubfolders);

                if (recursive)
                {
                    ProviderManager.OnRefreshProgress(this, ProgressHelpers.ScannedSubfolders);
                }

                var container = this as IMetadataContainer;

                var innerProgress = new ActionableProgress<double>();

                var folder = this;
                innerProgress.RegisterAction(innerPercent =>
                {
                    var percent = ProgressHelpers.GetProgress(ProgressHelpers.ScannedSubfolders, ProgressHelpers.RefreshedMetadata, innerPercent);

                    progress.Report(percent);

                    if (recursive)
                    {
                        ProviderManager.OnRefreshProgress(folder, percent);
                    }
                });

                if (container != null)
                {
                    await RefreshAllMetadataForContainer(container, refreshOptions, innerProgress, cancellationToken).ConfigureAwait(false);
                }
                else
                {
                    if (validChildrenNeedGeneration)
                    {
                        validChildren = Children.ToList();
                    }

                    await RefreshMetadataRecursive(validChildren, refreshOptions, recursive, innerProgress, cancellationToken).ConfigureAwait(false);
                }
            }
        }

        private Task RefreshMetadataRecursive(IList<BaseItem> children, MetadataRefreshOptions refreshOptions, bool recursive, IProgress<double> progress, CancellationToken cancellationToken)
        {
            return RunTasks(
                (baseItem, innerProgress) => RefreshChildMetadata(baseItem, refreshOptions, recursive && baseItem.IsFolder, innerProgress, cancellationToken),
                children,
                progress,
                cancellationToken);
        }

        private async Task RefreshAllMetadataForContainer(IMetadataContainer container, MetadataRefreshOptions refreshOptions, IProgress<double> progress, CancellationToken cancellationToken)
        {
            // limit the amount of concurrent metadata refreshes
            await ProviderManager.RunMetadataRefresh(
                async () =>
                {
                    var series = container as Series;
                    if (series != null)
                    {
                        await series.RefreshMetadata(refreshOptions, cancellationToken).ConfigureAwait(false);
                    }

                    await container.RefreshAllMetadata(refreshOptions, progress, cancellationToken).ConfigureAwait(false);
                },
                cancellationToken).ConfigureAwait(false);
        }

        private async Task RefreshChildMetadata(BaseItem child, MetadataRefreshOptions refreshOptions, bool recursive, IProgress<double> progress, CancellationToken cancellationToken)
        {
            var container = child as IMetadataContainer;

            if (container != null)
            {
                await RefreshAllMetadataForContainer(container, refreshOptions, progress, cancellationToken).ConfigureAwait(false);
            }
            else
            {
                if (refreshOptions.RefreshItem(child))
                {
                    // limit the amount of concurrent metadata refreshes
                    await ProviderManager.RunMetadataRefresh(
                        async () => await child.RefreshMetadata(refreshOptions, cancellationToken).ConfigureAwait(false),
                        cancellationToken).ConfigureAwait(false);
                }

                if (recursive && child is Folder folder)
                {
                    await folder.RefreshMetadataRecursive(folder.Children.ToList(), refreshOptions, true, progress, cancellationToken).ConfigureAwait(false);
                }
            }
        }

        /// <summary>
        /// Refreshes the children.
        /// </summary>
        /// <param name=""children"">The children.</param>
        /// <param name=""directoryService"">The directory service.</param>
        /// <param name=""progress"">The progress.</param>
        /// <param name=""cancellationToken"">The cancellation token.</param>
        /// <returns>Task.</returns>
        private Task ValidateSubFolders(IList<Folder> children, IDirectoryService directoryService, IProgress<double> progress, CancellationToken cancellationToken)
        {
            return RunTasks(
                (folder, innerProgress) => folder.ValidateChildrenInternal(innerProgress, true, false, null, directoryService, cancellationToken),
                children,
                progress,
                cancellationToken);
        }

        /// <summary>
        /// Runs an action block on a list of children.
        /// </summary>
        /// <param name=""task"">The task to run for each child.</param>
        /// <param name=""children"">The list of children.</param>
        /// <param name=""progress"">The progress.</param>
        /// <param name=""cancellationToken"">The cancellation token.</param>
        /// <returns>Task.</returns>
        private async Task RunTasks<T>(Func<T, IProgress<double>, Task> task, IList<T> children, IProgress<double> progress, CancellationToken cancellationToken)
        {
            var childrenCount = children.Count;
            var childrenProgress = new double[childrenCount];

            void UpdateProgress()
            {
                progress.Report(childrenProgress.Average());
            }

            var fanoutConcurrency = ConfigurationManager.Configuration.LibraryScanFanoutConcurrency;
            var parallelism = fanoutConcurrency == 0 ? Environment.ProcessorCount : fanoutConcurrency;

            var actionBlock = new ActionBlock<int>(
                async i =>
                {
                    var innerProgress = new ActionableProgress<double>();

                    innerProgress.RegisterAction(innerPercent =>
                    {
                        // round the percent and only update progress if it changed to prevent excessive UpdateProgress calls
                        var innerPercentRounded = Math.Round(innerPercent);
                        if (childrenProgress[i] != innerPercentRounded)
                        {
                            childrenProgress[i] = innerPercentRounded;
                            UpdateProgress();
                        }
                    });

                    await task(children[i], innerProgress).ConfigureAwait(false);

                    childrenProgress[i] = 100;

                    UpdateProgress();
                },
                new ExecutionDataflowBlockOptions
                {
                    MaxDegreeOfParallelism = parallelism,
                    CancellationToken = cancellationToken,
                });

            for (var i = 0; i < childrenCount; i++)
            {
                actionBlock.Post(i);
            }

            actionBlock.Complete();

            await actionBlock.Completion.ConfigureAwait(false);
        }

        /// <summary>
        /// Get the children of this folder from the actual file system.
        /// </summary>
        /// <returns>IEnumerable{BaseItem}.</returns>
        /// <param name=""directoryService"">The directory service to use for operation.</param>
        /// <returns>Returns set of base items.</returns>
        protected virtual IEnumerable<BaseItem> GetNonCachedChildren(IDirectoryService directoryService)
        {
            var collectionType = LibraryManager.GetContentType(this);
            var libraryOptions = LibraryManager.GetLibraryOptions(this);

            return LibraryManager.ResolvePaths(GetFileSystemChildren(directoryService), directoryService, this, libraryOptions, collectionType);
        }

        /// <summary>
        /// Get our children from the repo - stubbed for now.
        /// </summary>
        /// <returns>IEnumerable{BaseItem}.</returns>
        protected List<BaseItem> GetCachedChildren()
        {
            return ItemRepository.GetItemList(new InternalItemsQuery
            {
                Parent = this,
                GroupByPresentationUniqueKey = false,
                DtoOptions = new DtoOptions(true)
            });
        }

        public virtual int GetChildCount(User user)
        {
            if (LinkedChildren.Length > 0)
            {
                if (this is not ICollectionFolder)
                {
                    return GetChildren(user, true).Count;
                }
            }

            var result = GetItems(new InternalItemsQuery(user)
            {
                Recursive = false,
                Limit = 0,
                Parent = this,
                DtoOptions = new DtoOptions(false)
                {
                    EnableImages = false
                }
            });

            return result.TotalRecordCount;
        }

        public virtual int GetRecursiveChildCount(User user)
        {
            return GetItems(new InternalItemsQuery(user)
            {
                Recursive = true,
                IsFolder = false,
                IsVirtualItem = false,
                EnableTotalRecordCount = true,
                Limit = 0,
                DtoOptions = new DtoOptions(false)
                {
                    EnableImages = false
                }
            }).TotalRecordCount;
        }

        public QueryResult<BaseItem> QueryRecursive(InternalItemsQuery query)
        {
            var user = query.User;

            if (!query.ForceDirect && RequiresPostFiltering(query))
            {
                IEnumerable<BaseItem> items;
                Func<BaseItem, bool> filter = i => UserViewBuilder.Filter(i, user, query, UserDataManager, LibraryManager);

                if (query.User == null)
                {
                    items = GetRecursiveChildren(filter);
                }
                else
                {
                    items = GetRecursiveChildren(user, query);
                }

                return PostFilterAndSort(items, query, true);
            }

            if (this is not UserRootFolder && this is not AggregateFolder && query.ParentId == Guid.Empty)
            {
                query.Parent = this;
            }

            if (RequiresPostFiltering2(query))
            {
                return QueryWithPostFiltering2(query);
            }

            return LibraryManager.GetItemsResult(query);
        }

        private QueryResult<BaseItem> QueryWithPostFiltering2(InternalItemsQuery query)
        {
            var startIndex = query.StartIndex;
            var limit = query.Limit;

            query.StartIndex = null;
            query.Limit = null;

            IEnumerable<BaseItem> itemsList = LibraryManager.GetItemList(query);
            var user = query.User;

            if (user != null)
            {
                // needed for boxsets
                itemsList = itemsList.Where(i => i.IsVisibleStandalone(query.User));
            }

            IEnumerable<BaseItem> returnItems;
            int totalCount = 0;

            if (query.EnableTotalRecordCount)
            {
                var itemArray = itemsList.ToArray();
                totalCount = itemArray.Length;
                returnItems = itemArray;
            }
            else
            {
                returnItems = itemsList;
            }

            if (limit.HasValue)
            {
                returnItems = returnItems.Skip(startIndex ?? 0).Take(limit.Value);
            }
            else if (startIndex.HasValue)
            {
                returnItems = returnItems.Skip(startIndex.Value);
            }

            return new QueryResult<BaseItem>
            {
                TotalRecordCount = totalCount,
                Items = returnItems.ToArray()
            };
        }

        private bool RequiresPostFiltering2(InternalItemsQuery query)
        {
            if (query.IncludeItemTypes.Length == 1 && query.IncludeItemTypes[0] == BaseItemKind.BoxSet)
            {
                Logger.LogDebug(""Query requires post-filtering due to BoxSet query"");
                return true;
            }

            return false;
        }

        private bool RequiresPostFiltering(InternalItemsQuery query)
        {
            if (LinkedChildren.Length > 0)
            {
                if (this is not ICollectionFolder)
                {
                    Logger.LogDebug(""{Type}: Query requires post-filtering due to LinkedChildren."", GetType().Name);
                    return true;
                }
            }

            // Filter by Video3DFormat
            if (query.Is3D.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to Is3D"");
                return true;
            }

            if (query.HasOfficialRating.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to HasOfficialRating"");
                return true;
            }

            if (query.IsPlaceHolder.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to IsPlaceHolder"");
                return true;
            }

            if (query.HasSpecialFeature.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to HasSpecialFeature"");
                return true;
            }

            if (query.HasSubtitles.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to HasSubtitles"");
                return true;
            }

            if (query.HasTrailer.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to HasTrailer"");
                return true;
            }

            // Filter by VideoType
            if (query.VideoTypes.Length > 0)
            {
                Logger.LogDebug(""Query requires post-filtering due to VideoTypes"");
                return true;
            }

            if (CollapseBoxSetItems(query, this, query.User, ConfigurationManager))
            {
                Logger.LogDebug(""Query requires post-filtering due to CollapseBoxSetItems"");
                return true;
            }

            if (!string.IsNullOrEmpty(query.AdjacentTo))
            {
                Logger.LogDebug(""Query requires post-filtering due to AdjacentTo"");
                return true;
            }

            if (query.SeriesStatuses.Length > 0)
            {
                Logger.LogDebug(""Query requires post-filtering due to SeriesStatuses"");
                return true;
            }

            if (query.AiredDuringSeason.HasValue)
            {
                Logger.LogDebug(""Query requires post-filtering due to AiredDuringSeason"");
                return true;
            }

            if (query.IsPlayed.HasValue)
            {
                if (query.IncludeItemTypes.Length == 1 && query.IncludeItemTypes.Contains(BaseItemKind.Series))
                {
                    Logger.LogDebug(""Query requires post-filtering due to IsPlayed"");
                    return true;
                }
            }

            return false;
        }

        private static BaseItem[] SortItemsByRequest(InternalItemsQuery query, IReadOnlyList<BaseItem> items)
        {
            var ids = query.ItemIds;
            int size = items.Count;

            // ids can potentially contain non-unique guids, but query result cannot,
            // so we include only first occurrence of each guid
            var positions = new Dictionary<Guid, int>(size);
            int index = 0;
            for (int i = 0; i < ids.Length; i++)
            {
                if (positions.TryAdd(ids[i], index))
                {
                    index++;
                }
            }

            var newItems = new BaseItem[size];
            for (int i = 0; i < size; i++)
            {
                var item = items[i];
                newItems[positions[item.Id]] = item;
            }

            return newItems;
        }

        public QueryResult<BaseItem> GetItems(InternalItemsQuery query)
        {
            if (query.ItemIds.Length > 0)
            {
                var result = LibraryManager.GetItemsResult(query);

                if (query.OrderBy.Count == 0 && query.ItemIds.Length > 1)
                {
                    result.Items = SortItemsByRequest(query, result.Items);
                }

                return result;
            }

            return GetItemsInternal(query);
        }

        public IReadOnlyList<BaseItem> GetItemList(InternalItemsQuery query)
        {
            query.EnableTotalRecordCount = false;

            if (query.ItemIds.Length > 0)
            {
                var result = LibraryManager.GetItemList(query);

                if (query.OrderBy.Count == 0 && query.ItemIds.Length > 1)
                {
                    return SortItemsByRequest(query, result);
                }

                return result;
            }

            return GetItemsInternal(query).Items;
        }

        protected virtual QueryResult<BaseItem> GetItemsInternal(InternalItemsQuery query)
        {
            if (SourceType == SourceType.Channel)
            {
                try
                {
                    query.Parent = this;
                    query.ChannelIds = new[] { ChannelId };

                    // Don't blow up here because it could cause parent screens with other content to fail
                    return ChannelManager.GetChannelItemsInternal(query, new SimpleProgress<double>(), CancellationToken.None).Result;
                }
                catch
                {
                    // Already logged at lower levels
                    return new QueryResult<BaseItem>();
                }
            }

            if (query.Recursive)
            {
                return QueryRecursive(query);
            }

            var user = query.User;

            Func<BaseItem, bool> filter = i => UserViewBuilder.Filter(i, user, query, UserDataManager, LibraryManager);

            IEnumerable<BaseItem> items;

            if (query.User == null)
            {
                items = Children.Where(filter);
            }
            else
            {
                // need to pass this param to the children.
                var childQuery = new InternalItemsQuery
                {
                    DisplayAlbumFolders = query.DisplayAlbumFolders
                };

                items = GetChildren(user, true, childQuery).Where(filter);
            }

            return PostFilterAndSort(items, query, true);
        }

        protected QueryResult<BaseItem> PostFilterAndSort(IEnumerable<BaseItem> items, InternalItemsQuery query, bool enableSorting)
        {
            var user = query.User;

            // Check recursive - don't substitute in plain folder views
            if (user != null)
            {
                items = CollapseBoxSetItemsIfNeeded(items, query, this, user, ConfigurationManager, CollectionManager);
            }

            #pragma warning disable CA1309
            if (!string.IsNullOrEmpty(query.NameStartsWithOrGreater))
            {
                items = items.Where(i => string.Compare(query.NameStartsWithOrGreater, i.SortName, StringComparison.InvariantCultureIgnoreCase) < 1);
            }

            if (!string.IsNullOrEmpty(query.NameStartsWith))
            {
                items = items.Where(i => i.SortName.StartsWith(query.NameStartsWith, StringComparison.InvariantCultureIgnoreCase));
            }

            if (!string.IsNullOrEmpty(query.NameLessThan))
            {
                items = items.Where(i => string.Compare(query.NameLessThan, i.SortName, StringComparison.InvariantCultureIgnoreCase) == 1);
            }
            #pragma warning restore CA1309

            // This must be the last filter
            if (!string.IsNullOrEmpty(query.AdjacentTo))
            {
                items = UserViewBuilder.FilterForAdjacency(items.ToList(), query.AdjacentTo);
            }

            return UserViewBuilder.SortAndPage(items, null, query, LibraryManager, enableSorting);
        }

        private static IEnumerable<BaseItem> CollapseBoxSetItemsIfNeeded(
            IEnumerable<BaseItem> items,
            InternalItemsQuery query,
            BaseItem queryParent,
            User user,
            IServerConfigurationManager configurationManager,
            ICollectionManager collectionManager)
        {
            if (items == null)
            {
                throw new ArgumentNullException(nameof(items));
            }

            if (CollapseBoxSetItems(query, queryParent, user, configurationManager))
            {
                items = collectionManager.CollapseItemsWithinBoxSets(items, user);
            }

            return items;
        }

        private static bool CollapseBoxSetItems(
            InternalItemsQuery query,
            BaseItem queryParent,
            User user,
            IServerConfigurationManager configurationManager)
        {
            // Could end up stuck in a loop like this
            if (queryParent is BoxSet)
            {
                return false;
            }

            if (queryParent is Series)
            {
                return false;
            }

            if (queryParent is Season)
            {
                return false;
            }

            if (queryParent is MusicAlbum)
            {
                return false;
            }

            if (queryParent is MusicArtist)
            {
                return false;
            }

            var param = query.CollapseBoxSetItems;

            if (!param.HasValue)
            {
                if (user != null && !configurationManager.Configuration.EnableGroupingIntoCollections)
                {
                    return false;
                }

                if (query.IncludeItemTypes.Length == 0 || query.IncludeItemTypes.Contains(BaseItemKind.Movie))
                {
                    param = true;
                }
            }

            return param.HasValue && param.Value && AllowBoxSetCollapsing(query);
        }

        private static bool AllowBoxSetCollapsing(InternalItemsQuery request)
        {
            if (request.IsFavorite.HasValue)
            {
                return false;
            }

            if (request.IsFavoriteOrLiked.HasValue)
            {
                return false;
            }

            if (request.IsLiked.HasValue)
            {
                return false;
            }

            if (request.IsPlayed.HasValue)
            {
                return false;
            }

            if (request.IsResumable.HasValue)
            {
                return false;
            }

            if (request.IsFolder.HasValue)
            {
                return false;
            }

            if (request.Genres.Count > 0)
            {
                return false;
            }

            if (request.GenreIds.Count > 0)
            {
                return false;
            }

            if (request.HasImdbId.HasValue)
            {
                return false;
            }

            if (request.HasOfficialRating.HasValue)
            {
                return false;
            }

            if (request.HasOverview.HasValue)
            {
                return false;
            }

            if (request.HasParentalRating.HasValue)
            {
                return false;
            }

            if (request.HasSpecialFeature.HasValue)
            {
                return false;
            }

            if (request.HasSubtitles.HasValue)
            {
                return false;
            }

            if (request.HasThemeSong.HasValue)
            {
                return false;
            }

            if (request.HasThemeVideo.HasValue)
            {
                return false;
            }

            if (request.HasTmdbId.HasValue)
            {
                return false;
            }

            if (request.HasTrailer.HasValue)
            {
                return false;
            }

            if (request.ImageTypes.Length > 0)
            {
                return false;
            }

            if (request.Is3D.HasValue)
            {
                return false;
            }

            if (request.IsHD.HasValue)
            {
                return false;
            }

            if (request.IsLocked.HasValue)
            {
                return false;
            }

            if (request.IsPlaceHolder.HasValue)
            {
                return false;
            }

            if (request.IsPlayed.HasValue)
            {
                return false;
            }

            if (!string.IsNullOrWhiteSpace(request.Person))
            {
                return false;
            }

            if (request.PersonIds.Length > 0)
            {
                return false;
            }

            if (request.ItemIds.Length > 0)
            {
                return false;
            }

            if (request.StudioIds.Length > 0)
            {
                return false;
            }

            if (request.GenreIds.Count > 0)
            {
                return false;
            }

            if (request.VideoTypes.Length > 0)
            {
                return false;
            }

            if (request.Years.Length > 0)
            {
                return false;
            }

            if (request.Tags.Length > 0)
            {
                return false;
            }

            if (request.OfficialRatings.Length > 0)
            {
                return false;
            }

            if (request.MinCommunityRating.HasValue)
            {
                return false;
            }

            if (request.MinCriticRating.HasValue)
            {
                return false;
            }

            if (request.MinIndexNumber.HasValue)
            {
                return false;
            }

            return true;
        }

        public List<BaseItem> GetChildren(User user, bool includeLinkedChildren)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            return GetChildren(user, includeLinkedChildren, null);
        }

        public virtual List<BaseItem> GetChildren(User user, bool includeLinkedChildren, InternalItemsQuery query)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            // the true root should return our users root folder children
            if (IsPhysicalRoot)
            {
                return LibraryManager.GetUserRootFolder().GetChildren(user, includeLinkedChildren);
            }

            var result = new Dictionary<Guid, BaseItem>();

            AddChildren(user, includeLinkedChildren, result, false, query);

            return result.Values.ToList();
        }

        protected virtual IEnumerable<BaseItem> GetEligibleChildrenForRecursiveChildren(User user)
        {
            return Children;
        }

        /// <summary>
        /// Adds the children to list.
        /// </summary>
        private void AddChildren(User user, bool includeLinkedChildren, Dictionary<Guid, BaseItem> result, bool recursive, InternalItemsQuery query)
        {
            // If Query.AlbumFolders is set, then enforce the format as per the db in that it permits sub-folders in music albums.
            IEnumerable<BaseItem> children = null;
            if ((query?.DisplayAlbumFolders ?? false) && (this is MusicAlbum))
            {
                children = Children;
                query = null;
            }

            // If there are not sub-folders, proceed as normal.
            if (children == null)
            {
                children = GetEligibleChildrenForRecursiveChildren(user);
            }

            foreach (var child in children)
            {
                bool? isVisibleToUser = null;

                if (query == null || UserViewBuilder.FilterItem(child, query))
                {
                    isVisibleToUser = child.IsVisible(user);

                    if (isVisibleToUser.Value)
                    {
                        result[child.Id] = child;
                    }
                }

                if (isVisibleToUser ?? child.IsVisible(user))
                {
                    if (recursive && child.IsFolder)
                    {
                        var folder = (Folder)child;

                        folder.AddChildren(user, includeLinkedChildren, result, true, query);
                    }
                }
            }

            if (includeLinkedChildren)
            {
                foreach (var child in GetLinkedChildren(user))
                {
                    if (query == null || UserViewBuilder.FilterItem(child, query))
                    {
                        if (child.IsVisible(user))
                        {
                            result[child.Id] = child;
                        }
                    }
                }
            }
        }

        public virtual IEnumerable<BaseItem> GetRecursiveChildren(User user, InternalItemsQuery query)
        {
            if (user == null)
            {
                throw new ArgumentNullException(nameof(user));
            }

            var result = new Dictionary<Guid, BaseItem>();

            AddChildren(user, true, result, true, query);

            return result.Values;
        }

        /// <summary>
        /// Gets the recursive children.
        /// </summary>
        /// <returns>IList{BaseItem}.</returns>
        public IList<BaseItem> GetRecursiveChildren()
        {
            return GetRecursiveChildren(true);
        }

        public IList<BaseItem> GetRecursiveChildren(bool includeLinkedChildren)
        {
            return GetRecursiveChildren(i => true, includeLinkedChildren);
        }

        public IList<BaseItem> GetRecursiveChildren(Func<BaseItem, bool> filter)
        {
            return GetRecursiveChildren(filter, true);
        }

        public IList<BaseItem> GetRecursiveChildren(Func<BaseItem, bool> filter, bool includeLinkedChildren)
        {
            var result = new Dictionary<Guid, BaseItem>();

            AddChildrenToList(result, includeLinkedChildren, true, filter);

            return result.Values.ToList();
        }

        /// <summary>
        /// Adds the children to list.
        /// </summary>
        private void AddChildrenToList(Dictionary<Guid, BaseItem> result, bool includeLinkedChildren, bool recursive, Func<BaseItem, bool> filter)
        {
            foreach (var child in Children)
            {
                if (filter == null || filter(child))
                {
                    result[child.Id] = child;
                }

                if (recursive && child.IsFolder)
                {
                    var folder = (Folder)child;

                    // We can only support includeLinkedChildren for the first folder, or we might end up stuck in a loop of linked items
                    folder.AddChildrenToList(result, false, true, filter);
                }
            }

            if (includeLinkedChildren)
            {
                foreach (var child in GetLinkedChildren())
                {
                    if (filter == null || filter(child))
                    {
                        result[child.Id] = child;
                    }
                }
            }
        }

        /// <summary>
        /// Gets the linked children.
        /// </summary>
        /// <returns>IEnumerable{BaseItem}.</returns>
        public List<BaseItem> GetLinkedChildren()
        {
            var linkedChildren = LinkedChildren;
            var list = new List<BaseItem>(linkedChildren.Length);

            foreach (var i in linkedChildren)
            {
                var child = GetLinkedChild(i);

                if (child != null)
                {
                    list.Add(child);
                }
            }

            return list;
        }

        public bool ContainsLinkedChildByItemId(Guid itemId)
        {
            var linkedChildren = LinkedChildren;
            foreach (var i in linkedChildren)
            {
                if (i.ItemId.HasValue)
                {
                    if (i.ItemId.Value == itemId)
                    {
                        return true;
                    }

                    continue;
                }

                var child = GetLinkedChild(i);

                if (child != null && child.Id == itemId)
                {
                    return true;
                }
            }

            return false;
        }

        public List<BaseItem> GetLinkedChildren(User user)
        {
            if (!FilterLinkedChildrenPerUser || user == null)
            {
                return GetLinkedChildren();
            }

            var linkedChildren = LinkedChildren;
            var list = new List<BaseItem>(linkedChildren.Length);

            if (linkedChildren.Length == 0)
            {
                return list;
            }

            var allUserRootChildren = LibraryManager.GetUserRootFolder()
                .GetChildren(user, true)
                .OfType<Folder>()
                .ToList();

            var collectionFolderIds = allUserRootChildren
                .Select(i => i.Id)
                .ToList();

            foreach (var i in linkedChildren)
            {
                var child = GetLinkedChild(i);

                if (child == null)
                {
                    continue;
                }

                var childOwner = child.GetOwner() ?? child;

                if (child is not IItemByName)
                {
                    var childProtocol = childOwner.PathProtocol;
                    if (!childProtocol.HasValue || childProtocol.Value != Model.MediaInfo.MediaProtocol.File)
                    {
                        if (!childOwner.IsVisibleStandalone(user))
                        {
                            continue;
                        }
                    }
                    else
                    {
                        var itemCollectionFolderIds =
                            LibraryManager.GetCollectionFolders(childOwner, allUserRootChildren).Select(f => f.Id);

                        if (!itemCollectionFolderIds.Any(collectionFolderIds.Contains))
                        {
                            continue;
                        }
                    }
                }

                list.Add(child);
            }

            return list;
        }

        /// <summary>
        /// Gets the linked children.
        /// </summary>
        /// <returns>IEnumerable{BaseItem}.</returns>
        public IEnumerable<Tuple<LinkedChild, BaseItem>> GetLinkedChildrenInfos()
        {
            return LinkedChildren
                .Select(i => new Tuple<LinkedChild, BaseItem>(i, GetLinkedChild(i)))
                .Where(i => i.Item2 != null);
        }

        protected override async Task<bool> RefreshedOwnedItems(MetadataRefreshOptions options, List<FileSystemMetadata> fileSystemChildren, CancellationToken cancellationToken)
        {
            var changesFound = false;

            if (IsFileProtocol)
            {
                if (RefreshLinkedChildren(fileSystemChildren))
                {
                    changesFound = true;
                }
            }

            var baseHasChanges = await base.RefreshedOwnedItems(options, fileSystemChildren, cancellationToken).ConfigureAwait(false);

            return baseHasChanges || changesFound;
        }

        /// <summary>
        /// Refreshes the linked children.
        /// </summary>
        /// <param name=""fileSystemChildren"">The enumerable of file system metadata.</param>
        /// <returns><c>true</c> if the linked children were updated, <c>false</c> otherwise.</returns>
        protected virtual bool RefreshLinkedChildren(IEnumerable<FileSystemMetadata> fileSystemChildren)
        {
            if (SupportsShortcutChildren)
            {
                var newShortcutLinks = fileSystemChildren
                    .Where(i => !i.IsDirectory && FileSystem.IsShortcut(i.FullName))
                    .Select(i =>
                    {
                        try
                        {
                            Logger.LogDebug(""Found shortcut at {0}"", i.FullName);

                            var resolvedPath = CollectionFolder.ApplicationHost.ExpandVirtualPath(FileSystem.ResolveShortcut(i.FullName));

                            if (!string.IsNullOrEmpty(resolvedPath))
                            {
                                return new LinkedChild
                                {
                                    Path = resolvedPath,
                                    Type = LinkedChildType.Shortcut
                                };
                            }

                            Logger.LogError(""Error resolving shortcut {0}"", i.FullName);

                            return null;
                        }
                        catch (IOException ex)
                        {
                            Logger.LogError(ex, ""Error resolving shortcut {0}"", i.FullName);
                            return null;
                        }
                    })
                    .Where(i => i != null)
                    .ToList();

                var currentShortcutLinks = LinkedChildren.Where(i => i.Type == LinkedChildType.Shortcut).ToList();

                if (!newShortcutLinks.SequenceEqual(currentShortcutLinks, new LinkedChildComparer(FileSystem)))
                {
                    Logger.LogInformation(""Shortcut links have changed for {0}"", Path);

                    newShortcutLinks.AddRange(LinkedChildren.Where(i => i.Type == LinkedChildType.Manual));
                    LinkedChildren = newShortcutLinks.ToArray();
                    return true;
                }
            }

            foreach (var child in LinkedChildren)
            {
                // Reset the cached value
                child.ItemId = null;
            }

            return false;
        }

        /// <summary>
        /// Marks the played.
        /// </summary>
        /// <param name=""user"">The user.</param>
        /// <param name=""datePlayed"">The date played.</param>
        /// <param name=""resetPosition"">if set to <c>true</c> [reset position].</param>
        public override void MarkPlayed(
            User user,
            DateTime? datePlayed,
            bool resetPosition)
        {
            var query = new InternalItemsQuery
            {
                User = user,
                Recursive = true,
                IsFolder = false,
                EnableTotalRecordCount = false
            };

            if (!user.DisplayMissingEpisodes)
            {
                query.IsVirtualItem = false;
            }

            var itemsResult = GetItemList(query);

            // Sweep through recursively and update status
            foreach (var item in itemsResult)
            {
                if (item.IsVirtualItem)
                {
                    // The querying doesn't support virtual unaired
                    var episode = item as Episode;
                    if (episode != null && episode.IsUnaired)
                    {
                        continue;
                    }
                }

                item.MarkPlayed(user, datePlayed, resetPosition);
            }
        }

        /// <summary>
        /// Marks the unplayed.
        /// </summary>
        /// <param name=""user"">The user.</param>
        public override void MarkUnplayed(User user)
        {
            var itemsResult = GetItemList(new InternalItemsQuery
            {
                User = user,
                Recursive = true,
                IsFolder = false,
                EnableTotalRecordCount = false
            });

            // Sweep through recursively and update status
            foreach (var item in itemsResult)
            {
                item.MarkUnplayed(user);
            }
        }

        public override bool IsPlayed(User user)
        {
            var itemsResult = GetItemList(new InternalItemsQuery(user)
            {
                Recursive = true,
                IsFolder = false,
                IsVirtualItem = false,
                EnableTotalRecordCount = false
            });

            return itemsResult
                .All(i => i.IsPlayed(user));
        }

        public override bool IsUnplayed(User user)
        {
            return !IsPlayed(user);
        }

        public override void FillUserDataDtoValues(UserItemDataDto dto, UserItemData userData, BaseItemDto itemDto, User user, DtoOptions fields)
        {
            if (!SupportsUserDataFromChildren)
            {
                return;
            }

            if (itemDto != null)
            {
                if (fields.ContainsField(ItemFields.RecursiveItemCount))
                {
                    itemDto.RecursiveItemCount = GetRecursiveChildCount(user);
                }
            }

            if (SupportsPlayedStatus)
            {
                var unplayedQueryResult = GetItems(new InternalItemsQuery(user)
                {
                    Recursive = true,
                    IsFolder = false,
                    IsVirtualItem = false,
                    EnableTotalRecordCount = true,
                    Limit = 0,
                    IsPlayed = false,
                    DtoOptions = new DtoOptions(false)
                    {
                        EnableImages = false
                    }
                }).TotalRecordCount;

                dto.UnplayedItemCount = unplayedQueryResult;

                if (itemDto?.RecursiveItemCount > 0)
                {
                    var unplayedPercentage = ((double)unplayedQueryResult / itemDto.RecursiveItemCount.Value) * 100;
                    dto.PlayedPercentage = 100 - unplayedPercentage;
                    dto.Played = dto.PlayedPercentage.Value >= 100;
                }
                else
                {
                    dto.Played = (dto.UnplayedItemCount ?? 0) == 0;
                }
            }
        }

        /// <summary>
        /// Contains constants used when reporting scan progress.
        /// </summary>
        private static class ProgressHelpers
        {
            /// <summary>
            /// Reported after the folders immediate children are retrieved.
            /// </summary>
            public const int RetrievedChildren = 5;

            /// <summary>
            /// Reported after add, updating, or deleting child items from the LibraryManager.
            /// </summary>
            public const int UpdatedChildItems = 10;

            /// <summary>
            /// Reported once subfolders are scanned.
            /// When scanning subfolders, the progress will be between [UpdatedItems, ScannedSubfolders].
            /// </summary>
            public const int ScannedSubfolders = 50;

            /// <summary>
            /// Reported once metadata is refreshed.
            /// When refreshing metadata, the progress will be between [ScannedSubfolders, MetadataRefreshed].
            /// </summary>
            public const int RefreshedMetadata = 100;

            /// <summary>
            /// Gets the current progress given the previous step, next step, and progress in between.
            /// </summary>
            /// <param name=""previousProgressStep"">The previous progress step.</param>
            /// <param name=""nextProgressStep"">The next progress step.</param>
            /// <param name=""currentProgress"">The current progress step.</param>
            /// <returns>The progress.</returns>
            public static double GetProgress(int previousProgressStep, int nextProgressStep, double currentProgress)
            {
                return previousProgressStep + ((nextProgressStep - previousProgressStep) * (currentProgress / 100));
            }
        }
    }
69111,C#,"public class CustomConvertersCosmosTest : CustomConvertersTestBase<CustomConvertersCosmosTest.CustomConvertersCosmosFixture>
{
    public CustomConvertersCosmosTest(CustomConvertersCosmosFixture fixture)
        : base(fixture)
    {
        Fixture.TestSqlLoggerFactory.Clear();
    }

    public override void Can_perform_query_with_max_length()
    {
        // Over the 2Mb document limit
    }

    [ConditionalTheory(Skip = ""Issue #17246 No Explicit Convert"")]
    public override Task Can_filter_projection_with_inline_enum_variable(bool async)
        => base.Can_filter_projection_with_inline_enum_variable(async);

    [ConditionalTheory(Skip = ""Issue #17246 No Explicit Convert"")]
    public override Task Can_filter_projection_with_captured_enum_variable(bool async)
        => base.Can_filter_projection_with_captured_enum_variable(async);

    [ConditionalFact(Skip = ""Issue #17246 No Explicit Convert"")]
    public override void Can_query_with_null_parameters_using_any_nullable_data_type()
        => base.Can_query_with_null_parameters_using_any_nullable_data_type();

    [ConditionalFact(Skip = ""Issue #16920"")]
    public override void Can_insert_and_read_back_with_string_key()
        => base.Can_insert_and_read_back_with_string_key();

    [ConditionalFact(Skip = ""Issue #17246 No Explicit Convert"")]
    public override void Can_query_and_update_with_conversion_for_custom_type()
        => base.Can_query_and_update_with_conversion_for_custom_type();

    [ConditionalFact(Skip = ""Issue #16920"")]
    public override void Can_query_and_update_with_nullable_converter_on_primary_key()
        => base.Can_query_and_update_with_nullable_converter_on_primary_key();

    [ConditionalFact(Skip = ""Issue #16920"")]
    public override void Can_insert_and_read_back_with_binary_key()
        => base.Can_insert_and_read_back_with_binary_key();

    [ConditionalFact(Skip = ""Issue #16920"")]
    public override void Can_insert_and_read_back_with_case_insensitive_string_key()
        => base.Can_insert_and_read_back_with_case_insensitive_string_key();

    [ConditionalFact(Skip = ""Issue #17246 No Explicit Convert"")]
    public override void Can_insert_and_query_struct_to_string_converter_for_pk()
        => base.Can_insert_and_query_struct_to_string_converter_for_pk();

    [ConditionalFact(Skip = ""Issue #17670"")]
    public override void Can_read_back_mapped_enum_from_collection_first_or_default()
        => base.Can_read_back_mapped_enum_from_collection_first_or_default();

    [ConditionalFact(Skip = ""Issue #17246"")]
    public override void Can_read_back_bool_mapped_as_int_through_navigation()
        => base.Can_read_back_bool_mapped_as_int_through_navigation();

    [ConditionalFact(Skip = ""Issue #17246"")]
    public override void Value_conversion_is_appropriately_used_for_join_condition()
        => base.Value_conversion_is_appropriately_used_for_join_condition();

    [ConditionalFact(Skip = ""Issue #17246"")]
    public override void Value_conversion_is_appropriately_used_for_left_join_condition()
        => base.Value_conversion_is_appropriately_used_for_left_join_condition();

    [ConditionalFact]
    public override void Where_bool_gets_converted_to_equality_when_value_conversion_is_used()
    {
        base.Where_bool_gets_converted_to_equality_when_value_conversion_is_used();

        AssertSql(
            @""SELECT c
FROM root c
WHERE (c[""""Discriminator""""] IN (""""Blog"""", """"RssBlog"""") AND (c[""""IsVisible""""] = """"Y""""))"");
    }

    [ConditionalFact]
    public override void Where_negated_bool_gets_converted_to_equality_when_value_conversion_is_used()
    {
        base.Where_negated_bool_gets_converted_to_equality_when_value_conversion_is_used();

        AssertSql(
            @""SELECT c
FROM root c
WHERE (c[""""Discriminator""""] IN (""""Blog"""", """"RssBlog"""") AND NOT((c[""""IsVisible""""] = """"Y"""")))"");
    }

    [ConditionalFact]
    public override void Where_bool_gets_converted_to_equality_when_value_conversion_is_used_using_EFProperty()
    {
        base.Where_bool_gets_converted_to_equality_when_value_conversion_is_used_using_EFProperty();

        AssertSql(
            @""SELECT c
FROM root c
WHERE (c[""""Discriminator""""] IN (""""Blog"""", """"RssBlog"""") AND (c[""""IsVisible""""] = """"Y""""))"");
    }

    [ConditionalFact]
    public override void Where_bool_gets_converted_to_equality_when_value_conversion_is_used_using_indexer()
    {
        base.Where_bool_gets_converted_to_equality_when_value_conversion_is_used_using_indexer();

        AssertSql(
            @""SELECT c
FROM root c
WHERE (c[""""Discriminator""""] IN (""""Blog"""", """"RssBlog"""") AND NOT((c[""""IndexerVisible""""] = """"Aye"""")))"");
    }

    [ConditionalFact(Skip = ""Issue#27678"")]
    public override void Optional_owned_with_converter_reading_non_nullable_column()
        => base.Optional_owned_with_converter_reading_non_nullable_column();

    public override void Value_conversion_on_enum_collection_contains()
        => Assert.Contains(
            CoreStrings.TranslationFailed("""")[47..],
            Assert.Throws<InvalidOperationException>(() => base.Value_conversion_on_enum_collection_contains()).Message);

    private void AssertSql(params string[] expected)
        => Fixture.TestSqlLoggerFactory.AssertBaseline(expected);

    public class CustomConvertersCosmosFixture : CustomConvertersFixtureBase
    {
        protected override ITestStoreFactory TestStoreFactory
            => CosmosTestStoreFactory.Instance;

        public override bool StrictEquality
            => true;

        public override int IntegerPrecision
            => 53;

        public override bool SupportsAnsi
            => false;

        public override bool SupportsUnicodeToAnsiConversion
            => false;

        public override bool SupportsLargeStringComparisons
            => true;

        public override bool SupportsBinaryKeys
            => true;

        public override bool SupportsDecimalComparisons
            => true;

        public override DateTime DefaultDateTime
            => new();

        public override bool PreservesDateTimeKind
            => true;

        public TestSqlLoggerFactory TestSqlLoggerFactory
            => (TestSqlLoggerFactory)ListLoggerFactory;

        protected override void OnModelCreating(ModelBuilder modelBuilder, DbContext context)
        {
            base.OnModelCreating(modelBuilder, context);

            var shadowJObject = (Property)modelBuilder.Entity<BuiltInDataTypesShadow>().Property(""__jObject"").Metadata;
            shadowJObject.SetConfigurationSource(ConfigurationSource.Convention);
            var nullableShadowJObject = (Property)modelBuilder.Entity<BuiltInNullableDataTypesShadow>().Property(""__jObject"").Metadata;
            nullableShadowJObject.SetConfigurationSource(ConfigurationSource.Convention);

            modelBuilder.Entity<SimpleCounter>(b => b.ToContainer(""SimpleCounters""));
        }
    }
}",1,439 334 2000 58 2001 60 2000 46 2002 62 123 439 2000 40 2002 2003 41 58 320 40 2003 41 123 2004 46 2005 46 2006 40 41 59 125 439 431 492 2007 40 41 123 621 125 91 2008 40 2009 61 648 41 93 439 431 2010 2011 40 323 314 41 619 320 46 2011 40 314 41 59 91 2008 40 2009 61 648 41 93 439 431 2010 2012 40 323 314 41 619 320 46 2012 40 314 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2014 40 41 619 320 46 2014 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2015 40 41 619 320 46 2015 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2016 40 41 619 320 46 2016 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2017 40 41 619 320 46 2017 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2018 40 41 619 320 46 2018 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2019 40 41 619 320 46 2019 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2020 40 41 619 320 46 2020 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2021 40 41 619 320 46 2021 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2022 40 41 619 320 46 2022 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2023 40 41 619 320 46 2023 40 41 59 91 2013 40 2009 61 648 41 93 439 431 492 2024 40 41 619 320 46 2024 40 41 59 91 2013 93 439 431 492 2025 40 41 123 320 46 2025 40 41 59 2026 40 64 648 648 648 648 648 648 648 648 648 648 648 41 59 125 91 2013 93 439 431 492 2027 40 41 123 320 46 2027 40 41 59 2028 40 64 648 648 648 648 648 648 648 648 648 648 648 41 59 125 91 2013 93 439 431 492 2029 40 41 123 320 46 2029 40 41 59 2030 40 64 648 648 648 648 648 648 648 648 648 648 648 41 59 125 91 2013 93 439 431 492 2031 40 41 123 320 46 2031 40 41 59 2032 40 64 648 648 648 648 648 648 648 648 648 648 648 41 59 125 91 2013 40 2009 61 648 41 93 439 431 492 2033 40 41 619 320 46 2033 40 41 59 439 431 492 2034 40 41 619 2035 46 2036 40 2037 46 2038 40 648 41 91 1503 93 44 2035 46 2039 60 2040 62 40 40 41 619 320 46 2034 40 41 41 46 2041 41 59 437 492 2042 40 433 461 91 93 2043 41 619 2044 46 2045 46 2046 40 2043 41 59 439 334 2002 58 2047 123 438 431 2048 2049 619 2050 46 2051 59 439 431 323 2052 619 473 59 439 431 404 2053 619 1503 59 439 431 323 2054 619 380 59 439 431 323 2055 619 380 59 439 431 323 2056 619 473 59 439 431 323 2057 619 473 59 439 431 323 2058 619 473 59 439 431 2059 2060 619 418 40 41 59 439 431 323 2061 619 473 59 439 2045 2045 619 40 2045 41 2062 59 438 431 492 2063 40 2064 2065 44 2066 2067 41 123 320 46 2063 40 2065 44 2067 41 59 490 2068 61 40 2069 41 2065 46 2070 60 2071 62 40 41 46 2069 40 648 41 46 2072 59 2068 46 2073 40 2074 46 2075 41 59 490 2076 61 40 2069 41 2065 46 2070 60 2077 62 40 41 46 2069 40 648 41 46 2072 59 2076 46 2073 40 2074 46 2075 41 59 2065 46 2070 60 2078 62 40 2079 619 2079 46 2080 40 648 41 41 59 125 125 125 
68048,C#,"public class EntityType : TypeBase, IMutableEntityType, IConventionEntityType, IRuntimeEntityType
{
    private const string DynamicProxyGenAssemblyName = ""DynamicProxyGenAssembly2"";

    private readonly SortedSet<ForeignKey> _foreignKeys
        = new(ForeignKeyComparer.Instance);

    private readonly SortedDictionary<string, Navigation> _navigations
        = new(StringComparer.Ordinal);

    private readonly SortedDictionary<string, SkipNavigation> _skipNavigations
        = new(StringComparer.Ordinal);

    private readonly SortedDictionary<IReadOnlyList<IReadOnlyProperty>, Index> _unnamedIndexes
        = new(PropertyListComparer.Instance);

    private readonly SortedDictionary<string, Index> _namedIndexes
        = new(StringComparer.Ordinal);

    private readonly SortedDictionary<string, Property> _properties;

    private readonly SortedDictionary<IReadOnlyList<IReadOnlyProperty>, Key> _keys
        = new(PropertyListComparer.Instance);

    private readonly SortedDictionary<string, ServiceProperty> _serviceProperties
        = new(StringComparer.Ordinal);

    private List<object>? _data;
    private Key? _primaryKey;
    private bool? _isKeyless;
    private bool _isOwned;
    private EntityType? _baseType;
    private ChangeTrackingStrategy? _changeTrackingStrategy;
    private InternalEntityTypeBuilder? _builder;

    private ConfigurationSource? _primaryKeyConfigurationSource;
    private ConfigurationSource? _isKeylessConfigurationSource;
    private ConfigurationSource? _baseTypeConfigurationSource;
    private ConfigurationSource? _changeTrackingStrategyConfigurationSource;
    private ConfigurationSource? _constructorBindingConfigurationSource;
    private ConfigurationSource? _serviceOnlyConstructorBindingConfigurationSource;

    // Warning: Never access these fields directly as access needs to be thread-safe
    private PropertyCounts? _counts;

    // _serviceOnlyConstructorBinding needs to be set as well whenever _constructorBinding is set
    private InstantiationBinding? _constructorBinding;
    private InstantiationBinding? _serviceOnlyConstructorBinding;

    private Func<InternalEntityEntry, ISnapshot>? _relationshipSnapshotFactory;
    private Func<InternalEntityEntry, ISnapshot>? _originalValuesFactory;
    private Func<InternalEntityEntry, ISnapshot>? _temporaryValuesFactory;
    private Func<ISnapshot>? _storeGeneratedValuesFactory;
    private Func<ValueBuffer, ISnapshot>? _shadowValuesFactory;
    private Func<ISnapshot>? _emptyShadowValuesFactory;
    private Func<MaterializationContext, object>? _instanceFactory;
    private IProperty[]? _foreignKeyProperties;
    private IProperty[]? _valueGeneratingProperties;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public EntityType(string name, Model model, bool owned, ConfigurationSource configurationSource)
        : base(name, Model.DefaultPropertyBagType, model, configurationSource)
    {
        _properties = new SortedDictionary<string, Property>(new PropertyNameComparer(this));
        _builder = new InternalEntityTypeBuilder(this, model.Builder);
        _isOwned = owned;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public EntityType(Type type, Model model, bool owned, ConfigurationSource configurationSource)
        : base(type, model, configurationSource)
    {
        if (!type.IsValidEntityType())
        {
            throw new ArgumentException(CoreStrings.InvalidEntityType(type));
        }

        if (DynamicProxyGenAssemblyName.Equals(
                type.Assembly.GetName().Name, StringComparison.Ordinal))
        {
            throw new ArgumentException(
                CoreStrings.AddingProxyTypeAsEntityType(type.FullName));
        }

        _properties = new SortedDictionary<string, Property>(new PropertyNameComparer(this));
        _builder = new InternalEntityTypeBuilder(this, model.Builder);
        _isOwned = owned;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public EntityType(string name, Type type, Model model, bool owned, ConfigurationSource configurationSource)
        : base(name, type, model, configurationSource)
    {
        if (!type.IsValidEntityType())
        {
            throw new ArgumentException(CoreStrings.InvalidEntityType(type));
        }

        if (DynamicProxyGenAssemblyName.Equals(
                type.Assembly.GetName().Name, StringComparison.Ordinal))
        {
            throw new ArgumentException(
                CoreStrings.AddingProxyTypeAsEntityType(type.FullName));
        }

        _properties = new SortedDictionary<string, Property>(new PropertyNameComparer(this));
        _builder = new InternalEntityTypeBuilder(this, model.Builder);
        _isOwned = owned;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityTypeBuilder Builder
    {
        [DebuggerStepThrough]
        get => _builder ?? throw new InvalidOperationException(CoreStrings.ObjectRemovedFromModel);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsInModel
        => _builder is not null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetRemovedFromModel()
        => _builder = null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? BaseType
        => _baseType;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsKeyless
    {
        get => RootType()._isKeyless ?? false;
        set => SetIsKeyless(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsOwned()
        => _isOwned;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void SetIsOwned(bool value)
        => _isOwned = value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? Owner
        => FindOwnership()?.PrincipalEntityType;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    private string DisplayName()
        => ((IReadOnlyEntityType)this).DisplayName();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetIsKeyless(bool? keyless, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (_isKeyless == keyless)
        {
            UpdateIsKeylessConfigurationSource(configurationSource);
            return keyless;
        }

        if (keyless == true)
        {
            if (_baseType != null)
            {
                throw new InvalidOperationException(
                    CoreStrings.DerivedEntityTypeHasNoKey(DisplayName(), RootType().DisplayName()));
            }

            if (_keys.Count != 0)
            {
                throw new InvalidOperationException(
                    CoreStrings.KeylessTypeExistingKey(
                        DisplayName(), _keys.First().Value.Properties.Format()));
            }
        }

        _isKeyless = keyless;

        if (keyless == null)
        {
            _isKeylessConfigurationSource = null;
        }
        else
        {
            UpdateIsKeylessConfigurationSource(configurationSource);
        }

        return keyless;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetIsKeylessConfigurationSource()
        => _isKeylessConfigurationSource;

    private void UpdateIsKeylessConfigurationSource(ConfigurationSource configurationSource)
        => _isKeylessConfigurationSource = configurationSource.Max(_isKeylessConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? SetBaseType(EntityType? newBaseType, ConfigurationSource configurationSource)
    {
        EnsureMutable();
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");

        if (_baseType == newBaseType)
        {
            UpdateBaseTypeConfigurationSource(configurationSource);
            newBaseType?.UpdateConfigurationSource(configurationSource);
            return newBaseType;
        }

        var originalBaseType = _baseType;

        _baseType?._directlyDerivedTypes.Remove(this);
        _baseType = null;

        if (newBaseType != null)
        {
            if (!newBaseType.ClrType.IsAssignableFrom(ClrType))
            {
                throw new InvalidOperationException(
                    CoreStrings.NotAssignableClrBaseType(
                        DisplayName(), newBaseType.DisplayName(), ClrType.ShortDisplayName(),
                        newBaseType.ClrType.ShortDisplayName()));
            }

            if (newBaseType.InheritsFrom(this))
            {
                throw new InvalidOperationException(CoreStrings.CircularInheritance(DisplayName(), newBaseType.DisplayName()));
            }

            if (_keys.Count > 0)
            {
                throw new InvalidOperationException(CoreStrings.DerivedEntityCannotHaveKeys(DisplayName()));
            }

            if (IsKeyless)
            {
                throw new InvalidOperationException(CoreStrings.DerivedEntityCannotBeKeyless(DisplayName()));
            }

            if (IsOwned() != newBaseType.IsOwned())
            {
                throw new InvalidOperationException(
                    CoreStrings.DerivedEntityOwnershipMismatch(
                        newBaseType.DisplayName(),
                        DisplayName(),
                        IsOwned() ? DisplayName() : newBaseType.DisplayName(),
                        !IsOwned() ? DisplayName() : newBaseType.DisplayName()));
            }

            var conflictingMember = newBaseType.GetMembers()
                .Select(p => p.Name)
                .SelectMany(FindMembersInHierarchy)
                .FirstOrDefault();

            if (conflictingMember != null)
            {
                var baseProperty = newBaseType.FindMembersInHierarchy(conflictingMember.Name).Single();
                throw new InvalidOperationException(
                    CoreStrings.DuplicatePropertiesOnBase(
                        DisplayName(),
                        newBaseType.DisplayName(),
                        ((IReadOnlyTypeBase)conflictingMember.DeclaringType).DisplayName(),
                        conflictingMember.Name,
                        ((IReadOnlyTypeBase)baseProperty.DeclaringType).DisplayName(),
                        baseProperty.Name));
            }

            _baseType = newBaseType;
            _baseType._directlyDerivedTypes.Add(this);
        }

        UpdateBaseTypeConfigurationSource(configurationSource);
        newBaseType?.UpdateConfigurationSource(configurationSource);

        return (EntityType?)Model.ConventionDispatcher.OnEntityTypeBaseTypeChanged(Builder, newBaseType, originalBaseType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void OnTypeRemoved()
    {
        if (_foreignKeys.Count > 0)
        {
            foreach (var foreignKey in GetDeclaredForeignKeys().ToList())
            {
                if (foreignKey.PrincipalEntityType != this)
                {
                    RemoveForeignKey(foreignKey);
                }
            }
        }

        if (_skipNavigations.Count > 0)
        {
            foreach (var skipNavigation in GetDeclaredSkipNavigations().ToList())
            {
                if (skipNavigation.TargetEntityType != this)
                {
                    RemoveSkipNavigation(skipNavigation);
                }
            }
        }

        _builder = null;
        _baseType?._directlyDerivedTypes.Remove(this);

        Model.ConventionDispatcher.OnEntityTypeRemoved(Model.Builder, this);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetBaseTypeConfigurationSource()
        => _baseTypeConfigurationSource;

    [DebuggerStepThrough]
    private void UpdateBaseTypeConfigurationSource(ConfigurationSource configurationSource)
        => _baseTypeConfigurationSource = configurationSource.Max(_baseTypeConfigurationSource);

    private readonly SortedSet<EntityType> _directlyDerivedTypes = new(EntityTypeFullNameComparer.Instance);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    // Note this is ISet because there is no suitable readonly interface in the profiles we are using
    [DebuggerStepThrough]
    public virtual ISet<EntityType> GetDirectlyDerivedTypes()
        => _directlyDerivedTypes;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<EntityType> GetDerivedTypes()
    {
        if (_directlyDerivedTypes.Count == 0)
        {
            return Enumerable.Empty<EntityType>();
        }

        var derivedTypes = new List<EntityType>();
        var type = this;
        var currentTypeIndex = 0;
        while (type != null)
        {
            derivedTypes.AddRange(type.GetDirectlyDerivedTypes());
            type = derivedTypes.Count > currentTypeIndex
                ? derivedTypes[currentTypeIndex]
                : null;
            currentTypeIndex++;
        }

        return derivedTypes;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual IEnumerable<EntityType> GetDerivedTypesInclusive()
        => _directlyDerivedTypes.Count == 0
            ? new[] { this }
            : new[] { this }.Concat(GetDerivedTypes());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual IEnumerable<ForeignKey> GetForeignKeysInHierarchy()
        => _directlyDerivedTypes.Count == 0
            ? GetForeignKeys()
            : GetForeignKeys().Concat(GetDerivedForeignKeys());

    private bool InheritsFrom(EntityType entityType)
    {
        var et = this;

        do
        {
            if (entityType == et)
            {
                return true;
            }
        }
        while ((et = et._baseType) != null);

        return false;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual EntityType RootType()
        => (EntityType)((IReadOnlyEntityType)this).GetRootType();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override string ToString()
        => ((IReadOnlyEntityType)this).ToDebugString(MetadataDebugStringOptions.SingleLineDefault);

    /// <summary>
    ///     Runs the conventions when an annotation was set or removed.
    /// </summary>
    /// <param name=""name"">The key of the set annotation.</param>
    /// <param name=""annotation"">The annotation set.</param>
    /// <param name=""oldAnnotation"">The old annotation.</param>
    /// <returns>The annotation that was set.</returns>
    protected override IConventionAnnotation? OnAnnotationSet(
        string name,
        IConventionAnnotation? annotation,
        IConventionAnnotation? oldAnnotation)
        => Model.ConventionDispatcher.OnEntityTypeAnnotationChanged(Builder, name, annotation, oldAnnotation);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<PropertyBase> GetMembers()
        => GetProperties().Cast<PropertyBase>()
            .Concat(GetServiceProperties())
            .Concat(GetNavigations())
            .Concat(GetSkipNavigations());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<PropertyBase> GetDeclaredMembers()
        => GetDeclaredProperties().Cast<PropertyBase>()
            .Concat(GetDeclaredServiceProperties())
            .Concat(GetDeclaredNavigations())
            .Concat(GetDeclaredSkipNavigations());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<PropertyBase> FindMembersInHierarchy(string name)
        => FindPropertiesInHierarchy(name).Cast<PropertyBase>()
            .Concat(FindServicePropertiesInHierarchy(name))
            .Concat(FindNavigationsInHierarchy(name))
            .Concat(FindSkipNavigationsInHierarchy(name));

    #region Primary and Candidate Keys

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? SetPrimaryKey(Property? property, ConfigurationSource configurationSource)
        => SetPrimaryKey(
            property == null
                ? null
                : new[] { property }, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? SetPrimaryKey(
        IReadOnlyList<Property>? properties,
        ConfigurationSource configurationSource)
    {
        EnsureMutable();
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");

        if (_baseType != null)
        {
            throw new InvalidOperationException(CoreStrings.DerivedEntityTypeKey(DisplayName(), RootType().DisplayName()));
        }

        var oldPrimaryKey = _primaryKey;
        if (oldPrimaryKey == null && (properties is null || properties.Count == 0))
        {
            return null;
        }

        Key? newKey = null;
        if (properties?.Count > 0)
        {
            newKey = FindKey(properties);
            if (oldPrimaryKey != null
                && oldPrimaryKey == newKey)
            {
                UpdatePrimaryKeyConfigurationSource(configurationSource);
                newKey.UpdateConfigurationSource(configurationSource);
                return newKey;
            }

            newKey ??= AddKey(properties, configurationSource);
        }

        if (oldPrimaryKey != null)
        {
            foreach (var property in oldPrimaryKey.Properties)
            {
                _properties.Remove(property.Name);
                property.PrimaryKey = null;
            }

            _primaryKey = null;

            foreach (var property in oldPrimaryKey.Properties)
            {
                _properties.Add(property.Name, property);
            }
        }

        if (properties?.Count > 0 && newKey != null)
        {
            foreach (var property in newKey.Properties)
            {
                _properties.Remove(property.Name);
                property.PrimaryKey = newKey;
            }

            _primaryKey = newKey;

            foreach (var property in newKey.Properties)
            {
                _properties.Add(property.Name, property);
            }

            UpdatePrimaryKeyConfigurationSource(configurationSource);
        }
        else
        {
            SetPrimaryKeyConfigurationSource(null);
        }

        return (Key?)Model.ConventionDispatcher.OnPrimaryKeyChanged(Builder, newKey, oldPrimaryKey);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? FindPrimaryKey()
        => _baseType?.FindPrimaryKey() ?? _primaryKey;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? FindPrimaryKey(IReadOnlyList<Property>? properties)
    {
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotEmpty(properties, nameof(properties));

        if (_baseType != null)
        {
            return _baseType.FindPrimaryKey(properties);
        }

        return _primaryKey != null
            && PropertyListComparer.Instance.Compare(_primaryKey.Properties, properties) == 0
                ? _primaryKey
                : null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetPrimaryKeyConfigurationSource()
        => _primaryKeyConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    private void SetPrimaryKeyConfigurationSource(ConfigurationSource? configurationSource)
        => _primaryKeyConfigurationSource = configurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    private void UpdatePrimaryKeyConfigurationSource(ConfigurationSource configurationSource)
        => _primaryKeyConfigurationSource = configurationSource.Max(_primaryKeyConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? AddKey(Property property, ConfigurationSource configurationSource)
        => AddKey(
            new[] { property }, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? AddKey(
        IReadOnlyList<Property> properties,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(properties, nameof(properties));
        Check.HasNoNulls(properties, nameof(properties));
        EnsureMutable();

        if (_baseType != null)
        {
            throw new InvalidOperationException(CoreStrings.DerivedEntityTypeKey(DisplayName(), _baseType.DisplayName()));
        }

        if (IsKeyless)
        {
            throw new InvalidOperationException(CoreStrings.KeylessTypeWithKey(properties.Format(), DisplayName()));
        }

        for (var i = 0; i < properties.Count; i++)
        {
            var property = properties[i];
            for (var j = i + 1; j < properties.Count; j++)
            {
                if (property == properties[j])
                {
                    throw new InvalidOperationException(CoreStrings.DuplicatePropertyInKey(properties.Format(), property.Name));
                }
            }

            if (FindProperty(property.Name) != property
                || !property.IsInModel)
            {
                throw new InvalidOperationException(CoreStrings.KeyPropertiesWrongEntity(properties.Format(), DisplayName()));
            }

            if (property.IsNullable)
            {
                throw new InvalidOperationException(CoreStrings.NullableKey(DisplayName(), property.Name));
            }
        }

        var key = FindKey(properties);
        if (key != null)
        {
            throw new InvalidOperationException(
                CoreStrings.DuplicateKey(
                    properties.Format(), DisplayName(), key.DeclaringEntityType.DisplayName()));
        }

        key = new Key(properties, configurationSource);
        _keys.Add(properties, key);

        foreach (var property in properties)
        {
            if (property.Keys == null)
            {
                property.Keys = new List<Key> { key };
            }
            else
            {
                property.Keys.Add(key);
            }
        }

        return (Key?)Model.ConventionDispatcher.OnKeyAdded(key.Builder)?.Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? FindKey(IReadOnlyProperty property)
        => FindKey(new[] { property });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? FindKey(IReadOnlyList<IReadOnlyProperty> properties)
    {
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotEmpty(properties, nameof(properties));

        return FindDeclaredKey(properties) ?? _baseType?.FindKey(properties);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Key> GetDeclaredKeys()
        => _keys.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? FindDeclaredKey(IReadOnlyList<IReadOnlyProperty> properties)
        => _keys.TryGetValue(Check.NotEmpty(properties, nameof(properties)), out var key)
            ? key
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? RemoveKey(IReadOnlyList<IReadOnlyProperty> properties)
    {
        Check.NotEmpty(properties, nameof(properties));

        var wrongEntityTypeProperty = properties.FirstOrDefault(p => !p.DeclaringEntityType.IsAssignableFrom(this));
        if (wrongEntityTypeProperty != null)
        {
            throw new InvalidOperationException(
                CoreStrings.KeyWrongType(
                    properties.Format(), DisplayName(), wrongEntityTypeProperty.DeclaringEntityType.DisplayName()));
        }

        var key = FindDeclaredKey(properties);
        return key == null
            ? null
            : RemoveKey(key);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Key? RemoveKey(Key key)
    {
        Check.NotNull(key, nameof(key));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        if (key.DeclaringEntityType != this)
        {
            throw new InvalidOperationException(
                CoreStrings.KeyWrongType(key.Properties.Format(), DisplayName(), key.DeclaringEntityType.DisplayName()));
        }

        CheckKeyNotInUse(key);

        if (_primaryKey == key)
        {
            SetPrimaryKey((IReadOnlyList<Property>?)null, ConfigurationSource.Explicit);
            _primaryKeyConfigurationSource = null;
        }

        var removed = _keys.Remove(key.Properties);
        Check.DebugAssert(removed, ""removed is false"");
        key.SetRemovedFromModel();

        foreach (var property in key.Properties)
        {
            if (property.Keys != null)
            {
                property.Keys.Remove(key);
                if (property.Keys.Count == 0)
                {
                    property.Keys = null;
                }
            }
        }

        return (Key?)Model.ConventionDispatcher.OnKeyRemoved(Builder, key);
    }

    private void CheckKeyNotInUse(Key key)
    {
        var foreignKey = key.GetReferencingForeignKeys().FirstOrDefault();
        if (foreignKey != null)
        {
            throw new InvalidOperationException(
                CoreStrings.KeyInUse(
                    key.Properties.Format(),
                    DisplayName(),
                    foreignKey.Properties.Format(),
                    foreignKey.DeclaringEntityType.DisplayName()));
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Key> GetKeys()
        => _baseType?.GetKeys().Concat(_keys.Values) ?? _keys.Values;

    #endregion

    #region Foreign Keys

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? AddForeignKey(
        Property property,
        Key principalKey,
        EntityType principalEntityType,
        ConfigurationSource? componentConfigurationSource,
        ConfigurationSource configurationSource)
        => AddForeignKey(
            new[] { property }, principalKey, principalEntityType, componentConfigurationSource, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? AddForeignKey(
        IReadOnlyList<Property> properties,
        Key principalKey,
        EntityType principalEntityType,
        ConfigurationSource? componentConfigurationSource,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(properties, nameof(properties));
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotNull(principalKey, nameof(principalKey));
        Check.NotNull(principalEntityType, nameof(principalEntityType));
        EnsureMutable();

        var foreignKey = new ForeignKey(
            properties, principalKey, this, principalEntityType, configurationSource);

        principalEntityType.UpdateConfigurationSource(configurationSource);
        if (componentConfigurationSource.HasValue)
        {
            foreignKey.UpdatePropertiesConfigurationSource(componentConfigurationSource.Value);
            foreignKey.UpdatePrincipalKeyConfigurationSource(componentConfigurationSource.Value);
            foreignKey.UpdatePrincipalEndConfigurationSource(componentConfigurationSource.Value);
        }

        OnForeignKeyUpdated(foreignKey);

        return (ForeignKey?)Model.ConventionDispatcher.OnForeignKeyAdded(foreignKey.Builder)?.Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void OnForeignKeyUpdating(ForeignKey foreignKey)
    {
        var removed = _foreignKeys.Remove(foreignKey);
        Check.DebugAssert(removed, ""removed is false"");

        foreach (var property in foreignKey.Properties)
        {
            if (property.ForeignKeys != null)
            {
                property.ForeignKeys.Remove(foreignKey);
                if (property.ForeignKeys.Count == 0)
                {
                    property.ForeignKeys = null;
                }
            }
        }

        removed = foreignKey.PrincipalKey.ReferencingForeignKeys!.Remove(foreignKey);
        Check.DebugAssert(removed, ""removed is false"");
        removed = foreignKey.PrincipalEntityType.DeclaredReferencingForeignKeys!.Remove(foreignKey);
        Check.DebugAssert(removed, ""removed is false"");
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void OnForeignKeyUpdated(ForeignKey foreignKey)
    {
        var added = _foreignKeys.Add(foreignKey);
        Check.DebugAssert(added, ""added is false"");

        foreach (var property in foreignKey.Properties)
        {
            if (property.ForeignKeys == null)
            {
                property.ForeignKeys = new List<ForeignKey> { foreignKey };
            }
            else
            {
                property.ForeignKeys.Add(foreignKey);
            }
        }

        var principalKey = foreignKey.PrincipalKey;
        if (principalKey.ReferencingForeignKeys == null)
        {
            principalKey.ReferencingForeignKeys = new SortedSet<ForeignKey>(ForeignKeyComparer.Instance) { foreignKey };
        }
        else
        {
            added = principalKey.ReferencingForeignKeys.Add(foreignKey);
            Check.DebugAssert(added, ""added is false"");
        }

        var principalEntityType = foreignKey.PrincipalEntityType;
        if (principalEntityType.DeclaredReferencingForeignKeys == null)
        {
            principalEntityType.DeclaredReferencingForeignKeys = new SortedSet<ForeignKey>(ForeignKeyComparer.Instance) { foreignKey };
        }
        else
        {
            added = principalEntityType.DeclaredReferencingForeignKeys.Add(foreignKey);
            Check.DebugAssert(added, ""added is false"");
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindForeignKeys(IReadOnlyProperty property)
        => FindForeignKeys(new[] { property });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindForeignKeys(IReadOnlyList<IReadOnlyProperty> properties)
    {
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotEmpty(properties, nameof(properties));

        return _baseType != null
            ? _foreignKeys.Count == 0
                ? _baseType.FindForeignKeys(properties)
                : _baseType.FindForeignKeys(properties).Concat(FindDeclaredForeignKeys(properties))
            : FindDeclaredForeignKeys(properties);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? FindForeignKey(
        IReadOnlyProperty property,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => FindForeignKey(
            new[] { property }, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? FindForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
    {
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotEmpty(properties, nameof(properties));
        Check.NotNull(principalKey, nameof(principalKey));
        Check.NotNull(principalEntityType, nameof(principalEntityType));

        return FindDeclaredForeignKey(properties, principalKey, principalEntityType)
            ?? _baseType?.FindForeignKey(properties, principalKey, principalEntityType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? FindOwnership()
    {
        foreach (var foreignKey in GetForeignKeys())
        {
            if (foreignKey.IsOwnership)
            {
                return foreignKey;
            }
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? FindDeclaredOwnership()
    {
        foreach (var foreignKey in _foreignKeys)
        {
            if (foreignKey.IsOwnership)
            {
                return foreignKey;
            }
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> GetDeclaredForeignKeys()
        => _foreignKeys;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> GetDerivedForeignKeys()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<ForeignKey>()
            : GetDerivedTypes().SelectMany(et => et._foreignKeys);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> GetForeignKeys()
        => _baseType != null
            ? _foreignKeys.Count == 0
                ? _baseType.GetForeignKeys()
                : _baseType.GetForeignKeys().Concat(_foreignKeys)
            : _foreignKeys;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindDeclaredForeignKeys(IReadOnlyList<IReadOnlyProperty> properties)
    {
        Check.NotEmpty(properties, nameof(properties));

        return _foreignKeys.Count == 0
            ? Enumerable.Empty<ForeignKey>()
            : _foreignKeys.Where(fk => PropertyListComparer.Instance.Equals(fk.Properties, properties));
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? FindDeclaredForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
    {
        Check.NotEmpty(properties, nameof(properties));
        Check.NotNull(principalKey, nameof(principalKey));
        Check.NotNull(principalEntityType, nameof(principalEntityType));

        if (_foreignKeys.Count == 0)
        {
            return null;
        }

        foreach (var fk in FindDeclaredForeignKeys(properties))
        {
            if (PropertyListComparer.Instance.Equals(fk.PrincipalKey.Properties, principalKey.Properties)
                && fk.PrincipalEntityType == principalEntityType)
            {
                return fk;
            }
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindDerivedForeignKeys(
        IReadOnlyList<IReadOnlyProperty> properties)
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<ForeignKey>()
            : GetDerivedTypes().SelectMany(et => et.FindDeclaredForeignKeys(properties));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindDerivedForeignKeys(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<ForeignKey>()
            : (IEnumerable<ForeignKey>)GetDerivedTypes()
                .Select(et => et.FindDeclaredForeignKey(properties, principalKey, principalEntityType))
                .Where(fk => fk != null);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindForeignKeysInHierarchy(
        IReadOnlyList<IReadOnlyProperty> properties)
        => _directlyDerivedTypes.Count == 0
            ? FindForeignKeys(properties)
            : FindForeignKeys(properties).Concat(FindDerivedForeignKeys(properties));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> FindForeignKeysInHierarchy(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindForeignKey(properties, principalKey, principalEntityType))
            : ToEnumerable(FindForeignKey(properties, principalKey, principalEntityType))
                .Concat(FindDerivedForeignKeys(properties, principalKey, principalEntityType));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? RemoveForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
    {
        Check.NotEmpty(properties, nameof(properties));

        var foreignKey = FindDeclaredForeignKey(properties, principalKey, principalEntityType);
        return foreignKey == null
            ? null
            : RemoveForeignKey(foreignKey);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ForeignKey? RemoveForeignKey(ForeignKey foreignKey)
    {
        Check.NotNull(foreignKey, nameof(foreignKey));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        if (foreignKey.DeclaringEntityType != this)
        {
            throw new InvalidOperationException(
                CoreStrings.ForeignKeyWrongType(
                    foreignKey.Properties.Format(),
                    foreignKey.PrincipalKey.Properties.Format(),
                    foreignKey.PrincipalEntityType.DisplayName(),
                    DisplayName(),
                    foreignKey.DeclaringEntityType.DisplayName()));
        }

        var referencingSkipNavigation = foreignKey.ReferencingSkipNavigations?.FirstOrDefault();
        if (referencingSkipNavigation != null)
        {
            throw new InvalidOperationException(
                CoreStrings.ForeignKeyInUseSkipNavigation(
                    foreignKey.Properties.Format(),
                    DisplayName(),
                    referencingSkipNavigation.Name,
                    referencingSkipNavigation.DeclaringEntityType.DisplayName()));
        }

        if (foreignKey.DependentToPrincipal != null)
        {
            foreignKey.DeclaringEntityType.RemoveNavigation(foreignKey.DependentToPrincipal.Name);
        }

        if (foreignKey.PrincipalToDependent != null)
        {
            foreignKey.PrincipalEntityType.RemoveNavigation(foreignKey.PrincipalToDependent.Name);
        }

        OnForeignKeyUpdating(foreignKey);

        foreignKey.SetRemovedFromModel();

        if (foreignKey.DependentToPrincipal != null)
        {
            foreignKey.DependentToPrincipal.SetRemovedFromModel();
            Model.ConventionDispatcher.OnNavigationRemoved(
                Builder,
                foreignKey.PrincipalEntityType.Builder,
                foreignKey.DependentToPrincipal.Name,
                foreignKey.DependentToPrincipal.GetIdentifyingMemberInfo());
        }

        if (foreignKey.PrincipalToDependent != null)
        {
            foreignKey.PrincipalToDependent.SetRemovedFromModel();
            Model.ConventionDispatcher.OnNavigationRemoved(
                foreignKey.PrincipalEntityType.Builder,
                Builder,
                foreignKey.PrincipalToDependent.Name,
                foreignKey.PrincipalToDependent.GetIdentifyingMemberInfo());
        }

        return (ForeignKey?)Model.ConventionDispatcher.OnForeignKeyRemoved(Builder, foreignKey);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> GetReferencingForeignKeys()
        => _baseType != null
            ? (DeclaredReferencingForeignKeys?.Count ?? 0) == 0
                ? _baseType.GetReferencingForeignKeys()
                : _baseType.GetReferencingForeignKeys().Concat(GetDeclaredReferencingForeignKeys())
            : GetDeclaredReferencingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ForeignKey> GetDeclaredReferencingForeignKeys()
        => DeclaredReferencingForeignKeys ?? Enumerable.Empty<ForeignKey>();

    private SortedSet<ForeignKey>? DeclaredReferencingForeignKeys { get; set; }

    #endregion

    #region Navigations

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation AddNavigation(
        string name,
        ForeignKey foreignKey,
        bool pointsToPrincipal)
    {
        Check.NotEmpty(name, nameof(name));
        Check.NotNull(foreignKey, nameof(foreignKey));

        return AddNavigation(new MemberIdentity(name), foreignKey, pointsToPrincipal);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation AddNavigation(
        MemberInfo navigationMember,
        ForeignKey foreignKey,
        bool pointsToPrincipal)
    {
        Check.NotNull(navigationMember, nameof(navigationMember));
        Check.NotNull(foreignKey, nameof(foreignKey));

        return AddNavigation(new MemberIdentity(navigationMember), foreignKey, pointsToPrincipal);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation AddNavigation(MemberIdentity navigationMember, ForeignKey foreignKey, bool pointsToPrincipal)
    {
        EnsureMutable();

        var name = navigationMember.Name!;
        var duplicateNavigation = FindNavigationsInHierarchy(name).FirstOrDefault();
        if (duplicateNavigation != null)
        {
            if (duplicateNavigation.ForeignKey != foreignKey)
            {
                throw new InvalidOperationException(
                    CoreStrings.NavigationForWrongForeignKey(
                        duplicateNavigation.Name,
                        duplicateNavigation.DeclaringEntityType.DisplayName(),
                        foreignKey.Properties.Format(),
                        duplicateNavigation.ForeignKey.Properties.Format()));
            }

            throw new InvalidOperationException(
                CoreStrings.ConflictingPropertyOrNavigation(
                    name, DisplayName(), duplicateNavigation.DeclaringEntityType.DisplayName()));
        }

        var duplicateProperty = FindMembersInHierarchy(name).FirstOrDefault();
        if (duplicateProperty != null)
        {
            throw new InvalidOperationException(
                CoreStrings.ConflictingPropertyOrNavigation(
                    name, DisplayName(), ((IReadOnlyTypeBase)duplicateProperty.DeclaringType).DisplayName()));
        }

        Check.DebugAssert(
            !GetNavigations().Any(n => n.ForeignKey == foreignKey && n.IsOnDependent == pointsToPrincipal),
            ""There is another navigation corresponding to the same foreign key and pointing in the same direction."");

        Check.DebugAssert(
            (pointsToPrincipal ? foreignKey.DeclaringEntityType : foreignKey.PrincipalEntityType) == this,
            ""EntityType mismatch"");

        var memberInfo = navigationMember.MemberInfo;
        if (memberInfo != null)
        {
            ValidateClrMember(name, memberInfo);
        }
        else if (!IsPropertyBag)
        {
            memberInfo = ClrType.GetMembersInHierarchy(name).FirstOrDefault();
        }

        if (memberInfo != null)
        {
            Navigation.IsCompatible(
                name,
                memberInfo,
                this,
                pointsToPrincipal ? foreignKey.PrincipalEntityType : foreignKey.DeclaringEntityType,
                !pointsToPrincipal && !foreignKey.IsUnique,
                shouldThrow: true);
        }
        else if (IsPropertyBag)
        {
            memberInfo = FindIndexerPropertyInfo()!;
        }

        var navigation = new Navigation(name, memberInfo as PropertyInfo, memberInfo as FieldInfo, foreignKey);

        _navigations.Add(name, navigation);

        return navigation;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? FindNavigation(string name)
        => (Navigation?)((IReadOnlyEntityType)this).FindNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? FindNavigation(MemberInfo memberInfo)
        => (Navigation?)((IReadOnlyEntityType)this).FindNavigation(Check.NotNull(memberInfo, nameof(memberInfo)).GetSimpleMemberName());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? FindDeclaredNavigation(string name)
        => _navigations.TryGetValue(Check.NotEmpty(name, nameof(name)), out var navigation)
            ? navigation
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> GetDeclaredNavigations()
        => _navigations.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> GetDerivedNavigations()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Navigation>()
            : GetDerivedTypes().SelectMany(et => et.GetDeclaredNavigations());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> FindDerivedNavigations(string name)
    {
        Check.NotNull(name, nameof(name));

        return _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Navigation>()
            : (IEnumerable<Navigation>)GetDerivedTypes().Select(et => et.FindDeclaredNavigation(name)).Where(n => n != null);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> FindNavigationsInHierarchy(string name)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindNavigation(name))
            : ToEnumerable(FindNavigation(name)).Concat(FindDerivedNavigations(name));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Navigation? RemoveNavigation(string name)
    {
        Check.NotEmpty(name, nameof(name));
        EnsureMutable();

        var navigation = FindDeclaredNavigation(name);
        if (navigation == null)
        {
            return null;
        }

        _navigations.Remove(name);

        return navigation;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Navigation> GetNavigations()
        => _baseType != null
            ? _navigations.Count == 0 ? _baseType.GetNavigations() : _baseType.GetNavigations().Concat(_navigations.Values)
            : _navigations.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual SkipNavigation? AddSkipNavigation(
        string name,
        MemberInfo? memberInfo,
        EntityType targetEntityType,
        bool collection,
        bool onDependent,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(name, nameof(name));
        Check.NotNull(targetEntityType, nameof(targetEntityType));
        EnsureMutable();

        var duplicateProperty = FindMembersInHierarchy(name).FirstOrDefault();
        if (duplicateProperty != null)
        {
            throw new InvalidOperationException(
                CoreStrings.ConflictingPropertyOrNavigation(
                    name, DisplayName(), ((IReadOnlyTypeBase)duplicateProperty.DeclaringType).DisplayName()));
        }

        if (memberInfo != null)
        {
            ValidateClrMember(name, memberInfo);
        }
        else if (!IsPropertyBag)
        {
            memberInfo = ClrType.GetMembersInHierarchy(name).FirstOrDefault();
        }

        if (memberInfo != null)
        {
            Navigation.IsCompatible(
                name,
                memberInfo,
                this,
                targetEntityType,
                collection,
                shouldThrow: true);
        }
        else if (IsPropertyBag)
        {
            memberInfo = FindIndexerPropertyInfo()!;
        }

        var skipNavigation = new SkipNavigation(
            name,
            memberInfo as PropertyInfo,
            memberInfo as FieldInfo,
            this,
            targetEntityType,
            collection,
            onDependent,
            configurationSource);

        _skipNavigations.Add(name, skipNavigation);

        if (targetEntityType.DeclaredReferencingSkipNavigations == null)
        {
            targetEntityType.DeclaredReferencingSkipNavigations =
                new SortedSet<SkipNavigation>(SkipNavigationComparer.Instance) { skipNavigation };
        }
        else
        {
            var added = targetEntityType.DeclaredReferencingSkipNavigations.Add(skipNavigation);
            Check.DebugAssert(added, ""added is false"");
        }

        return (SkipNavigation?)Model.ConventionDispatcher.OnSkipNavigationAdded(skipNavigation.Builder)?.Metadata;
    }

    private Type? ValidateClrMember(string name, MemberInfo memberInfo, bool throwOnNameMismatch = true)
    {
        if (name != memberInfo.GetSimpleMemberName())
        {
            if (memberInfo != FindIndexerPropertyInfo())
            {
                if (throwOnNameMismatch)
                {
                    throw new InvalidOperationException(
                        CoreStrings.PropertyWrongName(
                            name,
                            DisplayName(),
                            memberInfo.GetSimpleMemberName()));
                }

                return memberInfo.GetMemberType();
            }

            var clashingMemberInfo = IsPropertyBag
                ? null
                : ClrType.GetMembersInHierarchy(name).FirstOrDefault();
            if (clashingMemberInfo != null)
            {
                throw new InvalidOperationException(
                    CoreStrings.PropertyClashingNonIndexer(
                        name,
                        DisplayName()));
            }
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual SkipNavigation? FindSkipNavigation(string name)
    {
        Check.NotEmpty(name, nameof(name));

        return FindDeclaredSkipNavigation(name) ?? _baseType?.FindSkipNavigation(name);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual SkipNavigation? FindSkipNavigation(MemberInfo memberInfo)
        => FindSkipNavigation(Check.NotNull(memberInfo, nameof(memberInfo)).GetSimpleMemberName());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual SkipNavigation? FindDeclaredSkipNavigation(string name)
        => _skipNavigations.TryGetValue(Check.NotEmpty(name, nameof(name)), out var navigation)
            ? navigation
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetDeclaredSkipNavigations()
        => _skipNavigations.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetDerivedSkipNavigations()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<SkipNavigation>()
            : GetDerivedTypes().SelectMany(et => et.GetDeclaredSkipNavigations());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> FindDerivedSkipNavigations(string name)
    {
        Check.NotNull(name, nameof(name));

        return _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<SkipNavigation>()
            : (IEnumerable<SkipNavigation>)GetDerivedTypes().Select(et => et.FindDeclaredSkipNavigation(name)).Where(n => n != null);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> FindDerivedSkipNavigationsInclusive(string name)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindDeclaredSkipNavigation(name))
            : ToEnumerable(FindDeclaredSkipNavigation(name)).Concat(FindDerivedSkipNavigations(name));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> FindSkipNavigationsInHierarchy(string name)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindSkipNavigation(name))
            : ToEnumerable(FindSkipNavigation(name)).Concat(FindDerivedSkipNavigations(name));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual SkipNavigation? RemoveSkipNavigation(string name)
    {
        Check.NotEmpty(name, nameof(name));

        var navigation = FindDeclaredSkipNavigation(name);
        return navigation == null ? null : RemoveSkipNavigation(navigation);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual SkipNavigation? RemoveSkipNavigation(SkipNavigation navigation)
    {
        Check.NotNull(navigation, nameof(navigation));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        if (navigation.DeclaringEntityType != this)
        {
            throw new InvalidOperationException(
                CoreStrings.SkipNavigationWrongType(
                    navigation.Name, DisplayName(), navigation.DeclaringEntityType.DisplayName()));
        }

        if (navigation.Inverse?.Inverse == navigation)
        {
            throw new InvalidOperationException(
                CoreStrings.SkipNavigationInUseBySkipNavigation(
                    navigation.DeclaringEntityType.DisplayName(),
                    navigation.Name,
                    navigation.Inverse.DeclaringEntityType.DisplayName(),
                    navigation.Inverse.Name));
        }

        var removed = _skipNavigations.Remove(navigation.Name);
        Check.DebugAssert(removed, ""Expected the navigation to be removed"");

        removed = navigation.ForeignKey is ForeignKey foreignKey
            ? foreignKey.ReferencingSkipNavigations!.Remove(navigation)
            : true;
        Check.DebugAssert(removed, ""removed is false"");

        removed = navigation.TargetEntityType.DeclaredReferencingSkipNavigations!.Remove(navigation);
        Check.DebugAssert(removed, ""removed is false"");

        navigation.SetRemovedFromModel();

        return (SkipNavigation?)Model.ConventionDispatcher.OnSkipNavigationRemoved(Builder, navigation);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetSkipNavigations()
        => _baseType != null
            ? _skipNavigations.Count == 0
                ? _baseType.GetSkipNavigations()
                : _baseType.GetSkipNavigations().Concat(_skipNavigations.Values)
            : _skipNavigations.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetReferencingSkipNavigations()
        => _baseType != null
            ? (DeclaredReferencingSkipNavigations?.Count ?? 0) == 0
                ? _baseType.GetReferencingSkipNavigations()
                : _baseType.GetReferencingSkipNavigations().Concat(GetDeclaredReferencingSkipNavigations())
            : GetDeclaredReferencingSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetDeclaredReferencingSkipNavigations()
        => DeclaredReferencingSkipNavigations ?? Enumerable.Empty<SkipNavigation>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<SkipNavigation> GetDerivedReferencingSkipNavigations()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<SkipNavigation>()
            : GetDerivedTypes().SelectMany(et => et.GetDeclaredReferencingSkipNavigations());

    private SortedSet<SkipNavigation>? DeclaredReferencingSkipNavigations { get; set; }

    #endregion

    #region Indexes

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? AddIndex(
        Property property,
        ConfigurationSource configurationSource)
        => AddIndex(new[] { property }, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? AddIndex(
        Property property,
        string name,
        ConfigurationSource configurationSource)
        => AddIndex(new[] { property }, name, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? AddIndex(
        IReadOnlyList<Property> properties,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(properties, nameof(properties));
        Check.HasNoNulls(properties, nameof(properties));
        EnsureMutable();

        CheckIndexProperties(properties);

        var duplicateIndex = FindIndexesInHierarchy(properties).FirstOrDefault();
        if (duplicateIndex != null)
        {
            throw new InvalidOperationException(
                CoreStrings.DuplicateIndex(properties.Format(), DisplayName(), duplicateIndex.DeclaringEntityType.DisplayName()));
        }

        var index = new Index(properties, this, configurationSource);
        _unnamedIndexes.Add(properties, index);

        UpdatePropertyIndexes(properties, index);

        return (Index?)Model.ConventionDispatcher.OnIndexAdded(index.Builder)?.Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? AddIndex(
        IReadOnlyList<Property> properties,
        string name,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(properties, nameof(properties));
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotEmpty(name, nameof(name));
        EnsureMutable();

        CheckIndexProperties(properties);

        var duplicateIndex = FindIndexesInHierarchy(name).FirstOrDefault();
        if (duplicateIndex != null)
        {
            throw new InvalidOperationException(
                CoreStrings.DuplicateNamedIndex(
                    name,
                    properties.Format(),
                    DisplayName(),
                    duplicateIndex.DeclaringEntityType.DisplayName()));
        }

        var index = new Index(properties, name, this, configurationSource);
        _namedIndexes.Add(name, index);

        UpdatePropertyIndexes(properties, index);

        return (Index?)Model.ConventionDispatcher.OnIndexAdded(index.Builder)?.Metadata;
    }

    private void CheckIndexProperties(IReadOnlyList<Property> properties)
    {
        for (var i = 0; i < properties.Count; i++)
        {
            var property = properties[i];
            for (var j = i + 1; j < properties.Count; j++)
            {
                if (property == properties[j])
                {
                    throw new InvalidOperationException(CoreStrings.DuplicatePropertyInIndex(properties.Format(), property.Name));
                }
            }

            if (FindProperty(property.Name) != property
                || !property.IsInModel)
            {
                throw new InvalidOperationException(CoreStrings.IndexPropertiesWrongEntity(properties.Format(), DisplayName()));
            }
        }
    }

    private static void UpdatePropertyIndexes(IReadOnlyList<Property> properties, Index index)
    {
        foreach (var property in properties)
        {
            if (property.Indexes == null)
            {
                property.Indexes = new List<Index> { index };
            }
            else
            {
                property.Indexes.Add(index);
            }
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? FindIndex(IReadOnlyProperty property)
        => FindIndex(new[] { property });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? FindIndex(IReadOnlyList<IReadOnlyProperty> properties)
    {
        Check.HasNoNulls(properties, nameof(properties));
        Check.NotEmpty(properties, nameof(properties));

        return FindDeclaredIndex(properties) ?? _baseType?.FindIndex(properties);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? FindIndex(string name)
    {
        Check.NotEmpty(name, nameof(name));

        return FindDeclaredIndex(name) ?? _baseType?.FindIndex(name);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> GetDeclaredIndexes()
        => _namedIndexes.Count == 0
            ? _unnamedIndexes.Values
            : _unnamedIndexes.Values.Concat(_namedIndexes.Values);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> GetDerivedIndexes()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Index>()
            : GetDerivedTypes().SelectMany(et => et.GetDeclaredIndexes());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? FindDeclaredIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => _unnamedIndexes.TryGetValue(Check.NotEmpty(properties, nameof(properties)), out var index)
            ? index
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? FindDeclaredIndex(string name)
        => _namedIndexes.TryGetValue(Check.NotEmpty(name, nameof(name)), out var index)
            ? index
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> FindDerivedIndexes(IReadOnlyList<IReadOnlyProperty> properties)
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Index>()
            : (IEnumerable<Index>)GetDerivedTypes().Select(et => et.FindDeclaredIndex(properties)).Where(i => i != null);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> FindDerivedIndexes(string name)
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Index>()
            : (IEnumerable<Index>)GetDerivedTypes()
                .Select(et => et.FindDeclaredIndex(Check.NotEmpty(name, nameof(name))))
                .Where(i => i != null);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> FindIndexesInHierarchy(IReadOnlyList<IReadOnlyProperty> properties)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindIndex(properties))
            : ToEnumerable(FindIndex(properties)).Concat(FindDerivedIndexes(properties));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> FindIndexesInHierarchy(string name)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindIndex(Check.NotEmpty(name, nameof(name))))
            : ToEnumerable(FindIndex(Check.NotEmpty(name, nameof(name)))).Concat(FindDerivedIndexes(name));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? RemoveIndex(IReadOnlyList<IReadOnlyProperty> properties)
    {
        Check.NotEmpty(properties, nameof(properties));

        var index = FindDeclaredIndex(properties);
        return index == null
            ? null
            : RemoveIndex(index);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? RemoveIndex(string name)
    {
        Check.NotEmpty(name, nameof(name));

        var index = FindDeclaredIndex(name);
        return index == null
            ? null
            : RemoveIndex(index);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Index? RemoveIndex(Index index)
    {
        Check.NotNull(index, nameof(index));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        if (index.Name == null)
        {
            if (!_unnamedIndexes.Remove(index.Properties))
            {
                throw new InvalidOperationException(
                    CoreStrings.IndexWrongType(index.Properties.Format(), DisplayName(), index.DeclaringEntityType.DisplayName()));
            }
        }
        else
        {
            if (!_namedIndexes.Remove(index.Name))
            {
                throw new InvalidOperationException(
                    CoreStrings.NamedIndexWrongType(index.Name, DisplayName()));
            }
        }

        index.SetRemovedFromModel();

        foreach (var property in index.Properties)
        {
            if (property.Indexes != null)
            {
                property.Indexes.Remove(index);
                if (property.Indexes.Count == 0)
                {
                    property.Indexes = null;
                }
            }
        }

        return (Index?)Model.ConventionDispatcher.OnIndexRemoved(Builder, index);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Index> GetIndexes()
        => _baseType != null
            ? _namedIndexes.Count == 0 && _unnamedIndexes.Count == 0
                ? _baseType.GetIndexes()
                : _baseType.GetIndexes().Concat(GetDeclaredIndexes())
            : GetDeclaredIndexes();

    #endregion

    #region Properties

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? AddProperty(
        string name,
        Type propertyType,
        ConfigurationSource? typeConfigurationSource,
        ConfigurationSource configurationSource)
    {
        Check.NotNull(name, nameof(name));
        Check.NotNull(propertyType, nameof(propertyType));

        return AddProperty(
            name,
            propertyType,
            null,
            typeConfigurationSource,
            configurationSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? AddProperty(
        MemberInfo memberInfo,
        ConfigurationSource configurationSource)
        => AddProperty(
            memberInfo.GetSimpleMemberName(),
            memberInfo.GetMemberType(),
            memberInfo,
            configurationSource,
            configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? AddProperty(
        string name,
        ConfigurationSource configurationSource)
    {
        MemberInfo? clrMember;
        if (IsPropertyBag)
        {
            clrMember = FindIndexerPropertyInfo()!;
        }
        else
        {
            clrMember = ClrType.GetMembersInHierarchy(name).FirstOrDefault();
            if (clrMember == null)
            {
                throw new InvalidOperationException(CoreStrings.NoPropertyType(name, DisplayName()));
            }
        }

        return AddProperty(clrMember, configurationSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? AddProperty(
        string name,
        Type propertyType,
        MemberInfo? memberInfo,
        ConfigurationSource? typeConfigurationSource,
        ConfigurationSource configurationSource)
    {
        Check.NotNull(name, nameof(name));
        Check.NotNull(propertyType, nameof(propertyType));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        var conflictingMember = FindMembersInHierarchy(name).FirstOrDefault();
        if (conflictingMember != null)
        {
            throw new InvalidOperationException(
                CoreStrings.ConflictingPropertyOrNavigation(
                    name, DisplayName(),
                    ((IReadOnlyTypeBase)conflictingMember.DeclaringType).DisplayName()));
        }

        if (memberInfo != null)
        {
            propertyType = ValidateClrMember(name, memberInfo, typeConfigurationSource != null)
                ?? propertyType;

            if (memberInfo.DeclaringType?.IsAssignableFrom(ClrType) != true)
            {
                throw new InvalidOperationException(
                    CoreStrings.PropertyWrongEntityClrType(
                        memberInfo.Name, DisplayName(), memberInfo.DeclaringType?.ShortDisplayName()));
            }
        }
        else if (IsPropertyBag)
        {
            memberInfo = FindIndexerPropertyInfo();
        }
        else
        {
            memberInfo = ClrType.GetMembersInHierarchy(name).FirstOrDefault();
        }

        if (memberInfo != null
            && propertyType != memberInfo.GetMemberType()
            && memberInfo != FindIndexerPropertyInfo())
        {
            if (typeConfigurationSource != null)
            {
                throw new InvalidOperationException(
                    CoreStrings.PropertyWrongClrType(
                        name,
                        DisplayName(),
                        memberInfo.GetMemberType().ShortDisplayName(),
                        propertyType.ShortDisplayName()));
            }

            propertyType = memberInfo.GetMemberType();
        }

        var property = new Property(
            name, propertyType, memberInfo as PropertyInfo, memberInfo as FieldInfo, this,
            configurationSource, typeConfigurationSource);

        _properties.Add(property.Name, property);

        if (Model.Configuration != null)
        {
            using (Model.ConventionDispatcher.DelayConventions())
            {
                Model.ConventionDispatcher.OnPropertyAdded(property.Builder);
                Model.Configuration.ConfigureProperty(property);
                return property;
            }
        }

        return (Property?)Model.ConventionDispatcher.OnPropertyAdded(property.Builder)?.Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? FindProperty(string name)
        => FindDeclaredProperty(Check.NotEmpty(name, nameof(name))) ?? _baseType?.FindProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? FindDeclaredProperty(string name)
        => _properties.TryGetValue(Check.NotEmpty(name, nameof(name)), out var property)
            ? property
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Property> GetDeclaredProperties()
        => _properties.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Property> GetDerivedProperties()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Property>()
            : GetDerivedTypes().SelectMany(et => et.GetDeclaredProperties());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Property> FindDerivedProperties(string propertyName)
    {
        Check.NotNull(propertyName, nameof(propertyName));

        return _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<Property>()
            : (IEnumerable<Property>)GetDerivedTypes().Select(et => et.FindDeclaredProperty(propertyName)).Where(p => p != null);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Property> FindDerivedPropertiesInclusive(string propertyName)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindDeclaredProperty(propertyName))
            : ToEnumerable(FindDeclaredProperty(propertyName)).Concat(FindDerivedProperties(propertyName));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Property> FindPropertiesInHierarchy(string propertyName)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindProperty(propertyName))
            : ToEnumerable(FindProperty(propertyName)).Concat(FindDerivedProperties(propertyName));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyList<Property>? FindProperties(IReadOnlyList<string> propertyNames)
    {
        Check.NotNull(propertyNames, nameof(propertyNames));

        var properties = new List<Property>(propertyNames.Count);
        foreach (var propertyName in propertyNames)
        {
            var property = FindProperty(propertyName);
            if (property == null)
            {
                return null;
            }

            properties.Add(property);
        }

        return properties;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? RemoveProperty(string name)
    {
        Check.NotEmpty(name, nameof(name));

        var property = FindDeclaredProperty(name);
        return property == null
            ? null
            : RemoveProperty(property);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? RemoveProperty(Property property)
    {
        Check.NotNull(property, nameof(property));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        if (property.DeclaringEntityType != this)
        {
            throw new InvalidOperationException(
                CoreStrings.PropertyWrongType(
                    property.Name,
                    DisplayName(),
                    property.DeclaringEntityType.DisplayName()));
        }

        CheckPropertyNotInUse(property);

        var removed = _properties.Remove(property.Name);
        Check.DebugAssert(removed, ""removed is false"");

        property.SetRemovedFromModel();

        return (Property?)Model.ConventionDispatcher.OnPropertyRemoved(Builder, property);
    }

    private void CheckPropertyNotInUse(Property property)
    {
        var containingKey = property.Keys?.FirstOrDefault();
        if (containingKey != null)
        {
            throw new InvalidOperationException(
                CoreStrings.PropertyInUseKey(property.Name, DisplayName(), containingKey.Properties.Format()));
        }

        var containingForeignKey = property.ForeignKeys?.FirstOrDefault();
        if (containingForeignKey != null)
        {
            throw new InvalidOperationException(
                CoreStrings.PropertyInUseForeignKey(
                    property.Name, DisplayName(),
                    containingForeignKey.Properties.Format(), containingForeignKey.DeclaringEntityType.DisplayName()));
        }

        var containingIndex = property.Indexes?.FirstOrDefault();
        if (containingIndex != null)
        {
            throw new InvalidOperationException(
                CoreStrings.PropertyInUseIndex(
                    property.Name, DisplayName(),
                    containingIndex.Properties.Format(), containingIndex.DeclaringEntityType.DisplayName()));
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<Property> GetProperties()
        => _baseType != null
            ? _baseType.GetProperties().Concat(_properties.Values)
            : _properties.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertyCounts Counts
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _counts, this, static entityType =>
            {
                entityType.EnsureReadOnly();
                return entityType.CalculateCounts();
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<InternalEntityEntry, ISnapshot> RelationshipSnapshotFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _relationshipSnapshotFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();
                return new RelationshipSnapshotFactoryFactory().Create(entityType);
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<InternalEntityEntry, ISnapshot> OriginalValuesFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _originalValuesFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();
                return new OriginalValuesFactoryFactory().Create(entityType);
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<ISnapshot> StoreGeneratedValuesFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _storeGeneratedValuesFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();
                return new StoreGeneratedValuesFactoryFactory().CreateEmpty(entityType);
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<InternalEntityEntry, ISnapshot> TemporaryValuesFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _temporaryValuesFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();
                return new TemporaryValuesFactoryFactory().Create(entityType);
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<ValueBuffer, ISnapshot> ShadowValuesFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _shadowValuesFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();
                return new ShadowValuesFactoryFactory().Create(entityType);
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<ISnapshot> EmptyShadowValuesFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _emptyShadowValuesFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();
                return new EmptyShadowValuesFactoryFactory().CreateEmpty(entityType);
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Func<MaterializationContext, object> InstanceFactory
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _instanceFactory, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();

                var binding = entityType.ServiceOnlyConstructorBinding;
                if (binding == null)
                {
                    var _ = entityType.ConstructorBinding;
                    binding = entityType.ServiceOnlyConstructorBinding;
                    if (binding == null)
                    {
                        throw new InvalidOperationException(CoreStrings.NoParameterlessConstructor(entityType.DisplayName()));
                    }
                }

                var contextParam = Expression.Parameter(typeof(MaterializationContext), ""mc"");

                return Expression.Lambda<Func<MaterializationContext, object>>(
                        binding.CreateConstructorExpression(
                            new ParameterBindingInfo(entityType, contextParam)),
                        contextParam)
                    .Compile();
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyList<IProperty> ForeignKeyProperties
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _foreignKeyProperties, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();

                return entityType.GetProperties().Where(p => p.IsForeignKey()).ToArray();
            });

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyList<IProperty> ValueGeneratingProperties
        => NonCapturingLazyInitializer.EnsureInitialized(
            ref _valueGeneratingProperties, this,
            static entityType =>
            {
                entityType.EnsureReadOnly();

                return entityType.GetProperties().Where(p => p.RequiresValueGenerator()).ToArray();
            });

    #endregion

    #region Service properties

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ServiceProperty AddServiceProperty(
        MemberInfo memberInfo,
        // ReSharper disable once MethodOverloadWithOptionalParameter
        ConfigurationSource configurationSource)
    {
        Check.NotNull(memberInfo, nameof(memberInfo));
        EnsureMutable();

        var name = memberInfo.GetSimpleMemberName();
        var duplicateMember = FindMembersInHierarchy(name).FirstOrDefault();
        if (duplicateMember != null)
        {
            throw new InvalidOperationException(
                CoreStrings.ConflictingPropertyOrNavigation(
                    name, DisplayName(),
                    ((IReadOnlyTypeBase)duplicateMember.DeclaringType).DisplayName()));
        }

        ValidateClrMember(name, memberInfo, false);

        var serviceProperty = new ServiceProperty(
            name,
            memberInfo as PropertyInfo,
            memberInfo as FieldInfo,
            this,
            configurationSource);

        _serviceProperties[serviceProperty.Name] = serviceProperty;

        return serviceProperty;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ServiceProperty? FindServiceProperty(string name)
        => FindDeclaredServiceProperty(Check.NotEmpty(name, nameof(name))) ?? _baseType?.FindServiceProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? FindServiceProperty(MemberInfo memberInfo)
        => FindProperty(memberInfo.GetSimpleMemberName());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ServiceProperty? FindDeclaredServiceProperty(string name)
        => _serviceProperties.TryGetValue(Check.NotEmpty(name, nameof(name)), out var property)
            ? property
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ServiceProperty> FindDerivedServiceProperties(string propertyName)
    {
        Check.NotNull(propertyName, nameof(propertyName));

        return _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<ServiceProperty>()
            : (IEnumerable<ServiceProperty>)GetDerivedTypes()
                .Select(et => et.FindDeclaredServiceProperty(propertyName))
                .Where(p => p != null);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ServiceProperty> FindDerivedServicePropertiesInclusive(string propertyName)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindDeclaredServiceProperty(propertyName))
            : ToEnumerable(FindDeclaredServiceProperty(propertyName)).Concat(FindDerivedServiceProperties(propertyName));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ServiceProperty> FindServicePropertiesInHierarchy(string propertyName)
        => _directlyDerivedTypes.Count == 0
            ? ToEnumerable(FindServiceProperty(propertyName))
            : ToEnumerable(FindServiceProperty(propertyName)).Concat(FindDerivedServiceProperties(propertyName));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ServiceProperty? RemoveServiceProperty(string name)
    {
        Check.NotEmpty(name, nameof(name));

        var property = FindServiceProperty(name);
        return property == null
            ? null
            : RemoveServiceProperty(property);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ServiceProperty RemoveServiceProperty(ServiceProperty property)
    {
        Check.NotNull(property, nameof(property));
        Check.DebugAssert(IsInModel, ""The entity type has been removed from the model"");
        EnsureMutable();

        if (property.DeclaringEntityType != this)
        {
            throw new InvalidOperationException(
                CoreStrings.PropertyWrongType(
                    property.Name,
                    DisplayName(),
                    property.DeclaringEntityType.DisplayName()));
        }

        var removed = _serviceProperties.Remove(property.Name);
        Check.DebugAssert(removed, ""removed is false"");

        property.SetRemovedFromModel();

        return property;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ServiceProperty> GetServiceProperties()
        => _baseType != null
            ? _serviceProperties.Count == 0
                ? _baseType.GetServiceProperties()
                : _baseType.GetServiceProperties().Concat(_serviceProperties.Values)
            : _serviceProperties.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ServiceProperty> GetDeclaredServiceProperties()
        => _serviceProperties.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ServiceProperty> GetDerivedServiceProperties()
        => _directlyDerivedTypes.Count == 0
            ? Enumerable.Empty<ServiceProperty>()
            : GetDerivedTypes().SelectMany(et => et.GetDeclaredServiceProperties());

    #endregion

    #region Ignore

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override ConfigurationSource? FindIgnoredConfigurationSource(string name)
    {
        var ignoredSource = FindDeclaredIgnoredConfigurationSource(name);

        return BaseType == null ? ignoredSource : BaseType.FindIgnoredConfigurationSource(name).Max(ignoredSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override string? OnTypeMemberIgnored(string name)
        => Model.ConventionDispatcher.OnEntityTypeMemberIgnored(Builder, name);

    #endregion

    #region Data

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<IDictionary<string, object?>> GetSeedData(bool providerValues = false)
    {
        if (_data == null
            || _data.Count == 0)
        {
            return Enumerable.Empty<IDictionary<string, object?>>();
        }

        var data = new List<Dictionary<string, object?>>();
        var valueConverters = new Dictionary<string, ValueConverter?>(StringComparer.Ordinal);
        var properties = GetProperties()
            .Concat<IPropertyBase>(GetNavigations())
            .Concat(GetSkipNavigations())
            .ToDictionary(p => p.Name);
        foreach (var rawSeed in _data)
        {
            var seed = new Dictionary<string, object?>(StringComparer.Ordinal);
            data.Add(seed);
            var type = rawSeed.GetType();

            if (ClrType.IsAssignableFrom(type))
            {
                // non-anonymous type
                foreach (var propertyBase in properties.Values)
                {
                    ValueConverter? valueConverter = null;
                    if (providerValues
                        && propertyBase is IProperty property
                        && !valueConverters.TryGetValue(propertyBase.Name, out valueConverter))
                    {
                        valueConverter = property.GetTypeMapping().Converter;
                        valueConverters[propertyBase.Name] = valueConverter;
                    }

                    propertyBase.TryGetMemberInfo(forConstruction: false, forSet: false, out var memberInfo, out _);

                    object? value = null;
                    switch (memberInfo)
                    {
                        case PropertyInfo propertyInfo:
                            if (propertyBase.IsIndexerProperty())
                            {
                                try
                                {
                                    value = propertyInfo.GetValue(rawSeed, new[] { propertyBase.Name });
                                }
                                catch (Exception)
                                {
                                    // Swallow if the property value is not set on the seed data
                                }
                            }
                            else
                            {
                                value = propertyInfo.GetValue(rawSeed);
                            }

                            break;
                        case FieldInfo fieldInfo:
                            value = fieldInfo.GetValue(rawSeed);
                            break;
                        case null:
                            continue;
                    }

                    seed[propertyBase.Name] = valueConverter == null
                        ? value
                        : valueConverter.ConvertToProvider(value);
                }
            }
            else
            {
                // anonymous type
                foreach (var memberInfo in type.GetMembersInHierarchy())
                {
                    if (!properties.TryGetValue(memberInfo.GetSimpleMemberName(), out var propertyBase))
                    {
                        continue;
                    }

                    ValueConverter? valueConverter = null;
                    if (providerValues
                        && !valueConverters.TryGetValue(propertyBase.Name, out valueConverter))
                    {
                        if (propertyBase is IReadOnlyProperty property)
                        {
                            valueConverter = property.GetTypeMapping().Converter;
                        }

                        valueConverters[propertyBase.Name] = valueConverter;
                    }

                    // All memberInfos are PropertyInfo in anonymous type
                    var value = ((PropertyInfo)memberInfo).GetValue(rawSeed);

                    seed[propertyBase.Name] = valueConverter == null
                        ? value
                        : valueConverter.ConvertToProvider(value);
                }
            }
        }

        return data;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void AddData(IEnumerable<object> data)
    {
        EnsureMutable();

        _data ??= new List<object>();

        foreach (var entity in data)
        {
            if (ClrType != entity.GetType()
                && ClrType.IsInstanceOfType(entity))
            {
                throw new InvalidOperationException(
                    CoreStrings.SeedDatumDerivedType(
                        DisplayName(), entity.GetType().ShortDisplayName()));
            }

            _data.Add(entity);
        }
    }

    #endregion

    #region Other

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ChangeTrackingStrategy GetChangeTrackingStrategy()
        => _changeTrackingStrategy ?? Model.GetChangeTrackingStrategy();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ChangeTrackingStrategy? SetChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (changeTrackingStrategy != null)
        {
            var requireFullNotifications =
                (bool?)Model[CoreAnnotationNames.FullChangeTrackingNotificationsRequired] == true;
            var errorMessage = CheckChangeTrackingStrategy(this, changeTrackingStrategy.Value, requireFullNotifications);
            if (errorMessage != null)
            {
                throw new InvalidOperationException(errorMessage);
            }
        }

        _changeTrackingStrategy = changeTrackingStrategy;

        _changeTrackingStrategyConfigurationSource = _changeTrackingStrategy == null
            ? null
            : configurationSource.Max(_changeTrackingStrategyConfigurationSource);

        return changeTrackingStrategy;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static string? CheckChangeTrackingStrategy(
        IReadOnlyEntityType entityType,
        ChangeTrackingStrategy value,
        bool requireFullNotifications)
    {
        if (requireFullNotifications)
        {
            if (value != ChangeTrackingStrategy.ChangingAndChangedNotifications
                && value != ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)
            {
                return CoreStrings.FullChangeTrackingRequired(
                    entityType.DisplayName(), value, nameof(ChangeTrackingStrategy.ChangingAndChangedNotifications),
                    nameof(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues));
            }
        }
        else
        {
            if (value != ChangeTrackingStrategy.Snapshot
                && !typeof(INotifyPropertyChanged).IsAssignableFrom(entityType.ClrType))
            {
                return CoreStrings.ChangeTrackingInterfaceMissing(entityType.DisplayName(), value, nameof(INotifyPropertyChanged));
            }

            if ((value == ChangeTrackingStrategy.ChangingAndChangedNotifications
                    || value == ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues)
                && !typeof(INotifyPropertyChanging).IsAssignableFrom(entityType.ClrType))
            {
                return CoreStrings.ChangeTrackingInterfaceMissing(entityType.DisplayName(), value, nameof(INotifyPropertyChanging));
            }
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetChangeTrackingStrategyConfigurationSource()
        => _changeTrackingStrategyConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual LambdaExpression? SetQueryFilter(LambdaExpression? queryFilter, ConfigurationSource configurationSource)
    {
        var errorMessage = CheckQueryFilter(queryFilter);
        if (errorMessage != null)
        {
            throw new InvalidOperationException(errorMessage);
        }

        return (LambdaExpression?)SetOrRemoveAnnotation(CoreAnnotationNames.QueryFilter, queryFilter, configurationSource)?.Value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? CheckQueryFilter(LambdaExpression? queryFilter)
    {
        if (queryFilter != null
            && (queryFilter.Parameters.Count != 1
                || queryFilter.Parameters[0].Type != ClrType
                || queryFilter.ReturnType != typeof(bool)))
        {
            return CoreStrings.BadFilterExpression(queryFilter, DisplayName(), ClrType);
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual LambdaExpression? GetQueryFilter()
        => (LambdaExpression?)this[CoreAnnotationNames.QueryFilter];

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetQueryFilterConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.QueryFilter)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [Obsolete]
    public virtual LambdaExpression? SetDefiningQuery(LambdaExpression? definingQuery, ConfigurationSource configurationSource)
        => (LambdaExpression?)SetOrRemoveAnnotation(CoreAnnotationNames.DefiningQuery, definingQuery, configurationSource)?.Value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Property? SetDiscriminatorProperty(Property? property, ConfigurationSource configurationSource)
    {
        CheckDiscriminatorProperty(property);

        if (((property == null && BaseType == null)
                || (property != null && !property.ClrType.IsInstanceOfType(((IReadOnlyEntityType)this).GetDiscriminatorValue()))))
        {
            ((IMutableEntityType)this).RemoveDiscriminatorValue();
            if (BaseType == null)
            {
                foreach (var derivedType in GetDerivedTypes())
                {
                    ((IMutableEntityType)derivedType).RemoveDiscriminatorValue();
                }
            }
        }

        return ((string?)SetAnnotation(CoreAnnotationNames.DiscriminatorProperty, property?.Name, configurationSource)?.Value)
            == property?.Name
                ? property
                : (Property?)((IReadOnlyEntityType)this).FindDiscriminatorProperty();
    }

    private void CheckDiscriminatorProperty(Property? property)
    {
        if (property != null)
        {
            if (BaseType != null)
            {
                throw new InvalidOperationException(
                    CoreStrings.DiscriminatorPropertyMustBeOnRoot(DisplayName()));
            }

            if (property.DeclaringEntityType != this)
            {
                throw new InvalidOperationException(
                    CoreStrings.DiscriminatorPropertyNotFound(property.Name, DisplayName()));
            }
        }
    }

    /// <summary>
    ///     Returns the name of the property that will be used for storing a discriminator value.
    /// </summary>
    /// <returns>The name of the property that will be used for storing a discriminator value.</returns>
    public virtual string? GetDiscriminatorPropertyName()
    {
        if (BaseType != null)
        {
            return ((IReadOnlyEntityType)this).GetRootType().GetDiscriminatorPropertyName();
        }

        return (string?)this[CoreAnnotationNames.DiscriminatorProperty];
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static object? CheckDiscriminatorValue(IReadOnlyEntityType entityType, object? value)
    {
        if (value is null)
        {
            return value;
        }

        var discriminatorProperty = entityType.FindDiscriminatorProperty();
        if (discriminatorProperty is null)
        {
            throw new InvalidOperationException(
                CoreStrings.NoDiscriminatorForValue(entityType.DisplayName(), entityType.GetRootType().DisplayName()));
        }

        if (!discriminatorProperty.ClrType.IsInstanceOfType(value))
        {
            throw new InvalidOperationException(
                CoreStrings.DiscriminatorValueIncompatible(value, discriminatorProperty.Name, discriminatorProperty.ClrType));
        }

        return value;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ConfigurationSource? GetDiscriminatorPropertyConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.DiscriminatorProperty)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsImplicitlyCreatedJoinEntityType
        => GetConfigurationSource() == ConfigurationSource.Convention
            && ClrType == Model.DefaultPropertyBagType;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InstantiationBinding? ConstructorBinding
    {
        get => IsReadOnly && !ClrType.IsAbstract
            ? NonCapturingLazyInitializer.EnsureInitialized(
                ref _constructorBinding, this, static entityType =>
                {
                    ((IModel)entityType.Model).GetModelDependencies().ConstructorBindingFactory.GetBindings(
                        (IReadOnlyEntityType)entityType,
                        out entityType._constructorBinding,
                        out entityType._serviceOnlyConstructorBinding);
                })
            : _constructorBinding;

        set => SetConstructorBinding(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InstantiationBinding? SetConstructorBinding(
        InstantiationBinding? constructorBinding,
        ConfigurationSource configurationSource)
    {
        EnsureMutable();

        _constructorBinding = constructorBinding;

        if (_constructorBinding == null)
        {
            _constructorBindingConfigurationSource = null;
        }
        else
        {
            UpdateConstructorBindingConfigurationSource(configurationSource);
        }

        return constructorBinding;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetConstructorBindingConfigurationSource()
        => _constructorBindingConfigurationSource;

    private void UpdateConstructorBindingConfigurationSource(ConfigurationSource configurationSource)
        => _constructorBindingConfigurationSource = configurationSource.Max(_constructorBindingConfigurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InstantiationBinding? ServiceOnlyConstructorBinding
    {
        get => _serviceOnlyConstructorBinding;
        set => SetServiceOnlyConstructorBinding(value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InstantiationBinding? SetServiceOnlyConstructorBinding(
        InstantiationBinding? constructorBinding,
        ConfigurationSource configurationSource)
    {
        EnsureMutable();

        _serviceOnlyConstructorBinding = constructorBinding;

        if (_serviceOnlyConstructorBinding == null)
        {
            _serviceOnlyConstructorBindingConfigurationSource = null;
        }
        else
        {
            UpdateServiceOnlyConstructorBindingConfigurationSource(configurationSource);
        }

        return constructorBinding;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetServiceOnlyConstructorBindingConfigurationSource()
        => _serviceOnlyConstructorBindingConfigurationSource;

    private void UpdateServiceOnlyConstructorBindingConfigurationSource(ConfigurationSource configurationSource)
        => _serviceOnlyConstructorBindingConfigurationSource =
            configurationSource.Max(_serviceOnlyConstructorBindingConfigurationSource);

    #endregion

    #region Explicit interface implementations

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionEntityTypeBuilder IConventionEntityType.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionAnnotatableBuilder IConventionAnnotatable.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyModel IReadOnlyTypeBase.Model
    {
        [DebuggerStepThrough]
        get => Model;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableModel IMutableTypeBase.Model
    {
        [DebuggerStepThrough]
        get => Model;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableModel IMutableEntityType.Model
    {
        [DebuggerStepThrough]
        get => Model;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionModel IConventionEntityType.Model
    {
        [DebuggerStepThrough]
        get => Model;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IModel ITypeBase.Model
    {
        [DebuggerStepThrough]
        get => Model;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IReadOnlyEntityType? IReadOnlyEntityType.BaseType
    {
        [DebuggerStepThrough]
        get => _baseType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IMutableEntityType? IMutableEntityType.BaseType
    {
        get => _baseType;
        set => SetBaseType((EntityType?)value, ConfigurationSource.Explicit);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionEntityType? IConventionEntityType.BaseType
    {
        [DebuggerStepThrough]
        get => BaseType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IEntityType? IEntityType.BaseType
    {
        [DebuggerStepThrough]
        get => BaseType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableEntityType.SetDiscriminatorProperty(IReadOnlyProperty? property)
        => SetDiscriminatorProperty((Property?)property, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.SetDiscriminatorProperty(
        IReadOnlyProperty? property,
        bool fromDataAnnotation)
        => SetDiscriminatorProperty(
            (Property?)property,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableEntityType.SetChangeTrackingStrategy(ChangeTrackingStrategy? changeTrackingStrategy)
        => SetChangeTrackingStrategy(changeTrackingStrategy, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ChangeTrackingStrategy? IConventionEntityType.SetChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        bool fromDataAnnotation)
        => SetChangeTrackingStrategy(
            changeTrackingStrategy, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableEntityType.SetQueryFilter(LambdaExpression? queryFilter)
        => SetQueryFilter(queryFilter, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    LambdaExpression? IConventionEntityType.SetQueryFilter(LambdaExpression? queryFilter, bool fromDataAnnotation)
        => SetQueryFilter(queryFilter, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyEntityType> IReadOnlyEntityType.GetDerivedTypes()
        => GetDerivedTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyEntityType> IReadOnlyEntityType.GetDirectlyDerivedTypes()
        => GetDirectlyDerivedTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IEntityType> IEntityType.GetDirectlyDerivedTypes()
        => GetDirectlyDerivedTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionEntityType? IConventionEntityType.SetBaseType(IConventionEntityType? entityType, bool fromDataAnnotation)
        => SetBaseType(
            (EntityType?)entityType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    bool? IConventionEntityType.SetIsKeyless(bool? keyless, bool fromDataAnnotation)
        => SetIsKeyless(keyless, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableKey? IMutableEntityType.SetPrimaryKey(IReadOnlyList<IMutableProperty>? properties)
        => SetPrimaryKey(properties?.Cast<Property>().ToList(), ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionKey? IConventionEntityType.SetPrimaryKey(IReadOnlyList<IConventionProperty>? properties, bool fromDataAnnotation)
        => SetPrimaryKey(
            properties?.Cast<Property>().ToList(),
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyKey? IReadOnlyEntityType.FindPrimaryKey()
        => FindPrimaryKey();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableKey? IMutableEntityType.FindPrimaryKey()
        => FindPrimaryKey();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionKey? IConventionEntityType.FindPrimaryKey()
        => FindPrimaryKey();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IKey? IEntityType.FindPrimaryKey()
        => FindPrimaryKey();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableKey IMutableEntityType.AddKey(IReadOnlyList<IMutableProperty> properties)
        => AddKey(properties.Cast<Property>().ToList(), ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionKey? IConventionEntityType.AddKey(IReadOnlyList<IConventionProperty> properties, bool fromDataAnnotation)
        => AddKey(
            properties.Cast<Property>().ToList(),
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyKey? IReadOnlyEntityType.FindKey(IReadOnlyList<IReadOnlyProperty> properties)
        => FindKey(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableKey? IMutableEntityType.FindKey(IReadOnlyList<IReadOnlyProperty> properties)
        => FindKey(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionKey? IConventionEntityType.FindKey(IReadOnlyList<IReadOnlyProperty> properties)
        => FindKey(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IKey? IEntityType.FindKey(IReadOnlyList<IReadOnlyProperty> properties)
        => FindKey(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyKey> IReadOnlyEntityType.GetDeclaredKeys()
        => GetDeclaredKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IKey> IEntityType.GetDeclaredKeys()
        => GetDeclaredKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyKey> IReadOnlyEntityType.GetKeys()
        => GetKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableKey> IMutableEntityType.GetKeys()
        => GetKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionKey> IConventionEntityType.GetKeys()
        => GetKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IKey> IEntityType.GetKeys()
        => GetKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableKey? IMutableEntityType.RemoveKey(IReadOnlyList<IReadOnlyProperty> properties)
        => RemoveKey(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionKey? IConventionEntityType.RemoveKey(IReadOnlyList<IReadOnlyProperty> properties)
        => RemoveKey(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableKey? IMutableEntityType.RemoveKey(IReadOnlyKey key)
        => RemoveKey((Key)key);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionKey? IConventionEntityType.RemoveKey(IReadOnlyKey key)
        => RemoveKey((Key)key);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableForeignKey IMutableEntityType.AddForeignKey(
        IReadOnlyList<IMutableProperty> properties,
        IMutableKey principalKey,
        IMutableEntityType principalEntityType)
        => AddForeignKey(
            properties.Cast<Property>().ToList(),
            (Key)principalKey,
            (EntityType)principalEntityType,
            ConfigurationSource.Explicit,
            ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionForeignKey? IConventionEntityType.AddForeignKey(
        IReadOnlyList<IConventionProperty> properties,
        IConventionKey principalKey,
        IConventionEntityType principalEntityType,
        bool setComponentConfigurationSource,
        bool fromDataAnnotation)
        => AddForeignKey(
            properties.Cast<Property>().ToList(),
            (Key)principalKey,
            (EntityType)principalEntityType,
            setComponentConfigurationSource
                ? fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention
                : null,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyForeignKey? IReadOnlyEntityType.FindForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => FindForeignKey(properties, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableForeignKey? IMutableEntityType.FindForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => FindForeignKey(properties, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionForeignKey? IConventionEntityType.FindForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => FindForeignKey(properties, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IForeignKey? IEntityType.FindForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IReadOnlyKey principalKey,
        IReadOnlyEntityType principalEntityType)
        => FindForeignKey(properties, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.FindForeignKeys(IReadOnlyList<IReadOnlyProperty> properties)
        => FindForeignKeys(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.FindForeignKeys(IReadOnlyList<IReadOnlyProperty> properties)
        => FindForeignKeys(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.FindDeclaredForeignKeys(IReadOnlyList<IReadOnlyProperty> properties)
        => FindDeclaredForeignKeys(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.FindDeclaredForeignKeys(IReadOnlyList<IReadOnlyProperty> properties)
        => FindDeclaredForeignKeys(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.GetForeignKeys()
        => GetForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableForeignKey> IMutableEntityType.GetForeignKeys()
        => GetForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionForeignKey> IConventionEntityType.GetForeignKeys()
        => GetForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.GetForeignKeys()
        => GetForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.GetDeclaredForeignKeys()
        => GetDeclaredForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.GetDeclaredForeignKeys()
        => GetDeclaredForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.GetDerivedForeignKeys()
        => GetDerivedForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.GetDerivedForeignKeys()
        => GetDerivedForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.GetDeclaredReferencingForeignKeys()
        => GetDeclaredReferencingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.GetDeclaredReferencingForeignKeys()
        => GetDeclaredReferencingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyForeignKey> IReadOnlyEntityType.GetReferencingForeignKeys()
        => GetReferencingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IForeignKey> IEntityType.GetReferencingForeignKeys()
        => GetReferencingForeignKeys();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionForeignKey? IConventionEntityType.RemoveForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IConventionKey principalKey,
        IConventionEntityType principalEntityType)
        => RemoveForeignKey(properties, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableForeignKey? IMutableEntityType.RemoveForeignKey(
        IReadOnlyList<IReadOnlyProperty> properties,
        IMutableKey principalKey,
        IMutableEntityType principalEntityType)
        => RemoveForeignKey(properties, principalKey, principalEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableForeignKey? IMutableEntityType.RemoveForeignKey(IReadOnlyForeignKey foreignKey)
        => RemoveForeignKey((ForeignKey)foreignKey);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionForeignKey? IConventionEntityType.RemoveForeignKey(IReadOnlyForeignKey foreignKey)
        => RemoveForeignKey((ForeignKey)foreignKey);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyNavigation> IReadOnlyEntityType.GetDeclaredNavigations()
        => GetDeclaredNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<INavigation> IEntityType.GetDeclaredNavigations()
        => GetDeclaredNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyNavigation? IReadOnlyEntityType.FindDeclaredNavigation(string name)
        => FindDeclaredNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    INavigation? IEntityType.FindDeclaredNavigation(string name)
        => FindDeclaredNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyNavigation> IReadOnlyEntityType.GetDerivedNavigations()
        => GetDerivedNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyNavigation> IReadOnlyEntityType.GetNavigations()
        => GetNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<INavigation> IEntityType.GetNavigations()
        => GetNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableSkipNavigation IMutableEntityType.AddSkipNavigation(
        string name,
        MemberInfo? memberInfo,
        IMutableEntityType targetEntityType,
        bool collection,
        bool onDependent)
        => AddSkipNavigation(
            name, memberInfo, (EntityType)targetEntityType, collection, onDependent,
            ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionSkipNavigation? IConventionEntityType.AddSkipNavigation(
        string name,
        MemberInfo? memberInfo,
        IConventionEntityType targetEntityType,
        bool collection,
        bool onDependent,
        bool fromDataAnnotation)
        => AddSkipNavigation(
            name, memberInfo, (EntityType)targetEntityType, collection, onDependent,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlySkipNavigation? IReadOnlyEntityType.FindSkipNavigation(MemberInfo memberInfo)
        => FindSkipNavigation(memberInfo);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlySkipNavigation? IReadOnlyEntityType.FindSkipNavigation(string name)
        => FindSkipNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableSkipNavigation? IMutableEntityType.FindSkipNavigation(string name)
        => FindSkipNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionSkipNavigation? IConventionEntityType.FindSkipNavigation(string name)
        => FindSkipNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ISkipNavigation? IEntityType.FindSkipNavigation(string name)
        => FindSkipNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlySkipNavigation? IReadOnlyEntityType.FindDeclaredSkipNavigation(string name)
        => FindDeclaredSkipNavigation(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlySkipNavigation> IReadOnlyEntityType.GetDeclaredSkipNavigations()
        => GetDeclaredSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlySkipNavigation> IReadOnlyEntityType.GetDerivedSkipNavigations()
        => GetDerivedSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlySkipNavigation> IReadOnlyEntityType.GetSkipNavigations()
        => GetSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableSkipNavigation> IMutableEntityType.GetSkipNavigations()
        => GetSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionSkipNavigation> IConventionEntityType.GetSkipNavigations()
        => GetSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<ISkipNavigation> IEntityType.GetSkipNavigations()
        => GetSkipNavigations();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableSkipNavigation? IMutableEntityType.RemoveSkipNavigation(IReadOnlySkipNavigation navigation)
        => RemoveSkipNavigation((SkipNavigation)navigation);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionSkipNavigation? IConventionEntityType.RemoveSkipNavigation(IReadOnlySkipNavigation navigation)
        => RemoveSkipNavigation((SkipNavigation)navigation);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableIndex IMutableEntityType.AddIndex(IReadOnlyList<IMutableProperty> properties)
        => AddIndex(properties as IReadOnlyList<Property> ?? properties.Cast<Property>().ToList(), ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableIndex IMutableEntityType.AddIndex(IReadOnlyList<IMutableProperty> properties, string name)
        => AddIndex(properties as IReadOnlyList<Property> ?? properties.Cast<Property>().ToList(), name, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionIndex? IConventionEntityType.AddIndex(IReadOnlyList<IConventionProperty> properties, bool fromDataAnnotation)
        => AddIndex(
            properties as IReadOnlyList<Property> ?? properties.Cast<Property>().ToList(),
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionIndex? IConventionEntityType.AddIndex(
        IReadOnlyList<IConventionProperty> properties,
        string name,
        bool fromDataAnnotation)
        => AddIndex(
            properties as IReadOnlyList<Property> ?? properties.Cast<Property>().ToList(),
            name,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyIndex? IReadOnlyEntityType.FindIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => FindIndex(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableIndex? IMutableEntityType.FindIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => FindIndex(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionIndex? IConventionEntityType.FindIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => FindIndex(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IIndex? IEntityType.FindIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => FindIndex(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyIndex? IReadOnlyEntityType.FindIndex(string name)
        => FindIndex(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableIndex? IMutableEntityType.FindIndex(string name)
        => FindIndex(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionIndex? IConventionEntityType.FindIndex(string name)
        => FindIndex(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IIndex? IEntityType.FindIndex(string name)
        => FindIndex(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyIndex> IReadOnlyEntityType.GetDeclaredIndexes()
        => GetDeclaredIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IIndex> IEntityType.GetDeclaredIndexes()
        => GetDeclaredIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyIndex> IReadOnlyEntityType.GetDerivedIndexes()
        => GetDerivedIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IIndex> IEntityType.GetDerivedIndexes()
        => GetDerivedIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyIndex> IReadOnlyEntityType.GetIndexes()
        => GetIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableIndex> IMutableEntityType.GetIndexes()
        => GetIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionIndex> IConventionEntityType.GetIndexes()
        => GetIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IIndex> IEntityType.GetIndexes()
        => GetIndexes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionIndex? IConventionEntityType.RemoveIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => RemoveIndex(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableIndex? IMutableEntityType.RemoveIndex(IReadOnlyList<IReadOnlyProperty> properties)
        => RemoveIndex(properties);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableIndex? IMutableEntityType.RemoveIndex(IReadOnlyIndex index)
        => RemoveIndex((Index)index);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionIndex? IConventionEntityType.RemoveIndex(IReadOnlyIndex index)
        => RemoveIndex((Index)index);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableProperty IMutableEntityType.AddProperty(string name)
        => AddProperty(name, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.AddProperty(string name, bool fromDataAnnotation)
        => AddProperty(
            name,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableProperty IMutableEntityType.AddProperty(string name, Type propertyType)
        => AddProperty(
            name,
            propertyType,
            ConfigurationSource.Explicit,
            ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.AddProperty(
        string name,
        Type propertyType,
        bool setTypeConfigurationSource,
        bool fromDataAnnotation)
        => AddProperty(
            name,
            propertyType,
            setTypeConfigurationSource
                ? fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention
                : null,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableProperty IMutableEntityType.AddProperty(string name, Type propertyType, MemberInfo? memberInfo)
        => AddProperty(
            name, propertyType, memberInfo,
            ConfigurationSource.Explicit, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.AddProperty(
        string name,
        Type propertyType,
        MemberInfo? memberInfo,
        bool setTypeConfigurationSource,
        bool fromDataAnnotation)
        => AddProperty(
            name,
            propertyType,
            memberInfo,
            setTypeConfigurationSource
                ? fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention
                : null,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyProperty? IReadOnlyEntityType.FindDeclaredProperty(string name)
        => FindDeclaredProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IProperty? IEntityType.FindDeclaredProperty(string name)
        => FindDeclaredProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyList<IReadOnlyProperty>? IReadOnlyEntityType.FindProperties(IReadOnlyList<string> propertyNames)
        => FindProperties(propertyNames);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyProperty? IReadOnlyEntityType.FindProperty(string name)
        => FindProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableProperty? IMutableEntityType.FindProperty(string name)
        => FindProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.FindProperty(string name)
        => FindProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IProperty? IEntityType.FindProperty(string name)
        => FindProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyProperty> IReadOnlyEntityType.GetDeclaredProperties()
        => GetDeclaredProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IProperty> IEntityType.GetDeclaredProperties()
        => GetDeclaredProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyProperty> IReadOnlyEntityType.GetDerivedProperties()
        => GetDerivedProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyProperty> IReadOnlyEntityType.GetProperties()
        => GetProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableProperty> IMutableEntityType.GetProperties()
        => GetProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionProperty> IConventionEntityType.GetProperties()
        => GetProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IProperty> IEntityType.GetProperties()
        => GetProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IProperty> IEntityType.GetForeignKeyProperties()
        => ForeignKeyProperties;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IProperty> IEntityType.GetValueGeneratingProperties()
        => ValueGeneratingProperties;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableProperty? IMutableEntityType.RemoveProperty(string name)
        => RemoveProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.RemoveProperty(string name)
        => RemoveProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableProperty? IMutableEntityType.RemoveProperty(IReadOnlyProperty property)
        => RemoveProperty((Property)property);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionProperty? IConventionEntityType.RemoveProperty(IReadOnlyProperty property)
        => RemoveProperty((Property)property);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableServiceProperty IMutableEntityType.AddServiceProperty(MemberInfo memberInfo)
        => AddServiceProperty(memberInfo, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionServiceProperty IConventionEntityType.AddServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation)
        => AddServiceProperty(memberInfo, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyServiceProperty? IReadOnlyEntityType.FindServiceProperty(string name)
        => FindServiceProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableServiceProperty? IMutableEntityType.FindServiceProperty(string name)
        => FindServiceProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionServiceProperty? IConventionEntityType.FindServiceProperty(string name)
        => FindServiceProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IServiceProperty? IEntityType.FindServiceProperty(string name)
        => FindServiceProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyServiceProperty> IReadOnlyEntityType.GetDeclaredServiceProperties()
        => GetDeclaredServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IServiceProperty> IEntityType.GetDeclaredServiceProperties()
        => GetDeclaredServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyServiceProperty> IReadOnlyEntityType.GetDerivedServiceProperties()
        => GetDerivedServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyServiceProperty> IReadOnlyEntityType.GetServiceProperties()
        => GetServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableServiceProperty> IMutableEntityType.GetServiceProperties()
        => GetServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionServiceProperty> IConventionEntityType.GetServiceProperties()
        => GetServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IServiceProperty> IEntityType.GetServiceProperties()
        => GetServiceProperties();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableServiceProperty? IMutableEntityType.RemoveServiceProperty(IReadOnlyServiceProperty property)
        => RemoveServiceProperty((ServiceProperty)property);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionServiceProperty? IConventionEntityType.RemoveServiceProperty(IReadOnlyServiceProperty property)
        => RemoveServiceProperty((ServiceProperty)property);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableServiceProperty? IMutableEntityType.RemoveServiceProperty(string name)
        => RemoveServiceProperty(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionServiceProperty? IConventionEntityType.RemoveServiceProperty(string name)
        => RemoveServiceProperty(name);

    #endregion

    private static IEnumerable<T> ToEnumerable<T>(T? element)
        where T : class
        => element == null
            ? Enumerable.Empty<T>()
            : new[] { element };

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public class Snapshot
    {
        /// <summary>
        ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
        ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
        ///     any release. You should only use it directly in your code with extreme caution and knowing that
        ///     doing so can result in application failures when updating to a new Entity Framework Core release.
        /// </summary>
        public Snapshot(
            EntityType entityType,
            PropertiesSnapshot? properties,
            List<InternalIndexBuilder>? indexes,
            List<(InternalKeyBuilder, ConfigurationSource?)>? keys,
            List<RelationshipSnapshot>? relationships,
            List<InternalSkipNavigationBuilder>? skipNavigations,
            List<InternalServicePropertyBuilder>? serviceProperties)
        {
            EntityType = entityType;
            Properties = properties ?? new PropertiesSnapshot(null, null, null, null);
            if (indexes != null)
            {
                Properties.Add(indexes);
            }

            if (keys != null)
            {
                Properties.Add(keys);
            }

            if (relationships != null)
            {
                Properties.Add(relationships);
            }

            SkipNavigations = skipNavigations;
            ServiceProperties = serviceProperties;
        }

        private EntityType EntityType { [DebuggerStepThrough] get; }
        private PropertiesSnapshot Properties { [DebuggerStepThrough] get; }
        private List<InternalSkipNavigationBuilder>? SkipNavigations { [DebuggerStepThrough] get; }
        private List<InternalServicePropertyBuilder>? ServiceProperties { [DebuggerStepThrough] get; }

        /// <summary>
        ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
        ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
        ///     any release. You should only use it directly in your code with extreme caution and knowing that
        ///     doing so can result in application failures when updating to a new Entity Framework Core release.
        /// </summary>
        public virtual void Attach(InternalEntityTypeBuilder entityTypeBuilder)
        {
            entityTypeBuilder.MergeAnnotationsFrom(EntityType);

            foreach (var ignoredMember in EntityType.GetIgnoredMembers())
            {
                entityTypeBuilder.Ignore(ignoredMember, EntityType.FindDeclaredIgnoredConfigurationSource(ignoredMember)!.Value);
            }

            if (EntityType._baseTypeConfigurationSource != null)
            {
                var baseType = EntityType._baseType;
                if (baseType?.IsInModel == false)
                {
                    baseType = EntityType.Model.FindActualEntityType(baseType);
                }

                entityTypeBuilder.Metadata.SetBaseType(baseType, EntityType._baseTypeConfigurationSource.Value);
            }

            if (EntityType._isKeylessConfigurationSource != null)
            {
                entityTypeBuilder.Metadata.SetIsKeyless(EntityType.IsKeyless, EntityType._isKeylessConfigurationSource.Value);
            }

            if (EntityType._changeTrackingStrategyConfigurationSource != null)
            {
                entityTypeBuilder.Metadata.SetChangeTrackingStrategy(
                    EntityType.GetChangeTrackingStrategy(), EntityType._changeTrackingStrategyConfigurationSource.Value);
            }

            if (ServiceProperties != null)
            {
                foreach (var detachedServiceProperty in ServiceProperties)
                {
                    detachedServiceProperty.Attach(entityTypeBuilder);
                }
            }

            Properties.Attach(entityTypeBuilder);

            if (SkipNavigations != null)
            {
                foreach (var detachedSkipNavigation in SkipNavigations)
                {
                    detachedSkipNavigation.Attach();
                }
            }

            if (EntityType._constructorBindingConfigurationSource != null)
            {
                entityTypeBuilder.Metadata.SetConstructorBinding(
                    Create(EntityType.ConstructorBinding, entityTypeBuilder.Metadata),
                    EntityType._constructorBindingConfigurationSource.Value);
            }

            if (EntityType._serviceOnlyConstructorBindingConfigurationSource != null)
            {
                entityTypeBuilder.Metadata.SetServiceOnlyConstructorBinding(
                    Create(EntityType.ServiceOnlyConstructorBinding, entityTypeBuilder.Metadata),
                    EntityType._serviceOnlyConstructorBindingConfigurationSource.Value);
            }

            var rawData = EntityType._data;
            if (rawData != null)
            {
                entityTypeBuilder.Metadata.AddData(rawData);
            }
        }

        private static InstantiationBinding? Create(InstantiationBinding? instantiationBinding, EntityType entityType)
            => instantiationBinding?.With(
                instantiationBinding.ParameterBindings.Select(binding => Create(binding, entityType)).ToList());

        private static ParameterBinding Create(ParameterBinding parameterBinding, EntityType entityType)
            => parameterBinding.With(
                parameterBinding.ConsumedProperties.Select(
                    property =>
                        (entityType.FindProperty(property.Name)
                            ?? entityType.FindServiceProperty(property.Name)
                            ?? entityType.FindNavigation(property.Name)
                            ?? (IPropertyBase?)entityType.FindSkipNavigation(property.Name))!).ToArray());
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual DebugView DebugView
        => new(
            () => ((IReadOnlyEntityType)this).ToDebugString(),
            () => ((IReadOnlyEntityType)this).ToDebugString(MetadataDebugStringOptions.LongDefault));
}",1,439 334 2000 58 2001 44 2002 44 2003 44 2004 123 437 341 461 2005 61 648 59 437 441 2006 60 2007 62 2008 61 418 40 2009 46 2010 41 59 437 441 2011 60 461 44 2012 62 2013 61 418 40 2014 46 2015 41 59 437 441 2011 60 461 44 2016 62 2017 61 418 40 2014 46 2015 41 59 437 441 2011 60 2018 60 2019 62 44 2020 62 2021 61 418 40 2022 46 2010 41 59 437 441 2011 60 461 44 2020 62 2023 61 418 40 2014 46 2015 41 59 437 441 2011 60 461 44 2024 62 2025 59 437 441 2011 60 2018 60 2019 62 44 2026 62 2027 61 418 40 2022 46 2010 41 59 437 441 2011 60 461 44 2028 62 2029 61 418 40 2014 46 2015 41 59 437 2030 60 426 62 63 2031 59 437 2026 63 2032 59 437 323 63 2033 59 437 323 2034 59 437 2000 63 2035 59 437 2036 63 2037 59 437 2038 63 2039 59 437 2040 63 2041 59 437 2040 63 2042 59 437 2040 63 2043 59 437 2040 63 2044 59 437 2040 63 2045 59 437 2040 63 2046 59 621 437 2047 63 2048 59 621 437 2049 63 2050 59 437 2049 63 2051 59 437 2052 60 2053 44 2054 62 63 2055 59 437 2052 60 2053 44 2054 62 63 2056 59 437 2052 60 2053 44 2054 62 63 2057 59 437 2052 60 2054 62 63 2058 59 437 2052 60 2059 44 2054 62 63 2060 59 437 2052 60 2054 62 63 2061 59 437 2052 60 2062 44 426 62 63 2063 59 437 2064 91 93 63 2065 59 437 2064 91 93 63 2066 59 612 439 2000 40 461 2067 44 2068 2069 44 323 2070 44 2040 2071 41 58 320 40 2067 44 2068 46 2072 44 2069 44 2071 41 123 2025 61 418 2011 60 461 44 2024 62 40 418 2073 40 467 41 41 59 2039 61 418 2038 40 467 44 2069 46 2074 41 59 2034 61 2070 59 125 612 439 2000 40 2075 2076 44 2068 2069 44 323 2070 44 2040 2071 41 58 320 40 2076 44 2069 44 2071 41 123 392 40 33 2076 46 2077 40 41 41 123 469 418 2078 40 2079 46 2080 40 2076 41 41 59 125 392 40 2005 46 2081 40 2076 46 2082 46 2083 40 41 46 2084 44 2085 46 2015 41 41 123 469 418 2086 40 2087 46 2088 40 2076 46 2089 41 41 59 125 2025 61 418 2011 60 461 44 2024 62 40 418 2090 40 467 41 41 59 2039 61 418 2038 40 467 44 2069 46 2091 41 59 2034 61 2070 59 125 612 439 2000 40 461 2067 44 2075 2076 44 2068 2069 44 323 2070 44 2040 2071 41 58 320 40 2067 44 2076 44 2069 44 2071 41 123 392 40 33 2076 46 2092 40 41 41 123 469 418 2093 40 2094 46 2095 40 2076 41 41 59 125 392 40 2005 46 2096 40 2076 46 2097 46 2098 40 41 46 2099 44 2100 46 2015 41 41 123 469 418 2101 40 2102 46 2103 40 2076 46 2104 41 41 59 125 2025 61 418 2011 60 461 44 2024 62 40 418 2105 40 467 41 41 59 2039 61 418 2038 40 467 44 2069 46 2106 41 59 2034 61 2070 59 125 612 439 491 2038 2107 123 91 2108 93 2109 619 2039 633 469 418 2110 40 2111 46 2112 41 59 125 612 439 491 323 2113 619 2039 407 422 424 59 612 439 491 492 2114 40 41 619 2039 61 424 59 612 439 491 2000 63 2115 619 2035 59 612 439 491 323 2116 123 2117 619 2118 40 41 46 2033 633 380 59 2119 619 2120 40 2121 44 2040 46 2122 41 59 125 612 439 491 323 2123 40 41 619 2034 59 612 439 491 492 2124 40 323 2125 41 619 2034 61 2125 59 612 439 491 2000 63 2126 619 2127 40 41 634 2128 59 612 437 461 2129 40 41 619 40 40 2130 41 467 41 46 2129 40 41 59 612 439 491 323 63 2131 40 323 63 2132 44 2040 2071 41 123 2133 40 41 59 392 40 2033 614 2132 41 123 2134 40 2071 41 59 450 2132 59 125 392 40 2132 614 473 41 123 392 40 2035 631 424 41 123 469 418 2135 40 2136 46 2137 40 2129 40 41 44 2138 40 41 46 2129 40 41 41 41 59 125 392 40 2027 46 2139 631 1500 41 123 469 418 2140 40 2141 46 2142 40 2129 40 41 44 2027 46 2143 40 41 46 2144 46 2145 46 2146 40 41 41 41 59 125 125 2033 61 2132 59 392 40 2132 614 424 41 123 2042 61 424 59 125 360 123 2147 40 2071 41 59 125 450 2132 59 125 612 439 491 2040 63 2148 40 41 619 2042 59 437 492 2149 40 2040 2071 41 619 2042 61 2071 46 2150 40 2042 41 59 612 439 491 2000 63 2151 40 2000 63 2152 44 2040 2071 41 123 2153 40 41 59 2154 46 2155 40 2113 44 648 41 59 392 40 2035 614 2152 41 123 2156 40 2071 41 59 2152 634 2157 40 2071 41 59 450 2152 59 125 490 2158 61 2035 59 2035 634 2159 46 2160 40 467 41 59 2035 61 424 59 392 40 2152 631 424 41 123 392 40 33 2152 46 2161 46 2162 40 2161 41 41 123 469 418 2163 40 2164 46 2165 40 2129 40 41 44 2152 46 2129 40 41 44 2161 46 2166 40 41 44 2152 46 2161 46 2166 40 41 41 41 59 125 392 40 2152 46 2167 40 467 41 41 123 469 418 2168 40 2169 46 2170 40 2129 40 41 44 2152 46 2129 40 41 41 41 59 125 392 40 2027 46 2171 62 1500 41 123 469 418 2172 40 2173 46 2174 40 2129 40 41 41 41 59 125 392 40 2116 41 123 469 418 2175 40 2176 46 2177 40 2129 40 41 41 41 59 125 392 40 2123 40 41 631 2152 46 2123 40 41 41 123 469 418 2178 40 2179 46 2180 40 2152 46 2129 40 41 44 2129 40 41 44 2123 40 41 63 2129 40 41 58 2152 46 2129 40 41 44 33 2123 40 41 63 2129 40 41 58 2152 46 2129 40 41 41 41 59 125 490 2181 61 2152 46 2182 40 41 46 2183 40 2184 619 2184 46 2185 41 46 2186 40 2187 41 46 2188 40 41 59 392 40 2181 631 424 41 123 490 2189 61 2152 46 2187 40 2181 46 2185 41 46 2190 40 41 59 469 418 2191 40 2192 46 2193 40 2129 40 41 44 2152 46 2129 40 41 44 40 40 2194 41 2181 46 2195 41 46 2129 40 41 44 2181 46 2185 44 40 40 2194 41 2189 46 2195 41 46 2129 40 41 44 2189 46 2185 41 41 59 125 2035 61 2152 59 2035 46 2159 46 2196 40 467 41 59 125 2197 40 2071 41 59 2152 634 2198 40 2071 41 59 450 40 2000 63 41 2068 46 2199 46 2200 40 2107 44 2152 44 2158 41 59 125 612 439 491 492 2201 40 41 123 392 40 2008 46 2202 62 1500 41 123 386 40 490 2203 398 2204 40 41 46 2205 40 41 41 123 392 40 2203 46 2128 631 467 41 123 2206 40 2203 41 59 125 125 125 392 40 2017 46 2202 62 1500 41 123 386 40 490 2207 398 2208 40 41 46 2209 40 41 41 123 392 40 2207 46 2210 631 467 41 123 2211 40 2207 41 59 125 125 125 2039 61 424 59 2035 634 2212 46 2213 40 467 41 59 2068 46 2214 46 2215 40 2068 46 2107 44 467 41 59 125 612 91 2216 93 439 491 2040 63 2217 40 41 619 2043 59 91 2216 93 437 492 2218 40 2040 2071 41 619 2043 61 2071 46 2150 40 2043 41 59 437 441 2006 60 2000 62 2219 61 418 40 2220 46 2010 41 59 612 621 91 2216 93 439 491 2221 60 2000 62 2222 40 41 619 2219 59 612 439 491 2223 60 2000 62 2224 40 41 123 392 40 2219 46 2225 614 1500 41 123 450 2226 46 2227 60 2000 62 40 41 59 125 490 2228 61 418 2030 60 2000 62 40 41 59 490 2076 61 467 59 490 2229 61 1500 59 496 40 2076 631 424 41 123 2228 46 2230 40 2076 46 2222 40 41 41 59 2076 61 2228 46 2225 62 2229 63 2228 91 2229 93 58 424 59 2229 637 59 125 450 2228 59 125 612 91 2216 93 439 491 2223 60 2000 62 2231 40 41 619 2219 46 2232 614 1500 63 418 91 93 123 467 125 58 418 91 93 123 467 125 46 2233 40 2224 40 41 41 59 612 91 2216 93 439 491 2223 60 2007 62 2234 40 41 619 2219 46 2232 614 1500 63 2235 40 41 58 2235 40 41 46 2233 40 2236 40 41 41 59 437 323 2237 40 2000 2238 41 123 490 2239 61 467 59 355 123 392 40 2238 614 2239 41 123 450 473 59 125 125 496 40 40 2239 61 2239 46 2035 41 631 424 41 59 450 380 59 125 612 91 2216 93 439 491 2000 2240 40 41 619 40 2000 41 40 40 2130 41 467 41 46 2241 40 41 59 612 439 431 461 2242 40 41 619 40 40 2130 41 467 41 46 2243 40 2244 46 2245 41 59 612 438 431 2246 63 2247 40 461 2067 44 2246 63 2248 44 2246 63 2249 41 619 2068 46 2250 46 2251 40 2107 44 2067 44 2248 44 2249 41 59 612 439 491 2223 60 2252 62 2253 40 41 619 2254 40 41 46 2255 60 2252 62 40 41 46 2233 40 2256 40 41 41 46 2233 40 2257 40 41 41 46 2233 40 2258 40 41 41 59 612 439 491 2223 60 2252 62 2259 40 41 619 2260 40 41 46 2255 60 2252 62 40 41 46 2233 40 2261 40 41 41 46 2233 40 2262 40 41 41 46 2233 40 2263 40 41 41 59 612 439 491 2223 60 2252 62 2264 40 461 2067 41 619 2265 40 2067 41 46 2255 60 2252 62 40 41 46 2233 40 2266 40 2067 41 41 46 2233 40 2267 40 2067 41 41 46 2233 40 2268 40 2067 41 41 59 35 443 612 439 491 2026 63 2269 40 2024 63 2270 44 2040 2071 41 619 2269 40 2270 614 424 63 424 58 418 91 93 123 2270 125 44 2071 41 59 612 439 491 2026 63 2269 40 2018 60 2024 62 63 2271 44 2040 2071 41 123 2272 40 41 59 2273 46 2274 40 2113 44 648 41 59 392 40 2035 631 424 41 123 469 418 2275 40 2276 46 2277 40 2129 40 41 44 2240 40 41 46 2129 40 41 41 41 59 125 490 2278 61 2032 59 392 40 2278 614 424 605 40 2271 407 424 606 2271 46 2232 614 1500 41 41 123 450 424 59 125 2026 63 2279 61 424 59 392 40 2271 634 2232 62 1500 41 123 2279 61 2280 40 2271 41 59 392 40 2278 631 424 605 2278 614 2279 41 123 2281 40 2071 41 59 2279 46 2282 40 2071 41 59 450 2279 59 125 2279 633 61 2283 40 2271 44 2071 41 59 125 392 40 2278 631 424 41 123 386 40 490 2270 398 2278 46 2284 41 123 2025 46 2285 40 2270 46 2286 41 59 2270 46 2287 61 424 59 125 2032 61 424 59 386 40 490 2270 398 2278 46 2284 41 123 2025 46 2288 40 2270 46 2289 44 2270 41 59 125 125 392 40 2271 634 2232 62 1500 605 2279 631 424 41 123 386 40 490 2270 398 2279 46 2290 41 123 2025 46 2291 40 2270 46 2292 41 59 2270 46 2293 61 2279 59 125 2032 61 2279 59 386 40 490 2270 398 2279 46 2290 41 123 2025 46 2294 40 2270 46 2295 44 2270 41 59 125 2296 40 2071 41 59 125 360 123 2297 40 424 41 59 125 450 40 2026 63 41 2068 46 2250 46 2298 40 2107 44 2279 44 2278 41 59 125 612 439 491 2026 63 2299 40 41 619 2035 634 2299 40 41 633 2032 59 612 439 491 2026 63 2299 40 2018 60 2024 62 63 2271 41 123 2300 46 2301 40 2271 44 2302 40 2271 41 41 59 2300 46 2303 40 2271 44 2302 40 2271 41 41 59 392 40 2035 631 424 41 123 450 2035 46 2299 40 2271 41 59 125 450 2032 631 424 605 2022 46 2010 46 2304 40 2032 46 2305 44 2271 41 614 1500 63 2032 58 424 59 125 612 439 491 2040 63 2306 40 41 619 2041 59 612 437 492 2307 40 2040 63 2071 41 619 2041 61 2071 59 612 437 492 2308 40 2040 2071 41 619 2041 61 2071 46 2150 40 2041 41 59 612 439 491 2026 63 2309 40 2024 2270 44 2040 2071 41 619 2309 40 418 91 93 123 2270 125 44 2071 41 59 612 439 491 2026 63 2309 40 2018 60 2024 62 2271 44 2040 2071 41 123 2310 46 2311 40 2271 44 2312 40 2271 41 41 59 2310 46 2313 40 2271 44 2312 40 2271 41 41 59 2314 40 41 59 392 40 2035 631 424 41 123 469 418 2315 40 2316 46 2317 40 2129 40 41 44 2035 46 2129 40 41 41 41 59 125 392 40 2116 41 123 469 418 2318 40 2319 46 2320 40 2271 46 2321 40 41 44 2129 40 41 41 41 59 125 385 40 490 2322 61 1500 59 2322 60 2271 46 2232 59 2322 637 41 123 490 2270 61 2271 91 2322 93 59 385 40 490 2323 61 2322 43 1501 59 2323 60 2271 46 2232 59 2323 637 41 123 392 40 2270 614 2271 91 2323 93 41 123 469 418 2324 40 2325 46 2326 40 2271 46 2327 40 41 44 2270 46 2328 41 41 59 125 125 392 40 2329 40 2270 46 2330 41 631 2270 606 33 2270 46 2113 41 123 469 418 2331 40 2332 46 2333 40 2271 46 2334 40 41 44 2129 40 41 41 41 59 125 392 40 2270 46 2335 41 123 469 418 2336 40 2337 46 2338 40 2129 40 41 44 2270 46 2330 41 41 59 125 125 490 2339 61 2340 40 2271 41 59 392 40 2339 631 424 41 123 469 418 2341 40 2342 46 2343 40 2271 46 2344 40 41 44 2129 40 41 44 2339 46 2345 46 2129 40 41 41 41 59 125 2339 61 418 2026 40 2271 44 2071 41 59 2027 46 2346 40 2271 44 2339 41 59 386 40 490 2270 398 2271 41 123 392 40 2270 46 2347 614 424 41 123 2270 46 2347 61 418 2030 60 2026 62 123 2339 125 59 125 360 123 2270 46 2347 46 2346 40 2339 41 59 125 125 450 40 2026 63 41 2068 46 2250 46 2348 40 2339 46 2107 41 634 2349 59 125 612 439 491 2026 63 2350 40 2019 2270 41 619 2350 40 418 91 93 123 2270 125 41 59 612 439 491 2026 63 2350 40 2018 60 2019 62 2271 41 123 2351 46 2352 40 2271 44 2353 40 2271 41 41 59 2351 46 2354 40 2271 44 2353 40 2271 41 41 59 450 2355 40 2271 41 633 2035 634 2350 40 2271 41 59 125 612 439 491 2223 60 2026 62 2356 40 41 619 2027 46 2357 59 612 439 491 2026 63 2358 40 2018 60 2019 62 2271 41 619 2027 46 2359 40 2360 46 2361 40 2271 44 2362 40 2271 41 41 44 430 490 2363 41 63 2363 58 424 59 612 439 491 2026 63 2364 40 2018 60 2019 62 2271 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 490 2365 61 2271 46 2366 40 2367 619 33 2367 46 2368 46 2369 40 467 41 41 59 392 40 2365 631 424 41 123 469 418 2370 40 2371 46 2372 40 2271 46 2373 40 41 44 2129 40 41 44 2365 46 2368 46 2129 40 41 41 41 59 125 490 2363 61 2358 40 2271 41 59 450 2363 614 424 63 424 58 2364 40 2363 41 59 125 612 439 491 2026 63 2364 40 2026 2363 41 123 2360 46 2374 40 2363 44 2362 40 2363 41 41 59 2360 46 2375 40 2113 44 648 41 59 2376 40 41 59 392 40 2363 46 2377 631 467 41 123 469 418 2378 40 2379 46 2380 40 2363 46 2381 46 2382 40 41 44 2129 40 41 44 2363 46 2377 46 2129 40 41 41 41 59 125 2383 40 2363 41 59 392 40 2032 614 2363 41 123 2269 40 40 2018 60 2024 62 63 41 424 44 2040 46 2384 41 59 2041 61 424 59 125 490 2385 61 2027 46 2386 40 2363 46 2387 41 59 2360 46 2375 40 2385 44 648 41 59 2363 46 2114 40 41 59 386 40 490 2270 398 2363 46 2387 41 123 392 40 2270 46 2388 631 424 41 123 2270 46 2388 46 2386 40 2363 41 59 392 40 2270 46 2388 46 2232 614 1500 41 123 2270 46 2388 61 424 59 125 125 125 450 40 2026 63 41 2068 46 2250 46 2389 40 2107 44 2363 41 59 125 437 492 2390 40 2026 2363 41 123 490 2391 61 2363 46 2392 40 41 46 2393 40 41 59 392 40 2391 631 424 41 123 469 418 2394 40 2395 46 2396 40 2363 46 2397 46 2398 40 41 44 2129 40 41 44 2391 46 2397 46 2398 40 41 44 2391 46 2399 46 2129 40 41 41 41 59 125 125 612 439 491 2223 60 2026 62 2400 40 41 619 2035 634 2400 40 41 46 2233 40 2027 46 2357 41 633 2027 46 2357 59 35 367 35 443 612 439 491 2007 63 2401 40 2024 2270 44 2026 2402 44 2000 2403 44 2040 63 2404 44 2040 2071 41 619 2401 40 418 91 93 123 2270 125 44 2402 44 2403 44 2404 44 2071 41 59 612 439 491 2007 63 2401 40 2018 60 2024 62 2271 44 2026 2402 44 2000 2403 44 2040 63 2404 44 2040 2071 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 2360 46 2405 40 2271 44 2362 40 2271 41 41 59 2360 46 2406 40 2402 44 2362 40 2402 41 41 59 2360 46 2406 40 2403 44 2362 40 2403 41 41 59 2407 40 41 59 490 2408 61 418 2007 40 2271 44 2402 44 467 44 2403 44 2071 41 59 2403 46 2409 40 2071 41 59 392 40 2404 46 2410 41 123 2408 46 2411 40 2404 46 2412 41 59 2408 46 2413 40 2404 46 2412 41 59 2408 46 2414 40 2404 46 2412 41 59 125 2415 40 2408 41 59 450 40 2007 63 41 2068 46 2250 46 2416 40 2408 46 2107 41 634 2417 59 125 612 439 491 492 2418 40 2007 2419 41 123 490 2420 61 2008 46 2421 40 2419 41 59 2360 46 2422 40 2420 44 648 41 59 386 40 490 2270 398 2419 46 2423 41 123 392 40 2270 46 2424 631 424 41 123 2270 46 2424 46 2421 40 2419 41 59 392 40 2270 46 2424 46 2232 614 1500 41 123 2270 46 2424 61 424 59 125 125 125 2420 61 2419 46 2425 46 2426 33 46 2421 40 2419 41 59 2360 46 2422 40 2420 44 648 41 59 2420 61 2419 46 2128 46 2427 33 46 2421 40 2419 41 59 2360 46 2422 40 2420 44 648 41 59 125 612 439 491 492 2428 40 2007 2419 41 123 490 2429 61 2008 46 2430 40 2419 41 59 2360 46 2431 40 2429 44 648 41 59 386 40 490 2270 398 2419 46 2432 41 123 392 40 2270 46 2433 614 424 41 123 2270 46 2433 61 418 2030 60 2007 62 123 2419 125 59 125 360 123 2270 46 2433 46 2430 40 2419 41 59 125 125 490 2402 61 2419 46 2434 59 392 40 2402 46 2435 614 424 41 123 2402 46 2435 61 418 2006 60 2007 62 40 2009 46 2010 41 123 2419 125 59 125 360 123 2429 61 2402 46 2435 46 2430 40 2419 41 59 2360 46 2431 40 2429 44 648 41 59 125 490 2403 61 2419 46 2128 59 392 40 2403 46 2436 614 424 41 123 2403 46 2436 61 418 2006 60 2007 62 40 2009 46 2010 41 123 2419 125 59 125 360 123 2429 61 2403 46 2436 46 2430 40 2419 41 59 2360 46 2431 40 2429 44 648 41 59 125 125 612 439 491 2223 60 2007 62 2437 40 2019 2270 41 619 2437 40 418 91 93 123 2270 125 41 59 612 439 491 2223 60 2007 62 2437 40 2018 60 2019 62 2271 41 123 2360 46 2438 40 2271 44 2362 40 2271 41 41 59 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 450 2035 631 424 63 2008 46 2232 614 1500 63 2035 46 2437 40 2271 41 58 2035 46 2437 40 2271 41 46 2233 40 2439 40 2271 41 41 58 2439 40 2271 41 59 125 612 439 491 2007 63 2440 40 2019 2270 44 2441 2402 44 2130 2403 41 619 2440 40 418 91 93 123 2270 125 44 2402 44 2403 41 59 612 439 491 2007 63 2440 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 123 2360 46 2442 40 2271 44 2362 40 2271 41 41 59 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 2360 46 2443 40 2402 44 2362 40 2402 41 41 59 2360 46 2443 40 2403 44 2362 40 2403 41 41 59 450 2444 40 2271 44 2402 44 2403 41 633 2035 634 2440 40 2271 44 2402 44 2403 41 59 125 612 439 491 2007 63 2127 40 41 123 386 40 490 2419 398 2235 40 41 41 123 392 40 2419 46 2445 41 123 450 2419 59 125 125 450 424 59 125 612 439 491 2007 63 2446 40 41 123 386 40 490 2419 398 2008 41 123 392 40 2419 46 2447 41 123 450 2419 59 125 125 450 424 59 125 612 439 491 2223 60 2007 62 2448 40 41 619 2008 59 612 439 491 2223 60 2007 62 2236 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2007 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2008 41 59 612 439 491 2223 60 2007 62 2235 40 41 619 2035 631 424 63 2008 46 2232 614 1500 63 2035 46 2235 40 41 58 2035 46 2235 40 41 46 2233 40 2008 41 58 2008 59 612 439 491 2223 60 2007 62 2453 40 2018 60 2019 62 2271 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 450 2008 46 2232 614 1500 63 2449 46 2450 60 2007 62 40 41 58 2008 46 2454 40 2455 619 2022 46 2010 46 2456 40 2455 46 2457 44 2271 41 41 59 125 612 439 491 2007 63 2458 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 2360 46 2459 40 2402 44 2362 40 2402 41 41 59 2360 46 2459 40 2403 44 2362 40 2403 41 41 59 392 40 2008 46 2232 614 1500 41 123 450 424 59 125 386 40 490 2460 398 2453 40 2271 41 41 123 392 40 2022 46 2010 46 2461 40 2460 46 2462 46 2463 44 2402 46 2463 41 605 2460 46 2128 614 2403 41 123 450 2460 59 125 125 450 424 59 125 612 439 491 2223 60 2007 62 2464 40 2018 60 2019 62 2271 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2007 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2453 40 2271 41 41 59 612 439 491 2223 60 2007 62 2464 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2007 62 40 41 58 40 2223 60 2007 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2458 40 2271 44 2402 44 2403 41 41 46 2466 40 2467 619 2467 631 424 41 59 612 439 491 2223 60 2007 62 2468 40 2018 60 2019 62 2271 41 619 2219 46 2232 614 1500 63 2437 40 2271 41 58 2437 40 2271 41 46 2233 40 2464 40 2271 41 41 59 612 439 491 2223 60 2007 62 2468 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 619 2219 46 2232 614 1500 63 2469 40 2440 40 2271 44 2402 44 2403 41 41 58 2469 40 2440 40 2271 44 2402 44 2403 41 41 46 2233 40 2464 40 2271 44 2402 44 2403 41 41 59 612 439 491 2007 63 2470 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 490 2419 61 2458 40 2271 44 2402 44 2403 41 59 450 2419 614 424 63 424 58 2470 40 2419 41 59 125 612 439 491 2007 63 2470 40 2007 2419 41 123 2360 46 2471 40 2419 44 2362 40 2419 41 41 59 2360 46 2472 40 2113 44 648 41 59 2473 40 41 59 392 40 2419 46 2474 631 467 41 123 469 418 2475 40 2476 46 2477 40 2419 46 2478 46 2479 40 41 44 2419 46 2480 46 2478 46 2479 40 41 44 2419 46 2128 46 2129 40 41 44 2129 40 41 44 2419 46 2474 46 2129 40 41 41 41 59 125 490 2481 61 2419 46 2482 634 2483 40 41 59 392 40 2481 631 424 41 123 469 418 2484 40 2485 46 2486 40 2419 46 2487 46 2488 40 41 44 2129 40 41 44 2481 46 2489 44 2481 46 2474 46 2129 40 41 41 41 59 125 392 40 2419 46 2490 631 424 41 123 2419 46 2474 46 2491 40 2419 46 2490 46 2492 41 59 125 392 40 2419 46 2493 631 424 41 123 2419 46 2128 46 2494 40 2419 46 2493 46 2495 41 59 125 2418 40 2419 41 59 2419 46 2114 40 41 59 392 40 2419 46 2490 631 424 41 123 2419 46 2490 46 2114 40 41 59 2068 46 2250 46 2496 40 2107 44 2419 46 2128 46 2107 44 2419 46 2490 46 2497 44 2419 46 2490 46 2498 40 41 41 59 125 392 40 2419 46 2493 631 424 41 123 2419 46 2493 46 2114 40 41 59 2068 46 2250 46 2499 40 2419 46 2128 46 2107 44 2107 44 2419 46 2493 46 2500 44 2419 46 2493 46 2501 40 41 41 59 125 450 40 2007 63 41 2068 46 2250 46 2502 40 2107 44 2419 41 59 125 612 439 491 2223 60 2007 62 2503 40 41 619 2035 631 424 63 40 2504 634 2232 633 1500 41 614 1500 63 2035 46 2503 40 41 58 2035 46 2503 40 41 46 2233 40 2505 40 41 41 58 2505 40 41 59 612 439 491 2223 60 2007 62 2505 40 41 619 2504 633 2449 46 2450 60 2007 62 40 41 59 437 2006 60 2007 62 63 2504 123 2506 59 2507 59 125 35 367 35 443 612 439 491 2012 2508 40 461 2067 44 2007 2419 44 323 2509 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 2360 46 2510 40 2419 44 2362 40 2419 41 41 59 450 2508 40 418 2511 40 2067 41 44 2419 44 2509 41 59 125 612 439 491 2012 2508 40 2512 2513 44 2007 2419 44 323 2509 41 123 2360 46 2514 40 2513 44 2362 40 2513 41 41 59 2360 46 2514 40 2419 44 2362 40 2419 41 41 59 450 2508 40 418 2515 40 2513 41 44 2419 44 2509 41 59 125 612 439 491 2012 2508 40 2516 2513 44 2007 2419 44 323 2509 41 123 2517 40 41 59 490 2067 61 2513 46 2518 33 59 490 2519 61 2267 40 2067 41 46 2520 40 41 59 392 40 2519 631 424 41 123 392 40 2519 46 2007 631 2419 41 123 469 418 2521 40 2522 46 2523 40 2519 46 2518 44 2519 46 2524 46 2129 40 41 44 2419 46 2525 46 2526 40 41 44 2519 46 2007 46 2525 46 2526 40 41 41 41 59 125 469 418 2527 40 2528 46 2529 40 2067 44 2129 40 41 44 2519 46 2530 46 2129 40 41 41 41 59 125 490 2531 61 2264 40 2067 41 46 2520 40 41 59 392 40 2531 631 424 41 123 469 418 2532 40 2533 46 2534 40 2067 44 2129 40 41 44 40 40 2535 41 2531 46 2536 41 46 2129 40 41 41 41 59 125 2360 46 2537 40 33 2257 40 41 46 2538 40 2539 619 2539 46 2007 614 2419 605 2539 46 2540 614 2509 41 44 648 41 59 2360 46 2537 40 40 2509 63 2419 46 2541 58 2419 46 2128 41 614 467 44 648 41 59 490 2542 61 2513 46 2512 59 392 40 2542 631 424 41 123 2543 40 2067 44 2542 41 59 125 360 392 40 33 2544 41 123 2542 61 2545 46 2546 40 2067 41 46 2520 40 41 59 125 392 40 2542 631 424 41 123 2012 46 2547 40 2067 44 2542 44 467 44 2509 63 2419 46 2128 58 2419 46 2541 44 33 2509 605 33 2419 46 2548 44 2549 58 473 41 59 125 360 392 40 2544 41 123 2542 61 2550 40 41 33 59 125 490 2551 61 418 2012 40 2067 44 2542 311 2552 44 2542 311 2553 44 2419 41 59 2013 46 2554 40 2067 44 2551 41 59 450 2551 59 125 612 439 491 2012 63 2555 40 461 2067 41 619 40 2012 63 41 40 40 2130 41 467 41 46 2555 40 2067 41 59 612 439 491 2012 63 2555 40 2512 2556 41 619 40 2012 63 41 40 40 2130 41 467 41 46 2555 40 2360 46 2557 40 2556 44 2362 40 2556 41 41 46 2558 40 41 41 59 612 439 491 2012 63 2559 40 461 2067 41 619 2013 46 2359 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 44 430 490 2560 41 63 2560 58 424 59 612 439 491 2223 60 2012 62 2262 40 41 619 2013 46 2357 59 612 439 491 2223 60 2012 62 2561 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2012 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2262 40 41 41 59 612 439 491 2223 60 2012 62 2562 40 461 2067 41 123 2360 46 2557 40 2067 44 2362 40 2067 41 41 59 450 2219 46 2232 614 1500 63 2449 46 2450 60 2012 62 40 41 58 40 2223 60 2012 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2559 40 2067 41 41 46 2466 40 2563 619 2563 631 424 41 59 125 612 439 491 2223 60 2012 62 2267 40 461 2067 41 619 2219 46 2232 614 1500 63 2469 40 2555 40 2067 41 41 58 2469 40 2555 40 2067 41 41 46 2233 40 2562 40 2067 41 41 59 612 439 491 2012 63 2564 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 2565 40 41 59 490 2560 61 2559 40 2067 41 59 392 40 2560 614 424 41 123 450 424 59 125 2013 46 2566 40 2067 41 59 450 2560 59 125 612 439 491 2223 60 2012 62 2257 40 41 619 2035 631 424 63 2013 46 2232 614 1500 63 2035 46 2257 40 41 58 2035 46 2257 40 41 46 2233 40 2013 46 2357 41 58 2013 46 2357 59 612 439 491 2016 63 2567 40 461 2067 44 2512 63 2556 44 2000 2568 44 323 2569 44 323 2570 44 2040 2071 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 2360 46 2557 40 2568 44 2362 40 2568 41 41 59 2571 40 41 59 490 2572 61 2264 40 2067 41 46 2573 40 41 59 392 40 2572 631 424 41 123 469 418 2574 40 2575 46 2576 40 2067 44 2129 40 41 44 40 40 2577 41 2572 46 2578 41 46 2129 40 41 41 41 59 125 392 40 2556 631 424 41 123 2579 40 2067 44 2556 41 59 125 360 392 40 33 2580 41 123 2556 61 2581 46 2582 40 2067 41 46 2573 40 41 59 125 392 40 2556 631 424 41 123 2012 46 2583 40 2067 44 2556 44 467 44 2568 44 2569 44 2584 58 473 41 59 125 360 392 40 2580 41 123 2556 61 2585 40 41 33 59 125 490 2586 61 418 2016 40 2067 44 2556 311 2587 44 2556 311 2588 44 467 44 2568 44 2569 44 2570 44 2071 41 59 2017 46 2589 40 2067 44 2586 41 59 392 40 2568 46 2590 614 424 41 123 2568 46 2590 61 418 2006 60 2016 62 40 2591 46 2010 41 123 2586 125 59 125 360 123 490 2592 61 2568 46 2590 46 2589 40 2586 41 59 2360 46 2593 40 2592 44 648 41 59 125 450 40 2016 63 41 2068 46 2250 46 2594 40 2586 46 2107 41 634 2595 59 125 437 2075 63 2596 40 461 2067 44 2512 2556 44 323 2597 61 473 41 123 392 40 2067 631 2556 46 2558 40 41 41 123 392 40 2556 631 2598 40 41 41 123 392 40 2597 41 123 469 418 2599 40 2600 46 2601 40 2067 44 2129 40 41 44 2556 46 2558 40 41 41 41 59 125 450 2556 46 2602 40 41 59 125 490 2603 61 2604 63 424 58 2605 46 2606 40 2067 41 46 2607 40 41 59 392 40 2603 631 424 41 123 469 418 2608 40 2609 46 2610 40 2067 44 2129 40 41 41 41 59 125 125 450 424 59 125 612 439 491 2016 63 2611 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 450 2612 40 2067 41 633 2035 634 2611 40 2067 41 59 125 612 439 491 2016 63 2611 40 2512 2556 41 619 2611 40 2360 46 2557 40 2556 44 2362 40 2556 41 41 46 2558 40 41 41 59 612 439 491 2016 63 2613 40 461 2067 41 619 2017 46 2359 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 44 430 490 2560 41 63 2560 58 424 59 612 439 491 2223 60 2016 62 2263 40 41 619 2017 46 2357 59 612 439 491 2223 60 2016 62 2614 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2016 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2263 40 41 41 59 612 439 491 2223 60 2016 62 2615 40 461 2067 41 123 2360 46 2557 40 2067 44 2362 40 2067 41 41 59 450 2219 46 2232 614 1500 63 2449 46 2450 60 2016 62 40 41 58 40 2223 60 2016 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2613 40 2067 41 41 46 2466 40 2616 619 2616 631 424 41 59 125 612 439 491 2223 60 2016 62 2617 40 461 2067 41 619 2219 46 2232 614 1500 63 2469 40 2613 40 2067 41 41 58 2469 40 2613 40 2067 41 41 46 2233 40 2615 40 2067 41 41 59 612 439 491 2223 60 2016 62 2268 40 461 2067 41 619 2219 46 2232 614 1500 63 2469 40 2611 40 2067 41 41 58 2469 40 2611 40 2067 41 41 46 2233 40 2615 40 2067 41 41 59 612 439 491 2016 63 2618 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 490 2560 61 2613 40 2067 41 59 450 2560 614 424 63 424 58 2618 40 2560 41 59 125 612 439 491 2016 63 2618 40 2016 2560 41 123 2360 46 2557 40 2560 44 2362 40 2560 41 41 59 2360 46 2619 40 2113 44 648 41 59 2620 40 41 59 392 40 2560 46 2621 631 467 41 123 469 418 2622 40 2623 46 2624 40 2560 46 2625 44 2129 40 41 44 2560 46 2621 46 2129 40 41 41 41 59 125 392 40 2560 46 2626 634 2626 614 2560 41 123 469 418 2627 40 2628 46 2629 40 2560 46 2621 46 2129 40 41 44 2560 46 2630 44 2560 46 2626 46 2621 46 2129 40 41 44 2560 46 2626 46 2630 41 41 59 125 490 2631 61 2017 46 2632 40 2560 46 2633 41 59 2360 46 2619 40 2631 44 648 41 59 2631 61 2560 46 2007 407 2007 2419 63 2419 46 2634 33 46 2632 40 2560 41 58 473 59 2360 46 2619 40 2631 44 648 41 59 2631 61 2560 46 2635 46 2636 33 46 2632 40 2560 41 59 2360 46 2619 40 2631 44 648 41 59 2560 46 2114 40 41 59 450 40 2016 63 41 2068 46 2250 46 2637 40 2107 44 2560 41 59 125 612 439 491 2223 60 2016 62 2258 40 41 619 2035 631 424 63 2017 46 2232 614 1500 63 2035 46 2258 40 41 58 2035 46 2258 40 41 46 2233 40 2017 46 2357 41 58 2017 46 2357 59 612 439 491 2223 60 2016 62 2638 40 41 619 2035 631 424 63 40 2639 634 2232 633 1500 41 614 1500 63 2035 46 2638 40 41 58 2035 46 2638 40 41 46 2233 40 2640 40 41 41 58 2640 40 41 59 612 439 491 2223 60 2016 62 2640 40 41 619 2639 633 2449 46 2450 60 2016 62 40 41 59 612 439 491 2223 60 2016 62 2641 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2016 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2640 40 41 41 59 437 2006 60 2016 62 63 2639 123 2642 59 2643 59 125 35 367 35 443 612 439 491 2020 63 2644 40 2024 2270 44 2040 2071 41 619 2644 40 418 91 93 123 2270 125 44 2071 41 59 612 439 491 2020 63 2644 40 2024 2270 44 461 2067 44 2040 2071 41 619 2644 40 418 91 93 123 2270 125 44 2067 44 2071 41 59 612 439 491 2020 63 2644 40 2018 60 2024 62 2271 44 2040 2071 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 2360 46 2645 40 2271 44 2362 40 2271 41 41 59 2646 40 41 59 2647 40 2271 41 59 490 2648 61 2649 40 2271 41 46 2650 40 41 59 392 40 2648 631 424 41 123 469 418 2651 40 2652 46 2653 40 2271 46 2654 40 41 44 2129 40 41 44 2648 46 2655 46 2129 40 41 41 41 59 125 490 2656 61 418 2020 40 2271 44 467 44 2071 41 59 2021 46 2657 40 2271 44 2656 41 59 2658 40 2271 44 2656 41 59 450 40 2020 63 41 2068 46 2250 46 2659 40 2656 46 2107 41 634 2660 59 125 612 439 491 2020 63 2644 40 2018 60 2024 62 2271 44 461 2067 44 2040 2071 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 2360 46 2661 40 2271 44 2362 40 2271 41 41 59 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 2662 40 41 59 2663 40 2271 41 59 490 2664 61 2665 40 2067 41 46 2666 40 41 59 392 40 2664 631 424 41 123 469 418 2667 40 2668 46 2669 40 2067 44 2271 46 2670 40 41 44 2129 40 41 44 2664 46 2671 46 2129 40 41 41 41 59 125 490 2672 61 418 2020 40 2271 44 2067 44 467 44 2071 41 59 2023 46 2673 40 2067 44 2672 41 59 2674 40 2271 44 2672 41 59 450 40 2020 63 41 2068 46 2250 46 2675 40 2672 46 2107 41 634 2676 59 125 437 492 2677 40 2018 60 2024 62 2271 41 123 385 40 490 2678 61 1500 59 2678 60 2271 46 2232 59 2678 637 41 123 490 2270 61 2271 91 2678 93 59 385 40 490 2679 61 2678 43 1501 59 2679 60 2271 46 2232 59 2679 637 41 123 392 40 2270 614 2271 91 2679 93 41 123 469 418 2680 40 2681 46 2682 40 2271 46 2683 40 41 44 2270 46 2684 41 41 59 125 125 392 40 2685 40 2270 46 2686 41 631 2270 606 33 2270 46 2113 41 123 469 418 2687 40 2688 46 2689 40 2271 46 2690 40 41 44 2129 40 41 41 41 59 125 125 125 437 457 492 2691 40 2018 60 2024 62 2271 44 2020 2692 41 123 386 40 490 2270 398 2271 41 123 392 40 2270 46 2693 614 424 41 123 2270 46 2693 61 418 2030 60 2020 62 123 2692 125 59 125 360 123 2270 46 2693 46 2694 40 2692 41 59 125 125 125 612 439 491 2020 63 2695 40 2019 2270 41 619 2695 40 418 91 93 123 2270 125 41 59 612 439 491 2020 63 2695 40 2018 60 2019 62 2271 41 123 2360 46 2696 40 2271 44 2362 40 2271 41 41 59 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 450 2697 40 2271 41 633 2035 634 2695 40 2271 41 59 125 612 439 491 2020 63 2695 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 450 2698 40 2067 41 633 2035 634 2695 40 2067 41 59 125 612 439 491 2223 60 2020 62 2699 40 41 619 2023 46 2232 614 1500 63 2021 46 2357 58 2021 46 2357 46 2233 40 2023 46 2357 41 59 612 439 491 2223 60 2020 62 2700 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2020 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2699 40 41 41 59 612 439 491 2020 63 2701 40 2018 60 2019 62 2271 41 619 2021 46 2359 40 2360 46 2361 40 2271 44 2362 40 2271 41 41 44 430 490 2692 41 63 2692 58 424 59 612 439 491 2020 63 2701 40 461 2067 41 619 2023 46 2359 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 44 430 490 2692 41 63 2692 58 424 59 612 439 491 2223 60 2020 62 2702 40 2018 60 2019 62 2271 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2020 62 40 41 58 40 2223 60 2020 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2701 40 2271 41 41 46 2466 40 2703 619 2703 631 424 41 59 612 439 491 2223 60 2020 62 2702 40 461 2067 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2020 62 40 41 58 40 2223 60 2020 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2701 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 41 41 46 2466 40 2703 619 2703 631 424 41 59 612 439 491 2223 60 2020 62 2704 40 2018 60 2019 62 2271 41 619 2219 46 2232 614 1500 63 2469 40 2695 40 2271 41 41 58 2469 40 2695 40 2271 41 41 46 2233 40 2702 40 2271 41 41 59 612 439 491 2223 60 2020 62 2704 40 461 2067 41 619 2219 46 2232 614 1500 63 2469 40 2695 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 41 41 58 2469 40 2695 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 41 41 46 2233 40 2702 40 2067 41 41 59 612 439 491 2020 63 2705 40 2018 60 2019 62 2271 41 123 2360 46 2361 40 2271 44 2362 40 2271 41 41 59 490 2692 61 2701 40 2271 41 59 450 2692 614 424 63 424 58 2705 40 2692 41 59 125 612 439 491 2020 63 2705 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 490 2692 61 2701 40 2067 41 59 450 2692 614 424 63 424 58 2705 40 2692 41 59 125 612 439 491 2020 63 2705 40 2020 2692 41 123 2360 46 2557 40 2692 44 2362 40 2692 41 41 59 2360 46 2706 40 2113 44 648 41 59 2707 40 41 59 392 40 2692 46 2708 614 424 41 123 392 40 33 2021 46 2709 40 2692 46 2710 41 41 123 469 418 2711 40 2712 46 2713 40 2692 46 2710 46 2714 40 41 44 2129 40 41 44 2692 46 2715 46 2129 40 41 41 41 59 125 125 360 123 392 40 33 2023 46 2716 40 2692 46 2708 41 41 123 469 418 2717 40 2718 46 2719 40 2692 46 2708 44 2129 40 41 41 41 59 125 125 2692 46 2114 40 41 59 386 40 490 2270 398 2692 46 2720 41 123 392 40 2270 46 2721 631 424 41 123 2270 46 2721 46 2722 40 2692 41 59 392 40 2270 46 2721 46 2232 614 1500 41 123 2270 46 2721 61 424 59 125 125 125 450 40 2020 63 41 2068 46 2250 46 2723 40 2107 44 2692 41 59 125 612 439 491 2223 60 2020 62 2724 40 41 619 2035 631 424 63 2023 46 2232 614 1500 605 2021 46 2232 614 1500 63 2035 46 2724 40 41 58 2035 46 2724 40 41 46 2233 40 2699 40 41 41 58 2699 40 41 59 35 367 35 443 612 439 491 2024 63 2725 40 461 2067 44 2075 2726 44 2040 63 2727 44 2040 2071 41 123 2360 46 2557 40 2067 44 2362 40 2067 41 41 59 2360 46 2557 40 2726 44 2362 40 2726 41 41 59 450 2725 40 2067 44 2726 44 424 44 2727 44 2071 41 59 125 612 439 491 2024 63 2725 40 2512 2556 44 2040 2071 41 619 2725 40 2556 46 2558 40 41 44 2556 46 2728 40 41 44 2556 44 2071 44 2071 41 59 612 439 491 2024 63 2725 40 461 2067 44 2040 2071 41 123 2512 63 2729 59 392 40 2730 41 123 2729 61 2731 40 41 33 59 125 360 123 2729 61 2732 46 2733 40 2067 41 46 2734 40 41 59 392 40 2729 614 424 41 123 469 418 2735 40 2736 46 2737 40 2067 44 2129 40 41 41 41 59 125 125 450 2725 40 2729 44 2071 41 59 125 612 439 491 2024 63 2725 40 461 2067 44 2075 2726 44 2512 63 2556 44 2040 63 2727 44 2040 2071 41 123 2360 46 2557 40 2067 44 2362 40 2067 41 41 59 2360 46 2557 40 2726 44 2362 40 2726 41 41 59 2360 46 2738 40 2113 44 648 41 59 2739 40 41 59 490 2740 61 2264 40 2067 41 46 2741 40 41 59 392 40 2740 631 424 41 123 469 418 2742 40 2743 46 2744 40 2067 44 2129 40 41 44 40 40 2745 41 2740 46 2746 41 46 2129 40 41 41 41 59 125 392 40 2556 631 424 41 123 2726 61 2596 40 2067 44 2556 44 2727 631 424 41 633 2726 59 392 40 2556 46 2747 634 2748 40 2749 41 631 473 41 123 469 418 2750 40 2751 46 2752 40 2556 46 2753 44 2129 40 41 44 2556 46 2747 634 2754 40 41 41 41 59 125 125 360 392 40 2755 41 123 2556 61 2756 40 41 59 125 360 123 2556 61 2757 46 2758 40 2067 41 46 2741 40 41 59 125 392 40 2556 631 424 605 2726 631 2556 46 2728 40 41 605 2556 631 2759 40 41 41 123 392 40 2727 631 424 41 123 469 418 2760 40 2761 46 2762 40 2067 44 2129 40 41 44 2556 46 2728 40 41 46 2763 40 41 44 2726 46 2763 40 41 41 41 59 125 2726 61 2556 46 2728 40 41 59 125 490 2270 61 418 2024 40 2067 44 2726 44 2556 311 2764 44 2556 311 2765 44 467 44 2071 44 2727 41 59 2025 46 2766 40 2270 46 2767 44 2270 41 59 392 40 2068 46 2768 631 424 41 123 489 40 2068 46 2250 46 2769 40 41 41 123 2068 46 2250 46 2770 40 2270 46 2107 41 59 2068 46 2768 46 2771 40 2270 41 59 450 2270 59 125 125 450 40 2024 63 41 2068 46 2250 46 2772 40 2270 46 2107 41 634 2773 59 125 612 439 491 2024 63 2774 40 461 2067 41 619 2775 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 41 633 2035 634 2774 40 2067 41 59 612 439 491 2024 63 2775 40 461 2067 41 619 2025 46 2359 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 44 430 490 2270 41 63 2270 58 424 59 612 439 491 2223 60 2024 62 2260 40 41 619 2025 46 2357 59 612 439 491 2223 60 2024 62 2776 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2024 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2260 40 41 41 59 612 439 491 2223 60 2024 62 2777 40 461 2778 41 123 2360 46 2557 40 2778 44 2362 40 2778 41 41 59 450 2219 46 2232 614 1500 63 2449 46 2450 60 2024 62 40 41 58 40 2223 60 2024 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2775 40 2778 41 41 46 2466 40 2779 619 2779 631 424 41 59 125 612 439 491 2223 60 2024 62 2780 40 461 2778 41 619 2219 46 2232 614 1500 63 2469 40 2775 40 2778 41 41 58 2469 40 2775 40 2778 41 41 46 2233 40 2777 40 2778 41 41 59 612 439 491 2223 60 2024 62 2265 40 461 2778 41 619 2219 46 2232 614 1500 63 2469 40 2774 40 2778 41 41 58 2469 40 2774 40 2778 41 41 46 2233 40 2777 40 2778 41 41 59 612 439 491 2018 60 2024 62 63 2781 40 2018 60 461 62 2782 41 123 2360 46 2557 40 2782 44 2362 40 2782 41 41 59 490 2271 61 418 2030 60 2024 62 40 2782 46 2232 41 59 386 40 490 2778 398 2782 41 123 490 2270 61 2774 40 2778 41 59 392 40 2270 614 424 41 123 450 424 59 125 2271 46 2783 40 2270 41 59 125 450 2271 59 125 612 439 491 2024 63 2784 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 490 2270 61 2775 40 2067 41 59 450 2270 614 424 63 424 58 2784 40 2270 41 59 125 612 439 491 2024 63 2784 40 2024 2270 41 123 2360 46 2557 40 2270 44 2362 40 2270 41 41 59 2360 46 2785 40 2113 44 648 41 59 2786 40 41 59 392 40 2270 46 2787 631 467 41 123 469 418 2788 40 2789 46 2790 40 2270 46 2791 44 2129 40 41 44 2270 46 2787 46 2129 40 41 41 41 59 125 2792 40 2270 41 59 490 2793 61 2025 46 2794 40 2270 46 2795 41 59 2360 46 2785 40 2793 44 648 41 59 2270 46 2114 40 41 59 450 40 2024 63 41 2068 46 2250 46 2796 40 2107 44 2270 41 59 125 437 492 2797 40 2024 2270 41 123 490 2798 61 2270 46 2799 634 2800 40 41 59 392 40 2798 631 424 41 123 469 418 2801 40 2802 46 2803 40 2270 46 2804 44 2129 40 41 44 2798 46 2805 46 2806 40 41 41 41 59 125 490 2807 61 2270 46 2808 634 2800 40 41 59 392 40 2807 631 424 41 123 469 418 2809 40 2810 46 2811 40 2270 46 2812 44 2129 40 41 44 2807 46 2813 46 2814 40 41 44 2807 46 2815 46 2129 40 41 41 41 59 125 490 2816 61 2270 46 2817 634 2800 40 41 59 392 40 2816 631 424 41 123 469 418 2818 40 2819 46 2820 40 2270 46 2821 44 2129 40 41 44 2816 46 2822 46 2823 40 41 44 2816 46 2824 46 2129 40 41 41 41 59 125 125 612 439 491 2223 60 2024 62 2254 40 41 619 2035 631 424 63 2035 46 2254 40 41 46 2233 40 2025 46 2357 41 58 2025 46 2357 59 612 439 491 2047 2825 619 2826 46 2827 40 442 2048 44 467 44 457 2238 619 123 2238 46 2828 40 41 59 450 2238 46 2829 40 41 59 125 41 59 612 439 491 2052 60 2053 44 2054 62 2830 619 2826 46 2827 40 442 2055 44 467 44 457 2238 619 123 2238 46 2831 40 41 59 450 418 2832 40 41 46 2833 40 2238 41 59 125 41 59 612 439 491 2052 60 2053 44 2054 62 2834 619 2826 46 2827 40 442 2056 44 467 44 457 2238 619 123 2238 46 2835 40 41 59 450 418 2836 40 41 46 2837 40 2238 41 59 125 41 59 612 439 491 2052 60 2054 62 2838 619 2826 46 2827 40 442 2058 44 467 44 457 2238 619 123 2238 46 2839 40 41 59 450 418 2840 40 41 46 2841 40 2238 41 59 125 41 59 612 439 491 2052 60 2053 44 2054 62 2842 619 2826 46 2827 40 442 2057 44 467 44 457 2238 619 123 2238 46 2843 40 41 59 450 418 2844 40 41 46 2845 40 2238 41 59 125 41 59 612 439 491 2052 60 2059 44 2054 62 2846 619 2826 46 2827 40 442 2060 44 467 44 457 2238 619 123 2238 46 2847 40 41 59 450 418 2848 40 41 46 2849 40 2238 41 59 125 41 59 612 439 491 2052 60 2054 62 2850 619 2826 46 2827 40 442 2061 44 467 44 457 2238 619 123 2238 46 2851 40 41 59 450 418 2852 40 41 46 2853 40 2238 41 59 125 41 59 612 439 491 2052 60 2062 44 426 62 2854 619 2826 46 2827 40 442 2063 44 467 44 457 2238 619 123 2238 46 2855 40 41 59 490 2856 61 2238 46 2857 59 392 40 2856 614 424 41 123 490 2858 61 2238 46 2859 59 2856 61 2238 46 2857 59 392 40 2856 614 424 41 123 469 418 2860 40 2861 46 2862 40 2238 46 2129 40 41 41 41 59 125 125 490 2863 61 2864 46 2865 40 478 40 2062 41 44 648 41 59 450 2864 46 2866 60 2052 60 2062 44 426 640 40 2856 46 2867 40 418 2868 40 2238 44 2863 41 41 44 2863 41 46 2869 40 41 59 125 41 59 612 439 491 2018 60 2064 62 2870 619 2826 46 2827 40 442 2065 44 467 44 457 2238 619 123 2238 46 2871 40 41 59 450 2238 46 2254 40 41 46 2466 40 2872 619 2872 46 2873 40 41 41 46 2874 40 41 59 125 41 59 612 439 491 2018 60 2064 62 2875 619 2826 46 2827 40 442 2066 44 467 44 457 2238 619 123 2238 46 2876 40 41 59 450 2238 46 2254 40 41 46 2466 40 2877 619 2877 46 2878 40 41 41 46 2879 40 41 59 125 41 59 35 367 35 443 612 439 491 2028 2880 40 2512 2556 44 621 2040 2071 41 123 2360 46 2557 40 2556 44 2362 40 2556 41 41 59 2881 40 41 59 490 2067 61 2556 46 2558 40 41 59 490 2882 61 2264 40 2067 41 46 2883 40 41 59 392 40 2882 631 424 41 123 469 418 2884 40 2885 46 2886 40 2067 44 2129 40 41 44 40 40 2887 41 2882 46 2888 41 46 2129 40 41 41 41 59 125 2596 40 2067 44 2556 44 380 41 59 490 2889 61 418 2028 40 2067 44 2556 311 2890 44 2556 311 2891 44 467 44 2071 41 59 2029 91 2889 46 2892 93 61 2889 59 450 2889 59 125 612 439 491 2028 63 2893 40 461 2067 41 619 2894 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 41 633 2035 634 2893 40 2067 41 59 612 439 491 2024 63 2893 40 2512 2556 41 619 2774 40 2556 46 2558 40 41 41 59 612 439 491 2028 63 2894 40 461 2067 41 619 2029 46 2359 40 2360 46 2361 40 2067 44 2362 40 2067 41 41 44 430 490 2270 41 63 2270 58 424 59 612 439 491 2223 60 2028 62 2895 40 461 2778 41 123 2360 46 2557 40 2778 44 2362 40 2778 41 41 59 450 2219 46 2232 614 1500 63 2449 46 2450 60 2028 62 40 41 58 40 2223 60 2028 62 41 2224 40 41 46 2465 40 2452 619 2452 46 2894 40 2778 41 41 46 2466 40 2896 619 2896 631 424 41 59 125 612 439 491 2223 60 2028 62 2897 40 461 2778 41 619 2219 46 2232 614 1500 63 2469 40 2894 40 2778 41 41 58 2469 40 2894 40 2778 41 41 46 2233 40 2895 40 2778 41 41 59 612 439 491 2223 60 2028 62 2266 40 461 2778 41 619 2219 46 2232 614 1500 63 2469 40 2893 40 2778 41 41 58 2469 40 2893 40 2778 41 41 46 2233 40 2895 40 2778 41 41 59 612 439 491 2028 63 2898 40 461 2067 41 123 2360 46 2361 40 2067 44 2362 40 2067 41 41 59 490 2270 61 2893 40 2067 41 59 450 2270 614 424 63 424 58 2898 40 2270 41 59 125 612 439 491 2028 2898 40 2028 2270 41 123 2360 46 2557 40 2270 44 2362 40 2270 41 41 59 2360 46 2899 40 2113 44 648 41 59 2900 40 41 59 392 40 2270 46 2901 631 467 41 123 469 418 2902 40 2903 46 2904 40 2270 46 2905 44 2129 40 41 44 2270 46 2901 46 2129 40 41 41 41 59 125 490 2906 61 2029 46 2907 40 2270 46 2908 41 59 2360 46 2899 40 2906 44 648 41 59 2270 46 2114 40 41 59 450 2270 59 125 612 439 491 2223 60 2028 62 2256 40 41 619 2035 631 424 63 2029 46 2232 614 1500 63 2035 46 2256 40 41 58 2035 46 2256 40 41 46 2233 40 2029 46 2357 41 58 2029 46 2357 59 612 439 491 2223 60 2028 62 2261 40 41 619 2029 46 2357 59 612 439 491 2223 60 2028 62 2909 40 41 619 2219 46 2232 614 1500 63 2449 46 2450 60 2028 62 40 41 58 2224 40 41 46 2451 40 2452 619 2452 46 2261 40 41 41 59 35 367 35 443 612 439 431 2040 63 2910 40 461 2067 41 123 490 2911 61 2912 40 2067 41 59 450 2115 614 424 63 2911 58 2115 46 2910 40 2067 41 46 2150 40 2911 41 59 125 612 439 431 461 63 2913 40 461 2067 41 619 2068 46 2250 46 2914 40 2107 44 2067 41 59 35 367 35 443 612 439 491 2223 60 2915 60 461 44 426 63 640 2916 40 323 2917 61 380 41 123 392 40 2031 614 424 606 2031 46 2232 614 1500 41 123 450 2449 46 2450 60 2915 60 461 44 426 63 640 40 41 59 125 490 2918 61 418 2030 60 2919 60 461 44 426 63 640 40 41 59 490 2920 61 418 2919 60 461 44 2921 63 62 40 2014 46 2015 41 59 490 2271 61 2254 40 41 46 2233 60 2922 62 40 2257 40 41 41 46 2233 40 2258 40 41 41 46 2923 40 2924 619 2924 46 2925 41 59 386 40 490 2926 398 2031 41 123 490 2927 61 418 2919 60 461 44 426 63 62 40 2014 46 2015 41 59 2918 46 2928 40 2927 41 59 490 2076 61 2926 46 2929 40 41 59 392 40 2930 46 2931 40 2076 41 41 123 621 386 40 490 2932 398 2271 46 2357 41 123 2921 63 2933 61 424 59 392 40 2917 605 2932 407 2064 2270 605 33 2920 46 2359 40 2932 46 2925 44 430 2933 41 41 123 2933 61 2270 46 2934 40 41 46 2935 59 2920 91 2932 46 2925 93 61 2933 59 125 2932 46 2936 40 2937 58 380 44 2938 58 380 44 430 490 2556 44 430 2939 41 59 426 63 2125 61 424 59 464 40 2556 41 123 328 2940 2941 58 392 40 2932 46 2942 40 41 41 123 474 123 2125 61 2941 46 2943 40 2926 44 418 91 93 123 2932 46 2925 125 41 59 125 329 40 2944 41 123 621 125 125 360 123 2125 61 2941 46 2945 40 2926 41 59 125 325 59 328 2946 2947 58 2125 61 2947 46 2948 40 2926 41 59 325 59 328 424 58 344 59 125 2927 91 2932 46 2925 93 61 2933 614 424 63 2125 58 2933 46 2949 40 2125 41 59 125 125 360 123 621 386 40 490 2556 398 2076 46 2950 40 41 41 123 392 40 33 2271 46 2359 40 2556 46 2558 40 41 44 430 490 2951 41 41 123 344 59 125 2921 63 2952 61 424 59 392 40 2917 605 33 2920 46 2359 40 2951 46 2925 44 430 2952 41 41 123 392 40 2951 407 2019 2270 41 123 2952 61 2270 46 2953 40 41 46 2954 59 125 2920 91 2951 46 2925 93 61 2952 59 125 621 490 2125 61 40 40 2955 41 2556 41 46 2956 40 2926 41 59 2927 91 2951 46 2925 93 61 2952 614 424 63 2125 58 2952 46 2957 40 2125 41 59 125 125 125 450 2918 59 125 612 439 491 492 2958 40 2223 60 426 62 2959 41 123 2960 40 41 59 2031 633 61 418 2030 60 426 62 40 41 59 386 40 490 2961 398 2959 41 123 392 40 2962 631 2961 46 2963 40 41 605 2962 46 2964 40 2961 41 41 123 469 418 2965 40 2966 46 2967 40 2129 40 41 44 2961 46 2963 40 41 46 2968 40 41 41 41 59 125 2031 46 2969 40 2961 41 59 125 125 35 367 35 443 612 91 2216 93 439 491 2036 2970 40 41 619 2037 633 2068 46 2970 40 41 59 612 439 491 2036 63 2971 40 2036 63 2972 44 2040 2071 41 123 2973 40 41 59 392 40 2972 631 424 41 123 490 2974 61 40 323 63 41 2068 91 2975 46 2976 93 614 473 59 490 2977 61 2978 40 467 44 2972 46 2979 44 2974 41 59 392 40 2977 631 424 41 123 469 418 2980 40 2977 41 59 125 125 2037 61 2972 59 2044 61 2037 614 424 63 424 58 2071 46 2150 40 2044 41 59 450 2972 59 125 612 439 457 461 63 2981 40 2130 2238 44 2036 2125 44 323 2982 41 123 392 40 2982 41 123 392 40 2125 631 2036 46 2983 605 2125 631 2036 46 2984 41 123 450 2985 46 2986 40 2238 46 2129 40 41 44 2125 44 2362 40 2036 46 2983 41 44 2362 40 2036 46 2984 41 41 59 125 125 360 123 392 40 2125 631 2036 46 2987 605 33 478 40 2988 41 46 2989 40 2238 46 2990 41 41 123 450 2991 46 2992 40 2238 46 2129 40 41 44 2125 44 2362 40 2988 41 41 59 125 392 40 40 2125 614 2036 46 2993 606 2125 614 2036 46 2994 41 605 33 478 40 2995 41 46 2989 40 2238 46 2990 41 41 123 450 2996 46 2997 40 2238 46 2129 40 41 44 2125 44 2362 40 2995 41 41 59 125 125 450 424 59 125 612 439 491 2040 63 2998 40 41 619 2044 59 612 439 491 2999 63 3000 40 2999 63 3001 44 2040 2071 41 123 490 3002 61 3003 40 3001 41 59 392 40 3002 631 424 41 123 469 418 3004 40 3002 41 59 125 450 40 2999 63 41 3005 40 3006 46 3007 44 3001 44 2071 41 634 3008 59 125 612 439 491 461 63 3009 40 2999 63 3001 41 123 392 40 3001 631 424 605 40 3001 46 3010 46 2232 631 1501 606 3001 46 3010 91 1500 93 46 2075 631 3011 606 3001 46 3012 631 478 40 323 41 41 41 123 450 3013 46 3014 40 3001 44 2129 40 41 44 3011 41 59 125 450 424 59 125 612 439 491 2999 63 3015 40 41 619 40 2999 63 41 467 91 3016 46 3017 93 59 612 439 491 2040 63 3018 40 41 619 3019 40 3016 46 3017 41 634 3020 40 41 59 612 91 3021 93 439 491 2999 63 3022 40 2999 63 3023 44 2040 2071 41 619 40 2999 63 41 3024 40 3016 46 3025 44 3023 44 2071 41 634 3026 59 612 439 491 2024 63 3027 40 2024 63 2270 44 2040 2071 41 123 3028 40 2270 41 59 392 40 40 40 2270 614 424 605 2115 614 424 41 606 40 2270 631 424 605 33 2270 46 3029 46 3030 40 40 40 2130 41 467 41 46 3031 40 41 41 41 41 41 123 40 40 2002 41 467 41 46 3032 40 41 59 392 40 2115 614 424 41 123 386 40 490 3033 398 2224 40 41 41 123 40 40 2002 41 3033 41 46 3032 40 41 59 125 125 125 450 40 40 461 63 41 3034 40 3016 46 3035 44 2270 634 3036 44 2071 41 634 3026 41 614 2270 634 3036 63 2270 58 40 2024 63 41 40 40 2130 41 467 41 46 3037 40 41 59 125 437 492 3038 40 2024 63 2270 41 123 392 40 2270 631 424 41 123 392 40 2115 631 424 41 123 469 418 3039 40 3040 46 3041 40 2129 40 41 41 41 59 125 392 40 2270 46 3042 631 467 41 123 469 418 3043 40 3044 46 3045 40 2270 46 3046 44 2129 40 41 41 41 59 125 125 125 612 439 491 461 63 3047 40 41 123 392 40 2115 631 424 41 123 450 40 40 2130 41 467 41 46 2241 40 41 46 3047 40 41 59 125 450 40 461 63 41 467 91 3016 46 3048 93 59 125 612 439 457 426 63 3049 40 2130 2238 44 426 63 2125 41 123 392 40 2125 407 424 41 123 450 2125 59 125 490 3050 61 2238 46 3051 40 41 59 392 40 3050 407 424 41 123 469 418 3052 40 3053 46 3054 40 2238 46 2129 40 41 44 2238 46 2241 40 41 46 2129 40 41 41 41 59 125 392 40 33 3050 46 3055 46 3056 40 2125 41 41 123 469 418 3057 40 3058 46 3059 40 2125 44 3050 46 3060 44 3050 46 3055 41 41 59 125 450 2125 59 125 612 91 2216 93 439 491 2040 63 3061 40 41 619 3019 40 3016 46 3062 41 634 3020 40 41 59 612 439 491 323 3063 619 3020 40 41 614 2040 46 3064 605 3065 614 2068 46 2072 59 612 439 491 2049 63 3066 123 3067 619 3068 605 33 3065 46 3069 63 2826 46 2827 40 442 2050 44 467 44 457 2238 619 123 40 40 3070 41 2238 46 2068 41 46 3071 40 41 46 3072 46 3073 40 40 2130 41 2238 44 430 2238 46 2050 44 430 2238 46 2051 41 59 125 41 58 2050 59 3074 619 3075 40 2125 44 2040 46 3076 41 59 125 612 439 491 2049 63 3077 40 2049 63 3078 44 2040 2071 41 123 3079 40 41 59 2050 61 3078 59 392 40 2050 614 424 41 123 2045 61 424 59 125 360 123 3080 40 2071 41 59 125 450 3078 59 125 612 439 491 2040 63 3081 40 41 619 2045 59 437 492 3082 40 2040 2071 41 619 2045 61 2071 46 2150 40 2045 41 59 612 439 491 2049 63 3083 123 3084 619 2051 59 3085 619 3086 40 2125 44 2040 46 3087 41 59 125 612 439 491 2049 63 3088 40 2049 63 3078 44 2040 2071 41 123 3089 40 41 59 2051 61 3078 59 392 40 2051 614 424 41 123 2046 61 424 59 125 360 123 3090 40 2071 41 59 125 450 3078 59 125 612 439 491 2040 63 3091 40 41 619 2046 59 437 492 3092 40 2040 2071 41 619 2046 61 2071 46 2150 40 2046 41 59 35 367 35 443 612 3093 2003 46 2107 123 91 2216 93 3094 619 2107 59 125 612 3095 3096 46 2107 123 91 2216 93 3097 619 2107 59 125 612 3098 3099 46 2068 123 91 2216 93 3100 619 2068 59 125 612 3101 3102 46 2068 123 91 2216 93 3103 619 2068 59 125 612 3101 2002 46 2068 123 91 2216 93 3104 619 2068 59 125 612 3105 2003 46 2068 123 91 2216 93 3106 619 2068 59 125 612 3107 3108 46 2068 123 91 2216 93 3109 619 2068 59 125 612 2130 63 2130 46 2115 123 91 2216 93 3110 619 2035 59 125 612 2002 63 2002 46 2115 123 3111 619 2035 59 3112 619 2151 40 40 2000 63 41 2125 44 2040 46 3113 41 59 125 612 2003 63 2003 46 2115 123 91 2216 93 3114 619 2115 59 125 612 3115 63 3115 46 2115 123 91 2216 93 3116 619 2115 59 125 612 91 2216 93 492 2002 46 3027 40 2019 63 2270 41 619 3027 40 40 2024 63 41 2270 44 2040 46 3117 41 59 612 91 2216 93 3118 63 2003 46 3027 40 2019 63 2270 44 323 3119 41 619 3027 40 40 2024 63 41 2270 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 492 2002 46 2971 40 2036 63 2972 41 619 2971 40 2972 44 2040 46 3117 41 59 612 91 2216 93 2036 63 2003 46 2971 40 2036 63 2972 44 323 3119 41 619 2971 40 2972 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 492 2002 46 3000 40 2999 63 3001 41 619 3000 40 3001 44 2040 46 3117 41 59 612 91 2216 93 2999 63 2003 46 3000 40 2999 63 3001 44 323 3119 41 619 3000 40 3001 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 2223 60 2130 62 2130 46 2224 40 41 619 2224 40 41 59 612 91 2216 93 2223 60 2130 62 2130 46 2222 40 41 619 2222 40 41 59 612 91 2216 93 2223 60 3115 62 3115 46 2222 40 41 619 2222 40 41 59 612 2003 63 2003 46 2151 40 2003 63 2238 44 323 3119 41 619 2151 40 40 2000 63 41 2238 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 323 63 2003 46 2131 40 323 63 2132 44 323 3119 41 619 2131 40 2132 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3121 63 2002 46 2269 40 2018 60 3122 62 63 2271 41 619 2269 40 2271 634 2255 60 2024 62 40 41 46 3123 40 41 44 2040 46 3117 41 59 612 91 2216 93 3124 63 2003 46 2269 40 2018 60 3118 62 63 2271 44 323 3119 41 619 2269 40 2271 634 2255 60 2024 62 40 41 46 3123 40 41 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 2441 63 2130 46 2299 40 41 619 2299 40 41 59 612 91 2216 93 3121 63 2002 46 2299 40 41 619 2299 40 41 59 612 91 2216 93 3124 63 2003 46 2299 40 41 619 2299 40 41 59 612 91 2216 93 3125 63 3115 46 2299 40 41 619 2299 40 41 59 612 91 2216 93 3121 2002 46 2309 40 2018 60 3122 62 2271 41 619 2309 40 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 2040 46 3117 41 33 59 612 91 2216 93 3124 63 2003 46 2309 40 2018 60 3118 62 2271 44 323 3119 41 619 2309 40 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 2441 63 2130 46 2350 40 2018 60 2019 62 2271 41 619 2350 40 2271 41 59 612 91 2216 93 3121 63 2002 46 2350 40 2018 60 2019 62 2271 41 619 2350 40 2271 41 59 612 91 2216 93 3124 63 2003 46 2350 40 2018 60 2019 62 2271 41 619 2350 40 2271 41 59 612 91 2216 93 3125 63 3115 46 2350 40 2018 60 2019 62 2271 41 619 2350 40 2271 41 59 612 91 2216 93 2223 60 2441 62 2130 46 2356 40 41 619 2356 40 41 59 612 91 2216 93 2223 60 3125 62 3115 46 2356 40 41 619 2356 40 41 59 612 91 2216 93 2223 60 2441 62 2130 46 2400 40 41 619 2400 40 41 59 612 91 2216 93 2223 60 3121 62 2002 46 2400 40 41 619 2400 40 41 59 612 91 2216 93 2223 60 3124 62 2003 46 2400 40 41 619 2400 40 41 59 612 91 2216 93 2223 60 3125 62 3115 46 2400 40 41 619 2400 40 41 59 612 91 2216 93 3121 63 2002 46 2364 40 2018 60 2019 62 2271 41 619 2364 40 2271 41 59 612 91 2216 93 3124 63 2003 46 2364 40 2018 60 2019 62 2271 41 619 2364 40 2271 41 59 612 91 2216 93 3121 63 2002 46 2364 40 2441 2363 41 619 2364 40 40 2026 41 2363 41 59 612 91 2216 93 3124 63 2003 46 2364 40 2441 2363 41 619 2364 40 40 2026 41 2363 41 59 612 91 2216 93 3126 2002 46 2401 40 2018 60 3122 62 2271 44 3121 2402 44 2002 2403 41 619 2401 40 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 40 2026 41 2402 44 40 2000 41 2403 44 2040 46 3117 44 2040 46 3117 41 33 59 612 91 2216 93 3127 63 2003 46 2401 40 2018 60 3118 62 2271 44 3124 2402 44 2003 2403 44 323 3128 44 323 3119 41 619 2401 40 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 40 2026 41 2402 44 40 2000 41 2403 44 3128 63 3119 63 2040 46 3120 58 2040 46 3064 58 424 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3129 63 2130 46 2440 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 619 2440 40 2271 44 2402 44 2403 41 59 612 91 2216 93 3126 63 2002 46 2440 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 619 2440 40 2271 44 2402 44 2403 41 59 612 91 2216 93 3127 63 2003 46 2440 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 619 2440 40 2271 44 2402 44 2403 41 59 612 91 2216 93 3130 63 3115 46 2440 40 2018 60 2019 62 2271 44 2441 2402 44 2130 2403 41 619 2440 40 2271 44 2402 44 2403 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2437 40 2018 60 2019 62 2271 41 619 2437 40 2271 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2437 40 2018 60 2019 62 2271 41 619 2437 40 2271 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2453 40 2018 60 2019 62 2271 41 619 2453 40 2271 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2453 40 2018 60 2019 62 2271 41 619 2453 40 2271 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2235 40 41 619 2235 40 41 59 612 91 2216 93 2223 60 3126 62 2002 46 2235 40 41 619 2235 40 41 59 612 91 2216 93 2223 60 3127 62 2003 46 2235 40 41 619 2235 40 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2235 40 41 619 2235 40 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2448 40 41 619 2448 40 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2448 40 41 619 2448 40 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2236 40 41 619 2236 40 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2236 40 41 619 2236 40 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2505 40 41 619 2505 40 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2505 40 41 619 2505 40 41 59 612 91 2216 93 2223 60 3129 62 2130 46 2503 40 41 619 2503 40 41 59 612 91 2216 93 2223 60 3130 62 3115 46 2503 40 41 619 2503 40 41 59 612 91 2216 93 3127 63 2003 46 2470 40 2018 60 2019 62 2271 44 3124 2402 44 2003 2403 41 619 2470 40 2271 44 2402 44 2403 41 59 612 91 2216 93 3126 63 2002 46 2470 40 2018 60 2019 62 2271 44 3121 2402 44 2002 2403 41 619 2470 40 2271 44 2402 44 2403 41 59 612 91 2216 93 3126 63 2002 46 2470 40 3129 2419 41 619 2470 40 40 2007 41 2419 41 59 612 91 2216 93 3127 63 2003 46 2470 40 3129 2419 41 619 2470 40 40 2007 41 2419 41 59 612 91 2216 93 2223 60 3131 62 2130 46 2262 40 41 619 2262 40 41 59 612 91 2216 93 2223 60 3132 62 3115 46 2262 40 41 619 2262 40 41 59 612 91 2216 93 3131 63 2130 46 2559 40 461 2067 41 619 2559 40 2067 41 59 612 91 2216 93 3132 63 3115 46 2559 40 461 2067 41 619 2559 40 2067 41 59 612 91 2216 93 2223 60 3131 62 2130 46 2561 40 41 619 2561 40 41 59 612 91 2216 93 2223 60 3131 62 2130 46 2257 40 41 619 2257 40 41 59 612 91 2216 93 2223 60 3132 62 3115 46 2257 40 41 619 2257 40 41 59 612 91 2216 93 3133 2002 46 2567 40 461 2067 44 2512 63 2556 44 2002 2568 44 323 2569 44 323 2570 41 619 2567 40 2067 44 2556 44 40 2000 41 2568 44 2569 44 2570 44 2040 46 3117 41 33 59 612 91 2216 93 3134 63 2003 46 2567 40 461 2067 44 2512 63 2556 44 2003 2568 44 323 2569 44 323 2570 44 323 3119 41 619 2567 40 2067 44 2556 44 40 2000 41 2568 44 2569 44 2570 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3135 63 2130 46 2611 40 2512 2556 41 619 2611 40 2556 41 59 612 91 2216 93 3135 63 2130 46 2611 40 461 2067 41 619 2611 40 2067 41 59 612 91 2216 93 3133 63 2002 46 2611 40 461 2067 41 619 2611 40 2067 41 59 612 91 2216 93 3134 63 2003 46 2611 40 461 2067 41 619 2611 40 2067 41 59 612 91 2216 93 3136 63 3115 46 2611 40 461 2067 41 619 2611 40 2067 41 59 612 91 2216 93 3135 63 2130 46 2613 40 461 2067 41 619 2613 40 2067 41 59 612 91 2216 93 2223 60 3135 62 2130 46 2263 40 41 619 2263 40 41 59 612 91 2216 93 2223 60 3135 62 2130 46 2614 40 41 619 2614 40 41 59 612 91 2216 93 2223 60 3135 62 2130 46 2258 40 41 619 2258 40 41 59 612 91 2216 93 2223 60 3133 62 2002 46 2258 40 41 619 2258 40 41 59 612 91 2216 93 2223 60 3134 62 2003 46 2258 40 41 619 2258 40 41 59 612 91 2216 93 2223 60 3136 62 3115 46 2258 40 41 619 2258 40 41 59 612 91 2216 93 3133 63 2002 46 2618 40 3135 2560 41 619 2618 40 40 2016 41 2560 41 59 612 91 2216 93 3134 63 2003 46 2618 40 3135 2560 41 619 2618 40 40 2016 41 2560 41 59 612 91 2216 93 3137 2002 46 2644 40 2018 60 3122 62 2271 41 619 2644 40 2271 311 2018 60 2024 62 633 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 2040 46 3117 41 33 59 612 91 2216 93 3137 2002 46 2644 40 2018 60 3122 62 2271 44 461 2067 41 619 2644 40 2271 311 2018 60 2024 62 633 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 2067 44 2040 46 3117 41 33 59 612 91 2216 93 3138 63 2003 46 2644 40 2018 60 3118 62 2271 44 323 3119 41 619 2644 40 2271 311 2018 60 2024 62 633 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3138 63 2003 46 2644 40 2018 60 3118 62 2271 44 461 2067 44 323 3119 41 619 2644 40 2271 311 2018 60 2024 62 633 2271 46 2255 60 2024 62 40 41 46 3123 40 41 44 2067 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3139 63 2130 46 2695 40 2018 60 2019 62 2271 41 619 2695 40 2271 41 59 612 91 2216 93 3137 63 2002 46 2695 40 2018 60 2019 62 2271 41 619 2695 40 2271 41 59 612 91 2216 93 3138 63 2003 46 2695 40 2018 60 2019 62 2271 41 619 2695 40 2271 41 59 612 91 2216 93 3140 63 3115 46 2695 40 2018 60 2019 62 2271 41 619 2695 40 2271 41 59 612 91 2216 93 3139 63 2130 46 2695 40 461 2067 41 619 2695 40 2067 41 59 612 91 2216 93 3137 63 2002 46 2695 40 461 2067 41 619 2695 40 2067 41 59 612 91 2216 93 3138 63 2003 46 2695 40 461 2067 41 619 2695 40 2067 41 59 612 91 2216 93 3140 63 3115 46 2695 40 461 2067 41 619 2695 40 2067 41 59 612 91 2216 93 2223 60 3139 62 2130 46 2699 40 41 619 2699 40 41 59 612 91 2216 93 2223 60 3140 62 3115 46 2699 40 41 619 2699 40 41 59 612 91 2216 93 2223 60 3139 62 2130 46 2700 40 41 619 2700 40 41 59 612 91 2216 93 2223 60 3140 62 3115 46 2700 40 41 619 2700 40 41 59 612 91 2216 93 2223 60 3139 62 2130 46 2724 40 41 619 2724 40 41 59 612 91 2216 93 2223 60 3137 62 2002 46 2724 40 41 619 2724 40 41 59 612 91 2216 93 2223 60 3138 62 2003 46 2724 40 41 619 2724 40 41 59 612 91 2216 93 2223 60 3140 62 3115 46 2724 40 41 619 2724 40 41 59 612 91 2216 93 3138 63 2003 46 2705 40 2018 60 2019 62 2271 41 619 2705 40 2271 41 59 612 91 2216 93 3137 63 2002 46 2705 40 2018 60 2019 62 2271 41 619 2705 40 2271 41 59 612 91 2216 93 3137 63 2002 46 2705 40 3139 2692 41 619 2705 40 40 2020 41 2692 41 59 612 91 2216 93 3138 63 2003 46 2705 40 3139 2692 41 619 2705 40 40 2020 41 2692 41 59 612 91 2216 93 3122 2002 46 2725 40 461 2067 41 619 2725 40 2067 44 2040 46 3117 41 33 59 612 91 2216 93 3118 63 2003 46 2725 40 461 2067 44 323 3119 41 619 2725 40 2067 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3122 2002 46 2725 40 461 2067 44 2075 2726 41 619 2725 40 2067 44 2726 44 2040 46 3117 44 2040 46 3117 41 33 59 612 91 2216 93 3118 63 2003 46 2725 40 461 2067 44 2075 2726 44 323 3141 44 323 3119 41 619 2725 40 2067 44 2726 44 3141 63 3119 63 2040 46 3120 58 2040 46 3064 58 424 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3122 2002 46 2725 40 461 2067 44 2075 2726 44 2512 63 2556 41 619 2725 40 2067 44 2726 44 2556 44 2040 46 3117 44 2040 46 3117 41 33 59 612 91 2216 93 3118 63 2003 46 2725 40 461 2067 44 2075 2726 44 2512 63 2556 44 323 3141 44 323 3119 41 619 2725 40 2067 44 2726 44 2556 44 3141 63 3119 63 2040 46 3120 58 2040 46 3064 58 424 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 2019 63 2130 46 2775 40 461 2067 41 619 2775 40 2067 41 59 612 91 2216 93 2064 63 3115 46 2775 40 461 2067 41 619 2775 40 2067 41 59 612 91 2216 93 2018 60 2019 62 63 2130 46 2781 40 2018 60 461 62 2782 41 619 2781 40 2782 41 59 612 91 2216 93 2019 63 2130 46 2774 40 461 2067 41 619 2774 40 2067 41 59 612 91 2216 93 3122 63 2002 46 2774 40 461 2067 41 619 2774 40 2067 41 59 612 91 2216 93 3118 63 2003 46 2774 40 461 2067 41 619 2774 40 2067 41 59 612 91 2216 93 2064 63 3115 46 2774 40 461 2067 41 619 2774 40 2067 41 59 612 91 2216 93 2223 60 2019 62 2130 46 2260 40 41 619 2260 40 41 59 612 91 2216 93 2223 60 2064 62 3115 46 2260 40 41 619 2260 40 41 59 612 91 2216 93 2223 60 2019 62 2130 46 2776 40 41 619 2776 40 41 59 612 91 2216 93 2223 60 2019 62 2130 46 2254 40 41 619 2254 40 41 59 612 91 2216 93 2223 60 3122 62 2002 46 2254 40 41 619 2254 40 41 59 612 91 2216 93 2223 60 3118 62 2003 46 2254 40 41 619 2254 40 41 59 612 91 2216 93 2223 60 2064 62 3115 46 2254 40 41 619 2254 40 41 59 612 91 2216 93 2223 60 2064 62 3115 46 3142 40 41 619 2870 59 612 91 2216 93 2223 60 2064 62 3115 46 3143 40 41 619 2875 59 612 91 2216 93 3122 63 2002 46 2784 40 461 2067 41 619 2784 40 2067 41 59 612 91 2216 93 3118 63 2003 46 2784 40 461 2067 41 619 2784 40 2067 41 59 612 91 2216 93 3122 63 2002 46 2784 40 2019 2270 41 619 2784 40 40 2024 41 2270 41 59 612 91 2216 93 3118 63 2003 46 2784 40 2019 2270 41 619 2784 40 40 2024 41 2270 41 59 612 91 2216 93 3144 2002 46 2880 40 2512 2556 41 619 2880 40 2556 44 2040 46 3117 41 59 612 91 2216 93 3145 2003 46 2880 40 2512 2556 44 323 3119 41 619 2880 40 2556 44 3119 63 2040 46 3120 58 2040 46 3064 41 59 612 91 2216 93 3146 63 2130 46 2893 40 461 2067 41 619 2893 40 2067 41 59 612 91 2216 93 3144 63 2002 46 2893 40 461 2067 41 619 2893 40 2067 41 59 612 91 2216 93 3145 63 2003 46 2893 40 461 2067 41 619 2893 40 2067 41 59 612 91 2216 93 3147 63 3115 46 2893 40 461 2067 41 619 2893 40 2067 41 59 612 91 2216 93 2223 60 3146 62 2130 46 2261 40 41 619 2261 40 41 59 612 91 2216 93 2223 60 3147 62 3115 46 2261 40 41 619 2261 40 41 59 612 91 2216 93 2223 60 3146 62 2130 46 2909 40 41 619 2909 40 41 59 612 91 2216 93 2223 60 3146 62 2130 46 2256 40 41 619 2256 40 41 59 612 91 2216 93 2223 60 3144 62 2002 46 2256 40 41 619 2256 40 41 59 612 91 2216 93 2223 60 3145 62 2003 46 2256 40 41 619 2256 40 41 59 612 91 2216 93 2223 60 3147 62 3115 46 2256 40 41 619 2256 40 41 59 612 91 2216 93 3144 63 2002 46 2898 40 3146 2270 41 619 2898 40 40 2028 41 2270 41 59 612 91 2216 93 3145 63 2003 46 2898 40 3146 2270 41 619 2898 40 40 2028 41 2270 41 59 612 91 2216 93 3144 63 2002 46 2898 40 461 2067 41 619 2898 40 2067 41 59 612 91 2216 93 3145 63 2003 46 2898 40 461 2067 41 619 2898 40 2067 41 59 35 367 437 457 2223 60 3148 62 2469 60 3148 62 40 3148 63 3149 41 3150 3148 58 334 619 3149 614 424 63 2449 46 2450 60 3148 62 40 41 58 418 91 93 123 3149 125 59 612 439 334 3151 123 612 439 3151 40 2000 2238 44 3152 63 2271 44 2030 60 3153 62 63 3154 44 2030 60 40 3155 44 2040 63 41 62 63 3156 44 2030 60 3157 62 63 3158 44 2030 60 3159 62 63 3160 44 2030 60 3161 62 63 3162 41 123 2000 61 2238 59 3163 61 2271 633 418 3152 40 424 44 424 44 424 44 424 41 59 392 40 3154 631 424 41 123 3163 46 3164 40 3154 41 59 125 392 40 3156 631 424 41 123 3163 46 3165 40 3156 41 59 125 392 40 3158 631 424 41 123 3163 46 3166 40 3158 41 59 125 3167 61 3160 59 3168 61 3162 59 125 437 2000 2000 123 91 2216 93 3169 59 125 437 3152 3170 123 91 2216 93 3171 59 125 437 2030 60 3159 62 63 3172 123 91 2216 93 3173 59 125 437 2030 60 3161 62 63 3174 123 91 2216 93 3175 59 125 612 439 491 492 3176 40 2038 3177 41 123 3177 46 3178 40 2000 41 59 386 40 490 3179 398 2000 46 3180 40 41 41 123 3177 46 3181 40 3179 44 2000 46 3182 40 3179 41 33 46 3026 41 59 125 392 40 2000 46 2043 631 424 41 123 490 3183 61 2000 46 2035 59 392 40 3183 634 2113 614 380 41 123 3183 61 2000 46 2068 46 3184 40 3183 41 59 125 3177 46 3185 46 2151 40 3183 44 2000 46 2043 46 3026 41 59 125 392 40 2000 46 2042 631 424 41 123 3177 46 3186 46 2131 40 2000 46 2116 44 2000 46 2042 46 3026 41 59 125 392 40 2000 46 2044 631 424 41 123 3177 46 3187 46 2971 40 2000 46 2970 40 41 44 2000 46 2044 46 3026 41 59 125 392 40 3174 631 424 41 123 386 40 490 3188 398 3174 41 123 3188 46 3176 40 3177 41 59 125 125 3170 46 3176 40 3177 41 59 392 40 3172 631 424 41 123 386 40 490 3189 398 3172 41 123 3189 46 3176 40 41 59 125 125 392 40 2000 46 2045 631 424 41 123 3177 46 3190 46 3077 40 3191 40 2000 46 3066 44 3177 46 3190 41 44 2000 46 2045 46 3026 41 59 125 392 40 2000 46 2046 631 424 41 123 3177 46 3192 46 3088 40 3193 40 2000 46 3083 44 3177 46 3192 41 44 2000 46 2046 46 3026 41 59 125 490 3194 61 2000 46 2031 59 392 40 3194 631 424 41 123 3177 46 3195 46 2958 40 3194 41 59 125 125 437 457 2049 63 3196 40 2049 63 3197 44 2000 2238 41 619 3197 634 3198 40 3197 46 3199 46 2465 40 3200 619 3196 40 3200 44 2238 41 41 46 3123 40 41 41 59 437 457 3201 3196 40 3201 3202 44 2000 2238 41 619 3202 46 3198 40 3202 46 3203 46 2465 40 2270 619 40 2238 46 2774 40 2270 46 3204 41 633 2238 46 2893 40 2270 46 3204 41 633 2238 46 2555 40 2270 46 3204 41 633 40 3205 63 41 2238 46 2611 40 2270 46 3204 41 41 33 41 46 3206 40 41 41 59 125 612 439 491 3207 3207 619 418 40 40 41 619 40 40 2130 41 467 41 46 2243 40 41 44 40 41 619 40 40 2130 41 467 41 46 2243 40 2244 46 3208 41 41 59 125 
69680,C#,"public class InternalPropertyBuilder : InternalPropertyBaseBuilder<Property>, IConventionPropertyBuilder
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public InternalPropertyBuilder(Property property, InternalModelBuilder modelBuilder)
        : base(property, modelBuilder)
    {
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? IsRequired(bool? required, ConfigurationSource configurationSource)
    {
        if (configurationSource != ConfigurationSource.Explicit
            && !CanSetIsRequired(required, configurationSource))
        {
            return null;
        }

        if (required == false)
        {
            using (Metadata.DeclaringEntityType.Model.DelayConventions())
            {
                foreach (var key in Metadata.GetContainingKeys().ToList())
                {
                    if (configurationSource == ConfigurationSource.Explicit
                        && key.GetConfigurationSource() == ConfigurationSource.Explicit)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.KeyPropertyCannotBeNullable(
                                Metadata.Name, Metadata.DeclaringEntityType.DisplayName(), key.Properties.Format()));
                    }

                    var removed = key.DeclaringEntityType.Builder.HasNoKey(key, configurationSource);
                    Check.DebugAssert(removed != null, ""removed is null"");
                }

                Metadata.SetIsNullable(true, configurationSource);
            }
        }
        else
        {
            Metadata.SetIsNullable(!required, configurationSource);
        }

        return this;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetIsRequired(bool? required, ConfigurationSource? configurationSource)
        => ((configurationSource.HasValue
                    && configurationSource.Value.Overrides(Metadata.GetIsNullableConfigurationSource()))
                || (Metadata.IsNullable == !required))
            && (required != false
                || (Metadata.ClrType.IsNullableType()
                    && Metadata.GetContainingKeys().All(k => configurationSource.Overrides(k.GetConfigurationSource()))));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? ValueGenerated(ValueGenerated? valueGenerated, ConfigurationSource configurationSource)
    {
        if (CanSetValueGenerated(valueGenerated, configurationSource))
        {
            Metadata.SetValueGenerated(valueGenerated, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetValueGenerated(ValueGenerated? valueGenerated, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetValueGeneratedConfigurationSource())
            || Metadata.ValueGenerated == valueGenerated;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? IsConcurrencyToken(bool? concurrencyToken, ConfigurationSource configurationSource)
    {
        if (CanSetIsConcurrencyToken(concurrencyToken, configurationSource))
        {
            Metadata.SetIsConcurrencyToken(concurrencyToken, configurationSource);
            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetIsConcurrencyToken(bool? concurrencyToken, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetIsConcurrencyTokenConfigurationSource())
            || Metadata.IsConcurrencyToken == concurrencyToken;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public new virtual InternalPropertyBuilder? HasField(string? fieldName, ConfigurationSource configurationSource)
        => (InternalPropertyBuilder?)base.HasField(fieldName, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public new virtual InternalPropertyBuilder? HasField(FieldInfo? fieldInfo, ConfigurationSource configurationSource)
        => (InternalPropertyBuilder?)base.HasField(fieldInfo, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public new virtual InternalPropertyBuilder? UsePropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        ConfigurationSource configurationSource)
        => (InternalPropertyBuilder?)base.UsePropertyAccessMode(propertyAccessMode, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasMaxLength(int? maxLength, ConfigurationSource configurationSource)
    {
        if (CanSetMaxLength(maxLength, configurationSource))
        {
            Metadata.SetMaxLength(maxLength, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetMaxLength(int? maxLength, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetMaxLengthConfigurationSource())
            || Metadata.GetMaxLength() == maxLength;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasPrecision(int? precision, ConfigurationSource configurationSource)
    {
        if (CanSetPrecision(precision, configurationSource))
        {
            Metadata.SetPrecision(precision, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetPrecision(int? precision, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetPrecisionConfigurationSource())
            || Metadata.GetPrecision() == precision;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasScale(int? scale, ConfigurationSource configurationSource)
    {
        if (CanSetScale(scale, configurationSource))
        {
            Metadata.SetScale(scale, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetScale(int? scale, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetScaleConfigurationSource())
            || Metadata.GetScale() == scale;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? IsUnicode(bool? unicode, ConfigurationSource configurationSource)
    {
        if (CanSetIsUnicode(unicode, configurationSource))
        {
            Metadata.SetIsUnicode(unicode, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetIsUnicode(bool? unicode, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetIsUnicodeConfigurationSource())
            || Metadata.IsUnicode() == unicode;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? BeforeSave(PropertySaveBehavior? behavior, ConfigurationSource configurationSource)
    {
        if (CanSetBeforeSave(behavior, configurationSource))
        {
            Metadata.SetBeforeSaveBehavior(behavior, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetBeforeSave(PropertySaveBehavior? behavior, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetBeforeSaveBehaviorConfigurationSource())
            || Metadata.GetBeforeSaveBehavior() == behavior;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? AfterSave(PropertySaveBehavior? behavior, ConfigurationSource configurationSource)
    {
        if (CanSetAfterSave(behavior, configurationSource))
        {
            Metadata.SetAfterSaveBehavior(behavior, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetAfterSave(PropertySaveBehavior? behavior, ConfigurationSource? configurationSource)
        => (configurationSource.Overrides(Metadata.GetAfterSaveBehaviorConfigurationSource())
                && (behavior == null
                    || Metadata.CheckAfterSaveBehavior(behavior.Value) == null))
            || Metadata.GetAfterSaveBehavior() == behavior;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasValueGenerator(
        Type? valueGeneratorType,
        ConfigurationSource configurationSource)
    {
        if (valueGeneratorType == null)
        {
            return HasValueGenerator((Func<IProperty, IEntityType, ValueGenerator>?)null, configurationSource);
        }

        if (!typeof(ValueGenerator).IsAssignableFrom(valueGeneratorType))
        {
            throw new ArgumentException(
                CoreStrings.BadValueGeneratorType(valueGeneratorType.ShortDisplayName(), typeof(ValueGenerator).ShortDisplayName()));
        }

        return HasValueGenerator(
            (_, _)
                =>
            {
                try
                {
                    return (ValueGenerator)Activator.CreateInstance(valueGeneratorType)!;
                }
                catch (Exception e)
                {
                    throw new InvalidOperationException(
                        CoreStrings.CannotCreateValueGenerator(
                            valueGeneratorType.ShortDisplayName(), nameof(PropertyBuilder.HasValueGenerator)), e);
                }
            }, configurationSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasValueGenerator(
        Func<IProperty, IEntityType, ValueGenerator>? factory,
        ConfigurationSource configurationSource)
    {
        if (CanSetValueGenerator(factory, configurationSource))
        {
            Metadata.SetValueGeneratorFactory(factory, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasValueGeneratorFactory(
        Type? factory,
        ConfigurationSource configurationSource)
    {
        if (CanSetValueGeneratorFactory(factory, configurationSource))
        {
            Metadata.SetValueGeneratorFactory(factory, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetValueGenerator(
        Func<IProperty, IEntityType, ValueGenerator>? factory,
        ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetValueGeneratorFactoryConfigurationSource())
            || (Metadata[CoreAnnotationNames.ValueGeneratorFactoryType] == null
                && (Func<IProperty, IEntityType, ValueGenerator>?)Metadata[CoreAnnotationNames.ValueGeneratorFactory] == factory);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetValueGeneratorFactory(
        Type? factory,
        ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetValueGeneratorFactoryConfigurationSource())
            || (Metadata[CoreAnnotationNames.ValueGeneratorFactory] == null
                && (Type?)Metadata[CoreAnnotationNames.ValueGeneratorFactoryType] == factory);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasConversion(ValueConverter? converter, ConfigurationSource configurationSource)
    {
        if (CanSetConversion(converter, configurationSource))
        {
            Metadata.SetProviderClrType(null, configurationSource);
            Metadata.SetValueConverter(converter, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetConversion(
        ValueConverter? converter,
        ConfigurationSource? configurationSource)
        => (configurationSource == ConfigurationSource.Explicit
                || (configurationSource.Overrides(Metadata.GetValueConverterConfigurationSource())
                    && Metadata.CheckValueConverter(converter) == null)
                || (Metadata[CoreAnnotationNames.ValueConverterType] == null
                    && (ValueConverter?)Metadata[CoreAnnotationNames.ValueConverter] == converter))
            && configurationSource.Overrides(Metadata.GetProviderClrTypeConfigurationSource());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasConversion(Type? providerClrType, ConfigurationSource configurationSource)
    {
        if (CanSetConversion(providerClrType, configurationSource))
        {
            Metadata.SetValueConverter((ValueConverter?)null, configurationSource);
            Metadata.SetProviderClrType(providerClrType, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetConversion(Type? providerClrType, ConfigurationSource? configurationSource)
        => (configurationSource.Overrides(Metadata.GetProviderClrTypeConfigurationSource())
                || Metadata.GetProviderClrType() == providerClrType)
            && configurationSource.Overrides(Metadata.GetValueConverterConfigurationSource());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasConverter(Type? converterType, ConfigurationSource configurationSource)
    {
        if (CanSetConverter(converterType, configurationSource))
        {
            Metadata.SetProviderClrType(null, configurationSource);
            Metadata.SetValueConverter(converterType, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetConverter(Type? converterType, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetValueConverterConfigurationSource())
            || (Metadata[CoreAnnotationNames.ValueConverter] == null
                && (Type?)Metadata[CoreAnnotationNames.ValueConverterType] == converterType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasTypeMapping(
        CoreTypeMapping? typeMapping,
        ConfigurationSource configurationSource)
    {
        if (CanSetTypeMapping(typeMapping, configurationSource))
        {
            Metadata.SetTypeMapping(typeMapping, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetTypeMapping(CoreTypeMapping? typeMapping, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetTypeMappingConfigurationSource())
            || Metadata.TypeMapping == typeMapping;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasValueComparer(
        ValueComparer? comparer,
        ConfigurationSource configurationSource)
    {
        if (CanSetValueComparer(comparer, configurationSource))
        {
            Metadata.SetValueComparer(comparer, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetValueComparer(ValueComparer? comparer, ConfigurationSource? configurationSource)
    {
        if (configurationSource.Overrides(Metadata.GetValueComparerConfigurationSource()))
        {
            var errorString = Metadata.CheckValueComparer(comparer);
            if (errorString != null)
            {
                if (configurationSource == ConfigurationSource.Explicit)
                {
                    throw new InvalidOperationException(errorString);
                }

                return false;
            }

            return true;
        }

        return Metadata[CoreAnnotationNames.ValueComparerType] == null
            && Metadata[CoreAnnotationNames.ValueComparer] == comparer;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasValueComparer(
        Type? comparerType,
        ConfigurationSource configurationSource)
    {
        if (CanSetValueComparer(comparerType, configurationSource))
        {
            Metadata.SetValueComparer(comparerType, configurationSource);

            return this;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetValueComparer(Type? comparerType, ConfigurationSource? configurationSource)
        => configurationSource.Overrides(Metadata.GetValueComparerConfigurationSource())
            || (Metadata[CoreAnnotationNames.ValueComparer] == null
                && (Type?)Metadata[CoreAnnotationNames.ValueComparerType] == comparerType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? HasKeyValueComparer(
        ValueComparer? comparer,
        ConfigurationSource configurationSource)
        => HasValueComparer(comparer, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool CanSetKeyValueComparer(ValueComparer? comparer, ConfigurationSource? configurationSource)
        => CanSetValueComparer(comparer, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalPropertyBuilder? Attach(InternalEntityTypeBuilder entityTypeBuilder)
    {
        var newProperty = entityTypeBuilder.Metadata.FindProperty(Metadata.Name);
        InternalPropertyBuilder? newPropertyBuilder;
        var configurationSource = Metadata.GetConfigurationSource();
        var typeConfigurationSource = Metadata.GetTypeConfigurationSource();
        if (newProperty != null
            && (newProperty.GetConfigurationSource().Overrides(configurationSource)
                || newProperty.GetTypeConfigurationSource().Overrides(typeConfigurationSource)
                || (Metadata.ClrType == newProperty.ClrType
                    && Metadata.GetIdentifyingMemberInfo()?.Name == newProperty.GetIdentifyingMemberInfo()?.Name)))
        {
            newPropertyBuilder = newProperty.Builder;
            newProperty.UpdateConfigurationSource(configurationSource);
            if (typeConfigurationSource.HasValue)
            {
                newProperty.UpdateTypeConfigurationSource(typeConfigurationSource.Value);
            }
        }
        else
        {
            var identifyingMemberInfo = Metadata.GetIdentifyingMemberInfo();

            newPropertyBuilder = Metadata.IsIndexerProperty()
                ? entityTypeBuilder.IndexerProperty(Metadata.ClrType, Metadata.Name, configurationSource)
                : identifyingMemberInfo == null
                    ? entityTypeBuilder.Property(
                        Metadata.ClrType, Metadata.Name, Metadata.GetTypeConfigurationSource(), configurationSource)
                    : entityTypeBuilder.Property(identifyingMemberInfo, configurationSource);

            if (newPropertyBuilder is null)
            {
                return null;
            }
        }

        if (newProperty == Metadata)
        {
            return newPropertyBuilder;
        }

        newPropertyBuilder.MergeAnnotationsFrom(Metadata);

        var oldBeforeSaveBehaviorConfigurationSource = Metadata.GetBeforeSaveBehaviorConfigurationSource();
        if (oldBeforeSaveBehaviorConfigurationSource.HasValue)
        {
            newPropertyBuilder.BeforeSave(
                Metadata.GetBeforeSaveBehavior(),
                oldBeforeSaveBehaviorConfigurationSource.Value);
        }

        var oldAfterSaveBehaviorConfigurationSource = Metadata.GetAfterSaveBehaviorConfigurationSource();
        if (oldAfterSaveBehaviorConfigurationSource.HasValue)
        {
            newPropertyBuilder.AfterSave(
                Metadata.GetAfterSaveBehavior(),
                oldAfterSaveBehaviorConfigurationSource.Value);
        }

        var oldIsNullableConfigurationSource = Metadata.GetIsNullableConfigurationSource();
        if (oldIsNullableConfigurationSource.HasValue)
        {
            newPropertyBuilder.IsRequired(!Metadata.IsNullable, oldIsNullableConfigurationSource.Value);
        }

        var oldIsConcurrencyTokenConfigurationSource = Metadata.GetIsConcurrencyTokenConfigurationSource();
        if (oldIsConcurrencyTokenConfigurationSource.HasValue)
        {
            newPropertyBuilder.IsConcurrencyToken(
                Metadata.IsConcurrencyToken,
                oldIsConcurrencyTokenConfigurationSource.Value);
        }

        var oldValueGeneratedConfigurationSource = Metadata.GetValueGeneratedConfigurationSource();
        if (oldValueGeneratedConfigurationSource.HasValue)
        {
            newPropertyBuilder.ValueGenerated(Metadata.ValueGenerated, oldValueGeneratedConfigurationSource.Value);
        }

        var oldPropertyAccessModeConfigurationSource = Metadata.GetPropertyAccessModeConfigurationSource();
        if (oldPropertyAccessModeConfigurationSource.HasValue)
        {
            newPropertyBuilder.UsePropertyAccessMode(
                ((IReadOnlyProperty)Metadata).GetPropertyAccessMode(), oldPropertyAccessModeConfigurationSource.Value);
        }

        var oldFieldInfoConfigurationSource = Metadata.GetFieldInfoConfigurationSource();
        if (oldFieldInfoConfigurationSource.HasValue
            && newPropertyBuilder.CanSetField(Metadata.FieldInfo, oldFieldInfoConfigurationSource))
        {
            newPropertyBuilder.HasField(Metadata.FieldInfo, oldFieldInfoConfigurationSource.Value);
        }

        var oldTypeMappingConfigurationSource = Metadata.GetTypeMappingConfigurationSource();
        if (oldTypeMappingConfigurationSource.HasValue
            && newPropertyBuilder.CanSetTypeMapping(Metadata.TypeMapping, oldTypeMappingConfigurationSource))
        {
            newPropertyBuilder.HasTypeMapping(Metadata.TypeMapping, oldTypeMappingConfigurationSource.Value);
        }

        return newPropertyBuilder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBase IConventionPropertyBaseBuilder.Metadata
    {
        [DebuggerStepThrough]
        get => Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionProperty IConventionPropertyBuilder.Metadata
    {
        [DebuggerStepThrough]
        get => Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.IsRequired(bool? required, bool fromDataAnnotation)
        => IsRequired(required, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetIsRequired(bool? required, bool fromDataAnnotation)
        => CanSetIsRequired(required, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.ValueGenerated(ValueGenerated? valueGenerated, bool fromDataAnnotation)
        => ValueGenerated(valueGenerated, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetValueGenerated(ValueGenerated? valueGenerated, bool fromDataAnnotation)
        => CanSetValueGenerated(
            valueGenerated, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.IsConcurrencyToken(bool? concurrencyToken, bool fromDataAnnotation)
        => IsConcurrencyToken(
            concurrencyToken, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetIsConcurrencyToken(bool? concurrencyToken, bool fromDataAnnotation)
        => CanSetIsConcurrencyToken(
            concurrencyToken, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.HasField(string? fieldName, bool fromDataAnnotation)
        => HasField(fieldName, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasField(string? fieldName, bool fromDataAnnotation)
        => HasField(fieldName, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.HasField(FieldInfo? fieldInfo, bool fromDataAnnotation)
        => HasField(fieldInfo, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasField(FieldInfo? fieldInfo, bool fromDataAnnotation)
        => HasField(fieldInfo, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBaseBuilder.CanSetField(string? fieldName, bool fromDataAnnotation)
        => CanSetField(fieldName, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBaseBuilder.CanSetField(FieldInfo? fieldInfo, bool fromDataAnnotation)
        => CanSetField(fieldInfo, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBaseBuilder? IConventionPropertyBaseBuilder.UsePropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        bool fromDataAnnotation)
        => UsePropertyAccessMode(
            propertyAccessMode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.UsePropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        bool fromDataAnnotation)
        => UsePropertyAccessMode(
            propertyAccessMode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(PropertyAccessMode? propertyAccessMode, bool fromDataAnnotation)
        => CanSetPropertyAccessMode(
            propertyAccessMode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasMaxLength(int? maxLength, bool fromDataAnnotation)
        => HasMaxLength(maxLength, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetMaxLength(int? maxLength, bool fromDataAnnotation)
        => CanSetMaxLength(maxLength, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.IsUnicode(bool? unicode, bool fromDataAnnotation)
        => IsUnicode(unicode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetIsUnicode(bool? unicode, bool fromDataAnnotation)
        => CanSetIsUnicode(unicode, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasPrecision(int? precision, bool fromDataAnnotation)
        => HasPrecision(precision, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetPrecision(int? precision, bool fromDataAnnotation)
        => CanSetPrecision(precision, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasScale(int? scale, bool fromDataAnnotation)
        => HasScale(scale, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetScale(int? scale, bool fromDataAnnotation)
        => CanSetScale(scale, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.BeforeSave(PropertySaveBehavior? behavior, bool fromDataAnnotation)
        => BeforeSave(behavior, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetBeforeSave(PropertySaveBehavior? behavior, bool fromDataAnnotation)
        => CanSetBeforeSave(behavior, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.AfterSave(PropertySaveBehavior? behavior, bool fromDataAnnotation)
        => AfterSave(behavior, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetAfterSave(PropertySaveBehavior? behavior, bool fromDataAnnotation)
        => CanSetAfterSave(behavior, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasValueGenerator(Type? valueGeneratorType, bool fromDataAnnotation)
        => HasValueGenerator(
            valueGeneratorType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasValueGenerator(
        Func<IProperty, IEntityType, ValueGenerator>? factory,
        bool fromDataAnnotation)
        => HasValueGenerator(factory, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetValueGenerator(Func<IProperty, IEntityType, ValueGenerator>? factory, bool fromDataAnnotation)
        => CanSetValueGenerator(factory, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasValueGeneratorFactory(
        Type? valueGeneratorFactoryType,
        bool fromDataAnnotation)
        => HasValueGeneratorFactory(
            valueGeneratorFactoryType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetValueGeneratorFactory(Type? valueGeneratorFactoryType, bool fromDataAnnotation)
        => CanSetValueGeneratorFactory(
            valueGeneratorFactoryType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasConversion(ValueConverter? converter, bool fromDataAnnotation)
        => HasConversion(converter, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetConversion(ValueConverter? converter, bool fromDataAnnotation)
        => CanSetConversion(converter, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasConverter(Type? converterType, bool fromDataAnnotation)
        => HasConverter(converterType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetConverter(Type? converterType, bool fromDataAnnotation)
        => CanSetConverter(converterType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasConversion(Type? providerClrType, bool fromDataAnnotation)
        => HasConversion(providerClrType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetConversion(Type? providerClrType, bool fromDataAnnotation)
        => CanSetConversion(providerClrType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasTypeMapping(CoreTypeMapping? typeMapping, bool fromDataAnnotation)
        => HasTypeMapping(typeMapping, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <inheritdoc />
    bool IConventionPropertyBuilder.CanSetTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation)
        => CanSetTypeMapping(typeMapping, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasValueComparer(ValueComparer? comparer, bool fromDataAnnotation)
        => HasValueComparer(comparer, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetValueComparer(ValueComparer? comparer, bool fromDataAnnotation)
        => CanSetValueComparer(comparer, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionPropertyBuilder? IConventionPropertyBuilder.HasValueComparer(Type? comparerType, bool fromDataAnnotation)
        => HasValueComparer(comparerType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    bool IConventionPropertyBuilder.CanSetValueComparer(Type? comparerType, bool fromDataAnnotation)
        => CanSetValueComparer(comparerType, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);
}",1,439 334 2000 58 2001 60 2002 62 44 2003 123 612 439 2000 40 2002 2004 44 2005 2006 41 58 320 40 2004 44 2006 41 123 125 612 439 491 2000 63 2007 40 323 63 2008 44 2009 2010 41 123 392 40 2010 631 2009 46 2011 605 33 2012 40 2008 44 2010 41 41 123 450 424 59 125 392 40 2008 614 380 41 123 489 40 2013 46 2014 46 2015 46 2016 40 41 41 123 386 40 490 2017 398 2013 46 2018 40 41 46 2019 40 41 41 123 392 40 2010 614 2009 46 2011 605 2017 46 2020 40 41 614 2009 46 2011 41 123 469 418 2021 40 2022 46 2023 40 2013 46 2024 44 2013 46 2014 46 2025 40 41 44 2017 46 2026 46 2027 40 41 41 41 59 125 490 2028 61 2017 46 2014 46 2029 46 2030 40 2017 44 2010 41 59 2031 46 2032 40 2028 631 424 44 648 41 59 125 2013 46 2033 40 473 44 2010 41 59 125 125 360 123 2034 46 2035 40 33 2008 44 2010 41 59 125 450 467 59 125 612 439 491 323 2036 40 323 63 2008 44 2009 63 2010 41 619 40 40 2010 46 2037 605 2010 46 2038 46 2039 40 2040 46 2041 40 41 41 41 606 40 2040 46 2042 614 33 2008 41 41 605 40 2008 631 380 606 40 2040 46 2043 46 2044 40 41 605 2040 46 2045 40 41 46 2046 40 2047 619 2010 46 2039 40 2047 46 2048 40 41 41 41 41 41 59 612 439 491 2000 63 2049 40 2049 63 2050 44 2009 2010 41 123 392 40 2051 40 2050 44 2010 41 41 123 2040 46 2052 40 2050 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2053 40 2049 63 2050 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2054 40 41 41 606 2040 46 2049 614 2050 59 612 439 491 2000 63 2055 40 323 63 2056 44 2009 2010 41 123 392 40 2057 40 2056 44 2010 41 41 123 2040 46 2058 40 2056 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2059 40 323 63 2056 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2060 40 41 41 606 2040 46 2055 614 2056 59 612 439 418 491 2000 63 2061 40 461 63 2062 44 2009 2010 41 619 40 2000 63 41 320 46 2061 40 2062 44 2010 41 59 612 439 418 491 2000 63 2061 40 2063 63 2064 44 2009 2010 41 619 40 2000 63 41 320 46 2061 40 2064 44 2010 41 59 612 439 418 491 2000 63 2065 40 2066 63 2067 44 2009 2010 41 619 40 2000 63 41 320 46 2065 40 2067 44 2010 41 59 612 439 491 2000 63 2068 40 404 63 2069 44 2009 2010 41 123 392 40 2070 40 2069 44 2010 41 41 123 2040 46 2071 40 2069 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2072 40 404 63 2069 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2073 40 41 41 606 2040 46 2074 40 41 614 2069 59 612 439 491 2000 63 2075 40 404 63 2076 44 2009 2010 41 123 392 40 2077 40 2076 44 2010 41 41 123 2040 46 2078 40 2076 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2079 40 404 63 2076 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2080 40 41 41 606 2040 46 2081 40 41 614 2076 59 612 439 491 2000 63 2082 40 404 63 2083 44 2009 2010 41 123 392 40 2084 40 2083 44 2010 41 41 123 2040 46 2085 40 2083 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2086 40 404 63 2083 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2087 40 41 41 606 2040 46 2088 40 41 614 2083 59 612 439 491 2000 63 2089 40 323 63 2090 44 2009 2010 41 123 392 40 2091 40 2090 44 2010 41 41 123 2040 46 2092 40 2090 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2093 40 323 63 2090 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2094 40 41 41 606 2040 46 2089 40 41 614 2090 59 612 439 491 2000 63 2095 40 2096 63 2097 44 2009 2010 41 123 392 40 2098 40 2097 44 2010 41 41 123 2040 46 2099 40 2097 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2100 40 2096 63 2097 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2101 40 41 41 606 2040 46 2102 40 41 614 2097 59 612 439 491 2000 63 2103 40 2096 63 2097 44 2009 2010 41 123 392 40 2104 40 2097 44 2010 41 41 123 2040 46 2105 40 2097 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2106 40 2096 63 2097 44 2009 63 2010 41 619 40 2010 46 2039 40 2040 46 2107 40 41 41 605 40 2097 614 424 606 2040 46 2108 40 2097 46 2038 41 614 424 41 41 606 2040 46 2109 40 41 614 2097 59 612 439 491 2000 63 2110 40 2111 63 2112 44 2009 2010 41 123 392 40 2112 614 424 41 123 450 2110 40 40 2113 60 2114 44 2115 44 2116 62 63 41 424 44 2010 41 59 125 392 40 33 478 40 2117 41 46 2118 40 2112 41 41 123 469 418 2119 40 2120 46 2121 40 2112 46 2122 40 41 44 478 40 2117 41 46 2122 40 41 41 41 59 125 450 2110 40 40 2123 44 2123 41 619 123 474 123 450 40 2117 41 2124 46 2125 40 2112 41 33 59 125 329 40 2126 2127 41 123 469 418 2128 40 2129 46 2130 40 2112 46 2131 40 41 44 2132 40 2133 46 2110 41 41 44 2127 41 59 125 125 44 2010 41 59 125 612 439 491 2000 63 2110 40 2134 60 2135 44 2136 44 2137 62 63 2138 44 2009 2010 41 123 392 40 2139 40 2138 44 2010 41 41 123 2040 46 2140 40 2138 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 2000 63 2141 40 2111 63 2138 44 2009 2010 41 123 392 40 2142 40 2138 44 2010 41 41 123 2040 46 2143 40 2138 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2144 40 2134 60 2135 44 2136 44 2137 62 63 2138 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2145 40 41 41 606 40 2040 91 2146 46 2147 93 614 424 605 40 2134 60 2135 44 2136 44 2137 62 63 41 2040 91 2146 46 2148 93 614 2138 41 59 612 439 491 323 2149 40 2111 63 2138 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2145 40 41 41 606 40 2040 91 2146 46 2148 93 614 424 605 40 2111 63 41 2040 91 2146 46 2147 93 614 2138 41 59 612 439 491 2000 63 2150 40 2151 63 2152 44 2009 2010 41 123 392 40 2153 40 2152 44 2010 41 41 123 2040 46 2154 40 424 44 2010 41 59 2040 46 2155 40 2152 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2156 40 2151 63 2152 44 2009 63 2010 41 619 40 2010 614 2009 46 2157 606 40 2010 46 2039 40 2040 46 2158 40 41 41 605 2040 46 2159 40 2152 41 614 424 41 606 40 2040 91 2146 46 2160 93 614 424 605 40 2151 63 41 2040 91 2146 46 2151 93 614 2152 41 41 605 2010 46 2039 40 2040 46 2161 40 41 41 59 612 439 491 2000 63 2150 40 2111 63 2162 44 2009 2010 41 123 392 40 2156 40 2162 44 2010 41 41 123 2040 46 2163 40 40 2151 63 41 424 44 2010 41 59 2040 46 2164 40 2162 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2156 40 2111 63 2162 44 2009 63 2010 41 619 40 2010 46 2039 40 2040 46 2161 40 41 41 606 2040 46 2165 40 41 614 2162 41 605 2010 46 2039 40 2040 46 2158 40 41 41 59 612 439 491 2000 63 2166 40 2111 63 2167 44 2009 2010 41 123 392 40 2168 40 2167 44 2010 41 41 123 2040 46 2169 40 424 44 2010 41 59 2040 46 2170 40 2167 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2171 40 2111 63 2167 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2158 40 41 41 606 40 2040 91 2146 46 2151 93 614 424 605 40 2111 63 41 2040 91 2146 46 2160 93 614 2167 41 59 612 439 491 2000 63 2172 40 2173 63 2174 44 2009 2010 41 123 392 40 2175 40 2174 44 2010 41 41 123 2040 46 2176 40 2174 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2177 40 2173 63 2174 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2178 40 41 41 606 2040 46 2179 614 2174 59 612 439 491 2000 63 2180 40 2181 63 2182 44 2009 2010 41 123 392 40 2183 40 2182 44 2010 41 41 123 2040 46 2184 40 2182 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2185 40 2181 63 2182 44 2009 63 2010 41 123 392 40 2010 46 2039 40 2040 46 2186 40 41 41 41 123 490 2187 61 2040 46 2188 40 2182 41 59 392 40 2187 631 424 41 123 392 40 2010 614 2009 46 2157 41 123 469 418 2189 40 2187 41 59 125 450 380 59 125 450 473 59 125 450 2040 91 2146 46 2190 93 614 424 605 2040 91 2146 46 2181 93 614 2182 59 125 612 439 491 2000 63 2180 40 2111 63 2191 44 2009 2010 41 123 392 40 2185 40 2191 44 2010 41 41 123 2040 46 2192 40 2191 44 2010 41 59 450 467 59 125 450 424 59 125 612 439 491 323 2185 40 2111 63 2191 44 2009 63 2010 41 619 2010 46 2039 40 2040 46 2193 40 41 41 606 40 2040 91 2146 46 2181 93 614 424 605 40 2111 63 41 2040 91 2146 46 2194 93 614 2191 41 59 612 439 491 2000 63 2195 40 2181 63 2182 44 2009 2010 41 619 2180 40 2182 44 2010 41 59 612 439 491 323 2196 40 2181 63 2182 44 2009 63 2010 41 619 2185 40 2182 44 2010 41 59 612 439 491 2000 63 2197 40 2198 2199 41 123 490 2200 61 2199 46 2040 46 2201 40 2040 46 2202 41 59 2000 63 2203 59 490 2010 61 2040 46 2048 40 41 59 490 2204 61 2040 46 2205 40 41 59 392 40 2200 631 424 605 40 2200 46 2048 40 41 46 2039 40 2010 41 606 2200 46 2205 40 41 46 2039 40 2204 41 606 40 2040 46 2043 614 2200 46 2043 605 2040 46 2206 40 41 634 2202 614 2200 46 2206 40 41 634 2202 41 41 41 123 2203 61 2200 46 2207 59 2200 46 2208 40 2010 41 59 392 40 2204 46 2037 41 123 2200 46 2209 40 2204 46 2038 41 59 125 125 360 123 490 2210 61 2040 46 2206 40 41 59 2203 61 2040 46 2211 40 41 63 2199 46 2212 40 2040 46 2043 44 2040 46 2202 44 2010 41 58 2210 614 424 63 2199 46 2002 40 2040 46 2043 44 2040 46 2202 44 2040 46 2205 40 41 44 2010 41 58 2199 46 2002 40 2210 44 2010 41 59 392 40 2203 407 424 41 123 450 424 59 125 125 392 40 2200 614 2040 41 123 450 2203 59 125 2203 46 2213 40 2040 41 59 490 2214 61 2040 46 2101 40 41 59 392 40 2214 46 2037 41 123 2203 46 2095 40 2040 46 2102 40 41 44 2214 46 2038 41 59 125 490 2215 61 2040 46 2107 40 41 59 392 40 2215 46 2037 41 123 2203 46 2103 40 2040 46 2109 40 41 44 2215 46 2038 41 59 125 490 2216 61 2040 46 2041 40 41 59 392 40 2216 46 2037 41 123 2203 46 2007 40 33 2040 46 2042 44 2216 46 2038 41 59 125 490 2217 61 2040 46 2060 40 41 59 392 40 2217 46 2037 41 123 2203 46 2055 40 2040 46 2055 44 2217 46 2038 41 59 125 490 2218 61 2040 46 2054 40 41 59 392 40 2218 46 2037 41 123 2203 46 2049 40 2040 46 2049 44 2218 46 2038 41 59 125 490 2219 61 2040 46 2220 40 41 59 392 40 2219 46 2037 41 123 2203 46 2065 40 40 40 2221 41 2040 41 46 2222 40 41 44 2219 46 2038 41 59 125 490 2223 61 2040 46 2224 40 41 59 392 40 2223 46 2037 605 2203 46 2225 40 2040 46 2063 44 2223 41 41 123 2203 46 2061 40 2040 46 2063 44 2223 46 2038 41 59 125 490 2226 61 2040 46 2178 40 41 59 392 40 2226 46 2037 605 2203 46 2177 40 2040 46 2179 44 2226 41 41 123 2203 46 2172 40 2040 46 2179 44 2226 46 2038 41 59 125 450 2203 59 125 612 2227 2228 46 2040 123 91 2229 93 2230 619 2040 59 125 612 2231 2003 46 2040 123 91 2232 93 2233 619 2040 59 125 612 2003 63 2003 46 2007 40 323 63 2008 44 323 2234 41 619 2007 40 2008 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2036 40 323 63 2008 44 323 2234 41 619 2036 40 2008 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2049 40 2049 63 2050 44 323 2234 41 619 2049 40 2050 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2053 40 2049 63 2050 44 323 2234 41 619 2053 40 2050 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2055 40 323 63 2056 44 323 2234 41 619 2055 40 2056 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2059 40 323 63 2056 44 323 2234 41 619 2059 40 2056 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2228 63 2228 46 2061 40 461 63 2062 44 323 2234 41 619 2061 40 2062 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2061 40 461 63 2062 44 323 2234 41 619 2061 40 2062 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2228 63 2228 46 2061 40 2063 63 2064 44 323 2234 41 619 2061 40 2064 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2061 40 2063 63 2064 44 323 2234 41 619 2061 40 2064 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2228 46 2237 40 461 63 2062 44 323 2234 41 619 2237 40 2062 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2228 46 2237 40 2063 63 2064 44 323 2234 41 619 2237 40 2064 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2228 63 2228 46 2065 40 2066 63 2067 44 323 2234 41 619 2065 40 2067 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2065 40 2066 63 2067 44 323 2234 41 619 2065 40 2067 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2228 46 2238 40 2066 63 2067 44 323 2234 41 619 2238 40 2067 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2068 40 404 63 2069 44 323 2234 41 619 2068 40 2069 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2072 40 404 63 2069 44 323 2234 41 619 2072 40 2069 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2089 40 323 63 2090 44 323 2234 41 619 2089 40 2090 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2093 40 323 63 2090 44 323 2234 41 619 2093 40 2090 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2075 40 404 63 2076 44 323 2234 41 619 2075 40 2076 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2079 40 404 63 2076 44 323 2234 41 619 2079 40 2076 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2082 40 404 63 2083 44 323 2234 41 619 2082 40 2083 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2086 40 404 63 2083 44 323 2234 41 619 2086 40 2083 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2095 40 2096 63 2097 44 323 2234 41 619 2095 40 2097 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2100 40 2096 63 2097 44 323 2234 41 619 2100 40 2097 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2103 40 2096 63 2097 44 323 2234 41 619 2103 40 2097 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2106 40 2096 63 2097 44 323 2234 41 619 2106 40 2097 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2110 40 2111 63 2112 44 323 2234 41 619 2110 40 2112 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2110 40 2134 60 2135 44 2136 44 2137 62 63 2138 44 323 2234 41 619 2110 40 2138 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2144 40 2134 60 2135 44 2136 44 2137 62 63 2138 44 323 2234 41 619 2144 40 2138 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2141 40 2111 63 2239 44 323 2234 41 619 2141 40 2239 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2149 40 2111 63 2239 44 323 2234 41 619 2149 40 2239 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2150 40 2151 63 2152 44 323 2234 41 619 2150 40 2152 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2156 40 2151 63 2152 44 323 2234 41 619 2156 40 2152 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2166 40 2111 63 2167 44 323 2234 41 619 2166 40 2167 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2171 40 2111 63 2167 44 323 2234 41 619 2171 40 2167 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2150 40 2111 63 2162 44 323 2234 41 619 2150 40 2162 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2156 40 2111 63 2162 44 323 2234 41 619 2156 40 2162 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2172 40 2173 63 2174 44 323 2234 41 619 2172 40 2174 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2177 40 2173 2174 44 323 2234 41 619 2177 40 2174 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2180 40 2181 63 2182 44 323 2234 41 619 2180 40 2182 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2185 40 2181 63 2182 44 323 2234 41 619 2185 40 2182 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 2003 63 2003 46 2180 40 2111 63 2191 44 323 2234 41 619 2180 40 2191 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 612 323 2003 46 2185 40 2111 63 2191 44 323 2234 41 619 2185 40 2191 44 2234 63 2009 46 2235 58 2009 46 2236 41 59 125 
72195,C#,"    public class CSharpDbContextGeneratorTest : ModelCodeGeneratorTestBase
    {
        private static readonly string _nl = Environment.NewLine;

        [ConditionalFact]
        public void Empty_model()
            => Test(
                modelBuilder => { },
                new ModelCodeGenerationOptions(),
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                        + DesignStrings.SensitiveInformationWarning
                        + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);

                    Assert.Empty(code.AdditionalFiles);
                },
                model => Assert.Empty(model.GetEntityTypes()));

        [ConditionalFact]
        public void SuppressConnectionStringWarning_works()
            => Test(
                modelBuilder => { },
                new ModelCodeGenerationOptions { SuppressConnectionStringWarning = true },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);

                    Assert.Empty(code.AdditionalFiles);
                },
                model => Assert.Empty(model.GetEntityTypes()));

        [ConditionalFact]
        public void SuppressOnConfiguring_works()
            => Test(
                modelBuilder => { },
                new ModelCodeGenerationOptions { SuppressOnConfiguring = true },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);

                    Assert.Empty(code.AdditionalFiles);
                },
                null);

        [ConditionalFact]
        public void DbSets_without_nrt()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity""),
                new ModelCodeGenerationOptions
                {
                    UseNullableReferenceTypes = false,
                    SuppressConnectionStringWarning = true,
                    SuppressOnConfiguring = true
                },
                code =>
                {
                    Assert.Contains(""DbSet<Entity> Entity { get; set; }"" + _nl, code.ContextFile.Code);
                },
                null);

        [ConditionalFact]
        public void DbSets_with_nrt()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity""),
                new ModelCodeGenerationOptions
                {
                    UseNullableReferenceTypes = true,
                    SuppressConnectionStringWarning = true,
                    SuppressOnConfiguring = true
                },
                code =>
                {
                    Assert.Contains(""DbSet<Entity> Entity { get; set; } = null!;"", code.ContextFile.Code);
                },
                null);

        [ConditionalFact]
        public void Required_options_to_GenerateModel_are_not_null()
        {
            var generator = CreateServices()
                .AddSingleton<IProviderCodeGeneratorPlugin, TestCodeGeneratorPlugin>()
                .BuildServiceProvider(validateScopes: true)
                .GetRequiredService<IModelCodeGenerator>();

            Assert.StartsWith(
                CoreStrings.ArgumentPropertyNull(nameof(ModelCodeGenerationOptions.ContextName), ""options""),
                Assert.Throws<ArgumentException>(
                        () =>
                            generator.GenerateModel(
                                new Model(),
                                new ModelCodeGenerationOptions { ContextName = null, ConnectionString = ""Initial Catalog=TestDatabase"" }))
                    .Message);

            Assert.StartsWith(
                CoreStrings.ArgumentPropertyNull(nameof(ModelCodeGenerationOptions.ConnectionString), ""options""),
                Assert.Throws<ArgumentException>(
                    () =>
                        generator.GenerateModel(
                            new Model(),
                            new ModelCodeGenerationOptions { ContextName = ""TestDbContext"", ConnectionString = null })).Message);
        }

        [ConditionalFact]
        public void Plugins_work()
        {
            var generator = CreateServices()
                .AddSingleton<IProviderCodeGeneratorPlugin, TestCodeGeneratorPlugin>()
                .BuildServiceProvider(validateScopes: true)
                .GetRequiredService<IModelCodeGenerator>();

            var scaffoldedModel = generator.GenerateModel(
                new Model(),
                new ModelCodeGenerationOptions
                {
                    SuppressConnectionStringWarning = true,
                    ModelNamespace = ""TestNamespace"",
                    ContextName = ""TestDbContext"",
                    ConnectionString = ""Initial Catalog=TestDatabase""
                });

            Assert.Contains(
                @""optionsBuilder""
                + _nl
                + @""                    .UseSqlServer(""""Initial Catalog=TestDatabase"""", x => x.SetProviderOption())""
                + _nl
                + @""                    .SetContextOption();"",
                scaffoldedModel.ContextFile.Code);
        }

        [ConditionalFact]
        public void IsRequired_is_generated_for_ref_property_without_nrt()
            => Test(
                modelBuilder =>
                {
                    modelBuilder.Entity(
                        ""Entity"", x =>
                        {
                            x.Property<string>(""RequiredString"").IsRequired();
                            x.Property<string>(""NonRequiredString"");
                            x.Property<int>(""RequiredInt"");
                            x.Property<int?>(""NonRequiredInt"");
                        });
                },
                new ModelCodeGenerationOptions { UseNullableReferenceTypes = false },
                code =>
                {
                    Assert.Contains(""Property(e => e.RequiredString).IsRequired()"", code.ContextFile.Code);
                    Assert.DoesNotContain(""NotRequiredString"", code.ContextFile.Code);
                    Assert.DoesNotContain(""RequiredInt"", code.ContextFile.Code);
                    Assert.DoesNotContain(""NotRequiredInt"", code.ContextFile.Code);
                },
                model =>
                {
                    var entityType = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.False(entityType.GetProperty(""RequiredString"").IsNullable);
                    Assert.True(entityType.GetProperty(""NonRequiredString"").IsNullable);
                    Assert.False(entityType.GetProperty(""RequiredInt"").IsNullable);
                    Assert.True(entityType.GetProperty(""NonRequiredInt"").IsNullable);
                });

        [ConditionalFact]
        public void IsRequired_is_not_generated_for_ref_property_with_nrt()
            => Test(
                modelBuilder =>
                {
                    modelBuilder.Entity(
                        ""Entity"", x =>
                        {
                            x.Property<string>(""RequiredString"").IsRequired();
                            x.Property<string>(""NonRequiredString"");
                            x.Property<int>(""RequiredInt"");
                            x.Property<int?>(""NonRequiredInt"");
                        });
                },
                new ModelCodeGenerationOptions { UseNullableReferenceTypes = true },
                code =>
                {
                    Assert.DoesNotContain(""RequiredString"", code.ContextFile.Code);
                    Assert.DoesNotContain(""NotRequiredString"", code.ContextFile.Code);
                    Assert.DoesNotContain(""RequiredInt"", code.ContextFile.Code);
                    Assert.DoesNotContain(""NotRequiredInt"", code.ContextFile.Code);
                },
                model =>
                {
                    var entityType = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.False(entityType.GetProperty(""RequiredString"").IsNullable);
                    Assert.True(entityType.GetProperty(""NonRequiredString"").IsNullable);
                    Assert.False(entityType.GetProperty(""RequiredInt"").IsNullable);
                    Assert.True(entityType.GetProperty(""NonRequiredInt"").IsNullable);
                });

        [ConditionalFact]
        public void Comments_use_fluent_api()
            => Test(
                modelBuilder => modelBuilder.Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""Id"");
                        x.Property<int>(""Property"")
                            .HasComment(""An int property"");
                    }),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains(
                    "".HasComment(\""An int property\"")"",
                    code.ContextFile.Code),
                model => Assert.Equal(
                    ""An int property"",
                    model.FindEntityType(""TestNamespace.Entity"").GetProperty(""Property"").GetComment()));

        [ConditionalFact]
        public void Entity_comments_use_fluent_api()
            => Test(
                modelBuilder => modelBuilder.Entity(
                    ""Entity"",
                    x =>
                    {
                        x.HasComment(""An entity comment"");
                    }),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains(
                    "".HasComment(\""An entity comment\"")"",
                    code.ContextFile.Code),
                model => Assert.Equal(
                    ""An entity comment"",
                    model.FindEntityType(""TestNamespace.Entity"").GetComment()));

        [ConditionalFact]
        public void Views_work()
            => Test(
                modelBuilder => modelBuilder.Entity(""Vista"").ToView(""Vista""),
                new ModelCodeGenerationOptions { UseDataAnnotations = true },
                code => Assert.Contains(""entity.ToView(\""Vista\"");"", code.ContextFile.Code),
                model =>
                {
                    var entityType = model.FindEntityType(""TestNamespace.Vista"");

                    Assert.NotNull(entityType.FindAnnotation(RelationalAnnotationNames.ViewDefinitionSql));
                    Assert.Equal(""Vista"", entityType.GetViewName());
                    Assert.Null(entityType.GetViewSchema());
                    Assert.Null(entityType.GetTableName());
                    Assert.Null(entityType.GetSchema());
                });

        [ConditionalFact]
        public void ModelInDifferentNamespaceDbContext_works()
        {
            var modelGenerationOptions = new ModelCodeGenerationOptions
            {
                ContextNamespace = ""TestNamespace"", ModelNamespace = ""AnotherNamespaceOfModel""
            };

            const string entityInAnotherNamespaceTypeName = ""EntityInAnotherNamespace"";

            Test(
                modelBuilder => modelBuilder.Entity(entityInAnotherNamespaceTypeName)
                , modelGenerationOptions
                , code => Assert.Contains(string.Concat(""using "", modelGenerationOptions.ModelNamespace, "";""), code.ContextFile.Code)
                , model => Assert.NotNull(model.FindEntityType(string.Concat(modelGenerationOptions.ModelNamespace, ""."", entityInAnotherNamespaceTypeName)))
            );
        }

        [ConditionalFact]
        public void ModelSameNamespaceDbContext_works()
        {
            var modelGenerationOptions = new ModelCodeGenerationOptions { ContextNamespace = ""TestNamespace"" };

            const string entityInAnotherNamespaceTypeName = ""EntityInAnotherNamespace"";

            Test(
                modelBuilder => modelBuilder.Entity(entityInAnotherNamespaceTypeName)
                , modelGenerationOptions
                , code => Assert.DoesNotContain(string.Concat(""using "", modelGenerationOptions.ModelNamespace, "";""), code.ContextFile.Code)
                , model => Assert.NotNull(model.FindEntityType(string.Concat(modelGenerationOptions.ModelNamespace, ""."", entityInAnotherNamespaceTypeName)))
            );
        }

        [ConditionalFact]
        public void ValueGenerated_works()
            => Test(
                modelBuilder => modelBuilder.Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<int>(""ValueGeneratedOnAdd"").ValueGeneratedOnAdd();
                        x.Property<int>(""ValueGeneratedOnAddOrUpdate"").ValueGeneratedOnAddOrUpdate();
                        x.Property<int>(""ConcurrencyToken"").IsConcurrencyToken();
                        x.Property<int>(""ValueGeneratedOnUpdate"").ValueGeneratedOnUpdate();
                        x.Property<int>(""ValueGeneratedNever"").ValueGeneratedNever();
                    }),
                new ModelCodeGenerationOptions(),
                code =>
                {
                    Assert.Contains(
                        @$""Property(e => e.ValueGeneratedOnAdd){_nl}                    .ValueGeneratedOnAdd()"",
                        code.ContextFile.Code);
                    Assert.Contains(""Property(e => e.ValueGeneratedOnAddOrUpdate).ValueGeneratedOnAddOrUpdate()"", code.ContextFile.Code);
                    Assert.Contains(""Property(e => e.ConcurrencyToken).IsConcurrencyToken()"", code.ContextFile.Code);
                    Assert.Contains(""Property(e => e.ValueGeneratedOnUpdate).ValueGeneratedOnUpdate()"", code.ContextFile.Code);
                    Assert.Contains(""Property(e => e.ValueGeneratedNever).ValueGeneratedNever()"", code.ContextFile.Code);
                },
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Equal(ValueGenerated.OnAdd, entity.GetProperty(""ValueGeneratedOnAdd"").ValueGenerated);
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, entity.GetProperty(""ValueGeneratedOnAddOrUpdate"").ValueGenerated);
                    Assert.True(entity.GetProperty(""ConcurrencyToken"").IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.OnUpdate, entity.GetProperty(""ValueGeneratedOnUpdate"").ValueGenerated);
                    Assert.Equal(ValueGenerated.Never, entity.GetProperty(""ValueGeneratedNever"").ValueGenerated);
                });

        [ConditionalFact]
        public void HasPrecision_works()
            => Test(
                modelBuilder => modelBuilder.Entity(
                    ""Entity"",
                    x =>
                    {
                        x.Property<decimal>(""HasPrecision"").HasPrecision(12);
                        x.Property<decimal>(""HasPrecisionAndScale"").HasPrecision(14, 7);
                    }),
                new ModelCodeGenerationOptions(),
                code =>
                {
                    Assert.Contains(""Property(e => e.HasPrecision).HasPrecision(12)"", code.ContextFile.Code);
                    Assert.Contains(""Property(e => e.HasPrecisionAndScale).HasPrecision(14, 7)"", code.ContextFile.Code);
                },
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Equal(12, entity.GetProperty(""HasPrecision"").GetPrecision());
                    Assert.Null(entity.GetProperty(""HasPrecision"").GetScale());
                    Assert.Equal(14, entity.GetProperty(""HasPrecisionAndScale"").GetPrecision());
                    Assert.Equal(7, entity.GetProperty(""HasPrecisionAndScale"").GetScale());
                });

        [ConditionalFact]
        public void Collation_works()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity"").Property<string>(""UseCollation"").UseCollation(""Some Collation""),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains(""Property(e => e.UseCollation).UseCollation(\""Some Collation\"")"", code.ContextFile.Code),
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Equal(""Some Collation"", entity.GetProperty(""UseCollation"").GetCollation());
                });

        [ConditionalFact]
        public void ComputedColumnSql_works()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity"").Property<string>(""ComputedColumn"").HasComputedColumnSql(""1 + 2""),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains("".HasComputedColumnSql(\""1 + 2\"")"", code.ContextFile.Code),
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Equal(""1 + 2"", entity.GetProperty(""ComputedColumn"").GetComputedColumnSql());
                });

        [ConditionalFact]
        public void IsUnicode_works()
            => Test(
                modelBuilder =>
                {
                    modelBuilder.Entity(""Entity"").Property<string>(""UnicodeColumn"").IsUnicode();
                    modelBuilder.Entity(""Entity"").Property<string>(""NonUnicodeColumn"").IsUnicode(false);
                },
                new ModelCodeGenerationOptions(),
                code =>
                {
                    Assert.Contains(""Property(e => e.UnicodeColumn).IsUnicode()"", code.ContextFile.Code);
                    Assert.Contains(""Property(e => e.NonUnicodeColumn).IsUnicode(false)"", code.ContextFile.Code);
                },
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.True(entity.GetProperty(""UnicodeColumn"").IsUnicode());
                    Assert.False(entity.GetProperty(""NonUnicodeColumn"").IsUnicode());
                });

        [ConditionalFact]
        public void ComputedColumnSql_works_stored()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity"").Property<string>(""ComputedColumn"")
                    .HasComputedColumnSql(""1 + 2"", stored: true),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains("".HasComputedColumnSql(\""1 + 2\"", true)"", code.ContextFile.Code),
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.True(entity.GetProperty(""ComputedColumn"").GetIsStored());
                });

        [ConditionalFact]
        public void ComputedColumnSql_works_unspecified()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity"").Property<string>(""ComputedColumn"").HasComputedColumnSql(),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains("".HasComputedColumnSql()"", code.ContextFile.Code),
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Empty(entity.GetProperty(""ComputedColumn"").GetComputedColumnSql());
                });

        [ConditionalFact]
        public void DefaultValue_works_unspecified()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity"").Property<string>(""DefaultedColumn"").HasDefaultValue(),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains("".HasDefaultValue()"", code.ContextFile.Code),
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Equal(DBNull.Value, entity.GetProperty(""DefaultedColumn"").GetDefaultValue());
                });

        [ConditionalFact]
        public void DefaultValueSql_works_unspecified()
            => Test(
                modelBuilder => modelBuilder.Entity(""Entity"").Property<string>(""DefaultedColumn"").HasDefaultValueSql(),
                new ModelCodeGenerationOptions(),
                code => Assert.Contains("".HasDefaultValueSql()"", code.ContextFile.Code),
                model =>
                {
                    var entity = model.FindEntityType(""TestNamespace.Entity"");
                    Assert.Empty(entity.GetProperty(""DefaultedColumn"").GetDefaultValueSql());
                });

        [ConditionalFact]
        public void Entity_with_indexes_and_use_data_annotations_false_always_generates_fluent_API()
            => Test(
                modelBuilder => modelBuilder
                    .Entity(
                        ""EntityWithIndexes"",
                        x =>
                        {
                            x.Property<int>(""Id"");
                            x.Property<int>(""A"");
                            x.Property<int>(""B"");
                            x.Property<int>(""C"");
                            x.HasKey(""Id"");
                            x.HasIndex(new[] { ""A"", ""B"" }, ""IndexOnAAndB"")
                                .IsUnique();
                            x.HasIndex(new[] { ""B"", ""C"" }, ""IndexOnBAndC"")
                                .HasFilter(""Filter SQL"")
                                .HasAnnotation(""AnnotationName"", ""AnnotationValue"");
                        }),
                new ModelCodeGenerationOptions { UseDataAnnotations = false },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EntityWithIndexes> EntityWithIndexes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                        + DesignStrings.SensitiveInformationWarning
                        + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EntityWithIndexes>(entity =>
            {
                entity.HasIndex(e => new { e.A, e.B }, """"IndexOnAAndB"""")
                    .IsUnique();

                entity.HasIndex(e => new { e.B, e.C }, """"IndexOnBAndC"""")
                    .HasFilter(""""Filter SQL"""")
                    .HasAnnotation(""""AnnotationName"""", """"AnnotationValue"""");

                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);
                },
                model =>
                    Assert.Equal(2, model.FindEntityType(""TestNamespace.EntityWithIndexes"").GetIndexes().Count()));

        [ConditionalFact]
        public void Entity_with_indexes_and_use_data_annotations_true_generates_fluent_API_only_for_indexes_with_annotations()
            => Test(
                modelBuilder => modelBuilder
                    .Entity(
                        ""EntityWithIndexes"",
                        x =>
                        {
                            x.Property<int>(""Id"");
                            x.Property<int>(""A"");
                            x.Property<int>(""B"");
                            x.Property<int>(""C"");
                            x.HasKey(""Id"");
                            x.HasIndex(new[] { ""A"", ""B"" }, ""IndexOnAAndB"")
                                .IsUnique();
                            x.HasIndex(new[] { ""B"", ""C"" }, ""IndexOnBAndC"")
                                .HasFilter(""Filter SQL"")
                                .HasAnnotation(""AnnotationName"", ""AnnotationValue"");
                        }),
                new ModelCodeGenerationOptions { UseDataAnnotations = true },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<EntityWithIndexes> EntityWithIndexes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                        + DesignStrings.SensitiveInformationWarning
                        + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<EntityWithIndexes>(entity =>
            {
                entity.HasIndex(e => new { e.B, e.C }, """"IndexOnBAndC"""")
                    .HasFilter(""""Filter SQL"""")
                    .HasAnnotation(""""AnnotationName"""", """"AnnotationValue"""");

                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);
                },
                model =>
                    Assert.Equal(2, model.FindEntityType(""TestNamespace.EntityWithIndexes"").GetIndexes().Count()));

        [ConditionalFact]
        public void Entity_lambda_uses_correct_identifiers()
            => Test(
                modelBuilder =>
                {
                    modelBuilder.Entity(
                        ""PrincipalEntity"", b =>
                        {
                            b.Property<int>(""Id"");
                            b.Property<int>(""PrincipalId"");
                            b.Property<int>(""AlternateId"");
                            b.HasKey(""AlternateId"");
                        });
                    modelBuilder.Entity(
                        ""DependentEntity"", b =>
                        {
                            b.Property<int>(""Id"");
                            b.Property<int>(""DependentId"");
                            b.HasOne(""PrincipalEntity"", ""NavigationToPrincipal"")
                                .WithOne(""NavigationToDependent"")
                                .HasForeignKey(""DependentEntity"", ""DependentId"")
                                .HasPrincipalKey(""PrincipalEntity"", ""PrincipalId"");
                        });
                },
                new ModelCodeGenerationOptions { UseDataAnnotations = false },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DependentEntity> DependentEntity { get; set; }
        public virtual DbSet<PrincipalEntity> PrincipalEntity { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                        + DesignStrings.SensitiveInformationWarning
                        + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DependentEntity>(entity =>
            {
                entity.HasIndex(e => e.DependentId, """"IX_DependentEntity_DependentId"""")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityColumn();

                entity.HasOne(d => d.NavigationToPrincipal)
                    .WithOne(p => p.NavigationToDependent)
                    .HasPrincipalKey<PrincipalEntity>(p => p.PrincipalId)
                    .HasForeignKey<DependentEntity>(d => d.DependentId);
            });

            modelBuilder.Entity<PrincipalEntity>(entity =>
            {
                entity.HasKey(e => e.AlternateId);

                entity.Property(e => e.AlternateId).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);
                },
                model => { });

        [ConditionalFact]
        public void Column_type_is_not_scaffolded_as_annotation()
            => Test(
                modelBuilder => modelBuilder
                    .Entity(
                        ""Employee"",
                        x =>
                        {
                            x.Property<int>(""Id"");
                            x.Property<DateTime>(""HireDate"").HasColumnType(""date"").HasColumnName(""hiring_date"");
                        }),
                new ModelCodeGenerationOptions { UseDataAnnotations = false },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Employee> Employee { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                        + DesignStrings.SensitiveInformationWarning
                        + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityColumn();

                entity.Property(e => e.HireDate)
                    .HasColumnType(""""date"""")
                    .HasColumnName(""""hiring_date"""");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);
                },
                model =>
                    Assert.Equal(""date"", model.FindEntityType(""TestNamespace.Employee"").GetProperty(""HireDate"").GetConfiguredColumnType()));

        [ConditionalFact]
        public void Is_fixed_length_annotation_should_be_scaffolded_without_optional_parameter()
            => Test(
                modelBuilder => modelBuilder
                    .Entity(
                        ""Employee"",
                        x =>
                        {
                            x.Property<int>(""Id"");
                            x.Property<string>(""Name"").HasMaxLength(5).IsFixedLength();
                        }),
                new ModelCodeGenerationOptions { UseDataAnnotations = false },
                code => Assert.Contains("".IsFixedLength()"", code.ContextFile.Code),
                model =>
                    Assert.Equal(true, model.FindEntityType(""TestNamespace.Employee"").GetProperty(""Name"").IsFixedLength()));

        [ConditionalFact]
        public void Global_namespace_works()
            => Test(
                modelBuilder => modelBuilder.Entity(""MyEntity""),
                new ModelCodeGenerationOptions { ModelNamespace = string.Empty },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

public partial class TestDbContext : DbContext
{
    public TestDbContext()
    {
    }

    public TestDbContext(DbContextOptions<TestDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<MyEntity> MyEntity { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
#warning ""
                        + DesignStrings.SensitiveInformationWarning
                        + @""
            optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MyEntity>(entity =>
        {
            entity.HasNoKey();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
"",
                        code.ContextFile);

                    Assert.DoesNotContain(""namespace "", Assert.Single(code.AdditionalFiles).Code);
                },
                model =>
                {
                    Assert.NotNull(model.FindEntityType(""MyEntity""));
                });

        [ConditionalFact]
        public void Global_namespace_works_just_context()
            => Test(
                modelBuilder => modelBuilder.Entity(""MyEntity""),
                new ModelCodeGenerationOptions { ModelNamespace = ""TestNamespace"", ContextNamespace = string.Empty },
                code =>
                {
                    Assert.Contains(""using TestNamespace;"", code.ContextFile.Code);
                    Assert.DoesNotContain(""namespace "", code.ContextFile.Code);
                    Assert.Contains(""namespace TestNamespace"", Assert.Single(code.AdditionalFiles).Code);
                },
                model =>
                {
                    Assert.NotNull(model.FindEntityType(""TestNamespace.MyEntity""));
                });

        [ConditionalFact]
        public void Global_namespace_works_just_model()
            => Test(
                modelBuilder => modelBuilder.Entity(""MyEntity""),
                new ModelCodeGenerationOptions { ModelNamespace = string.Empty, ContextNamespace = ""TestNamespace"" },
                code =>
                {
                    Assert.Contains(""namespace TestNamespace"", code.ContextFile.Code);
                    Assert.DoesNotContain(""namespace "", Assert.Single(code.AdditionalFiles).Code);
                },
                model =>
                {
                    Assert.NotNull(model.FindEntityType(""MyEntity""));
                });

        [ConditionalFact]
        public void Fluent_calls_in_custom_namespaces_work()
            => Test(
                modelBuilder => TestModelBuilderExtensions.TestFluentApiCall(modelBuilder),
                new ModelCodeGenerationOptions { SuppressOnConfiguring = true },
                code =>
                {
                    AssertFileContents(
                        @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CustomTestNamespace;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.TestFluentApiCall();

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                        code.ContextFile);

                    Assert.Empty(code.AdditionalFiles);
                },
                model => Assert.Empty(model.GetEntityTypes()),
                skipBuild: true);

        [ConditionalFact]
        public void Temporal_table_works()
            // Shadow properties. Issue #26007.
            => Assert.Equal(
                SqlServerStrings.TemporalPeriodPropertyMustBeInShadowState(""Customer"", ""PeriodStart""),
                Assert.Throws<InvalidOperationException>(
                    () =>
                        Test(
                            modelBuilder => modelBuilder.Entity(
                                ""Customer"", e =>
                                {
                                    e.Property<int>(""Id"");
                                    e.Property<string>(""Name"");
                                    e.HasKey(""Id"");
                                    e.ToTable(tb => tb.IsTemporal());
                                }),
                            new ModelCodeGenerationOptions { UseDataAnnotations = false },
                            code =>
                            {
                                AssertFileContents(
                                    @""using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestNamespace
{
    public partial class TestDbContext : DbContext
    {
        public TestDbContext()
        {
        }

        public TestDbContext(DbContextOptions<TestDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Customer> Customer { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning ""
                                    + DesignStrings.SensitiveInformationWarning
                                    + @""
                optionsBuilder.UseSqlServer(""""Initial Catalog=TestDatabase"""");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable(tb => tb.IsTemporal(ttb =>
    {
        ttb
            .HasPeriodStart(""""PeriodStart"""")
            .HasColumnName(""""PeriodStart"""");
        ttb
            .HasPeriodEnd(""""PeriodEnd"""")
            .HasColumnName(""""PeriodEnd"""");
    }
));

                entity.Property(e => e.Id).UseIdentityColumn();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
"",
                                    code.ContextFile);
                            },
                            model =>
                            {
                                // TODO
                            })).Message);

        protected override void AddModelServices(IServiceCollection services)
            => services.Replace(ServiceDescriptor.Singleton<IRelationalAnnotationProvider, TestModelAnnotationProvider>());

        protected override void AddScaffoldingServices(IServiceCollection services)
            => services.Replace(ServiceDescriptor.Singleton<IAnnotationCodeGenerator, TestModelAnnotationCodeGenerator>());

        private class TestModelAnnotationProvider : SqlServerAnnotationProvider
        {
            public TestModelAnnotationProvider(RelationalAnnotationProviderDependencies dependencies)
                : base(dependencies)
            {
            }

            public override IEnumerable<IAnnotation> For(IRelationalModel database, bool designTime)
            {
                foreach (var annotation in base.For(database, designTime))
                {
                    yield return annotation;
                }

                if (database[""Test:TestModelAnnotation""] is string annotationValue)
                {
                    yield return new Annotation(""Test:TestModelAnnotation"", annotationValue);
                }
            }
        }

        private class TestModelAnnotationCodeGenerator : SqlServerAnnotationCodeGenerator
        {
            private static readonly MethodInfo _testFluentApiCallMethodInfo
                = typeof(TestModelBuilderExtensions).GetRuntimeMethod(
                    nameof(TestModelBuilderExtensions.TestFluentApiCall), new[] { typeof(ModelBuilder) })!;

            public TestModelAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies)
                : base(dependencies)
            {
            }

            protected override MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation)
                => annotation.Name switch
                {
                    ""Test:TestModelAnnotation"" => new MethodCallCodeFragment(_testFluentApiCallMethodInfo),
                    _ => base.GenerateFluentApi(model, annotation)
                };
        }

        private class TestCodeGeneratorPlugin : ProviderCodeGeneratorPlugin
        {
            private static readonly MethodInfo _setProviderOptionMethodInfo
                = typeof(TestCodeGeneratorPlugin).GetRuntimeMethod(
                    nameof(SetProviderOption), new[] { typeof(SqlServerDbContextOptionsBuilder) });

            private static readonly MethodInfo _setContextOptionMethodInfo
                = typeof(TestCodeGeneratorPlugin).GetRuntimeMethod(
                    nameof(SetContextOption), new[] { typeof(DbContextOptionsBuilder) });

            public override MethodCallCodeFragment GenerateProviderOptions()
                => new(_setProviderOptionMethodInfo);

            public override MethodCallCodeFragment GenerateContextOptions()
                => new(_setContextOptionMethodInfo);

            public static SqlServerDbContextOptionsBuilder SetProviderOption(SqlServerDbContextOptionsBuilder optionsBuilder)
                => throw new NotSupportedException();

            public static SqlServerDbContextOptionsBuilder SetContextOption(DbContextOptionsBuilder optionsBuilder)
                => throw new NotSupportedException();
        }
    }",1,439 334 2000 58 2001 123 437 457 441 461 2002 61 2003 46 2004 59 91 2005 93 439 492 2006 40 41 619 2007 40 2008 619 123 125 44 418 2009 40 41 44 2010 619 123 2011 40 64 648 43 2012 46 2013 43 64 648 648 648 44 2010 46 2014 41 59 2015 46 2016 40 2010 46 2017 41 59 125 44 2018 619 2019 46 2020 40 2018 46 2021 40 41 41 41 59 91 2005 93 439 492 2022 40 41 619 2007 40 2008 619 123 125 44 418 2009 123 2023 61 473 125 44 2010 619 123 2024 40 64 648 648 648 44 2010 46 2025 41 59 2019 46 2020 40 2010 46 2026 41 59 125 44 2018 619 2019 46 2020 40 2018 46 2021 40 41 41 41 59 91 2005 93 439 492 2027 40 41 619 2007 40 2008 619 123 125 44 418 2009 123 2028 61 473 125 44 2010 619 123 2029 40 64 648 44 2010 46 2030 41 59 2019 46 2020 40 2010 46 2031 41 59 125 44 424 41 59 91 2005 93 439 492 2032 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 44 418 2009 123 2034 61 380 44 2035 61 473 44 2036 61 473 125 44 2010 619 123 2019 46 2037 40 648 43 2002 44 2010 46 2038 46 2039 41 59 125 44 424 41 59 91 2005 93 439 492 2040 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 44 418 2009 123 2041 61 473 44 2042 61 473 44 2043 61 473 125 44 2010 619 123 2019 46 2044 40 648 44 2010 46 2045 46 2046 41 59 125 44 424 41 59 91 2005 93 439 492 2047 40 41 123 490 2048 61 2049 40 41 46 2050 60 2051 44 2052 62 40 41 46 2053 40 2054 58 473 41 46 2055 60 2056 62 40 41 59 2019 46 2057 40 2058 46 2059 40 2060 40 2009 46 2061 41 44 648 41 44 2019 46 2062 60 2063 62 40 40 41 619 2048 46 2064 40 418 2065 40 41 44 418 2009 123 2061 61 424 44 2066 61 648 125 41 41 46 2067 41 59 2019 46 2057 40 2058 46 2059 40 2060 40 2009 46 2068 41 44 648 41 44 2019 46 2062 60 2063 62 40 40 41 619 2048 46 2064 40 418 2065 40 41 44 418 2009 123 2061 61 648 44 2068 61 424 125 41 41 46 2067 41 59 125 91 2005 93 439 492 2069 40 41 123 490 2070 61 2071 40 41 46 2072 60 2073 44 2074 62 40 41 46 2075 40 2076 58 473 41 46 2077 60 2078 62 40 41 59 490 2079 61 2070 46 2080 40 418 2081 40 41 44 418 2009 123 2082 61 473 44 2083 61 648 44 2084 61 648 44 2085 61 648 125 41 59 2019 46 2086 40 64 648 43 2002 43 64 648 648 648 43 2002 43 64 648 44 2079 46 2087 46 2088 41 59 125 91 2005 93 439 492 2089 40 41 619 2007 40 2008 619 123 2008 46 2033 40 648 44 2090 619 123 2090 46 2091 60 461 62 40 648 41 46 2092 40 41 59 2090 46 2091 60 461 62 40 648 41 59 2090 46 2091 60 404 62 40 648 41 59 2090 46 2091 60 404 63 62 40 648 41 59 125 41 59 125 44 418 2009 123 2093 61 380 125 44 2010 619 123 2019 46 2094 40 648 44 2010 46 2095 46 2096 41 59 2019 46 2097 40 648 44 2010 46 2095 46 2096 41 59 2019 46 2097 40 648 44 2010 46 2095 46 2096 41 59 2019 46 2097 40 648 44 2010 46 2095 46 2096 41 59 125 44 2018 619 123 490 2098 61 2018 46 2099 40 648 41 59 2019 46 302 40 2098 46 2100 40 648 41 46 2101 41 59 2019 46 304 40 2098 46 2100 40 648 41 46 2101 41 59 2019 46 302 40 2098 46 2100 40 648 41 46 2101 41 59 2019 46 304 40 2098 46 2100 40 648 41 46 2101 41 59 125 41 59 91 2005 93 439 492 2102 40 41 619 2007 40 2008 619 123 2008 46 2033 40 648 44 2103 619 123 2103 46 2104 60 461 62 40 648 41 46 2105 40 41 59 2103 46 2104 60 461 62 40 648 41 59 2103 46 2104 60 404 62 40 648 41 59 2103 46 2104 60 404 63 62 40 648 41 59 125 41 59 125 44 418 2009 123 2106 61 473 125 44 2010 619 123 2019 46 2107 40 648 44 2010 46 2108 46 2109 41 59 2019 46 2107 40 648 44 2010 46 2108 46 2109 41 59 2019 46 2107 40 648 44 2010 46 2108 46 2109 41 59 2019 46 2107 40 648 44 2010 46 2108 46 2109 41 59 125 44 2018 619 123 490 2110 61 2018 46 2111 40 648 41 59 2019 46 302 40 2110 46 2112 40 648 41 46 2113 41 59 2019 46 304 40 2110 46 2112 40 648 41 46 2113 41 59 2019 46 302 40 2110 46 2112 40 648 41 46 2113 41 59 2019 46 304 40 2110 46 2112 40 648 41 46 2113 41 59 125 41 59 91 2005 93 439 492 2114 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2116 60 404 62 40 648 41 59 2115 46 2116 60 404 62 40 648 41 46 2117 40 648 41 59 125 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 2019 46 2121 40 648 44 2018 46 2122 40 648 41 46 2123 40 648 41 46 2124 40 41 41 41 59 91 2005 93 439 492 2125 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2126 40 648 41 59 125 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 2019 46 2121 40 648 44 2018 46 2122 40 648 41 46 2124 40 41 41 41 59 91 2005 93 439 492 2127 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2128 40 648 41 44 418 2009 123 2129 61 473 125 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2130 61 2018 46 2122 40 648 41 59 2019 46 2131 40 2130 46 2132 40 2133 46 2134 41 41 59 2019 46 2121 40 648 44 2130 46 2135 40 41 41 59 2019 46 2136 40 2130 46 2137 40 41 41 59 2019 46 2136 40 2130 46 2138 40 41 41 59 2019 46 2136 40 2130 46 2139 40 41 41 59 125 41 59 91 2005 93 439 492 2140 40 41 123 490 2141 61 418 2009 123 2142 61 648 44 2143 61 648 125 59 341 461 2144 61 648 59 2007 40 2008 619 2008 46 2033 40 2144 41 44 2141 44 2010 619 2019 46 2118 40 461 46 2145 40 648 44 2141 46 2146 44 648 41 44 2010 46 2119 46 2120 41 44 2018 619 2019 46 2147 40 2018 46 2122 40 461 46 2145 40 2141 46 2146 44 648 44 2144 41 41 41 41 59 125 91 2005 93 439 492 2148 40 41 123 490 2149 61 418 2009 123 2150 61 648 125 59 341 461 2151 61 648 59 2007 40 2008 619 2008 46 2033 40 2151 41 44 2149 44 2010 619 2019 46 2152 40 461 46 2153 40 648 44 2149 46 2154 44 648 41 44 2010 46 2119 46 2120 41 44 2018 619 2019 46 2155 40 2018 46 2122 40 461 46 2153 40 2149 46 2154 44 648 44 2151 41 41 41 41 59 125 91 2005 93 439 492 2156 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2157 60 404 62 40 648 41 46 2158 40 41 59 2115 46 2157 60 404 62 40 648 41 46 2159 40 41 59 2115 46 2157 60 404 62 40 648 41 46 2160 40 41 59 2115 46 2157 60 404 62 40 648 41 46 2161 40 41 59 2115 46 2157 60 404 62 40 648 41 46 2162 40 41 59 125 41 44 418 2009 40 41 44 2010 619 123 2019 46 2118 40 64 36 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 125 44 2018 619 123 490 2163 61 2018 46 2122 40 648 41 59 2019 46 2121 40 2164 46 2165 44 2163 46 2123 40 648 41 46 2164 41 59 2019 46 2121 40 2164 46 2166 44 2163 46 2123 40 648 41 46 2164 41 59 2019 46 304 40 2163 46 2123 40 648 41 46 2167 41 59 2019 46 2121 40 2164 46 2168 44 2163 46 2123 40 648 41 46 2164 41 59 2019 46 2121 40 2164 46 2169 44 2163 46 2123 40 648 41 46 2164 41 59 125 41 59 91 2005 93 439 492 2170 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2171 60 345 62 40 648 41 46 2172 40 1503 41 59 2115 46 2171 60 345 62 40 648 41 46 2172 40 1503 44 1502 41 59 125 41 44 418 2009 40 41 44 2010 619 123 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 125 44 2018 619 123 490 2173 61 2018 46 2122 40 648 41 59 2019 46 2121 40 1503 44 2173 46 2123 40 648 41 46 2174 40 41 41 59 2019 46 2175 40 2173 46 2123 40 648 41 46 2176 40 41 41 59 2019 46 2121 40 1503 44 2173 46 2123 40 648 41 46 2174 40 41 41 59 2019 46 2121 40 1502 44 2173 46 2123 40 648 41 46 2176 40 41 41 59 125 41 59 91 2005 93 439 492 2177 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2179 40 648 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2180 61 2018 46 2122 40 648 41 59 2019 46 2121 40 648 44 2180 46 2123 40 648 41 46 2181 40 41 41 59 125 41 59 91 2005 93 439 492 2182 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2183 40 648 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2184 61 2018 46 2122 40 648 41 59 2019 46 2121 40 648 44 2184 46 2123 40 648 41 46 2185 40 41 41 59 125 41 59 91 2005 93 439 492 2186 40 41 619 2007 40 2008 619 123 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2187 40 41 59 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2187 40 380 41 59 125 44 418 2009 40 41 44 2010 619 123 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 125 44 2018 619 123 490 2188 61 2018 46 2122 40 648 41 59 2019 46 304 40 2188 46 2123 40 648 41 46 2189 40 41 41 59 2019 46 302 40 2188 46 2123 40 648 41 46 2189 40 41 41 59 125 41 59 91 2005 93 439 492 2190 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2183 40 648 44 2191 58 473 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2192 61 2018 46 2122 40 648 41 59 2019 46 304 40 2192 46 2123 40 648 41 46 2193 40 41 41 59 125 41 59 91 2005 93 439 492 2194 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2183 40 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2195 61 2018 46 2122 40 648 41 59 2019 46 2020 40 2195 46 2123 40 648 41 46 2196 40 41 41 59 125 41 59 91 2005 93 439 492 2197 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2198 40 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2199 61 2018 46 2122 40 648 41 59 2019 46 2121 40 2200 46 2201 44 2199 46 2123 40 648 41 46 2202 40 41 41 59 125 41 59 91 2005 93 439 492 2203 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 46 2178 60 461 62 40 648 41 46 2204 40 41 44 418 2009 40 41 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 123 490 2205 61 2018 46 2122 40 648 41 59 2019 46 2020 40 2205 46 2123 40 648 41 46 2206 40 41 41 59 125 41 59 91 2005 93 439 492 2207 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 404 62 40 648 41 59 2115 46 2208 40 648 41 59 2115 46 2209 40 418 91 93 123 648 44 648 125 44 648 41 46 2210 40 41 59 2115 46 2209 40 418 91 93 123 648 44 648 125 44 648 41 46 2211 40 648 41 46 2212 40 648 44 648 41 59 125 41 44 418 2009 123 2213 61 380 125 44 2010 619 123 2214 40 64 648 43 2215 46 2216 43 64 648 648 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2119 41 59 125 44 2018 619 2019 46 2121 40 1502 44 2018 46 2122 40 648 41 46 2217 40 41 46 2218 40 41 41 41 59 91 2005 93 439 492 2219 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 404 62 40 648 41 59 2115 46 2220 40 648 41 59 2115 46 2221 40 418 91 93 123 648 44 648 125 44 648 41 46 2222 40 41 59 2115 46 2221 40 418 91 93 123 648 44 648 125 44 648 41 46 2223 40 648 41 46 2224 40 648 44 648 41 59 125 41 44 418 2009 123 2225 61 473 125 44 2010 619 123 2226 40 64 648 43 2227 46 2228 43 64 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2119 41 59 125 44 2018 619 2019 46 2121 40 1502 44 2018 46 2122 40 648 41 46 2217 40 41 46 2218 40 41 41 41 59 91 2005 93 439 492 2229 40 41 619 2007 40 2008 619 123 2008 46 2033 40 648 44 2230 619 123 2230 46 2178 60 404 62 40 648 41 59 2230 46 2178 60 404 62 40 648 41 59 2230 46 2178 60 404 62 40 648 41 59 2230 46 2231 40 648 41 59 125 41 59 2008 46 2033 40 648 44 2230 619 123 2230 46 2178 60 404 62 40 648 41 59 2230 46 2178 60 404 62 40 648 41 59 2230 46 2232 40 648 44 648 41 46 2233 40 648 41 46 2234 40 648 44 648 41 46 2235 40 648 44 648 41 59 125 41 59 125 44 418 2009 123 2236 61 380 125 44 2010 619 123 2237 40 64 648 43 2238 46 2239 43 64 648 648 648 648 648 44 2010 46 2119 41 59 125 44 2018 619 123 125 41 59 91 2005 93 439 492 2240 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 2241 62 40 648 41 46 2242 40 648 41 46 2243 40 648 41 59 125 41 44 418 2009 123 2244 61 380 125 44 2010 619 123 2245 40 64 648 43 2246 46 2247 43 64 648 648 648 648 648 648 648 44 2010 46 2119 41 59 125 44 2018 619 2019 46 2121 40 648 44 2018 46 2122 40 648 41 46 2123 40 648 41 46 2248 40 41 41 41 59 91 2005 93 439 492 2249 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2115 619 123 2115 46 2178 60 404 62 40 648 41 59 2115 46 2178 60 461 62 40 648 41 46 2250 40 1502 41 46 2251 40 41 59 125 41 44 418 2009 123 2252 61 380 125 44 2010 619 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 44 2018 619 2019 46 2121 40 473 44 2018 46 2122 40 648 41 46 2123 40 648 41 46 2253 40 41 41 41 59 91 2005 93 439 492 2254 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 44 418 2009 123 2255 61 461 46 2020 125 44 2010 619 123 2256 40 64 648 43 2257 46 2258 43 64 648 648 648 44 2010 46 2119 41 59 2019 46 2259 40 648 44 2019 46 2260 40 2010 46 2261 41 46 2120 41 59 125 44 2018 619 123 2019 46 2262 40 2018 46 2122 40 648 41 41 59 125 41 59 91 2005 93 439 492 2263 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 44 418 2009 123 2264 61 648 44 2265 61 461 46 2020 125 44 2010 619 123 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2266 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2118 40 648 44 2019 46 2267 40 2010 46 2268 41 46 2120 41 59 125 44 2018 619 123 2019 46 2269 40 2018 46 2122 40 648 41 41 59 125 41 59 91 2005 93 439 492 2270 40 41 619 2007 40 2008 619 2008 46 2033 40 648 41 44 418 2009 123 2271 61 461 46 2020 44 2272 61 648 125 44 2010 619 123 2019 46 2118 40 648 44 2010 46 2119 46 2120 41 59 2019 46 2273 40 648 44 2019 46 2274 40 2010 46 2275 41 46 2120 41 59 125 44 2018 619 123 2019 46 2276 40 2018 46 2122 40 648 41 41 59 125 41 59 91 2005 93 439 492 2277 40 41 619 2007 40 2008 619 2278 46 2279 40 2008 41 44 418 2009 123 2280 61 473 125 44 2010 619 123 2281 40 64 648 44 2010 46 2119 41 59 2019 46 2020 40 2010 46 2282 41 59 125 44 2018 619 2019 46 2020 40 2018 46 2021 40 41 41 44 2283 58 473 41 59 91 2005 93 439 492 2284 40 41 621 619 2019 46 2121 40 2285 46 2286 40 648 44 648 41 44 2019 46 2287 60 2288 62 40 40 41 619 2007 40 2008 619 2008 46 2033 40 648 44 2289 619 123 2289 46 2178 60 404 62 40 648 41 59 2289 46 2178 60 461 62 40 648 41 59 2289 46 2290 40 648 41 59 2289 46 2291 40 2292 619 2292 46 2293 40 41 41 59 125 41 44 418 2009 123 2294 61 380 125 44 2010 619 123 2295 40 64 648 43 2296 46 2297 43 64 648 648 648 648 648 648 648 648 648 648 648 44 2010 46 2119 41 59 125 44 2018 619 123 621 125 41 41 46 2298 41 59 438 431 492 2299 40 2300 2301 41 619 2301 46 2302 40 2303 46 2304 60 2305 44 2306 62 40 41 41 59 438 431 492 2307 40 2300 2301 41 619 2301 46 2302 40 2303 46 2304 60 2308 44 2309 62 40 41 41 59 437 334 2306 58 2310 123 439 2306 40 2311 2312 41 58 320 40 2312 41 123 125 439 431 2313 60 2314 62 2315 40 2316 2317 44 323 2318 41 123 386 40 490 2319 398 320 46 2315 40 2317 44 2318 41 41 123 500 450 2319 59 125 392 40 2317 91 648 93 407 461 2320 41 123 500 450 418 2321 40 648 44 2320 41 59 125 125 125 437 334 2309 58 2322 123 437 457 441 2323 2324 61 478 40 2278 41 46 2325 40 2326 40 2278 46 2279 41 44 418 91 93 123 478 40 2327 41 125 41 33 59 439 2309 40 2328 2329 41 58 320 40 2329 41 123 125 438 431 2330 2331 40 2332 2018 44 2333 2334 41 619 2334 46 2335 464 123 648 619 418 2330 40 2324 41 44 2336 619 320 46 2331 40 2018 44 2334 41 125 59 125 437 334 2337 58 2338 123 437 457 441 2339 2340 61 478 40 2337 41 46 2341 40 2342 40 2343 41 44 418 91 93 123 478 40 2344 41 125 41 59 437 457 441 2339 2345 61 478 40 2337 41 46 2341 40 2342 40 2346 41 44 418 91 93 123 478 40 2347 41 125 41 59 439 431 2348 2349 40 41 619 418 40 2340 41 59 439 431 2348 2350 40 41 619 418 40 2345 41 59 439 457 2351 2343 40 2351 2352 41 619 469 418 2353 40 41 59 439 457 2351 2346 40 2354 2352 41 619 469 418 2353 40 41 59 125 125 
