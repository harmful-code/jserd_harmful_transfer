,id,language,text,smell,tokens,predict_value,predict_class
0,5351,Java,"                        return new TableCell<>() {
                            @Override
                            public void updateItem(final OpenOfferListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                getStyleClass().removeAll(""offer-disabled"");
                                if (item != null) {
                                    if (model.isNotPublished(item)) getStyleClass().add(""offer-disabled"");
                                    setGraphic(new AutoTooltipLabel(model.getTriggerPrice(item)));
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };",0,"[450, 418, 2000, 60, 62, 40, 41, 123, 64, 2001, 439, 492, 2002, 40, 381, 2003, 2004, 44, 324, 362, 41, 123, 463, 46, 2002, 40, 2004, 44, 362, 41, 59, 2005, 40, 41, 46, 2006, 40, 41, 59, 392, 40, 2004, 631, 424, 41, 123, 392, 40, 2007, 46, 2008, 40, 2004, 41, 41, 2005, 40, 41, 46, 2009, 40, 41, 59, 2010, 40, 418, 2011, 40, 2007, 46, 2012, 40, 2004, 41, 41, 41, 59, 125, 360, 123, 2013, 40, 424, 41, 59, 125, 125, 125, 59]",0.0026812204,0
1,27754,Java,"public class LuckyGameData extends GameXmlReader {

    private static final Logger LOGGER = LoggerFactory.getLogger(LuckyGameData.class);

    private final Map<Integer, LuckyGameDataHolder> _luckyGame = new HashMap<>();
    private final AtomicInteger _serverPlay = new AtomicInteger();

    private LuckyGameData() {
        load();
    }

    @Override
    protected Path getSchemaFilePath() {
        return ServerSettings.dataPackDirectory().resolve(""data/xsd/LuckyGameData.xsd"");
    }

    @Override
    public void load() {
        _luckyGame.clear();
        parseDatapackFile(""data/LuckyGameData.xml"");
        LOGGER.info(""Loaded {} lucky game data."", _luckyGame.size() );
        releaseResources();
    }

    @Override
    public void parseDocument(Document doc, File f) {
        forEach(doc, ""list"", listNode -> forEach(listNode, ""luckygame"", rewardNode ->
        {
            final LuckyGameDataHolder holder = new LuckyGameDataHolder();

            forEach(rewardNode, ""common_reward"", commonRewardNode -> forEach(commonRewardNode, ""item"", itemNode ->
            {
                final StatsSet stats = new StatsSet(parseAttributes(itemNode));
                holder.addCommonReward(new ItemChanceHolder(stats.getInt(""id""), stats.getFloat(""chance""), stats.getLong(""count"")));
            }));

            forEach(rewardNode, ""unique_reward"", uniqueRewardNode -> forEach(uniqueRewardNode, ""item"", itemNode ->
            {
                holder.addUniqueReward(new ItemPointHolder(new StatsSet(parseAttributes(itemNode))));
            }));

            forEach(rewardNode, ""modify_reward"", uniqueRewardNode ->
            {
                holder.setMinModifyRewardGame(parseInt(uniqueRewardNode.getAttributes(), ""min_game""));
                holder.setMaxModifyRewardGame(parseInt(uniqueRewardNode.getAttributes(), ""max_game""));
                forEach(uniqueRewardNode, ""item"", itemNode ->
                {
                    final StatsSet stats = new StatsSet(parseAttributes(itemNode));
                    holder.addModifyReward(new ItemChanceHolder(stats.getInt(""id""), stats.getFloat(""chance""), stats.getLong(""count"")));
                });
            });

            _luckyGame.put(parseInt(rewardNode.getAttributes(), ""index""), holder);
        }));
    }

    public LuckyGameDataHolder getLuckyGameDataByIndex(int index) {
        return _luckyGame.get(index);
    }

    public int increaseGame() {
        return _serverPlay.incrementAndGet();
    }

    public static LuckyGameData getInstance() {
        return Singleton.INSTANCE;
    }

    private static class Singleton {

        protected static final LuckyGameData INSTANCE = new LuckyGameData();
    }
}",0,"[439, 334, 2000, 378, 2001, 123, 437, 457, 381, 2002, 2003, 61, 2004, 46, 2005, 40, 2000, 46, 334, 41, 59, 437, 381, 2006, 60, 2007, 44, 2008, 62, 2009, 61, 418, 2010, 60, 62, 40, 41, 59, 437, 381, 2011, 2012, 61, 418, 2011, 40, 41, 59, 437, 2000, 40, 41, 123, 2013, 40, 41, 59, 125, 64, 2014, 438, 2015, 2016, 40, 41, 123, 450, 2017, 46, 2018, 40, 41, 46, 2019, 40, 41, 59, 125, 64, 2014, 439, 492, 2020, 40, 41, 123, 2009, 46, 2021, 40, 41, 59, 2022, 40, 41, 59, 2003, 46, 2023, 40, 44, 2009, 46, 2024, 40, 41, 41, 59, 2025, 40, 41, 59, 125, 64, 2014, 439, 492, 2026, 40, 2027, 2028, 44, 2029, 2030, 41, 123, 2031, 40, 2028, 44, 44, 2032, 45, 62, 2031, 40, 2032, 44, 44, 2033, 45, 62, 123, 381, 2008, 2034, 61, 418, 2008, 40, 41, 59, 2031, 40, 2033, 44, 44, 2035, 45, 62, 2031, 40, 2035, 44, 44, 2036, 45, 62, 123, 381, 2037, 2038, 61, 418, 2037, 40, 2039, 40, 2036, 41, 41, 59, 2034, 46, 2040, 40, 418, 2041, 40, 2038, 46, 2042, 40, 41, 44, 2038, 46, 2043, 40, 41, 44, 2038, 46, 2044, 40, 41, 41, 41, 59, 125, 41, 41, 59, 2031, 40, 2033, 44, 44, 2045, 45, 62, 2031, 40, 2045, 44, 44, 2036, 45, 62, 123, 2034, 46, 2046, 40, 418, 2047, 40, 418, 2048, 40, 2049, 40, 2036, 41, 41, 41, 41, 59, 125, 41, 41, 59, 2031, 40, 2033, 44, 44, 2045, 45, 62, 123, 2034, 46, 2050, 40, 2051, 40, 2045, 46, 2052, 40, 41, 44, 41, 41, 59, 2034, 46, 2053, 40, 2051, 40, 2045, 46, 2052, 40, 41, 44, 41, 41, 59, 2031, 40, 2045, 44, 44, 2036, 45, 62, 123, 381, 2054, 2055, 61, 418, 2054, 40, 2056, 40, 2036, 41, 41, 59, 2034, 46, 2057, 40, 418, 2058, 40, 2055, 46, 2059, 40, 41, 44, 2055, 46, 2060, 40, 41, 44, 2055, 46, 2061, 40, 41, 41, 41, 59, 125, 41, 59, 125, 41, 59, 2009, 46, 2062, 40, 2063, 40, 2033, 46, 2064, 40, 41, 44, 41, 44, 2034, 41, 59, 125, 41, 41, 59, 125, 439, 2008, 2065, 40, 404, 2066, 41, 123, 450, 2009, 46, 2067, 40, 2066, 41, 59, 125, 439, 404, 2068, 40, 41, 123, 450, 2012, 46, 2069, 40, 41, 59, 125, 439, 457, 2000, 2070, 40, 41, 123, 450, 2071, 46, 2072, 59, 125, 437, 457, 334, 2073, 123, 438, 457, 381, 2000, 2074, 61, 418, 2000, 40, 41, 59, 125, 125]",0.08367925,0
2,27605,Java,"public class PlayerInGame extends GameserverReadablePacket {
    private List<String> accounts;

    @Override
    protected void readImpl() {
        int size = readShort();
        accounts = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            accounts.add(readString());
        }
    }

    @Override
    protected void runImpl()  {
        client.getGameServerInfo().addAccounts(accounts);
        for (String account : accounts) {
            AuthController.getInstance().removeAuthedClient(account);
        }
    }
}",0,"[439, 334, 2000, 378, 2001, 123, 437, 2002, 60, 2003, 62, 2004, 59, 64, 2005, 438, 492, 2006, 40, 41, 123, 404, 2007, 61, 2008, 40, 41, 59, 2004, 61, 418, 2009, 60, 62, 40, 2007, 41, 59, 385, 40, 404, 2010, 61, 1500, 59, 2010, 60, 2007, 59, 2010, 637, 41, 123, 2004, 46, 2011, 40, 2012, 40, 41, 41, 59, 125, 125, 64, 2005, 438, 492, 2013, 40, 41, 123, 2014, 46, 2015, 40, 41, 46, 2016, 40, 2004, 41, 59, 385, 40, 2003, 2017, 58, 2004, 41, 123, 2018, 46, 2019, 40, 41, 46, 2020, 40, 2017, 41, 59, 125, 125, 125]",0.002560145,0
3,5324,Java,"                new Callback<>() {
                    @Override
                    public TableCell<OpenOfferListItem, OpenOfferListItem> call(
                            TableColumn<OpenOfferListItem, OpenOfferListItem> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final OpenOfferListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                getStyleClass().removeAll(""offer-disabled"");

                                if (item != null) {
                                    if (model.isNotPublished(item)) getStyleClass().add(""offer-disabled"");
                                    setGraphic(new AutoTooltipLabel(model.getAmount(item)));
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });",0,"[418, 2000, 60, 62, 40, 41, 123, 64, 2001, 439, 2002, 60, 2003, 44, 2003, 62, 2004, 40, 2005, 60, 2003, 44, 2003, 62, 2006, 41, 123, 450, 418, 2002, 60, 62, 40, 41, 123, 64, 2001, 439, 492, 2007, 40, 381, 2003, 2008, 44, 324, 362, 41, 123, 463, 46, 2007, 40, 2008, 44, 362, 41, 59, 2009, 40, 41, 46, 2010, 40, 41, 59, 392, 40, 2008, 631, 424, 41, 123, 392, 40, 2011, 46, 2012, 40, 2008, 41, 41, 2009, 40, 41, 46, 2013, 40, 41, 59, 2014, 40, 418, 2015, 40, 2011, 46, 2016, 40, 2008, 41, 41, 41, 59, 125, 360, 123, 2017, 40, 424, 41, 59, 125, 125, 125, 59, 125, 125, 41, 59]",0.0010279538,0
4,32270,Java,"    public static class WaitI implements LInstruction{
        public int value;

        public float curTime;
        public double wait;
        public long frameId;

        public WaitI(int value){
            this.value = value;
        }

        public WaitI(){

        }

        @Override
        public void run(LExecutor exec){
            if(curTime >= exec.num(value)){
                curTime = 0f;
            }else{
                //skip back to self.
                exec.var(varCounter).numval --;
            }

            if(Core.graphics.getFrameId() != frameId){
                curTime += Time.delta / 60f;
                frameId = Core.graphics.getFrameId();
            }
        }
    }",0,"[439, 457, 334, 2000, 395, 2001, 123, 439, 404, 2002, 59, 439, 384, 2003, 59, 439, 356, 2004, 59, 439, 413, 2005, 59, 439, 2000, 40, 404, 2002, 41, 123, 467, 46, 2002, 61, 2002, 59, 125, 439, 2000, 40, 41, 123, 125, 64, 2006, 439, 492, 2007, 40, 2008, 2009, 41, 123, 392, 40, 2003, 615, 2009, 46, 2010, 40, 2002, 41, 41, 123, 2003, 61, 1500, 59, 125, 360, 123, 2009, 46, 490, 40, 2011, 41, 46, 2012, 629, 59, 125, 392, 40, 2013, 46, 2014, 46, 2015, 40, 41, 631, 2005, 41, 123, 2003, 636, 2016, 46, 2017, 47, 1503, 59, 2005, 61, 2013, 46, 2014, 46, 2015, 40, 41, 59, 125, 125, 125]",0.0023213497,0
5,5342,Java,"                new Callback<>() {
                    @Override
                    public TableCell<OpenOfferListItem, OpenOfferListItem> call(
                            TableColumn<OpenOfferListItem, OpenOfferListItem> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final OpenOfferListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                getStyleClass().removeAll(""offer-disabled"");

                                if (item != null) {
                                    if (model.isNotPublished(item)) getStyleClass().add(""offer-disabled"");
                                    setGraphic(new AutoTooltipLabel(model.getPaymentMethod(item)));
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });",0,"[418, 2000, 60, 62, 40, 41, 123, 64, 2001, 439, 2002, 60, 2003, 44, 2003, 62, 2004, 40, 2005, 60, 2003, 44, 2003, 62, 2006, 41, 123, 450, 418, 2002, 60, 62, 40, 41, 123, 64, 2001, 439, 492, 2007, 40, 381, 2003, 2008, 44, 324, 362, 41, 123, 463, 46, 2007, 40, 2008, 44, 362, 41, 59, 2009, 40, 41, 46, 2010, 40, 41, 59, 392, 40, 2008, 631, 424, 41, 123, 392, 40, 2011, 46, 2012, 40, 2008, 41, 41, 2009, 40, 41, 46, 2013, 40, 41, 59, 2014, 40, 418, 2015, 40, 2011, 46, 2016, 40, 2008, 41, 41, 41, 59, 125, 360, 123, 2017, 40, 424, 41, 59, 125, 125, 125, 59, 125, 125, 41, 59]",0.0010279538,0
6,26401,Java,"public final class BuyListData extends GameXmlReader {
    private static final Logger LOGGER = LoggerFactory.getLogger(BuyListData.class);

    private final IntMap<ProductList> buyLists = new HashIntMap<>();

    private BuyListData() {
    }

    @Override
    protected Path getSchemaFilePath() {
        return ServerSettings.dataPackDirectory().resolve(""data/xsd/buylist.xsd"");
    }

    @Override
    public synchronized void load() {
        buyLists.clear();
        parseDatapackDirectory(""data/buylists"", false);
        if (GeneralSettings.loadCustomBuyList()) {
            parseDatapackDirectory(""data/buylists/custom"", false);
        }
        releaseResources();

        LOGGER.info(""Loaded {} BuyLists."", buyLists.size());

        getDAO(BuyListDAO.class).findAll().forEach(info -> {
            final var list = getBuyList(info.getId());
            if(isNull(list)) {
                LOGGER.warn(""BuyList found in database but not loaded from xml! BuyListId: {}"", info.getId());
                return;
            }

            final Product product = list.getProductByItemId(info.getItemId());
            if (isNull(product)) {
                LOGGER.warn(""ItemId found in database but not loaded from xml! BuyListId: {} item id {}"", info.getId(), info.getItemId());
                return;
            }

            product.updateInfo(info);
        });
    }

    @Override
    public void parseDocument(Document doc, File f) {
        try {
            final int buyListId = Integer.parseInt(f.getName().replaceAll("".xml"", """"));
            forEach(doc, ""list"", (list) ->
            {
                final int defaultBaseTax = parseInt(list.getAttributes(), ""baseTax"", 0);
                final ProductList buyList = new ProductList(buyListId);
                forEach(list, (node) ->
                {
                    switch (node.getNodeName()) {
                        case ""item"": {
                            final NamedNodeMap attrs = node.getAttributes();

                            final int itemId = parseInt(attrs, ""id"");
                            final ItemTemplate item = ItemEngine.getInstance().getTemplate(itemId);
                            if (item != null) {
                                final long price = parseLong(attrs, ""price"", -1L);
                                final long restockDelay = parseLong(attrs, ""restock_delay"", -1L);
                                final long count = parseLong(attrs, ""count"", -1L);
                                final int baseTax = parseInt(attrs, ""baseTax"", defaultBaseTax);

                                buyList.addProduct(new Product(buyListId, item, price, restockDelay, count, baseTax));
                            } else {
                                LOGGER.warn(""Item not found. BuyList:"" + buyListId + "" ItemID:"" + itemId + "" File:"" + f);
                            }
                            break;
                        }
                        case ""npcs"": {
                            forEach(node, ""npc"", (npcNode) -> buyList.addAllowedNpc(Integer.parseInt(npcNode.getTextContent())));
                            break;
                        }
                    }
                });
                buyLists.put(buyListId, buyList);
            });
        } catch (Exception e) {
            LOGGER.warn(""Failed to load buyList data from xml File:"" + f.getName(), e);
        }
    }

    public ProductList getBuyList(int listId) {
        return buyLists.get(listId);
    }

    public static void init() {
        getInstance().load();
    }

    public static BuyListData getInstance() {
        return Singleton.INSTANCE;
    }

    private static class Singleton {
        private static final BuyListData INSTANCE = new BuyListData();
    }
}",0,"[439, 381, 334, 2000, 378, 2001, 123, 437, 457, 381, 2002, 2003, 61, 2004, 46, 2005, 40, 2000, 46, 334, 41, 59, 437, 381, 2006, 60, 2007, 62, 2008, 61, 418, 2009, 60, 62, 40, 41, 59, 437, 2000, 40, 41, 123, 125, 64, 2010, 438, 2011, 2012, 40, 41, 123, 450, 2013, 46, 2014, 40, 41, 46, 2015, 40, 41, 59, 125, 64, 2010, 439, 465, 492, 2016, 40, 41, 123, 2008, 46, 2017, 40, 41, 59, 2018, 40, 44, 380, 41, 59, 392, 40, 2019, 46, 2020, 40, 41, 41, 123, 2018, 40, 44, 380, 41, 59, 125, 2021, 40, 41, 59, 2003, 46, 2022, 40, 44, 2008, 46, 2023, 40, 41, 41, 59, 2024, 40, 2025, 46, 334, 41, 46, 2026, 40, 41, 46, 2027, 40, 2022, 45, 62, 123, 381, 490, 411, 61, 2028, 40, 2022, 46, 2029, 40, 41, 41, 59, 392, 40, 2030, 40, 411, 41, 41, 123, 2003, 46, 2031, 40, 44, 2022, 46, 2029, 40, 41, 41, 59, 450, 59, 125, 381, 2032, 2033, 61, 411, 46, 2034, 40, 2022, 46, 2035, 40, 41, 41, 59, 392, 40, 2030, 40, 2033, 41, 41, 123, 2003, 46, 2036, 40, 44, 2022, 46, 2029, 40, 41, 44, 2022, 46, 2035, 40, 41, 41, 59, 450, 59, 125, 2033, 46, 2037, 40, 2022, 41, 59, 125, 41, 59, 125, 64, 2010, 439, 492, 2038, 40, 2039, 2040, 44, 2041, 2042, 41, 123, 474, 123, 381, 404, 2043, 61, 2044, 46, 2045, 40, 2042, 46, 2046, 40, 41, 46, 2047, 40, 44, 41, 41, 59, 2048, 40, 2040, 44, 44, 40, 411, 41, 45, 62, 123, 381, 404, 2049, 61, 2045, 40, 411, 46, 2050, 40, 41, 44, 44, 1500, 41, 59, 381, 2007, 2051, 61, 418, 2007, 40, 2043, 41, 59, 2048, 40, 411, 44, 40, 2052, 41, 45, 62, 123, 464, 40, 2052, 46, 2053, 40, 41, 41, 123, 328, 58, 123, 381, 2054, 2055, 61, 2052, 46, 2050, 40, 41, 59, 381, 404, 2056, 61, 2045, 40, 2055, 44, 41, 59, 381, 2057, 2058, 61, 2059, 46, 2060, 40, 41, 46, 2061, 40, 2056, 41, 59, 392, 40, 2058, 631, 424, 41, 123, 381, 413, 2062, 61, 2063, 40, 2055, 44, 44, 45, 1501, 41, 59, 381, 413, 2064, 61, 2063, 40, 2055, 44, 44, 45, 1501, 41, 59, 381, 413, 2065, 61, 2063, 40, 2055, 44, 44, 45, 1501, 41, 59, 381, 404, 2066, 61, 2045, 40, 2055, 44, 44, 2049, 41, 59, 2051, 46, 2067, 40, 418, 2068, 40, 2043, 44, 2058, 44, 2062, 44, 2064, 44, 2065, 44, 2066, 41, 41, 59, 125, 360, 123, 2003, 46, 2069, 40, 43, 2043, 43, 43, 2056, 43, 43, 2042, 41, 59, 125, 325, 59, 125, 328, 58, 123, 2048, 40, 2052, 44, 44, 40, 2070, 41, 45, 62, 2051, 46, 2071, 40, 2044, 46, 2045, 40, 2070, 46, 2072, 40, 41, 41, 41, 41, 59, 325, 59, 125, 125, 125, 41, 59, 2008, 46, 2073, 40, 2043, 44, 2051, 41, 59, 125, 41, 59, 125, 329, 40, 2074, 2075, 41, 123, 2003, 46, 2076, 40, 43, 2042, 46, 2077, 40, 41, 44, 2075, 41, 59, 125, 125, 439, 2007, 2078, 40, 404, 2079, 41, 123, 450, 2008, 46, 2080, 40, 2079, 41, 59, 125, 439, 457, 492, 2081, 40, 41, 123, 2082, 40, 41, 46, 2016, 40, 41, 59, 125, 439, 457, 2000, 2083, 40, 41, 123, 450, 2084, 46, 2085, 59, 125, 437, 457, 334, 2086, 123, 437, 457, 381, 2000, 2087, 61, 418, 2000, 40, 41, 59, 125, 125]",0.25064352,0
7,32257,Java,"    public static class DrawI implements LInstruction{
        public byte type;
        public int target;
        public int x, y, p1, p2, p3, p4;

        public DrawI(byte type, int target, int x, int y, int p1, int p2, int p3, int p4){
            this.type = type;
            this.target = target;
            this.x = x;
            this.y = y;
            this.p1 = p1;
            this.p2 = p2;
            this.p3 = p3;
            this.p4 = p4;
        }

        public DrawI(){
        }

        @Override
        public void run(LExecutor exec){
            //graphics on headless servers are useless.
            if(Vars.headless) return;

            int num1 = exec.numi(p1);

            if(type == LogicDisplay.commandImage){
                num1 = exec.obj(p1) instanceof UnlockableContent u ? u.iconId : 0;
            }

            //add graphics calls, cap graphics buffer size
            if(exec.graphicsBuffer.size < maxGraphicsBuffer){
                exec.graphicsBuffer.add(DisplayCmd.get(type, packSign(exec.numi(x)), packSign(exec.numi(y)), packSign(num1), packSign(exec.numi(p2)), packSign(exec.numi(p3)), packSign(exec.numi(p4))));
            }
        }

        static int packSign(int value){
            return (Math.abs(value) & 0b0111111111) | (value < 0 ? 0b1000000000 : 0);
        }
    }",0,"[439, 457, 334, 2000, 395, 2001, 123, 439, 326, 2002, 59, 439, 404, 2003, 59, 439, 404, 2004, 44, 2005, 44, 2006, 44, 2007, 44, 2008, 44, 2009, 59, 439, 2000, 40, 326, 2002, 44, 404, 2003, 44, 404, 2004, 44, 404, 2005, 44, 404, 2006, 44, 404, 2007, 44, 404, 2008, 44, 404, 2009, 41, 123, 467, 46, 2002, 61, 2002, 59, 467, 46, 2003, 61, 2003, 59, 467, 46, 2004, 61, 2004, 59, 467, 46, 2005, 61, 2005, 59, 467, 46, 2006, 61, 2006, 59, 467, 46, 2007, 61, 2007, 59, 467, 46, 2008, 61, 2008, 59, 467, 46, 2009, 61, 2009, 59, 125, 439, 2000, 40, 41, 123, 125, 64, 2010, 439, 492, 2011, 40, 2012, 2013, 41, 123, 392, 40, 2014, 46, 2015, 41, 450, 59, 404, 2016, 61, 2013, 46, 2017, 40, 2006, 41, 59, 392, 40, 2002, 614, 2018, 46, 2019, 41, 123, 2016, 61, 2013, 46, 2020, 40, 2006, 41, 402, 2021, 2022, 63, 2022, 46, 2023, 58, 1500, 59, 125, 392, 40, 2013, 46, 2024, 46, 2025, 60, 2026, 41, 123, 2013, 46, 2024, 46, 2027, 40, 2028, 46, 2029, 40, 2002, 44, 2030, 40, 2013, 46, 2017, 40, 2004, 41, 41, 44, 2030, 40, 2013, 46, 2017, 40, 2005, 41, 41, 44, 2030, 40, 2016, 41, 44, 2030, 40, 2013, 46, 2017, 40, 2007, 41, 41, 44, 2030, 40, 2013, 46, 2017, 40, 2008, 41, 41, 44, 2030, 40, 2013, 46, 2017, 40, 2009, 41, 41, 41, 41, 59, 125, 125, 457, 404, 2031, 40, 404, 2032, 41, 123, 450, 40, 2033, 46, 2034, 40, 2032, 41, 38, 1500, 41, 124, 40, 2032, 60, 1500, 63, 1500, 58, 1500, 41, 59, 125, 125]",0.03578883,0
8,30507,Java,"				values.put(name, new AnnotationValue(node, new ArrayList<String>(), new ArrayList<Object>(), new ArrayList<Object>(), false) {
					@Override public void setError(String message, int valueIdx) {
						node.addError(message);
					}
					@Override public void setWarning(String message, int valueIdx) {
						node.addWarning(message);
					}
				});",0,"[2000, 46, 2001, 40, 2002, 44, 418, 2003, 40, 2004, 44, 418, 2005, 60, 2006, 62, 40, 41, 44, 418, 2005, 60, 2007, 62, 40, 41, 44, 418, 2005, 60, 2007, 62, 40, 41, 44, 380, 41, 123, 64, 2008, 439, 492, 2009, 40, 2006, 2010, 44, 404, 2011, 41, 123, 2004, 46, 2012, 40, 2010, 41, 59, 125, 64, 2008, 439, 492, 2013, 40, 2006, 2010, 44, 404, 2011, 41, 123, 2004, 46, 2014, 40, 2010, 41, 59, 125, 125, 41, 59]",0.0017353732,0
9,5260,Java,"                        return new TableCell<>() {
                            private Trade trade;
                            private JFXButton warnIconButton, trashIconButton;
                            private ChangeListener<Trade.State> listener;

                            @Override
                            public void updateItem(PendingTradesListItem newItem, boolean empty) {
                                super.updateItem(newItem, empty);
                                if (!empty && newItem != null) {
                                    trade = newItem.getTrade();
                                    listener = (observable, oldValue, newValue) -> update();
                                    trade.stateProperty().addListener(listener);
                                    update();
                                } else {
                                    cleanup();
                                }
                            }

                            private void update() {
                                if (isMaybeInvalidTrade(trade)) {
                                    Text warnIcon = FormBuilder.getMediumSizeIcon(MaterialDesignIcon.ALERT_CIRCLE_OUTLINE);
                                    Text trashIcon = FormBuilder.getMediumSizeIcon(MaterialDesignIcon.ARROW_RIGHT_BOLD_BOX_OUTLINE);
                                    if (trade.isTxChainInvalid()) {
                                        trashIcon.getStyleClass().addAll(""icon"", ""error-icon"");
                                        warnIcon.getStyleClass().addAll(""icon"", ""error-icon"");
                                    } else {
                                        trashIcon.getStyleClass().addAll(""icon"", ""warn-icon"");
                                        warnIcon.getStyleClass().addAll(""icon"", ""warn-icon"");
                                    }

                                    warnIconButton = new JFXButton("""", warnIcon);
                                    warnIconButton.getStyleClass().add(""hidden-icon-button"");
                                    warnIconButton.setTooltip(new Tooltip(Res.get(""portfolio.pending.failedTrade.warningIcon.tooltip"")));
                                    warnIconButton.setOnAction(e -> onShowInfoForInvalidTrade(trade));

                                    trashIconButton = new JFXButton("""", trashIcon);
                                    trashIconButton.getStyleClass().add(""hidden-icon-button"");
                                    trashIconButton.setTooltip(new Tooltip(Res.get(""portfolio.pending.failedTrade.moveTradeToFailedIcon.tooltip"")));
                                    trashIconButton.setOnAction(e -> onMoveInvalidTradeToFailedTrades(trade));

                                    HBox hBox = new HBox();
                                    hBox.setSpacing(0);
                                    hBox.getChildren().addAll(warnIconButton, trashIconButton);
                                    setGraphic(hBox);
                                } else {
                                    cleanup();
                                }

                                updateMoveTradeToFailedColumnState();
                            }

                            private void cleanup() {
                                if (warnIconButton != null) {
                                    warnIconButton.setOnAction(null);
                                }
                                if (trashIconButton != null) {
                                    trashIconButton.setOnAction(null);
                                }
                                if (listener != null && trade != null) {
                                    trade.stateProperty().removeListener(listener);
                                }
                                setGraphic(null);
                            }
                        };",0,"[450, 418, 2000, 60, 62, 40, 41, 123, 437, 2001, 2002, 59, 437, 2003, 2004, 44, 2005, 59, 437, 2006, 60, 2001, 46, 2007, 62, 2008, 59, 64, 2009, 439, 492, 2010, 40, 2011, 2012, 44, 324, 362, 41, 123, 463, 46, 2010, 40, 2012, 44, 362, 41, 59, 392, 40, 33, 362, 605, 2012, 631, 424, 41, 123, 2002, 61, 2012, 46, 2013, 40, 41, 59, 2008, 61, 40, 2014, 44, 2015, 44, 2016, 41, 45, 62, 2017, 40, 41, 59, 2002, 46, 2018, 40, 41, 46, 2019, 40, 2008, 41, 59, 2017, 40, 41, 59, 125, 360, 123, 2020, 40, 41, 59, 125, 125, 437, 492, 2021, 40, 41, 123, 392, 40, 2022, 40, 2002, 41, 41, 123, 2023, 2024, 61, 2025, 46, 2026, 40, 2027, 46, 2028, 41, 59, 2023, 2029, 61, 2025, 46, 2026, 40, 2027, 46, 2030, 41, 59, 392, 40, 2002, 46, 2031, 40, 41, 41, 123, 2029, 46, 2032, 40, 41, 46, 2033, 40, 44, 41, 59, 2024, 46, 2032, 40, 41, 46, 2033, 40, 44, 41, 59, 125, 360, 123, 2029, 46, 2034, 40, 41, 46, 2035, 40, 44, 41, 59, 2024, 46, 2034, 40, 41, 46, 2035, 40, 44, 41, 59, 125, 2004, 61, 418, 2003, 40, 44, 2024, 41, 59, 2004, 46, 2036, 40, 41, 46, 2037, 40, 41, 59, 2004, 46, 2038, 40, 418, 2039, 40, 2040, 46, 2041, 40, 41, 41, 41, 59, 2004, 46, 2042, 40, 2043, 45, 62, 2044, 40, 2002, 41, 41, 59, 2005, 61, 418, 2003, 40, 44, 2029, 41, 59, 2005, 46, 2036, 40, 41, 46, 2037, 40, 41, 59, 2005, 46, 2038, 40, 418, 2039, 40, 2040, 46, 2041, 40, 41, 41, 41, 59, 2005, 46, 2042, 40, 2043, 45, 62, 2045, 40, 2002, 41, 41, 59, 2046, 2047, 61, 418, 2046, 40, 41, 59, 2047, 46, 2048, 40, 1500, 41, 59, 2047, 46, 2049, 40, 41, 46, 2050, 40, 2004, 44, 2005, 41, 59, 2051, 40, 2047, 41, 59, 125, 360, 123, 2052, 40, 41, 59, 125, 2053, 40, 41, 59, 125, 437, 492, 2054, 40, 41, 123, 392, 40, 2004, 631, 424, 41, 123, 2004, 46, 2055, 40, 424, 41, 59, 125, 392, 40, 2005, 631, 424, 41, 123, 2005, 46, 2056, 40, 424, 41, 59, 125, 392, 40, 2008, 631, 424, 605, 2002, 631, 424, 41, 123, 2002, 46, 2057, 40, 41, 46, 2058, 40, 2008, 41, 59, 125, 2059, 40, 424, 41, 59, 125, 125, 59]",0.1204838,0
10,32256,Java,"    public static class DrawFlushI implements LInstruction{
        public int target;

        public DrawFlushI(int target){
            this.target = target;
        }

        public DrawFlushI(){
        }

        @Override
        public void run(LExecutor exec){
            //graphics on headless servers are useless.
            if(Vars.headless) return;

            if(exec.building(target) instanceof LogicDisplayBuild d && d.team == exec.team){
                if(d.commands.size + exec.graphicsBuffer.size < maxDisplayBuffer){
                    for(int i = 0; i < exec.graphicsBuffer.size; i++){
                        d.commands.addLast(exec.graphicsBuffer.items[i]);
                    }
                }
                exec.graphicsBuffer.clear();
            }
        }
    }",0,"[439, 457, 334, 2000, 395, 2001, 123, 439, 404, 2002, 59, 439, 2000, 40, 404, 2002, 41, 123, 467, 46, 2002, 61, 2002, 59, 125, 439, 2000, 40, 41, 123, 125, 64, 2003, 439, 492, 2004, 40, 2005, 2006, 41, 123, 392, 40, 2007, 46, 2008, 41, 450, 59, 392, 40, 2006, 46, 2009, 40, 2002, 41, 402, 2010, 2011, 605, 2011, 46, 2012, 614, 2006, 46, 2012, 41, 123, 392, 40, 2011, 46, 2013, 46, 2014, 43, 2006, 46, 2015, 46, 2014, 60, 2016, 41, 123, 385, 40, 404, 2017, 61, 1500, 59, 2017, 60, 2006, 46, 2015, 46, 2014, 59, 2017, 637, 41, 123, 2011, 46, 2013, 46, 2018, 40, 2006, 46, 2015, 46, 2019, 91, 2017, 93, 41, 59, 125, 125, 2006, 46, 2015, 46, 2020, 40, 41, 59, 125, 125, 125]",0.004027554,0
11,29381,Java,"	public static class TypeTag extends SchroedingerType {
		private static final ConcurrentMap<String, Object> TYPE_TAG_CACHE = new ConcurrentHashMap<String, Object>();
		private static final ConcurrentMap<Class<?>, Field> FIELD_CACHE = new ConcurrentHashMap<Class<?>, Field>();
		private static final Method TYPE_TYPETAG_METHOD;
		
		static {
			Method m = null;
			try {
				m = Permit.getMethod(Type.class, ""getTag"");
			} catch (NoSuchMethodException e) {}
			TYPE_TYPETAG_METHOD = m;
		}
		
		private TypeTag(Object value) {
			super(value);
		}
		
		public static TypeTag typeTag(JCTree o) {
			try {
				return new TypeTag(getFieldCached(FIELD_CACHE, o, ""typetag""));
			} catch (NoSuchFieldException e) {
				throw Javac.sneakyThrow(e);
			}
		}
		
		public static TypeTag typeTag(Type t) {
			if (t == null) return Javac.CTC_VOID;
			try {
				return new TypeTag(getFieldCached(FIELD_CACHE, t, ""tag""));
			} catch (NoSuchFieldException e) {
				if (TYPE_TYPETAG_METHOD == null) throw new IllegalStateException(""Type "" + t.getClass() + "" has neither 'tag' nor getTag()"");
				try {
					return new TypeTag(TYPE_TYPETAG_METHOD.invoke(t));
				} catch (IllegalAccessException ex) {
					throw Javac.sneakyThrow(ex);
				} catch (InvocationTargetException ex) {
					throw Javac.sneakyThrow(ex.getCause());
				}
			}
		}
		
		public static TypeTag typeTag(String identifier) {
			return new TypeTag(getFieldCached(TYPE_TAG_CACHE, Javac.getJavaCompilerVersion() < 8 ? ""com.sun.tools.javac.code.TypeTags"" : ""com.sun.tools.javac.code.TypeTag"", identifier));
		}
	}",0,"[439, 457, 334, 2000, 378, 2001, 123, 437, 457, 381, 2002, 60, 2003, 44, 2004, 62, 2005, 61, 418, 2006, 60, 2003, 44, 2004, 62, 40, 41, 59, 437, 457, 381, 2002, 60, 2007, 60, 63, 62, 44, 2008, 62, 2009, 61, 418, 2006, 60, 2007, 60, 63, 62, 44, 2008, 62, 40, 41, 59, 437, 457, 381, 2010, 2011, 59, 457, 123, 2010, 2012, 61, 424, 59, 474, 123, 2012, 61, 2013, 46, 2014, 40, 2015, 46, 334, 44, 41, 59, 125, 329, 40, 2016, 2017, 41, 123, 125, 2011, 61, 2012, 59, 125, 437, 2000, 40, 2004, 2018, 41, 123, 463, 40, 2018, 41, 59, 125, 439, 457, 2000, 2019, 40, 2020, 2021, 41, 123, 474, 123, 450, 418, 2000, 40, 2022, 40, 2009, 44, 2021, 44, 41, 41, 59, 125, 329, 40, 2023, 2024, 41, 123, 469, 2025, 46, 2026, 40, 2024, 41, 59, 125, 125, 439, 457, 2000, 2019, 40, 2027, 2028, 41, 123, 392, 40, 2028, 614, 424, 41, 450, 2029, 46, 2030, 59, 474, 123, 450, 418, 2000, 40, 2031, 40, 2009, 44, 2028, 44, 41, 41, 59, 125, 329, 40, 2032, 2033, 41, 123, 392, 40, 2011, 614, 424, 41, 469, 418, 2034, 40, 43, 2028, 46, 2035, 40, 41, 43, 41, 59, 474, 123, 450, 418, 2000, 40, 2011, 46, 2036, 40, 2028, 41, 41, 59, 125, 329, 40, 2037, 2038, 41, 123, 469, 2029, 46, 2039, 40, 2038, 41, 59, 125, 329, 40, 2040, 2038, 41, 123, 469, 2029, 46, 2041, 40, 2038, 46, 2042, 40, 41, 41, 59, 125, 125, 125, 439, 457, 2000, 2019, 40, 2003, 2043, 41, 123, 450, 418, 2000, 40, 2044, 40, 2005, 44, 2045, 46, 2046, 40, 41, 60, 1502, 63, 58, 44, 2043, 41, 41, 59, 125, 125]",0.033167593,0
12,30696,Java,"		@java.lang.SuppressWarnings(""all"")
		private static final class ChildBuilderImpl extends SuperBuilderWithDefaultsAndTargetTyping.Child.ChildBuilder<SuperBuilderWithDefaultsAndTargetTyping.Child, SuperBuilderWithDefaultsAndTargetTyping.Child.ChildBuilderImpl> {
			@java.lang.SuppressWarnings(""all"")
			private ChildBuilderImpl() {
			}

			@java.lang.Override
			@java.lang.SuppressWarnings(""all"")
			protected SuperBuilderWithDefaultsAndTargetTyping.Child.ChildBuilderImpl self() {
				return this;
			}

			@java.lang.Override
			@java.lang.SuppressWarnings(""all"")
			public SuperBuilderWithDefaultsAndTargetTyping.Child build() {
				return new SuperBuilderWithDefaultsAndTargetTyping.Child(this);
			}
		}",0,"[64, 2000, 46, 2001, 46, 2002, 40, 41, 437, 457, 381, 334, 2003, 378, 2004, 46, 2005, 46, 2006, 60, 2004, 46, 2005, 44, 2004, 46, 2005, 46, 2003, 62, 123, 64, 2000, 46, 2001, 46, 2002, 40, 41, 437, 2003, 40, 41, 123, 125, 64, 2000, 46, 2001, 46, 2007, 64, 2000, 46, 2001, 46, 2002, 40, 41, 438, 2004, 46, 2005, 46, 2003, 2008, 40, 41, 123, 450, 467, 59, 125, 64, 2000, 46, 2001, 46, 2007, 64, 2000, 46, 2001, 46, 2002, 40, 41, 439, 2004, 46, 2005, 2009, 40, 41, 123, 450, 418, 2004, 46, 2005, 40, 467, 41, 59, 125, 125]",0.0017353673,0
13,27463,Java,"public class KarmaData extends GameXmlReader {
    private static final Logger LOGGER = LoggerFactory.getLogger(KarmaData.class);

    private final Map<Integer, Double> _karmaTable = new HashMap<>();

    private KarmaData() {
        load();
    }

    @Override
    protected Path getSchemaFilePath() {
        return ServerSettings.dataPackDirectory().resolve(""data/xsd/pcKarmaIncrease.xsd"");
    }

    @Override
    public synchronized void load() {
        _karmaTable.clear();
        parseDatapackFile(""data/stats/chars/pcKarmaIncrease.xml"");
        LOGGER.info(""Loaded {} karma modifiers."", _karmaTable.size());
        releaseResources();
    }

    @Override
    public void parseDocument(Document doc, File f) {
        for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {
            if (""pcKarmaIncrease"".equalsIgnoreCase(n.getNodeName())) {
                for (Node d = n.getFirstChild(); d != null; d = d.getNextSibling()) {
                    if (""increase"".equalsIgnoreCase(d.getNodeName())) {
                        final NamedNodeMap attrs = d.getAttributes();
                        final int level = parseInt(attrs, ""lvl"");
                        _karmaTable.put(level, parseDouble(attrs, ""val""));
                    }
                }
            }
        }
    }

    /**
     * @param level
     * @return {@code double} modifier used to calculate karma lost upon death.
     */
    public double getMultiplier(int level) {
        return _karmaTable.get(level);
    }

    public static KarmaData getInstance() {
        return Singleton.INSTANCE;
    }

    private static class Singleton {
        private static final KarmaData INSTANCE = new KarmaData();
    }
}",0,"[439, 334, 2000, 378, 2001, 123, 437, 457, 381, 2002, 2003, 61, 2004, 46, 2005, 40, 2000, 46, 334, 41, 59, 437, 381, 2006, 60, 2007, 44, 2008, 62, 2009, 61, 418, 2010, 60, 62, 40, 41, 59, 437, 2000, 40, 41, 123, 2011, 40, 41, 59, 125, 64, 2012, 438, 2013, 2014, 40, 41, 123, 450, 2015, 46, 2016, 40, 41, 46, 2017, 40, 41, 59, 125, 64, 2012, 439, 465, 492, 2018, 40, 41, 123, 2009, 46, 2019, 40, 41, 59, 2020, 40, 41, 59, 2003, 46, 2021, 40, 44, 2009, 46, 2022, 40, 41, 41, 59, 2023, 40, 41, 59, 125, 64, 2012, 439, 492, 2024, 40, 2025, 2026, 44, 2027, 2028, 41, 123, 385, 40, 2029, 2030, 61, 2026, 46, 2031, 40, 41, 59, 2030, 631, 424, 59, 2030, 61, 2030, 46, 2032, 40, 41, 41, 123, 392, 40, 46, 2033, 40, 2030, 46, 2034, 40, 41, 41, 41, 123, 385, 40, 2029, 2035, 61, 2030, 46, 2031, 40, 41, 59, 2035, 631, 424, 59, 2035, 61, 2035, 46, 2032, 40, 41, 41, 123, 392, 40, 46, 2033, 40, 2035, 46, 2034, 40, 41, 41, 41, 123, 381, 2036, 2037, 61, 2035, 46, 2038, 40, 41, 59, 381, 404, 2039, 61, 2040, 40, 2037, 44, 41, 59, 2009, 46, 2041, 40, 2039, 44, 2042, 40, 2037, 44, 41, 41, 59, 125, 125, 125, 125, 125, 439, 356, 2043, 40, 404, 2044, 41, 123, 450, 2009, 46, 2045, 40, 2044, 41, 59, 125, 439, 457, 2000, 2046, 40, 41, 123, 450, 2047, 46, 2048, 59, 125, 437, 457, 334, 2049, 123, 437, 457, 381, 2000, 2050, 61, 418, 2000, 40, 41, 59, 125, 125]",0.024539229,0
14,30503,Java,"	static class JCAnnotationReflect {
		private static final Field ATTRIBUTE;

		static {
			ATTRIBUTE = Permit.permissiveGetField(JCAnnotation.class, ""attribute"");
		}

		static Attribute.Compound getAttribute(JCAnnotation jcAnnotation) {
			if (ATTRIBUTE != null) {
				try {
					return (Attribute.Compound) ATTRIBUTE.get(jcAnnotation);
				} catch (Exception e) {
					// Ignore
				}
			}
			return null;
		}
		
		static void setAttribute(JCAnnotation jcAnnotation, Attribute.Compound attribute) {
			if (ATTRIBUTE != null) {
				try {
					Permit.set(ATTRIBUTE, jcAnnotation, attribute);
				} catch (Exception e) {
					// Ignore
				}
			}
		}
	}",0,"[457, 334, 2000, 123, 437, 457, 381, 2001, 2002, 59, 457, 123, 2002, 61, 2003, 46, 2004, 40, 2005, 46, 334, 44, 41, 59, 125, 457, 2006, 46, 2007, 2008, 40, 2009, 2010, 41, 123, 392, 40, 2002, 631, 424, 41, 123, 474, 123, 450, 40, 2006, 46, 2007, 41, 2002, 46, 2011, 40, 2010, 41, 59, 125, 329, 40, 2012, 2013, 41, 123, 125, 125, 450, 424, 59, 125, 457, 492, 2014, 40, 2009, 2010, 44, 2006, 46, 2007, 2015, 41, 123, 392, 40, 2002, 631, 424, 41, 123, 474, 123, 2016, 46, 2017, 40, 2002, 44, 2010, 44, 2015, 41, 59, 125, 329, 40, 2018, 2019, 41, 123, 125, 125, 125, 125]",0.0027434141,0
15,5257,Java,"                new Callback<>() {
                    @Override
                    public TableCell<PendingTradesListItem, PendingTradesListItem> call(
                            TableColumn<PendingTradesListItem, PendingTradesListItem> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final PendingTradesListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty)
                                    setGraphic(new AutoTooltipLabel(FormattingUtils.formatPrice(item.getPrice())));
                                else
                                    setGraphic(null);
                            }
                        };
                    }
                });",0,"[418, 2000, 60, 62, 40, 41, 123, 64, 2001, 439, 2002, 60, 2003, 44, 2003, 62, 2004, 40, 2005, 60, 2003, 44, 2003, 62, 2006, 41, 123, 450, 418, 2002, 60, 62, 40, 41, 123, 64, 2001, 439, 492, 2007, 40, 381, 2003, 2008, 44, 324, 362, 41, 123, 463, 46, 2007, 40, 2008, 44, 362, 41, 59, 392, 40, 2008, 631, 424, 605, 33, 362, 41, 2009, 40, 418, 2010, 40, 2011, 46, 2012, 40, 2008, 46, 2013, 40, 41, 41, 41, 41, 59, 360, 2009, 40, 424, 41, 59, 125, 125, 59, 125, 125, 41, 59]",0.001184804,0
16,28507,Java,"public class LongTimeEvent extends Quest {

    private static final Logger LOGGER = LoggerFactory.getLogger(LongTimeEvent.class);

    private final List<NpcSpawn> spawnList = new ArrayList<>();
    private final List<EventDropHolder> dropList = new LinkedList<>();
    private final IntSet itemsToDestroy = new HashIntSet();
    private String name;
    private String startMessage;
    private String endMessage;
    private int enterAnnounceId = -1;
    private DateRange period = DateRange.STARTED_DAY;

    protected LongTimeEvent() {
        super(-1);
        var parser = new EventParser();
        parser.load();

        final var today = LocalDateTime.now();
        if (period.isWithinRange(today)) {
            startEvent();
        } else if (period.isAfter(today)) {
            ThreadPool.schedule(this::startEvent, period.secondsToStart(today), TimeUnit.SECONDS);
            LOGGER.info(""Event {} will be started at {}"", name, period.getStartDate());
        } else {
            destroyItemsOnEnd();
            LOGGER.info(""Event {} has passed... Ignored "",  name);
        }
    }

    protected void startEvent() {
        LOGGER.info(""Event {} active until {}"", name, period.getEndDate());
        dropList.forEach(drop -> EventDropList.getInstance().addGlobalDrop(drop, period));

        final var eventEnd = period.millisToEnd();

        spawnList.forEach(spawn -> AbstractScript.addSpawn(spawn.npcId, spawn.loc.getX(), spawn.loc.getY(), spawn.loc.getZ(), spawn.loc.getHeading(), false, eventEnd, false));

        if(isNotEmpty(startMessage)) {
            Broadcast.toAllOnlinePlayers(startMessage);
            var announce = new EventAnnouncement(period, startMessage);
            AnnouncementsManager.getInstance().addAnnouncement(announce);
            enterAnnounceId = announce.getId();
        }
        ThreadPool.schedule(new ScheduleEnd(), eventEnd);
    }

    private void destroyItemsOnEnd() {
        itemsToDestroy.forEach(itemId -> {
            World.getInstance().forEachPlayer(player -> player.destroyItemByItemId(name, itemId, -1, player, true));
            getDAO(ItemDAO.class).deleteAllItemsById(itemId);
        });
    }

    public boolean isEventPeriod() {
        return period.isWithinRange(LocalDateTime.now());
    }

    protected String getConfigPath() {
        return ""data/extension/"" + getPath() + ""/config.xml"";
    }

    @Override
    public String getHtml(Player player, String fileName) {
        if(!fileName.startsWith(""data/"")) {
            fileName = ""./"" + fileName;
        }
        return super.getHtml(player, fileName);
    }

    private class EventParser extends GameXmlReader {

        @Override
        protected Path getSchemaFilePath() {
            return ServerSettings.dataPackDirectory().resolve(""data/xsd/eventConfig.xsd"");
        }

        @Override
        public void load() {
            parseDatapackFile(getConfigPath());
            releaseResources();
        }

        @Override
        public void parseDocument(Document doc, File f) {
            forEach(doc, ""event"", eventNode -> {
                var attrs = eventNode.getAttributes();
                name = parseString(attrs, ""name"");
                period = DateRange.parse(parseString(attrs, ""start-date""), parseString(attrs, ""end-date""));
                startMessage = parseString(attrs, ""start-message"");
                endMessage = parseString(attrs, ""end-message"");

                final var today = LocalDateTime.now();

                if(period.isWithinRange(today)) {
                    for(var node = eventNode.getFirstChild(); nonNull(node); node = node.getNextSibling()) {
                        switch (node.getNodeName()) {
                            case ""drop"" -> parseDrop(node);
                            case ""spawns"" -> parseSpawns(node);
                        }
                    }
                }

                forEach(eventNode, ""destroy-items-on-end"",
                        destroyNode -> itemsToDestroy.addAll(parseIntSet(destroyNode)));

            });
        }

        private void parseSpawns(Node node) {
            forEach(node, ""spawn"", spawnNode -> {
               final var npcId = parseInt(spawnNode.getAttributes(), ""npc"");

               if(!NpcData.getInstance().existsNpc(npcId)) {
                   LOGGER.warn(""{} event: Npc Id {} not found"", getScriptName(), npcId);
                   return;
               }
               spawnList.add(new NpcSpawn(npcId, parseLocation(spawnNode)));
            });
        }

        private void parseDrop(Node node) {
            forEach(node, ""item"", itemNode -> {
                final var attrs  = itemNode.getAttributes();
                final var id = parseInt(attrs, ""id"");
                final var min = parseInt(attrs, ""min"");
                final var max = parseInt(attrs, ""max"");
                final var chance = parseDouble(attrs, ""chance"");
                final var minLevel = parseInt(attrs, ""min-level"");
                final var maxLevel = parseInt(attrs, ""max-level"");
                final var monsters = parseIntSet(attrs, ""monsters"");

                dropList.add(new EventDropHolder(id, min, max, chance, minLevel, maxLevel, monsters));
            });
        }
    }

    protected static class NpcSpawn {
        protected final Location loc;
        protected final int npcId;

        protected NpcSpawn(int pNpcId, Location spawnLoc) {
            loc = spawnLoc;
            npcId = pNpcId;
        }
    }

    protected class ScheduleEnd implements Runnable {
        @Override
        public void run() {

            destroyItemsOnEnd();

            if(isNotEmpty(endMessage)) {
                Broadcast.toAllOnlinePlayers(endMessage);
            }

            if(enterAnnounceId != -1) {
                AnnouncementsManager.getInstance().deleteAnnouncement(enterAnnounceId);
            }
        }
    }
}",0,"[439, 334, 2000, 378, 2001, 123, 437, 457, 381, 2002, 2003, 61, 2004, 46, 2005, 40, 2000, 46, 334, 41, 59, 437, 381, 2006, 60, 2007, 62, 2008, 61, 418, 2009, 60, 62, 40, 41, 59, 437, 381, 2006, 60, 2010, 62, 2011, 61, 418, 2012, 60, 62, 40, 41, 59, 437, 381, 2013, 2014, 61, 418, 2015, 40, 41, 59, 437, 2016, 2017, 59, 437, 2016, 2018, 59, 437, 2016, 2019, 59, 437, 404, 2020, 61, 45, 1501, 59, 437, 2021, 2022, 61, 2021, 46, 2023, 59, 438, 2000, 40, 41, 123, 463, 40, 45, 1501, 41, 59, 490, 2024, 61, 418, 2025, 40, 41, 59, 2024, 46, 2026, 40, 41, 59, 381, 490, 2027, 61, 2028, 46, 2029, 40, 41, 59, 392, 40, 2022, 46, 2030, 40, 2027, 41, 41, 123, 2031, 40, 41, 59, 125, 360, 392, 40, 2022, 46, 2032, 40, 2027, 41, 41, 123, 2033, 46, 2034, 40, 467, 58, 58, 2035, 44, 2022, 46, 2036, 40, 2027, 41, 44, 2037, 46, 2038, 41, 59, 2003, 46, 2039, 40, 44, 2017, 44, 2022, 46, 2040, 40, 41, 41, 59, 125, 360, 123, 2041, 40, 41, 59, 2003, 46, 2042, 40, 44, 2017, 41, 59, 125, 125, 438, 492, 2043, 40, 41, 123, 2003, 46, 2044, 40, 44, 2017, 44, 2022, 46, 2045, 40, 41, 41, 59, 2011, 46, 2046, 40, 2047, 45, 62, 2048, 46, 2049, 40, 41, 46, 2050, 40, 2047, 44, 2022, 41, 41, 59, 381, 490, 2051, 61, 2022, 46, 2052, 40, 41, 59, 2008, 46, 2046, 40, 2053, 45, 62, 2054, 46, 2055, 40, 2053, 46, 2056, 44, 2053, 46, 2057, 46, 2058, 40, 41, 44, 2053, 46, 2057, 46, 2059, 40, 41, 44, 2053, 46, 2057, 46, 2060, 40, 41, 44, 2053, 46, 2057, 46, 2061, 40, 41, 44, 380, 44, 2051, 44, 380, 41, 41, 59, 392, 40, 2062, 40, 2018, 41, 41, 123, 2063, 46, 2064, 40, 2018, 41, 59, 490, 2065, 61, 418, 2066, 40, 2022, 44, 2018, 41, 59, 2067, 46, 2049, 40, 41, 46, 2068, 40, 2065, 41, 59, 2020, 61, 2065, 46, 2069, 40, 41, 59, 125, 2070, 46, 2071, 40, 418, 2072, 40, 41, 44, 2051, 41, 59, 125, 437, 492, 2073, 40, 41, 123, 2014, 46, 2074, 40, 2075, 45, 62, 123, 2076, 46, 2077, 40, 41, 46, 2078, 40, 2079, 45, 62, 2079, 46, 2080, 40, 2017, 44, 2075, 44, 45, 1501, 44, 2079, 44, 473, 41, 41, 59, 2081, 40, 2082, 46, 334, 41, 46, 2083, 40, 2075, 41, 59, 125, 41, 59, 125, 439, 324, 2084, 40, 41, 123, 450, 2022, 46, 2085, 40, 2086, 46, 2087, 40, 41, 41, 59, 125, 438, 2016, 2088, 40, 41, 123, 450, 43, 2089, 40, 41, 43, 59, 125, 64, 2090, 439, 2016, 2091, 40, 2092, 2093, 44, 2016, 2094, 41, 123, 392, 40, 33, 2094, 46, 2095, 40, 41, 41, 123, 2094, 61, 43, 2094, 59, 125, 450, 463, 46, 2091, 40, 2093, 44, 2094, 41, 59, 125, 437, 334, 2096, 378, 2097, 123, 64, 2090, 438, 2098, 2099, 40, 41, 123, 450, 2100, 46, 2101, 40, 41, 46, 2102, 40, 41, 59, 125, 64, 2090, 439, 492, 2103, 40, 41, 123, 2104, 40, 2088, 40, 41, 41, 59, 2105, 40, 41, 59, 125, 64, 2090, 439, 492, 2106, 40, 2107, 2108, 44, 2109, 2110, 41, 123, 2111, 40, 2108, 44, 44, 2112, 45, 62, 123, 490, 2113, 61, 2112, 46, 2114, 40, 41, 59, 2017, 61, 2115, 40, 2113, 44, 41, 59, 2022, 61, 2021, 46, 2116, 40, 2115, 40, 2113, 44, 41, 44, 2115, 40, 2113, 44, 41, 41, 59, 2018, 61, 2115, 40, 2113, 44, 41, 59, 2019, 61, 2115, 40, 2113, 44, 41, 59, 381, 490, 2117, 61, 2118, 46, 2119, 40, 41, 59, 392, 40, 2022, 46, 2120, 40, 2117, 41, 41, 123, 385, 40, 490, 2121, 61, 2112, 46, 2122, 40, 41, 59, 2123, 40, 2121, 41, 59, 2121, 61, 2121, 46, 2124, 40, 41, 41, 123, 464, 40, 2121, 46, 2125, 40, 41, 41, 123, 328, 45, 62, 2126, 40, 2121, 41, 59, 328, 45, 62, 2127, 40, 2121, 41, 59, 125, 125, 125, 2111, 40, 2112, 44, 44, 2128, 45, 62, 2014, 46, 2129, 40, 2130, 40, 2128, 41, 41, 41, 59, 125, 41, 59, 125, 437, 492, 2131, 40, 2132, 2133, 41, 123, 2134, 40, 2133, 44, 44, 2135, 45, 62, 123, 381, 490, 2136, 61, 2137, 40, 2135, 46, 2138, 40, 41, 44, 41, 59, 392, 40, 33, 2139, 46, 2140, 40, 41, 46, 2141, 40, 2136, 41, 41, 123, 2003, 46, 2142, 40, 44, 2143, 40, 41, 44, 2136, 41, 59, 450, 59, 125, 2008, 46, 2144, 40, 418, 2007, 40, 2136, 44, 2145, 40, 2135, 41, 41, 41, 59, 125, 41, 59, 125, 437, 492, 2146, 40, 2132, 2133, 41, 123, 2147, 40, 2133, 44, 44, 2148, 45, 62, 123, 381, 490, 2149, 61, 2148, 46, 2150, 40, 41, 59, 381, 490, 2151, 61, 2152, 40, 2149, 44, 41, 59, 381, 490, 2153, 61, 2152, 40, 2149, 44, 41, 59, 381, 490, 2154, 61, 2152, 40, 2149, 44, 41, 59, 381, 490, 2155, 61, 2156, 40, 2149, 44, 41, 59, 381, 490, 2157, 61, 2152, 40, 2149, 44, 41, 59, 381, 490, 2158, 61, 2152, 40, 2149, 44, 41, 59, 381, 490, 2159, 61, 2160, 40, 2149, 44, 41, 59, 2011, 46, 2161, 40, 418, 2010, 40, 2151, 44, 2153, 44, 2154, 44, 2155, 44, 2157, 44, 2158, 44, 2159, 41, 41, 59, 125, 41, 59, 125, 125, 438, 457, 334, 2007, 123, 438, 381, 2162, 2163, 59, 438, 381, 404, 2164, 59, 438, 2007, 40, 404, 2165, 44, 2162, 2166, 41, 123, 2163, 61, 2166, 59, 2164, 61, 2165, 59, 125, 125, 438, 334, 2167, 395, 2168, 123, 64, 2090, 439, 492, 2169, 40, 41, 123, 2073, 40, 41, 59, 392, 40, 2170, 40, 2019, 41, 41, 123, 2171, 46, 2172, 40, 2019, 41, 59, 125, 392, 40, 2020, 631, 45, 1501, 41, 123, 2173, 46, 2174, 40, 41, 46, 2175, 40, 2020, 41, 59, 125, 125, 125, 125]",0.90483326,1
17,5326,Java,"                new Callback<>() {
                    @Override
                    public TableCell<OpenOfferListItem, OpenOfferListItem> call(
                            TableColumn<OpenOfferListItem, OpenOfferListItem> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final OpenOfferListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                getStyleClass().removeAll(""offer-disabled"");
                                if (item != null) {
                                    if (model.isNotPublished(item)) getStyleClass().add(""offer-disabled"");
                                    setGraphic(new AutoTooltipLabel(model.getDate(item)));
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });",0,"[418, 2000, 60, 62, 40, 41, 123, 64, 2001, 439, 2002, 60, 2003, 44, 2003, 62, 2004, 40, 2005, 60, 2003, 44, 2003, 62, 2006, 41, 123, 450, 418, 2002, 60, 62, 40, 41, 123, 64, 2001, 439, 492, 2007, 40, 381, 2003, 2008, 44, 324, 362, 41, 123, 463, 46, 2007, 40, 2008, 44, 362, 41, 59, 2009, 40, 41, 46, 2010, 40, 41, 59, 392, 40, 2008, 631, 424, 41, 123, 392, 40, 2011, 46, 2012, 40, 2008, 41, 41, 2009, 40, 41, 46, 2013, 40, 41, 59, 2014, 40, 418, 2015, 40, 2011, 46, 2016, 40, 2008, 41, 41, 41, 59, 125, 360, 123, 2017, 40, 424, 41, 59, 125, 125, 125, 59, 125, 125, 41, 59]",0.0010279538,0
18,29557,Java,"	private static class PostponedNoMethodError implements PostponedError {
		private final ProblemReporter problemReporter;
		private final WeakReference<MessageSend> messageSendRef;
		private final TypeBinding recType;
		private final TypeBinding[] params;
		
		PostponedNoMethodError(ProblemReporter problemReporter, MessageSend messageSend, TypeBinding recType, TypeBinding[] params) {
			this.problemReporter = problemReporter;
			this.messageSendRef = new WeakReference<MessageSend>(messageSend);
			this.recType = recType;
			this.params = params;
		}
		
		public void fire() {
			MessageSend messageSend = messageSendRef.get();
			if (messageSend != null) problemReporter.errorNoMethodFor(messageSend, recType, params);
		}
	}",0,"[437, 457, 334, 2000, 395, 2001, 123, 437, 381, 2002, 2003, 59, 437, 381, 2004, 60, 2005, 62, 2006, 59, 437, 381, 2007, 2008, 59, 437, 381, 2007, 91, 93, 433, 59, 2000, 40, 2002, 2003, 44, 2005, 2009, 44, 2007, 2008, 44, 2007, 91, 93, 433, 41, 123, 467, 46, 2003, 61, 2003, 59, 467, 46, 2006, 61, 418, 2004, 60, 2005, 62, 40, 2009, 41, 59, 467, 46, 2008, 61, 2008, 59, 467, 46, 433, 61, 433, 59, 125, 439, 492, 2010, 40, 41, 123, 2005, 2009, 61, 2006, 46, 2011, 40, 41, 59, 392, 40, 2009, 631, 424, 41, 2003, 46, 2012, 40, 2009, 44, 2008, 44, 433, 41, 59, 125, 125]",0.0022390308,0
19,2748,Java,"@Slf4j
public abstract class WalletService {
    protected final WalletsSetup walletsSetup;
    protected final Preferences preferences;
    protected final FeeService feeService;
    protected final NetworkParameters params;
    private final BisqWalletListener walletEventListener = new BisqWalletListener();
    private final CopyOnWriteArraySet<AddressConfidenceListener> addressConfidenceListeners = new CopyOnWriteArraySet<>();
    private final CopyOnWriteArraySet<TxConfidenceListener> txConfidenceListeners = new CopyOnWriteArraySet<>();
    private final CopyOnWriteArraySet<BalanceListener> balanceListeners = new CopyOnWriteArraySet<>();
    private final WalletChangeEventListener cacheInvalidationListener;
    private final AtomicReference<Multiset<Address>> txOutputAddressCache = new AtomicReference<>();
    private final AtomicReference<SetMultimap<Address, Transaction>> addressToMatchingTxSetCache = new AtomicReference<>();
    @Getter
    protected Wallet wallet;
    @Getter
    protected KeyParameter aesKey;
    @Getter
    protected IntegerProperty chainHeightProperty = new SimpleIntegerProperty();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    WalletService(WalletsSetup walletsSetup,
                  Preferences preferences,
                  FeeService feeService) {
        this.walletsSetup = walletsSetup;
        this.preferences = preferences;
        this.feeService = feeService;

        params = walletsSetup.getParams();

        cacheInvalidationListener = wallet -> {
            txOutputAddressCache.set(null);
            addressToMatchingTxSetCache.set(null);
        };
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void addListenersToWallet() {
        wallet.addCoinsReceivedEventListener(walletEventListener);
        wallet.addCoinsSentEventListener(walletEventListener);
        wallet.addReorganizeEventListener(walletEventListener);
        wallet.addTransactionConfidenceEventListener(walletEventListener);
        wallet.addChangeEventListener(Threading.SAME_THREAD, cacheInvalidationListener);
    }

    public void shutDown() {
        if (wallet != null) {
            wallet.removeCoinsReceivedEventListener(walletEventListener);
            wallet.removeCoinsSentEventListener(walletEventListener);
            wallet.removeReorganizeEventListener(walletEventListener);
            wallet.removeTransactionConfidenceEventListener(walletEventListener);
            wallet.removeChangeEventListener(cacheInvalidationListener);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Package scope Methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    void decryptWallet(@NotNull KeyParameter key) {
        wallet.decrypt(key);
        aesKey = null;
    }

    void encryptWallet(KeyCrypterScrypt keyCrypterScrypt, KeyParameter key) {
        if (this.aesKey != null) {
            log.warn(""encryptWallet called but we have a aesKey already set. "" +
                    ""We decryptWallet with the old key before we apply the new key."");
            decryptWallet(this.aesKey);
        }

        wallet.encrypt(keyCrypterScrypt, key);
        aesKey = key;
    }

    void setAesKey(KeyParameter aesKey) {
        this.aesKey = aesKey;
    }

    abstract String getWalletAsString(boolean includePrivKeys);


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Listener
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addAddressConfidenceListener(AddressConfidenceListener listener) {
        addressConfidenceListeners.add(listener);
    }

    public void removeAddressConfidenceListener(AddressConfidenceListener listener) {
        addressConfidenceListeners.remove(listener);
    }

    public void addTxConfidenceListener(TxConfidenceListener listener) {
        txConfidenceListeners.add(listener);
    }

    public void removeTxConfidenceListener(TxConfidenceListener listener) {
        txConfidenceListeners.remove(listener);
    }

    public void addBalanceListener(BalanceListener listener) {
        balanceListeners.add(listener);
    }

    public void removeBalanceListener(BalanceListener listener) {
        balanceListeners.remove(listener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Checks
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void checkWalletConsistency(Wallet wallet) throws WalletException {
        try {
            checkNotNull(wallet);
            checkState(wallet.isConsistent());
        } catch (Throwable t) {
            t.printStackTrace();
            log.error(t.getMessage());
            throw new WalletException(t);
        }
    }

    public static void verifyTransaction(Transaction transaction) throws TransactionVerificationException {
        try {
            transaction.verify();
        } catch (Throwable t) {
            t.printStackTrace();
            log.error(t.getMessage());
            throw new TransactionVerificationException(t);
        }
    }

    public static void checkAllScriptSignaturesForTx(Transaction transaction) throws TransactionVerificationException {
        for (int i = 0; i < transaction.getInputs().size(); i++) {
            WalletService.checkScriptSig(transaction, transaction.getInputs().get(i), i);
        }
    }

    public static void checkScriptSig(Transaction transaction,
                                      TransactionInput input,
                                      int inputIndex) throws TransactionVerificationException {
        try {
            checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
            input.getScriptSig().correctlySpends(transaction, inputIndex, input.getWitness(), input.getValue(), input.getConnectedOutput().getScriptPubKey(), Script.ALL_VERIFY_FLAGS);
        } catch (Throwable t) {
            t.printStackTrace();
            log.error(t.getMessage());
            throw new TransactionVerificationException(t);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Sign tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void signTx(Wallet wallet,
                              KeyParameter aesKey,
                              Transaction tx)
            throws WalletException, TransactionVerificationException {
        for (int i = 0; i < tx.getInputs().size(); i++) {
            TransactionInput input = tx.getInput(i);
            TransactionOutput connectedOutput = input.getConnectedOutput();
            if (connectedOutput == null) {
                log.error(""connectedOutput is null"");
                continue;
            }
            if (!connectedOutput.isMine(wallet)) {
                log.error(""connectedOutput is not mine"");
                continue;
            }

            signTransactionInput(wallet, aesKey, tx, input, i);
            checkScriptSig(tx, input, i);
        }

        checkWalletConsistency(wallet);
        verifyTransaction(tx);
        printTx(""Signed Tx"", tx);
    }

    public static void signTransactionInput(Wallet wallet,
                                            KeyParameter aesKey,
                                            Transaction tx,
                                            TransactionInput txIn,
                                            int index) {
        KeyBag maybeDecryptingKeyBag = new DecryptingKeyBag(wallet, aesKey);
        if (txIn.getConnectedOutput() != null) {
            try {
                // We assume if it's already signed, it's hopefully got a SIGHASH type that will not invalidate when
                // we sign missing pieces (to check this would require either assuming any signatures are signing
                // standard output types or a way to get processed signatures out of script execution)
                txIn.getScriptSig().correctlySpends(tx, index, txIn.getWitness(), txIn.getValue(), txIn.getConnectedOutput().getScriptPubKey(), Script.ALL_VERIFY_FLAGS);
                log.warn(""Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing."", index);
                return;
            } catch (ScriptException e) {
                // Expected.
            }

            Script scriptPubKey = txIn.getConnectedOutput().getScriptPubKey();
            RedeemData redeemData = txIn.getConnectedRedeemData(maybeDecryptingKeyBag);
            checkNotNull(redeemData, ""Transaction exists in wallet that we cannot redeem: %s"", txIn.getOutpoint().getHash());
            txIn.setScriptSig(scriptPubKey.createEmptyInputScript(redeemData.keys.get(0), redeemData.redeemScript));

            TransactionSigner.ProposedTransaction propTx = new TransactionSigner.ProposedTransaction(tx);
            Transaction partialTx = propTx.partialTx;
            txIn = partialTx.getInput(index);
            if (txIn.getConnectedOutput() != null) {
                // If we don't have a sig we don't do the check to avoid error reports of failed sig checks
                final List<ScriptChunk> chunks = txIn.getConnectedOutput().getScriptPubKey().getChunks();
                if (!chunks.isEmpty() && chunks.get(0).data != null && chunks.get(0).data.length > 0) {
                    try {
                        // We assume if it's already signed, it's hopefully got a SIGHASH type that will not invalidate when
                        // we sign missing pieces (to check this would require either assuming any signatures are signing
                        // standard output types or a way to get processed signatures out of script execution)
                        txIn.getScriptSig().correctlySpends(tx, index, txIn.getWitness(), txIn.getValue(), txIn.getConnectedOutput().getScriptPubKey(), Script.ALL_VERIFY_FLAGS);
                        log.warn(""Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing."", index);
                        return;
                    } catch (ScriptException e) {
                        // Expected.
                    }
                }

                redeemData = txIn.getConnectedRedeemData(maybeDecryptingKeyBag);
                scriptPubKey = txIn.getConnectedOutput().getScriptPubKey();

                checkNotNull(redeemData, ""redeemData must not be null"");
                ECKey pubKey = redeemData.keys.get(0);
                if (pubKey instanceof DeterministicKey)
                    propTx.keyPaths.put(scriptPubKey, (((DeterministicKey) pubKey).getPath()));

                ECKey key;
                if ((key = redeemData.getFullKey()) == null) {
                    log.warn(""No local key found for input {}"", index);
                    return;
                }

                Script inputScript = txIn.getScriptSig();
                byte[] script = redeemData.redeemScript.getProgram();

                if (ScriptPattern.isP2PK(scriptPubKey) || ScriptPattern.isP2PKH(scriptPubKey)) {
                    try {
                        TransactionSignature signature = partialTx.calculateSignature(index, key, script, Transaction.SigHash.ALL, false);
                        inputScript = scriptPubKey.getScriptSigWithSignature(inputScript, signature.encodeToBitcoin(), 0);
                        txIn.setScriptSig(inputScript);
                    } catch (ECKey.KeyIsEncryptedException e1) {
                        throw e1;
                    } catch (ECKey.MissingPrivateKeyException e1) {
                        log.warn(""No private key in keypair for input {}"", index);
                    }
                } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {
                    try {
                        // scriptCode is expected to have the format of a legacy P2PKH output script
                        Script scriptCode = ScriptBuilder.createP2PKHOutputScript(key);
                        Coin value = txIn.getValue();
                        TransactionSignature txSig = tx.calculateWitnessSignature(index, key, aesKey, scriptCode, value,
                                Transaction.SigHash.ALL, false);
                        txIn.setScriptSig(ScriptBuilder.createEmpty());
                        txIn.setWitness(TransactionWitness.redeemP2WPKH(txSig, key));
                    } catch (ECKey.KeyIsEncryptedException e1) {
                        log.error(e1.toString());
                        throw e1;
                    } catch (ECKey.MissingPrivateKeyException e1) {
                        log.warn(""No private key in keypair for input {}"", index);
                    }
                } else {
                    log.error(""Unexpected script type."");
                    throw new RuntimeException(""Unexpected script type."");
                }
            } else {
                log.warn(""Missing connected output, assuming input {} is already signed."", index);
            }
        } else {
            log.error(""Missing connected output, assuming already signed."");
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Dust
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void verifyNonDustTxo(Transaction tx) {
        for (TransactionOutput txo : tx.getOutputs()) {
            Coin value = txo.getValue();
            // OpReturn outputs have value 0
            if (value.isPositive()) {
                checkArgument(Restrictions.isAboveDust(txo.getValue()),
                        ""An output value is below dust limit. Transaction="" + tx);
            }
        }

    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Broadcast tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void broadcastTx(Transaction tx, TxBroadcaster.Callback callback) {
        TxBroadcaster.broadcastTx(wallet, walletsSetup.getPeerGroup(), tx, callback);
    }

    public void broadcastTx(Transaction tx, TxBroadcaster.Callback callback, int timeOut) {
        TxBroadcaster.broadcastTx(wallet, walletsSetup.getPeerGroup(), tx, callback, timeOut);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // TransactionConfidence
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Nullable
    public TransactionConfidence getConfidenceForAddress(Address address) {
        List<TransactionConfidence> transactionConfidenceList = new ArrayList<>();
        if (wallet != null) {
            Set<Transaction> transactions = getAddressToMatchingTxSetMultiset().get(address);
            transactionConfidenceList.addAll(transactions.stream().map(tx ->
                    getTransactionConfidence(tx, address)).collect(Collectors.toList()));
        }
        return getMostRecentConfidence(transactionConfidenceList);
    }

    private SetMultimap<Address, Transaction> getAddressToMatchingTxSetMultiset() {
        return addressToMatchingTxSetCache.updateAndGet(set -> set != null ? set : computeAddressToMatchingTxSetMultimap());
    }

    private SetMultimap<Address, Transaction> computeAddressToMatchingTxSetMultimap() {
        return wallet.getTransactions(false).stream()
                .collect(ImmutableSetMultimap.flatteningToImmutableSetMultimap(
                        Function.identity(),
                        (Function<Transaction, Stream<Address>>) (
                                t -> getOutputsWithConnectedOutputs(t).stream()
                                        .map(WalletService::getAddressFromOutput)
                                        .filter(Objects::nonNull))))
                .inverse();
    }

    @Nullable
    public TransactionConfidence getConfidenceForTxId(String txId) {
        if (wallet != null) {
            Set<Transaction> transactions = wallet.getTransactions(false);
            for (Transaction tx : transactions) {
                if (tx.getTxId().toString().equals(txId))
                    return tx.getConfidence();
            }
        }
        return null;
    }

    @Nullable
    private TransactionConfidence getTransactionConfidence(Transaction tx, Address address) {
        List<TransactionConfidence> transactionConfidenceList = getOutputsWithConnectedOutputs(tx).stream()
                .filter(output -> address != null && address.equals(getAddressFromOutput(output)))
                .flatMap(o -> Stream.ofNullable(o.getParentTransaction()))
                .map(Transaction::getConfidence)
                .collect(Collectors.toList());
        return getMostRecentConfidence(transactionConfidenceList);
    }


    private List<TransactionOutput> getOutputsWithConnectedOutputs(Transaction tx) {
        List<TransactionOutput> transactionOutputs = tx.getOutputs();
        List<TransactionOutput> connectedOutputs = new ArrayList<>();

        // add all connected outputs from any inputs as well
        List<TransactionInput> transactionInputs = tx.getInputs();
        for (TransactionInput transactionInput : transactionInputs) {
            TransactionOutput transactionOutput = transactionInput.getConnectedOutput();
            if (transactionOutput != null) {
                connectedOutputs.add(transactionOutput);
            }
        }

        List<TransactionOutput> mergedOutputs = new ArrayList<>();
        mergedOutputs.addAll(transactionOutputs);
        mergedOutputs.addAll(connectedOutputs);
        return mergedOutputs;
    }

    @Nullable
    private TransactionConfidence getMostRecentConfidence(List<TransactionConfidence> transactionConfidenceList) {
        TransactionConfidence transactionConfidence = null;
        for (TransactionConfidence confidence : transactionConfidenceList) {
            if (confidence != null) {
                if (transactionConfidence == null ||
                        confidence.getConfidenceType().equals(TransactionConfidence.ConfidenceType.PENDING) ||
                        (confidence.getConfidenceType().equals(TransactionConfidence.ConfidenceType.BUILDING) &&
                                transactionConfidence.getConfidenceType().equals(
                                        TransactionConfidence.ConfidenceType.BUILDING) &&
                                confidence.getDepthInBlocks() < transactionConfidence.getDepthInBlocks())) {
                    transactionConfidence = confidence;
                }
            }
        }
        return transactionConfidence;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Balance
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Coin getAvailableBalance() {
        return wallet != null ? wallet.getBalance(Wallet.BalanceType.AVAILABLE) : Coin.ZERO;
    }

    public Coin getEstimatedBalance() {
        return wallet != null ? wallet.getBalance(Wallet.BalanceType.ESTIMATED) : Coin.ZERO;
    }

    public Coin getBalanceForAddress(Address address) {
        return wallet != null ? getBalance(wallet.calculateAllSpendCandidates(), address) : Coin.ZERO;
    }

    protected Coin getBalance(List<TransactionOutput> transactionOutputs, Address address) {
        Coin balance = Coin.ZERO;
        for (TransactionOutput output : transactionOutputs) {
            if (!isDustAttackUtxo(output)) {
                if (isOutputScriptConvertibleToAddress(output) &&
                        address != null &&
                        address.equals(getAddressFromOutput(output)))
                    balance = balance.add(output.getValue());
            }
        }
        return balance;
    }

    protected abstract boolean isDustAttackUtxo(TransactionOutput output);

    public Coin getBalance(TransactionOutput output) {
        return getBalanceForAddress(getAddressFromOutput(output));
    }

    public Coin getTxFeeForWithdrawalPerVbyte() {
        Coin fee = (preferences.isUseCustomWithdrawalTxFee()) ?
                Coin.valueOf(preferences.getWithdrawalTxFeeInVbytes()) :
                feeService.getTxFeePerVbyte();
        log.info(""tx fee = "" + fee.toFriendlyString());
        return fee;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Tx outputs
    ///////////////////////////////////////////////////////////////////////////////////////////

    public int getNumTxOutputsForAddress(Address address) {
        return getTxOutputAddressMultiset().count(address);
    }

    private Multiset<Address> getTxOutputAddressMultiset() {
        return txOutputAddressCache.updateAndGet(set -> set != null ? set : computeTxOutputAddressMultiset());
    }

    private Multiset<Address> computeTxOutputAddressMultiset() {
        return wallet.getTransactions(false).stream()
                .flatMap(t -> t.getOutputs().stream())
                .map(WalletService::getAddressFromOutput)
                .filter(Objects::nonNull)
                .collect(ImmutableMultiset.toImmutableMultiset());
    }

    public boolean isAddressUnused(Address address) {
        return getNumTxOutputsForAddress(address) == 0;
    }

    public boolean isMine(TransactionOutput transactionOutput) {
        return transactionOutput.isMine(wallet);
    }

    // BISQ issue #4039: Prevent dust outputs from being created.
    // Check the outputs of a proposed transaction.  If any are below the dust threshold,
    // add up the dust, log the details, and return the cumulative dust amount.
    public Coin getDust(Transaction proposedTransaction) {
        Coin dust = Coin.ZERO;
        for (TransactionOutput transactionOutput : proposedTransaction.getOutputs()) {
            if (transactionOutput.getValue().isLessThan(Restrictions.getMinNonDustOutput())) {
                dust = dust.add(transactionOutput.getValue());
                log.info(""Dust TXO = {}"", transactionOutput.toString());
            }
        }
        return dust;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Empty complete Wallet
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void emptyBtcWallet(String toAddress,
                               KeyParameter aesKey,
                               ResultHandler resultHandler,
                               ErrorMessageHandler errorMessageHandler)
            throws InsufficientMoneyException, AddressFormatException {
        SendRequest sendRequest = SendRequest.emptyWallet(Address.fromString(params, toAddress));
        sendRequest.fee = Coin.ZERO;
        sendRequest.feePerKb = getTxFeeForWithdrawalPerVbyte().multiply(1000);
        sendRequest.aesKey = aesKey;
        Wallet.SendResult sendResult = wallet.sendCoins(sendRequest);
        printTx(""empty btc wallet"", sendResult.tx);

        // For better redundancy in case the broadcast via BitcoinJ fails we also
        // publish the tx via mempool nodes.
        MemPoolSpaceTxBroadcaster.broadcastTx(sendResult.tx);

        Futures.addCallback(sendResult.broadcastComplete, new FutureCallback<>() {
            @Override
            public void onSuccess(Transaction result) {
                log.info(""emptyBtcWallet onSuccess Transaction="" + result);
                resultHandler.handleResult();
            }

            @Override
            public void onFailure(@NotNull Throwable t) {
                log.error(""emptyBtcWallet onFailure "" + t.toString());
                errorMessageHandler.handleErrorMessage(t.getMessage());
            }
        }, MoreExecutors.directExecutor());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getTxFromSerializedTx(byte[] tx) {
        return new Transaction(params, tx);
    }

    public NetworkParameters getParams() {
        return params;
    }

    public int getBestChainHeight() {
        final BlockChain chain = walletsSetup.getChain();
        return isWalletReady() && chain != null ? chain.getBestChainHeight() : 0;
    }

    public boolean isChainHeightSyncedWithinTolerance() {
        return walletsSetup.isChainHeightSyncedWithinTolerance();
    }

    public Transaction getClonedTransaction(Transaction tx) {
        return new Transaction(params, tx.bitcoinSerialize());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Wallet delegates to avoid direct access to wallet outside the service class
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addChangeEventListener(WalletChangeEventListener listener) {
        wallet.addChangeEventListener(Threading.USER_THREAD, listener);
    }

    public void removeChangeEventListener(WalletChangeEventListener listener) {
        wallet.removeChangeEventListener(listener);
    }

    public void addNewBestBlockListener(NewBestBlockListener listener) {
        final BlockChain chain = walletsSetup.getChain();
        if (isWalletReady() && chain != null)
            chain.addNewBestBlockListener(listener);
    }

    public void removeNewBestBlockListener(NewBestBlockListener listener) {
        final BlockChain chain = walletsSetup.getChain();
        if (isWalletReady() && chain != null)
            chain.removeNewBestBlockListener(listener);
    }

    public boolean isWalletReady() {
        return wallet != null;
    }

    public DeterministicSeed getKeyChainSeed() {
        return wallet.getKeyChainSeed();
    }

    @Nullable
    public KeyCrypter getKeyCrypter() {
        return wallet.getKeyCrypter();
    }

    public boolean checkAESKey(KeyParameter aesKey) {
        return wallet.checkAESKey(aesKey);
    }

    @Nullable
    public DeterministicKey findKeyFromPubKey(byte[] pubKey) {
        return (DeterministicKey) wallet.findKeyFromPubKey(pubKey);
    }

    public boolean isEncrypted() {
        return wallet.isEncrypted();
    }

    public List<Transaction> getRecentTransactions(int numTransactions, boolean includeDead) {
        // Returns a list ordered by tx.getUpdateTime() desc
        return wallet.getRecentTransactions(numTransactions, includeDead);
    }

    public int getLastBlockSeenHeight() {
        return wallet.getLastBlockSeenHeight();
    }

    /**
     * Check if there are more than 20 unconfirmed transactions in the chain right now.
     *
     * @return true when queue is full
     */
    public boolean isUnconfirmedTransactionsLimitHit() {
        // For published delayed payout transactions we do not receive the tx confidence
        // so we cannot check if it is confirmed so we ignore it for that check. The check is any arbitrarily
        // using a limit of 20, so we don't need to be exact here. Should just reduce the likelihood of issues with
        // the too long chains of unconfirmed transactions.
        return getTransactions(false).stream()
                .filter(tx -> tx.getLockTime() == 0)
                .filter(Transaction::isPending)
                .count() > 20;
    }

    public Set<Transaction> getTransactions(boolean includeDead) {
        return wallet.getTransactions(includeDead);
    }

    public Coin getBalance(@SuppressWarnings(""SameParameterValue"") Wallet.BalanceType balanceType) {
        return wallet.getBalance(balanceType);
    }

    @Nullable
    public Transaction getTransaction(Sha256Hash hash) {
        return wallet.getTransaction(hash);
    }

    @Nullable
    public Transaction getTransaction(String txId) {
        if (txId == null) {
            return null;
        }
        return getTransaction(Sha256Hash.wrap(txId));
    }


    public boolean isTransactionOutputMine(TransactionOutput transactionOutput) {
        return transactionOutput.isMine(wallet);
    }

   /* public boolean isTxOutputMine(TxOutput txOutput) {
        try {
            Script script = txOutput.getScript();
            if (script.isSentToRawPubKey()) {
                byte[] pubkey = script.getPubKey();
                return wallet.isPubKeyMine(pubkey);
            }
            if (script.isPayToScriptHash()) {
                return wallet.isPayToScriptHashMine(script.getPubKeyHash());
            } else {
                byte[] pubkeyHash = script.getPubKeyHash();
                return wallet.isPubKeyHashMine(pubkeyHash);
            }
        } catch (ScriptException e) {
            // Just means we didn't understand the output of this transaction: ignore it.
            log.debug(""Could not parse tx output script: {}"", e.toString());
            return false;
        }
    }*/

    public Coin getValueSentFromMeForTransaction(Transaction transaction) throws ScriptException {
        return transaction.getValueSentFromMe(wallet);
    }

    public Coin getValueSentToMeForTransaction(Transaction transaction) throws ScriptException {
        return transaction.getValueSentToMe(wallet);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Util
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void printTx(String tracePrefix, Transaction tx) {
        log.info(""\n"" + tracePrefix + "":\n"" + tx.toString());
    }

    public static boolean isOutputScriptConvertibleToAddress(TransactionOutput output) {
        return ScriptPattern.isP2PKH(output.getScriptPubKey()) ||
                ScriptPattern.isP2SH(output.getScriptPubKey()) ||
                ScriptPattern.isP2WH(output.getScriptPubKey());
    }

    @Nullable
    public static Address getAddressFromOutput(TransactionOutput output) {
        return isOutputScriptConvertibleToAddress(output) ?
                output.getScriptPubKey().getToAddress(Config.baseCurrencyNetworkParameters()) : null;
    }

    @Nullable
    public static String getAddressStringFromOutput(TransactionOutput output) {
        return isOutputScriptConvertibleToAddress(output) ?
                output.getScriptPubKey().getToAddress(Config.baseCurrencyNetworkParameters()).toString() : null;
    }


    /**
     * @param serializedTransaction The serialized transaction to be added to the wallet
     * @return The transaction we added to the wallet, which is different as the one we passed as argument!
     * @throws VerificationException
     */
    public static Transaction maybeAddTxToWallet(byte[] serializedTransaction,
                                                 Wallet wallet,
                                                 TransactionConfidence.Source source) throws VerificationException {
        Transaction tx = new Transaction(wallet.getParams(), serializedTransaction);
        Transaction walletTransaction = wallet.getTransaction(tx.getTxId());

        if (walletTransaction == null) {
            // We need to recreate the transaction otherwise we get a null pointer...
            tx.getConfidence(Context.get()).setSource(source);
            //wallet.maybeCommitTx(tx);
            wallet.receivePending(tx, null, true);
            return tx;
        } else {
            return walletTransaction;
        }
    }

    public static Transaction maybeAddNetworkTxToWallet(byte[] serializedTransaction,
                                                        Wallet wallet) throws VerificationException {
        return maybeAddTxToWallet(serializedTransaction, wallet, TransactionConfidence.Source.NETWORK);
    }

    public static Transaction maybeAddSelfTxToWallet(Transaction transaction,
                                                     Wallet wallet) throws VerificationException {
        return maybeAddTxToWallet(transaction, wallet, TransactionConfidence.Source.SELF);
    }

    public static Transaction maybeAddTxToWallet(Transaction transaction,
                                                 Wallet wallet,
                                                 TransactionConfidence.Source source) throws VerificationException {
        return maybeAddTxToWallet(transaction.bitcoinSerialize(), wallet, source);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // bisqWalletEventListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    public class BisqWalletListener implements WalletCoinsReceivedEventListener,
            WalletCoinsSentEventListener,
            WalletReorganizeEventListener,
            TransactionConfidenceEventListener {
        @Override
        public void onCoinsReceived(Wallet wallet, Transaction tx, Coin prevBalance, Coin newBalance) {
            notifyBalanceListeners(tx);
        }

        @Override
        public void onCoinsSent(Wallet wallet, Transaction tx, Coin prevBalance, Coin newBalance) {
            notifyBalanceListeners(tx);
        }

        @Override
        public void onReorganize(Wallet wallet) {
            log.warn(""onReorganize "");
        }

        @Override
        public void onTransactionConfidenceChanged(Wallet wallet, Transaction tx) {
            for (AddressConfidenceListener addressConfidenceListener : addressConfidenceListeners) {
                TransactionConfidence confidence = getTransactionConfidence(tx, addressConfidenceListener.getAddress());
                addressConfidenceListener.onTransactionConfidenceChanged(confidence);
            }
            txConfidenceListeners.stream()
                    .filter(txConfidenceListener -> tx != null &&
                            tx.getTxId().toString() != null &&
                            txConfidenceListener != null &&
                            tx.getTxId().toString().equals(txConfidenceListener.getTxId()))
                    .forEach(txConfidenceListener ->
                            txConfidenceListener.onTransactionConfidenceChanged(tx.getConfidence()));
        }

        void notifyBalanceListeners(Transaction tx) {
            for (BalanceListener balanceListener : balanceListeners) {
                Coin balance;
                if (balanceListener.getAddress() != null)
                    balance = getBalanceForAddress(balanceListener.getAddress());
                else
                    balance = getAvailableBalance();

                balanceListener.onBalanceChanged(balance, tx);
            }
        }
    }
}",1,"[64, 2000, 439, 305, 334, 2001, 123, 438, 381, 2002, 2003, 59, 438, 381, 2004, 2005, 59, 438, 381, 2006, 2007, 59, 438, 381, 2008, 433, 59, 437, 381, 2009, 2010, 61, 418, 2009, 40, 41, 59, 437, 381, 2011, 60, 2012, 62, 2013, 61, 418, 2011, 60, 62, 40, 41, 59, 437, 381, 2011, 60, 2014, 62, 2015, 61, 418, 2011, 60, 62, 40, 41, 59, 437, 381, 2011, 60, 2016, 62, 2017, 61, 418, 2011, 60, 62, 40, 41, 59, 437, 381, 2018, 2019, 59, 437, 381, 2020, 60, 2021, 60, 2022, 641, 2023, 61, 418, 2020, 60, 62, 40, 41, 59, 437, 381, 2020, 60, 2024, 60, 2022, 44, 2025, 641, 2026, 61, 418, 2020, 60, 62, 40, 41, 59, 64, 2027, 438, 2028, 2029, 59, 64, 2027, 438, 2030, 2031, 59, 64, 2027, 438, 2032, 2033, 61, 418, 2034, 40, 41, 59, 64, 2035, 2001, 40, 2002, 2003, 44, 2004, 2005, 44, 2006, 2007, 41, 123, 467, 46, 2003, 61, 2003, 59, 467, 46, 2005, 61, 2005, 59, 467, 46, 2007, 61, 2007, 59, 433, 61, 2003, 46, 2036, 40, 41, 59, 2019, 61, 2029, 45, 62, 123, 2023, 46, 2037, 40, 424, 41, 59, 2026, 46, 2037, 40, 424, 41, 59, 125, 59, 125, 438, 492, 2038, 40, 41, 123, 2029, 46, 2039, 40, 2010, 41, 59, 2029, 46, 2040, 40, 2010, 41, 59, 2029, 46, 2041, 40, 2010, 41, 59, 2029, 46, 2042, 40, 2010, 41, 59, 2029, 46, 2043, 40, 2044, 46, 2045, 44, 2019, 41, 59, 125, 439, 492, 2046, 40, 41, 123, 392, 40, 2029, 631, 424, 41, 123, 2029, 46, 2047, 40, 2010, 41, 59, 2029, 46, 2048, 40, 2010, 41, 59, 2029, 46, 2049, 40, 2010, 41, 59, 2029, 46, 2050, 40, 2010, 41, 59, 2029, 46, 2051, 40, 2019, 41, 59, 125, 125, 492, 2052, 40, 64, 2053, 2030, 2054, 41, 123, 2029, 46, 2055, 40, 2054, 41, 59, 2031, 61, 424, 59, 125, 492, 2056, 40, 2057, 2058, 44, 2030, 2054, 41, 123, 392, 40, 467, 46, 2031, 631, 424, 41, 123, 2059, 46, 2060, 40, 43, 41, 59, 2052, 40, 467, 46, 2031, 41, 59, 125, 2029, 46, 2061, 40, 2058, 44, 2054, 41, 59, 2031, 61, 2054, 59, 125, 492, 2062, 40, 2030, 2031, 41, 123, 467, 46, 2031, 61, 2031, 59, 125, 305, 2063, 2064, 40, 324, 2065, 41, 59, 439, 492, 2066, 40, 2012, 2067, 41, 123, 2013, 46, 2068, 40, 2067, 41, 59, 125, 439, 492, 2069, 40, 2012, 2067, 41, 123, 2013, 46, 2070, 40, 2067, 41, 59, 125, 439, 492, 2071, 40, 2014, 2067, 41, 123, 2015, 46, 2072, 40, 2067, 41, 59, 125, 439, 492, 2073, 40, 2014, 2067, 41, 123, 2015, 46, 2074, 40, 2067, 41, 59, 125, 439, 492, 2075, 40, 2016, 2067, 41, 123, 2017, 46, 2076, 40, 2067, 41, 59, 125, 439, 492, 2077, 40, 2016, 2067, 41, 123, 2017, 46, 2078, 40, 2067, 41, 59, 125, 439, 457, 492, 2079, 40, 2028, 2029, 41, 470, 2080, 123, 474, 123, 2081, 40, 2029, 41, 59, 2082, 40, 2029, 46, 2083, 40, 41, 41, 59, 125, 329, 40, 2084, 2085, 41, 123, 2085, 46, 2086, 40, 41, 59, 2087, 46, 371, 40, 2085, 46, 2088, 40, 41, 41, 59, 469, 418, 2080, 40, 2085, 41, 59, 125, 125, 439, 457, 492, 2089, 40, 2025, 2090, 41, 470, 2091, 123, 474, 123, 2090, 46, 2092, 40, 41, 59, 125, 329, 40, 2093, 2094, 41, 123, 2094, 46, 2095, 40, 41, 59, 2096, 46, 371, 40, 2094, 46, 2097, 40, 41, 41, 59, 469, 418, 2091, 40, 2094, 41, 59, 125, 125, 439, 457, 492, 2098, 40, 2025, 2090, 41, 470, 2091, 123, 385, 40, 404, 2099, 61, 1500, 59, 2099, 60, 2090, 46, 2100, 40, 41, 46, 2101, 40, 41, 59, 2099, 637, 41, 123, 2001, 46, 2102, 40, 2090, 44, 2090, 46, 2100, 40, 41, 46, 2103, 40, 2099, 41, 44, 2099, 41, 59, 125, 125, 439, 457, 492, 2104, 40, 2025, 2090, 44, 2105, 2106, 44, 404, 2107, 41, 470, 2091, 123, 474, 123, 2108, 40, 2106, 46, 2109, 40, 41, 44, 41, 59, 2106, 46, 2110, 40, 41, 46, 2111, 40, 2090, 44, 2107, 44, 2106, 46, 2112, 40, 41, 44, 2106, 46, 2113, 40, 41, 44, 2106, 46, 2109, 40, 41, 46, 2114, 40, 41, 44, 2115, 46, 2116, 41, 59, 125, 329, 40, 2117, 2118, 41, 123, 2118, 46, 2119, 40, 41, 59, 2120, 46, 371, 40, 2118, 46, 2121, 40, 41, 41, 59, 469, 418, 2091, 40, 2118, 41, 59, 125, 125, 439, 457, 492, 2122, 40, 2028, 2029, 44, 2030, 2031, 44, 2025, 2123, 41, 470, 2080, 44, 2091, 123, 385, 40, 404, 2124, 61, 1500, 59, 2124, 60, 2123, 46, 2125, 40, 41, 46, 2126, 40, 41, 59, 2124, 637, 41, 123, 2105, 2106, 61, 2123, 46, 2127, 40, 2124, 41, 59, 2128, 2129, 61, 2106, 46, 2130, 40, 41, 59, 392, 40, 2129, 614, 424, 41, 123, 2131, 46, 371, 40, 41, 59, 344, 59, 125, 392, 40, 33, 2129, 46, 2132, 40, 2029, 41, 41, 123, 2133, 46, 371, 40, 41, 59, 344, 59, 125, 2134, 40, 2029, 44, 2031, 44, 2123, 44, 2106, 44, 2124, 41, 59, 2104, 40, 2123, 44, 2106, 44, 2124, 41, 59, 125, 2079, 40, 2029, 41, 59, 2089, 40, 2123, 41, 59, 2135, 40, 44, 2123, 41, 59, 125, 439, 457, 492, 2136, 40, 2028, 2029, 44, 2030, 2031, 44, 2025, 2123, 44, 2105, 2137, 44, 404, 2138, 41, 123, 2139, 2140, 61, 418, 2141, 40, 2029, 44, 2031, 41, 59, 392, 40, 2137, 46, 2142, 40, 41, 631, 424, 41, 123, 474, 123, 2137, 46, 2143, 40, 41, 46, 2144, 40, 2123, 44, 2138, 44, 2137, 46, 2145, 40, 41, 44, 2137, 46, 2146, 40, 41, 44, 2137, 46, 2142, 40, 41, 46, 2147, 40, 41, 44, 2148, 46, 2149, 41, 59, 2150, 46, 2151, 40, 44, 2138, 41, 59, 450, 59, 125, 329, 40, 2152, 2153, 41, 123, 125, 2154, 2155, 61, 2137, 46, 2142, 40, 41, 46, 2156, 40, 41, 59, 2157, 2158, 61, 2137, 46, 2159, 40, 2140, 41, 59, 2160, 40, 2158, 44, 44, 2137, 46, 2161, 40, 41, 46, 2162, 40, 41, 41, 59, 2137, 46, 2163, 40, 2155, 46, 2164, 40, 2158, 46, 2165, 46, 2166, 40, 1500, 41, 44, 2158, 46, 2167, 41, 41, 59, 2168, 46, 2169, 2170, 61, 418, 2168, 46, 2169, 40, 2123, 41, 59, 2025, 2171, 61, 2170, 46, 2171, 59, 2137, 61, 2171, 46, 2172, 40, 2138, 41, 59, 392, 40, 2137, 46, 2142, 40, 41, 631, 424, 41, 123, 381, 2173, 60, 2174, 62, 2175, 61, 2137, 46, 2142, 40, 41, 46, 2156, 40, 41, 46, 2176, 40, 41, 59, 392, 40, 33, 2175, 46, 2177, 40, 41, 605, 2175, 46, 2166, 40, 1500, 41, 46, 2178, 631, 424, 605, 2175, 46, 2166, 40, 1500, 41, 46, 2178, 46, 2179, 62, 1500, 41, 123, 474, 123, 2137, 46, 2180, 40, 41, 46, 2181, 40, 2123, 44, 2138, 44, 2137, 46, 2182, 40, 41, 44, 2137, 46, 2183, 40, 41, 44, 2137, 46, 2142, 40, 41, 46, 2156, 40, 41, 44, 2154, 46, 2184, 41, 59, 2185, 46, 2186, 40, 44, 2138, 41, 59, 450, 59, 125, 329, 40, 2152, 2153, 41, 123, 125, 125, 2158, 61, 2137, 46, 2159, 40, 2140, 41, 59, 2155, 61, 2137, 46, 2142, 40, 41, 46, 2156, 40, 41, 59, 2160, 40, 2158, 44, 41, 59, 2187, 2188, 61, 2158, 46, 2165, 46, 2166, 40, 1500, 41, 59, 392, 40, 2188, 402, 2189, 41, 2170, 46, 2190, 46, 2191, 40, 2155, 44, 40, 40, 40, 2189, 41, 2188, 41, 46, 2192, 40, 41, 41, 41, 59, 2187, 2054, 59, 392, 40, 40, 2054, 61, 2158, 46, 2193, 40, 41, 41, 614, 424, 41, 123, 2194, 46, 2195, 40, 44, 2138, 41, 59, 450, 59, 125, 2154, 2196, 61, 2137, 46, 2197, 40, 41, 59, 326, 91, 93, 2198, 61, 2158, 46, 2167, 46, 2199, 40, 41, 59, 392, 40, 2200, 46, 2201, 40, 2155, 41, 606, 2200, 46, 2202, 40, 2155, 41, 41, 123, 474, 123, 2203, 2204, 61, 2171, 46, 2205, 40, 2138, 44, 2054, 44, 2198, 44, 2025, 46, 2206, 46, 2207, 44, 380, 41, 59, 2196, 61, 2155, 46, 2208, 40, 2196, 44, 2204, 46, 2209, 40, 41, 44, 1500, 41, 59, 2137, 46, 2163, 40, 2196, 41, 59, 125, 329, 40, 2187, 46, 2210, 2211, 41, 123, 469, 2211, 59, 125, 329, 40, 2187, 46, 2212, 2211, 41, 123, 2213, 46, 2214, 40, 44, 2138, 41, 59, 125, 125, 360, 392, 40, 2200, 46, 2215, 40, 2155, 41, 41, 123, 474, 123, 2154, 2216, 61, 2217, 46, 2218, 40, 2054, 41, 59, 2219, 2220, 61, 2137, 46, 2221, 40, 41, 59, 2222, 2223, 61, 2123, 46, 2224, 40, 2138, 44, 2054, 44, 2031, 44, 2216, 44, 2220, 44, 2025, 46, 2225, 46, 2226, 44, 380, 41, 59, 2137, 46, 2163, 40, 2217, 46, 2227, 40, 41, 41, 59, 2137, 46, 2228, 40, 2229, 46, 2230, 40, 2223, 44, 2054, 41, 41, 59, 125, 329, 40, 2187, 46, 2231, 2232, 41, 123, 2233, 46, 371, 40, 2232, 46, 2234, 40, 41, 41, 59, 469, 2232, 59, 125, 329, 40, 2187, 46, 2235, 2232, 41, 123, 2236, 46, 2237, 40, 44, 2138, 41, 59, 125, 125, 360, 123, 2238, 46, 371, 40, 41, 59, 469, 418, 2239, 40, 41, 59, 125, 125, 360, 123, 2240, 46, 2241, 40, 44, 2138, 41, 59, 125, 125, 360, 123, 2242, 46, 371, 40, 41, 59, 125, 125, 439, 457, 492, 2243, 40, 2025, 2123, 41, 123, 385, 40, 2244, 2245, 58, 2123, 46, 2246, 40, 41, 41, 123, 2247, 2248, 61, 2245, 46, 2249, 40, 41, 59, 392, 40, 2248, 46, 2250, 40, 41, 41, 123, 2251, 40, 2252, 46, 2253, 40, 2245, 46, 2249, 40, 41, 41, 44, 43, 2123, 41, 59, 125, 125, 125, 439, 492, 2254, 40, 2025, 2123, 44, 2255, 46, 2256, 2257, 41, 123, 2255, 46, 2254, 40, 2029, 44, 2003, 46, 2258, 40, 41, 44, 2123, 44, 2257, 41, 59, 125, 439, 492, 2254, 40, 2025, 2123, 44, 2255, 46, 2256, 2257, 44, 404, 2259, 41, 123, 2255, 46, 2254, 40, 2029, 44, 2003, 46, 2260, 40, 41, 44, 2123, 44, 2257, 44, 2259, 41, 59, 125, 64, 2261, 439, 2262, 2263, 40, 2022, 2264, 41, 123, 2265, 60, 2262, 62, 2266, 61, 418, 2267, 60, 62, 40, 41, 59, 392, 40, 2029, 631, 424, 41, 123, 2268, 60, 2025, 62, 2269, 61, 2270, 40, 41, 46, 2271, 40, 2264, 41, 59, 2266, 46, 2272, 40, 2269, 46, 2273, 40, 41, 46, 2274, 40, 2123, 45, 62, 2275, 40, 2123, 44, 2264, 41, 41, 46, 2276, 40, 2277, 46, 2278, 40, 41, 41, 41, 59, 125, 450, 2279, 40, 2266, 41, 59, 125, 437, 2024, 60, 2022, 44, 2025, 62, 2280, 40, 41, 123, 450, 2026, 46, 2281, 40, 2282, 45, 62, 2282, 631, 424, 63, 2282, 58, 2283, 40, 41, 41, 59, 125, 437, 2024, 60, 2022, 44, 2025, 62, 2284, 40, 41, 123, 450, 2029, 46, 2285, 40, 380, 41, 46, 2286, 40, 41, 46, 2287, 40, 2288, 46, 2289, 40, 2290, 46, 2291, 40, 41, 44, 40, 2290, 60, 2025, 44, 2292, 60, 2022, 641, 41, 40, 2293, 45, 62, 2294, 40, 2293, 41, 46, 2286, 40, 41, 46, 2295, 40, 2001, 58, 58, 2296, 41, 46, 2297, 40, 2298, 58, 58, 2299, 41, 41, 41, 41, 46, 2300, 40, 41, 59, 125, 64, 2261, 439, 2262, 2301, 40, 2063, 2302, 41, 123, 392, 40, 2029, 631, 424, 41, 123, 2303, 60, 2025, 62, 2304, 61, 2029, 46, 2305, 40, 380, 41, 59, 385, 40, 2025, 2123, 58, 2304, 41, 123, 392, 40, 2123, 46, 2306, 40, 41, 46, 2307, 40, 41, 46, 2308, 40, 2302, 41, 41, 450, 2123, 46, 2309, 40, 41, 59, 125, 125, 450, 424, 59, 125, 64, 2261, 437, 2262, 2310, 40, 2025, 2123, 44, 2022, 2264, 41, 123, 2311, 60, 2262, 62, 2312, 61, 2313, 40, 2123, 41, 46, 2314, 40, 41, 46, 2315, 40, 2316, 45, 62, 2264, 631, 424, 605, 2264, 46, 2317, 40, 2318, 40, 2316, 41, 41, 41, 46, 2319, 40, 2320, 45, 62, 2321, 46, 2322, 40, 2320, 46, 2323, 40, 41, 41, 41, 46, 2324, 40, 2025, 58, 58, 2325, 41, 46, 2326, 40, 2327, 46, 2328, 40, 41, 41, 59, 450, 2329, 40, 2312, 41, 59, 125, 437, 2330, 60, 2331, 62, 2332, 40, 2025, 2123, 41, 123, 2330, 60, 2331, 62, 2333, 61, 2123, 46, 2334, 40, 41, 59, 2330, 60, 2331, 62, 2335, 61, 418, 2336, 60, 62, 40, 41, 59, 2330, 60, 2105, 62, 2337, 61, 2123, 46, 2338, 40, 41, 59, 385, 40, 2105, 2339, 58, 2337, 41, 123, 2331, 2340, 61, 2339, 46, 2341, 40, 41, 59, 392, 40, 2340, 631, 424, 41, 123, 2335, 46, 2342, 40, 2340, 41, 59, 125, 125, 2330, 60, 2331, 62, 2343, 61, 418, 2336, 60, 62, 40, 41, 59, 2343, 46, 2344, 40, 2333, 41, 59, 2343, 46, 2344, 40, 2335, 41, 59, 450, 2343, 59, 125, 64, 2261, 437, 2262, 2345, 40, 2330, 60, 2262, 62, 2346, 41, 123, 2262, 2347, 61, 424, 59, 385, 40, 2262, 2348, 58, 2346, 41, 123, 392, 40, 2348, 631, 424, 41, 123, 392, 40, 2347, 614, 424, 606, 2348, 46, 2349, 40, 41, 46, 2350, 40, 2262, 46, 2351, 46, 2352, 41, 606, 40, 2348, 46, 2349, 40, 41, 46, 2350, 40, 2262, 46, 2351, 46, 2353, 41, 605, 2347, 46, 2349, 40, 41, 46, 2350, 40, 2262, 46, 2351, 46, 2353, 41, 605, 2348, 46, 2354, 40, 41, 60, 2347, 46, 2354, 40, 41, 41, 41, 123, 2347, 61, 2348, 59, 125, 125, 125, 450, 2347, 59, 125, 439, 2355, 2356, 40, 41, 123, 450, 2029, 631, 424, 63, 2029, 46, 2357, 40, 2028, 46, 2358, 46, 2359, 41, 58, 2355, 46, 2360, 59, 125, 439, 2355, 2361, 40, 41, 123, 450, 2029, 631, 424, 63, 2029, 46, 2362, 40, 2028, 46, 2363, 46, 2364, 41, 58, 2355, 46, 2365, 59, 125, 439, 2355, 2366, 40, 2022, 2264, 41, 123, 450, 2029, 631, 424, 63, 2367, 40, 2029, 46, 2368, 40, 41, 44, 2264, 41, 58, 2355, 46, 2369, 59, 125, 438, 2355, 2370, 40, 2330, 60, 2331, 62, 2371, 44, 2022, 2264, 41, 123, 2355, 2372, 61, 2355, 46, 2373, 59, 385, 40, 2331, 2374, 58, 2371, 41, 123, 392, 40, 33, 2375, 40, 2374, 41, 41, 123, 392, 40, 2376, 40, 2374, 41, 605, 2264, 631, 424, 605, 2264, 46, 2377, 40, 2378, 40, 2374, 41, 41, 41, 2372, 61, 2372, 46, 2379, 40, 2374, 46, 2380, 40, 41, 41, 59, 125, 125, 450, 2372, 59, 125, 438, 305, 324, 2381, 40, 2331, 2382, 41, 59, 439, 2355, 2370, 40, 2331, 2382, 41, 123, 450, 2366, 40, 2383, 40, 2382, 41, 41, 59, 125, 439, 2355, 2384, 40, 41, 123, 2355, 2385, 61, 40, 2005, 46, 2386, 40, 41, 41, 63, 2355, 46, 2387, 40, 2005, 46, 2388, 40, 41, 41, 58, 2007, 46, 2389, 40, 41, 59, 2390, 46, 2391, 40, 43, 2385, 46, 2392, 40, 41, 41, 59, 450, 2385, 59, 125, 439, 404, 2393, 40, 2022, 2264, 41, 123, 450, 2394, 40, 41, 46, 2395, 40, 2264, 41, 59, 125, 437, 2021, 60, 2022, 62, 2396, 40, 41, 123, 450, 2023, 46, 2397, 40, 2398, 45, 62, 2398, 631, 424, 63, 2398, 58, 2399, 40, 41, 41, 59, 125, 437, 2021, 60, 2022, 62, 2400, 40, 41, 123, 450, 2029, 46, 2401, 40, 380, 41, 46, 2402, 40, 41, 46, 2403, 40, 2404, 45, 62, 2404, 46, 2405, 40, 41, 46, 2402, 40, 41, 41, 46, 2406, 40, 2001, 58, 58, 2407, 41, 46, 2408, 40, 2409, 58, 58, 2410, 41, 46, 2411, 40, 2412, 46, 2413, 40, 41, 41, 59, 125, 439, 324, 2414, 40, 2022, 2264, 41, 123, 450, 2393, 40, 2264, 41, 614, 1500, 59, 125, 439, 324, 2415, 40, 2331, 2416, 41, 123, 450, 2416, 46, 2415, 40, 2029, 41, 59, 125, 439, 2355, 2417, 40, 2025, 2418, 41, 123, 2355, 2419, 61, 2355, 46, 2420, 59, 385, 40, 2331, 2416, 58, 2418, 46, 2421, 40, 41, 41, 123, 392, 40, 2416, 46, 2422, 40, 41, 46, 2423, 40, 2424, 46, 2425, 40, 41, 41, 41, 123, 2419, 61, 2419, 46, 2426, 40, 2416, 46, 2422, 40, 41, 41, 59, 2427, 46, 2428, 40, 44, 2416, 46, 2429, 40, 41, 41, 59, 125, 125, 450, 2419, 59, 125, 439, 492, 2430, 40, 2063, 2431, 44, 2030, 2031, 44, 2432, 2433, 44, 2434, 2435, 41, 470, 2436, 44, 2437, 123, 2438, 2439, 61, 2438, 46, 2440, 40, 2022, 46, 2441, 40, 433, 44, 2431, 41, 41, 59, 2439, 46, 2442, 61, 2355, 46, 2443, 59, 2439, 46, 2444, 61, 2384, 40, 41, 46, 2445, 40, 1504, 41, 59, 2439, 46, 2031, 61, 2031, 59, 2028, 46, 2446, 2447, 61, 2029, 46, 2448, 40, 2439, 41, 59, 2449, 40, 44, 2447, 46, 2123, 41, 59, 2450, 46, 2254, 40, 2447, 46, 2123, 41, 59, 2451, 46, 2452, 40, 2447, 46, 2453, 44, 418, 2454, 60, 62, 40, 41, 123, 64, 2455, 439, 492, 2456, 40, 2025, 2457, 41, 123, 2458, 46, 2459, 40, 43, 2457, 41, 59, 2433, 46, 2460, 40, 41, 59, 125, 64, 2455, 439, 492, 2461, 40, 64, 2053, 2462, 2463, 41, 123, 2464, 46, 371, 40, 43, 2463, 46, 2465, 40, 41, 41, 59, 2435, 46, 2466, 40, 2463, 46, 2467, 40, 41, 41, 59, 125, 125, 44, 2468, 46, 2469, 40, 41, 41, 59, 125, 439, 2025, 2470, 40, 326, 91, 93, 2123, 41, 123, 450, 418, 2025, 40, 433, 44, 2123, 41, 59, 125, 439, 2008, 2471, 40, 41, 123, 450, 433, 59, 125, 439, 404, 2472, 40, 41, 123, 381, 2473, 2474, 61, 2003, 46, 2475, 40, 41, 59, 450, 2476, 40, 41, 605, 2474, 631, 424, 63, 2474, 46, 2472, 40, 41, 58, 1500, 59, 125, 439, 324, 2477, 40, 41, 123, 450, 2003, 46, 2477, 40, 41, 59, 125, 439, 2025, 2478, 40, 2025, 2123, 41, 123, 450, 418, 2025, 40, 433, 44, 2123, 46, 2479, 40, 41, 41, 59, 125, 439, 492, 2480, 40, 2018, 2067, 41, 123, 2029, 46, 2480, 40, 2481, 46, 2482, 44, 2067, 41, 59, 125, 439, 492, 2483, 40, 2018, 2067, 41, 123, 2029, 46, 2483, 40, 2067, 41, 59, 125, 439, 492, 2484, 40, 2485, 2067, 41, 123, 381, 2486, 2487, 61, 2003, 46, 2488, 40, 41, 59, 392, 40, 2489, 40, 41, 605, 2487, 631, 424, 41, 2487, 46, 2484, 40, 2067, 41, 59, 125, 439, 492, 2490, 40, 2485, 2067, 41, 123, 381, 2491, 2492, 61, 2003, 46, 2493, 40, 41, 59, 392, 40, 2494, 40, 41, 605, 2492, 631, 424, 41, 2492, 46, 2490, 40, 2067, 41, 59, 125, 439, 324, 2495, 40, 41, 123, 450, 2029, 631, 424, 59, 125, 439, 2496, 2497, 40, 41, 123, 450, 2029, 46, 2497, 40, 41, 59, 125, 64, 2261, 439, 2498, 2499, 40, 41, 123, 450, 2029, 46, 2499, 40, 41, 59, 125, 439, 324, 2500, 40, 2030, 2031, 41, 123, 450, 2029, 46, 2500, 40, 2031, 41, 59, 125, 64, 2261, 439, 2501, 2502, 40, 326, 91, 93, 2503, 41, 123, 450, 40, 2501, 41, 2029, 46, 2502, 40, 2503, 41, 59, 125, 439, 324, 2504, 40, 41, 123, 450, 2029, 46, 2504, 40, 41, 59, 125, 439, 2330, 60, 2025, 62, 2505, 40, 404, 2506, 44, 324, 2507, 41, 123, 450, 2029, 46, 2505, 40, 2506, 44, 2507, 41, 59, 125, 439, 404, 2508, 40, 41, 123, 450, 2029, 46, 2508, 40, 41, 59, 125, 439, 324, 2509, 40, 41, 123, 450, 2510, 40, 380, 41, 46, 2511, 40, 41, 46, 2512, 40, 2123, 45, 62, 2123, 46, 2513, 40, 41, 614, 1500, 41, 46, 2512, 40, 2025, 58, 58, 2514, 41, 46, 2515, 40, 41, 62, 1503, 59, 125, 439, 2516, 60, 2025, 62, 2517, 40, 324, 2507, 41, 123, 450, 2029, 46, 2517, 40, 2507, 41, 59, 125, 439, 2355, 2370, 40, 64, 2518, 40, 41, 2028, 46, 2519, 2520, 41, 123, 450, 2029, 46, 2370, 40, 2520, 41, 59, 125, 64, 2261, 439, 2025, 2521, 40, 2522, 2523, 41, 123, 450, 2029, 46, 2521, 40, 2523, 41, 59, 125, 64, 2261, 439, 2025, 2521, 40, 2063, 2302, 41, 123, 392, 40, 2302, 614, 424, 41, 123, 450, 424, 59, 125, 450, 2521, 40, 2522, 46, 2524, 40, 2302, 41, 41, 59, 125, 439, 324, 2525, 40, 2331, 2416, 41, 123, 450, 2416, 46, 2415, 40, 2029, 41, 59, 125, 439, 2355, 2526, 40, 2025, 2090, 41, 470, 2527, 123, 450, 2090, 46, 2528, 40, 2029, 41, 59, 125, 439, 2355, 2529, 40, 2025, 2090, 41, 470, 2527, 123, 450, 2090, 46, 2530, 40, 2029, 41, 59, 125, 439, 457, 492, 2531, 40, 2063, 2532, 44, 2025, 2123, 41, 123, 2533, 46, 2534, 40, 43, 2532, 43, 43, 2123, 46, 2535, 40, 41, 41, 59, 125, 439, 457, 324, 2536, 40, 2331, 2382, 41, 123, 450, 2537, 46, 2538, 40, 2382, 46, 2539, 40, 41, 41, 606, 2537, 46, 2540, 40, 2382, 46, 2539, 40, 41, 41, 606, 2537, 46, 2541, 40, 2382, 46, 2539, 40, 41, 41, 59, 125, 64, 2261, 439, 457, 2022, 2542, 40, 2331, 2382, 41, 123, 450, 2536, 40, 2382, 41, 63, 2382, 46, 2543, 40, 41, 46, 2544, 40, 2545, 46, 2546, 40, 41, 41, 58, 424, 59, 125, 64, 2261, 439, 457, 2063, 2547, 40, 2331, 2382, 41, 123, 450, 2536, 40, 2382, 41, 63, 2382, 46, 2548, 40, 41, 46, 2549, 40, 2550, 46, 2551, 40, 41, 41, 46, 2552, 40, 41, 58, 424, 59, 125, 439, 457, 2025, 2553, 40, 326, 91, 93, 2554, 44, 2028, 2029, 44, 2262, 46, 2555, 2556, 41, 470, 2557, 123, 2025, 2123, 61, 418, 2025, 40, 2029, 46, 2471, 40, 41, 44, 2554, 41, 59, 2025, 2558, 61, 2029, 46, 2521, 40, 2123, 46, 2559, 40, 41, 41, 59, 392, 40, 2558, 614, 424, 41, 123, 2123, 46, 2560, 40, 2561, 46, 2562, 40, 41, 41, 46, 2563, 40, 2556, 41, 59, 2029, 46, 2564, 40, 2123, 44, 424, 44, 473, 41, 59, 450, 2123, 59, 125, 360, 123, 450, 2558, 59, 125, 125, 439, 457, 2025, 2565, 40, 326, 91, 93, 2554, 44, 2028, 2029, 41, 470, 2557, 123, 450, 2553, 40, 2554, 44, 2029, 44, 2262, 46, 2555, 46, 2566, 41, 59, 125, 439, 457, 2025, 2567, 40, 2025, 2090, 44, 2028, 2029, 41, 470, 2557, 123, 450, 2553, 40, 2090, 44, 2029, 44, 2262, 46, 2555, 46, 2568, 41, 59, 125, 439, 457, 2025, 2553, 40, 2025, 2090, 44, 2028, 2029, 44, 2262, 46, 2555, 2556, 41, 470, 2557, 123, 450, 2553, 40, 2090, 46, 2569, 40, 41, 44, 2029, 44, 2556, 41, 59, 125, 439, 334, 2009, 395, 2570, 44, 2571, 44, 2572, 44, 2573, 123, 64, 2574, 439, 492, 2575, 40, 2028, 2029, 44, 2025, 2123, 44, 2355, 2576, 44, 2355, 2577, 41, 123, 2578, 40, 2123, 41, 59, 125, 64, 2574, 439, 492, 2579, 40, 2028, 2029, 44, 2025, 2123, 44, 2355, 2576, 44, 2355, 2577, 41, 123, 2580, 40, 2123, 41, 59, 125, 64, 2574, 439, 492, 2581, 40, 2028, 2029, 41, 123, 2582, 46, 2583, 40, 41, 59, 125, 64, 2574, 439, 492, 2584, 40, 2028, 2029, 44, 2025, 2123, 41, 123, 385, 40, 2012, 2585, 58, 2013, 41, 123, 2262, 2586, 61, 2310, 40, 2123, 44, 2585, 46, 2587, 40, 41, 41, 59, 2585, 46, 2584, 40, 2586, 41, 59, 125, 2015, 46, 2588, 40, 41, 46, 2589, 40, 2590, 45, 62, 2123, 631, 424, 605, 2123, 46, 2591, 40, 41, 46, 2592, 40, 41, 631, 424, 605, 2590, 631, 424, 605, 2123, 46, 2591, 40, 41, 46, 2592, 40, 41, 46, 2593, 40, 2590, 46, 2591, 40, 41, 41, 41, 46, 2594, 40, 2590, 45, 62, 2590, 46, 2584, 40, 2123, 46, 2595, 40, 41, 41, 41, 59, 125, 492, 2596, 40, 2025, 2123, 41, 123, 385, 40, 2016, 2597, 58, 2017, 41, 123, 2355, 2598, 59, 392, 40, 2597, 46, 2599, 40, 41, 631, 424, 41, 2598, 61, 2366, 40, 2597, 46, 2599, 40, 41, 41, 59, 360, 2598, 61, 2356, 40, 41, 59, 2597, 46, 2600, 40, 2598, 44, 2123, 41, 59, 125, 125, 125, 125]",0.9999865,1
20,3475,Java,"@Slf4j
@Singleton
public class BisqSetup {
    private static final String VERSION_FILE_NAME = ""version"";
    private static final String RESYNC_SPV_FILE_NAME = ""resyncSpv"";

    public interface BisqSetupListener {
        default void onInitP2pNetwork() {
        }

        default void onInitWallet() {
        }

        default void onRequestWalletPassword() {
        }

        void onSetupComplete();
    }

    private static final long STARTUP_TIMEOUT_MINUTES = 4;

    private final DomainInitialisation domainInitialisation;
    private final P2PNetworkSetup p2PNetworkSetup;
    private final WalletAppSetup walletAppSetup;
    private final WalletsManager walletsManager;
    private final WalletsSetup walletsSetup;
    private final BtcWalletService btcWalletService;
    private final P2PService p2PService;
    private final SignedWitnessStorageService signedWitnessStorageService;
    private final TradeManager tradeManager;
    private final OpenOfferManager openOfferManager;
    private final Preferences preferences;
    private final User user;
    private final AlertManager alertManager;
    private final UnconfirmedBsqChangeOutputListService unconfirmedBsqChangeOutputListService;
    private final Config config;
    private final AccountAgeWitnessService accountAgeWitnessService;
    private final CoinFormatter formatter;
    private final LocalBitcoinNode localBitcoinNode;
    private final AppStartupState appStartupState;
    private final MediationManager mediationManager;
    private final RefundManager refundManager;
    private final ArbitrationManager arbitrationManager;

    @Setter
    @Nullable
    private Consumer<Runnable> displayTacHandler;
    @Setter
    @Nullable
    private Consumer<String> chainFileLockedExceptionHandler,
            spvFileCorruptedHandler, lockedUpFundsHandler, daoErrorMessageHandler, daoWarnMessageHandler,
            filterWarningHandler, displaySecurityRecommendationHandler, displayLocalhostHandler,
            wrongOSArchitectureHandler, displaySignedByArbitratorHandler,
            displaySignedByPeerHandler, displayPeerLimitLiftedHandler, displayPeerSignerHandler,
            rejectedTxErrorMessageHandler;
    @Setter
    @Nullable
    private Consumer<Boolean> displayTorNetworkSettingsHandler;
    @Setter
    @Nullable
    private Runnable showFirstPopupIfResyncSPVRequestedHandler;
    @Setter
    @Nullable
    private Consumer<Consumer<KeyParameter>> requestWalletPasswordHandler;
    @Setter
    @Nullable
    private Consumer<Alert> displayAlertHandler;
    @Setter
    @Nullable
    private BiConsumer<Alert, String> displayUpdateHandler;
    @Setter
    @Nullable
    private Consumer<VoteResultException> voteResultExceptionHandler;
    @Setter
    @Nullable
    private Consumer<PrivateNotificationPayload> displayPrivateNotificationHandler;
    @Setter
    @Nullable
    private Runnable showPopupIfInvalidBtcConfigHandler;
    @Setter
    @Nullable
    private Consumer<List<RevolutAccount>> revolutAccountsUpdateHandler;
    @Setter
    @Nullable
    private Consumer<List<AmazonGiftCardAccount>> amazonGiftCardAccountsUpdateHandler;
    @Setter
    @Nullable
    private Runnable qubesOSInfoHandler;
    @Setter
    @Nullable
    private Runnable daoRequiresRestartHandler;
    @Setter
    @Nullable
    private Runnable torAddressUpgradeHandler;
    @Setter
    @Nullable
    private Consumer<String> downGradePreventionHandler;

    @Getter
    final BooleanProperty newVersionAvailableProperty = new SimpleBooleanProperty(false);
    private BooleanProperty p2pNetworkReady;
    private final BooleanProperty walletInitialized = new SimpleBooleanProperty();
    private boolean allBasicServicesInitialized;
    @SuppressWarnings(""FieldCanBeLocal"")
    private MonadicBinding<Boolean> p2pNetworkAndWalletInitialized;
    private final List<BisqSetupListener> bisqSetupListeners = new ArrayList<>();

    @Inject
    public BisqSetup(DomainInitialisation domainInitialisation,
                     P2PNetworkSetup p2PNetworkSetup,
                     WalletAppSetup walletAppSetup,
                     WalletsManager walletsManager,
                     WalletsSetup walletsSetup,
                     BtcWalletService btcWalletService,
                     P2PService p2PService,
                     SignedWitnessStorageService signedWitnessStorageService,
                     TradeManager tradeManager,
                     OpenOfferManager openOfferManager,
                     Preferences preferences,
                     User user,
                     AlertManager alertManager,
                     UnconfirmedBsqChangeOutputListService unconfirmedBsqChangeOutputListService,
                     Config config,
                     AccountAgeWitnessService accountAgeWitnessService,
                     @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter formatter,
                     LocalBitcoinNode localBitcoinNode,
                     AppStartupState appStartupState,
                     Socks5ProxyProvider socks5ProxyProvider,
                     MediationManager mediationManager,
                     RefundManager refundManager,
                     ArbitrationManager arbitrationManager) {
        this.domainInitialisation = domainInitialisation;
        this.p2PNetworkSetup = p2PNetworkSetup;
        this.walletAppSetup = walletAppSetup;
        this.walletsManager = walletsManager;
        this.walletsSetup = walletsSetup;
        this.btcWalletService = btcWalletService;
        this.p2PService = p2PService;
        this.signedWitnessStorageService = signedWitnessStorageService;
        this.tradeManager = tradeManager;
        this.openOfferManager = openOfferManager;
        this.preferences = preferences;
        this.user = user;
        this.alertManager = alertManager;
        this.unconfirmedBsqChangeOutputListService = unconfirmedBsqChangeOutputListService;
        this.config = config;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.formatter = formatter;
        this.localBitcoinNode = localBitcoinNode;
        this.appStartupState = appStartupState;
        this.mediationManager = mediationManager;
        this.refundManager = refundManager;
        this.arbitrationManager = arbitrationManager;

        MemPoolSpaceTxBroadcaster.init(socks5ProxyProvider, preferences, localBitcoinNode);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void displayAlertIfPresent(Alert alert, boolean openNewVersionPopup) {
        if (alert == null)
            return;

        if (alert.isSoftwareUpdateNotification()) {
            // only process if the alert version is ""newer"" than ours
            if (alert.isNewVersion(preferences)) {
                user.setDisplayedAlert(alert);          // save context to compare later
                newVersionAvailableProperty.set(true);  // shows link in footer bar
                if ((alert.canShowPopup(preferences) || openNewVersionPopup) && displayUpdateHandler != null) {
                    displayUpdateHandler.accept(alert, alert.showAgainKey());
                }
            }
        } else {
            // it is a normal message alert
            final Alert displayedAlert = user.getDisplayedAlert();
            if ((displayedAlert == null || !displayedAlert.equals(alert)) && displayAlertHandler != null)
                displayAlertHandler.accept(alert);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Main startup tasks
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addBisqSetupListener(BisqSetupListener listener) {
        bisqSetupListeners.add(listener);
    }

    public void start() {
        // If user tried to downgrade we require a shutdown
        if (Config.baseCurrencyNetwork() == BaseCurrencyNetwork.BTC_MAINNET &&
                hasDowngraded(downGradePreventionHandler)) {
            return;
        }

        persistBisqVersion();
        maybeReSyncSPVChain();
        maybeShowTac(this::step2);
    }

    private void step2() {
        readMapsFromResources(this::step3);
        checkForCorrectOSArchitecture();
        checkIfRunningOnQubesOS();
    }

    private void step3() {
        startP2pNetworkAndWallet(this::step4);
    }

    private void step4() {
        initDomainServices();

        bisqSetupListeners.forEach(BisqSetupListener::onSetupComplete);

        // We set that after calling the setupCompleteHandler to not trigger a popup from the dev dummy accounts
        // in MainViewModel
        maybeShowSecurityRecommendation();
        maybeShowLocalhostRunningInfo();
        maybeShowAccountSigningStateInfo();
        maybeShowTorAddressUpgradeInformation();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Sub tasks
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void maybeReSyncSPVChain() {
        // We do the delete of the spv file at startup before BitcoinJ is initialized to avoid issues with locked files under Windows.
        if (getResyncSpvSemaphore()) {
            try {
                walletsSetup.reSyncSPVChain();

                // In case we had an unconfirmed change output we reset the unconfirmedBsqChangeOutputList so that
                // after a SPV resync we do not have any dangling BSQ utxos in that list which would cause an incorrect
                // BSQ balance state after the SPV resync.
                unconfirmedBsqChangeOutputListService.onSpvResync();
            } catch (IOException e) {
                log.error(e.toString());
                e.printStackTrace();
            }
        }
    }

    private void maybeShowTac(Runnable nextStep) {
        if (!preferences.isTacAcceptedV120() && !DevEnv.isDevMode()) {
            if (displayTacHandler != null)
                displayTacHandler.accept(() -> {
                    preferences.setTacAcceptedV120(true);
                    nextStep.run();
                });
        } else {
            nextStep.run();
        }
    }

    private void readMapsFromResources(Runnable completeHandler) {
        String postFix = ""_"" + config.baseCurrencyNetwork.name();
        p2PService.getP2PDataStorage().readFromResources(postFix, completeHandler);
    }

    private void startP2pNetworkAndWallet(Runnable nextStep) {
        ChangeListener<Boolean> walletInitializedListener = (observable, oldValue, newValue) -> {
            // TODO that seems to be called too often if Tor takes longer to start up...
            if (newValue && !p2pNetworkReady.get() && displayTorNetworkSettingsHandler != null)
                displayTorNetworkSettingsHandler.accept(true);
        };

        Timer startupTimeout = UserThread.runAfter(() -> {
            if (p2PNetworkSetup.p2pNetworkFailed.get() || walletsSetup.walletsSetupFailed.get()) {
                // Skip this timeout action if the p2p network or wallet setup failed
                // since an error prompt will be shown containing the error message
                return;
            }
            log.warn(""startupTimeout called"");
            if (walletsManager.areWalletsEncrypted())
                walletInitialized.addListener(walletInitializedListener);
            else if (displayTorNetworkSettingsHandler != null)
                displayTorNetworkSettingsHandler.accept(true);

            log.info(""Set log level for org.berndpruenster.netlayer classes to DEBUG to show more details for "" +
                    ""Tor network connection issues"");
            Log.setCustomLogLevel(""org.berndpruenster.netlayer"", Level.DEBUG);

        }, STARTUP_TIMEOUT_MINUTES, TimeUnit.MINUTES);

        log.info(""Init P2P network"");
        bisqSetupListeners.forEach(BisqSetupListener::onInitP2pNetwork);
        p2pNetworkReady = p2PNetworkSetup.init(this::initWallet, displayTorNetworkSettingsHandler);

        // We only init wallet service here if not using Tor for bitcoinj.
        // When using Tor, wallet init must be deferred until Tor is ready.
        // TODO encapsulate below conditional inside getUseTorForBitcoinJ
        if (!preferences.getUseTorForBitcoinJ() || localBitcoinNode.shouldBeUsed()) {
            initWallet();
        }

        // need to store it to not get garbage collected
        p2pNetworkAndWalletInitialized = EasyBind.combine(walletInitialized, p2pNetworkReady,
                (a, b) -> {
                    log.info(""walletInitialized={}, p2pNetWorkReady={}"", a, b);
                    return a && b;
                });
        p2pNetworkAndWalletInitialized.subscribe((observable, oldValue, newValue) -> {
            if (newValue) {
                startupTimeout.stop();
                walletInitialized.removeListener(walletInitializedListener);
                if (displayTorNetworkSettingsHandler != null)
                    displayTorNetworkSettingsHandler.accept(false);
                nextStep.run();
            }
        });
    }

    private void initWallet() {
        log.info(""Init wallet"");
        bisqSetupListeners.forEach(BisqSetupListener::onInitWallet);
        Runnable walletPasswordHandler = () -> {
            log.info(""Wallet password required"");
            bisqSetupListeners.forEach(BisqSetupListener::onRequestWalletPassword);
            if (p2pNetworkReady.get())
                p2PNetworkSetup.setSplashP2PNetworkAnimationVisible(true);

            if (requestWalletPasswordHandler != null) {
                requestWalletPasswordHandler.accept(aesKey -> {
                    walletsManager.setAesKey(aesKey);
                    walletsManager.maybeAddSegwitKeychains(aesKey);
                    if (getResyncSpvSemaphore()) {
                        if (showFirstPopupIfResyncSPVRequestedHandler != null)
                            showFirstPopupIfResyncSPVRequestedHandler.run();
                    } else {
                        // TODO no guarantee here that the wallet is really fully initialized
                        // We would need a new walletInitializedButNotEncrypted state to track
                        // Usually init is fast and we have our wallet initialized at that state though.
                        walletInitialized.set(true);
                    }
                });
            }
        };
        walletAppSetup.init(chainFileLockedExceptionHandler,
                spvFileCorruptedHandler,
                getResyncSpvSemaphore(),
                showFirstPopupIfResyncSPVRequestedHandler,
                showPopupIfInvalidBtcConfigHandler,
                walletPasswordHandler,
                () -> {
                    if (allBasicServicesInitialized) {
                        checkForLockedUpFunds();
                        checkForInvalidMakerFeeTxs();
                    }
                },
                () -> walletInitialized.set(true));
    }

    private void initDomainServices() {
        log.info(""initDomainServices"");

        domainInitialisation.initDomainServices(rejectedTxErrorMessageHandler,
                displayPrivateNotificationHandler,
                daoErrorMessageHandler,
                daoWarnMessageHandler,
                filterWarningHandler,
                voteResultExceptionHandler,
                revolutAccountsUpdateHandler,
                amazonGiftCardAccountsUpdateHandler,
                daoRequiresRestartHandler);

        if (walletsSetup.downloadPercentageProperty().get() == 1) {
            checkForLockedUpFunds();
            checkForInvalidMakerFeeTxs();
        }

        alertManager.alertMessageProperty().addListener((observable, oldValue, newValue) ->
                displayAlertIfPresent(newValue, false));
        displayAlertIfPresent(alertManager.alertMessageProperty().get(), false);

        allBasicServicesInitialized = true;

        appStartupState.onDomainServicesInitialized();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void checkForLockedUpFunds() {
        // We check if there are locked up funds in failed or closed trades
        try {
            Set<String> setOfAllTradeIds = tradeManager.getSetOfFailedOrClosedTradeIdsFromLockedInFunds();
            btcWalletService.getAddressEntriesForTrade().stream()
                    .filter(e -> setOfAllTradeIds.contains(e.getOfferId()) &&
                            e.getContext() == AddressEntry.Context.MULTI_SIG)
                    .forEach(e -> {
                        Coin balance = e.getCoinLockedInMultiSigAsCoin();
                        if (balance.isPositive()) {
                            String message = Res.get(""popup.warning.lockedUpFunds"",
                                    formatter.formatCoinWithCode(balance), e.getAddressString(), e.getOfferId());
                            log.warn(message);
                            if (lockedUpFundsHandler != null) {
                                lockedUpFundsHandler.accept(message);
                            }
                        }
                    });
        } catch (TradeTxException e) {
            log.warn(e.getMessage());
            if (lockedUpFundsHandler != null) {
                lockedUpFundsHandler.accept(e.getMessage());
            }
        }
    }

    private void checkForInvalidMakerFeeTxs() {
        // We check if we have open offers with no confidence object at the maker fee tx. That can happen if the
        // miner fee was too low and the transaction got removed from mempool and got out from our wallet after a
        // resync.
        openOfferManager.getObservableList().forEach(e -> {
            if (e.getOffer().isBsqSwapOffer()) {
                return;
            }
            String offerFeePaymentTxId = e.getOffer().getOfferFeePaymentTxId();
            if (btcWalletService.getConfidenceForTxId(offerFeePaymentTxId) == null) {
                String message = Res.get(""popup.warning.openOfferWithInvalidMakerFeeTx"",
                        e.getOffer().getShortId(), offerFeePaymentTxId);
                log.warn(message);
                if (lockedUpFundsHandler != null) {
                    lockedUpFundsHandler.accept(message);
                }
            }
        });
    }

    @Nullable
    public static String getLastBisqVersion() {
        File versionFile = getVersionFile();
        if (!versionFile.exists()) {
            return null;
        }
        try (Scanner scanner = new Scanner(versionFile)) {
            // We only expect 1 line
            if (scanner.hasNextLine()) {
                return scanner.nextLine();
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Nullable
    public static boolean getResyncSpvSemaphore() {
        File resyncSpvSemaphore = new File(Config.appDataDir(), RESYNC_SPV_FILE_NAME);
        return resyncSpvSemaphore.exists();
    }

    public static void setResyncSpvSemaphore(boolean isResyncSpvRequested) {
        File resyncSpvSemaphore = new File(Config.appDataDir(), RESYNC_SPV_FILE_NAME);
        if (isResyncSpvRequested) {
            if (!resyncSpvSemaphore.exists()) {
                try {
                    if (!resyncSpvSemaphore.createNewFile()) {
                        log.error(""ResyncSpv file could not be created"");
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    log.error(""ResyncSpv file could not be created. {}"", e.toString());
                }
            }
        } else {
            resyncSpvSemaphore.delete();
        }
    }


    private static File getVersionFile() {
        return new File(Config.appDataDir(), VERSION_FILE_NAME);
    }

    public static boolean hasDowngraded() {
        return hasDowngraded(getLastBisqVersion());
    }

    public static boolean hasDowngraded(String lastVersion) {
        return lastVersion != null && Version.isNewVersion(lastVersion, Version.VERSION);
    }

    public static boolean hasDowngraded(@Nullable Consumer<String> downGradePreventionHandler) {
        String lastVersion = getLastBisqVersion();
        boolean hasDowngraded = hasDowngraded(lastVersion);
        if (hasDowngraded) {
            log.error(""Downgrade from version {} to version {} is not supported"", lastVersion, Version.VERSION);
            if (downGradePreventionHandler != null) {
                downGradePreventionHandler.accept(lastVersion);
            }
        }
        return hasDowngraded;
    }

    public static void persistBisqVersion() {
        File versionFile = getVersionFile();
        if (!versionFile.exists()) {
            try {
                if (!versionFile.createNewFile()) {
                    log.error(""Version file could not be created"");
                }
            } catch (IOException e) {
                e.printStackTrace();
                log.error(""Version file could not be created. {}"", e.toString());
            }
        }

        try (FileWriter fileWriter = new FileWriter(versionFile, false)) {
            fileWriter.write(Version.VERSION);
        } catch (IOException e) {
            e.printStackTrace();
            log.error(""Writing Version failed. {}"", e.toString());
        }
    }

    private void checkForCorrectOSArchitecture() {
        if (!Utilities.isCorrectOSArchitecture() && wrongOSArchitectureHandler != null) {
            String osArchitecture = Utilities.getOSArchitecture();
            // We don't force a shutdown as the osArchitecture might in strange cases return a wrong value.
            // Needs at least more testing on different machines...
            wrongOSArchitectureHandler.accept(Res.get(""popup.warning.wrongVersion"",
                    osArchitecture,
                    Utilities.getJVMArchitecture(),
                    osArchitecture));
        }
    }

    /**
     * If Bisq is running on an OS that is virtualized under Qubes, show info popup with
     * link to the Setup Guide. The guide documents what other steps are needed, in
     * addition to installing the Linux package (qube sizing, etc)
     */
    private void checkIfRunningOnQubesOS() {
        if (Utilities.isQubesOS() && qubesOSInfoHandler != null) {
            qubesOSInfoHandler.run();
        }
    }

    private void maybeShowSecurityRecommendation() {
        String key = ""remindPasswordAndBackup"";
        user.getPaymentAccountsAsObservable().addListener((SetChangeListener<PaymentAccount>) change -> {
            if (!walletsManager.areWalletsEncrypted() && !user.isPaymentAccountImport() && preferences.showAgain(key) && change.wasAdded() &&
                    displaySecurityRecommendationHandler != null)
                displaySecurityRecommendationHandler.accept(key);
        });
    }

    private void maybeShowLocalhostRunningInfo() {
        if (Config.baseCurrencyNetwork().isMainnet()) {
            maybeTriggerDisplayHandler(""bitcoinLocalhostNode"", displayLocalhostHandler,
                    localBitcoinNode.shouldBeUsed());
        }
    }

    private void maybeShowAccountSigningStateInfo() {
        String keySignedByArbitrator = ""accountSignedByArbitrator"";
        String keySignedByPeer = ""accountSignedByPeer"";
        String keyPeerLimitedLifted = ""accountLimitLifted"";
        String keyPeerSigner = ""accountPeerSigner"";

        // check signed witness on startup
        checkSigningState(AccountAgeWitnessService.SignState.ARBITRATOR, keySignedByArbitrator, displaySignedByArbitratorHandler);
        checkSigningState(AccountAgeWitnessService.SignState.PEER_INITIAL, keySignedByPeer, displaySignedByPeerHandler);
        checkSigningState(AccountAgeWitnessService.SignState.PEER_LIMIT_LIFTED, keyPeerLimitedLifted, displayPeerLimitLiftedHandler);
        checkSigningState(AccountAgeWitnessService.SignState.PEER_SIGNER, keyPeerSigner, displayPeerSignerHandler);

        // check signed witness during runtime
        p2PService.getP2PDataStorage().addAppendOnlyDataStoreListener(
                payload -> {
                    maybeTriggerDisplayHandler(keySignedByArbitrator, displaySignedByArbitratorHandler,
                            isSignedWitnessOfMineWithState(payload, AccountAgeWitnessService.SignState.ARBITRATOR));
                    maybeTriggerDisplayHandler(keySignedByPeer, displaySignedByPeerHandler,
                            isSignedWitnessOfMineWithState(payload, AccountAgeWitnessService.SignState.PEER_INITIAL));
                    maybeTriggerDisplayHandler(keyPeerLimitedLifted, displayPeerLimitLiftedHandler,
                            isSignedWitnessOfMineWithState(payload, AccountAgeWitnessService.SignState.PEER_LIMIT_LIFTED));
                    maybeTriggerDisplayHandler(keyPeerSigner, displayPeerSignerHandler,
                            isSignedWitnessOfMineWithState(payload, AccountAgeWitnessService.SignState.PEER_SIGNER));
                });
    }

    private void checkSigningState(AccountAgeWitnessService.SignState state,
                                   String key, Consumer<String> displayHandler) {
        boolean signingStateFound = signedWitnessStorageService.getMap().values().stream()
                .anyMatch(payload -> isSignedWitnessOfMineWithState(payload, state));

        maybeTriggerDisplayHandler(key, displayHandler, signingStateFound);
    }

    private boolean isSignedWitnessOfMineWithState(PersistableNetworkPayload payload,
                                                   AccountAgeWitnessService.SignState state) {
        if (payload instanceof SignedWitness && user.getPaymentAccounts() != null) {
            // We know at this point that it is already added to the signed witness list
            // Check if new signed witness is for one of my own accounts
            return user.getPaymentAccounts().stream()
                    .filter(a -> PaymentMethod.hasChargebackRisk(a.getPaymentMethod(), a.getTradeCurrencies()))
                    .filter(a -> Arrays.equals(((SignedWitness) payload).getAccountAgeWitnessHash(),
                            accountAgeWitnessService.getMyWitness(a.getPaymentAccountPayload()).getHash()))
                    .anyMatch(a -> accountAgeWitnessService.getSignState(accountAgeWitnessService.getMyWitness(
                            a.getPaymentAccountPayload())).equals(state));
        }
        return false;
    }

    private void maybeTriggerDisplayHandler(String key, Consumer<String> displayHandler, boolean signingStateFound) {
        if (signingStateFound && preferences.showAgain(key) &&
                displayHandler != null) {
            displayHandler.accept(key);
        }
    }

    private void maybeShowTorAddressUpgradeInformation() {
        if (Config.baseCurrencyNetwork().isRegtest() ||
                Utils.isV3Address(Objects.requireNonNull(p2PService.getNetworkNode().getNodeAddress()).getHostName())) {
            return;
        }

        maybeRunTorNodeAddressUpgradeHandler();

        tradeManager.getNumPendingTrades().addListener((observable, oldValue, newValue) -> {
            long numPendingTrades = (long) newValue;
            if (numPendingTrades == 0) {
                maybeRunTorNodeAddressUpgradeHandler();
            }
        });
    }

    private void maybeRunTorNodeAddressUpgradeHandler() {
        if (mediationManager.getDisputesAsObservableList().stream().allMatch(Dispute::isClosed) &&
                refundManager.getDisputesAsObservableList().stream().allMatch(Dispute::isClosed) &&
                arbitrationManager.getDisputesAsObservableList().stream().allMatch(Dispute::isClosed) &&
                tradeManager.getNumPendingTrades().isEqualTo(0).get()) {
            Objects.requireNonNull(torAddressUpgradeHandler).run();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Wallet
    public StringProperty getBtcInfo() {
        return walletAppSetup.getBtcInfo();
    }

    public DoubleProperty getBtcSyncProgress() {
        return walletAppSetup.getBtcSyncProgress();
    }

    public StringProperty getWalletServiceErrorMsg() {
        return walletAppSetup.getWalletServiceErrorMsg();
    }

    public StringProperty getBtcSplashSyncIconId() {
        return walletAppSetup.getBtcSplashSyncIconId();
    }

    public BooleanProperty getUseTorForBTC() {
        return walletAppSetup.getUseTorForBTC();
    }

    // P2P
    public StringProperty getP2PNetworkInfo() {
        return p2PNetworkSetup.getP2PNetworkInfo();
    }

    public BooleanProperty getSplashP2PNetworkAnimationVisible() {
        return p2PNetworkSetup.getSplashP2PNetworkAnimationVisible();
    }

    public StringProperty getP2pNetworkWarnMsg() {
        return p2PNetworkSetup.getP2pNetworkWarnMsg();
    }

    public StringProperty getP2PNetworkIconId() {
        return p2PNetworkSetup.getP2PNetworkIconId();
    }

    public BooleanProperty getUpdatedDataReceived() {
        return p2PNetworkSetup.getUpdatedDataReceived();
    }

    public StringProperty getP2pNetworkLabelId() {
        return p2PNetworkSetup.getP2pNetworkLabelId();
    }


}",1,"[64, 2000, 64, 2001, 439, 334, 2002, 123, 437, 457, 381, 2003, 2004, 61, 59, 437, 457, 381, 2003, 2005, 61, 59, 439, 405, 2006, 123, 349, 492, 2007, 40, 41, 123, 125, 349, 492, 2008, 40, 41, 123, 125, 349, 492, 2009, 40, 41, 123, 125, 492, 2010, 40, 41, 59, 125, 437, 457, 381, 413, 2011, 61, 1502, 59, 437, 381, 2012, 2013, 59, 437, 381, 2014, 2015, 59, 437, 381, 2016, 2017, 59, 437, 381, 2018, 2019, 59, 437, 381, 2020, 2021, 59, 437, 381, 2022, 2023, 59, 437, 381, 2024, 2025, 59, 437, 381, 2026, 2027, 59, 437, 381, 2028, 2029, 59, 437, 381, 2030, 2031, 59, 437, 381, 2032, 2033, 59, 437, 381, 2034, 2035, 59, 437, 381, 2036, 2037, 59, 437, 381, 2038, 2039, 59, 437, 381, 2040, 2041, 59, 437, 381, 2042, 2043, 59, 437, 381, 2044, 2045, 59, 437, 381, 2046, 2047, 59, 437, 381, 2048, 2049, 59, 437, 381, 2050, 2051, 59, 437, 381, 2052, 2053, 59, 437, 381, 2054, 2055, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2059, 62, 2060, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2003, 62, 2061, 44, 2062, 44, 2063, 44, 2064, 44, 2065, 44, 2066, 44, 2067, 44, 2068, 44, 2069, 44, 2070, 44, 2071, 44, 2072, 44, 2073, 44, 2074, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2075, 62, 2076, 59, 64, 2056, 64, 2057, 437, 2059, 2077, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2058, 60, 2078, 641, 2079, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2080, 62, 2081, 59, 64, 2056, 64, 2057, 437, 2082, 60, 2080, 44, 2003, 62, 2083, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2084, 62, 2085, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2086, 62, 2087, 59, 64, 2056, 64, 2057, 437, 2059, 2088, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2089, 60, 2090, 641, 2091, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2089, 60, 2092, 641, 2093, 59, 64, 2056, 64, 2057, 437, 2059, 2094, 59, 64, 2056, 64, 2057, 437, 2059, 2095, 59, 64, 2056, 64, 2057, 437, 2059, 2096, 59, 64, 2056, 64, 2057, 437, 2058, 60, 2003, 62, 2097, 59, 64, 2098, 381, 2099, 2100, 61, 418, 2101, 40, 380, 41, 59, 437, 2099, 2102, 59, 437, 381, 2099, 2103, 61, 418, 2101, 40, 41, 59, 437, 324, 2104, 59, 64, 2105, 40, 41, 437, 2106, 60, 2075, 62, 2107, 59, 437, 381, 2089, 60, 2006, 62, 2108, 61, 418, 2109, 60, 62, 40, 41, 59, 64, 2110, 439, 2002, 40, 2012, 2013, 44, 2014, 2015, 44, 2016, 2017, 44, 2018, 2019, 44, 2020, 2021, 44, 2022, 2023, 44, 2024, 2025, 44, 2026, 2027, 44, 2028, 2029, 44, 2030, 2031, 44, 2032, 2033, 44, 2034, 2035, 44, 2036, 2037, 44, 2038, 2039, 44, 2040, 2041, 44, 2042, 2043, 44, 64, 2111, 40, 2112, 46, 2113, 41, 2044, 2045, 44, 2046, 2047, 44, 2048, 2049, 44, 2114, 2115, 44, 2050, 2051, 44, 2052, 2053, 44, 2054, 2055, 41, 123, 467, 46, 2013, 61, 2013, 59, 467, 46, 2015, 61, 2015, 59, 467, 46, 2017, 61, 2017, 59, 467, 46, 2019, 61, 2019, 59, 467, 46, 2021, 61, 2021, 59, 467, 46, 2023, 61, 2023, 59, 467, 46, 2025, 61, 2025, 59, 467, 46, 2027, 61, 2027, 59, 467, 46, 2029, 61, 2029, 59, 467, 46, 2031, 61, 2031, 59, 467, 46, 2033, 61, 2033, 59, 467, 46, 2035, 61, 2035, 59, 467, 46, 2037, 61, 2037, 59, 467, 46, 2039, 61, 2039, 59, 467, 46, 2041, 61, 2041, 59, 467, 46, 2043, 61, 2043, 59, 467, 46, 2045, 61, 2045, 59, 467, 46, 2047, 61, 2047, 59, 467, 46, 2049, 61, 2049, 59, 467, 46, 2051, 61, 2051, 59, 467, 46, 2053, 61, 2053, 59, 467, 46, 2055, 61, 2055, 59, 2116, 46, 2117, 40, 2115, 44, 2033, 44, 2047, 41, 59, 125, 439, 492, 2118, 40, 2080, 2119, 44, 324, 2120, 41, 123, 392, 40, 2119, 614, 424, 41, 450, 59, 392, 40, 2119, 46, 2121, 40, 41, 41, 123, 392, 40, 2119, 46, 2122, 40, 2033, 41, 41, 123, 2035, 46, 2123, 40, 2119, 41, 59, 2100, 46, 2124, 40, 473, 41, 59, 392, 40, 40, 2119, 46, 2125, 40, 2033, 41, 606, 2120, 41, 605, 2083, 631, 424, 41, 123, 2083, 46, 2126, 40, 2119, 44, 2119, 46, 2127, 40, 41, 41, 59, 125, 125, 125, 360, 123, 381, 2080, 2128, 61, 2035, 46, 2129, 40, 41, 59, 392, 40, 40, 2128, 614, 424, 606, 33, 2128, 46, 2130, 40, 2119, 41, 41, 605, 2081, 631, 424, 41, 2081, 46, 2131, 40, 2119, 41, 59, 125, 125, 439, 492, 2132, 40, 2006, 2133, 41, 123, 2108, 46, 2134, 40, 2133, 41, 59, 125, 439, 492, 2135, 40, 41, 123, 392, 40, 2040, 46, 2136, 40, 41, 614, 2137, 46, 2138, 605, 2139, 40, 2097, 41, 41, 123, 450, 59, 125, 2140, 40, 41, 59, 2141, 40, 41, 59, 2142, 40, 467, 58, 58, 2143, 41, 59, 125, 437, 492, 2144, 40, 41, 123, 2145, 40, 467, 58, 58, 2146, 41, 59, 2147, 40, 41, 59, 2148, 40, 41, 59, 125, 437, 492, 2149, 40, 41, 123, 2150, 40, 467, 58, 58, 2151, 41, 59, 125, 437, 492, 2152, 40, 41, 123, 2153, 40, 41, 59, 2108, 46, 2154, 40, 2006, 58, 58, 2155, 41, 59, 2156, 40, 41, 59, 2157, 40, 41, 59, 2158, 40, 41, 59, 2159, 40, 41, 59, 125, 437, 492, 2160, 40, 41, 123, 392, 40, 2161, 40, 41, 41, 123, 474, 123, 2021, 46, 2162, 40, 41, 59, 2039, 46, 2163, 40, 41, 59, 125, 329, 40, 2164, 2165, 41, 123, 2166, 46, 371, 40, 2165, 46, 2167, 40, 41, 41, 59, 2165, 46, 2168, 40, 41, 59, 125, 125, 125, 437, 492, 2169, 40, 2059, 2170, 41, 123, 392, 40, 33, 2033, 46, 2171, 40, 41, 605, 33, 2172, 46, 2173, 40, 41, 41, 123, 392, 40, 2060, 631, 424, 41, 2060, 46, 2174, 40, 40, 41, 45, 62, 123, 2033, 46, 2175, 40, 473, 41, 59, 2170, 46, 2176, 40, 41, 59, 125, 41, 59, 125, 360, 123, 2170, 46, 2177, 40, 41, 59, 125, 125, 437, 492, 2178, 40, 2059, 2179, 41, 123, 2003, 2180, 61, 43, 2041, 46, 2181, 46, 2182, 40, 41, 59, 2025, 46, 2183, 40, 41, 46, 2184, 40, 2180, 44, 2179, 41, 59, 125, 437, 492, 2185, 40, 2059, 2170, 41, 123, 2186, 60, 2075, 62, 2187, 61, 40, 2188, 44, 2189, 44, 2190, 41, 45, 62, 123, 392, 40, 2190, 605, 33, 2102, 46, 2191, 40, 41, 605, 2076, 631, 424, 41, 2076, 46, 2192, 40, 473, 41, 59, 125, 59, 2193, 2194, 61, 2195, 46, 2196, 40, 40, 41, 45, 62, 123, 392, 40, 2015, 46, 2197, 46, 2198, 40, 41, 606, 2021, 46, 2199, 46, 2198, 40, 41, 41, 123, 450, 59, 125, 2200, 46, 2201, 40, 41, 59, 392, 40, 2019, 46, 2202, 40, 41, 41, 2103, 46, 2203, 40, 2187, 41, 59, 360, 392, 40, 2076, 631, 424, 41, 2076, 46, 2204, 40, 473, 41, 59, 2200, 46, 2205, 40, 43, 41, 59, 2206, 46, 2207, 40, 44, 2208, 46, 2209, 41, 59, 125, 44, 2011, 44, 2210, 46, 2211, 41, 59, 2212, 46, 2213, 40, 41, 59, 2108, 46, 2214, 40, 2006, 58, 58, 2215, 41, 59, 2102, 61, 2015, 46, 2216, 40, 467, 58, 58, 2217, 44, 2076, 41, 59, 392, 40, 33, 2033, 46, 2218, 40, 41, 606, 2047, 46, 2219, 40, 41, 41, 123, 2217, 40, 41, 59, 125, 2107, 61, 2220, 46, 2221, 40, 2103, 44, 2102, 44, 40, 2222, 44, 2223, 41, 45, 62, 123, 2212, 46, 2213, 40, 44, 2222, 44, 2223, 41, 59, 450, 2222, 605, 2223, 59, 125, 41, 59, 2107, 46, 2224, 40, 40, 2188, 44, 2189, 44, 2190, 41, 45, 62, 123, 392, 40, 2190, 41, 123, 2194, 46, 2225, 40, 41, 59, 2103, 46, 2226, 40, 2187, 41, 59, 392, 40, 2076, 631, 424, 41, 2076, 46, 2227, 40, 380, 41, 59, 2170, 46, 2228, 40, 41, 59, 125, 125, 41, 59, 125, 437, 492, 2229, 40, 41, 123, 2230, 46, 2231, 40, 41, 59, 2108, 46, 2232, 40, 2006, 58, 58, 2233, 41, 59, 2059, 2234, 61, 40, 41, 45, 62, 123, 2230, 46, 2231, 40, 41, 59, 2108, 46, 2232, 40, 2006, 58, 58, 2235, 41, 59, 392, 40, 2102, 46, 2236, 40, 41, 41, 2015, 46, 2237, 40, 473, 41, 59, 392, 40, 2079, 631, 424, 41, 123, 2079, 46, 2238, 40, 2239, 45, 62, 123, 2019, 46, 2240, 40, 2239, 41, 59, 2019, 46, 2241, 40, 2239, 41, 59, 392, 40, 2242, 40, 41, 41, 123, 392, 40, 2077, 631, 424, 41, 2077, 46, 2243, 40, 41, 59, 125, 360, 123, 2103, 46, 2244, 40, 473, 41, 59, 125, 125, 41, 59, 125, 125, 59, 2017, 46, 2245, 40, 2061, 44, 2062, 44, 2246, 40, 41, 44, 2077, 44, 2088, 44, 2234, 44, 40, 41, 45, 62, 123, 392, 40, 2104, 41, 123, 2247, 40, 41, 59, 2248, 40, 41, 59, 125, 125, 44, 40, 41, 45, 62, 2103, 46, 2249, 40, 473, 41, 41, 59, 125, 437, 492, 2250, 40, 41, 123, 2251, 46, 2252, 40, 41, 59, 2013, 46, 2250, 40, 2074, 44, 2087, 44, 2064, 44, 2065, 44, 2066, 44, 2085, 44, 2091, 44, 2093, 44, 2095, 41, 59, 392, 40, 2021, 46, 2253, 40, 41, 46, 2254, 40, 41, 614, 1501, 41, 123, 2255, 40, 41, 59, 2256, 40, 41, 59, 125, 2037, 46, 2257, 40, 41, 46, 2258, 40, 40, 2259, 44, 2260, 44, 2261, 41, 45, 62, 2118, 40, 2261, 44, 380, 41, 41, 59, 2118, 40, 2037, 46, 2257, 40, 41, 46, 2254, 40, 41, 44, 380, 41, 59, 2104, 61, 473, 59, 2049, 46, 2262, 40, 41, 59, 125, 437, 492, 2263, 40, 41, 123, 474, 123, 2264, 60, 2003, 62, 2265, 61, 2029, 46, 2266, 40, 41, 59, 2023, 46, 2267, 40, 41, 46, 2268, 40, 41, 46, 2269, 40, 2270, 45, 62, 2265, 46, 2271, 40, 2270, 46, 2272, 40, 41, 41, 605, 2270, 46, 2273, 40, 41, 614, 2274, 46, 2275, 46, 2276, 41, 46, 2277, 40, 2270, 45, 62, 123, 2278, 2279, 61, 2270, 46, 2280, 40, 41, 59, 392, 40, 2279, 46, 2281, 40, 41, 41, 123, 2003, 2282, 61, 2283, 46, 2284, 40, 44, 2045, 46, 2285, 40, 2279, 41, 44, 2270, 46, 2286, 40, 41, 44, 2270, 46, 2272, 40, 41, 41, 59, 2287, 46, 2288, 40, 2282, 41, 59, 392, 40, 2063, 631, 424, 41, 123, 2063, 46, 2289, 40, 2282, 41, 59, 125, 125, 125, 41, 59, 125, 329, 40, 2290, 2291, 41, 123, 2292, 46, 2293, 40, 2291, 46, 2294, 40, 41, 41, 59, 392, 40, 2063, 631, 424, 41, 123, 2063, 46, 2295, 40, 2291, 46, 2294, 40, 41, 41, 59, 125, 125, 125, 437, 492, 2296, 40, 41, 123, 2031, 46, 2297, 40, 41, 46, 2298, 40, 2299, 45, 62, 123, 392, 40, 2299, 46, 2300, 40, 41, 46, 2301, 40, 41, 41, 123, 450, 59, 125, 2003, 2302, 61, 2299, 46, 2300, 40, 41, 46, 2303, 40, 41, 59, 392, 40, 2023, 46, 2304, 40, 2302, 41, 614, 424, 41, 123, 2003, 2305, 61, 2306, 46, 2307, 40, 44, 2299, 46, 2300, 40, 41, 46, 2308, 40, 41, 44, 2302, 41, 59, 2309, 46, 2310, 40, 2305, 41, 59, 392, 40, 2063, 631, 424, 41, 123, 2063, 46, 2311, 40, 2305, 41, 59, 125, 125, 125, 41, 59, 125, 64, 2057, 439, 457, 2003, 2312, 40, 41, 123, 2313, 2314, 61, 2315, 40, 41, 59, 392, 40, 33, 2314, 46, 2316, 40, 41, 41, 123, 450, 424, 59, 125, 474, 40, 2317, 2318, 61, 418, 2317, 40, 2314, 41, 41, 123, 392, 40, 2318, 46, 2319, 40, 41, 41, 123, 450, 2318, 46, 2320, 40, 41, 59, 125, 125, 329, 40, 2321, 2322, 41, 123, 2322, 46, 2323, 40, 41, 59, 125, 450, 424, 59, 125, 64, 2057, 439, 457, 324, 2324, 40, 41, 123, 2325, 2326, 61, 418, 2325, 40, 2040, 46, 2327, 40, 41, 44, 2005, 41, 59, 450, 2326, 46, 2328, 40, 41, 59, 125, 439, 457, 492, 2329, 40, 324, 2330, 41, 123, 2331, 2332, 61, 418, 2331, 40, 2040, 46, 2333, 40, 41, 44, 2005, 41, 59, 392, 40, 2330, 41, 123, 392, 40, 33, 2332, 46, 2334, 40, 41, 41, 123, 474, 123, 392, 40, 33, 2332, 46, 2335, 40, 41, 41, 123, 2336, 46, 371, 40, 41, 59, 125, 125, 329, 40, 2337, 2338, 41, 123, 2338, 46, 2339, 40, 41, 59, 2340, 46, 371, 40, 44, 2338, 46, 2341, 40, 41, 41, 59, 125, 125, 125, 360, 123, 2332, 46, 353, 40, 41, 59, 125, 125, 437, 457, 2342, 2343, 40, 41, 123, 450, 418, 2342, 40, 2040, 46, 2344, 40, 41, 44, 2004, 41, 59, 125, 439, 457, 324, 2345, 40, 41, 123, 450, 2345, 40, 2312, 40, 41, 41, 59, 125, 439, 457, 324, 2345, 40, 2003, 2346, 41, 123, 450, 2346, 631, 424, 605, 2347, 46, 2348, 40, 2346, 44, 2347, 46, 2349, 41, 59, 125, 439, 457, 324, 2345, 40, 64, 2057, 2058, 60, 2003, 62, 2097, 41, 123, 2003, 2346, 61, 2312, 40, 41, 59, 324, 2345, 61, 2345, 40, 2346, 41, 59, 392, 40, 2345, 41, 123, 2350, 46, 371, 40, 44, 2346, 44, 2351, 46, 2352, 41, 59, 392, 40, 2097, 631, 424, 41, 123, 2097, 46, 2353, 40, 2346, 41, 59, 125, 125, 450, 2345, 59, 125, 439, 457, 492, 2354, 40, 41, 123, 2342, 2355, 61, 2343, 40, 41, 59, 392, 40, 33, 2355, 46, 2356, 40, 41, 41, 123, 474, 123, 392, 40, 33, 2355, 46, 2357, 40, 41, 41, 123, 2358, 46, 371, 40, 41, 59, 125, 125, 329, 40, 2359, 2360, 41, 123, 2360, 46, 2361, 40, 41, 59, 2362, 46, 371, 40, 44, 2360, 46, 2363, 40, 41, 41, 59, 125, 125, 474, 40, 2364, 2365, 61, 418, 2364, 40, 2355, 44, 380, 41, 41, 123, 2365, 46, 2366, 40, 2367, 46, 2368, 41, 59, 125, 329, 40, 2369, 2370, 41, 123, 2370, 46, 2371, 40, 41, 59, 2372, 46, 371, 40, 44, 2370, 46, 2373, 40, 41, 41, 59, 125, 125, 437, 492, 2374, 40, 41, 123, 392, 40, 33, 2375, 46, 2376, 40, 41, 605, 2069, 631, 424, 41, 123, 2003, 2377, 61, 2375, 46, 2378, 40, 41, 59, 2069, 46, 2379, 40, 2380, 46, 2381, 40, 44, 2377, 44, 2375, 46, 2382, 40, 41, 44, 2377, 41, 41, 59, 125, 125, 437, 492, 2383, 40, 41, 123, 392, 40, 2384, 46, 2385, 40, 41, 605, 2094, 631, 424, 41, 123, 2094, 46, 2386, 40, 41, 59, 125, 125, 437, 492, 2387, 40, 41, 123, 2003, 2388, 61, 59, 2035, 46, 2389, 40, 41, 46, 2390, 40, 40, 2391, 60, 2392, 62, 41, 2393, 45, 62, 123, 392, 40, 33, 2019, 46, 2394, 40, 41, 605, 33, 2035, 46, 2395, 40, 41, 605, 2033, 46, 2396, 40, 2388, 41, 605, 2393, 46, 2397, 40, 41, 605, 2067, 631, 424, 41, 2067, 46, 2398, 40, 2388, 41, 59, 125, 41, 59, 125, 437, 492, 2399, 40, 41, 123, 392, 40, 2040, 46, 2400, 40, 41, 46, 2401, 40, 41, 41, 123, 2402, 40, 44, 2068, 44, 2047, 46, 2403, 40, 41, 41, 59, 125, 125, 437, 492, 2404, 40, 41, 123, 2003, 2405, 61, 59, 2003, 2406, 61, 59, 2003, 2407, 61, 59, 2003, 2408, 61, 59, 2409, 40, 2042, 46, 2410, 46, 2411, 44, 2405, 44, 2070, 41, 59, 2409, 40, 2042, 46, 2410, 46, 2412, 44, 2406, 44, 2071, 41, 59, 2409, 40, 2042, 46, 2410, 46, 2413, 44, 2407, 44, 2072, 41, 59, 2409, 40, 2042, 46, 2410, 46, 2414, 44, 2408, 44, 2073, 41, 59, 2025, 46, 2415, 40, 41, 46, 2416, 40, 2417, 45, 62, 123, 2418, 40, 2405, 44, 2070, 44, 2419, 40, 2417, 44, 2042, 46, 2410, 46, 2411, 41, 41, 59, 2418, 40, 2406, 44, 2071, 44, 2419, 40, 2417, 44, 2042, 46, 2410, 46, 2412, 41, 41, 59, 2418, 40, 2407, 44, 2072, 44, 2419, 40, 2417, 44, 2042, 46, 2410, 46, 2413, 41, 41, 59, 2418, 40, 2408, 44, 2073, 44, 2419, 40, 2417, 44, 2042, 46, 2410, 46, 2414, 41, 41, 59, 125, 41, 59, 125, 437, 492, 2420, 40, 2042, 46, 2421, 2422, 44, 2003, 2423, 44, 2058, 60, 2003, 62, 2424, 41, 123, 324, 2425, 61, 2027, 46, 2426, 40, 41, 46, 2427, 40, 41, 46, 2428, 40, 41, 46, 2429, 40, 2430, 45, 62, 2431, 40, 2430, 44, 2422, 41, 41, 59, 2432, 40, 2423, 44, 2424, 44, 2425, 41, 59, 125, 437, 324, 2433, 40, 2434, 2435, 44, 2042, 46, 2421, 2422, 41, 123, 392, 40, 2435, 402, 2436, 605, 2035, 46, 2437, 40, 41, 631, 424, 41, 123, 450, 2035, 46, 2437, 40, 41, 46, 2438, 40, 41, 46, 2439, 40, 2440, 45, 62, 2441, 46, 2442, 40, 2440, 46, 2443, 40, 41, 44, 2440, 46, 2444, 40, 41, 41, 41, 46, 2439, 40, 2440, 45, 62, 2445, 46, 2446, 40, 40, 40, 2436, 41, 2435, 41, 46, 2447, 40, 41, 44, 2043, 46, 2448, 40, 2440, 46, 2449, 40, 41, 41, 46, 2450, 40, 41, 41, 41, 46, 2451, 40, 2440, 45, 62, 2043, 46, 2452, 40, 2043, 46, 2448, 40, 2440, 46, 2449, 40, 41, 41, 41, 46, 2446, 40, 2422, 41, 41, 59, 125, 450, 380, 59, 125, 437, 492, 2453, 40, 2003, 2423, 44, 2058, 60, 2003, 62, 2424, 44, 324, 2454, 41, 123, 392, 40, 2454, 605, 2033, 46, 2455, 40, 2423, 41, 605, 2424, 631, 424, 41, 123, 2424, 46, 2456, 40, 2423, 41, 59, 125, 125, 437, 492, 2457, 40, 41, 123, 392, 40, 2040, 46, 2458, 40, 41, 46, 2459, 40, 41, 606, 2460, 46, 2461, 40, 2462, 46, 2463, 40, 2025, 46, 2464, 40, 41, 46, 2465, 40, 41, 41, 46, 2466, 40, 41, 41, 41, 123, 450, 59, 125, 2467, 40, 41, 59, 2029, 46, 2468, 40, 41, 46, 2469, 40, 40, 2470, 44, 2471, 44, 2472, 41, 45, 62, 123, 413, 2473, 61, 40, 413, 41, 2472, 59, 392, 40, 2473, 614, 1500, 41, 123, 2467, 40, 41, 59, 125, 125, 41, 59, 125, 437, 492, 2474, 40, 41, 123, 392, 40, 2051, 46, 2475, 40, 41, 46, 2476, 40, 41, 46, 2477, 40, 2478, 58, 58, 2479, 41, 605, 2053, 46, 2475, 40, 41, 46, 2476, 40, 41, 46, 2477, 40, 2478, 58, 58, 2479, 41, 605, 2055, 46, 2475, 40, 41, 46, 2476, 40, 41, 46, 2477, 40, 2478, 58, 58, 2479, 41, 605, 2029, 46, 2480, 40, 41, 46, 2481, 40, 1500, 41, 46, 2482, 40, 41, 41, 123, 2483, 46, 2484, 40, 2096, 41, 46, 2485, 40, 41, 59, 125, 125, 439, 2486, 2487, 40, 41, 123, 450, 2017, 46, 2487, 40, 41, 59, 125, 439, 2488, 2489, 40, 41, 123, 450, 2017, 46, 2489, 40, 41, 59, 125, 439, 2486, 2490, 40, 41, 123, 450, 2017, 46, 2490, 40, 41, 59, 125, 439, 2486, 2491, 40, 41, 123, 450, 2017, 46, 2491, 40, 41, 59, 125, 439, 2099, 2492, 40, 41, 123, 450, 2017, 46, 2492, 40, 41, 59, 125, 439, 2486, 2493, 40, 41, 123, 450, 2015, 46, 2493, 40, 41, 59, 125, 439, 2099, 2494, 40, 41, 123, 450, 2015, 46, 2494, 40, 41, 59, 125, 439, 2486, 2495, 40, 41, 123, 450, 2015, 46, 2495, 40, 41, 59, 125, 439, 2486, 2496, 40, 41, 123, 450, 2015, 46, 2496, 40, 41, 59, 125, 439, 2099, 2497, 40, 41, 123, 450, 2015, 46, 2497, 40, 41, 59, 125, 439, 2486, 2498, 40, 41, 123, 450, 2015, 46, 2498, 40, 41, 59, 125, 125]",0.99996275,1
21,2970,Java,"public class TradeManager implements PersistedDataHost, DecryptedDirectMessageListener {
    private static final Logger log = LoggerFactory.getLogger(TradeManager.class);

    private final User user;
    @Getter
    private final KeyRing keyRing;
    private final BtcWalletService btcWalletService;
    private final BsqWalletService bsqWalletService;
    private final OpenOfferManager openOfferManager;
    private final ClosedTradableManager closedTradableManager;
    private final BsqSwapTradeManager bsqSwapTradeManager;
    private final FailedTradesManager failedTradesManager;
    private final P2PService p2PService;
    private final PriceFeedService priceFeedService;
    private final TradeStatisticsManager tradeStatisticsManager;
    private final TradeUtil tradeUtil;
    @Getter
    private final ArbitratorManager arbitratorManager;
    private final MediatorManager mediatorManager;
    private final Provider provider;
    private final ClockWatcher clockWatcher;

    private final Map<String, TradeProtocol> tradeProtocolByTradeId = new HashMap<>();
    private final PersistenceManager<TradableList<Trade>> persistenceManager;
    private final TradableList<Trade> tradableList = new TradableList<>();
    @Getter
    private final BooleanProperty persistedTradesInitialized = new SimpleBooleanProperty();
    @Setter
    @Nullable
    private ErrorMessageHandler takeOfferRequestErrorMessageHandler;
    @Getter
    private final LongProperty numPendingTrades = new SimpleLongProperty();
    private final ReferralIdService referralIdService;
    private final DumpDelayedPayoutTx dumpDelayedPayoutTx;
    @Getter
    private final boolean allowFaultyDelayedTxs;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public TradeManager(User user,
                        KeyRing keyRing,
                        BtcWalletService btcWalletService,
                        BsqWalletService bsqWalletService,
                        OpenOfferManager openOfferManager,
                        ClosedTradableManager closedTradableManager,
                        BsqSwapTradeManager bsqSwapTradeManager,
                        FailedTradesManager failedTradesManager,
                        P2PService p2PService,
                        PriceFeedService priceFeedService,
                        TradeStatisticsManager tradeStatisticsManager,
                        TradeUtil tradeUtil,
                        ArbitratorManager arbitratorManager,
                        MediatorManager mediatorManager,
                        Provider provider,
                        ClockWatcher clockWatcher,
                        PersistenceManager<TradableList<Trade>> persistenceManager,
                        ReferralIdService referralIdService,
                        DumpDelayedPayoutTx dumpDelayedPayoutTx,
                        @Named(Config.ALLOW_FAULTY_DELAYED_TXS) boolean allowFaultyDelayedTxs) {
        this.user = user;
        this.keyRing = keyRing;
        this.btcWalletService = btcWalletService;
        this.bsqWalletService = bsqWalletService;
        this.openOfferManager = openOfferManager;
        this.closedTradableManager = closedTradableManager;
        this.bsqSwapTradeManager = bsqSwapTradeManager;
        this.failedTradesManager = failedTradesManager;
        this.p2PService = p2PService;
        this.priceFeedService = priceFeedService;
        this.tradeStatisticsManager = tradeStatisticsManager;
        this.tradeUtil = tradeUtil;
        this.arbitratorManager = arbitratorManager;
        this.mediatorManager = mediatorManager;
        this.provider = provider;
        this.clockWatcher = clockWatcher;
        this.referralIdService = referralIdService;
        this.dumpDelayedPayoutTx = dumpDelayedPayoutTx;
        this.allowFaultyDelayedTxs = allowFaultyDelayedTxs;
        this.persistenceManager = persistenceManager;

        this.persistenceManager.initialize(tradableList, ""PendingTrades"", PersistenceManager.Source.PRIVATE);

        p2PService.addDecryptedDirectMessageListener(this);

        failedTradesManager.setUnFailTradeCallback(this::unFailTrade);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PersistedDataHost
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void readPersisted(Runnable completeHandler) {
        persistenceManager.readPersisted(persisted -> {
                    tradableList.setAll(persisted.getList());
                    tradableList.stream()
                            .filter(trade -> trade.getOffer() != null)
                            .forEach(trade -> trade.getOffer().setPriceFeedService(priceFeedService));
                    dumpDelayedPayoutTx.maybeDumpDelayedPayoutTxs(tradableList, ""delayed_payout_txs_pending"");
                    completeHandler.run();
                },
                completeHandler);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DecryptedDirectMessageListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onDirectMessage(DecryptedMessageWithPubKey message, NodeAddress peer) {
        NetworkEnvelope networkEnvelope = message.getNetworkEnvelope();
        if (networkEnvelope instanceof InputsForDepositTxRequest) {
            handleTakeOfferRequest(peer, (InputsForDepositTxRequest) networkEnvelope);
        } else if (networkEnvelope instanceof BsqSwapRequest) {
            handleBsqSwapRequest(peer, (BsqSwapRequest) networkEnvelope);
        }
    }

    // The maker received a TakeOfferRequest
    private void handleTakeOfferRequest(NodeAddress peer, InputsForDepositTxRequest inputsForDepositTxRequest) {
        log.info(""Received inputsForDepositTxRequest from {} with tradeId {} and uid {}"",
                peer, inputsForDepositTxRequest.getTradeId(), inputsForDepositTxRequest.getUid());

        try {
            Validator.nonEmptyStringOf(inputsForDepositTxRequest.getTradeId());
        } catch (Throwable t) {
            log.warn(""Invalid inputsForDepositTxRequest "" + inputsForDepositTxRequest.toString());
            return;
        }

        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(inputsForDepositTxRequest.getTradeId());
        if (!openOfferOptional.isPresent()) {
            return;
        }

        OpenOffer openOffer = openOfferOptional.get();
        if (openOffer.getState() != OpenOffer.State.AVAILABLE) {
            return;
        }

        Offer offer = openOffer.getOffer();
        openOfferManager.reserveOpenOffer(openOffer);
        Trade trade;
        if (offer.isBuyOffer()) {
            trade = new BuyerAsMakerTrade(offer,
                    Coin.valueOf(inputsForDepositTxRequest.getTxFee()),
                    Coin.valueOf(inputsForDepositTxRequest.getTakerFee()),
                    inputsForDepositTxRequest.isCurrencyForTakerFeeBtc(),
                    openOffer.getArbitratorNodeAddress(),
                    openOffer.getMediatorNodeAddress(),
                    openOffer.getRefundAgentNodeAddress(),
                    btcWalletService,
                    getNewProcessModel(offer),
                    UUID.randomUUID().toString());
        } else {
            trade = new SellerAsMakerTrade(offer,
                    Coin.valueOf(inputsForDepositTxRequest.getTxFee()),
                    Coin.valueOf(inputsForDepositTxRequest.getTakerFee()),
                    inputsForDepositTxRequest.isCurrencyForTakerFeeBtc(),
                    openOffer.getArbitratorNodeAddress(),
                    openOffer.getMediatorNodeAddress(),
                    openOffer.getRefundAgentNodeAddress(),
                    btcWalletService,
                    getNewProcessModel(offer),
                    UUID.randomUUID().toString());
        }

        TradeProtocol tradeProtocol = createTradeProtocol(trade);

        initTradeAndProtocol(trade, tradeProtocol);

        ((MakerProtocol) tradeProtocol).handleTakeOfferRequest(inputsForDepositTxRequest, peer, errorMessage -> {
            if (takeOfferRequestErrorMessageHandler != null)
                takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);
        });

        requestPersistence();
    }


    private void handleBsqSwapRequest(NodeAddress peer, BsqSwapRequest request) {
        if (!BsqSwapTakeOfferRequestVerification.isValid(openOfferManager, provider.getFeeService(), keyRing, peer, request)) {
            return;
        }

        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(request.getTradeId());
        checkArgument(openOfferOptional.isPresent());
        OpenOffer openOffer = openOfferOptional.get();
        Offer offer = openOffer.getOffer();
        openOfferManager.reserveOpenOffer(openOffer);

        BsqSwapTrade bsqSwapTrade;
        Coin amount = Coin.valueOf(request.getTradeAmount());
        BsqSwapProtocolModel bsqSwapProtocolModel = new BsqSwapProtocolModel(keyRing.getPubKeyRing());
        if (request instanceof BuyersBsqSwapRequest) {
            checkArgument(!offer.isBuyOffer(),
                    ""offer is expected to be a sell offer at handleBsqSwapRequest"");
            bsqSwapTrade = new BsqSwapSellerAsMakerTrade(
                    offer,
                    amount,
                    request.getTradeDate(),
                    request.getSenderNodeAddress(),
                    request.getTxFeePerVbyte(),
                    request.getMakerFee(),
                    request.getTakerFee(),
                    bsqSwapProtocolModel);
        } else {
            checkArgument(request instanceof SellersBsqSwapRequest);
            checkArgument(offer.isBuyOffer(),
                    ""offer is expected to be a buy offer at handleBsqSwapRequest"");
            bsqSwapTrade = new BsqSwapBuyerAsMakerTrade(
                    offer,
                    amount,
                    request.getTradeDate(),
                    request.getSenderNodeAddress(),
                    request.getTxFeePerVbyte(),
                    request.getMakerFee(),
                    request.getTakerFee(),
                    bsqSwapProtocolModel);
        }

        TradeProtocol tradeProtocol = createTradeProtocol(bsqSwapTrade);
        initTradeAndProtocol(bsqSwapTrade, tradeProtocol);

        ((BsqSwapMakerProtocol) tradeProtocol).handleTakeOfferRequest(request,
                peer,
                errorMessage -> {
                    if (takeOfferRequestErrorMessageHandler != null)
                        takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);
                });

        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        if (p2PService.isBootstrapped()) {
            initPersistedTrades();
        } else {
            p2PService.addP2PServiceListener(new BootstrapListener() {
                @Override
                public void onUpdatedDataReceived() {
                    initPersistedTrades();
                }
            });
        }

        getObservableList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());
        onTradesChanged();

        btcWalletService.getAddressEntriesForAvailableBalanceStream()
                .filter(addressEntry -> addressEntry.getOfferId() != null)
                .forEach(addressEntry -> {
                    log.warn(""Swapping pending OFFER_FUNDING entries at startup. offerId={}"", addressEntry.getOfferId());
                    btcWalletService.swapTradeEntryToAvailableEntry(addressEntry.getOfferId(), AddressEntry.Context.OFFER_FUNDING);
                });
    }

    public TradeProtocol getTradeProtocol(TradeModel trade) {
        String uid = trade.getUid();
        if (tradeProtocolByTradeId.containsKey(uid)) {
            return tradeProtocolByTradeId.get(uid);
        } else {
            TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);
            TradeProtocol prev = tradeProtocolByTradeId.put(uid, tradeProtocol);
            if (prev != null) {
                log.error(""We had already an entry with uid {}"", trade.getUid());
            }

            return tradeProtocol;
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Init pending trade
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void initPersistedTrades() {
        Set<Trade> toRemove = new HashSet<>();
        tradableList.forEach(tradeModel -> {
            boolean valid = initPersistedTrade(tradeModel);
            if (!valid) {
                toRemove.add(tradeModel);
            }
        });
        toRemove.forEach(tradableList::remove);
        if (!toRemove.isEmpty()) {
            requestPersistence();
        }

        persistedTradesInitialized.set(true);

        // We do not include failed trades as they should not be counted anyway in the trade statistics
        Set<TradeModel> allTrades = new HashSet<>(closedTradableManager.getClosedTrades());
        allTrades.addAll(bsqSwapTradeManager.getBsqSwapTrades());
        allTrades.addAll(tradableList.getList());
        String referralId = referralIdService.getOptionalReferralId().orElse(null);
        boolean isTorNetworkNode = p2PService.getNetworkNode() instanceof TorNetworkNode;
        tradeStatisticsManager.maybeRepublishTradeStatistics(allTrades, referralId, isTorNetworkNode);
    }

    private boolean initPersistedTrade(TradeModel tradeModel) {
        if (tradeModel instanceof BsqSwapTrade && !tradeModel.isCompleted()) {
            // We do not keep pending or failed BsqSwap trades in our list and
            // do not process them at restart.
            // We remove the trade from the list after iterations in initPersistedTrades
            return false;
        }
        initTradeAndProtocol(tradeModel, getTradeProtocol(tradeModel));

        if (tradeModel instanceof Trade) {
            ((Trade) tradeModel).updateDepositTxFromWallet();
        }
        requestPersistence();
        return true;
    }

    private void initTradeAndProtocol(TradeModel tradeModel, TradeProtocol tradeProtocol) {
        tradeProtocol.initialize(provider, this, tradeModel.getOffer());
        tradeModel.initialize(provider);
        requestPersistence();
    }

    public void requestPersistence() {
        persistenceManager.requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Take offer
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void checkOfferAvailability(Offer offer,
                                       boolean isTakerApiUser,
                                       ResultHandler resultHandler,
                                       ErrorMessageHandler errorMessageHandler) {
        if (btcWalletService.isUnconfirmedTransactionsLimitHit() ||
                bsqWalletService.isUnconfirmedTransactionsLimitHit()) {
            String errorMessage = Res.get(""shared.unconfirmedTransactionsLimitReached"");
            errorMessageHandler.handleErrorMessage(errorMessage);
            log.warn(errorMessage);
            return;
        }

        offer.checkOfferAvailability(getOfferAvailabilityModel(offer, isTakerApiUser), resultHandler, errorMessageHandler);
    }

    // First we check if offer is still available then we create the trade with the protocol
    public void onTakeOffer(Coin amount,
                            Coin txFee,
                            Coin takerFee,
                            boolean isCurrencyForTakerFeeBtc,
                            long tradePrice,
                            Coin fundsNeededForTrade,
                            Offer offer,
                            String paymentAccountId,
                            boolean useSavingsWallet,
                            boolean isTakerApiUser,
                            TradeResultHandler<Trade> tradeResultHandler,
                            ErrorMessageHandler errorMessageHandler) {

        checkArgument(!wasOfferAlreadyUsedInTrade(offer.getId()));

        OfferAvailabilityModel model = getOfferAvailabilityModel(offer, isTakerApiUser);
        offer.checkOfferAvailability(model,
                () -> {
                    if (offer.getState() == Offer.State.AVAILABLE) {
                        Trade trade;
                        if (offer.isBuyOffer()) {
                            trade = new SellerAsTakerTrade(offer,
                                    amount,
                                    txFee,
                                    takerFee,
                                    isCurrencyForTakerFeeBtc,
                                    tradePrice,
                                    model.getPeerNodeAddress(),
                                    model.getSelectedArbitrator(),
                                    model.getSelectedMediator(),
                                    model.getSelectedRefundAgent(),
                                    btcWalletService,
                                    getNewProcessModel(offer),
                                    UUID.randomUUID().toString());
                        } else {
                            trade = new BuyerAsTakerTrade(offer,
                                    amount,
                                    txFee,
                                    takerFee,
                                    isCurrencyForTakerFeeBtc,
                                    tradePrice,
                                    model.getPeerNodeAddress(),
                                    model.getSelectedArbitrator(),
                                    model.getSelectedMediator(),
                                    model.getSelectedRefundAgent(),
                                    btcWalletService,
                                    getNewProcessModel(offer),
                                    UUID.randomUUID().toString());
                        }
                        trade.getProcessModel().setUseSavingsWallet(useSavingsWallet);
                        trade.getProcessModel().setFundsNeededForTradeAsLong(fundsNeededForTrade.value);
                        trade.setTakerPaymentAccountId(paymentAccountId);

                        TradeProtocol tradeProtocol = createTradeProtocol(trade);

                        initTradeAndProtocol(trade, tradeProtocol);

                        ((TakerProtocol) tradeProtocol).onTakeOffer();
                        tradeResultHandler.handleResult(trade);
                        requestPersistence();
                    }
                },
                errorMessageHandler);

        requestPersistence();
    }

    public void onTakeBsqSwapOffer(Offer offer,
                                   Coin amount,
                                   long txFeePerVbyte,
                                   long makerFee,
                                   long takerFee,
                                   boolean isTakerApiUser,
                                   TradeResultHandler<BsqSwapTrade> tradeResultHandler,
                                   ErrorMessageHandler errorMessageHandler) {

        checkArgument(!wasOfferAlreadyUsedInTrade(offer.getId()));

        OfferAvailabilityModel model = getOfferAvailabilityModel(offer, isTakerApiUser);
        offer.checkOfferAvailability(model,
                () -> {
                    if (offer.getState() == Offer.State.AVAILABLE) {
                        BsqSwapTrade bsqSwapTrade;
                        NodeAddress peerNodeAddress = model.getPeerNodeAddress();
                        BsqSwapProtocolModel bsqSwapProtocolModel = new BsqSwapProtocolModel(keyRing.getPubKeyRing());
                        if (offer.isBuyOffer()) {
                            bsqSwapTrade = new BsqSwapSellerAsTakerTrade(
                                    offer,
                                    amount,
                                    peerNodeAddress,
                                    txFeePerVbyte,
                                    makerFee,
                                    takerFee,
                                    bsqSwapProtocolModel);
                        } else {
                            bsqSwapTrade = new BsqSwapBuyerAsTakerTrade(
                                    offer,
                                    amount,
                                    peerNodeAddress,
                                    txFeePerVbyte,
                                    makerFee,
                                    takerFee,
                                    bsqSwapProtocolModel);
                        }

                        TradeProtocol tradeProtocol = createTradeProtocol(bsqSwapTrade);

                        initTradeAndProtocol(bsqSwapTrade, tradeProtocol);

                        ((TakerProtocol) tradeProtocol).onTakeOffer();
                        tradeResultHandler.handleResult(bsqSwapTrade);
                        requestPersistence();
                    }
                },
                errorMessageHandler);

        requestPersistence();
    }

    private TradeProtocol createTradeProtocol(TradeModel tradeModel) {
        TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(tradeModel);
        TradeProtocol prev = tradeProtocolByTradeId.put(tradeModel.getUid(), tradeProtocol);
        if (prev != null) {
            log.error(""We had already an entry with uid {}"", tradeModel.getUid());
        }
        if (tradeModel instanceof Trade) {
            tradableList.add((Trade) tradeModel);
        }

        // For BsqTrades we only store the trade at completion

        return tradeProtocol;
    }

    private ProcessModel getNewProcessModel(Offer offer) {
        return new ProcessModel(checkNotNull(offer).getId(),
                provider.getUser().getAccountId(),
                provider.getKeyRing().getPubKeyRing());
    }

    private OfferAvailabilityModel getOfferAvailabilityModel(Offer offer, boolean isTakerApiUser) {
        return new OfferAvailabilityModel(
                offer,
                keyRing.getPubKeyRing(),
                p2PService,
                user,
                mediatorManager,
                tradeStatisticsManager,
                isTakerApiUser);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Complete trade
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onWithdrawRequest(String toAddress,
                                  Coin amount,
                                  Coin fee,
                                  KeyParameter aesKey,
                                  Trade trade,
                                  @Nullable String memo,
                                  ResultHandler resultHandler,
                                  FaultHandler faultHandler) {
        String fromAddress = btcWalletService.getOrCreateAddressEntry(trade.getId(),
                AddressEntry.Context.TRADE_PAYOUT).getAddressString();
        FutureCallback<Transaction> callback = new FutureCallback<>() {
            @Override
            public void onSuccess(@javax.annotation.Nullable Transaction transaction) {
                if (transaction != null) {
                    log.debug(""onWithdraw onSuccess tx ID:"" + transaction.getTxId().toString());
                    onTradeCompleted(trade);
                    trade.setState(Trade.State.WITHDRAW_COMPLETED);
                    getTradeProtocol(trade).onWithdrawCompleted();
                    requestPersistence();
                    resultHandler.handleResult();
                }
            }

            @Override
            public void onFailure(@NotNull Throwable t) {
                t.printStackTrace();
                log.error(t.getMessage());
                faultHandler.handleFault(""An exception occurred at requestWithdraw (onFailure)."", t);
            }
        };
        try {
            btcWalletService.sendFunds(fromAddress, toAddress, amount, fee, aesKey,
                    AddressEntry.Context.TRADE_PAYOUT, memo, callback);
        } catch (AddressFormatException | InsufficientMoneyException | AddressEntryException e) {
            e.printStackTrace();
            log.error(e.getMessage());
            faultHandler.handleFault(""An exception occurred at requestWithdraw."", e);
        }
    }

    // If trade was completed (closed without fault but might be closed by a dispute) we move it to the closed trades
    public void onTradeCompleted(Trade trade) {
        removeTrade(trade);
        closedTradableManager.add(trade);

        // TODO The address entry should have been removed already. Check and if its the case remove that.
        btcWalletService.resetAddressEntriesForPendingTrade(trade.getId());
        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Dispute
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void closeDisputedTrade(String tradeId, Trade.DisputeState disputeState) {
        getTradeById(tradeId).ifPresent(trade -> {
            trade.setDisputeState(disputeState);
            onTradeCompleted(trade);
            btcWalletService.swapTradeEntryToAvailableEntry(trade.getId(), AddressEntry.Context.TRADE_PAYOUT);
            requestPersistence();
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Trade period state
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void applyTradePeriodState() {
        updateTradePeriodState();
        clockWatcher.addListener(new ClockWatcher.Listener() {
            @Override
            public void onSecondTick() {
            }

            @Override
            public void onMinuteTick() {
                updateTradePeriodState();
            }
        });
    }

    private void updateTradePeriodState() {
        getObservableList().forEach(trade -> {
            if (!trade.isPayoutPublished()) {
                Date maxTradePeriodDate = trade.getMaxTradePeriodDate();
                Date halfTradePeriodDate = trade.getHalfTradePeriodDate();
                if (maxTradePeriodDate != null && halfTradePeriodDate != null) {
                    Date now = new Date();
                    if (now.after(maxTradePeriodDate)) {
                        trade.setTradePeriodState(Trade.TradePeriodState.TRADE_PERIOD_OVER);
                        requestPersistence();
                    } else if (now.after(halfTradePeriodDate)) {
                        trade.setTradePeriodState(Trade.TradePeriodState.SECOND_HALF);
                        requestPersistence();
                    }
                }
            }
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Failed trade handling
    ///////////////////////////////////////////////////////////////////////////////////////////

    // If trade is in already in critical state (if taker role: taker fee; both roles: after deposit published)
    // we move the trade to failedTradesManager
    public void onMoveInvalidTradeToFailedTrades(Trade trade) {
        removeTrade(trade);
        failedTradesManager.add(trade);
    }

    public void addFailedTradeToPendingTrades(Trade trade) {
        if (!trade.isInitialized()) {
            initPersistedTrade(trade);
        }
        addTrade(trade);
    }

    public Stream<Trade> getTradesStreamWithFundsLockedIn() {
        return getObservableList().stream().filter(Trade::isFundsLockedIn);
    }

    public Set<String> getSetOfFailedOrClosedTradeIdsFromLockedInFunds() throws TradeTxException {
        AtomicReference<TradeTxException> tradeTxException = new AtomicReference<>();
        Set<String> tradesIdSet = getTradesStreamWithFundsLockedIn()
                .filter(Trade::hasFailed)
                .map(Trade::getId)
                .collect(Collectors.toSet());
        tradesIdSet.addAll(failedTradesManager.getTradesStreamWithFundsLockedIn()
                .filter(trade -> trade.getDepositTx() != null)
                .map(trade -> {
                    log.warn(""We found a failed trade with locked up funds. "" +
                            ""That should never happen. trade ID="" + trade.getId());
                    return trade.getId();
                })
                .collect(Collectors.toSet()));
        tradesIdSet.addAll(closedTradableManager.getTradesStreamWithFundsLockedIn()
                .map(trade -> {
                    Transaction depositTx = trade.getDepositTx();
                    if (depositTx != null) {
                        TransactionConfidence confidence = btcWalletService.getConfidenceForTxId(depositTx.getTxId().toString());
                        if (confidence != null && confidence.getConfidenceType() != TransactionConfidence.ConfidenceType.BUILDING) {
                            tradeTxException.set(new TradeTxException(Res.get(""error.closedTradeWithUnconfirmedDepositTx"", trade.getShortId())));
                        } else {
                            log.warn(""We found a closed trade with locked up funds. "" +
                                    ""That should never happen. trade ID="" + trade.getId());
                        }
                    } else {
                        tradeTxException.set(new TradeTxException(Res.get(""error.closedTradeWithNoDepositTx"", trade.getShortId())));
                    }
                    return trade.getId();
                })
                .collect(Collectors.toSet()));

        if (tradeTxException.get() != null)
            throw tradeTxException.get();

        return tradesIdSet;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqSwapTradeManager delegates
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onBsqSwapTradeCompleted(BsqSwapTrade bsqSwapTrade) {
        bsqSwapTradeManager.onTradeCompleted(bsqSwapTrade);
    }

    public Optional<BsqSwapTrade> findBsqSwapTradeById(String tradeId) {
        return bsqSwapTradeManager.findBsqSwapTradeById(tradeId);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters, Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ObservableList<Trade> getObservableList() {
        return tradableList.getObservableList();
    }

    public BooleanProperty persistedTradesInitializedProperty() {
        return persistedTradesInitialized;
    }

    public boolean isMyOffer(Offer offer) {
        return offer.isMyOffer(keyRing);
    }

    public boolean wasOfferAlreadyUsedInTrade(String offerId) {
        Stream<Tradable> combinedStream = Stream.concat(getPendingAndBsqSwapTrades(),
                failedTradesManager.getObservableList().stream());

        combinedStream = Stream.concat(combinedStream,
                closedTradableManager.getObservableList().stream());

        return combinedStream.anyMatch(t -> t.getOffer().getId().equals(offerId));
    }

    public boolean isBuyer(Offer offer) {
        // If I am the maker, we use the OfferDirection, otherwise the mirrored direction
        if (isMyOffer(offer))
            return offer.isBuyOffer();
        else
            return offer.getDirection() == OfferDirection.SELL;
    }

    public Optional<TradeModel> getTradeModelById(String tradeId) {
        return getPendingAndBsqSwapTrades()
                .filter(tradeModel -> tradeModel.getId().equals(tradeId))
                .findFirst();
    }

    public Optional<Trade> getTradeById(String tradeId) {
        return getTradeModelById(tradeId)
                .filter(tradeModel -> tradeModel instanceof Trade)
                .map(tradeModel -> (Trade) tradeModel);
    }

    private void removeTrade(Trade trade) {
        if (tradableList.remove(trade)) {
            requestPersistence();
        }
    }

    private void addTrade(Trade trade) {
        if (tradableList.add(trade)) {
            requestPersistence();
        }
    }

    private Stream<TradeModel> getPendingAndBsqSwapTrades() {
        return Stream.concat(tradableList.stream(),
                bsqSwapTradeManager.getObservableList().stream());
    }

    // TODO Remove once tradableList is refactored to a final field
    //  (part of the persistence refactor PR)
    private void onTradesChanged() {
        this.numPendingTrades.set(getObservableList().size());
    }

    // If trade still has funds locked up it might come back from failed trades
    // Aborts unfailing if the address entries needed are not available
    private boolean unFailTrade(Trade trade) {
        if (!recoverAddresses(trade)) {
            log.warn(""Failed to recover address during unFail trade"");
            return false;
        }

        initPersistedTrade(trade);

        if (!tradableList.contains(trade)) {
            tradableList.add(trade);
        }
        return true;
    }

    // The trade is added to pending trades if the associated address entries are AVAILABLE and
    // the relevant entries are changed, otherwise it's not added and no address entries are changed
    private boolean recoverAddresses(Trade trade) {
        // Find addresses associated with this trade.
        var entries = tradeUtil.getAvailableAddresses(trade);
        if (entries == null)
            return false;

        btcWalletService.recoverAddressEntry(trade.getId(), entries.first,
                AddressEntry.Context.MULTI_SIG);
        btcWalletService.recoverAddressEntry(trade.getId(), entries.second,
                AddressEntry.Context.TRADE_PAYOUT);
        return true;
    }
}",1,"[439, 334, 2000, 395, 2001, 44, 2002, 123, 437, 457, 381, 2003, 2004, 61, 2005, 46, 2006, 40, 2000, 46, 334, 41, 59, 437, 381, 2007, 2008, 59, 64, 2009, 437, 381, 2010, 2011, 59, 437, 381, 2012, 2013, 59, 437, 381, 2014, 2015, 59, 437, 381, 2016, 2017, 59, 437, 381, 2018, 2019, 59, 437, 381, 2020, 2021, 59, 437, 381, 2022, 2023, 59, 437, 381, 2024, 2025, 59, 437, 381, 2026, 2027, 59, 437, 381, 2028, 2029, 59, 437, 381, 2030, 2031, 59, 64, 2009, 437, 381, 2032, 2033, 59, 437, 381, 2034, 2035, 59, 437, 381, 2036, 2037, 59, 437, 381, 2038, 2039, 59, 437, 381, 2040, 60, 2041, 44, 2042, 62, 2043, 61, 418, 2044, 60, 62, 40, 41, 59, 437, 381, 2045, 60, 2046, 60, 2047, 641, 2048, 59, 437, 381, 2046, 60, 2047, 62, 2049, 61, 418, 2046, 60, 62, 40, 41, 59, 64, 2009, 437, 381, 2050, 2051, 61, 418, 2052, 40, 41, 59, 64, 2053, 64, 2054, 437, 2055, 2056, 59, 64, 2009, 437, 381, 2057, 2058, 61, 418, 2059, 40, 41, 59, 437, 381, 2060, 2061, 59, 437, 381, 2062, 2063, 59, 64, 2009, 437, 381, 324, 2064, 59, 64, 2065, 439, 2000, 40, 2007, 2008, 44, 2010, 2011, 44, 2012, 2013, 44, 2014, 2015, 44, 2016, 2017, 44, 2018, 2019, 44, 2020, 2021, 44, 2022, 2023, 44, 2024, 2025, 44, 2026, 2027, 44, 2028, 2029, 44, 2030, 2031, 44, 2032, 2033, 44, 2034, 2035, 44, 2036, 2037, 44, 2038, 2039, 44, 2045, 60, 2046, 60, 2047, 641, 2048, 44, 2060, 2061, 44, 2062, 2063, 44, 64, 2066, 40, 2067, 46, 2068, 41, 324, 2064, 41, 123, 467, 46, 2008, 61, 2008, 59, 467, 46, 2011, 61, 2011, 59, 467, 46, 2013, 61, 2013, 59, 467, 46, 2015, 61, 2015, 59, 467, 46, 2017, 61, 2017, 59, 467, 46, 2019, 61, 2019, 59, 467, 46, 2021, 61, 2021, 59, 467, 46, 2023, 61, 2023, 59, 467, 46, 2025, 61, 2025, 59, 467, 46, 2027, 61, 2027, 59, 467, 46, 2029, 61, 2029, 59, 467, 46, 2031, 61, 2031, 59, 467, 46, 2033, 61, 2033, 59, 467, 46, 2035, 61, 2035, 59, 467, 46, 2037, 61, 2037, 59, 467, 46, 2039, 61, 2039, 59, 467, 46, 2061, 61, 2061, 59, 467, 46, 2063, 61, 2063, 59, 467, 46, 2064, 61, 2064, 59, 467, 46, 2048, 61, 2048, 59, 467, 46, 2048, 46, 2069, 40, 2049, 44, 44, 2045, 46, 2070, 46, 2071, 41, 59, 2025, 46, 2072, 40, 467, 41, 59, 2023, 46, 2073, 40, 467, 58, 58, 2074, 41, 59, 125, 64, 2075, 439, 492, 2076, 40, 2077, 2078, 41, 123, 2048, 46, 2076, 40, 2079, 45, 62, 123, 2049, 46, 2080, 40, 2079, 46, 2081, 40, 41, 41, 59, 2049, 46, 2082, 40, 41, 46, 2083, 40, 2084, 45, 62, 2084, 46, 2085, 40, 41, 631, 424, 41, 46, 2086, 40, 2084, 45, 62, 2084, 46, 2085, 40, 41, 46, 2087, 40, 2027, 41, 41, 59, 2063, 46, 2088, 40, 2049, 44, 41, 59, 2078, 46, 2089, 40, 41, 59, 125, 44, 2078, 41, 59, 125, 64, 2075, 439, 492, 2090, 40, 2091, 2092, 44, 2093, 2094, 41, 123, 2095, 2096, 61, 2092, 46, 2097, 40, 41, 59, 392, 40, 2096, 402, 2098, 41, 123, 2099, 40, 2094, 44, 40, 2098, 41, 2096, 41, 59, 125, 360, 392, 40, 2096, 402, 2100, 41, 123, 2101, 40, 2094, 44, 40, 2100, 41, 2096, 41, 59, 125, 125, 437, 492, 2102, 40, 2093, 2094, 44, 2103, 2104, 41, 123, 2004, 46, 2105, 40, 44, 2094, 44, 2104, 46, 2106, 40, 41, 44, 2104, 46, 2107, 40, 41, 41, 59, 474, 123, 2108, 46, 2109, 40, 2104, 46, 2106, 40, 41, 41, 59, 125, 329, 40, 2110, 2111, 41, 123, 2004, 46, 2112, 40, 43, 2104, 46, 2113, 40, 41, 41, 59, 450, 59, 125, 2114, 60, 2115, 62, 2116, 61, 2017, 46, 2117, 40, 2104, 46, 2106, 40, 41, 41, 59, 392, 40, 33, 2116, 46, 2118, 40, 41, 41, 123, 450, 59, 125, 2115, 2119, 61, 2116, 46, 2120, 40, 41, 59, 392, 40, 2119, 46, 2121, 40, 41, 631, 2115, 46, 2122, 46, 2123, 41, 123, 450, 59, 125, 2124, 2125, 61, 2119, 46, 2126, 40, 41, 59, 2017, 46, 2127, 40, 2119, 41, 59, 2047, 2128, 59, 392, 40, 2125, 46, 2129, 40, 41, 41, 123, 2128, 61, 418, 2130, 40, 2125, 44, 2131, 46, 2132, 40, 2104, 46, 2133, 40, 41, 41, 44, 2131, 46, 2132, 40, 2104, 46, 2134, 40, 41, 41, 44, 2104, 46, 2135, 40, 41, 44, 2119, 46, 2136, 40, 41, 44, 2119, 46, 2137, 40, 41, 44, 2119, 46, 2138, 40, 41, 44, 2013, 44, 2139, 40, 2125, 41, 44, 2140, 46, 2141, 40, 41, 46, 2142, 40, 41, 41, 59, 125, 360, 123, 2128, 61, 418, 2143, 40, 2125, 44, 2144, 46, 2145, 40, 2104, 46, 2146, 40, 41, 41, 44, 2144, 46, 2145, 40, 2104, 46, 2147, 40, 41, 41, 44, 2104, 46, 2148, 40, 41, 44, 2119, 46, 2149, 40, 41, 44, 2119, 46, 2150, 40, 41, 44, 2119, 46, 2151, 40, 41, 44, 2013, 44, 2152, 40, 2125, 41, 44, 2153, 46, 2154, 40, 41, 46, 2155, 40, 41, 41, 59, 125, 2042, 2156, 61, 2157, 40, 2128, 41, 59, 2158, 40, 2128, 44, 2156, 41, 59, 40, 40, 2159, 41, 2156, 41, 46, 2102, 40, 2104, 44, 2094, 44, 2160, 45, 62, 123, 392, 40, 2056, 631, 424, 41, 2056, 46, 2161, 40, 2160, 41, 59, 125, 41, 59, 2162, 40, 41, 59, 125, 437, 492, 2163, 40, 2093, 2094, 44, 2164, 2165, 41, 123, 392, 40, 33, 2166, 46, 2167, 40, 2017, 44, 2037, 46, 2168, 40, 41, 44, 2011, 44, 2094, 44, 2165, 41, 41, 123, 450, 59, 125, 2169, 60, 2170, 62, 2171, 61, 2017, 46, 2172, 40, 2165, 46, 2173, 40, 41, 41, 59, 2174, 40, 2171, 46, 2175, 40, 41, 41, 59, 2170, 2176, 61, 2171, 46, 2177, 40, 41, 59, 2178, 2179, 61, 2176, 46, 2180, 40, 41, 59, 2017, 46, 2181, 40, 2176, 41, 59, 2182, 2183, 59, 2184, 2185, 61, 2184, 46, 2186, 40, 2165, 46, 2187, 40, 41, 41, 59, 2188, 2189, 61, 418, 2188, 40, 2011, 46, 2190, 40, 41, 41, 59, 392, 40, 2165, 402, 2191, 41, 123, 2174, 40, 33, 2179, 46, 2192, 40, 41, 44, 41, 59, 2183, 61, 418, 2193, 40, 2179, 44, 2185, 44, 2165, 46, 2194, 40, 41, 44, 2165, 46, 2195, 40, 41, 44, 2165, 46, 2196, 40, 41, 44, 2165, 46, 2197, 40, 41, 44, 2165, 46, 2198, 40, 41, 44, 2189, 41, 59, 125, 360, 123, 2174, 40, 2165, 402, 2199, 41, 59, 2174, 40, 2179, 46, 2200, 40, 41, 44, 41, 59, 2183, 61, 418, 2201, 40, 2179, 44, 2185, 44, 2165, 46, 2202, 40, 41, 44, 2165, 46, 2203, 40, 41, 44, 2165, 46, 2204, 40, 41, 44, 2165, 46, 2205, 40, 41, 44, 2165, 46, 2206, 40, 41, 44, 2189, 41, 59, 125, 2042, 2207, 61, 2208, 40, 2183, 41, 59, 2209, 40, 2183, 44, 2207, 41, 59, 40, 40, 2210, 41, 2207, 41, 46, 2102, 40, 2165, 44, 2094, 44, 2211, 45, 62, 123, 392, 40, 2056, 631, 424, 41, 2056, 46, 2212, 40, 2211, 41, 59, 125, 41, 59, 2213, 40, 41, 59, 125, 439, 492, 2214, 40, 41, 123, 392, 40, 2025, 46, 2215, 40, 41, 41, 123, 2216, 40, 41, 59, 125, 360, 123, 2025, 46, 2217, 40, 418, 2218, 40, 41, 123, 64, 2075, 439, 492, 2219, 40, 41, 123, 2220, 40, 41, 59, 125, 125, 41, 59, 125, 2221, 40, 41, 46, 2222, 40, 40, 2223, 60, 2047, 62, 41, 2224, 45, 62, 2225, 40, 41, 41, 59, 2225, 40, 41, 59, 2013, 46, 2226, 40, 41, 46, 2227, 40, 2228, 45, 62, 2228, 46, 2229, 40, 41, 631, 424, 41, 46, 2230, 40, 2228, 45, 62, 123, 2004, 46, 2231, 40, 44, 2228, 46, 2229, 40, 41, 41, 59, 2013, 46, 2232, 40, 2228, 46, 2229, 40, 41, 44, 2233, 46, 2234, 46, 2235, 41, 59, 125, 41, 59, 125, 439, 2042, 2236, 40, 2237, 2238, 41, 123, 2041, 2239, 61, 2238, 46, 2240, 40, 41, 59, 392, 40, 2043, 46, 2241, 40, 2239, 41, 41, 123, 450, 2043, 46, 2242, 40, 2239, 41, 59, 125, 360, 123, 2042, 2243, 61, 2244, 46, 2245, 40, 2238, 41, 59, 2042, 2246, 61, 2043, 46, 2247, 40, 2239, 44, 2243, 41, 59, 392, 40, 2246, 631, 424, 41, 123, 2004, 46, 371, 40, 44, 2238, 46, 2240, 40, 41, 41, 59, 125, 450, 2243, 59, 125, 125, 437, 492, 2248, 40, 41, 123, 2249, 60, 2047, 62, 2250, 61, 418, 2251, 60, 62, 40, 41, 59, 2049, 46, 2252, 40, 2253, 45, 62, 123, 324, 2254, 61, 2255, 40, 2253, 41, 59, 392, 40, 33, 2254, 41, 123, 2250, 46, 2256, 40, 2253, 41, 59, 125, 125, 41, 59, 2250, 46, 2252, 40, 2049, 58, 58, 2257, 41, 59, 392, 40, 33, 2250, 46, 2258, 40, 41, 41, 123, 2259, 40, 41, 59, 125, 2051, 46, 2260, 40, 473, 41, 59, 2249, 60, 2237, 62, 2261, 61, 418, 2251, 60, 62, 40, 2019, 46, 2262, 40, 41, 41, 59, 2261, 46, 2263, 40, 2021, 46, 2264, 40, 41, 41, 59, 2261, 46, 2263, 40, 2049, 46, 2265, 40, 41, 41, 59, 2041, 2266, 61, 2061, 46, 2267, 40, 41, 46, 2268, 40, 424, 41, 59, 324, 2269, 61, 2025, 46, 2270, 40, 41, 402, 2271, 59, 2029, 46, 2272, 40, 2261, 44, 2266, 44, 2269, 41, 59, 125, 437, 324, 2273, 40, 2237, 2274, 41, 123, 392, 40, 2274, 402, 2275, 605, 33, 2274, 46, 2276, 40, 41, 41, 123, 450, 380, 59, 125, 2277, 40, 2274, 44, 2236, 40, 2274, 41, 41, 59, 392, 40, 2274, 402, 2047, 41, 123, 40, 40, 2047, 41, 2274, 41, 46, 2278, 40, 41, 59, 125, 2279, 40, 41, 59, 450, 473, 59, 125, 437, 492, 2280, 40, 2237, 2274, 44, 2042, 2281, 41, 123, 2281, 46, 2282, 40, 2037, 44, 467, 44, 2274, 46, 2283, 40, 41, 41, 59, 2274, 46, 2282, 40, 2037, 41, 59, 2284, 40, 41, 59, 125, 439, 492, 2285, 40, 41, 123, 2048, 46, 2285, 40, 41, 59, 125, 439, 492, 2286, 40, 2287, 2288, 44, 324, 2289, 44, 2290, 2291, 44, 2055, 2292, 41, 123, 392, 40, 2013, 46, 2293, 40, 41, 606, 2015, 46, 2293, 40, 41, 41, 123, 2041, 2294, 61, 2295, 46, 2296, 40, 41, 59, 2292, 46, 2297, 40, 2294, 41, 59, 2004, 46, 2298, 40, 2294, 41, 59, 450, 59, 125, 2288, 46, 2286, 40, 2299, 40, 2288, 44, 2289, 41, 44, 2291, 44, 2292, 41, 59, 125, 439, 492, 2300, 40, 2301, 2302, 44, 2301, 2303, 44, 2301, 2304, 44, 324, 2305, 44, 413, 2306, 44, 2301, 2307, 44, 2287, 2288, 44, 2041, 2308, 44, 324, 2309, 44, 324, 2289, 44, 2310, 60, 2047, 62, 2311, 44, 2055, 2292, 41, 123, 2312, 40, 33, 2313, 40, 2288, 46, 2314, 40, 41, 41, 41, 59, 2315, 2316, 61, 2317, 40, 2288, 44, 2289, 41, 59, 2288, 46, 2286, 40, 2316, 44, 40, 41, 45, 62, 123, 392, 40, 2288, 46, 2318, 40, 41, 614, 2287, 46, 2319, 46, 2320, 41, 123, 2047, 2238, 59, 392, 40, 2288, 46, 2321, 40, 41, 41, 123, 2238, 61, 418, 2322, 40, 2288, 44, 2302, 44, 2303, 44, 2304, 44, 2305, 44, 2306, 44, 2316, 46, 2323, 40, 41, 44, 2316, 46, 2324, 40, 41, 44, 2316, 46, 2325, 40, 41, 44, 2316, 46, 2326, 40, 41, 44, 2013, 44, 2327, 40, 2288, 41, 44, 2328, 46, 2329, 40, 41, 46, 2330, 40, 41, 41, 59, 125, 360, 123, 2238, 61, 418, 2331, 40, 2288, 44, 2302, 44, 2303, 44, 2304, 44, 2305, 44, 2306, 44, 2316, 46, 2332, 40, 41, 44, 2316, 46, 2333, 40, 41, 44, 2316, 46, 2334, 40, 41, 44, 2316, 46, 2335, 40, 41, 44, 2013, 44, 2336, 40, 2288, 41, 44, 2337, 46, 2338, 40, 41, 46, 2339, 40, 41, 41, 59, 125, 2238, 46, 2340, 40, 41, 46, 2341, 40, 2309, 41, 59, 2238, 46, 2340, 40, 41, 46, 2342, 40, 2307, 46, 2343, 41, 59, 2238, 46, 2344, 40, 2308, 41, 59, 2042, 2281, 61, 2345, 40, 2238, 41, 59, 2280, 40, 2238, 44, 2281, 41, 59, 40, 40, 2346, 41, 2281, 41, 46, 2300, 40, 41, 59, 2311, 46, 2347, 40, 2238, 41, 59, 2285, 40, 41, 59, 125, 125, 44, 2292, 41, 59, 2285, 40, 41, 59, 125, 439, 492, 2348, 40, 2287, 2288, 44, 2301, 2302, 44, 413, 2349, 44, 413, 2350, 44, 413, 2304, 44, 324, 2289, 44, 2310, 60, 2351, 62, 2311, 44, 2055, 2292, 41, 123, 2352, 40, 33, 2353, 40, 2288, 46, 2354, 40, 41, 41, 41, 59, 2355, 2356, 61, 2357, 40, 2288, 44, 2289, 41, 59, 2288, 46, 2286, 40, 2356, 44, 40, 41, 45, 62, 123, 392, 40, 2288, 46, 2358, 40, 41, 614, 2287, 46, 2359, 46, 2360, 41, 123, 2351, 2361, 59, 2093, 2362, 61, 2356, 46, 2363, 40, 41, 59, 2364, 2365, 61, 418, 2364, 40, 2011, 46, 2366, 40, 41, 41, 59, 392, 40, 2288, 46, 2367, 40, 41, 41, 123, 2361, 61, 418, 2368, 40, 2288, 44, 2302, 44, 2362, 44, 2349, 44, 2350, 44, 2304, 44, 2365, 41, 59, 125, 360, 123, 2361, 61, 418, 2369, 40, 2288, 44, 2302, 44, 2362, 44, 2349, 44, 2350, 44, 2304, 44, 2365, 41, 59, 125, 2042, 2281, 61, 2370, 40, 2361, 41, 59, 2280, 40, 2361, 44, 2281, 41, 59, 40, 40, 2371, 41, 2281, 41, 46, 2300, 40, 41, 59, 2311, 46, 2372, 40, 2361, 41, 59, 2285, 40, 41, 59, 125, 125, 44, 2292, 41, 59, 2285, 40, 41, 59, 125, 437, 2042, 2373, 40, 2237, 2274, 41, 123, 2042, 2281, 61, 2374, 46, 2375, 40, 2274, 41, 59, 2042, 2376, 61, 2043, 46, 2377, 40, 2274, 46, 2378, 40, 41, 44, 2281, 41, 59, 392, 40, 2376, 631, 424, 41, 123, 2004, 46, 371, 40, 44, 2274, 46, 2378, 40, 41, 41, 59, 125, 392, 40, 2274, 402, 2047, 41, 123, 2049, 46, 2379, 40, 40, 2047, 41, 2274, 41, 59, 125, 450, 2281, 59, 125, 437, 2380, 2381, 40, 2287, 2288, 41, 123, 450, 418, 2380, 40, 2382, 40, 2288, 41, 46, 2383, 40, 41, 44, 2037, 46, 2384, 40, 41, 46, 2385, 40, 41, 44, 2037, 46, 2386, 40, 41, 46, 2387, 40, 41, 41, 59, 125, 437, 2388, 2389, 40, 2287, 2288, 44, 324, 2289, 41, 123, 450, 418, 2388, 40, 2288, 44, 2011, 46, 2390, 40, 41, 44, 2025, 44, 2008, 44, 2035, 44, 2029, 44, 2289, 41, 59, 125, 439, 492, 2391, 40, 2041, 2392, 44, 2301, 2302, 44, 2301, 2393, 44, 2394, 2395, 44, 2047, 2238, 44, 64, 2054, 2041, 2396, 44, 2290, 2291, 44, 2397, 2398, 41, 123, 2041, 2399, 61, 2013, 46, 2400, 40, 2238, 46, 2401, 40, 41, 44, 2402, 46, 2403, 46, 2404, 41, 46, 2405, 40, 41, 59, 2406, 60, 2407, 62, 2408, 61, 418, 2406, 60, 62, 40, 41, 123, 64, 2075, 439, 492, 2409, 40, 64, 2410, 46, 2411, 46, 2054, 2407, 2412, 41, 123, 392, 40, 2412, 631, 424, 41, 123, 2004, 46, 2413, 40, 43, 2412, 46, 2414, 40, 41, 46, 2415, 40, 41, 41, 59, 2416, 40, 2238, 41, 59, 2238, 46, 2417, 40, 2047, 46, 2418, 46, 2419, 41, 59, 2236, 40, 2238, 41, 46, 2420, 40, 41, 59, 2285, 40, 41, 59, 2291, 46, 2421, 40, 41, 59, 125, 125, 64, 2075, 439, 492, 2422, 40, 64, 2423, 2424, 2425, 41, 123, 2425, 46, 2426, 40, 41, 59, 2004, 46, 371, 40, 2425, 46, 2427, 40, 41, 41, 59, 2398, 46, 2428, 40, 44, 2425, 41, 59, 125, 125, 59, 474, 123, 2013, 46, 2429, 40, 2399, 44, 2392, 44, 2302, 44, 2393, 44, 2395, 44, 2402, 46, 2403, 46, 2404, 44, 2396, 44, 2408, 41, 59, 125, 329, 40, 2430, 124, 2431, 124, 2432, 2433, 41, 123, 2433, 46, 2434, 40, 41, 59, 2004, 46, 371, 40, 2433, 46, 2435, 40, 41, 41, 59, 2398, 46, 2436, 40, 44, 2433, 41, 59, 125, 125, 439, 492, 2437, 40, 2047, 2238, 41, 123, 2438, 40, 2238, 41, 59, 2019, 46, 2439, 40, 2238, 41, 59, 2013, 46, 2440, 40, 2238, 46, 2441, 40, 41, 41, 59, 2285, 40, 41, 59, 125, 439, 492, 2442, 40, 2041, 2443, 44, 2047, 46, 2444, 2445, 41, 123, 2446, 40, 2443, 41, 46, 2447, 40, 2238, 45, 62, 123, 2238, 46, 2448, 40, 2445, 41, 59, 2437, 40, 2238, 41, 59, 2013, 46, 2449, 40, 2238, 46, 2450, 40, 41, 44, 2451, 46, 2452, 46, 2453, 41, 59, 2285, 40, 41, 59, 125, 41, 59, 125, 439, 492, 2454, 40, 41, 123, 2455, 40, 41, 59, 2039, 46, 2456, 40, 418, 2038, 46, 2457, 40, 41, 123, 64, 2075, 439, 492, 2458, 40, 41, 123, 125, 64, 2075, 439, 492, 2459, 40, 41, 123, 2455, 40, 41, 59, 125, 125, 41, 59, 125, 437, 492, 2460, 40, 41, 123, 2461, 40, 41, 46, 2462, 40, 2238, 45, 62, 123, 392, 40, 33, 2238, 46, 2463, 40, 41, 41, 123, 2464, 2465, 61, 2238, 46, 2466, 40, 41, 59, 2464, 2467, 61, 2238, 46, 2468, 40, 41, 59, 392, 40, 2465, 631, 424, 605, 2467, 631, 424, 41, 123, 2464, 2469, 61, 418, 2464, 40, 41, 59, 392, 40, 2469, 46, 2470, 40, 2465, 41, 41, 123, 2238, 46, 2471, 40, 2047, 46, 2472, 46, 2473, 41, 59, 2285, 40, 41, 59, 125, 360, 392, 40, 2469, 46, 2470, 40, 2467, 41, 41, 123, 2238, 46, 2474, 40, 2047, 46, 2475, 46, 2476, 41, 59, 2285, 40, 41, 59, 125, 125, 125, 125, 41, 59, 125, 439, 492, 2477, 40, 2047, 2238, 41, 123, 2478, 40, 2238, 41, 59, 2023, 46, 2479, 40, 2238, 41, 59, 125, 439, 492, 2480, 40, 2047, 2238, 41, 123, 392, 40, 33, 2238, 46, 2481, 40, 41, 41, 123, 2273, 40, 2238, 41, 59, 125, 2482, 40, 2238, 41, 59, 125, 439, 2483, 60, 2047, 62, 2484, 40, 41, 123, 450, 2485, 40, 41, 46, 2486, 40, 41, 46, 2487, 40, 2047, 58, 58, 2488, 41, 59, 125, 439, 2489, 60, 2041, 62, 2490, 40, 41, 470, 2491, 123, 2492, 60, 2491, 62, 2493, 61, 418, 2492, 60, 62, 40, 41, 59, 2489, 60, 2041, 62, 2494, 61, 2484, 40, 41, 46, 2495, 40, 2047, 58, 58, 2496, 41, 46, 2497, 40, 2047, 58, 58, 2498, 41, 46, 2499, 40, 2500, 46, 2501, 40, 41, 41, 59, 2494, 46, 2502, 40, 2023, 46, 2484, 40, 41, 46, 2495, 40, 2238, 45, 62, 2238, 46, 2503, 40, 41, 631, 424, 41, 46, 2497, 40, 2238, 45, 62, 123, 2004, 46, 2504, 40, 43, 43, 2238, 46, 2498, 40, 41, 41, 59, 450, 2238, 46, 2498, 40, 41, 59, 125, 41, 46, 2499, 40, 2500, 46, 2501, 40, 41, 41, 41, 59, 2494, 46, 2502, 40, 2019, 46, 2484, 40, 41, 46, 2497, 40, 2238, 45, 62, 123, 2505, 2506, 61, 2238, 46, 2503, 40, 41, 59, 392, 40, 2506, 631, 424, 41, 123, 2507, 2508, 61, 2013, 46, 2509, 40, 2506, 46, 2510, 40, 41, 46, 2511, 40, 41, 41, 59, 392, 40, 2508, 631, 424, 605, 2508, 46, 2512, 40, 41, 631, 2507, 46, 2513, 46, 2514, 41, 123, 2493, 46, 2515, 40, 418, 2491, 40, 2516, 46, 2517, 40, 44, 2238, 46, 2518, 40, 41, 41, 41, 41, 59, 125, 360, 123, 2004, 46, 2519, 40, 43, 43, 2238, 46, 2498, 40, 41, 41, 59, 125, 125, 360, 123, 2493, 46, 2520, 40, 418, 2491, 40, 2521, 46, 2522, 40, 44, 2238, 46, 2523, 40, 41, 41, 41, 41, 59, 125, 450, 2238, 46, 2498, 40, 41, 59, 125, 41, 46, 2499, 40, 2500, 46, 2501, 40, 41, 41, 41, 59, 392, 40, 2493, 46, 2524, 40, 41, 631, 424, 41, 469, 2493, 46, 2524, 40, 41, 59, 450, 2494, 59, 125, 439, 492, 2525, 40, 2351, 2526, 41, 123, 2021, 46, 2437, 40, 2526, 41, 59, 125, 439, 2527, 60, 2351, 62, 2528, 40, 2041, 2443, 41, 123, 450, 2021, 46, 2528, 40, 2443, 41, 59, 125, 439, 2529, 60, 2047, 62, 2530, 40, 41, 123, 450, 2049, 46, 2530, 40, 41, 59, 125, 439, 2050, 2531, 40, 41, 123, 450, 2051, 59, 125, 439, 324, 2532, 40, 2287, 2288, 41, 123, 450, 2288, 46, 2532, 40, 2011, 41, 59, 125, 439, 324, 2533, 40, 2041, 2534, 41, 123, 2483, 60, 2535, 62, 2536, 61, 2483, 46, 2537, 40, 2538, 40, 41, 44, 2023, 46, 2530, 40, 41, 46, 2539, 40, 41, 41, 59, 2536, 61, 2483, 46, 2537, 40, 2536, 44, 2019, 46, 2530, 40, 41, 46, 2539, 40, 41, 41, 59, 450, 2536, 46, 2540, 40, 2541, 45, 62, 2541, 46, 2542, 40, 41, 46, 2543, 40, 41, 46, 2544, 40, 2534, 41, 41, 59, 125, 439, 324, 2545, 40, 2287, 2288, 41, 123, 392, 40, 2532, 40, 2288, 41, 41, 450, 2288, 46, 2546, 40, 41, 59, 360, 450, 2288, 46, 2547, 40, 41, 614, 2548, 46, 2549, 59, 125, 439, 2527, 60, 2237, 62, 2550, 40, 2041, 2443, 41, 123, 450, 2551, 40, 41, 46, 2552, 40, 2274, 45, 62, 2274, 46, 2553, 40, 41, 46, 2554, 40, 2443, 41, 41, 46, 2555, 40, 41, 59, 125, 439, 2527, 60, 2047, 62, 2556, 40, 2041, 2443, 41, 123, 450, 2550, 40, 2443, 41, 46, 2557, 40, 2274, 45, 62, 2274, 402, 2047, 41, 46, 2558, 40, 2274, 45, 62, 40, 2047, 41, 2274, 41, 59, 125, 437, 492, 2559, 40, 2047, 2238, 41, 123, 392, 40, 2049, 46, 2560, 40, 2238, 41, 41, 123, 2285, 40, 41, 59, 125, 125, 437, 492, 2561, 40, 2047, 2238, 41, 123, 392, 40, 2049, 46, 2562, 40, 2238, 41, 41, 123, 2285, 40, 41, 59, 125, 125, 437, 2483, 60, 2237, 62, 2563, 40, 41, 123, 450, 2483, 46, 2564, 40, 2049, 46, 2565, 40, 41, 44, 2021, 46, 2530, 40, 41, 46, 2565, 40, 41, 41, 59, 125, 437, 492, 2566, 40, 41, 123, 467, 46, 2058, 46, 2567, 40, 2530, 40, 41, 46, 2568, 40, 41, 41, 59, 125, 437, 324, 2569, 40, 2047, 2238, 41, 123, 392, 40, 33, 2570, 40, 2238, 41, 41, 123, 2004, 46, 2571, 40, 41, 59, 450, 380, 59, 125, 2273, 40, 2238, 41, 59, 392, 40, 33, 2049, 46, 2572, 40, 2238, 41, 41, 123, 2049, 46, 2573, 40, 2238, 41, 59, 125, 450, 473, 59, 125, 437, 324, 2574, 40, 2047, 2238, 41, 123, 490, 2575, 61, 2031, 46, 2576, 40, 2238, 41, 59, 392, 40, 2575, 614, 424, 41, 450, 380, 59, 2013, 46, 2577, 40, 2238, 46, 2578, 40, 41, 44, 2575, 46, 2579, 44, 2580, 46, 2581, 46, 2582, 41, 59, 2013, 46, 2577, 40, 2238, 46, 2578, 40, 41, 44, 2575, 46, 2583, 44, 2580, 46, 2581, 46, 2584, 41, 59, 450, 473, 59, 125, 125]",0.999978,1
22,3280,Java,"public class AutoTooltipTableColumn<S, T> extends TableColumn<S, T> {

    private Label helpIcon;
    private PopOverWrapper popoverWrapper = new PopOverWrapper();

    public AutoTooltipTableColumn(String text) {
        super();

        setTitle(text);
    }

    public AutoTooltipTableColumn(String text, String help) {

        setTitleWithHelpText(text, help);
    }

    public void setTitle(String title) {
        setGraphic(new AutoTooltipLabel(title));
    }

    public void setTitleWithHelpText(String title, String help) {
        helpIcon = new Label();
        AwesomeDude.setIcon(helpIcon, AwesomeIcon.QUESTION_SIGN, ""1em"");
        helpIcon.setOpacity(0.4);
        helpIcon.setOnMouseEntered(e -> popoverWrapper.showPopOver(() -> createInfoPopOver(help)));
        helpIcon.setOnMouseExited(e -> popoverWrapper.hidePopOver());

        final AutoTooltipLabel label = new AutoTooltipLabel(title);
        final HBox hBox = new HBox(label, helpIcon);
        hBox.setStyle(""-fx-alignment: center-left"");
        hBox.setSpacing(4);
        setGraphic(hBox);
    }

    private PopOver createInfoPopOver(String help) {
        Label helpLabel = new Label(help);
        helpLabel.setMaxWidth(300);
        helpLabel.setWrapText(true);
        return createInfoPopOver(helpLabel);
    }

    private PopOver createInfoPopOver(Node node) {
        node.getStyleClass().add(""default-text"");

        PopOver infoPopover = new PopOver(node);
        if (helpIcon.getScene() != null) {
            infoPopover.setDetachable(false);
            infoPopover.setArrowLocation(PopOver.ArrowLocation.LEFT_CENTER);

            infoPopover.show(helpIcon, -10);
        }
        return infoPopover;
    }
}",1,"[439, 334, 2000, 60, 2001, 44, 2002, 62, 378, 2003, 60, 2001, 44, 2002, 62, 123, 437, 2004, 2005, 59, 437, 2006, 2007, 61, 418, 2006, 40, 41, 59, 439, 2000, 40, 2008, 2009, 41, 123, 463, 40, 41, 59, 2010, 40, 2009, 41, 59, 125, 439, 2000, 40, 2008, 2009, 44, 2008, 2011, 41, 123, 2012, 40, 2009, 44, 2011, 41, 59, 125, 439, 492, 2013, 40, 2008, 2014, 41, 123, 2015, 40, 418, 2016, 40, 2014, 41, 41, 59, 125, 439, 492, 2017, 40, 2008, 2014, 44, 2008, 2011, 41, 123, 2005, 61, 418, 2004, 40, 41, 59, 2018, 46, 2019, 40, 2005, 44, 2020, 46, 2021, 44, 41, 59, 2005, 46, 2022, 40, 1499, 41, 59, 2005, 46, 2023, 40, 2024, 45, 62, 2007, 46, 2025, 40, 40, 41, 45, 62, 2026, 40, 2011, 41, 41, 41, 59, 2005, 46, 2027, 40, 2024, 45, 62, 2007, 46, 2028, 40, 41, 41, 59, 381, 2029, 2030, 61, 418, 2029, 40, 2014, 41, 59, 381, 2031, 2032, 61, 418, 2031, 40, 2030, 44, 2005, 41, 59, 2032, 46, 2033, 40, 41, 59, 2032, 46, 2034, 40, 1502, 41, 59, 2035, 40, 2032, 41, 59, 125, 437, 2036, 2037, 40, 2008, 2011, 41, 123, 2004, 2038, 61, 418, 2004, 40, 2011, 41, 59, 2038, 46, 2039, 40, 1504, 41, 59, 2038, 46, 2040, 40, 473, 41, 59, 450, 2037, 40, 2038, 41, 59, 125, 437, 2036, 2037, 40, 2041, 2042, 41, 123, 2042, 46, 2043, 40, 41, 46, 2044, 40, 41, 59, 2036, 2045, 61, 418, 2036, 40, 2042, 41, 59, 392, 40, 2005, 46, 2046, 40, 41, 631, 424, 41, 123, 2045, 46, 2047, 40, 380, 41, 59, 2045, 46, 2048, 40, 2036, 46, 2049, 46, 2050, 41, 59, 2045, 46, 2051, 40, 2005, 44, 45, 1502, 41, 59, 125, 450, 2045, 59, 125, 125]",0.040957443,0
23,29560,Java,"public class PatchExtensionMethod {
	static class Extension {
		List<MethodBinding> extensionMethods;
		boolean suppressBaseMethods;
	}
	
	private static class PostponedNoMethodError implements PostponedError {
		private final ProblemReporter problemReporter;
		private final WeakReference<MessageSend> messageSendRef;
		private final TypeBinding recType;
		private final TypeBinding[] params;
		
		PostponedNoMethodError(ProblemReporter problemReporter, MessageSend messageSend, TypeBinding recType, TypeBinding[] params) {
			this.problemReporter = problemReporter;
			this.messageSendRef = new WeakReference<MessageSend>(messageSend);
			this.recType = recType;
			this.params = params;
		}
		
		public void fire() {
			MessageSend messageSend = messageSendRef.get();
			if (messageSend != null) problemReporter.errorNoMethodFor(messageSend, recType, params);
		}
	}
	
	private static class PostponedInvalidMethodError implements PostponedError {
		private final ProblemReporter problemReporter;
		private final WeakReference<MessageSend> messageSendRef;
		private final MethodBinding method;
		private final Scope scope;
		
		private static final Method shortMethod = getMethod(""invalidMethod"", MessageSend.class, MethodBinding.class);
		private static final Method longMethod = getMethod(""invalidMethod"", MessageSend.class, MethodBinding.class, Scope.class);
		private static Throwable initProblem;
		
		private static Method getMethod(String name, Class<?>... types) {
			try {
				return Permit.getMethod(ProblemReporter.class, name, types);
			} catch (Exception e) {
				initProblem = e;
				return null;
			}
		}
		
		PostponedInvalidMethodError(ProblemReporter problemReporter, MessageSend messageSend, MethodBinding method, Scope scope) {
			this.problemReporter = problemReporter;
			this.messageSendRef = new WeakReference<MessageSend>(messageSend);
			this.method = method;
			this.scope = scope;
		}
		
		static void invoke(ProblemReporter problemReporter, MessageSend messageSend, MethodBinding method, Scope scope) {
			if (messageSend != null) {
				try {
					if (shortMethod != null) Permit.invoke(initProblem, shortMethod, problemReporter, messageSend, method);
					else if (longMethod != null) Permit.invoke(initProblem, longMethod, problemReporter, messageSend, method, scope);
					else Permit.reportReflectionProblem(initProblem, ""method named 'invalidMethod' not found in ProblemReporter.class"");
				} catch (IllegalAccessException e) {
					throw new RuntimeException(e);
				} catch (InvocationTargetException e) {
					Throwable t = e.getCause();
					if (t instanceof Error) throw (Error) t;
					if (t instanceof RuntimeException) throw (RuntimeException) t;
					throw new RuntimeException(t);
				}
			}
		}
		
		public void fire() {
			MessageSend messageSend = messageSendRef.get();
			invoke(problemReporter, messageSend, method, scope);
		}
	}
	
	private static class PostponedNonStaticAccessToStaticMethodError implements PostponedError {
		private final ProblemReporter problemReporter;
		private ASTNode location;
		private MethodBinding method;
		private ReferenceContext referenceContext;
		
		PostponedNonStaticAccessToStaticMethodError(ProblemReporter problemReporter, ASTNode location, MethodBinding method) {
			this.problemReporter = problemReporter;
			this.location = location;
			this.method = method;
			this.referenceContext = problemReporter.referenceContext;
		}

		public void fire() {
			problemReporter.referenceContext = this.referenceContext;
			problemReporter.nonStaticAccessToStaticMethod(location, method);
		}
	}
	
	private static interface PostponedError {
		public void fire();
	}
	
	public static EclipseNode getTypeNode(TypeDeclaration decl) {
		CompilationUnitDeclaration cud = decl.scope.compilationUnitScope().referenceContext;
		EclipseAST astNode = TransformEclipseAST.getAST(cud, false);
		EclipseNode node = astNode.get(decl);
		if (node == null) {
			astNode = TransformEclipseAST.getAST(cud, true);
			node = astNode.get(decl);
		}
		return node;
	}
	
	public static Annotation getAnnotation(Class<? extends java.lang.annotation.Annotation> expectedType, EclipseNode node) {
		TypeDeclaration decl = (TypeDeclaration) node.get();
		if (decl.annotations != null) for (Annotation ann : decl.annotations) {
			if (EclipseHandlerUtil.typeMatches(expectedType, node, ann.type)) return ann;
		}
		return null;
	}
	
	static EclipseNode upToType(EclipseNode typeNode) {
		EclipseNode node = typeNode;
		do {
			node = node.up();
		} while ((node != null) && (node.getKind() != Kind.TYPE));
		return node;
	}
	
	static List<Extension> getApplicableExtensionMethods(EclipseNode typeNode, Annotation ann, TypeBinding receiverType) {
		List<Extension> extensions = new ArrayList<Extension>();
		if ((typeNode != null) && (ann != null) && (receiverType != null)) {
			BlockScope blockScope = ((TypeDeclaration) typeNode.get()).initializerScope;
			EclipseNode annotationNode = typeNode.getNodeFor(ann);
			AnnotationValues<ExtensionMethod> annotation = createAnnotation(ExtensionMethod.class, annotationNode);
			boolean suppressBaseMethods = false;
			try {
				suppressBaseMethods = annotation.getInstance().suppressBaseMethods();
			} catch (AnnotationValueDecodeFail fail) {
				fail.owner.setError(fail.getMessage(), fail.idx);
			}
			for (Object extensionMethodProvider : annotation.getActualExpressions(""value"")) {
				if (extensionMethodProvider instanceof ClassLiteralAccess) {
					TypeBinding binding = ((ClassLiteralAccess) extensionMethodProvider).type.resolveType(blockScope);
					if (binding == null) continue;
					if (!binding.isClass() && !binding.isEnum()) continue;
					Extension e = new Extension();
					e.extensionMethods = getApplicableExtensionMethodsDefinedInProvider(typeNode, (ReferenceBinding) binding, receiverType);
					e.suppressBaseMethods = suppressBaseMethods;
					extensions.add(e);
				}
			}
		}
		return extensions;
	}
	
	private static List<MethodBinding> getApplicableExtensionMethodsDefinedInProvider(EclipseNode typeNode, ReferenceBinding extensionMethodProviderBinding,
			TypeBinding receiverType) {
		
		List<MethodBinding> extensionMethods = new ArrayList<MethodBinding>();
		for (MethodBinding method : extensionMethodProviderBinding.methods()) {
			if (!method.isStatic()) continue;
			if (!method.isPublic()) continue;
			if (method.parameters == null || method.parameters.length == 0) continue;
			TypeBinding firstArgType = method.parameters[0];
			if (receiverType.isProvablyDistinct(firstArgType) && !receiverType.isCompatibleWith(firstArgType.erasure())) continue;
			extensionMethods.add(method);
		}
		return extensionMethods;
	}
	
	private static final FieldAugment<MessageSend, PostponedError> MessageSend_postponedErrors = FieldAugment.augment(MessageSend.class, PostponedError.class, ""lombok$postponedErrors"");
	
	public static void errorNoMethodFor(ProblemReporter problemReporter, MessageSend messageSend, TypeBinding recType, TypeBinding[] params) {
		MessageSend_postponedErrors.set(messageSend, new PostponedNoMethodError(problemReporter, messageSend, recType, params));
	}
	
	public static void invalidMethod(ProblemReporter problemReporter, MessageSend messageSend, MethodBinding method) {
		MessageSend_postponedErrors.set(messageSend, new PostponedInvalidMethodError(problemReporter, messageSend, method, null));
	}
	
	public static void invalidMethod(ProblemReporter problemReporter, MessageSend messageSend, MethodBinding method, Scope scope) {
		MessageSend_postponedErrors.set(messageSend, new PostponedInvalidMethodError(problemReporter, messageSend, method, scope));
	}
	
	public static void nonStaticAccessToStaticMethod(ProblemReporter problemReporter, ASTNode location, MethodBinding method, MessageSend messageSend) {
		MessageSend_postponedErrors.set(messageSend, new PostponedNonStaticAccessToStaticMethodError(problemReporter, location, method));
	}
	
	public static TypeBinding resolveType(TypeBinding resolvedType, MessageSend methodCall, BlockScope scope) {
		List<Extension> extensions = new ArrayList<Extension>();
		TypeDeclaration decl = scope.classScope().referenceContext;
		
		EclipseNode owningType = null;
		
		for (EclipseNode typeNode = getTypeNode(decl); typeNode != null; typeNode = upToType(typeNode)) {
			Annotation ann = getAnnotation(ExtensionMethod.class, typeNode);
			if (ann != null) {
				extensions.addAll(0, getApplicableExtensionMethods(typeNode, ann, methodCall.receiver.resolvedType));
				if (owningType == null) owningType = typeNode;
			}
		}
		
		boolean skip = false;
		
		if (methodCall.receiver instanceof ThisReference && (((ThisReference)methodCall.receiver).bits & ASTNode.IsImplicitThis) != 0) skip = true;
		if (methodCall.receiver instanceof SuperReference) skip = true;
		if (methodCall.receiver instanceof NameReference) {
			Binding binding = ((NameReference)methodCall.receiver).binding;
			if (binding instanceof TypeBinding) skip = true;
		}
		// It's impossible to resolve the right method without types
		if (Reflection.argumentsHaveErrors != null) {
			try {
				if ((Boolean) Reflection.argumentsHaveErrors.get(methodCall)) skip = true;
			} catch (IllegalAccessException ignore) {
				// ignore
			}
		}
		
		if (!skip) for (Extension extension : extensions) {
			if (!extension.suppressBaseMethods && !(methodCall.binding instanceof ProblemMethodBinding)) continue;
			for (MethodBinding extensionMethod : extension.extensionMethods) {
				if (!Arrays.equals(methodCall.selector, extensionMethod.selector)) continue;
				MessageSend_postponedErrors.clear(methodCall);
				if (methodCall.receiver instanceof ThisReference) {
					methodCall.receiver.bits &= ~ASTNode.IsImplicitThis;
				}
				List<Expression> arguments = new ArrayList<Expression>();
				arguments.add(methodCall.receiver);
				if (methodCall.arguments != null) arguments.addAll(Arrays.asList(methodCall.arguments));
				Expression[] originalArgs = methodCall.arguments;
				methodCall.arguments = arguments.toArray(new Expression[0]);
				
				List<TypeBinding> argumentTypes = new ArrayList<TypeBinding>();
				for (Expression argument : arguments) {
					TypeBinding argumentType = argument.resolvedType;
					if (argumentType == null && Reflection.isFunctionalExpression(argument)) {
						argumentType = Reflection.getPolyTypeBinding(argument);
					}
					if (argumentType == null) {
						argumentType = TypeBinding.NULL;
					}					
					argumentTypes.add(argumentType);
				}
				
				if (methodCall.receiver instanceof MessageSend) {
					if (Reflection.inferenceContexts != null) {
						try {
							Permit.set(Reflection.inferenceContexts, methodCall.receiver, null);
						} catch (IllegalAccessException ignore) {
							// ignore
						}
					}
				}
				
				MethodBinding fixedBinding = scope.getMethod(extensionMethod.declaringClass, methodCall.selector, argumentTypes.toArray(new TypeBinding[0]), methodCall);
				if (fixedBinding instanceof ProblemMethodBinding) {
					methodCall.arguments = originalArgs;
					if (fixedBinding.declaringClass != null) {
						PostponedInvalidMethodError.invoke(scope.problemReporter(), methodCall, fixedBinding, scope);
					}
				} else {
					// If the extension method uses varargs, the last fixed binding parameter is an array but 
					// the method arguments are not. Even thought we already know that the method is fine we still
					// have to compare each parameter with the type of the array to support autoboxing/unboxing.
					boolean isVarargs = fixedBinding.isVarargs();
					for (int i = 0, iend = arguments.size(); i < iend; i++) {
						Expression arg = arguments.get(i);
						TypeBinding[] parameters = fixedBinding.parameters;
						TypeBinding param;
						if (isVarargs && i >= parameters.length - 1) {
							// Extract the array element type for all vararg arguments
							param = parameters[parameters.length - 1].leafComponentType();
						} else {
							param = parameters[i];
						}
						// Resolve types for lambdas
						if (Reflection.isFunctionalExpression(arg)) {
							arg.setExpectedType(param);
							arg.resolveType(scope);
						}
						if (arg.resolvedType != null) {
							if (!param.isBaseType() && arg.resolvedType.isBaseType()) {
								int id = arg.resolvedType.id;
								arg.implicitConversion = TypeIds.BOXING | (id + (id << 4)); // magic see TypeIds
							} else if (param.isBaseType() && !arg.resolvedType.isBaseType()) {
								int id = parameters[i].id;
								arg.implicitConversion = TypeIds.UNBOXING | (id + (id << 4)); // magic see TypeIds
							}
						}
					}
					
					methodCall.receiver = createNameRef(extensionMethod.declaringClass, methodCall);
					methodCall.actualReceiverType = extensionMethod.declaringClass;
					methodCall.binding = fixedBinding;
					methodCall.resolvedType = methodCall.binding.returnType;
					methodCall.statementEnd = methodCall.sourceEnd;
					if (Reflection.argumentTypes != null) {
						try {
							Reflection.argumentTypes.set(methodCall, argumentTypes.toArray(new TypeBinding[0]));
						} catch (IllegalAccessException ignore) {
							// ignore
						}
					}
				}
				return methodCall.resolvedType;
			}
		}
		
		PostponedError error = MessageSend_postponedErrors.get(methodCall);
		if (error != null) error.fire();
		
		MessageSend_postponedErrors.clear(methodCall);
		return resolvedType;
	}
	
	private static NameReference createNameRef(TypeBinding typeBinding, ASTNode source) {
		long p = ((long) source.sourceStart << 32) | source.sourceEnd;
		char[] pkg = typeBinding.qualifiedPackageName();
		char[] basename = typeBinding.qualifiedSourceName();
		
		StringBuilder sb = new StringBuilder();
		if (pkg != null) sb.append(pkg);
		if (sb.length() > 0) sb.append(""."");
		sb.append(basename);
		
		String tName = sb.toString();
		
		if (tName.indexOf('.') == -1) {
			return new SingleNameReference(basename, p);
		} else {
			char[][] sources;
			String[] in = tName.split(""\\."");
			sources = new char[in.length][];
			for (int i = 0; i < in.length; i++) sources[i] = in[i].toCharArray();
			long[] poss = new long[in.length];
			Arrays.fill(poss, p);
			return new QualifiedNameReference(sources, poss, source.sourceStart, source.sourceEnd);
		}
	}
	
	private static final class Reflection {
		public static final Field argumentTypes = Permit.permissiveGetField(MessageSend.class, ""argumentTypes"");
		public static final Field argumentsHaveErrors = Permit.permissiveGetField(MessageSend.class, ""argumentsHaveErrors"");
		public static final Field inferenceContexts = Permit.permissiveGetField(MessageSend.class, ""inferenceContexts"");
		private static final Class<?> functionalExpression;
		private static final Constructor<?> polyTypeBindingConstructor;
		
		static {
			Class<?> a = null;
			Constructor<?> b = null;
			try {
				a = Class.forName(""org.eclipse.jdt.internal.compiler.ast.FunctionalExpression"");
			} catch (Exception e) {
				// Ignore
			}
			try {
				b = Permit.getConstructor(Class.forName(""org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding""), Expression.class);
			} catch (Exception e) {
				// Ignore
			}
			functionalExpression = a;
			polyTypeBindingConstructor = b;
		}
		
		public static boolean isFunctionalExpression(Expression expression) {
			if (functionalExpression == null) return false;
			return functionalExpression.isInstance(expression);
		}
		
		public static TypeBinding getPolyTypeBinding(Expression expression) {
			if (polyTypeBindingConstructor == null) return null;
			try {
				return (TypeBinding) polyTypeBindingConstructor.newInstance(expression);
			} catch (Exception e) {
				// Ignore
			}
			return null;
		}
	}
}",1,"[439, 334, 2000, 123, 457, 334, 2001, 123, 2002, 60, 2003, 62, 2004, 59, 324, 2005, 59, 125, 437, 457, 334, 2006, 395, 2007, 123, 437, 381, 2008, 2009, 59, 437, 381, 2010, 60, 2011, 62, 2012, 59, 437, 381, 2013, 2014, 59, 437, 381, 2013, 91, 93, 433, 59, 2006, 40, 2008, 2009, 44, 2011, 2015, 44, 2013, 2014, 44, 2013, 91, 93, 433, 41, 123, 467, 46, 2009, 61, 2009, 59, 467, 46, 2012, 61, 418, 2010, 60, 2011, 62, 40, 2015, 41, 59, 467, 46, 2014, 61, 2014, 59, 467, 46, 433, 61, 433, 59, 125, 439, 492, 2016, 40, 41, 123, 2011, 2015, 61, 2012, 46, 2017, 40, 41, 59, 392, 40, 2015, 631, 424, 41, 2009, 46, 2018, 40, 2015, 44, 2014, 44, 433, 41, 59, 125, 125, 437, 457, 334, 2019, 395, 2007, 123, 437, 381, 2020, 2021, 59, 437, 381, 2022, 60, 2023, 62, 2024, 59, 437, 381, 2025, 2026, 59, 437, 381, 2027, 2028, 59, 437, 457, 381, 2029, 2030, 61, 2031, 40, 44, 2023, 46, 334, 44, 2025, 46, 334, 41, 59, 437, 457, 381, 2029, 2032, 61, 2031, 40, 44, 2023, 46, 334, 44, 2025, 46, 334, 44, 2027, 46, 334, 41, 59, 437, 457, 2033, 2034, 59, 437, 457, 2029, 2031, 40, 2035, 2036, 44, 2037, 60, 63, 62, 613, 2038, 41, 123, 474, 123, 450, 2039, 46, 2031, 40, 2020, 46, 334, 44, 2036, 44, 2038, 41, 59, 125, 329, 40, 2040, 2041, 41, 123, 2034, 61, 2041, 59, 450, 424, 59, 125, 125, 2019, 40, 2020, 2021, 44, 2023, 2042, 44, 2025, 2026, 44, 2027, 2028, 41, 123, 467, 46, 2021, 61, 2021, 59, 467, 46, 2024, 61, 418, 2022, 60, 2023, 62, 40, 2042, 41, 59, 467, 46, 2026, 61, 2026, 59, 467, 46, 2028, 61, 2028, 59, 125, 457, 492, 2043, 40, 2020, 2021, 44, 2023, 2042, 44, 2025, 2026, 44, 2027, 2028, 41, 123, 392, 40, 2042, 631, 424, 41, 123, 474, 123, 392, 40, 2030, 631, 424, 41, 2044, 46, 2043, 40, 2034, 44, 2030, 44, 2021, 44, 2042, 44, 2026, 41, 59, 360, 392, 40, 2032, 631, 424, 41, 2044, 46, 2043, 40, 2034, 44, 2032, 44, 2021, 44, 2042, 44, 2026, 44, 2028, 41, 59, 360, 2044, 46, 2045, 40, 2034, 44, 41, 59, 125, 329, 40, 2046, 2047, 41, 123, 469, 418, 2048, 40, 2047, 41, 59, 125, 329, 40, 2049, 2047, 41, 123, 2033, 2050, 61, 2047, 46, 2051, 40, 41, 59, 392, 40, 2050, 402, 2052, 41, 469, 40, 2052, 41, 2050, 59, 392, 40, 2050, 402, 2053, 41, 469, 40, 2053, 41, 2050, 59, 469, 418, 2053, 40, 2050, 41, 59, 125, 125, 125, 439, 492, 2054, 40, 41, 123, 2023, 2042, 61, 2024, 46, 2055, 40, 41, 59, 2043, 40, 2021, 44, 2042, 44, 2026, 44, 2028, 41, 59, 125, 125, 437, 457, 334, 2056, 395, 2007, 123, 437, 381, 2057, 2058, 59, 437, 2059, 2060, 59, 437, 2061, 2062, 59, 437, 2063, 2064, 59, 2056, 40, 2057, 2058, 44, 2059, 2060, 44, 2061, 2062, 41, 123, 467, 46, 2058, 61, 2058, 59, 467, 46, 2060, 61, 2060, 59, 467, 46, 2062, 61, 2062, 59, 467, 46, 2064, 61, 2058, 46, 2064, 59, 125, 439, 492, 2065, 40, 41, 123, 2058, 46, 2064, 61, 467, 46, 2064, 59, 2058, 46, 2066, 40, 2060, 44, 2062, 41, 59, 125, 125, 437, 457, 405, 2007, 123, 439, 492, 2067, 40, 41, 59, 125, 439, 457, 2068, 2069, 40, 2070, 2071, 41, 123, 2072, 2073, 61, 2071, 46, 2074, 46, 2075, 40, 41, 46, 2076, 59, 2077, 2078, 61, 2079, 46, 2080, 40, 2073, 44, 380, 41, 59, 2068, 2081, 61, 2078, 46, 2082, 40, 2071, 41, 59, 392, 40, 2081, 614, 424, 41, 123, 2078, 61, 2079, 46, 2080, 40, 2073, 44, 473, 41, 59, 2081, 61, 2078, 46, 2082, 40, 2071, 41, 59, 125, 450, 2081, 59, 125, 439, 457, 2083, 2084, 40, 2085, 60, 63, 378, 2086, 46, 2087, 46, 2088, 46, 2083, 62, 2089, 44, 2068, 2090, 41, 123, 2070, 2071, 61, 40, 2070, 41, 2090, 46, 2091, 40, 41, 59, 392, 40, 2071, 46, 2092, 631, 424, 41, 385, 40, 2083, 2093, 58, 2071, 46, 2092, 41, 123, 392, 40, 2094, 46, 2095, 40, 2089, 44, 2090, 44, 2093, 46, 2096, 41, 41, 450, 2093, 59, 125, 450, 424, 59, 125, 457, 2068, 2097, 40, 2068, 2098, 41, 123, 2068, 2090, 61, 2098, 59, 355, 123, 2090, 61, 2090, 46, 2099, 40, 41, 59, 125, 496, 40, 40, 2090, 631, 424, 41, 605, 40, 2090, 46, 2100, 40, 41, 631, 2101, 46, 2102, 41, 41, 59, 450, 2090, 59, 125, 457, 2103, 60, 2001, 62, 2104, 40, 2068, 2098, 44, 2083, 2105, 44, 2106, 2107, 41, 123, 2103, 60, 2001, 62, 2108, 61, 418, 2109, 60, 2001, 62, 40, 41, 59, 392, 40, 40, 2098, 631, 424, 41, 605, 40, 2105, 631, 424, 41, 605, 40, 2107, 631, 424, 41, 41, 123, 2110, 2111, 61, 40, 40, 2070, 41, 2098, 46, 2112, 40, 41, 41, 46, 2113, 59, 2068, 2114, 61, 2098, 46, 2115, 40, 2105, 41, 59, 2116, 60, 2117, 62, 2088, 61, 2118, 40, 2117, 46, 334, 44, 2114, 41, 59, 324, 2119, 61, 380, 59, 474, 123, 2119, 61, 2088, 46, 2120, 40, 41, 46, 2119, 40, 41, 59, 125, 329, 40, 2121, 2122, 41, 123, 2122, 46, 2123, 46, 2124, 40, 2122, 46, 2125, 40, 41, 44, 2122, 46, 2126, 41, 59, 125, 385, 40, 2127, 2128, 58, 2088, 46, 2129, 40, 41, 41, 123, 392, 40, 2128, 402, 2130, 41, 123, 2106, 2131, 61, 40, 40, 2130, 41, 2128, 41, 46, 2132, 46, 2133, 40, 2111, 41, 59, 392, 40, 2131, 614, 424, 41, 344, 59, 392, 40, 33, 2131, 46, 2134, 40, 41, 605, 33, 2131, 46, 2135, 40, 41, 41, 344, 59, 2001, 2136, 61, 418, 2001, 40, 41, 59, 2136, 46, 2137, 61, 2138, 40, 2098, 44, 40, 2139, 41, 2131, 44, 2107, 41, 59, 2136, 46, 2119, 61, 2119, 59, 2108, 46, 2140, 40, 2136, 41, 59, 125, 125, 125, 450, 2108, 59, 125, 437, 457, 2103, 60, 2141, 62, 2142, 40, 2068, 2098, 44, 2143, 2144, 44, 2106, 2107, 41, 123, 2103, 60, 2141, 62, 2145, 61, 418, 2146, 60, 2141, 62, 40, 41, 59, 385, 40, 2141, 2147, 58, 2144, 46, 2148, 40, 41, 41, 123, 392, 40, 33, 2147, 46, 2149, 40, 41, 41, 344, 59, 392, 40, 33, 2147, 46, 2150, 40, 41, 41, 344, 59, 392, 40, 2147, 46, 2151, 614, 424, 606, 2147, 46, 2151, 46, 2152, 614, 1500, 41, 344, 59, 2106, 2153, 61, 2147, 46, 2151, 91, 1500, 93, 59, 392, 40, 2107, 46, 2154, 40, 2153, 41, 605, 33, 2107, 46, 2155, 40, 2153, 46, 2156, 40, 41, 41, 41, 344, 59, 2145, 46, 2157, 40, 2147, 41, 59, 125, 450, 2145, 59, 125, 437, 457, 381, 2158, 60, 2159, 44, 2007, 62, 2160, 61, 2158, 46, 2161, 40, 2159, 46, 334, 44, 2007, 46, 334, 44, 41, 59, 439, 457, 492, 2162, 40, 2163, 2164, 44, 2159, 2165, 44, 2106, 2166, 44, 2106, 91, 93, 433, 41, 123, 2160, 46, 2167, 40, 2165, 44, 418, 2006, 40, 2164, 44, 2165, 44, 2166, 44, 433, 41, 41, 59, 125, 439, 457, 492, 2168, 40, 2163, 2164, 44, 2159, 2165, 44, 2141, 2169, 41, 123, 2160, 46, 2170, 40, 2165, 44, 418, 2019, 40, 2164, 44, 2165, 44, 2169, 44, 424, 41, 41, 59, 125, 439, 457, 492, 2168, 40, 2163, 2164, 44, 2159, 2165, 44, 2141, 2169, 44, 2171, 2172, 41, 123, 2160, 46, 2173, 40, 2165, 44, 418, 2019, 40, 2164, 44, 2165, 44, 2169, 44, 2172, 41, 41, 59, 125, 439, 457, 492, 2174, 40, 2163, 2164, 44, 2175, 2176, 44, 2141, 2169, 44, 2159, 2165, 41, 123, 2160, 46, 2177, 40, 2165, 44, 418, 2056, 40, 2164, 44, 2176, 44, 2169, 41, 41, 59, 125, 439, 457, 2106, 2178, 40, 2106, 2179, 44, 2159, 2180, 44, 2181, 2172, 41, 123, 2103, 60, 2001, 62, 2182, 61, 418, 2183, 60, 2001, 62, 40, 41, 59, 2070, 2071, 61, 2172, 46, 2184, 40, 41, 46, 2185, 59, 2068, 2186, 61, 424, 59, 385, 40, 2068, 2098, 61, 2069, 40, 2071, 41, 59, 2098, 631, 424, 59, 2098, 61, 2097, 40, 2098, 41, 41, 123, 2083, 2105, 61, 2084, 40, 2187, 46, 334, 44, 2098, 41, 59, 392, 40, 2105, 631, 424, 41, 123, 2182, 46, 2188, 40, 1500, 44, 2104, 40, 2098, 44, 2105, 44, 2180, 46, 2189, 46, 2179, 41, 41, 59, 392, 40, 2186, 614, 424, 41, 2186, 61, 2098, 59, 125, 125, 324, 2190, 61, 380, 59, 392, 40, 2180, 46, 2191, 402, 2192, 605, 40, 40, 40, 2192, 41, 2180, 46, 2191, 41, 46, 2193, 38, 2175, 46, 2194, 41, 631, 1500, 41, 2190, 61, 473, 59, 392, 40, 2180, 46, 2191, 402, 2195, 41, 2190, 61, 473, 59, 392, 40, 2180, 46, 2191, 402, 2196, 41, 123, 2197, 2198, 61, 40, 40, 2196, 41, 2180, 46, 2191, 41, 46, 2198, 59, 392, 40, 2198, 402, 2106, 41, 2190, 61, 473, 59, 125, 392, 40, 2199, 46, 2200, 631, 424, 41, 123, 474, 123, 392, 40, 40, 2201, 41, 2199, 46, 2200, 46, 2202, 40, 2180, 41, 41, 2190, 61, 473, 59, 125, 329, 40, 2203, 2204, 41, 123, 125, 125, 392, 40, 33, 2190, 41, 385, 40, 2001, 2205, 58, 2182, 41, 123, 392, 40, 33, 2205, 46, 2206, 605, 33, 40, 2180, 46, 2207, 402, 2208, 41, 41, 344, 59, 385, 40, 2141, 2209, 58, 2205, 46, 2210, 41, 123, 392, 40, 33, 2211, 46, 2212, 40, 2180, 46, 2213, 44, 2209, 46, 2213, 41, 41, 344, 59, 2160, 46, 2214, 40, 2180, 41, 59, 392, 40, 2180, 46, 2191, 402, 2192, 41, 123, 2180, 46, 2191, 46, 2193, 601, 126, 2175, 46, 2194, 59, 125, 2103, 60, 2215, 62, 2216, 61, 418, 2183, 60, 2215, 62, 40, 41, 59, 2216, 46, 2217, 40, 2180, 46, 2191, 41, 59, 392, 40, 2180, 46, 2216, 631, 424, 41, 2216, 46, 2218, 40, 2211, 46, 2219, 40, 2180, 46, 2216, 41, 41, 59, 2215, 91, 93, 2220, 61, 2180, 46, 2216, 59, 2180, 46, 2216, 61, 2216, 46, 2221, 40, 418, 2215, 91, 1500, 93, 41, 59, 2103, 60, 2106, 62, 2222, 61, 418, 2183, 60, 2106, 62, 40, 41, 59, 385, 40, 2215, 2223, 58, 2216, 41, 123, 2106, 2224, 61, 2223, 46, 2179, 59, 392, 40, 2224, 614, 424, 605, 2199, 46, 2225, 40, 2223, 41, 41, 123, 2224, 61, 2199, 46, 2226, 40, 2223, 41, 59, 125, 392, 40, 2224, 614, 424, 41, 123, 2224, 61, 2106, 46, 2227, 59, 125, 2222, 46, 2217, 40, 2224, 41, 59, 125, 392, 40, 2180, 46, 2191, 402, 2159, 41, 123, 392, 40, 2199, 46, 2228, 631, 424, 41, 123, 474, 123, 2229, 46, 2230, 40, 2199, 46, 2228, 44, 2180, 46, 2191, 44, 424, 41, 59, 125, 329, 40, 2231, 2232, 41, 123, 125, 125, 125, 2141, 2233, 61, 2172, 46, 2234, 40, 2209, 46, 2235, 44, 2180, 46, 2213, 44, 2222, 46, 2221, 40, 418, 2106, 91, 1500, 93, 41, 44, 2180, 41, 59, 392, 40, 2233, 402, 2208, 41, 123, 2180, 46, 2216, 61, 2220, 59, 392, 40, 2233, 46, 2235, 631, 424, 41, 123, 2019, 46, 2236, 40, 2172, 46, 2164, 40, 41, 44, 2180, 44, 2233, 44, 2172, 41, 59, 125, 125, 360, 123, 324, 2237, 61, 2233, 46, 2237, 40, 41, 59, 385, 40, 404, 2238, 61, 1500, 44, 2239, 61, 2216, 46, 2240, 40, 41, 59, 2238, 60, 2239, 59, 2238, 637, 41, 123, 2215, 2241, 61, 2216, 46, 2242, 40, 2238, 41, 59, 2106, 91, 93, 2243, 61, 2233, 46, 2243, 59, 2106, 2244, 59, 392, 40, 2237, 605, 2238, 615, 2243, 46, 2245, 45, 1501, 41, 123, 2244, 61, 2243, 91, 2243, 46, 2245, 45, 1501, 93, 46, 2246, 40, 41, 59, 125, 360, 123, 2244, 61, 2243, 91, 2238, 93, 59, 125, 392, 40, 2199, 46, 2247, 40, 2241, 41, 41, 123, 2241, 46, 2248, 40, 2244, 41, 59, 2241, 46, 2178, 40, 2172, 41, 59, 125, 392, 40, 2241, 46, 2179, 631, 424, 41, 123, 392, 40, 33, 2244, 46, 2249, 40, 41, 605, 2241, 46, 2179, 46, 2249, 40, 41, 41, 123, 404, 2250, 61, 2241, 46, 2179, 46, 2250, 59, 2241, 46, 2251, 61, 2252, 46, 2253, 124, 40, 2250, 43, 40, 2250, 622, 1502, 41, 41, 59, 125, 360, 392, 40, 2244, 46, 2249, 40, 41, 605, 33, 2241, 46, 2179, 46, 2249, 40, 41, 41, 123, 404, 2254, 61, 2243, 91, 2238, 93, 46, 2254, 59, 2241, 46, 2255, 61, 2256, 46, 2257, 124, 40, 2254, 43, 40, 2254, 622, 1502, 41, 41, 59, 125, 125, 125, 2180, 46, 2191, 61, 2258, 40, 2209, 46, 2235, 44, 2180, 41, 59, 2180, 46, 2259, 61, 2209, 46, 2235, 59, 2180, 46, 2207, 61, 2233, 59, 2180, 46, 2179, 61, 2180, 46, 2207, 46, 2260, 59, 2180, 46, 2261, 61, 2180, 46, 2262, 59, 392, 40, 2199, 46, 2222, 631, 424, 41, 123, 474, 123, 2199, 46, 2222, 46, 2263, 40, 2180, 44, 2222, 46, 2221, 40, 418, 2106, 91, 1500, 93, 41, 41, 59, 125, 329, 40, 2264, 2265, 41, 123, 125, 125, 125, 450, 2180, 46, 2179, 59, 125, 125, 2007, 371, 61, 2160, 46, 2266, 40, 2180, 41, 59, 392, 40, 371, 631, 424, 41, 371, 46, 2267, 40, 41, 59, 2160, 46, 2268, 40, 2180, 41, 59, 450, 2179, 59, 125, 437, 457, 2269, 2270, 40, 2106, 2271, 44, 2175, 2272, 41, 123, 413, 2273, 61, 40, 40, 413, 41, 2272, 46, 2274, 622, 1503, 41, 124, 2272, 46, 2275, 59, 330, 91, 93, 2276, 61, 2271, 46, 2277, 40, 41, 59, 330, 91, 93, 2278, 61, 2271, 46, 2279, 40, 41, 59, 2280, 2281, 61, 418, 2280, 40, 41, 59, 392, 40, 2276, 631, 424, 41, 2281, 46, 2282, 40, 2276, 41, 59, 392, 40, 2281, 46, 2283, 40, 41, 62, 1500, 41, 2281, 46, 2282, 40, 41, 59, 2281, 46, 2282, 40, 2278, 41, 59, 2284, 2285, 61, 2281, 46, 2286, 40, 41, 59, 392, 40, 2285, 46, 2287, 40, 607, 41, 614, 45, 1501, 41, 123, 450, 418, 2288, 40, 2278, 44, 2273, 41, 59, 125, 360, 123, 330, 91, 93, 91, 93, 2289, 59, 2284, 91, 93, 398, 61, 2285, 46, 2290, 40, 41, 59, 2289, 61, 418, 330, 91, 398, 46, 2283, 93, 91, 93, 59, 385, 40, 404, 2291, 61, 1500, 59, 2291, 60, 398, 46, 2283, 59, 2291, 637, 41, 2289, 91, 2291, 93, 61, 398, 91, 2291, 93, 46, 2292, 40, 41, 59, 413, 91, 93, 2293, 61, 418, 413, 91, 398, 46, 2283, 93, 59, 2294, 46, 2295, 40, 2293, 44, 2273, 41, 59, 450, 418, 2296, 40, 2289, 44, 2293, 44, 2272, 46, 2274, 44, 2272, 46, 2275, 41, 59, 125, 125, 437, 457, 381, 334, 2297, 123, 439, 457, 381, 2298, 2299, 61, 2300, 46, 2301, 40, 2159, 46, 334, 44, 41, 59, 439, 457, 381, 2298, 2302, 61, 2300, 46, 2301, 40, 2159, 46, 334, 44, 41, 59, 439, 457, 381, 2298, 2303, 61, 2300, 46, 2301, 40, 2159, 46, 334, 44, 41, 59, 437, 457, 381, 2085, 60, 63, 62, 2304, 59, 437, 457, 381, 2305, 60, 63, 62, 2306, 59, 457, 123, 2085, 60, 63, 62, 2307, 61, 424, 59, 2305, 60, 63, 62, 2308, 61, 424, 59, 474, 123, 2307, 61, 2085, 46, 2309, 40, 41, 59, 125, 329, 40, 2310, 2311, 41, 123, 125, 474, 123, 2308, 61, 2300, 46, 2312, 40, 2085, 46, 2313, 40, 41, 44, 2314, 46, 334, 41, 59, 125, 329, 40, 2310, 2311, 41, 123, 125, 2304, 61, 2307, 59, 2306, 61, 2308, 59, 125, 439, 457, 324, 2315, 40, 2316, 2317, 41, 123, 392, 40, 2304, 614, 424, 41, 450, 380, 59, 450, 2304, 46, 2318, 40, 2317, 41, 59, 125, 439, 457, 2106, 2319, 40, 2316, 2317, 41, 123, 392, 40, 2306, 614, 424, 41, 450, 424, 59, 474, 123, 450, 40, 2106, 41, 2306, 46, 2320, 40, 2317, 41, 59, 125, 329, 40, 2321, 2322, 41, 123, 125, 450, 424, 59, 125, 125, 125]",0.99966013,1
24,32925,Java,"@SuppressWarnings({""serial"", ""unchecked"", ""rawtypes""})
public class StubbingWithThrowablesTest extends TestBase {

    private LinkedList mock;

    private Map mockTwo;

    @Rule public ExpectedException exception = ExpectedException.none();

    @Before
    public void setup() {
        mock = mock(LinkedList.class);
        mockTwo = mock(HashMap.class);
    }

    @Test
    public void throws_same_exception_consecutively() {
        when(mock.add("""")).thenThrow(new ExceptionOne());

        // 1st invocation
        Assertions.assertThatThrownBy(
                        new ThrowableAssert.ThrowingCallable() {
                            public void call() {
                                mock.add("""");
                            }
                        })
                .isInstanceOf(ExceptionOne.class);

        mock.add(""1"");

        // 2nd invocation
        Assertions.assertThatThrownBy(
                        new ThrowableAssert.ThrowingCallable() {
                            public void call() {
                                mock.add("""");
                            }
                        })
                .isInstanceOf(ExceptionOne.class);
    }

    @Test
    public void throws_same_exception_consecutively_with_doThrow() {
        doThrow(new ExceptionOne()).when(mock).clear();

        // 1st invocation
        Assertions.assertThatThrownBy(
                        new ThrowableAssert.ThrowingCallable() {
                            public void call() {
                                mock.clear();
                            }
                        })
                .isInstanceOf(ExceptionOne.class);

        mock.add(""1"");

        // 2nd invocation
        Assertions.assertThatThrownBy(
                        new ThrowableAssert.ThrowingCallable() {
                            public void call() {
                                mock.clear();
                            }
                        })
                .isInstanceOf(ExceptionOne.class);
    }

    @Test
    public void throws_new_exception_consecutively_from_class() {
        when(mock.add(null)).thenThrow(NaughtyException.class);

        NaughtyException first =
                Assertions.catchThrowableOfType(() -> mock.add(null), NaughtyException.class);
        NaughtyException second =
                Assertions.catchThrowableOfType(() -> mock.add(null), NaughtyException.class);

        assertNotSame(first, second);
    }

    @Test
    public void throws_new_exception_consecutively_from_class_with_doThrow() {
        doThrow(NaughtyException.class).when(mock).add(null);

        NaughtyException first =
                Assertions.catchThrowableOfType(() -> mock.add(null), NaughtyException.class);
        NaughtyException second =
                Assertions.catchThrowableOfType(() -> mock.add(null), NaughtyException.class);

        assertNotSame(first, second);
    }

    @Test
    public void shouldStubWithThrowable() throws Exception {
        IllegalArgumentException expected = new IllegalArgumentException(""thrown by mock"");
        when(mock.add(""throw"")).thenThrow(expected);

        exception.expect(sameInstance(expected));
        mock.add(""throw"");
    }

    @Test
    public void shouldSetThrowableToVoidMethod() throws Exception {
        IllegalArgumentException expected = new IllegalArgumentException(""thrown by mock"");

        doThrow(expected).when(mock).clear();

        exception.expect(sameInstance(expected));

        mock.clear();
    }

    @Test
    public void shouldLastStubbingVoidBeImportant() throws Exception {
        doThrow(new ExceptionOne()).when(mock).clear();
        doThrow(new ExceptionTwo()).when(mock).clear();

        exception.expect(ExceptionTwo.class);

        mock.clear();
    }

    @Test
    public void shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation()
            throws Exception {
        when(mock.size()).thenThrow(new ExceptionOne());

        exception.expect(ExceptionOne.class);

        when(mock.size()).thenThrow(new ExceptionTwo());
    }

    @Test
    public void shouldAllowSettingCheckedException() throws Exception {
        Reader reader = mock(Reader.class);
        IOException ioException = new IOException();

        when(reader.read()).thenThrow(ioException);

        exception.expect(sameInstance(ioException));

        reader.read();
    }

    @Test
    public void shouldAllowSettingError() throws Exception {
        Error error = new Error();

        when(mock.add(""quake"")).thenThrow(error);

        exception.expect(Error.class);

        mock.add(""quake"");
    }

    @Test
    public void shouldNotAllowNullExceptionType() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Cannot stub with null throwable"");

        when(mock.add(null)).thenThrow((Exception) null);
    }

    @Test
    public void shouldInstantiateExceptionClassOnInteraction() {
        when(mock.add(null)).thenThrow(NaughtyException.class);

        exception.expect(NaughtyException.class);

        mock.add(null);
    }

    @Test
    public void shouldInstantiateExceptionClassWithOngoingStubbingOnInteraction() {
        doThrow(NaughtyException.class).when(mock).add(null);

        exception.expect(NaughtyException.class);

        mock.add(null);
    }

    @Test
    public void shouldNotAllowSettingInvalidCheckedException() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Checked exception is invalid for this method"");

        when(mock.add(""monkey island"")).thenThrow(new Exception());
    }

    @Test
    public void shouldNotAllowSettingNullThrowable() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Cannot stub with null throwable"");

        when(mock.add(""monkey island"")).thenThrow((Throwable) null);
    }

    @Test
    public void shouldNotAllowSettingNullThrowableArray() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Cannot stub with null throwable"");

        when(mock.add(""monkey island"")).thenThrow((Throwable[]) null);
    }

    @Test
    public void shouldNotAllowSettingNullThrowableClass() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        when(mock.isEmpty()).thenThrow((Class) null);
    }

    @Test
    public void shouldNotAllowSettingNullThrowableClasses() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class[]) null);
    }

    @Test
    public void shouldNotAllowSettingNullVarArgThrowableClass() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class) null);
    }

    @Test
    public void doThrowShouldNotAllowSettingNullThrowableClass() {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        doThrow((Class) null).when(mock).isEmpty();
    }

    @Test
    public void doThrowShouldNotAllowSettingNullThrowableClasses() throws Exception {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        doThrow(RuntimeException.class, (Class) null).when(mock).isEmpty();
    }

    @Test
    public void doThrowShouldNotAllowSettingNullVarArgThrowableClasses() throws Exception {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        doThrow(RuntimeException.class, (Class[]) null).when(mock).isEmpty();
    }

    @Test
    public void shouldNotAllowSettingNullVarArgsThrowableClasses() throws Exception {
        exception.expect(MockitoException.class);
        exception.expectMessage(""Exception type cannot be null"");

        when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class<RuntimeException>[]) null);
    }

    @Test
    public void shouldNotAllowDifferentCheckedException() throws Exception {
        IMethods mock = mock(IMethods.class);

        exception.expect(MockitoException.class);
        exception.expectMessage(""Checked exception is invalid for this method"");

        when(mock.throwsIOException(0)).thenThrow(CheckedException.class);
    }

    @Test
    public void shouldNotAllowCheckedExceptionWhenErrorIsDeclared() throws Exception {
        IMethods mock = mock(IMethods.class);

        exception.expect(MockitoException.class);
        exception.expectMessage(""Checked exception is invalid for this method"");

        when(mock.throwsError(0)).thenThrow(CheckedException.class);
    }

    @Test
    public void shouldNotAllowCheckedExceptionWhenNothingIsDeclared() throws Exception {
        IMethods mock = mock(IMethods.class);

        exception.expect(MockitoException.class);
        exception.expectMessage(""Checked exception is invalid for this method"");

        when(mock.throwsNothing(true)).thenThrow(CheckedException.class);
    }

    @Test
    public void shouldMixThrowablesAndReturnsOnDifferentMocks() throws Exception {
        when(mock.add(""ExceptionOne"")).thenThrow(new ExceptionOne());
        when(mock.getLast()).thenReturn(""last"");
        doThrow(new ExceptionTwo()).when(mock).clear();

        doThrow(new ExceptionThree()).when(mockTwo).clear();
        when(mockTwo.containsValue(""ExceptionFour"")).thenThrow(new ExceptionFour());
        when(mockTwo.get(""Are you there?"")).thenReturn(""Yes!"");

        assertNull(mockTwo.get(""foo""));
        assertTrue(mockTwo.keySet().isEmpty());
        assertEquals(""Yes!"", mockTwo.get(""Are you there?""));
        try {
            mockTwo.clear();
            fail();
        } catch (ExceptionThree e) {
        }
        try {
            mockTwo.containsValue(""ExceptionFour"");
            fail();
        } catch (ExceptionFour e) {
        }

        assertNull(mock.getFirst());
        assertEquals(""last"", mock.getLast());
        try {
            mock.add(""ExceptionOne"");
            fail();
        } catch (ExceptionOne e) {
        }
        try {
            mock.clear();
            fail();
        } catch (ExceptionTwo e) {
        }
    }

    @Test
    public void shouldStubbingWithThrowableBeVerifiable() {
        when(mock.size()).thenThrow(new RuntimeException());
        doThrow(new RuntimeException()).when(mock).clone();

        try {
            mock.size();
            fail();
        } catch (RuntimeException e) {
        }

        try {
            mock.clone();
            fail();
        } catch (RuntimeException e) {
        }

        verify(mock).size();
        verify(mock).clone();
        verifyNoMoreInteractions(mock);
    }

    @Test
    public void shouldStubbingWithThrowableFailVerification() {
        when(mock.size()).thenThrow(new RuntimeException());
        doThrow(new RuntimeException()).when(mock).clone();

        verifyNoInteractions(mock);

        mock.add(""test"");

        try {
            verify(mock).size();
            fail();
        } catch (WantedButNotInvoked e) {
        }

        try {
            verify(mock).clone();
            fail();
        } catch (WantedButNotInvoked e) {
        }

        try {
            verifyNoMoreInteractions(mock);
            fail();
        } catch (NoInteractionsWanted e) {
        }
    }

    private class ExceptionOne extends RuntimeException {}

    private class ExceptionTwo extends RuntimeException {}

    private class ExceptionThree extends RuntimeException {}

    private class ExceptionFour extends RuntimeException {}

    private class CheckedException extends Exception {}

    public class NaughtyException extends RuntimeException {
        public NaughtyException() {
            throw new RuntimeException(""boo!"");
        }
    }
}",1,"[64, 2000, 40, 123, 44, 44, 125, 41, 439, 334, 2001, 378, 2002, 123, 437, 2003, 2004, 59, 437, 2005, 2006, 59, 64, 2007, 439, 2008, 2009, 61, 2008, 46, 2010, 40, 41, 59, 64, 2011, 439, 492, 2012, 40, 41, 123, 2004, 61, 2004, 40, 2003, 46, 334, 41, 59, 2006, 61, 2004, 40, 2013, 46, 334, 41, 59, 125, 64, 2014, 439, 492, 2015, 40, 41, 123, 2016, 40, 2004, 46, 2017, 40, 41, 41, 46, 2018, 40, 418, 2019, 40, 41, 41, 59, 2020, 46, 2021, 40, 418, 2022, 46, 2023, 40, 41, 123, 439, 492, 2024, 40, 41, 123, 2004, 46, 2017, 40, 41, 59, 125, 125, 41, 46, 2025, 40, 2019, 46, 334, 41, 59, 2004, 46, 2017, 40, 41, 59, 2020, 46, 2021, 40, 418, 2022, 46, 2023, 40, 41, 123, 439, 492, 2026, 40, 41, 123, 2004, 46, 2017, 40, 41, 59, 125, 125, 41, 46, 2025, 40, 2019, 46, 334, 41, 59, 125, 64, 2014, 439, 492, 2027, 40, 41, 123, 2028, 40, 418, 2029, 40, 41, 41, 46, 2030, 40, 2004, 41, 46, 2031, 40, 41, 59, 2032, 46, 2033, 40, 418, 2034, 46, 2035, 40, 41, 123, 439, 492, 2036, 40, 41, 123, 2004, 46, 2031, 40, 41, 59, 125, 125, 41, 46, 2037, 40, 2029, 46, 334, 41, 59, 2004, 46, 2038, 40, 41, 59, 2032, 46, 2033, 40, 418, 2034, 46, 2035, 40, 41, 123, 439, 492, 2039, 40, 41, 123, 2004, 46, 2031, 40, 41, 59, 125, 125, 41, 46, 2037, 40, 2029, 46, 334, 41, 59, 125, 64, 2014, 439, 492, 2040, 40, 41, 123, 2041, 40, 2004, 46, 2042, 40, 424, 41, 41, 46, 2043, 40, 2044, 46, 334, 41, 59, 2044, 2045, 61, 2046, 46, 2047, 40, 40, 41, 45, 62, 2004, 46, 2042, 40, 424, 41, 44, 2044, 46, 334, 41, 59, 2044, 2048, 61, 2046, 46, 2047, 40, 40, 41, 45, 62, 2004, 46, 2042, 40, 424, 41, 44, 2044, 46, 334, 41, 59, 2049, 40, 2045, 44, 2048, 41, 59, 125, 64, 2014, 439, 492, 2050, 40, 41, 123, 2051, 40, 2052, 46, 334, 41, 46, 2053, 40, 2004, 41, 46, 2054, 40, 424, 41, 59, 2052, 2055, 61, 2056, 46, 2057, 40, 40, 41, 45, 62, 2004, 46, 2054, 40, 424, 41, 44, 2052, 46, 334, 41, 59, 2052, 2058, 61, 2056, 46, 2057, 40, 40, 41, 45, 62, 2004, 46, 2054, 40, 424, 41, 44, 2052, 46, 334, 41, 59, 2059, 40, 2055, 44, 2058, 41, 59, 125, 64, 2014, 439, 492, 2060, 40, 41, 470, 2061, 123, 2062, 2063, 61, 418, 2062, 40, 41, 59, 2064, 40, 2004, 46, 2065, 40, 41, 41, 46, 2066, 40, 2063, 41, 59, 2009, 46, 2067, 40, 2068, 40, 2063, 41, 41, 59, 2004, 46, 2065, 40, 41, 59, 125, 64, 2014, 439, 492, 2069, 40, 41, 470, 2061, 123, 2070, 2071, 61, 418, 2070, 40, 41, 59, 2072, 40, 2071, 41, 46, 2073, 40, 2004, 41, 46, 2074, 40, 41, 59, 2009, 46, 2075, 40, 2076, 40, 2071, 41, 41, 59, 2004, 46, 2074, 40, 41, 59, 125, 64, 2014, 439, 492, 2077, 40, 41, 470, 2061, 123, 2078, 40, 418, 2079, 40, 41, 41, 46, 2080, 40, 2004, 41, 46, 2081, 40, 41, 59, 2078, 40, 418, 2082, 40, 41, 41, 46, 2080, 40, 2004, 41, 46, 2081, 40, 41, 59, 2009, 46, 2083, 40, 2082, 46, 334, 41, 59, 2004, 46, 2081, 40, 41, 59, 125, 64, 2014, 439, 492, 2084, 40, 41, 470, 2061, 123, 2085, 40, 2004, 46, 2086, 40, 41, 41, 46, 2087, 40, 418, 2088, 40, 41, 41, 59, 2009, 46, 2089, 40, 2088, 46, 334, 41, 59, 2085, 40, 2004, 46, 2086, 40, 41, 41, 46, 2087, 40, 418, 2090, 40, 41, 41, 59, 125, 64, 2014, 439, 492, 2091, 40, 41, 470, 2061, 123, 2092, 2093, 61, 2004, 40, 2092, 46, 334, 41, 59, 2094, 2095, 61, 418, 2094, 40, 41, 59, 2096, 40, 2093, 46, 2097, 40, 41, 41, 46, 2098, 40, 2095, 41, 59, 2009, 46, 2099, 40, 2100, 40, 2095, 41, 41, 59, 2093, 46, 2097, 40, 41, 59, 125, 64, 2014, 439, 492, 2101, 40, 41, 470, 2061, 123, 2102, 371, 61, 418, 2102, 40, 41, 59, 2103, 40, 2004, 46, 2104, 40, 41, 41, 46, 2105, 40, 371, 41, 59, 2009, 46, 2106, 40, 2102, 46, 334, 41, 59, 2004, 46, 2104, 40, 41, 59, 125, 64, 2014, 439, 492, 2107, 40, 41, 123, 2009, 46, 2108, 40, 2109, 46, 334, 41, 59, 2009, 46, 2110, 40, 41, 59, 2111, 40, 2004, 46, 2112, 40, 424, 41, 41, 46, 2113, 40, 40, 2061, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2114, 40, 41, 123, 2115, 40, 2004, 46, 2116, 40, 424, 41, 41, 46, 2117, 40, 2118, 46, 334, 41, 59, 2009, 46, 2119, 40, 2118, 46, 334, 41, 59, 2004, 46, 2116, 40, 424, 41, 59, 125, 64, 2014, 439, 492, 2120, 40, 41, 123, 2121, 40, 2122, 46, 334, 41, 46, 2123, 40, 2004, 41, 46, 2124, 40, 424, 41, 59, 2009, 46, 2125, 40, 2122, 46, 334, 41, 59, 2004, 46, 2124, 40, 424, 41, 59, 125, 64, 2014, 439, 492, 2126, 40, 41, 123, 2009, 46, 2127, 40, 2128, 46, 334, 41, 59, 2009, 46, 2129, 40, 41, 59, 2130, 40, 2004, 46, 2131, 40, 41, 41, 46, 2132, 40, 418, 2061, 40, 41, 41, 59, 125, 64, 2014, 439, 492, 2133, 40, 41, 123, 2009, 46, 2134, 40, 2135, 46, 334, 41, 59, 2009, 46, 2136, 40, 41, 59, 2137, 40, 2004, 46, 2138, 40, 41, 41, 46, 2139, 40, 40, 2140, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2141, 40, 41, 123, 2009, 46, 2142, 40, 2143, 46, 334, 41, 59, 2009, 46, 2144, 40, 41, 59, 2145, 40, 2004, 46, 2146, 40, 41, 41, 46, 2147, 40, 40, 2148, 91, 93, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2149, 40, 41, 123, 2009, 46, 2150, 40, 2151, 46, 334, 41, 59, 2009, 46, 2152, 40, 41, 59, 2153, 40, 2004, 46, 2154, 40, 41, 41, 46, 2155, 40, 40, 2156, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2157, 40, 41, 123, 2009, 46, 2158, 40, 2159, 46, 334, 41, 59, 2009, 46, 2160, 40, 41, 59, 2161, 40, 2004, 46, 2162, 40, 41, 41, 46, 2163, 40, 2164, 46, 334, 44, 40, 2165, 91, 93, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2166, 40, 41, 123, 2009, 46, 2167, 40, 2168, 46, 334, 41, 59, 2009, 46, 2169, 40, 41, 59, 2170, 40, 2004, 46, 2171, 40, 41, 41, 46, 2172, 40, 2173, 46, 334, 44, 40, 2174, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2175, 40, 41, 123, 2009, 46, 2176, 40, 2177, 46, 334, 41, 59, 2009, 46, 2178, 40, 41, 59, 2179, 40, 40, 2180, 41, 424, 41, 46, 2181, 40, 2004, 41, 46, 2182, 40, 41, 59, 125, 64, 2014, 439, 492, 2183, 40, 41, 470, 2061, 123, 2009, 46, 2184, 40, 2185, 46, 334, 41, 59, 2009, 46, 2186, 40, 41, 59, 2187, 40, 2188, 46, 334, 44, 40, 2189, 41, 424, 41, 46, 2190, 40, 2004, 41, 46, 2191, 40, 41, 59, 125, 64, 2014, 439, 492, 2192, 40, 41, 470, 2061, 123, 2009, 46, 2193, 40, 2194, 46, 334, 41, 59, 2009, 46, 2195, 40, 41, 59, 2196, 40, 2197, 46, 334, 44, 40, 2198, 91, 93, 41, 424, 41, 46, 2199, 40, 2004, 41, 46, 2200, 40, 41, 59, 125, 64, 2014, 439, 492, 2201, 40, 41, 470, 2061, 123, 2009, 46, 2202, 40, 2203, 46, 334, 41, 59, 2009, 46, 2204, 40, 41, 59, 2205, 40, 2004, 46, 2206, 40, 41, 41, 46, 2207, 40, 2208, 46, 334, 44, 40, 2209, 60, 2208, 62, 91, 93, 41, 424, 41, 59, 125, 64, 2014, 439, 492, 2210, 40, 41, 470, 2061, 123, 2211, 2004, 61, 2004, 40, 2211, 46, 334, 41, 59, 2009, 46, 2212, 40, 2213, 46, 334, 41, 59, 2009, 46, 2214, 40, 41, 59, 2215, 40, 2004, 46, 2216, 40, 1500, 41, 41, 46, 2217, 40, 2218, 46, 334, 41, 59, 125, 64, 2014, 439, 492, 2219, 40, 41, 470, 2061, 123, 2220, 2004, 61, 2004, 40, 2220, 46, 334, 41, 59, 2009, 46, 2221, 40, 2222, 46, 334, 41, 59, 2009, 46, 2223, 40, 41, 59, 2224, 40, 2004, 46, 2225, 40, 1500, 41, 41, 46, 2226, 40, 2227, 46, 334, 41, 59, 125, 64, 2014, 439, 492, 2228, 40, 41, 470, 2061, 123, 2229, 2004, 61, 2004, 40, 2229, 46, 334, 41, 59, 2009, 46, 2230, 40, 2231, 46, 334, 41, 59, 2009, 46, 2232, 40, 41, 59, 2233, 40, 2004, 46, 2234, 40, 473, 41, 41, 46, 2235, 40, 2236, 46, 334, 41, 59, 125, 64, 2014, 439, 492, 2237, 40, 41, 470, 2061, 123, 2238, 40, 2004, 46, 2239, 40, 41, 41, 46, 2240, 40, 418, 2241, 40, 41, 41, 59, 2238, 40, 2004, 46, 2242, 40, 41, 41, 46, 2243, 40, 41, 59, 2244, 40, 418, 2245, 40, 41, 41, 46, 2238, 40, 2004, 41, 46, 2246, 40, 41, 59, 2244, 40, 418, 2247, 40, 41, 41, 46, 2238, 40, 2006, 41, 46, 2246, 40, 41, 59, 2238, 40, 2006, 46, 2248, 40, 41, 41, 46, 2240, 40, 418, 2249, 40, 41, 41, 59, 2238, 40, 2006, 46, 2250, 40, 41, 41, 46, 2243, 40, 41, 59, 2251, 40, 2006, 46, 2250, 40, 41, 41, 59, 2252, 40, 2006, 46, 2253, 40, 41, 46, 2254, 40, 41, 41, 59, 2255, 40, 44, 2006, 46, 2250, 40, 41, 41, 59, 474, 123, 2006, 46, 2246, 40, 41, 59, 2256, 40, 41, 59, 125, 329, 40, 2247, 2257, 41, 123, 125, 474, 123, 2006, 46, 2248, 40, 41, 59, 2258, 40, 41, 59, 125, 329, 40, 2249, 2257, 41, 123, 125, 2251, 40, 2004, 46, 2259, 40, 41, 41, 59, 2255, 40, 44, 2004, 46, 2242, 40, 41, 41, 59, 474, 123, 2004, 46, 2239, 40, 41, 59, 2260, 40, 41, 59, 125, 329, 40, 2241, 2257, 41, 123, 125, 474, 123, 2004, 46, 2246, 40, 41, 59, 2261, 40, 41, 59, 125, 329, 40, 2245, 2257, 41, 123, 125, 125, 64, 2014, 439, 492, 2262, 40, 41, 123, 2263, 40, 2004, 46, 2264, 40, 41, 41, 46, 2265, 40, 418, 2266, 40, 41, 41, 59, 2267, 40, 418, 2266, 40, 41, 41, 46, 2263, 40, 2004, 41, 46, 335, 40, 41, 59, 474, 123, 2004, 46, 2264, 40, 41, 59, 2268, 40, 41, 59, 125, 329, 40, 2266, 2269, 41, 123, 125, 474, 123, 2004, 46, 335, 40, 41, 59, 2270, 40, 41, 59, 125, 329, 40, 2266, 2269, 41, 123, 125, 2271, 40, 2004, 41, 46, 2264, 40, 41, 59, 2271, 40, 2004, 41, 46, 335, 40, 41, 59, 2272, 40, 2004, 41, 59, 125, 64, 2014, 439, 492, 2273, 40, 41, 123, 2274, 40, 2004, 46, 2275, 40, 41, 41, 46, 2276, 40, 418, 2277, 40, 41, 41, 59, 2278, 40, 418, 2277, 40, 41, 41, 46, 2274, 40, 2004, 41, 46, 335, 40, 41, 59, 2279, 40, 2004, 41, 59, 2004, 46, 2280, 40, 41, 59, 474, 123, 2281, 40, 2004, 41, 46, 2275, 40, 41, 59, 2282, 40, 41, 59, 125, 329, 40, 2283, 2284, 41, 123, 125, 474, 123, 2285, 40, 2004, 41, 46, 335, 40, 41, 59, 2286, 40, 41, 59, 125, 329, 40, 2283, 2284, 41, 123, 125, 474, 123, 2287, 40, 2004, 41, 59, 2288, 40, 41, 59, 125, 329, 40, 2289, 2284, 41, 123, 125, 125, 437, 334, 2290, 378, 2291, 123, 125, 437, 334, 2292, 378, 2291, 123, 125, 437, 334, 2293, 378, 2291, 123, 125, 437, 334, 2294, 378, 2291, 123, 125, 437, 334, 2295, 378, 2061, 123, 125, 439, 334, 2296, 378, 2291, 123, 439, 2296, 40, 41, 123, 469, 418, 2291, 40, 41, 59, 125, 125, 125]",0.9998725,1
25,27756,Java,"public final class InitialShortcutData extends GameXmlReader {
    private static final Logger LOGGER = LoggerFactory.getLogger(InitialShortcutData.class);

    private final Map<ClassId, List<Shortcut>> _initialShortcutData = new EnumMap<>(ClassId.class);
    private final List<Shortcut> _initialGlobalShortcutList = new ArrayList<>();
    private final IntMap<Macro> _macroPresets = new HashIntMap<>();

    private InitialShortcutData() {
        load();
    }

    @Override
    protected Path getSchemaFilePath() {
        return ServerSettings.dataPackDirectory().resolve(""data/xsd/initialShortcuts.xsd"");
    }

    @Override
    public void load() {
        _initialShortcutData.clear();
        _initialGlobalShortcutList.clear();

        parseDatapackFile(""data/stats/initialShortcuts.xml"");

        LOGGER.info(""Loaded {} Initial Global Shortcuts data."", _initialGlobalShortcutList.size());
        LOGGER.info(""Loaded {} Initial Shortcuts data."", _initialShortcutData.size());
        LOGGER.info(""Loaded {} Macros presets."", _macroPresets.size());
        releaseResources();
    }

    @Override
    public void parseDocument(Document doc, File f) {
        for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {
            if (""list"".equals(n.getNodeName())) {
                for (Node d = n.getFirstChild(); d != null; d = d.getNextSibling()) {
                    switch (d.getNodeName()) {
                        case ""shortcuts"": {
                            parseShortcuts(d);
                            break;
                        }
                        case ""macros"": {
                            parseMacros(d);
                            break;
                        }
                    }
                }
            }
        }
    }

    private void parseShortcuts(Node d) {
        NamedNodeMap attrs = d.getAttributes();
        final Node classIdNode = attrs.getNamedItem(""classId"");
        final List<Shortcut> list = new ArrayList<>();
        for (Node c = d.getFirstChild(); c != null; c = c.getNextSibling()) {
            if (""page"".equals(c.getNodeName())) {
                attrs = c.getAttributes();
                final int pageId = parseInt(attrs, ""pageId"");
                for (Node b = c.getFirstChild(); b != null; b = b.getNextSibling()) {
                    if (""slot"".equals(b.getNodeName())) {
                        list.add(createShortcut(pageId, b));
                    }
                }
            }
        }

        if (classIdNode != null) {
            _initialShortcutData.put(ClassId.getClassId(Integer.parseInt(classIdNode.getNodeValue())), list);
        } else {
            _initialGlobalShortcutList.addAll(list);
        }
    }

    private void parseMacros(Node d) {
        for (Node c = d.getFirstChild(); c != null; c = c.getNextSibling()) {
            if (""macro"".equals(c.getNodeName())) {
                NamedNodeMap attrs = c.getAttributes();
                if (!parseBoolean(attrs, ""enabled"", true)) {
                    continue;
                }

                final int macroId = parseInt(attrs, ""macroId"");

                MacroData data = new MacroData();
                data.setId(macroId);
                data.setIcon( parseInt(attrs, ""icon""));
                data.setName(parseString(attrs, ""name""));
                data.setDescription(parseString(attrs, ""description""));
                data.setAcronym(parseString(attrs, ""acronym""));

                final List<MacroCmdData> commands = new ArrayList<>(1);
                int entry = 0;

                for (Node b = c.getFirstChild(); b != null; b = b.getNextSibling()) {
                    if (""command"".equals(b.getNodeName())) {
                        MacroCmdData cmdData = new MacroCmdData();
                        cmdData.setMacroId(macroId);
                        attrs = b.getAttributes();
                        cmdData.setType(parseEnum(attrs, MacroType.class, ""type""));
                        cmdData.setCommand(b.getTextContent());

                        setDatas(attrs, cmdData);
                        cmdData.setIndex(entry++);
                        commands.add(cmdData);
                    }
                }
                _macroPresets.put(macroId, new Macro(data, commands));
            }
        }
    }

    private void setDatas(NamedNodeMap attrs, MacroCmdData cmdData) {
        switch (cmdData.getType()) {
            case SKILL -> {
                cmdData.setData1(parseInt(attrs, ""skillId"")); // Skill ID
                cmdData.setData2(parseInt(attrs, ""skillLvl"", 0)); // Skill level
            }
            case SHORTCUT -> {
                cmdData.setData1(parseInt(attrs, ""page""));
                cmdData.setData2(parseInt(attrs, ""slot"", 0));
            }
            case ACTION -> cmdData.setData1(parseInt(attrs, ""actionId""));
            case ITEM -> cmdData.setData1(parseInt(attrs, ""itemId""));
            case DELAY -> cmdData.setData1(parseInt(attrs, ""delay""));
        }
    }

    /**
     * Parses a node an create a shortcut from it.
     *
     * @param pageId the page ID
     * @param b      the node to parse
     * @return the new shortcut
     */
    private Shortcut createShortcut(int pageId, Node b) {
        final NamedNodeMap attrs = b.getAttributes();
        final int slotId = parseInt(attrs, ""slotId"");
        final ShortcutType shortcutType = parseEnum(attrs, ShortcutType.class, ""shortcutType"");
        final int shortcutId = parseInt(attrs, ""shortcutId"");
        final int shortcutLevel = parseInt(attrs, ""shortcutLevel"", 0);
        final int characterType = parseInt(attrs, ""characterType"", 1);
        return new Shortcut(Shortcut.pageAndSlotToClientId(pageId, slotId), shortcutType, shortcutId, shortcutLevel, 0, characterType);
    }

    /**
     * Register all the available shortcuts for the given player.
     *
     * @param player the player
     */
    public void registerAllShortcuts(Player player) {
        if (isNull(player)) {
            return;
        }

        // Register global shortcuts.
        for (Shortcut shortcut : _initialGlobalShortcutList) {
            int shortcutId = shortcut.getShortcutId();
            switch (shortcut.getType()) {
                case ITEM: {
                    final Item item = player.getInventory().getItemByItemId(shortcutId);
                    if (item == null) {
                        continue;
                    }
                    shortcutId = item.getObjectId();
                    break;
                }
                case SKILL: {
                    if (!player.getSkills().containsKey(shortcutId)) {
                        continue;
                    }
                    break;
                }
                case MACRO: {
                    final Macro macro = _macroPresets.get(shortcutId);
                    if (macro == null) {
                        continue;
                    }
                    player.registerMacro(macro);
                    break;
                }
            }

            // Register shortcut
            final Shortcut newShortcut = new Shortcut(shortcut.getClientId(), shortcut.getType(), shortcutId, shortcut.getLevel(), shortcut.getSubLevel(), shortcut.getCharacterType());
            player.sendPacket(new ShortCutRegister(newShortcut));
            player.registerShortCut(newShortcut);
        }

        // Register class specific shortcuts.
        if (_initialShortcutData.containsKey(player.getClassId())) {
            for (Shortcut shortcut : _initialShortcutData.get(player.getClassId())) {
                int shortcutId = shortcut.getShortcutId();
                switch (shortcut.getType()) {
                    case ITEM: {
                        final Item item = player.getInventory().getItemByItemId(shortcutId);
                        if (item == null) {
                            continue;
                        }
                        shortcutId = item.getObjectId();
                        break;
                    }
                    case SKILL: {
                        if (!player.getSkills().containsKey(shortcut.getShortcutId())) {
                            continue;
                        }
                        break;
                    }
                    case MACRO: {
                        final Macro macro = _macroPresets.get(shortcutId);
                        if (macro == null) {
                            continue;
                        }
                        player.registerMacro(macro);
                        break;
                    }
                }
                // Register shortcut
                final Shortcut newShortcut = new Shortcut(shortcut.getClientId(), shortcut.getType(), shortcutId, shortcut.getLevel(), shortcut.getSubLevel(), shortcut.getCharacterType());
                player.registerShortCut(newShortcut);
            }
        }
    }

    public static InitialShortcutData getInstance() {
        return Singleton.INSTANCE;
    }

    private static class Singleton {
        private static final InitialShortcutData INSTANCE = new InitialShortcutData();
    }
}",1,"[439, 381, 334, 2000, 378, 2001, 123, 437, 457, 381, 2002, 2003, 61, 2004, 46, 2005, 40, 2000, 46, 334, 41, 59, 437, 381, 2006, 60, 2007, 44, 2008, 60, 2009, 641, 2010, 61, 418, 2011, 60, 62, 40, 2007, 46, 334, 41, 59, 437, 381, 2008, 60, 2009, 62, 2012, 61, 418, 2013, 60, 62, 40, 41, 59, 437, 381, 2014, 60, 2015, 62, 2016, 61, 418, 2017, 60, 62, 40, 41, 59, 437, 2000, 40, 41, 123, 2018, 40, 41, 59, 125, 64, 2019, 438, 2020, 2021, 40, 41, 123, 450, 2022, 46, 2023, 40, 41, 46, 2024, 40, 41, 59, 125, 64, 2019, 439, 492, 2025, 40, 41, 123, 2010, 46, 2026, 40, 41, 59, 2012, 46, 2026, 40, 41, 59, 2027, 40, 41, 59, 2003, 46, 2028, 40, 44, 2012, 46, 2029, 40, 41, 41, 59, 2003, 46, 2028, 40, 44, 2010, 46, 2029, 40, 41, 41, 59, 2003, 46, 2028, 40, 44, 2016, 46, 2029, 40, 41, 41, 59, 2030, 40, 41, 59, 125, 64, 2019, 439, 492, 2031, 40, 2032, 2033, 44, 2034, 2035, 41, 123, 385, 40, 2036, 2037, 61, 2033, 46, 2038, 40, 41, 59, 2037, 631, 424, 59, 2037, 61, 2037, 46, 2039, 40, 41, 41, 123, 392, 40, 46, 2040, 40, 2037, 46, 2041, 40, 41, 41, 41, 123, 385, 40, 2036, 2042, 61, 2037, 46, 2038, 40, 41, 59, 2042, 631, 424, 59, 2042, 61, 2042, 46, 2039, 40, 41, 41, 123, 464, 40, 2042, 46, 2041, 40, 41, 41, 123, 328, 58, 123, 2043, 40, 2042, 41, 59, 325, 59, 125, 328, 58, 123, 2044, 40, 2042, 41, 59, 325, 59, 125, 125, 125, 125, 125, 125, 437, 492, 2045, 40, 2046, 2047, 41, 123, 2048, 2049, 61, 2047, 46, 2050, 40, 41, 59, 381, 2046, 2051, 61, 2049, 46, 2052, 40, 41, 59, 381, 2008, 60, 2009, 62, 411, 61, 418, 2013, 60, 62, 40, 41, 59, 385, 40, 2046, 2053, 61, 2047, 46, 2054, 40, 41, 59, 2053, 631, 424, 59, 2053, 61, 2053, 46, 2055, 40, 41, 41, 123, 392, 40, 46, 2056, 40, 2053, 46, 2057, 40, 41, 41, 41, 123, 2049, 61, 2053, 46, 2050, 40, 41, 59, 381, 404, 2058, 61, 2059, 40, 2049, 44, 41, 59, 385, 40, 2046, 2060, 61, 2053, 46, 2054, 40, 41, 59, 2060, 631, 424, 59, 2060, 61, 2060, 46, 2055, 40, 41, 41, 123, 392, 40, 46, 2056, 40, 2060, 46, 2057, 40, 41, 41, 41, 123, 411, 46, 2061, 40, 2062, 40, 2058, 44, 2060, 41, 41, 59, 125, 125, 125, 125, 392, 40, 2051, 631, 424, 41, 123, 2010, 46, 2063, 40, 2007, 46, 2064, 40, 2065, 46, 2066, 40, 2051, 46, 2067, 40, 41, 41, 41, 44, 411, 41, 59, 125, 360, 123, 2012, 46, 2068, 40, 411, 41, 59, 125, 125, 437, 492, 2069, 40, 2046, 2047, 41, 123, 385, 40, 2046, 2070, 61, 2047, 46, 2071, 40, 41, 59, 2070, 631, 424, 59, 2070, 61, 2070, 46, 2072, 40, 41, 41, 123, 392, 40, 46, 2073, 40, 2070, 46, 2074, 40, 41, 41, 41, 123, 2075, 2076, 61, 2070, 46, 2077, 40, 41, 59, 392, 40, 33, 2078, 40, 2076, 44, 44, 473, 41, 41, 123, 344, 59, 125, 381, 404, 2079, 61, 2080, 40, 2076, 44, 41, 59, 2081, 2082, 61, 418, 2081, 40, 41, 59, 2082, 46, 2083, 40, 2079, 41, 59, 2082, 46, 2084, 40, 2080, 40, 2076, 44, 41, 41, 59, 2082, 46, 2085, 40, 2086, 40, 2076, 44, 41, 41, 59, 2082, 46, 2087, 40, 2086, 40, 2076, 44, 41, 41, 59, 2082, 46, 2088, 40, 2086, 40, 2076, 44, 41, 41, 59, 381, 2008, 60, 2089, 62, 2090, 61, 418, 2013, 60, 62, 40, 1501, 41, 59, 404, 2091, 61, 1500, 59, 385, 40, 2046, 2092, 61, 2070, 46, 2071, 40, 41, 59, 2092, 631, 424, 59, 2092, 61, 2092, 46, 2072, 40, 41, 41, 123, 392, 40, 46, 2073, 40, 2092, 46, 2074, 40, 41, 41, 41, 123, 2089, 2093, 61, 418, 2089, 40, 41, 59, 2093, 46, 2094, 40, 2079, 41, 59, 2076, 61, 2092, 46, 2077, 40, 41, 59, 2093, 46, 2095, 40, 2096, 40, 2076, 44, 2097, 46, 334, 44, 41, 41, 59, 2093, 46, 2098, 40, 2092, 46, 2099, 40, 41, 41, 59, 2100, 40, 2076, 44, 2093, 41, 59, 2093, 46, 2101, 40, 2091, 637, 41, 59, 2090, 46, 2102, 40, 2093, 41, 59, 125, 125, 2016, 46, 2103, 40, 2079, 44, 418, 2015, 40, 2082, 44, 2090, 41, 41, 59, 125, 125, 125, 437, 492, 2104, 40, 2105, 2106, 44, 2107, 2108, 41, 123, 464, 40, 2108, 46, 2109, 40, 41, 41, 123, 328, 2110, 45, 62, 123, 2108, 46, 2111, 40, 2112, 40, 2106, 44, 41, 41, 59, 2108, 46, 2113, 40, 2112, 40, 2106, 44, 44, 1500, 41, 41, 59, 125, 328, 2114, 45, 62, 123, 2108, 46, 2115, 40, 2116, 40, 2106, 44, 41, 41, 59, 2108, 46, 2117, 40, 2116, 40, 2106, 44, 44, 1500, 41, 41, 59, 125, 328, 2118, 45, 62, 2108, 46, 2119, 40, 2120, 40, 2106, 44, 41, 41, 59, 328, 2121, 45, 62, 2108, 46, 2119, 40, 2120, 40, 2106, 44, 41, 41, 59, 328, 2122, 45, 62, 2108, 46, 2119, 40, 2120, 40, 2106, 44, 41, 41, 59, 125, 125, 437, 2009, 2123, 40, 404, 2124, 44, 2046, 2125, 41, 123, 381, 2105, 2106, 61, 2125, 46, 2126, 40, 41, 59, 381, 404, 2127, 61, 2128, 40, 2106, 44, 41, 59, 381, 2129, 2130, 61, 2131, 40, 2106, 44, 2129, 46, 334, 44, 41, 59, 381, 404, 2132, 61, 2128, 40, 2106, 44, 41, 59, 381, 404, 2133, 61, 2128, 40, 2106, 44, 44, 1500, 41, 59, 381, 404, 2134, 61, 2128, 40, 2106, 44, 44, 1501, 41, 59, 450, 418, 2009, 40, 2009, 46, 2135, 40, 2124, 44, 2127, 41, 44, 2130, 44, 2132, 44, 2133, 44, 1500, 44, 2134, 41, 59, 125, 439, 492, 2136, 40, 2137, 2138, 41, 123, 392, 40, 2139, 40, 2138, 41, 41, 123, 450, 59, 125, 385, 40, 2009, 2140, 58, 2012, 41, 123, 404, 2141, 61, 2140, 46, 2142, 40, 41, 59, 464, 40, 2140, 46, 2143, 40, 41, 41, 123, 328, 2144, 58, 123, 381, 2145, 2146, 61, 2138, 46, 2147, 40, 41, 46, 2148, 40, 2141, 41, 59, 392, 40, 2146, 614, 424, 41, 123, 344, 59, 125, 2141, 61, 2146, 46, 2149, 40, 41, 59, 325, 59, 125, 328, 2150, 58, 123, 392, 40, 33, 2138, 46, 2151, 40, 41, 46, 2152, 40, 2141, 41, 41, 123, 344, 59, 125, 325, 59, 125, 328, 2153, 58, 123, 381, 2015, 2154, 61, 2016, 46, 2155, 40, 2141, 41, 59, 392, 40, 2154, 614, 424, 41, 123, 344, 59, 125, 2138, 46, 2156, 40, 2154, 41, 59, 325, 59, 125, 125, 381, 2009, 2157, 61, 418, 2009, 40, 2140, 46, 2158, 40, 41, 44, 2140, 46, 2143, 40, 41, 44, 2141, 44, 2140, 46, 2159, 40, 41, 44, 2140, 46, 2160, 40, 41, 44, 2140, 46, 2161, 40, 41, 41, 59, 2138, 46, 2162, 40, 418, 2163, 40, 2157, 41, 41, 59, 2138, 46, 2164, 40, 2157, 41, 59, 125, 392, 40, 2010, 46, 2165, 40, 2138, 46, 2166, 40, 41, 41, 41, 123, 385, 40, 2009, 2140, 58, 2010, 46, 2167, 40, 2138, 46, 2166, 40, 41, 41, 41, 123, 404, 2168, 61, 2140, 46, 2169, 40, 41, 59, 464, 40, 2140, 46, 2170, 40, 41, 41, 123, 328, 2171, 58, 123, 381, 2172, 2173, 61, 2138, 46, 2174, 40, 41, 46, 2175, 40, 2168, 41, 59, 392, 40, 2173, 614, 424, 41, 123, 344, 59, 125, 2168, 61, 2173, 46, 2176, 40, 41, 59, 325, 59, 125, 328, 2177, 58, 123, 392, 40, 33, 2138, 46, 2178, 40, 41, 46, 2165, 40, 2140, 46, 2169, 40, 41, 41, 41, 123, 344, 59, 125, 325, 59, 125, 328, 2179, 58, 123, 381, 2015, 2180, 61, 2016, 46, 2167, 40, 2168, 41, 59, 392, 40, 2180, 614, 424, 41, 123, 344, 59, 125, 2138, 46, 2181, 40, 2180, 41, 59, 325, 59, 125, 125, 381, 2009, 2182, 61, 418, 2009, 40, 2140, 46, 2183, 40, 41, 44, 2140, 46, 2170, 40, 41, 44, 2168, 44, 2140, 46, 2184, 40, 41, 44, 2140, 46, 2185, 40, 41, 44, 2140, 46, 2186, 40, 41, 41, 59, 2138, 46, 2187, 40, 2182, 41, 59, 125, 125, 125, 439, 457, 2000, 2188, 40, 41, 123, 450, 2189, 46, 2190, 59, 125, 437, 457, 334, 2191, 123, 437, 457, 381, 2000, 2192, 61, 418, 2000, 40, 41, 59, 125, 125]",0.99555844,1
26,26130,Java,"public class Util {

    public static final String STRING_EMPTY = """";
    public static final String SPACE = "" "";
    public static final String[] STRING_ARRAY_EMPTY = new String[0];
    public static final DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss"");
    public static final Predicate<String> ANY_PATTERN = Pattern.compile("".*"").asMatchPredicate();
    public static final int[] INT_ARRAY_EMPTY = new int[0];
    public static final short[] SHORT_ARRAY_EMPTY = new short[0];
    public static final byte[] BYTE_ARRAY_EMPTY = new byte[0];

    private Util() {
        // utility class
    }

    public static boolean isNullOrEmpty(final CharSequence value) {
        return isNull(value) || value.length() == 0;
    }

    public static boolean isNotEmpty(final String value) {
        return nonNull(value) && !value.isBlank();
    }

    public static <T> boolean isNotEmpty(IntMap<T> map) {
        return nonNull(map) && !map.isEmpty();
    }

    public static boolean isNullOrEmpty(final Collection<?> collection) {
        return isNull(collection) || collection.isEmpty();
    }

    public static boolean isNullOrEmpty(int[] data) {
        return isNull(data) || data.length == 0;
    }

    public static <T> boolean isNullOrEmpty(T[] array) {
        return array == null || array.length == 0;
    }

    public static <T> int zeroIfNullOrElse(T obj, ToIntFunction<T> function) {
        return isNull(obj) ? 0 : function.applyAsInt(obj);
    }

    public static <T> long zeroIfNullOrElseLong(T obj, ToLongFunction<T> function) {
        return  isNull(obj) ? 0 : function.applyAsLong(obj);
    }

    public static <T> boolean falseIfNullOrElse(T obj, Predicate<T> predicate) {
        return nonNull(obj) && predicate.test(obj);
    }

    public static <T> String emptyIfNullOrElse(T obj, Function<T, String> function) {
        return isNull(obj) ? STRING_EMPTY : function.apply(obj);
    }

    public static <T, R> R computeIfNonNull(T obj, Function<T, R> function) {
        return isNull(obj) ? null : function.apply(obj);
    }

    public static <T> void doIfNonNull(T obj, Consumer<T> action) {
        if(nonNull(obj)) {
            action.accept(obj);
        }
    }

    public static boolean contains(int[] array, int obj) {
        for (int element : array) {
            if (element == obj) {
                return true;
            }
        }
        return false;
    }

    public static <T> boolean contains(T[] array, T obj) {
        for (var element : array) {
            if(Objects.equals(element, obj)) {
                return true;
            }
        }
        return false;
    }

    public static String hash(final String value) throws NoSuchAlgorithmException {
        var md = MessageDigest.getInstance(CommonSettings.hashAlgorithm());
        byte[] raw = value.getBytes(StandardCharsets.UTF_8);
        return Base64.getEncoder().encodeToString(md.digest(raw));
    }

    public static int hashIp(String ip)  {
        final String[] rawByte = ip.split(""\\."");
        final int[] rawIp = new int[4];
        for (int i = 0; i < 4; i++) {
            rawIp[i] = Integer.parseInt(rawByte[i]);
        }

        return rawIp[0] | (rawIp[1] << 8) | (rawIp[2] << 16) | (rawIp[3] << 24);
    }

    public static boolean isDigit(String text) {
        if (isNullOrEmpty(text)) {
            return false;
        }
        for (char c : text.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    public static boolean isFloat(final String value) {
        return isNumeric(value, true);
    }

    public static boolean isInteger(final String value) {
        return isNumeric(value, false);
    }

    private static boolean isNumeric(final String value, boolean includePoint) {
        if(isNullOrEmpty(value)) {
            return false;
        }

        if(value.charAt(value.length() -1) == '.' && !includePoint) {
            return false;
        }

        var beginIndex = 0;
        if(value.charAt(0) == '-') {
            if(value.length() == 1) {
                return false;
            }
            beginIndex = 1;
        }

        return checkNumeric(value, includePoint, beginIndex);
    }

    private static boolean checkNumeric(String value, boolean includePoint, int beginIndex) {
        var points = 0;

        for(var i = beginIndex; i < value.length(); i++) {
            var character = value.charAt(i);
            final var isPoint = character == '.';
            if(isPoint) {
                if(!includePoint) {
                    return false;
                }
                points++;
            }

            if(points > 1) {
                return false;
            }

            if(!isPoint && !Character.isDigit(character)) {
                return false;
            }
        }
        return true;
    }

    public static boolean isAlphaNumeric(String text) {
        if (isNullOrEmpty(text)) {
            return false;
        }
        for (char c : text.toCharArray()) {
            if (!Character.isLetterOrDigit(c)) {
                return false;
            }
        }
        return true;
    }

    public static List<Field> fieldsOf(final Class<?> classToSearch) {
        List<Field> fields = new ArrayList<>();
        Class<?> searchClass = classToSearch;
        while (nonNull(searchClass)) {
            fields.addAll(Stream.of(searchClass.getDeclaredFields()).collect(Collectors.toList()));
            searchClass = searchClass.getSuperclass();
        }
        return fields;
    }

    public static Field findField(final Class<?> classToSearch, String fieldName) {
        Class<?> searchClass = classToSearch;
        Field field = null;
        while (nonNull(searchClass)) {
            try {
                field = searchClass.getDeclaredField(fieldName);
                break;
            } catch (NoSuchFieldException e) {
                searchClass = searchClass.getSuperclass();
            }
        }
        return field;
    }


    public static boolean isAnyNull(Object... objects) {
        for (Object object : objects) {
            if(isNull(object)) {
                return true;
            }
        }
        return false;
    }

    public static int parseNextInt(StringTokenizer st, int defaultVal) {
        if (st.hasMoreTokens()) {
            final String token = st.nextToken();
            if (isInteger(token)) {
                return Integer.parseInt(token);
            }
        }
        return defaultVal;
    }

    public static boolean isBetween(int number, int min, int max) {
        return  number >= min && number <= max;
    }

    public static boolean isNotEmpty(IntCollection collection) {
        return nonNull(collection) && collection.size() > 0;
    }

    public static LocalDateTime parseLocalDateTime(String dateTimeString) {
        if (dateTimeString.length() > 10) {
            return LocalDateTime.parse(dateTimeString, DEFAULT_DATE_TIME_FORMATTER);
        } else {
            return LocalDate.parse(dateTimeString, DateTimeFormatter.ISO_LOCAL_DATE).atStartOfDay();
        }
    }

    public static String formatDate(LocalDateTime dateTime) {
        return dateTime.format(DateTimeFormatter.ISO_DATE);
    }

    public static String formatDateTime(LocalDateTime dateTime) {
        return dateTime.format(DEFAULT_DATE_TIME_FORMATTER);
    }

    public static String formatDateTime(long epochMilli) {
        return  DEFAULT_DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(epochMilli).atZone(ZoneId.systemDefault()));
    }
}",1,"[439, 334, 2000, 123, 439, 457, 381, 2001, 2002, 61, 59, 439, 457, 381, 2001, 2003, 61, 59, 439, 457, 381, 2001, 91, 93, 2004, 61, 418, 2001, 91, 1500, 93, 59, 439, 457, 381, 2005, 2006, 61, 2005, 46, 2007, 40, 41, 59, 439, 457, 381, 2008, 60, 2001, 62, 2009, 61, 2010, 46, 2011, 40, 41, 46, 2012, 40, 41, 59, 439, 457, 381, 404, 91, 93, 2013, 61, 418, 404, 91, 1500, 93, 59, 439, 457, 381, 453, 91, 93, 2014, 61, 418, 453, 91, 1500, 93, 59, 439, 457, 381, 326, 91, 93, 2015, 61, 418, 326, 91, 1500, 93, 59, 437, 2000, 40, 41, 123, 125, 439, 457, 324, 2016, 40, 381, 2017, 2018, 41, 123, 450, 2019, 40, 2018, 41, 606, 2018, 46, 2020, 40, 41, 614, 1500, 59, 125, 439, 457, 324, 2021, 40, 381, 2001, 2018, 41, 123, 450, 2022, 40, 2018, 41, 605, 33, 2018, 46, 2023, 40, 41, 59, 125, 439, 457, 60, 2024, 62, 324, 2021, 40, 2025, 60, 2024, 62, 2026, 41, 123, 450, 2027, 40, 2026, 41, 605, 33, 2026, 46, 2028, 40, 41, 59, 125, 439, 457, 324, 2016, 40, 381, 2029, 60, 63, 62, 2030, 41, 123, 450, 2031, 40, 2030, 41, 606, 2030, 46, 2032, 40, 41, 59, 125, 439, 457, 324, 2016, 40, 404, 91, 93, 2033, 41, 123, 450, 2034, 40, 2033, 41, 606, 2033, 46, 2035, 614, 1500, 59, 125, 439, 457, 60, 2024, 62, 324, 2016, 40, 2024, 91, 93, 310, 41, 123, 450, 310, 614, 424, 606, 310, 46, 2036, 614, 1500, 59, 125, 439, 457, 60, 2024, 62, 404, 2037, 40, 2024, 2038, 44, 2039, 60, 2024, 62, 389, 41, 123, 450, 2040, 40, 2038, 41, 63, 1500, 58, 389, 46, 2041, 40, 2038, 41, 59, 125, 439, 457, 60, 2024, 62, 413, 2042, 40, 2024, 2038, 44, 2043, 60, 2024, 62, 389, 41, 123, 450, 2044, 40, 2038, 41, 63, 1500, 58, 389, 46, 2045, 40, 2038, 41, 59, 125, 439, 457, 60, 2024, 62, 324, 2046, 40, 2024, 2038, 44, 2008, 60, 2024, 62, 2047, 41, 123, 450, 2048, 40, 2038, 41, 605, 2047, 46, 2049, 40, 2038, 41, 59, 125, 439, 457, 60, 2024, 62, 2001, 2050, 40, 2024, 2038, 44, 2051, 60, 2024, 44, 2001, 62, 389, 41, 123, 450, 2052, 40, 2038, 41, 63, 2002, 58, 389, 46, 2053, 40, 2038, 41, 59, 125, 439, 457, 60, 2024, 44, 2054, 62, 2054, 2055, 40, 2024, 2038, 44, 2051, 60, 2024, 44, 2054, 62, 389, 41, 123, 450, 2056, 40, 2038, 41, 63, 424, 58, 389, 46, 2057, 40, 2038, 41, 59, 125, 439, 457, 60, 2024, 62, 492, 2058, 40, 2024, 2038, 44, 2059, 60, 2024, 62, 2060, 41, 123, 392, 40, 2061, 40, 2038, 41, 41, 123, 2060, 46, 2062, 40, 2038, 41, 59, 125, 125, 439, 457, 324, 2063, 40, 404, 91, 93, 310, 44, 404, 2038, 41, 123, 385, 40, 404, 2064, 58, 310, 41, 123, 392, 40, 2064, 614, 2038, 41, 123, 450, 473, 59, 125, 125, 450, 380, 59, 125, 439, 457, 60, 2024, 62, 324, 2063, 40, 2024, 91, 93, 310, 44, 2024, 2038, 41, 123, 385, 40, 490, 2065, 58, 310, 41, 123, 392, 40, 2066, 46, 2067, 40, 2065, 44, 2038, 41, 41, 123, 450, 473, 59, 125, 125, 450, 380, 59, 125, 439, 457, 2001, 2068, 40, 381, 2001, 2018, 41, 470, 2069, 123, 490, 2070, 61, 2071, 46, 2072, 40, 2073, 46, 2074, 40, 41, 41, 59, 326, 91, 93, 2075, 61, 2018, 46, 2076, 40, 2077, 46, 2078, 41, 59, 450, 2079, 46, 2080, 40, 41, 46, 2081, 40, 2070, 46, 2082, 40, 2075, 41, 41, 59, 125, 439, 457, 404, 2083, 40, 2001, 2084, 41, 123, 381, 2001, 91, 93, 2085, 61, 2084, 46, 2086, 40, 41, 59, 381, 404, 91, 93, 2087, 61, 418, 404, 91, 1502, 93, 59, 385, 40, 404, 2088, 61, 1500, 59, 2088, 60, 1502, 59, 2088, 637, 41, 123, 2087, 91, 2088, 93, 61, 2089, 46, 2090, 40, 2085, 91, 2088, 93, 41, 59, 125, 450, 2087, 91, 1500, 93, 124, 40, 2087, 91, 1501, 93, 622, 1502, 41, 124, 40, 2087, 91, 1502, 93, 622, 1503, 41, 124, 40, 2087, 91, 1502, 93, 622, 1503, 41, 59, 125, 439, 457, 324, 2091, 40, 2001, 2092, 41, 123, 392, 40, 2016, 40, 2092, 41, 41, 123, 450, 380, 59, 125, 385, 40, 330, 2093, 58, 2092, 46, 2094, 40, 41, 41, 123, 392, 40, 33, 2095, 46, 2091, 40, 2093, 41, 41, 123, 450, 380, 59, 125, 125, 450, 473, 59, 125, 439, 457, 324, 2096, 40, 381, 2001, 2018, 41, 123, 450, 2097, 40, 2018, 44, 473, 41, 59, 125, 439, 457, 324, 2098, 40, 381, 2001, 2018, 41, 123, 450, 2099, 40, 2018, 44, 380, 41, 59, 125, 437, 457, 324, 2100, 40, 381, 2001, 2018, 44, 324, 2101, 41, 123, 392, 40, 2016, 40, 2018, 41, 41, 123, 450, 380, 59, 125, 392, 40, 2018, 46, 2102, 40, 2018, 46, 2103, 40, 41, 45, 1501, 41, 614, 607, 605, 33, 2101, 41, 123, 450, 380, 59, 125, 490, 2104, 61, 1500, 59, 392, 40, 2018, 46, 2102, 40, 1500, 41, 614, 607, 41, 123, 392, 40, 2018, 46, 2103, 40, 41, 614, 1501, 41, 123, 450, 380, 59, 125, 2104, 61, 1501, 59, 125, 450, 2105, 40, 2018, 44, 2101, 44, 2104, 41, 59, 125, 437, 457, 324, 2106, 40, 2001, 2018, 44, 324, 2101, 44, 404, 2107, 41, 123, 490, 2108, 61, 1500, 59, 385, 40, 490, 2109, 61, 2107, 59, 2109, 60, 2018, 46, 2110, 40, 41, 59, 2109, 637, 41, 123, 490, 2111, 61, 2018, 46, 2112, 40, 2109, 41, 59, 381, 490, 2113, 61, 2111, 614, 607, 59, 392, 40, 2113, 41, 123, 392, 40, 33, 2101, 41, 123, 450, 380, 59, 125, 2108, 637, 59, 125, 392, 40, 2108, 62, 1501, 41, 123, 450, 380, 59, 125, 392, 40, 33, 2113, 605, 33, 2114, 46, 2091, 40, 2111, 41, 41, 123, 450, 380, 59, 125, 125, 450, 473, 59, 125, 439, 457, 324, 2115, 40, 2001, 2092, 41, 123, 392, 40, 2016, 40, 2092, 41, 41, 123, 450, 380, 59, 125, 385, 40, 330, 2116, 58, 2092, 46, 2117, 40, 41, 41, 123, 392, 40, 33, 2118, 46, 2119, 40, 2116, 41, 41, 123, 450, 380, 59, 125, 125, 450, 473, 59, 125, 439, 457, 2120, 60, 2121, 62, 2122, 40, 381, 2123, 60, 63, 62, 2124, 41, 123, 2120, 60, 2121, 62, 2125, 61, 418, 2126, 60, 62, 40, 41, 59, 2123, 60, 63, 62, 2127, 61, 2124, 59, 496, 40, 2128, 40, 2127, 41, 41, 123, 2125, 46, 2129, 40, 2130, 46, 2131, 40, 2127, 46, 2132, 40, 41, 41, 46, 2133, 40, 2134, 46, 2135, 40, 41, 41, 41, 59, 2127, 61, 2127, 46, 2136, 40, 41, 59, 125, 450, 2125, 59, 125, 439, 457, 2121, 2137, 40, 381, 2123, 60, 63, 62, 2124, 44, 2001, 2138, 41, 123, 2123, 60, 63, 62, 2139, 61, 2124, 59, 2121, 2140, 61, 424, 59, 496, 40, 2141, 40, 2139, 41, 41, 123, 474, 123, 2140, 61, 2139, 46, 2142, 40, 2138, 41, 59, 325, 59, 125, 329, 40, 2143, 2144, 41, 123, 2139, 61, 2139, 46, 2145, 40, 41, 59, 125, 125, 450, 2140, 59, 125, 439, 457, 324, 2146, 40, 2147, 613, 2148, 41, 123, 385, 40, 2147, 426, 58, 2148, 41, 123, 392, 40, 2149, 40, 426, 41, 41, 123, 450, 473, 59, 125, 125, 450, 380, 59, 125, 439, 457, 404, 2150, 40, 2151, 2152, 44, 404, 2153, 41, 123, 392, 40, 2152, 46, 2154, 40, 41, 41, 123, 381, 2001, 2155, 61, 2152, 46, 2156, 40, 41, 59, 392, 40, 2098, 40, 2155, 41, 41, 123, 450, 2157, 46, 2158, 40, 2155, 41, 59, 125, 125, 450, 2153, 59, 125, 439, 457, 324, 2159, 40, 404, 2160, 44, 404, 2161, 44, 404, 2162, 41, 123, 450, 2160, 615, 2161, 605, 2160, 620, 2162, 59, 125, 439, 457, 324, 2021, 40, 2163, 2030, 41, 123, 450, 2164, 40, 2030, 41, 605, 2030, 46, 2165, 40, 41, 62, 1500, 59, 125, 439, 457, 2166, 2167, 40, 2001, 2168, 41, 123, 392, 40, 2168, 46, 2169, 40, 41, 62, 1502, 41, 123, 450, 2166, 46, 2170, 40, 2168, 44, 2006, 41, 59, 125, 360, 123, 450, 2171, 46, 2172, 40, 2168, 44, 2005, 46, 2173, 41, 46, 2174, 40, 41, 59, 125, 125, 439, 457, 2001, 2175, 40, 2166, 2176, 41, 123, 450, 2176, 46, 2177, 40, 2005, 46, 2178, 41, 59, 125, 439, 457, 2001, 2179, 40, 2166, 2176, 41, 123, 450, 2176, 46, 2180, 40, 2006, 41, 59, 125, 439, 457, 2001, 2179, 40, 413, 2181, 41, 123, 450, 2006, 46, 2182, 40, 2183, 46, 2184, 40, 2181, 41, 46, 2185, 40, 2186, 46, 2187, 40, 41, 41, 41, 59, 125, 125]",0.998108,1
27,29352,Java,"	public static final class SingularData {
		private final EclipseNode annotation;
		private final char[] singularName;
		private final char[] pluralName;
		private final char[] setterPrefix;
		private final List<TypeReference> typeArgs;
		private final String targetFqn;
		private final EclipseSingularizer singularizer;
		private final boolean ignoreNullCollections;
		private final ASTNode source;
		
		public SingularData(EclipseNode annotation, char[] singularName, char[] pluralName, List<TypeReference> typeArgs, String targetFqn, EclipseSingularizer singularizer, ASTNode source, boolean ignoreNullCollections) {
			this(annotation, singularName, pluralName, typeArgs, targetFqn, singularizer, source, ignoreNullCollections, new char[0]);
		}
		
		public SingularData(EclipseNode annotation, char[] singularName, char[] pluralName, List<TypeReference> typeArgs, String targetFqn, EclipseSingularizer singularizer, ASTNode source, boolean ignoreNullCollections, char[] setterPrefix) {
			this.annotation = annotation;
			this.singularName = singularName;
			this.pluralName = pluralName;
			this.typeArgs = typeArgs;
			this.targetFqn = targetFqn;
			this.singularizer = singularizer;
			this.source = source;
			this.ignoreNullCollections = ignoreNullCollections;
			this.setterPrefix = setterPrefix;
		}
		
		public void setGeneratedByRecursive(ASTNode target) {
			SetGeneratedByVisitor visitor = new SetGeneratedByVisitor(source);
			
			if (target instanceof AbstractMethodDeclaration) {
				((AbstractMethodDeclaration) target).traverse(visitor, (ClassScope) null);
			} else if (target instanceof FieldDeclaration) {
				((FieldDeclaration) target).traverse(visitor, (MethodScope) null);
			} else {
				target.traverse(visitor, null);
			}
		}
		
		public ASTNode getSource() {
			return source;
		}
		
		public EclipseNode getAnnotation() {
			return annotation;
		}
		
		public char[] getSingularName() {
			return singularName;
		}
		
		public char[] getPluralName() {
			return pluralName;
		}
		
		public char[] getSetterPrefix() {
			return setterPrefix;
		}
		
		public List<TypeReference> getTypeArgs() {
			return typeArgs;
		}
		
		public String getTargetFqn() {
			return targetFqn;
		}
		
		public EclipseSingularizer getSingularizer() {
			return singularizer;
		}
		
		public boolean isIgnoreNullCollections() {
			return ignoreNullCollections;
		}
		
		public String getTargetSimpleType() {
			int idx = targetFqn.lastIndexOf(""."");
			return idx == -1 ? targetFqn : targetFqn.substring(idx + 1);
		}
	}",1,"[439, 457, 381, 334, 2000, 123, 437, 381, 2001, 2002, 59, 437, 381, 330, 91, 93, 2003, 59, 437, 381, 330, 91, 93, 2004, 59, 437, 381, 330, 91, 93, 2005, 59, 437, 381, 2006, 60, 2007, 62, 2008, 59, 437, 381, 2009, 2010, 59, 437, 381, 2011, 2012, 59, 437, 381, 324, 2013, 59, 437, 381, 2014, 2015, 59, 439, 2000, 40, 2001, 2002, 44, 330, 91, 93, 2003, 44, 330, 91, 93, 2004, 44, 2006, 60, 2007, 62, 2008, 44, 2009, 2010, 44, 2011, 2012, 44, 2014, 2015, 44, 324, 2013, 41, 123, 467, 40, 2002, 44, 2003, 44, 2004, 44, 2008, 44, 2010, 44, 2012, 44, 2015, 44, 2013, 44, 418, 330, 91, 1500, 93, 41, 59, 125, 439, 2000, 40, 2001, 2002, 44, 330, 91, 93, 2003, 44, 330, 91, 93, 2004, 44, 2006, 60, 2007, 62, 2008, 44, 2009, 2010, 44, 2011, 2012, 44, 2014, 2015, 44, 324, 2013, 44, 330, 91, 93, 2005, 41, 123, 467, 46, 2002, 61, 2002, 59, 467, 46, 2003, 61, 2003, 59, 467, 46, 2004, 61, 2004, 59, 467, 46, 2008, 61, 2008, 59, 467, 46, 2010, 61, 2010, 59, 467, 46, 2012, 61, 2012, 59, 467, 46, 2015, 61, 2015, 59, 467, 46, 2013, 61, 2013, 59, 467, 46, 2005, 61, 2005, 59, 125, 439, 492, 2016, 40, 2014, 2017, 41, 123, 2018, 2019, 61, 418, 2018, 40, 2015, 41, 59, 392, 40, 2017, 402, 2020, 41, 123, 40, 40, 2020, 41, 2017, 41, 46, 2021, 40, 2019, 44, 40, 2022, 41, 424, 41, 59, 125, 360, 392, 40, 2017, 402, 2023, 41, 123, 40, 40, 2023, 41, 2017, 41, 46, 2024, 40, 2019, 44, 40, 2025, 41, 424, 41, 59, 125, 360, 123, 2017, 46, 2026, 40, 2019, 44, 424, 41, 59, 125, 125, 439, 2014, 2027, 40, 41, 123, 450, 2015, 59, 125, 439, 2001, 2028, 40, 41, 123, 450, 2002, 59, 125, 439, 330, 91, 93, 2029, 40, 41, 123, 450, 2003, 59, 125, 439, 330, 91, 93, 2030, 40, 41, 123, 450, 2004, 59, 125, 439, 330, 91, 93, 2031, 40, 41, 123, 450, 2005, 59, 125, 439, 2006, 60, 2007, 62, 2032, 40, 41, 123, 450, 2008, 59, 125, 439, 2009, 2033, 40, 41, 123, 450, 2010, 59, 125, 439, 2011, 2034, 40, 41, 123, 450, 2012, 59, 125, 439, 324, 2035, 40, 41, 123, 450, 2013, 59, 125, 439, 2009, 2036, 40, 41, 123, 404, 2037, 61, 2010, 46, 2038, 40, 41, 59, 450, 2037, 614, 45, 1501, 63, 2010, 58, 2010, 46, 2039, 40, 2037, 43, 1501, 41, 59, 125, 125]",0.065812685,0
28,3979,Java,"@Slf4j
public class PeerInfoWithTagEditor extends Overlay<PeerInfoWithTagEditor> {
    private final boolean useDevPrivilegeKeys;
    private InputTextField inputTextField;
    private Point2D position;
    private static PeerInfoWithTagEditor INSTANCE;
    private Consumer<String> saveHandler;
    private String hostName;
    private int numTrades;
    private ChangeListener<Boolean> focusListener;
    private final PrivateNotificationManager privateNotificationManager;
    @Nullable
    private final TradeModel tradeModel;
    private final Offer offer;
    private final Preferences preferences;
    private EventHandler<KeyEvent> keyEventEventHandler;
    @Nullable
    private String accountAge;
    private String accountAgeInfo;
    @Nullable
    private String accountSigningState;
    @Nullable
    private String signAge;
    @Nullable
    private String signAgeInfo;

    public PeerInfoWithTagEditor(PrivateNotificationManager privateNotificationManager,
                                 @Nullable TradeModel tradeModel,
                                 Offer offer,
                                 Preferences preferences,
                                 boolean useDevPrivilegeKeys) {
        this.privateNotificationManager = privateNotificationManager;
        this.tradeModel = tradeModel;
        this.offer = offer;
        this.preferences = preferences;
        this.useDevPrivilegeKeys = useDevPrivilegeKeys;
        width = 468;
        type = Type.Undefined;
        if (INSTANCE != null)
            INSTANCE.hide();
        INSTANCE = this;
    }

    public PeerInfoWithTagEditor onSave(Consumer<String> saveHandler) {
        this.saveHandler = saveHandler;
        return this;
    }

    public PeerInfoWithTagEditor position(Point2D position) {
        this.position = position;
        return this;
    }

    public PeerInfoWithTagEditor fullAddress(String hostName) {
        this.hostName = hostName;
        return this;
    }

    public PeerInfoWithTagEditor accountAge(@Nullable String accountAge) {
        this.accountAge = accountAge;
        return this;
    }

    public PeerInfoWithTagEditor accountAgeInfo(String accountAgeInfo) {
        this.accountAgeInfo = accountAgeInfo;
        return this;
    }

    public PeerInfoWithTagEditor signAge(@Nullable String signAge) {
        this.signAge = signAge;
        return this;
    }

    public PeerInfoWithTagEditor signAgeInfo(String signAgeInfo) {
        this.signAgeInfo = signAgeInfo;
        return this;
    }

    public PeerInfoWithTagEditor accountSigningState(@Nullable String accountSigningState) {
        this.accountSigningState = accountSigningState;
        return this;
    }

    public PeerInfoWithTagEditor numTrades(int numTrades) {
        this.numTrades = numTrades;
        if (numTrades == 0)
            width = 568;
        return this;
    }

    @Override
    public void show() {
        headLine(Res.get(""peerInfo.title""));
        actionButtonText(Res.get(""shared.save""));
        createGridPane();
        addHeadLine();
        addContent();
        addButtons();
        applyStyles();
        onShow();
    }

    @Override
    protected void onShow() {
        super.display();

        if (stage != null) {
            focusListener = (observable, oldValue, newValue) -> {
                if (!newValue)
                    hide();
            };
            stage.focusedProperty().addListener(focusListener);

            Scene scene = stage.getScene();
            if (scene != null)
                scene.addEventHandler(KeyEvent.KEY_RELEASED, keyEventEventHandler);
        }
    }

    @Override
    public void hide() {
        animateHide();
    }

    @Override
    protected void onHidden() {
        INSTANCE = null;

        if (stage != null) {
            if (focusListener != null)
                stage.focusedProperty().removeListener(focusListener);

            Scene scene = stage.getScene();
            if (scene != null)
                scene.removeEventHandler(KeyEvent.KEY_RELEASED, keyEventEventHandler);
        }
    }

    private void addContent() {
        gridPane.setPadding(new Insets(64));

        final Tuple3<Label, TextField, VBox> onionTuple = addCompactTopLabelTextField(gridPane, ++rowIndex, Res.get(""shared.onionAddress""), hostName);
        GridPane.setColumnSpan(onionTuple.third, 2);
        onionTuple.second.setMouseTransparent(false);

        GridPane.setColumnSpan(addCompactTopLabelTextField(gridPane, ++rowIndex,
                Res.get(""peerInfo.nrOfTrades""),
                numTrades > 0 ? String.valueOf(numTrades) : Res.get(""peerInfo.notTradedYet"")).third, 2);

        if (accountAge != null) {
            GridPane.setColumnSpan(addCompactTopLabelTextField(gridPane, ++rowIndex, accountAgeInfo, accountAge).third, 2);
        }

        if (accountSigningState != null) {
            GridPane.setColumnSpan(addCompactTopLabelTextField(gridPane, ++rowIndex, Res.get(""shared.accountSigningState""), accountSigningState).third, 2);
        }

        if (signAge != null) {
            GridPane.setColumnSpan(addCompactTopLabelTextField(gridPane, ++rowIndex, signAgeInfo, signAge).third, 2);
        }


        inputTextField = addInputTextField(gridPane, ++rowIndex, Res.get(""peerInfo.setTag""));
        GridPane.setColumnSpan(inputTextField, 2);
        Map<String, String> peerTagMap = preferences.getPeerTagMap();
        String tag = peerTagMap.getOrDefault(hostName, """");
        inputTextField.setText(tag);

        keyEventEventHandler = event -> {
            if (Utilities.isAltOrCtrlPressed(KeyCode.R, event)) {
                // We need to close first our current popup and the open delayed the new one,
                // otherwise the text input handler does not work.
                doClose();
                UserThread.runAfter(() -> {
                    PubKeyRing peersPubKeyRing = null;
                    if (tradeModel != null) {
                        peersPubKeyRing = tradeModel.getTradeProtocolModel().getTradePeer().getPubKeyRing();
                    } else if (offer != null) {
                        peersPubKeyRing = offer.getPubKeyRing();
                    }
                    if (peersPubKeyRing != null) {
                        new SendPrivateNotificationWindow(
                                privateNotificationManager,
                                peersPubKeyRing,
                                offer.getMakerNodeAddress(),
                                useDevPrivilegeKeys
                        ).show();
                    }
                }, 100, TimeUnit.MILLISECONDS);
            }
        };
    }

    @Override
    protected void addHeadLine() {
        super.addHeadLine();
        GridPane.setHalignment(headLineLabel, HPos.CENTER);
    }

    protected void setupKeyHandler(Scene scene) {
        scene.setOnKeyPressed(e -> {
            if (e.getCode() == KeyCode.ESCAPE) {
                e.consume();
                doClose();
            }
            if (e.getCode() == KeyCode.ENTER) {
                e.consume();
                save();
            }
        });
    }

    @Override
    protected void animateHide(Runnable onFinishedHandler) {
        if (GlobalSettings.getUseAnimations()) {
            double duration = getDuration(300);
            Interpolator interpolator = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);

            gridPane.setRotationAxis(Rotate.X_AXIS);
            Camera camera = gridPane.getScene().getCamera();
            gridPane.getScene().setCamera(new PerspectiveCamera());

            Timeline timeline = new Timeline();
            ObservableList<KeyFrame> keyFrames = timeline.getKeyFrames();
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(gridPane.rotateProperty(), 0, interpolator),
                    new KeyValue(gridPane.opacityProperty(), 1, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(gridPane.rotateProperty(), -90, interpolator),
                    new KeyValue(gridPane.opacityProperty(), 0, interpolator)
            ));
            timeline.setOnFinished(event -> {
                gridPane.setRotate(0);
                gridPane.setRotationAxis(Rotate.Z_AXIS);
                gridPane.getScene().setCamera(camera);
                onFinishedHandler.run();
            });
            timeline.play();
        } else {
            onFinishedHandler.run();
        }
    }

    @Override
    protected void animateDisplay() {
        if (GlobalSettings.getUseAnimations()) {
            double startY = -160;
            double duration = getDuration(400);
            Interpolator interpolator = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);
            Timeline timeline = new Timeline();
            ObservableList<KeyFrame> keyFrames = timeline.getKeyFrames();
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(gridPane.opacityProperty(), 0, interpolator),
                    new KeyValue(gridPane.translateYProperty(), startY, interpolator)
            ));

            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(gridPane.opacityProperty(), 1, interpolator),
                    new KeyValue(gridPane.translateYProperty(), 0, interpolator)
            ));

            timeline.play();
        }
    }

    @Override
    protected void createGridPane() {
        super.createGridPane();
        gridPane.setPadding(new Insets(15, 15, 30, 30));
    }

    @Override
    protected void addButtons() {
        buttonDistance = 10;
        super.addButtons();

        actionButton.setOnAction(event -> save());
    }

    private void save() {
        hide();
        if (saveHandler != null && inputTextField != null)
            saveHandler.accept(inputTextField.getText());
    }

    @Override
    protected void applyStyles() {
        gridPane.getStyleClass().add(""peer-info-popup-bg"");
        if (headLineLabel != null)
            headLineLabel.getStyleClass().add(""peer-info-popup-headline"");
    }

    @Override
    protected void setModality() {
        stage.initOwner(owner.getScene().getWindow());
        stage.initModality(Modality.NONE);
    }

    @Override
    protected void layout() {
        Window window = owner.getScene().getWindow();
        stage.setX(Math.round(window.getX() + position.getX() - width));
        stage.setY(Math.round(window.getY() + position.getY()));
    }

    @Override
    protected void addEffectToBackground() {
    }

    @Override
    protected void removeEffectFromBackground() {
    }
}",1,"[64, 2000, 439, 334, 2001, 378, 2002, 60, 2001, 62, 123, 437, 381, 324, 2003, 59, 437, 2004, 2005, 59, 437, 2006, 2007, 59, 437, 457, 2001, 2008, 59, 437, 2009, 60, 2010, 62, 2011, 59, 437, 2010, 2012, 59, 437, 404, 2013, 59, 437, 2014, 60, 2015, 62, 2016, 59, 437, 381, 2017, 2018, 59, 64, 2019, 437, 381, 2020, 2021, 59, 437, 381, 2022, 2023, 59, 437, 381, 2024, 2025, 59, 437, 2026, 60, 2027, 62, 2028, 59, 64, 2019, 437, 2010, 2029, 59, 437, 2010, 2030, 59, 64, 2019, 437, 2010, 2031, 59, 64, 2019, 437, 2010, 2032, 59, 64, 2019, 437, 2010, 2033, 59, 439, 2001, 40, 2017, 2018, 44, 64, 2019, 2020, 2021, 44, 2022, 2023, 44, 2024, 2025, 44, 324, 2003, 41, 123, 467, 46, 2018, 61, 2018, 59, 467, 46, 2021, 61, 2021, 59, 467, 46, 2023, 61, 2023, 59, 467, 46, 2025, 61, 2025, 59, 467, 46, 2003, 61, 2003, 59, 2034, 61, 1504, 59, 2035, 61, 2036, 46, 2037, 59, 392, 40, 2008, 631, 424, 41, 2008, 46, 2038, 40, 41, 59, 2008, 61, 467, 59, 125, 439, 2001, 2039, 40, 2009, 60, 2010, 62, 2011, 41, 123, 467, 46, 2011, 61, 2011, 59, 450, 467, 59, 125, 439, 2001, 2007, 40, 2006, 2007, 41, 123, 467, 46, 2007, 61, 2007, 59, 450, 467, 59, 125, 439, 2001, 2040, 40, 2010, 2012, 41, 123, 467, 46, 2012, 61, 2012, 59, 450, 467, 59, 125, 439, 2001, 2029, 40, 64, 2019, 2010, 2029, 41, 123, 467, 46, 2029, 61, 2029, 59, 450, 467, 59, 125, 439, 2001, 2030, 40, 2010, 2030, 41, 123, 467, 46, 2030, 61, 2030, 59, 450, 467, 59, 125, 439, 2001, 2032, 40, 64, 2019, 2010, 2032, 41, 123, 467, 46, 2032, 61, 2032, 59, 450, 467, 59, 125, 439, 2001, 2033, 40, 2010, 2033, 41, 123, 467, 46, 2033, 61, 2033, 59, 450, 467, 59, 125, 439, 2001, 2031, 40, 64, 2019, 2010, 2031, 41, 123, 467, 46, 2031, 61, 2031, 59, 450, 467, 59, 125, 439, 2001, 2013, 40, 404, 2013, 41, 123, 467, 46, 2013, 61, 2013, 59, 392, 40, 2013, 614, 1500, 41, 2041, 61, 1504, 59, 450, 467, 59, 125, 64, 2042, 439, 492, 2043, 40, 41, 123, 2044, 40, 2045, 46, 2046, 40, 41, 41, 59, 2047, 40, 2045, 46, 2046, 40, 41, 41, 59, 2048, 40, 41, 59, 2049, 40, 41, 59, 2050, 40, 41, 59, 2051, 40, 41, 59, 2052, 40, 41, 59, 2053, 40, 41, 59, 125, 64, 2042, 438, 492, 2054, 40, 41, 123, 463, 46, 2055, 40, 41, 59, 392, 40, 2056, 631, 424, 41, 123, 2016, 61, 40, 2057, 44, 2058, 44, 2059, 41, 45, 62, 123, 392, 40, 33, 2059, 41, 2060, 40, 41, 59, 125, 59, 2056, 46, 2061, 40, 41, 46, 2062, 40, 2016, 41, 59, 2063, 2064, 61, 2056, 46, 2065, 40, 41, 59, 392, 40, 2064, 631, 424, 41, 2064, 46, 2066, 40, 2027, 46, 2067, 44, 2028, 41, 59, 125, 125, 64, 2042, 439, 492, 2068, 40, 41, 123, 2069, 40, 41, 59, 125, 64, 2042, 438, 492, 2070, 40, 41, 123, 2008, 61, 424, 59, 392, 40, 2071, 631, 424, 41, 123, 392, 40, 2016, 631, 424, 41, 2071, 46, 2072, 40, 41, 46, 2073, 40, 2016, 41, 59, 2074, 2075, 61, 2071, 46, 2076, 40, 41, 59, 392, 40, 2075, 631, 424, 41, 2075, 46, 2077, 40, 2027, 46, 2078, 44, 2028, 41, 59, 125, 125, 437, 492, 2079, 40, 41, 123, 2080, 46, 2081, 40, 418, 2082, 40, 1503, 41, 41, 59, 381, 2083, 60, 2084, 44, 2085, 44, 2086, 62, 2087, 61, 2088, 40, 2080, 44, 637, 2089, 44, 2090, 46, 2091, 40, 41, 44, 2012, 41, 59, 2092, 46, 2093, 40, 2087, 46, 2094, 44, 1502, 41, 59, 2087, 46, 2095, 46, 2096, 40, 380, 41, 59, 2092, 46, 2093, 40, 2088, 40, 2080, 44, 637, 2089, 44, 2090, 46, 2091, 40, 41, 44, 2013, 62, 1500, 63, 2010, 46, 2097, 40, 2013, 41, 58, 2090, 46, 2091, 40, 41, 41, 46, 2094, 44, 1502, 41, 59, 392, 40, 2029, 631, 424, 41, 123, 2092, 46, 2093, 40, 2088, 40, 2080, 44, 637, 2089, 44, 2030, 44, 2029, 41, 46, 2094, 44, 1502, 41, 59, 125, 392, 40, 2031, 631, 424, 41, 123, 2092, 46, 2093, 40, 2088, 40, 2080, 44, 637, 2089, 44, 2090, 46, 2091, 40, 41, 44, 2031, 41, 46, 2094, 44, 1502, 41, 59, 125, 392, 40, 2032, 631, 424, 41, 123, 2092, 46, 2093, 40, 2088, 40, 2080, 44, 637, 2089, 44, 2033, 44, 2032, 41, 46, 2094, 44, 1502, 41, 59, 125, 2005, 61, 2098, 40, 2080, 44, 637, 2089, 44, 2090, 46, 2091, 40, 41, 41, 59, 2092, 46, 2093, 40, 2005, 44, 1502, 41, 59, 2099, 60, 2010, 44, 2010, 62, 2100, 61, 2025, 46, 2101, 40, 41, 59, 2010, 2102, 61, 2100, 46, 2103, 40, 2012, 44, 41, 59, 2005, 46, 2104, 40, 2102, 41, 59, 2028, 61, 373, 45, 62, 123, 392, 40, 2105, 46, 2106, 40, 2107, 46, 2108, 44, 373, 41, 41, 123, 2109, 40, 41, 59, 2110, 46, 2111, 40, 40, 41, 45, 62, 123, 2112, 2113, 61, 424, 59, 392, 40, 2021, 631, 424, 41, 123, 2113, 61, 2021, 46, 2114, 40, 41, 46, 2115, 40, 41, 46, 2116, 40, 41, 59, 125, 360, 392, 40, 2023, 631, 424, 41, 123, 2113, 61, 2023, 46, 2117, 40, 41, 59, 125, 392, 40, 2113, 631, 424, 41, 123, 418, 2118, 40, 2018, 44, 2113, 44, 2023, 46, 2119, 40, 41, 44, 2003, 41, 46, 2043, 40, 41, 59, 125, 125, 44, 1503, 44, 2120, 46, 2121, 41, 59, 125, 125, 59, 125, 64, 2042, 438, 492, 2122, 40, 41, 123, 463, 46, 2122, 40, 41, 59, 2123, 46, 2124, 40, 2125, 44, 2126, 46, 2127, 41, 59, 125, 438, 492, 2128, 40, 2129, 2130, 41, 123, 2130, 46, 2131, 40, 2132, 45, 62, 123, 392, 40, 2132, 46, 2133, 40, 41, 614, 2134, 46, 2135, 41, 123, 2132, 46, 2136, 40, 41, 59, 2137, 40, 41, 59, 125, 392, 40, 2132, 46, 2133, 40, 41, 614, 2134, 46, 2138, 41, 123, 2132, 46, 2139, 40, 41, 59, 2140, 40, 41, 59, 125, 125, 41, 59, 125, 64, 2042, 438, 492, 2141, 40, 2142, 2143, 41, 123, 392, 40, 2144, 46, 2145, 40, 41, 41, 123, 356, 2146, 61, 2147, 40, 1504, 41, 59, 2148, 2149, 61, 2148, 46, 2150, 40, 1499, 44, 1499, 44, 1499, 44, 1501, 41, 59, 2151, 46, 2152, 40, 2153, 46, 2154, 41, 59, 2155, 2156, 61, 2151, 46, 2157, 40, 41, 46, 2158, 40, 41, 59, 2151, 46, 2157, 40, 41, 46, 2159, 40, 418, 2160, 40, 41, 41, 59, 2161, 2162, 61, 418, 2161, 40, 41, 59, 2163, 60, 2164, 62, 2165, 61, 2162, 46, 2166, 40, 41, 59, 2165, 46, 2167, 40, 418, 2164, 40, 2168, 46, 2169, 40, 1500, 41, 44, 418, 2170, 40, 2151, 46, 2171, 40, 41, 44, 1500, 44, 2149, 41, 44, 418, 2170, 40, 2151, 46, 2172, 40, 41, 44, 1501, 44, 2149, 41, 41, 41, 59, 2165, 46, 2167, 40, 418, 2164, 40, 2168, 46, 2169, 40, 2146, 41, 44, 418, 2170, 40, 2151, 46, 2171, 40, 41, 44, 45, 1503, 44, 2149, 41, 44, 418, 2170, 40, 2151, 46, 2172, 40, 41, 44, 1500, 44, 2149, 41, 41, 41, 59, 2162, 46, 2173, 40, 373, 45, 62, 123, 2151, 46, 2174, 40, 1500, 41, 59, 2151, 46, 2152, 40, 2153, 46, 2175, 41, 59, 2151, 46, 2157, 40, 41, 46, 2159, 40, 2156, 41, 59, 2143, 46, 2176, 40, 41, 59, 125, 41, 59, 2162, 46, 2177, 40, 41, 59, 125, 360, 123, 2143, 46, 2178, 40, 41, 59, 125, 125, 64, 2042, 438, 492, 2179, 40, 41, 123, 392, 40, 2180, 46, 2181, 40, 41, 41, 123, 356, 2182, 61, 45, 1504, 59, 356, 2183, 61, 2184, 40, 1504, 41, 59, 2185, 2186, 61, 2185, 46, 2187, 40, 1499, 44, 1499, 44, 1499, 44, 1501, 41, 59, 2188, 2189, 61, 418, 2188, 40, 41, 59, 2190, 60, 2191, 62, 2192, 61, 2189, 46, 2193, 40, 41, 59, 2192, 46, 2194, 40, 418, 2191, 40, 2195, 46, 2196, 40, 1500, 41, 44, 418, 2197, 40, 2198, 46, 2199, 40, 41, 44, 1500, 44, 2186, 41, 44, 418, 2197, 40, 2198, 46, 2200, 40, 41, 44, 2182, 44, 2186, 41, 41, 41, 59, 2192, 46, 2194, 40, 418, 2191, 40, 2195, 46, 2196, 40, 2183, 41, 44, 418, 2197, 40, 2198, 46, 2199, 40, 41, 44, 1501, 44, 2186, 41, 44, 418, 2197, 40, 2198, 46, 2200, 40, 41, 44, 1500, 44, 2186, 41, 41, 41, 59, 2189, 46, 2201, 40, 41, 59, 125, 125, 64, 2042, 438, 492, 2202, 40, 41, 123, 463, 46, 2202, 40, 41, 59, 2203, 46, 2204, 40, 418, 2205, 40, 1503, 44, 1503, 44, 1503, 44, 1503, 41, 41, 59, 125, 64, 2042, 438, 492, 2206, 40, 41, 123, 2207, 61, 1502, 59, 463, 46, 2206, 40, 41, 59, 2208, 46, 2209, 40, 373, 45, 62, 2210, 40, 41, 41, 59, 125, 437, 492, 2211, 40, 41, 123, 2068, 40, 41, 59, 392, 40, 2011, 631, 424, 605, 2005, 631, 424, 41, 2011, 46, 2212, 40, 2005, 46, 2213, 40, 41, 41, 59, 125, 64, 2042, 438, 492, 2214, 40, 41, 123, 2215, 46, 2216, 40, 41, 46, 2217, 40, 41, 59, 392, 40, 2218, 631, 424, 41, 2218, 46, 2216, 40, 41, 46, 2217, 40, 41, 59, 125, 64, 2042, 438, 492, 2219, 40, 41, 123, 2220, 46, 2221, 40, 2222, 46, 2223, 40, 41, 46, 2224, 40, 41, 41, 59, 2220, 46, 2225, 40, 2226, 46, 2227, 41, 59, 125, 64, 2042, 438, 492, 2228, 40, 41, 123, 2229, 2230, 61, 2231, 46, 2232, 40, 41, 46, 2233, 40, 41, 59, 2234, 46, 2235, 40, 2236, 46, 2237, 40, 2230, 46, 2238, 40, 41, 43, 2007, 46, 2238, 40, 41, 45, 2239, 41, 41, 59, 2234, 46, 2240, 40, 2236, 46, 2237, 40, 2230, 46, 2241, 40, 41, 43, 2007, 46, 2241, 40, 41, 41, 41, 59, 125, 64, 2042, 438, 492, 2242, 40, 41, 123, 125, 64, 2042, 438, 492, 2243, 40, 41, 123, 125, 125]",0.9995885,1
29,30847,Java,"public class OnXJava8StyleOn7 {
  @interface Foo {
    String value() default """";
  }
  @interface Bar {
    String stuff() default """";
  }
  @interface Array {
    String[] value() default {};
  }
  @lombok.Getter() String a;
  @lombok.Setter() String b;
  @lombok.Setter() String c;
  @lombok.Setter() String d;
  @lombok.Getter() String e;
  @lombok.Getter() String f;
  @lombok.Getter() String g;
  @lombok.Getter() String h;
  @lombok.Getter() String i;
  public OnXJava8StyleOn7() {
    super();
  }
  public @Foo @java.lang.SuppressWarnings(""all"") String getA() {
    return this.a;
  }
  public @Foo() @java.lang.SuppressWarnings(""all"") void setB(final String b) {
    this.b = b;
  }
  public @java.lang.SuppressWarnings(""all"") void setC(final @Foo(""a"") String c) {
    this.c = c;
  }
  public @java.lang.SuppressWarnings(""all"") void setD(final @Bar(stuff = ""b"") String d) {
    this.d = d;
  }
  public @Foo(value = ""c"") @Bar(stuff = ""d"") @java.lang.SuppressWarnings(""all"") String getE() {
    return this.e;
  }
  public @Array @java.lang.SuppressWarnings(""all"") String getF() {
    return this.f;
  }
  public @Array() @java.lang.SuppressWarnings(""all"") String getG() {
    return this.g;
  }
  public @Array({}) @java.lang.SuppressWarnings(""all"") String getH() {
    return this.h;
  }
  public @Array({""a"", ""b""}) @java.lang.SuppressWarnings(""all"") String getI() {
    return this.i;
  }
}",1,"[439, 334, 2000, 123, 64, 405, 2001, 123, 2002, 2003, 40, 41, 349, 59, 125, 64, 405, 2004, 123, 2005, 2006, 40, 41, 349, 59, 125, 64, 405, 2007, 123, 2008, 91, 93, 2009, 40, 41, 349, 123, 125, 59, 125, 64, 2010, 46, 2011, 40, 41, 2012, 2013, 59, 64, 2010, 46, 2014, 40, 41, 2012, 2015, 59, 64, 2010, 46, 2014, 40, 41, 2012, 2016, 59, 64, 2010, 46, 2014, 40, 41, 2012, 2017, 59, 64, 2010, 46, 2011, 40, 41, 2012, 2018, 59, 64, 2010, 46, 2011, 40, 41, 2012, 2019, 59, 64, 2010, 46, 2011, 40, 41, 2012, 2020, 59, 64, 2010, 46, 2011, 40, 41, 2012, 2021, 59, 64, 2010, 46, 2011, 40, 41, 2012, 2022, 59, 439, 2000, 40, 41, 123, 463, 40, 41, 59, 125, 439, 64, 2001, 64, 2023, 46, 2024, 46, 2025, 40, 41, 2012, 2026, 40, 41, 123, 450, 467, 46, 2013, 59, 125, 439, 64, 2001, 40, 41, 64, 2023, 46, 2024, 46, 2025, 40, 41, 492, 2027, 40, 381, 2012, 2015, 41, 123, 467, 46, 2015, 61, 2015, 59, 125, 439, 64, 2023, 46, 2024, 46, 2025, 40, 41, 492, 2028, 40, 381, 64, 2001, 40, 41, 2012, 2016, 41, 123, 467, 46, 2016, 61, 2016, 59, 125, 439, 64, 2023, 46, 2024, 46, 2025, 40, 41, 492, 2029, 40, 381, 64, 2004, 40, 2030, 61, 41, 2012, 2017, 41, 123, 467, 46, 2017, 61, 2017, 59, 125, 439, 64, 2001, 40, 2031, 61, 41, 64, 2004, 40, 2030, 61, 41, 64, 2023, 46, 2024, 46, 2025, 40, 41, 2012, 2032, 40, 41, 123, 450, 467, 46, 2018, 59, 125, 439, 64, 2007, 64, 2023, 46, 2024, 46, 2025, 40, 41, 2012, 2033, 40, 41, 123, 450, 467, 46, 2019, 59, 125, 439, 64, 2007, 40, 41, 64, 2023, 46, 2024, 46, 2025, 40, 41, 2012, 2034, 40, 41, 123, 450, 467, 46, 2020, 59, 125, 439, 64, 2007, 40, 123, 125, 41, 64, 2023, 46, 2024, 46, 2025, 40, 41, 2012, 2035, 40, 41, 123, 450, 467, 46, 2021, 59, 125, 439, 64, 2007, 40, 123, 44, 125, 41, 64, 2023, 46, 2024, 46, 2025, 40, 41, 2012, 2036, 40, 41, 123, 450, 467, 46, 2022, 59, 125, 125]",0.9881337,1
30,3018,Java,"@Slf4j
@Singleton
public class OfferUtil {

    private final AccountAgeWitnessService accountAgeWitnessService;
    private final BsqWalletService bsqWalletService;
    private final FilterManager filterManager;
    private final Preferences preferences;
    private final PriceFeedService priceFeedService;
    private final P2PService p2PService;
    private final ReferralIdService referralIdService;
    private final TradeStatisticsManager tradeStatisticsManager;

    private final Predicate<String> isValidFeePaymentCurrencyCode = (c) ->
            c.equalsIgnoreCase(""BSQ"") || c.equalsIgnoreCase(""BTC"");

    @Inject
    public OfferUtil(AccountAgeWitnessService accountAgeWitnessService,
                     BsqWalletService bsqWalletService,
                     FilterManager filterManager,
                     Preferences preferences,
                     PriceFeedService priceFeedService,
                     P2PService p2PService,
                     ReferralIdService referralIdService,
                     TradeStatisticsManager tradeStatisticsManager) {
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.bsqWalletService = bsqWalletService;
        this.filterManager = filterManager;
        this.preferences = preferences;
        this.priceFeedService = priceFeedService;
        this.p2PService = p2PService;
        this.referralIdService = referralIdService;
        this.tradeStatisticsManager = tradeStatisticsManager;
    }

    public static String getRandomOfferId() {
        return Utilities.getRandomPrefix(5, 8) + ""-"" +
                UUID.randomUUID() + ""-"" +
                getStrippedVersion();
    }

    public static String getStrippedVersion() {
        return Version.VERSION.replace(""."", """");
    }

    // We add a counter at the end of the offer id signalling the number of times that offer has
    // been mutated ether due edit or due pow adjustments.
    public static String getOfferIdWithMutationCounter(String id) {
        String[] split = id.split(""-"");
        String base = id;
        int counter = 0;
        if (split.length > 7) {
            String counterString = split[7];
            int endIndex = id.length() - counterString.length() - 1;
            base = id.substring(0, endIndex);
            try {
                counter = Integer.parseInt(counterString);
            } catch (Exception ignore) {
            }
        }
        counter++;
        return base + ""-"" + counter;
    }

    public static String getVersionFromId(String id) {
        String[] split = id.split(""-"");
        return split[6];
    }

    public void maybeSetFeePaymentCurrencyPreference(String feeCurrencyCode) {
        if (!feeCurrencyCode.isEmpty()) {
            if (!isValidFeePaymentCurrencyCode.test(feeCurrencyCode))
                throw new IllegalStateException(format(""%s cannot be used to pay trade fees"",
                        feeCurrencyCode.toUpperCase()));

            if (feeCurrencyCode.equalsIgnoreCase(""BSQ"") && preferences.isPayFeeInBtc())
                preferences.setPayFeeInBtc(false);
            else if (feeCurrencyCode.equalsIgnoreCase(""BTC"") && !preferences.isPayFeeInBtc())
                preferences.setPayFeeInBtc(true);
        }
    }

    /**
     * Given the direction, is this a BUY?
     *
     * @param direction the offer direction
     * @return {@code true} for an offer to buy BTC from the taker, {@code false} for an
     * offer to sell BTC to the taker
     */
    public boolean isBuyOffer(OfferDirection direction) {
        return direction == OfferDirection.BUY;
    }

    public long getMaxTradeLimit(PaymentAccount paymentAccount,
                                 String currencyCode,
                                 OfferDirection direction) {
        return paymentAccount != null
                ? accountAgeWitnessService.getMyTradeLimit(paymentAccount, currencyCode, direction)
                : 0;
    }

    /**
     * Return true if a balance can cover a cost.
     *
     * @param cost the cost of a trade
     * @param balance a wallet balance
     * @return true if balance >= cost
     */
    public boolean isBalanceSufficient(Coin cost, Coin balance) {
        return cost != null && balance.compareTo(cost) >= 0;
    }

    /**
     * Return the wallet balance shortage for a given trade cost, or zero if there is
     * no shortage.
     *
     * @param cost the cost of a trade
     * @param balance a wallet balance
     * @return the wallet balance shortage for the given cost, else zero.
     */
    public Coin getBalanceShortage(Coin cost, Coin balance) {
        if (cost != null) {
            Coin shortage = cost.subtract(balance);
            return shortage.isNegative() ? Coin.ZERO : shortage;
        } else {
            return Coin.ZERO;
        }
    }

    /**
     * Returns the usable BSQ balance.
     *
     * @return Coin the usable BSQ balance
     */
    public Coin getUsableBsqBalance() {
        // We have to keep a minimum amount of BSQ == bitcoin dust limit, otherwise there
        // would be dust violations for change UTXOs; essentially means the minimum usable
        // balance of BSQ is 5.46.
        Coin usableBsqBalance = bsqWalletService.getAvailableBalance().subtract(getMinNonDustOutput());
        return usableBsqBalance.isNegative() ? Coin.ZERO : usableBsqBalance;
    }

    public double calculateManualPrice(double volumeAsDouble, double amountAsDouble) {
        return volumeAsDouble / amountAsDouble;
    }

    public double calculateMarketPriceMargin(double manualPrice, double marketPrice) {
        return MathUtils.roundDouble(manualPrice / marketPrice, 4);
    }

    /**
     * Returns the makerFee as Coin, this can be priced in BTC or BSQ.
     *
     * @param amount           the amount of BTC to trade
     * @return the maker fee for the given trade amount, or {@code null} if the amount
     * is {@code null}
     */
    @Nullable
    public Coin getMakerFee(@Nullable Coin amount) {
        boolean isCurrencyForMakerFeeBtc = isCurrencyForMakerFeeBtc(amount);
        return CoinUtil.getMakerFee(isCurrencyForMakerFeeBtc, amount);
    }

    public Coin getTxFeeByVsize(Coin txFeePerVbyteFromFeeService, int vsizeInVbytes) {
        return txFeePerVbyteFromFeeService.multiply(getAverageTakerFeeTxVsize(vsizeInVbytes));
    }

    // We use the sum of the size of the trade fee and the deposit tx to get an average.
    // Miners will take the trade fee tx if the total fee of both dependent txs are good
    // enough.  With that we avoid that we overpay in case that the trade fee has many
    // inputs and we would apply that fee for the other 2 txs as well. We still might
    // overpay a bit for the payout tx.
    public int getAverageTakerFeeTxVsize(int txVsize) {
        return (txVsize + 233) / 2;
    }

    /**
     * Checks if the maker fee should be paid in BTC, this can be the case due to user
     * preference or because the user doesn't have enough BSQ.
     *
     * @param amount           the amount of BTC to trade
     * @return {@code true} if BTC is preferred or the trade amount is nonnull and there
     * isn't enough BSQ for it.
     */
    public boolean isCurrencyForMakerFeeBtc(@Nullable Coin amount) {
        boolean payFeeInBtc = preferences.getPayFeeInBtc();
        boolean bsqForFeeAvailable = isBsqForMakerFeeAvailable(amount);
        return payFeeInBtc || !bsqForFeeAvailable;
    }

    /**
     * Checks if the available BSQ balance is sufficient to pay for the offer's maker fee.
     *
     * @param amount           the amount of BTC to trade
     * @return {@code true} if the balance is sufficient, {@code false} otherwise
     */
    public boolean isBsqForMakerFeeAvailable(@Nullable Coin amount) {
        Coin availableBalance = bsqWalletService.getAvailableBalance();
        Coin makerFee = CoinUtil.getMakerFee(false, amount);

        // If we don't know yet the maker fee (amount is not set) we return true,
        // otherwise we would disable BSQ fee each time we open the create offer screen
        // as there the amount is not set.
        if (makerFee == null)
            return true;

        Coin surplusFunds = availableBalance.subtract(makerFee);
        if (isDust(surplusFunds)) {
            return false; // we can't be left with dust
        }
        return !availableBalance.subtract(makerFee).isNegative();
    }


    @Nullable
    public Coin getTakerFee(boolean isCurrencyForTakerFeeBtc, @Nullable Coin amount) {
        if (amount != null) {
            Coin feePerBtc = CoinUtil.getFeePerBtc(FeeService.getTakerFeePerBtc(isCurrencyForTakerFeeBtc), amount);
            return CoinUtil.maxCoin(feePerBtc, FeeService.getMinTakerFee(isCurrencyForTakerFeeBtc));
        } else {
            return null;
        }
    }

    public boolean isCurrencyForTakerFeeBtc(Coin amount) {
        boolean payFeeInBtc = preferences.getPayFeeInBtc();
        boolean bsqForFeeAvailable = isBsqForTakerFeeAvailable(amount);
        return payFeeInBtc || !bsqForFeeAvailable;
    }

    public boolean isBsqForTakerFeeAvailable(@Nullable Coin amount) {
        Coin availableBalance = bsqWalletService.getAvailableBalance();
        Coin takerFee = getTakerFee(false, amount);

        // If we don't know yet the maker fee (amount is not set) we return true,
        // otherwise we would disable BSQ fee each time we open the create offer screen
        // as there the amount is not set.
        if (takerFee == null)
            return true;

        Coin surplusFunds = availableBalance.subtract(takerFee);
        if (isDust(surplusFunds)) {
            return false; // we can't be left with dust
        }
        return !availableBalance.subtract(takerFee).isNegative();
    }

    public boolean isBlockChainPaymentMethod(Offer offer) {
        return offer != null && offer.getPaymentMethod().isBlockchain();
    }

    public Optional<Volume> getFeeInUserFiatCurrency(Coin makerFee,
                                                     boolean isCurrencyForMakerFeeBtc,
                                                     CoinFormatter bsqFormatter) {
        String userCurrencyCode = preferences.getPreferredTradeCurrency().getCode();
        if (CurrencyUtil.isCryptoCurrency(userCurrencyCode)) {
            // In case the user has selected a altcoin as preferredTradeCurrency
            // we derive the fiat currency from the user country
            String countryCode = preferences.getUserCountry().code;
            userCurrencyCode = CurrencyUtil.getCurrencyByCountryCode(countryCode).getCode();
        }

        return getFeeInUserFiatCurrency(makerFee,
                isCurrencyForMakerFeeBtc,
                userCurrencyCode,
                bsqFormatter);
    }

    public Map<String, String> getExtraDataMap(PaymentAccount paymentAccount,
                                               String currencyCode,
                                               OfferDirection direction) {
        Map<String, String> extraDataMap = new HashMap<>();
        if (CurrencyUtil.isFiatCurrency(currencyCode)) {
            String myWitnessHashAsHex = accountAgeWitnessService
                    .getMyWitnessHashAsHex(paymentAccount.getPaymentAccountPayload());
            extraDataMap.put(ACCOUNT_AGE_WITNESS_HASH, myWitnessHashAsHex);
        }

        if (referralIdService.getOptionalReferralId().isPresent()) {
            extraDataMap.put(REFERRAL_ID, referralIdService.getOptionalReferralId().get());
        }

        if (paymentAccount instanceof F2FAccount) {
            extraDataMap.put(F2F_CITY, ((F2FAccount) paymentAccount).getCity());
            extraDataMap.put(F2F_EXTRA_INFO, ((F2FAccount) paymentAccount).getExtraInfo());
        }

        if (paymentAccount instanceof CashByMailAccount) {
            extraDataMap.put(CASH_BY_MAIL_EXTRA_INFO, ((CashByMailAccount) paymentAccount).getExtraInfo());
        }

        extraDataMap.put(CAPABILITIES, Capabilities.app.toStringList());

        if (currencyCode.equals(""XMR"") && direction == OfferDirection.SELL) {
            preferences.getAutoConfirmSettingsList().stream()
                    .filter(e -> e.getCurrencyCode().equals(""XMR""))
                    .filter(AutoConfirmSettings::isEnabled)
                    .forEach(e -> extraDataMap.put(XMR_AUTO_CONF, XMR_AUTO_CONF_ENABLED_VALUE));
        }

        return extraDataMap.isEmpty() ? null : extraDataMap;
    }

    public void validateOfferData(double buyerSecurityDeposit,
                                  PaymentAccount paymentAccount,
                                  String currencyCode,
                                  Coin makerFeeAsCoin) {
        validateBasicOfferData(paymentAccount.getPaymentMethod(), currencyCode);
        checkNotNull(makerFeeAsCoin, ""makerFee must not be null"");
        checkArgument(buyerSecurityDeposit <= getMaxBuyerSecurityDepositAsPercent(),
                ""securityDeposit must not exceed "" +
                        getMaxBuyerSecurityDepositAsPercent());
        checkArgument(buyerSecurityDeposit >= getMinBuyerSecurityDepositAsPercent(),
                ""securityDeposit must not be less than "" +
                        getMinBuyerSecurityDepositAsPercent());
    }

    public void validateBasicOfferData(PaymentMethod paymentMethod, String currencyCode) {
        checkNotNull(p2PService.getAddress(), ""Address must not be null"");
        checkArgument(!filterManager.isCurrencyBanned(currencyCode),
                Res.get(""offerbook.warning.currencyBanned""));
        checkArgument(!filterManager.isPaymentMethodBanned(paymentMethod),
                Res.get(""offerbook.warning.paymentMethodBanned""));
    }

    // Returns an edited payload: a merge of the original offerPayload and
    // editedOfferPayload fields.  Mutable fields are sourced from
    // mutableOfferPayloadFields param, e.g., payment account details, price, etc.
    // Immutable fields are sourced from the original openOffer param.
    public OfferPayload getMergedOfferPayload(OpenOffer openOffer,
                                              MutableOfferPayloadFields mutableOfferPayloadFields) {
        OfferPayload original = openOffer.getOffer().getOfferPayload().orElseThrow();
        return new OfferPayload(original.getId(),
                original.getDate(),
                original.getOwnerNodeAddress(),
                original.getPubKeyRing(),
                original.getDirection(),
                mutableOfferPayloadFields.getPrice(),
                mutableOfferPayloadFields.getMarketPriceMargin(),
                mutableOfferPayloadFields.isUseMarketBasedPrice(),
                original.getAmount(),
                original.getMinAmount(),
                mutableOfferPayloadFields.getBaseCurrencyCode(),
                mutableOfferPayloadFields.getCounterCurrencyCode(),
                original.getArbitratorNodeAddresses(),
                original.getMediatorNodeAddresses(),
                mutableOfferPayloadFields.getPaymentMethodId(),
                mutableOfferPayloadFields.getMakerPaymentAccountId(),
                original.getOfferFeePaymentTxId(),
                mutableOfferPayloadFields.getCountryCode(),
                mutableOfferPayloadFields.getAcceptedCountryCodes(),
                mutableOfferPayloadFields.getBankId(),
                mutableOfferPayloadFields.getAcceptedBankIds(),
                original.getVersionNr(),
                original.getBlockHeightAtOfferCreation(),
                original.getTxFee(),
                original.getMakerFee(),
                original.isCurrencyForMakerFeeBtc(),
                original.getBuyerSecurityDeposit(),
                original.getSellerSecurityDeposit(),
                original.getMaxTradeLimit(),
                original.getMaxTradePeriod(),
                original.isUseAutoClose(),
                original.isUseReOpenAfterAutoClose(),
                original.getLowerClosePrice(),
                original.getUpperClosePrice(),
                original.isPrivateOffer(),
                original.getHashOfChallenge(),
                mutableOfferPayloadFields.getExtraDataMap(),
                original.getProtocolVersion());
    }

    private Optional<Volume> getFeeInUserFiatCurrency(Coin makerFee,
                                                      boolean isCurrencyForMakerFeeBtc,
                                                      String userCurrencyCode,
                                                      CoinFormatter bsqFormatter) {
        MarketPrice marketPrice = priceFeedService.getMarketPrice(userCurrencyCode);
        if (marketPrice != null && makerFee != null) {
            long marketPriceAsLong = roundDoubleToLong(
                    scaleUpByPowerOf10(marketPrice.getPrice(), Fiat.SMALLEST_UNIT_EXPONENT));
            Price userCurrencyPrice = Price.valueOf(userCurrencyCode, marketPriceAsLong);

            if (isCurrencyForMakerFeeBtc) {
                return Optional.of(userCurrencyPrice.getVolumeByAmount(makerFee));
            } else {
                // We use the current market price for the fiat currency and the 30 day average BSQ price
                Tuple2<Price, Price> tuple = AveragePriceUtil.getAveragePriceTuple(preferences,
                        tradeStatisticsManager,
                        30);
                Price bsqPrice = tuple.second;
                if (bsqPrice.isPositive()) {
                    String inputValue = bsqFormatter.formatCoin(makerFee);
                    Volume makerFeeAsVolume = Volume.parse(inputValue, ""BSQ"");
                    Coin requiredBtc = bsqPrice.getAmountByVolume(makerFeeAsVolume);
                    Volume volumeByAmount = userCurrencyPrice.getVolumeByAmount(requiredBtc);
                    return Optional.of(volumeByAmount);
                } else {
                    return Optional.empty();
                }
            }
        } else {
            return Optional.empty();
        }
    }

    public static boolean isFiatOffer(Offer offer) {
        return offer.getBaseCurrencyCode().equals(""BTC"") && !offer.isBsqSwapOffer();
    }

    public static boolean isAltcoinOffer(Offer offer) {
        return offer.getCounterCurrencyCode().equals(""BTC"") && !offer.isBsqSwapOffer();
    }

    public static Optional<String> getInvalidMakerFeeTxErrorMessage(Offer offer, BtcWalletService btcWalletService) {
        String offerFeePaymentTxId = offer.getOfferFeePaymentTxId();
        if (offerFeePaymentTxId == null) {
            return Optional.empty();
        }

        Transaction makerFeeTx = btcWalletService.getTransaction(offerFeePaymentTxId);
        if (makerFeeTx == null) {
            return Optional.empty();
        }

        String errorMsg = null;
        String header = ""The offer with offer ID '"" + offer.getShortId() +
                ""' has an invalid maker fee transaction.\n\n"";
        String spendingTransaction = null;
        String extraString = ""\nYou have to remove that offer to avoid failed trades.\n"" +
                ""If this happened because of a bug please contact the Bisq developers "" +
                ""and you can request reimbursement for the lost maker fee."";
        if (makerFeeTx.getOutputs().size() > 1) {
            // Our output to fund the deposit tx is at index 1
            TransactionOutput output = makerFeeTx.getOutput(1);
            TransactionInput spentByTransactionInput = output.getSpentBy();
            if (spentByTransactionInput != null) {
                spendingTransaction = spentByTransactionInput.getConnectedTransaction() != null ?
                        spentByTransactionInput.getConnectedTransaction().toString() :
                        ""null"";
                // We this is an exceptional case we do not translate that error msg.
                errorMsg = ""The output of the maker fee tx is already spent.\n"" +
                        extraString +
                        ""\n\nTransaction input which spent the reserved funds for that offer: '"" +
                        spentByTransactionInput.getConnectedTransaction().getTxId().toString() + "":"" +
                        (spentByTransactionInput.getConnectedOutput() != null ?
                                spentByTransactionInput.getConnectedOutput().getIndex() + ""'"" :
                                ""null'"");
                log.error(""spentByTransactionInput {}"", spentByTransactionInput);
            }
        } else {
            errorMsg = ""The maker fee tx is invalid as it does not has at least 2 outputs."" + extraString +
                    ""\nMakerFeeTx="" + makerFeeTx;
        }

        if (errorMsg == null) {
            return Optional.empty();
        }

        errorMsg = header + errorMsg;
        log.error(errorMsg);
        if (spendingTransaction != null) {
            log.error(""Spending transaction: {}"", spendingTransaction);
        }

        return Optional.of(errorMsg);
    }
}",1,"[64, 2000, 64, 2001, 439, 334, 2002, 123, 437, 381, 2003, 2004, 59, 437, 381, 2005, 2006, 59, 437, 381, 2007, 2008, 59, 437, 381, 2009, 2010, 59, 437, 381, 2011, 2012, 59, 437, 381, 2013, 2014, 59, 437, 381, 2015, 2016, 59, 437, 381, 2017, 2018, 59, 437, 381, 2019, 60, 2020, 62, 2021, 61, 40, 2022, 41, 45, 62, 2022, 46, 2023, 40, 41, 606, 2022, 46, 2023, 40, 41, 59, 64, 2024, 439, 2002, 40, 2003, 2004, 44, 2005, 2006, 44, 2007, 2008, 44, 2009, 2010, 44, 2011, 2012, 44, 2013, 2014, 44, 2015, 2016, 44, 2017, 2018, 41, 123, 467, 46, 2004, 61, 2004, 59, 467, 46, 2006, 61, 2006, 59, 467, 46, 2008, 61, 2008, 59, 467, 46, 2010, 61, 2010, 59, 467, 46, 2012, 61, 2012, 59, 467, 46, 2014, 61, 2014, 59, 467, 46, 2016, 61, 2016, 59, 467, 46, 2018, 61, 2018, 59, 125, 439, 457, 2020, 2025, 40, 41, 123, 450, 2026, 46, 2027, 40, 1502, 44, 1502, 41, 43, 43, 2028, 46, 2029, 40, 41, 43, 43, 2030, 40, 41, 59, 125, 439, 457, 2020, 2031, 40, 41, 123, 450, 2032, 46, 2033, 46, 2034, 40, 44, 41, 59, 125, 439, 457, 2020, 2035, 40, 2020, 2036, 41, 123, 2020, 91, 93, 2037, 61, 2036, 46, 2037, 40, 41, 59, 2020, 320, 61, 2036, 59, 404, 2038, 61, 1500, 59, 392, 40, 2037, 46, 2039, 62, 1502, 41, 123, 2020, 2040, 61, 2037, 91, 1502, 93, 59, 404, 2041, 61, 2036, 46, 2039, 40, 41, 45, 2040, 46, 2039, 40, 41, 45, 1501, 59, 320, 61, 2036, 46, 2042, 40, 1500, 44, 2041, 41, 59, 474, 123, 2038, 61, 2043, 46, 2044, 40, 2040, 41, 59, 125, 329, 40, 2045, 2046, 41, 123, 125, 125, 2038, 637, 59, 450, 320, 43, 43, 2038, 59, 125, 439, 457, 2020, 2047, 40, 2020, 2036, 41, 123, 2020, 91, 93, 2048, 61, 2036, 46, 2048, 40, 41, 59, 450, 2048, 91, 1502, 93, 59, 125, 439, 492, 2049, 40, 2020, 2050, 41, 123, 392, 40, 33, 2050, 46, 2051, 40, 41, 41, 123, 392, 40, 33, 2021, 46, 2052, 40, 2050, 41, 41, 469, 418, 2053, 40, 2054, 40, 44, 2050, 46, 2055, 40, 41, 41, 41, 59, 392, 40, 2050, 46, 2023, 40, 41, 605, 2010, 46, 2056, 40, 41, 41, 2010, 46, 2057, 40, 380, 41, 59, 360, 392, 40, 2050, 46, 2023, 40, 41, 605, 33, 2010, 46, 2056, 40, 41, 41, 2010, 46, 2057, 40, 473, 41, 59, 125, 125, 439, 324, 2058, 40, 2059, 2060, 41, 123, 450, 2060, 614, 2059, 46, 2061, 59, 125, 439, 413, 2062, 40, 2063, 2064, 44, 2020, 2065, 44, 2059, 2060, 41, 123, 450, 2064, 631, 424, 63, 2004, 46, 2066, 40, 2064, 44, 2065, 44, 2060, 41, 58, 1500, 59, 125, 439, 324, 2067, 40, 2068, 2069, 44, 2068, 2070, 41, 123, 450, 2069, 631, 424, 605, 2070, 46, 2071, 40, 2069, 41, 615, 1500, 59, 125, 439, 2068, 2072, 40, 2068, 2069, 44, 2068, 2070, 41, 123, 392, 40, 2069, 631, 424, 41, 123, 2068, 2073, 61, 2069, 46, 2074, 40, 2070, 41, 59, 450, 2073, 46, 2075, 40, 41, 63, 2068, 46, 2076, 58, 2073, 59, 125, 360, 123, 450, 2068, 46, 2077, 59, 125, 125, 439, 2068, 2078, 40, 41, 123, 2068, 2079, 61, 2006, 46, 2080, 40, 41, 46, 2081, 40, 2082, 40, 41, 41, 59, 450, 2079, 46, 2083, 40, 41, 63, 2068, 46, 2084, 58, 2079, 59, 125, 439, 356, 2085, 40, 356, 2086, 44, 356, 2087, 41, 123, 450, 2086, 47, 2087, 59, 125, 439, 356, 2088, 40, 356, 2089, 44, 356, 2090, 41, 123, 450, 2091, 46, 2092, 40, 2089, 47, 2090, 44, 1502, 41, 59, 125, 64, 2093, 439, 2068, 2094, 40, 64, 2093, 2068, 2095, 41, 123, 324, 2096, 61, 2096, 40, 2095, 41, 59, 450, 2097, 46, 2094, 40, 2096, 44, 2095, 41, 59, 125, 439, 2068, 2098, 40, 2068, 2099, 44, 404, 2100, 41, 123, 450, 2099, 46, 2101, 40, 2102, 40, 2100, 41, 41, 59, 125, 439, 404, 2103, 40, 404, 2104, 41, 123, 450, 40, 2104, 43, 1504, 41, 47, 1502, 59, 125, 439, 324, 2105, 40, 64, 2093, 2068, 2095, 41, 123, 324, 2106, 61, 2010, 46, 2107, 40, 41, 59, 324, 2108, 61, 2109, 40, 2095, 41, 59, 450, 2106, 606, 33, 2108, 59, 125, 439, 324, 2110, 40, 64, 2093, 2068, 2095, 41, 123, 2068, 2111, 61, 2006, 46, 2112, 40, 41, 59, 2068, 2113, 61, 2114, 46, 2094, 40, 380, 44, 2095, 41, 59, 392, 40, 2113, 614, 424, 41, 450, 473, 59, 2068, 2115, 61, 2111, 46, 2116, 40, 2113, 41, 59, 392, 40, 2117, 40, 2115, 41, 41, 123, 450, 380, 59, 125, 450, 33, 2111, 46, 2116, 40, 2113, 41, 46, 2118, 40, 41, 59, 125, 64, 2093, 439, 2068, 2119, 40, 324, 2120, 44, 64, 2093, 2068, 2095, 41, 123, 392, 40, 2095, 631, 424, 41, 123, 2068, 2121, 61, 2122, 46, 2123, 40, 2124, 46, 2125, 40, 2120, 41, 44, 2095, 41, 59, 450, 2122, 46, 2126, 40, 2121, 44, 2124, 46, 2127, 40, 2120, 41, 41, 59, 125, 360, 123, 450, 424, 59, 125, 125, 439, 324, 2120, 40, 2068, 2095, 41, 123, 324, 2128, 61, 2010, 46, 2129, 40, 41, 59, 324, 2130, 61, 2131, 40, 2095, 41, 59, 450, 2128, 606, 33, 2130, 59, 125, 439, 324, 2132, 40, 64, 2093, 2068, 2095, 41, 123, 2068, 2133, 61, 2006, 46, 2134, 40, 41, 59, 2068, 2135, 61, 2119, 40, 380, 44, 2095, 41, 59, 392, 40, 2135, 614, 424, 41, 450, 473, 59, 2068, 2136, 61, 2133, 46, 2137, 40, 2135, 41, 59, 392, 40, 2138, 40, 2136, 41, 41, 123, 450, 380, 59, 125, 450, 33, 2133, 46, 2137, 40, 2135, 41, 46, 2139, 40, 41, 59, 125, 439, 324, 2140, 40, 2141, 2142, 41, 123, 450, 2142, 631, 424, 605, 2142, 46, 2143, 40, 41, 46, 2144, 40, 41, 59, 125, 439, 2145, 60, 2146, 62, 2147, 40, 2068, 2148, 44, 324, 2105, 44, 2149, 2150, 41, 123, 2020, 2151, 61, 2010, 46, 2152, 40, 41, 46, 2153, 40, 41, 59, 392, 40, 2154, 46, 2155, 40, 2151, 41, 41, 123, 2020, 2156, 61, 2010, 46, 2157, 40, 41, 46, 2158, 59, 2151, 61, 2154, 46, 2159, 40, 2156, 41, 46, 2153, 40, 41, 59, 125, 450, 2147, 40, 2148, 44, 2105, 44, 2151, 44, 2150, 41, 59, 125, 439, 2160, 60, 2020, 44, 2020, 62, 2161, 40, 2063, 2064, 44, 2020, 2065, 44, 2059, 2060, 41, 123, 2160, 60, 2020, 44, 2020, 62, 2162, 61, 418, 2163, 60, 62, 40, 41, 59, 392, 40, 2164, 46, 2165, 40, 2065, 41, 41, 123, 2020, 2166, 61, 2004, 46, 2167, 40, 2064, 46, 2168, 40, 41, 41, 59, 2162, 46, 2169, 40, 2170, 44, 2166, 41, 59, 125, 392, 40, 2016, 46, 2171, 40, 41, 46, 2172, 40, 41, 41, 123, 2162, 46, 2173, 40, 2174, 44, 2016, 46, 2171, 40, 41, 46, 2175, 40, 41, 41, 59, 125, 392, 40, 2064, 402, 2176, 41, 123, 2162, 46, 2177, 40, 2178, 44, 40, 40, 2176, 41, 2064, 41, 46, 2179, 40, 41, 41, 59, 2162, 46, 2177, 40, 2180, 44, 40, 40, 2176, 41, 2064, 41, 46, 2181, 40, 41, 41, 59, 125, 392, 40, 2064, 402, 2182, 41, 123, 2162, 46, 2183, 40, 2184, 44, 40, 40, 2182, 41, 2064, 41, 46, 2185, 40, 41, 41, 59, 125, 2162, 46, 2186, 40, 2187, 44, 2188, 46, 2189, 46, 2190, 40, 41, 41, 59, 392, 40, 2065, 46, 2191, 40, 41, 605, 2060, 614, 2059, 46, 2192, 41, 123, 2010, 46, 2193, 40, 41, 46, 2194, 40, 41, 46, 2195, 40, 2196, 45, 62, 2196, 46, 2197, 40, 41, 46, 2191, 40, 41, 41, 46, 2195, 40, 2198, 58, 58, 2199, 41, 46, 2200, 40, 2196, 45, 62, 2162, 46, 2186, 40, 2201, 44, 2202, 41, 41, 59, 125, 450, 2162, 46, 2203, 40, 41, 63, 424, 58, 2162, 59, 125, 439, 492, 2204, 40, 356, 2205, 44, 2063, 2064, 44, 2020, 2065, 44, 2068, 2206, 41, 123, 2207, 40, 2064, 46, 2208, 40, 41, 44, 2065, 41, 59, 2209, 40, 2206, 44, 41, 59, 2210, 40, 2205, 620, 2211, 40, 41, 44, 43, 2211, 40, 41, 41, 59, 2210, 40, 2205, 615, 2212, 40, 41, 44, 43, 2212, 40, 41, 41, 59, 125, 439, 492, 2213, 40, 2214, 2215, 44, 2020, 2065, 41, 123, 2216, 40, 2014, 46, 2217, 40, 41, 44, 41, 59, 2218, 40, 33, 2008, 46, 2219, 40, 2065, 41, 44, 2220, 46, 2221, 40, 41, 41, 59, 2218, 40, 33, 2008, 46, 2222, 40, 2215, 41, 44, 2220, 46, 2221, 40, 41, 41, 59, 125, 439, 2223, 2224, 40, 2225, 2226, 44, 2227, 2228, 41, 123, 2223, 2229, 61, 2226, 46, 2230, 40, 41, 46, 2231, 40, 41, 46, 2232, 40, 41, 59, 450, 418, 2223, 40, 2229, 46, 2233, 40, 41, 44, 2229, 46, 2234, 40, 41, 44, 2229, 46, 2235, 40, 41, 44, 2229, 46, 2236, 40, 41, 44, 2229, 46, 2237, 40, 41, 44, 2228, 46, 2238, 40, 41, 44, 2228, 46, 2239, 40, 41, 44, 2228, 46, 2240, 40, 41, 44, 2229, 46, 2241, 40, 41, 44, 2229, 46, 2242, 40, 41, 44, 2228, 46, 2243, 40, 41, 44, 2228, 46, 2244, 40, 41, 44, 2229, 46, 2245, 40, 41, 44, 2229, 46, 2246, 40, 41, 44, 2228, 46, 2247, 40, 41, 44, 2228, 46, 2248, 40, 41, 44, 2229, 46, 2249, 40, 41, 44, 2228, 46, 2250, 40, 41, 44, 2228, 46, 2251, 40, 41, 44, 2228, 46, 2252, 40, 41, 44, 2228, 46, 2253, 40, 41, 44, 2229, 46, 2254, 40, 41, 44, 2229, 46, 2255, 40, 41, 44, 2229, 46, 2256, 40, 41, 44, 2229, 46, 2094, 40, 41, 44, 2229, 46, 2105, 40, 41, 44, 2229, 46, 2257, 40, 41, 44, 2229, 46, 2258, 40, 41, 44, 2229, 46, 2062, 40, 41, 44, 2229, 46, 2259, 40, 41, 44, 2229, 46, 2260, 40, 41, 44, 2229, 46, 2261, 40, 41, 44, 2229, 46, 2262, 40, 41, 44, 2229, 46, 2263, 40, 41, 44, 2229, 46, 2264, 40, 41, 44, 2229, 46, 2265, 40, 41, 44, 2228, 46, 2161, 40, 41, 44, 2229, 46, 2266, 40, 41, 41, 59, 125, 437, 2145, 60, 2146, 62, 2147, 40, 2068, 2148, 44, 324, 2105, 44, 2020, 2267, 44, 2149, 2150, 41, 123, 2268, 2090, 61, 2012, 46, 2269, 40, 2267, 41, 59, 392, 40, 2090, 631, 424, 605, 2148, 631, 424, 41, 123, 413, 2270, 61, 2271, 40, 2272, 40, 2090, 46, 2273, 40, 41, 44, 2274, 46, 2275, 41, 41, 59, 2276, 2277, 61, 2276, 46, 2278, 40, 2267, 44, 2270, 41, 59, 392, 40, 2105, 41, 123, 450, 2145, 46, 2279, 40, 2277, 46, 2280, 40, 2148, 41, 41, 59, 125, 360, 123, 2281, 60, 2276, 44, 2276, 62, 2282, 61, 2283, 46, 2284, 40, 2010, 44, 2018, 44, 1503, 41, 59, 2276, 2285, 61, 2282, 46, 2286, 59, 392, 40, 2285, 46, 2287, 40, 41, 41, 123, 2020, 2288, 61, 2150, 46, 2289, 40, 2148, 41, 59, 2146, 2290, 61, 2146, 46, 2291, 40, 2288, 44, 41, 59, 2068, 2292, 61, 2285, 46, 2293, 40, 2290, 41, 59, 2146, 2294, 61, 2277, 46, 2295, 40, 2292, 41, 59, 450, 2145, 46, 2296, 40, 2294, 41, 59, 125, 360, 123, 450, 2145, 46, 362, 40, 41, 59, 125, 125, 125, 360, 123, 450, 2145, 46, 362, 40, 41, 59, 125, 125, 439, 457, 324, 2297, 40, 2141, 2142, 41, 123, 450, 2142, 46, 2298, 40, 41, 46, 2299, 40, 41, 605, 33, 2142, 46, 2300, 40, 41, 59, 125, 439, 457, 324, 2301, 40, 2141, 2142, 41, 123, 450, 2142, 46, 2302, 40, 41, 46, 2303, 40, 41, 605, 33, 2142, 46, 2304, 40, 41, 59, 125, 439, 457, 2145, 60, 2020, 62, 2305, 40, 2141, 2142, 44, 2306, 2307, 41, 123, 2020, 2308, 61, 2142, 46, 2309, 40, 41, 59, 392, 40, 2308, 614, 424, 41, 123, 450, 2145, 46, 362, 40, 41, 59, 125, 2310, 2311, 61, 2307, 46, 2312, 40, 2308, 41, 59, 392, 40, 2311, 614, 424, 41, 123, 450, 2145, 46, 362, 40, 41, 59, 125, 2020, 2313, 61, 424, 59, 2020, 2314, 61, 43, 2142, 46, 2315, 40, 41, 43, 59, 2020, 2316, 61, 424, 59, 2020, 2317, 61, 43, 43, 59, 392, 40, 2311, 46, 2318, 40, 41, 46, 2319, 40, 41, 62, 1501, 41, 123, 2320, 2321, 61, 2311, 46, 2322, 40, 1501, 41, 59, 2323, 2324, 61, 2321, 46, 2325, 40, 41, 59, 392, 40, 2324, 631, 424, 41, 123, 2316, 61, 2324, 46, 2326, 40, 41, 631, 424, 63, 2324, 46, 2326, 40, 41, 46, 2327, 40, 41, 58, 59, 2313, 61, 43, 2317, 43, 43, 2324, 46, 2326, 40, 41, 46, 2328, 40, 41, 46, 2327, 40, 41, 43, 43, 40, 2324, 46, 2329, 40, 41, 631, 424, 63, 2324, 46, 2329, 40, 41, 46, 2330, 40, 41, 43, 58, 41, 59, 2331, 46, 371, 40, 44, 2324, 41, 59, 125, 125, 360, 123, 2313, 61, 43, 2317, 43, 43, 2311, 59, 125, 392, 40, 2313, 614, 424, 41, 123, 450, 2145, 46, 362, 40, 41, 59, 125, 2313, 61, 2314, 43, 2313, 59, 2332, 46, 371, 40, 2313, 41, 59, 392, 40, 2316, 631, 424, 41, 123, 2332, 46, 371, 40, 44, 2316, 41, 59, 125, 450, 2145, 46, 2333, 40, 2313, 41, 59, 125, 125]",0.99980706,1
31,4712,Java,"@FxmlView
public class AssetFeeView extends ActivatableView<GridPane, Void> implements BsqBalanceListener, DaoStateListener {
    private ComboBox<StatefulAsset> assetComboBox;
    private InputTextField feeAmountInputTextField;
    private TextField trialPeriodTextField;
    private Button payFeeButton;
    private TableView<AssetListItem> tableView;

    private final BsqFormatter bsqFormatter;
    private final BsqWalletService bsqWalletService;
    private final BsqValidator bsqValidator;
    private final AssetService assetService;
    private final DaoStateService daoStateService;
    private final CoinFormatter btcFormatter;

    private final ObservableList<AssetListItem> observableList = FXCollections.observableArrayList();
    private final SortedList<AssetListItem> sortedList = new SortedList<>(observableList);

    private int gridRow = 0;

    private ChangeListener<Boolean> amountFocusOutListener;
    private ChangeListener<String> amountInputTextFieldListener;
    @Nullable
    private StatefulAsset selectedAsset;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public AssetFeeView(BsqFormatter bsqFormatter,
                        BsqWalletService bsqWalletService,
                        BsqValidator bsqValidator,
                        AssetService assetService,
                        DaoStateService daoStateService,
                        @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter) {
        this.bsqFormatter = bsqFormatter;
        this.bsqWalletService = bsqWalletService;
        this.bsqValidator = bsqValidator;
        this.assetService = assetService;
        this.daoStateService = daoStateService;
        this.btcFormatter = btcFormatter;
    }

    @Override
    public void initialize() {
        addTitledGroupBg(root, gridRow, 3, Res.get(""dao.burnBsq.header""));

        assetComboBox = FormBuilder.addComboBox(root, gridRow,
                Res.get(""dao.burnBsq.selectAsset""), Layout.FIRST_ROW_DISTANCE);
        assetComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(StatefulAsset statefulAsset) {
                return CurrencyUtil.getNameAndCode(statefulAsset.getAsset().getTickerSymbol());
            }

            @Override
            public StatefulAsset fromString(String string) {
                return null;
            }
        });

        feeAmountInputTextField = addInputTextField(root, ++gridRow, Res.get(""dao.burnBsq.fee""));
        feeAmountInputTextField.setValidator(bsqValidator);

        trialPeriodTextField = FormBuilder.addTopLabelTextField(root, ++gridRow, Res.get(""dao.burnBsq.trialPeriod"")).second;

        payFeeButton = addButtonAfterGroup(root, ++gridRow, Res.get(""dao.burnBsq.payFee""));

        tableView = FormBuilder.addTableViewWithHeader(root, ++gridRow, Res.get(""dao.burnBsq.allAssets""), 20, ""last"");
        createColumns();
        tableView.setItems(sortedList);

        createListeners();
    }

    @Override
    protected void activate() {
        assetComboBox.setOnAction(e -> {
            selectedAsset = assetComboBox.getSelectionModel().getSelectedItem();
        });

        feeAmountInputTextField.textProperty().addListener(amountInputTextFieldListener);
        feeAmountInputTextField.focusedProperty().addListener(amountFocusOutListener);

        sortedList.comparatorProperty().bind(tableView.comparatorProperty());

        daoStateService.addDaoStateListener(this);

        bsqWalletService.addBsqBalanceListener(this);

        assetService.updateAssetStates();
        updateList();

        onUpdateAvailableBalance(bsqWalletService.getAvailableBalance());

        payFeeButton.setOnAction((event) -> {
            Coin listingFee = getListingFee();
            long days = getDays();
            // We don't allow shorter periods as it would allow an attacker to try to deactivate other coins by making a
            // small fee payment to reduce the trial period and look back period.
            // Still not a perfect solution but should be good enough for now.
            long minDays = 30;
            if (days >= minDays) {
                try {
                    Transaction transaction = assetService.payFee(selectedAsset, listingFee.value);
                    Coin miningFee = transaction.getFee();
                    int txVsize = transaction.getVsize();

                    if (!DevEnv.isDevMode()) {
                        GUIUtil.showBsqFeeInfoPopup(listingFee, miningFee, txVsize, bsqFormatter, btcFormatter,
                                Res.get(""dao.burnBsq.assetFee""), () -> doPublishFeeTx(transaction));
                    } else {
                        doPublishFeeTx(transaction);
                    }
                } catch (InsufficientMoneyException | TxException e) {
                    e.printStackTrace();
                    new Popup().error(e.toString()).show();
                }
            } else {
                new Popup().warning(Res.get(""dao.burnBsq.assets.toFewDays"", minDays)).show();
            }
        });


        GUIUtil.setFitToRowsForTableView(tableView, 41, 28, 2, 100);
        updateButtonState();

        feeAmountInputTextField.resetValidation();
    }

    @Override
    protected void deactivate() {
        assetComboBox.setOnAction(null);

        feeAmountInputTextField.textProperty().removeListener(amountInputTextFieldListener);
        feeAmountInputTextField.focusedProperty().removeListener(amountFocusOutListener);

        daoStateService.removeDaoStateListener(this);

        bsqWalletService.removeBsqBalanceListener(this);

        sortedList.comparatorProperty().unbind();

        payFeeButton.setOnAction(null);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqBalanceListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onUpdateBalances(Coin availableBalance,
                                 Coin availableNonBsqBalance,
                                 Coin unverifiedBalance,
                                 Coin unconfirmedChangeBalance,
                                 Coin lockedForVotingBalance,
                                 Coin lockupBondsBalance,
                                 Coin unlockingBondsBalance) {

        onUpdateAvailableBalance(availableBalance);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DaoStateListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onParseBlockCompleteAfterBatchProcessing(Block block) {
        // Delay a bit to reduce load at onParseBlockCompleteAfterBatchProcessing event
        UserThread.runAfter(() -> {
            assetService.updateAssetStates();
            updateList();
        }, 300, TimeUnit.MILLISECONDS);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void createListeners() {
        amountFocusOutListener = (observable, oldValue, newValue) -> {
            if (!newValue) {
                updateButtonState();
            }
        };

        amountInputTextFieldListener = (observable, oldValue, newValue) -> {
            trialPeriodTextField.setText(Res.get(""dao.burnBsq.assets.days"", getDays()));
            updateButtonState();
        };
    }

    private void onUpdateAvailableBalance(Coin availableBalance) {
        bsqValidator.setAvailableBalance(availableBalance);
        updateButtonState();
    }

    private long getDays() {
        return getListingFee().value / assetService.getFeePerDay().value;
    }

    // We only update on new BSQ blocks and at view activation. We do not update at each trade statistics change as
    // that would cause too much CPU load. The assetService.updateAssetStates() call takes about 22 ms.
    private void updateList() {
        // Here we exclude the assets which have been removed by voting. Paying a fee would not change the state.
        List<StatefulAsset> statefulAssets = assetService.getStatefulAssets();
        ObservableList<StatefulAsset> nonRemovedStatefulAssets = FXCollections.observableArrayList(statefulAssets.stream()
                .filter(e -> !e.wasRemovedByVoting())
                .collect(Collectors.toList()));
        assetComboBox.setItems(nonRemovedStatefulAssets);

        // In the table we want to show all including removed assets.
        observableList.setAll(statefulAssets.stream()
                .map(statefulAsset -> new AssetListItem(statefulAsset, bsqFormatter))
                .collect(Collectors.toList()));
        GUIUtil.setFitToRowsForTableView(tableView, 41, 28, 2, 100);
    }

    private void updateButtonState() {
        boolean isValid = bsqValidator.validate(feeAmountInputTextField.getText()).isValid &&
                selectedAsset != null;
        payFeeButton.setDisable(!isValid);
    }

    private Coin getListingFee() {
        return ParsingUtils.parseToCoin(feeAmountInputTextField.getText(), bsqFormatter);
    }

    private void doPublishFeeTx(Transaction transaction) {
        assetService.publishTransaction(transaction,
                () -> {
                    assetComboBox.getSelectionModel().clearSelection();
                    if (!DevEnv.isDevMode())
                        new Popup().confirmation(Res.get(""dao.tx.published.success"")).show();
                },
                errorMessage -> new Popup().warning(errorMessage).show());

        feeAmountInputTextField.clear();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Table columns
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void createColumns() {
        TableColumn<AssetListItem, AssetListItem> column;

        column = new AutoTooltipTableColumn<>(Res.get(""dao.burnBsq.assets.nameAndCode""));
        column.setMinWidth(120);
        column.getStyleClass().add(""first-column"");
        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {
            @Override
            public TableCell<AssetListItem, AssetListItem> call(TableColumn<AssetListItem,
                    AssetListItem> column) {
                return new TableCell<>() {
                    @Override
                    public void updateItem(final AssetListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            setText(item.getNameAndCode());
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(AssetListItem::getNameAndCode));

        column = new AutoTooltipTableColumn<>(Res.get(""dao.burnBsq.assets.state""));
        column.setMinWidth(120);
        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {
            @Override
            public TableCell<AssetListItem, AssetListItem> call(TableColumn<AssetListItem,
                    AssetListItem> column) {
                return new TableCell<>() {
                    @Override
                    public void updateItem(final AssetListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            setText(item.getAssetStateString());
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(AssetListItem::getAssetStateString));

        column = new AutoTooltipTableColumn<>(Res.get(""dao.burnBsq.assets.tradeVolume""));
        column.setMinWidth(120);
        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {
            @Override
            public TableCell<AssetListItem, AssetListItem> call(TableColumn<AssetListItem,
                    AssetListItem> column) {
                return new TableCell<>() {
                    @Override
                    public void updateItem(final AssetListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            setText(item.getTradedVolumeAsString());
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(AssetListItem::getTradedVolume));

        column = new AutoTooltipTableColumn<>(Res.get(""dao.burnBsq.assets.lookBackPeriod""));
        column.setMinWidth(120);
        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {
            @Override
            public TableCell<AssetListItem, AssetListItem> call(TableColumn<AssetListItem,
                    AssetListItem> column) {
                return new TableCell<>() {
                    @Override
                    public void updateItem(final AssetListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            setText(item.getLookBackPeriodInDays());
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(AssetListItem::getLookBackPeriodInDays));

        column = new AutoTooltipTableColumn<>(Res.get(""dao.burnBsq.assets.trialFee""));
        column.setMinWidth(120);
        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {
            @Override
            public TableCell<AssetListItem, AssetListItem> call(TableColumn<AssetListItem,
                    AssetListItem> column) {
                return new TableCell<>() {
                    @Override
                    public void updateItem(final AssetListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            setText(item.getFeeOfTrialPeriodAsString());
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(AssetListItem::getFeeOfTrialPeriod));

        column = new AutoTooltipTableColumn<>(Res.get(""dao.burnBsq.assets.totalFee""));
        column.setMinWidth(120);
        column.getStyleClass().add(""last-column"");
        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {
            @Override
            public TableCell<AssetListItem, AssetListItem> call(TableColumn<AssetListItem,
                    AssetListItem> column) {
                return new TableCell<>() {
                    @Override
                    public void updateItem(final AssetListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            setText(item.getTotalFeesPaidAsString());
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(AssetListItem::getTotalFeesPaid));
    }
}",1,"[64, 2000, 439, 334, 2001, 378, 2002, 60, 2003, 44, 2004, 62, 395, 2005, 44, 2006, 123, 437, 2007, 60, 2008, 62, 2009, 59, 437, 2010, 2011, 59, 437, 2012, 2013, 59, 437, 2014, 2015, 59, 437, 2016, 60, 2017, 62, 2018, 59, 437, 381, 2019, 2020, 59, 437, 381, 2021, 2022, 59, 437, 381, 2023, 2024, 59, 437, 381, 2025, 2026, 59, 437, 381, 2027, 2028, 59, 437, 381, 2029, 2030, 59, 437, 381, 2031, 60, 2017, 62, 2032, 61, 2033, 46, 2034, 40, 41, 59, 437, 381, 2035, 60, 2017, 62, 2036, 61, 418, 2035, 60, 62, 40, 2032, 41, 59, 437, 404, 2037, 61, 1500, 59, 437, 2038, 60, 2039, 62, 2040, 59, 437, 2038, 60, 2041, 62, 2042, 59, 64, 2043, 437, 2008, 2044, 59, 64, 2045, 439, 2001, 40, 2019, 2020, 44, 2021, 2022, 44, 2023, 2024, 44, 2025, 2026, 44, 2027, 2028, 44, 64, 2046, 40, 2047, 46, 2048, 41, 2029, 2030, 41, 123, 467, 46, 2020, 61, 2020, 59, 467, 46, 2022, 61, 2022, 59, 467, 46, 2024, 61, 2024, 59, 467, 46, 2026, 61, 2026, 59, 467, 46, 2028, 61, 2028, 59, 467, 46, 2030, 61, 2030, 59, 125, 64, 2049, 439, 492, 2050, 40, 41, 123, 2051, 40, 2052, 44, 2037, 44, 1502, 44, 2053, 46, 2054, 40, 41, 41, 59, 2009, 61, 2055, 46, 2056, 40, 2052, 44, 2037, 44, 2053, 46, 2054, 40, 41, 44, 2057, 46, 2058, 41, 59, 2009, 46, 2059, 40, 418, 2060, 60, 62, 40, 41, 123, 64, 2049, 439, 2041, 2061, 40, 2008, 2062, 41, 123, 450, 2063, 46, 2064, 40, 2062, 46, 2065, 40, 41, 46, 2066, 40, 41, 41, 59, 125, 64, 2049, 439, 2008, 2067, 40, 2041, 461, 41, 123, 450, 424, 59, 125, 125, 41, 59, 2011, 61, 2068, 40, 2052, 44, 637, 2037, 44, 2053, 46, 2054, 40, 41, 41, 59, 2011, 46, 2069, 40, 2024, 41, 59, 2013, 61, 2055, 46, 2070, 40, 2052, 44, 637, 2037, 44, 2053, 46, 2054, 40, 41, 41, 46, 2071, 59, 2015, 61, 2072, 40, 2052, 44, 637, 2037, 44, 2053, 46, 2054, 40, 41, 41, 59, 2018, 61, 2055, 46, 2073, 40, 2052, 44, 637, 2037, 44, 2053, 46, 2054, 40, 41, 44, 1503, 44, 41, 59, 2074, 40, 41, 59, 2018, 46, 2075, 40, 2036, 41, 59, 2076, 40, 41, 59, 125, 64, 2049, 438, 492, 2077, 40, 41, 123, 2009, 46, 2078, 40, 2079, 45, 62, 123, 2044, 61, 2009, 46, 2080, 40, 41, 46, 2081, 40, 41, 59, 125, 41, 59, 2011, 46, 2082, 40, 41, 46, 2083, 40, 2042, 41, 59, 2011, 46, 2084, 40, 41, 46, 2083, 40, 2040, 41, 59, 2036, 46, 2085, 40, 41, 46, 2086, 40, 2018, 46, 2085, 40, 41, 41, 59, 2028, 46, 2087, 40, 467, 41, 59, 2022, 46, 2088, 40, 467, 41, 59, 2026, 46, 2089, 40, 41, 59, 2090, 40, 41, 59, 2091, 40, 2022, 46, 2092, 40, 41, 41, 59, 2015, 46, 2078, 40, 40, 373, 41, 45, 62, 123, 2093, 2094, 61, 2095, 40, 41, 59, 413, 2096, 61, 2097, 40, 41, 59, 413, 2098, 61, 1503, 59, 392, 40, 2096, 615, 2098, 41, 123, 474, 123, 2099, 2100, 61, 2026, 46, 2101, 40, 2044, 44, 2094, 46, 2102, 41, 59, 2093, 2103, 61, 2100, 46, 2104, 40, 41, 59, 404, 2105, 61, 2100, 46, 2106, 40, 41, 59, 392, 40, 33, 2107, 46, 2108, 40, 41, 41, 123, 2109, 46, 2110, 40, 2094, 44, 2103, 44, 2105, 44, 2020, 44, 2030, 44, 2111, 46, 2112, 40, 41, 44, 40, 41, 45, 62, 2113, 40, 2100, 41, 41, 59, 125, 360, 123, 2114, 40, 2100, 41, 59, 125, 125, 329, 40, 2115, 124, 2116, 2079, 41, 123, 2079, 46, 2117, 40, 41, 59, 418, 2118, 40, 41, 46, 371, 40, 2079, 46, 2119, 40, 41, 41, 46, 2120, 40, 41, 59, 125, 125, 360, 123, 418, 2121, 40, 41, 46, 494, 40, 2122, 46, 2123, 40, 44, 2098, 41, 41, 46, 2124, 40, 41, 59, 125, 125, 41, 59, 2125, 46, 2126, 40, 2018, 44, 1503, 44, 1503, 44, 1502, 44, 1503, 41, 59, 2127, 40, 41, 59, 2011, 46, 2128, 40, 41, 59, 125, 64, 2049, 438, 492, 2129, 40, 41, 123, 2009, 46, 2130, 40, 424, 41, 59, 2011, 46, 2131, 40, 41, 46, 2132, 40, 2042, 41, 59, 2011, 46, 2133, 40, 41, 46, 2132, 40, 2040, 41, 59, 2028, 46, 2134, 40, 467, 41, 59, 2022, 46, 2135, 40, 467, 41, 59, 2036, 46, 2136, 40, 41, 46, 2137, 40, 41, 59, 2015, 46, 2130, 40, 424, 41, 59, 125, 64, 2049, 439, 492, 2138, 40, 2139, 2140, 44, 2139, 2141, 44, 2139, 2142, 44, 2139, 2143, 44, 2139, 2144, 44, 2139, 2145, 44, 2139, 2146, 41, 123, 2147, 40, 2140, 41, 59, 125, 64, 2049, 439, 492, 2148, 40, 2149, 2150, 41, 123, 2151, 46, 2152, 40, 40, 41, 45, 62, 123, 2026, 46, 2153, 40, 41, 59, 2154, 40, 41, 59, 125, 44, 1504, 44, 2155, 46, 2156, 41, 59, 125, 437, 492, 2157, 40, 41, 123, 2040, 61, 40, 2158, 44, 2159, 44, 2160, 41, 45, 62, 123, 392, 40, 33, 2160, 41, 123, 2161, 40, 41, 59, 125, 125, 59, 2042, 61, 40, 2158, 44, 2159, 44, 2160, 41, 45, 62, 123, 2013, 46, 2162, 40, 2163, 46, 2164, 40, 44, 2165, 40, 41, 41, 41, 59, 2166, 40, 41, 59, 125, 59, 125, 437, 492, 2167, 40, 2139, 2140, 41, 123, 2024, 46, 2168, 40, 2140, 41, 59, 2169, 40, 41, 59, 125, 437, 413, 2170, 40, 41, 123, 450, 2171, 40, 41, 46, 2172, 47, 2026, 46, 2173, 40, 41, 46, 2172, 59, 125, 437, 492, 2174, 40, 41, 123, 2175, 60, 2008, 62, 2176, 61, 2026, 46, 2177, 40, 41, 59, 2031, 60, 2008, 62, 2178, 61, 2033, 46, 2034, 40, 2176, 46, 2179, 40, 41, 46, 2180, 40, 2181, 45, 62, 33, 2181, 46, 2182, 40, 41, 41, 46, 2183, 40, 2184, 46, 2185, 40, 41, 41, 41, 59, 2009, 46, 2186, 40, 2178, 41, 59, 2032, 46, 2187, 40, 2176, 46, 2179, 40, 41, 46, 2188, 40, 2189, 45, 62, 418, 2017, 40, 2189, 44, 2020, 41, 41, 46, 2183, 40, 2184, 46, 2185, 40, 41, 41, 41, 59, 2190, 46, 2191, 40, 2018, 44, 1503, 44, 1503, 44, 1502, 44, 1503, 41, 59, 125, 437, 492, 2192, 40, 41, 123, 324, 2193, 61, 2024, 46, 2194, 40, 2011, 46, 2195, 40, 41, 41, 46, 2193, 605, 2044, 631, 424, 59, 2015, 46, 2196, 40, 33, 2193, 41, 59, 125, 437, 2139, 2197, 40, 41, 123, 450, 2198, 46, 2199, 40, 2011, 46, 2200, 40, 41, 44, 2020, 41, 59, 125, 437, 492, 2201, 40, 2202, 2203, 41, 123, 2026, 46, 2204, 40, 2203, 44, 40, 41, 45, 62, 123, 2009, 46, 2205, 40, 41, 46, 2206, 40, 41, 59, 392, 40, 33, 2207, 46, 2208, 40, 41, 41, 418, 2209, 40, 41, 46, 2210, 40, 2211, 46, 2212, 40, 41, 41, 46, 2213, 40, 41, 59, 125, 44, 2214, 45, 62, 418, 2215, 40, 41, 46, 494, 40, 2214, 41, 46, 2216, 40, 41, 41, 59, 2011, 46, 2217, 40, 41, 59, 125, 437, 492, 2218, 40, 41, 123, 2219, 60, 2017, 44, 2017, 62, 2220, 59, 2220, 61, 418, 2221, 60, 62, 40, 2222, 46, 2223, 40, 41, 41, 59, 2220, 46, 2224, 40, 1504, 41, 59, 2220, 46, 2225, 40, 41, 46, 2226, 40, 41, 59, 2220, 46, 2227, 40, 40, 2228, 41, 45, 62, 418, 2229, 60, 62, 40, 2228, 46, 2230, 40, 41, 41, 41, 59, 2220, 46, 2231, 40, 418, 2232, 60, 62, 40, 41, 123, 64, 2049, 439, 2233, 60, 2017, 44, 2017, 62, 2234, 40, 2219, 60, 2017, 44, 2017, 62, 2220, 41, 123, 450, 418, 2233, 60, 62, 40, 41, 123, 64, 2049, 439, 492, 2235, 40, 381, 2017, 2228, 44, 324, 362, 41, 123, 463, 46, 2235, 40, 2228, 44, 362, 41, 59, 392, 40, 2228, 631, 424, 605, 33, 362, 41, 123, 2236, 40, 2228, 46, 2237, 40, 41, 41, 59, 125, 360, 2238, 40, 41, 59, 125, 125, 59, 125, 125, 41, 59, 2018, 46, 2239, 40, 41, 46, 2226, 40, 2220, 41, 59, 2220, 46, 2240, 40, 2241, 46, 2242, 40, 2017, 58, 58, 2243, 41, 41, 59, 2220, 61, 418, 2221, 60, 62, 40, 2222, 46, 2223, 40, 41, 41, 59, 2220, 46, 2224, 40, 1504, 41, 59, 2220, 46, 2227, 40, 40, 2228, 41, 45, 62, 418, 2229, 60, 62, 40, 2228, 46, 2230, 40, 41, 41, 41, 59, 2220, 46, 2231, 40, 418, 2232, 60, 62, 40, 41, 123, 64, 2049, 439, 2244, 60, 2017, 44, 2017, 62, 2245, 40, 2219, 60, 2017, 44, 2017, 62, 2220, 41, 123, 450, 418, 2244, 60, 62, 40, 41, 123, 64, 2049, 439, 492, 2246, 40, 381, 2017, 2228, 44, 324, 362, 41, 123, 463, 46, 2246, 40, 2228, 44, 362, 41, 59, 392, 40, 2228, 631, 424, 605, 33, 362, 41, 123, 2247, 40, 2228, 46, 2248, 40, 41, 41, 59, 125, 360, 2249, 40, 41, 59, 125, 125, 59, 125, 125, 41, 59, 2018, 46, 2239, 40, 41, 46, 2226, 40, 2220, 41, 59, 2220, 46, 2240, 40, 2241, 46, 2242, 40, 2017, 58, 58, 2250, 41, 41, 59, 2220, 61, 418, 2221, 60, 62, 40, 2222, 46, 2223, 40, 41, 41, 59, 2220, 46, 2224, 40, 1504, 41, 59, 2220, 46, 2227, 40, 40, 2228, 41, 45, 62, 418, 2229, 60, 62, 40, 2228, 46, 2230, 40, 41, 41, 41, 59, 2220, 46, 2231, 40, 418, 2232, 60, 62, 40, 41, 123, 64, 2049, 439, 2251, 60, 2017, 44, 2017, 62, 2252, 40, 2219, 60, 2017, 44, 2017, 62, 2220, 41, 123, 450, 418, 2251, 60, 62, 40, 41, 123, 64, 2049, 439, 492, 2253, 40, 381, 2017, 2228, 44, 324, 362, 41, 123, 463, 46, 2253, 40, 2228, 44, 362, 41, 59, 392, 40, 2228, 631, 424, 605, 33, 362, 41, 123, 2254, 40, 2228, 46, 2255, 40, 41, 41, 59, 125, 360, 2256, 40, 41, 59, 125, 125, 59, 125, 125, 41, 59, 2018, 46, 2239, 40, 41, 46, 2226, 40, 2220, 41, 59, 2220, 46, 2240, 40, 2241, 46, 2242, 40, 2017, 58, 58, 2257, 41, 41, 59, 2220, 61, 418, 2221, 60, 62, 40, 2222, 46, 2223, 40, 41, 41, 59, 2220, 46, 2224, 40, 1504, 41, 59, 2220, 46, 2227, 40, 40, 2228, 41, 45, 62, 418, 2229, 60, 62, 40, 2228, 46, 2230, 40, 41, 41, 41, 59, 2220, 46, 2231, 40, 418, 2232, 60, 62, 40, 41, 123, 64, 2049, 439, 2258, 60, 2017, 44, 2017, 62, 2259, 40, 2219, 60, 2017, 44, 2017, 62, 2220, 41, 123, 450, 418, 2258, 60, 62, 40, 41, 123, 64, 2049, 439, 492, 2260, 40, 381, 2017, 2228, 44, 324, 362, 41, 123, 463, 46, 2260, 40, 2228, 44, 362, 41, 59, 392, 40, 2228, 631, 424, 605, 33, 362, 41, 123, 2261, 40, 2228, 46, 2262, 40, 41, 41, 59, 125, 360, 2263, 40, 41, 59, 125, 125, 59, 125, 125, 41, 59, 2018, 46, 2239, 40, 41, 46, 2226, 40, 2220, 41, 59, 2220, 46, 2240, 40, 2241, 46, 2242, 40, 2017, 58, 58, 2264, 41, 41, 59, 2220, 61, 418, 2221, 60, 62, 40, 2222, 46, 2223, 40, 41, 41, 59, 2220, 46, 2224, 40, 1504, 41, 59, 2220, 46, 2227, 40, 40, 2228, 41, 45, 62, 418, 2229, 60, 62, 40, 2228, 46, 2230, 40, 41, 41, 41, 59, 2220, 46, 2231, 40, 418, 2232, 60, 62, 40, 41, 123, 64, 2049, 439, 2265, 60, 2017, 44, 2017, 62, 2266, 40, 2219, 60, 2017, 44, 2017, 62, 2220, 41, 123, 450, 418, 2265, 60, 62, 40, 41, 123, 64, 2049, 439, 492, 2267, 40, 381, 2017, 2228, 44, 324, 362, 41, 123, 463, 46, 2267, 40, 2228, 44, 362, 41, 59, 392, 40, 2228, 631, 424, 605, 33, 362, 41, 123, 2268, 40, 2228, 46, 2269, 40, 41, 41, 59, 125, 360, 2270, 40, 41, 59, 125, 125, 59, 125, 125, 41, 59, 2018, 46, 2239, 40, 41, 46, 2226, 40, 2220, 41, 59, 2220, 46, 2240, 40, 2241, 46, 2242, 40, 2017, 58, 58, 2271, 41, 41, 59, 2220, 61, 418, 2221, 60, 62, 40, 2222, 46, 2223, 40, 41, 41, 59, 2220, 46, 2224, 40, 1504, 41, 59, 2220, 46, 2225, 40, 41, 46, 2226, 40, 41, 59, 2220, 46, 2227, 40, 40, 2228, 41, 45, 62, 418, 2229, 60, 62, 40, 2228, 46, 2230, 40, 41, 41, 41, 59, 2220, 46, 2231, 40, 418, 2232, 60, 62, 40, 41, 123, 64, 2049, 439, 2272, 60, 2017, 44, 2017, 62, 2273, 40, 2219, 60, 2017, 44, 2017, 62, 2220, 41, 123, 450, 418, 2272, 60, 62, 40, 41, 123, 64, 2049, 439, 492, 2274, 40, 381, 2017, 2228, 44, 324, 362, 41, 123, 463, 46, 2274, 40, 2228, 44, 362, 41, 59, 392, 40, 2228, 631, 424, 605, 33, 362, 41, 123, 2275, 40, 2228, 46, 2276, 40, 41, 41, 59, 125, 360, 2277, 40, 41, 59, 125, 125, 59, 125, 125, 41, 59, 2018, 46, 2239, 40, 41, 46, 2226, 40, 2220, 41, 59, 2220, 46, 2240, 40, 2241, 46, 2242, 40, 2017, 58, 58, 2278, 41, 41, 59, 125, 125]",0.9997934,1
32,31542,Java,"@Provides
@HandlerPriority(value = 512) // 2^9; onParameter=@__(@NonNull) has to run first.
public class HandleNonNull extends JavacAnnotationHandler<NonNull> {
	private JCMethodDecl createRecordArgslessConstructor(JavacNode typeNode, JavacNode source, JCMethodDecl existingCtr) {
		JavacTreeMaker maker = typeNode.getTreeMaker();
		
		java.util.List<JCVariableDecl> fields = new ArrayList<JCVariableDecl>();
		for (JavacNode child : typeNode.down()) {
			if (child.getKind() == Kind.FIELD) {
				JCVariableDecl v = (JCVariableDecl) child.get();
				if ((v.mods.flags & RECORD) != 0) {
					fields.add(v);
				}
			}
		}
		
		ListBuffer<JCVariableDecl> params = new ListBuffer<JCVariableDecl>();
		
		for (int i = 0; i < fields.size(); i++) {
			JCVariableDecl arg = fields.get(i);
			JCModifiers mods = maker.Modifiers(GENERATED_MEMBER | Flags.PARAMETER, arg.mods.annotations);
			params.append(maker.VarDef(mods, arg.name, arg.vartype, null));
		}
		
		JCModifiers mods = maker.Modifiers(toJavacModifier(AccessLevel.PUBLIC) | COMPACT_RECORD_CONSTRUCTOR, List.<JCAnnotation>nil());
		JCBlock body = maker.Block(0L, List.<JCStatement>nil());
		if (existingCtr == null) {
			JCMethodDecl constr = maker.MethodDef(mods, typeNode.toName(""<init>""), null, List.<JCTypeParameter>nil(), params.toList(), List.<JCExpression>nil(), body, null);
			return recursiveSetGeneratedBy(constr, source);
		} else {
			existingCtr.mods = mods;
			existingCtr.body = body;
			existingCtr = recursiveSetGeneratedBy(existingCtr, source);
			addSuppressWarningsAll(existingCtr.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(existingCtr)), typeNode.getContext());
			addGenerated(existingCtr.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(existingCtr)), typeNode.getContext());
			return existingCtr;
		}
	}
	
	/**
	 * If the provided typeNode is a record, returns the compact constructor (there should only be one, but if the file is
	 * not semantically sound there might be more). If the only one in existence is the default auto-generated one, it is removed,
	 * a new explicit one is created, and that one is returned in a list.
	 * 
	 * Otherwise, an empty list is returned.
	 */
	private List<JCMethodDecl> addCompactConstructorIfNeeded(JavacNode typeNode, JavacNode source) {
		List<JCMethodDecl> answer = List.nil();
		
		if (typeNode == null || !(typeNode.get() instanceof JCClassDecl)) return answer;
		
		JCClassDecl cDecl = (JCClassDecl) typeNode.get();
		if ((cDecl.mods.flags & RECORD) == 0) return answer;
		
		boolean generateConstructor = false;
		
		JCMethodDecl existingCtr = null;
		
		for (JCTree def : cDecl.defs) {
			if (def instanceof JCMethodDecl) {
				JCMethodDecl md = (JCMethodDecl) def;
				if (md.name.contentEquals(""<init>"")) {
					if ((md.mods.flags & Flags.GENERATEDCONSTR) != 0) {
						existingCtr = md;
						existingCtr.mods.flags = existingCtr.mods.flags & ~Flags.GENERATEDCONSTR;
						generateConstructor = true;
					} else {
						if (!isTolerate(typeNode, md)) {
							if ((md.mods.flags & COMPACT_RECORD_CONSTRUCTOR) != 0) {
								generateConstructor = false;
								answer = answer.prepend(md);
							}
						}
					}
				}
			}
		}
		
		if (generateConstructor) {
			JCMethodDecl ctr;
			if (existingCtr != null) {
				ctr = createRecordArgslessConstructor(typeNode, source, existingCtr);
			} else {
				ctr = createRecordArgslessConstructor(typeNode, source, null);
				injectMethod(typeNode, ctr);
			}
			answer = answer.prepend(ctr);
		}
		
		return answer;
	}
	
	private void addNullCheckIfNeeded(JCMethodDecl method, JavacNode paramNode, JavacNode source) {
		// Possibly, if 'declaration instanceof ConstructorDeclaration', fetch declaration.constructorCall, search it for any references to our parameter,
		// and if they exist, create a new method in the class: 'private static <T> T lombok$nullCheck(T expr, String msg) {if (expr == null) throw NPE; return expr;}' and
		// wrap all references to it in the super/this to a call to this method.
		
		JCStatement nullCheck = recursiveSetGeneratedBy(generateNullCheck(source.getTreeMaker(), paramNode, source), source);
		
		if (nullCheck == null) {
			// @NonNull applied to a primitive. Kinda pointless. Let's generate a warning.
			source.addWarning(""@NonNull is meaningless on a primitive."");
			return;
		}
		
		List<JCStatement> statements = method.body.stats;
		
		String expectedName = paramNode.getName();
		
		/* Abort if the null check is already there, delving into try and synchronized statements */ {
			List<JCStatement> stats = statements;
			int idx = 0;
			while (stats.size() > idx) {
				JCStatement stat = stats.get(idx++);
				if (JavacHandlerUtil.isConstructorCall(stat)) continue;
				if (stat instanceof JCTry) {
					stats = ((JCTry) stat).body.stats;
					idx = 0;
					continue;
				}
				if (stat instanceof JCSynchronized) {
					stats = ((JCSynchronized) stat).body.stats;
					idx = 0;
					continue;
				}
				String varNameOfNullCheck = returnVarNameIfNullCheck(stat);
				if (varNameOfNullCheck == null) break;
				if (varNameOfNullCheck.equals(expectedName)) return;
			}
		}
		
		List<JCStatement> tail = statements;
		List<JCStatement> head = List.nil();
		for (JCStatement stat : statements) {
			if (JavacHandlerUtil.isConstructorCall(stat) || (JavacHandlerUtil.isGenerated(stat) && isNullCheck(stat))) {
				tail = tail.tail;
				head = head.prepend(stat);
				continue;
			}
			break;
		}
		
		List<JCStatement> newList = tail.prepend(nullCheck);
		for (JCStatement stat : head) newList = newList.prepend(stat);
		method.body.stats = newList;
		source.getAst().setChanged();
	}
	
	@Override public void handle(AnnotationValues<NonNull> annotation, JCAnnotation ast, JavacNode annotationNode) {
		handleFlagUsage(annotationNode, ConfigurationKeys.NON_NULL_FLAG_USAGE, ""@NonNull"");
		if (annotationNode.up().getKind() == Kind.FIELD) {
			// This is meaningless unless the field is used to generate a method (@Setter, @RequiredArgsConstructor, etc),
			// but in that case those handlers will take care of it. However, we DO check if the annotation is applied to
			// a primitive, because those handlers trigger on any annotation named @NonNull and we only want the warning
			// behaviour on _OUR_ 'lombok.NonNull'.
			
			try {
				if (isPrimitive(((JCVariableDecl) annotationNode.up().get()).vartype)) {
					annotationNode.addWarning(""@NonNull is meaningless on a primitive."");
				}
			} catch (Exception ignore) {}
			
			JCVariableDecl fDecl = (JCVariableDecl) annotationNode.up().get();
			if ((fDecl.mods.flags & RECORD) != 0) {
				// well, these kinda double as parameters (of the compact constructor), so we do some work here.
				
				List<JCMethodDecl> compactConstructors = addCompactConstructorIfNeeded(annotationNode.up().up(), annotationNode);
				for (JCMethodDecl ctr : compactConstructors) {
					addNullCheckIfNeeded(ctr, annotationNode.up(), annotationNode);
				}
			}
			return;
		}
		
		JCMethodDecl declaration;
		JavacNode paramNode;
		
		switch (annotationNode.up().getKind()) {
		case ARGUMENT:
			paramNode = annotationNode.up();
			break;
		case TYPE_USE:
			JavacNode typeNode = annotationNode.directUp();
			paramNode = typeNode.directUp();
			break;
		default:
			return;
		}
		
		if (paramNode.getKind() != Kind.ARGUMENT) return;
		try {
			declaration = (JCMethodDecl) paramNode.up().get();
		} catch (Exception e) {
			return;
		}
		
		if (declaration.body == null) {
			// This used to be a warning, but as @NonNull also has a documentary purpose, better to not warn about this. Since 1.16.7
			return;
		}
		
		if ((declaration.mods.flags & (GENERATED_MEMBER | COMPACT_RECORD_CONSTRUCTOR)) != 0) {
			// The 'real' annotations are on the `record Foo(@NonNull Obj x)` part and we just see these
			// syntax-sugared over. We deal with it on the field declaration variant, as those are always there,
			// not dependent on whether you write out the compact constructor or not.
			return;
		}
		
		addNullCheckIfNeeded(declaration, paramNode, annotationNode);
	}
	
	public boolean isNullCheck(JCStatement stat) {
		return returnVarNameIfNullCheck(stat) != null;
	}
	
	/**
	 * Checks if the statement is of the form 'if (x == null) {throw WHATEVER;}' or 'assert x != null;',
	 * where the block braces are optional. If it is of this form, returns ""x"".
	 * If it is not of this form, returns null.
	 */
	public String returnVarNameIfNullCheck(JCStatement stat) {
		boolean isIf = stat instanceof JCIf;
		boolean isExpression = stat instanceof JCExpressionStatement;
		if (!isIf && !(stat instanceof JCAssert) && !isExpression) return null;
		
		if (isExpression) {
			/* Check if the statements contains a call to checkNotNull or requireNonNull */
			JCExpression expression = ((JCExpressionStatement) stat).expr;
			if (expression instanceof JCAssign) expression = ((JCAssign) expression).rhs;
			if (!(expression instanceof JCMethodInvocation)) return null;
			
			JCMethodInvocation invocation = (JCMethodInvocation) expression;
			JCExpression method = invocation.meth;
			Name name = null;
			if (method instanceof JCFieldAccess) {
				name = ((JCFieldAccess) method).name;
			} else if (method instanceof JCIdent) {
				name = ((JCIdent) method).name;
			}
			if (name == null || (!name.contentEquals(""checkNotNull"") && !name.contentEquals(""requireNonNull""))) return null;
			
			if (invocation.args.isEmpty()) return null;
			JCExpression firstArgument = invocation.args.head;
			if (!(firstArgument instanceof JCIdent)) return null;
			return ((JCIdent) firstArgument).toString();
		}
		
		if (isIf) {
			/* Check that the if's statement is a throw statement, possibly in a block. */
			JCStatement then = ((JCIf) stat).thenpart;
			if (then instanceof JCBlock) {
				List<JCStatement> stats = ((JCBlock) then).stats;
				if (stats.length() == 0) return null;
				then = stats.get(0);
			}
			if (!(then instanceof JCThrow)) return null;
		}
		
		/* Check that the if's conditional is like 'x == null'. Return from this method (don't generate
		   a nullcheck) if 'x' is equal to our own variable's name: There's already a nullcheck here. */ {
			JCExpression cond = isIf ? ((JCIf) stat).cond : ((JCAssert) stat).cond;
			while (cond instanceof JCParens) cond = ((JCParens) cond).expr;
			if (!(cond instanceof JCBinary)) return null;
			JCBinary bin = (JCBinary) cond;
			if (isIf) {
				if (!CTC_EQUAL.equals(treeTag(bin))) return null;
			} else {
				if (!CTC_NOT_EQUAL.equals(treeTag(bin))) return null;
			}
			if (!(bin.lhs instanceof JCIdent)) return null;
			if (!(bin.rhs instanceof JCLiteral)) return null;
			if (!CTC_BOT.equals(typeTag(bin.rhs))) return null;
			return ((JCIdent) bin.lhs).name.toString();
		}
	}
}",1,"[64, 2000, 64, 2001, 40, 2002, 61, 1504, 41, 439, 334, 2003, 378, 2004, 60, 2005, 62, 123, 437, 2006, 2007, 40, 2008, 2009, 44, 2008, 2010, 44, 2006, 2011, 41, 123, 2012, 2013, 61, 2009, 46, 2014, 40, 41, 59, 2015, 46, 2016, 46, 2017, 60, 2018, 62, 2019, 61, 418, 2020, 60, 2018, 62, 40, 41, 59, 385, 40, 2008, 2021, 58, 2009, 46, 2022, 40, 41, 41, 123, 392, 40, 2021, 46, 2023, 40, 41, 614, 2024, 46, 2025, 41, 123, 2018, 2026, 61, 40, 2018, 41, 2021, 46, 2027, 40, 41, 59, 392, 40, 40, 2026, 46, 2028, 46, 2029, 38, 2030, 41, 631, 1500, 41, 123, 2019, 46, 2031, 40, 2026, 41, 59, 125, 125, 125, 2032, 60, 2018, 62, 433, 61, 418, 2032, 60, 2018, 62, 40, 41, 59, 385, 40, 404, 2033, 61, 1500, 59, 2033, 60, 2019, 46, 2034, 40, 41, 59, 2033, 637, 41, 123, 2018, 2035, 61, 2019, 46, 2036, 40, 2033, 41, 59, 2037, 2038, 61, 2013, 46, 2039, 40, 2040, 124, 2041, 46, 2042, 44, 2035, 46, 2038, 46, 2043, 41, 59, 433, 46, 2044, 40, 2013, 46, 2045, 40, 2038, 44, 2035, 46, 2046, 44, 2035, 46, 2047, 44, 424, 41, 41, 59, 125, 2048, 2049, 61, 2013, 46, 2050, 40, 2051, 40, 2052, 46, 2053, 41, 124, 2054, 44, 2017, 46, 60, 2055, 62, 2056, 40, 41, 41, 59, 2057, 2058, 61, 2013, 46, 2059, 40, 1500, 44, 2017, 46, 60, 2060, 62, 2056, 40, 41, 41, 59, 392, 40, 2011, 614, 424, 41, 123, 2006, 2061, 61, 2013, 46, 2062, 40, 2049, 44, 2009, 46, 2063, 40, 41, 44, 424, 44, 2017, 46, 60, 2064, 62, 2056, 40, 41, 44, 433, 46, 2065, 40, 41, 44, 2017, 46, 60, 2066, 62, 2056, 40, 41, 44, 2058, 44, 424, 41, 59, 450, 2067, 40, 2061, 44, 2010, 41, 59, 125, 360, 123, 2011, 46, 2049, 61, 2049, 59, 2011, 46, 2058, 61, 2058, 59, 2011, 61, 2068, 40, 2011, 44, 2010, 41, 59, 2069, 40, 2011, 46, 2049, 44, 2009, 44, 2009, 46, 2070, 40, 2071, 40, 2011, 41, 41, 44, 2009, 46, 2072, 40, 41, 41, 59, 2073, 40, 2011, 46, 2049, 44, 2009, 44, 2009, 46, 2070, 40, 2071, 40, 2011, 41, 41, 44, 2009, 46, 2072, 40, 41, 41, 59, 450, 2011, 59, 125, 125, 437, 2074, 60, 2006, 62, 2075, 40, 2008, 2009, 44, 2008, 2010, 41, 123, 2074, 60, 2006, 62, 2076, 61, 2074, 46, 2077, 40, 41, 59, 392, 40, 2009, 614, 424, 606, 33, 40, 2009, 46, 2078, 40, 41, 402, 2079, 41, 41, 450, 2076, 59, 2079, 2080, 61, 40, 2079, 41, 2009, 46, 2078, 40, 41, 59, 392, 40, 40, 2080, 46, 2081, 46, 2082, 38, 2083, 41, 614, 1500, 41, 450, 2076, 59, 324, 2084, 61, 380, 59, 2006, 2011, 61, 424, 59, 385, 40, 2085, 348, 58, 2080, 46, 2086, 41, 123, 392, 40, 348, 402, 2006, 41, 123, 2006, 2087, 61, 40, 2006, 41, 348, 59, 392, 40, 2087, 46, 2088, 46, 2089, 40, 41, 41, 123, 392, 40, 40, 2087, 46, 2081, 46, 2082, 38, 2090, 46, 2091, 41, 631, 1500, 41, 123, 2011, 61, 2087, 59, 2011, 46, 2081, 46, 2082, 61, 2011, 46, 2081, 46, 2082, 38, 126, 2090, 46, 2091, 59, 2084, 61, 473, 59, 125, 360, 123, 392, 40, 33, 2092, 40, 2009, 44, 2087, 41, 41, 123, 392, 40, 40, 2087, 46, 2081, 46, 2082, 38, 2093, 41, 631, 1500, 41, 123, 2084, 61, 380, 59, 2076, 61, 2076, 46, 2094, 40, 2087, 41, 59, 125, 125, 125, 125, 125, 125, 392, 40, 2084, 41, 123, 2006, 2095, 59, 392, 40, 2011, 631, 424, 41, 123, 2095, 61, 2007, 40, 2009, 44, 2010, 44, 2011, 41, 59, 125, 360, 123, 2095, 61, 2007, 40, 2009, 44, 2010, 44, 424, 41, 59, 2096, 40, 2009, 44, 2095, 41, 59, 125, 2076, 61, 2076, 46, 2097, 40, 2095, 41, 59, 125, 450, 2076, 59, 125, 437, 492, 2098, 40, 2006, 2099, 44, 2008, 2100, 44, 2008, 2010, 41, 123, 2101, 2102, 61, 2103, 40, 2104, 40, 2010, 46, 2105, 40, 41, 44, 2100, 44, 2010, 41, 44, 2010, 41, 59, 392, 40, 2102, 614, 424, 41, 123, 2010, 46, 2106, 40, 41, 59, 450, 59, 125, 2074, 60, 2101, 62, 2107, 61, 2099, 46, 2108, 46, 2109, 59, 2110, 2111, 61, 2100, 46, 2112, 40, 41, 59, 123, 2074, 60, 2101, 62, 2109, 61, 2107, 59, 404, 2113, 61, 1500, 59, 496, 40, 2109, 46, 2114, 40, 41, 62, 2113, 41, 123, 2101, 2115, 61, 2109, 46, 2116, 40, 2113, 637, 41, 59, 392, 40, 2117, 46, 2118, 40, 2115, 41, 41, 344, 59, 392, 40, 2115, 402, 2119, 41, 123, 2109, 61, 40, 40, 2119, 41, 2115, 41, 46, 2108, 46, 2109, 59, 2113, 61, 1500, 59, 344, 59, 125, 392, 40, 2115, 402, 2120, 41, 123, 2109, 61, 40, 40, 2120, 41, 2115, 41, 46, 2108, 46, 2109, 59, 2113, 61, 1500, 59, 344, 59, 125, 2110, 2121, 61, 2122, 40, 2115, 41, 59, 392, 40, 2121, 614, 424, 41, 325, 59, 392, 40, 2121, 46, 2123, 40, 2111, 41, 41, 450, 59, 125, 125, 2074, 60, 2101, 62, 2124, 61, 2107, 59, 2074, 60, 2101, 62, 2125, 61, 2074, 46, 2126, 40, 41, 59, 385, 40, 2101, 2127, 58, 2107, 41, 123, 392, 40, 2128, 46, 2129, 40, 2127, 41, 606, 40, 2128, 46, 2130, 40, 2127, 41, 605, 2131, 40, 2127, 41, 41, 41, 123, 2124, 61, 2124, 46, 2124, 59, 2125, 61, 2125, 46, 2132, 40, 2127, 41, 59, 344, 59, 125, 325, 59, 125, 2074, 60, 2101, 62, 2133, 61, 2124, 46, 2134, 40, 2102, 41, 59, 385, 40, 2101, 2127, 58, 2125, 41, 2133, 61, 2133, 46, 2134, 40, 2127, 41, 59, 2099, 46, 2108, 46, 2109, 61, 2133, 59, 2010, 46, 2135, 40, 41, 46, 2136, 40, 41, 59, 125, 64, 2137, 439, 492, 2138, 40, 2139, 60, 2005, 62, 2140, 44, 2141, 2142, 44, 2008, 2143, 41, 123, 2144, 40, 2143, 44, 2145, 46, 2146, 44, 41, 59, 392, 40, 2143, 46, 2147, 40, 41, 46, 2148, 40, 41, 614, 2149, 46, 2150, 41, 123, 474, 123, 392, 40, 2151, 40, 40, 40, 2152, 41, 2143, 46, 2147, 40, 41, 46, 2153, 40, 41, 41, 46, 2154, 41, 41, 123, 2143, 46, 2155, 40, 41, 59, 125, 125, 329, 40, 2156, 2157, 41, 123, 125, 2158, 2159, 61, 40, 2158, 41, 2143, 46, 2147, 40, 41, 46, 2160, 40, 41, 59, 392, 40, 40, 2159, 46, 2161, 46, 2162, 38, 2163, 41, 631, 1500, 41, 123, 2074, 60, 2006, 62, 2164, 61, 2075, 40, 2143, 46, 2147, 40, 41, 46, 2147, 40, 41, 44, 2143, 41, 59, 385, 40, 2006, 2165, 58, 2164, 41, 123, 2098, 40, 2165, 44, 2143, 46, 2147, 40, 41, 44, 2143, 41, 59, 125, 125, 450, 59, 125, 2006, 2166, 59, 2008, 2100, 59, 464, 40, 2143, 46, 2147, 40, 41, 46, 2148, 40, 41, 41, 123, 328, 2167, 58, 2100, 61, 2143, 46, 2147, 40, 41, 59, 325, 59, 328, 2168, 58, 2008, 2009, 61, 2143, 46, 2169, 40, 41, 59, 2100, 61, 2009, 46, 2169, 40, 41, 59, 325, 59, 349, 58, 450, 59, 125, 392, 40, 2100, 46, 2148, 40, 41, 631, 2149, 46, 2170, 41, 450, 59, 474, 123, 2166, 61, 40, 2006, 41, 2100, 46, 2147, 40, 41, 46, 2171, 40, 41, 59, 125, 329, 40, 2172, 2173, 41, 123, 450, 59, 125, 392, 40, 2166, 46, 2174, 614, 424, 41, 123, 450, 59, 125, 392, 40, 40, 2166, 46, 2175, 46, 2176, 38, 40, 2177, 124, 2178, 41, 41, 631, 1500, 41, 123, 450, 59, 125, 2098, 40, 2166, 44, 2100, 44, 2143, 41, 59, 125, 439, 324, 2179, 40, 2180, 2181, 41, 123, 450, 2182, 40, 2181, 41, 631, 424, 59, 125, 439, 2183, 2184, 40, 2180, 2181, 41, 123, 324, 2185, 61, 2181, 402, 2186, 59, 324, 2187, 61, 2181, 402, 2188, 59, 392, 40, 33, 2185, 605, 33, 40, 2181, 402, 2189, 41, 605, 33, 2187, 41, 450, 424, 59, 392, 40, 2187, 41, 123, 2190, 2191, 61, 40, 40, 2188, 41, 2181, 41, 46, 2192, 59, 392, 40, 2191, 402, 2193, 41, 2191, 61, 40, 40, 2193, 41, 2191, 41, 46, 2194, 59, 392, 40, 33, 40, 2191, 402, 2195, 41, 41, 450, 424, 59, 2195, 2196, 61, 40, 2195, 41, 2191, 59, 2190, 2099, 61, 2196, 46, 2197, 59, 2198, 2199, 61, 424, 59, 392, 40, 2099, 402, 2200, 41, 123, 2199, 61, 40, 40, 2200, 41, 2099, 41, 46, 2199, 59, 125, 360, 392, 40, 2099, 402, 2201, 41, 123, 2199, 61, 40, 40, 2201, 41, 2099, 41, 46, 2199, 59, 125, 392, 40, 2199, 614, 424, 606, 40, 33, 2199, 46, 2202, 40, 41, 605, 33, 2199, 46, 2202, 40, 41, 41, 41, 450, 424, 59, 392, 40, 2196, 46, 2203, 46, 2204, 40, 41, 41, 450, 424, 59, 2190, 2205, 61, 2196, 46, 2203, 46, 2206, 59, 392, 40, 33, 40, 2205, 402, 2201, 41, 41, 450, 424, 59, 450, 40, 40, 2201, 41, 2205, 41, 46, 2207, 40, 41, 59, 125, 392, 40, 2185, 41, 123, 2180, 2208, 61, 40, 40, 2186, 41, 2181, 41, 46, 2209, 59, 392, 40, 2208, 402, 2210, 41, 123, 2074, 60, 2180, 62, 2211, 61, 40, 40, 2210, 41, 2208, 41, 46, 2211, 59, 392, 40, 2211, 46, 2212, 40, 41, 614, 1500, 41, 450, 424, 59, 2208, 61, 2211, 46, 2213, 40, 1500, 41, 59, 125, 392, 40, 33, 40, 2208, 402, 2214, 41, 41, 450, 424, 59, 125, 123, 2215, 2216, 61, 2185, 63, 40, 40, 2186, 41, 2181, 41, 46, 2216, 58, 40, 40, 2189, 41, 2181, 41, 46, 2216, 59, 496, 40, 2216, 402, 2217, 41, 2216, 61, 40, 40, 2217, 41, 2216, 41, 46, 2218, 59, 392, 40, 33, 40, 2216, 402, 2219, 41, 41, 450, 424, 59, 2219, 2220, 61, 40, 2219, 41, 2216, 59, 392, 40, 2185, 41, 123, 392, 40, 33, 2221, 46, 2222, 40, 2223, 40, 2220, 41, 41, 41, 450, 424, 59, 125, 360, 123, 392, 40, 33, 2224, 46, 2225, 40, 2226, 40, 2220, 41, 41, 41, 450, 424, 59, 125, 392, 40, 33, 40, 2220, 46, 2227, 402, 2228, 41, 41, 450, 424, 59, 392, 40, 33, 40, 2220, 46, 2229, 402, 2230, 41, 41, 450, 424, 59, 392, 40, 33, 2231, 46, 2232, 40, 2233, 40, 2220, 46, 2229, 41, 41, 41, 450, 424, 59, 450, 40, 40, 2228, 41, 2220, 46, 2227, 41, 46, 2234, 46, 2235, 40, 41, 59, 125, 125, 125]",0.9990189,1
33,30602,Java,"@Provides
@HandlerPriority(value = 512) // 2^9; onParameter=@__(@NonNull) has to run first.
public class HandleNonNull extends EclipseAnnotationHandler<NonNull> {
	private static final char[] REQUIRE_NON_NULL = ""requireNonNull"".toCharArray();
	private static final char[] CHECK_NOT_NULL = ""checkNotNull"".toCharArray();
	
	public static final HandleNonNull INSTANCE = new HandleNonNull();
	
	public void fix(EclipseNode method) {
		for (EclipseNode m : method.down()) {
			if (m.getKind() != Kind.ARGUMENT) continue;
			for (EclipseNode c : m.down()) {
				if (c.getKind() == Kind.ANNOTATION) {
					if (annotationTypeMatches(NonNull.class, c)) {
						handle0((Annotation) c.get(), c, true);
					}
				}
			}
		}
	}
	
	private List<FieldDeclaration> getRecordComponents(EclipseNode typeNode) {
		List<FieldDeclaration> list = new ArrayList<FieldDeclaration>();
		
		for (EclipseNode child : typeNode.down()) {
			if (child.getKind() == Kind.FIELD) {
				FieldDeclaration fd = (FieldDeclaration) child.get();
				if ((fd.modifiers & AccRecord) != 0) list.add(fd);
			}
		}
		
		return list;
	}
	
	private EclipseNode addCompactConstructorIfNeeded(EclipseNode typeNode, EclipseNode annotationNode) {
		// explicit Compact Constructor has bits set: Bit32, IsCanonicalConstructor (10).
		// implicit Compact Constructor has bits set: Bit32, IsCanonicalConstructor (10), and IsImplicit (11).
		// explicit constructor with long-form shows up as a normal constructor (Bit32 set, that's all), but the
		//   implicit CC is then also present and will presumably be stripped out in some later phase.
		
		EclipseNode toRemove = null;
		EclipseNode existingCompactConstructor = null;
		List<FieldDeclaration> recordComponents = null;
		for (EclipseNode child : typeNode.down()) {
			if (!(child.get() instanceof ConstructorDeclaration)) continue;
			ConstructorDeclaration cd = (ConstructorDeclaration) child.get();
			if ((cd.bits & IsCanonicalConstructor) != 0) {
				if ((cd.bits & IsImplicit) != 0) {
					toRemove = child;
				} else {
					existingCompactConstructor = child;
				}
			} else {
				// If this constructor has exact matching types vs. the record components,
				// this is the canonical constructor in long form and we should not generate one.
				
				if (recordComponents == null) recordComponents = getRecordComponents(typeNode);
				int argLength = cd.arguments == null ? 0 : cd.arguments.length;
				int compLength = recordComponents.size();
				boolean isCanonical = argLength == compLength;
				if (isCanonical) top: for (int i = 0; i < argLength; i++) {
					TypeReference a = recordComponents.get(i).type;
					TypeReference b = cd.arguments[i] == null ? null : cd.arguments[i].type;
					// technically this won't match e.g. `java.lang.String` to just `String`;
					// to use this feature you'll need to use the same way to write it, which seems
					// like a fair requirement.
					char[][] ta = getRawTypeName(a);
					char[][] tb = getRawTypeName(b);
					if (ta == null || tb == null || ta.length != tb.length) {
						isCanonical = false;
						break top;
					}
					for (int j = 0; j < ta.length; j++) {
						if (!Arrays.equals(ta[j], tb[j])) {
							isCanonical = false;
							break top;
						}
					}
				}
				if (isCanonical) {
					return null;
				}
			}
		}
		if (existingCompactConstructor != null) return existingCompactConstructor;
		int posToInsert = -1;
		TypeDeclaration td = (TypeDeclaration) typeNode.get();
		if (toRemove != null) {
			int idxToRemove = -1;
			for (int i = 0; i < td.methods.length; i++) {
				if (td.methods[i] == toRemove.get()) idxToRemove = i;
			}
			if (idxToRemove != -1) {
				System.arraycopy(td.methods, idxToRemove + 1, td.methods, idxToRemove, td.methods.length - idxToRemove - 1);
				posToInsert = td.methods.length - 1;
				typeNode.removeChild(toRemove);
			}
		}
		if (posToInsert == -1) {
			AbstractMethodDeclaration[] na = new AbstractMethodDeclaration[td.methods.length + 1];
			posToInsert = td.methods.length;
			System.arraycopy(td.methods, 0, na, 0, posToInsert);
			td.methods = na;
		}
		
		ConstructorDeclaration cd = new ConstructorDeclaration(((CompilationUnitDeclaration) typeNode.top().get()).compilationResult);
		cd.modifiers = ClassFileConstants.AccPublic;
		cd.bits = ASTNode.Bit32 | ECLIPSE_DO_NOT_TOUCH_FLAG | IsCanonicalConstructor;
		cd.selector = td.name;
		cd.constructorCall = new ExplicitConstructorCall(ExplicitConstructorCall.ImplicitSuper);
		if (recordComponents == null) recordComponents = getRecordComponents(typeNode);
		cd.arguments = new Argument[recordComponents.size()];
		cd.statements = new Statement[recordComponents.size()];
		cd.bits = IsCanonicalConstructor;
		
		for (int i = 0; i < cd.arguments.length; i++) {
			FieldDeclaration cmp = recordComponents.get(i);
			cd.arguments[i] = new Argument(cmp.name, cmp.sourceStart, cmp.type, 0);
			cd.arguments[i].bits = ASTNode.IsArgument | ASTNode.IgnoreRawTypeCheck | ASTNode.IsReachable;
			FieldReference lhs = new FieldReference(cmp.name, 0);
			lhs.receiver = new ThisReference(0, 0);
			SingleNameReference rhs = new SingleNameReference(cmp.name, 0);
			cd.statements[i] = new Assignment(lhs, rhs, cmp.sourceEnd);
		}
		
		setGeneratedBy(cd, annotationNode.get());
		for (int i = 0; i < cd.arguments.length; i++) {
			FieldDeclaration cmp = recordComponents.get(i);
			cd.arguments[i].sourceStart = cmp.sourceStart;
			cd.arguments[i].sourceEnd = cmp.sourceStart;
			cd.arguments[i].declarationSourceEnd = cmp.sourceStart;
			cd.arguments[i].declarationEnd = cmp.sourceStart;
		}
		
		td.methods[posToInsert] = cd;
		cd.annotations = addSuppressWarningsAll(typeNode, cd, cd.annotations);
		cd.annotations = addGenerated(typeNode, cd, cd.annotations);
		return typeNode.add(cd, Kind.METHOD);
	}
	
	private static char[][] getRawTypeName(TypeReference a) {
		if (a instanceof QualifiedTypeReference) return ((QualifiedTypeReference) a).tokens;
		if (a instanceof SingleTypeReference) return new char[][] {((SingleTypeReference) a).token};
		return null;
	}
	
	@Override public void handle(AnnotationValues<NonNull> annotation, Annotation ast, EclipseNode annotationNode) {
		// Generating new methods is only possible during diet parse but modifying existing methods requires a full parse.
		// As we need both for @NonNull we reset the handled flag during diet parse.
		
		if (!annotationNode.isCompleteParse()) {
			if (annotationNode.up().getKind() == Kind.FIELD) {
				//Check if this is a record and we need to generate the compact form constructor.
				EclipseNode typeNode = annotationNode.up().up();
				if (typeNode.getKind() == Kind.TYPE) {
					if (isRecord(typeNode)) {
						addCompactConstructorIfNeeded(typeNode, annotationNode);
					}
				}
			}
			
			EcjAugments.ASTNode_handled.clear(ast);
			return;
		}
		
		handle0(ast, annotationNode, false);
	}
	
	private EclipseNode findCompactConstructor(EclipseNode typeNode) {
		for (EclipseNode child : typeNode.down()) {
			if (!(child.get() instanceof ConstructorDeclaration)) continue;
			ConstructorDeclaration cd = (ConstructorDeclaration) child.get();
			if ((cd.bits & IsCanonicalConstructor) != 0 && (cd.bits & IsImplicit) == 0) return child;
		}
		
		return null;
	}
	
	private void handle0(Annotation ast, EclipseNode annotationNode, boolean force) {
		handleFlagUsage(annotationNode, ConfigurationKeys.NON_NULL_FLAG_USAGE, ""@NonNull"");
		
		if (annotationNode.up().getKind() == Kind.FIELD) {
			// This is meaningless unless the field is used to generate a method (@Setter, @RequiredArgsConstructor, etc),
			// but in that case those handlers will take care of it. However, we DO check if the annotation is applied to
			// a primitive, because those handlers trigger on any annotation named @NonNull and we only want the warning
			// behaviour on _OUR_ 'lombok.NonNull'.
			EclipseNode fieldNode = annotationNode.up();
			EclipseNode typeNode = fieldNode.up();
			
			try {
				if (isPrimitive(((AbstractVariableDeclaration) annotationNode.up().get()).type)) {
					annotationNode.addWarning(""@NonNull is meaningless on a primitive."");
					return;
				}
			} catch (Exception ignore) {}
			
			if (isRecord(typeNode)) {
				// well, these kinda double as parameters (of the compact constructor), so we do some work here.
				// NB:Tthe diet parse run already added an explicit compact constructor if we need to take any actions.
				EclipseNode compactConstructor = findCompactConstructor(typeNode);
				
				if (compactConstructor != null) {
					addNullCheckIfNeeded((AbstractMethodDeclaration) compactConstructor.get(), (AbstractVariableDeclaration) fieldNode.get(), annotationNode);
				}
			}
			
			return;
		}
		
		Argument param;
		EclipseNode paramNode;
		AbstractMethodDeclaration declaration;
		
		switch (annotationNode.up().getKind()) {
		case ARGUMENT:
			paramNode = annotationNode.up();
			break;
		case TYPE_USE:
			EclipseNode typeNode = annotationNode.directUp();
			boolean ok = false;
			ASTNode astNode = typeNode.get();
			if (astNode instanceof TypeReference) {
				Annotation[] anns = EclipseAST.getTopLevelTypeReferenceAnnotations((TypeReference) astNode);
				if (anns == null) return;
				for (Annotation ann : anns) if (ast == ann) ok = true;
			}
			if (!ok) return;
			paramNode = typeNode.directUp();
			break;
		default:
			return;
		}
		
		try {
			param = (Argument) paramNode.get();
			declaration = (AbstractMethodDeclaration) paramNode.up().get();
		} catch (Exception e) {
			return;
		}
		
		if (!force && isGenerated(declaration)) return;
		
		if (declaration.isAbstract()) {
			// This used to be a warning, but as @NonNull also has a documentary purpose, better to not warn about this. Since 1.16.7
			return;
		}
		
		addNullCheckIfNeeded(declaration, param, annotationNode);
		paramNode.up().rebuild();
	}
	
	private void addNullCheckIfNeeded(AbstractMethodDeclaration declaration, AbstractVariableDeclaration param, EclipseNode annotationNode) {
		// Possibly, if 'declaration instanceof ConstructorDeclaration', fetch declaration.constructorCall, search it for any references to our parameter,
		// and if they exist, create a new method in the class: 'private static <T> T lombok$nullCheck(T expr, String msg) {if (expr == null) throw NPE; return expr;}' and
		// wrap all references to it in the super/this to a call to this method.
		
		Statement nullCheck = generateNullCheck(param, annotationNode, null);
		
		if (nullCheck == null) {
			// @NonNull applied to a primitive. Kinda pointless. Let's generate a warning.
			annotationNode.addWarning(""@NonNull is meaningless on a primitive."");
			return;
		}
		
		if (declaration.statements == null) {
			declaration.statements = new Statement[] {nullCheck};
		} else {
			char[] expectedName = param.name;
			/* Abort if the null check is already there, delving into try and synchronized statements */ {
				Statement[] stats = declaration.statements;
				int idx = 0;
				while (stats != null && stats.length > idx) {
					Statement stat = stats[idx++];
					if (stat instanceof TryStatement) {
						stats = ((TryStatement) stat).tryBlock.statements;
						idx = 0;
						continue;
					}
					if (stat instanceof SynchronizedStatement) {
						stats = ((SynchronizedStatement) stat).block.statements;
						idx = 0;
						continue;
					}
					char[] varNameOfNullCheck = returnVarNameIfNullCheck(stat);
					if (varNameOfNullCheck == null) break;
					if (Arrays.equals(varNameOfNullCheck, expectedName)) return;
				}
			}
			
			Statement[] newStatements = new Statement[declaration.statements.length + 1];
			int skipOver = 0;
			for (Statement stat : declaration.statements) {
				if (isGenerated(stat) && isNullCheck(stat)) skipOver++;
				else break;
			}
			System.arraycopy(declaration.statements, 0, newStatements, 0, skipOver);
			System.arraycopy(declaration.statements, skipOver, newStatements, skipOver + 1, declaration.statements.length - skipOver);
			newStatements[skipOver] = nullCheck;
			declaration.statements = newStatements;
		}
	}
	
	public boolean isNullCheck(Statement stat) {
		return returnVarNameIfNullCheck(stat) != null;
	}
	
	public char[] returnVarNameIfNullCheck(Statement stat) {
		boolean isIf = stat instanceof IfStatement;
		boolean isExpression = stat instanceof Expression;
		if (!isIf && !(stat instanceof AssertStatement) && !isExpression) return null;
		
		if (isExpression) {
			/* Check if the statements contains a call to checkNotNull or requireNonNull */
			Expression expression = (Expression) stat;
			if (expression instanceof Assignment) expression = ((Assignment) expression).expression;
			if (!(expression instanceof MessageSend)) return null;
			
			MessageSend invocation = (MessageSend) expression;
			if (!Arrays.equals(invocation.selector, CHECK_NOT_NULL) && !Arrays.equals(invocation.selector, REQUIRE_NON_NULL)) return null;
			if (invocation.arguments == null || invocation.arguments.length == 0) return null;
			Expression firstArgument = invocation.arguments[0];
			if (!(firstArgument instanceof SingleNameReference)) return null;
			return ((SingleNameReference) firstArgument).token;
		}
		
		if (isIf) {
			/* Check that the if's statement is a throw statement, possibly in a block. */
			Statement then = ((IfStatement) stat).thenStatement;
			if (then instanceof Block) {
				Statement[] blockStatements = ((Block) then).statements;
				if (blockStatements == null || blockStatements.length == 0) return null;
				then = blockStatements[0];
			}
			
			if (!(then instanceof ThrowStatement)) return null;
		}
		
		/* Check that the if's conditional is like 'x == null'. Return from this method (don't generate
		   a nullcheck) if 'x' is equal to our own variable's name: There's already a nullcheck here. */ {
			Expression cond = isIf ? ((IfStatement) stat).condition : ((AssertStatement) stat).assertExpression;
			if (!(cond instanceof EqualExpression)) return null;
			EqualExpression bin = (EqualExpression) cond;
			String op = bin.operatorToString();
			if (isIf) {
				if (!""=="".equals(op)) return null;
			} else {
				if (!""!="".equals(op)) return null;
			}
			if (!(bin.left instanceof SingleNameReference)) return null;
			if (!(bin.right instanceof NullLiteral)) return null;
			return ((SingleNameReference) bin.left).token;
		}
	}
}",1,"[64, 2000, 64, 2001, 40, 2002, 61, 1504, 41, 439, 334, 2003, 378, 2004, 60, 2005, 62, 123, 437, 457, 381, 330, 91, 93, 2006, 61, 46, 2007, 40, 41, 59, 437, 457, 381, 330, 91, 93, 2008, 61, 46, 2007, 40, 41, 59, 439, 457, 381, 2003, 2009, 61, 418, 2003, 40, 41, 59, 439, 492, 2010, 40, 2011, 2012, 41, 123, 385, 40, 2011, 2013, 58, 2012, 46, 2014, 40, 41, 41, 123, 392, 40, 2013, 46, 2015, 40, 41, 631, 2016, 46, 2017, 41, 344, 59, 385, 40, 2011, 2018, 58, 2013, 46, 2014, 40, 41, 41, 123, 392, 40, 2018, 46, 2015, 40, 41, 614, 2016, 46, 2019, 41, 123, 392, 40, 2020, 40, 2005, 46, 334, 44, 2018, 41, 41, 123, 2021, 40, 40, 2022, 41, 2018, 46, 2023, 40, 41, 44, 2018, 44, 473, 41, 59, 125, 125, 125, 125, 125, 437, 2024, 60, 2025, 62, 2026, 40, 2011, 2027, 41, 123, 2024, 60, 2025, 62, 411, 61, 418, 2028, 60, 2025, 62, 40, 41, 59, 385, 40, 2011, 2029, 58, 2027, 46, 2030, 40, 41, 41, 123, 392, 40, 2029, 46, 2031, 40, 41, 614, 2032, 46, 2033, 41, 123, 2025, 2034, 61, 40, 2025, 41, 2029, 46, 2035, 40, 41, 59, 392, 40, 40, 2034, 46, 2036, 38, 2037, 41, 631, 1500, 41, 411, 46, 2038, 40, 2034, 41, 59, 125, 125, 450, 411, 59, 125, 437, 2011, 2039, 40, 2011, 2027, 44, 2011, 2040, 41, 123, 2011, 2041, 61, 424, 59, 2011, 2042, 61, 424, 59, 2024, 60, 2025, 62, 2043, 61, 424, 59, 385, 40, 2011, 2044, 58, 2027, 46, 2045, 40, 41, 41, 123, 392, 40, 33, 40, 2044, 46, 2046, 40, 41, 402, 2047, 41, 41, 344, 59, 2047, 2048, 61, 40, 2047, 41, 2044, 46, 2046, 40, 41, 59, 392, 40, 40, 2048, 46, 2049, 38, 2050, 41, 631, 1500, 41, 123, 392, 40, 40, 2048, 46, 2049, 38, 2051, 41, 631, 1500, 41, 123, 2041, 61, 2044, 59, 125, 360, 123, 2042, 61, 2044, 59, 125, 125, 360, 123, 392, 40, 2043, 614, 424, 41, 2043, 61, 2026, 40, 2027, 41, 59, 404, 2052, 61, 2048, 46, 2053, 614, 424, 63, 1500, 58, 2048, 46, 2053, 46, 2054, 59, 404, 2055, 61, 2043, 46, 2056, 40, 41, 59, 324, 2057, 61, 2052, 614, 2055, 59, 392, 40, 2057, 41, 2058, 58, 385, 40, 404, 2059, 61, 1500, 59, 2059, 60, 2052, 59, 2059, 637, 41, 123, 2060, 2061, 61, 2043, 46, 2046, 40, 2059, 41, 46, 2062, 59, 2060, 2063, 61, 2048, 46, 2053, 91, 2059, 93, 614, 424, 63, 424, 58, 2048, 46, 2053, 91, 2059, 93, 46, 2062, 59, 330, 91, 93, 91, 93, 2064, 61, 2065, 40, 2061, 41, 59, 330, 91, 93, 91, 93, 2066, 61, 2065, 40, 2063, 41, 59, 392, 40, 2064, 614, 424, 606, 2066, 614, 424, 606, 2064, 46, 2054, 631, 2066, 46, 2054, 41, 123, 2057, 61, 380, 59, 325, 2058, 59, 125, 385, 40, 404, 2067, 61, 1500, 59, 2067, 60, 2064, 46, 2054, 59, 2067, 637, 41, 123, 392, 40, 33, 2068, 46, 2069, 40, 2064, 91, 2067, 93, 44, 2066, 91, 2067, 93, 41, 41, 123, 2057, 61, 380, 59, 325, 2058, 59, 125, 125, 125, 392, 40, 2057, 41, 123, 450, 424, 59, 125, 125, 125, 392, 40, 2042, 631, 424, 41, 450, 2042, 59, 404, 2070, 61, 45, 1501, 59, 2071, 2072, 61, 40, 2071, 41, 2027, 46, 2073, 40, 41, 59, 392, 40, 2041, 631, 424, 41, 123, 404, 2074, 61, 45, 1501, 59, 385, 40, 404, 2075, 61, 1500, 59, 2075, 60, 2072, 46, 2076, 46, 2077, 59, 2075, 637, 41, 123, 392, 40, 2072, 46, 2076, 91, 2075, 93, 614, 2041, 46, 2073, 40, 41, 41, 2074, 61, 2075, 59, 125, 392, 40, 2074, 631, 45, 1501, 41, 123, 2078, 46, 2079, 40, 2072, 46, 2076, 44, 2074, 43, 1501, 44, 2072, 46, 2076, 44, 2074, 44, 2072, 46, 2076, 46, 2077, 45, 2074, 45, 1501, 41, 59, 2070, 61, 2072, 46, 2076, 46, 2077, 45, 1501, 59, 2027, 46, 2080, 40, 2041, 41, 59, 125, 125, 392, 40, 2070, 614, 45, 1501, 41, 123, 2081, 91, 93, 2082, 61, 418, 2081, 91, 2072, 46, 2083, 46, 2084, 43, 1501, 93, 59, 2070, 61, 2072, 46, 2083, 46, 2084, 59, 2085, 46, 2086, 40, 2072, 46, 2083, 44, 1500, 44, 2082, 44, 1500, 44, 2070, 41, 59, 2072, 46, 2083, 61, 2082, 59, 125, 2087, 2088, 61, 418, 2087, 40, 40, 40, 2089, 41, 2027, 46, 2090, 40, 41, 46, 2073, 40, 41, 41, 46, 2091, 41, 59, 2088, 46, 2092, 61, 2093, 46, 2094, 59, 2088, 46, 2095, 61, 2096, 46, 2097, 124, 2098, 124, 2099, 59, 2088, 46, 2100, 61, 2072, 46, 2101, 59, 2088, 46, 2102, 61, 418, 2103, 40, 2103, 46, 2104, 41, 59, 392, 40, 2043, 614, 424, 41, 2043, 61, 2026, 40, 2027, 41, 59, 2088, 46, 2105, 61, 418, 2106, 91, 2043, 46, 2107, 40, 41, 93, 59, 2088, 46, 2108, 61, 418, 2109, 91, 2043, 46, 2107, 40, 41, 93, 59, 2088, 46, 2095, 61, 2099, 59, 385, 40, 404, 2110, 61, 1500, 59, 2110, 60, 2088, 46, 2105, 46, 2111, 59, 2110, 637, 41, 123, 2025, 2112, 61, 2043, 46, 2073, 40, 2110, 41, 59, 2088, 46, 2105, 91, 2110, 93, 61, 418, 2106, 40, 2112, 46, 2101, 44, 2112, 46, 2113, 44, 2112, 46, 2114, 44, 1500, 41, 59, 2088, 46, 2105, 91, 2110, 93, 46, 2095, 61, 2096, 46, 2115, 124, 2096, 46, 2116, 124, 2096, 46, 2117, 59, 2118, 2119, 61, 418, 2118, 40, 2112, 46, 2101, 44, 1500, 41, 59, 2119, 46, 2120, 61, 418, 2121, 40, 1500, 44, 1500, 41, 59, 2122, 2123, 61, 418, 2122, 40, 2112, 46, 2101, 44, 1500, 41, 59, 2088, 46, 2108, 91, 2110, 93, 61, 418, 2124, 40, 2119, 44, 2123, 44, 2112, 46, 2125, 41, 59, 125, 2126, 40, 2088, 44, 2040, 46, 2073, 40, 41, 41, 59, 385, 40, 404, 2110, 61, 1500, 59, 2110, 60, 2088, 46, 2105, 46, 2111, 59, 2110, 637, 41, 123, 2025, 2127, 61, 2043, 46, 2073, 40, 2110, 41, 59, 2088, 46, 2105, 91, 2110, 93, 46, 2128, 61, 2127, 46, 2128, 59, 2088, 46, 2105, 91, 2110, 93, 46, 2129, 61, 2127, 46, 2128, 59, 2088, 46, 2105, 91, 2110, 93, 46, 2130, 61, 2127, 46, 2128, 59, 2088, 46, 2105, 91, 2110, 93, 46, 2131, 61, 2127, 46, 2128, 59, 125, 2072, 46, 2132, 91, 2070, 93, 61, 2088, 59, 2088, 46, 2133, 61, 2134, 40, 2027, 44, 2088, 44, 2088, 46, 2133, 41, 59, 2088, 46, 2133, 61, 2135, 40, 2027, 44, 2088, 44, 2088, 46, 2133, 41, 59, 450, 2027, 46, 2136, 40, 2088, 44, 2137, 46, 2138, 41, 59, 125, 437, 457, 330, 91, 93, 91, 93, 2139, 40, 2140, 2141, 41, 123, 392, 40, 2141, 402, 2142, 41, 450, 40, 40, 2142, 41, 2141, 41, 46, 2143, 59, 392, 40, 2141, 402, 2144, 41, 450, 418, 330, 91, 93, 91, 93, 123, 40, 40, 2144, 41, 2141, 41, 46, 2145, 125, 59, 450, 424, 59, 125, 64, 2146, 439, 492, 2147, 40, 2148, 60, 2005, 62, 2149, 44, 2150, 2151, 44, 2011, 2040, 41, 123, 392, 40, 33, 2040, 46, 2152, 40, 41, 41, 123, 392, 40, 2040, 46, 2153, 40, 41, 46, 2154, 40, 41, 614, 2155, 46, 2156, 41, 123, 2011, 2027, 61, 2040, 46, 2153, 40, 41, 46, 2153, 40, 41, 59, 392, 40, 2027, 46, 2154, 40, 41, 614, 2155, 46, 2157, 41, 123, 392, 40, 2158, 40, 2027, 41, 41, 123, 2039, 40, 2027, 44, 2040, 41, 59, 125, 125, 125, 2159, 46, 2160, 46, 2161, 40, 2151, 41, 59, 450, 59, 125, 2162, 40, 2151, 44, 2040, 44, 380, 41, 59, 125, 437, 2011, 2163, 40, 2011, 2027, 41, 123, 385, 40, 2011, 2164, 58, 2027, 46, 2165, 40, 41, 41, 123, 392, 40, 33, 40, 2164, 46, 2166, 40, 41, 402, 2167, 41, 41, 344, 59, 2167, 2168, 61, 40, 2167, 41, 2164, 46, 2166, 40, 41, 59, 392, 40, 40, 2168, 46, 2169, 38, 2170, 41, 631, 1500, 605, 40, 2168, 46, 2169, 38, 2171, 41, 614, 1500, 41, 450, 2164, 59, 125, 450, 424, 59, 125, 437, 492, 2172, 40, 2150, 2151, 44, 2011, 2040, 44, 324, 2173, 41, 123, 2174, 40, 2040, 44, 2175, 46, 2176, 44, 41, 59, 392, 40, 2040, 46, 2177, 40, 41, 46, 2178, 40, 41, 614, 2179, 46, 2180, 41, 123, 2011, 2181, 61, 2040, 46, 2177, 40, 41, 59, 2011, 2027, 61, 2181, 46, 2177, 40, 41, 59, 474, 123, 392, 40, 2182, 40, 40, 40, 2183, 41, 2040, 46, 2177, 40, 41, 46, 2184, 40, 41, 41, 46, 2185, 41, 41, 123, 2040, 46, 2186, 40, 41, 59, 450, 59, 125, 125, 329, 40, 2187, 2188, 41, 123, 125, 392, 40, 2189, 40, 2027, 41, 41, 123, 2011, 2190, 61, 2163, 40, 2027, 41, 59, 392, 40, 2190, 631, 424, 41, 123, 2191, 40, 40, 2192, 41, 2190, 46, 2193, 40, 41, 44, 40, 2194, 41, 2181, 46, 2193, 40, 41, 44, 2040, 41, 59, 125, 125, 450, 59, 125, 2195, 2196, 59, 2011, 2197, 59, 2198, 2199, 59, 464, 40, 2040, 46, 2177, 40, 41, 46, 2178, 40, 41, 41, 123, 328, 2200, 58, 2197, 61, 2040, 46, 2177, 40, 41, 59, 325, 59, 328, 2201, 58, 2011, 2027, 61, 2040, 46, 2202, 40, 41, 59, 324, 2203, 61, 380, 59, 2204, 2205, 61, 2027, 46, 2206, 40, 41, 59, 392, 40, 2205, 402, 2140, 41, 123, 2150, 91, 93, 2207, 61, 2208, 46, 2209, 40, 40, 2140, 41, 2205, 41, 59, 392, 40, 2207, 614, 424, 41, 450, 59, 385, 40, 2150, 2210, 58, 2207, 41, 392, 40, 2151, 614, 2210, 41, 2203, 61, 473, 59, 125, 392, 40, 33, 2203, 41, 450, 59, 2197, 61, 2027, 46, 2202, 40, 41, 59, 325, 59, 349, 58, 450, 59, 125, 474, 123, 2196, 61, 40, 2195, 41, 2197, 46, 2211, 40, 41, 59, 2199, 61, 40, 2198, 41, 2197, 46, 2177, 40, 41, 46, 2211, 40, 41, 59, 125, 329, 40, 2212, 2213, 41, 123, 450, 59, 125, 392, 40, 33, 2173, 605, 2214, 40, 2199, 41, 41, 450, 59, 392, 40, 2199, 46, 2215, 40, 41, 41, 123, 450, 59, 125, 2216, 40, 2199, 44, 2196, 44, 2040, 41, 59, 2197, 46, 2177, 40, 41, 46, 2217, 40, 41, 59, 125, 437, 492, 2218, 40, 2219, 2220, 44, 2221, 2222, 44, 2011, 2040, 41, 123, 2223, 2224, 61, 2225, 40, 2222, 44, 2040, 44, 424, 41, 59, 392, 40, 2224, 614, 424, 41, 123, 2040, 46, 2226, 40, 41, 59, 450, 59, 125, 392, 40, 2220, 46, 2227, 614, 424, 41, 123, 2220, 46, 2227, 61, 418, 2223, 91, 93, 123, 2224, 125, 59, 125, 360, 123, 330, 91, 93, 2228, 61, 2222, 46, 2229, 59, 123, 2223, 91, 93, 2230, 61, 2220, 46, 2227, 59, 404, 2231, 61, 1500, 59, 496, 40, 2230, 631, 424, 605, 2230, 46, 2232, 62, 2231, 41, 123, 2223, 2233, 61, 2230, 91, 2231, 637, 93, 59, 392, 40, 2233, 402, 2234, 41, 123, 2230, 61, 40, 40, 2234, 41, 2233, 41, 46, 2235, 46, 2227, 59, 2231, 61, 1500, 59, 344, 59, 125, 392, 40, 2233, 402, 2236, 41, 123, 2230, 61, 40, 40, 2236, 41, 2233, 41, 46, 2237, 46, 2227, 59, 2231, 61, 1500, 59, 344, 59, 125, 330, 91, 93, 2238, 61, 2239, 40, 2233, 41, 59, 392, 40, 2238, 614, 424, 41, 325, 59, 392, 40, 2240, 46, 2241, 40, 2238, 44, 2228, 41, 41, 450, 59, 125, 125, 2223, 91, 93, 2242, 61, 418, 2223, 91, 2220, 46, 2227, 46, 2243, 43, 1501, 93, 59, 404, 2244, 61, 1500, 59, 385, 40, 2223, 2245, 58, 2220, 46, 2227, 41, 123, 392, 40, 2246, 40, 2245, 41, 605, 2247, 40, 2245, 41, 41, 2244, 637, 59, 360, 325, 59, 125, 2248, 46, 2249, 40, 2220, 46, 2227, 44, 1500, 44, 2242, 44, 1500, 44, 2244, 41, 59, 2248, 46, 2249, 40, 2220, 46, 2227, 44, 2244, 44, 2242, 44, 2244, 43, 1501, 44, 2220, 46, 2227, 46, 2243, 45, 2244, 41, 59, 2242, 91, 2244, 93, 61, 2224, 59, 2220, 46, 2227, 61, 2242, 59, 125, 125, 439, 324, 2250, 40, 2251, 2252, 41, 123, 450, 2253, 40, 2252, 41, 631, 424, 59, 125, 439, 330, 91, 93, 2254, 40, 2251, 2252, 41, 123, 324, 2255, 61, 2252, 402, 2256, 59, 324, 2257, 61, 2252, 402, 2258, 59, 392, 40, 33, 2255, 605, 33, 40, 2252, 402, 2259, 41, 605, 33, 2257, 41, 450, 424, 59, 392, 40, 2257, 41, 123, 2258, 2260, 61, 40, 2258, 41, 2252, 59, 392, 40, 2260, 402, 2261, 41, 2260, 61, 40, 40, 2261, 41, 2260, 41, 46, 2260, 59, 392, 40, 33, 40, 2260, 402, 2262, 41, 41, 450, 424, 59, 2262, 2263, 61, 40, 2262, 41, 2260, 59, 392, 40, 33, 2264, 46, 2265, 40, 2263, 46, 2266, 44, 2008, 41, 605, 33, 2264, 46, 2265, 40, 2263, 46, 2266, 44, 2006, 41, 41, 450, 424, 59, 392, 40, 2263, 46, 2267, 614, 424, 606, 2263, 46, 2267, 46, 2268, 614, 1500, 41, 450, 424, 59, 2258, 2269, 61, 2263, 46, 2267, 91, 1500, 93, 59, 392, 40, 33, 40, 2269, 402, 2270, 41, 41, 450, 424, 59, 450, 40, 40, 2270, 41, 2269, 41, 46, 2271, 59, 125, 392, 40, 2255, 41, 123, 2251, 2272, 61, 40, 40, 2256, 41, 2252, 41, 46, 2273, 59, 392, 40, 2272, 402, 2274, 41, 123, 2251, 91, 93, 2275, 61, 40, 40, 2274, 41, 2272, 41, 46, 2276, 59, 392, 40, 2275, 614, 424, 606, 2275, 46, 2277, 614, 1500, 41, 450, 424, 59, 2272, 61, 2275, 91, 1500, 93, 59, 125, 392, 40, 33, 40, 2272, 402, 2278, 41, 41, 450, 424, 59, 125, 123, 2258, 2279, 61, 2255, 63, 40, 40, 2256, 41, 2252, 41, 46, 2280, 58, 40, 40, 2259, 41, 2252, 41, 46, 2281, 59, 392, 40, 33, 40, 2279, 402, 2282, 41, 41, 450, 424, 59, 2282, 2283, 61, 40, 2282, 41, 2279, 59, 2284, 2285, 61, 2283, 46, 2286, 40, 41, 59, 392, 40, 2255, 41, 123, 392, 40, 33, 46, 2287, 40, 2285, 41, 41, 450, 424, 59, 125, 360, 123, 392, 40, 33, 46, 2288, 40, 2285, 41, 41, 450, 424, 59, 125, 392, 40, 33, 40, 2283, 46, 2289, 402, 2290, 41, 41, 450, 424, 59, 392, 40, 33, 40, 2283, 46, 2291, 402, 2292, 41, 41, 450, 424, 59, 450, 40, 40, 2290, 41, 2283, 46, 2289, 41, 46, 2293, 59, 125, 125, 125]",0.9996242,1
34,29305,Java,"public class JavacHandlerUtil {
	private JavacHandlerUtil() {
		//Prevent instantiation
	}
	
	private static class MarkingScanner extends TreeScanner {
		private final JavacNode source;
		
		MarkingScanner(JavacNode source) {
			this.source = source;
		}
		
		@Override public void scan(JCTree tree) {
			if (tree == null) return;
			setGeneratedBy(tree, source);
			super.scan(tree);
		}
	}
	
	/**
	 * Contributed by Jan Lahoda; many lombok transformations should not be run (or a lite version should be run) when the netbeans editor
	 * is running javac on the open source file to find inline errors and such. As class files are compiled separately this does not affect
	 * actual runtime behaviour or file output of the netbeans IDE.
	 */
	public static boolean inNetbeansEditor(JavacNode node) {
		return inNetbeansEditor(node.getContext());
	}
	
	public static boolean inNetbeansEditor(Context context) {
		Options options = Options.instance(context);
		return (options.keySet().contains(""ide"") && !options.keySet().contains(""backgroundCompilation""));
	}
	
	public static boolean inNetbeansCompileOnSave(Context context) {
		Options options = Options.instance(context);
		return (options.keySet().contains(""ide"") && options.keySet().contains(""backgroundCompilation""));
	}
	
	public static JCTree getGeneratedBy(JCTree node) {
		return JCTree_generatedNode.get(node);
	}
	
	public static boolean isGenerated(JCTree node) {
		return getGeneratedBy(node) != null;
	}
	
	public static <T extends JCTree> T recursiveSetGeneratedBy(T node, JavacNode source) {
		if (node == null) return null;
		setGeneratedBy(node, source);
		node.accept(new MarkingScanner(source));
		return node;
	}
	
	public static <T extends JCTree> T setGeneratedBy(T node, JavacNode sourceNode) {
		if (node == null) return null;
		if (sourceNode == null) {
			JCTree_generatedNode.clear(node);
			return node;
		}
		JCTree_generatedNode.set(node, sourceNode.get());
		
		if (!inNetbeansEditor(sourceNode.getContext()) || isParameter(node)) {
			node.pos = sourceNode.getStartPos();
			storeEnd(node, sourceNode.getEndPosition(), (JCCompilationUnit) sourceNode.top().get());
		}
		return node;
	}

	public static boolean isParameter(JCTree node) {
		return node instanceof JCVariableDecl && (((JCVariableDecl) node).mods.flags & Flags.PARAMETER) != 0;
	}
	
	public static boolean hasAnnotation(String type, JavacNode node) {
		return hasAnnotation(type, node, false);
	}
	
	public static boolean hasAnnotation(Class<? extends Annotation> type, JavacNode node) {
		return hasAnnotation(type, node, false);
	}
	
	public static boolean hasAnnotationAndDeleteIfNeccessary(Class<? extends Annotation> type, JavacNode node) {
		return hasAnnotation(type, node, true);
	}
	
	private static boolean hasAnnotation(Class<? extends Annotation> type, JavacNode node, boolean delete) {
		if (node == null) return false;
		if (type == null) return false;
		switch (node.getKind()) {
		case ARGUMENT:
		case FIELD:
		case LOCAL:
		case TYPE:
		case METHOD:
			for (JavacNode child : node.down()) {
				if (annotationTypeMatches(type, child)) {
					if (delete) deleteAnnotationIfNeccessary(child, type);
					return true;
				}
			}
			// intentional fallthrough
		default:
			return false;
		}
	}
	
	private static boolean hasAnnotation(String type, JavacNode node, boolean delete) {
		if (node == null) return false;
		if (type == null) return false;
		switch (node.getKind()) {
		case ARGUMENT:
		case FIELD:
		case LOCAL:
		case TYPE:
		case METHOD:
			for (JavacNode child : node.down()) {
				if (annotationTypeMatches(type, child)) {
					if (delete) deleteAnnotationIfNeccessary(child, type);
					return true;
				}
			}
			// intentional fallthrough
		default:
			return false;
		}
	}
	
	public static JavacNode findInnerClass(JavacNode parent, String name) {
		for (JavacNode child : parent.down()) {
			if (child.getKind() != Kind.TYPE) continue;
			JCClassDecl td = (JCClassDecl) child.get();
			if (td.name.contentEquals(name)) return child;
		}
		return null;
	}
	
	public static JavacNode findAnnotation(Class<? extends Annotation> type, JavacNode node) {
		return findAnnotation(type, node, false);
	}
	
	public static JavacNode findAnnotation(Class<? extends Annotation> type, JavacNode node, boolean delete) {
		if (node == null) return null;
		if (type == null) return null;
		switch (node.getKind()) {
		case ARGUMENT:
		case FIELD:
		case LOCAL:
		case TYPE:
		case METHOD:
			for (JavacNode child : node.down()) {
				if (annotationTypeMatches(type, child)) {
					if (delete) deleteAnnotationIfNeccessary(child, type);
					return child;
				}
			}
			// intentional fallthrough
		default:
			return null;
		}
	}
	
	/**
	 * Checks if the Annotation AST Node provided is likely to be an instance of the provided annotation type.
	 * 
	 * @param type An actual annotation type, such as {@code lombok.Getter.class}.
	 * @param node A Lombok AST node representing an annotation in source code.
	 */
	public static boolean annotationTypeMatches(Class<? extends Annotation> type, JavacNode node) {
		if (node.getKind() != Kind.ANNOTATION) return false;
		return typeMatches(type, node, ((JCAnnotation) node.get()).annotationType);
	}
	
	/**
	 * Checks if the Annotation AST Node provided is likely to be an instance of the provided annotation type.
	 * 
	 * @param type An actual annotation type, such as {@code lombok.Getter.class}.
	 * @param node A Lombok AST node representing an annotation in source code.
	 */
	public static boolean annotationTypeMatches(String type, JavacNode node) {
		if (node.getKind() != Kind.ANNOTATION) return false;
		return typeMatches(type, node, ((JCAnnotation) node.get()).annotationType);
	}
	
	/**
	 * Checks if the given TypeReference node is likely to be a reference to the provided class.
	 * 
	 * @param type An actual type. This method checks if {@code typeNode} is likely to be a reference to this type.
	 * @param node A Lombok AST node. Any node in the appropriate compilation unit will do (used to get access to import statements).
	 * @param typeNode A type reference to check.
	 */
	public static boolean typeMatches(Class<?> type, JavacNode node, JCTree typeNode) {
		return typeMatches(type.getName(), node, typeNode);
	}
	
	/**
	 * Checks if the given TypeReference node is likely to be a reference to the provided class.
	 * 
	 * @param type An actual type. This method checks if {@code typeNode} is likely to be a reference to this type.
	 * @param node A Lombok AST node. Any node in the appropriate compilation unit will do (used to get access to import statements).
	 * @param typeNode A type reference to check.
	 */
	public static boolean typeMatches(String type, JavacNode node, JCTree typeNode) {
		String typeName = typeNode == null ? null : typeNode.toString();
		if (typeName == null || typeName.length() == 0) return false;
		int lastIndexA = typeName.lastIndexOf('.') + 1;
		int lastIndexB = Math.max(type.lastIndexOf('.'), type.lastIndexOf('$')) + 1;
		int len = typeName.length() - lastIndexA;
		if (len != type.length() - lastIndexB) return false;
		for (int i = 0; i < len; i++) if (typeName.charAt(i + lastIndexA) != type.charAt(i + lastIndexB)) return false;
		TypeResolver resolver = node.getImportListAsTypeResolver();
		return resolver.typeMatches(node, type, typeName);
	}
	
	/**
	 * Returns if a field is marked deprecated, either by {@code @Deprecated} or in javadoc
	 * @param field the field to check
	 * @return {@code true} if a field is marked deprecated, either by {@code @Deprecated} or in javadoc, otherwise {@code false}
	 */
	public static boolean isFieldDeprecated(JavacNode field) {
		if (!(field.get() instanceof JCVariableDecl)) return false;
		JCVariableDecl fieldNode = (JCVariableDecl) field.get();
		if ((fieldNode.mods.flags & Flags.DEPRECATED) != 0) {
			return true;
		}
		for (JavacNode child : field.down()) {
			if (annotationTypeMatches(Deprecated.class, child)) {
				return true;
			}
		}
		return false;
	}
	
	public static CheckerFrameworkVersion getCheckerFrameworkVersion(JavacNode node) {
		CheckerFrameworkVersion cfv = node.getAst().readConfiguration(ConfigurationKeys.CHECKER_FRAMEWORK);
		return cfv == null ? CheckerFrameworkVersion.NONE : cfv;
	}
	
	/**
	 * Returns if a node is marked deprecated (as picked up on by the parser).
	 * @param node the node to check (type, method, or field decl).
	 */
	public static boolean nodeHasDeprecatedFlag(JCTree node) {
		if (node instanceof JCVariableDecl) return (((JCVariableDecl) node).mods.flags & Flags.DEPRECATED) != 0;
		if (node instanceof JCMethodDecl) return (((JCMethodDecl) node).mods.flags & Flags.DEPRECATED) != 0;
		if (node instanceof JCClassDecl) return (((JCClassDecl) node).mods.flags & Flags.DEPRECATED) != 0;
		return false;
	}
	
	/**
	 * Creates an instance of {@code AnnotationValues} for the provided AST Node.
	 * 
	 * @param type An annotation class type, such as {@code lombok.Getter.class}.
	 * @param node A Lombok AST node representing an annotation in source code.
	 */
	public static <A extends Annotation> AnnotationValues<A> createAnnotation(Class<A> type, final JavacNode node) {
		return createAnnotation(type, (JCAnnotation) node.get(), node);
	}
	
	/**
	 * Creates an instance of {@code AnnotationValues} for the provided AST Node
	 * and Annotation expression.
	 *
	 * @param type An annotation class type, such as {@code lombok.Getter.class}.
	 * @param anno the annotation expression
	 * @param node A Lombok AST node representing an annotation in source code.
	 */
	public static <A extends Annotation> AnnotationValues<A> createAnnotation(Class<A> type, JCAnnotation anno, final JavacNode node) {
		Map<String, AnnotationValue> values = new HashMap<String, AnnotationValue>();
		List<JCExpression> arguments = anno.getArguments();
		
		for (JCExpression arg : arguments) {
			String mName;
			JCExpression rhs;
			java.util.List<String> raws = new ArrayList<String>();
			java.util.List<Object> guesses = new ArrayList<Object>();
			java.util.List<Object> expressions = new ArrayList<Object>();
			final java.util.List<DiagnosticPosition> positions = new ArrayList<DiagnosticPosition>();
			
			if (arg instanceof JCAssign) {
				JCAssign assign = (JCAssign) arg;
				mName = assign.lhs.toString();
				rhs = assign.rhs;
			} else {
				rhs = arg;
				mName = ""value"";
			}
			
			if (rhs instanceof JCNewArray) {
				List<JCExpression> elems = ((JCNewArray) rhs).elems;
				for (JCExpression inner : elems) {
					raws.add(inner.toString());
					expressions.add(inner);
					if (inner instanceof JCAnnotation) {
						try {
							@SuppressWarnings(""unchecked"")
							Class<A> innerClass = (Class<A>) Class.forName(inner.type.toString());
							
							guesses.add(createAnnotation(innerClass, (JCAnnotation) inner, node));
						} catch (ClassNotFoundException ex) {
							guesses.add(calculateGuess(inner));
						}
					} else {
						guesses.add(calculateGuess(inner));
					}
					positions.add(inner.pos());
				}
			} else {
				raws.add(rhs.toString());
				expressions.add(rhs);
				if (rhs instanceof JCAnnotation) {
					try {
						@SuppressWarnings(""unchecked"")
						Class<A> innerClass = (Class<A>) Class.forName(rhs.type.toString());
						
						guesses.add(createAnnotation(innerClass, (JCAnnotation) rhs, node));
					} catch (ClassNotFoundException ex) {
						guesses.add(calculateGuess(rhs));
					}
				} else {
					guesses.add(calculateGuess(rhs));
				}
				positions.add(rhs.pos());
			}
			
			values.put(mName, new AnnotationValue(node, raws, expressions, guesses, true) {
				@Override public void setError(String message, int valueIdx) {
					if (valueIdx < 0) node.addError(message);
					else node.addError(message, positions.get(valueIdx));
				}
				
				@Override public void setWarning(String message, int valueIdx) {
					if (valueIdx < 0) node.addWarning(message);
					else node.addWarning(message, positions.get(valueIdx));
				}
			});
		}
		
		for (Method m : type.getDeclaredMethods()) {
			if (!Modifier.isPublic(m.getModifiers())) continue;
			String name = m.getName();
			if (!values.containsKey(name)) {
				values.put(name, new AnnotationValue(node, new ArrayList<String>(), new ArrayList<Object>(), new ArrayList<Object>(), false) {
					@Override public void setError(String message, int valueIdx) {
						node.addError(message);
					}
					@Override public void setWarning(String message, int valueIdx) {
						node.addWarning(message);
					}
				});
			}
		}
		
		return new AnnotationValues<A>(type, values, node);
	}
	
	/**
	 * Removes the annotation from javac's AST (it remains in lombok's AST),
	 * then removes any import statement that imports this exact annotation (not star imports).
	 * Only does this if the DeleteLombokAnnotations class is in the context.
	 */
	public static void deleteAnnotationIfNeccessary(JavacNode annotation, String annotationType) {
		deleteAnnotationIfNeccessary0(annotation, annotationType);
	}
	
	/**
	 * Removes the annotation from javac's AST (it remains in lombok's AST),
	 * then removes any import statement that imports this exact annotation (not star imports).
	 * Only does this if the DeleteLombokAnnotations class is in the context.
	 */
	public static void deleteAnnotationIfNeccessary(JavacNode annotation, Class<? extends Annotation> annotationType) {
		deleteAnnotationIfNeccessary0(annotation, annotationType.getName());
	}
	
	/**
	 * Removes the annotation from javac's AST (it remains in lombok's AST),
	 * then removes any import statement that imports this exact annotation (not star imports).
	 * Only does this if the DeleteLombokAnnotations class is in the context.
	 */
	public static void deleteAnnotationIfNeccessary(JavacNode annotation, Class<? extends Annotation> annotationType1, Class<? extends Annotation> annotationType2) {
		deleteAnnotationIfNeccessary0(annotation, annotationType1.getName(), annotationType2.getName());
	}
	
	/**
	 * Removes the annotation from javac's AST (it remains in lombok's AST),
	 * then removes any import statement that imports this exact annotation (not star imports).
	 * Only does this if the DeleteLombokAnnotations class is in the context.
	 */
	public static void deleteAnnotationIfNeccessary(JavacNode annotation, Class<? extends Annotation> annotationType1, String annotationType2) {
		deleteAnnotationIfNeccessary0(annotation, annotationType1.getName(), annotationType2);
	}
	
	private static void deleteAnnotationIfNeccessary0(JavacNode annotation, String... annotationTypes) {
		if (inNetbeansEditor(annotation)) return;
		if (!annotation.shouldDeleteLombokAnnotations()) return;
		JavacNode parentNode = annotation.directUp();
		switch (parentNode.getKind()) {
		case FIELD:
		case ARGUMENT:
		case LOCAL:
			JCVariableDecl variable = (JCVariableDecl) parentNode.get();
			variable.mods.annotations = filterList(variable.mods.annotations, annotation.get());
			break;
		case METHOD:
			JCMethodDecl method = (JCMethodDecl) parentNode.get();
			method.mods.annotations = filterList(method.mods.annotations, annotation.get());
			break;
		case TYPE:
			try {
				JCClassDecl type = (JCClassDecl) parentNode.get();
				type.mods.annotations = filterList(type.mods.annotations, annotation.get());
			} catch (ClassCastException e) {
				//something rather odd has been annotated. Better to just break only delombok instead of everything.
			}
			break;
		default:
			//This really shouldn't happen, but if it does, better just break delombok instead of breaking everything.
			return;
		}
		
		parentNode.getAst().setChanged();
		for (String annotationType : annotationTypes) {
			deleteImportFromCompilationUnit(annotation, annotationType);
		}
	}
	
	public static void deleteImportFromCompilationUnit(JavacNode node, String name) {
		if (inNetbeansEditor(node)) return;
		if (!node.shouldDeleteLombokAnnotations()) return;
		
		JCCompilationUnit unit = (JCCompilationUnit) node.top().get();
		
		for (JCTree def : unit.defs) {
			if (!(def instanceof JCImport)) continue;
			JCImport imp0rt = (JCImport) def;
			if (imp0rt.staticImport) continue;
			if (!imp0rt.qualid.toString().equals(name)) continue;
			JavacAugments.JCImport_deletable.set(imp0rt, true);
		}
	}
	
	private static List<JCAnnotation> filterList(List<JCAnnotation> annotations, JCTree jcTree) {
		ListBuffer<JCAnnotation> newAnnotations = new ListBuffer<JCAnnotation>();
		for (JCAnnotation ann : annotations) {
			if (jcTree != ann) newAnnotations.append(ann);
		}
		return newAnnotations.toList();
	}
	
	/** Serves as return value for the methods that check for the existence of fields and methods. */
	public enum MemberExistsResult {
		NOT_EXISTS, EXISTS_BY_LOMBOK, EXISTS_BY_USER;
	}
	
	/**
	 * Translates the given field into all possible getter names.
	 * Convenient wrapper around {@link HandlerUtil#toAllGetterNames(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static java.util.List<String> toAllGetterNames(JavacNode field) {
		return HandlerUtil.toAllGetterNames(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * @return the likely getter name for the stated field. (e.g. private boolean foo; to isFoo).
	 * 
	 * Convenient wrapper around {@link HandlerUtil#toGetterName(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static String toGetterName(JavacNode field) {
		return HandlerUtil.toGetterName(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * Translates the given field into all possible setter names.
	 * Convenient wrapper around {@link HandlerUtil#toAllSetterNames(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static java.util.List<String> toAllSetterNames(JavacNode field) {
		return HandlerUtil.toAllSetterNames(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * @return the likely setter name for the stated field. (e.g. private boolean foo; to setFoo).
	 * 
	 * Convenient wrapper around {@link HandlerUtil#toSetterName(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static String toSetterName(JavacNode field) {
		return HandlerUtil.toSetterName(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * Translates the given field into all possible with names.
	 * Convenient wrapper around {@link HandlerUtil#toAllWithNames(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static java.util.List<String> toAllWithNames(JavacNode field) {
		return HandlerUtil.toAllWithNames(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * Translates the given field into all possible withBy names.
	 * Convenient wrapper around {@link HandlerUtil#toAllWithByNames(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static java.util.List<String> toAllWithByNames(JavacNode field) {
		return HandlerUtil.toAllWithByNames(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * @return the likely with name for the stated field. (e.g. private boolean foo; to withFoo).
	 * 
	 * Convenient wrapper around {@link HandlerUtil#toWithName(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static String toWithName(JavacNode field) {
		return HandlerUtil.toWithName(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * @return the likely withBy name for the stated field. (e.g. private boolean foo; to withFooBy).
	 * 
	 * Convenient wrapper around {@link HandlerUtil#toWithByName(lombok.core.AnnotationValues, CharSequence, boolean)}.
	 */
	public static String toWithByName(JavacNode field) {
		return HandlerUtil.toWithByName(field.getAst(), getAccessorsForField(field), field.getName(), isBoolean(field));
	}
	
	/**
	 * When generating a setter, the setter either returns void (beanspec) or Self (fluent).
	 * This method scans for the {@code Accessors} annotation to figure that out.
	 */
	public static boolean shouldReturnThis(JavacNode field) {
		if ((((JCVariableDecl) field.get()).mods.flags & Flags.STATIC) != 0) return false;
		
		AnnotationValues<Accessors> accessors = JavacHandlerUtil.getAccessorsForField(field);
		
		return HandlerUtil.shouldReturnThis0(accessors, field.getAst());
	}
	
	public static JCExpression cloneSelfType(JavacNode childOfType) {
		JavacNode typeNode = childOfType;
		JavacTreeMaker maker = childOfType.getTreeMaker();
		while (typeNode != null && typeNode.getKind() != Kind.TYPE) typeNode = typeNode.up();
		return JavacHandlerUtil.namePlusTypeParamsToTypeReference(maker, typeNode, ((JCClassDecl) typeNode.get()).typarams);
	}
	
	public static boolean isBoolean(JavacNode field) {
		JCExpression varType = ((JCVariableDecl) field.get()).vartype;
		return isBoolean(varType);
	}
	
	public static boolean isBoolean(JCExpression varType) {
		return varType != null && varType.toString().equals(""boolean"");
	}
	
	public static Name removePrefixFromField(JavacNode field) {
		java.util.List<String> prefixes = null;
		for (JavacNode node : field.down()) {
			if (annotationTypeMatches(Accessors.class, node)) {
				AnnotationValues<Accessors> ann = createAnnotation(Accessors.class, node);
				if (ann.isExplicit(""prefix"")) prefixes = Arrays.asList(ann.getInstance().prefix());
				break;
			}
		}
		
		if (prefixes == null) {
			JavacNode current = field.up();
			outer:
			while (current != null) {
				for (JavacNode node : current.down()) {
					if (annotationTypeMatches(Accessors.class, node)) {
						AnnotationValues<Accessors> ann = createAnnotation(Accessors.class, node);
						if (ann.isExplicit(""prefix"")) prefixes = Arrays.asList(ann.getInstance().prefix());
						break outer;
					}
				}
				current = current.up();
			}
		}
		
		if (prefixes == null) prefixes = field.getAst().readConfiguration(ConfigurationKeys.ACCESSORS_PREFIX);
		
		if (!prefixes.isEmpty()) {
			CharSequence newName = removePrefix(field.getName(), prefixes);
			if (newName != null) return field.toName(newName.toString());
		}
		
		return ((JCVariableDecl) field.get()).name;
	}
	
	public static AnnotationValues<Accessors> getAccessorsForField(JavacNode field) {
		for (JavacNode node : field.down()) {
			if (annotationTypeMatches(Accessors.class, node)) {
				return createAnnotation(Accessors.class, node);
			}
		}
		
		JavacNode current = field.up();
		while (current != null) {
			for (JavacNode node : current.down()) {
				if (annotationTypeMatches(Accessors.class, node)) {
					return createAnnotation(Accessors.class, node);
				}
			}
			current = current.up();
		}
		
		return AnnotationValues.of(Accessors.class, field);
	}
	
	/**
	 * Checks if there is a field with the provided name.
	 * 
	 * @param fieldName the field name to check for.
	 * @param node Any node that represents the Type (JCClassDecl) to look in, or any child node thereof.
	 */
	public static MemberExistsResult fieldExists(String fieldName, JavacNode node) {
		node = upToTypeNode(node);
		
		if (node != null && node.get() instanceof JCClassDecl) {
			for (JCTree def : ((JCClassDecl)node.get()).defs) {
				if (def instanceof JCVariableDecl) {
					if (((JCVariableDecl)def).name.contentEquals(fieldName)) {
						return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;
					}
				}
			}
		}
		
		return MemberExistsResult.NOT_EXISTS;
	}
	
	public static MemberExistsResult methodExists(String methodName, JavacNode node, int params) {
		return methodExists(methodName, node, true, params);
	}
	
	/**
	 * Checks if there is a method with the provided name. In case of multiple methods (overloading), only
	 * the first method decides if EXISTS_BY_USER or EXISTS_BY_LOMBOK is returned.
	 * 
	 * @param methodName the method name to check for.
	 * @param node Any node that represents the Type (JCClassDecl) to look in, or any child node thereof.
	 * @param caseSensitive If the search should be case sensitive.
	 * @param params The number of parameters the method should have; varargs count as 0-*. Set to -1 to find any method with the appropriate name regardless of parameter count.
	 */
	public static MemberExistsResult methodExists(String methodName, JavacNode node, boolean caseSensitive, int params) {
		node = upToTypeNode(node);
		
		if (node != null && node.get() instanceof JCClassDecl) {
			top: for (JCTree def : ((JCClassDecl)node.get()).defs) {
				if (def instanceof JCMethodDecl) {
					JCMethodDecl md = (JCMethodDecl) def;
					String name = md.name.toString();
					boolean matches = caseSensitive ? name.equals(methodName) : name.equalsIgnoreCase(methodName);
					if (matches) {
						if (params > -1) {
							List<JCVariableDecl> ps = md.params;
							int minArgs = 0;
							int maxArgs = 0;
							if (ps != null && ps.length() > 0) {
								minArgs = ps.length();
								if ((ps.last().mods.flags & Flags.VARARGS) != 0) {
									maxArgs = Integer.MAX_VALUE;
									minArgs--;
								} else {
									maxArgs = minArgs;
								}
							}
							
							if (params < minArgs || params > maxArgs) continue;
						}
						
						if (isTolerate(node, md)) continue top;
						
						return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;
					}
				}
			}
		}
		
		return MemberExistsResult.NOT_EXISTS;
	}
	
	public static boolean isTolerate(JavacNode node, JCTree.JCMethodDecl md) {
		List<JCAnnotation> annotations = md.getModifiers().getAnnotations();
		if (annotations != null) for (JCTree.JCAnnotation anno : annotations) {
			if (typeMatches(Tolerate.class, node, anno.getAnnotationType())) return true;
		}
		return false;
	}
	
	/**
	 * Checks if there is a (non-default) constructor. In case of multiple constructors (overloading), only
	 * the first constructor decides if EXISTS_BY_USER or EXISTS_BY_LOMBOK is returned.
	 * 
	 * @param node Any node that represents the Type (JCClassDecl) to look in, or any child node thereof.
	 */
	public static MemberExistsResult constructorExists(JavacNode node) {
		node = upToTypeNode(node);
		
		if (node != null && node.get() instanceof JCClassDecl) {
			for (JCTree def : ((JCClassDecl) node.get()).defs) {
				if (def instanceof JCMethodDecl) {
					JCMethodDecl md = (JCMethodDecl) def;
					if (md.name.contentEquals(""<init>"")) {
						if ((md.mods.flags & Flags.GENERATEDCONSTR) != 0) continue;
						if (isTolerate(node, md)) continue;
						return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;
					}
				}
			}
		}
		
		return MemberExistsResult.NOT_EXISTS;
	}
	
	public static boolean isConstructorCall(final JCStatement statement) {
		if (!(statement instanceof JCExpressionStatement)) return false;
		JCExpression expr = ((JCExpressionStatement) statement).expr;
		if (!(expr instanceof JCMethodInvocation)) return false;
		JCExpression invocation = ((JCMethodInvocation) expr).meth;
		String name;
		if (invocation instanceof JCFieldAccess) {
			name = ((JCFieldAccess) invocation).name.toString();
		} else if (invocation instanceof JCIdent) {
			name = ((JCIdent) invocation).name.toString();
		} else {
			name = """";
		}
		
		return ""super"".equals(name) || ""this"".equals(name);
	}
	
	/**
	 * Turns an {@code AccessLevel} instance into the flag bit used by javac.
	 */
	public static int toJavacModifier(AccessLevel accessLevel) {
		switch (accessLevel) {
		case MODULE:
		case PACKAGE:
			return 0;
		default:
		case PUBLIC:
			return Flags.PUBLIC;
		case NONE:
		case PRIVATE:
			return Flags.PRIVATE;
		case PROTECTED:
			return Flags.PROTECTED;
		}
	}
	
	private static class GetterMethod {
		private final Name name;
		private final JCExpression type;
		
		GetterMethod(Name name, JCExpression type) {
			this.name = name;
			this.type = type;
		}
	}
	
	private static GetterMethod findGetter(JavacNode field) {
		JCVariableDecl decl = (JCVariableDecl)field.get();
		JavacNode typeNode = field.up();
		for (String potentialGetterName : toAllGetterNames(field)) {
			for (JavacNode potentialGetter : typeNode.down()) {
				if (potentialGetter.getKind() != Kind.METHOD) continue;
				JCMethodDecl method = (JCMethodDecl) potentialGetter.get();
				if (!method.name.toString().equalsIgnoreCase(potentialGetterName)) continue;
				/** static getX() methods don't count. */
				if ((method.mods.flags & Flags.STATIC) != 0) continue;
				/** Nor do getters with a non-empty parameter list. */
				if (method.params != null && method.params.size() > 0) continue;
				return new GetterMethod(method.name, method.restype);
			}
		}
		
		// Check if the field has a @Getter annotation.
		
		boolean hasGetterAnnotation = false;
		
		for (JavacNode child : field.down()) {
			if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Getter.class, child)) {
				AnnotationValues<Getter> ann = createAnnotation(Getter.class, child);
				if (ann.getInstance().value() == AccessLevel.NONE) return null;   //Definitely WONT have a getter.
				hasGetterAnnotation = true;
			}
		}
		
		// Check if the class has a @Getter annotation.
		
		if (!hasGetterAnnotation && HandleGetter.fieldQualifiesForGetterGeneration(field)) {
			//Check if the class has @Getter or @Data annotation.
			
			JavacNode containingType = field.up();
			if (containingType != null) for (JavacNode child : containingType.down()) {
				if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Data.class, child)) hasGetterAnnotation = true;
				if (child.getKind() == Kind.ANNOTATION && annotationTypeMatches(Getter.class, child)) {
					AnnotationValues<Getter> ann = createAnnotation(Getter.class, child);
					if (ann.getInstance().value() == AccessLevel.NONE) return null;   //Definitely WONT have a getter.
					hasGetterAnnotation = true;
				}
			}
		}
		
		if (hasGetterAnnotation) {
			String getterName = toGetterName(field);
			if (getterName == null) return null;
			return new GetterMethod(field.toName(getterName), decl.vartype);
		}
		
		return null;
	}
	
	static boolean lookForGetter(JavacNode field, FieldAccess fieldAccess) {
		if (fieldAccess == FieldAccess.GETTER) return true;
		if (fieldAccess == FieldAccess.ALWAYS_FIELD) return false;
		
		// If @Getter(lazy = true) is used, then using it is mandatory.
		for (JavacNode child : field.down()) {
			if (child.getKind() != Kind.ANNOTATION) continue;
			if (annotationTypeMatches(Getter.class, child)) {
				AnnotationValues<Getter> ann = createAnnotation(Getter.class, child);
				if (ann.getInstance().lazy()) return true;
			}
		}
		return false;
	}
	
	/**
	 * Returns the type of the field, unless a getter exists for this field, in which case the return type of the getter is returned.
	 * 
	 * @see #createFieldAccessor(TreeMaker, JavacNode, FieldAccess)
	 */
	static JCExpression getFieldType(JavacNode field, FieldAccess fieldAccess) {
		if (field.getKind() == Kind.METHOD) return ((JCMethodDecl) field.get()).restype;
		
		boolean lookForGetter = lookForGetter(field, fieldAccess);
		
		GetterMethod getter = lookForGetter ? findGetter(field) : null;
		
		if (getter == null) {
			return ((JCVariableDecl) field.get()).vartype;
		}
		
		return getter.type;
	}
	
	/**
	 * Creates an expression that reads the field. Will either be {@code this.field} or {@code this.getField()} depending on whether or not there's a getter.
	 */
	static JCExpression createFieldAccessor(JavacTreeMaker maker, JavacNode field, FieldAccess fieldAccess) {
		return createFieldAccessor(maker, field, fieldAccess, null);
	}
	
	static JCExpression createFieldAccessor(JavacTreeMaker maker, JavacNode field, FieldAccess fieldAccess, JCExpression receiver) {
		boolean lookForGetter = lookForGetter(field, fieldAccess);
		
		GetterMethod getter = lookForGetter ? findGetter(field) : null;
		JCVariableDecl fieldDecl = (JCVariableDecl) field.get();
		
		if (getter == null) {
			if (receiver == null) {
				if ((fieldDecl.mods.flags & Flags.STATIC) == 0) {
					receiver = maker.Ident(field.toName(""this""));
				} else {
					JavacNode containerNode = field.up();
					if (containerNode != null && containerNode.get() instanceof JCClassDecl) {
						JCClassDecl container = (JCClassDecl) field.up().get();
						receiver = maker.Ident(container.name);
					}
				}
			}
			
			return receiver == null ? maker.Ident(fieldDecl.name) : maker.Select(receiver, fieldDecl.name);
		}
		
		if (receiver == null) receiver = maker.Ident(field.toName(""this""));
		JCMethodInvocation call = maker.Apply(List.<JCExpression>nil(),
			maker.Select(receiver, getter.name), List.<JCExpression>nil());
		return call;
	}
	
	static JCExpression createMethodAccessor(JavacTreeMaker maker, JavacNode method) {
		return createMethodAccessor(maker, method, null);
	}
	
	static JCExpression createMethodAccessor(JavacTreeMaker maker, JavacNode method, JCExpression receiver) {
		JCMethodDecl methodDecl = (JCMethodDecl) method.get();
		
		if (receiver == null && (methodDecl.mods.flags & Flags.STATIC) == 0) {
			receiver = maker.Ident(method.toName(""this""));
		} else if (receiver == null) {
			JavacNode containerNode = method.up();
			if (containerNode != null && containerNode.get() instanceof JCClassDecl) {
				JCClassDecl container = (JCClassDecl) method.up().get();
				receiver = maker.Ident(container.name);
			}
		}
		
		JCMethodInvocation call = maker.Apply(List.<JCExpression>nil(),
			receiver == null ? maker.Ident(methodDecl.name) : maker.Select(receiver, methodDecl.name), List.<JCExpression>nil());
		return call;
	}
	
	/**
	 * Adds the given new field declaration to the provided type AST Node.
	 * The field carries the &#64;{@link SuppressWarnings}(""all"") annotation.
	 * Also takes care of updating the JavacAST.
	 */
	public static JavacNode injectFieldAndMarkGenerated(JavacNode typeNode, JCVariableDecl field) {
		return injectField(typeNode, field, true);
	}
	
	/**
	 * Adds the given new field declaration to the provided type AST Node.
	 * 
	 * Also takes care of updating the JavacAST.
	 */
	public static JavacNode injectField(JavacNode typeNode, JCVariableDecl field) {
		return injectField(typeNode, field, false);
	}
	
	public static JavacNode injectField(JavacNode typeNode, JCVariableDecl field, boolean addGenerated) {
		return injectField(typeNode, field, addGenerated, false);
	}
	
	public static JavacNode injectField(JavacNode typeNode, JCVariableDecl field, boolean addGenerated, boolean specialEnumHandling) {
		JCClassDecl type = (JCClassDecl) typeNode.get();
		
		if (addGenerated) {
			addSuppressWarningsAll(field.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(field)), typeNode.getContext());
			addGenerated(field.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(field)), typeNode.getContext());
		}
		
		List<JCTree> insertAfter = null;
		List<JCTree> insertBefore = type.defs;
		while (true) {
			boolean skip = false;
			if (insertBefore.head instanceof JCVariableDecl) {
				JCVariableDecl f = (JCVariableDecl) insertBefore.head;
				if ((!specialEnumHandling && isEnumConstant(f)) || isGenerated(f)) skip = true;
			} else if (insertBefore.head instanceof JCMethodDecl) {
				if ((((JCMethodDecl) insertBefore.head).mods.flags & GENERATEDCONSTR) != 0) skip = true;
			}
			if (skip) {
				insertAfter = insertBefore;
				insertBefore = insertBefore.tail;
				continue;
			}
			break;
		}
		List<JCTree> fieldEntry = List.<JCTree>of(field);
		fieldEntry.tail = insertBefore;
		if (insertAfter == null) {
			type.defs = fieldEntry;
		} else {
			insertAfter.tail = fieldEntry;
		}
		
		EnterReflect.memberEnter(field, typeNode);
		
		return typeNode.add(field, Kind.FIELD);
	}
	
	public static boolean isEnumConstant(final JCVariableDecl field) {
		return (field.mods.flags & Flags.ENUM) != 0;
	}
	
	static class JCAnnotatedTypeReflect {
		private static Class<?> TYPE;
		private static Constructor<?> CONSTRUCTOR;
		private static Field ANNOTATIONS, UNDERLYING_TYPE;
		
		private static void initByLoader(ClassLoader classLoader) {
			if (TYPE != null) return;
			Class<?> c;
			try {
				c = classLoader.loadClass(""com.sun.tools.javac.tree.JCTree$JCAnnotatedType"");
			} catch (Exception e) {
				return;
			}
			init(c);
		}
		
		private static void init(Class<?> in) {
			if (TYPE != null) return;
			if (!in.getName().equals(""com.sun.tools.javac.tree.JCTree$JCAnnotatedType"")) return;
			try {
				CONSTRUCTOR = Permit.getConstructor(in, List.class, JCExpression.class);
				ANNOTATIONS = Permit.getField(in, ""annotations"");
				UNDERLYING_TYPE = Permit.getField(in, ""underlyingType"");
				TYPE = in;
			} catch (Exception ignore) {}
		}
		
		static boolean is(JCTree obj) {
			if (obj == null) return false;
			init(obj.getClass());
			return obj.getClass() == TYPE;
		}
		
		@SuppressWarnings(""unchecked"")
		static List<JCAnnotation> getAnnotations(JCTree obj) {
			init(obj.getClass());
			try {
				return (List<JCAnnotation>) ANNOTATIONS.get(obj);
			} catch (Exception e) {
				return List.nil();
			}
		}
		
		static void setAnnotations(JCTree obj, List<JCAnnotation> anns) {
			init(obj.getClass());
			try {
				ANNOTATIONS.set(obj, anns);
			} catch (Exception e) {}
		}
		
		static JCExpression getUnderlyingType(JCTree obj) {
			init(obj.getClass());
			try {
				return (JCExpression) UNDERLYING_TYPE.get(obj);
			} catch (Exception e) {
				return null;
			}
		}
		
		static JCExpression create(List<JCAnnotation> annotations, JCExpression underlyingType) {
			initByLoader(underlyingType.getClass().getClassLoader());
			try {
				return (JCExpression) CONSTRUCTOR.newInstance(annotations, underlyingType);
			} catch (Exception e) {
				return underlyingType;
			}
		}
	}
	
	static class JCAnnotationReflect {
		private static final Field ATTRIBUTE;

		static {
			ATTRIBUTE = Permit.permissiveGetField(JCAnnotation.class, ""attribute"");
		}

		static Attribute.Compound getAttribute(JCAnnotation jcAnnotation) {
			if (ATTRIBUTE != null) {
				try {
					return (Attribute.Compound) ATTRIBUTE.get(jcAnnotation);
				} catch (Exception e) {
					// Ignore
				}
			}
			return null;
		}
		
		static void setAttribute(JCAnnotation jcAnnotation, Attribute.Compound attribute) {
			if (ATTRIBUTE != null) {
				try {
					Permit.set(ATTRIBUTE, jcAnnotation, attribute);
				} catch (Exception e) {
					// Ignore
				}
			}
		}
	}

	// jdk9 support, types have changed, names stay the same
	static class ClassSymbolMembersField {
		private static final Field membersField;
		private static final Method removeMethod;
		private static final Method enterMethod;
		
		static {
			Field f = null;
			Method r = null;
			Method e = null;
			try {
				f = Permit.getField(ClassSymbol.class, ""members_field"");
				r = Permit.getMethod(f.getType(), ""remove"", Symbol.class);
				e = Permit.getMethod(f.getType(), ""enter"", Symbol.class);
			} catch (Exception ex) {}
			membersField = f;
			removeMethod = r;
			enterMethod = e;
		}
		
		static void remove(ClassSymbol from, Symbol toRemove) {
			if (from == null) return;
			try {
				Scope scope = (Scope) membersField.get(from);
				if (scope == null) return;
				Permit.invoke(removeMethod, scope, toRemove);
			} catch (Exception e) {}
		}
		
		static void enter(ClassSymbol from, Symbol toEnter) {
			if (from == null) return;
			try {
				Scope scope = (Scope) membersField.get(from);
				if (scope == null) return;
				Permit.invoke(enterMethod, scope, toEnter);
			} catch (Exception e) {}
		}
	}
	
	/**
	 * Adds the given new method declaration to the provided type AST Node.
	 * Can also inject constructors.
	 * 
	 * Also takes care of updating the JavacAST.
	 */
	public static void injectMethod(JavacNode typeNode, JCMethodDecl method) {
		JCClassDecl type = (JCClassDecl) typeNode.get();
		
		if (method.getName().contentEquals(""<init>"")) {
			//Scan for default constructor, and remove it.
			int idx = 0;
			for (JCTree def : type.defs) {
				if (def instanceof JCMethodDecl) {
					if ((((JCMethodDecl) def).mods.flags & Flags.GENERATEDCONSTR) != 0) {
						JavacNode tossMe = typeNode.getNodeFor(def);
						if (tossMe != null) tossMe.up().removeChild(tossMe);
						type.defs = addAllButOne(type.defs, idx);
						ClassSymbolMembersField.remove(type.sym, ((JCMethodDecl) def).sym);
						break;
					}
				}
				idx++;
			}
		}
		
		addSuppressWarningsAll(method.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(method)), typeNode.getContext());
		addGenerated(method.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(method)), typeNode.getContext());
		type.defs = type.defs.append(method);
		
		EnterReflect.memberEnter(method, typeNode);
		
		typeNode.add(method, Kind.METHOD);
	}

	/**
	 * Adds an inner type (class, interface, enum) to the given type. Cannot inject top-level types.
	 * 
	 * @param typeNode parent type to inject new type into
	 * @param type New type (class, interface, etc) to inject.
	 * @return 
	 */
	public static JavacNode injectType(JavacNode typeNode, final JCClassDecl type) {
		JCClassDecl typeDecl = (JCClassDecl) typeNode.get();
		addSuppressWarningsAll(type.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(type)), typeNode.getContext());
		addGenerated(type.mods, typeNode, typeNode.getNodeFor(getGeneratedBy(type)), typeNode.getContext());
		typeDecl.defs = typeDecl.defs.append(type);
		
		EnterReflect.classEnter(type, typeNode);
		
		return typeNode.add(type, Kind.TYPE);
	}
	
	static class EnterReflect {
		private static final Method classEnter;
		private static final Method memberEnter;
		private static final Method blockAnnotations;
		private static final Method unblockAnnotations;
		
		static {
			classEnter = Permit.permissiveGetMethod(Enter.class, ""classEnter"", JCTree.class, Env.class);
			memberEnter = Permit.permissiveGetMethod(MemberEnter.class, ""memberEnter"", JCTree.class, Env.class);
			
			Method block = Permit.permissiveGetMethod(Annotate.class, ""blockAnnotations"");
			if (block == null) block = Permit.permissiveGetMethod(Annotate.class, ""enterStart"");
			blockAnnotations = block;
			
			Method unblock = Permit.permissiveGetMethod(Annotate.class, ""unblockAnnotations"");
			if (unblock == null) unblock = Permit.permissiveGetMethod(Annotate.class, ""enterDone"");
			unblockAnnotations = unblock;
		}
		
		static Type classEnter(JCTree tree, JavacNode parent) {
			Enter enter = Enter.instance(parent.getContext());
			Env<AttrContext> classEnv = enter.getEnv((TypeSymbol) parent.getElement());
			if (classEnv == null) return null;
			Type type = (Type) Permit.invokeSneaky(classEnter, enter, tree, classEnv);
			if (type == null) return null;
			type.complete();
			return type;
		}
		
		static void memberEnter(JCTree tree, JavacNode parent) {
			Context context = parent.getContext();
			MemberEnter me = MemberEnter.instance(context);
			Annotate annotate = Annotate.instance(context);
			Enter enter = Enter.instance(context);
			
			Env<AttrContext> classEnv = enter.getEnv((TypeSymbol) parent.getElement());
			if (classEnv == null) return;
			
			Permit.invokeSneaky(blockAnnotations, annotate);
			Permit.invokeSneaky(memberEnter, me, tree, classEnv);
			Permit.invokeSneaky(unblockAnnotations, annotate);
		}
	}
	
	public static long addFinalIfNeeded(long flags, Context context) {
		boolean addFinal = LombokOptionsFactory.getDelombokOptions(context).getFormatPreferences().generateFinalParams();
		
		if (addFinal) flags |= Flags.FINAL;
		return flags;
	}
	
	public static JCExpression genTypeRef(JavacNode node, String complexName) {
		String[] parts = complexName.split(""\\."");
		if (parts.length > 2 && parts[0].equals(""java"") && parts[1].equals(""lang"")) {
			String[] subParts = new String[parts.length - 2];
			System.arraycopy(parts, 2, subParts, 0, subParts.length);
			return genJavaLangTypeRef(node, subParts);
		}
		
		return chainDots(node, parts);
	}
	
	public static JCExpression genJavaLangTypeRef(JavacNode node, String... simpleNames) {
		if (LombokOptionsFactory.getDelombokOptions(node.getContext()).getFormatPreferences().javaLangAsFqn()) {
			return chainDots(node, ""java"", ""lang"", simpleNames);
		} else {
			return chainDots(node, null, null, simpleNames);
		}
	}
	
	public static JCExpression genJavaLangTypeRef(JavacNode node, int pos, String... simpleNames) {
		if (LombokOptionsFactory.getDelombokOptions(node.getContext()).getFormatPreferences().javaLangAsFqn()) {
			return chainDots(node, pos, ""java"", ""lang"", simpleNames);
		} else {
			return chainDots(node, pos, null, null, simpleNames);
		}
	}
	
	public static void addSuppressWarningsAll(JCModifiers mods, JavacNode node, JavacNode source, Context context) {
		if (!LombokOptionsFactory.getDelombokOptions(context).getFormatPreferences().generateSuppressWarnings()) return;
		
		boolean addJLSuppress = !Boolean.FALSE.equals(node.getAst().readConfiguration(ConfigurationKeys.ADD_SUPPRESSWARNINGS_ANNOTATIONS));
		
		if (addJLSuppress) {
			for (JCAnnotation ann : mods.annotations) {
				JCTree type = ann.getAnnotationType();
				Name n = null;
				if (type instanceof JCIdent) n = ((JCIdent) type).name;
				else if (type instanceof JCFieldAccess) n = ((JCFieldAccess) type).name;
				if (n != null && n.contentEquals(""SuppressWarnings"")) {
					addJLSuppress = false;
				}
			}
		}
		if (addJLSuppress) addAnnotation(mods, node, source, ""java.lang.SuppressWarnings"", node.getTreeMaker().Literal(""all""));
		
		if (Boolean.TRUE.equals(node.getAst().readConfiguration(ConfigurationKeys.ADD_FINDBUGS_SUPPRESSWARNINGS_ANNOTATIONS))) {
			JavacTreeMaker maker = node.getTreeMaker();
			JCExpression arg = maker.Assign(maker.Ident(node.toName(""justification"")), maker.Literal(""generated code""));
			addAnnotation(mods, node, source, ""edu.umd.cs.findbugs.annotations.SuppressFBWarnings"", arg);
		}
	}
	
	public static void addGenerated(JCModifiers mods, JavacNode node, JavacNode source, Context context) {
		if (!LombokOptionsFactory.getDelombokOptions(context).getFormatPreferences().generateGenerated()) return;
		
		if (HandlerUtil.shouldAddGenerated(node)) {
			addAnnotation(mods, node, source, ""javax.annotation.Generated"", node.getTreeMaker().Literal(""lombok""));
		}
		if (Boolean.TRUE.equals(node.getAst().readConfiguration(ConfigurationKeys.ADD_LOMBOK_GENERATED_ANNOTATIONS))) {
			addAnnotation(mods, node, source, ""lombok.Generated"", null);
		}
	}
	
	public static void addAnnotation(JCModifiers mods, JavacNode node, JavacNode source, String annotationTypeFqn, JCExpression arg) {
		boolean isJavaLangBased;
		String simpleName; {
			int idx = annotationTypeFqn.lastIndexOf('.');
			simpleName = idx == -1 ? annotationTypeFqn : annotationTypeFqn.substring(idx + 1);
			
			isJavaLangBased = idx == 9 && annotationTypeFqn.regionMatches(0, ""java.lang."", 0, 10);
		}
		
		for (JCAnnotation ann : mods.annotations) {
			JCTree annType = ann.getAnnotationType();
			if (annType instanceof JCIdent) {
				Name lastPart = ((JCIdent) annType).name;
				if (lastPart.contentEquals(simpleName)) return;
			}
			
			if (annType instanceof JCFieldAccess) {
				if (annType.toString().equals(annotationTypeFqn)) return;
			}
		}
		
		JavacTreeMaker maker = node.getTreeMaker();
		JCExpression annType = isJavaLangBased ? genJavaLangTypeRef(node, simpleName) : chainDotsString(node, annotationTypeFqn);
		List<JCExpression> argList = arg != null ? List.of(arg) : List.<JCExpression>nil();
		JCAnnotation annotation = recursiveSetGeneratedBy(maker.Annotation(annType, argList), source);
		mods.annotations = mods.annotations.append(annotation);
	}
	
	private static List<JCTree> addAllButOne(List<JCTree> defs, int idx) {
		ListBuffer<JCTree> out = new ListBuffer<JCTree>();
		int i = 0;
		for (JCTree def : defs) {
			if (i++ != idx) out.append(def);
		}
		return out.toList();
	}
	
	/**
	 * In javac, dotted access of any kind, from {@code java.lang.String} to {@code var.methodName}
	 * is represented by a fold-left of {@code Select} nodes with the leftmost string represented by
	 * a {@code Ident} node. This method generates such an expression.
	 * <p>
	 * The position of the generated node(s) will be unpositioned (-1).
	 * 
	 * For example, maker.Select(maker.Select(maker.Ident(NAME[java]), NAME[lang]), NAME[String]).
	 * 
	 * @see com.sun.tools.javac.tree.JCTree.JCIdent
	 * @see com.sun.tools.javac.tree.JCTree.JCFieldAccess
	 */
	public static JCExpression chainDots(JavacNode node, String elem1, String elem2, String... elems) {
		return chainDots(node, -1, elem1, elem2, elems);
	}
	
	public static JCExpression chainDots(JavacNode node, String[] elems) {
		return chainDots(node, -1, null, null, elems);
	}
	
	public static JCExpression chainDots(JavacNode node, LombokImmutableList<String> elems) {
		assert elems != null;
		
		JavacTreeMaker maker = node.getTreeMaker();
		JCExpression e = null;
		for (String elem : elems) {
			if (e == null) e = maker.Ident(node.toName(elem));
			else e = maker.Select(e, node.toName(elem));
		}
		return e;
	}
	
	/**
	 * In javac, dotted access of any kind, from {@code java.lang.String} to {@code var.methodName}
	 * is represented by a fold-left of {@code Select} nodes with the leftmost string represented by
	 * a {@code Ident} node. This method generates such an expression.
	 * <p>
	 * The position of the generated node(s) will be equal to the {@code pos} parameter.
	 *
	 * For example, maker.Select(maker.Select(maker.Ident(NAME[java]), NAME[lang]), NAME[String]).
	 * 
	 * @see com.sun.tools.javac.tree.JCTree.JCIdent
	 * @see com.sun.tools.javac.tree.JCTree.JCFieldAccess
	 */
	public static JCExpression chainDots(JavacNode node, int pos, String elem1, String elem2, String... elems) {
		assert elems != null;
		
		JavacTreeMaker maker = node.getTreeMaker();
		if (pos != -1) maker = maker.at(pos);
		JCExpression e = null;
		if (elem1 != null) e = maker.Ident(node.toName(elem1));
		if (elem2 != null) e = e == null ? maker.Ident(node.toName(elem2)) : maker.Select(e, node.toName(elem2));
		for (int i = 0 ; i < elems.length ; i++) {
			e = e == null ? maker.Ident(node.toName(elems[i])) : maker.Select(e, node.toName(elems[i]));
		}
		
		assert e != null;
		
		return e;
	}
	
	/**
	 * In javac, dotted access of any kind, from {@code java.lang.String} to {@code var.methodName}
	 * is represented by a fold-left of {@code Select} nodes with the leftmost string represented by
	 * a {@code Ident} node. This method generates such an expression.
	 * 
	 * For example, maker.Select(maker.Select(maker.Ident(NAME[java]), NAME[lang]), NAME[String]).
	 * 
	 * @see com.sun.tools.javac.tree.JCTree.JCIdent
	 * @see com.sun.tools.javac.tree.JCTree.JCFieldAccess
	 */
	public static JCExpression chainDotsString(JavacNode node, String elems) {
		return chainDots(node, null, null, elems.split(""\\.""));
	}
	
	/**
	 * Searches the given field node for annotations and returns each one that matches the provided regular expression pattern.
	 * 
	 * Only the simple name is checked - the package and any containing class are ignored.
	 */
	public static List<JCAnnotation> findAnnotations(JavacNode fieldNode, Pattern namePattern) {
		ListBuffer<JCAnnotation> result = new ListBuffer<JCAnnotation>();
		for (JavacNode child : fieldNode.down()) {
			if (child.getKind() == Kind.ANNOTATION) {
				JCAnnotation annotation = (JCAnnotation) child.get();
				String name = annotation.annotationType.toString();
				int idx = name.lastIndexOf(""."");
				String suspect = idx == -1 ? name : name.substring(idx + 1);
				if (namePattern.matcher(suspect).matches()) {
					result.append(annotation);
				}
			}
		}	
		return result.toList();
	}
	
	public static String scanForNearestAnnotation(JavacNode node, String... anns) {
		while (node != null) {
			for (JavacNode ann : node.down()) {
				if (ann.getKind() != Kind.ANNOTATION) continue;
				JCAnnotation a = (JCAnnotation) ann.get();
				for (String annToFind : anns) if (typeMatches(annToFind, node, a.annotationType)) return annToFind;
			}
			node = node.up();
		}
		
		return null;
	}
	
	public static boolean hasNonNullAnnotations(JavacNode node) {
		for (JavacNode child : node.down()) {
			if (child.getKind() == Kind.ANNOTATION) {
				JCAnnotation annotation = (JCAnnotation) child.get();
				for (String nn : NONNULL_ANNOTATIONS) if (typeMatches(nn, node, annotation.annotationType)) return true;
			}
		}
		
		return false;
	}
	
	public static boolean hasNonNullAnnotations(JavacNode node, List<JCAnnotation> anns) {
		if (anns == null) return false;
		for (JCAnnotation ann : anns) {
			for (String nn : NONNULL_ANNOTATIONS) if (typeMatches(nn, node, ann)) return true;
		}
		
		return false;
	}
	
	/**
	 * Searches the given field node for annotations and returns each one that is 'copyable' (either via configuration or from the base list).
	 */
	public static List<JCAnnotation> findCopyableAnnotations(JavacNode node) {
		JCAnnotation anno = null;
		String annoName = null;
		for (JavacNode child : node.down()) {
			if (child.getKind() == Kind.ANNOTATION) {
				if (anno != null) {
					annoName = """";
					break;
				}
				JCAnnotation annotation = (JCAnnotation) child.get();
				annoName = annotation.annotationType.toString();
				anno = annotation;
			}
		}
		
		if (annoName == null) return List.nil();
		
		java.util.List<TypeName> configuredCopyable = node.getAst().readConfiguration(ConfigurationKeys.COPYABLE_ANNOTATIONS);
		
		if (!annoName.isEmpty()) {
			for (TypeName cn : configuredCopyable) if (cn != null && typeMatches(cn.toString(), node, anno.annotationType)) return List.of(anno);
			for (String bn : BASE_COPYABLE_ANNOTATIONS) if (typeMatches(bn, node, anno.annotationType)) return List.of(anno);
		}
		
		ListBuffer<JCAnnotation> result = new ListBuffer<JCAnnotation>();
		for (JavacNode child : node.down()) {
			if (child.getKind() == Kind.ANNOTATION) {
				JCAnnotation annotation = (JCAnnotation) child.get();
				boolean match = false;
				for (TypeName cn : configuredCopyable) if (cn != null && typeMatches(cn.toString(), node, annotation.annotationType)) {
					result.append(annotation);
					match = true;
					break;
				}
				if (!match) for (String bn : BASE_COPYABLE_ANNOTATIONS) if (typeMatches(bn, node, annotation.annotationType)) {
					result.append(annotation);
					break;
				}
			}
		}
		return result.toList();
	}
	
	/**
	 * Searches the given field node for annotations that are specifically intentioned to be copied to the setter.
	 */
	public static List<JCAnnotation> findCopyableToSetterAnnotations(JavacNode node) {
		return findAnnotationsInList(node, COPY_TO_SETTER_ANNOTATIONS);
	}

	/**
	 * Searches the given field node for annotations that are specifically intentioned to be copied to the builder's singular method.
	 */
	public static List<JCAnnotation> findCopyableToBuilderSingularSetterAnnotations(JavacNode node) {
		return findAnnotationsInList(node, COPY_TO_BUILDER_SINGULAR_SETTER_ANNOTATIONS);
	}
	
	/**
	 * Searches the given field node for annotations that are in the given list, and returns those.
	 */
	private static List<JCAnnotation> findAnnotationsInList(JavacNode node, java.util.List<String> annotationsToFind) {
		JCAnnotation anno = null;
		String annoName = null;
		for (JavacNode child : node.down()) {
			if (child.getKind() == Kind.ANNOTATION) {
				if (anno != null) {
					annoName = """";
					break;
				}
				JCAnnotation annotation = (JCAnnotation) child.get();
				annoName = annotation.annotationType.toString();
				anno = annotation;
			}
		}
		
		if (annoName == null) return List.nil();
		
		if (!annoName.isEmpty()) {
			for (String bn : annotationsToFind) if (typeMatches(bn, node, anno.annotationType)) return List.of(anno);
		}
		
		ListBuffer<JCAnnotation> result = new ListBuffer<JCAnnotation>();
		for (JavacNode child : node.down()) {
			if (child.getKind() == Kind.ANNOTATION) {
				JCAnnotation annotation = (JCAnnotation) child.get();
				boolean match = false;
				if (!match) for (String bn : annotationsToFind) if (typeMatches(bn, node, annotation.annotationType)) {
					result.append(annotation);
					break;
				}
			}
		}
		return result.toList();
	}
	
	/**
	 * Generates a new statement that checks if the given variable is null, and if so, throws a configured exception with the
	 * variable name as message.
	 */
	public static JCStatement generateNullCheck(JavacTreeMaker maker, JavacNode variable, JavacNode source) {
		return generateNullCheck(maker, (JCVariableDecl) variable.get(), source);
	}
	
	/**
	 * Generates a new statement that checks if the given local is null, and if so, throws a configured exception with the
	 * local variable name as message. 
	 */
	public static JCStatement generateNullCheck(JavacTreeMaker maker, JCExpression typeNode, Name varName, JavacNode source, String customMessage) {
		NullCheckExceptionType exceptionType = source.getAst().readConfiguration(ConfigurationKeys.NON_NULL_EXCEPTION_TYPE);
		if (exceptionType == null) exceptionType = NullCheckExceptionType.NULL_POINTER_EXCEPTION;
		
		if (typeNode != null && isPrimitive(typeNode)) return null;
		JCLiteral message = maker.Literal(exceptionType.toExceptionMessage(varName.toString(), customMessage));
		
		LombokImmutableList<String> method = exceptionType.getMethod();
		if (method != null) {
			return maker.Exec(maker.Apply(List.<JCExpression>nil(), chainDots(source, method), List.of(maker.Ident(varName), message)));
		}
		
		if (exceptionType == NullCheckExceptionType.ASSERTION) {
			return maker.Assert(maker.Binary(CTC_NOT_EQUAL, maker.Ident(varName), maker.Literal(CTC_BOT, null)), message);
		}
		
		JCExpression exType = genTypeRef(source, exceptionType.getExceptionType());
		JCExpression exception = maker.NewClass(null, List.<JCExpression>nil(), exType, List.<JCExpression>of(message), null);
		JCStatement throwStatement = maker.Throw(exception);
		JCBlock throwBlock = maker.Block(0, List.of(throwStatement));
		return maker.If(maker.Binary(CTC_EQUAL, maker.Ident(varName), maker.Literal(CTC_BOT, null)), throwBlock, null);
	}
	
	/**
	 * Generates a new statement that checks if the given variable is null, and if so, throws a configured exception with the
	 * variable name as message. 
	 * 
	 * This is a special case method reserved for use when the provided declaration differs from the
	 * variable's declaration, i.e. in a constructor or setter where the local parameter is named the same but with the prefix
	 * stripped as a result of @Accessors.prefix.
	 */
	public static JCStatement generateNullCheck(JavacTreeMaker maker, JCVariableDecl varDecl, JavacNode source) {
		return generateNullCheck(maker, varDecl.vartype, varDecl.name, source, null);
	}
	
	/**
	 * Given a list of field names and a node referring to a type, finds each name in the list that does not match a field within the type.
	 */
	public static List<Integer> createListOfNonExistentFields(List<String> list, JavacNode type, boolean excludeStandard, boolean excludeTransient) {
		boolean[] matched = new boolean[list.size()];
		
		for (JavacNode child : type.down()) {
			if (list.isEmpty()) break;
			if (child.getKind() != Kind.FIELD) continue;
			JCVariableDecl field = (JCVariableDecl)child.get();
			if (excludeStandard) {
				if ((field.mods.flags & Flags.STATIC) != 0) continue;
				if (field.name.toString().startsWith(""$"")) continue;
			}
			if (excludeTransient && (field.mods.flags & Flags.TRANSIENT) != 0) continue;
			
			int idx = list.indexOf(child.getName());
			if (idx > -1) matched[idx] = true;
		}
		
		ListBuffer<Integer> problematic = new ListBuffer<Integer>();
		for (int i = 0 ; i < list.size() ; i++) {
			if (!matched[i]) problematic.append(i);
		}
		
		return problematic.toList();
	}
	
	static List<JCAnnotation> unboxAndRemoveAnnotationParameter(JCAnnotation ast, String parameterName, String errorName, JavacNode annotationNode) {
		ListBuffer<JCExpression> params = new ListBuffer<JCExpression>();
		ListBuffer<JCAnnotation> result = new ListBuffer<JCAnnotation>();
		
		outer:
		for (JCExpression param : ast.args) {
			boolean allowRaw;
			String nameOfParam = ""value"";
			JCExpression valueOfParam = null;
			if (param instanceof JCAssign) {
				JCAssign assign = (JCAssign) param;
				if (assign.lhs instanceof JCIdent) {
					JCIdent ident = (JCIdent) assign.lhs;
					nameOfParam = ident.name.toString();
				}
				valueOfParam = assign.rhs;
			}
			
			/* strip trailing underscores */ {
				int lastIdx;
				for (lastIdx = nameOfParam.length() ; lastIdx > 0; lastIdx--) {
					if (nameOfParam.charAt(lastIdx - 1) != '_') break;
				}
				allowRaw = lastIdx < nameOfParam.length();
				nameOfParam = nameOfParam.substring(0, lastIdx);
			}
			
			if (!parameterName.equals(nameOfParam)) {
				params.append(param);
				continue outer;
			}
			
			int endPos = Javac.getEndPosition(param.pos(), (JCCompilationUnit) annotationNode.top().get());
			annotationNode.getAst().removeFromDeferredDiagnostics(param.pos, endPos);
			
			if (valueOfParam instanceof JCAnnotation) {
				String dummyAnnotationName = ((JCAnnotation) valueOfParam).annotationType.toString();
				dummyAnnotationName = dummyAnnotationName.replace(""_"", """").replace(""$"", """").replace(""x"", """").replace(""X"", """");
				if (dummyAnnotationName.length() > 0) {
					if (allowRaw) {
						result.append((JCAnnotation) valueOfParam);
					} else {
						addError(errorName, annotationNode);
						continue outer;
					}
				} else {
					for (JCExpression expr : ((JCAnnotation) valueOfParam).args) {
						if (expr instanceof JCAssign && ((JCAssign) expr).lhs instanceof JCIdent) {
							JCIdent id = (JCIdent) ((JCAssign) expr).lhs;
							if (""value"".equals(id.name.toString())) {
								expr = ((JCAssign) expr).rhs;
							} else {
								addError(errorName, annotationNode);
							}
						}
						
						if (expr instanceof JCAnnotation) {
							result.append((JCAnnotation) expr);
						} else if (expr instanceof JCNewArray) {
							for (JCExpression expr2 : ((JCNewArray) expr).elems) {
								if (expr2 instanceof JCAnnotation) {
									result.append((JCAnnotation) expr2);
								} else {
									addError(errorName, annotationNode);
									continue outer;
								}
							}
						} else {
							addError(errorName, annotationNode);
							continue outer;
						}
					}
				}
			} else if (valueOfParam instanceof JCNewArray) {
				JCNewArray arr = (JCNewArray) valueOfParam;
				if (arr.elems.isEmpty()) {
					// Just remove it, this is always fine.
				} else if (allowRaw) {
					for (JCExpression jce : arr.elems) {
						if (jce instanceof JCAnnotation) result.append((JCAnnotation) jce);
						else addError(errorName, annotationNode);
					}
				} else {
					addError(errorName, annotationNode);
				}
			} else {
				addError(errorName, annotationNode);
			}
		}
		for (JCAnnotation annotation : result) {
			clearTypes(annotation);
		}
		ast.args = params.toList();
		return result.toList();
	}
	
	/**
	 * Removes all type information from the provided tree.
	 */
	private static void clearTypes(JCTree tree) {
		tree.accept(new TreeScanner() {
			@Override public void scan(JCTree tree) {
				if (tree == null) return;
				tree.type = null;
				super.scan(tree);
			}
			@Override public void visitClassDef(JCClassDecl tree) {
				tree.sym = null;
				super.visitClassDef(tree);
			}
			@Override public void visitMethodDef(JCMethodDecl tree) {
				tree.sym = null;
				super.visitMethodDef(tree);
			}
			@Override public void visitVarDef(JCVariableDecl tree) {
				tree.sym = null;
				super.visitVarDef(tree);
			}
			@Override public void visitSelect(JCFieldAccess tree) {
				tree.sym = null;
				super.visitSelect(tree);
			}
			@Override public void visitIdent(JCIdent tree) {
				tree.sym = null;
				super.visitIdent(tree);
			}
			@Override public void visitAnnotation(JCAnnotation tree) {
				JCAnnotationReflect.setAttribute(tree, null);
				super.visitAnnotation(tree);
			}
		});
	}
	
	private static void addError(String errorName, JavacNode node) {
		if (node.getLatestJavaSpecSupported() < 8) {
			node.addError(""The correct format up to JDK7 is "" + errorName + ""=@__({@SomeAnnotation, @SomeOtherAnnotation}))"");
		} else {
			node.addError(""The correct format for JDK8+ is "" + errorName + ""_={@SomeAnnotation, @SomeOtherAnnotation})"");
		}
	}
	
	public static List<JCTypeParameter> copyTypeParams(JavacNode source, List<JCTypeParameter> params) {
		if (params == null || params.isEmpty()) return params;
		ListBuffer<JCTypeParameter> out = new ListBuffer<JCTypeParameter>();
		JavacTreeMaker maker = source.getTreeMaker();
		for (JCTypeParameter tp : params) {
			List<JCExpression> bounds = tp.bounds;
			if (bounds != null && !bounds.isEmpty()) {
				ListBuffer<JCExpression> boundsCopy = new ListBuffer<JCExpression>();
				for (JCExpression expr : tp.bounds) {
					boundsCopy.append(cloneType(maker, expr, source));
				}
				bounds = boundsCopy.toList();
			}
			out.append(maker.TypeParameter(tp.name, bounds));
		}
		return out.toList();
	}
	
	public static List<JCAnnotation> getTypeUseAnnotations(JCExpression from) {
		if (!JCAnnotatedTypeReflect.is(from)) return List.nil();
		return JCAnnotatedTypeReflect.getAnnotations(from);
	}
	
	public static JCExpression removeTypeUseAnnotations(JCExpression from) {
		if (!JCAnnotatedTypeReflect.is(from)) return from;
		return JCAnnotatedTypeReflect.getUnderlyingType(from);
	}
	
	public static JCExpression namePlusTypeParamsToTypeReference(JavacTreeMaker maker, JavacNode type, List<JCTypeParameter> params) {
		JCClassDecl td = (JCClassDecl) type.get();
		boolean instance = (td.mods.flags & Flags.STATIC) == 0;
		return namePlusTypeParamsToTypeReference(maker, type.up(), td.name, instance, params, List.<JCAnnotation>nil());
	}
	
	public static JCExpression namePlusTypeParamsToTypeReference(JavacTreeMaker maker, JavacNode type, List<JCTypeParameter> params, List<JCAnnotation> annotations) {
		JCClassDecl td = (JCClassDecl) type.get();
		boolean instance = (td.mods.flags & Flags.STATIC) == 0;
		return namePlusTypeParamsToTypeReference(maker, type.up(), td.name, instance, params, annotations);
	}
	
	public static JCExpression namePlusTypeParamsToTypeReference(JavacTreeMaker maker, JavacNode parentType, Name typeName, boolean instance, List<JCTypeParameter> params) {
		return namePlusTypeParamsToTypeReference(maker, parentType, typeName, instance, params, List.<JCAnnotation>nil());
	}
	
	public static JCExpression namePlusTypeParamsToTypeReference(JavacTreeMaker maker, JavacNode parentType, Name typeName, boolean instance, List<JCTypeParameter> params, List<JCAnnotation> annotations) {
		JCExpression r = null;
		if (parentType != null && parentType.getKind() == Kind.TYPE && !parentType.getName().isEmpty()) {
			JCClassDecl td = (JCClassDecl) parentType.get();
			boolean outerInstance = instance && ((td.mods.flags & Flags.STATIC) == 0);
			List<JCTypeParameter> outerParams = instance ? td.typarams : List.<JCTypeParameter>nil();
			r = namePlusTypeParamsToTypeReference(maker, parentType.up(), td.name, outerInstance, outerParams, List.<JCAnnotation>nil());
		}
		
		r = r == null ? maker.Ident(typeName) : maker.Select(r, typeName);
		if (!annotations.isEmpty()) r = JCAnnotatedTypeReflect.create(annotations, r);
		if (!params.isEmpty()) r = maker.TypeApply(r, typeParameterNames(maker, params));
		return r;
	}
	
	public static List<JCExpression> typeParameterNames(JavacTreeMaker maker, List<JCTypeParameter> params) {
		ListBuffer<JCExpression> typeArgs = new ListBuffer<JCExpression>();
		for (JCTypeParameter param : params) {
			typeArgs.append(maker.Ident(param.name));
		}
		return typeArgs.toList();
	}
	
	public static void sanityCheckForMethodGeneratingAnnotationsOnBuilderClass(JavacNode typeNode, JavacNode errorNode) {
		List<String> disallowed = List.nil();
		for (JavacNode child : typeNode.down()) {
			for (String annType : INVALID_ON_BUILDERS) {
				if (annotationTypeMatches(annType, child)) {
					int lastIndex = annType.lastIndexOf('.');
					disallowed = disallowed.append(lastIndex == -1 ? annType : annType.substring(lastIndex + 1));
				}
			}
		}
		
		int size = disallowed.size();
		if (size == 0) return;
		if (size == 1) {
			errorNode.addError(""@"" + disallowed.head + "" is not allowed on builder classes."");
			return;
		}
		StringBuilder out = new StringBuilder();
		for (String a : disallowed) out.append(""@"").append(a).append("", "");
		out.setLength(out.length() - 2);
		errorNode.addError(out.append("" are not allowed on builder classes."").toString());
	}
	
	static List<JCAnnotation> copyAnnotations(List<? extends JCExpression> in) {
		ListBuffer<JCAnnotation> out = new ListBuffer<JCAnnotation>();
		for (JCExpression expr : in) {
			if (!(expr instanceof JCAnnotation)) continue;
			out.append((JCAnnotation) expr.clone());
		}
		return out.toList();
	}
	
	static List<JCAnnotation> mergeAnnotations(List<JCAnnotation> a, List<JCAnnotation> b) {
		if (a == null || a.isEmpty()) return b;
		if (b == null || b.isEmpty()) return a;
		ListBuffer<JCAnnotation> out = new ListBuffer<JCAnnotation>();
		for (JCAnnotation ann : a) out.append(ann);
		for (JCAnnotation ann : b) out.append(ann);
		return out.toList();
	}
	
	/**
	 * Returns {@code true} if the provided node is an actual class and not some other type declaration (so, not an annotation definition, interface, enum, or record).
	 */
	public static boolean isClass(JavacNode typeNode) {
		return isClassAndDoesNotHaveFlags(typeNode, Flags.INTERFACE | Flags.ENUM | Flags.ANNOTATION | RECORD);
	}
	
	/**
	 * Returns {@code true} if the provided node is an actual class or enum and not some other type declaration (so, not an annotation definition, interface, or record).
	 */
	public static boolean isClassOrEnum(JavacNode typeNode) {
		return isClassAndDoesNotHaveFlags(typeNode, Flags.INTERFACE | Flags.ANNOTATION | RECORD);
	}
	
	/**
	 * Returns {@code true} if the provided node is an actual class, an enum or a record and not some other type declaration (so, not an annotation definition or interface).
	 */
	public static boolean isClassEnumOrRecord(JavacNode typeNode) {
		return isClassAndDoesNotHaveFlags(typeNode, Flags.INTERFACE | Flags.ANNOTATION);
	}
	
	/**
	 * Returns {@code true} if the provided node is a record declaration (so, not an annotation definition, interface, enum, or plain class).
	 */
	public static boolean isRecord(JavacNode typeNode) {
		return typeNode.getKind() == Kind.TYPE && (((JCClassDecl) typeNode.get()).mods.flags & RECORD) != 0;
	}
	
	public static boolean isClassAndDoesNotHaveFlags(JavacNode typeNode, long flags) {
		JCClassDecl typeDecl = null;
		if (typeNode.get() instanceof JCClassDecl) typeDecl = (JCClassDecl) typeNode.get();
		else return false;
		
		long typeDeclflags = typeDecl == null ? 0 : typeDecl.mods.flags;
		return (typeDeclflags & flags) == 0;
	}
	
	/**
	 * Returns {@code true} if the provided node supports static methods and types (top level or static class)
	 */
	public static boolean isStaticAllowed(JavacNode typeNode) {
		boolean staticAllowed = true;
		
		while (typeNode.getKind() != Kind.COMPILATION_UNIT) {
			if (!staticAllowed) return false;
			
			staticAllowed = typeNode.isStatic();
			typeNode = typeNode.up();
		}
		return true;
	}
	
	public static JavacNode upToTypeNode(JavacNode node) {
		if (node == null) throw new NullPointerException(""node"");
		while ((node != null) && !(node.get() instanceof JCClassDecl)) node = node.up();
		
		return node;
	}
	
	public static List<JCExpression> cloneTypes(JavacTreeMaker maker, List<JCExpression> in, JavacNode source) {
		if (in.isEmpty()) return List.nil();
		if (in.size() == 1) return List.of(cloneType(maker, in.get(0), source));
		ListBuffer<JCExpression> lb = new ListBuffer<JCExpression>();
		for (JCExpression expr : in) lb.append(cloneType(maker, expr, source));
		return lb.toList();
	}
	
	/**
	 * Creates a full clone of a given javac AST type node. Every part is cloned (every identifier, every select, every wildcard, every type apply, every type_use annotation).
	 * 
	 * If there's any node in the tree that we don't know how to clone, that part isn't cloned. However, we wouldn't know what could possibly show up that we
	 * can't currently clone; that's just a safeguard.
	 * 
	 * This should be used if the type looks the same in the code, but resolves differently. For example, a static method that has some generics in it named after
	 * the class's own parameter, but as its a static method, the static method's notion of {@code T} is different from the class notion of {@code T}. If you're duplicating
	 * a type used in the class context, you need to use this method.
	 */
	public static JCExpression cloneType(JavacTreeMaker maker, JCExpression in, JavacNode source) {
		JCExpression out = cloneType0(maker, in);
		if (out != null) recursiveSetGeneratedBy(out, source);
		return out;
	}
	
	private static JCExpression cloneType0(JavacTreeMaker maker, JCTree in) {
		if (in == null) return null;
		
		if (in instanceof JCPrimitiveTypeTree) {
			return maker.TypeIdent(TypeTag.typeTag(in));
		}
		
		if (in instanceof JCIdent) {
			return maker.Ident(((JCIdent) in).name);
		}
		
		if (in instanceof JCFieldAccess) {
			JCFieldAccess fa = (JCFieldAccess) in;
			return maker.Select(cloneType0(maker, fa.selected), fa.name);
		}
		
		if (in instanceof JCArrayTypeTree) {
			JCArrayTypeTree att = (JCArrayTypeTree) in;
			return maker.TypeArray(cloneType0(maker, att.elemtype));
		}
		
		if (in instanceof JCTypeApply) {
			JCTypeApply ta = (JCTypeApply) in;
			ListBuffer<JCExpression> lb = new ListBuffer<JCExpression>();
			for (JCExpression typeArg : ta.arguments) {
				lb.append(cloneType0(maker, typeArg));
			}
			return maker.TypeApply(cloneType0(maker, ta.clazz), lb.toList());
		}
		
		if (in instanceof JCWildcard) {
			JCWildcard w = (JCWildcard) in;
			JCExpression newInner = cloneType0(maker, w.inner);
			TypeBoundKind newKind;
			switch (w.getKind()) {
			case SUPER_WILDCARD:
				newKind = maker.TypeBoundKind(BoundKind.SUPER);
				break;
			case EXTENDS_WILDCARD:
				newKind = maker.TypeBoundKind(BoundKind.EXTENDS);
				break;
			default:
			case UNBOUNDED_WILDCARD:
				newKind = maker.TypeBoundKind(BoundKind.UNBOUND);
				break;
			}
			return maker.Wildcard(newKind, newInner);
		}
		
		if (JCAnnotatedTypeReflect.is(in)) {
			JCExpression underlyingType = cloneType0(maker, JCAnnotatedTypeReflect.getUnderlyingType(in));
			List<JCAnnotation> anns = copyAnnotations(JCAnnotatedTypeReflect.getAnnotations(in));
			return JCAnnotatedTypeReflect.create(anns, underlyingType);
		}
		
		// This is somewhat unsafe, but it's better than outright throwing an exception here. Returning null will just cause an exception down the pipeline.
		return (JCExpression) in;
	}
	
	public static enum CopyJavadoc {
		VERBATIM {
			@Override public String apply(final JCCompilationUnit cu, final JavacNode node) {
				return Javac.getDocComment(cu, node.get());
			}
		},
		GETTER {
			@Override public String apply(final JCCompilationUnit cu, final JavacNode node) {
				final JCTree n = node.get();
				String javadoc = Javac.getDocComment(cu, n);
				// step 1: Check if there is a 'GETTER' section. If yes, that becomes the new method's javadoc.
				String out = getJavadocSection(javadoc, ""GETTER"");
				final boolean sectionBased = out != null;
				if (!sectionBased) {
					out = stripLinesWithTagFromJavadoc(stripSectionsFromJavadoc(javadoc), JavadocTag.PARAM);
				}
				node.getAst().cleanupTask(""javadocfilter-getter"", n, new CleanupTask() {
					@Override public void cleanup() {
						String javadoc = Javac.getDocComment(cu, n);
						if (javadoc == null || javadoc.isEmpty()) return;
						javadoc = stripSectionsFromJavadoc(javadoc);
						if (!sectionBased) {
							javadoc = stripLinesWithTagFromJavadoc(stripSectionsFromJavadoc(javadoc), JavadocTag.RETURN);
						}
						Javac.setDocComment(cu, n, javadoc);
					}
				});
				return out;
			}
		},
		SETTER {
			@Override public String apply(final JCCompilationUnit cu, final JavacNode node) {
				return applySetter(cu, node, ""SETTER"");
			}
		},
		WITH {
			@Override public String apply(final JCCompilationUnit cu, final JavacNode node) {
				return addReturnsUpdatedSelfIfNeeded(applySetter(cu, node, ""WITH|WITHER""));
			}
		},
		WITH_BY {
			@Override public String apply(final JCCompilationUnit cu, final JavacNode node) {
				return applySetter(cu, node, ""WITHBY|WITH_BY"");
			}
		};
		
		public abstract String apply(final JCCompilationUnit cu, final JavacNode node);
		
		private static String applySetter(final JCCompilationUnit cu, JavacNode node, String sectionName) {
			final JCTree n = node.get();
			String javadoc = Javac.getDocComment(cu, n);
			// step 1: Check if there is a 'SETTER' section. If yes, that becomes the new method's javadoc.
			String out = getJavadocSection(javadoc, sectionName);
			final boolean sectionBased = out != null;
			if (!sectionBased) {
				out = stripLinesWithTagFromJavadoc(stripSectionsFromJavadoc(javadoc), JavadocTag.RETURN);
			}
			node.getAst().cleanupTask(""javadocfilter-setter"", n, new CleanupTask() {
				@Override public void cleanup() {
					String javadoc = Javac.getDocComment(cu, n);
					if (javadoc == null || javadoc.isEmpty()) return;
					javadoc = stripSectionsFromJavadoc(javadoc);
					if (!sectionBased) {
						javadoc = stripLinesWithTagFromJavadoc(stripSectionsFromJavadoc(javadoc), JavadocTag.PARAM);
					}
					Javac.setDocComment(cu, n, javadoc);
				}
			});
			return shouldReturnThis(node) ? addReturnsThisIfNeeded(out) : out;
		}
	}
	
	public static void copyJavadoc(JavacNode from, JCTree to, CopyJavadoc copyMode) {
		copyJavadoc(from, to, copyMode, false);
	}
	
	/**
	 * Copies javadoc on one node to the other.
	 * 
	 * in 'GETTER' copyMode, first a 'GETTER' segment is searched for. If it exists, that will become the javadoc for the 'to' node, and this section is
	 * stripped out of the 'from' node. If no 'GETTER' segment is found, then the entire javadoc is taken minus any {@code @param} lines and other sections.
	 * any {@code @return} lines are stripped from 'from'.
	 * 
	 * in 'SETTER' mode, stripping works similarly to 'GETTER' mode, except {@code param} are copied and stripped from the original and {@code @return} are skipped.
	 */
	public static void copyJavadoc(JavacNode from, JCTree to, CopyJavadoc copyMode, boolean forceAddReturn) {
		if (copyMode == null) copyMode = CopyJavadoc.VERBATIM;
		try {
			JCCompilationUnit cu = ((JCCompilationUnit) from.top().get());
			String newJavadoc = copyMode.apply(cu, from);
			if (forceAddReturn) {
				newJavadoc = addReturnsThisIfNeeded(newJavadoc);
			}
			Javac.setDocComment(cu, to, newJavadoc);
		} catch (Exception ignore) {}
	}
	
	public static boolean isDirectDescendantOfObject(JavacNode typeNode) {
		if (!(typeNode.get() instanceof JCClassDecl)) throw new IllegalArgumentException(""not a type node"");
		JCTree extending = Javac.getExtendsClause((JCClassDecl) typeNode.get());
		if (extending == null) return true;
		String p = extending.toString();
		return p.equals(""Object"") || p.equals(""java.lang.Object"");
	}
	
	public static void createRelevantNullableAnnotation(JavacNode typeNode, JCMethodDecl mth) {
		NullAnnotationLibrary lib = typeNode.getAst().readConfiguration(ConfigurationKeys.ADD_NULL_ANNOTATIONS);
		if (lib == null) return;
		applyAnnotationToMethodDecl(typeNode, mth, lib.getNullableAnnotation(), lib.isTypeUse());
	}
	
	public static void createRelevantNonNullAnnotation(JavacNode typeNode, JCMethodDecl mth) {
		NullAnnotationLibrary lib = typeNode.getAst().readConfiguration(ConfigurationKeys.ADD_NULL_ANNOTATIONS);
		if (lib == null) return;
		applyAnnotationToMethodDecl(typeNode, mth, lib.getNonNullAnnotation(), lib.isTypeUse());
	}
	
	public static void createRelevantNonNullAnnotation(JavacNode typeNode, JCVariableDecl arg) {
		NullAnnotationLibrary lib = typeNode.getAst().readConfiguration(ConfigurationKeys.ADD_NULL_ANNOTATIONS);
		if (lib == null) return;
		
		applyAnnotationToVarDecl(typeNode, arg, lib.getNonNullAnnotation(), lib.isTypeUse());
	}
	
	public static void createRelevantNullableAnnotation(JavacNode typeNode, JCVariableDecl arg) {
		NullAnnotationLibrary lib = typeNode.getAst().readConfiguration(ConfigurationKeys.ADD_NULL_ANNOTATIONS);
		if (lib == null) return;
		
		applyAnnotationToVarDecl(typeNode, arg, lib.getNullableAnnotation(), lib.isTypeUse());
	}
	
	private static void applyAnnotationToMethodDecl(JavacNode typeNode, JCMethodDecl mth, String annType, boolean typeUse) {
		if (annType == null) return;
		JavacTreeMaker maker = typeNode.getTreeMaker();
		
		JCAnnotation m = maker.Annotation(genTypeRef(typeNode, annType), List.<JCExpression>nil());
		if (typeUse) {
			JCExpression resType = mth.restype;
			if (resType instanceof JCTypeApply) {
				JCTypeApply ta = (JCTypeApply) resType;
				if (ta.clazz instanceof JCFieldAccess) {
					mth.restype = maker.TypeApply(maker.AnnotatedType(List.of(m), ta.clazz), ta.arguments);
					return;
				}
				resType = ta.clazz;
			}
			
			if (resType instanceof JCFieldAccess || resType instanceof JCArrayTypeTree) {
				mth.restype = maker.AnnotatedType(List.of(m), resType);
				return;
			}
			
			if (JCAnnotatedTypeReflect.is(resType)) {
				List<JCAnnotation> annotations = JCAnnotatedTypeReflect.getAnnotations(resType);
				JCAnnotatedTypeReflect.setAnnotations(resType, annotations.prepend(m));
				return;
			}
			
			if (resType instanceof JCPrimitiveTypeTree || resType instanceof JCIdent) {
				mth.mods.annotations = mth.mods.annotations == null ? List.of(m) : mth.mods.annotations.prepend(m);
			}
		} else {
			mth.mods.annotations = mth.mods.annotations == null ? List.of(m) : mth.mods.annotations.prepend(m);
		}
	}
	
	private static void applyAnnotationToVarDecl(JavacNode typeNode, JCVariableDecl arg, String annType, boolean typeUse) {
		if (annType == null) return;
		JavacTreeMaker maker = typeNode.getTreeMaker();
		
		JCAnnotation m = maker.Annotation(genTypeRef(typeNode, annType), List.<JCExpression>nil());
		if (typeUse) {
			JCExpression varType = arg.vartype;
			JCTypeApply ta = null;
			if (varType instanceof JCTypeApply) {
				ta = (JCTypeApply) varType;
				varType = ta.clazz;
			}
			
			if (varType instanceof JCFieldAccess || varType instanceof JCArrayTypeTree) {
				varType = maker.AnnotatedType(List.of(m), varType);
				if (ta != null) ta.clazz = varType;
				else arg.vartype = varType;
				return;
			}
			
			if (JCAnnotatedTypeReflect.is(varType)) {
				List<JCAnnotation> annotations = JCAnnotatedTypeReflect.getAnnotations(varType);
				JCAnnotatedTypeReflect.setAnnotations(varType, annotations.prepend(m));
				return;
			}
			
			if (varType instanceof JCPrimitiveTypeTree || varType instanceof JCIdent) {
				arg.mods.annotations = arg.mods.annotations == null ? List.of(m) : arg.mods.annotations.prepend(m);
			}
		} else {
			arg.mods.annotations = arg.mods.annotations == null ? List.of(m) : arg.mods.annotations.prepend(m);
		}
	}
}",1,"[439, 334, 2000, 123, 437, 2000, 40, 41, 123, 125, 437, 457, 334, 2001, 378, 2002, 123, 437, 381, 2003, 2004, 59, 2001, 40, 2003, 2004, 41, 123, 467, 46, 2004, 61, 2004, 59, 125, 64, 2005, 439, 492, 2006, 40, 2007, 2008, 41, 123, 392, 40, 2008, 614, 424, 41, 450, 59, 2009, 40, 2008, 44, 2004, 41, 59, 463, 46, 2006, 40, 2008, 41, 59, 125, 125, 439, 457, 324, 2010, 40, 2011, 2012, 41, 123, 450, 2010, 40, 2012, 46, 2013, 40, 41, 41, 59, 125, 439, 457, 324, 2010, 40, 2014, 2015, 41, 123, 2016, 2017, 61, 2016, 46, 2018, 40, 2015, 41, 59, 450, 40, 2017, 46, 2019, 40, 41, 46, 2020, 40, 41, 605, 33, 2017, 46, 2019, 40, 41, 46, 2020, 40, 41, 41, 59, 125, 439, 457, 324, 2021, 40, 2014, 2015, 41, 123, 2022, 2023, 61, 2022, 46, 2024, 40, 2015, 41, 59, 450, 40, 2023, 46, 2025, 40, 41, 46, 2026, 40, 41, 605, 2023, 46, 2025, 40, 41, 46, 2026, 40, 41, 41, 59, 125, 439, 457, 2027, 2028, 40, 2027, 2012, 41, 123, 450, 2029, 46, 2030, 40, 2012, 41, 59, 125, 439, 457, 324, 2031, 40, 2027, 2012, 41, 123, 450, 2028, 40, 2012, 41, 631, 424, 59, 125, 439, 457, 60, 2032, 378, 2027, 62, 2032, 2033, 40, 2032, 2012, 44, 2011, 2034, 41, 123, 392, 40, 2012, 614, 424, 41, 450, 424, 59, 2035, 40, 2012, 44, 2034, 41, 59, 2012, 46, 2036, 40, 418, 2001, 40, 2034, 41, 41, 59, 450, 2012, 59, 125, 439, 457, 60, 2032, 378, 2027, 62, 2032, 2037, 40, 2032, 2012, 44, 2011, 2038, 41, 123, 392, 40, 2012, 614, 424, 41, 450, 424, 59, 392, 40, 2038, 614, 424, 41, 123, 2039, 46, 2040, 40, 2012, 41, 59, 450, 2012, 59, 125, 2041, 46, 2042, 40, 2012, 44, 2038, 46, 2043, 40, 41, 41, 59, 392, 40, 33, 2010, 40, 2038, 46, 2044, 40, 41, 41, 606, 2045, 40, 2012, 41, 41, 123, 2012, 46, 2046, 61, 2038, 46, 2047, 40, 41, 59, 2048, 40, 2012, 44, 2038, 46, 2049, 40, 41, 44, 40, 2050, 41, 2038, 46, 2051, 40, 41, 46, 2043, 40, 41, 41, 59, 125, 450, 2012, 59, 125, 439, 457, 324, 2052, 40, 2027, 2012, 41, 123, 450, 2012, 402, 2053, 605, 40, 40, 40, 2053, 41, 2012, 41, 46, 2054, 46, 2055, 38, 2056, 46, 2057, 41, 631, 1500, 59, 125, 439, 457, 324, 2058, 40, 2059, 2060, 44, 2011, 2012, 41, 123, 450, 2058, 40, 2060, 44, 2012, 44, 380, 41, 59, 125, 439, 457, 324, 2058, 40, 2061, 60, 63, 378, 2062, 62, 2060, 44, 2011, 2012, 41, 123, 450, 2058, 40, 2060, 44, 2012, 44, 380, 41, 59, 125, 439, 457, 324, 2063, 40, 2061, 60, 63, 378, 2062, 62, 2060, 44, 2011, 2012, 41, 123, 450, 2058, 40, 2060, 44, 2012, 44, 473, 41, 59, 125, 437, 457, 324, 2058, 40, 2061, 60, 63, 378, 2062, 62, 2060, 44, 2011, 2012, 44, 324, 353, 41, 123, 392, 40, 2012, 614, 424, 41, 450, 380, 59, 392, 40, 2060, 614, 424, 41, 450, 380, 59, 464, 40, 2012, 46, 2064, 40, 41, 41, 123, 328, 2065, 58, 328, 2066, 58, 328, 2067, 58, 328, 2068, 58, 328, 2069, 58, 385, 40, 2011, 2070, 58, 2012, 46, 2071, 40, 41, 41, 123, 392, 40, 2072, 40, 2060, 44, 2070, 41, 41, 123, 392, 40, 353, 41, 2073, 40, 2070, 44, 2060, 41, 59, 450, 473, 59, 125, 125, 349, 58, 450, 380, 59, 125, 125, 437, 457, 324, 2058, 40, 2059, 2060, 44, 2011, 2012, 44, 324, 353, 41, 123, 392, 40, 2012, 614, 424, 41, 450, 380, 59, 392, 40, 2060, 614, 424, 41, 450, 380, 59, 464, 40, 2012, 46, 2074, 40, 41, 41, 123, 328, 2075, 58, 328, 2076, 58, 328, 2077, 58, 328, 2078, 58, 328, 2079, 58, 385, 40, 2011, 2080, 58, 2012, 46, 2081, 40, 41, 41, 123, 392, 40, 2082, 40, 2060, 44, 2080, 41, 41, 123, 392, 40, 353, 41, 2083, 40, 2080, 44, 2060, 41, 59, 450, 473, 59, 125, 125, 349, 58, 450, 380, 59, 125, 125, 439, 457, 2011, 2084, 40, 2011, 2085, 44, 2059, 2086, 41, 123, 385, 40, 2011, 2087, 58, 2085, 46, 2088, 40, 41, 41, 123, 392, 40, 2087, 46, 2089, 40, 41, 631, 2090, 46, 2091, 41, 344, 59, 2092, 2093, 61, 40, 2092, 41, 2087, 46, 2094, 40, 41, 59, 392, 40, 2093, 46, 2086, 46, 2095, 40, 2086, 41, 41, 450, 2087, 59, 125, 450, 424, 59, 125, 439, 457, 2011, 2096, 40, 2061, 60, 63, 378, 2062, 62, 2060, 44, 2011, 2012, 41, 123, 450, 2096, 40, 2060, 44, 2012, 44, 380, 41, 59, 125, 439, 457, 2011, 2096, 40, 2061, 60, 63, 378, 2062, 62, 2060, 44, 2011, 2012, 44, 324, 353, 41, 123, 392, 40, 2012, 614, 424, 41, 450, 424, 59, 392, 40, 2060, 614, 424, 41, 450, 424, 59, 464, 40, 2012, 46, 2097, 40, 41, 41, 123, 328, 2098, 58, 328, 2099, 58, 328, 2100, 58, 328, 2101, 58, 328, 2102, 58, 385, 40, 2011, 2103, 58, 2012, 46, 2104, 40, 41, 41, 123, 392, 40, 2105, 40, 2060, 44, 2103, 41, 41, 123, 392, 40, 353, 41, 2106, 40, 2103, 44, 2060, 41, 59, 450, 2103, 59, 125, 125, 349, 58, 450, 424, 59, 125, 125, 439, 457, 324, 2107, 40, 2061, 60, 63, 378, 2062, 62, 2060, 44, 2011, 2012, 41, 123, 392, 40, 2012, 46, 2108, 40, 41, 631, 2109, 46, 2110, 41, 450, 380, 59, 450, 2111, 40, 2060, 44, 2012, 44, 40, 40, 2112, 41, 2012, 46, 2113, 40, 41, 41, 46, 2114, 41, 59, 125, 439, 457, 324, 2107, 40, 2059, 2060, 44, 2011, 2012, 41, 123, 392, 40, 2012, 46, 2115, 40, 41, 631, 2116, 46, 2117, 41, 450, 380, 59, 450, 2118, 40, 2060, 44, 2012, 44, 40, 40, 2119, 41, 2012, 46, 2120, 40, 41, 41, 46, 2121, 41, 59, 125, 439, 457, 324, 2122, 40, 2061, 60, 63, 62, 2060, 44, 2011, 2012, 44, 2027, 2123, 41, 123, 450, 2122, 40, 2060, 46, 2124, 40, 41, 44, 2012, 44, 2123, 41, 59, 125, 439, 457, 324, 2122, 40, 2059, 2060, 44, 2011, 2012, 44, 2027, 2123, 41, 123, 2059, 2125, 61, 2123, 614, 424, 63, 424, 58, 2123, 46, 2126, 40, 41, 59, 392, 40, 2125, 614, 424, 606, 2125, 46, 2127, 40, 41, 614, 1500, 41, 450, 380, 59, 404, 2128, 61, 2125, 46, 2129, 40, 607, 41, 43, 1501, 59, 404, 2130, 61, 2131, 46, 2132, 40, 2060, 46, 2129, 40, 607, 41, 44, 2060, 46, 2129, 40, 607, 41, 41, 43, 1501, 59, 404, 2133, 61, 2125, 46, 2127, 40, 41, 45, 2128, 59, 392, 40, 2133, 631, 2060, 46, 2127, 40, 41, 45, 2130, 41, 450, 380, 59, 385, 40, 404, 2134, 61, 1500, 59, 2134, 60, 2133, 59, 2134, 637, 41, 392, 40, 2125, 46, 2135, 40, 2134, 43, 2128, 41, 631, 2060, 46, 2135, 40, 2134, 43, 2130, 41, 41, 450, 380, 59, 2136, 2137, 61, 2012, 46, 2138, 40, 41, 59, 450, 2137, 46, 2122, 40, 2012, 44, 2060, 44, 2125, 41, 59, 125, 439, 457, 324, 2139, 40, 2011, 2140, 41, 123, 392, 40, 33, 40, 2140, 46, 2141, 40, 41, 402, 2142, 41, 41, 450, 380, 59, 2142, 2143, 61, 40, 2142, 41, 2140, 46, 2141, 40, 41, 59, 392, 40, 40, 2143, 46, 2144, 46, 2145, 38, 2146, 46, 2147, 41, 631, 1500, 41, 123, 450, 473, 59, 125, 385, 40, 2011, 2148, 58, 2140, 46, 2149, 40, 41, 41, 123, 392, 40, 2107, 40, 2150, 46, 334, 44, 2148, 41, 41, 123, 450, 473, 59, 125, 125, 450, 380, 59, 125, 439, 457, 2151, 2152, 40, 2011, 2012, 41, 123, 2151, 2153, 61, 2012, 46, 2154, 40, 41, 46, 2155, 40, 2156, 46, 2157, 41, 59, 450, 2153, 614, 424, 63, 2151, 46, 2158, 58, 2153, 59, 125, 439, 457, 324, 2159, 40, 2027, 2012, 41, 123, 392, 40, 2012, 402, 2160, 41, 450, 40, 40, 40, 2160, 41, 2012, 41, 46, 2161, 46, 2162, 38, 2163, 46, 2164, 41, 631, 1500, 59, 392, 40, 2012, 402, 2165, 41, 450, 40, 40, 40, 2165, 41, 2012, 41, 46, 2161, 46, 2162, 38, 2163, 46, 2164, 41, 631, 1500, 59, 392, 40, 2012, 402, 2166, 41, 450, 40, 40, 40, 2166, 41, 2012, 41, 46, 2161, 46, 2162, 38, 2163, 46, 2164, 41, 631, 1500, 59, 450, 380, 59, 125, 439, 457, 60, 2167, 378, 2062, 62, 2168, 60, 2167, 62, 2169, 40, 2061, 60, 2167, 62, 2060, 44, 381, 2011, 2012, 41, 123, 450, 2169, 40, 2060, 44, 40, 2170, 41, 2012, 46, 2171, 40, 41, 44, 2012, 41, 59, 125, 439, 457, 60, 2167, 378, 2062, 62, 2168, 60, 2167, 62, 2169, 40, 2061, 60, 2167, 62, 2060, 44, 2172, 2173, 44, 381, 2011, 2012, 41, 123, 2174, 60, 2059, 44, 2175, 62, 2176, 61, 418, 2177, 60, 2059, 44, 2175, 62, 40, 41, 59, 2178, 60, 2179, 62, 2180, 61, 2173, 46, 2181, 40, 41, 59, 385, 40, 2179, 2182, 58, 2180, 41, 123, 2059, 2183, 59, 2179, 2184, 59, 2185, 46, 2186, 46, 2178, 60, 2059, 62, 2187, 61, 418, 2188, 60, 2059, 62, 40, 41, 59, 2185, 46, 2186, 46, 2178, 60, 2189, 62, 2190, 61, 418, 2188, 60, 2189, 62, 40, 41, 59, 2185, 46, 2186, 46, 2178, 60, 2189, 62, 2191, 61, 418, 2188, 60, 2189, 62, 40, 41, 59, 381, 2185, 46, 2186, 46, 2178, 60, 2192, 62, 2193, 61, 418, 2188, 60, 2192, 62, 40, 41, 59, 392, 40, 2182, 402, 2194, 41, 123, 2194, 2195, 61, 40, 2194, 41, 2182, 59, 2183, 61, 2195, 46, 2196, 46, 2197, 40, 41, 59, 2184, 61, 2195, 46, 2184, 59, 125, 360, 123, 2184, 61, 2182, 59, 2183, 61, 59, 125, 392, 40, 2184, 402, 2198, 41, 123, 2178, 60, 2179, 62, 2199, 61, 40, 40, 2198, 41, 2184, 41, 46, 2199, 59, 385, 40, 2179, 2200, 58, 2199, 41, 123, 2187, 46, 2201, 40, 2200, 46, 2202, 40, 41, 41, 59, 2191, 46, 2201, 40, 2200, 41, 59, 392, 40, 2200, 402, 2172, 41, 123, 474, 123, 64, 2203, 40, 41, 2061, 60, 2167, 62, 2204, 61, 40, 2061, 60, 2167, 62, 41, 2061, 46, 2205, 40, 2200, 46, 2060, 46, 2202, 40, 41, 41, 59, 2190, 46, 2201, 40, 2169, 40, 2204, 44, 40, 2172, 41, 2200, 44, 2012, 41, 41, 59, 125, 329, 40, 2206, 2207, 41, 123, 2190, 46, 2201, 40, 2208, 40, 2200, 41, 41, 59, 125, 125, 360, 123, 2190, 46, 2201, 40, 2209, 40, 2200, 41, 41, 59, 125, 2193, 46, 2201, 40, 2200, 46, 2210, 40, 41, 41, 59, 125, 125, 360, 123, 2187, 46, 2211, 40, 2184, 46, 2212, 40, 41, 41, 59, 2191, 46, 2211, 40, 2184, 41, 59, 392, 40, 2184, 402, 2172, 41, 123, 474, 123, 64, 2213, 40, 41, 2061, 60, 2167, 62, 2214, 61, 40, 2061, 60, 2167, 62, 41, 2061, 46, 2215, 40, 2184, 46, 2060, 46, 2212, 40, 41, 41, 59, 2190, 46, 2211, 40, 2169, 40, 2214, 44, 40, 2172, 41, 2184, 44, 2012, 41, 41, 59, 125, 329, 40, 2216, 2217, 41, 123, 2190, 46, 2211, 40, 2218, 40, 2184, 41, 41, 59, 125, 125, 360, 123, 2190, 46, 2211, 40, 2219, 40, 2184, 41, 41, 59, 125, 2193, 46, 2211, 40, 2184, 46, 2220, 40, 41, 41, 59, 125, 2176, 46, 2221, 40, 2183, 44, 418, 2175, 40, 2012, 44, 2187, 44, 2191, 44, 2190, 44, 473, 41, 123, 64, 2222, 439, 492, 2223, 40, 2059, 2224, 44, 404, 2225, 41, 123, 392, 40, 2225, 60, 1500, 41, 2012, 46, 2226, 40, 2224, 41, 59, 360, 2012, 46, 2226, 40, 2224, 44, 2193, 46, 2227, 40, 2225, 41, 41, 59, 125, 64, 2222, 439, 492, 2228, 40, 2059, 2224, 44, 404, 2225, 41, 123, 392, 40, 2225, 60, 1500, 41, 2012, 46, 2229, 40, 2224, 41, 59, 360, 2012, 46, 2229, 40, 2224, 44, 2193, 46, 2230, 40, 2225, 41, 41, 59, 125, 125, 41, 59, 125, 385, 40, 2231, 2232, 58, 2060, 46, 2233, 40, 41, 41, 123, 392, 40, 33, 2234, 46, 2235, 40, 2232, 46, 2236, 40, 41, 41, 41, 344, 59, 2059, 2086, 61, 2232, 46, 2237, 40, 41, 59, 392, 40, 33, 2176, 46, 2238, 40, 2086, 41, 41, 123, 2176, 46, 2239, 40, 2086, 44, 418, 2175, 40, 2012, 44, 418, 2240, 60, 2059, 62, 40, 41, 44, 418, 2240, 60, 2241, 62, 40, 41, 44, 418, 2240, 60, 2241, 62, 40, 41, 44, 380, 41, 123, 64, 2242, 439, 492, 2243, 40, 2059, 2244, 44, 404, 2245, 41, 123, 2012, 46, 2246, 40, 2244, 41, 59, 125, 64, 2242, 439, 492, 2247, 40, 2059, 2244, 44, 404, 2245, 41, 123, 2012, 46, 2248, 40, 2244, 41, 59, 125, 125, 41, 59, 125, 125, 450, 418, 2168, 60, 2167, 62, 40, 2060, 44, 2176, 44, 2012, 41, 59, 125, 439, 457, 492, 2249, 40, 2011, 2250, 44, 2059, 2251, 41, 123, 2252, 40, 2250, 44, 2251, 41, 59, 125, 439, 457, 492, 2249, 40, 2011, 2250, 44, 2061, 60, 63, 378, 2062, 62, 2251, 41, 123, 2253, 40, 2250, 44, 2251, 46, 2254, 40, 41, 41, 59, 125, 439, 457, 492, 2249, 40, 2011, 2250, 44, 2061, 60, 63, 378, 2062, 62, 2255, 44, 2061, 60, 63, 378, 2062, 62, 2256, 41, 123, 2257, 40, 2250, 44, 2255, 46, 2258, 40, 41, 44, 2256, 46, 2258, 40, 41, 41, 59, 125, 439, 457, 492, 2249, 40, 2011, 2250, 44, 2061, 60, 63, 378, 2062, 62, 2255, 44, 2059, 2256, 41, 123, 2259, 40, 2250, 44, 2255, 46, 2260, 40, 41, 44, 2256, 41, 59, 125, 437, 457, 492, 2261, 40, 2011, 2250, 44, 2059, 613, 2262, 41, 123, 392, 40, 2010, 40, 2250, 41, 41, 450, 59, 392, 40, 33, 2250, 46, 2263, 40, 41, 41, 450, 59, 2011, 2264, 61, 2250, 46, 2265, 40, 41, 59, 464, 40, 2264, 46, 2266, 40, 41, 41, 123, 328, 2267, 58, 328, 2268, 58, 328, 2269, 58, 2270, 2271, 61, 40, 2270, 41, 2264, 46, 2272, 40, 41, 59, 2271, 46, 2273, 46, 2274, 61, 2275, 40, 2271, 46, 2273, 46, 2274, 44, 2250, 46, 2272, 40, 41, 41, 59, 325, 59, 328, 2276, 58, 2277, 2278, 61, 40, 2277, 41, 2264, 46, 2272, 40, 41, 59, 2278, 46, 2273, 46, 2274, 61, 2275, 40, 2278, 46, 2273, 46, 2274, 44, 2250, 46, 2272, 40, 41, 41, 59, 325, 59, 328, 2279, 58, 474, 123, 2280, 2060, 61, 40, 2280, 41, 2264, 46, 2272, 40, 41, 59, 2060, 46, 2273, 46, 2274, 61, 2275, 40, 2060, 46, 2273, 46, 2274, 44, 2250, 46, 2272, 40, 41, 41, 59, 125, 329, 40, 2281, 2282, 41, 123, 125, 325, 59, 349, 58, 450, 59, 125, 2264, 46, 2283, 40, 41, 46, 2284, 40, 41, 59, 385, 40, 2059, 2251, 58, 2262, 41, 123, 2285, 40, 2250, 44, 2251, 41, 59, 125, 125, 439, 457, 492, 2286, 40, 2011, 2012, 44, 2059, 2086, 41, 123, 392, 40, 2010, 40, 2012, 41, 41, 450, 59, 392, 40, 33, 2012, 46, 2287, 40, 41, 41, 450, 59, 2288, 2289, 61, 40, 2288, 41, 2012, 46, 2290, 40, 41, 46, 2291, 40, 41, 59, 385, 40, 2027, 348, 58, 2289, 46, 2292, 41, 123, 392, 40, 33, 40, 348, 402, 2293, 41, 41, 344, 59, 2293, 2294, 61, 40, 2293, 41, 348, 59, 392, 40, 2294, 46, 2295, 41, 344, 59, 392, 40, 33, 2294, 46, 2296, 46, 2297, 40, 41, 46, 2298, 40, 2086, 41, 41, 344, 59, 2299, 46, 2300, 46, 2301, 40, 2294, 44, 473, 41, 59, 125, 125, 437, 457, 2302, 60, 2172, 62, 2303, 40, 2302, 60, 2172, 62, 2304, 44, 2027, 2305, 41, 123, 2306, 60, 2172, 62, 2307, 61, 418, 2306, 60, 2172, 62, 40, 41, 59, 385, 40, 2172, 2308, 58, 2304, 41, 123, 392, 40, 2305, 631, 2308, 41, 2307, 46, 2309, 40, 2308, 41, 59, 125, 450, 2307, 46, 2310, 40, 41, 59, 125, 439, 370, 2311, 123, 2312, 44, 2313, 44, 2314, 59, 125, 439, 457, 2315, 46, 2316, 46, 2302, 60, 2059, 62, 2317, 40, 2011, 2140, 41, 123, 450, 2318, 46, 2317, 40, 2140, 46, 2319, 40, 41, 44, 2320, 40, 2140, 41, 44, 2140, 46, 2321, 40, 41, 44, 2322, 40, 2140, 41, 41, 59, 125, 439, 457, 2059, 2323, 40, 2011, 2140, 41, 123, 450, 2324, 46, 2323, 40, 2140, 46, 2325, 40, 41, 44, 2326, 40, 2140, 41, 44, 2140, 46, 2327, 40, 41, 44, 2328, 40, 2140, 41, 41, 59, 125, 439, 457, 2315, 46, 2316, 46, 2302, 60, 2059, 62, 2329, 40, 2011, 2140, 41, 123, 450, 2330, 46, 2329, 40, 2140, 46, 2331, 40, 41, 44, 2332, 40, 2140, 41, 44, 2140, 46, 2333, 40, 41, 44, 2334, 40, 2140, 41, 41, 59, 125, 439, 457, 2059, 2335, 40, 2011, 2140, 41, 123, 450, 2336, 46, 2335, 40, 2140, 46, 2337, 40, 41, 44, 2338, 40, 2140, 41, 44, 2140, 46, 2339, 40, 41, 44, 2340, 40, 2140, 41, 41, 59, 125, 439, 457, 2315, 46, 2316, 46, 2302, 60, 2059, 62, 2341, 40, 2011, 2140, 41, 123, 450, 2342, 46, 2341, 40, 2140, 46, 2343, 40, 41, 44, 2344, 40, 2140, 41, 44, 2140, 46, 2345, 40, 41, 44, 2346, 40, 2140, 41, 41, 59, 125, 439, 457, 2315, 46, 2316, 46, 2302, 60, 2059, 62, 2347, 40, 2011, 2140, 41, 123, 450, 2348, 46, 2347, 40, 2140, 46, 2349, 40, 41, 44, 2350, 40, 2140, 41, 44, 2140, 46, 2351, 40, 41, 44, 2352, 40, 2140, 41, 41, 59, 125, 439, 457, 2059, 2353, 40, 2011, 2140, 41, 123, 450, 2354, 46, 2353, 40, 2140, 46, 2355, 40, 41, 44, 2356, 40, 2140, 41, 44, 2140, 46, 2357, 40, 41, 44, 2358, 40, 2140, 41, 41, 59, 125, 439, 457, 2059, 2359, 40, 2011, 2140, 41, 123, 450, 2360, 46, 2359, 40, 2140, 46, 2361, 40, 41, 44, 2362, 40, 2140, 41, 44, 2140, 46, 2363, 40, 41, 44, 2364, 40, 2140, 41, 41, 59, 125, 439, 457, 324, 2365, 40, 2011, 2140, 41, 123, 392, 40, 40, 40, 40, 2366, 41, 2140, 46, 2367, 40, 41, 41, 46, 2368, 46, 2369, 38, 2370, 46, 2371, 41, 631, 1500, 41, 450, 380, 59, 2168, 60, 2372, 62, 2373, 61, 2000, 46, 2374, 40, 2140, 41, 59, 450, 2375, 46, 2376, 40, 2373, 44, 2140, 46, 2377, 40, 41, 41, 59, 125, 439, 457, 2378, 2379, 40, 2011, 2380, 41, 123, 2011, 2123, 61, 2380, 59, 2381, 2382, 61, 2380, 46, 2383, 40, 41, 59, 496, 40, 2123, 631, 424, 605, 2123, 46, 2384, 40, 41, 631, 2385, 46, 2386, 41, 2123, 61, 2123, 46, 2387, 40, 41, 59, 450, 2000, 46, 2388, 40, 2382, 44, 2123, 44, 40, 40, 2389, 41, 2123, 46, 2390, 40, 41, 41, 46, 2391, 41, 59, 125, 439, 457, 324, 2392, 40, 2011, 2140, 41, 123, 2378, 2393, 61, 40, 40, 2394, 41, 2140, 46, 2395, 40, 41, 41, 46, 2396, 59, 450, 2392, 40, 2393, 41, 59, 125, 439, 457, 324, 2392, 40, 2378, 2397, 41, 123, 450, 2397, 631, 424, 605, 2397, 46, 2398, 40, 41, 46, 2399, 40, 41, 59, 125, 439, 457, 2400, 2401, 40, 2011, 2140, 41, 123, 2315, 46, 2316, 46, 2302, 60, 2059, 62, 2402, 61, 424, 59, 385, 40, 2011, 2012, 58, 2140, 46, 2403, 40, 41, 41, 123, 392, 40, 2107, 40, 2404, 46, 334, 44, 2012, 41, 41, 123, 2168, 60, 2404, 62, 2405, 61, 2169, 40, 2404, 46, 334, 44, 2012, 41, 59, 392, 40, 2405, 46, 2406, 40, 41, 41, 2402, 61, 2407, 46, 2408, 40, 2405, 46, 2409, 40, 41, 46, 2410, 40, 41, 41, 59, 325, 59, 125, 125, 392, 40, 2402, 614, 424, 41, 123, 2011, 2411, 61, 2140, 46, 2412, 40, 41, 59, 2413, 58, 496, 40, 2411, 631, 424, 41, 123, 385, 40, 2011, 2012, 58, 2411, 46, 2403, 40, 41, 41, 123, 392, 40, 2107, 40, 2414, 46, 334, 44, 2012, 41, 41, 123, 2168, 60, 2414, 62, 2415, 61, 2169, 40, 2414, 46, 334, 44, 2012, 41, 59, 392, 40, 2415, 46, 2416, 40, 41, 41, 2402, 61, 2417, 46, 2418, 40, 2415, 46, 2419, 40, 41, 46, 2420, 40, 41, 41, 59, 325, 2413, 59, 125, 125, 2411, 61, 2411, 46, 2412, 40, 41, 59, 125, 125, 392, 40, 2402, 614, 424, 41, 2402, 61, 2140, 46, 2421, 40, 41, 46, 2422, 40, 2423, 46, 2424, 41, 59, 392, 40, 33, 2402, 46, 2425, 40, 41, 41, 123, 2426, 2427, 61, 2428, 40, 2140, 46, 2429, 40, 41, 44, 2402, 41, 59, 392, 40, 2427, 631, 424, 41, 450, 2140, 46, 2430, 40, 2427, 46, 2431, 40, 41, 41, 59, 125, 450, 40, 40, 2432, 41, 2140, 46, 2433, 40, 41, 41, 46, 2086, 59, 125, 439, 457, 2168, 60, 2434, 62, 2435, 40, 2011, 2140, 41, 123, 385, 40, 2011, 2012, 58, 2140, 46, 2436, 40, 41, 41, 123, 392, 40, 2107, 40, 2434, 46, 334, 44, 2012, 41, 41, 123, 450, 2169, 40, 2434, 46, 334, 44, 2012, 41, 59, 125, 125, 2011, 2437, 61, 2140, 46, 2438, 40, 41, 59, 496, 40, 2437, 631, 424, 41, 123, 385, 40, 2011, 2012, 58, 2437, 46, 2436, 40, 41, 41, 123, 392, 40, 2107, 40, 2434, 46, 334, 44, 2012, 41, 41, 123, 450, 2169, 40, 2434, 46, 334, 44, 2012, 41, 59, 125, 125, 2437, 61, 2437, 46, 2438, 40, 41, 59, 125, 450, 2168, 46, 2439, 40, 2434, 46, 334, 44, 2140, 41, 59, 125, 439, 457, 2311, 2440, 40, 2059, 2441, 44, 2011, 2012, 41, 123, 2012, 61, 2442, 40, 2012, 41, 59, 392, 40, 2012, 631, 424, 605, 2012, 46, 2443, 40, 41, 402, 2444, 41, 123, 385, 40, 2027, 348, 58, 40, 40, 2444, 41, 2012, 46, 2443, 40, 41, 41, 46, 2445, 41, 123, 392, 40, 348, 402, 2446, 41, 123, 392, 40, 40, 40, 2446, 41, 348, 41, 46, 2086, 46, 2447, 40, 2441, 41, 41, 123, 450, 2028, 40, 348, 41, 614, 424, 63, 2311, 46, 2448, 58, 2311, 46, 2449, 59, 125, 125, 125, 125, 450, 2311, 46, 2450, 59, 125, 439, 457, 2311, 2451, 40, 2059, 2452, 44, 2011, 2012, 44, 404, 433, 41, 123, 450, 2451, 40, 2452, 44, 2012, 44, 473, 44, 433, 41, 59, 125, 439, 457, 2311, 2451, 40, 2059, 2452, 44, 2011, 2012, 44, 324, 2453, 44, 404, 433, 41, 123, 2012, 61, 2454, 40, 2012, 41, 59, 392, 40, 2012, 631, 424, 605, 2012, 46, 2455, 40, 41, 402, 2456, 41, 123, 2457, 58, 385, 40, 2027, 348, 58, 40, 40, 2456, 41, 2012, 46, 2455, 40, 41, 41, 46, 2458, 41, 123, 392, 40, 348, 402, 2459, 41, 123, 2459, 2460, 61, 40, 2459, 41, 348, 59, 2059, 2086, 61, 2460, 46, 2086, 46, 2461, 40, 41, 59, 324, 2462, 61, 2453, 63, 2086, 46, 2463, 40, 2452, 41, 58, 2086, 46, 2464, 40, 2452, 41, 59, 392, 40, 2462, 41, 123, 392, 40, 433, 62, 45, 1501, 41, 123, 2302, 60, 2465, 62, 2466, 61, 2460, 46, 433, 59, 404, 2467, 61, 1500, 59, 404, 2468, 61, 1500, 59, 392, 40, 2466, 631, 424, 605, 2466, 46, 2469, 40, 41, 62, 1500, 41, 123, 2467, 61, 2466, 46, 2469, 40, 41, 59, 392, 40, 40, 2466, 46, 2470, 40, 41, 46, 2471, 46, 2472, 38, 2473, 46, 2474, 41, 631, 1500, 41, 123, 2468, 61, 2475, 46, 2476, 59, 2467, 629, 59, 125, 360, 123, 2468, 61, 2467, 59, 125, 125, 392, 40, 433, 60, 2467, 606, 433, 62, 2468, 41, 344, 59, 125, 392, 40, 2477, 40, 2012, 44, 2460, 41, 41, 344, 2457, 59, 450, 2028, 40, 348, 41, 614, 424, 63, 2311, 46, 2478, 58, 2311, 46, 2479, 59, 125, 125, 125, 125, 450, 2311, 46, 2480, 59, 125, 439, 457, 324, 2481, 40, 2011, 2012, 44, 2027, 46, 2482, 2483, 41, 123, 2302, 60, 2172, 62, 2304, 61, 2483, 46, 2484, 40, 41, 46, 2485, 40, 41, 59, 392, 40, 2304, 631, 424, 41, 385, 40, 2027, 46, 2172, 2173, 58, 2304, 41, 123, 392, 40, 2122, 40, 2486, 46, 334, 44, 2012, 44, 2173, 46, 2487, 40, 41, 41, 41, 450, 473, 59, 125, 450, 380, 59, 125, 439, 457, 2311, 2488, 40, 2011, 2012, 41, 123, 2012, 61, 2489, 40, 2012, 41, 59, 392, 40, 2012, 631, 424, 605, 2012, 46, 2490, 40, 41, 402, 2491, 41, 123, 385, 40, 2027, 348, 58, 40, 40, 2491, 41, 2012, 46, 2490, 40, 41, 41, 46, 2492, 41, 123, 392, 40, 348, 402, 2482, 41, 123, 2482, 2483, 61, 40, 2482, 41, 348, 59, 392, 40, 2483, 46, 2086, 46, 2493, 40, 41, 41, 123, 392, 40, 40, 2483, 46, 2494, 46, 2495, 38, 2496, 46, 2497, 41, 631, 1500, 41, 344, 59, 392, 40, 2481, 40, 2012, 44, 2483, 41, 41, 344, 59, 450, 2028, 40, 348, 41, 614, 424, 63, 2311, 46, 2498, 58, 2311, 46, 2499, 59, 125, 125, 125, 125, 450, 2311, 46, 2500, 59, 125, 439, 457, 324, 2501, 40, 381, 2502, 2503, 41, 123, 392, 40, 33, 40, 2503, 402, 2504, 41, 41, 450, 380, 59, 2378, 2505, 61, 40, 40, 2504, 41, 2503, 41, 46, 2505, 59, 392, 40, 33, 40, 2505, 402, 2506, 41, 41, 450, 380, 59, 2378, 2507, 61, 40, 40, 2506, 41, 2505, 41, 46, 2508, 59, 2059, 2086, 59, 392, 40, 2507, 402, 2509, 41, 123, 2086, 61, 40, 40, 2509, 41, 2507, 41, 46, 2086, 46, 2510, 40, 41, 59, 125, 360, 392, 40, 2507, 402, 2511, 41, 123, 2086, 61, 40, 40, 2511, 41, 2507, 41, 46, 2086, 46, 2512, 40, 41, 59, 125, 360, 123, 2086, 61, 59, 125, 450, 46, 2513, 40, 2086, 41, 606, 46, 2513, 40, 2086, 41, 59, 125, 439, 457, 404, 2514, 40, 2515, 2516, 41, 123, 464, 40, 2516, 41, 123, 328, 2517, 58, 328, 2518, 58, 450, 1500, 59, 349, 58, 328, 2519, 58, 450, 2520, 46, 2519, 59, 328, 2521, 58, 328, 2522, 58, 450, 2520, 46, 2522, 59, 328, 2523, 58, 450, 2520, 46, 2523, 59, 125, 125, 437, 457, 334, 2524, 123, 437, 381, 2400, 2086, 59, 437, 381, 2378, 2060, 59, 2524, 40, 2400, 2086, 44, 2378, 2060, 41, 123, 467, 46, 2086, 61, 2086, 59, 467, 46, 2060, 61, 2060, 59, 125, 125, 437, 457, 2524, 2525, 40, 2011, 2140, 41, 123, 2526, 2527, 61, 40, 2526, 41, 2140, 46, 2528, 40, 41, 59, 2011, 2123, 61, 2140, 46, 2529, 40, 41, 59, 385, 40, 2059, 2530, 58, 2317, 40, 2140, 41, 41, 123, 385, 40, 2011, 2531, 58, 2123, 46, 2532, 40, 41, 41, 123, 392, 40, 2531, 46, 2533, 40, 41, 631, 2534, 46, 2535, 41, 344, 59, 2482, 2536, 61, 40, 2482, 41, 2531, 46, 2528, 40, 41, 59, 392, 40, 33, 2536, 46, 2086, 46, 2537, 40, 41, 46, 2538, 40, 2530, 41, 41, 344, 59, 392, 40, 40, 2536, 46, 2539, 46, 2540, 38, 2541, 46, 2542, 41, 631, 1500, 41, 344, 59, 392, 40, 2536, 46, 433, 631, 424, 605, 2536, 46, 433, 46, 2543, 40, 41, 62, 1500, 41, 344, 59, 450, 418, 2524, 40, 2536, 46, 2086, 44, 2536, 46, 2544, 41, 59, 125, 125, 324, 2545, 61, 380, 59, 385, 40, 2011, 2546, 58, 2140, 46, 2547, 40, 41, 41, 123, 392, 40, 2546, 46, 2548, 40, 41, 614, 2549, 46, 2550, 605, 2107, 40, 2551, 46, 334, 44, 2546, 41, 41, 123, 2168, 60, 2551, 62, 2552, 61, 2169, 40, 2551, 46, 334, 44, 2546, 41, 59, 392, 40, 2552, 46, 2553, 40, 41, 46, 2554, 40, 41, 614, 2515, 46, 2555, 41, 450, 424, 59, 2545, 61, 473, 59, 125, 125, 392, 40, 33, 2545, 605, 2556, 46, 2557, 40, 2140, 41, 41, 123, 2011, 2558, 61, 2140, 46, 2529, 40, 41, 59, 392, 40, 2558, 631, 424, 41, 385, 40, 2011, 2546, 58, 2558, 46, 2547, 40, 41, 41, 123, 392, 40, 2546, 46, 2559, 40, 41, 614, 2560, 46, 2561, 605, 2107, 40, 2562, 46, 334, 44, 2546, 41, 41, 2545, 61, 473, 59, 392, 40, 2546, 46, 2559, 40, 41, 614, 2560, 46, 2561, 605, 2107, 40, 2563, 46, 334, 44, 2546, 41, 41, 123, 2168, 60, 2563, 62, 2564, 61, 2169, 40, 2563, 46, 334, 44, 2546, 41, 59, 392, 40, 2564, 46, 2565, 40, 41, 46, 2566, 40, 41, 614, 2515, 46, 2567, 41, 450, 424, 59, 2545, 61, 473, 59, 125, 125, 125, 392, 40, 2545, 41, 123, 2059, 2568, 61, 2323, 40, 2140, 41, 59, 392, 40, 2568, 614, 424, 41, 450, 424, 59, 450, 418, 2524, 40, 2140, 46, 2569, 40, 2568, 41, 44, 2527, 46, 2570, 41, 59, 125, 450, 424, 59, 125, 457, 324, 2571, 40, 2011, 2140, 44, 2572, 2573, 41, 123, 392, 40, 2573, 614, 2572, 46, 2574, 41, 450, 473, 59, 392, 40, 2573, 614, 2572, 46, 2575, 41, 450, 380, 59, 385, 40, 2011, 2576, 58, 2140, 46, 2577, 40, 41, 41, 123, 392, 40, 2576, 46, 2578, 40, 41, 631, 2579, 46, 2580, 41, 344, 59, 392, 40, 2107, 40, 2581, 46, 334, 44, 2576, 41, 41, 123, 2168, 60, 2581, 62, 2582, 61, 2169, 40, 2581, 46, 334, 44, 2576, 41, 59, 392, 40, 2582, 46, 2583, 40, 41, 46, 2584, 40, 41, 41, 450, 473, 59, 125, 125, 450, 380, 59, 125, 457, 2378, 2585, 40, 2011, 2140, 44, 2572, 2573, 41, 123, 392, 40, 2140, 46, 2586, 40, 41, 614, 2587, 46, 2588, 41, 450, 40, 40, 2482, 41, 2140, 46, 2589, 40, 41, 41, 46, 2590, 59, 324, 2571, 61, 2571, 40, 2140, 44, 2573, 41, 59, 2524, 2591, 61, 2571, 63, 2525, 40, 2140, 41, 58, 424, 59, 392, 40, 2591, 614, 424, 41, 123, 450, 40, 40, 2592, 41, 2140, 46, 2589, 40, 41, 41, 46, 2593, 59, 125, 450, 2591, 46, 2060, 59, 125, 457, 2378, 2594, 40, 2595, 2596, 44, 2011, 2140, 44, 2572, 2573, 41, 123, 450, 2594, 40, 2596, 44, 2140, 44, 2573, 44, 424, 41, 59, 125, 457, 2378, 2594, 40, 2595, 2596, 44, 2011, 2140, 44, 2572, 2573, 44, 2378, 2597, 41, 123, 324, 2571, 61, 2571, 40, 2140, 44, 2573, 41, 59, 2524, 2598, 61, 2571, 63, 2525, 40, 2140, 41, 58, 424, 59, 2599, 2600, 61, 40, 2599, 41, 2140, 46, 2601, 40, 41, 59, 392, 40, 2598, 614, 424, 41, 123, 392, 40, 2597, 614, 424, 41, 123, 392, 40, 40, 2600, 46, 2602, 46, 2603, 38, 2604, 46, 2605, 41, 614, 1500, 41, 123, 2597, 61, 2596, 46, 2606, 40, 2140, 46, 2607, 40, 41, 41, 59, 125, 360, 123, 2011, 2608, 61, 2140, 46, 2609, 40, 41, 59, 392, 40, 2608, 631, 424, 605, 2608, 46, 2601, 40, 41, 402, 2610, 41, 123, 2610, 2611, 61, 40, 2610, 41, 2140, 46, 2609, 40, 41, 46, 2601, 40, 41, 59, 2597, 61, 2596, 46, 2612, 40, 2611, 46, 2086, 41, 59, 125, 125, 125, 450, 2597, 614, 424, 63, 2596, 46, 2613, 40, 2600, 46, 2086, 41, 58, 2596, 46, 2614, 40, 2597, 44, 2600, 46, 2086, 41, 59, 125, 392, 40, 2597, 614, 424, 41, 2597, 61, 2596, 46, 2615, 40, 2140, 46, 2616, 40, 41, 41, 59, 2617, 2618, 61, 2596, 46, 2619, 40, 2302, 46, 60, 2378, 62, 2620, 40, 41, 44, 2596, 46, 2621, 40, 2597, 44, 2598, 46, 2086, 41, 44, 2302, 46, 60, 2378, 62, 2620, 40, 41, 41, 59, 450, 2618, 59, 125, 457, 2378, 2622, 40, 2595, 2596, 44, 2011, 2623, 41, 123, 450, 2622, 40, 2596, 44, 2623, 44, 424, 41, 59, 125, 457, 2378, 2622, 40, 2595, 2596, 44, 2011, 2623, 44, 2378, 2597, 41, 123, 2482, 2624, 61, 40, 2482, 41, 2623, 46, 2625, 40, 41, 59, 392, 40, 2597, 614, 424, 605, 40, 2624, 46, 2626, 46, 2627, 38, 2628, 46, 2629, 41, 614, 1500, 41, 123, 2597, 61, 2596, 46, 2630, 40, 2623, 46, 2631, 40, 41, 41, 59, 125, 360, 392, 40, 2597, 614, 424, 41, 123, 2011, 2632, 61, 2623, 46, 2633, 40, 41, 59, 392, 40, 2632, 631, 424, 605, 2632, 46, 2625, 40, 41, 402, 2634, 41, 123, 2634, 2635, 61, 40, 2634, 41, 2623, 46, 2633, 40, 41, 46, 2625, 40, 41, 59, 2597, 61, 2596, 46, 2636, 40, 2635, 46, 2086, 41, 59, 125, 125, 2637, 2638, 61, 2596, 46, 2639, 40, 2302, 46, 60, 2378, 62, 2640, 40, 41, 44, 2597, 614, 424, 63, 2596, 46, 2641, 40, 2624, 46, 2086, 41, 58, 2596, 46, 2642, 40, 2597, 44, 2624, 46, 2086, 41, 44, 2302, 46, 60, 2378, 62, 2640, 40, 41, 41, 59, 450, 2638, 59, 125, 439, 457, 2011, 2643, 40, 2011, 2123, 44, 2644, 2140, 41, 123, 450, 2645, 40, 2123, 44, 2140, 44, 473, 41, 59, 125, 439, 457, 2011, 2646, 40, 2011, 2123, 44, 2644, 2140, 41, 123, 450, 2646, 40, 2123, 44, 2140, 44, 380, 41, 59, 125, 439, 457, 2011, 2646, 40, 2011, 2123, 44, 2644, 2140, 44, 324, 2647, 41, 123, 450, 2646, 40, 2123, 44, 2140, 44, 2647, 44, 380, 41, 59, 125, 439, 457, 2011, 2646, 40, 2011, 2123, 44, 2644, 2140, 44, 324, 2647, 44, 324, 2648, 41, 123, 2649, 2060, 61, 40, 2649, 41, 2123, 46, 2650, 40, 41, 59, 392, 40, 2647, 41, 123, 2651, 40, 2140, 46, 2652, 44, 2123, 44, 2123, 46, 2653, 40, 2028, 40, 2140, 41, 41, 44, 2123, 46, 2654, 40, 41, 41, 59, 2647, 40, 2140, 46, 2652, 44, 2123, 44, 2123, 46, 2653, 40, 2028, 40, 2140, 41, 41, 44, 2123, 46, 2654, 40, 41, 41, 59, 125, 2302, 60, 2027, 62, 2655, 61, 424, 59, 2302, 60, 2027, 62, 2656, 61, 2060, 46, 2657, 59, 496, 40, 473, 41, 123, 324, 2658, 61, 380, 59, 392, 40, 2656, 46, 2659, 402, 2644, 41, 123, 2644, 2660, 61, 40, 2644, 41, 2656, 46, 2659, 59, 392, 40, 40, 33, 2648, 605, 2661, 40, 2660, 41, 41, 606, 2031, 40, 2660, 41, 41, 2658, 61, 473, 59, 125, 360, 392, 40, 2656, 46, 2659, 402, 2482, 41, 123, 392, 40, 40, 40, 40, 2482, 41, 2656, 46, 2659, 41, 46, 2662, 46, 2663, 38, 2664, 41, 631, 1500, 41, 2658, 61, 473, 59, 125, 392, 40, 2658, 41, 123, 2655, 61, 2656, 59, 2656, 61, 2656, 46, 2665, 59, 344, 59, 125, 325, 59, 125, 2302, 60, 2027, 62, 2666, 61, 2302, 46, 60, 2027, 62, 2667, 40, 2140, 41, 59, 2666, 46, 2668, 61, 2656, 59, 392, 40, 2655, 614, 424, 41, 123, 2060, 46, 2657, 61, 2666, 59, 125, 360, 123, 2655, 46, 2668, 61, 2666, 59, 125, 2669, 46, 2670, 40, 2140, 44, 2123, 41, 59, 450, 2123, 46, 2671, 40, 2140, 44, 2672, 46, 2673, 41, 59, 125, 439, 457, 324, 2674, 40, 381, 2644, 2140, 41, 123, 450, 40, 2140, 46, 2675, 46, 2676, 38, 2677, 46, 2678, 41, 631, 1500, 59, 125, 457, 334, 2679, 123, 437, 457, 2061, 60, 63, 62, 2680, 59, 437, 457, 2681, 60, 63, 62, 2682, 59, 437, 457, 2683, 2684, 44, 2685, 59, 437, 457, 492, 2686, 40, 2687, 2688, 41, 123, 392, 40, 2680, 631, 424, 41, 450, 59, 2061, 60, 63, 62, 2689, 59, 474, 123, 2689, 61, 2688, 46, 2690, 40, 41, 59, 125, 329, 40, 2691, 2692, 41, 123, 450, 59, 125, 2693, 40, 2689, 41, 59, 125, 437, 457, 492, 2694, 40, 2061, 60, 63, 62, 398, 41, 123, 392, 40, 2680, 631, 424, 41, 450, 59, 392, 40, 33, 398, 46, 2695, 40, 41, 46, 2696, 40, 41, 41, 450, 59, 474, 123, 2682, 61, 2697, 46, 2698, 40, 398, 44, 2302, 46, 334, 44, 2378, 46, 334, 41, 59, 2684, 61, 2697, 46, 2699, 40, 398, 44, 41, 59, 2685, 61, 2697, 46, 2699, 40, 398, 44, 41, 59, 2680, 61, 398, 59, 125, 329, 40, 2700, 2701, 41, 123, 125, 125, 457, 324, 407, 40, 2027, 2702, 41, 123, 392, 40, 2702, 614, 424, 41, 450, 380, 59, 2694, 40, 2702, 46, 2703, 40, 41, 41, 59, 450, 2702, 46, 2703, 40, 41, 614, 2680, 59, 125, 64, 2704, 40, 41, 457, 2302, 60, 2172, 62, 2705, 40, 2027, 2702, 41, 123, 2694, 40, 2702, 46, 2706, 40, 41, 41, 59, 474, 123, 450, 40, 2302, 60, 2172, 62, 41, 2684, 46, 2707, 40, 2702, 41, 59, 125, 329, 40, 2708, 2709, 41, 123, 450, 2302, 46, 2710, 40, 41, 59, 125, 125, 457, 492, 2711, 40, 2027, 2702, 44, 2302, 60, 2172, 62, 2712, 41, 123, 2694, 40, 2702, 46, 2713, 40, 41, 41, 59, 474, 123, 2684, 46, 2714, 40, 2702, 44, 2712, 41, 59, 125, 329, 40, 2715, 2716, 41, 123, 125, 125, 457, 2378, 2717, 40, 2027, 2702, 41, 123, 2694, 40, 2702, 46, 2718, 40, 41, 41, 59, 474, 123, 450, 40, 2378, 41, 2685, 46, 2719, 40, 2702, 41, 59, 125, 329, 40, 2720, 2721, 41, 123, 450, 424, 59, 125, 125, 457, 2378, 2722, 40, 2302, 60, 2172, 62, 2304, 44, 2378, 2723, 41, 123, 2686, 40, 2723, 46, 2724, 40, 41, 46, 2725, 40, 41, 41, 59, 474, 123, 450, 40, 2378, 41, 2682, 46, 2726, 40, 2304, 44, 2723, 41, 59, 125, 329, 40, 2727, 2728, 41, 123, 450, 2723, 59, 125, 125, 125, 457, 334, 2729, 123, 437, 457, 381, 2730, 2731, 59, 457, 123, 2731, 61, 2732, 46, 2733, 40, 2172, 46, 334, 44, 41, 59, 125, 457, 2734, 46, 2735, 2736, 40, 2172, 2737, 41, 123, 392, 40, 2731, 631, 424, 41, 123, 474, 123, 450, 40, 2734, 46, 2735, 41, 2731, 46, 2738, 40, 2737, 41, 59, 125, 329, 40, 2739, 2740, 41, 123, 125, 125, 450, 424, 59, 125, 457, 492, 2741, 40, 2172, 2737, 44, 2734, 46, 2735, 2742, 41, 123, 392, 40, 2731, 631, 424, 41, 123, 474, 123, 2743, 46, 2744, 40, 2731, 44, 2737, 44, 2742, 41, 59, 125, 329, 40, 2745, 2746, 41, 123, 125, 125, 125, 125, 457, 334, 2747, 123, 437, 457, 381, 2748, 2749, 59, 437, 457, 381, 2750, 2751, 59, 437, 457, 381, 2750, 2752, 59, 457, 123, 2748, 2753, 61, 424, 59, 2750, 2754, 61, 424, 59, 2750, 2755, 61, 424, 59, 474, 123, 2753, 61, 2756, 46, 2757, 40, 2758, 46, 334, 44, 41, 59, 2754, 61, 2756, 46, 2759, 40, 2753, 46, 2760, 40, 41, 44, 44, 2761, 46, 334, 41, 59, 2755, 61, 2756, 46, 2759, 40, 2753, 46, 2760, 40, 41, 44, 44, 2761, 46, 334, 41, 59, 125, 329, 40, 2762, 2763, 41, 123, 125, 2749, 61, 2753, 59, 2751, 61, 2754, 59, 2752, 61, 2755, 59, 125, 457, 492, 2764, 40, 2765, 388, 44, 2766, 2767, 41, 123, 392, 40, 388, 614, 424, 41, 450, 59, 474, 123, 2768, 2769, 61, 40, 2768, 41, 2749, 46, 2770, 40, 388, 41, 59, 392, 40, 2769, 614, 424, 41, 450, 59, 2771, 46, 2772, 40, 2751, 44, 2769, 44, 2767, 41, 59, 125, 329, 40, 2773, 2774, 41, 123, 125, 125, 457, 492, 2775, 40, 2765, 388, 44, 2766, 2776, 41, 123, 392, 40, 388, 614, 424, 41, 450, 59, 474, 123, 2777, 2778, 61, 40, 2777, 41, 2749, 46, 2779, 40, 388, 41, 59, 392, 40, 2778, 614, 424, 41, 450, 59, 2780, 46, 2781, 40, 2752, 44, 2778, 44, 2776, 41, 59, 125, 329, 40, 2782, 2783, 41, 123, 125, 125, 125, 439, 457, 492, 2784, 40, 2011, 2123, 44, 2482, 2623, 41, 123, 2785, 2060, 61, 40, 2785, 41, 2123, 46, 2786, 40, 41, 59, 392, 40, 2623, 46, 2787, 40, 41, 46, 2788, 40, 41, 41, 123, 404, 2789, 61, 1500, 59, 385, 40, 2027, 348, 58, 2060, 46, 2790, 41, 123, 392, 40, 348, 402, 2482, 41, 123, 392, 40, 40, 40, 40, 2482, 41, 348, 41, 46, 2791, 46, 2792, 38, 2793, 46, 2794, 41, 631, 1500, 41, 123, 2011, 2795, 61, 2123, 46, 2796, 40, 348, 41, 59, 392, 40, 2795, 631, 424, 41, 2795, 46, 2797, 40, 41, 46, 2798, 40, 2795, 41, 59, 2060, 46, 2790, 61, 2799, 40, 2060, 46, 2790, 44, 2789, 41, 59, 2747, 46, 2800, 40, 2060, 46, 2801, 44, 40, 40, 2482, 41, 348, 41, 46, 2801, 41, 59, 325, 59, 125, 125, 2789, 637, 59, 125, 125, 2802, 40, 2623, 46, 2803, 44, 2123, 44, 2123, 46, 2804, 40, 2028, 40, 2623, 41, 41, 44, 2123, 46, 2805, 40, 41, 41, 59, 2647, 40, 2623, 46, 2803, 44, 2123, 44, 2123, 46, 2804, 40, 2028, 40, 2623, 41, 41, 44, 2123, 46, 2805, 40, 41, 41, 59, 2060, 46, 2806, 61, 2060, 46, 2806, 46, 2807, 40, 2623, 41, 59, 2808, 46, 2809, 40, 2623, 44, 2123, 41, 59, 2123, 46, 2810, 40, 2623, 44, 2811, 46, 2812, 41, 59, 125, 439, 457, 2011, 2813, 40, 2011, 2123, 44, 381, 2814, 2060, 41, 123, 2814, 2815, 61, 40, 2814, 41, 2123, 46, 2816, 40, 41, 59, 2817, 40, 2060, 46, 2818, 44, 2123, 44, 2123, 46, 2819, 40, 2028, 40, 2060, 41, 41, 44, 2123, 46, 2820, 40, 41, 41, 59, 2647, 40, 2060, 46, 2818, 44, 2123, 44, 2123, 46, 2819, 40, 2028, 40, 2060, 41, 41, 44, 2123, 46, 2820, 40, 41, 41, 59, 2815, 46, 2821, 61, 2815, 46, 2821, 46, 2822, 40, 2060, 41, 59, 2823, 46, 2824, 40, 2060, 44, 2123, 41, 59, 450, 2123, 46, 2825, 40, 2060, 44, 2826, 46, 2827, 41, 59, 125, 457, 334, 2828, 123, 437, 457, 381, 2829, 2830, 59, 437, 457, 381, 2829, 2831, 59, 437, 457, 381, 2829, 2832, 59, 437, 457, 381, 2829, 2833, 59, 457, 123, 2830, 61, 2834, 46, 2835, 40, 2836, 46, 334, 44, 44, 2027, 46, 334, 44, 2837, 46, 334, 41, 59, 2831, 61, 2834, 46, 2835, 40, 2838, 46, 334, 44, 44, 2027, 46, 334, 44, 2837, 46, 334, 41, 59, 2829, 2839, 61, 2834, 46, 2835, 40, 2840, 46, 334, 44, 41, 59, 392, 40, 2839, 614, 424, 41, 2839, 61, 2834, 46, 2835, 40, 2840, 46, 334, 44, 41, 59, 2832, 61, 2839, 59, 2829, 2841, 61, 2834, 46, 2835, 40, 2840, 46, 334, 44, 41, 59, 392, 40, 2841, 614, 424, 41, 2841, 61, 2834, 46, 2835, 40, 2840, 46, 334, 44, 41, 59, 2833, 61, 2841, 59, 125, 457, 2842, 2830, 40, 2027, 2843, 44, 2011, 2085, 41, 123, 2844, 2845, 61, 2844, 46, 2846, 40, 2085, 46, 2847, 40, 41, 41, 59, 2848, 60, 2849, 62, 2850, 61, 2845, 46, 2851, 40, 40, 2852, 41, 2085, 46, 2853, 40, 41, 41, 59, 392, 40, 2850, 614, 424, 41, 450, 424, 59, 2842, 2060, 61, 40, 2842, 41, 2854, 46, 2855, 40, 2830, 44, 2845, 44, 2843, 44, 2850, 41, 59, 392, 40, 2060, 614, 424, 41, 450, 424, 59, 2060, 46, 2856, 40, 41, 59, 450, 2060, 59, 125, 457, 492, 2831, 40, 2027, 2843, 44, 2011, 2085, 41, 123, 2014, 2015, 61, 2085, 46, 2857, 40, 41, 59, 2858, 2859, 61, 2858, 46, 2860, 40, 2015, 41, 59, 2861, 2862, 61, 2861, 46, 2860, 40, 2015, 41, 59, 2863, 2864, 61, 2863, 46, 2860, 40, 2015, 41, 59, 2865, 60, 2866, 62, 2867, 61, 2864, 46, 2868, 40, 40, 2869, 41, 2085, 46, 2870, 40, 41, 41, 59, 392, 40, 2867, 614, 424, 41, 450, 59, 2871, 46, 2872, 40, 2832, 44, 2862, 41, 59, 2871, 46, 2872, 40, 2831, 44, 2859, 44, 2843, 44, 2867, 41, 59, 2871, 46, 2872, 40, 2833, 44, 2862, 41, 59, 125, 125, 439, 457, 413, 2873, 40, 413, 2874, 44, 2014, 2015, 41, 123, 324, 2875, 61, 2876, 46, 2877, 40, 2015, 41, 46, 2878, 40, 41, 46, 2879, 40, 41, 59, 392, 40, 2875, 41, 2874, 635, 2880, 46, 2881, 59, 450, 2874, 59, 125, 439, 457, 2378, 2882, 40, 2011, 2012, 44, 2059, 2883, 41, 123, 2059, 91, 93, 2884, 61, 2883, 46, 2885, 40, 41, 59, 392, 40, 2884, 46, 2886, 62, 1502, 605, 2884, 91, 1500, 93, 46, 2887, 40, 41, 605, 2884, 91, 1501, 93, 46, 2887, 40, 41, 41, 123, 2059, 91, 93, 2888, 61, 418, 2059, 91, 2884, 46, 2886, 45, 1502, 93, 59, 2889, 46, 2890, 40, 2884, 44, 1502, 44, 2888, 44, 1500, 44, 2888, 46, 2886, 41, 59, 450, 2891, 40, 2012, 44, 2888, 41, 59, 125, 450, 2892, 40, 2012, 44, 2884, 41, 59, 125, 439, 457, 2378, 2893, 40, 2011, 2012, 44, 2059, 613, 2894, 41, 123, 392, 40, 2895, 46, 2896, 40, 2012, 46, 2897, 40, 41, 41, 46, 2898, 40, 41, 46, 2899, 40, 41, 41, 123, 450, 2900, 40, 2012, 44, 44, 44, 2894, 41, 59, 125, 360, 123, 450, 2901, 40, 2012, 44, 424, 44, 424, 44, 2894, 41, 59, 125, 125, 439, 457, 2378, 2893, 40, 2011, 2012, 44, 404, 2902, 44, 2059, 613, 2894, 41, 123, 392, 40, 2903, 46, 2904, 40, 2012, 46, 2905, 40, 41, 41, 46, 2906, 40, 41, 46, 2907, 40, 41, 41, 123, 450, 2908, 40, 2012, 44, 2902, 44, 44, 44, 2894, 41, 59, 125, 360, 123, 450, 2909, 40, 2012, 44, 2902, 44, 424, 44, 424, 44, 2894, 41, 59, 125, 125, 439, 457, 492, 2910, 40, 2911, 2912, 44, 2011, 2012, 44, 2011, 2034, 44, 2014, 2015, 41, 123, 392, 40, 33, 2913, 46, 2914, 40, 2015, 41, 46, 2915, 40, 41, 46, 2916, 40, 41, 41, 450, 59, 324, 2917, 61, 33, 2918, 46, 2919, 46, 2920, 40, 2012, 46, 2921, 40, 41, 46, 2922, 40, 2923, 46, 2924, 41, 41, 59, 392, 40, 2917, 41, 123, 385, 40, 2172, 2925, 58, 2912, 46, 2304, 41, 123, 2027, 2060, 61, 2925, 46, 2926, 40, 41, 59, 2400, 2927, 61, 424, 59, 392, 40, 2060, 402, 2928, 41, 2927, 61, 40, 40, 2928, 41, 2060, 41, 46, 2086, 59, 360, 392, 40, 2060, 402, 2929, 41, 2927, 61, 40, 40, 2929, 41, 2060, 41, 46, 2086, 59, 392, 40, 2927, 631, 424, 605, 2927, 46, 2930, 40, 41, 41, 123, 2917, 61, 380, 59, 125, 125, 125, 392, 40, 2917, 41, 2931, 40, 2912, 44, 2012, 44, 2034, 44, 44, 2012, 46, 2932, 40, 41, 46, 2933, 40, 41, 41, 59, 392, 40, 2918, 46, 2934, 46, 2920, 40, 2012, 46, 2921, 40, 41, 46, 2922, 40, 2923, 46, 2935, 41, 41, 41, 123, 2595, 2596, 61, 2012, 46, 2932, 40, 41, 59, 2378, 2936, 61, 2596, 46, 2937, 40, 2596, 46, 2938, 40, 2012, 46, 2939, 40, 41, 41, 44, 2596, 46, 2933, 40, 41, 41, 59, 2931, 40, 2912, 44, 2012, 44, 2034, 44, 44, 2936, 41, 59, 125, 125, 439, 457, 492, 2647, 40, 2911, 2912, 44, 2011, 2012, 44, 2011, 2034, 44, 2014, 2015, 41, 123, 392, 40, 33, 2940, 46, 2941, 40, 2015, 41, 46, 2942, 40, 41, 46, 2943, 40, 41, 41, 450, 59, 392, 40, 2944, 46, 2945, 40, 2012, 41, 41, 123, 2946, 40, 2912, 44, 2012, 44, 2034, 44, 44, 2012, 46, 2947, 40, 41, 46, 2948, 40, 41, 41, 59, 125, 392, 40, 2949, 46, 2950, 46, 2951, 40, 2012, 46, 2952, 40, 41, 46, 2953, 40, 2954, 46, 2955, 41, 41, 41, 123, 2956, 40, 2912, 44, 2012, 44, 2034, 44, 44, 424, 41, 59, 125, 125, 439, 457, 492, 2957, 40, 2911, 2912, 44, 2011, 2012, 44, 2011, 2034, 44, 2059, 2958, 44, 2378, 2959, 41, 123, 324, 2960, 59, 2059, 2961, 59, 123, 404, 2962, 61, 2958, 46, 2963, 40, 607, 41, 59, 2961, 61, 2962, 614, 45, 1501, 63, 2958, 58, 2958, 46, 2964, 40, 2962, 43, 1501, 41, 59, 2960, 61, 2962, 614, 1502, 605, 2958, 46, 2965, 40, 1500, 44, 44, 1500, 44, 1502, 41, 59, 125, 385, 40, 2172, 2966, 58, 2912, 46, 2304, 41, 123, 2027, 2967, 61, 2966, 46, 2968, 40, 41, 59, 392, 40, 2967, 402, 2969, 41, 123, 2400, 2970, 61, 40, 40, 2969, 41, 2967, 41, 46, 2086, 59, 392, 40, 2970, 46, 2971, 40, 2961, 41, 41, 450, 59, 125, 392, 40, 2967, 402, 2972, 41, 123, 392, 40, 2967, 46, 2973, 40, 41, 46, 2974, 40, 2958, 41, 41, 450, 59, 125, 125, 2595, 2596, 61, 2012, 46, 2975, 40, 41, 59, 2378, 2976, 61, 2960, 63, 2893, 40, 2012, 44, 2961, 41, 58, 2977, 40, 2012, 44, 2958, 41, 59, 2302, 60, 2378, 62, 2978, 61, 2959, 631, 424, 63, 2302, 46, 2979, 40, 2959, 41, 58, 2302, 46, 60, 2378, 62, 2980, 40, 41, 59, 2172, 2250, 61, 2033, 40, 2596, 46, 2062, 40, 2976, 44, 2978, 41, 44, 2034, 41, 59, 2912, 46, 2304, 61, 2912, 46, 2304, 46, 2981, 40, 2250, 41, 59, 125, 437, 457, 2302, 60, 2027, 62, 2982, 40, 2302, 60, 2027, 62, 2983, 44, 404, 2984, 41, 123, 2985, 60, 2027, 62, 430, 61, 418, 2985, 60, 2027, 62, 40, 41, 59, 404, 2986, 61, 1500, 59, 385, 40, 2027, 348, 58, 2983, 41, 123, 392, 40, 2986, 637, 631, 2984, 41, 430, 46, 2987, 40, 348, 41, 59, 125, 450, 430, 46, 2988, 40, 41, 59, 125, 439, 457, 2378, 2989, 40, 2011, 2012, 44, 2059, 2990, 44, 2059, 2991, 44, 2059, 613, 2992, 41, 123, 450, 2989, 40, 2012, 44, 45, 1501, 44, 2990, 44, 2991, 44, 2992, 41, 59, 125, 439, 457, 2378, 2989, 40, 2011, 2012, 44, 2059, 91, 93, 2992, 41, 123, 450, 2989, 40, 2012, 44, 45, 1501, 44, 424, 44, 424, 44, 2992, 41, 59, 125, 439, 457, 2378, 2989, 40, 2011, 2012, 44, 2993, 60, 2059, 62, 2992, 41, 123, 313, 2992, 631, 424, 59, 2595, 2596, 61, 2012, 46, 2994, 40, 41, 59, 2378, 2995, 61, 424, 59, 385, 40, 2059, 2996, 58, 2992, 41, 123, 392, 40, 2995, 614, 424, 41, 2995, 61, 2596, 46, 2997, 40, 2012, 46, 2998, 40, 2996, 41, 41, 59, 360, 2995, 61, 2596, 46, 2999, 40, 2995, 44, 2012, 46, 2998, 40, 2996, 41, 41, 59, 125, 450, 2995, 59, 125, 439, 457, 2378, 2989, 40, 2011, 2012, 44, 404, 2902, 44, 2059, 2990, 44, 2059, 2991, 44, 2059, 613, 2992, 41, 123, 313, 2992, 631, 424, 59, 2595, 2596, 61, 2012, 46, 3000, 40, 41, 59, 392, 40, 2902, 631, 45, 1501, 41, 2596, 61, 2596, 46, 3001, 40, 2902, 41, 59, 2378, 3002, 61, 424, 59, 392, 40, 2990, 631, 424, 41, 3002, 61, 2596, 46, 3003, 40, 2012, 46, 3004, 40, 2990, 41, 41, 59, 392, 40, 2991, 631, 424, 41, 3002, 61, 3002, 614, 424, 63, 2596, 46, 3003, 40, 2012, 46, 3004, 40, 2991, 41, 41, 58, 2596, 46, 3005, 40, 3002, 44, 2012, 46, 3004, 40, 2991, 41, 41, 59, 385, 40, 404, 3006, 61, 1500, 59, 3006, 60, 2992, 46, 3007, 59, 3006, 637, 41, 123, 3002, 61, 3002, 614, 424, 63, 2596, 46, 3003, 40, 2012, 46, 3004, 40, 2992, 91, 3006, 93, 41, 41, 58, 2596, 46, 3005, 40, 3002, 44, 2012, 46, 3004, 40, 2992, 91, 3006, 93, 41, 41, 59, 125, 313, 3002, 631, 424, 59, 450, 3002, 59, 125, 439, 457, 2378, 3008, 40, 2011, 2012, 44, 2059, 2992, 41, 123, 450, 2989, 40, 2012, 44, 424, 44, 424, 44, 2992, 46, 3009, 40, 41, 41, 59, 125, 439, 457, 2302, 60, 2172, 62, 3010, 40, 2011, 3011, 44, 3012, 3013, 41, 123, 3014, 60, 2172, 62, 3015, 61, 418, 3014, 60, 2172, 62, 40, 41, 59, 385, 40, 2011, 3016, 58, 3011, 46, 3017, 40, 41, 41, 123, 392, 40, 3016, 46, 3018, 40, 41, 614, 3019, 46, 3020, 41, 123, 2172, 2250, 61, 40, 2172, 41, 3016, 46, 3021, 40, 41, 59, 2059, 2086, 61, 2250, 46, 2251, 46, 3022, 40, 41, 59, 404, 2984, 61, 2086, 46, 3023, 40, 41, 59, 2059, 3024, 61, 2984, 614, 45, 1501, 63, 2086, 58, 2086, 46, 3025, 40, 2984, 43, 1501, 41, 59, 392, 40, 3013, 46, 3026, 40, 3024, 41, 46, 3027, 40, 41, 41, 123, 3015, 46, 3028, 40, 2250, 41, 59, 125, 125, 125, 450, 3015, 46, 3029, 40, 41, 59, 125, 439, 457, 2059, 3030, 40, 2011, 2012, 44, 2059, 613, 3031, 41, 123, 496, 40, 2012, 631, 424, 41, 123, 385, 40, 2011, 3032, 58, 2012, 46, 3033, 40, 41, 41, 123, 392, 40, 3032, 46, 3034, 40, 41, 631, 3035, 46, 3036, 41, 344, 59, 2172, 3037, 61, 40, 2172, 41, 3032, 46, 3038, 40, 41, 59, 385, 40, 2059, 3039, 58, 3031, 41, 392, 40, 2122, 40, 3039, 44, 2012, 44, 3037, 46, 2251, 41, 41, 450, 3039, 59, 125, 2012, 61, 2012, 46, 3040, 40, 41, 59, 125, 450, 424, 59, 125, 439, 457, 324, 3041, 40, 2011, 2012, 41, 123, 385, 40, 2011, 3042, 58, 2012, 46, 3043, 40, 41, 41, 123, 392, 40, 3042, 46, 3044, 40, 41, 614, 3045, 46, 3046, 41, 123, 2172, 2250, 61, 40, 2172, 41, 3042, 46, 3047, 40, 41, 59, 385, 40, 2059, 3048, 58, 3049, 41, 392, 40, 2122, 40, 3048, 44, 2012, 44, 2250, 46, 2251, 41, 41, 450, 473, 59, 125, 125, 450, 380, 59, 125, 439, 457, 324, 3041, 40, 2011, 2012, 44, 2302, 60, 2172, 62, 3031, 41, 123, 392, 40, 3031, 614, 424, 41, 450, 380, 59, 385, 40, 2172, 3050, 58, 3031, 41, 123, 385, 40, 2059, 3051, 58, 3052, 41, 392, 40, 2122, 40, 3051, 44, 2012, 44, 3050, 41, 41, 450, 473, 59, 125, 450, 380, 59, 125, 439, 457, 2302, 60, 2172, 62, 3053, 40, 2011, 2012, 41, 123, 2172, 2173, 61, 424, 59, 2059, 3054, 61, 424, 59, 385, 40, 2011, 3055, 58, 2012, 46, 3056, 40, 41, 41, 123, 392, 40, 3055, 46, 3057, 40, 41, 614, 3058, 46, 3059, 41, 123, 392, 40, 2173, 631, 424, 41, 123, 3054, 61, 59, 325, 59, 125, 2172, 2250, 61, 40, 2172, 41, 3055, 46, 3060, 40, 41, 59, 3054, 61, 2250, 46, 2251, 46, 3061, 40, 41, 59, 2173, 61, 2250, 59, 125, 125, 392, 40, 3054, 614, 424, 41, 450, 2302, 46, 3062, 40, 41, 59, 2315, 46, 2316, 46, 2302, 60, 3063, 62, 3064, 61, 2012, 46, 3065, 40, 41, 46, 3066, 40, 3067, 46, 3068, 41, 59, 392, 40, 33, 3054, 46, 3069, 40, 41, 41, 123, 385, 40, 3063, 3070, 58, 3064, 41, 392, 40, 3070, 631, 424, 605, 2122, 40, 3070, 46, 3071, 40, 41, 44, 2012, 44, 2173, 46, 2251, 41, 41, 450, 2302, 46, 3072, 40, 2173, 41, 59, 385, 40, 2059, 3073, 58, 3074, 41, 392, 40, 2122, 40, 3073, 44, 2012, 44, 2173, 46, 2251, 41, 41, 450, 2302, 46, 3072, 40, 2173, 41, 59, 125, 3075, 60, 2172, 62, 3076, 61, 418, 3075, 60, 2172, 62, 40, 41, 59, 385, 40, 2011, 3055, 58, 2012, 46, 3056, 40, 41, 41, 123, 392, 40, 3055, 46, 3077, 40, 41, 614, 3078, 46, 3079, 41, 123, 2172, 2250, 61, 40, 2172, 41, 3055, 46, 3080, 40, 41, 59, 324, 3081, 61, 380, 59, 385, 40, 3063, 3082, 58, 3064, 41, 392, 40, 3082, 631, 424, 605, 2122, 40, 3082, 46, 3083, 40, 41, 44, 2012, 44, 2250, 46, 2251, 41, 41, 123, 3076, 46, 3084, 40, 2250, 41, 59, 3081, 61, 473, 59, 325, 59, 125, 392, 40, 33, 3081, 41, 385, 40, 2059, 3085, 58, 3086, 41, 392, 40, 2122, 40, 3085, 44, 2012, 44, 2250, 46, 2251, 41, 41, 123, 3076, 46, 3087, 40, 2250, 41, 59, 325, 59, 125, 125, 125, 450, 3076, 46, 3088, 40, 41, 59, 125, 439, 457, 2302, 60, 2172, 62, 3089, 40, 2011, 2012, 41, 123, 450, 3090, 40, 2012, 44, 3091, 41, 59, 125, 439, 457, 2302, 60, 2172, 62, 3092, 40, 2011, 2012, 41, 123, 450, 3093, 40, 2012, 44, 3094, 41, 59, 125, 437, 457, 2302, 60, 2172, 62, 3095, 40, 2011, 2012, 44, 2315, 46, 2316, 46, 2302, 60, 2059, 62, 3096, 41, 123, 2172, 2173, 61, 424, 59, 2059, 3097, 61, 424, 59, 385, 40, 2011, 3098, 58, 2012, 46, 3099, 40, 41, 41, 123, 392, 40, 3098, 46, 3100, 40, 41, 614, 3101, 46, 3102, 41, 123, 392, 40, 2173, 631, 424, 41, 123, 3097, 61, 59, 325, 59, 125, 2172, 2250, 61, 40, 2172, 41, 3098, 46, 3103, 40, 41, 59, 3097, 61, 2250, 46, 2251, 46, 3104, 40, 41, 59, 2173, 61, 2250, 59, 125, 125, 392, 40, 3097, 614, 424, 41, 450, 2302, 46, 3105, 40, 41, 59, 392, 40, 33, 3097, 46, 3106, 40, 41, 41, 123, 385, 40, 2059, 3107, 58, 3096, 41, 392, 40, 2122, 40, 3107, 44, 2012, 44, 2173, 46, 2251, 41, 41, 450, 2302, 46, 3108, 40, 2173, 41, 59, 125, 3109, 60, 2172, 62, 3110, 61, 418, 3109, 60, 2172, 62, 40, 41, 59, 385, 40, 2011, 3098, 58, 2012, 46, 3099, 40, 41, 41, 123, 392, 40, 3098, 46, 3111, 40, 41, 614, 3112, 46, 3113, 41, 123, 2172, 2250, 61, 40, 2172, 41, 3098, 46, 3114, 40, 41, 59, 324, 3115, 61, 380, 59, 392, 40, 33, 3115, 41, 385, 40, 2059, 3116, 58, 3096, 41, 392, 40, 2122, 40, 3116, 44, 2012, 44, 2250, 46, 2251, 41, 41, 123, 3110, 46, 3117, 40, 2250, 41, 59, 325, 59, 125, 125, 125, 450, 3110, 46, 3118, 40, 41, 59, 125, 439, 457, 2502, 3119, 40, 2595, 2596, 44, 2011, 3120, 44, 2011, 2034, 41, 123, 450, 3119, 40, 2596, 44, 40, 2644, 41, 3120, 46, 3121, 40, 41, 44, 2034, 41, 59, 125, 439, 457, 2502, 3119, 40, 2595, 2596, 44, 2378, 2123, 44, 2400, 3122, 44, 2011, 2034, 44, 2059, 3123, 41, 123, 3124, 3125, 61, 2034, 46, 3126, 40, 41, 46, 3127, 40, 3128, 46, 3129, 41, 59, 392, 40, 3125, 614, 424, 41, 3125, 61, 3124, 46, 3130, 59, 392, 40, 2123, 631, 424, 605, 3131, 40, 2123, 41, 41, 450, 424, 59, 3132, 3133, 61, 2596, 46, 3134, 40, 3125, 46, 3135, 40, 3122, 46, 3136, 40, 41, 44, 3123, 41, 41, 59, 2993, 60, 2059, 62, 2623, 61, 3125, 46, 3137, 40, 41, 59, 392, 40, 2623, 631, 424, 41, 123, 450, 2596, 46, 3138, 40, 2596, 46, 3139, 40, 2302, 46, 60, 2378, 62, 3140, 40, 41, 44, 2989, 40, 2034, 44, 2623, 41, 44, 2302, 46, 3141, 40, 2596, 46, 3142, 40, 3122, 41, 44, 3133, 41, 41, 41, 59, 125, 392, 40, 3125, 614, 3124, 46, 3143, 41, 123, 450, 2596, 46, 3144, 40, 2596, 46, 3145, 40, 3146, 44, 2596, 46, 3147, 40, 3122, 41, 44, 2596, 46, 3134, 40, 3148, 44, 424, 41, 41, 44, 3133, 41, 59, 125, 2378, 3149, 61, 2882, 40, 2034, 44, 3125, 46, 3150, 40, 41, 41, 59, 2378, 3151, 61, 2596, 46, 3152, 40, 424, 44, 2302, 46, 60, 2378, 62, 3153, 40, 41, 44, 3149, 44, 2302, 46, 60, 2378, 62, 3154, 40, 3133, 41, 44, 424, 41, 59, 2502, 3155, 61, 2596, 46, 3156, 40, 3151, 41, 59, 3157, 3158, 61, 2596, 46, 3159, 40, 1500, 44, 2302, 46, 3154, 40, 3155, 41, 41, 59, 450, 2596, 46, 3160, 40, 2596, 46, 3161, 40, 3162, 44, 2596, 46, 3163, 40, 3122, 41, 44, 2596, 46, 3134, 40, 3164, 44, 424, 41, 41, 44, 3158, 44, 424, 41, 59, 125, 439, 457, 2502, 3119, 40, 2595, 2596, 44, 2644, 3165, 44, 2011, 2034, 41, 123, 450, 3119, 40, 2596, 44, 3165, 46, 3166, 44, 3165, 46, 2086, 44, 2034, 44, 424, 41, 59, 125, 439, 457, 2302, 60, 3167, 62, 3168, 40, 2302, 60, 2059, 62, 411, 44, 2011, 2060, 44, 324, 3169, 44, 324, 3170, 41, 123, 324, 91, 93, 3171, 61, 418, 324, 91, 411, 46, 3172, 40, 41, 93, 59, 385, 40, 2011, 3173, 58, 2060, 46, 3174, 40, 41, 41, 123, 392, 40, 411, 46, 3175, 40, 41, 41, 325, 59, 392, 40, 3173, 46, 3176, 40, 41, 631, 3177, 46, 3178, 41, 344, 59, 2644, 2140, 61, 40, 2644, 41, 3173, 46, 3179, 40, 41, 59, 392, 40, 3169, 41, 123, 392, 40, 40, 2140, 46, 2912, 46, 2874, 38, 3180, 46, 3181, 41, 631, 1500, 41, 344, 59, 392, 40, 2140, 46, 2086, 46, 3182, 40, 41, 46, 3183, 40, 41, 41, 344, 59, 125, 392, 40, 3170, 605, 40, 2140, 46, 2912, 46, 2874, 38, 3184, 46, 3185, 41, 631, 1500, 41, 344, 59, 404, 2984, 61, 411, 46, 3186, 40, 3173, 46, 3187, 40, 41, 41, 59, 392, 40, 2984, 62, 45, 1501, 41, 3171, 91, 2984, 93, 61, 473, 59, 125, 3188, 60, 3167, 62, 3189, 61, 418, 3188, 60, 3167, 62, 40, 41, 59, 385, 40, 404, 3190, 61, 1500, 59, 3190, 60, 411, 46, 3172, 40, 41, 59, 3190, 637, 41, 123, 392, 40, 33, 3171, 91, 3190, 93, 41, 3189, 46, 3191, 40, 3190, 41, 59, 125, 450, 3189, 46, 3192, 40, 41, 59, 125, 457, 2302, 60, 2172, 62, 3193, 40, 2172, 3194, 44, 2059, 3195, 44, 2059, 3196, 44, 2011, 3197, 41, 123, 3198, 60, 2378, 62, 433, 61, 418, 3198, 60, 2378, 62, 40, 41, 59, 3198, 60, 2172, 62, 3199, 61, 418, 3198, 60, 2172, 62, 40, 41, 59, 3200, 58, 385, 40, 2378, 3201, 58, 3194, 46, 3202, 41, 123, 324, 3203, 59, 2059, 3204, 61, 59, 2378, 3205, 61, 424, 59, 392, 40, 3201, 402, 3206, 41, 123, 3206, 3207, 61, 40, 3206, 41, 3201, 59, 392, 40, 3207, 46, 3208, 402, 3209, 41, 123, 3209, 3210, 61, 40, 3209, 41, 3207, 46, 3208, 59, 3204, 61, 3210, 46, 2086, 46, 3211, 40, 41, 59, 125, 3205, 61, 3207, 46, 3212, 59, 125, 123, 404, 3213, 59, 385, 40, 3213, 61, 3204, 46, 3214, 40, 41, 59, 3213, 62, 1500, 59, 3213, 629, 41, 123, 392, 40, 3204, 46, 3215, 40, 3213, 45, 1501, 41, 631, 607, 41, 325, 59, 125, 3203, 61, 3213, 60, 3204, 46, 3214, 40, 41, 59, 3204, 61, 3204, 46, 3216, 40, 1500, 44, 3213, 41, 59, 125, 392, 40, 33, 3195, 46, 3217, 40, 3204, 41, 41, 123, 433, 46, 3218, 40, 3201, 41, 59, 344, 3200, 59, 125, 404, 3219, 61, 3220, 46, 3221, 40, 3201, 46, 2902, 40, 41, 44, 40, 3222, 41, 3197, 46, 3223, 40, 41, 46, 3224, 40, 41, 41, 59, 3197, 46, 3225, 40, 41, 46, 3226, 40, 3201, 46, 2902, 44, 3219, 41, 59, 392, 40, 3205, 402, 2172, 41, 123, 2059, 3227, 61, 40, 40, 2172, 41, 3205, 41, 46, 2251, 46, 3228, 40, 41, 59, 3227, 61, 3227, 46, 3229, 40, 44, 41, 46, 3229, 40, 44, 41, 46, 3229, 40, 44, 41, 46, 3229, 40, 44, 41, 59, 392, 40, 3227, 46, 3230, 40, 41, 62, 1500, 41, 123, 392, 40, 3203, 41, 123, 3199, 46, 3231, 40, 40, 2172, 41, 3205, 41, 59, 125, 360, 123, 3232, 40, 3196, 44, 3197, 41, 59, 344, 3200, 59, 125, 125, 360, 123, 385, 40, 2378, 3233, 58, 40, 40, 2172, 41, 3205, 41, 46, 3202, 41, 123, 392, 40, 3233, 402, 3206, 605, 40, 40, 3206, 41, 3233, 41, 46, 3234, 402, 3235, 41, 123, 3235, 3236, 61, 40, 3235, 41, 40, 40, 3206, 41, 3233, 41, 46, 3234, 59, 392, 40, 46, 3217, 40, 3236, 46, 2086, 46, 3228, 40, 41, 41, 41, 123, 3233, 61, 40, 40, 3206, 41, 3233, 41, 46, 3237, 59, 125, 360, 123, 3238, 40, 3196, 44, 3197, 41, 59, 125, 125, 392, 40, 3233, 402, 2172, 41, 123, 3199, 46, 3239, 40, 40, 2172, 41, 3233, 41, 59, 125, 360, 392, 40, 3233, 402, 3240, 41, 123, 385, 40, 2378, 3241, 58, 40, 40, 3240, 41, 3233, 41, 46, 2992, 41, 123, 392, 40, 3241, 402, 2172, 41, 123, 3199, 46, 3242, 40, 40, 2172, 41, 3241, 41, 59, 125, 360, 123, 3243, 40, 3196, 44, 3197, 41, 59, 344, 3200, 59, 125, 125, 125, 360, 123, 3244, 40, 3196, 44, 3197, 41, 59, 344, 3200, 59, 125, 125, 125, 125, 360, 392, 40, 3205, 402, 3245, 41, 123, 3245, 3246, 61, 40, 3245, 41, 3205, 59, 392, 40, 3246, 46, 2992, 46, 3247, 40, 41, 41, 123, 125, 360, 392, 40, 3203, 41, 123, 385, 40, 2378, 3248, 58, 3246, 46, 2992, 41, 123, 392, 40, 3248, 402, 2172, 41, 3199, 46, 3249, 40, 40, 2172, 41, 3248, 41, 59, 360, 3250, 40, 3196, 44, 3197, 41, 59, 125, 125, 360, 123, 3251, 40, 3196, 44, 3197, 41, 59, 125, 125, 360, 123, 3252, 40, 3196, 44, 3197, 41, 59, 125, 125, 385, 40, 2172, 2250, 58, 3199, 41, 123, 3253, 40, 2250, 41, 59, 125, 3194, 46, 3202, 61, 433, 46, 3254, 40, 41, 59, 450, 3199, 46, 3254, 40, 41, 59, 125, 437, 457, 492, 3255, 40, 2027, 3256, 41, 123, 3256, 46, 3257, 40, 418, 2002, 40, 41, 123, 64, 3258, 439, 492, 3259, 40, 2027, 3256, 41, 123, 392, 40, 3256, 614, 424, 41, 450, 59, 3256, 46, 2060, 61, 424, 59, 463, 46, 3259, 40, 3256, 41, 59, 125, 64, 3258, 439, 492, 3260, 40, 2814, 3256, 41, 123, 3256, 46, 3261, 61, 424, 59, 463, 46, 3260, 40, 3256, 41, 59, 125, 64, 3258, 439, 492, 3262, 40, 2482, 3256, 41, 123, 3256, 46, 3263, 61, 424, 59, 463, 46, 3262, 40, 3256, 41, 59, 125, 64, 3258, 439, 492, 3264, 40, 2644, 3256, 41, 123, 3256, 46, 3265, 61, 424, 59, 463, 46, 3264, 40, 3256, 41, 59, 125, 64, 3258, 439, 492, 3266, 40, 3267, 3256, 41, 123, 3256, 46, 3268, 61, 424, 59, 463, 46, 3266, 40, 3256, 41, 59, 125, 64, 3258, 439, 492, 3269, 40, 3270, 3256, 41, 123, 3256, 46, 3271, 61, 424, 59, 463, 46, 3269, 40, 3256, 41, 59, 125, 64, 3258, 439, 492, 3272, 40, 2172, 3256, 41, 123, 2729, 46, 3273, 40, 3256, 44, 424, 41, 59, 463, 46, 3272, 40, 3256, 41, 59, 125, 125, 41, 59, 125, 437, 457, 492, 3274, 40, 2059, 3196, 44, 2011, 2012, 41, 123, 392, 40, 2012, 46, 3275, 40, 41, 60, 1502, 41, 123, 2012, 46, 3274, 40, 43, 3196, 43, 41, 59, 125, 360, 123, 2012, 46, 3274, 40, 43, 3196, 43, 41, 59, 125, 125, 439, 457, 2302, 60, 3276, 62, 3277, 40, 2011, 2034, 44, 2302, 60, 3276, 62, 433, 41, 123, 392, 40, 433, 614, 424, 606, 433, 46, 3278, 40, 41, 41, 450, 433, 59, 3279, 60, 3276, 62, 430, 61, 418, 3279, 60, 3276, 62, 40, 41, 59, 2595, 2596, 61, 2034, 46, 3280, 40, 41, 59, 385, 40, 3276, 3281, 58, 433, 41, 123, 2302, 60, 2378, 62, 3282, 61, 3281, 46, 3282, 59, 392, 40, 3282, 631, 424, 605, 33, 3282, 46, 3278, 40, 41, 41, 123, 3279, 60, 2378, 62, 3283, 61, 418, 3279, 60, 2378, 62, 40, 41, 59, 385, 40, 2378, 3284, 58, 3281, 46, 3282, 41, 123, 3283, 46, 3285, 40, 3286, 40, 2596, 44, 3284, 44, 2034, 41, 41, 59, 125, 3282, 61, 3283, 46, 3287, 40, 41, 59, 125, 430, 46, 3288, 40, 2596, 46, 3289, 40, 3281, 46, 2086, 44, 3282, 41, 41, 59, 125, 450, 430, 46, 3290, 40, 41, 59, 125, 439, 457, 2302, 60, 2172, 62, 3291, 40, 2378, 388, 41, 123, 392, 40, 33, 2679, 46, 407, 40, 388, 41, 41, 450, 2302, 46, 3292, 40, 41, 59, 450, 2679, 46, 3293, 40, 388, 41, 59, 125, 439, 457, 2378, 3294, 40, 2378, 388, 41, 123, 392, 40, 33, 2679, 46, 407, 40, 388, 41, 41, 450, 388, 59, 450, 2679, 46, 3295, 40, 388, 41, 59, 125, 439, 457, 2378, 3296, 40, 2595, 2596, 44, 2011, 2060, 44, 2302, 60, 3276, 62, 433, 41, 123, 2814, 3297, 61, 40, 2814, 41, 2060, 46, 3298, 40, 41, 59, 324, 3299, 61, 40, 3297, 46, 2912, 46, 2874, 38, 3300, 46, 3301, 41, 614, 1500, 59, 450, 3296, 40, 2596, 44, 2060, 46, 3302, 40, 41, 44, 3297, 46, 2086, 44, 3299, 44, 433, 44, 2302, 46, 60, 2172, 62, 3303, 40, 41, 41, 59, 125, 439, 457, 2378, 3296, 40, 2595, 2596, 44, 2011, 2060, 44, 2302, 60, 3276, 62, 433, 44, 2302, 60, 2172, 62, 2304, 41, 123, 2814, 3304, 61, 40, 2814, 41, 2060, 46, 3305, 40, 41, 59, 324, 3306, 61, 40, 3304, 46, 2912, 46, 2874, 38, 3307, 46, 3308, 41, 614, 1500, 59, 450, 3296, 40, 2596, 44, 2060, 46, 3309, 40, 41, 44, 3304, 46, 2086, 44, 3306, 44, 433, 44, 2304, 41, 59, 125, 439, 457, 2378, 3296, 40, 2595, 2596, 44, 2011, 3310, 44, 2400, 3311, 44, 324, 3312, 44, 2302, 60, 3276, 62, 433, 41, 123, 450, 3296, 40, 2596, 44, 3310, 44, 3311, 44, 3312, 44, 433, 44, 2302, 46, 60, 2172, 62, 3313, 40, 41, 41, 59, 125, 439, 457, 2378, 3296, 40, 2595, 2596, 44, 2011, 3310, 44, 2400, 3311, 44, 324, 3312, 44, 2302, 60, 3276, 62, 433, 44, 2302, 60, 2172, 62, 2304, 41, 123, 2378, 3314, 61, 424, 59, 392, 40, 3310, 631, 424, 605, 3310, 46, 3315, 40, 41, 614, 3316, 46, 3317, 605, 33, 3310, 46, 3318, 40, 41, 46, 3319, 40, 41, 41, 123, 2814, 3320, 61, 40, 2814, 41, 3310, 46, 3321, 40, 41, 59, 324, 3322, 61, 3312, 605, 40, 40, 3320, 46, 2912, 46, 2874, 38, 3323, 46, 3324, 41, 614, 1500, 41, 59, 2302, 60, 3276, 62, 3325, 61, 3312, 63, 3320, 46, 3326, 58, 2302, 46, 60, 3276, 62, 3327, 40, 41, 59, 3314, 61, 3296, 40, 2596, 44, 3310, 46, 3328, 40, 41, 44, 3320, 46, 2086, 44, 3322, 44, 3325, 44, 2302, 46, 60, 2172, 62, 3327, 40, 41, 41, 59, 125, 3314, 61, 3314, 614, 424, 63, 2596, 46, 3329, 40, 3311, 41, 58, 2596, 46, 3330, 40, 3314, 44, 3311, 41, 59, 392, 40, 33, 2304, 46, 3319, 40, 41, 41, 3314, 61, 2679, 46, 3331, 40, 2304, 44, 3314, 41, 59, 392, 40, 33, 433, 46, 3319, 40, 41, 41, 3314, 61, 2596, 46, 3332, 40, 3314, 44, 3333, 40, 2596, 44, 433, 41, 41, 59, 450, 3314, 59, 125, 439, 457, 2302, 60, 2378, 62, 3334, 40, 2595, 2596, 44, 2302, 60, 3276, 62, 433, 41, 123, 3335, 60, 2378, 62, 3336, 61, 418, 3335, 60, 2378, 62, 40, 41, 59, 385, 40, 3276, 3337, 58, 433, 41, 123, 3336, 46, 3338, 40, 2596, 46, 3339, 40, 3337, 46, 2086, 41, 41, 59, 125, 450, 3336, 46, 3340, 40, 41, 59, 125, 439, 457, 492, 3341, 40, 2011, 2123, 44, 2011, 3342, 41, 123, 2302, 60, 2059, 62, 3343, 61, 2302, 46, 3344, 40, 41, 59, 385, 40, 2011, 3345, 58, 2123, 46, 3346, 40, 41, 41, 123, 385, 40, 2059, 3347, 58, 3348, 41, 123, 392, 40, 2107, 40, 3347, 44, 3345, 41, 41, 123, 404, 3349, 61, 3347, 46, 3350, 40, 607, 41, 59, 3343, 61, 3343, 46, 3351, 40, 3349, 614, 45, 1501, 63, 3347, 58, 3347, 46, 3352, 40, 3349, 43, 1501, 41, 41, 59, 125, 125, 125, 404, 3353, 61, 3343, 46, 3353, 40, 41, 59, 392, 40, 3353, 614, 1500, 41, 450, 59, 392, 40, 3353, 614, 1501, 41, 123, 3342, 46, 3274, 40, 43, 3343, 46, 3354, 43, 41, 59, 450, 59, 125, 3355, 430, 61, 418, 3355, 40, 41, 59, 385, 40, 2059, 3356, 58, 3343, 41, 430, 46, 3357, 40, 41, 46, 3357, 40, 3356, 41, 46, 3357, 40, 41, 59, 430, 46, 3358, 40, 430, 46, 3359, 40, 41, 45, 1502, 41, 59, 3342, 46, 3274, 40, 430, 46, 3357, 40, 41, 46, 3360, 40, 41, 41, 59, 125, 457, 2302, 60, 2172, 62, 3361, 40, 2302, 60, 63, 378, 2378, 62, 398, 41, 123, 3362, 60, 2172, 62, 430, 61, 418, 3362, 60, 2172, 62, 40, 41, 59, 385, 40, 2378, 3363, 58, 398, 41, 123, 392, 40, 33, 40, 3363, 402, 2172, 41, 41, 344, 59, 430, 46, 3364, 40, 40, 2172, 41, 3363, 46, 335, 40, 41, 41, 59, 125, 450, 430, 46, 3365, 40, 41, 59, 125, 457, 2302, 60, 2172, 62, 3366, 40, 2302, 60, 2172, 62, 3367, 44, 2302, 60, 2172, 62, 3368, 41, 123, 392, 40, 3367, 614, 424, 606, 3367, 46, 3369, 40, 41, 41, 450, 3368, 59, 392, 40, 3368, 614, 424, 606, 3368, 46, 3369, 40, 41, 41, 450, 3367, 59, 3370, 60, 2172, 62, 430, 61, 418, 3370, 60, 2172, 62, 40, 41, 59, 385, 40, 2172, 3371, 58, 3367, 41, 430, 46, 3372, 40, 3371, 41, 59, 385, 40, 2172, 3371, 58, 3368, 41, 430, 46, 3372, 40, 3371, 41, 59, 450, 430, 46, 3373, 40, 41, 59, 125, 439, 457, 324, 3374, 40, 2011, 2123, 41, 123, 450, 3375, 40, 2123, 44, 3376, 46, 3377, 124, 3376, 46, 3378, 124, 3376, 46, 3379, 124, 3380, 41, 59, 125, 439, 457, 324, 3381, 40, 2011, 2123, 41, 123, 450, 3382, 40, 2123, 44, 3383, 46, 3384, 124, 3383, 46, 3385, 124, 3386, 41, 59, 125, 439, 457, 324, 3387, 40, 2011, 2123, 41, 123, 450, 3388, 40, 2123, 44, 3389, 46, 3390, 124, 3389, 46, 3391, 41, 59, 125, 439, 457, 324, 3392, 40, 2011, 2123, 41, 123, 450, 2123, 46, 3393, 40, 41, 614, 3394, 46, 3395, 605, 40, 40, 40, 2814, 41, 2123, 46, 3396, 40, 41, 41, 46, 2912, 46, 2874, 38, 3397, 41, 631, 1500, 59, 125, 439, 457, 324, 3398, 40, 2011, 2123, 44, 413, 2874, 41, 123, 2814, 3399, 61, 424, 59, 392, 40, 2123, 46, 3400, 40, 41, 402, 2814, 41, 3399, 61, 40, 2814, 41, 2123, 46, 3400, 40, 41, 59, 360, 450, 380, 59, 413, 3401, 61, 3399, 614, 424, 63, 1500, 58, 3399, 46, 2912, 46, 2874, 59, 450, 40, 3401, 38, 2874, 41, 614, 1500, 59, 125, 439, 457, 324, 3402, 40, 2011, 2123, 41, 123, 324, 3403, 61, 473, 59, 496, 40, 2123, 46, 3404, 40, 41, 631, 3405, 46, 3406, 41, 123, 392, 40, 33, 3403, 41, 450, 380, 59, 3403, 61, 2123, 46, 3407, 40, 41, 59, 2123, 61, 2123, 46, 3408, 40, 41, 59, 125, 450, 473, 59, 125, 439, 457, 2011, 3409, 40, 2011, 2012, 41, 123, 392, 40, 2012, 614, 424, 41, 469, 418, 3410, 40, 41, 59, 496, 40, 40, 2012, 631, 424, 41, 605, 33, 40, 2012, 46, 3411, 40, 41, 402, 2814, 41, 41, 2012, 61, 2012, 46, 3412, 40, 41, 59, 450, 2012, 59, 125, 439, 457, 2302, 60, 2378, 62, 3413, 40, 2595, 2596, 44, 2302, 60, 2378, 62, 398, 44, 2011, 2034, 41, 123, 392, 40, 398, 46, 3414, 40, 41, 41, 450, 2302, 46, 3415, 40, 41, 59, 392, 40, 398, 46, 3416, 40, 41, 614, 1501, 41, 450, 2302, 46, 3417, 40, 3418, 40, 2596, 44, 398, 46, 3419, 40, 1500, 41, 44, 2034, 41, 41, 59, 3420, 60, 2378, 62, 3421, 61, 418, 3420, 60, 2378, 62, 40, 41, 59, 385, 40, 2378, 3422, 58, 398, 41, 3421, 46, 3423, 40, 3418, 40, 2596, 44, 3422, 44, 2034, 41, 41, 59, 450, 3421, 46, 3424, 40, 41, 59, 125, 439, 457, 2378, 3425, 40, 2595, 2596, 44, 2378, 398, 44, 2011, 2034, 41, 123, 2378, 430, 61, 3426, 40, 2596, 44, 398, 41, 59, 392, 40, 430, 631, 424, 41, 2033, 40, 430, 44, 2034, 41, 59, 450, 430, 59, 125, 437, 457, 2378, 3427, 40, 2595, 2596, 44, 2027, 398, 41, 123, 392, 40, 398, 614, 424, 41, 450, 424, 59, 392, 40, 398, 402, 3428, 41, 123, 450, 2596, 46, 3429, 40, 3430, 46, 3431, 40, 398, 41, 41, 59, 125, 392, 40, 398, 402, 3432, 41, 123, 450, 2596, 46, 3433, 40, 40, 40, 3432, 41, 398, 41, 46, 2086, 41, 59, 125, 392, 40, 398, 402, 3434, 41, 123, 3434, 3435, 61, 40, 3434, 41, 398, 59, 450, 2596, 46, 3436, 40, 3427, 40, 2596, 44, 3435, 46, 3437, 41, 44, 3435, 46, 2086, 41, 59, 125, 392, 40, 398, 402, 3438, 41, 123, 3438, 3439, 61, 40, 3438, 41, 398, 59, 450, 2596, 46, 3440, 40, 3427, 40, 2596, 44, 3439, 46, 3441, 41, 41, 59, 125, 392, 40, 398, 402, 3442, 41, 123, 3442, 3443, 61, 40, 3442, 41, 398, 59, 3444, 60, 2378, 62, 3445, 61, 418, 3444, 60, 2378, 62, 40, 41, 59, 385, 40, 2378, 3446, 58, 3443, 46, 3447, 41, 123, 3445, 46, 3448, 40, 3427, 40, 2596, 44, 3446, 41, 41, 59, 125, 450, 2596, 46, 3449, 40, 3427, 40, 2596, 44, 3443, 46, 3450, 41, 44, 3445, 46, 3451, 40, 41, 41, 59, 125, 392, 40, 398, 402, 3452, 41, 123, 3452, 3453, 61, 40, 3452, 41, 398, 59, 2378, 3454, 61, 3427, 40, 2596, 44, 3453, 46, 3455, 41, 59, 3456, 3457, 59, 464, 40, 3453, 46, 3458, 40, 41, 41, 123, 328, 3459, 58, 3457, 61, 2596, 46, 3456, 40, 3460, 46, 3461, 41, 59, 325, 59, 328, 3462, 58, 3457, 61, 2596, 46, 3456, 40, 3460, 46, 3463, 41, 59, 325, 59, 349, 58, 328, 3464, 58, 3457, 61, 2596, 46, 3456, 40, 3460, 46, 3465, 41, 59, 325, 59, 125, 450, 2596, 46, 3466, 40, 3457, 44, 3454, 41, 59, 125, 392, 40, 2679, 46, 407, 40, 398, 41, 41, 123, 2378, 3467, 61, 3427, 40, 2596, 44, 2679, 46, 3468, 40, 398, 41, 41, 59, 2302, 60, 2172, 62, 3031, 61, 3361, 40, 2679, 46, 3469, 40, 398, 41, 41, 59, 450, 2679, 46, 3470, 40, 3031, 44, 3467, 41, 59, 125, 450, 40, 2378, 41, 398, 59, 125, 439, 457, 370, 3471, 123, 3472, 123, 64, 3473, 439, 2059, 3474, 40, 381, 3475, 3476, 44, 381, 2011, 2012, 41, 123, 450, 3477, 46, 3478, 40, 3476, 44, 2012, 46, 3479, 40, 41, 41, 59, 125, 125, 44, 3480, 123, 64, 3481, 439, 2059, 3482, 40, 381, 3483, 3484, 44, 381, 2011, 2012, 41, 123, 381, 2027, 3485, 61, 2012, 46, 3486, 40, 41, 59, 2059, 3487, 61, 3488, 46, 3489, 40, 3484, 44, 3485, 41, 59, 2059, 430, 61, 3490, 40, 3487, 44, 41, 59, 381, 324, 3491, 61, 430, 631, 424, 59, 392, 40, 33, 3491, 41, 123, 430, 61, 3492, 40, 3493, 40, 3487, 41, 44, 3494, 46, 3495, 41, 59, 125, 2012, 46, 3496, 40, 41, 46, 3497, 40, 44, 3485, 44, 418, 3498, 40, 41, 123, 64, 3481, 439, 492, 3499, 40, 41, 123, 2059, 3487, 61, 3488, 46, 3489, 40, 3484, 44, 3485, 41, 59, 392, 40, 3487, 614, 424, 606, 3487, 46, 3500, 40, 41, 41, 450, 59, 3487, 61, 3501, 40, 3487, 41, 59, 392, 40, 33, 3491, 41, 123, 3487, 61, 3502, 40, 3501, 40, 3487, 41, 44, 3503, 46, 3504, 41, 59, 125, 3488, 46, 3505, 40, 3484, 44, 3485, 44, 3487, 41, 59, 125, 125, 41, 59, 450, 430, 59, 125, 125, 44, 3506, 123, 64, 3507, 439, 2059, 3508, 40, 381, 3509, 3510, 44, 381, 2011, 2012, 41, 123, 450, 3511, 40, 3510, 44, 2012, 44, 41, 59, 125, 125, 44, 3512, 123, 64, 3513, 439, 2059, 3514, 40, 381, 3515, 3516, 44, 381, 2011, 2012, 41, 123, 450, 3517, 40, 3518, 40, 3516, 44, 2012, 44, 41, 41, 59, 125, 125, 44, 3519, 123, 64, 3520, 439, 2059, 3521, 40, 381, 3522, 3523, 44, 381, 2011, 2012, 41, 123, 450, 3524, 40, 3523, 44, 2012, 44, 41, 59, 125, 125, 59, 439, 305, 2059, 3525, 40, 381, 3526, 3527, 44, 381, 2011, 2012, 41, 59, 437, 457, 2059, 3528, 40, 381, 3526, 3527, 44, 2011, 2012, 44, 2059, 3529, 41, 123, 381, 2027, 3530, 61, 2012, 46, 3531, 40, 41, 59, 2059, 3532, 61, 3533, 46, 3534, 40, 3527, 44, 3530, 41, 59, 2059, 430, 61, 3535, 40, 3532, 44, 3529, 41, 59, 381, 324, 3536, 61, 430, 631, 424, 59, 392, 40, 33, 3536, 41, 123, 430, 61, 3537, 40, 3538, 40, 3532, 41, 44, 3539, 46, 3540, 41, 59, 125, 2012, 46, 3541, 40, 41, 46, 3542, 40, 44, 3530, 44, 418, 3543, 40, 41, 123, 64, 3544, 439, 492, 3545, 40, 41, 123, 2059, 3532, 61, 3533, 46, 3534, 40, 3527, 44, 3530, 41, 59, 392, 40, 3532, 614, 424, 606, 3532, 46, 3546, 40, 41, 41, 450, 59, 3532, 61, 3547, 40, 3532, 41, 59, 392, 40, 33, 3536, 41, 123, 3532, 61, 3548, 40, 3547, 40, 3532, 41, 44, 3549, 46, 3550, 41, 59, 125, 3533, 46, 3551, 40, 3527, 44, 3530, 44, 3532, 41, 59, 125, 125, 41, 59, 450, 2365, 40, 2012, 41, 63, 3552, 40, 430, 41, 58, 430, 59, 125, 125, 439, 457, 492, 3553, 40, 2011, 388, 44, 2027, 3554, 44, 3471, 3555, 41, 123, 3553, 40, 388, 44, 3554, 44, 3555, 44, 380, 41, 59, 125, 439, 457, 492, 3553, 40, 2011, 388, 44, 2027, 3554, 44, 3471, 3555, 44, 324, 3556, 41, 123, 392, 40, 3555, 614, 424, 41, 3555, 61, 3471, 46, 3557, 59, 474, 123, 3558, 3559, 61, 40, 40, 3558, 41, 388, 46, 3560, 40, 41, 46, 3561, 40, 41, 41, 59, 2059, 3562, 61, 3555, 46, 3563, 40, 3559, 44, 388, 41, 59, 392, 40, 3556, 41, 123, 3562, 61, 3564, 40, 3562, 41, 59, 125, 3565, 46, 3566, 40, 3559, 44, 3554, 44, 3562, 41, 59, 125, 329, 40, 3567, 3568, 41, 123, 125, 125, 439, 457, 324, 3569, 40, 2011, 2123, 41, 123, 392, 40, 33, 40, 2123, 46, 3570, 40, 41, 402, 2814, 41, 41, 469, 418, 3571, 40, 41, 59, 2027, 3572, 61, 3573, 46, 3574, 40, 40, 2814, 41, 2123, 46, 3570, 40, 41, 41, 59, 392, 40, 3572, 614, 424, 41, 450, 473, 59, 2059, 3575, 61, 3572, 46, 3576, 40, 41, 59, 450, 3575, 46, 3577, 40, 41, 606, 3575, 46, 3577, 40, 41, 59, 125, 439, 457, 492, 3578, 40, 2011, 2123, 44, 2482, 3579, 41, 123, 3580, 3581, 61, 2123, 46, 3582, 40, 41, 46, 3583, 40, 3584, 46, 3585, 41, 59, 392, 40, 3581, 614, 424, 41, 450, 59, 3586, 40, 2123, 44, 3579, 44, 3581, 46, 3587, 40, 41, 44, 3581, 46, 3588, 40, 41, 41, 59, 125, 439, 457, 492, 3589, 40, 2011, 2123, 44, 2482, 3579, 41, 123, 3590, 3591, 61, 2123, 46, 3592, 40, 41, 46, 3593, 40, 3594, 46, 3595, 41, 59, 392, 40, 3591, 614, 424, 41, 450, 59, 3596, 40, 2123, 44, 3579, 44, 3591, 46, 3597, 40, 41, 44, 3591, 46, 3598, 40, 41, 41, 59, 125, 439, 457, 492, 3589, 40, 2011, 2123, 44, 2644, 2959, 41, 123, 3599, 3600, 61, 2123, 46, 3601, 40, 41, 46, 3602, 40, 3603, 46, 3604, 41, 59, 392, 40, 3600, 614, 424, 41, 450, 59, 3605, 40, 2123, 44, 2959, 44, 3600, 46, 3606, 40, 41, 44, 3600, 46, 3607, 40, 41, 41, 59, 125, 439, 457, 492, 3578, 40, 2011, 2123, 44, 2644, 2959, 41, 123, 3608, 3609, 61, 2123, 46, 3610, 40, 41, 46, 3611, 40, 3612, 46, 3613, 41, 59, 392, 40, 3609, 614, 424, 41, 450, 59, 3614, 40, 2123, 44, 2959, 44, 3609, 46, 3615, 40, 41, 44, 3609, 46, 3616, 40, 41, 41, 59, 125, 437, 457, 492, 3617, 40, 2011, 2123, 44, 2482, 3579, 44, 2059, 3618, 44, 324, 3619, 41, 123, 392, 40, 3618, 614, 424, 41, 450, 59, 2595, 2596, 61, 2123, 46, 3620, 40, 41, 59, 2172, 3621, 61, 2596, 46, 2062, 40, 2882, 40, 2123, 44, 3618, 41, 44, 2302, 46, 60, 2378, 62, 3622, 40, 41, 41, 59, 392, 40, 3619, 41, 123, 2378, 3623, 61, 3579, 46, 3624, 59, 392, 40, 3623, 402, 3625, 41, 123, 3625, 3626, 61, 40, 3625, 41, 3623, 59, 392, 40, 3626, 46, 3627, 402, 3628, 41, 123, 3579, 46, 3624, 61, 2596, 46, 3629, 40, 2596, 46, 3630, 40, 2302, 46, 3631, 40, 3621, 41, 44, 3626, 46, 3627, 41, 44, 3626, 46, 3632, 41, 59, 450, 59, 125, 3623, 61, 3626, 46, 3627, 59, 125, 392, 40, 3623, 402, 3633, 606, 3623, 402, 3634, 41, 123, 3579, 46, 3624, 61, 2596, 46, 3635, 40, 2302, 46, 3636, 40, 3621, 41, 44, 3623, 41, 59, 450, 59, 125, 392, 40, 2679, 46, 407, 40, 3623, 41, 41, 123, 2302, 60, 2172, 62, 2304, 61, 2679, 46, 3637, 40, 3623, 41, 59, 2679, 46, 3638, 40, 3623, 44, 2304, 46, 3639, 40, 3621, 41, 41, 59, 450, 59, 125, 392, 40, 3623, 402, 3640, 606, 3623, 402, 3641, 41, 123, 3579, 46, 2912, 46, 2304, 61, 3579, 46, 2912, 46, 2304, 614, 424, 63, 2302, 46, 3642, 40, 3621, 41, 58, 3579, 46, 2912, 46, 2304, 46, 3643, 40, 3621, 41, 59, 125, 125, 360, 123, 3579, 46, 2912, 46, 2304, 61, 3579, 46, 2912, 46, 2304, 614, 424, 63, 2302, 46, 3644, 40, 3621, 41, 58, 3579, 46, 2912, 46, 2304, 46, 3645, 40, 3621, 41, 59, 125, 125, 437, 457, 492, 3646, 40, 2011, 2123, 44, 2644, 2959, 44, 2059, 3618, 44, 324, 3619, 41, 123, 392, 40, 3618, 614, 424, 41, 450, 59, 2595, 2596, 61, 2123, 46, 3647, 40, 41, 59, 2172, 3648, 61, 2596, 46, 2062, 40, 2882, 40, 2123, 44, 3618, 41, 44, 2302, 46, 60, 2378, 62, 3649, 40, 41, 41, 59, 392, 40, 3619, 41, 123, 2378, 2397, 61, 2959, 46, 3650, 59, 3651, 3652, 61, 424, 59, 392, 40, 2397, 402, 3651, 41, 123, 3652, 61, 40, 3651, 41, 2397, 59, 2397, 61, 3652, 46, 3653, 59, 125, 392, 40, 2397, 402, 3654, 606, 2397, 402, 3655, 41, 123, 2397, 61, 2596, 46, 3656, 40, 2302, 46, 3657, 40, 3648, 41, 44, 2397, 41, 59, 392, 40, 3652, 631, 424, 41, 3652, 46, 3658, 61, 2397, 59, 360, 2959, 46, 3650, 61, 2397, 59, 450, 59, 125, 392, 40, 2679, 46, 407, 40, 2397, 41, 41, 123, 2302, 60, 2172, 62, 2304, 61, 2679, 46, 3659, 40, 2397, 41, 59, 2679, 46, 3660, 40, 2397, 44, 2304, 46, 3661, 40, 3648, 41, 41, 59, 450, 59, 125, 392, 40, 2397, 402, 3662, 606, 2397, 402, 3663, 41, 123, 2959, 46, 2912, 46, 2304, 61, 2959, 46, 2912, 46, 2304, 614, 424, 63, 2302, 46, 3664, 40, 3648, 41, 58, 2959, 46, 2912, 46, 2304, 46, 3665, 40, 3648, 41, 59, 125, 125, 360, 123, 2959, 46, 2912, 46, 2304, 61, 2959, 46, 2912, 46, 2304, 614, 424, 63, 2302, 46, 3666, 40, 3648, 41, 58, 2959, 46, 2912, 46, 2304, 46, 3667, 40, 3648, 41, 59, 125, 125, 125]",0.99999195,1
35,29395,Java,"public class EclipseNode extends lombok.core.LombokNode<EclipseAST, EclipseNode, ASTNode> {
	private EclipseAST ast;
	/** {@inheritDoc} */
	EclipseNode(EclipseAST ast, ASTNode node, List<EclipseNode> children, Kind kind) {
		super(node, children, kind);
		this.ast = ast;
	}
	
	@Override 
	public EclipseAST getAst() {
		return ast;
	}
	/**
	 * Visits this node and all child nodes depth-first, calling the provided visitor's visit methods.
	 */
	public void traverse(EclipseASTVisitor visitor) {
		if (visitor.isDeferUntilPostDiet() && !isCompleteParse()) return;
		
		switch (getKind()) {
		case COMPILATION_UNIT:
			visitor.visitCompilationUnit(this, (CompilationUnitDeclaration) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitCompilationUnit(this, (CompilationUnitDeclaration) get());
			break;
		case TYPE:
			visitor.visitType(this, (TypeDeclaration) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitType(this, (TypeDeclaration) get());
			break;
		case FIELD:
			visitor.visitField(this, (FieldDeclaration) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitField(this, (FieldDeclaration) get());
			break;
		case INITIALIZER:
			visitor.visitInitializer(this, (Initializer) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitInitializer(this, (Initializer) get());
			break;
		case METHOD:
			if (get() instanceof Clinit) return;
			visitor.visitMethod(this, (AbstractMethodDeclaration) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitMethod(this, (AbstractMethodDeclaration) get());
			break;
		case ARGUMENT:
			AbstractMethodDeclaration method = (AbstractMethodDeclaration) up().get();
			visitor.visitMethodArgument(this, (Argument) get(), method);
			ast.traverseChildren(visitor, this);
			visitor.endVisitMethodArgument(this, (Argument) get(), method);
			break;
		case LOCAL:
			visitor.visitLocal(this, (LocalDeclaration) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitLocal(this, (LocalDeclaration) get());
			break;
		case ANNOTATION:
			switch (up().getKind()) {
			case TYPE:
				visitor.visitAnnotationOnType((TypeDeclaration) up().get(), this, (Annotation) get());
				break;
			case FIELD:
				visitor.visitAnnotationOnField((FieldDeclaration) up().get(), this, (Annotation) get());
				break;
			case METHOD:
				visitor.visitAnnotationOnMethod((AbstractMethodDeclaration) up().get(), this, (Annotation) get());
				break;
			case ARGUMENT:
				visitor.visitAnnotationOnMethodArgument(
						(Argument) parent.get(),
						(AbstractMethodDeclaration) parent.directUp().get(),
						this, (Annotation) get());
				break;
			case LOCAL:
				visitor.visitAnnotationOnLocal((LocalDeclaration) parent.get(), this, (Annotation) get());
				break;
			case TYPE_USE:
				visitor.visitAnnotationOnTypeUse((TypeReference) parent.get(), this, (Annotation) get());
				break;
			default:
				throw new AssertionError(""Annotation not expected as child of a "" + up().getKind());
			}
			break;
		case TYPE_USE:
			visitor.visitTypeUse(this, (TypeReference) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitTypeUse(this, (TypeReference) get());
			break;
		case STATEMENT:
			visitor.visitStatement(this, (Statement) get());
			ast.traverseChildren(visitor, this);
			visitor.endVisitStatement(this, (Statement) get());
			break;
		default:
			throw new AssertionError(""Unexpected kind during node traversal: "" + getKind());
		}
	}
	
	/** {@inheritDoc} */
	@Override public String getName() {
		final char[] n;
		if (node instanceof TypeDeclaration) n = ((TypeDeclaration)node).name;
		else if (node instanceof FieldDeclaration) n = ((FieldDeclaration)node).name;
		else if (node instanceof AbstractMethodDeclaration) n = ((AbstractMethodDeclaration)node).selector;
		else if (node instanceof LocalDeclaration) n = ((LocalDeclaration)node).name;
		else n = null;
		
		return n == null ? null : new String(n);
	}
	
	/** {@inheritDoc} */
	@Override public void addError(String message) {
		this.addError(message, this.get().sourceStart, this.get().sourceEnd);
	}
	
	/** Generate a compiler error that shows the wavy underline from-to the stated character positions. */
	public void addError(String message, int sourceStart, int sourceEnd) {
		ast.addProblem(ast.new ParseProblem(false, message, sourceStart, sourceEnd));
	}
	
	/** {@inheritDoc} */
	@Override public void addWarning(String message) {
		this.addWarning(message, this.get().sourceStart, this.get().sourceEnd);
	}
	
	/** Generate a compiler warning that shows the wavy underline from-to the stated character positions. */
	public void addWarning(String message, int sourceStart, int sourceEnd) {
		ast.addProblem(ast.new ParseProblem(true, message, sourceStart, sourceEnd));
	}
	
	/** {@inheritDoc} */
	@Override protected boolean calculateIsStructurallySignificant(ASTNode parent) {
		if (node instanceof TypeDeclaration) return true;
		if (node instanceof AbstractMethodDeclaration) return true;
		if (node instanceof FieldDeclaration) return true;
		if (node instanceof LocalDeclaration) return true;
		if (node instanceof CompilationUnitDeclaration) return true;
		return false;
	}
	
	/**
	 * Convenient shortcut to the owning EclipseAST object's isCompleteParse method.
	 * 
	 * @see EclipseAST#isCompleteParse()
	 */
	public boolean isCompleteParse() {
		return ast.isCompleteParse();
	}
	
	@Override public boolean hasAnnotation(Class<? extends java.lang.annotation.Annotation> type) {
		return EclipseHandlerUtil.hasAnnotation(type, this);
	}
	
	@Override public <Z extends java.lang.annotation.Annotation> AnnotationValues<Z> findAnnotation(Class<Z> type) {
		EclipseNode annotation = EclipseHandlerUtil.findAnnotation(type, this);
		if (annotation == null) return null;
		return EclipseHandlerUtil.createAnnotation(type, annotation);
	}
	
	private Integer getModifiers() {
		if (node instanceof TypeDeclaration) return ((TypeDeclaration) node).modifiers;
		if (node instanceof FieldDeclaration) return ((FieldDeclaration) node).modifiers;
		if (node instanceof LocalDeclaration) return ((LocalDeclaration) node).modifiers;
		if (node instanceof AbstractMethodDeclaration) return ((AbstractMethodDeclaration) node).modifiers;
		
		return null;
	}
	
	@Override public boolean isStatic() {
		if (node instanceof TypeDeclaration) {
			TypeDeclaration t = (TypeDeclaration) node;
			int f = t.modifiers;
			if (((ClassFileConstants.AccInterface | ClassFileConstants.AccEnum) & f) != 0) return true;
			
			EclipseNode directUp = directUp();
			if (directUp == null || directUp.getKind() == Kind.COMPILATION_UNIT) return true;
			if (!(directUp.get() instanceof TypeDeclaration)) return false;
			TypeDeclaration p = (TypeDeclaration) directUp.get();
			f = p.modifiers;
			if (((ClassFileConstants.AccInterface | ClassFileConstants.AccEnum) & f) != 0) return true;
		}
		
		if (node instanceof FieldDeclaration) {
			EclipseNode directUp = directUp();
			if (directUp != null && directUp.get() instanceof TypeDeclaration) {
				TypeDeclaration p = (TypeDeclaration) directUp.get();
				int f = p.modifiers;
				if ((ClassFileConstants.AccInterface & f) != 0) return true;
			}
		}
		
		Integer i = getModifiers();
		if (i == null) return false;
		int f = i.intValue();
		return (ClassFileConstants.AccStatic & f) != 0;
	}
	
	@Override public boolean isFinal() {
		if (node instanceof FieldDeclaration) {
			EclipseNode directUp = directUp();
			if (directUp != null && directUp.get() instanceof TypeDeclaration) {
				TypeDeclaration p = (TypeDeclaration) directUp.get();
				int f = p.modifiers;
				if (((ClassFileConstants.AccInterface | ClassFileConstants.AccEnum) & f) != 0) return true;
			}
		}
		
		Integer i = getModifiers();
		if (i == null) return false;
		int f = i.intValue();
		return (ClassFileConstants.AccFinal & f) != 0;
	}
	
	@Override public boolean isPrimitive() {
		if (node instanceof FieldDeclaration && !isEnumMember()) {
			return Eclipse.isPrimitive(((FieldDeclaration) node).type);
		}
		if (node instanceof MethodDeclaration) {
			return Eclipse.isPrimitive(((MethodDeclaration) node).returnType);
		}
		return false;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override public String fieldOrMethodBaseType() {
		TypeReference typeReference = null;
		if (node instanceof FieldDeclaration && !isEnumMember()) {
			typeReference = ((FieldDeclaration) node).type;
		}
		if (node instanceof MethodDeclaration) {
			typeReference = ((MethodDeclaration) node).returnType;
		}
		if (typeReference == null) return null;
		
		String fqn = Eclipse.toQualifiedName(typeReference.getTypeName());
		if (typeReference.dimensions() == 0) return fqn;
		StringBuilder result = new StringBuilder(fqn.length() + 2 * typeReference.dimensions());
		result.append(fqn);
		for (int i = 0; i < typeReference.dimensions(); i++) {
			result.append(""[]"");
		}
		return result.toString();
	}
	
	@Override public boolean isTransient() {
		if (getKind() != Kind.FIELD) return false;
		Integer i = getModifiers();
		return i != null && (i.intValue() & ClassFileConstants.AccTransient) != 0;
	}
	
	@Override public boolean isEnumMember() {
		if (getKind() != Kind.FIELD) return false;
		return ((FieldDeclaration) node).getKind() == 3;
	}
	
	@Override public boolean isEnumType() {
		if (getKind() != Kind.TYPE) return false;
		return (((TypeDeclaration) node).modifiers & ClassFileConstants.AccEnum) != 0;
	}
	
	@Override public int countMethodParameters() {
		if (getKind() != Kind.METHOD) return 0;
		
		Argument[] a = ((AbstractMethodDeclaration) node).arguments;
		if (a == null) return 0;
		return a.length;
	}
	
	@Override public int getStartPos() {
		return node.sourceStart;
	}
}",1,"[439, 334, 2000, 378, 2001, 46, 2002, 46, 2003, 60, 2004, 44, 2000, 44, 2005, 62, 123, 437, 2004, 2006, 59, 2000, 40, 2004, 2006, 44, 2005, 2007, 44, 2008, 60, 2000, 62, 2009, 44, 2010, 2011, 41, 123, 463, 40, 2007, 44, 2009, 44, 2011, 41, 59, 467, 46, 2006, 61, 2006, 59, 125, 64, 2012, 439, 2004, 2013, 40, 41, 123, 450, 2006, 59, 125, 439, 492, 2014, 40, 2015, 2016, 41, 123, 392, 40, 2016, 46, 2017, 40, 41, 605, 33, 2018, 40, 41, 41, 450, 59, 464, 40, 2019, 40, 41, 41, 123, 328, 2020, 58, 2016, 46, 2021, 40, 467, 44, 40, 2022, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2025, 40, 467, 44, 40, 2022, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2026, 58, 2016, 46, 2027, 40, 467, 44, 40, 2028, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2029, 40, 467, 44, 40, 2028, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2030, 58, 2016, 46, 2031, 40, 467, 44, 40, 2032, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2033, 40, 467, 44, 40, 2032, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2034, 58, 2016, 46, 2035, 40, 467, 44, 40, 2036, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2037, 40, 467, 44, 40, 2036, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2038, 58, 392, 40, 2023, 40, 41, 402, 2039, 41, 450, 59, 2016, 46, 2040, 40, 467, 44, 40, 2041, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2042, 40, 467, 44, 40, 2041, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2043, 58, 2041, 2044, 61, 40, 2041, 41, 2045, 40, 41, 46, 2023, 40, 41, 59, 2016, 46, 2046, 40, 467, 44, 40, 2047, 41, 2023, 40, 41, 44, 2044, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2048, 40, 467, 44, 40, 2047, 41, 2023, 40, 41, 44, 2044, 41, 59, 325, 59, 328, 2049, 58, 2016, 46, 2050, 40, 467, 44, 40, 2051, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2052, 40, 467, 44, 40, 2051, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2053, 58, 464, 40, 2045, 40, 41, 46, 2019, 40, 41, 41, 123, 328, 2026, 58, 2016, 46, 2054, 40, 40, 2028, 41, 2045, 40, 41, 46, 2023, 40, 41, 44, 467, 44, 40, 2055, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2030, 58, 2016, 46, 2056, 40, 40, 2032, 41, 2045, 40, 41, 46, 2023, 40, 41, 44, 467, 44, 40, 2055, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2038, 58, 2016, 46, 2057, 40, 40, 2041, 41, 2045, 40, 41, 46, 2023, 40, 41, 44, 467, 44, 40, 2055, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2043, 58, 2016, 46, 2058, 40, 40, 2047, 41, 2059, 46, 2023, 40, 41, 44, 40, 2041, 41, 2059, 46, 2060, 40, 41, 46, 2023, 40, 41, 44, 467, 44, 40, 2055, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2049, 58, 2016, 46, 2061, 40, 40, 2051, 41, 2059, 46, 2023, 40, 41, 44, 467, 44, 40, 2055, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2062, 58, 2016, 46, 2063, 40, 40, 2064, 41, 2059, 46, 2023, 40, 41, 44, 467, 44, 40, 2055, 41, 2023, 40, 41, 41, 59, 325, 59, 349, 58, 469, 418, 2065, 40, 43, 2045, 40, 41, 46, 2019, 40, 41, 41, 59, 125, 325, 59, 328, 2066, 58, 2016, 46, 2067, 40, 467, 44, 40, 2068, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2069, 40, 467, 44, 40, 2068, 41, 2023, 40, 41, 41, 59, 325, 59, 328, 2070, 58, 2016, 46, 2071, 40, 467, 44, 40, 2072, 41, 2023, 40, 41, 41, 59, 2006, 46, 2024, 40, 2016, 44, 467, 41, 59, 2016, 46, 2073, 40, 467, 44, 40, 2072, 41, 2023, 40, 41, 41, 59, 325, 59, 349, 58, 469, 418, 2074, 40, 43, 2019, 40, 41, 41, 59, 125, 125, 64, 2012, 439, 2075, 2076, 40, 41, 123, 381, 330, 91, 93, 2077, 59, 392, 40, 2007, 402, 2078, 41, 2077, 61, 40, 40, 2078, 41, 2007, 41, 46, 2079, 59, 360, 392, 40, 2007, 402, 2080, 41, 2077, 61, 40, 40, 2080, 41, 2007, 41, 46, 2079, 59, 360, 392, 40, 2007, 402, 2081, 41, 2077, 61, 40, 40, 2081, 41, 2007, 41, 46, 2082, 59, 360, 392, 40, 2007, 402, 2083, 41, 2077, 61, 40, 40, 2083, 41, 2007, 41, 46, 2079, 59, 360, 2077, 61, 424, 59, 450, 2077, 614, 424, 63, 424, 58, 418, 2075, 40, 2077, 41, 59, 125, 64, 2012, 439, 492, 2084, 40, 2075, 2085, 41, 123, 467, 46, 2084, 40, 2085, 44, 467, 46, 2086, 40, 41, 46, 2087, 44, 467, 46, 2086, 40, 41, 46, 2088, 41, 59, 125, 439, 492, 2084, 40, 2075, 2085, 44, 404, 2089, 44, 404, 2090, 41, 123, 2006, 46, 2091, 40, 2006, 46, 418, 2092, 40, 380, 44, 2085, 44, 2089, 44, 2090, 41, 41, 59, 125, 64, 2012, 439, 492, 2093, 40, 2075, 2085, 41, 123, 467, 46, 2093, 40, 2085, 44, 467, 46, 2094, 40, 41, 46, 2089, 44, 467, 46, 2094, 40, 41, 46, 2090, 41, 59, 125, 439, 492, 2093, 40, 2075, 2085, 44, 404, 2089, 44, 404, 2090, 41, 123, 2006, 46, 2095, 40, 2006, 46, 418, 2096, 40, 473, 44, 2085, 44, 2089, 44, 2090, 41, 41, 59, 125, 64, 2012, 438, 324, 2097, 40, 2005, 2098, 41, 123, 392, 40, 2007, 402, 2099, 41, 450, 473, 59, 392, 40, 2007, 402, 2100, 41, 450, 473, 59, 392, 40, 2007, 402, 2101, 41, 450, 473, 59, 392, 40, 2007, 402, 2102, 41, 450, 473, 59, 392, 40, 2007, 402, 2103, 41, 450, 473, 59, 450, 380, 59, 125, 439, 324, 2104, 40, 41, 123, 450, 2006, 46, 2104, 40, 41, 59, 125, 64, 2012, 439, 324, 2105, 40, 2106, 60, 63, 378, 2107, 46, 2108, 46, 2109, 46, 2110, 62, 2111, 41, 123, 450, 2112, 46, 2105, 40, 2111, 44, 467, 41, 59, 125, 64, 2012, 439, 60, 2113, 378, 2107, 46, 2108, 46, 2109, 46, 2110, 62, 2114, 60, 2113, 62, 2115, 40, 2106, 60, 2113, 62, 2111, 41, 123, 2000, 2109, 61, 2116, 46, 2115, 40, 2111, 44, 467, 41, 59, 392, 40, 2109, 614, 424, 41, 450, 424, 59, 450, 2116, 46, 2117, 40, 2111, 44, 2109, 41, 59, 125, 437, 2118, 2119, 40, 41, 123, 392, 40, 2007, 402, 2120, 41, 450, 40, 40, 2120, 41, 2007, 41, 46, 2121, 59, 392, 40, 2007, 402, 2122, 41, 450, 40, 40, 2122, 41, 2007, 41, 46, 2121, 59, 392, 40, 2007, 402, 2123, 41, 450, 40, 40, 2123, 41, 2007, 41, 46, 2121, 59, 392, 40, 2007, 402, 2124, 41, 450, 40, 40, 2124, 41, 2007, 41, 46, 2121, 59, 450, 424, 59, 125, 64, 2012, 439, 324, 2125, 40, 41, 123, 392, 40, 2007, 402, 2126, 41, 123, 2126, 2127, 61, 40, 2126, 41, 2007, 59, 404, 2128, 61, 2127, 46, 2129, 59, 392, 40, 40, 40, 2130, 46, 2131, 124, 2130, 46, 2132, 41, 38, 2128, 41, 631, 1500, 41, 450, 473, 59, 2000, 2133, 61, 2133, 40, 41, 59, 392, 40, 2133, 614, 424, 606, 2133, 46, 2134, 40, 41, 614, 2010, 46, 2135, 41, 450, 473, 59, 392, 40, 33, 40, 2133, 46, 2136, 40, 41, 402, 2126, 41, 41, 450, 380, 59, 2126, 2137, 61, 40, 2126, 41, 2133, 46, 2136, 40, 41, 59, 2128, 61, 2137, 46, 2129, 59, 392, 40, 40, 40, 2130, 46, 2131, 124, 2130, 46, 2132, 41, 38, 2128, 41, 631, 1500, 41, 450, 473, 59, 125, 392, 40, 2007, 402, 2138, 41, 123, 2000, 2139, 61, 2139, 40, 41, 59, 392, 40, 2139, 631, 424, 605, 2139, 46, 2140, 40, 41, 402, 2126, 41, 123, 2126, 2141, 61, 40, 2126, 41, 2139, 46, 2140, 40, 41, 59, 404, 2142, 61, 2141, 46, 2143, 59, 392, 40, 40, 2144, 46, 2145, 38, 2142, 41, 631, 1500, 41, 450, 473, 59, 125, 125, 2118, 2146, 61, 2119, 40, 41, 59, 392, 40, 2146, 614, 424, 41, 450, 380, 59, 404, 2147, 61, 2146, 46, 2148, 40, 41, 59, 450, 40, 2149, 46, 2150, 38, 2147, 41, 631, 1500, 59, 125, 64, 2012, 439, 324, 2151, 40, 41, 123, 392, 40, 2007, 402, 2152, 41, 123, 2000, 2153, 61, 2153, 40, 41, 59, 392, 40, 2153, 631, 424, 605, 2153, 46, 2154, 40, 41, 402, 2155, 41, 123, 2155, 2156, 61, 40, 2155, 41, 2153, 46, 2154, 40, 41, 59, 404, 2157, 61, 2156, 46, 2158, 59, 392, 40, 40, 40, 2159, 46, 2160, 124, 2159, 46, 2161, 41, 38, 2157, 41, 631, 1500, 41, 450, 473, 59, 125, 125, 2118, 2162, 61, 2119, 40, 41, 59, 392, 40, 2162, 614, 424, 41, 450, 380, 59, 404, 2163, 61, 2162, 46, 2164, 40, 41, 59, 450, 40, 2165, 46, 2166, 38, 2163, 41, 631, 1500, 59, 125, 64, 2012, 439, 324, 2167, 40, 41, 123, 392, 40, 2007, 402, 2168, 605, 33, 2169, 40, 41, 41, 123, 450, 2170, 46, 2167, 40, 40, 40, 2168, 41, 2007, 41, 46, 2111, 41, 59, 125, 392, 40, 2007, 402, 2171, 41, 123, 450, 2172, 46, 2167, 40, 40, 40, 2171, 41, 2007, 41, 46, 2173, 41, 59, 125, 450, 380, 59, 125, 64, 2012, 439, 2075, 2174, 40, 41, 123, 2175, 2176, 61, 424, 59, 392, 40, 2007, 402, 2177, 605, 33, 2178, 40, 41, 41, 123, 2176, 61, 40, 40, 2177, 41, 2007, 41, 46, 2111, 59, 125, 392, 40, 2007, 402, 2179, 41, 123, 2176, 61, 40, 40, 2179, 41, 2007, 41, 46, 2180, 59, 125, 392, 40, 2176, 614, 424, 41, 450, 424, 59, 2075, 2181, 61, 2182, 46, 2183, 40, 2176, 46, 2184, 40, 41, 41, 59, 392, 40, 2176, 46, 2185, 40, 41, 614, 1500, 41, 450, 2181, 59, 2186, 2187, 61, 418, 2186, 40, 2181, 46, 2188, 40, 41, 43, 1502, 42, 2176, 46, 2185, 40, 41, 41, 59, 2187, 46, 2189, 40, 2181, 41, 59, 385, 40, 404, 2190, 61, 1500, 59, 2190, 60, 2176, 46, 2185, 40, 41, 59, 2190, 637, 41, 123, 2187, 46, 2189, 40, 41, 59, 125, 450, 2187, 46, 2191, 40, 41, 59, 125, 64, 2012, 439, 324, 2192, 40, 41, 123, 392, 40, 2193, 40, 41, 631, 2010, 46, 2194, 41, 450, 380, 59, 2118, 2195, 61, 2119, 40, 41, 59, 450, 2195, 631, 424, 605, 40, 2195, 46, 2196, 40, 41, 38, 2197, 46, 2198, 41, 631, 1500, 59, 125, 64, 2012, 439, 324, 2199, 40, 41, 123, 392, 40, 2200, 40, 41, 631, 2010, 46, 2201, 41, 450, 380, 59, 450, 40, 40, 2202, 41, 2007, 41, 46, 2200, 40, 41, 614, 1502, 59, 125, 64, 2012, 439, 324, 2203, 40, 41, 123, 392, 40, 2204, 40, 41, 631, 2010, 46, 2205, 41, 450, 380, 59, 450, 40, 40, 40, 2206, 41, 2007, 41, 46, 2207, 38, 2208, 46, 2209, 41, 631, 1500, 59, 125, 64, 2012, 439, 404, 2210, 40, 41, 123, 392, 40, 2211, 40, 41, 631, 2010, 46, 2212, 41, 450, 1500, 59, 2213, 91, 93, 2214, 61, 40, 40, 2215, 41, 2007, 41, 46, 2216, 59, 392, 40, 2214, 614, 424, 41, 450, 1500, 59, 450, 2214, 46, 2217, 59, 125, 64, 2012, 439, 404, 2218, 40, 41, 123, 450, 2007, 46, 2089, 59, 125, 125]",0.9999339,1
36,5161,Java,"@FxmlView
public class DebugView extends InitializableView<GridPane, Void> {

    @FXML
    TitledGroupBg titledGroupBg;
    private int rowIndex = 0;

    @Inject
    public DebugView() {
    }

    @Override
    public void initialize() {

        addGroup(""OfferAvailabilityProtocol"",
                FXCollections.observableArrayList(Arrays.asList(
                        SendOfferAvailabilityRequest.class,
                        ProcessOfferAvailabilityResponse.class)
                ));

        addGroup(""PlaceOfferProtocol"",
                FXCollections.observableArrayList(Arrays.asList(
                        ValidateOffer.class,
                        CreateMakerFeeTx.class,
                        AddToOfferBook.class)
                ));


        addGroup(""SellerAsTakerProtocol"",
                FXCollections.observableArrayList(Arrays.asList(
                        ApplyFilter.class,
                        TakerVerifyMakerFeePayment.class,
                        CreateTakerFeeTx.class,
                        SellerAsTakerCreatesDepositTxInputs.class,
                        TakerSendInputsForDepositTxRequest.class,

                        TakerProcessesInputsForDepositTxResponse.class,
                        ApplyFilter.class,
                        VerifyPeersAccountAgeWitness.class,
                        TakerVerifyAndSignContract.class,
                        TakerPublishFeeTx.class,
                        SellerAsTakerSignsDepositTx.class,
                        SellerCreatesDelayedPayoutTx.class,
                        SellerSendDelayedPayoutTxSignatureRequest.class,

                        SellerProcessDelayedPayoutTxSignatureResponse.class,
                        SellerSignsDelayedPayoutTx.class,
                        SellerFinalizesDelayedPayoutTx.class,
                        SellerSendsDepositTxAndDelayedPayoutTxMessage.class,
                        SellerPublishesDepositTx.class,
                        SellerPublishesTradeStatistics.class,

                        SellerProcessCounterCurrencyTransferStartedMessage.class,
                        ApplyFilter.class,
                        TakerVerifyMakerFeePayment.class,

                        ApplyFilter.class,
                        TakerVerifyMakerFeePayment.class,
                        SellerSignAndFinalizePayoutTx.class,
                        SellerBroadcastPayoutTx.class,
                        SellerSendPayoutTxPublishedMessage.class

                        )
                ));
        addGroup(""BuyerAsMakerProtocol"",
                FXCollections.observableArrayList(Arrays.asList(
                        MakerProcessesInputsForDepositTxRequest.class,
                        ApplyFilter.class,
                        VerifyPeersAccountAgeWitness.class,
                        MakerVerifyTakerFeePayment.class,
                        MakerSetsLockTime.class,
                        MakerCreateAndSignContract.class,
                        BuyerAsMakerCreatesAndSignsDepositTx.class,
                        BuyerSetupDepositTxListener.class,
                        BuyerAsMakerSendsInputsForDepositTxResponse.class,

                        BuyerProcessDelayedPayoutTxSignatureRequest.class,
                        MakerRemovesOpenOffer.class,
                        BuyerVerifiesPreparedDelayedPayoutTx.class,
                        BuyerSignsDelayedPayoutTx.class,
                        BuyerSendsDelayedPayoutTxSignatureResponse.class,

                        BuyerProcessDepositTxAndDelayedPayoutTxMessage.class,
                        BuyerVerifiesFinalDelayedPayoutTx.class,

                        ApplyFilter.class,
                        MakerVerifyTakerFeePayment.class,
                        BuyerSignPayoutTx.class,
                        BuyerSetupPayoutTxListener.class,
                        BuyerSendCounterCurrencyTransferStartedMessage.class,

                        BuyerProcessPayoutTxPublishedMessage.class
                        )
                ));


        addGroup(""BuyerAsTakerProtocol"",
                FXCollections.observableArrayList(Arrays.asList(
                        ApplyFilter.class,
                        TakerVerifyMakerFeePayment.class,
                        CreateTakerFeeTx.class,
                        BuyerAsTakerCreatesDepositTxInputs.class,
                        TakerSendInputsForDepositTxRequest.class,

                        TakerProcessesInputsForDepositTxResponse.class,
                        ApplyFilter.class,
                        VerifyPeersAccountAgeWitness.class,
                        TakerVerifyAndSignContract.class,
                        TakerPublishFeeTx.class,
                        BuyerAsTakerSignsDepositTx.class,
                        BuyerSetupDepositTxListener.class,
                        BuyerAsTakerSendsDepositTxMessage.class,

                        BuyerProcessDelayedPayoutTxSignatureRequest.class,
                        BuyerVerifiesPreparedDelayedPayoutTx.class,
                        BuyerSignsDelayedPayoutTx.class,
                        BuyerSendsDelayedPayoutTxSignatureResponse.class,

                        BuyerProcessDepositTxAndDelayedPayoutTxMessage.class,
                        BuyerVerifiesFinalDelayedPayoutTx.class,

                        ApplyFilter.class,
                        TakerVerifyMakerFeePayment.class,
                        BuyerSignPayoutTx.class,
                        BuyerSetupPayoutTxListener.class,
                        BuyerSendCounterCurrencyTransferStartedMessage.class,

                        BuyerProcessPayoutTxPublishedMessage.class)
                ));
        addGroup(""SellerAsMakerProtocol"",
                FXCollections.observableArrayList(Arrays.asList(
                        MakerProcessesInputsForDepositTxRequest.class,
                        ApplyFilter.class,
                        VerifyPeersAccountAgeWitness.class,
                        MakerVerifyTakerFeePayment.class,
                        MakerSetsLockTime.class,
                        MakerCreateAndSignContract.class,
                        SellerAsMakerCreatesUnsignedDepositTx.class,
                        SellerAsMakerSendsInputsForDepositTxResponse.class,

                        SellerAsMakerProcessDepositTxMessage.class,
                        MakerRemovesOpenOffer.class,
                        SellerAsMakerFinalizesDepositTx.class,
                        SellerCreatesDelayedPayoutTx.class,
                        SellerSendDelayedPayoutTxSignatureRequest.class,

                        SellerProcessDelayedPayoutTxSignatureResponse.class,
                        SellerSignsDelayedPayoutTx.class,
                        SellerFinalizesDelayedPayoutTx.class,
                        SellerSendsDepositTxAndDelayedPayoutTxMessage.class,
                        SellerPublishesDepositTx.class,
                        SellerPublishesTradeStatistics.class,

                        SellerProcessCounterCurrencyTransferStartedMessage.class,
                        ApplyFilter.class,
                        MakerVerifyTakerFeePayment.class,

                        ApplyFilter.class,
                        MakerVerifyTakerFeePayment.class,
                        SellerSignAndFinalizePayoutTx.class,
                        SellerBroadcastPayoutTx.class,
                        SellerSendPayoutTxPublishedMessage.class
                        )
                ));
    }

    private void addGroup(String title, ObservableList<Class<? extends Task>> list) {
        final Tuple2<Label, ComboBox<Class<? extends Task>>> selectTaskToIntercept =
                addTopLabelComboBox(root, ++rowIndex, title, ""Select task to intercept"", 15);
        ComboBox<Class<? extends Task>> comboBox = selectTaskToIntercept.second;
        comboBox.setVisibleRowCount(list.size());
        comboBox.setItems(list);
        comboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(Class<? extends Task> item) {
                return item.getSimpleName();
            }

            @Override
            public Class<? extends Task> fromString(String s) {
                return null;
            }
        });
        comboBox.setOnAction(event -> Task.taskToIntercept = comboBox.getSelectionModel().getSelectedItem());
    }
}",1,"[64, 2000, 439, 334, 2001, 378, 2002, 60, 2003, 44, 2004, 62, 123, 64, 2005, 2006, 2007, 59, 437, 404, 2008, 61, 1500, 59, 64, 2009, 439, 2001, 40, 41, 123, 125, 64, 2010, 439, 492, 2011, 40, 41, 123, 2012, 40, 44, 2013, 46, 2014, 40, 2015, 46, 2016, 40, 2017, 46, 334, 44, 2018, 46, 334, 41, 41, 41, 59, 2012, 40, 44, 2013, 46, 2014, 40, 2015, 46, 2016, 40, 2019, 46, 334, 44, 2020, 46, 334, 44, 2021, 46, 334, 41, 41, 41, 59, 2012, 40, 44, 2013, 46, 2014, 40, 2015, 46, 2016, 40, 2022, 46, 334, 44, 2023, 46, 334, 44, 2024, 46, 334, 44, 2025, 46, 334, 44, 2026, 46, 334, 44, 2027, 46, 334, 44, 2022, 46, 334, 44, 2028, 46, 334, 44, 2029, 46, 334, 44, 2030, 46, 334, 44, 2031, 46, 334, 44, 2032, 46, 334, 44, 2033, 46, 334, 44, 2034, 46, 334, 44, 2035, 46, 334, 44, 2036, 46, 334, 44, 2037, 46, 334, 44, 2038, 46, 334, 44, 2039, 46, 334, 44, 2040, 46, 334, 44, 2022, 46, 334, 44, 2023, 46, 334, 44, 2022, 46, 334, 44, 2023, 46, 334, 44, 2041, 46, 334, 44, 2042, 46, 334, 44, 2043, 46, 334, 41, 41, 41, 59, 2012, 40, 44, 2013, 46, 2014, 40, 2015, 46, 2016, 40, 2044, 46, 334, 44, 2022, 46, 334, 44, 2028, 46, 334, 44, 2045, 46, 334, 44, 2046, 46, 334, 44, 2047, 46, 334, 44, 2048, 46, 334, 44, 2049, 46, 334, 44, 2050, 46, 334, 44, 2051, 46, 334, 44, 2052, 46, 334, 44, 2053, 46, 334, 44, 2054, 46, 334, 44, 2055, 46, 334, 44, 2056, 46, 334, 44, 2057, 46, 334, 44, 2022, 46, 334, 44, 2045, 46, 334, 44, 2058, 46, 334, 44, 2059, 46, 334, 44, 2060, 46, 334, 44, 2061, 46, 334, 41, 41, 41, 59, 2012, 40, 44, 2013, 46, 2014, 40, 2015, 46, 2016, 40, 2022, 46, 334, 44, 2023, 46, 334, 44, 2024, 46, 334, 44, 2062, 46, 334, 44, 2026, 46, 334, 44, 2027, 46, 334, 44, 2022, 46, 334, 44, 2028, 46, 334, 44, 2029, 46, 334, 44, 2030, 46, 334, 44, 2063, 46, 334, 44, 2049, 46, 334, 44, 2064, 46, 334, 44, 2051, 46, 334, 44, 2053, 46, 334, 44, 2054, 46, 334, 44, 2055, 46, 334, 44, 2056, 46, 334, 44, 2057, 46, 334, 44, 2022, 46, 334, 44, 2023, 46, 334, 44, 2058, 46, 334, 44, 2059, 46, 334, 44, 2060, 46, 334, 44, 2061, 46, 334, 41, 41, 41, 59, 2012, 40, 44, 2013, 46, 2014, 40, 2015, 46, 2016, 40, 2044, 46, 334, 44, 2022, 46, 334, 44, 2028, 46, 334, 44, 2045, 46, 334, 44, 2046, 46, 334, 44, 2047, 46, 334, 44, 2065, 46, 334, 44, 2066, 46, 334, 44, 2067, 46, 334, 44, 2052, 46, 334, 44, 2068, 46, 334, 44, 2032, 46, 334, 44, 2033, 46, 334, 44, 2034, 46, 334, 44, 2035, 46, 334, 44, 2036, 46, 334, 44, 2037, 46, 334, 44, 2038, 46, 334, 44, 2039, 46, 334, 44, 2040, 46, 334, 44, 2022, 46, 334, 44, 2045, 46, 334, 44, 2022, 46, 334, 44, 2045, 46, 334, 44, 2041, 46, 334, 44, 2042, 46, 334, 44, 2043, 46, 334, 41, 41, 41, 59, 125, 437, 492, 2069, 40, 2070, 2071, 44, 2072, 60, 2073, 60, 63, 378, 2074, 641, 411, 41, 123, 381, 2075, 60, 2076, 44, 2077, 60, 2073, 60, 63, 378, 2074, 644, 2078, 61, 2079, 40, 2080, 44, 637, 2008, 44, 2071, 44, 44, 1503, 41, 59, 2077, 60, 2073, 60, 63, 378, 2074, 641, 2081, 61, 2078, 46, 2082, 59, 2081, 46, 2083, 40, 411, 46, 2084, 40, 41, 41, 59, 2081, 46, 2085, 40, 411, 41, 59, 2081, 46, 2086, 40, 418, 2087, 60, 62, 40, 41, 123, 64, 2010, 439, 2070, 2088, 40, 2073, 60, 63, 378, 2074, 62, 2089, 41, 123, 450, 2089, 46, 2090, 40, 41, 59, 125, 64, 2010, 439, 2073, 60, 63, 378, 2074, 62, 2091, 40, 2070, 2092, 41, 123, 450, 424, 59, 125, 125, 41, 59, 2081, 46, 2093, 40, 373, 45, 62, 2074, 46, 2094, 61, 2081, 46, 2095, 40, 41, 46, 2096, 40, 41, 41, 59, 125, 125]",0.26699343,0
37,3550,Java,"@Slf4j
public class DisputeSummaryWindow extends Overlay<DisputeSummaryWindow> {
    private final CoinFormatter formatter;
    private final MediationManager mediationManager;
    private final RefundManager refundManager;
    private final TradeWalletService tradeWalletService;
    private final BtcWalletService btcWalletService;
    private final TxFeeEstimationService txFeeEstimationService;
    private final MempoolService mempoolService;
    private final DaoFacade daoFacade;
    private Dispute dispute;
    private Optional<Runnable> finalizeDisputeHandlerOptional = Optional.empty();
    private ToggleGroup tradeAmountToggleGroup, reasonToggleGroup;
    private DisputeResult disputeResult;
    private RadioButton buyerGetsTradeAmountRadioButton, sellerGetsTradeAmountRadioButton,
            buyerGetsCompensationRadioButton, sellerGetsCompensationRadioButton,
            buyerGetsTradeAmountMinusPenaltyRadioButton, sellerGetsTradeAmountMinusPenaltyRadioButton, customRadioButton;
    private RadioButton reasonWasBugRadioButton, reasonWasUsabilityIssueRadioButton,
            reasonProtocolViolationRadioButton, reasonNoReplyRadioButton, reasonWasScamRadioButton,
            reasonWasOtherRadioButton, reasonWasBankRadioButton, reasonWasOptionTradeRadioButton,
            reasonWasSellerNotRespondingRadioButton, reasonWasWrongSenderAccountRadioButton,
            reasonWasPeerWasLateRadioButton, reasonWasTradeAlreadySettledRadioButton;

    // Dispute object of other trade peer. The dispute field is the one from which we opened the close dispute window.
    private Optional<Dispute> peersDisputeOptional;
    private String role;
    private Label delayedPayoutTxStatus;
    private TextArea summaryNotesTextArea;

    private ChangeListener<Boolean> customRadioButtonSelectedListener, buyerGetsTradeAmountSelectedListener, sellerGetsTradeAmountSelectedListener;
    private ChangeListener<Toggle> reasonToggleSelectionListener;
    private InputTextField buyerPayoutAmountInputTextField, sellerPayoutAmountInputTextField, compensationOrPenalty;
    private ChangeListener<Boolean> buyerPayoutAmountListener, sellerPayoutAmountListener;
    private ChangeListener<Toggle> tradeAmountToggleGroupListener;
    private ChangeListener<String> compensationOrPenaltyListener;
    private boolean updatingUi = false;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Public API
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public DisputeSummaryWindow(@Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter formatter,
                                MediationManager mediationManager,
                                RefundManager refundManager,
                                TradeWalletService tradeWalletService,
                                BtcWalletService btcWalletService,
                                TxFeeEstimationService txFeeEstimationService,
                                MempoolService mempoolService,
                                DaoFacade daoFacade) {

        this.formatter = formatter;
        this.mediationManager = mediationManager;
        this.refundManager = refundManager;
        this.tradeWalletService = tradeWalletService;
        this.btcWalletService = btcWalletService;
        this.txFeeEstimationService = txFeeEstimationService;
        this.mempoolService = mempoolService;
        this.daoFacade = daoFacade;

        type = Type.Confirmation;
    }

    public void show(Dispute dispute) {
        this.dispute = dispute;

        rowIndex = -1;
        width = 1150;
        createGridPane();
        addContent();
        checkDelayedPayoutTransaction();
        display();

        if (DevEnv.isDevMode()) {
            UserThread.execute(() -> {
                summaryNotesTextArea.setText(""dummy result...."");
            });
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Protected
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void cleanup() {
        if (reasonToggleGroup != null)
            reasonToggleGroup.selectedToggleProperty().removeListener(reasonToggleSelectionListener);

        if (customRadioButton != null)
            customRadioButton.selectedProperty().removeListener(customRadioButtonSelectedListener);

        if (buyerGetsTradeAmountRadioButton != null)
            buyerGetsTradeAmountRadioButton.selectedProperty().removeListener(buyerGetsTradeAmountSelectedListener);

        if (sellerGetsTradeAmountRadioButton != null)
            sellerGetsTradeAmountRadioButton.selectedProperty().removeListener(sellerGetsTradeAmountSelectedListener);

        if (tradeAmountToggleGroup != null)
            tradeAmountToggleGroup.selectedToggleProperty().removeListener(tradeAmountToggleGroupListener);

        removePayoutAmountListeners();
    }

    @Override
    protected void setupKeyHandler(Scene scene) {
        if (!hideCloseButton) {
            scene.setOnKeyPressed(e -> {
                if (e.getCode() == KeyCode.ESCAPE) {
                    e.consume();
                    doClose();
                }
            });
        }
    }

    @Override
    protected void createGridPane() {
        super.createGridPane();
        gridPane.setPadding(new Insets(35, 40, 0, 40));
        gridPane.getStyleClass().add(""grid-pane"");
        gridPane.getColumnConstraints().get(0).setHalignment(HPos.LEFT);
        gridPane.setPrefWidth(width);
    }

    private void addContent() {
        Contract contract = dispute.getContract();
        if (dispute.getDisputeResultProperty().get() == null)
            disputeResult = new DisputeResult(dispute.getTradeId(), dispute.getTraderId());
        else
            disputeResult = dispute.getDisputeResultProperty().get();

        peersDisputeOptional = checkNotNull(getDisputeManager(dispute)).getDisputesAsObservableList().stream()
                .filter(d -> dispute.getTradeId().equals(d.getTradeId()) && dispute.getTraderId() != d.getTraderId())
                .findFirst();

        addInfoPane();

        addTradeAmountPayoutControls();
        addPayoutAmountTextFields();
        addReasonControls();
        applyDisputeResultToUiControls();

        boolean applyPeersDisputeResult = peersDisputeOptional.isPresent() && peersDisputeOptional.get().isClosed();
        if (applyPeersDisputeResult) {
            // If the other peers dispute has been closed we apply the result to ourselves
            DisputeResult peersDisputeResult = peersDisputeOptional.get().getDisputeResultProperty().get();
            disputeResult.setBuyerPayoutAmount(peersDisputeResult.getBuyerPayoutAmount());
            disputeResult.setSellerPayoutAmount(peersDisputeResult.getSellerPayoutAmount());
            disputeResult.setPayoutAdjustmentPercent(peersDisputeResult.getPayoutAdjustmentPercent());
            disputeResult.setPayoutSuggestion(peersDisputeResult.getPayoutSuggestion());
            disputeResult.setWinner(peersDisputeResult.getWinner());
            disputeResult.setReason(peersDisputeResult.getReason());
            disputeResult.setSummaryNotes(peersDisputeResult.summaryNotesProperty().get());

            buyerGetsTradeAmountRadioButton.setDisable(true);
            buyerGetsCompensationRadioButton.setDisable(true);
            buyerGetsTradeAmountMinusPenaltyRadioButton.setDisable(true);
            sellerGetsTradeAmountRadioButton.setDisable(true);
            sellerGetsCompensationRadioButton.setDisable(true);
            sellerGetsTradeAmountMinusPenaltyRadioButton.setDisable(true);
            customRadioButton.setDisable(true);

            buyerPayoutAmountInputTextField.setDisable(true);
            sellerPayoutAmountInputTextField.setDisable(true);
            compensationOrPenalty.setDisable(true);
            buyerPayoutAmountInputTextField.setEditable(false);
            sellerPayoutAmountInputTextField.setEditable(false);
            compensationOrPenalty.setEditable(false);

            reasonWasBugRadioButton.setDisable(true);
            reasonWasUsabilityIssueRadioButton.setDisable(true);
            reasonProtocolViolationRadioButton.setDisable(true);
            reasonNoReplyRadioButton.setDisable(true);
            reasonWasScamRadioButton.setDisable(true);
            reasonWasOtherRadioButton.setDisable(true);
            reasonWasBankRadioButton.setDisable(true);
            reasonWasOptionTradeRadioButton.setDisable(true);
            reasonWasSellerNotRespondingRadioButton.setDisable(true);
            reasonWasWrongSenderAccountRadioButton.setDisable(true);
            reasonWasPeerWasLateRadioButton.setDisable(true);
            reasonWasTradeAlreadySettledRadioButton.setDisable(true);
            applyDisputeResultToUiControls();
        }

        setReasonRadioButtonState();

        addSummaryNotes();
        addButtons(contract);
    }

    private void addInfoPane() {
        Contract contract = dispute.getContract();
        addTitledGroupBg(gridPane, ++rowIndex, 17, Res.get(""disputeSummaryWindow.title"")).getStyleClass().add(""last"");
        addConfirmationLabelTextField(gridPane, rowIndex, Res.get(""shared.tradeId""), dispute.getShortTradeId(),
                Layout.TWICE_FIRST_ROW_DISTANCE);
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.openDate""), DisplayUtils.formatDateTime(dispute.getOpeningDate()));
        role = dispute.getRoleString();
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.role""), role);
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.tradeAmount""),
                formatter.formatCoinWithCode(contract.getTradeAmount()));
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.tradePrice""),
                FormattingUtils.formatPrice(contract.getTradePrice()));
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.tradeVolume""),
                VolumeUtil.formatVolumeWithCode(contract.getTradeVolume()));
        String securityDeposit = Res.getWithColAndCap(""shared.buyer"") +
                "" "" +
                formatter.formatCoinWithCode(contract.getOfferPayload().getBuyerSecurityDeposit()) +
                "" / "" +
                Res.getWithColAndCap(""shared.seller"") +
                "" "" +
                formatter.formatCoinWithCode(contract.getOfferPayload().getSellerSecurityDeposit());
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.securityDeposit""), securityDeposit);

        boolean isMediationDispute = getDisputeManager(dispute) instanceof MediationManager;
        if (isMediationDispute) {
            if (dispute.getTradePeriodEnd().getTime() > 0) {
                String status = DisplayUtils.formatDateTime(dispute.getTradePeriodEnd());
                Label tradePeriodEnd = addConfirmationLabelLabel(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.tradePeriodEnd""), status).second;
                if (dispute.getTradePeriodEnd().toInstant().isAfter(Instant.now())) {
                    tradePeriodEnd.getStyleClass().add(""alert""); // highlight field when the trade period is still active
                }
            }
            if (dispute.getExtraDataMap() != null && dispute.getExtraDataMap().size() > 0) {
                String extraDataSummary = """";
                for (Map.Entry<String, String> entry : dispute.getExtraDataMap().entrySet()) {
                    extraDataSummary += ""["" + entry.getKey() + "":"" + entry.getValue() + ""] "";
                }
                addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.extraInfo""), extraDataSummary);
            }
        } else {
            delayedPayoutTxStatus = addConfirmationLabelLabel(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.delayedPayoutStatus""), ""Checking..."").second;
        }
    }

    private void addTradeAmountPayoutControls() {
        buyerGetsTradeAmountRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsTradeAmount"", Res.get(""shared.buyer"")));
        buyerGetsCompensationRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsCompensation"", Res.get(""shared.buyer"")));
        buyerGetsTradeAmountMinusPenaltyRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsPenalty"", Res.get(""shared.buyer"")));
        sellerGetsTradeAmountRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsTradeAmount"", Res.get(""shared.seller"")));
        sellerGetsCompensationRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsCompensation"", Res.get(""shared.seller"")));
        sellerGetsTradeAmountMinusPenaltyRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsPenalty"", Res.get(""shared.seller"")));
        customRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.custom""));

        VBox radioButtonPane = new VBox();
        radioButtonPane.setSpacing(10);
        radioButtonPane.getChildren().addAll(buyerGetsTradeAmountRadioButton, buyerGetsCompensationRadioButton,
                buyerGetsTradeAmountMinusPenaltyRadioButton, sellerGetsTradeAmountRadioButton, sellerGetsCompensationRadioButton, sellerGetsTradeAmountMinusPenaltyRadioButton,
                customRadioButton);

        addTopLabelWithVBox(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.payout""), radioButtonPane, 0);

        tradeAmountToggleGroup = new ToggleGroup();
        buyerGetsTradeAmountRadioButton.setToggleGroup(tradeAmountToggleGroup);
        buyerGetsCompensationRadioButton.setToggleGroup(tradeAmountToggleGroup);
        buyerGetsTradeAmountMinusPenaltyRadioButton.setToggleGroup(tradeAmountToggleGroup);
        sellerGetsTradeAmountRadioButton.setToggleGroup(tradeAmountToggleGroup);
        sellerGetsCompensationRadioButton.setToggleGroup(tradeAmountToggleGroup);
        sellerGetsTradeAmountMinusPenaltyRadioButton.setToggleGroup(tradeAmountToggleGroup);
        customRadioButton.setToggleGroup(tradeAmountToggleGroup);

        tradeAmountToggleGroupListener = (observable, oldValue, newValue) -> applyUpdateFromUi(newValue);
        tradeAmountToggleGroup.selectedToggleProperty().addListener(tradeAmountToggleGroupListener);

        buyerPayoutAmountListener = (observable, oldValue, newValue) -> applyCustomAmounts(buyerPayoutAmountInputTextField, oldValue, newValue);
        sellerPayoutAmountListener = (observable, oldValue, newValue) -> applyCustomAmounts(sellerPayoutAmountInputTextField, oldValue, newValue);

        buyerGetsTradeAmountSelectedListener = (observable, oldValue, newValue) -> {
            compensationOrPenalty.setEditable(!newValue);
        };
        buyerGetsTradeAmountRadioButton.selectedProperty().addListener(buyerGetsTradeAmountSelectedListener);

        sellerGetsTradeAmountSelectedListener = (observable, oldValue, newValue) -> {
            compensationOrPenalty.setEditable(!newValue);
        };
        sellerGetsTradeAmountRadioButton.selectedProperty().addListener(sellerGetsTradeAmountSelectedListener);

        customRadioButtonSelectedListener = (observable, oldValue, newValue) -> {
            buyerPayoutAmountInputTextField.setEditable(newValue);
            sellerPayoutAmountInputTextField.setEditable(newValue);
            compensationOrPenalty.setEditable(!newValue);
            if (newValue) {
                buyerPayoutAmountInputTextField.focusedProperty().addListener(buyerPayoutAmountListener);
                sellerPayoutAmountInputTextField.focusedProperty().addListener(sellerPayoutAmountListener);
            } else {
                removePayoutAmountListeners();
            }
        };
        customRadioButton.selectedProperty().addListener(customRadioButtonSelectedListener);
    }

    private void removePayoutAmountListeners() {
        if (buyerPayoutAmountInputTextField != null && buyerPayoutAmountListener != null)
            buyerPayoutAmountInputTextField.focusedProperty().removeListener(buyerPayoutAmountListener);

        if (sellerPayoutAmountInputTextField != null && sellerPayoutAmountListener != null)
            sellerPayoutAmountInputTextField.focusedProperty().removeListener(sellerPayoutAmountListener);
    }

    private boolean isPayoutAmountValid() {
        Coin buyerAmount = ParsingUtils.parseToCoin(buyerPayoutAmountInputTextField.getText(), formatter);
        Coin sellerAmount = ParsingUtils.parseToCoin(sellerPayoutAmountInputTextField.getText(), formatter);
        Contract contract = dispute.getContract();
        Coin tradeAmount = contract.getTradeAmount();
        Offer offer = new Offer(contract.getOfferPayload());
        Coin available = tradeAmount
                .add(offer.getBuyerSecurityDeposit())
                .add(offer.getSellerSecurityDeposit());
        Coin totalAmount = buyerAmount.add(sellerAmount);

        boolean isRefundAgent = getDisputeManager(dispute) instanceof RefundManager;
        if (isRefundAgent) {
            // We allow to spend less in case of RefundAgent or even zero to both, so in that case no payout tx will
            // be made
            return totalAmount.compareTo(available) <= 0;
        } else {
            if (!totalAmount.isPositive()) {
                return false;
            }
            return totalAmount.compareTo(available) == 0;
        }
    }

    private void applyCustomAmounts(InputTextField inputTextField, boolean oldFocusValue, boolean newFocusValue) {
        // We only apply adjustments at focus out, otherwise we cannot enter certain values if we update at each
        // keystroke.
        if (!oldFocusValue || newFocusValue) {
            return;
        }

        Contract contract = dispute.getContract();
        boolean isMediationDispute = getDisputeManager(dispute) instanceof MediationManager;
        // At mediation we require a min. payout to the losing party to keep incentive for the trader to accept the
        // mediated payout. For Refund agent cases we do not have that restriction.
        Coin minRefundAtDispute = isMediationDispute ? Restrictions.getMinRefundAtMediatedDispute() : Coin.ZERO;

        Offer offer = new Offer(contract.getOfferPayload());
        Coin totalAvailable = contract.getTradeAmount()
                .add(offer.getBuyerSecurityDeposit())
                .add(offer.getSellerSecurityDeposit());
        Coin availableForPayout = totalAvailable.subtract(minRefundAtDispute);

        Coin enteredAmount = ParsingUtils.parseToCoin(inputTextField.getText(), formatter);
        if (enteredAmount.compareTo(minRefundAtDispute) < 0) {
            enteredAmount = minRefundAtDispute;
            inputTextField.setText(formatter.formatCoin(enteredAmount));
        }
        if (enteredAmount.isPositive() && !Restrictions.isAboveDust(enteredAmount)) {
            enteredAmount = Restrictions.getMinNonDustOutput();
            inputTextField.setText(formatter.formatCoin(enteredAmount));
        }
        if (enteredAmount.compareTo(availableForPayout) > 0) {
            enteredAmount = availableForPayout;
            inputTextField.setText(formatter.formatCoin(enteredAmount));
        }
        Coin counterPartAsCoin = totalAvailable.subtract(enteredAmount);
        String formattedCounterPartAmount = formatter.formatCoin(counterPartAsCoin);
        Coin buyerAmount;
        Coin sellerAmount;
        if (inputTextField == buyerPayoutAmountInputTextField) {
            buyerAmount = enteredAmount;
            sellerAmount = counterPartAsCoin;
            Coin sellerAmountFromField = ParsingUtils.parseToCoin(sellerPayoutAmountInputTextField.getText(), formatter);
            Coin totalAmountFromFields = enteredAmount.add(sellerAmountFromField);
            // RefundAgent can enter less then available
            if (isMediationDispute ||
                    totalAmountFromFields.compareTo(totalAvailable) > 0) {
                sellerPayoutAmountInputTextField.setText(formattedCounterPartAmount);
            } else {
                sellerAmount = sellerAmountFromField;
            }
        } else {
            sellerAmount = enteredAmount;
            buyerAmount = counterPartAsCoin;
            Coin buyerAmountFromField = ParsingUtils.parseToCoin(buyerPayoutAmountInputTextField.getText(), formatter);
            Coin totalAmountFromFields = enteredAmount.add(buyerAmountFromField);
            // RefundAgent can enter less then available
            if (isMediationDispute ||
                    totalAmountFromFields.compareTo(totalAvailable) > 0) {
                buyerPayoutAmountInputTextField.setText(formattedCounterPartAmount);
            } else {
                buyerAmount = buyerAmountFromField;
            }
        }

        disputeResult.setBuyerPayoutAmount(buyerAmount);
        disputeResult.setSellerPayoutAmount(sellerAmount);
        disputeResult.setWinner(buyerAmount.compareTo(sellerAmount) > 0 ?
                DisputeResult.Winner.BUYER :
                DisputeResult.Winner.SELLER);
    }

    private void addPayoutAmountTextFields() {
        buyerPayoutAmountInputTextField = new InputTextField();
        buyerPayoutAmountInputTextField.setLabelFloat(true);
        buyerPayoutAmountInputTextField.setEditable(false);
        buyerPayoutAmountInputTextField.setPromptText(Res.get(""disputeSummaryWindow.payoutAmount.buyer""));

        sellerPayoutAmountInputTextField = new InputTextField();
        sellerPayoutAmountInputTextField.setLabelFloat(true);
        sellerPayoutAmountInputTextField.setPromptText(Res.get(""disputeSummaryWindow.payoutAmount.seller""));
        sellerPayoutAmountInputTextField.setEditable(false);

        compensationOrPenalty = new InputTextField();
        compensationOrPenalty.setPromptText(""Comp|Penalty percent"");
        compensationOrPenalty.setLabelFloat(true);
        HBox hBoxPenalty = new HBox(compensationOrPenalty);
        HBox hBoxPayouts = new HBox(buyerPayoutAmountInputTextField, sellerPayoutAmountInputTextField);
        hBoxPayouts.setSpacing(15);

        VBox vBox = new VBox();
        vBox.setSpacing(25);
        vBox.getChildren().addAll(hBoxPenalty, hBoxPayouts);
        GridPane.setMargin(vBox, new Insets(80, 50, 50, 50));
        GridPane.setRowIndex(vBox, rowIndex);
        GridPane.setColumnIndex(vBox, 1);
        gridPane.getChildren().add(vBox);

        compensationOrPenaltyListener = (observable, oldValue, newValue) -> {
            applyUpdateFromUi(tradeAmountToggleGroup.selectedToggleProperty().get());
        };

        compensationOrPenalty.textProperty().addListener(compensationOrPenaltyListener);
    }

    private void addReasonControls() {
        reasonWasBugRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.BUG.name()));
        reasonWasUsabilityIssueRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.USABILITY.name()));
        reasonProtocolViolationRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.PROTOCOL_VIOLATION.name()));
        reasonNoReplyRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.NO_REPLY.name()));
        reasonWasScamRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.SCAM.name()));
        reasonWasBankRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.BANK_PROBLEMS.name()));
        reasonWasOtherRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.OTHER.name()));
        reasonWasOptionTradeRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.OPTION_TRADE.name()));
        reasonWasSellerNotRespondingRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.SELLER_NOT_RESPONDING.name()));
        reasonWasWrongSenderAccountRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.WRONG_SENDER_ACCOUNT.name()));
        reasonWasPeerWasLateRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.PEER_WAS_LATE.name()));
        reasonWasTradeAlreadySettledRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.TRADE_ALREADY_SETTLED.name()));

        HBox feeRadioButtonPane = new HBox();
        feeRadioButtonPane.setSpacing(20);
        // We don't show no reply and protocol violation as those should be covered by more specific ones. We still leave
        // the code to enable it if it turns out it is still requested by mediators.
        feeRadioButtonPane.getChildren().addAll(
                reasonWasTradeAlreadySettledRadioButton,
                reasonWasPeerWasLateRadioButton,
                reasonWasOptionTradeRadioButton,
                reasonWasSellerNotRespondingRadioButton,
                reasonWasWrongSenderAccountRadioButton,
                reasonWasBugRadioButton,
                reasonWasUsabilityIssueRadioButton,
                reasonWasBankRadioButton,
                reasonWasOtherRadioButton
        );

        VBox vBox = addTopLabelWithVBox(gridPane, ++rowIndex,
                Res.get(""disputeSummaryWindow.reason""),
                feeRadioButtonPane, 10).second;
        GridPane.setColumnSpan(vBox, 2);

        reasonToggleGroup = new ToggleGroup();
        reasonWasBugRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasUsabilityIssueRadioButton.setToggleGroup(reasonToggleGroup);
        reasonProtocolViolationRadioButton.setToggleGroup(reasonToggleGroup);
        reasonNoReplyRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasScamRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasOtherRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasBankRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasOptionTradeRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasSellerNotRespondingRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasWrongSenderAccountRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasPeerWasLateRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasTradeAlreadySettledRadioButton.setToggleGroup(reasonToggleGroup);

        reasonToggleSelectionListener = (observable, oldValue, newValue) -> {
            if (newValue == reasonWasBugRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.BUG);
            } else if (newValue == reasonWasUsabilityIssueRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.USABILITY);
            } else if (newValue == reasonProtocolViolationRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.PROTOCOL_VIOLATION);
            } else if (newValue == reasonNoReplyRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.NO_REPLY);
            } else if (newValue == reasonWasScamRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.SCAM);
            } else if (newValue == reasonWasBankRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.BANK_PROBLEMS);
            } else if (newValue == reasonWasOtherRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.OTHER);
            } else if (newValue == reasonWasOptionTradeRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.OPTION_TRADE);
            } else if (newValue == reasonWasSellerNotRespondingRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.SELLER_NOT_RESPONDING);
            } else if (newValue == reasonWasWrongSenderAccountRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.WRONG_SENDER_ACCOUNT);
            } else if (newValue == reasonWasTradeAlreadySettledRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.TRADE_ALREADY_SETTLED);
            } else if (newValue == reasonWasPeerWasLateRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.PEER_WAS_LATE);
            }
        };
        reasonToggleGroup.selectedToggleProperty().addListener(reasonToggleSelectionListener);
    }

    private void setReasonRadioButtonState() {
        if (disputeResult.getReason() != null) {
            switch (disputeResult.getReason()) {
                case BUG:
                    reasonToggleGroup.selectToggle(reasonWasBugRadioButton);
                    break;
                case USABILITY:
                    reasonToggleGroup.selectToggle(reasonWasUsabilityIssueRadioButton);
                    break;
                case PROTOCOL_VIOLATION:
                    reasonToggleGroup.selectToggle(reasonProtocolViolationRadioButton);
                    break;
                case NO_REPLY:
                    reasonToggleGroup.selectToggle(reasonNoReplyRadioButton);
                    break;
                case SCAM:
                    reasonToggleGroup.selectToggle(reasonWasScamRadioButton);
                    break;
                case BANK_PROBLEMS:
                    reasonToggleGroup.selectToggle(reasonWasBankRadioButton);
                    break;
                case OTHER:
                    reasonToggleGroup.selectToggle(reasonWasOtherRadioButton);
                    break;
                case OPTION_TRADE:
                    reasonToggleGroup.selectToggle(reasonWasOptionTradeRadioButton);
                    break;
                case SELLER_NOT_RESPONDING:
                    reasonToggleGroup.selectToggle(reasonWasSellerNotRespondingRadioButton);
                    break;
                case WRONG_SENDER_ACCOUNT:
                    reasonToggleGroup.selectToggle(reasonWasWrongSenderAccountRadioButton);
                    break;
                case PEER_WAS_LATE:
                    reasonToggleGroup.selectToggle(reasonWasPeerWasLateRadioButton);
                    break;
                case TRADE_ALREADY_SETTLED:
                    reasonToggleGroup.selectToggle(reasonWasTradeAlreadySettledRadioButton);
                    break;
            }
        }
    }

    private void addSummaryNotes() {
        summaryNotesTextArea = new BisqTextArea();
        summaryNotesTextArea.setPromptText(Res.get(""disputeSummaryWindow.addSummaryNotes""));
        summaryNotesTextArea.setWrapText(true);

        Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, ++rowIndex,
                Res.get(""disputeSummaryWindow.summaryNotes""), summaryNotesTextArea, 0);
        GridPane.setColumnSpan(topLabelWithVBox.second, 2);

        summaryNotesTextArea.setPrefHeight(160);
        summaryNotesTextArea.textProperty().bindBidirectional(disputeResult.summaryNotesProperty());
    }

    private void addButtons(Contract contract) {
        Tuple3<Button, Button, HBox> tuple = add2ButtonsWithBox(gridPane, ++rowIndex,
                Res.get(""disputeSummaryWindow.close.button""),
                Res.get(""shared.cancel""), 15, true);
        Button closeTicketButton = tuple.first;
        closeTicketButton.disableProperty().bind(Bindings.createBooleanBinding(
                () -> tradeAmountToggleGroup.getSelectedToggle() == null
                        || summaryNotesTextArea.getText() == null
                        || summaryNotesTextArea.getText().length() == 0
                        || !isPayoutAmountValid(),
                tradeAmountToggleGroup.selectedToggleProperty(),
                summaryNotesTextArea.textProperty(),
                buyerPayoutAmountInputTextField.textProperty(),
                sellerPayoutAmountInputTextField.textProperty()));

        Button cancelButton = tuple.second;

        closeTicketButton.setOnAction(e -> {
            if (dispute.getDepositTxSerialized() == null) {
                log.warn(""dispute.getDepositTxSerialized is null"");
                return;
            }

            if (dispute.getSupportType() == SupportType.REFUND &&
                    peersDisputeOptional.isPresent() &&
                    !peersDisputeOptional.get().isClosed()) {
                showPayoutTxConfirmation(contract,
                        disputeResult,
                        () -> doCloseIfValid(closeTicketButton));
            } else {
                doCloseIfValid(closeTicketButton);
            }
        });

        cancelButton.setOnAction(e -> {
            dispute.setDisputeResult(disputeResult);
            checkNotNull(getDisputeManager(dispute)).requestPersistence();
            hide();
        });
    }

    private void showPayoutTxConfirmation(Contract contract, DisputeResult disputeResult, ResultHandler resultHandler) {
        if (dispute.isPayoutDone()) {
            new Popup().headLine(Res.get(""disputeSummaryWindow.close.alreadyPaid.headline""))
                    .confirmation(Res.get(""disputeSummaryWindow.close.alreadyPaid.text""))
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        }

        Coin buyerPayoutAmount = disputeResult.getBuyerPayoutAmount();
        String buyerPayoutAddressString = contract.getBuyerPayoutAddressString();
        Coin sellerPayoutAmount = disputeResult.getSellerPayoutAmount();
        String sellerPayoutAddressString = contract.getSellerPayoutAddressString();
        Coin outputAmount = buyerPayoutAmount.add(sellerPayoutAmount);
        Tuple2<Coin, Integer> feeTuple = txFeeEstimationService.getEstimatedFeeAndTxVsize(outputAmount, btcWalletService);
        Coin fee = feeTuple.first;
        Integer txVsize = feeTuple.second;
        double feePerVbyte = CoinUtil.getFeePerVbyte(fee, txVsize);
        double vkb = txVsize / 1000d;
        Coin inputAmount = outputAmount.add(fee);
        String buyerDetails = """";
        if (buyerPayoutAmount.isPositive()) {
            buyerDetails = Res.get(""disputeSummaryWindow.close.txDetails.buyer"",
                    formatter.formatCoinWithCode(buyerPayoutAmount),
                    buyerPayoutAddressString);
        }
        String sellerDetails = """";
        if (sellerPayoutAmount.isPositive()) {
            sellerDetails = Res.get(""disputeSummaryWindow.close.txDetails.seller"",
                    formatter.formatCoinWithCode(sellerPayoutAmount),
                    sellerPayoutAddressString);
        }
        if (outputAmount.isPositive()) {
            new Popup().width(900)
                    .headLine(Res.get(""disputeSummaryWindow.close.txDetails.headline""))
                    .confirmation(Res.get(""disputeSummaryWindow.close.txDetails"",
                            formatter.formatCoinWithCode(inputAmount),
                            buyerDetails,
                            sellerDetails,
                            formatter.formatCoinWithCode(fee),
                            feePerVbyte,
                            vkb))
                    .actionButtonText(Res.get(""shared.yes""))
                    .onAction(() -> {
                        doPayout(buyerPayoutAmount,
                                sellerPayoutAmount,
                                fee,
                                buyerPayoutAddressString,
                                sellerPayoutAddressString,
                                resultHandler);
                    })
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        } else {
            // No payout will be made
            new Popup().headLine(Res.get(""disputeSummaryWindow.close.noPayout.headline""))
                    .confirmation(Res.get(""disputeSummaryWindow.close.noPayout.text""))
                    .actionButtonText(Res.get(""shared.yes""))
                    .onAction(resultHandler::handleResult)
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        }
    }

    private void doPayout(Coin buyerPayoutAmount,
                          Coin sellerPayoutAmount,
                          Coin fee,
                          String buyerPayoutAddressString,
                          String sellerPayoutAddressString,
                          ResultHandler resultHandler) {
        if (dispute.isPayoutDone()) {
            log.error(""Payout already processed, returning to avoid double payout for dispute of trade {}"",
                    dispute.getTradeId());
            return;
        }
        dispute.setPayoutDone(true);
        try {
            Transaction tx = btcWalletService.createRefundPayoutTx(buyerPayoutAmount,
                    sellerPayoutAmount,
                    fee,
                    buyerPayoutAddressString,
                    sellerPayoutAddressString);
            tradeWalletService.broadcastTx(tx, new TxBroadcaster.Callback() {
                @Override
                public void onSuccess(Transaction transaction) {
                    resultHandler.handleResult();
                }

                @Override
                public void onFailure(TxBroadcastException exception) {
                    log.error(""TxBroadcastException at doPayout"", exception);
                    new Popup().error(exception.toString()).show();
                }
            });
        } catch (InsufficientMoneyException | WalletException | TransactionVerificationException e) {
            log.error(""Exception at doPayout"", e);
            new Popup().error(e.toString()).show();
        }
    }

    private void doCloseIfValid(Button closeTicketButton) {
        var disputeManager = checkNotNull(getDisputeManager(dispute));
        try {
            TradeDataValidation.validateDonationAddress(dispute.getDonationAddressOfDelayedPayoutTx(), daoFacade);
            TradeDataValidation.testIfDisputeTriesReplay(dispute, disputeManager.getDisputesAsObservableList());
            doClose(closeTicketButton);
        } catch (TradeDataValidation.AddressException exception) {
            String addressAsString = dispute.getDonationAddressOfDelayedPayoutTx();
            String tradeId = dispute.getTradeId();

            // For mediators we do not enforce that the case cannot be closed to stay flexible,
            // but for refund agents we do.
            if (disputeManager instanceof MediationManager) {
                new Popup().width(900)
                        .warning(Res.get(""support.warning.disputesWithInvalidDonationAddress"",
                                addressAsString,
                                daoFacade.getAllDonationAddresses(),
                                tradeId,
                                Res.get(""support.warning.disputesWithInvalidDonationAddress.mediator"")))
                        .onAction(() -> {
                            doClose(closeTicketButton);
                        })
                        .actionButtonText(Res.get(""shared.yes""))
                        .closeButtonText(Res.get(""shared.no""))
                        .show();
            } else {
                new Popup().width(900)
                        .warning(Res.get(""support.warning.disputesWithInvalidDonationAddress"",
                                addressAsString,
                                daoFacade.getAllDonationAddresses(),
                                tradeId,
                                Res.get(""support.warning.disputesWithInvalidDonationAddress.refundAgent"")))
                        .show();
            }
        } catch (TradeDataValidation.DisputeReplayException exception) {
            if (disputeManager instanceof MediationManager) {
                log.error(""Closing of ticket failed as mediator"", exception);
                new Popup().width(900)
                        .warning(exception.getMessage())
                        .onAction(() -> {
                            doClose(closeTicketButton);
                        })
                        .actionButtonText(Res.get(""shared.yes""))
                        .closeButtonText(Res.get(""shared.no""))
                        .show();
            } else {
                log.error(""Closing of ticket failed"", exception);
                new Popup().width(900)
                        .warning(exception.getMessage())
                        .show();
            }
        }
    }

    private void doClose(Button closeTicketButton) {
        DisputeManager<? extends DisputeList<Dispute>> disputeManager = getDisputeManager(dispute);
        if (disputeManager == null) {
            return;
        }

        boolean isRefundAgent = disputeManager instanceof RefundManager;
        disputeResult.setLoserPublisher(false); // field no longer used per pazza / leo816
        disputeResult.setCloseDate(new Date());
        dispute.setDisputeResult(disputeResult);
        dispute.setIsClosed();
        DisputeResult.Reason reason = disputeResult.getReason();

        summaryNotesTextArea.textProperty().unbindBidirectional(disputeResult.summaryNotesProperty());
        String role = isRefundAgent ? Res.get(""shared.refundAgent"") : Res.get(""shared.mediator"");
        String agentNodeAddress = checkNotNull(disputeManager.getAgentNodeAddress(dispute)).getFullAddress();
        Contract contract = dispute.getContract();
        String currencyCode = contract.getOfferPayload().getCurrencyCode();
        String amount = formatter.formatCoinWithCode(contract.getTradeAmount());
        String textToSign = Res.get(""disputeSummaryWindow.close.msg"",
                DisplayUtils.formatDateTime(disputeResult.getCloseDate()),
                role,
                agentNodeAddress,
                dispute.getShortTradeId(),
                currencyCode,
                amount,
                formatter.formatCoinWithCode(disputeResult.getBuyerPayoutAmount()),
                formatter.formatCoinWithCode(disputeResult.getSellerPayoutAmount()),
                Res.get(""disputeSummaryWindow.reason."" + reason.name()),
                disputeResult.summaryNotesProperty().get()
        );

        if (reason == DisputeResult.Reason.OPTION_TRADE &&
                dispute.getChatMessages().size() > 1 &&
                dispute.getChatMessages().get(1).isSystemMessage()) {
            textToSign += ""\n"" + dispute.getChatMessages().get(1).getMessage() + ""\n"";
        }

        String summaryText = DisputeSummaryVerification.signAndApply(disputeManager, disputeResult, textToSign);

        if (isRefundAgent) {
            summaryText += Res.get(""disputeSummaryWindow.close.nextStepsForRefundAgentArbitration"");
        } else {
            summaryText += Res.get(""disputeSummaryWindow.close.nextStepsForMediation"");
        }

        disputeManager.sendDisputeResultMessage(disputeResult, dispute, summaryText);

        if (peersDisputeOptional.isPresent() && !peersDisputeOptional.get().isClosed() && !DevEnv.isDevMode()) {
            UserThread.runAfter(() -> new Popup()
                            .attention(Res.get(""disputeSummaryWindow.close.closePeer""))
                            .show(),
                    200, TimeUnit.MILLISECONDS);
        }

        finalizeDisputeHandlerOptional.ifPresent(Runnable::run);

        disputeManager.requestPersistence();

        closeTicketButton.disableProperty().unbind();

        hide();
    }

    private DisputeManager<? extends DisputeList<Dispute>> getDisputeManager(Dispute dispute) {
        if (dispute.getSupportType() != null) {
            switch (dispute.getSupportType()) {
                case ARBITRATION:
                    return null;
                case MEDIATION:
                    return mediationManager;
                case TRADE:
                    break;
                case REFUND:
                    return refundManager;
            }
        }
        return null;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Controller
    ///////////////////////////////////////////////////////////////////////////////////////////

    private boolean isMediationDispute() {
        return getDisputeManager(dispute) instanceof MediationManager;
    }

    // called when a radio button or amount box ui control is changed
    private void applyUpdateFromUi(Toggle selectedTradeAmountToggle) {
        if (updatingUi || selectedTradeAmountToggle == null) {
            return;
        }
        applyUiControlsToDisputeResult(selectedTradeAmountToggle);
        applyDisputeResultToUiControls();
    }

    private void applyUiControlsToDisputeResult(Toggle selectedTradeAmountToggle) {
        Contract contract = dispute.getContract();
        Offer offer = new Offer(contract.getOfferPayload());
        Coin buyerSecurityDeposit = offer.getBuyerSecurityDeposit();
        Coin sellerSecurityDeposit = offer.getSellerSecurityDeposit();
        Coin tradeAmount = contract.getTradeAmount();
        Coin totalPot = tradeAmount.add(buyerSecurityDeposit).add(sellerSecurityDeposit);
        // At mediation we require a min. payout to the losing party to keep incentive for the trader to accept the
        // mediated payout. For Refund agent cases we do not have that restriction.
        Coin minRefundAtDispute = isMediationDispute() ? Restrictions.getMinRefundAtMediatedDispute() : Coin.ZERO;

        Coin penalizedPortionOfTradeAmount = Coin.ZERO;
        try {
            disputeResult.setPayoutAdjustmentPercent(compensationOrPenalty.getText().replaceAll(""[^0-9]"", """"));
            double percentPenalty = ParsingUtils.parsePercentStringToDouble(disputeResult.getPayoutAdjustmentPercent());
            penalizedPortionOfTradeAmount = Coin.valueOf((long) (contract.getTradeAmount().getValue() * percentPenalty));
        } catch (NumberFormatException | NullPointerException e) {
            log.warn(e.toString());
        }

        if (selectedTradeAmountToggle == buyerGetsTradeAmountRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT);
            disputeResult.setBuyerPayoutAmount(tradeAmount.add(buyerSecurityDeposit));
            disputeResult.setSellerPayoutAmount(sellerSecurityDeposit);
            disputeResult.setPayoutAdjustmentPercent("""");
        } else if (selectedTradeAmountToggle == sellerGetsTradeAmountRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT);
            disputeResult.setBuyerPayoutAmount(buyerSecurityDeposit);
            disputeResult.setSellerPayoutAmount(tradeAmount.add(sellerSecurityDeposit));
            disputeResult.setPayoutAdjustmentPercent("""");
        } else if (selectedTradeAmountToggle == buyerGetsTradeAmountMinusPenaltyRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_MINUS_PENALTY);
            Coin buyerPayout = tradeAmount.add(offer.getBuyerSecurityDeposit()).subtract(penalizedPortionOfTradeAmount);
            disputeResult.setBuyerPayoutAmount(buyerPayout);
            disputeResult.setSellerPayoutAmount(totalPot.subtract(buyerPayout));
        } else if (selectedTradeAmountToggle == sellerGetsTradeAmountMinusPenaltyRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_MINUS_PENALTY);
            Coin sellerPayout = tradeAmount.add(offer.getBuyerSecurityDeposit()).subtract(penalizedPortionOfTradeAmount);
            disputeResult.setSellerPayoutAmount(sellerPayout);
            disputeResult.setBuyerPayoutAmount(totalPot.subtract(sellerPayout));
        } else if (selectedTradeAmountToggle == buyerGetsCompensationRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION);
            Coin buyerPayout = tradeAmount.add(offer.getBuyerSecurityDeposit()).add(penalizedPortionOfTradeAmount);
            disputeResult.setBuyerPayoutAmount(buyerPayout);
            disputeResult.setSellerPayoutAmount(totalPot.subtract(buyerPayout));
        } else if (selectedTradeAmountToggle == sellerGetsCompensationRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION);
            Coin sellerPayout = tradeAmount.add(offer.getSellerSecurityDeposit()).add(penalizedPortionOfTradeAmount);
            disputeResult.setSellerPayoutAmount(sellerPayout);
            disputeResult.setBuyerPayoutAmount(totalPot.subtract(sellerPayout));
        } else {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.CUSTOM_PAYOUT);
            disputeResult.setPayoutAdjustmentPercent("""");
        }

        // enforce rule that we cannot pay out less than minRefundAtDispute
        if (disputeResult.getBuyerPayoutAmount().isLessThan(minRefundAtDispute)) {
            disputeResult.setBuyerPayoutAmount(minRefundAtDispute);
            disputeResult.setSellerPayoutAmount(totalPot.subtract(minRefundAtDispute));
        } else if (disputeResult.getSellerPayoutAmount().isLessThan(minRefundAtDispute)) {
            disputeResult.setSellerPayoutAmount(minRefundAtDispute);
            disputeResult.setBuyerPayoutAmount(totalPot.subtract(minRefundAtDispute));
        }

        // winner is the one who receives most from the multisig, or if equal, the buyer.
        // (winner is used to decide who publishes the tx)
        disputeResult.setWinner(disputeResult.getSellerPayoutAmount().isLessThan(disputeResult.getBuyerPayoutAmount()) ?
                DisputeResult.Winner.BUYER : DisputeResult.Winner.BUYER);
    }

    private void applyDisputeResultToUiControls() {
        updatingUi = true;
        buyerPayoutAmountInputTextField.setText(formatter.formatCoin(disputeResult.getBuyerPayoutAmount()));
        sellerPayoutAmountInputTextField.setText(formatter.formatCoin(disputeResult.getSellerPayoutAmount()));
        compensationOrPenalty.setText(disputeResult.getPayoutAdjustmentPercent());
        if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT) {
            buyerGetsTradeAmountRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT) {
            sellerGetsTradeAmountRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION) {
            buyerGetsCompensationRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION) {
            sellerGetsCompensationRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_MINUS_PENALTY) {
            buyerGetsTradeAmountMinusPenaltyRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_MINUS_PENALTY) {
            sellerGetsTradeAmountMinusPenaltyRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.CUSTOM_PAYOUT) {
            customRadioButton.setSelected(true);
        } else {
            // the option was not set, this will apply to older records before PayoutSuggestion was persisted
            // what it used to do was infer the option based on the payout amounts
            Contract contract = dispute.getContract();
            Offer offer = new Offer(contract.getOfferPayload());
            Coin buyerSecurityDeposit = offer.getBuyerSecurityDeposit();
            Coin sellerSecurityDeposit = offer.getSellerSecurityDeposit();
            Coin tradeAmount = contract.getTradeAmount();
            Coin totalPot = tradeAmount.add(buyerSecurityDeposit).add(sellerSecurityDeposit);
            Coin minRefundAtDispute = isMediationDispute() ? Restrictions.getMinRefundAtMediatedDispute() : Coin.ZERO;
            Coin maxPayoutAmount = totalPot.subtract(minRefundAtDispute);
            if (disputeResult.getBuyerPayoutAmount().equals(tradeAmount.add(buyerSecurityDeposit)) &&
                    disputeResult.getSellerPayoutAmount().equals(sellerSecurityDeposit)) {
                buyerGetsTradeAmountRadioButton.setSelected(true);
            } else if (disputeResult.getBuyerPayoutAmount().equals(maxPayoutAmount) &&
                    disputeResult.getSellerPayoutAmount().equals(minRefundAtDispute)) {
                buyerGetsCompensationRadioButton.setSelected(true);
            } else if (disputeResult.getSellerPayoutAmount().equals(tradeAmount.add(sellerSecurityDeposit))
                    && disputeResult.getBuyerPayoutAmount().equals(buyerSecurityDeposit)) {
                sellerGetsTradeAmountRadioButton.setSelected(true);
            } else if (disputeResult.getSellerPayoutAmount().equals(maxPayoutAmount)
                    && disputeResult.getBuyerPayoutAmount().equals(minRefundAtDispute)) {
                sellerGetsCompensationRadioButton.setSelected(true);
            } else {
                customRadioButton.setSelected(true);
            }
        }
        updatingUi = false;
    }

    private void checkDelayedPayoutTransaction() {
        if (dispute.getDelayedPayoutTxId() == null)
            return;
        mempoolService.checkTxIsConfirmed(dispute.getDelayedPayoutTxId(), (validator -> {
            long confirms = validator.parseJsonValidateTx();
            log.info(""Mempool check confirmation status of DelayedPayoutTxId returned: [{}]"", confirms);
            displayPayoutStatus(confirms);
        }));
    }

    private void displayPayoutStatus(long nConfirmStatus) {
        if (delayedPayoutTxStatus != null) {
            String status = Res.get(""confidence.unknown"");
            if (nConfirmStatus == 0)
                status = Res.get(""confidence.seen"", 1);
            else if (nConfirmStatus > 0)
                status = Res.get(""confidence.confirmed"", nConfirmStatus);
            delayedPayoutTxStatus.setText(status);
        }
    }
}",1,"[64, 2000, 439, 334, 2001, 378, 2002, 60, 2001, 62, 123, 437, 381, 2003, 2004, 59, 437, 381, 2005, 2006, 59, 437, 381, 2007, 2008, 59, 437, 381, 2009, 2010, 59, 437, 381, 2011, 2012, 59, 437, 381, 2013, 2014, 59, 437, 381, 2015, 2016, 59, 437, 381, 2017, 2018, 59, 437, 2019, 2020, 59, 437, 2021, 60, 2022, 62, 2023, 61, 2021, 46, 362, 40, 41, 59, 437, 2024, 2025, 44, 2026, 59, 437, 2027, 2028, 59, 437, 2029, 2030, 44, 2031, 44, 2032, 44, 2033, 44, 2034, 44, 2035, 44, 2036, 59, 437, 2029, 2037, 44, 2038, 44, 2039, 44, 2040, 44, 2041, 44, 2042, 44, 2043, 44, 2044, 44, 2045, 44, 2046, 44, 2047, 44, 2048, 59, 437, 2021, 60, 2019, 62, 2049, 59, 437, 2050, 2051, 59, 437, 2052, 2053, 59, 437, 2054, 2055, 59, 437, 2056, 60, 2057, 62, 2058, 44, 2059, 44, 2060, 59, 437, 2056, 60, 2061, 62, 2062, 59, 437, 2063, 2064, 44, 2065, 44, 2066, 59, 437, 2056, 60, 2057, 62, 2067, 44, 2068, 59, 437, 2056, 60, 2061, 62, 2069, 59, 437, 2056, 60, 2050, 62, 2070, 59, 437, 324, 2071, 61, 380, 59, 64, 2072, 439, 2001, 40, 64, 2073, 40, 2074, 46, 2075, 41, 2003, 2004, 44, 2005, 2006, 44, 2007, 2008, 44, 2009, 2010, 44, 2011, 2012, 44, 2013, 2014, 44, 2015, 2016, 44, 2017, 2018, 41, 123, 467, 46, 2004, 61, 2004, 59, 467, 46, 2006, 61, 2006, 59, 467, 46, 2008, 61, 2008, 59, 467, 46, 2010, 61, 2010, 59, 467, 46, 2012, 61, 2012, 59, 467, 46, 2014, 61, 2014, 59, 467, 46, 2016, 61, 2016, 59, 467, 46, 2018, 61, 2018, 59, 2076, 61, 2077, 46, 2078, 59, 125, 439, 492, 2079, 40, 2019, 2020, 41, 123, 467, 46, 2020, 61, 2020, 59, 2080, 61, 45, 1501, 59, 2081, 61, 1505, 59, 2082, 40, 41, 59, 2083, 40, 41, 59, 2084, 40, 41, 59, 2085, 40, 41, 59, 392, 40, 2086, 46, 2087, 40, 41, 41, 123, 2088, 46, 2089, 40, 40, 41, 45, 62, 123, 2055, 46, 2090, 40, 41, 59, 125, 41, 59, 125, 125, 64, 2091, 438, 492, 2092, 40, 41, 123, 392, 40, 2026, 631, 424, 41, 2026, 46, 2093, 40, 41, 46, 2094, 40, 2062, 41, 59, 392, 40, 2036, 631, 424, 41, 2036, 46, 2095, 40, 41, 46, 2094, 40, 2058, 41, 59, 392, 40, 2030, 631, 424, 41, 2030, 46, 2095, 40, 41, 46, 2094, 40, 2059, 41, 59, 392, 40, 2031, 631, 424, 41, 2031, 46, 2095, 40, 41, 46, 2094, 40, 2060, 41, 59, 392, 40, 2025, 631, 424, 41, 2025, 46, 2093, 40, 41, 46, 2094, 40, 2069, 41, 59, 2096, 40, 41, 59, 125, 64, 2091, 438, 492, 2097, 40, 2098, 2099, 41, 123, 392, 40, 33, 2100, 41, 123, 2099, 46, 2101, 40, 2102, 45, 62, 123, 392, 40, 2102, 46, 2103, 40, 41, 614, 2104, 46, 2105, 41, 123, 2102, 46, 2106, 40, 41, 59, 2107, 40, 41, 59, 125, 125, 41, 59, 125, 125, 64, 2091, 438, 492, 2108, 40, 41, 123, 463, 46, 2108, 40, 41, 59, 2109, 46, 2110, 40, 418, 2111, 40, 1503, 44, 1503, 44, 1500, 44, 1503, 41, 41, 59, 2109, 46, 2112, 40, 41, 46, 2113, 40, 41, 59, 2109, 46, 2114, 40, 41, 46, 2115, 40, 1500, 41, 46, 2116, 40, 2117, 46, 2118, 41, 59, 2109, 46, 2119, 40, 2120, 41, 59, 125, 437, 492, 2121, 40, 41, 123, 2122, 2123, 61, 2020, 46, 2124, 40, 41, 59, 392, 40, 2020, 46, 2125, 40, 41, 46, 2126, 40, 41, 614, 424, 41, 2028, 61, 418, 2027, 40, 2020, 46, 2127, 40, 41, 44, 2020, 46, 2128, 40, 41, 41, 59, 360, 2028, 61, 2020, 46, 2125, 40, 41, 46, 2126, 40, 41, 59, 2049, 61, 2129, 40, 2130, 40, 2020, 41, 41, 46, 2131, 40, 41, 46, 2132, 40, 41, 46, 2133, 40, 2134, 45, 62, 2020, 46, 2127, 40, 41, 46, 2135, 40, 2134, 46, 2127, 40, 41, 41, 605, 2020, 46, 2128, 40, 41, 631, 2134, 46, 2128, 40, 41, 41, 46, 2136, 40, 41, 59, 2137, 40, 41, 59, 2138, 40, 41, 59, 2139, 40, 41, 59, 2140, 40, 41, 59, 2141, 40, 41, 59, 324, 2142, 61, 2049, 46, 2143, 40, 41, 605, 2049, 46, 2126, 40, 41, 46, 2144, 40, 41, 59, 392, 40, 2142, 41, 123, 2027, 2145, 61, 2049, 46, 2126, 40, 41, 46, 2125, 40, 41, 46, 2126, 40, 41, 59, 2028, 46, 2146, 40, 2145, 46, 2147, 40, 41, 41, 59, 2028, 46, 2148, 40, 2145, 46, 2149, 40, 41, 41, 59, 2028, 46, 2150, 40, 2145, 46, 2151, 40, 41, 41, 59, 2028, 46, 2152, 40, 2145, 46, 2153, 40, 41, 41, 59, 2028, 46, 2154, 40, 2145, 46, 2155, 40, 41, 41, 59, 2028, 46, 2156, 40, 2145, 46, 2157, 40, 41, 41, 59, 2028, 46, 2158, 40, 2145, 46, 2159, 40, 41, 46, 2126, 40, 41, 41, 59, 2030, 46, 2160, 40, 473, 41, 59, 2032, 46, 2160, 40, 473, 41, 59, 2034, 46, 2160, 40, 473, 41, 59, 2031, 46, 2160, 40, 473, 41, 59, 2033, 46, 2160, 40, 473, 41, 59, 2035, 46, 2160, 40, 473, 41, 59, 2036, 46, 2160, 40, 473, 41, 59, 2064, 46, 2160, 40, 473, 41, 59, 2065, 46, 2160, 40, 473, 41, 59, 2066, 46, 2160, 40, 473, 41, 59, 2064, 46, 2161, 40, 380, 41, 59, 2065, 46, 2161, 40, 380, 41, 59, 2066, 46, 2161, 40, 380, 41, 59, 2037, 46, 2160, 40, 473, 41, 59, 2038, 46, 2160, 40, 473, 41, 59, 2039, 46, 2160, 40, 473, 41, 59, 2040, 46, 2160, 40, 473, 41, 59, 2041, 46, 2160, 40, 473, 41, 59, 2042, 46, 2160, 40, 473, 41, 59, 2043, 46, 2160, 40, 473, 41, 59, 2044, 46, 2160, 40, 473, 41, 59, 2045, 46, 2160, 40, 473, 41, 59, 2046, 46, 2160, 40, 473, 41, 59, 2047, 46, 2160, 40, 473, 41, 59, 2048, 46, 2160, 40, 473, 41, 59, 2141, 40, 41, 59, 125, 2162, 40, 41, 59, 2163, 40, 41, 59, 2164, 40, 2123, 41, 59, 125, 437, 492, 2165, 40, 41, 123, 2166, 2167, 61, 2020, 46, 2168, 40, 41, 59, 2169, 40, 2170, 44, 637, 2171, 44, 1503, 44, 2172, 46, 2173, 40, 41, 41, 46, 2174, 40, 41, 46, 2175, 40, 41, 59, 2176, 40, 2170, 44, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2020, 46, 2177, 40, 41, 44, 2178, 46, 2179, 41, 59, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2180, 46, 2181, 40, 2020, 46, 2182, 40, 41, 41, 41, 59, 2051, 61, 2020, 46, 2183, 40, 41, 59, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2051, 41, 59, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2004, 46, 2184, 40, 2167, 46, 2185, 40, 41, 41, 41, 59, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2074, 46, 2186, 40, 2167, 46, 2187, 40, 41, 41, 41, 59, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2188, 46, 2189, 40, 2167, 46, 2190, 40, 41, 41, 41, 59, 2050, 2191, 61, 2172, 46, 2192, 40, 41, 43, 43, 2004, 46, 2184, 40, 2167, 46, 2193, 40, 41, 46, 2194, 40, 41, 41, 43, 43, 2172, 46, 2192, 40, 41, 43, 43, 2004, 46, 2184, 40, 2167, 46, 2193, 40, 41, 46, 2195, 40, 41, 41, 59, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2191, 41, 59, 324, 2196, 61, 2197, 40, 2020, 41, 402, 2005, 59, 392, 40, 2196, 41, 123, 392, 40, 2020, 46, 2198, 40, 41, 46, 2199, 40, 41, 62, 1500, 41, 123, 2050, 2200, 61, 2180, 46, 2181, 40, 2020, 46, 2198, 40, 41, 41, 59, 2052, 2201, 61, 2202, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2200, 41, 46, 2203, 59, 392, 40, 2020, 46, 2198, 40, 41, 46, 2204, 40, 41, 46, 2205, 40, 2206, 46, 2207, 40, 41, 41, 41, 123, 2201, 46, 2174, 40, 41, 46, 2175, 40, 41, 59, 125, 125, 392, 40, 2020, 46, 2208, 40, 41, 631, 424, 605, 2020, 46, 2208, 40, 41, 46, 2209, 40, 41, 62, 1500, 41, 123, 2050, 2210, 61, 59, 385, 40, 2211, 46, 2212, 60, 2050, 44, 2050, 62, 2213, 58, 2020, 46, 2208, 40, 41, 46, 2214, 40, 41, 41, 123, 2210, 636, 43, 2213, 46, 2215, 40, 41, 43, 43, 2213, 46, 2216, 40, 41, 43, 59, 125, 2176, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 2210, 41, 59, 125, 125, 360, 123, 2053, 61, 2217, 40, 2170, 44, 637, 2171, 44, 2172, 46, 2173, 40, 41, 44, 41, 46, 2218, 59, 125, 125, 437, 492, 2219, 40, 41, 123, 2030, 61, 418, 2220, 40, 2221, 46, 2222, 40, 44, 2221, 46, 2222, 40, 41, 41, 41, 59, 2032, 61, 418, 2220, 40, 2221, 46, 2222, 40, 44, 2221, 46, 2222, 40, 41, 41, 41, 59, 2034, 61, 418, 2220, 40, 2221, 46, 2222, 40, 44, 2221, 46, 2222, 40, 41, 41, 41, 59, 2031, 61, 418, 2220, 40, 2221, 46, 2222, 40, 44, 2221, 46, 2222, 40, 41, 41, 41, 59, 2033, 61, 418, 2220, 40, 2221, 46, 2222, 40, 44, 2221, 46, 2222, 40, 41, 41, 41, 59, 2035, 61, 418, 2220, 40, 2221, 46, 2222, 40, 44, 2221, 46, 2222, 40, 41, 41, 41, 59, 2036, 61, 418, 2220, 40, 2221, 46, 2222, 40, 41, 41, 59, 2223, 2224, 61, 418, 2223, 40, 41, 59, 2224, 46, 2225, 40, 1502, 41, 59, 2224, 46, 2226, 40, 41, 46, 2227, 40, 2030, 44, 2032, 44, 2034, 44, 2031, 44, 2033, 44, 2035, 44, 2036, 41, 59, 2228, 40, 2229, 44, 637, 2230, 44, 2221, 46, 2222, 40, 41, 44, 2224, 44, 1500, 41, 59, 2025, 61, 418, 2024, 40, 41, 59, 2030, 46, 2231, 40, 2025, 41, 59, 2032, 46, 2231, 40, 2025, 41, 59, 2034, 46, 2231, 40, 2025, 41, 59, 2031, 46, 2231, 40, 2025, 41, 59, 2033, 46, 2231, 40, 2025, 41, 59, 2035, 46, 2231, 40, 2025, 41, 59, 2036, 46, 2231, 40, 2025, 41, 59, 2069, 61, 40, 2232, 44, 2233, 44, 2234, 41, 45, 62, 2235, 40, 2234, 41, 59, 2025, 46, 2236, 40, 41, 46, 2237, 40, 2069, 41, 59, 2067, 61, 40, 2232, 44, 2233, 44, 2234, 41, 45, 62, 2238, 40, 2064, 44, 2233, 44, 2234, 41, 59, 2068, 61, 40, 2232, 44, 2233, 44, 2234, 41, 45, 62, 2238, 40, 2065, 44, 2233, 44, 2234, 41, 59, 2059, 61, 40, 2232, 44, 2233, 44, 2234, 41, 45, 62, 123, 2066, 46, 2239, 40, 33, 2234, 41, 59, 125, 59, 2030, 46, 2240, 40, 41, 46, 2237, 40, 2059, 41, 59, 2060, 61, 40, 2232, 44, 2233, 44, 2234, 41, 45, 62, 123, 2066, 46, 2241, 40, 33, 2234, 41, 59, 125, 59, 2031, 46, 2240, 40, 41, 46, 2237, 40, 2060, 41, 59, 2058, 61, 40, 2232, 44, 2233, 44, 2234, 41, 45, 62, 123, 2064, 46, 2242, 40, 2234, 41, 59, 2065, 46, 2242, 40, 2234, 41, 59, 2066, 46, 2242, 40, 33, 2234, 41, 59, 392, 40, 2234, 41, 123, 2064, 46, 2243, 40, 41, 46, 2237, 40, 2067, 41, 59, 2065, 46, 2243, 40, 41, 46, 2237, 40, 2068, 41, 59, 125, 360, 123, 2244, 40, 41, 59, 125, 125, 59, 2036, 46, 2240, 40, 41, 46, 2237, 40, 2058, 41, 59, 125, 437, 492, 2245, 40, 41, 123, 392, 40, 2064, 631, 424, 605, 2067, 631, 424, 41, 2064, 46, 2246, 40, 41, 46, 2247, 40, 2067, 41, 59, 392, 40, 2065, 631, 424, 605, 2068, 631, 424, 41, 2065, 46, 2246, 40, 41, 46, 2247, 40, 2068, 41, 59, 125, 437, 324, 2248, 40, 41, 123, 2249, 2250, 61, 2251, 46, 2252, 40, 2064, 46, 2253, 40, 41, 44, 2004, 41, 59, 2249, 2254, 61, 2251, 46, 2252, 40, 2065, 46, 2253, 40, 41, 44, 2004, 41, 59, 2255, 2256, 61, 2020, 46, 2257, 40, 41, 59, 2249, 2258, 61, 2256, 46, 2259, 40, 41, 59, 2260, 2261, 61, 418, 2260, 40, 2256, 46, 2262, 40, 41, 41, 59, 2249, 2263, 61, 2258, 46, 2264, 40, 2261, 46, 2265, 40, 41, 41, 46, 2264, 40, 2261, 46, 2266, 40, 41, 41, 59, 2249, 2267, 61, 2250, 46, 2264, 40, 2254, 41, 59, 324, 2268, 61, 2269, 40, 2020, 41, 402, 2007, 59, 392, 40, 2268, 41, 123, 450, 2267, 46, 2270, 40, 2263, 41, 620, 1500, 59, 125, 360, 123, 392, 40, 33, 2267, 46, 2271, 40, 41, 41, 123, 450, 380, 59, 125, 450, 2267, 46, 2272, 40, 2263, 41, 614, 1500, 59, 125, 125, 437, 492, 2273, 40, 2063, 2274, 44, 324, 2275, 44, 324, 2276, 41, 123, 392, 40, 33, 2275, 606, 2276, 41, 123, 450, 59, 125, 2277, 2278, 61, 2020, 46, 2279, 40, 41, 59, 324, 2280, 61, 2281, 40, 2020, 41, 402, 2005, 59, 2282, 2283, 61, 2280, 63, 2284, 46, 2285, 40, 41, 58, 2282, 46, 2286, 59, 2287, 2288, 61, 418, 2287, 40, 2278, 46, 2289, 40, 41, 41, 59, 2282, 2290, 61, 2278, 46, 2291, 40, 41, 46, 2292, 40, 2288, 46, 2293, 40, 41, 41, 46, 2292, 40, 2288, 46, 2294, 40, 41, 41, 59, 2282, 2295, 61, 2290, 46, 2296, 40, 2283, 41, 59, 2282, 2297, 61, 2298, 46, 2299, 40, 2274, 46, 2300, 40, 41, 44, 2004, 41, 59, 392, 40, 2297, 46, 2301, 40, 2283, 41, 60, 1500, 41, 123, 2297, 61, 2283, 59, 2274, 46, 2302, 40, 2004, 46, 2303, 40, 2297, 41, 41, 59, 125, 392, 40, 2297, 46, 2304, 40, 41, 605, 33, 2284, 46, 2305, 40, 2297, 41, 41, 123, 2297, 61, 2284, 46, 2306, 40, 41, 59, 2274, 46, 2307, 40, 2004, 46, 2308, 40, 2297, 41, 41, 59, 125, 392, 40, 2297, 46, 2301, 40, 2295, 41, 62, 1500, 41, 123, 2297, 61, 2295, 59, 2274, 46, 2309, 40, 2004, 46, 2310, 40, 2297, 41, 41, 59, 125, 2282, 2311, 61, 2290, 46, 2296, 40, 2297, 41, 59, 2050, 2312, 61, 2004, 46, 2313, 40, 2311, 41, 59, 2282, 2314, 59, 2282, 2315, 59, 392, 40, 2274, 614, 2064, 41, 123, 2314, 61, 2297, 59, 2315, 61, 2311, 59, 2282, 2316, 61, 2298, 46, 2299, 40, 2065, 46, 2300, 40, 41, 44, 2004, 41, 59, 2282, 2317, 61, 2297, 46, 2292, 40, 2316, 41, 59, 392, 40, 2280, 606, 2317, 46, 2301, 40, 2290, 41, 62, 1500, 41, 123, 2065, 46, 2318, 40, 2312, 41, 59, 125, 360, 123, 2315, 61, 2316, 59, 125, 125, 360, 123, 2315, 61, 2297, 59, 2314, 61, 2311, 59, 2282, 2319, 61, 2298, 46, 2299, 40, 2064, 46, 2300, 40, 41, 44, 2004, 41, 59, 2282, 2320, 61, 2297, 46, 2292, 40, 2319, 41, 59, 392, 40, 2280, 606, 2320, 46, 2301, 40, 2290, 41, 62, 1500, 41, 123, 2064, 46, 2321, 40, 2312, 41, 59, 125, 360, 123, 2314, 61, 2319, 59, 125, 125, 2028, 46, 2322, 40, 2314, 41, 59, 2028, 46, 2323, 40, 2315, 41, 59, 2028, 46, 2324, 40, 2314, 46, 2301, 40, 2315, 41, 62, 1500, 63, 2027, 46, 2325, 46, 2326, 58, 2027, 46, 2325, 46, 2327, 41, 59, 125, 437, 492, 2328, 40, 41, 123, 2064, 61, 418, 2063, 40, 41, 59, 2064, 46, 2329, 40, 473, 41, 59, 2064, 46, 2330, 40, 380, 41, 59, 2064, 46, 2331, 40, 2332, 46, 2333, 40, 41, 41, 59, 2065, 61, 418, 2063, 40, 41, 59, 2065, 46, 2329, 40, 473, 41, 59, 2065, 46, 2331, 40, 2332, 46, 2333, 40, 41, 41, 59, 2065, 46, 2330, 40, 380, 41, 59, 2066, 61, 418, 2063, 40, 41, 59, 2066, 46, 2331, 40, 41, 59, 2066, 46, 2329, 40, 473, 41, 59, 2334, 2335, 61, 418, 2334, 40, 2066, 41, 59, 2334, 2336, 61, 418, 2334, 40, 2064, 44, 2065, 41, 59, 2336, 46, 2337, 40, 1503, 41, 59, 2338, 2339, 61, 418, 2338, 40, 41, 59, 2339, 46, 2337, 40, 1503, 41, 59, 2339, 46, 2340, 40, 41, 46, 2341, 40, 2335, 44, 2336, 41, 59, 2342, 46, 2343, 40, 2339, 44, 418, 2344, 40, 1503, 44, 1503, 44, 1503, 44, 1503, 41, 41, 59, 2342, 46, 2345, 40, 2339, 44, 2346, 41, 59, 2342, 46, 2347, 40, 2339, 44, 1501, 41, 59, 2348, 46, 2340, 40, 41, 46, 2349, 40, 2339, 41, 59, 2070, 61, 40, 2350, 44, 2351, 44, 2352, 41, 45, 62, 123, 2353, 40, 2025, 46, 2354, 40, 41, 46, 2333, 40, 41, 41, 59, 125, 59, 2066, 46, 2355, 40, 41, 46, 2356, 40, 2070, 41, 59, 125, 437, 492, 2357, 40, 41, 123, 2037, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2362, 46, 2363, 40, 41, 41, 41, 59, 2038, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2364, 46, 2363, 40, 41, 41, 41, 59, 2039, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2365, 46, 2363, 40, 41, 41, 41, 59, 2040, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2366, 46, 2363, 40, 41, 41, 41, 59, 2041, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2367, 46, 2363, 40, 41, 41, 41, 59, 2043, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2368, 46, 2363, 40, 41, 41, 41, 59, 2042, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2369, 46, 2363, 40, 41, 41, 41, 59, 2044, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2370, 46, 2363, 40, 41, 41, 41, 59, 2045, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2371, 46, 2363, 40, 41, 41, 41, 59, 2046, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2372, 46, 2363, 40, 41, 41, 41, 59, 2047, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2373, 46, 2363, 40, 41, 41, 41, 59, 2048, 61, 418, 2358, 40, 2359, 46, 2360, 40, 43, 2027, 46, 2361, 46, 2374, 46, 2363, 40, 41, 41, 41, 59, 2375, 2376, 61, 418, 2375, 40, 41, 59, 2376, 46, 2377, 40, 1503, 41, 59, 2376, 46, 2378, 40, 41, 46, 2379, 40, 2048, 44, 2047, 44, 2044, 44, 2045, 44, 2046, 44, 2037, 44, 2038, 44, 2043, 44, 2042, 41, 59, 2380, 2381, 61, 2382, 40, 2383, 44, 637, 2384, 44, 2359, 46, 2360, 40, 41, 44, 2376, 44, 1502, 41, 46, 2385, 59, 2386, 46, 2387, 40, 2381, 44, 1502, 41, 59, 2026, 61, 418, 2024, 40, 41, 59, 2037, 46, 2388, 40, 2026, 41, 59, 2038, 46, 2388, 40, 2026, 41, 59, 2039, 46, 2388, 40, 2026, 41, 59, 2040, 46, 2388, 40, 2026, 41, 59, 2041, 46, 2388, 40, 2026, 41, 59, 2042, 46, 2388, 40, 2026, 41, 59, 2043, 46, 2388, 40, 2026, 41, 59, 2044, 46, 2388, 40, 2026, 41, 59, 2045, 46, 2388, 40, 2026, 41, 59, 2046, 46, 2388, 40, 2026, 41, 59, 2047, 46, 2388, 40, 2026, 41, 59, 2048, 46, 2388, 40, 2026, 41, 59, 2062, 61, 40, 2389, 44, 2390, 44, 2391, 41, 45, 62, 123, 392, 40, 2391, 614, 2037, 41, 123, 2028, 46, 2392, 40, 2027, 46, 2361, 46, 2362, 41, 59, 125, 360, 392, 40, 2391, 614, 2038, 41, 123, 2028, 46, 2393, 40, 2027, 46, 2361, 46, 2364, 41, 59, 125, 360, 392, 40, 2391, 614, 2039, 41, 123, 2028, 46, 2394, 40, 2027, 46, 2361, 46, 2365, 41, 59, 125, 360, 392, 40, 2391, 614, 2040, 41, 123, 2028, 46, 2395, 40, 2027, 46, 2361, 46, 2366, 41, 59, 125, 360, 392, 40, 2391, 614, 2041, 41, 123, 2028, 46, 2396, 40, 2027, 46, 2361, 46, 2367, 41, 59, 125, 360, 392, 40, 2391, 614, 2043, 41, 123, 2028, 46, 2397, 40, 2027, 46, 2361, 46, 2368, 41, 59, 125, 360, 392, 40, 2391, 614, 2042, 41, 123, 2028, 46, 2398, 40, 2027, 46, 2361, 46, 2369, 41, 59, 125, 360, 392, 40, 2391, 614, 2044, 41, 123, 2028, 46, 2399, 40, 2027, 46, 2361, 46, 2370, 41, 59, 125, 360, 392, 40, 2391, 614, 2045, 41, 123, 2028, 46, 2400, 40, 2027, 46, 2361, 46, 2371, 41, 59, 125, 360, 392, 40, 2391, 614, 2046, 41, 123, 2028, 46, 2401, 40, 2027, 46, 2361, 46, 2372, 41, 59, 125, 360, 392, 40, 2391, 614, 2048, 41, 123, 2028, 46, 2402, 40, 2027, 46, 2361, 46, 2374, 41, 59, 125, 360, 392, 40, 2391, 614, 2047, 41, 123, 2028, 46, 2403, 40, 2027, 46, 2361, 46, 2373, 41, 59, 125, 125, 59, 2026, 46, 2404, 40, 41, 46, 2405, 40, 2062, 41, 59, 125, 437, 492, 2406, 40, 41, 123, 392, 40, 2028, 46, 2407, 40, 41, 631, 424, 41, 123, 464, 40, 2028, 46, 2407, 40, 41, 41, 123, 328, 2408, 58, 2026, 46, 2409, 40, 2037, 41, 59, 325, 59, 328, 2410, 58, 2026, 46, 2409, 40, 2038, 41, 59, 325, 59, 328, 2411, 58, 2026, 46, 2409, 40, 2039, 41, 59, 325, 59, 328, 2412, 58, 2026, 46, 2409, 40, 2040, 41, 59, 325, 59, 328, 2413, 58, 2026, 46, 2409, 40, 2041, 41, 59, 325, 59, 328, 2414, 58, 2026, 46, 2409, 40, 2043, 41, 59, 325, 59, 328, 2415, 58, 2026, 46, 2409, 40, 2042, 41, 59, 325, 59, 328, 2416, 58, 2026, 46, 2409, 40, 2044, 41, 59, 325, 59, 328, 2417, 58, 2026, 46, 2409, 40, 2045, 41, 59, 325, 59, 328, 2418, 58, 2026, 46, 2409, 40, 2046, 41, 59, 325, 59, 328, 2419, 58, 2026, 46, 2409, 40, 2047, 41, 59, 325, 59, 328, 2420, 58, 2026, 46, 2409, 40, 2048, 41, 59, 325, 59, 125, 125, 125, 437, 492, 2421, 40, 41, 123, 2055, 61, 418, 2422, 40, 41, 59, 2055, 46, 2423, 40, 2424, 46, 2425, 40, 41, 41, 59, 2055, 46, 2426, 40, 473, 41, 59, 2427, 60, 2052, 44, 2428, 62, 2429, 61, 2430, 40, 2431, 44, 637, 2432, 44, 2424, 46, 2425, 40, 41, 44, 2055, 44, 1500, 41, 59, 2433, 46, 2434, 40, 2429, 46, 2435, 44, 1502, 41, 59, 2055, 46, 2436, 40, 1504, 41, 59, 2055, 46, 2437, 40, 41, 46, 2438, 40, 2028, 46, 2439, 40, 41, 41, 59, 125, 437, 492, 2440, 40, 2441, 2442, 41, 123, 2443, 60, 2444, 44, 2444, 44, 2445, 62, 2446, 61, 2447, 40, 2448, 44, 637, 2449, 44, 2450, 46, 2451, 40, 41, 44, 2450, 46, 2451, 40, 41, 44, 1503, 44, 473, 41, 59, 2444, 2452, 61, 2446, 46, 2453, 59, 2452, 46, 2454, 40, 41, 46, 2455, 40, 2456, 46, 2457, 40, 40, 41, 45, 62, 2025, 46, 2458, 40, 41, 614, 424, 606, 2055, 46, 2459, 40, 41, 614, 424, 606, 2055, 46, 2459, 40, 41, 46, 2460, 40, 41, 614, 1500, 606, 33, 2248, 40, 41, 44, 2025, 46, 2461, 40, 41, 44, 2055, 46, 2462, 40, 41, 44, 2064, 46, 2462, 40, 41, 44, 2065, 46, 2462, 40, 41, 41, 41, 59, 2444, 2463, 61, 2446, 46, 2464, 59, 2452, 46, 2465, 40, 2466, 45, 62, 123, 392, 40, 2020, 46, 2467, 40, 41, 614, 424, 41, 123, 2468, 46, 2469, 40, 41, 59, 450, 59, 125, 392, 40, 2020, 46, 2470, 40, 41, 614, 2471, 46, 2472, 605, 2049, 46, 2473, 40, 41, 605, 33, 2049, 46, 2451, 40, 41, 46, 2474, 40, 41, 41, 123, 2475, 40, 2442, 44, 2028, 44, 40, 41, 45, 62, 2476, 40, 2452, 41, 41, 59, 125, 360, 123, 2477, 40, 2452, 41, 59, 125, 125, 41, 59, 2463, 46, 2465, 40, 2466, 45, 62, 123, 2020, 46, 2478, 40, 2028, 41, 59, 2479, 40, 2480, 40, 2020, 41, 41, 46, 2481, 40, 41, 59, 2482, 40, 41, 59, 125, 41, 59, 125, 437, 492, 2483, 40, 2441, 2442, 44, 2027, 2028, 44, 2484, 2485, 41, 123, 392, 40, 2020, 46, 2486, 40, 41, 41, 123, 418, 2487, 40, 41, 46, 2488, 40, 2489, 46, 2490, 40, 41, 41, 46, 2491, 40, 2489, 46, 2490, 40, 41, 41, 46, 2492, 40, 2489, 46, 2490, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 2493, 2494, 61, 2028, 46, 2495, 40, 41, 59, 2050, 2496, 61, 2442, 46, 2497, 40, 41, 59, 2493, 2498, 61, 2028, 46, 2499, 40, 41, 59, 2050, 2500, 61, 2442, 46, 2501, 40, 41, 59, 2493, 2502, 61, 2494, 46, 2503, 40, 2498, 41, 59, 2504, 60, 2493, 44, 2505, 62, 2506, 61, 2014, 46, 2507, 40, 2502, 44, 2012, 41, 59, 2493, 2508, 61, 2506, 46, 2509, 59, 2505, 2510, 61, 2506, 46, 2511, 59, 356, 2512, 61, 2513, 46, 2514, 40, 2508, 44, 2510, 41, 59, 356, 2515, 61, 2510, 47, 1504, 59, 2493, 2516, 61, 2502, 46, 2503, 40, 2508, 41, 59, 2050, 2517, 61, 59, 392, 40, 2494, 46, 2518, 40, 41, 41, 123, 2517, 61, 2519, 46, 2520, 40, 44, 2004, 46, 2521, 40, 2494, 41, 44, 2496, 41, 59, 125, 2050, 2522, 61, 59, 392, 40, 2498, 46, 2518, 40, 41, 41, 123, 2522, 61, 2523, 46, 2524, 40, 44, 2004, 46, 2525, 40, 2498, 41, 44, 2500, 41, 59, 125, 392, 40, 2502, 46, 2518, 40, 41, 41, 123, 418, 2526, 40, 41, 46, 2527, 40, 1504, 41, 46, 2528, 40, 2529, 46, 2530, 40, 41, 41, 46, 2531, 40, 2529, 46, 2530, 40, 44, 2004, 46, 2532, 40, 2516, 41, 44, 2517, 44, 2522, 44, 2004, 46, 2532, 40, 2508, 41, 44, 2512, 44, 2515, 41, 41, 46, 2533, 40, 2529, 46, 2530, 40, 41, 41, 46, 2534, 40, 40, 41, 45, 62, 123, 2535, 40, 2494, 44, 2498, 44, 2508, 44, 2496, 44, 2500, 44, 2485, 41, 59, 125, 41, 46, 2536, 40, 2529, 46, 2530, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 360, 123, 418, 2537, 40, 41, 46, 2538, 40, 2539, 46, 2540, 40, 41, 41, 46, 2541, 40, 2539, 46, 2540, 40, 41, 41, 46, 2542, 40, 2539, 46, 2540, 40, 41, 41, 46, 2543, 40, 2485, 58, 58, 2544, 41, 46, 2545, 40, 2539, 46, 2540, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 125, 437, 492, 2546, 40, 2547, 2548, 44, 2547, 2549, 44, 2547, 2550, 44, 2050, 2551, 44, 2050, 2552, 44, 2484, 2485, 41, 123, 392, 40, 2020, 46, 2553, 40, 41, 41, 123, 2554, 46, 371, 40, 44, 2020, 46, 2555, 40, 41, 41, 59, 450, 59, 125, 2020, 46, 2556, 40, 473, 41, 59, 474, 123, 2557, 2558, 61, 2012, 46, 2559, 40, 2548, 44, 2549, 44, 2550, 44, 2551, 44, 2552, 41, 59, 2010, 46, 2560, 40, 2558, 44, 418, 2561, 46, 2562, 40, 41, 123, 64, 2091, 439, 492, 2563, 40, 2557, 2564, 41, 123, 2485, 46, 2565, 40, 41, 59, 125, 64, 2091, 439, 492, 2566, 40, 2567, 2568, 41, 123, 2569, 46, 371, 40, 44, 2568, 41, 59, 418, 2570, 40, 41, 46, 371, 40, 2568, 46, 2571, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 125, 41, 59, 125, 329, 40, 2572, 124, 2573, 124, 2574, 2575, 41, 123, 2576, 46, 371, 40, 44, 2575, 41, 59, 418, 2577, 40, 41, 46, 371, 40, 2575, 46, 2578, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 125, 437, 492, 2579, 40, 2580, 2581, 41, 123, 490, 2582, 61, 2583, 40, 2584, 40, 2020, 41, 41, 59, 474, 123, 2585, 46, 2586, 40, 2020, 46, 2587, 40, 41, 44, 2018, 41, 59, 2585, 46, 2588, 40, 2020, 44, 2582, 46, 2589, 40, 41, 41, 59, 2590, 40, 2581, 41, 59, 125, 329, 40, 2591, 46, 2592, 2593, 41, 123, 2050, 2594, 61, 2020, 46, 2595, 40, 41, 59, 2050, 2596, 61, 2020, 46, 2597, 40, 41, 59, 392, 40, 2582, 402, 2005, 41, 123, 418, 2598, 40, 41, 46, 2599, 40, 1504, 41, 46, 494, 40, 2600, 46, 2601, 40, 44, 2594, 44, 2018, 46, 2602, 40, 41, 44, 2596, 44, 2600, 46, 2601, 40, 41, 41, 41, 46, 2603, 40, 40, 41, 45, 62, 123, 2604, 40, 2581, 41, 59, 125, 41, 46, 2605, 40, 2600, 46, 2601, 40, 41, 41, 46, 2606, 40, 2600, 46, 2601, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 360, 123, 418, 2607, 40, 41, 46, 2608, 40, 1504, 41, 46, 494, 40, 2609, 46, 2610, 40, 44, 2594, 44, 2018, 46, 2611, 40, 41, 44, 2596, 44, 2609, 46, 2610, 40, 41, 41, 41, 46, 2079, 40, 41, 59, 125, 125, 329, 40, 2591, 46, 2612, 2593, 41, 123, 392, 40, 2582, 402, 2005, 41, 123, 2613, 46, 371, 40, 44, 2593, 41, 59, 418, 2614, 40, 41, 46, 2615, 40, 1504, 41, 46, 494, 40, 2593, 46, 2616, 40, 41, 41, 46, 2617, 40, 40, 41, 45, 62, 123, 2618, 40, 2581, 41, 59, 125, 41, 46, 2619, 40, 2620, 46, 2621, 40, 41, 41, 46, 2622, 40, 2620, 46, 2621, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 360, 123, 2623, 46, 371, 40, 44, 2593, 41, 59, 418, 2624, 40, 41, 46, 2625, 40, 1504, 41, 46, 494, 40, 2593, 46, 2626, 40, 41, 41, 46, 2079, 40, 41, 59, 125, 125, 125, 437, 492, 2627, 40, 2580, 2581, 41, 123, 2628, 60, 63, 378, 2629, 60, 2019, 641, 2630, 61, 2631, 40, 2020, 41, 59, 392, 40, 2630, 614, 424, 41, 123, 450, 59, 125, 324, 2632, 61, 2630, 402, 2007, 59, 2028, 46, 2633, 40, 380, 41, 59, 2028, 46, 2634, 40, 418, 2635, 40, 41, 41, 59, 2020, 46, 2636, 40, 2028, 41, 59, 2020, 46, 2637, 40, 41, 59, 2027, 46, 2638, 2639, 61, 2028, 46, 2640, 40, 41, 59, 2055, 46, 2641, 40, 41, 46, 2642, 40, 2028, 46, 2643, 40, 41, 41, 59, 2050, 2051, 61, 2632, 63, 2644, 46, 2645, 40, 41, 58, 2644, 46, 2645, 40, 41, 59, 2050, 2646, 61, 2647, 40, 2630, 46, 2648, 40, 2020, 41, 41, 46, 2649, 40, 41, 59, 2441, 2442, 61, 2020, 46, 2650, 40, 41, 59, 2050, 2651, 61, 2442, 46, 2652, 40, 41, 46, 2653, 40, 41, 59, 2050, 2654, 61, 2004, 46, 2655, 40, 2442, 46, 2656, 40, 41, 41, 59, 2050, 2657, 61, 2644, 46, 2645, 40, 44, 2658, 46, 2659, 40, 2028, 46, 2660, 40, 41, 41, 44, 2051, 44, 2646, 44, 2020, 46, 2661, 40, 41, 44, 2651, 44, 2654, 44, 2004, 46, 2655, 40, 2028, 46, 2662, 40, 41, 41, 44, 2004, 46, 2655, 40, 2028, 46, 2663, 40, 41, 41, 44, 2644, 46, 2645, 40, 43, 2639, 46, 2664, 40, 41, 41, 44, 2028, 46, 2643, 40, 41, 46, 2645, 40, 41, 41, 59, 392, 40, 2639, 614, 2027, 46, 2638, 46, 2665, 605, 2020, 46, 2666, 40, 41, 46, 2667, 40, 41, 62, 1501, 605, 2020, 46, 2666, 40, 41, 46, 2645, 40, 1501, 41, 46, 2668, 40, 41, 41, 123, 2657, 636, 43, 2020, 46, 2666, 40, 41, 46, 2645, 40, 1501, 41, 46, 2669, 40, 41, 43, 59, 125, 2050, 2670, 61, 2671, 46, 2672, 40, 2630, 44, 2028, 44, 2657, 41, 59, 392, 40, 2632, 41, 123, 2670, 636, 2644, 46, 2645, 40, 41, 59, 125, 360, 123, 2670, 636, 2644, 46, 2645, 40, 41, 59, 125, 2630, 46, 2673, 40, 2028, 44, 2020, 44, 2670, 41, 59, 392, 40, 2049, 46, 2674, 40, 41, 605, 33, 2049, 46, 2645, 40, 41, 46, 2675, 40, 41, 605, 33, 2676, 46, 2677, 40, 41, 41, 123, 2678, 46, 2679, 40, 40, 41, 45, 62, 418, 2680, 40, 41, 46, 2681, 40, 2644, 46, 2645, 40, 41, 41, 46, 2079, 40, 41, 44, 1504, 44, 2682, 46, 2683, 41, 59, 125, 2023, 46, 2684, 40, 2022, 58, 58, 2685, 41, 59, 2630, 46, 2686, 40, 41, 59, 2581, 46, 2687, 40, 41, 46, 2688, 40, 41, 59, 2689, 40, 41, 59, 125, 437, 2690, 60, 63, 378, 2691, 60, 2019, 641, 2692, 40, 2019, 2020, 41, 123, 392, 40, 2020, 46, 2693, 40, 41, 631, 424, 41, 123, 464, 40, 2020, 46, 2693, 40, 41, 41, 123, 328, 2694, 58, 450, 424, 59, 328, 2695, 58, 450, 2006, 59, 328, 2696, 58, 325, 59, 328, 2697, 58, 450, 2008, 59, 125, 125, 450, 424, 59, 125, 437, 324, 2698, 40, 41, 123, 450, 2692, 40, 2020, 41, 402, 2005, 59, 125, 437, 492, 2699, 40, 2061, 2700, 41, 123, 392, 40, 2071, 606, 2700, 614, 424, 41, 123, 450, 59, 125, 2701, 40, 2700, 41, 59, 2702, 40, 41, 59, 125, 437, 492, 2703, 40, 2061, 2700, 41, 123, 2441, 2442, 61, 2020, 46, 2704, 40, 41, 59, 2705, 2706, 61, 418, 2705, 40, 2442, 46, 2707, 40, 41, 41, 59, 2547, 2708, 61, 2706, 46, 2709, 40, 41, 59, 2547, 2710, 61, 2706, 46, 2711, 40, 41, 59, 2547, 2712, 61, 2442, 46, 2713, 40, 41, 59, 2547, 2714, 61, 2712, 46, 2715, 40, 2708, 41, 46, 2715, 40, 2710, 41, 59, 2547, 2716, 61, 2698, 40, 41, 63, 2717, 46, 2718, 40, 41, 58, 2547, 46, 2719, 59, 2547, 2720, 61, 2547, 46, 2719, 59, 474, 123, 2028, 46, 2721, 40, 2066, 46, 2722, 40, 41, 46, 2723, 40, 44, 41, 41, 59, 356, 2724, 61, 2725, 46, 2726, 40, 2028, 46, 2727, 40, 41, 41, 59, 2720, 61, 2547, 46, 2728, 40, 40, 413, 41, 40, 2442, 46, 2713, 40, 41, 46, 2729, 40, 41, 42, 2724, 41, 41, 59, 125, 329, 40, 2730, 124, 2731, 2732, 41, 123, 2733, 46, 2734, 40, 2732, 46, 2735, 40, 41, 41, 59, 125, 392, 40, 2700, 614, 2030, 41, 123, 2028, 46, 2736, 40, 2027, 46, 2737, 46, 2738, 41, 59, 2028, 46, 2739, 40, 2712, 46, 2715, 40, 2708, 41, 41, 59, 2028, 46, 2740, 40, 2710, 41, 59, 2028, 46, 2741, 40, 41, 59, 125, 360, 392, 40, 2700, 614, 2031, 41, 123, 2028, 46, 2742, 40, 2027, 46, 2743, 46, 2744, 41, 59, 2028, 46, 2745, 40, 2708, 41, 59, 2028, 46, 2746, 40, 2712, 46, 2715, 40, 2710, 41, 41, 59, 2028, 46, 2747, 40, 41, 59, 125, 360, 392, 40, 2700, 614, 2034, 41, 123, 2028, 46, 2748, 40, 2027, 46, 2749, 46, 2750, 41, 59, 2547, 2751, 61, 2712, 46, 2715, 40, 2706, 46, 2709, 40, 41, 41, 46, 2752, 40, 2720, 41, 59, 2028, 46, 2753, 40, 2751, 41, 59, 2028, 46, 2754, 40, 2714, 46, 2752, 40, 2751, 41, 41, 59, 125, 360, 392, 40, 2700, 614, 2035, 41, 123, 2028, 46, 2755, 40, 2027, 46, 2756, 46, 2757, 41, 59, 2547, 2758, 61, 2712, 46, 2715, 40, 2706, 46, 2709, 40, 41, 41, 46, 2759, 40, 2720, 41, 59, 2028, 46, 2760, 40, 2758, 41, 59, 2028, 46, 2761, 40, 2714, 46, 2759, 40, 2758, 41, 41, 59, 125, 360, 392, 40, 2700, 614, 2032, 41, 123, 2028, 46, 2762, 40, 2027, 46, 2763, 46, 2764, 41, 59, 2547, 2765, 61, 2712, 46, 2715, 40, 2706, 46, 2709, 40, 41, 41, 46, 2715, 40, 2720, 41, 59, 2028, 46, 2766, 40, 2765, 41, 59, 2028, 46, 2767, 40, 2714, 46, 2768, 40, 2765, 41, 41, 59, 125, 360, 392, 40, 2700, 614, 2033, 41, 123, 2028, 46, 2769, 40, 2027, 46, 2770, 46, 2771, 41, 59, 2547, 2772, 61, 2712, 46, 2715, 40, 2706, 46, 2711, 40, 41, 41, 46, 2715, 40, 2720, 41, 59, 2028, 46, 2773, 40, 2772, 41, 59, 2028, 46, 2774, 40, 2714, 46, 2775, 40, 2772, 41, 41, 59, 125, 360, 123, 2028, 46, 2776, 40, 2027, 46, 2777, 46, 2778, 41, 59, 2028, 46, 2779, 40, 41, 59, 125, 392, 40, 2028, 46, 2780, 40, 41, 46, 2781, 40, 2716, 41, 41, 123, 2028, 46, 2782, 40, 2716, 41, 59, 2028, 46, 2783, 40, 2714, 46, 2784, 40, 2716, 41, 41, 59, 125, 360, 392, 40, 2028, 46, 2785, 40, 41, 46, 2781, 40, 2716, 41, 41, 123, 2028, 46, 2786, 40, 2716, 41, 59, 2028, 46, 2787, 40, 2714, 46, 2788, 40, 2716, 41, 41, 59, 125, 2028, 46, 2789, 40, 2028, 46, 2785, 40, 41, 46, 2781, 40, 2028, 46, 2780, 40, 41, 41, 63, 2027, 46, 2790, 46, 2791, 58, 2027, 46, 2790, 46, 2791, 41, 59, 125, 437, 492, 2792, 40, 41, 123, 2071, 61, 473, 59, 2064, 46, 2793, 40, 2004, 46, 2794, 40, 2028, 46, 2795, 40, 41, 41, 41, 59, 2065, 46, 2793, 40, 2004, 46, 2794, 40, 2028, 46, 2796, 40, 41, 41, 41, 59, 2066, 46, 2793, 40, 2028, 46, 2797, 40, 41, 41, 59, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2800, 41, 123, 2030, 46, 2801, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2802, 41, 123, 2031, 46, 2803, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2804, 41, 123, 2032, 46, 2805, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2806, 41, 123, 2033, 46, 2807, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2808, 41, 123, 2034, 46, 2809, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2810, 41, 123, 2035, 46, 2811, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2798, 40, 41, 614, 2027, 46, 2799, 46, 2812, 41, 123, 2036, 46, 2813, 40, 473, 41, 59, 125, 360, 123, 2441, 2442, 61, 2020, 46, 2814, 40, 41, 59, 2815, 2816, 61, 418, 2815, 40, 2442, 46, 2817, 40, 41, 41, 59, 2547, 2818, 61, 2816, 46, 2819, 40, 41, 59, 2547, 2820, 61, 2816, 46, 2821, 40, 41, 59, 2547, 2822, 61, 2442, 46, 2823, 40, 41, 59, 2547, 2824, 61, 2822, 46, 2825, 40, 2818, 41, 46, 2825, 40, 2820, 41, 59, 2547, 2826, 61, 2698, 40, 41, 63, 2827, 46, 2828, 40, 41, 58, 2547, 46, 2829, 59, 2547, 2830, 61, 2824, 46, 2831, 40, 2826, 41, 59, 392, 40, 2028, 46, 2795, 40, 41, 46, 2832, 40, 2822, 46, 2825, 40, 2818, 41, 41, 605, 2028, 46, 2796, 40, 41, 46, 2832, 40, 2820, 41, 41, 123, 2030, 46, 2833, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2795, 40, 41, 46, 2832, 40, 2830, 41, 605, 2028, 46, 2796, 40, 41, 46, 2832, 40, 2826, 41, 41, 123, 2032, 46, 2834, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2796, 40, 41, 46, 2832, 40, 2822, 46, 2825, 40, 2820, 41, 41, 605, 2028, 46, 2795, 40, 41, 46, 2832, 40, 2818, 41, 41, 123, 2031, 46, 2835, 40, 473, 41, 59, 125, 360, 392, 40, 2028, 46, 2796, 40, 41, 46, 2832, 40, 2830, 41, 605, 2028, 46, 2795, 40, 41, 46, 2832, 40, 2826, 41, 41, 123, 2033, 46, 2836, 40, 473, 41, 59, 125, 360, 123, 2036, 46, 2837, 40, 473, 41, 59, 125, 125, 2071, 61, 380, 59, 125, 437, 492, 2838, 40, 41, 123, 392, 40, 2020, 46, 2839, 40, 41, 614, 424, 41, 450, 59, 2016, 46, 2840, 40, 2020, 46, 2839, 40, 41, 44, 40, 2841, 45, 62, 123, 413, 2842, 61, 2841, 46, 2843, 40, 41, 59, 2844, 46, 2845, 40, 44, 2842, 41, 59, 2846, 40, 2842, 41, 59, 125, 41, 41, 59, 125, 437, 492, 2847, 40, 413, 2848, 41, 123, 392, 40, 2053, 631, 424, 41, 123, 2050, 2849, 61, 2850, 46, 2851, 40, 41, 59, 392, 40, 2848, 614, 1500, 41, 2849, 61, 2850, 46, 2851, 40, 44, 1501, 41, 59, 360, 392, 40, 2848, 62, 1500, 41, 2849, 61, 2850, 46, 2851, 40, 44, 2848, 41, 59, 2053, 46, 2852, 40, 2849, 41, 59, 125, 125, 125]",0.99999356,1
