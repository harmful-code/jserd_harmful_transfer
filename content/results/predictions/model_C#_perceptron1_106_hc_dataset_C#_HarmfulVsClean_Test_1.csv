,id,language,text,smell,tokens,predict_value,predict_class
0,70312,C#,"        private class FakeNavigationFixer : INavigationFixer
        {
            public void StateChanging(InternalEntityEntry entry, EntityState newState)
                => throw new NotImplementedException();

            public void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery)
                => throw new NotImplementedException();

            public bool BeginDelayedFixup()
                => false;

            public void CompleteDelayedFixup()
            {
            }

            public void AbortDelayedFixup()
            {
            }

            public void NavigationReferenceChanged(
                InternalEntityEntry entry,
                INavigationBase navigationBase,
                object oldValue,
                object newValue)
                => throw new NotImplementedException();

            public void NavigationCollectionChanged(
                InternalEntityEntry entry,
                INavigationBase navigationBase,
                IEnumerable<object> added,
                IEnumerable<object> removed)
                => throw new NotImplementedException();

            public void KeyPropertyChanged(
                InternalEntityEntry entry,
                IProperty property,
                IEnumerable<IKey> containingPrincipalKeys,
                IEnumerable<IForeignKey> containingForeignKeys,
                object oldValue,
                object newValue)
                => throw new NotImplementedException();

            public void TrackedFromQuery(InternalEntityEntry entry)
                => throw new NotImplementedException();
        }",0,"[437, 334, 2000, 58, 2001, 123, 439, 492, 2002, 40, 2003, 2004, 44, 2005, 2006, 41, 619, 469, 418, 2007, 40, 41, 59, 439, 492, 2008, 40, 2003, 2004, 44, 2005, 2009, 44, 323, 2010, 41, 619, 469, 418, 2007, 40, 41, 59, 439, 323, 2011, 40, 41, 619, 380, 59, 439, 492, 2012, 40, 41, 123, 125, 439, 492, 2013, 40, 41, 123, 125, 439, 492, 2014, 40, 2003, 2004, 44, 2015, 2016, 44, 426, 2017, 44, 426, 2018, 41, 619, 469, 418, 2007, 40, 41, 59, 439, 492, 2019, 40, 2003, 2004, 44, 2015, 2016, 44, 2020, 60, 426, 62, 2021, 44, 2020, 60, 426, 62, 2022, 41, 619, 469, 418, 2007, 40, 41, 59, 439, 492, 2023, 40, 2003, 2004, 44, 2024, 2025, 44, 2020, 60, 2026, 62, 2027, 44, 2020, 60, 2028, 62, 2029, 44, 426, 2017, 44, 426, 2018, 41, 619, 469, 418, 2007, 40, 41, 59, 439, 492, 2030, 40, 2003, 2004, 41, 619, 469, 418, 2007, 40, 41, 59, 125]",0.0062441225,0
1,70296,C#,"        private class ConstructorTestContextWithOC2A : ConstructorTestContextWithOCBase
        {
            public ConstructorTestContextWithOC2A(
                IServiceProvider internalServicesProvider)
                : base(internalServicesProvider)
            {
            }
        }",0,"[437, 334, 2000, 58, 2001, 123, 439, 2000, 40, 2002, 2003, 41, 58, 320, 40, 2003, 41, 123, 125, 125]",0.0005023946,0
2,68868,C#,"public class SqliteQueryableMethodTranslatingExpressionVisitor : RelationalQueryableMethodTranslatingExpressionVisitor
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public SqliteQueryableMethodTranslatingExpressionVisitor(
        QueryableMethodTranslatingExpressionVisitorDependencies dependencies,
        RelationalQueryableMethodTranslatingExpressionVisitorDependencies relationalDependencies,
        QueryCompilationContext queryCompilationContext)
        : base(dependencies, relationalDependencies, queryCompilationContext)
    {
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected SqliteQueryableMethodTranslatingExpressionVisitor(
        SqliteQueryableMethodTranslatingExpressionVisitor parentVisitor)
        : base(parentVisitor)
    {
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor()
        => new SqliteQueryableMethodTranslatingExpressionVisitor(this);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override ShapedQueryExpression? TranslateOrderBy(
        ShapedQueryExpression source,
        LambdaExpression keySelector,
        bool ascending)
    {
        var translation = base.TranslateOrderBy(source, keySelector, ascending);
        if (translation == null)
        {
            return null;
        }

        var orderingExpression = ((SelectExpression)translation.QueryExpression).Orderings.Last();
        var orderingExpressionType = GetProviderType(orderingExpression.Expression);
        if (orderingExpressionType == typeof(DateTimeOffset)
            || orderingExpressionType == typeof(decimal)
            || orderingExpressionType == typeof(TimeSpan)
            || orderingExpressionType == typeof(ulong))
        {
            throw new NotSupportedException(
                SqliteStrings.OrderByNotSupported(orderingExpressionType.ShortDisplayName()));
        }

        return translation;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected override ShapedQueryExpression? TranslateThenBy(
        ShapedQueryExpression source,
        LambdaExpression keySelector,
        bool ascending)
    {
        var translation = base.TranslateThenBy(source, keySelector, ascending);
        if (translation == null)
        {
            return null;
        }

        var orderingExpression = ((SelectExpression)translation.QueryExpression).Orderings.Last();
        var orderingExpressionType = GetProviderType(orderingExpression.Expression);
        if (orderingExpressionType == typeof(DateTimeOffset)
            || orderingExpressionType == typeof(decimal)
            || orderingExpressionType == typeof(TimeSpan)
            || orderingExpressionType == typeof(ulong))
        {
            throw new NotSupportedException(
                SqliteStrings.OrderByNotSupported(orderingExpressionType.ShortDisplayName()));
        }

        return translation;
    }

    private static Type GetProviderType(SqlExpression expression)
        => expression.TypeMapping?.Converter?.ProviderClrType
            ?? expression.TypeMapping?.ClrType
            ?? expression.Type;
}",0,"[439, 334, 2000, 58, 2001, 123, 439, 2000, 40, 2002, 2003, 44, 2004, 2005, 44, 2006, 2007, 41, 58, 320, 40, 2003, 44, 2005, 44, 2007, 41, 123, 125, 438, 2000, 40, 2000, 2008, 41, 58, 320, 40, 2008, 41, 123, 125, 438, 431, 2009, 2010, 40, 41, 619, 418, 2000, 40, 467, 41, 59, 438, 431, 2011, 63, 2012, 40, 2011, 2013, 44, 2014, 2015, 44, 323, 2016, 41, 123, 490, 2017, 61, 320, 46, 2012, 40, 2013, 44, 2015, 44, 2016, 41, 59, 392, 40, 2017, 614, 424, 41, 123, 450, 424, 59, 125, 490, 2018, 61, 40, 40, 2019, 41, 2017, 46, 2020, 41, 46, 2021, 46, 2022, 40, 41, 59, 490, 2023, 61, 2024, 40, 2018, 46, 2025, 41, 59, 392, 40, 2023, 614, 478, 40, 2026, 41, 606, 2023, 614, 478, 40, 345, 41, 606, 2023, 614, 478, 40, 2027, 41, 606, 2023, 614, 478, 40, 480, 41, 41, 123, 469, 418, 2028, 40, 2029, 46, 2030, 40, 2023, 46, 2031, 40, 41, 41, 41, 59, 125, 450, 2017, 59, 125, 438, 431, 2011, 63, 2032, 40, 2011, 2013, 44, 2014, 2015, 44, 323, 2016, 41, 123, 490, 2033, 61, 320, 46, 2032, 40, 2013, 44, 2015, 44, 2016, 41, 59, 392, 40, 2033, 614, 424, 41, 123, 450, 424, 59, 125, 490, 2034, 61, 40, 40, 2035, 41, 2033, 46, 2036, 41, 46, 2037, 46, 2038, 40, 41, 59, 490, 2039, 61, 2040, 40, 2034, 46, 2041, 41, 59, 392, 40, 2039, 614, 478, 40, 2042, 41, 606, 2039, 614, 478, 40, 345, 41, 606, 2039, 614, 478, 40, 2043, 41, 606, 2039, 614, 478, 40, 480, 41, 41, 123, 469, 418, 2044, 40, 2045, 46, 2046, 40, 2039, 46, 2047, 40, 41, 41, 41, 59, 125, 450, 2033, 59, 125, 437, 457, 2048, 2049, 40, 2050, 2051, 41, 619, 2051, 46, 2052, 634, 2053, 634, 2054, 633, 2051, 46, 2052, 634, 2055, 633, 2051, 46, 2048, 59, 125]",0.02137574,0
3,70316,C#,"        private class NonGenericOptions1 : DbContext
        {
            public NonGenericOptions1(DbContextOptions options)
                : base(options)
            {
            }
        }",0,"[437, 334, 2000, 58, 2001, 123, 439, 2000, 40, 2002, 2003, 41, 58, 320, 40, 2003, 41, 123, 125, 125]",0.0005023946,0
4,70315,C#,"            private class MyListLogger : ILogger
            {
                public MyListLogger(List<(LogLevel, EventId, string)> logMessage)
                {
                    LogMessages = logMessage;
                }

                private List<(LogLevel, EventId, string)> LogMessages { get; }

                public void Log<TState>(
                    LogLevel logLevel,
                    EventId eventId,
                    TState state,
                    Exception exception,
                    Func<TState, Exception, string> formatter)
                {
                    var message = new StringBuilder();
                    if (formatter != null)
                    {
                        message.Append(formatter(state, exception));
                    }
                    else if (state != null)
                    {
                        message.Append(state);

                        if (exception != null)
                        {
                            message.Append(Environment.NewLine);
                            message.Append(exception);
                        }
                    }

                    LogMessages?.Add((logLevel, eventId, message.ToString()));
                }

                public bool IsEnabled(LogLevel logLevel)
                    => true;

                public IDisposable BeginScope(object state)
                    => throw new NotImplementedException();

                public IDisposable BeginScope<TState>(TState state)
                    => null;
            }",0,"[437, 334, 2000, 58, 2001, 123, 439, 2000, 40, 2002, 60, 40, 2003, 44, 2004, 44, 461, 41, 62, 2005, 41, 123, 2006, 61, 2005, 59, 125, 437, 2002, 60, 40, 2003, 44, 2004, 44, 461, 41, 62, 2007, 123, 2008, 59, 125, 439, 492, 2009, 60, 2010, 62, 40, 2003, 2011, 44, 2004, 2012, 44, 2010, 2013, 44, 2014, 2015, 44, 2016, 60, 2010, 44, 2014, 44, 461, 62, 2017, 41, 123, 490, 2018, 61, 418, 2019, 40, 41, 59, 392, 40, 2017, 631, 424, 41, 123, 2018, 46, 2020, 40, 2017, 40, 2013, 44, 2015, 41, 41, 59, 125, 360, 392, 40, 2013, 631, 424, 41, 123, 2018, 46, 2021, 40, 2013, 41, 59, 392, 40, 2015, 631, 424, 41, 123, 2018, 46, 2021, 40, 2022, 46, 2023, 41, 59, 2018, 46, 2021, 40, 2015, 41, 59, 125, 125, 2007, 634, 2024, 40, 40, 2011, 44, 2012, 44, 2018, 46, 2025, 40, 41, 41, 41, 59, 125, 439, 323, 2026, 40, 2003, 2011, 41, 619, 473, 59, 439, 2027, 2028, 40, 426, 2013, 41, 619, 469, 418, 2029, 40, 41, 59, 439, 2027, 2028, 60, 2010, 62, 40, 2010, 2013, 41, 619, 424, 59, 125]",0.004381554,0
5,70640,C#,"        private class BadDataRelationalCommandBuilder : RelationalCommandBuilder
        {
            private readonly object[] _values;

            public BadDataRelationalCommandBuilder(
                RelationalCommandBuilderDependencies dependencies,
                object[] values)
                : base(dependencies)
            {
                _values = values;
            }

            public override IRelationalCommand Build()
                => new BadDataRelationalCommand(Dependencies, ToString(), Parameters, _values);

            private class BadDataRelationalCommand : RelationalCommand
            {
                private object[] _values;

                public BadDataRelationalCommand(
                    RelationalCommandBuilderDependencies dependencies,
                    string commandText,
                    IReadOnlyList<IRelationalParameter> parameters,
                    object[] values)
                    : base(dependencies, commandText, parameters)
                {
                    _values = values;
                }

                public override RelationalDataReader ExecuteReader(
                    RelationalCommandParameterObject parameterObject)
                {
                    var command = parameterObject.Connection.DbConnection.CreateCommand();
                    command.CommandText = CommandText;
                    var reader = new BadDataRelationalDataReader();
                    reader.Initialize(
                        new FakeConnection(),
                        command,
                        new BadDataDataReader(_values),
                        Guid.NewGuid(),
                        parameterObject.Logger);
                    return reader;
                }

                public override void PopulateFrom(IRelationalCommandTemplate commandTemplate)
                {
                    base.PopulateFrom(commandTemplate);
                    _values = ((BadDataRelationalCommand)commandTemplate)._values;
                }

                private class BadDataRelationalDataReader : RelationalDataReader
                {
                }

                private class BadDataDataReader : DbDataReader
                {
                    private readonly object[] _values;

                    public BadDataDataReader(object[] values)
                    {
                        _values = values;
                    }

                    public override bool Read()
                        => true;

                    public override bool IsDBNull(int ordinal)
                        => false;

                    public override int GetInt32(int ordinal)
                        => (int)GetValue(ordinal);

                    public override short GetInt16(int ordinal)
                        => (short)GetValue(ordinal);

                    public override bool GetBoolean(int ordinal)
                        => (bool)GetValue(ordinal);

                    public override string GetString(int ordinal)
                        => (string)GetValue(ordinal);

                    public override object GetValue(int ordinal)
                        => _values[ordinal];

                    #region NotImplemented members

                    public override string GetName(int ordinal)
                        => throw new NotImplementedException();

                    public override int GetValues(object[] values)
                        => throw new NotImplementedException();

                    public override int FieldCount
                        => throw new NotImplementedException();

                    public override object this[int ordinal]
                        => throw new NotImplementedException();

                    public override object this[string name]
                        => throw new NotImplementedException();

                    public override bool HasRows
                        => throw new NotImplementedException();

                    public override bool IsClosed
                        => throw new NotImplementedException();

                    public override int RecordsAffected
                        => 0;

                    public override bool NextResult()
                        => throw new NotImplementedException();

                    public override int Depth
                        => throw new NotImplementedException();

                    public override int GetOrdinal(string name)
                        => throw new NotImplementedException();

                    public override byte GetByte(int ordinal)
                        => throw new NotImplementedException();

                    public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length)
                        => throw new NotImplementedException();

                    public override char GetChar(int ordinal)
                        => throw new NotImplementedException();

                    public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length)
                        => throw new NotImplementedException();

                    public override Guid GetGuid(int ordinal)
                        => throw new NotImplementedException();

                    public override long GetInt64(int ordinal)
                        => throw new NotImplementedException();

                    public override DateTime GetDateTime(int ordinal)
                        => throw new NotImplementedException();

                    public override decimal GetDecimal(int ordinal)
                        => throw new NotImplementedException();

                    public override double GetDouble(int ordinal)
                        => throw new NotImplementedException();

                    public override float GetFloat(int ordinal)
                        => throw new NotImplementedException();

                    public override string GetDataTypeName(int ordinal)
                        => throw new NotImplementedException();

                    public override Type GetFieldType(int ordinal)
                        => throw new NotImplementedException();

                    public override IEnumerator GetEnumerator()
                        => throw new NotImplementedException();

                    #endregion
                }
            }
        }",0,"[437, 334, 2000, 58, 2001, 123, 437, 441, 426, 91, 93, 2002, 59, 439, 2000, 40, 2003, 2004, 44, 426, 91, 93, 2005, 41, 58, 320, 40, 2004, 41, 123, 2002, 61, 2005, 59, 125, 439, 431, 2006, 2007, 40, 41, 619, 418, 2008, 40, 2009, 44, 2010, 40, 41, 44, 2011, 44, 2002, 41, 59, 437, 334, 2008, 58, 2012, 123, 437, 426, 91, 93, 2002, 59, 439, 2008, 40, 2003, 2004, 44, 461, 2013, 44, 2014, 60, 2015, 62, 2016, 44, 426, 91, 93, 2005, 41, 58, 320, 40, 2004, 44, 2013, 44, 2016, 41, 123, 2002, 61, 2005, 59, 125, 439, 431, 2017, 2018, 40, 2019, 2020, 41, 123, 490, 2021, 61, 2020, 46, 2022, 46, 2023, 46, 2024, 40, 41, 59, 2021, 46, 2025, 61, 2025, 59, 490, 2026, 61, 418, 2027, 40, 41, 59, 2026, 46, 2028, 40, 418, 2029, 40, 41, 44, 2021, 44, 418, 2030, 40, 2002, 41, 44, 2031, 46, 2032, 40, 41, 44, 2020, 46, 2033, 41, 59, 450, 2026, 59, 125, 439, 431, 492, 2034, 40, 2035, 2036, 41, 123, 320, 46, 2034, 40, 2036, 41, 59, 2002, 61, 40, 40, 2008, 41, 2036, 41, 46, 2002, 59, 125, 437, 334, 2037, 58, 2017, 123, 125, 437, 334, 2038, 58, 2039, 123, 437, 441, 426, 91, 93, 2002, 59, 439, 2038, 40, 426, 91, 93, 2005, 41, 123, 2002, 61, 2005, 59, 125, 439, 431, 323, 2040, 40, 41, 619, 473, 59, 439, 431, 323, 2041, 40, 404, 2042, 41, 619, 380, 59, 439, 431, 404, 2043, 40, 404, 2042, 41, 619, 40, 404, 41, 2044, 40, 2042, 41, 59, 439, 431, 453, 2045, 40, 404, 2042, 41, 619, 40, 453, 41, 2044, 40, 2042, 41, 59, 439, 431, 323, 2046, 40, 404, 2042, 41, 619, 40, 323, 41, 2044, 40, 2042, 41, 59, 439, 431, 461, 2047, 40, 404, 2042, 41, 619, 40, 461, 41, 2044, 40, 2042, 41, 59, 439, 431, 426, 2044, 40, 404, 2042, 41, 619, 2002, 91, 2042, 93, 59, 35, 443, 439, 431, 461, 2048, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 404, 2050, 40, 426, 91, 93, 2005, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 404, 2051, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 426, 467, 91, 404, 2042, 93, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 426, 467, 91, 461, 2052, 93, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 323, 2053, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 323, 2054, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 404, 2055, 619, 1500, 59, 439, 431, 323, 2056, 40, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 404, 2057, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 404, 2058, 40, 461, 2052, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 326, 2059, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 413, 2060, 40, 404, 2042, 44, 413, 2061, 44, 326, 91, 93, 2062, 44, 404, 2063, 44, 404, 2064, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 330, 2065, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 413, 2066, 40, 404, 2042, 44, 413, 2061, 44, 330, 91, 93, 2062, 44, 404, 2063, 44, 404, 2064, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 2067, 2068, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 413, 2069, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 2070, 2071, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 345, 2072, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 356, 2073, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 384, 2074, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 461, 2075, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 2076, 2077, 40, 404, 2042, 41, 619, 469, 418, 2049, 40, 41, 59, 439, 431, 2078, 2079, 40, 41, 619, 469, 418, 2049, 40, 41, 59, 35, 367, 125, 125, 125]",0.5404867,1
6,69315,C#,"    private class NonGenericStringTestReferenceReferenceBuilder<TEntity, TRelatedEntity> : NonGenericTestReferenceReferenceBuilder<
        TEntity, TRelatedEntity>
        where TEntity : class
        where TRelatedEntity : class
    {
        public NonGenericStringTestReferenceReferenceBuilder(ReferenceReferenceBuilder referenceReferenceBuilder)
            : base(referenceReferenceBuilder)
        {
        }

        protected override NonGenericTestReferenceReferenceBuilder<TEntity, TRelatedEntity> Wrap(
            ReferenceReferenceBuilder referenceReferenceBuilder)
            => new NonGenericStringTestReferenceReferenceBuilder<TEntity, TRelatedEntity>(referenceReferenceBuilder);

        public override TestReferenceReferenceBuilder<TEntity, TRelatedEntity> HasForeignKey<TDependentEntity>(
            Expression<Func<TDependentEntity, object?>> foreignKeyExpression)
            => Wrap(
                ReferenceReferenceBuilder.HasForeignKey(
                    typeof(TDependentEntity).Name,
                    foreignKeyExpression.GetMemberAccessList().Select(p => p.GetSimpleMemberName()).ToArray()));

        public override TestReferenceReferenceBuilder<TEntity, TRelatedEntity> HasPrincipalKey<TPrincipalEntity>(
            Expression<Func<TPrincipalEntity, object?>> keyExpression)
            => Wrap(
                ReferenceReferenceBuilder.HasPrincipalKey(
                    typeof(TPrincipalEntity).Name,
                    keyExpression.GetMemberAccessList().Select(p => p.GetSimpleMemberName()).ToArray()));

        public override TestReferenceReferenceBuilder<TEntity, TRelatedEntity> HasForeignKey<TDependentEntity>(
            params string[] foreignKeyPropertyNames)
            => Wrap(ReferenceReferenceBuilder.HasForeignKey(typeof(TDependentEntity).Name, foreignKeyPropertyNames));

        public override TestReferenceReferenceBuilder<TEntity, TRelatedEntity> HasPrincipalKey<TPrincipalEntity>(
            params string[] keyPropertyNames)
            => Wrap(ReferenceReferenceBuilder.HasPrincipalKey(typeof(TPrincipalEntity).Name, keyPropertyNames));
    }",0,"[437, 334, 2000, 60, 2001, 44, 2002, 62, 58, 2003, 60, 2001, 44, 2002, 62, 2004, 2001, 58, 334, 2004, 2002, 58, 334, 123, 439, 2000, 40, 2005, 2006, 41, 58, 320, 40, 2006, 41, 123, 125, 438, 431, 2003, 60, 2001, 44, 2002, 62, 2007, 40, 2005, 2006, 41, 619, 418, 2000, 60, 2001, 44, 2002, 62, 40, 2006, 41, 59, 439, 431, 2008, 60, 2001, 44, 2002, 62, 2009, 60, 2010, 62, 40, 2011, 60, 2012, 60, 2010, 44, 426, 63, 640, 2013, 41, 619, 2007, 40, 2005, 46, 2009, 40, 478, 40, 2010, 41, 46, 2014, 44, 2013, 46, 2015, 40, 41, 46, 2016, 40, 2017, 619, 2017, 46, 2018, 40, 41, 41, 46, 2019, 40, 41, 41, 41, 59, 439, 431, 2008, 60, 2001, 44, 2002, 62, 2020, 60, 2021, 62, 40, 2011, 60, 2012, 60, 2021, 44, 426, 63, 640, 2022, 41, 619, 2007, 40, 2005, 46, 2020, 40, 478, 40, 2021, 41, 46, 2014, 44, 2022, 46, 2015, 40, 41, 46, 2016, 40, 2017, 619, 2017, 46, 2018, 40, 41, 41, 46, 2019, 40, 41, 41, 41, 59, 439, 431, 2008, 60, 2001, 44, 2002, 62, 2009, 60, 2010, 62, 40, 433, 461, 91, 93, 2023, 41, 619, 2007, 40, 2005, 46, 2009, 40, 478, 40, 2010, 41, 46, 2014, 44, 2023, 41, 41, 59, 439, 431, 2008, 60, 2001, 44, 2002, 62, 2020, 60, 2021, 62, 40, 433, 461, 91, 93, 2024, 41, 619, 2007, 40, 2005, 46, 2020, 40, 478, 40, 2021, 41, 46, 2014, 44, 2024, 41, 41, 59, 125]",0.003246618,0
7,70298,C#,"        private class ConstructorTestContextWithOC3A : ConstructorTestContextWithOCBase, IConstructorTestContextWithOC3A
        {
            public ConstructorTestContextWithOC3A(
                DbContextOptions options)
                : base(options)
            {
            }
        }",0,"[437, 334, 2000, 58, 2001, 44, 2002, 123, 439, 2000, 40, 2003, 2004, 41, 58, 320, 40, 2004, 41, 123, 125, 125]",0.000629536,0
8,69382,C#,"    public class GenericManyToOneString : ManyToOneTestBase
    {
        protected override TestModelBuilder CreateTestModelBuilder(
            TestHelpers testHelpers,
            Action<ModelConfigurationBuilder>? configure)
            => new GenericStringTestModelBuilder(testHelpers, configure);
    }",0,"[439, 334, 2000, 58, 2001, 123, 438, 431, 2002, 2003, 40, 2004, 2005, 44, 2006, 60, 2007, 62, 63, 2008, 41, 619, 418, 2009, 40, 2005, 44, 2008, 41, 59, 125]",0.00074871554,0
9,71697,C#,"    protected class OptionalComposite2 : NotifyingEntity
    {
        private int _id;
        private Guid _alternateId;
        private int? _parentId;
        private int? _parent2Id;
        private OptionalAk1 _parent;
        private Optional1 _parent2;

        public int Id
        {
            get => _id;
            set => SetWithNotify(value, ref _id);
        }

        public Guid ParentAlternateId
        {
            get => _alternateId;
            set => SetWithNotify(value, ref _alternateId);
        }

        public int? ParentId
        {
            get => _parentId;
            set => SetWithNotify(value, ref _parentId);
        }

        public OptionalAk1 Parent
        {
            get => _parent;
            set => SetWithNotify(value, ref _parent);
        }

        public int? Parent2Id
        {
            get => _parent2Id;
            set => SetWithNotify(value, ref _parent2Id);
        }

        public Optional1 Parent2
        {
            get => _parent2;
            set => SetWithNotify(value, ref _parent2);
        }

        public override bool Equals(object obj)
        {
            var other = obj as OptionalComposite2;
            return _id == other?.Id;
        }

        public override int GetHashCode()
            => _id;
    }",0,"[438, 334, 2000, 58, 2001, 123, 437, 404, 2002, 59, 437, 2003, 2004, 59, 437, 404, 63, 2005, 59, 437, 404, 63, 2006, 59, 437, 2007, 2008, 59, 437, 2009, 2010, 59, 439, 404, 2011, 123, 2012, 619, 2002, 59, 2013, 619, 2014, 40, 2015, 44, 442, 2002, 41, 59, 125, 439, 2003, 2016, 123, 2017, 619, 2004, 59, 2018, 619, 2019, 40, 2020, 44, 442, 2004, 41, 59, 125, 439, 404, 63, 2021, 123, 2022, 619, 2005, 59, 2023, 619, 2024, 40, 2025, 44, 442, 2005, 41, 59, 125, 439, 2007, 2026, 123, 2027, 619, 2008, 59, 2028, 619, 2029, 40, 2030, 44, 442, 2008, 41, 59, 125, 439, 404, 63, 2031, 123, 2032, 619, 2006, 59, 2033, 619, 2034, 40, 2035, 44, 442, 2006, 41, 59, 125, 439, 2009, 2036, 123, 2037, 619, 2010, 59, 2038, 619, 2039, 40, 2040, 44, 442, 2010, 41, 59, 125, 439, 431, 323, 2041, 40, 426, 2042, 41, 123, 490, 2043, 61, 2042, 311, 2000, 59, 450, 2002, 614, 2043, 634, 2011, 59, 125, 439, 431, 404, 2044, 40, 41, 619, 2002, 59, 125]",0.0067603276,0
10,71329,C#,"    private class Hat
    {
        public Hat(int id)
        {
            Id = id;
        }

        // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
        public int Id { get; private set; }

        public string Color { get; set; }

        public int CatId { get; set; }
        public Cat Cat { get; set; }
    }",0,"[437, 334, 2000, 123, 439, 2000, 40, 404, 2001, 41, 123, 2002, 61, 2001, 59, 125, 439, 404, 2003, 123, 2004, 59, 437, 2005, 59, 125, 439, 461, 2006, 123, 2007, 59, 2008, 59, 125, 439, 404, 2009, 123, 2010, 59, 2011, 59, 125, 439, 2012, 2012, 123, 2013, 59, 2014, 59, 125, 125]",0.0007327229,0
11,70317,C#,"        private class NonGenericOptions2 : DbContext
        {
            public NonGenericOptions2(DbContextOptions options)
                : base(options)
            {
            }
        }",0,"[437, 334, 2000, 58, 2001, 123, 439, 2000, 40, 2002, 2003, 41, 58, 320, 40, 2003, 41, 123, 125, 125]",0.0005023946,0
12,70306,C#,"        private class DerivedContext1 : DbContext
        {
            public DerivedContext1(DbContextOptions<DerivedContext1> options)
                : base(options)
            {
            }

            protected DerivedContext1(DbContextOptions options)
                : base(options)
            {
            }
        }",0,"[437, 334, 2000, 58, 2001, 123, 439, 2000, 40, 2002, 60, 2000, 62, 2003, 41, 58, 320, 40, 2003, 41, 123, 125, 438, 2000, 40, 2002, 2003, 41, 58, 320, 40, 2003, 41, 123, 125, 125]",0.00052456534,0
13,68085,C#,"public static class SqlServerEntityTypeBuilderExtensions
{
    /// <summary>
    ///     Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""memoryOptimized"">A value indicating whether the table is memory-optimized.</param>
    /// <returns>The same builder instance so that multiple calls can be chained.</returns>
    public static EntityTypeBuilder IsMemoryOptimized(
        this EntityTypeBuilder entityTypeBuilder,
        bool memoryOptimized = true)
    {
        entityTypeBuilder.Metadata.SetIsMemoryOptimized(memoryOptimized);

        return entityTypeBuilder;
    }

    /// <summary>
    ///     Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <typeparam name=""TEntity"">The entity type being configured.</typeparam>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""memoryOptimized"">A value indicating whether the table is memory-optimized.</param>
    /// <returns>The same builder instance so that multiple calls can be chained.</returns>
    public static EntityTypeBuilder<TEntity> IsMemoryOptimized<TEntity>(
        this EntityTypeBuilder<TEntity> entityTypeBuilder,
        bool memoryOptimized = true)
        where TEntity : class
        => (EntityTypeBuilder<TEntity>)IsMemoryOptimized((EntityTypeBuilder)entityTypeBuilder, memoryOptimized);

    /// <summary>
    ///     Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""collectionOwnershipBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""memoryOptimized"">A value indicating whether the table is memory-optimized.</param>
    /// <returns>The same builder instance so that multiple calls can be chained.</returns>
    public static OwnedNavigationBuilder IsMemoryOptimized(
        this OwnedNavigationBuilder collectionOwnershipBuilder,
        bool memoryOptimized = true)
    {
        collectionOwnershipBuilder.OwnedEntityType.SetIsMemoryOptimized(memoryOptimized);

        return collectionOwnershipBuilder;
    }

    /// <summary>
    ///     Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <typeparam name=""TEntity"">The entity type being configured.</typeparam>
    /// <typeparam name=""TRelatedEntity"">The entity type that this relationship targets.</typeparam>
    /// <param name=""collectionOwnershipBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""memoryOptimized"">A value indicating whether the table is memory-optimized.</param>
    /// <returns>The same builder instance so that multiple calls can be chained.</returns>
    public static OwnedNavigationBuilder<TEntity, TRelatedEntity> IsMemoryOptimized<TEntity, TRelatedEntity>(
        this OwnedNavigationBuilder<TEntity, TRelatedEntity> collectionOwnershipBuilder,
        bool memoryOptimized = true)
        where TEntity : class
        where TRelatedEntity : class
        => (OwnedNavigationBuilder<TEntity, TRelatedEntity>)IsMemoryOptimized(
            (OwnedNavigationBuilder)collectionOwnershipBuilder, memoryOptimized);

    /// <summary>
    ///     Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""memoryOptimized"">A value indicating whether the table is memory-optimized.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns>
    ///     The same builder instance if the configuration was applied,
    ///     <see langword=""null"" /> otherwise.
    /// </returns>
    public static IConventionEntityTypeBuilder? IsMemoryOptimized(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        bool? memoryOptimized,
        bool fromDataAnnotation = false)
    {
        if (entityTypeBuilder.CanSetIsMemoryOptimized(memoryOptimized, fromDataAnnotation))
        {
            entityTypeBuilder.Metadata.SetIsMemoryOptimized(memoryOptimized, fromDataAnnotation);
            return entityTypeBuilder;
        }

        return null;
    }

    /// <summary>
    ///     Returns a value indicating whether the mapped table can be configured as memory-optimized.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""memoryOptimized"">A value indicating whether the table is memory-optimized.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns><see langword=""true"" /> if the mapped table can be configured as memory-optimized.</returns>
    public static bool CanSetIsMemoryOptimized(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        bool? memoryOptimized,
        bool fromDataAnnotation = false)
        => entityTypeBuilder.CanSetAnnotation(SqlServerAnnotationNames.MemoryOptimized, memoryOptimized, fromDataAnnotation);

    /// <summary>
    ///     Configures the table as temporal.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity being configured.</param>
    /// <param name=""temporal"">A value indicating whether the table is temporal.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns>
    ///     The same builder instance if the configuration was applied,
    ///     <see langword=""null"" /> otherwise.
    /// </returns>
    public static IConventionEntityTypeBuilder? IsTemporal(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        bool temporal = true,
        bool fromDataAnnotation = false)
    {
        if (entityTypeBuilder.CanSetIsTemporal(temporal, fromDataAnnotation))
        {
            entityTypeBuilder.Metadata.SetIsTemporal(temporal, fromDataAnnotation);

            return entityTypeBuilder;
        }

        return null;
    }

    /// <summary>
    ///     Returns a value indicating whether the mapped table can be configured as temporal.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-memory-optimized"">Using SQL Server memory-optimized tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""temporal"">A value indicating whether the table is temporal.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns><see langword=""true"" /> if the mapped table can be configured as temporal.</returns>
    public static bool CanSetIsTemporal(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        bool temporal = true,
        bool fromDataAnnotation = false)
        => entityTypeBuilder.CanSetAnnotation(SqlServerAnnotationNames.IsTemporal, temporal, fromDataAnnotation);

    /// <summary>
    ///     Configures a history table name for the entity mapped to a temporal table.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity being configured.</param>
    /// <param name=""name"">The name of the history table.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns>
    ///     The same builder instance if the configuration was applied,
    ///     <see langword=""null"" /> otherwise.
    /// </returns>
    public static IConventionEntityTypeBuilder? UseHistoryTableName(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string name,
        bool fromDataAnnotation = false)
    {
        if (entityTypeBuilder.CanSetHistoryTableName(name, fromDataAnnotation))
        {
            entityTypeBuilder.Metadata.SetHistoryTableName(name, fromDataAnnotation);

            return entityTypeBuilder;
        }

        return null;
    }

    /// <summary>
    ///     Returns a value indicating whether the given history table name can be set for the entity.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""name"">The name of the history table.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns><see langword=""true"" /> if the mapped table can have history table name.</returns>
    public static bool CanSetHistoryTableName(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string name,
        bool fromDataAnnotation = false)
    {
        Check.NotNull(name, nameof(name));

        return entityTypeBuilder.CanSetAnnotation(SqlServerAnnotationNames.TemporalHistoryTableName, name, fromDataAnnotation);
    }

    /// <summary>
    ///     Configures a history table schema for the entity mapped to a temporal table.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity being configured.</param>
    /// <param name=""schema"">The schema of the history table.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns>
    ///     The same builder instance if the configuration was applied,
    ///     <see langword=""null"" /> otherwise.
    /// </returns>
    public static IConventionEntityTypeBuilder? UseHistoryTableSchema(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string? schema,
        bool fromDataAnnotation = false)
    {
        if (entityTypeBuilder.CanSetHistoryTableSchema(schema, fromDataAnnotation))
        {
            entityTypeBuilder.Metadata.SetHistoryTableSchema(schema, fromDataAnnotation);

            return entityTypeBuilder;
        }

        return null;
    }

    /// <summary>
    ///     Returns a value indicating whether the mapped table can have history table schema.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""schema"">The schema of the history table.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns><see langword=""true"" /> if the mapped table can have history table schema.</returns>
    public static bool CanSetHistoryTableSchema(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string? schema,
        bool fromDataAnnotation = false)
        => entityTypeBuilder.CanSetAnnotation(SqlServerAnnotationNames.TemporalHistoryTableSchema, schema, fromDataAnnotation);

    /// <summary>
    ///     Configures a period start property for the entity mapped to a temporal table.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity being configured.</param>
    /// <param name=""propertyName"">The name of the period start property.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns>
    ///     The same builder instance if the configuration was applied,
    ///     <see langword=""null"" /> otherwise.
    /// </returns>
    public static IConventionEntityTypeBuilder? HasPeriodStart(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string? propertyName,
        bool fromDataAnnotation = false)
    {
        if (entityTypeBuilder.CanSetPeriodStart(propertyName, fromDataAnnotation))
        {
            entityTypeBuilder.Metadata.SetPeriodStartPropertyName(propertyName, fromDataAnnotation);

            return entityTypeBuilder;
        }

        return null;
    }

    /// <summary>
    ///     Returns a value indicating whether the mapped table can have period start property.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""propertyName"">The name of the period start property.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns><see langword=""true"" /> if the mapped table can have period start property.</returns>
    public static bool CanSetPeriodStart(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string? propertyName,
        bool fromDataAnnotation = false)
        => entityTypeBuilder.CanSetAnnotation(
            SqlServerAnnotationNames.TemporalPeriodStartPropertyName, propertyName, fromDataAnnotation);

    /// <summary>
    ///     Configures a period end property for the entity mapped to a temporal table.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity being configured.</param>
    /// <param name=""propertyName"">The name of the period end property.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns>
    ///     The same builder instance if the configuration was applied,
    ///     <see langword=""null"" /> otherwise.
    /// </returns>
    public static IConventionEntityTypeBuilder? HasPeriodEnd(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string? propertyName,
        bool fromDataAnnotation = false)
    {
        if (entityTypeBuilder.CanSetPeriodEnd(propertyName, fromDataAnnotation))
        {
            entityTypeBuilder.Metadata.SetPeriodEndPropertyName(propertyName, fromDataAnnotation);

            return entityTypeBuilder;
        }

        return null;
    }

    /// <summary>
    ///     Returns a value indicating whether the mapped table can have period end property.
    /// </summary>
    /// <remarks>
    ///     See <see href=""https://aka.ms/efcore-docs-temporal"">Using SQL Server temporal tables with EF Core</see>
    ///     for more information and examples.
    /// </remarks>
    /// <param name=""entityTypeBuilder"">The builder for the entity type being configured.</param>
    /// <param name=""propertyName"">The name of the period end property.</param>
    /// <param name=""fromDataAnnotation"">Indicates whether the configuration was specified using a data annotation.</param>
    /// <returns><see langword=""true"" /> if the mapped table can have period end property.</returns>
    public static bool CanSetPeriodEnd(
        this IConventionEntityTypeBuilder entityTypeBuilder,
        string? propertyName,
        bool fromDataAnnotation = false)
        => entityTypeBuilder.CanSetAnnotation(
            SqlServerAnnotationNames.TemporalPeriodEndPropertyName, propertyName, fromDataAnnotation);
}",0,"[439, 457, 334, 2000, 123, 439, 457, 2001, 2002, 40, 467, 2001, 2003, 44, 323, 2004, 61, 473, 41, 123, 2003, 46, 2005, 46, 2006, 40, 2004, 41, 59, 450, 2003, 59, 125, 439, 457, 2001, 60, 2007, 62, 2002, 60, 2007, 62, 40, 467, 2001, 60, 2007, 62, 2003, 44, 323, 2004, 61, 473, 41, 2008, 2007, 58, 334, 619, 40, 2001, 60, 2007, 62, 41, 2002, 40, 40, 2001, 41, 2003, 44, 2004, 41, 59, 439, 457, 2009, 2002, 40, 467, 2009, 2010, 44, 323, 2004, 61, 473, 41, 123, 2010, 46, 2011, 46, 2012, 40, 2004, 41, 59, 450, 2010, 59, 125, 439, 457, 2009, 60, 2007, 44, 2013, 62, 2002, 60, 2007, 44, 2013, 62, 40, 467, 2009, 60, 2007, 44, 2013, 62, 2010, 44, 323, 2004, 61, 473, 41, 2008, 2007, 58, 334, 2008, 2013, 58, 334, 619, 40, 2009, 60, 2007, 44, 2013, 62, 41, 2002, 40, 40, 2009, 41, 2010, 44, 2004, 41, 59, 439, 457, 2014, 63, 2002, 40, 467, 2014, 2003, 44, 323, 63, 2004, 44, 323, 2015, 61, 380, 41, 123, 392, 40, 2003, 46, 2016, 40, 2004, 44, 2015, 41, 41, 123, 2003, 46, 2017, 46, 2018, 40, 2004, 44, 2015, 41, 59, 450, 2003, 59, 125, 450, 424, 59, 125, 439, 457, 323, 2019, 40, 467, 2014, 2003, 44, 323, 63, 2004, 44, 323, 2015, 61, 380, 41, 619, 2003, 46, 2020, 40, 2021, 46, 2022, 44, 2004, 44, 2015, 41, 59, 439, 457, 2014, 63, 2023, 40, 467, 2014, 2003, 44, 323, 2024, 61, 473, 44, 323, 2015, 61, 380, 41, 123, 392, 40, 2003, 46, 2025, 40, 2024, 44, 2015, 41, 41, 123, 2003, 46, 2026, 46, 2027, 40, 2024, 44, 2015, 41, 59, 450, 2003, 59, 125, 450, 424, 59, 125, 439, 457, 323, 2028, 40, 467, 2014, 2003, 44, 323, 2024, 61, 473, 44, 323, 2015, 61, 380, 41, 619, 2003, 46, 2020, 40, 2021, 46, 2023, 44, 2024, 44, 2015, 41, 59, 439, 457, 2014, 63, 2029, 40, 467, 2014, 2003, 44, 461, 2030, 44, 323, 2015, 61, 380, 41, 123, 392, 40, 2003, 46, 2031, 40, 2030, 44, 2015, 41, 41, 123, 2003, 46, 2032, 46, 2033, 40, 2030, 44, 2015, 41, 59, 450, 2003, 59, 125, 450, 424, 59, 125, 439, 457, 323, 2034, 40, 467, 2014, 2003, 44, 461, 2030, 44, 323, 2015, 61, 380, 41, 123, 2035, 46, 2036, 40, 2030, 44, 2037, 40, 2030, 41, 41, 59, 450, 2003, 46, 2020, 40, 2021, 46, 2038, 44, 2030, 44, 2015, 41, 59, 125, 439, 457, 2014, 63, 2039, 40, 467, 2014, 2003, 44, 461, 63, 2040, 44, 323, 2015, 61, 380, 41, 123, 392, 40, 2003, 46, 2041, 40, 2040, 44, 2015, 41, 41, 123, 2003, 46, 2042, 46, 2043, 40, 2040, 44, 2015, 41, 59, 450, 2003, 59, 125, 450, 424, 59, 125, 439, 457, 323, 2044, 40, 467, 2014, 2003, 44, 461, 63, 2040, 44, 323, 2015, 61, 380, 41, 619, 2003, 46, 2020, 40, 2021, 46, 2045, 44, 2040, 44, 2015, 41, 59, 439, 457, 2014, 63, 2046, 40, 467, 2014, 2003, 44, 461, 63, 2047, 44, 323, 2015, 61, 380, 41, 123, 392, 40, 2003, 46, 2048, 40, 2047, 44, 2015, 41, 41, 123, 2003, 46, 2049, 46, 2050, 40, 2047, 44, 2015, 41, 59, 450, 2003, 59, 125, 450, 424, 59, 125, 439, 457, 323, 2051, 40, 467, 2014, 2003, 44, 461, 63, 2047, 44, 323, 2015, 61, 380, 41, 619, 2003, 46, 2020, 40, 2021, 46, 2052, 44, 2047, 44, 2015, 41, 59, 439, 457, 2014, 63, 2053, 40, 467, 2014, 2003, 44, 461, 63, 2047, 44, 323, 2015, 61, 380, 41, 123, 392, 40, 2003, 46, 2054, 40, 2047, 44, 2015, 41, 41, 123, 2003, 46, 2055, 46, 2056, 40, 2047, 44, 2015, 41, 59, 450, 2003, 59, 125, 450, 424, 59, 125, 439, 457, 323, 2057, 40, 467, 2014, 2003, 44, 461, 63, 2047, 44, 323, 2015, 61, 380, 41, 619, 2003, 46, 2020, 40, 2021, 46, 2058, 44, 2047, 44, 2015, 41, 59, 125]",0.6739336,1
14,87315,C#,"    internal class PipeServerManager : IDisposable
    {
        private static readonly string PipeName = ""QuickLook.App.Pipe."" + WindowsIdentity.GetCurrent().User?.Value;
        private static PipeServerManager _instance;

        private DispatcherOperation _lastOperation;

        private NamedPipeServerStream _server;

        public PipeServerManager()
        {
            _server = new NamedPipeServerStream(PipeName, PipeDirection.In);

            new Task(() =>
            {
                using (var reader = new StreamReader(_server))
                {
                    Debug.WriteLine(""PipeManager: Ready"");

                    while (true)
                    {
                        _server.WaitForConnection();
                        var msg = reader.ReadLine();

                        Debug.WriteLine($""PipeManager: {msg}"");

                        // dispatch message
                        if (MessageReceived(msg))
                            return;

                        _server.Disconnect();
                    }
                }
            }).Start();
        }

        public void Dispose()
        {
            GC.SuppressFinalize(this);

            if (_server != null)
                SendMessage(PipeMessages.Quit);
            _server?.Dispose();
            _server = null;
        }

        public static void SendMessage(string pipeMessage, string path = null)
        {
            if (path == null)
                path = """";

            try
            {
                using (var client = new NamedPipeClientStream(""."", PipeName, PipeDirection.Out))
                {
                    client.Connect();

                    using (var writer = new StreamWriter(client))
                    {
                        writer.WriteLine($""{pipeMessage}|{path}"");
                        writer.Flush();
                    }
                }
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.ToString());
            }
        }

        private bool MessageReceived(string msg)
        {
            var split = msg.IndexOf('|');
            if (split == -1)
                return false;

            if (_lastOperation != null && _lastOperation.Status == DispatcherOperationStatus.Pending)
            {
                _lastOperation.Abort();
                Debug.WriteLine(""Dispatcher task canceled"");
            }

            var wParam = msg.Substring(0, split);
            var lParam = msg.Substring(split + 1, msg.Length - split - 1);

            switch (wParam)
            {
                case PipeMessages.RunAndClose:
                    Application.Current.Dispatcher.BeginInvoke(
                        new Action(() => ViewWindowManager.GetInstance().RunAndClosePreview()),
                        DispatcherPriority.ApplicationIdle);
                    return false;
                case PipeMessages.Invoke:
                    _lastOperation = Application.Current.Dispatcher.BeginInvoke(
                        new Action(() => ViewWindowManager.GetInstance().InvokePreview(lParam)),
                        DispatcherPriority.ApplicationIdle);
                    return false;
                case PipeMessages.Switch:
                    _lastOperation = Application.Current.Dispatcher.BeginInvoke(
                        new Action(() => ViewWindowManager.GetInstance().SwitchPreview(lParam)),
                        DispatcherPriority.ApplicationIdle);
                    return false;
                case PipeMessages.Toggle:
                    _lastOperation = Application.Current.Dispatcher.BeginInvoke(
                        new Action(() => ViewWindowManager.GetInstance().TogglePreview(lParam)),
                        DispatcherPriority.ApplicationIdle);
                    return false;
                case PipeMessages.Forget:
                    Application.Current.Dispatcher.BeginInvoke(
                        new Action(() => ViewWindowManager.GetInstance().ForgetCurrentWindow()),
                        DispatcherPriority.ApplicationIdle);
                    return false;
                case PipeMessages.Close:
                    Application.Current.Dispatcher.BeginInvoke(
                        new Action(() => ViewWindowManager.GetInstance().ClosePreview()),
                        DispatcherPriority.ApplicationIdle);
                    return false;
                case PipeMessages.Quit:
                    return true;
                default:
                    return false;
            }
        }

        public static PipeServerManager GetInstance()
        {
            return _instance ?? (_instance = new PipeServerManager());
        }
    }",1,"[406, 334, 2000, 58, 2001, 123, 437, 457, 441, 461, 2002, 61, 43, 2003, 46, 2004, 40, 41, 46, 2005, 634, 2006, 59, 437, 457, 2000, 2007, 59, 437, 2008, 2009, 59, 437, 2010, 2011, 59, 439, 2000, 40, 41, 123, 2011, 61, 418, 2010, 40, 2002, 44, 2012, 46, 2013, 41, 59, 418, 2014, 40, 40, 41, 619, 123, 489, 40, 490, 2015, 61, 418, 2016, 40, 2011, 41, 41, 123, 2017, 46, 2018, 40, 41, 59, 496, 40, 473, 41, 123, 2011, 46, 2019, 40, 41, 59, 490, 2020, 61, 2015, 46, 2021, 40, 41, 59, 2017, 46, 2018, 40, 36, 41, 59, 392, 40, 2022, 40, 2020, 41, 41, 450, 59, 2011, 46, 2023, 40, 41, 59, 125, 125, 125, 41, 46, 2024, 40, 41, 59, 125, 439, 492, 2025, 40, 41, 123, 2026, 46, 2027, 40, 467, 41, 59, 392, 40, 2011, 631, 424, 41, 2028, 40, 2029, 46, 2030, 41, 59, 2011, 634, 2025, 40, 41, 59, 2011, 61, 424, 59, 125, 439, 457, 492, 2031, 40, 461, 2032, 44, 461, 2033, 61, 424, 41, 123, 392, 40, 2033, 614, 424, 41, 2033, 61, 59, 474, 123, 489, 40, 490, 2034, 61, 418, 2035, 40, 44, 2002, 44, 2036, 46, 2037, 41, 41, 123, 2034, 46, 2038, 40, 41, 59, 489, 40, 490, 2039, 61, 418, 2040, 40, 2034, 41, 41, 123, 2039, 46, 2041, 40, 36, 41, 59, 2039, 46, 2042, 40, 41, 59, 125, 125, 125, 329, 40, 2043, 2044, 41, 123, 2045, 46, 2046, 40, 2044, 46, 2047, 40, 41, 41, 59, 125, 125, 437, 323, 2048, 40, 461, 2049, 41, 123, 490, 2050, 61, 2049, 46, 2051, 40, 607, 41, 59, 392, 40, 2050, 614, 45, 1501, 41, 450, 380, 59, 392, 40, 2009, 631, 424, 605, 2009, 46, 2052, 614, 2053, 46, 2054, 41, 123, 2009, 46, 2055, 40, 41, 59, 2056, 46, 2057, 40, 41, 59, 125, 490, 2058, 61, 2049, 46, 2059, 40, 1500, 44, 2050, 41, 59, 490, 2060, 61, 2049, 46, 2059, 40, 2050, 43, 1501, 44, 2049, 46, 2061, 45, 2050, 45, 1501, 41, 59, 464, 40, 2058, 41, 123, 328, 2062, 46, 2063, 58, 2064, 46, 2065, 46, 2066, 46, 2067, 40, 418, 2068, 40, 40, 41, 619, 2069, 46, 2070, 40, 41, 46, 2071, 40, 41, 41, 44, 2072, 46, 2073, 41, 59, 450, 380, 59, 328, 2062, 46, 2074, 58, 2009, 61, 2064, 46, 2065, 46, 2066, 46, 2067, 40, 418, 2068, 40, 40, 41, 619, 2069, 46, 2070, 40, 41, 46, 2075, 40, 2060, 41, 41, 44, 2072, 46, 2073, 41, 59, 450, 380, 59, 328, 2062, 46, 2076, 58, 2009, 61, 2064, 46, 2065, 46, 2066, 46, 2067, 40, 418, 2068, 40, 40, 41, 619, 2069, 46, 2070, 40, 41, 46, 2077, 40, 2060, 41, 41, 44, 2072, 46, 2073, 41, 59, 450, 380, 59, 328, 2062, 46, 2078, 58, 2009, 61, 2064, 46, 2065, 46, 2066, 46, 2067, 40, 418, 2068, 40, 40, 41, 619, 2069, 46, 2070, 40, 41, 46, 2079, 40, 2060, 41, 41, 44, 2072, 46, 2073, 41, 59, 450, 380, 59, 328, 2062, 46, 2080, 58, 2064, 46, 2065, 46, 2066, 46, 2067, 40, 418, 2068, 40, 40, 41, 619, 2069, 46, 2070, 40, 41, 46, 2081, 40, 41, 41, 44, 2072, 46, 2073, 41, 59, 450, 380, 59, 328, 2062, 46, 2082, 58, 2064, 46, 2065, 46, 2066, 46, 2067, 40, 418, 2068, 40, 40, 41, 619, 2069, 46, 2070, 40, 41, 46, 2083, 40, 41, 41, 44, 2072, 46, 2073, 41, 59, 450, 380, 59, 328, 2062, 46, 2084, 58, 450, 473, 59, 349, 58, 450, 380, 59, 125, 125, 439, 457, 2000, 2085, 40, 41, 123, 450, 2007, 633, 40, 2007, 61, 418, 2000, 40, 41, 41, 59, 125, 125]",0.33114395,0
15,71091,C#,"    public class SqliteDataReaderTest
    {
        [Fact]
        public void Depth_returns_zero()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    Assert.Equal(0, reader.Depth);
                }
            }
        }

        [Fact]
        public void FieldCount_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    Assert.Equal(1, reader.FieldCount);
                }
            }
        }

        [Fact]
        public void FieldCount_throws_when_closed()
            => X_throws_when_closed(
                r =>
                {
                    var x = r.FieldCount;
                }, ""FieldCount"");

        [Fact]
        public void FieldCount_returns_zero_when_non_query()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""CREATE TABLE dual(dummy);""))
                {
                    Assert.Equal(0, reader.FieldCount);
                }
            }
        }

        [Fact]
        public void GetBoolean_works()
            => GetX_works(
                ""SELECT 1;"",
                r => r.GetBoolean(0),
                true);

        [Fact]
        public void GetBoolean_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetBoolean(0), nameof(SqliteDataReader.GetBoolean));
        }

        [Fact]
        public void GetBoolean_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetBoolean(0));

        [Fact]
        public void GetByte_works()
            => GetX_works(
                ""SELECT 1;"",
                r => r.GetByte(0),
                (byte)1);

        [Fact]
        public void GetByte_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetByte(0), nameof(SqliteDataReader.GetByte));
        }

        [Fact]
        public void GetByte_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetByte(0));

        [Fact]
        public void GetBytes_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");
                connection.ExecuteNonQuery(""INSERT INTO Test VALUES(x'427E5743');"");
                connection.ExecuteNonQuery(""INSERT INTO Test VALUES(x'538F6854');"");
                connection.ExecuteNonQuery(""INSERT INTO Test VALUES(x'649A7965');"");

                using (var reader = connection.ExecuteReader(""SELECT Value FROM Test;""))
                {
                    var list = new List<byte[]>();
                    while (reader.Read())
                    {
                        var buffer = new byte[6];
                        var bytesRead = reader.GetBytes(0, 0, buffer, 0, buffer.Length);
                        Assert.Equal(4, bytesRead);
                        list.Add(buffer);
                    }

                    Assert.Equal(3, list.Count);
                    Assert.Equal(new byte[6] { 0x42, 0x7E, 0x57, 0x43, 0, 0 }, list[0]);
                    Assert.Equal(new byte[6] { 0x53, 0x8F, 0x68, 0x54, 0, 0 }, list[1]);
                    Assert.Equal(new byte[6] { 0x64, 0x9A, 0x79, 0x65, 0, 0 }, list[2]);
                }
            }
        }

        [Fact]
        public void GetBytes_works_streaming()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES (x'01020304');"");

                using (var reader = connection.ExecuteReader(""SELECT rowid, Value FROM Data;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var buffer = new byte[2];
                    reader.GetBytes(1, 1, buffer, 0, buffer.Length);
                    Assert.Equal(new byte[] { 0x02, 0x03 }, buffer);
                }
            }
        }

        [Fact]
        public void GetBytes_NullBuffer()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT x'427E5743';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    long bytesRead = reader.GetBytes(0, 1, null, 0, 3);

                    Assert.Equal(4, bytesRead);
                }
            }
        }

        [Fact]
        public void GetBytes_works_with_overflow()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT x'427E5743';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var hugeBuffer = new byte[1024];
                    long bytesRead = reader.GetBytes(0, 1, hugeBuffer, 0, hugeBuffer.Length);
                    Assert.Equal(3, bytesRead);

                    var correctBytes = new byte[3] { 0x7E, 0x57, 0x43 };
                    for (int i = 0; i < bytesRead; i++)
                    {
                        Assert.Equal(correctBytes[i], hugeBuffer[i]);
                    }
                }
            }
        }

        [Fact]
        public void GetBytes_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetBytes(0, 0, null, 0, 0), nameof(SqliteDataReader.GetBytes));
        }

        [Fact]
        public void GetBytes_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetBytes(0, 0, null, 0, 0));

        [Fact]
        public void GetChar_works()
            => GetX_works(
                ""SELECT 1;"",
                r => r.GetChar(0),
                (char)1);

        [Fact]
        public void GetChar_works_with_text()
            => GetX_works(
                ""SELECT 'A';"",
                r => r.GetChar(0),
                'A');

        [Fact]
        public void GetChar_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetChar(0), nameof(SqliteDataReader.GetChar));
        }

        [Fact]
        public void GetChar_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetChar(0));

        [Fact]
        public void GetChars_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'têst';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var buffer = new char[2];
                    reader.GetChars(0, 1, buffer, 0, buffer.Length);
                    Assert.Equal(new char[2] { 'ê', 's' }, buffer);
                }
            }
        }

        [Fact]
        public void GetChars_works_when_buffer_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'têst';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    long bytesRead = reader.GetChars(0, 1, null, 0, 3);

                    Assert.Equal(4, bytesRead);
                }
            }
        }

        [Fact]
        public void GetChars_works_with_overflow()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'têst';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var hugeBuffer = new char[1024];
                    long charsRead = reader.GetChars(0, 1, hugeBuffer, 0, hugeBuffer.Length);
                    Assert.Equal(3, charsRead);

                    var correctBytes = new char[3] { 'ê', 's', 't' };
                    for (int i = 0; i < charsRead; i++)
                    {
                        Assert.Equal(correctBytes[i], hugeBuffer[i]);
                    }
                }
            }
        }

        [Fact]
        public void GetChars_throws_when_dataOffset_out_of_range()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'têst';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var buffer = new char[1];
                    var ex = Assert.Throws<ArgumentOutOfRangeException>(
                        () => reader.GetChars(0, 5, buffer, 0, buffer.Length));
                    Assert.Equal(""dataOffset"", ex.ParamName);
                }
            }
        }

        [Fact]
        public void GetChars_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetChars(0, 0, null!, 0, 0), nameof(SqliteDataReader.GetChars));
        }

        [Fact]
        public void GetChars_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetChars(0, 0, null!, 0, 0));

        [Fact]
        public void GetChars_works_streaming()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES ('têst');"");

                using (var reader = connection.ExecuteReader(""SELECT rowid, Value FROM Data;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var buffer = new char[2];
                    reader.GetChars(1, 1, buffer, 0, buffer.Length);
                    Assert.Equal(new[] { 'ê', 's' }, buffer);
                }
            }
        }

        [Fact]
        public void GetStream_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT x'427E5743';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var stream = reader.GetStream(0);
                    Assert.IsType<MemoryStream>(stream);
                    Assert.Equal(0x42, stream.ReadByte());
                    var stream2 = reader.GetStream(0);
                    Assert.Equal(0x42, stream2.ReadByte());
                    Assert.Equal(0x7E, stream.ReadByte());
                }
            }
        }

        [Fact]
        public void GetStream_works_with_text()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'abcdefghi';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var stream = reader.GetStream(0);
                    Assert.Equal((byte)'a', stream.ReadByte());
                    var stream2 = reader.GetStream(0);
                    Assert.Equal((byte)'a', stream2.ReadByte());
                    Assert.Equal((byte)'b', stream.ReadByte());
                }
            }
        }

        [Fact]
        public void GetStream_works_with_int()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 12;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var stream = reader.GetStream(0);
                    Assert.Equal((byte)'1', stream.ReadByte());
                    var stream2 = reader.GetStream(0);
                    Assert.Equal((byte)'1', stream2.ReadByte());
                    Assert.Equal((byte)'2', stream.ReadByte());
                }
            }
        }

        [Fact]
        public void GetStream_works_with_float()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1.2;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var stream = reader.GetStream(0);
                    Assert.Equal((byte)'1', stream.ReadByte());
                    var stream2 = reader.GetStream(0);
                    Assert.Equal((byte)'1', stream2.ReadByte());
                    Assert.Equal((byte)'.', stream.ReadByte());
                    Assert.Equal((byte)'2', stream.ReadByte());
                }
            }
        }

        [Theory]
        [InlineData(""CREATE TABLE DataTable (Id INTEGER, Data BLOB);"", ""SELECT rowid, Data FROM DataTable WHERE Id = 5"")]
        [InlineData(""CREATE TABLE DataTable (Id INTEGER PRIMARY KEY, Data BLOB);"", ""SELECT rowid, Data FROM DataTable WHERE Id = 5"")]
        [InlineData(""CREATE TABLE DataTable (Id INTEGER PRIMARY KEY, Data BLOB);"", ""SELECT Id, Data FROM DataTable WHERE Id = 5"")]
        public void GetStream_Blob_works(string createTableCmd, string selectCmd)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(
                    createTableCmd + ""INSERT INTO DataTable VALUES (5, X'01020304');"");

                var selectCommand = connection.CreateCommand();
                selectCommand.CommandText = selectCmd;
                using (var reader = selectCommand.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    using (var sourceStream = reader.GetStream(1))
                    {
                        Assert.IsType<SqliteBlob>(sourceStream);
                        var buffer = new byte[4];
                        var bytesRead = sourceStream.Read(buffer, 0, 4);
                        Assert.Equal(4, bytesRead);
                        Assert.Equal(new byte[] { 0x01, 0x02, 0x03, 0x04 }, buffer);
                    }
                }
            }
        }

        [Fact]
        public void GetStream_works_when_composite_pk()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(
                    @""CREATE TABLE DataTable (Id1 INTEGER, Id2 INTEGER, Data BLOB, PRIMARY KEY (Id1, Id2));
                    INSERT INTO DataTable VALUES (5, 6, X'01020304');"");

                var selectCommand = connection.CreateCommand();
                selectCommand.CommandText = ""SELECT Id1, Id2, Data FROM DataTable WHERE Id1 = 5 AND Id2 = 6"";
                using (var reader = selectCommand.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    using (var sourceStream = reader.GetStream(2))
                    {
                        Assert.IsType<MemoryStream>(sourceStream);
                        var buffer = new byte[4];
                        var bytesRead = sourceStream.Read(buffer, 0, 4);
                        Assert.Equal(4, bytesRead);
                        Assert.Equal(new byte[] { 0x01, 0x02, 0x03, 0x04 }, buffer);
                    }
                }
            }
        }

        [Fact]
        public void GetStream_works_when_composite_pk_and_rowid()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(
                    @""CREATE TABLE DataTable (Id1 INTEGER, Id2 INTEGER, Data BLOB, PRIMARY KEY (Id1, Id2));
                    INSERT INTO DataTable VALUES (5, 6, X'01020304');"");

                var selectCommand = connection.CreateCommand();
                selectCommand.CommandText = ""SELECT Id1, Id2, rowid, Data FROM DataTable WHERE Id1 = 5 AND Id2 = 6"";
                using (var reader = selectCommand.ExecuteReader())
                {
                    Assert.True(reader.Read());
                    using (var sourceStream = reader.GetStream(3))
                    {
                        Assert.IsType<SqliteBlob>(sourceStream);
                        var buffer = new byte[4];
                        var bytesRead = sourceStream.Read(buffer, 0, 4);
                        Assert.Equal(4, bytesRead);
                        Assert.Equal(new byte[] { 0x01, 0x02, 0x03, 0x04 }, buffer);
                    }
                }
            }
        }

        [Fact]
        public void GetStream_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetStream(0), nameof(SqliteDataReader.GetStream));
        }

        [Fact]
        public void GetStream_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetStream(0));

        [Fact]
        public void GetTextReader_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'test';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    using (var textReader = reader.GetTextReader(0))
                    {
                        Assert.IsType<MemoryStream>(Assert.IsType<StreamReader>(textReader).BaseStream);
                        Assert.Equal(""test"", textReader.ReadToEnd());
                    }
                }
            }
        }

        [Fact]
        public void GetTextReader_works_when_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT NULL;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    using (var textReader = reader.GetTextReader(0))
                    {
                        Assert.IsType<StringReader>(textReader);
                        Assert.Empty(textReader.ReadToEnd());
                    }
                }
            }
        }

        [Fact]
        public void GetTextReader_works_streaming()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Data (Value); INSERT INTO Data VALUES ('test');"");

                using (var reader = connection.ExecuteReader(""SELECT rowid, Value FROM Data;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    using (var textReader = reader.GetTextReader(1))
                    {
                        Assert.IsType<SqliteBlob>(Assert.IsType<StreamReader>(textReader).BaseStream);
                        Assert.Equal(""test"", textReader.ReadToEnd());
                    }
                }
            }
        }

        [Fact]
        public void GetDateTime_works_with_text()
            => GetX_works(
                ""SELECT '2014-04-15 10:47:16';"",
                r => r.GetDateTime(0),
                new DateTime(2014, 4, 15, 10, 47, 16));

        [Fact]
        public void GetDateTime_works_with_real()
            => GetX_works(
                ""SELECT julianday('2013-10-07 08:23:19.120');"",
                r => r.GetDateTime(0),
                new DateTime(2013, 10, 7, 8, 23, 19, 120));

        [Fact]
        public void GetDateTime_works_with_integer()
            => GetX_works(
                ""SELECT CAST(julianday('2013-10-07 12:00') AS INTEGER);"",
                r => r.GetDateTime(0),
                new DateTime(2013, 10, 7, 12, 0, 0));

        [Fact]
        public void GetDateTime_throws_when_null()
            => GetX_throws_when_null(r => r.GetDateTime(0));

        [Fact]
        public void GetDateTime_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetDateTime(0), nameof(SqliteDataReader.GetDateTime));
        }

        [Fact]
        public void GetDateTime_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetDateTime(0));

        [Fact]
        public void GetDateTimeOffset_works_with_text()
            => GetX_works(
                ""SELECT '2014-04-15 10:47:16';"",
                r => ((SqliteDataReader)r).GetDateTimeOffset(0),
                new DateTimeOffset(new DateTime(2014, 4, 15, 10, 47, 16)));

        [Fact]
        public void GetDateTimeOffset_works_with_real()
            => GetX_works(
                ""SELECT julianday('2013-10-07 08:23:19.120');"",
                r => ((SqliteDataReader)r).GetDateTimeOffset(0),
                new DateTimeOffset(new DateTime(2013, 10, 7, 8, 23, 19, 120)));

        [Fact]
        public void GetDateTimeOffset_works_with_integer()
            => GetX_works(
                ""SELECT CAST(julianday('2013-10-07 12:00') AS INTEGER);"",
                r => ((SqliteDataReader)r).GetDateTimeOffset(0),
                new DateTimeOffset(new DateTime(2013, 10, 7, 12, 0, 0)));

        [Fact]
        public void GetDateTimeOffset_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetDateTimeOffset(0), nameof(SqliteDataReader.GetDateTimeOffset));
        }

        [Fact]
        public void GetDateTimeOffset_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetDateTimeOffset(0));

        [Fact]
        public void GetTimeSpan_works_with_text()
            => GetX_works(
                ""SELECT '12:06:29';"",
                r => ((SqliteDataReader)r).GetTimeSpan(0),
                new TimeSpan(12, 06, 29));

        [Fact]
        public void GetTimeSpan_works_with_real()
            => GetX_works(
                ""SELECT julianday('2013-10-12 09:25:22.120') - julianday('2013-10-07 08:23:19');"",
                r => ((SqliteDataReader)r).GetTimeSpan(0),
                TimeSpan.FromDays(5.04309166688472));

        [Fact]
        public void GetTimeSpan_works_with_integer()
            => GetX_works(
                ""SELECT CAST(julianday('2017-08-31') - julianday('1776-07-04') AS INTEGER);"",
                r => ((SqliteDataReader)r).GetTimeSpan(0),
                new TimeSpan(88081, 0, 0, 0));

        [Fact]
        public void GetTimeSpan_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetTimeSpan(0), nameof(SqliteDataReader.GetTimeSpan));
        }

        [Fact]
        public void GetTimeSpan_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetTimeSpan(0));

        [Fact]
        public void GetDateTimeOffset_throws_when_null()
            => GetX_throws_when_null(r => ((SqliteDataReader)r).GetDateTimeOffset(0));

        [Fact]
        public void GetFieldValue_of_DateOnly_works()
            => GetFieldValue_works(
                ""SELECT '2014-04-15';"",
                new DateOnly(2014, 4, 15));

        [Fact]
        public void GetFieldValue_of_DateOnly_works_with_real()
            => GetFieldValue_works(
                ""SELECT julianday('2014-04-15');"",
                new DateOnly(2014, 4, 15));

        [Fact]
        public void GetFieldValue_of_TimeOnly_works()
            => GetFieldValue_works(
                ""SELECT '13:10:15';"",
                new TimeOnly(13, 10, 15));

        [Fact]
        public void GetFieldValue_of_TimeOnly_works_with_milliseconds()
            => GetFieldValue_works(
                ""SELECT '13:10:15.5';"",
                new TimeOnly(13, 10, 15, 500));

        [Theory]
        [InlineData(""SELECT 1;"", ""INTEGER"")]
        [InlineData(""SELECT 3.14;"", ""REAL"")]
        [InlineData(""SELECT 'test';"", ""TEXT"")]
        [InlineData(""SELECT X'7E57';"", ""BLOB"")]
        [InlineData(""SELECT NULL;"", ""BLOB"")]
        public void GetDataTypeName_works(string sql, string expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(sql))
                {
                    Assert.Equal(expected, reader.GetDataTypeName(0));
                }
            }
        }

        [Fact]
        public void GetDataTypeName_works_when_column()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Person ( Name nvarchar(4000) );"");

                using (var reader = connection.ExecuteReader(""SELECT Name FROM Person;""))
                {
                    Assert.Equal(""nvarchar"", reader.GetDataTypeName(0));
                }
            }
        }

        [Fact]
        public void GetDataTypeName_throws_when_ordinal_out_of_range()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var ex = Assert.Throws<ArgumentOutOfRangeException>(() => reader.GetDataTypeName(1));

                    Assert.Equal(""ordinal"", ex.ParamName);
                    Assert.Equal(1, ex.ActualValue);
                }
            }
        }

        [Fact]
        public void GetDataTypeName_throws_when_closed()
            => X_throws_when_closed(r => r.GetDataTypeName(0), ""GetDataTypeName"");

        [Fact]
        public void GetDataTypeName_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetDataTypeName(0));

        [Theory]
        [InlineData(""3.14"", 3.14)]
        [InlineData(""1.0e-2"", 0.01)]
        public void GetDecimal_works(string input, decimal expected)
            => GetX_works(
                ""SELECT '"" + input + ""';"",
                r => r.GetDecimal(0),
                expected);

        [Fact]
        public void GetDecimal_throws_when_null()
            => GetX_throws_when_null(r => r.GetDecimal(0));

        [Fact]
        public void GetDecimal_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetDecimal(0), nameof(SqliteDataReader.GetDecimal));
        }

        [Fact]
        public void GetDecimal_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetDecimal(0));

        [Fact]
        public void GetDouble_throws_when_null()
            => GetX_throws_when_null(
                r => r.GetDouble(0));

        [Fact]
        public void GetDouble_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetDouble(0), nameof(SqliteDataReader.GetDouble));
        }

        [Fact]
        public void GetDouble_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetDouble(0));

        [Fact]
        public void GetEnumerator_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.NotNull(reader.GetEnumerator());
                }
            }
        }

        [Theory]
        [InlineData(""SELECT 1;"", true)]
        [InlineData(""SELECT 1;"", (byte)1)]
        [InlineData(""SELECT 1;"", (char)1)]
        [InlineData(""SELECT 3.14;"", 3.14)]
        [InlineData(""SELECT 3;"", 3f)]
        [InlineData(""SELECT 1;"", 1)]
        [InlineData(""SELECT 1;"", 1L)]
        [InlineData(""SELECT 1;"", (sbyte)1)]
        [InlineData(""SELECT 1;"", (short)1)]
        [InlineData(""SELECT 'test';"", ""test"")]
        [InlineData(""SELECT 1;"", 1u)]
        [InlineData(""SELECT 1;"", 1ul)]
        [InlineData(""SELECT 1;"", (ushort)1)]
        public void GetFieldValue_works<T>(string sql, T expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(sql))
                {
                    var hasData = reader.Read();

                    Assert.True(hasData);
                    Assert.Equal(expected, reader.GetFieldValue<T>(0));
                }
            }
        }

        [Fact]
        public void GetFieldValue_of_byteArray_works()
            => GetFieldValue_works(
                ""SELECT X'7E57';"",
                new byte[] { 0x7e, 0x57 });

        [Fact]
        public void GetFieldValue_of_byteArray_empty()
            => GetFieldValue_works(
                ""SELECT X'';"",
                new byte[0]);

        [Fact]
        public void GetFieldValue_of_byteArray_throws_when_null()
            => GetX_throws_when_null(
                r => r.GetFieldValue<byte[]>(0));

        [Fact]
        public void GetFieldValue_of_DateTime_works()
            => GetFieldValue_works(
                ""SELECT '2014-04-15 11:58:13';"",
                new DateTime(2014, 4, 15, 11, 58, 13));

        [Fact]
        public void GetFieldValue_of_DateTimeOffset_works()
            => GetFieldValue_works(
                ""SELECT '2014-04-15 11:58:13-08:00';"",
                new DateTimeOffset(2014, 4, 15, 11, 58, 13, new TimeSpan(-8, 0, 0)));

        [Fact]
        public void GetFieldValue_of_DBNull_works()
            => GetFieldValue_works(
                ""SELECT NULL;"",
                DBNull.Value);

        [Fact]
        public void GetFieldValue_of_DBNull_throws_when_not_null()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var hasData = reader.Read();

                    Assert.True(hasData);
                    Assert.Throws<InvalidCastException>(() => reader.GetFieldValue<DBNull>(0));
                }
            }
        }

        [Fact]
        public void GetFieldValue_of_decimal_works()
            => GetFieldValue_works(
                ""SELECT '3.14';"",
                3.14m);

        [Fact]
        public void GetFieldValue_of_Enum_works()
            => GetFieldValue_works(
                ""SELECT 1;"",
                MyEnum.One);

        [Fact]
        public void GetFieldValue_of_Guid_works()
            => GetFieldValue_works(
                ""SELECT X'0E7E0DDC5D364849AB9B8CA8056BF93A';"",
                new Guid(""dc0d7e0e-365d-4948-ab9b-8ca8056bf93a""));

        [Fact]
        public void GetFieldValue_of_Nullable_works()
            => GetFieldValue_works(
                ""SELECT 1;"",
                (int?)1);

        [Fact]
        public void GetFieldValue_of_Stream_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT x'7E57';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var stream = reader.GetFieldValue<Stream>(0);
                    Assert.Equal(0x7E, stream.ReadByte());
                    Assert.Equal(0x57, stream.ReadByte());
                }
            }
        }

        [Fact]
        public void GetFieldValue_of_TextReader_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 'test';""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    using (var textReader = reader.GetFieldValue<TextReader>(0))
                    {
                        Assert.Equal(""test"", textReader.ReadToEnd());
                    }
                }
            }
        }

        [Fact]
        public void GetFieldValue_of_TimeSpan_works()
            => GetFieldValue_works(
                ""SELECT '12:06:29';"",
                new TimeSpan(12, 6, 29));

        [Fact]
        public void GetFieldValue_of_TimeSpan_throws_when_null()
            => GetX_throws_when_null(r => r.GetFieldValue<TimeSpan>(0));

        [Fact]
        public void GetFieldValue_throws_before_read()
            => X_throws_before_read(r => r.GetFieldValue<DBNull>(0));

        [Fact]
        public void GetFieldValue_throws_when_done()
            => X_throws_when_done(r => r.GetFieldValue<DBNull>(0));

        [Fact]
        public void GetFieldValue_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetFieldValue<long>(0), nameof(SqliteDataReader.GetFieldValue));
        }

        [Fact]
        public void GetFieldValue_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetFieldValue<long>(0));

        [Theory]
        [InlineData(byte.MinValue)]
        [InlineData(char.MinValue)]
        [InlineData(int.MinValue)]
        [InlineData(sbyte.MinValue)]
        [InlineData(short.MinValue)]
        [InlineData(uint.MinValue)]
        [InlineData(ushort.MinValue)]
        public void GetFieldValue_throws_on_overflow<T>(T minValue)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(
                    ""SELECT $minValue - 1;"",
                    new SqliteParameter(""$minValue"", minValue)))
                {
                    reader.Read();

                    Assert.Throws<OverflowException>(() => reader.GetFieldValue<T>(0));
                }
            }
        }

        [Theory]
        [InlineData(""SELECT 1;"", typeof(long))]
        [InlineData(""SELECT 3.14;"", typeof(double))]
        [InlineData(""SELECT 'test';"", typeof(string))]
        [InlineData(""SELECT X'7E57';"", typeof(byte[]))]
        [InlineData(""SELECT NULL;"", typeof(byte[]))]
        public void GetFieldType_works(string sql, Type expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(sql))
                {
                    Assert.Equal(expected, reader.GetFieldType(0));
                }
            }
        }

        [Theory]
        [InlineData(""TEXT"", typeof(string))]
        [InlineData(""CHARACTER(20)"", typeof(string))]
        [InlineData(""NVARCHAR(100)"", typeof(string))]
        [InlineData(""CLOB"", typeof(string))]
        [InlineData(""INTEGER"", typeof(long))]
        [InlineData(""BIGINT"", typeof(long))]
        [InlineData(""UNSIGNED BIG INT"", typeof(long))]
        [InlineData(""REAL"", typeof(double))]
        [InlineData(""DOUBLE"", typeof(double))]
        [InlineData(""FLOAT"", typeof(double))]
        [InlineData(""BLOB"", typeof(byte[]))]
        [InlineData("""", typeof(byte[]))]
        [InlineData(""NUMERIC"", typeof(string))]
        [InlineData(""DATETIME"", typeof(string))]
        public void GetFieldType_works_on_NULL(string type, Type expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery($""CREATE TABLE Test(Value {type});"");

                using (var reader = connection.ExecuteReader(""SELECT Value FROM Test;""))
                {
                    Assert.Equal(expected, reader.GetFieldType(0));
                }
            }
        }

        [Fact]
        public void GetFieldType_works_on_NULL_cached()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(Value FOOBAR);"");
                connection.ExecuteNonQuery(""INSERT INTO Test (Value) VALUES ('test'), (NULL);"");

                using (var reader = connection.ExecuteReader(""SELECT Value FROM Test;""))
                {
                    Assert.True(reader.Read());
                    Assert.Equal(typeof(string), reader.GetFieldType(0));
                    Assert.Equal(""test"", reader.GetValue(0));
                    Assert.True(reader.Read());
                    Assert.Equal(typeof(string), reader.GetFieldType(0));
                    Assert.Equal(DBNull.Value, reader.GetValue(0));
                }
            }
        }

        [Fact]
        public void GetFieldType_throws_when_ordinal_out_of_range()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var ex = Assert.Throws<ArgumentOutOfRangeException>(() => reader.GetFieldType(1));

                    Assert.Equal(""ordinal"", ex.ParamName);
                    Assert.Equal(1, ex.ActualValue);
                }
            }
        }

        [Fact]
        public void GetFieldType_throws_when_closed()
            => X_throws_when_closed(r => r.GetFieldType(0), ""GetFieldType"");

        [Fact]
        public void GetFieldType_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetFieldType(0));

        [Theory]
        [InlineData(""3"", 3f)]
        [InlineData(""9e999"", float.PositiveInfinity)]
        [InlineData(""-9e999"", float.NegativeInfinity)]
        public void GetFloat_works(string val, float result)
            => GetX_works(
                ""SELECT "" + val,
                r => r.GetFloat(0),
                result);

        [Fact]
        public void GetFloat_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetFloat(0), nameof(SqliteDataReader.GetFloat));
        }

        [Fact]
        public void GetFloat_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetFloat(0));

        [Theory]
        [InlineData(""2.0"", 2.0)]
        [InlineData(""9e999"", double.PositiveInfinity)]
        [InlineData(""-9e999"", double.NegativeInfinity)]
        [InlineData(""'3.14'"", 3.14)]
        [InlineData(""'1.2e-03'"", 0.0012)]
        public void GetDouble_works(string val, double result)
            => GetX_works(
                ""SELECT "" + val,
                r => r.GetDouble(0),
                result);

        [Fact]
        public void GetGuid_works_when_blob()
            => GetX_works(
                ""SELECT X'0E7E0DDC5D364849AB9B8CA8056BF93A';"",
                r => r.GetGuid(0),
                new Guid(""dc0d7e0e-365d-4948-ab9b-8ca8056bf93a""));

        [Fact]
        public void GetGuid_works_when_text_blob()
            => GetX_works(
                ""SELECT CAST('dc0d7e0e-365d-4948-ab9b-8ca8056bf93a' AS BLOB);"",
                r => r.GetGuid(0),
                new Guid(""dc0d7e0e-365d-4948-ab9b-8ca8056bf93a""));

        [Fact]
        public void GetGuid_works_when_text()
            => GetX_works(
                ""SELECT 'dc0d7e0e-365d-4948-ab9b-8ca8056bf93a';"",
                r => r.GetGuid(0),
                new Guid(""dc0d7e0e-365d-4948-ab9b-8ca8056bf93a""));

        [Fact]
        public void GetGuid_throws_when_null()
            => GetX_throws_when_null(r => r.GetGuid(0));

        [Fact]
        public void GetGuid_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetGuid(0), nameof(SqliteDataReader.GetGuid));
        }

        [Fact]
        public void GetGuid_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetGuid(0));

        [Fact]
        public void GetInt16_works()
            => GetX_works(
                ""SELECT 1;"",
                r => r.GetInt16(0),
                (short)1);

        [Fact]
        public void GetInt16_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetInt16(0), nameof(SqliteDataReader.GetInt16));
        }

        [Fact]
        public void GetInt16_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetInt16(0));

        [Fact]
        public void GetInt32_works()
            => GetX_works(
                ""SELECT 1;"",
                r => r.GetInt32(0),
                1);

        [Fact]
        public void GetInt32_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetInt32(0), nameof(SqliteDataReader.GetInt32));
        }

        [Fact]
        public void GetInt32_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetInt32(0));

        [Fact]
        public void GetInt64_works()
            => GetX_works(
                ""SELECT 1;"",
                r => r.GetInt64(0),
                1L);

        [Fact]
        public void GetInt64_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetInt64(0), nameof(SqliteDataReader.GetInt64));
        }

        [Fact]
        public void GetInt64_throws_when_null()
            => GetX_throws_when_null(
                r => r.GetInt64(0));

        [Fact]
        public void GetInt64_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetInt64(0));

        [Fact]
        public void GetName_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1 AS Id;""))
                {
                    Assert.Equal(""Id"", reader.GetName(0));

                    // NB: Repeated to use caching
                    Assert.Equal(""Id"", reader.GetName(0));
                }
            }
        }

        [Fact]
        public void GetName_throws_when_ordinal_out_of_range()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var ex = Assert.Throws<ArgumentOutOfRangeException>(() => reader.GetName(1));

                    Assert.Equal(""ordinal"", ex.ParamName);
                    Assert.Equal(1, ex.ActualValue);
                }
            }
        }

        [Fact]
        public void GetName_throws_when_closed()
            => X_throws_when_closed(r => r.GetName(0), ""GetName"");

        [Fact]
        public void GetName_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetName(0));

        [Fact]
        public void GetOrdinal_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1 AS Id;""))
                {
                    Assert.Equal(0, reader.GetOrdinal(""Id""));

                    // NB: Repeated to use caching
                    Assert.Equal(0, reader.GetOrdinal(""Id""));
                }
            }
        }

        [Fact]
        public void GetOrdinal_throws_when_out_of_range()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var ex = Assert.Throws<ArgumentOutOfRangeException>(() => reader.GetOrdinal(""Name""));
                    Assert.NotNull(ex.Message);
                    Assert.Equal(""name"", ex.ParamName);
                    Assert.Equal(""Name"", ex.ActualValue);
                }
            }
        }

        [Fact]
        public void GetOrdinal_throws_when_ambiguous()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");
            connection.Open();

            using var reader = connection.ExecuteReader(""SELECT 1 AS Id, 2 AS ID"");
            var ex = Assert.Throws<InvalidOperationException>(() => reader.GetOrdinal(""id""));

            Assert.Contains(Resources.AmbiguousColumnName(""id"", ""Id"", ""ID""), ex.Message);
        }

        [Fact]
        public void GetOrdinal_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetOrdinal(null!), nameof(SqliteDataReader.GetOrdinal));
        }

        [Fact]
        public void GetOrdinal_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetOrdinal(""dummy""));

        [Fact]
        public void GetString_works_utf8()
            => GetX_works(
                ""SELECT '测试测试测试';"",
                r => r.GetString(0),
                ""测试测试测试"");

        [Fact]
        public void GetFieldValue_works_utf8()
            => GetX_works(
                ""SELECT '测试测试测试';"",
                r => r.GetFieldValue<string>(0),
                ""测试测试测试"");

        [Fact]
        public void GetValue_to_string_works_utf8()
            => GetX_works(
                ""SELECT '测试测试测试';"",
                r => r.GetValue(0) as string,
                ""测试测试测试"");

        [Fact]
        public void GetString_works()
            => GetX_works(
                ""SELECT 'test';"",
                r => r.GetString(0),
                ""test"");

        [Fact]
        public void GetString_throws_when_null()
            => GetX_throws_when_null(
                r => r.GetString(0));

        [Fact]
        public void GetString_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetString(0), nameof(SqliteDataReader.GetString));
        }

        [Fact]
        public void GetString_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetString(0));

        [Theory]
        [InlineData(""SELECT 1;"", 1L)]
        [InlineData(""SELECT 3.14;"", 3.14)]
        [InlineData(""SELECT 'test';"", ""test"")]
        public void GetValue_works(string sql, object expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(sql))
                {
                    var hasData = reader.Read();

                    Assert.True(hasData);
                    Assert.Equal(expected, reader.GetValue(0));
                }
            }
        }

        [Fact]
        public void GetValue_works_when_blob()
            => GetValue_works(
                ""SELECT X'7E57';"",
                new byte[] { 0x7e, 0x57 });

        [Fact]
        public void GetValue_works_when_null()
            => GetValue_works(
                ""SELECT NULL;"",
                DBNull.Value);

        [Fact]
        public void GetValue_throws_before_read()
            => X_throws_before_read(r => r.GetValue(0));

        [Fact]
        public void GetValue_throws_when_done()
            => X_throws_when_done(r => r.GetValue(0));

        [Fact]
        public void GetValue_throws_when_closed()
            => X_throws_when_closed(r => r.GetValue(0), ""GetValue"");

        [Fact]
        public void GetValue_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetValue(0));

        [Fact]
        public void GetValues_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    // Array may be wider than row
                    var values = new object[2];
                    var result = reader.GetValues(values);

                    Assert.Equal(1, result);
                    Assert.Equal(1L, values[0]);
                }
            }
        }

        [Fact]
        public void GetValues_throws_when_too_narrow()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    var values = new object[0];
                    Assert.Throws<IndexOutOfRangeException>(() => reader.GetValues(values));
                }
            }
        }

        [Fact]
        public void GetValues_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetValues(null!), nameof(SqliteDataReader.GetValues));
        }

        [Fact]
        public void GetValues_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetValues(null!));

        [Fact]
        public void HasRows_returns_true_when_rows()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    Assert.True(reader.HasRows);
                }
            }
        }

        [Fact]
        public void HasRows_returns_false_when_no_rows()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1 WHERE 0 = 1;""))
                {
                    Assert.False(reader.HasRows);
                }
            }
        }

        [Fact]
        public void HasRows_works_when_batching()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1 WHERE 0 = 1; SELECT 1;""))
                {
                    Assert.False(reader.HasRows);

                    reader.NextResult();

                    Assert.True(reader.HasRows);
                }
            }
        }

        [Fact]
        public void IsClosed_returns_false_when_active()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    Assert.False(reader.IsClosed);
                }
            }
        }

        [Fact]
        public void IsClosed_returns_true_when_closed()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var reader = connection.ExecuteReader(""SELECT 1;"");
                reader.Close();

                Assert.True(reader.IsClosed);
            }
        }

        [Fact]
        public void IsDBNull_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT NULL;""))
                {
                    var hasData = reader.Read();

                    Assert.True(hasData);
                    Assert.True(reader.IsDBNull(0));
                }
            }
        }

        [Fact]
        public void IsDBNull_throws_before_read()
            => X_throws_before_read(r => r.IsDBNull(0));

        [Fact]
        public void IsDBNull_throws_when_done()
            => X_throws_when_done(r => r.IsDBNull(0));

        [Fact]
        public void IsDBNull_throws_when_closed()
            => X_throws_when_closed(r => r.IsDBNull(0), ""IsDBNull"");

        [Fact]
        public void IsDBNull_throws_when_non_query()
            => X_throws_when_non_query(r => r.IsDBNull(0));

        [Fact]
        public void Item_by_ordinal_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.Equal(1L, reader[0]);
                }
            }
        }

        [Fact]
        public void Item_by_ordinal_throws_when_non_query()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""CREATE TABLE dual(dummy);""))
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => reader[0]);
                    Assert.Equal(Resources.NoData, ex.Message);
                }
            }
        }

        [Theory]
        [InlineData(""SELECT 1 AS Id;"", ""Id"", 1L)]
        [InlineData(""SELECT 1 AS Id;"", ""id"", 1L)]
        [InlineData(""SELECT 1 AS Id, 2 AS id;"", ""id"", 2L)]
        public void Item_by_name_works(string query, string column, long expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(query))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.Equal(expected, reader[column]);
                }
            }
        }

        [Fact]
        public void Item_by_name_throws_when_non_query()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""CREATE TABLE dual(dummy);""))
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => reader[""dummy""]);
                    Assert.Equal(Resources.NoData, ex.Message);
                }
            }
        }

        [Fact]
        public void NextResult_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1; SELECT 2;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);
                    Assert.Equal(1L, reader.GetInt64(0));

                    var hasResults = reader.NextResult();
                    Assert.True(hasResults);

                    hasData = reader.Read();
                    Assert.True(hasData);
                    Assert.Equal(2L, reader.GetInt64(0));

                    hasResults = reader.NextResult();
                    Assert.False(hasResults);
                }
            }
        }

        [Fact]
        public void NextResult_can_be_called_more_than_once()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1;""))
                {
                    var hasResults = reader.NextResult();
                    Assert.False(hasResults);

                    hasResults = reader.NextResult();
                    Assert.False(hasResults);
                }
            }
        }

        [Fact]
        public void NextResult_skips_DML_statements()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");

                var sql = @""
                    SELECT 1;
                    INSERT INTO Test VALUES(1);
                    SELECT 2;"";
                using (var reader = connection.ExecuteReader(sql))
                {
                    var hasResults = reader.NextResult();
                    Assert.True(hasResults);

                    var hasData = reader.Read();
                    Assert.True(hasData);

                    Assert.Equal(2L, reader.GetInt64(0));
                }
            }
        }

        [Fact]
        public void NextResult_throws_on_error()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");
                connection.CreateFunction<string, long>(""throw"", message => throw new Exception(message));

                var sql = @""
                    SELECT 1;
                    SELECT throw('An error');
                    INSERT INTO Test VALUES (1);"";
                using (var reader = connection.ExecuteReader(sql))
                {
                    var ex = Assert.Throws<SqliteException>(() => reader.NextResult());
                    Assert.Contains(""An error"", ex.Message);
                }

                Assert.Equal(0L, connection.ExecuteScalar<long>(""SELECT count() FROM Test;""));
            }
        }

        [Fact]
        public void NextResult_throws_when_closed()
        {
            X_throws_when_closed(r => r.NextResult(), nameof(SqliteDataReader.NextResult));
        }

        [Fact]
        public void Read_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT 1 UNION SELECT 2;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);
                    Assert.Equal(1L, reader.GetInt64(0));

                    hasData = reader.Read();
                    Assert.True(hasData);
                    Assert.Equal(2L, reader.GetInt64(0));

                    hasData = reader.Read();
                    Assert.False(hasData);

                    hasData = reader.Read();
                    Assert.False(hasData);
                }
            }
        }

        [Fact]
        public void Read_throws_when_closed()
            => X_throws_when_closed(r => r.Read(), ""Read"");

        [Fact]
        public void Read_returns_false_when_non_query()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""CREATE TABLE dual(dummy);""))
                {
                    Assert.False(reader.Read());
                }
            }
        }

        [Fact]
        public void RecordsAffected_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");

                var reader = connection.ExecuteReader(""INSERT INTO Test VALUES(1);"");
                ((IDisposable)reader).Dispose();

                Assert.Equal(1, reader.RecordsAffected);
            }
        }

        [Fact]
        public void RecordsAffected_works_when_no_DDL()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var reader = connection.ExecuteReader(""SELECT 1;"");
                ((IDisposable)reader).Dispose();

                Assert.Equal(-1, reader.RecordsAffected);
            }
        }

        [Fact]
        public void RecordsAffected_works_during_enumeration()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");

                var reader = connection.ExecuteReader(
                    @""
                    SELECT 1;
                    INSERT INTO Test VALUES(1);
                    SELECT 1;
                    INSERT INTO Test VALUES(2);"");
                using (reader)
                {
                    Assert.Equal(-1, reader.RecordsAffected);
                    reader.NextResult();
                    Assert.Equal(1, reader.RecordsAffected);
                }

                Assert.Equal(2, reader.RecordsAffected);
            }
        }

        [Fact]
        public void GetSchemaTable_works()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(
                    ""CREATE TABLE Person (ID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT NOT NULL, Code INT UNIQUE);"");
                connection.ExecuteNonQuery(""INSERT INTO Person VALUES(101, 'John', 'Dee', 123);"");
                connection.ExecuteNonQuery(""INSERT INTO Person VALUES(105, 'Jane', 'Doe', 456);"");

                using (var reader = connection.ExecuteReader(""SELECT LastName, ID, Code, ID+1 AS IncID FROM Person;""))
                {
                    var schema = reader.GetSchemaTable();
                    Assert.True(schema.Columns.Contains(""ColumnName""));
                    Assert.True(schema.Columns.Contains(""ColumnOrdinal""));
                    Assert.True(schema.Columns.Contains(""ColumnSize""));
                    Assert.True(schema.Columns.Contains(""NumericPrecision""));
                    Assert.True(schema.Columns.Contains(""NumericScale""));
                    Assert.True(schema.Columns.Contains(""IsUnique""));
                    Assert.True(schema.Columns.Contains(""IsKey""));
                    Assert.True(schema.Columns.Contains(""BaseServerName""));
                    Assert.True(schema.Columns.Contains(""BaseCatalogName""));
                    Assert.True(schema.Columns.Contains(""BaseColumnName""));
                    Assert.True(schema.Columns.Contains(""BaseSchemaName""));
                    Assert.True(schema.Columns.Contains(""BaseTableName""));
                    Assert.True(schema.Columns.Contains(""DataType""));
                    Assert.True(schema.Columns.Contains(""DataTypeName""));
                    Assert.True(schema.Columns.Contains(""AllowDBNull""));
                    Assert.True(schema.Columns.Contains(""IsAliased""));
                    Assert.True(schema.Columns.Contains(""IsExpression""));
                    Assert.True(schema.Columns.Contains(""IsAutoIncrement""));
                    Assert.True(schema.Columns.Contains(""IsLong""));

                    Assert.Equal(4, schema.Rows.Count);

                    Assert.Equal(""LastName"", schema.Rows[0][""ColumnName""]);
                    Assert.Equal(0, schema.Rows[0][""ColumnOrdinal""]);
                    Assert.Equal(-1, schema.Rows[0][""ColumnSize""]);
                    Assert.Equal(DBNull.Value, schema.Rows[0][""NumericPrecision""]);
                    Assert.Equal(DBNull.Value, schema.Rows[0][""NumericScale""]);
                    Assert.False((bool)schema.Rows[0][""IsUnique""]);
                    Assert.False((bool)schema.Rows[0][""IsKey""]);
                    Assert.Equal("""", schema.Rows[0][""BaseServerName""]);
                    Assert.Equal(""main"", schema.Rows[0][""BaseCatalogName""]);
                    Assert.Equal(""LastName"", schema.Rows[0][""BaseColumnName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[0][""BaseSchemaName""]);
                    Assert.Equal(""Person"", schema.Rows[0][""BaseTableName""]);
                    Assert.Equal(typeof(string), schema.Rows[0][""DataType""]);
                    Assert.Equal(""TEXT"", schema.Rows[0][""DataTypeName""]);
                    Assert.False((bool)schema.Rows[0][""AllowDBNull""]);
                    Assert.False((bool)schema.Rows[0][""IsAliased""]);
                    Assert.False((bool)schema.Rows[0][""IsExpression""]);
                    Assert.False((bool)schema.Rows[0][""IsAutoIncrement""]);
                    Assert.Equal(DBNull.Value, schema.Rows[0][""IsLong""]);

                    Assert.Equal(""ID"", schema.Rows[1][""ColumnName""]);
                    Assert.Equal(1, schema.Rows[1][""ColumnOrdinal""]);
                    Assert.Equal(-1, schema.Rows[1][""ColumnSize""]);
                    Assert.Equal(DBNull.Value, schema.Rows[1][""NumericPrecision""]);
                    Assert.Equal(DBNull.Value, schema.Rows[1][""NumericScale""]);
                    Assert.False((bool)schema.Rows[1][""IsUnique""]);
                    Assert.True((bool)schema.Rows[1][""IsKey""]);
                    Assert.Equal("""", schema.Rows[1][""BaseServerName""]);
                    Assert.Equal(""main"", schema.Rows[1][""BaseCatalogName""]);
                    Assert.Equal(""ID"", schema.Rows[1][""BaseColumnName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[1][""BaseSchemaName""]);
                    Assert.Equal(""Person"", schema.Rows[1][""BaseTableName""]);
                    Assert.Equal(typeof(long), schema.Rows[1][""DataType""]);
                    Assert.Equal(""INTEGER"", schema.Rows[1][""DataTypeName""]);
                    Assert.True((bool)schema.Rows[1][""AllowDBNull""]);
                    Assert.False((bool)schema.Rows[1][""IsAliased""]);
                    Assert.False((bool)schema.Rows[1][""IsExpression""]);
                    Assert.False((bool)schema.Rows[1][""IsAutoIncrement""]);
                    Assert.Equal(DBNull.Value, schema.Rows[1][""IsLong""]);

                    Assert.Equal(""Code"", schema.Rows[2][""ColumnName""]);
                    Assert.Equal(2, schema.Rows[2][""ColumnOrdinal""]);
                    Assert.Equal(-1, schema.Rows[2][""ColumnSize""]);
                    Assert.Equal(DBNull.Value, schema.Rows[2][""NumericPrecision""]);
                    Assert.Equal(DBNull.Value, schema.Rows[2][""NumericScale""]);
                    Assert.True((bool)schema.Rows[2][""IsUnique""]);
                    Assert.False((bool)schema.Rows[2][""IsKey""]);
                    Assert.Equal("""", schema.Rows[2][""BaseServerName""]);
                    Assert.Equal(""main"", schema.Rows[2][""BaseCatalogName""]);
                    Assert.Equal(""Code"", schema.Rows[2][""BaseColumnName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[2][""BaseSchemaName""]);
                    Assert.Equal(""Person"", schema.Rows[2][""BaseTableName""]);
                    Assert.Equal(typeof(long), schema.Rows[2][""DataType""]);
                    Assert.Equal(""INT"", schema.Rows[2][""DataTypeName""]);
                    Assert.True((bool)schema.Rows[2][""AllowDBNull""]);
                    Assert.False((bool)schema.Rows[2][""IsAliased""]);
                    Assert.False((bool)schema.Rows[2][""IsExpression""]);
                    Assert.False((bool)schema.Rows[2][""IsAutoIncrement""]);
                    Assert.Equal(DBNull.Value, schema.Rows[2][""IsLong""]);

                    Assert.Equal(""IncID"", schema.Rows[3][""ColumnName""]);
                    Assert.Equal(3, schema.Rows[3][""ColumnOrdinal""]);
                    Assert.Equal(-1, schema.Rows[3][""ColumnSize""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""NumericPrecision""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""NumericScale""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""IsUnique""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""IsKey""]);
                    Assert.Equal("""", schema.Rows[3][""BaseServerName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""BaseCatalogName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""BaseColumnName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""BaseSchemaName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""BaseTableName""]);
                    Assert.Equal(typeof(long), schema.Rows[3][""DataType""]);
                    Assert.Equal(""INTEGER"", schema.Rows[3][""DataTypeName""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""AllowDBNull""]);
                    Assert.True((bool)schema.Rows[3][""IsAliased""]);
                    Assert.True((bool)schema.Rows[3][""IsExpression""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""IsAutoIncrement""]);
                    Assert.Equal(DBNull.Value, schema.Rows[3][""IsLong""]);
                }
            }
        }

        [Fact]
        public void GetSchemaTable_works_when_view()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(
                    @""CREATE VIEW dual AS SELECT 'X' AS dummy;"");

                using (var reader = connection.ExecuteReader(""SELECT * FROM dual;""))
                {
                    var schemaTable = reader.GetSchemaTable();
                    Assert.Equal(1, schemaTable.Rows.Count);
                    Assert.Equal(""dummy"", schemaTable.Rows[0][SchemaTableColumn.ColumnName]);
                }
            }
        }

        [Fact]
        public void GetSchemaTable_works_when_virtual_table()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE VIRTUAL TABLE dual USING fts3(dummy);"");

                using (var reader = connection.ExecuteReader(""SELECT * FROM dual;""))
                {
                    var schemaTable = reader.GetSchemaTable();
                    Assert.Equal(1, schemaTable.Rows.Count);
                    Assert.Equal(""dummy"", schemaTable.Rows[0][SchemaTableColumn.ColumnName]);
                }
            }
        }

        [Fact]
        public void GetSchemaTable_works_when_pragma()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""PRAGMA table_info('sqlite_master');""))
                {
                    var schemaTable = reader.GetSchemaTable();
                    Assert.Equal(6, schemaTable.Rows.Count);
                    Assert.Equal(""cid"", schemaTable.Rows[0][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""name"", schemaTable.Rows[1][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""type"", schemaTable.Rows[2][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""notnull"", schemaTable.Rows[3][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""dflt_value"", schemaTable.Rows[4][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""pk"", schemaTable.Rows[5][SchemaTableColumn.ColumnName]);
                }
            }
        }

        [Fact]
        public void GetSchemaTable_works_when_eponymous_virtual_table()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT * FROM pragma_table_info('sqlite_master');""))
                {
                    var schemaTable = reader.GetSchemaTable();
                    Assert.Equal(6, schemaTable.Rows.Count);
                    Assert.Equal(""cid"", schemaTable.Rows[0][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""name"", schemaTable.Rows[1][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""type"", schemaTable.Rows[2][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""notnull"", schemaTable.Rows[3][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""dflt_value"", schemaTable.Rows[4][SchemaTableColumn.ColumnName]);
                    Assert.Equal(""pk"", schemaTable.Rows[5][SchemaTableColumn.ColumnName]);
                }
            }
        }

        [Theory]
        [InlineData(""(0), (1), ('A')"", typeof(long))]
        [InlineData(""('Z'), (1), ('A')"", typeof(string))]
        [InlineData(""(0.1), (0.01), ('A')"", typeof(double))]
        [InlineData(""(X'7E57'), (X'577E'), ('A')"", typeof(byte[]))]
        [InlineData(""(NULL), (NULL), (NULL)"", typeof(byte[]))]
        [InlineData(""(NULL), ('A'), ('B')"", typeof(string))]
        public void GetSchemaTable_DataType_works(string values, Type expectedType)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");
                connection.ExecuteNonQuery($""INSERT INTO Test VALUES {values};"");

                using (var reader = connection.ExecuteReader(""SELECT Value FROM Test;""))
                {
                    var schema = reader.GetSchemaTable();
                    Assert.True(schema.Columns.Contains(""DataType""));
                    Assert.Equal(expectedType, schema.Rows[0][""DataType""]);
                }
            }
        }

        [Theory]
        [InlineData(""TEXT"", typeof(string))]
        [InlineData(""CHARACTER(20)"", typeof(string))]
        [InlineData(""NVARCHAR(100)"", typeof(string))]
        [InlineData(""CLOB"", typeof(string))]
        [InlineData(""INTEGER"", typeof(long))]
        [InlineData(""BIGINT"", typeof(long))]
        [InlineData(""UNSIGNED BIG INT"", typeof(long))]
        [InlineData(""REAL"", typeof(double))]
        [InlineData(""DOUBLE"", typeof(double))]
        [InlineData(""FLOAT"", typeof(double))]
        [InlineData(""BLOB"", typeof(byte[]))]
        [InlineData("""", typeof(byte[]))]
        [InlineData(""NUMERIC"", typeof(string))]
        [InlineData(""DATETIME"", typeof(string))]
        public void GetSchemaTable_DataType_works_on_empty_table(string type, Type expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();
                connection.ExecuteNonQuery($""CREATE TABLE Test(Value {type});"");

                using (var reader = connection.ExecuteReader(""SELECT Value FROM Test;""))
                {
                    var schema = reader.GetSchemaTable();
                    Assert.True(schema.Columns.Contains(""DataType""));
                    Assert.Equal(expected, schema.Rows[0][""DataType""]);
                }
            }
        }

        [Fact]
        public void GetSchemaTable_throws_when_closed()
        {
            X_throws_when_closed(r => r.GetSchemaTable(), nameof(SqliteDataReader.GetSchemaTable));
        }

        [Fact]
        public void GetSchemaTable_throws_when_non_query()
            => X_throws_when_non_query(r => r.GetSchemaTable());

        [Fact]
        public void Dispose_executes_remaining_statements()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");
                connection.CreateFunction<string, long>(""throw"", message => throw new Exception(message));

                var reader = connection.ExecuteReader(
                    @""
                    SELECT 1;
                    INSERT INTO Test VALUES (1);"");
                ((IDisposable)reader).Dispose();

                Assert.Equal(1L, connection.ExecuteScalar<long>(""SELECT count() FROM Test;""));
            }
        }

        [Fact]
        public void Dispose_doesnt_throw_but_stops_on_error()
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                connection.ExecuteNonQuery(""CREATE TABLE Test(Value);"");
                connection.CreateFunction<string, long>(""throw"", message => throw new Exception(message));

                var reader = connection.ExecuteReader(
                    @""
                    SELECT 1;
                    SELECT throw('An error');
                    INSERT INTO Test VALUES (1);"");
                ((IDisposable)reader).Dispose();

                Assert.Equal(0L, connection.ExecuteScalar<long>(""SELECT count() FROM Test;""));
            }
        }

        private static void GetX_works<T>(string sql, Func<DbDataReader, T> action, T expected)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(sql))
                {
                    var hasData = reader.Read();

                    Assert.True(hasData);
                    Assert.Equal(expected, action(reader));
                }
            }
        }

        private static void GetX_throws_when_null(Action<DbDataReader> action)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT NULL;""))
                {
                    var hasData = reader.Read();

                    Assert.True(hasData);
                    var ex = Assert.Throws<InvalidOperationException>(() => action(reader));
                    Assert.Equal(Resources.CalledOnNullValue(0), ex.Message);
                }
            }
        }

        private static void X_throws_before_read(Action<DbDataReader> action)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT NULL;""))
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => action(reader));

                    Assert.Equal(Resources.NoData, ex.Message);
                }
            }
        }

        private static void X_throws_when_done(Action<DbDataReader> action)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""SELECT NULL;""))
                {
                    var hasData = reader.Read();
                    Assert.True(hasData);

                    hasData = reader.Read();
                    Assert.False(hasData);

                    var ex = Assert.Throws<InvalidOperationException>(() => action(reader));
                    Assert.Equal(Resources.NoData, ex.Message);
                }
            }
        }

        private static void X_throws_when_closed(Action<SqliteDataReader> action, string operation)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                var reader = connection.ExecuteReader(""SELECT 1;"");
                ((IDisposable)reader).Dispose();

                var ex = Assert.Throws<InvalidOperationException>(() => action(reader));
                Assert.Equal(Resources.DataReaderClosed(operation), ex.Message);
            }
        }

        private static void X_throws_when_non_query(Action<SqliteDataReader> action)
        {
            using (var connection = new SqliteConnection(""Data Source=:memory:""))
            {
                connection.Open();

                using (var reader = connection.ExecuteReader(""CREATE TABLE dual(dummy);""))
                {
                    var ex = Assert.Throws<InvalidOperationException>(() => action(reader));
                    Assert.Equal(Resources.NoData, ex.Message);
                }
            }
        }

        private enum MyEnum
        {
            One = 1
        }
    }",1,"[439, 334, 2000, 123, 91, 2001, 93, 439, 492, 2002, 40, 41, 123, 489, 40, 490, 2003, 61, 418, 2004, 40, 41, 41, 123, 2003, 46, 2005, 40, 41, 59, 489, 40, 490, 2006, 61, 2003, 46, 2007, 40, 41, 41, 123, 2008, 46, 2009, 40, 1500, 44, 2006, 46, 2010, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2011, 40, 41, 123, 489, 40, 490, 2012, 61, 418, 2013, 40, 41, 41, 123, 2012, 46, 2014, 40, 41, 59, 489, 40, 490, 2015, 61, 2012, 46, 2016, 40, 41, 41, 123, 2017, 46, 2018, 40, 1501, 44, 2015, 46, 2019, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2020, 40, 41, 619, 2021, 40, 2022, 619, 123, 490, 2023, 61, 2022, 46, 2024, 59, 125, 44, 41, 59, 91, 2001, 93, 439, 492, 2025, 40, 41, 123, 489, 40, 490, 2026, 61, 418, 2027, 40, 41, 41, 123, 2026, 46, 2028, 40, 41, 59, 489, 40, 490, 2029, 61, 2026, 46, 2030, 40, 41, 41, 123, 2031, 46, 2032, 40, 1500, 44, 2029, 46, 2033, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2034, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2036, 40, 1500, 41, 44, 473, 41, 59, 91, 2001, 93, 439, 492, 2037, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2036, 40, 1500, 41, 44, 2038, 40, 2039, 46, 2036, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2040, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2036, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2042, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2043, 40, 1500, 41, 44, 40, 326, 41, 1501, 41, 59, 91, 2001, 93, 439, 492, 2044, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2043, 40, 1500, 41, 44, 2045, 40, 2046, 46, 2043, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2047, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2043, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2048, 40, 41, 123, 489, 40, 490, 2049, 61, 418, 2050, 40, 41, 41, 123, 2049, 46, 2051, 40, 41, 59, 2049, 46, 2052, 40, 41, 59, 2049, 46, 2052, 40, 41, 59, 2049, 46, 2052, 40, 41, 59, 2049, 46, 2052, 40, 41, 59, 489, 40, 490, 2053, 61, 2049, 46, 2054, 40, 41, 41, 123, 490, 411, 61, 418, 2055, 60, 326, 91, 93, 62, 40, 41, 59, 496, 40, 2053, 46, 2056, 40, 41, 41, 123, 490, 2057, 61, 418, 326, 91, 1502, 93, 59, 490, 2058, 61, 2053, 46, 2059, 40, 1500, 44, 1500, 44, 2057, 44, 1500, 44, 2057, 46, 2060, 41, 59, 2061, 46, 2062, 40, 1502, 44, 2058, 41, 59, 411, 46, 2063, 40, 2057, 41, 59, 125, 2064, 46, 2065, 40, 1502, 44, 411, 46, 2066, 41, 59, 2064, 46, 2065, 40, 418, 326, 91, 1502, 93, 123, 1503, 44, 1504, 44, 1503, 44, 1503, 44, 1500, 44, 1500, 125, 44, 411, 91, 1500, 93, 41, 59, 2064, 46, 2065, 40, 418, 326, 91, 1502, 93, 123, 1503, 44, 1504, 44, 1504, 44, 1503, 44, 1500, 44, 1500, 125, 44, 411, 91, 1501, 93, 41, 59, 2064, 46, 2065, 40, 418, 326, 91, 1502, 93, 123, 1503, 44, 1504, 44, 1504, 44, 1504, 44, 1500, 44, 1500, 125, 44, 411, 91, 1502, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2067, 40, 41, 123, 489, 40, 490, 2068, 61, 418, 2069, 40, 41, 41, 123, 2068, 46, 2070, 40, 41, 59, 2068, 46, 2071, 40, 41, 59, 489, 40, 490, 2072, 61, 2068, 46, 2073, 40, 41, 41, 123, 490, 2074, 61, 2072, 46, 2075, 40, 41, 59, 2076, 46, 304, 40, 2074, 41, 59, 490, 2077, 61, 418, 326, 91, 1502, 93, 59, 2072, 46, 2078, 40, 1501, 44, 1501, 44, 2077, 44, 1500, 44, 2077, 46, 2079, 41, 59, 2076, 46, 2080, 40, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 2077, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2081, 40, 41, 123, 489, 40, 490, 2082, 61, 418, 2083, 40, 41, 41, 123, 2082, 46, 2084, 40, 41, 59, 489, 40, 490, 2085, 61, 2082, 46, 2086, 40, 41, 41, 123, 490, 2087, 61, 2085, 46, 2088, 40, 41, 59, 2089, 46, 304, 40, 2087, 41, 59, 413, 2090, 61, 2085, 46, 2091, 40, 1500, 44, 1501, 44, 424, 44, 1500, 44, 1502, 41, 59, 2089, 46, 2092, 40, 1502, 44, 2090, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2093, 40, 41, 123, 489, 40, 490, 2094, 61, 418, 2095, 40, 41, 41, 123, 2094, 46, 2096, 40, 41, 59, 489, 40, 490, 2097, 61, 2094, 46, 2098, 40, 41, 41, 123, 490, 2099, 61, 2097, 46, 2100, 40, 41, 59, 2101, 46, 304, 40, 2099, 41, 59, 490, 2102, 61, 418, 326, 91, 1505, 93, 59, 413, 2103, 61, 2097, 46, 2104, 40, 1500, 44, 1501, 44, 2102, 44, 1500, 44, 2102, 46, 2105, 41, 59, 2101, 46, 2106, 40, 1502, 44, 2103, 41, 59, 490, 2107, 61, 418, 326, 91, 1502, 93, 123, 1504, 44, 1503, 44, 1503, 125, 59, 385, 40, 404, 2108, 61, 1500, 59, 2108, 60, 2103, 59, 2108, 637, 41, 123, 2101, 46, 2106, 40, 2107, 91, 2108, 93, 44, 2102, 91, 2108, 93, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2109, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2110, 40, 1500, 44, 1500, 44, 424, 44, 1500, 44, 1500, 41, 44, 2111, 40, 2112, 46, 2110, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2113, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2114, 40, 1500, 44, 1500, 44, 424, 44, 1500, 44, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2115, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2116, 40, 1500, 41, 44, 40, 330, 41, 1501, 41, 59, 91, 2001, 93, 439, 492, 2117, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2116, 40, 1500, 41, 44, 607, 41, 59, 91, 2001, 93, 439, 492, 2118, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2116, 40, 1500, 41, 44, 2119, 40, 2120, 46, 2116, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2121, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2116, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2122, 40, 41, 123, 489, 40, 490, 2123, 61, 418, 2124, 40, 41, 41, 123, 2123, 46, 2125, 40, 41, 59, 489, 40, 490, 2126, 61, 2123, 46, 2127, 40, 41, 41, 123, 490, 2128, 61, 2126, 46, 2129, 40, 41, 59, 2130, 46, 304, 40, 2128, 41, 59, 490, 2131, 61, 418, 330, 91, 1502, 93, 59, 2126, 46, 2132, 40, 1500, 44, 1501, 44, 2131, 44, 1500, 44, 2131, 46, 2133, 41, 59, 2130, 46, 2134, 40, 418, 330, 91, 1502, 93, 123, 607, 44, 607, 125, 44, 2131, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2135, 40, 41, 123, 489, 40, 490, 2136, 61, 418, 2137, 40, 41, 41, 123, 2136, 46, 2138, 40, 41, 59, 489, 40, 490, 2139, 61, 2136, 46, 2140, 40, 41, 41, 123, 490, 2141, 61, 2139, 46, 2142, 40, 41, 59, 2143, 46, 304, 40, 2141, 41, 59, 413, 2144, 61, 2139, 46, 2145, 40, 1500, 44, 1501, 44, 424, 44, 1500, 44, 1502, 41, 59, 2143, 46, 2146, 40, 1502, 44, 2144, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2147, 40, 41, 123, 489, 40, 490, 2148, 61, 418, 2149, 40, 41, 41, 123, 2148, 46, 2150, 40, 41, 59, 489, 40, 490, 2151, 61, 2148, 46, 2152, 40, 41, 41, 123, 490, 2153, 61, 2151, 46, 2154, 40, 41, 59, 2155, 46, 304, 40, 2153, 41, 59, 490, 2156, 61, 418, 330, 91, 1505, 93, 59, 413, 2157, 61, 2151, 46, 2158, 40, 1500, 44, 1501, 44, 2156, 44, 1500, 44, 2156, 46, 2159, 41, 59, 2155, 46, 2160, 40, 1502, 44, 2157, 41, 59, 490, 2161, 61, 418, 330, 91, 1502, 93, 123, 607, 44, 607, 44, 607, 125, 59, 385, 40, 404, 2162, 61, 1500, 59, 2162, 60, 2157, 59, 2162, 637, 41, 123, 2155, 46, 2160, 40, 2161, 91, 2162, 93, 44, 2156, 91, 2162, 93, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2163, 40, 41, 123, 489, 40, 490, 2164, 61, 418, 2165, 40, 41, 41, 123, 2164, 46, 2166, 40, 41, 59, 489, 40, 490, 2167, 61, 2164, 46, 2168, 40, 41, 41, 123, 490, 2169, 61, 2167, 46, 2170, 40, 41, 59, 2171, 46, 304, 40, 2169, 41, 59, 490, 2172, 61, 418, 330, 91, 1501, 93, 59, 490, 2173, 61, 2171, 46, 2174, 60, 2175, 62, 40, 40, 41, 619, 2167, 46, 2176, 40, 1500, 44, 1502, 44, 2172, 44, 1500, 44, 2172, 46, 2177, 41, 41, 59, 2171, 46, 2178, 40, 44, 2173, 46, 2179, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2180, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2181, 40, 1500, 44, 1500, 44, 424, 33, 44, 1500, 44, 1500, 41, 44, 2182, 40, 2183, 46, 2181, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2184, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2185, 40, 1500, 44, 1500, 44, 424, 33, 44, 1500, 44, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2186, 40, 41, 123, 489, 40, 490, 2187, 61, 418, 2188, 40, 41, 41, 123, 2187, 46, 2189, 40, 41, 59, 2187, 46, 2190, 40, 41, 59, 489, 40, 490, 2191, 61, 2187, 46, 2192, 40, 41, 41, 123, 490, 2193, 61, 2191, 46, 2194, 40, 41, 59, 2195, 46, 304, 40, 2193, 41, 59, 490, 2196, 61, 418, 330, 91, 1502, 93, 59, 2191, 46, 2185, 40, 1501, 44, 1501, 44, 2196, 44, 1500, 44, 2196, 46, 2197, 41, 59, 2195, 46, 2198, 40, 418, 91, 93, 123, 607, 44, 607, 125, 44, 2196, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2199, 40, 41, 123, 489, 40, 490, 2200, 61, 418, 2201, 40, 41, 41, 123, 2200, 46, 2202, 40, 41, 59, 489, 40, 490, 2203, 61, 2200, 46, 2204, 40, 41, 41, 123, 490, 2205, 61, 2203, 46, 2206, 40, 41, 59, 2207, 46, 304, 40, 2205, 41, 59, 490, 2208, 61, 2203, 46, 2209, 40, 1500, 41, 59, 2207, 46, 2210, 60, 2211, 62, 40, 2208, 41, 59, 2207, 46, 2212, 40, 1503, 44, 2208, 46, 2213, 40, 41, 41, 59, 490, 2214, 61, 2203, 46, 2209, 40, 1500, 41, 59, 2207, 46, 2212, 40, 1503, 44, 2214, 46, 2213, 40, 41, 41, 59, 2207, 46, 2212, 40, 1504, 44, 2208, 46, 2213, 40, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2215, 40, 41, 123, 489, 40, 490, 2216, 61, 418, 2217, 40, 41, 41, 123, 2216, 46, 2218, 40, 41, 59, 489, 40, 490, 2219, 61, 2216, 46, 2220, 40, 41, 41, 123, 490, 2221, 61, 2219, 46, 2222, 40, 41, 59, 2223, 46, 304, 40, 2221, 41, 59, 490, 2224, 61, 2219, 46, 2225, 40, 1500, 41, 59, 2223, 46, 2226, 40, 40, 326, 41, 607, 44, 2224, 46, 2227, 40, 41, 41, 59, 490, 2228, 61, 2219, 46, 2225, 40, 1500, 41, 59, 2223, 46, 2226, 40, 40, 326, 41, 607, 44, 2228, 46, 2227, 40, 41, 41, 59, 2223, 46, 2226, 40, 40, 326, 41, 607, 44, 2224, 46, 2227, 40, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2229, 40, 41, 123, 489, 40, 490, 2230, 61, 418, 2231, 40, 41, 41, 123, 2230, 46, 2232, 40, 41, 59, 489, 40, 490, 2233, 61, 2230, 46, 2234, 40, 41, 41, 123, 490, 2235, 61, 2233, 46, 2236, 40, 41, 59, 2237, 46, 304, 40, 2235, 41, 59, 490, 2238, 61, 2233, 46, 2239, 40, 1500, 41, 59, 2237, 46, 2240, 40, 40, 326, 41, 607, 44, 2238, 46, 2241, 40, 41, 41, 59, 490, 2242, 61, 2233, 46, 2239, 40, 1500, 41, 59, 2237, 46, 2240, 40, 40, 326, 41, 607, 44, 2242, 46, 2241, 40, 41, 41, 59, 2237, 46, 2240, 40, 40, 326, 41, 607, 44, 2238, 46, 2241, 40, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2243, 40, 41, 123, 489, 40, 490, 2244, 61, 418, 2245, 40, 41, 41, 123, 2244, 46, 2246, 40, 41, 59, 489, 40, 490, 2247, 61, 2244, 46, 2248, 40, 41, 41, 123, 490, 2249, 61, 2247, 46, 2250, 40, 41, 59, 2251, 46, 304, 40, 2249, 41, 59, 490, 2252, 61, 2247, 46, 2253, 40, 1500, 41, 59, 2251, 46, 2254, 40, 40, 326, 41, 607, 44, 2252, 46, 2255, 40, 41, 41, 59, 490, 2256, 61, 2247, 46, 2253, 40, 1500, 41, 59, 2251, 46, 2254, 40, 40, 326, 41, 607, 44, 2256, 46, 2255, 40, 41, 41, 59, 2251, 46, 2254, 40, 40, 326, 41, 607, 44, 2252, 46, 2255, 40, 41, 41, 59, 2251, 46, 2254, 40, 40, 326, 41, 607, 44, 2252, 46, 2255, 40, 41, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 41, 93, 439, 492, 2259, 40, 461, 2260, 44, 461, 2261, 41, 123, 489, 40, 490, 2262, 61, 418, 2263, 40, 41, 41, 123, 2262, 46, 2264, 40, 41, 59, 2262, 46, 2265, 40, 2260, 43, 41, 59, 490, 2266, 61, 2262, 46, 2267, 40, 41, 59, 2266, 46, 2268, 61, 2261, 59, 489, 40, 490, 2269, 61, 2266, 46, 2270, 40, 41, 41, 123, 2271, 46, 304, 40, 2269, 46, 2272, 40, 41, 41, 59, 489, 40, 490, 2273, 61, 2269, 46, 2274, 40, 1501, 41, 41, 123, 2271, 46, 2275, 60, 2276, 62, 40, 2273, 41, 59, 490, 2277, 61, 418, 326, 91, 1502, 93, 59, 490, 2278, 61, 2273, 46, 2272, 40, 2277, 44, 1500, 44, 1502, 41, 59, 2271, 46, 2279, 40, 1502, 44, 2278, 41, 59, 2271, 46, 2279, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 44, 1502, 44, 1502, 125, 44, 2277, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2280, 40, 41, 123, 489, 40, 490, 2281, 61, 418, 2282, 40, 41, 41, 123, 2281, 46, 2283, 40, 41, 59, 2281, 46, 2284, 40, 64, 41, 59, 490, 2285, 61, 2281, 46, 2286, 40, 41, 59, 2285, 46, 2287, 61, 59, 489, 40, 490, 2288, 61, 2285, 46, 2289, 40, 41, 41, 123, 2290, 46, 304, 40, 2288, 46, 2291, 40, 41, 41, 59, 489, 40, 490, 2292, 61, 2288, 46, 2293, 40, 1502, 41, 41, 123, 2290, 46, 2294, 60, 2295, 62, 40, 2292, 41, 59, 490, 2296, 61, 418, 326, 91, 1502, 93, 59, 490, 2297, 61, 2292, 46, 2291, 40, 2296, 44, 1500, 44, 1502, 41, 59, 2290, 46, 2298, 40, 1502, 44, 2297, 41, 59, 2290, 46, 2298, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 44, 1502, 44, 1502, 125, 44, 2296, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2299, 40, 41, 123, 489, 40, 490, 2300, 61, 418, 2301, 40, 41, 41, 123, 2300, 46, 2302, 40, 41, 59, 2300, 46, 2303, 40, 64, 41, 59, 490, 2304, 61, 2300, 46, 2305, 40, 41, 59, 2304, 46, 2306, 61, 59, 489, 40, 490, 2307, 61, 2304, 46, 2308, 40, 41, 41, 123, 2309, 46, 304, 40, 2307, 46, 2310, 40, 41, 41, 59, 489, 40, 490, 2311, 61, 2307, 46, 2312, 40, 1502, 41, 41, 123, 2309, 46, 2313, 60, 2314, 62, 40, 2311, 41, 59, 490, 2315, 61, 418, 326, 91, 1502, 93, 59, 490, 2316, 61, 2311, 46, 2310, 40, 2315, 44, 1500, 44, 1502, 41, 59, 2309, 46, 2317, 40, 1502, 44, 2316, 41, 59, 2309, 46, 2317, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 44, 1502, 44, 1502, 125, 44, 2315, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2318, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2319, 40, 1500, 41, 44, 2320, 40, 2321, 46, 2319, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2322, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2323, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2324, 40, 41, 123, 489, 40, 490, 2325, 61, 418, 2326, 40, 41, 41, 123, 2325, 46, 2327, 40, 41, 59, 489, 40, 490, 2328, 61, 2325, 46, 2329, 40, 41, 41, 123, 490, 2330, 61, 2328, 46, 2331, 40, 41, 59, 2332, 46, 304, 40, 2330, 41, 59, 489, 40, 490, 2333, 61, 2328, 46, 2334, 40, 1500, 41, 41, 123, 2332, 46, 2335, 60, 2336, 62, 40, 2332, 46, 2335, 60, 2337, 62, 40, 2333, 41, 46, 2338, 41, 59, 2332, 46, 2339, 40, 44, 2333, 46, 2340, 40, 41, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2341, 40, 41, 123, 489, 40, 490, 2342, 61, 418, 2343, 40, 41, 41, 123, 2342, 46, 2344, 40, 41, 59, 489, 40, 490, 2345, 61, 2342, 46, 2346, 40, 41, 41, 123, 490, 2347, 61, 2345, 46, 2348, 40, 41, 59, 2349, 46, 304, 40, 2347, 41, 59, 489, 40, 490, 2350, 61, 2345, 46, 2351, 40, 1500, 41, 41, 123, 2349, 46, 2352, 60, 2353, 62, 40, 2350, 41, 59, 2349, 46, 2354, 40, 2350, 46, 2355, 40, 41, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2356, 40, 41, 123, 489, 40, 490, 2357, 61, 418, 2358, 40, 41, 41, 123, 2357, 46, 2359, 40, 41, 59, 2357, 46, 2360, 40, 41, 59, 489, 40, 490, 2361, 61, 2357, 46, 2362, 40, 41, 41, 123, 490, 2363, 61, 2361, 46, 2364, 40, 41, 59, 2365, 46, 304, 40, 2363, 41, 59, 489, 40, 490, 2366, 61, 2361, 46, 2367, 40, 1501, 41, 41, 123, 2365, 46, 2368, 60, 2369, 62, 40, 2365, 46, 2368, 60, 2370, 62, 40, 2366, 41, 46, 2371, 41, 59, 2365, 46, 2372, 40, 44, 2366, 46, 2373, 40, 41, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2374, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2375, 40, 1500, 41, 44, 418, 2376, 40, 1505, 44, 1502, 44, 1503, 44, 1502, 44, 1503, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2377, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2375, 40, 1500, 41, 44, 418, 2376, 40, 1505, 44, 1502, 44, 1502, 44, 1502, 44, 1503, 44, 1503, 44, 1504, 41, 41, 59, 91, 2001, 93, 439, 492, 2378, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2375, 40, 1500, 41, 44, 418, 2376, 40, 1505, 44, 1502, 44, 1502, 44, 1503, 44, 1500, 44, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2379, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2375, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2381, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2375, 40, 1500, 41, 44, 2382, 40, 2383, 46, 2375, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2384, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2375, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2385, 40, 41, 619, 2035, 40, 44, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2387, 40, 1500, 41, 44, 418, 2388, 40, 418, 2376, 40, 1505, 44, 1502, 44, 1503, 44, 1502, 44, 1503, 44, 1503, 41, 41, 41, 59, 91, 2001, 93, 439, 492, 2389, 40, 41, 619, 2035, 40, 44, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2387, 40, 1500, 41, 44, 418, 2388, 40, 418, 2376, 40, 1505, 44, 1502, 44, 1502, 44, 1502, 44, 1503, 44, 1503, 44, 1504, 41, 41, 41, 59, 91, 2001, 93, 439, 492, 2390, 40, 41, 619, 2035, 40, 44, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2387, 40, 1500, 41, 44, 418, 2388, 40, 418, 2376, 40, 1505, 44, 1502, 44, 1502, 44, 1503, 44, 1500, 44, 1500, 41, 41, 41, 59, 91, 2001, 93, 439, 492, 2391, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2387, 40, 1500, 41, 44, 2392, 40, 2386, 46, 2387, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2393, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2387, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2394, 40, 41, 619, 2035, 40, 44, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2395, 40, 1500, 41, 44, 418, 2396, 40, 1503, 44, 1502, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2397, 40, 41, 619, 2035, 40, 44, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2395, 40, 1500, 41, 44, 2396, 46, 2398, 40, 1502, 41, 41, 59, 91, 2001, 93, 439, 492, 2399, 40, 41, 619, 2035, 40, 44, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2395, 40, 1500, 41, 44, 418, 2396, 40, 1506, 44, 1500, 44, 1500, 44, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2400, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2395, 40, 1500, 41, 44, 2401, 40, 2386, 46, 2395, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2402, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2395, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2403, 40, 41, 619, 2380, 40, 2022, 619, 40, 40, 2386, 41, 2022, 41, 46, 2387, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2404, 40, 41, 619, 2405, 40, 44, 418, 2406, 40, 1505, 44, 1502, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2407, 40, 41, 619, 2405, 40, 44, 418, 2406, 40, 1505, 44, 1502, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2408, 40, 41, 619, 2405, 40, 44, 418, 2409, 40, 1503, 44, 1502, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2410, 40, 41, 619, 2405, 40, 44, 418, 2409, 40, 1503, 44, 1502, 44, 1503, 44, 1504, 41, 41, 59, 91, 2257, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 41, 93, 439, 492, 2411, 40, 461, 2412, 44, 461, 2413, 41, 123, 489, 40, 490, 2414, 61, 418, 2415, 40, 41, 41, 123, 2414, 46, 2416, 40, 41, 59, 489, 40, 490, 2417, 61, 2414, 46, 2418, 40, 2412, 41, 41, 123, 2419, 46, 2420, 40, 2413, 44, 2417, 46, 2421, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2422, 40, 41, 123, 489, 40, 490, 2423, 61, 418, 2424, 40, 41, 41, 123, 2423, 46, 2425, 40, 41, 59, 2423, 46, 2426, 40, 41, 59, 489, 40, 490, 2427, 61, 2423, 46, 2428, 40, 41, 41, 123, 2429, 46, 2430, 40, 44, 2427, 46, 2431, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2432, 40, 41, 123, 489, 40, 490, 2433, 61, 418, 2434, 40, 41, 41, 123, 2433, 46, 2435, 40, 41, 59, 489, 40, 490, 2436, 61, 2433, 46, 2437, 40, 41, 41, 123, 490, 2438, 61, 2439, 46, 2440, 60, 2441, 62, 40, 40, 41, 619, 2436, 46, 2442, 40, 1501, 41, 41, 59, 2439, 46, 2443, 40, 44, 2438, 46, 2444, 41, 59, 2439, 46, 2443, 40, 1501, 44, 2438, 46, 2445, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2446, 40, 41, 619, 2021, 40, 2022, 619, 2022, 46, 2447, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2448, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2447, 40, 1500, 41, 41, 59, 91, 2257, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 1498, 41, 93, 439, 492, 2449, 40, 461, 2450, 44, 345, 2413, 41, 619, 2035, 40, 43, 2450, 43, 44, 2022, 619, 2022, 46, 2451, 40, 1500, 41, 44, 2413, 41, 59, 91, 2001, 93, 439, 492, 2452, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2451, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2453, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2451, 40, 1500, 41, 44, 2454, 40, 2386, 46, 2451, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2455, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2451, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2456, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2457, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2458, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2457, 40, 1500, 41, 44, 2459, 40, 2386, 46, 2457, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2460, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2457, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2461, 40, 41, 123, 489, 40, 490, 2462, 61, 418, 2463, 40, 41, 41, 123, 2462, 46, 2464, 40, 41, 59, 489, 40, 490, 2465, 61, 2462, 46, 2466, 40, 41, 41, 123, 490, 2467, 61, 2465, 46, 2468, 40, 41, 59, 2469, 46, 304, 40, 2467, 41, 59, 2469, 46, 2470, 40, 2465, 46, 2471, 40, 41, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 473, 41, 93, 91, 2258, 40, 44, 40, 326, 41, 1501, 41, 93, 91, 2258, 40, 44, 40, 330, 41, 1501, 41, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 1501, 41, 93, 91, 2258, 40, 44, 1501, 41, 93, 91, 2258, 40, 44, 40, 451, 41, 1501, 41, 93, 91, 2258, 40, 44, 40, 453, 41, 1501, 41, 93, 91, 2258, 40, 44, 41, 93, 91, 2258, 40, 44, 1501, 41, 93, 91, 2258, 40, 44, 1501, 41, 93, 91, 2258, 40, 44, 40, 488, 41, 1501, 41, 93, 439, 492, 2405, 60, 2472, 62, 40, 461, 2412, 44, 2472, 2413, 41, 123, 489, 40, 490, 2473, 61, 418, 2474, 40, 41, 41, 123, 2473, 46, 2475, 40, 41, 59, 489, 40, 490, 2476, 61, 2473, 46, 2477, 40, 2412, 41, 41, 123, 490, 2478, 61, 2476, 46, 2479, 40, 41, 59, 2480, 46, 304, 40, 2478, 41, 59, 2480, 46, 2481, 40, 2413, 44, 2476, 46, 2482, 60, 2472, 62, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2483, 40, 41, 619, 2405, 40, 44, 418, 326, 91, 93, 123, 1504, 44, 1503, 125, 41, 59, 91, 2001, 93, 439, 492, 2484, 40, 41, 619, 2405, 40, 44, 418, 326, 91, 1500, 93, 41, 59, 91, 2001, 93, 439, 492, 2485, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2486, 60, 326, 91, 93, 62, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2487, 40, 41, 619, 2405, 40, 44, 418, 2376, 40, 1505, 44, 1502, 44, 1503, 44, 1503, 44, 1503, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2488, 40, 41, 619, 2405, 40, 44, 418, 2388, 40, 1505, 44, 1502, 44, 1503, 44, 1503, 44, 1503, 44, 1503, 44, 418, 2396, 40, 45, 1502, 44, 1500, 44, 1500, 41, 41, 41, 59, 91, 2001, 93, 439, 492, 2489, 40, 41, 619, 2405, 40, 44, 2490, 46, 2491, 41, 59, 91, 2001, 93, 439, 492, 2492, 40, 41, 123, 489, 40, 490, 2493, 61, 418, 2494, 40, 41, 41, 123, 2493, 46, 2495, 40, 41, 59, 489, 40, 490, 2496, 61, 2493, 46, 2497, 40, 41, 41, 123, 490, 2498, 61, 2496, 46, 2499, 40, 41, 59, 2500, 46, 304, 40, 2498, 41, 59, 2500, 46, 2501, 60, 2502, 62, 40, 40, 41, 619, 2496, 46, 2486, 60, 2490, 62, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2503, 40, 41, 619, 2405, 40, 44, 1502, 41, 59, 91, 2001, 93, 439, 492, 2504, 40, 41, 619, 2405, 40, 44, 2505, 46, 2506, 41, 59, 91, 2001, 93, 439, 492, 2507, 40, 41, 619, 2405, 40, 44, 418, 2508, 40, 41, 41, 59, 91, 2001, 93, 439, 492, 2509, 40, 41, 619, 2405, 40, 44, 40, 404, 63, 41, 1501, 41, 59, 91, 2001, 93, 439, 492, 2510, 40, 41, 123, 489, 40, 490, 2511, 61, 418, 2512, 40, 41, 41, 123, 2511, 46, 2513, 40, 41, 59, 489, 40, 490, 2514, 61, 2511, 46, 2515, 40, 41, 41, 123, 490, 2516, 61, 2514, 46, 2517, 40, 41, 59, 2518, 46, 304, 40, 2516, 41, 59, 490, 2519, 61, 2514, 46, 2486, 60, 2520, 62, 40, 1500, 41, 59, 2518, 46, 2521, 40, 1504, 44, 2519, 46, 2522, 40, 41, 41, 59, 2518, 46, 2521, 40, 1503, 44, 2519, 46, 2522, 40, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2523, 40, 41, 123, 489, 40, 490, 2524, 61, 418, 2525, 40, 41, 41, 123, 2524, 46, 2526, 40, 41, 59, 489, 40, 490, 2527, 61, 2524, 46, 2528, 40, 41, 41, 123, 490, 2529, 61, 2527, 46, 2530, 40, 41, 59, 2531, 46, 304, 40, 2529, 41, 59, 489, 40, 490, 2532, 61, 2527, 46, 2486, 60, 2533, 62, 40, 1500, 41, 41, 123, 2531, 46, 2534, 40, 44, 2532, 46, 2535, 40, 41, 41, 59, 125, 125, 125, 125, 91, 2001, 93, 439, 492, 2536, 40, 41, 619, 2405, 40, 44, 418, 2396, 40, 1503, 44, 1502, 44, 1503, 41, 41, 59, 91, 2001, 93, 439, 492, 2537, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2486, 60, 2396, 62, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2538, 40, 41, 619, 2539, 40, 2022, 619, 2022, 46, 2486, 60, 2490, 62, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2540, 40, 41, 619, 2541, 40, 2022, 619, 2022, 46, 2486, 60, 2490, 62, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2542, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2486, 60, 413, 62, 40, 1500, 41, 44, 2543, 40, 2386, 46, 2486, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2544, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2486, 60, 413, 62, 40, 1500, 41, 41, 59, 91, 2257, 93, 91, 2258, 40, 326, 46, 2545, 41, 93, 91, 2258, 40, 330, 46, 2545, 41, 93, 91, 2258, 40, 404, 46, 2545, 41, 93, 91, 2258, 40, 451, 46, 2545, 41, 93, 91, 2258, 40, 453, 46, 2545, 41, 93, 91, 2258, 40, 479, 46, 2545, 41, 93, 91, 2258, 40, 488, 46, 2545, 41, 93, 439, 492, 2546, 60, 2472, 62, 40, 2472, 2547, 41, 123, 489, 40, 490, 2548, 61, 418, 2549, 40, 41, 41, 123, 2548, 46, 2550, 40, 41, 59, 489, 40, 490, 2551, 61, 2548, 46, 2552, 40, 44, 418, 2553, 40, 44, 2547, 41, 41, 41, 123, 2551, 46, 2554, 40, 41, 59, 2555, 46, 2556, 60, 2557, 62, 40, 40, 41, 619, 2551, 46, 2486, 60, 2472, 62, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 439, 492, 2558, 40, 461, 2412, 44, 2559, 2413, 41, 123, 489, 40, 490, 2560, 61, 418, 2561, 40, 41, 41, 123, 2560, 46, 2562, 40, 41, 59, 489, 40, 490, 2563, 61, 2560, 46, 2564, 40, 2412, 41, 41, 123, 2565, 46, 2566, 40, 2413, 44, 2563, 46, 2567, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 439, 492, 2568, 40, 461, 2569, 44, 2559, 2413, 41, 123, 489, 40, 490, 2570, 61, 418, 2571, 40, 41, 41, 123, 2570, 46, 2572, 40, 41, 59, 2570, 46, 2573, 40, 36, 41, 59, 489, 40, 490, 2574, 61, 2570, 46, 2575, 40, 41, 41, 123, 2576, 46, 2577, 40, 2413, 44, 2574, 46, 2578, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2579, 40, 41, 123, 489, 40, 490, 2580, 61, 418, 2581, 40, 41, 41, 123, 2580, 46, 2582, 40, 41, 59, 2580, 46, 2583, 40, 41, 59, 2580, 46, 2583, 40, 41, 59, 489, 40, 490, 2584, 61, 2580, 46, 2585, 40, 41, 41, 123, 2586, 46, 304, 40, 2584, 46, 2587, 40, 41, 41, 59, 2586, 46, 2588, 40, 478, 40, 461, 41, 44, 2584, 46, 2589, 40, 1500, 41, 41, 59, 2586, 46, 2588, 40, 44, 2584, 46, 2590, 40, 1500, 41, 41, 59, 2586, 46, 304, 40, 2584, 46, 2587, 40, 41, 41, 59, 2586, 46, 2588, 40, 478, 40, 461, 41, 44, 2584, 46, 2589, 40, 1500, 41, 41, 59, 2586, 46, 2588, 40, 2490, 46, 2491, 44, 2584, 46, 2590, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2591, 40, 41, 123, 489, 40, 490, 2592, 61, 418, 2593, 40, 41, 41, 123, 2592, 46, 2594, 40, 41, 59, 489, 40, 490, 2595, 61, 2592, 46, 2596, 40, 41, 41, 123, 490, 2597, 61, 2598, 46, 2599, 60, 2600, 62, 40, 40, 41, 619, 2595, 46, 2601, 40, 1501, 41, 41, 59, 2598, 46, 2602, 40, 44, 2597, 46, 2603, 41, 59, 2598, 46, 2602, 40, 1501, 44, 2597, 46, 2604, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2605, 40, 41, 619, 2021, 40, 2022, 619, 2022, 46, 2606, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2607, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2606, 40, 1500, 41, 41, 59, 91, 2257, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 384, 46, 2608, 41, 93, 91, 2258, 40, 44, 384, 46, 2609, 41, 93, 439, 492, 2610, 40, 461, 2611, 44, 384, 2612, 41, 619, 2035, 40, 43, 2611, 44, 2022, 619, 2022, 46, 2613, 40, 1500, 41, 44, 2612, 41, 59, 91, 2001, 93, 439, 492, 2614, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2613, 40, 1500, 41, 44, 2615, 40, 2386, 46, 2613, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2616, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2613, 40, 1500, 41, 41, 59, 91, 2257, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 356, 46, 2608, 41, 93, 91, 2258, 40, 44, 356, 46, 2609, 41, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 1497, 41, 93, 439, 492, 2617, 40, 461, 2611, 44, 356, 2612, 41, 619, 2035, 40, 43, 2611, 44, 2022, 619, 2022, 46, 2457, 40, 1500, 41, 44, 2612, 41, 59, 91, 2001, 93, 439, 492, 2618, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2619, 40, 1500, 41, 44, 418, 2508, 40, 41, 41, 59, 91, 2001, 93, 439, 492, 2620, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2619, 40, 1500, 41, 44, 418, 2508, 40, 41, 41, 59, 91, 2001, 93, 439, 492, 2621, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2619, 40, 1500, 41, 44, 418, 2508, 40, 41, 41, 59, 91, 2001, 93, 439, 492, 2622, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2619, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2623, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2619, 40, 1500, 41, 44, 2624, 40, 2386, 46, 2619, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2625, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2619, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2626, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2627, 40, 1500, 41, 44, 40, 453, 41, 1501, 41, 59, 91, 2001, 93, 439, 492, 2628, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2627, 40, 1500, 41, 44, 2629, 40, 2386, 46, 2627, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2630, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2627, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2631, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2632, 40, 1500, 41, 44, 1501, 41, 59, 91, 2001, 93, 439, 492, 2633, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2632, 40, 1500, 41, 44, 2634, 40, 2386, 46, 2632, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2635, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2632, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2636, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2637, 40, 1500, 41, 44, 1501, 41, 59, 91, 2001, 93, 439, 492, 2638, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2637, 40, 1500, 41, 44, 2639, 40, 2386, 46, 2637, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2640, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2637, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2641, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2637, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2642, 40, 41, 123, 489, 40, 490, 2643, 61, 418, 2644, 40, 41, 41, 123, 2643, 46, 2645, 40, 41, 59, 489, 40, 490, 2646, 61, 2643, 46, 2647, 40, 41, 41, 123, 2648, 46, 2649, 40, 44, 2646, 46, 2650, 40, 1500, 41, 41, 59, 2648, 46, 2649, 40, 44, 2646, 46, 2650, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2651, 40, 41, 123, 489, 40, 490, 2652, 61, 418, 2653, 40, 41, 41, 123, 2652, 46, 2654, 40, 41, 59, 489, 40, 490, 2655, 61, 2652, 46, 2656, 40, 41, 41, 123, 490, 2657, 61, 2658, 46, 2659, 60, 2660, 62, 40, 40, 41, 619, 2655, 46, 2661, 40, 1501, 41, 41, 59, 2658, 46, 2662, 40, 44, 2657, 46, 2663, 41, 59, 2658, 46, 2662, 40, 1501, 44, 2657, 46, 2664, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2665, 40, 41, 619, 2021, 40, 2022, 619, 2022, 46, 2666, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2667, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2666, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2668, 40, 41, 123, 489, 40, 490, 2669, 61, 418, 2670, 40, 41, 41, 123, 2669, 46, 2671, 40, 41, 59, 489, 40, 490, 2672, 61, 2669, 46, 2673, 40, 41, 41, 123, 2674, 46, 2675, 40, 1500, 44, 2672, 46, 2676, 40, 41, 41, 59, 2674, 46, 2675, 40, 1500, 44, 2672, 46, 2676, 40, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2677, 40, 41, 123, 489, 40, 490, 2678, 61, 418, 2679, 40, 41, 41, 123, 2678, 46, 2680, 40, 41, 59, 489, 40, 490, 2681, 61, 2678, 46, 2682, 40, 41, 41, 123, 490, 2683, 61, 2684, 46, 2685, 60, 2686, 62, 40, 40, 41, 619, 2681, 46, 2687, 40, 41, 41, 59, 2684, 46, 2688, 40, 2683, 46, 2689, 41, 59, 2684, 46, 2690, 40, 44, 2683, 46, 2691, 41, 59, 2684, 46, 2690, 40, 44, 2683, 46, 2692, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2693, 40, 41, 123, 489, 490, 2694, 61, 418, 2695, 40, 41, 59, 2694, 46, 2696, 40, 41, 59, 489, 490, 2697, 61, 2694, 46, 2698, 40, 41, 59, 490, 2699, 61, 2700, 46, 2701, 60, 2702, 62, 40, 40, 41, 619, 2697, 46, 2703, 40, 41, 41, 59, 2700, 46, 2704, 40, 2705, 46, 2706, 40, 44, 44, 41, 44, 2699, 46, 2707, 41, 59, 125, 91, 2001, 93, 439, 492, 2708, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2709, 40, 424, 33, 41, 44, 2710, 40, 2386, 46, 2709, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2711, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2712, 40, 41, 41, 59, 91, 2001, 93, 439, 492, 2713, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2714, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2715, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2486, 60, 461, 62, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2716, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2717, 40, 1500, 41, 311, 461, 44, 41, 59, 91, 2001, 93, 439, 492, 2718, 40, 41, 619, 2035, 40, 44, 2022, 619, 2022, 46, 2714, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2719, 40, 41, 619, 2380, 40, 2022, 619, 2022, 46, 2714, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2720, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2714, 40, 1500, 41, 44, 2721, 40, 2386, 46, 2714, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2722, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2714, 40, 1500, 41, 41, 59, 91, 2257, 93, 91, 2258, 40, 44, 1501, 41, 93, 91, 2258, 40, 44, 1502, 41, 93, 91, 2258, 40, 44, 41, 93, 439, 492, 2723, 40, 461, 2412, 44, 426, 2413, 41, 123, 489, 40, 490, 2724, 61, 418, 2725, 40, 41, 41, 123, 2724, 46, 2726, 40, 41, 59, 489, 40, 490, 2727, 61, 2724, 46, 2728, 40, 2412, 41, 41, 123, 490, 2729, 61, 2727, 46, 2730, 40, 41, 59, 2731, 46, 304, 40, 2729, 41, 59, 2731, 46, 2732, 40, 2413, 44, 2727, 46, 2717, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2733, 40, 41, 619, 2723, 40, 44, 418, 326, 91, 93, 123, 1504, 44, 1503, 125, 41, 59, 91, 2001, 93, 439, 492, 2734, 40, 41, 619, 2723, 40, 44, 2490, 46, 2491, 41, 59, 91, 2001, 93, 439, 492, 2735, 40, 41, 619, 2539, 40, 2022, 619, 2022, 46, 2717, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2736, 40, 41, 619, 2541, 40, 2022, 619, 2022, 46, 2717, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2737, 40, 41, 619, 2021, 40, 2022, 619, 2022, 46, 2717, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2738, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2717, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2739, 40, 41, 123, 489, 40, 490, 2740, 61, 418, 2741, 40, 41, 41, 123, 2740, 46, 2742, 40, 41, 59, 489, 40, 490, 2743, 61, 2740, 46, 2744, 40, 41, 41, 123, 490, 2745, 61, 2743, 46, 2746, 40, 41, 59, 2747, 46, 304, 40, 2745, 41, 59, 490, 2748, 61, 418, 426, 91, 1502, 93, 59, 490, 2612, 61, 2743, 46, 2749, 40, 2748, 41, 59, 2747, 46, 2750, 40, 1501, 44, 2612, 41, 59, 2747, 46, 2750, 40, 1501, 44, 2748, 91, 1500, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2751, 40, 41, 123, 489, 40, 490, 2752, 61, 418, 2753, 40, 41, 41, 123, 2752, 46, 2754, 40, 41, 59, 489, 40, 490, 2755, 61, 2752, 46, 2756, 40, 41, 41, 123, 490, 2757, 61, 2755, 46, 2758, 40, 41, 59, 2759, 46, 304, 40, 2757, 41, 59, 490, 2760, 61, 418, 426, 91, 1500, 93, 59, 2759, 46, 2761, 60, 2762, 62, 40, 40, 41, 619, 2755, 46, 2763, 40, 2760, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2764, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2765, 40, 424, 33, 41, 44, 2766, 40, 2386, 46, 2765, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2767, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2768, 40, 424, 33, 41, 41, 59, 91, 2001, 93, 439, 492, 2769, 40, 41, 123, 489, 40, 490, 2770, 61, 418, 2771, 40, 41, 41, 123, 2770, 46, 2772, 40, 41, 59, 489, 40, 490, 2773, 61, 2770, 46, 2774, 40, 41, 41, 123, 2775, 46, 304, 40, 2773, 46, 2776, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2777, 40, 41, 123, 489, 40, 490, 2778, 61, 418, 2779, 40, 41, 41, 123, 2778, 46, 2780, 40, 41, 59, 489, 40, 490, 2781, 61, 2778, 46, 2782, 40, 41, 41, 123, 2783, 46, 302, 40, 2781, 46, 2784, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2785, 40, 41, 123, 489, 40, 490, 2786, 61, 418, 2787, 40, 41, 41, 123, 2786, 46, 2788, 40, 41, 59, 489, 40, 490, 2789, 61, 2786, 46, 2790, 40, 41, 41, 123, 2791, 46, 302, 40, 2789, 46, 2792, 41, 59, 2789, 46, 2793, 40, 41, 59, 2791, 46, 304, 40, 2789, 46, 2792, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2794, 40, 41, 123, 489, 40, 490, 2795, 61, 418, 2796, 40, 41, 41, 123, 2795, 46, 2797, 40, 41, 59, 489, 40, 490, 2798, 61, 2795, 46, 2799, 40, 41, 41, 123, 2800, 46, 302, 40, 2798, 46, 2801, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2802, 40, 41, 123, 489, 40, 490, 2803, 61, 418, 2804, 40, 41, 41, 123, 2803, 46, 2805, 40, 41, 59, 490, 2806, 61, 2803, 46, 2807, 40, 41, 59, 2806, 46, 2808, 40, 41, 59, 2809, 46, 304, 40, 2806, 46, 2810, 41, 59, 125, 125, 91, 2001, 93, 439, 492, 2811, 40, 41, 123, 489, 40, 490, 2812, 61, 418, 2813, 40, 41, 41, 123, 2812, 46, 2814, 40, 41, 59, 489, 40, 490, 2815, 61, 2812, 46, 2816, 40, 41, 41, 123, 490, 2817, 61, 2815, 46, 2818, 40, 41, 59, 2819, 46, 304, 40, 2817, 41, 59, 2819, 46, 304, 40, 2815, 46, 2820, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2821, 40, 41, 619, 2539, 40, 2022, 619, 2022, 46, 2822, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2823, 40, 41, 619, 2541, 40, 2022, 619, 2022, 46, 2822, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2824, 40, 41, 619, 2021, 40, 2022, 619, 2022, 46, 2822, 40, 1500, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2825, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 2822, 40, 1500, 41, 41, 59, 91, 2001, 93, 439, 492, 2826, 40, 41, 123, 489, 40, 490, 2827, 61, 418, 2828, 40, 41, 41, 123, 2827, 46, 2829, 40, 41, 59, 489, 40, 490, 2830, 61, 2827, 46, 2831, 40, 41, 41, 123, 490, 2832, 61, 2830, 46, 2833, 40, 41, 59, 2834, 46, 304, 40, 2832, 41, 59, 2834, 46, 2835, 40, 1501, 44, 2830, 91, 1500, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2836, 40, 41, 123, 489, 40, 490, 2837, 61, 418, 2838, 40, 41, 41, 123, 2837, 46, 2839, 40, 41, 59, 489, 40, 490, 2840, 61, 2837, 46, 2841, 40, 41, 41, 123, 490, 2842, 61, 2843, 46, 2844, 60, 2845, 62, 40, 40, 41, 619, 2840, 91, 1500, 93, 41, 59, 2843, 46, 2846, 40, 2847, 46, 2848, 44, 2842, 46, 2849, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 44, 1501, 41, 93, 91, 2258, 40, 44, 44, 1501, 41, 93, 91, 2258, 40, 44, 44, 1502, 41, 93, 439, 492, 2850, 40, 461, 2851, 44, 461, 2852, 44, 413, 2413, 41, 123, 489, 40, 490, 2853, 61, 418, 2854, 40, 41, 41, 123, 2853, 46, 2855, 40, 41, 59, 489, 40, 490, 2856, 61, 2853, 46, 2857, 40, 2851, 41, 41, 123, 490, 2858, 61, 2856, 46, 2859, 40, 41, 59, 2860, 46, 304, 40, 2858, 41, 59, 2860, 46, 2861, 40, 2413, 44, 2856, 91, 2852, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2862, 40, 41, 123, 489, 40, 490, 2863, 61, 418, 2864, 40, 41, 41, 123, 2863, 46, 2865, 40, 41, 59, 489, 40, 490, 2866, 61, 2863, 46, 2867, 40, 41, 41, 123, 490, 2868, 61, 2869, 46, 2870, 60, 2871, 62, 40, 40, 41, 619, 2866, 91, 93, 41, 59, 2869, 46, 2872, 40, 2873, 46, 2874, 44, 2868, 46, 2875, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2876, 40, 41, 123, 489, 40, 490, 2877, 61, 418, 2878, 40, 41, 41, 123, 2877, 46, 2879, 40, 41, 59, 489, 40, 490, 2880, 61, 2877, 46, 2881, 40, 41, 41, 123, 490, 2882, 61, 2880, 46, 2883, 40, 41, 59, 2884, 46, 304, 40, 2882, 41, 59, 2884, 46, 2885, 40, 1501, 44, 2880, 46, 2637, 40, 1500, 41, 41, 59, 490, 2886, 61, 2880, 46, 2887, 40, 41, 59, 2884, 46, 304, 40, 2886, 41, 59, 2882, 61, 2880, 46, 2883, 40, 41, 59, 2884, 46, 304, 40, 2882, 41, 59, 2884, 46, 2885, 40, 1502, 44, 2880, 46, 2637, 40, 1500, 41, 41, 59, 2886, 61, 2880, 46, 2887, 40, 41, 59, 2884, 46, 302, 40, 2886, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2888, 40, 41, 123, 489, 40, 490, 2889, 61, 418, 2890, 40, 41, 41, 123, 2889, 46, 2891, 40, 41, 59, 489, 40, 490, 2892, 61, 2889, 46, 2893, 40, 41, 41, 123, 490, 2894, 61, 2892, 46, 2895, 40, 41, 59, 2896, 46, 302, 40, 2894, 41, 59, 2894, 61, 2892, 46, 2895, 40, 41, 59, 2896, 46, 302, 40, 2894, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2897, 40, 41, 123, 489, 40, 490, 2898, 61, 418, 2899, 40, 41, 41, 123, 2898, 46, 2900, 40, 41, 59, 2898, 46, 2901, 40, 41, 59, 490, 2412, 61, 64, 59, 489, 40, 490, 2902, 61, 2898, 46, 2903, 40, 2412, 41, 41, 123, 490, 2904, 61, 2902, 46, 2905, 40, 41, 59, 2906, 46, 304, 40, 2904, 41, 59, 490, 2907, 61, 2902, 46, 2908, 40, 41, 59, 2906, 46, 304, 40, 2907, 41, 59, 2906, 46, 2909, 40, 1502, 44, 2902, 46, 2637, 40, 1500, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2910, 40, 41, 123, 489, 40, 490, 2911, 61, 418, 2912, 40, 41, 41, 123, 2911, 46, 2913, 40, 41, 59, 2911, 46, 2914, 40, 41, 59, 2911, 46, 2915, 60, 461, 44, 413, 62, 40, 44, 2916, 619, 469, 418, 2917, 40, 2916, 41, 41, 59, 490, 2412, 61, 64, 59, 489, 40, 490, 2918, 61, 2911, 46, 2919, 40, 2412, 41, 41, 123, 490, 2920, 61, 2921, 46, 2922, 60, 2923, 62, 40, 40, 41, 619, 2918, 46, 2924, 40, 41, 41, 59, 2921, 46, 2925, 40, 44, 2920, 46, 2926, 41, 59, 125, 2927, 46, 2928, 40, 1500, 44, 2911, 46, 2929, 60, 413, 62, 40, 41, 41, 59, 125, 125, 91, 2001, 93, 439, 492, 2930, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 2931, 40, 41, 44, 2932, 40, 2386, 46, 2931, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 2933, 40, 41, 123, 489, 40, 490, 2934, 61, 418, 2935, 40, 41, 41, 123, 2934, 46, 2936, 40, 41, 59, 489, 40, 490, 2937, 61, 2934, 46, 2938, 40, 41, 41, 123, 490, 2939, 61, 2937, 46, 2940, 40, 41, 59, 2941, 46, 304, 40, 2939, 41, 59, 2941, 46, 2942, 40, 1501, 44, 2937, 46, 2637, 40, 1500, 41, 41, 59, 2939, 61, 2937, 46, 2940, 40, 41, 59, 2941, 46, 304, 40, 2939, 41, 59, 2941, 46, 2942, 40, 1502, 44, 2937, 46, 2637, 40, 1500, 41, 41, 59, 2939, 61, 2937, 46, 2940, 40, 41, 59, 2941, 46, 302, 40, 2939, 41, 59, 2939, 61, 2937, 46, 2940, 40, 41, 59, 2941, 46, 302, 40, 2939, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2943, 40, 41, 619, 2021, 40, 2022, 619, 2022, 46, 2944, 40, 41, 44, 41, 59, 91, 2001, 93, 439, 492, 2945, 40, 41, 123, 489, 40, 490, 2946, 61, 418, 2947, 40, 41, 41, 123, 2946, 46, 2948, 40, 41, 59, 489, 40, 490, 2949, 61, 2946, 46, 2950, 40, 41, 41, 123, 2951, 46, 302, 40, 2949, 46, 2944, 40, 41, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 2952, 40, 41, 123, 489, 40, 490, 2953, 61, 418, 2954, 40, 41, 41, 123, 2953, 46, 2955, 40, 41, 59, 2953, 46, 2956, 40, 41, 59, 490, 2957, 61, 2953, 46, 2958, 40, 41, 59, 40, 40, 2959, 41, 2957, 41, 46, 2960, 40, 41, 59, 2961, 46, 2962, 40, 1501, 44, 2957, 46, 2963, 41, 59, 125, 125, 91, 2001, 93, 439, 492, 2964, 40, 41, 123, 489, 40, 490, 2965, 61, 418, 2966, 40, 41, 41, 123, 2965, 46, 2967, 40, 41, 59, 490, 2968, 61, 2965, 46, 2969, 40, 41, 59, 40, 40, 2970, 41, 2968, 41, 46, 2971, 40, 41, 59, 2972, 46, 2973, 40, 45, 1501, 44, 2968, 46, 2974, 41, 59, 125, 125, 91, 2001, 93, 439, 492, 2975, 40, 41, 123, 489, 40, 490, 2976, 61, 418, 2977, 40, 41, 41, 123, 2976, 46, 2978, 40, 41, 59, 2976, 46, 2979, 40, 41, 59, 490, 2980, 61, 2976, 46, 2981, 40, 64, 41, 59, 489, 40, 2980, 41, 123, 2982, 46, 2983, 40, 45, 1501, 44, 2980, 46, 2984, 41, 59, 2980, 46, 2985, 40, 41, 59, 2982, 46, 2983, 40, 1501, 44, 2980, 46, 2984, 41, 59, 125, 2986, 46, 2987, 40, 1502, 44, 2980, 46, 2988, 41, 59, 125, 125, 91, 2001, 93, 439, 492, 2989, 40, 41, 123, 489, 40, 490, 2990, 61, 418, 2991, 40, 41, 41, 123, 2990, 46, 2992, 40, 41, 59, 2990, 46, 2993, 40, 41, 59, 2990, 46, 2993, 40, 41, 59, 2990, 46, 2993, 40, 41, 59, 489, 40, 490, 2994, 61, 2990, 46, 2995, 40, 41, 41, 123, 490, 2996, 61, 2994, 46, 2997, 40, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 304, 40, 2996, 46, 2999, 46, 3000, 40, 41, 41, 59, 2998, 46, 3001, 40, 1502, 44, 2996, 46, 3002, 46, 3003, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 1500, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 45, 1501, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 478, 40, 461, 41, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1500, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 1501, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 45, 1501, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 304, 40, 40, 323, 41, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 478, 40, 413, 41, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 304, 40, 40, 323, 41, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1501, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 1502, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 45, 1501, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 304, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 478, 40, 413, 41, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 304, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 302, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 1502, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 45, 1501, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 478, 40, 413, 41, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 304, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 304, 40, 40, 323, 41, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 2998, 46, 3001, 40, 2490, 46, 2491, 44, 2996, 46, 3002, 91, 1502, 93, 91, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 3004, 40, 41, 123, 489, 40, 490, 3005, 61, 418, 3006, 40, 41, 41, 123, 3005, 46, 3007, 40, 41, 59, 3005, 46, 3008, 40, 64, 41, 59, 489, 40, 490, 3009, 61, 3005, 46, 3010, 40, 41, 41, 123, 490, 3011, 61, 3009, 46, 3012, 40, 41, 59, 3013, 46, 3014, 40, 1501, 44, 3011, 46, 3015, 46, 3016, 41, 59, 3013, 46, 3014, 40, 44, 3011, 46, 3015, 91, 1500, 93, 91, 3017, 46, 3018, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 3019, 40, 41, 123, 489, 40, 490, 3020, 61, 418, 3021, 40, 41, 41, 123, 3020, 46, 3022, 40, 41, 59, 3020, 46, 3023, 40, 41, 59, 489, 40, 490, 3024, 61, 3020, 46, 3025, 40, 41, 41, 123, 490, 3026, 61, 3024, 46, 3027, 40, 41, 59, 3028, 46, 3029, 40, 1501, 44, 3026, 46, 3030, 46, 3031, 41, 59, 3028, 46, 3029, 40, 44, 3026, 46, 3030, 91, 1500, 93, 91, 3032, 46, 3033, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 3034, 40, 41, 123, 489, 40, 490, 3035, 61, 418, 3036, 40, 41, 41, 123, 3035, 46, 3037, 40, 41, 59, 489, 40, 490, 3038, 61, 3035, 46, 3039, 40, 41, 41, 123, 490, 3040, 61, 3038, 46, 3041, 40, 41, 59, 3042, 46, 3043, 40, 1502, 44, 3040, 46, 3044, 46, 3045, 41, 59, 3042, 46, 3043, 40, 44, 3040, 46, 3044, 91, 1500, 93, 91, 3046, 46, 3047, 93, 41, 59, 3042, 46, 3043, 40, 44, 3040, 46, 3044, 91, 1501, 93, 91, 3046, 46, 3047, 93, 41, 59, 3042, 46, 3043, 40, 44, 3040, 46, 3044, 91, 1502, 93, 91, 3046, 46, 3047, 93, 41, 59, 3042, 46, 3043, 40, 44, 3040, 46, 3044, 91, 1502, 93, 91, 3046, 46, 3047, 93, 41, 59, 3042, 46, 3043, 40, 44, 3040, 46, 3044, 91, 1502, 93, 91, 3046, 46, 3047, 93, 41, 59, 3042, 46, 3043, 40, 44, 3040, 46, 3044, 91, 1502, 93, 91, 3046, 46, 3047, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 3048, 40, 41, 123, 489, 40, 490, 3049, 61, 418, 3050, 40, 41, 41, 123, 3049, 46, 3051, 40, 41, 59, 489, 40, 490, 3052, 61, 3049, 46, 3053, 40, 41, 41, 123, 490, 3054, 61, 3052, 46, 3055, 40, 41, 59, 3056, 46, 3057, 40, 1502, 44, 3054, 46, 3058, 46, 3059, 41, 59, 3056, 46, 3057, 40, 44, 3054, 46, 3058, 91, 1500, 93, 91, 3060, 46, 3061, 93, 41, 59, 3056, 46, 3057, 40, 44, 3054, 46, 3058, 91, 1501, 93, 91, 3060, 46, 3061, 93, 41, 59, 3056, 46, 3057, 40, 44, 3054, 46, 3058, 91, 1502, 93, 91, 3060, 46, 3061, 93, 41, 59, 3056, 46, 3057, 40, 44, 3054, 46, 3058, 91, 1502, 93, 91, 3060, 46, 3061, 93, 41, 59, 3056, 46, 3057, 40, 44, 3054, 46, 3058, 91, 1502, 93, 91, 3060, 46, 3061, 93, 41, 59, 3056, 46, 3057, 40, 44, 3054, 46, 3058, 91, 1502, 93, 91, 3060, 46, 3061, 93, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 439, 492, 3062, 40, 461, 3063, 44, 2559, 3064, 41, 123, 489, 40, 490, 3065, 61, 418, 3066, 40, 41, 41, 123, 3065, 46, 3067, 40, 41, 59, 3065, 46, 3068, 40, 41, 59, 3065, 46, 3068, 40, 36, 41, 59, 489, 40, 490, 3069, 61, 3065, 46, 3070, 40, 41, 41, 123, 490, 3071, 61, 3069, 46, 3072, 40, 41, 59, 3073, 46, 304, 40, 3071, 46, 3074, 46, 3075, 40, 41, 41, 59, 3073, 46, 3076, 40, 3064, 44, 3071, 46, 3077, 91, 1500, 93, 91, 93, 41, 59, 125, 125, 125, 91, 2257, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 413, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 356, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 326, 91, 93, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 91, 2258, 40, 44, 478, 40, 461, 41, 41, 93, 439, 492, 3078, 40, 461, 2569, 44, 2559, 2413, 41, 123, 489, 40, 490, 3079, 61, 418, 3080, 40, 41, 41, 123, 3079, 46, 3081, 40, 41, 59, 3079, 46, 3082, 40, 36, 41, 59, 489, 40, 490, 3083, 61, 3079, 46, 3084, 40, 41, 41, 123, 490, 3085, 61, 3083, 46, 3086, 40, 41, 59, 3087, 46, 304, 40, 3085, 46, 3088, 46, 3089, 40, 41, 41, 59, 3087, 46, 3090, 40, 2413, 44, 3085, 46, 3091, 91, 1500, 93, 91, 93, 41, 59, 125, 125, 125, 91, 2001, 93, 439, 492, 3092, 40, 41, 123, 2021, 40, 2022, 619, 2022, 46, 3093, 40, 41, 44, 3094, 40, 2386, 46, 3093, 41, 41, 59, 125, 91, 2001, 93, 439, 492, 3095, 40, 41, 619, 2041, 40, 2022, 619, 2022, 46, 3096, 40, 41, 41, 59, 91, 2001, 93, 439, 492, 3097, 40, 41, 123, 489, 40, 490, 3098, 61, 418, 3099, 40, 41, 41, 123, 3098, 46, 3100, 40, 41, 59, 3098, 46, 3101, 40, 41, 59, 3098, 46, 3102, 60, 461, 44, 413, 62, 40, 44, 3103, 619, 469, 418, 3104, 40, 3103, 41, 41, 59, 490, 3105, 61, 3098, 46, 3106, 40, 64, 41, 59, 40, 40, 3107, 41, 3105, 41, 46, 3108, 40, 41, 59, 3109, 46, 3110, 40, 1501, 44, 3098, 46, 3111, 60, 413, 62, 40, 41, 41, 59, 125, 125, 91, 2001, 93, 439, 492, 3112, 40, 41, 123, 489, 40, 490, 3113, 61, 418, 3114, 40, 41, 41, 123, 3113, 46, 3115, 40, 41, 59, 3113, 46, 3116, 40, 41, 59, 3113, 46, 3117, 60, 461, 44, 413, 62, 40, 44, 3118, 619, 469, 418, 3119, 40, 3118, 41, 41, 59, 490, 3120, 61, 3113, 46, 3121, 40, 64, 41, 59, 40, 40, 3122, 41, 3120, 41, 46, 3123, 40, 41, 59, 3124, 46, 3125, 40, 1500, 44, 3113, 46, 3126, 60, 413, 62, 40, 41, 41, 59, 125, 125, 437, 457, 492, 2035, 60, 2472, 62, 40, 461, 2412, 44, 3127, 60, 3128, 44, 2472, 62, 3129, 44, 2472, 2413, 41, 123, 489, 40, 490, 3130, 61, 418, 3131, 40, 41, 41, 123, 3130, 46, 3132, 40, 41, 59, 489, 40, 490, 3133, 61, 3130, 46, 3134, 40, 2412, 41, 41, 123, 490, 3135, 61, 3133, 46, 2944, 40, 41, 59, 3136, 46, 304, 40, 3135, 41, 59, 3136, 46, 3137, 40, 2413, 44, 3129, 40, 3133, 41, 41, 59, 125, 125, 125, 437, 457, 492, 2380, 40, 3138, 60, 3128, 62, 3129, 41, 123, 489, 40, 490, 3139, 61, 418, 3140, 40, 41, 41, 123, 3139, 46, 3141, 40, 41, 59, 489, 40, 490, 3142, 61, 3139, 46, 3143, 40, 41, 41, 123, 490, 3144, 61, 3142, 46, 2944, 40, 41, 59, 3145, 46, 304, 40, 3144, 41, 59, 490, 3146, 61, 3145, 46, 3147, 60, 3148, 62, 40, 40, 41, 619, 3129, 40, 3142, 41, 41, 59, 3145, 46, 3149, 40, 3150, 46, 3151, 40, 1500, 41, 44, 3146, 46, 3152, 41, 59, 125, 125, 125, 437, 457, 492, 2539, 40, 3138, 60, 3128, 62, 3129, 41, 123, 489, 40, 490, 3153, 61, 418, 3154, 40, 41, 41, 123, 3153, 46, 3155, 40, 41, 59, 489, 40, 490, 3156, 61, 3153, 46, 3157, 40, 41, 41, 123, 490, 3158, 61, 3159, 46, 3160, 60, 3161, 62, 40, 40, 41, 619, 3129, 40, 3156, 41, 41, 59, 3159, 46, 3162, 40, 3163, 46, 3164, 44, 3158, 46, 3165, 41, 59, 125, 125, 125, 437, 457, 492, 2541, 40, 3138, 60, 3128, 62, 3129, 41, 123, 489, 40, 490, 3166, 61, 418, 3167, 40, 41, 41, 123, 3166, 46, 3168, 40, 41, 59, 489, 40, 490, 3169, 61, 3166, 46, 3170, 40, 41, 41, 123, 490, 3171, 61, 3169, 46, 2944, 40, 41, 59, 3172, 46, 304, 40, 3171, 41, 59, 3171, 61, 3169, 46, 2944, 40, 41, 59, 3172, 46, 302, 40, 3171, 41, 59, 490, 3173, 61, 3172, 46, 3174, 60, 3175, 62, 40, 40, 41, 619, 3129, 40, 3169, 41, 41, 59, 3172, 46, 3176, 40, 3177, 46, 3178, 44, 3173, 46, 3179, 41, 59, 125, 125, 125, 437, 457, 492, 2021, 40, 3138, 60, 2386, 62, 3129, 44, 461, 3180, 41, 123, 489, 40, 490, 3181, 61, 418, 3182, 40, 41, 41, 123, 3181, 46, 3183, 40, 41, 59, 490, 3184, 61, 3181, 46, 3185, 40, 41, 59, 40, 40, 3186, 41, 3184, 41, 46, 3187, 40, 41, 59, 490, 3188, 61, 3189, 46, 3190, 60, 3191, 62, 40, 40, 41, 619, 3129, 40, 3184, 41, 41, 59, 3189, 46, 3192, 40, 3193, 46, 3194, 40, 3180, 41, 44, 3188, 46, 3195, 41, 59, 125, 125, 437, 457, 492, 2041, 40, 3138, 60, 2386, 62, 3129, 41, 123, 489, 40, 490, 3196, 61, 418, 3197, 40, 41, 41, 123, 3196, 46, 3198, 40, 41, 59, 489, 40, 490, 3199, 61, 3196, 46, 3200, 40, 41, 41, 123, 490, 3201, 61, 3202, 46, 3203, 60, 3204, 62, 40, 40, 41, 619, 3129, 40, 3199, 41, 41, 59, 3202, 46, 3205, 40, 3206, 46, 3207, 44, 3201, 46, 3208, 41, 59, 125, 125, 125, 437, 370, 2505, 123, 2506, 61, 1501, 125, 125]",0.9999919,1
16,72056,C#,"public class CSharpEntityTypeGenerator : ICSharpEntityTypeGenerator
{
    private readonly IAnnotationCodeGenerator _annotationCodeGenerator;
    private readonly ICSharpHelper _code;

    private IndentedStringBuilder _sb = null!;
    private bool _useDataAnnotations;
    private bool _useNullableReferenceTypes;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public CSharpEntityTypeGenerator(
        IAnnotationCodeGenerator annotationCodeGenerator,
        ICSharpHelper cSharpHelper)
    {
        _annotationCodeGenerator = annotationCodeGenerator;
        _code = cSharpHelper;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string WriteCode(IEntityType entityType, string? @namespace, bool useDataAnnotations, bool useNullableReferenceTypes)
    {
        _useDataAnnotations = useDataAnnotations;
        _useNullableReferenceTypes = useNullableReferenceTypes;

        _sb = new IndentedStringBuilder();

        _sb.AppendLine(""using System;"");
        _sb.AppendLine(""using System.Collections.Generic;"");

        if (_useDataAnnotations)
        {
            _sb.AppendLine(""using System.ComponentModel.DataAnnotations;"");
            _sb.AppendLine(""using System.ComponentModel.DataAnnotations.Schema;"");
            _sb.AppendLine(""using Microsoft.EntityFrameworkCore;""); // For attributes coming out of Abstractions
        }

        foreach (var ns in entityType.GetProperties()
                     .SelectMany(p => p.ClrType.GetNamespaces())
                     .Where(ns => ns != ""System"" && ns != ""System.Collections.Generic"")
                     .Distinct()
                     .OrderBy(x => x, new NamespaceComparer()))
        {
            _sb.AppendLine($""using {ns};"");
        }

        _sb.AppendLine();

        if (!string.IsNullOrEmpty(@namespace))
        {
            _sb.AppendLine($""namespace {@namespace}"");
            _sb.AppendLine(""{"");
            _sb.IncrementIndent();
        }

        GenerateClass(entityType);

        if (!string.IsNullOrEmpty(@namespace))
        {
            _sb.DecrementIndent();
            _sb.AppendLine(""}"");
        }

        return _sb.ToString();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GenerateClass(IEntityType entityType)
    {
        GenerateComment(entityType.GetComment());

        if (_useDataAnnotations)
        {
            GenerateEntityTypeDataAnnotations(entityType);
        }

        _sb.AppendLine($""public partial class {entityType.Name}"");

        _sb.AppendLine(""{"");

        using (_sb.Indent())
        {
            GenerateConstructor(entityType);
            GenerateProperties(entityType);
            GenerateNavigationProperties(entityType);
            GenerateSkipNavigationProperties(entityType);
        }

        _sb.AppendLine(""}"");
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GenerateEntityTypeDataAnnotations(IEntityType entityType)
    {
        GenerateKeylessAttribute(entityType);
        GenerateTableAttribute(entityType);
        GenerateIndexAttributes(entityType);

        var annotations = _annotationCodeGenerator
            .FilterIgnoredAnnotations(entityType.GetAnnotations())
            .ToDictionary(a => a.Name, a => a);
        _annotationCodeGenerator.RemoveAnnotationsHandledByConventions(entityType, annotations);

        foreach (var attribute in _annotationCodeGenerator.GenerateDataAnnotationAttributes(entityType, annotations))
        {
            var attributeWriter = new AttributeWriter(attribute.Type.Name);
            foreach (var argument in attribute.Arguments)
            {
                attributeWriter.AddParameter(_code.UnknownLiteral(argument));
            }

            _sb.AppendLine(attributeWriter.ToString());
        }
    }

    private void GenerateKeylessAttribute(IEntityType entityType)
    {
        if (entityType.FindPrimaryKey() == null)
        {
            _sb.AppendLine(new AttributeWriter(nameof(KeylessAttribute)).ToString());
        }
    }

    private void GenerateTableAttribute(IEntityType entityType)
    {
        var tableName = entityType.GetTableName();
        var schema = entityType.GetSchema();
        var defaultSchema = entityType.Model.GetDefaultSchema();

        var schemaParameterNeeded = schema != null && schema != defaultSchema;
        var isView = entityType.GetViewName() != null;
        var tableAttributeNeeded = !isView && (schemaParameterNeeded || tableName != null && tableName != entityType.GetDbSetName());
        if (tableAttributeNeeded)
        {
            var tableAttribute = new AttributeWriter(nameof(TableAttribute));

            tableAttribute.AddParameter(_code.Literal(tableName!));

            if (schemaParameterNeeded)
            {
                tableAttribute.AddParameter($""{nameof(TableAttribute.Schema)} = {_code.Literal(schema!)}"");
            }

            _sb.AppendLine(tableAttribute.ToString());
        }
    }

    private void GenerateIndexAttributes(IEntityType entityType)
    {
        // Do not generate IndexAttributes for indexes which
        // would be generated anyway by convention.
        foreach (var index in entityType.GetIndexes().Where(
                     i => ConfigurationSource.Convention != ((IConventionIndex)i).GetConfigurationSource()))
        {
            // If there are annotations that cannot be represented using an IndexAttribute then use fluent API instead.
            var annotations = _annotationCodeGenerator
                .FilterIgnoredAnnotations(index.GetAnnotations())
                .ToDictionary(a => a.Name, a => a);
            _annotationCodeGenerator.RemoveAnnotationsHandledByConventions(index, annotations);

            if (annotations.Count == 0)
            {
                var indexAttribute = new AttributeWriter(nameof(IndexAttribute));
                foreach (var property in index.Properties)
                {
                    indexAttribute.AddParameter(_code.Literal(property.Name));
                }

                if (index.Name != null)
                {
                    indexAttribute.AddParameter($""{nameof(IndexAttribute.Name)} = {_code.Literal(index.Name)}"");
                }

                if (index.IsUnique)
                {
                    indexAttribute.AddParameter($""{nameof(IndexAttribute.IsUnique)} = {_code.Literal(index.IsUnique)}"");
                }

                _sb.AppendLine(indexAttribute.ToString());
            }
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GenerateConstructor(IEntityType entityType)
    {
        var collectionNavigations = entityType.GetDeclaredNavigations()
            .Cast<INavigationBase>()
            .Concat(entityType.GetDeclaredSkipNavigations())
            .Where(n => n.IsCollection)
            .ToList();

        if (collectionNavigations.Count > 0)
        {
            _sb.AppendLine($""public {entityType.Name}()"");
            _sb.AppendLine(""{"");

            using (_sb.Indent())
            {
                foreach (var navigation in collectionNavigations)
                {
                    _sb.AppendLine($""{navigation.Name} = new HashSet<{navigation.TargetEntityType.Name}>();"");
                }
            }

            _sb.AppendLine(""}"");
            _sb.AppendLine();
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GenerateProperties(IEntityType entityType)
    {
        foreach (var property in entityType.GetProperties().OrderBy(p => p.GetColumnOrder() ?? -1))
        {
            GenerateComment(property.GetComment());

            if (_useDataAnnotations)
            {
                GeneratePropertyDataAnnotations(property);
            }

            _sb.AppendLine(
                !_useNullableReferenceTypes || property.ClrType.IsValueType
                    ? $""public {_code.Reference(property.ClrType)} {property.Name} {{ get; set; }}""
                    : property.IsNullable
                        ? $""public {_code.Reference(property.ClrType)}? {property.Name} {{ get; set; }}""
                        : $""public {_code.Reference(property.ClrType)} {property.Name} {{ get; set; }} = null!;"");
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GeneratePropertyDataAnnotations(IProperty property)
    {
        GenerateKeyAttribute(property);
        GenerateRequiredAttribute(property);
        GenerateColumnAttribute(property);
        GenerateMaxLengthAttribute(property);
        GenerateUnicodeAttribute(property);
        GeneratePrecisionAttribute(property);

        var annotations = _annotationCodeGenerator
            .FilterIgnoredAnnotations(property.GetAnnotations())
            .ToDictionary(a => a.Name, a => a);
        _annotationCodeGenerator.RemoveAnnotationsHandledByConventions(property, annotations);

        foreach (var attribute in _annotationCodeGenerator.GenerateDataAnnotationAttributes(property, annotations))
        {
            var attributeWriter = new AttributeWriter(attribute.Type.Name);
            foreach (var argument in attribute.Arguments)
            {
                attributeWriter.AddParameter(_code.UnknownLiteral(argument));
            }

            _sb.AppendLine(attributeWriter.ToString());
        }
    }

    private void GenerateKeyAttribute(IProperty property)
    {
        var key = property.FindContainingPrimaryKey();
        if (key != null)
        {
            _sb.AppendLine(new AttributeWriter(nameof(KeyAttribute)).ToString());
        }
    }

    private void GenerateColumnAttribute(IProperty property)
    {
        var columnName = property.GetColumnBaseName();
        var columnType = property.GetConfiguredColumnType();

        var delimitedColumnName = columnName != null && columnName != property.Name ? _code.Literal(columnName) : null;
        var delimitedColumnType = columnType != null ? _code.Literal(columnType) : null;

        if ((delimitedColumnName ?? delimitedColumnType) != null)
        {
            var columnAttribute = new AttributeWriter(nameof(ColumnAttribute));

            if (delimitedColumnName != null)
            {
                columnAttribute.AddParameter(delimitedColumnName);
            }

            if (delimitedColumnType != null)
            {
                columnAttribute.AddParameter($""{nameof(ColumnAttribute.TypeName)} = {delimitedColumnType}"");
            }

            _sb.AppendLine(columnAttribute.ToString());
        }
    }

    private void GenerateRequiredAttribute(IProperty property)
    {
        if ((!_useNullableReferenceTypes || property.ClrType.IsValueType)
            && !property.IsNullable
            && property.ClrType.IsNullableType()
            && !property.IsPrimaryKey())
        {
            _sb.AppendLine(new AttributeWriter(nameof(RequiredAttribute)).ToString());
        }
    }

    private void GenerateMaxLengthAttribute(IProperty property)
    {
        var maxLength = property.GetMaxLength();

        if (maxLength.HasValue)
        {
            var lengthAttribute = new AttributeWriter(
                property.ClrType == typeof(string)
                    ? nameof(StringLengthAttribute)
                    : nameof(MaxLengthAttribute));

            lengthAttribute.AddParameter(_code.Literal(maxLength.Value));

            _sb.AppendLine(lengthAttribute.ToString());
        }
    }

    private void GenerateUnicodeAttribute(IProperty property)
    {
        if (property.ClrType != typeof(string))
        {
            return;
        }

        var unicode = property.IsUnicode();
        if (unicode.HasValue)
        {
            var unicodeAttribute = new AttributeWriter(nameof(UnicodeAttribute));
            if (!unicode.Value)
            {
                unicodeAttribute.AddParameter(_code.Literal(false));
            }

            _sb.AppendLine(unicodeAttribute.ToString());
        }
    }

    private void GeneratePrecisionAttribute(IProperty property)
    {
        var precision = property.GetPrecision();
        if (precision.HasValue)
        {
            var precisionAttribute = new AttributeWriter(nameof(PrecisionAttribute));
            precisionAttribute.AddParameter(_code.Literal(precision.Value));

            var scale = property.GetScale();
            if (scale.HasValue)
            {
                precisionAttribute.AddParameter(_code.Literal(scale.Value));
            }

            _sb.AppendLine(precisionAttribute.ToString());
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GenerateNavigationProperties(IEntityType entityType)
    {
        var sortedNavigations = entityType.GetNavigations()
            .OrderBy(n => n.IsOnDependent ? 0 : 1)
            .ThenBy(n => n.IsCollection ? 1 : 0)
            .ToList();

        if (sortedNavigations.Count > 0)
        {
            _sb.AppendLine();

            foreach (var navigation in sortedNavigations)
            {
                if (_useDataAnnotations)
                {
                    GenerateNavigationDataAnnotations(navigation);
                }

                var referencedTypeName = navigation.TargetEntityType.Name;
                var navigationType = navigation.IsCollection ? $""ICollection<{referencedTypeName}>"" : referencedTypeName;

                _sb.AppendLine(
                    !_useNullableReferenceTypes || navigation.IsCollection
                        ? $""public virtual {navigationType} {navigation.Name} {{ get; set; }}""
                        : navigation.ForeignKey.IsRequired
                            ? $""public virtual {navigationType} {navigation.Name} {{ get; set; }} = null!;""
                            : $""public virtual {navigationType}? {navigation.Name} {{ get; set; }}"");
            }
        }
    }

    private void GenerateNavigationDataAnnotations(ISkipNavigation navigation)
    {
        GenerateForeignKeyAttribute(navigation);
        GenerateInversePropertyAttribute(navigation);
    }

    private void GenerateForeignKeyAttribute(ISkipNavigation navigation)
    {
        if (navigation.ForeignKey.PrincipalKey.IsPrimaryKey())
        {
            var foreignKeyAttribute = new AttributeWriter(nameof(ForeignKeyAttribute));
            foreignKeyAttribute.AddParameter(
                _code.Literal(
                    string.Join("","", navigation.ForeignKey.Properties.Select(p => p.Name))));
            _sb.AppendLine(foreignKeyAttribute.ToString());
        }
    }

    private void GenerateInversePropertyAttribute(ISkipNavigation navigation)
    {
        if (navigation.ForeignKey.PrincipalKey.IsPrimaryKey())
        {
            var inverseNavigation = navigation.Inverse;

            if (inverseNavigation != null)
            {
                var inversePropertyAttribute = new AttributeWriter(nameof(InversePropertyAttribute));

                inversePropertyAttribute.AddParameter(_code.Literal(inverseNavigation.Name));

                _sb.AppendLine(inversePropertyAttribute.ToString());
            }
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual void GenerateSkipNavigationProperties(IEntityType entityType)
    {
        var skipNavigations = entityType.GetSkipNavigations().ToList();

        if (skipNavigations.Count > 0)
        {
            _sb.AppendLine();

            foreach (var navigation in skipNavigations)
            {
                if (_useDataAnnotations)
                {
                    GenerateNavigationDataAnnotations(navigation);
                }

                var referencedTypeName = navigation.TargetEntityType.Name;
                var navigationType = navigation.IsCollection ? $""ICollection<{referencedTypeName}>"" : referencedTypeName;

                _sb.AppendLine(
                    !_useNullableReferenceTypes || navigation.IsCollection
                        ? $""public virtual {navigationType} {navigation.Name} {{ get; set; }}""
                        : navigation.ForeignKey.IsRequired
                            ? $""public virtual {navigationType} {navigation.Name} {{ get; set; }} = null!;""
                            : $""public virtual {navigationType}? {navigation.Name} {{ get; set; }}"");
            }
        }
    }

    private void GenerateNavigationDataAnnotations(INavigation navigation)
    {
        GenerateForeignKeyAttribute(navigation);
        GenerateInversePropertyAttribute(navigation);
    }

    private void GenerateForeignKeyAttribute(INavigation navigation)
    {
        if (navigation.IsOnDependent)
        {
            if (navigation.ForeignKey.PrincipalKey.IsPrimaryKey())
            {
                var foreignKeyAttribute = new AttributeWriter(nameof(ForeignKeyAttribute));

                foreignKeyAttribute.AddParameter(
                    _code.Literal(
                        string.Join("","", navigation.ForeignKey.Properties.Select(p => p.Name))));

                _sb.AppendLine(foreignKeyAttribute.ToString());
            }
        }
    }

    private void GenerateInversePropertyAttribute(INavigation navigation)
    {
        if (navigation.ForeignKey.PrincipalKey.IsPrimaryKey())
        {
            var inverseNavigation = navigation.Inverse;

            if (inverseNavigation != null)
            {
                var inversePropertyAttribute = new AttributeWriter(nameof(InversePropertyAttribute));

                inversePropertyAttribute.AddParameter(_code.Literal(inverseNavigation.Name));

                _sb.AppendLine(inversePropertyAttribute.ToString());
            }
        }
    }

    private void GenerateComment(string? comment)
    {
        if (!string.IsNullOrWhiteSpace(comment))
        {
            _sb.AppendLine(""/// <summary>"");

            foreach (var line in comment.Split(new[] { ""\r\n"", ""\r"", ""\n"" }, StringSplitOptions.None))
            {
                _sb.AppendLine($""/// {SecurityElement.Escape(line)}"");
            }

            _sb.AppendLine(""/// </summary>"");
        }
    }

    private sealed class AttributeWriter
    {
        private readonly string _attributeName;
        private readonly List<string> _parameters = new();

        public AttributeWriter(string attributeName)
        {
            _attributeName = attributeName;
        }

        public void AddParameter(string parameter)
            => _parameters.Add(parameter);

        public override string ToString()
            => ""[""
                + (_parameters.Count == 0
                    ? StripAttribute(_attributeName)
                    : StripAttribute(_attributeName) + ""("" + string.Join("", "", _parameters) + "")"")
                + ""]"";

        private static string StripAttribute(string attributeName)
            => attributeName.EndsWith(""Attribute"", StringComparison.Ordinal)
                ? attributeName[..^9]
                : attributeName;
    }
}",1,"[439, 334, 2000, 58, 2001, 123, 437, 441, 2002, 2003, 59, 437, 441, 2004, 2005, 59, 437, 2006, 2007, 61, 424, 33, 59, 437, 323, 2008, 59, 437, 323, 2009, 59, 439, 2000, 40, 2002, 2010, 44, 2004, 2011, 41, 123, 2003, 61, 2010, 59, 2005, 61, 2011, 59, 125, 439, 491, 461, 2012, 40, 2013, 2014, 44, 461, 63, 64, 416, 44, 323, 2015, 44, 323, 2016, 41, 123, 2008, 61, 2015, 59, 2009, 61, 2016, 59, 2007, 61, 418, 2006, 40, 41, 59, 2007, 46, 2017, 40, 41, 59, 2007, 46, 2017, 40, 41, 59, 392, 40, 2008, 41, 123, 2007, 46, 2017, 40, 41, 59, 2007, 46, 2017, 40, 41, 59, 2007, 46, 2017, 40, 41, 59, 125, 386, 40, 490, 2018, 398, 2014, 46, 2019, 40, 41, 46, 2020, 40, 2021, 619, 2021, 46, 2022, 46, 2023, 40, 41, 41, 46, 2024, 40, 2018, 619, 2018, 631, 605, 2018, 631, 41, 46, 2025, 40, 41, 46, 2026, 40, 2027, 619, 2027, 44, 418, 2028, 40, 41, 41, 41, 123, 2007, 46, 2017, 40, 36, 41, 59, 125, 2007, 46, 2017, 40, 41, 59, 392, 40, 33, 461, 46, 2029, 40, 64, 416, 41, 41, 123, 2007, 46, 2017, 40, 36, 41, 59, 2007, 46, 2017, 40, 41, 59, 2007, 46, 2030, 40, 41, 59, 125, 2031, 40, 2014, 41, 59, 392, 40, 33, 461, 46, 2029, 40, 64, 416, 41, 41, 123, 2007, 46, 2032, 40, 41, 59, 2007, 46, 2017, 40, 41, 59, 125, 450, 2007, 46, 2033, 40, 41, 59, 125, 438, 491, 492, 2034, 40, 2013, 2014, 41, 123, 2035, 40, 2014, 46, 2036, 40, 41, 41, 59, 392, 40, 2008, 41, 123, 2037, 40, 2014, 41, 59, 125, 2007, 46, 2038, 40, 36, 41, 59, 2007, 46, 2038, 40, 41, 59, 489, 40, 2007, 46, 2039, 40, 41, 41, 123, 2040, 40, 2014, 41, 59, 2041, 40, 2014, 41, 59, 2042, 40, 2014, 41, 59, 2043, 40, 2014, 41, 59, 125, 2007, 46, 2038, 40, 41, 59, 125, 438, 491, 492, 2044, 40, 2013, 2014, 41, 123, 2045, 40, 2014, 41, 59, 2046, 40, 2014, 41, 59, 2047, 40, 2014, 41, 59, 490, 2048, 61, 2003, 46, 2049, 40, 2014, 46, 2050, 40, 41, 41, 46, 2051, 40, 2052, 619, 2052, 46, 2053, 44, 2052, 619, 2052, 41, 59, 2003, 46, 2054, 40, 2014, 44, 2048, 41, 59, 386, 40, 490, 2055, 398, 2003, 46, 2056, 40, 2014, 44, 2048, 41, 41, 123, 490, 2057, 61, 418, 2058, 40, 2055, 46, 2059, 46, 2053, 41, 59, 386, 40, 490, 2060, 398, 2055, 46, 2061, 41, 123, 2057, 46, 2062, 40, 2005, 46, 2063, 40, 2060, 41, 41, 59, 125, 2007, 46, 2064, 40, 2057, 46, 2065, 40, 41, 41, 59, 125, 125, 437, 492, 2066, 40, 2013, 2014, 41, 123, 392, 40, 2014, 46, 2067, 40, 41, 614, 424, 41, 123, 2007, 46, 2068, 40, 418, 2069, 40, 2070, 40, 2071, 41, 41, 46, 2072, 40, 41, 41, 59, 125, 125, 437, 492, 2073, 40, 2013, 2014, 41, 123, 490, 2074, 61, 2014, 46, 2075, 40, 41, 59, 490, 2076, 61, 2014, 46, 2077, 40, 41, 59, 490, 2078, 61, 2014, 46, 2079, 46, 2080, 40, 41, 59, 490, 2081, 61, 2076, 631, 424, 605, 2076, 631, 2078, 59, 490, 2082, 61, 2014, 46, 2083, 40, 41, 631, 424, 59, 490, 2084, 61, 33, 2082, 605, 40, 2081, 606, 2074, 631, 424, 605, 2074, 631, 2014, 46, 2085, 40, 41, 41, 59, 392, 40, 2084, 41, 123, 490, 2086, 61, 418, 2087, 40, 2088, 40, 2089, 41, 41, 59, 2086, 46, 2090, 40, 2005, 46, 2091, 40, 2074, 33, 41, 41, 59, 392, 40, 2081, 41, 123, 2086, 46, 2090, 40, 36, 41, 59, 125, 2007, 46, 2092, 40, 2086, 46, 2093, 40, 41, 41, 59, 125, 125, 437, 492, 2094, 40, 2013, 2014, 41, 123, 386, 40, 490, 2095, 398, 2014, 46, 2096, 40, 41, 46, 2097, 40, 2098, 619, 2099, 46, 2100, 631, 40, 40, 2101, 41, 2098, 41, 46, 2102, 40, 41, 41, 41, 123, 490, 2103, 61, 2003, 46, 2104, 40, 2095, 46, 2105, 40, 41, 41, 46, 2106, 40, 2107, 619, 2107, 46, 2108, 44, 2107, 619, 2107, 41, 59, 2003, 46, 2109, 40, 2095, 44, 2103, 41, 59, 392, 40, 2103, 46, 2110, 614, 1500, 41, 123, 490, 2111, 61, 418, 2112, 40, 2113, 40, 2114, 41, 41, 59, 386, 40, 490, 2115, 398, 2095, 46, 2116, 41, 123, 2111, 46, 2117, 40, 2005, 46, 2118, 40, 2115, 46, 2108, 41, 41, 59, 125, 392, 40, 2095, 46, 2108, 631, 424, 41, 123, 2111, 46, 2119, 40, 36, 41, 59, 125, 392, 40, 2095, 46, 2120, 41, 123, 2111, 46, 2121, 40, 36, 41, 59, 125, 2007, 46, 2122, 40, 2111, 46, 2123, 40, 41, 41, 59, 125, 125, 125, 438, 491, 492, 2124, 40, 2013, 2014, 41, 123, 490, 2125, 61, 2014, 46, 2126, 40, 41, 46, 2127, 60, 2128, 62, 40, 41, 46, 2129, 40, 2014, 46, 2130, 40, 41, 41, 46, 2131, 40, 2132, 619, 2132, 46, 2133, 41, 46, 2134, 40, 41, 59, 392, 40, 2125, 46, 2135, 62, 1500, 41, 123, 2007, 46, 2136, 40, 36, 41, 59, 2007, 46, 2136, 40, 41, 59, 489, 40, 2007, 46, 2137, 40, 41, 41, 123, 386, 40, 490, 2138, 398, 2125, 41, 123, 2007, 46, 2136, 40, 36, 41, 59, 125, 125, 2007, 46, 2136, 40, 41, 59, 2007, 46, 2136, 40, 41, 59, 125, 125, 438, 491, 492, 2139, 40, 2013, 2014, 41, 123, 386, 40, 490, 2140, 398, 2014, 46, 2141, 40, 41, 46, 2142, 40, 2143, 619, 2143, 46, 2144, 40, 41, 633, 45, 1501, 41, 41, 123, 2145, 40, 2140, 46, 2146, 40, 41, 41, 59, 392, 40, 2008, 41, 123, 2147, 40, 2140, 41, 59, 125, 2007, 46, 2148, 40, 33, 2009, 606, 2140, 46, 2149, 46, 2150, 63, 36, 58, 2140, 46, 2151, 63, 36, 58, 36, 41, 59, 125, 125, 438, 491, 492, 2152, 40, 2153, 2154, 41, 123, 2155, 40, 2154, 41, 59, 2156, 40, 2154, 41, 59, 2157, 40, 2154, 41, 59, 2158, 40, 2154, 41, 59, 2159, 40, 2154, 41, 59, 2160, 40, 2154, 41, 59, 490, 2161, 61, 2003, 46, 2162, 40, 2154, 46, 2163, 40, 41, 41, 46, 2164, 40, 2165, 619, 2165, 46, 2166, 44, 2165, 619, 2165, 41, 59, 2003, 46, 2167, 40, 2154, 44, 2161, 41, 59, 386, 40, 490, 2168, 398, 2003, 46, 2169, 40, 2154, 44, 2161, 41, 41, 123, 490, 2170, 61, 418, 2171, 40, 2168, 46, 2172, 46, 2166, 41, 59, 386, 40, 490, 2173, 398, 2168, 46, 2174, 41, 123, 2170, 46, 2175, 40, 2005, 46, 2176, 40, 2173, 41, 41, 59, 125, 2007, 46, 2177, 40, 2170, 46, 2178, 40, 41, 41, 59, 125, 125, 437, 492, 2179, 40, 2153, 2154, 41, 123, 490, 2180, 61, 2154, 46, 2181, 40, 41, 59, 392, 40, 2180, 631, 424, 41, 123, 2007, 46, 2182, 40, 418, 2183, 40, 2184, 40, 2185, 41, 41, 46, 2186, 40, 41, 41, 59, 125, 125, 437, 492, 2187, 40, 2153, 2154, 41, 123, 490, 2188, 61, 2154, 46, 2189, 40, 41, 59, 490, 2190, 61, 2154, 46, 2191, 40, 41, 59, 490, 2192, 61, 2188, 631, 424, 605, 2188, 631, 2154, 46, 2193, 63, 2005, 46, 2194, 40, 2188, 41, 58, 424, 59, 490, 2195, 61, 2190, 631, 424, 63, 2005, 46, 2194, 40, 2190, 41, 58, 424, 59, 392, 40, 40, 2192, 633, 2195, 41, 631, 424, 41, 123, 490, 2196, 61, 418, 2197, 40, 2198, 40, 2199, 41, 41, 59, 392, 40, 2192, 631, 424, 41, 123, 2196, 46, 2200, 40, 2192, 41, 59, 125, 392, 40, 2195, 631, 424, 41, 123, 2196, 46, 2201, 40, 36, 41, 59, 125, 2007, 46, 2202, 40, 2196, 46, 2203, 40, 41, 41, 59, 125, 125, 437, 492, 2204, 40, 2153, 2154, 41, 123, 392, 40, 40, 33, 2009, 606, 2154, 46, 2205, 46, 2206, 41, 605, 33, 2154, 46, 2207, 605, 2154, 46, 2205, 46, 2208, 40, 41, 605, 33, 2154, 46, 2209, 40, 41, 41, 123, 2007, 46, 2210, 40, 418, 2211, 40, 2212, 40, 2213, 41, 41, 46, 2214, 40, 41, 41, 59, 125, 125, 437, 492, 2215, 40, 2153, 2154, 41, 123, 490, 2216, 61, 2154, 46, 2217, 40, 41, 59, 392, 40, 2216, 46, 2218, 41, 123, 490, 2219, 61, 418, 2220, 40, 2154, 46, 2221, 614, 478, 40, 461, 41, 63, 2222, 40, 2223, 41, 58, 2222, 40, 2224, 41, 41, 59, 2219, 46, 2225, 40, 2005, 46, 2226, 40, 2216, 46, 2227, 41, 41, 59, 2007, 46, 2228, 40, 2219, 46, 2229, 40, 41, 41, 59, 125, 125, 437, 492, 2230, 40, 2153, 2154, 41, 123, 392, 40, 2154, 46, 2231, 631, 478, 40, 461, 41, 41, 123, 450, 59, 125, 490, 2232, 61, 2154, 46, 2233, 40, 41, 59, 392, 40, 2232, 46, 2234, 41, 123, 490, 2235, 61, 418, 2236, 40, 2237, 40, 2238, 41, 41, 59, 392, 40, 33, 2232, 46, 2239, 41, 123, 2235, 46, 2240, 40, 2005, 46, 2241, 40, 380, 41, 41, 59, 125, 2007, 46, 2242, 40, 2235, 46, 2243, 40, 41, 41, 59, 125, 125, 437, 492, 2244, 40, 2153, 2154, 41, 123, 490, 2245, 61, 2154, 46, 2246, 40, 41, 59, 392, 40, 2245, 46, 2247, 41, 123, 490, 2248, 61, 418, 2249, 40, 2250, 40, 2251, 41, 41, 59, 2248, 46, 2252, 40, 2005, 46, 2253, 40, 2245, 46, 2254, 41, 41, 59, 490, 2255, 61, 2154, 46, 2256, 40, 41, 59, 392, 40, 2255, 46, 2247, 41, 123, 2248, 46, 2252, 40, 2005, 46, 2253, 40, 2255, 46, 2254, 41, 41, 59, 125, 2007, 46, 2257, 40, 2248, 46, 2258, 40, 41, 41, 59, 125, 125, 438, 491, 492, 2259, 40, 2013, 2014, 41, 123, 490, 2260, 61, 2014, 46, 2261, 40, 41, 46, 2262, 40, 2263, 619, 2263, 46, 2264, 63, 1500, 58, 1501, 41, 46, 2265, 40, 2263, 619, 2263, 46, 2266, 63, 1501, 58, 1500, 41, 46, 2267, 40, 41, 59, 392, 40, 2260, 46, 2268, 62, 1500, 41, 123, 2007, 46, 2269, 40, 41, 59, 386, 40, 490, 2270, 398, 2260, 41, 123, 392, 40, 2008, 41, 123, 2271, 40, 2270, 41, 59, 125, 490, 2272, 61, 2270, 46, 2273, 46, 2274, 59, 490, 2275, 61, 2270, 46, 2266, 63, 36, 58, 2272, 59, 2007, 46, 2269, 40, 33, 2009, 606, 2270, 46, 2266, 63, 36, 58, 2270, 46, 2276, 46, 2277, 63, 36, 58, 36, 41, 59, 125, 125, 125, 437, 492, 2278, 40, 2279, 2280, 41, 123, 2281, 40, 2280, 41, 59, 2282, 40, 2280, 41, 59, 125, 437, 492, 2283, 40, 2279, 2280, 41, 123, 392, 40, 2280, 46, 2284, 46, 2285, 46, 2286, 40, 41, 41, 123, 490, 2287, 61, 418, 2288, 40, 2289, 40, 2290, 41, 41, 59, 2287, 46, 2291, 40, 2005, 46, 2292, 40, 461, 46, 2293, 40, 44, 2280, 46, 2284, 46, 2294, 46, 2295, 40, 2296, 619, 2296, 46, 2297, 41, 41, 41, 41, 59, 2007, 46, 2298, 40, 2287, 46, 2299, 40, 41, 41, 59, 125, 125, 437, 492, 2300, 40, 2279, 2280, 41, 123, 392, 40, 2280, 46, 2301, 46, 2302, 46, 2303, 40, 41, 41, 123, 490, 2304, 61, 2280, 46, 2305, 59, 392, 40, 2304, 631, 424, 41, 123, 490, 2306, 61, 418, 2307, 40, 2308, 40, 2309, 41, 41, 59, 2306, 46, 2310, 40, 2005, 46, 2311, 40, 2304, 46, 2312, 41, 41, 59, 2007, 46, 2313, 40, 2306, 46, 2314, 40, 41, 41, 59, 125, 125, 125, 438, 491, 492, 2315, 40, 2013, 2014, 41, 123, 490, 2316, 61, 2014, 46, 2317, 40, 41, 46, 2318, 40, 41, 59, 392, 40, 2316, 46, 2319, 62, 1500, 41, 123, 2007, 46, 2320, 40, 41, 59, 386, 40, 490, 2280, 398, 2316, 41, 123, 392, 40, 2008, 41, 123, 2278, 40, 2280, 41, 59, 125, 490, 2321, 61, 2280, 46, 2322, 46, 2323, 59, 490, 2324, 61, 2280, 46, 2325, 63, 36, 58, 2321, 59, 2007, 46, 2320, 40, 33, 2009, 606, 2280, 46, 2325, 63, 36, 58, 2280, 46, 2326, 46, 2327, 63, 36, 58, 36, 41, 59, 125, 125, 125, 437, 492, 2278, 40, 2328, 2280, 41, 123, 2283, 40, 2280, 41, 59, 2300, 40, 2280, 41, 59, 125, 437, 492, 2283, 40, 2328, 2280, 41, 123, 392, 40, 2280, 46, 2329, 41, 123, 392, 40, 2280, 46, 2330, 46, 2331, 46, 2332, 40, 41, 41, 123, 490, 2333, 61, 418, 2334, 40, 2335, 40, 2336, 41, 41, 59, 2333, 46, 2337, 40, 2005, 46, 2338, 40, 461, 46, 2339, 40, 44, 2280, 46, 2330, 46, 2340, 46, 2341, 40, 2342, 619, 2342, 46, 2343, 41, 41, 41, 41, 59, 2007, 46, 2344, 40, 2333, 46, 2345, 40, 41, 41, 59, 125, 125, 125, 437, 492, 2300, 40, 2328, 2280, 41, 123, 392, 40, 2280, 46, 2346, 46, 2347, 46, 2348, 40, 41, 41, 123, 490, 2349, 61, 2280, 46, 2350, 59, 392, 40, 2349, 631, 424, 41, 123, 490, 2351, 61, 418, 2352, 40, 2353, 40, 2354, 41, 41, 59, 2351, 46, 2355, 40, 2005, 46, 2356, 40, 2349, 46, 2357, 41, 41, 59, 2007, 46, 2358, 40, 2351, 46, 2359, 40, 41, 41, 59, 125, 125, 125, 437, 492, 2360, 40, 461, 63, 2361, 41, 123, 392, 40, 33, 461, 46, 2362, 40, 2361, 41, 41, 123, 2007, 46, 2363, 40, 41, 59, 386, 40, 490, 2364, 398, 2361, 46, 2365, 40, 418, 91, 93, 123, 44, 44, 125, 44, 2366, 46, 303, 41, 41, 123, 2007, 46, 2363, 40, 36, 41, 59, 125, 2007, 46, 2363, 40, 41, 59, 125, 125, 437, 452, 334, 2367, 123, 437, 441, 461, 2368, 59, 437, 441, 2369, 60, 461, 62, 2370, 61, 418, 40, 41, 59, 439, 2367, 40, 461, 2371, 41, 123, 2368, 61, 2371, 59, 125, 439, 492, 2372, 40, 461, 2373, 41, 619, 2370, 46, 2374, 40, 2373, 41, 59, 439, 431, 461, 2375, 40, 41, 619, 43, 40, 2370, 46, 2376, 614, 1500, 63, 2377, 40, 2368, 41, 58, 2377, 40, 2368, 41, 43, 43, 461, 46, 2378, 40, 44, 2370, 41, 43, 41, 43, 59, 437, 457, 461, 2377, 40, 461, 2371, 41, 619, 2371, 46, 2379, 40, 44, 2380, 46, 2381, 41, 63, 2371, 91, 46, 46, 94, 1502, 93, 58, 2371, 59, 125, 125]",0.9998304,1
17,68271,C#,"public class ModelValidator : IModelValidator
{
    private static readonly IEnumerable<string> DictionaryProperties =
        typeof(IDictionary<string, object>).GetRuntimeProperties().Select(e => e.Name);

    /// <summary>
    ///     Creates a new instance of <see cref=""ModelValidator"" />.
    /// </summary>
    /// <param name=""dependencies"">Parameter object containing dependencies for this service.</param>
    public ModelValidator(ModelValidatorDependencies dependencies)
    {
        Dependencies = dependencies;
    }

    /// <summary>
    ///     Dependencies for this service.
    /// </summary>
    protected virtual ModelValidatorDependencies Dependencies { get; }

    /// <inheritdoc />
    public virtual void Validate(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        ValidateIgnoredMembers(model, logger);
        ValidatePropertyMapping(model, logger);
        ValidateRelationships(model, logger);
        ValidateOwnership(model, logger);
        ValidateNonNullPrimaryKeys(model, logger);
        ValidateNoShadowKeys(model, logger);
        ValidateNoMutableKeys(model, logger);
        ValidateNoCycles(model, logger);
        ValidateClrInheritance(model, logger);
        ValidateInheritanceMapping(model, logger);
        ValidateChangeTrackingStrategy(model, logger);
        ValidateForeignKeys(model, logger);
        ValidateFieldMapping(model, logger);
        ValidateQueryFilters(model, logger);
        ValidateData(model, logger);
        ValidateTypeMappings(model, logger);
        LogShadowProperties(model, logger);
    }

    /// <summary>
    ///     Validates relationships.
    /// </summary>
    /// <param name=""model"">The model.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateRelationships(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            foreach (var foreignKey in entityType.GetDeclaredForeignKeys())
            {
                if (foreignKey.IsUnique
                    && foreignKey is IConventionForeignKey concreteFk
                    && concreteFk.GetPrincipalEndConfigurationSource() == null)
                {
                    throw new InvalidOperationException(
                        CoreStrings.AmbiguousOneToOneRelationship(
                            foreignKey.DeclaringEntityType.DisplayName()
                            + (foreignKey.DependentToPrincipal == null
                                ? """"
                                : ""."" + foreignKey.DependentToPrincipal.Name),
                            foreignKey.PrincipalEntityType.DisplayName()
                            + (foreignKey.PrincipalToDependent == null
                                ? """"
                                : ""."" + foreignKey.PrincipalToDependent.Name)));
                }
            }

            foreach (var skipNavigation in entityType.GetDeclaredSkipNavigations())
            {
                if (!skipNavigation.IsCollection)
                {
                    throw new InvalidOperationException(
                        CoreStrings.SkipNavigationNonCollection(
                            skipNavigation.Name, skipNavigation.DeclaringEntityType.DisplayName()));
                }

                if (skipNavigation.ForeignKey == null)
                {
                    throw new InvalidOperationException(
                        CoreStrings.SkipNavigationNoForeignKey(
                            skipNavigation.Name, skipNavigation.DeclaringEntityType.DisplayName()));
                }

                if (skipNavigation.Inverse == null)
                {
                    throw new InvalidOperationException(
                        CoreStrings.SkipNavigationNoInverse(
                            skipNavigation.Name, skipNavigation.DeclaringEntityType.DisplayName()));
                }

                if (skipNavigation.IsShadowProperty())
                {
                    throw new InvalidOperationException(
                        CoreStrings.ShadowManyToManyNavigation(
                            skipNavigation.DeclaringEntityType.DisplayName(),
                            skipNavigation.Name,
                            skipNavigation.Inverse.DeclaringEntityType.DisplayName(),
                            skipNavigation.Inverse.Name));
                }
            }
        }
    }

    /// <summary>
    ///     Validates property mappings.
    /// </summary>
    /// <param name=""model"">The model.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidatePropertyMapping(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        if (model is not IConventionModel conventionModel)
        {
            return;
        }

        foreach (var entityType in conventionModel.GetEntityTypes())
        {
            var unmappedProperty = entityType.GetDeclaredProperties().FirstOrDefault(
                p => (!ConfigurationSource.Convention.Overrides(p.GetConfigurationSource())
                        // Use a better condition for non-persisted properties when issue #14121 is implemented
                        || !p.IsImplicitlyCreated())
                    && p.FindTypeMapping() == null);

            if (unmappedProperty != null)
            {
                ThrowPropertyNotMappedException(
                    (unmappedProperty.GetValueConverter()?.ProviderClrType ?? unmappedProperty.ClrType).ShortDisplayName(),
                    entityType,
                    unmappedProperty);
            }

            if (entityType.ClrType == Model.DefaultPropertyBagType)
            {
                continue;
            }

            var runtimeProperties = entityType.GetRuntimeProperties();
            var clrProperties = new HashSet<string>(StringComparer.Ordinal);
            clrProperties.UnionWith(
                runtimeProperties.Values
                    .Where(pi => pi.IsCandidateProperty(needsWrite: false))
                    .Select(pi => pi.GetSimpleMemberName()));

            clrProperties.ExceptWith(
                ((IEnumerable<IConventionPropertyBase>)entityType.GetProperties())
                .Concat(entityType.GetNavigations())
                .Concat(entityType.GetSkipNavigations())
                .Concat(entityType.GetServiceProperties()).Select(p => p.Name));

            if (entityType.IsPropertyBag)
            {
                clrProperties.ExceptWith(DictionaryProperties);
            }

            if (clrProperties.Count <= 0)
            {
                continue;
            }

            foreach (var clrPropertyName in clrProperties)
            {
                if (entityType.FindIgnoredConfigurationSource(clrPropertyName) != null)
                {
                    continue;
                }

                var clrProperty = runtimeProperties[clrPropertyName];
                var propertyType = clrProperty.PropertyType;
                var targetSequenceType = propertyType.TryGetSequenceType();

                if (conventionModel.FindIgnoredConfigurationSource(propertyType) != null
                    || conventionModel.IsIgnoredType(propertyType)
                    || (targetSequenceType != null
                        && (conventionModel.FindIgnoredConfigurationSource(targetSequenceType) != null
                            || conventionModel.IsIgnoredType(targetSequenceType))))
                {
                    continue;
                }

                var targetType = Dependencies.MemberClassifier.FindCandidateNavigationPropertyType(
                    clrProperty, conventionModel, out var targetOwned);
                if (targetType == null
                    && clrProperty.FindSetterProperty() == null)
                {
                    continue;
                }

                if (targetType != null)
                {
                    var targetShared = conventionModel.IsShared(targetType);
                    targetOwned ??= IsOwned(targetType, conventionModel);
                    // ReSharper disable CheckForReferenceEqualityInstead.1
                    // ReSharper disable CheckForReferenceEqualityInstead.3
                    if ((!entityType.IsKeyless
                            || targetSequenceType == null)
                        && entityType.GetDerivedTypes().All(
                            dt => dt.GetDeclaredNavigations().FirstOrDefault(n => n.Name == clrProperty.GetSimpleMemberName())
                                == null)
                        && (!(targetShared || targetOwned.Value)
                            || !targetType.Equals(entityType.ClrType))
                        && (!entityType.IsInOwnershipPath(targetType)
                            || targetSequenceType == null))
                    {
                        if (entityType.IsOwned()
                            && targetOwned.Value)
                        {
                            throw new InvalidOperationException(
                                CoreStrings.AmbiguousOwnedNavigation(
                                    entityType.DisplayName() + ""."" + clrProperty.Name, targetType.ShortDisplayName()));
                        }

                        if (targetShared)
                        {
                            throw new InvalidOperationException(
                                CoreStrings.NonConfiguredNavigationToSharedType(clrProperty.Name, entityType.DisplayName()));
                        }

                        throw new InvalidOperationException(
                            CoreStrings.NavigationNotAdded(
                                entityType.DisplayName(), clrProperty.Name, propertyType.ShortDisplayName()));
                    }

                    // ReSharper restore CheckForReferenceEqualityInstead.3
                    // ReSharper restore CheckForReferenceEqualityInstead.1
                }
                else if (targetSequenceType == null && propertyType.IsInterface
                         || targetSequenceType?.IsInterface == true)
                {
                    throw new InvalidOperationException(
                        CoreStrings.InterfacePropertyNotAdded(
                            entityType.DisplayName(), clrProperty.Name, propertyType.ShortDisplayName()));
                }
                else
                {
                    throw new InvalidOperationException(
                        CoreStrings.PropertyNotAdded(
                            entityType.DisplayName(), clrProperty.Name, propertyType.ShortDisplayName()));
                }
            }
        }
    }

    /// <summary>
    ///     Throws an <see cref=""InvalidOperationException"" /> with a message containing provider-specific information, when
    ///     available, indicating possible reasons why the property cannot be mapped.
    /// </summary>
    /// <param name=""propertyType"">The property CLR type.</param>
    /// <param name=""entityType"">The entity type.</param>
    /// <param name=""unmappedProperty"">The property.</param>
    protected virtual void ThrowPropertyNotMappedException(
        string propertyType,
        IConventionEntityType entityType,
        IConventionProperty unmappedProperty)
        => throw new InvalidOperationException(
            CoreStrings.PropertyNotMapped(
                propertyType,
                entityType.DisplayName(),
                unmappedProperty.Name));

    /// <summary>
    ///     Returns a value indicating whether that target CLR type would correspond to an owned entity type.
    /// </summary>
    /// <param name=""targetType"">The target CLR type.</param>
    /// <param name=""conventionModel"">The model.</param>
    /// <returns><see langword=""true"" /> if the given CLR type corresponds to an owned entity type.</returns>
    protected virtual bool IsOwned(Type targetType, IConventionModel conventionModel)
        => conventionModel.FindIsOwnedConfigurationSource(targetType) != null
            || conventionModel.FindEntityTypes(targetType).Any(t => t.IsOwned());

    /// <summary>
    ///     Validates that no attempt is made to ignore inherited properties.
    /// </summary>
    /// <param name=""model"">The model.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateIgnoredMembers(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        if (!(model is IConventionModel conventionModel))
        {
            return;
        }

        foreach (var entityType in conventionModel.GetEntityTypes())
        {
            foreach (var ignoredMember in entityType.GetIgnoredMembers())
            {
                if (entityType.FindIgnoredConfigurationSource(ignoredMember) != ConfigurationSource.Explicit)
                {
                    continue;
                }

                var property = entityType.FindProperty(ignoredMember);
                if (property != null)
                {
                    if (property.DeclaringEntityType != entityType)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.InheritedPropertyCannotBeIgnored(
                                ignoredMember, entityType.DisplayName(), property.DeclaringEntityType.DisplayName()));
                    }

                    Check.DebugAssert(false, ""Should never get here..."");
                }

                var navigation = entityType.FindNavigation(ignoredMember);
                if (navigation != null)
                {
                    if (navigation.DeclaringEntityType != entityType)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.InheritedPropertyCannotBeIgnored(
                                ignoredMember, entityType.DisplayName(), navigation.DeclaringEntityType.DisplayName()));
                    }

                    Check.DebugAssert(false, ""Should never get here..."");
                }

                var skipNavigation = entityType.FindSkipNavigation(ignoredMember);
                if (skipNavigation != null)
                {
                    if (skipNavigation.DeclaringEntityType != entityType)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.InheritedPropertyCannotBeIgnored(
                                ignoredMember, entityType.DisplayName(), skipNavigation.DeclaringEntityType.DisplayName()));
                    }

                    Check.DebugAssert(false, ""Should never get here..."");
                }

                var serviceProperty = entityType.FindServiceProperty(ignoredMember);
                if (serviceProperty != null)
                {
                    if (serviceProperty.DeclaringEntityType != entityType)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.InheritedPropertyCannotBeIgnored(
                                ignoredMember, entityType.DisplayName(), serviceProperty.DeclaringEntityType.DisplayName()));
                    }

                    Check.DebugAssert(false, ""Should never get here..."");
                }
            }
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of shadow keys in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateNoShadowKeys(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (IConventionEntityType entityType in model.GetEntityTypes())
        {
            foreach (var key in entityType.GetDeclaredKeys())
            {
                if (key.Properties.Any(p => p.IsImplicitlyCreated())
                    && ConfigurationSource.Convention.Overrides(key.GetConfigurationSource())
                    && !key.IsPrimaryKey())
                {
                    var referencingFk = key.GetReferencingForeignKeys().FirstOrDefault();

                    if (referencingFk != null)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.ReferencedShadowKey(
                                referencingFk.DeclaringEntityType.DisplayName()
                                + (referencingFk.DependentToPrincipal == null
                                    ? """"
                                    : ""."" + referencingFk.DependentToPrincipal.Name),
                                entityType.DisplayName()
                                + (referencingFk.PrincipalToDependent == null
                                    ? """"
                                    : ""."" + referencingFk.PrincipalToDependent.Name),
                                referencingFk.Properties.Format(includeTypes: true),
                                entityType.FindPrimaryKey()!.Properties.Format(includeTypes: true)));
                    }
                }
            }
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of mutable in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateNoMutableKeys(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            foreach (var key in entityType.GetDeclaredKeys())
            {
                var mutableProperty = key.Properties.FirstOrDefault(p => p.ValueGenerated.HasFlag(ValueGenerated.OnUpdate));
                if (mutableProperty != null)
                {
                    throw new InvalidOperationException(CoreStrings.MutableKeyProperty(mutableProperty.Name));
                }
            }
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of the model for cycles.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateNoCycles(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        var graph = new Multigraph<IEntityType, IForeignKey>();
        foreach (var entityType in model.GetEntityTypes())
        {
            var primaryKey = entityType.FindPrimaryKey();
            if (primaryKey == null)
            {
                continue;
            }

            foreach (var foreignKey in entityType.GetForeignKeys())
            {
                var principalType = foreignKey.PrincipalEntityType;
                if (!foreignKey.PrincipalKey.IsPrimaryKey()
                    || !PropertyListComparer.Instance.Equals(foreignKey.Properties, primaryKey.Properties)
                    || foreignKey.PrincipalEntityType.IsAssignableFrom(entityType))
                {
                    continue;
                }

                graph.AddVertex(entityType);
                graph.AddVertex(principalType);
                graph.AddEdge(entityType, principalType, foreignKey);
            }
        }

        graph.TopologicalSort(
            tryBreakEdge: null,
            formatCycle: c => c.Select(d => d.Item1.DisplayName()).Join("" -> ""),
            c => CoreStrings.IdentifyingRelationshipCycle(c));
    }

    /// <summary>
    ///     Validates the mapping/configuration of primary key nullability in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateNonNullPrimaryKeys(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        var entityTypeWithNullPk
            = model.GetEntityTypes()
                .FirstOrDefault(et => !((IConventionEntityType)et).IsKeyless && et.BaseType == null && et.FindPrimaryKey() == null);

        if (entityTypeWithNullPk != null)
        {
            throw new InvalidOperationException(
                CoreStrings.EntityRequiresKey(entityTypeWithNullPk.DisplayName()));
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of inheritance in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateClrInheritance(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        var validEntityTypes = new HashSet<IEntityType>();
        foreach (var entityType in model.GetEntityTypes())
        {
            ValidateClrInheritance(model, entityType, validEntityTypes);
        }
    }

    private static void ValidateClrInheritance(
        IModel model,
        IEntityType entityType,
        HashSet<IEntityType> validEntityTypes)
    {
        if (validEntityTypes.Contains(entityType))
        {
            return;
        }

        if (entityType.HasSharedClrType
            && entityType.BaseType != null)
        {
            throw new InvalidOperationException(CoreStrings.SharedTypeDerivedType(entityType.DisplayName()));
        }

        if (entityType.FindDeclaredOwnership() == null
            && entityType.BaseType != null)
        {
            var baseClrType = entityType.ClrType.BaseType;
            while (baseClrType != null)
            {
                var baseEntityType = model.FindEntityType(baseClrType);
                if (baseEntityType != null)
                {
                    if (!baseEntityType.IsAssignableFrom(entityType))
                    {
                        throw new InvalidOperationException(
                            CoreStrings.InconsistentInheritance(
                                entityType.DisplayName(), entityType.BaseType.DisplayName(), baseEntityType.DisplayName()));
                    }

                    break;
                }

                baseClrType = baseClrType.BaseType;
            }
        }

        if (!entityType.ClrType.IsInstantiable()
            && !entityType.GetDerivedTypes().Any())
        {
            throw new InvalidOperationException(
                CoreStrings.AbstractLeafEntityType(entityType.DisplayName()));
        }

        validEntityTypes.Add(entityType);
    }

    /// <summary>
    ///     Validates the mapping of inheritance in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateInheritanceMapping(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var rootEntityType in model.GetRootEntityTypes())
        {
            ValidateDiscriminatorValues(rootEntityType);
        }
    }

    /// <summary>
    ///     Validates the discriminator and values for all entity types derived from the given one.
    /// </summary>
    /// <param name=""rootEntityType"">The entity type to validate.</param>
    protected virtual void ValidateDiscriminatorValues(IEntityType rootEntityType)
    {
        var derivedTypes = rootEntityType.GetDerivedTypesInclusive().ToList();
        if (derivedTypes.Count == 1)
        {
            return;
        }

        var discriminatorProperty = rootEntityType.FindDiscriminatorProperty();
        if (discriminatorProperty == null)
        {
            throw new InvalidOperationException(
                CoreStrings.NoDiscriminatorProperty(rootEntityType.DisplayName()));
        }

        var discriminatorValues = new Dictionary<object, IEntityType>(discriminatorProperty.GetKeyValueComparer());

        foreach (var derivedType in derivedTypes)
        {
            if (!derivedType.ClrType.IsInstantiable())
            {
                continue;
            }

            var discriminatorValue = derivedType.GetDiscriminatorValue();
            if (discriminatorValue == null)
            {
                throw new InvalidOperationException(
                    CoreStrings.NoDiscriminatorValue(derivedType.DisplayName()));
            }

            if (discriminatorValues.TryGetValue(discriminatorValue, out var duplicateEntityType))
            {
                throw new InvalidOperationException(
                    CoreStrings.DuplicateDiscriminatorValue(
                        derivedType.DisplayName(), discriminatorValue, duplicateEntityType.DisplayName()));
            }

            discriminatorValues[discriminatorValue] = derivedType;
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of change tracking in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateChangeTrackingStrategy(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        var requireFullNotifications = (bool?)model[CoreAnnotationNames.FullChangeTrackingNotificationsRequired] == true;
        foreach (var entityType in model.GetEntityTypes())
        {
            var errorMessage = EntityType.CheckChangeTrackingStrategy(
                entityType, entityType.GetChangeTrackingStrategy(), requireFullNotifications);

            if (errorMessage != null)
            {
                throw new InvalidOperationException(errorMessage);
            }
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of ownership in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateOwnership(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            var ownerships = entityType.GetForeignKeys().Where(fk => fk.IsOwnership).ToList();
            if (ownerships.Count > 1)
            {
                throw new InvalidOperationException(
                    CoreStrings.MultipleOwnerships(
                        entityType.DisplayName(),
                        string.Join(
                            "", "",
                            ownerships.Select(o => $""'{o.PrincipalEntityType.DisplayName()}.{o.PrincipalToDependent?.Name}'""))));
            }

            if (ownerships.Count == 1)
            {
                Check.DebugAssert(entityType.IsOwned(), $""Expected the entity type {entityType.DisplayName()} to be marked as owned"");

                var ownership = ownerships[0];
                if (entityType.BaseType != null)
                {
                    throw new InvalidOperationException(CoreStrings.OwnedDerivedType(entityType.DisplayName()));
                }

                foreach (var referencingFk in entityType.GetReferencingForeignKeys().Where(
                             fk => !fk.IsOwnership
                                 && !Contains(fk.DeclaringEntityType.FindOwnership(), fk)))
                {
                    throw new InvalidOperationException(
                        CoreStrings.PrincipalOwnedType(
                            referencingFk.DeclaringEntityType.DisplayName()
                            + (referencingFk.DependentToPrincipal == null
                                ? """"
                                : ""."" + referencingFk.DependentToPrincipal.Name),
                            referencingFk.PrincipalEntityType.DisplayName()
                            + (referencingFk.PrincipalToDependent == null
                                ? """"
                                : ""."" + referencingFk.PrincipalToDependent.Name),
                            entityType.DisplayName()));
                }

                foreach (var fk in entityType.GetDeclaredForeignKeys().Where(
                             fk => !fk.IsOwnership
                                 && fk.PrincipalToDependent != null
                                 && !Contains(fk.DeclaringEntityType.FindOwnership(), fk)))
                {
                    throw new InvalidOperationException(
                        CoreStrings.InverseToOwnedType(
                            fk.PrincipalEntityType.DisplayName(),
                            fk.PrincipalToDependent!.Name,
                            entityType.DisplayName(),
                            ownership.PrincipalEntityType.DisplayName()));
                }
            }
            else if (((IConventionModel)model).IsOwned(entityType.ClrType)
                     || entityType.IsOwned())
            {
                throw new InvalidOperationException(CoreStrings.OwnerlessOwnedType(entityType.DisplayName()));
            }
        }
    }

    private static bool Contains(IForeignKey? inheritedFk, IForeignKey derivedFk)
        => inheritedFk != null
            && inheritedFk.PrincipalEntityType.IsAssignableFrom(derivedFk.PrincipalEntityType)
            && PropertyListComparer.Instance.Equals(inheritedFk.Properties, derivedFk.Properties);

    /// <summary>
    ///     Validates the mapping/configuration of foreign keys in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateForeignKeys(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            foreach (var declaredForeignKey in entityType.GetDeclaredForeignKeys())
            {
                if (declaredForeignKey.PrincipalEntityType == declaredForeignKey.DeclaringEntityType
                    && declaredForeignKey.PrincipalKey.Properties.SequenceEqual(declaredForeignKey.Properties))
                {
                    logger.RedundantForeignKeyWarning(declaredForeignKey);
                }

                if (entityType.BaseType == null
                    || declaredForeignKey.IsBaseLinking())
                {
                    continue;
                }

                foreach (var generatedProperty in declaredForeignKey.Properties)
                {
                    if (!generatedProperty.ValueGenerated.ForAdd())
                    {
                        continue;
                    }

                    foreach (var inheritedKey in generatedProperty.GetContainingKeys())
                    {
                        if (inheritedKey.DeclaringEntityType != entityType
                            && inheritedKey.Properties.All(p => declaredForeignKey.Properties.Contains(p))
                            && !ContainedInForeignKeyForAllConcreteTypes(inheritedKey.DeclaringEntityType, generatedProperty))
                        {
                            throw new InvalidOperationException(
                                CoreStrings.ForeignKeyPropertyInKey(
                                    generatedProperty.Name,
                                    entityType.DisplayName(),
                                    inheritedKey.Properties.Format(),
                                    inheritedKey.DeclaringEntityType.DisplayName()));
                        }
                    }
                }
            }
        }

        static bool ContainedInForeignKeyForAllConcreteTypes(IEntityType entityType, IProperty property)
            => entityType.ClrType.IsAbstract
                && entityType.GetDerivedTypes().Where(t => !t.ClrType.IsAbstract)
                    .All(
                        d => d.GetForeignKeys()
                            .Any(fk => fk.Properties.Contains(property)));
    }

    /// <summary>
    ///     Validates the mapping/configuration of properties mapped to fields in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateFieldMapping(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            var properties = new HashSet<IPropertyBase>(
                entityType
                    .GetDeclaredProperties()
                    .Cast<IPropertyBase>()
                    .Concat(entityType.GetDeclaredNavigations())
                    .Where(p => !p.IsShadowProperty() && !p.IsIndexerProperty()));

            var constructorBinding = entityType.ConstructorBinding;
            if (constructorBinding != null)
            {
                foreach (var consumedProperty in constructorBinding.ParameterBindings.SelectMany(p => p.ConsumedProperties))
                {
                    properties.Remove(consumedProperty);
                }
            }

            foreach (var propertyBase in properties)
            {
                if (!propertyBase.TryGetMemberInfo(
                        forConstruction: true,
                        forSet: true,
                        memberInfo: out _,
                        errorMessage: out var errorMessage))
                {
                    throw new InvalidOperationException(errorMessage);
                }

                if (!propertyBase.TryGetMemberInfo(
                        forConstruction: false,
                        forSet: true,
                        memberInfo: out _,
                        errorMessage: out errorMessage))
                {
                    throw new InvalidOperationException(errorMessage);
                }

                if (!propertyBase.TryGetMemberInfo(
                        forConstruction: false,
                        forSet: false,
                        memberInfo: out _,
                        errorMessage: out errorMessage))
                {
                    throw new InvalidOperationException(errorMessage);
                }
            }
        }
    }

    /// <summary>
    ///     Validates the type mapping of properties the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateTypeMappings(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            foreach (var property in entityType.GetDeclaredProperties())
            {
                var converter = property.GetValueConverter();
                if (converter != null
                    && property[CoreAnnotationNames.ValueComparer] == null)
                {
                    var type = converter.ModelClrType;
                    if (type != typeof(string)
                        && !(type == typeof(byte[]) && property.IsKey()) // Already special-cased elsewhere
                        && type.TryGetSequenceType() != null)
                    {
                        logger.CollectionWithoutComparer(property);
                    }
                }

                if (property.IsKey()
                    || property.IsForeignKey()
                    || property.IsUniqueIndex())
                {
                    _ = property.GetCurrentValueComparer(); // Will throw if there is no way to compare
                }
            }
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of query filters in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateQueryFilters(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (var entityType in model.GetEntityTypes())
        {
            if (entityType.GetQueryFilter() != null)
            {
                if (entityType.BaseType != null)
                {
                    throw new InvalidOperationException(
                        CoreStrings.BadFilterDerivedType(
                            entityType.GetQueryFilter(),
                            entityType.DisplayName(),
                            entityType.GetRootType().DisplayName()));
                }

                if (entityType.IsOwned())
                {
                    throw new InvalidOperationException(
                        CoreStrings.BadFilterOwnedType(entityType.GetQueryFilter(), entityType.DisplayName()));
                }
            }

            var requiredNavigationWithQueryFilter = entityType
                .GetNavigations()
                .FirstOrDefault(
                    n => !n.IsCollection
                        && n.ForeignKey.IsRequired
                        && n.IsOnDependent
                        && n.ForeignKey.PrincipalEntityType.GetQueryFilter() != null
                        && n.ForeignKey.DeclaringEntityType.GetQueryFilter() == null);

            if (requiredNavigationWithQueryFilter != null)
            {
                logger.PossibleIncorrectRequiredNavigationWithQueryFilterInteractionWarning(
                    requiredNavigationWithQueryFilter.ForeignKey);
            }
        }
    }

    /// <summary>
    ///     Validates the mapping/configuration of data (e.g. seed data) in the model.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void ValidateData(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        var identityMaps = new Dictionary<IKey, IIdentityMap>();
        var sensitiveDataLogged = logger.ShouldLogSensitiveData();

        foreach (var entityType in model.GetEntityTypes())
        {
            var key = entityType.FindPrimaryKey();
            if (key == null)
            {
                if (entityType.GetSeedData().Any())
                {
                    throw new InvalidOperationException(CoreStrings.SeedKeylessEntity(entityType.DisplayName()));
                }

                continue;
            }

            IIdentityMap? identityMap = null;
            foreach (var seedDatum in entityType.GetSeedData())
            {
                foreach (var property in entityType.GetProperties())
                {
                    if (!seedDatum.TryGetValue(property.Name, out var value)
                        || value == null)
                    {
                        if (!property.IsNullable
                            && ((!property.RequiresValueGenerator()
                                    && !property.ValueGenerated.ForAdd())
                                || property.IsPrimaryKey()))
                        {
                            throw new InvalidOperationException(
                                CoreStrings.SeedDatumMissingValue(entityType.DisplayName(), property.Name));
                        }
                    }
                    else if (property.RequiresValueGenerator()
                             && property.IsPrimaryKey()
                             && property.ClrType.IsDefaultValue(value))
                    {
                        if (property.ClrType.IsSignedInteger())
                        {
                            throw new InvalidOperationException(
                                CoreStrings.SeedDatumSignedNumericValue(entityType.DisplayName(), property.Name));
                        }

                        throw new InvalidOperationException(
                            CoreStrings.SeedDatumDefaultValue(
                                entityType.DisplayName(), property.Name, property.ClrType.GetDefaultValue()));
                    }
                    else if (!property.ClrType.IsAssignableFrom(value.GetType().GetTypeInfo()))
                    {
                        if (sensitiveDataLogged)
                        {
                            throw new InvalidOperationException(
                                CoreStrings.SeedDatumIncompatibleValueSensitive(
                                    entityType.DisplayName(), value, property.Name, property.ClrType.DisplayName()));
                        }

                        throw new InvalidOperationException(
                            CoreStrings.SeedDatumIncompatibleValue(
                                entityType.DisplayName(), property.Name, property.ClrType.DisplayName()));
                    }
                }

                var keyValues = new object[key.Properties.Count];
                for (var i = 0; i < key.Properties.Count; i++)
                {
                    keyValues[i] = seedDatum[key.Properties[i].Name]!;
                }

                foreach (var navigation in entityType.GetNavigations().Concat<INavigationBase>(entityType.GetSkipNavigations()))
                {
                    if (seedDatum.TryGetValue(navigation.Name, out var value)
                        && ((navigation.IsCollection && value is IEnumerable collection && collection.Any())
                            || (!navigation.IsCollection && value != null)))
                    {
                        var foreignKey = navigation is INavigation nav
                            ? nav.ForeignKey
                            : ((ISkipNavigation)navigation).ForeignKey;
                        if (sensitiveDataLogged)
                        {
                            throw new InvalidOperationException(
                                CoreStrings.SeedDatumNavigationSensitive(
                                    entityType.DisplayName(),
                                    string.Join("", "", key.Properties.Select((p, i) => p.Name + "":"" + keyValues[i])),
                                    navigation.Name,
                                    foreignKey.DeclaringEntityType.DisplayName(),
                                    foreignKey.Properties.Format()));
                        }

                        throw new InvalidOperationException(
                            CoreStrings.SeedDatumNavigation(
                                entityType.DisplayName(),
                                navigation.Name,
                                foreignKey.DeclaringEntityType.DisplayName(),
                                foreignKey.Properties.Format()));
                    }
                }

                if (identityMap == null)
                {
                    if (!identityMaps.TryGetValue(key, out identityMap))
                    {
                        identityMap = ((IRuntimeKey)key).GetIdentityMapFactory()(sensitiveDataLogged);
                        identityMaps[key] = identityMap;
                    }
                }

                var entry = identityMap.TryGetEntry(keyValues);
                if (entry != null)
                {
                    if (sensitiveDataLogged)
                    {
                        throw new InvalidOperationException(
                            CoreStrings.SeedDatumDuplicateSensitive(
                                entityType.DisplayName(),
                                string.Join("", "", key.Properties.Select((p, i) => p.Name + "":"" + keyValues[i]))));
                    }

                    throw new InvalidOperationException(
                        CoreStrings.SeedDatumDuplicate(
                            entityType.DisplayName(), key.Properties.Format()));
                }

                entry = new InternalEntityEntry(null!, entityType, seedDatum);
                identityMap.Add(keyValues, entry);
            }
        }
    }

    /// <summary>
    ///     Logs all shadow properties that were created because there was no matching CLR member.
    /// </summary>
    /// <param name=""model"">The model to validate.</param>
    /// <param name=""logger"">The logger to use.</param>
    protected virtual void LogShadowProperties(
        IModel model,
        IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger)
    {
        foreach (IConventionEntityType entityType in model.GetEntityTypes())
        {
            foreach (var property in entityType.GetDeclaredProperties())
            {
                if (property.IsImplicitlyCreated())
                {
                    var uniquifiedAnnotation = property.FindAnnotation(CoreAnnotationNames.PreUniquificationName);
                    if (uniquifiedAnnotation != null
                        && property.IsForeignKey())
                    {
                        logger.ShadowForeignKeyPropertyCreated((IProperty)property, (string)uniquifiedAnnotation.Value!);
                    }
                    else
                    {
                        logger.ShadowPropertyCreated((IProperty)property);
                    }
                }
            }
        }
    }
}",1,"[439, 334, 2000, 58, 2001, 123, 437, 457, 441, 2002, 60, 461, 62, 2003, 61, 478, 40, 2004, 60, 461, 44, 426, 62, 41, 46, 2005, 40, 41, 46, 2006, 40, 2007, 619, 2007, 46, 2008, 41, 59, 439, 2000, 40, 2009, 2010, 41, 123, 2011, 61, 2010, 59, 125, 438, 491, 2009, 2012, 123, 2013, 59, 125, 439, 491, 492, 2014, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 2022, 40, 2016, 44, 2021, 41, 59, 2023, 40, 2016, 44, 2021, 41, 59, 2024, 40, 2016, 44, 2021, 41, 59, 2025, 40, 2016, 44, 2021, 41, 59, 2026, 40, 2016, 44, 2021, 41, 59, 2027, 40, 2016, 44, 2021, 41, 59, 2028, 40, 2016, 44, 2021, 41, 59, 2029, 40, 2016, 44, 2021, 41, 59, 2030, 40, 2016, 44, 2021, 41, 59, 2031, 40, 2016, 44, 2021, 41, 59, 2032, 40, 2016, 44, 2021, 41, 59, 2033, 40, 2016, 44, 2021, 41, 59, 2034, 40, 2016, 44, 2021, 41, 59, 2035, 40, 2016, 44, 2021, 41, 59, 2036, 40, 2016, 44, 2021, 41, 59, 2037, 40, 2016, 44, 2021, 41, 59, 2038, 40, 2016, 44, 2021, 41, 59, 125, 438, 491, 492, 2039, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2040, 398, 2016, 46, 2041, 40, 41, 41, 123, 386, 40, 490, 2042, 398, 2040, 46, 2043, 40, 41, 41, 123, 392, 40, 2042, 46, 2044, 605, 2042, 407, 2045, 2046, 605, 2046, 46, 2047, 40, 41, 614, 424, 41, 123, 469, 418, 2048, 40, 2049, 46, 2050, 40, 2042, 46, 2051, 46, 2052, 40, 41, 43, 40, 2042, 46, 2053, 614, 424, 63, 58, 43, 2042, 46, 2053, 46, 2008, 41, 44, 2042, 46, 2054, 46, 2052, 40, 41, 43, 40, 2042, 46, 2055, 614, 424, 63, 58, 43, 2042, 46, 2055, 46, 2008, 41, 41, 41, 59, 125, 125, 386, 40, 490, 2056, 398, 2040, 46, 2057, 40, 41, 41, 123, 392, 40, 33, 2056, 46, 2058, 41, 123, 469, 418, 2059, 40, 2060, 46, 2061, 40, 2056, 46, 2008, 44, 2056, 46, 2062, 46, 2063, 40, 41, 41, 41, 59, 125, 392, 40, 2056, 46, 2064, 614, 424, 41, 123, 469, 418, 2065, 40, 2066, 46, 2067, 40, 2056, 46, 2008, 44, 2056, 46, 2068, 46, 2069, 40, 41, 41, 41, 59, 125, 392, 40, 2056, 46, 2070, 614, 424, 41, 123, 469, 418, 2071, 40, 2072, 46, 2073, 40, 2056, 46, 2008, 44, 2056, 46, 2074, 46, 2075, 40, 41, 41, 41, 59, 125, 392, 40, 2056, 46, 2076, 40, 41, 41, 123, 469, 418, 2077, 40, 2078, 46, 2079, 40, 2056, 46, 2080, 46, 2081, 40, 41, 44, 2056, 46, 2008, 44, 2056, 46, 2070, 46, 2080, 46, 2081, 40, 41, 44, 2056, 46, 2070, 46, 2008, 41, 41, 59, 125, 125, 125, 125, 438, 491, 492, 2082, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 392, 40, 2016, 407, 422, 2083, 2084, 41, 123, 450, 59, 125, 386, 40, 490, 2085, 398, 2084, 46, 2086, 40, 41, 41, 123, 490, 2087, 61, 2085, 46, 2088, 40, 41, 46, 2089, 40, 2090, 619, 40, 33, 2091, 46, 2092, 46, 2093, 40, 2090, 46, 2094, 40, 41, 41, 606, 33, 2090, 46, 2095, 40, 41, 41, 605, 2090, 46, 2096, 40, 41, 614, 424, 41, 59, 392, 40, 2087, 631, 424, 41, 123, 2097, 40, 40, 2087, 46, 2098, 40, 41, 634, 2099, 633, 2087, 46, 2100, 41, 46, 2101, 40, 41, 44, 2085, 44, 2087, 41, 59, 125, 392, 40, 2085, 46, 2102, 614, 2019, 46, 2103, 41, 123, 344, 59, 125, 490, 2104, 61, 2085, 46, 2005, 40, 41, 59, 490, 2105, 61, 418, 2106, 60, 461, 62, 40, 2107, 46, 2108, 41, 59, 2105, 46, 2109, 40, 2104, 46, 2110, 46, 2111, 40, 2112, 619, 2112, 46, 2113, 40, 2114, 58, 380, 41, 41, 46, 2006, 40, 2112, 619, 2112, 46, 2115, 40, 41, 41, 41, 59, 2105, 46, 2116, 40, 40, 40, 2002, 60, 2117, 62, 41, 2085, 46, 2118, 40, 41, 41, 46, 2119, 40, 2085, 46, 2120, 40, 41, 41, 46, 2119, 40, 2085, 46, 2121, 40, 41, 41, 46, 2119, 40, 2085, 46, 2122, 40, 41, 41, 46, 2006, 40, 2090, 619, 2090, 46, 2008, 41, 41, 59, 392, 40, 2085, 46, 2123, 41, 123, 2105, 46, 2116, 40, 2003, 41, 59, 125, 392, 40, 2105, 46, 2124, 620, 1500, 41, 123, 344, 59, 125, 386, 40, 490, 2125, 398, 2105, 41, 123, 392, 40, 2085, 46, 2126, 40, 2125, 41, 631, 424, 41, 123, 344, 59, 125, 490, 2127, 61, 2104, 91, 2125, 93, 59, 490, 2128, 61, 2127, 46, 2129, 59, 490, 2130, 61, 2128, 46, 2131, 40, 41, 59, 392, 40, 2084, 46, 2126, 40, 2128, 41, 631, 424, 606, 2084, 46, 2132, 40, 2128, 41, 606, 40, 2130, 631, 424, 605, 40, 2084, 46, 2126, 40, 2130, 41, 631, 424, 606, 2084, 46, 2132, 40, 2130, 41, 41, 41, 41, 123, 344, 59, 125, 490, 2133, 61, 2012, 46, 2134, 46, 2135, 40, 2127, 44, 2084, 44, 430, 490, 2136, 41, 59, 392, 40, 2133, 614, 424, 605, 2127, 46, 2137, 40, 41, 614, 424, 41, 123, 344, 59, 125, 392, 40, 2133, 631, 424, 41, 123, 490, 2138, 61, 2084, 46, 2139, 40, 2133, 41, 59, 2136, 633, 61, 2140, 40, 2133, 44, 2084, 41, 59, 392, 40, 40, 33, 2085, 46, 2141, 606, 2130, 614, 424, 41, 605, 2085, 46, 2142, 40, 41, 46, 2143, 40, 2144, 619, 2144, 46, 2145, 40, 41, 46, 2089, 40, 2146, 619, 2146, 46, 2008, 614, 2127, 46, 2115, 40, 41, 41, 614, 424, 41, 605, 40, 33, 40, 2138, 606, 2136, 46, 2147, 41, 606, 33, 2133, 46, 2148, 40, 2085, 46, 2102, 41, 41, 605, 40, 33, 2085, 46, 2149, 40, 2133, 41, 606, 2130, 614, 424, 41, 41, 123, 392, 40, 2085, 46, 2140, 40, 41, 605, 2136, 46, 2147, 41, 123, 469, 418, 2150, 40, 2151, 46, 2152, 40, 2085, 46, 2153, 40, 41, 43, 43, 2127, 46, 2008, 44, 2133, 46, 2154, 40, 41, 41, 41, 59, 125, 392, 40, 2138, 41, 123, 469, 418, 2155, 40, 2156, 46, 2157, 40, 2127, 46, 2008, 44, 2085, 46, 2158, 40, 41, 41, 41, 59, 125, 469, 418, 2159, 40, 2160, 46, 2161, 40, 2085, 46, 2162, 40, 41, 44, 2127, 46, 2008, 44, 2128, 46, 2163, 40, 41, 41, 41, 59, 125, 125, 360, 392, 40, 2130, 614, 424, 605, 2128, 46, 2164, 606, 2130, 634, 2164, 614, 473, 41, 123, 469, 418, 2165, 40, 2166, 46, 2167, 40, 2085, 46, 2168, 40, 41, 44, 2127, 46, 2008, 44, 2128, 46, 2169, 40, 41, 41, 41, 59, 125, 360, 123, 469, 418, 2170, 40, 2171, 46, 2172, 40, 2085, 46, 2173, 40, 41, 44, 2127, 46, 2008, 44, 2128, 46, 2174, 40, 41, 41, 41, 59, 125, 125, 125, 125, 438, 491, 492, 2175, 40, 461, 2176, 44, 2177, 2178, 44, 2179, 2180, 41, 619, 469, 418, 2181, 40, 2182, 46, 2183, 40, 2176, 44, 2178, 46, 2184, 40, 41, 44, 2180, 46, 2008, 41, 41, 59, 438, 491, 323, 2185, 40, 2186, 2187, 44, 2188, 2189, 41, 619, 2189, 46, 2190, 40, 2187, 41, 631, 424, 606, 2189, 46, 2191, 40, 2187, 41, 46, 2192, 40, 2193, 619, 2193, 46, 2185, 40, 41, 41, 59, 438, 491, 492, 2194, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 392, 40, 33, 40, 2016, 407, 2188, 2189, 41, 41, 123, 450, 59, 125, 386, 40, 490, 2178, 398, 2189, 46, 2195, 40, 41, 41, 123, 386, 40, 490, 2196, 398, 2178, 46, 2197, 40, 41, 41, 123, 392, 40, 2178, 46, 2198, 40, 2196, 41, 631, 2199, 46, 2200, 41, 123, 344, 59, 125, 490, 2201, 61, 2178, 46, 2202, 40, 2196, 41, 59, 392, 40, 2201, 631, 424, 41, 123, 392, 40, 2201, 46, 2203, 631, 2178, 41, 123, 469, 418, 2181, 40, 2182, 46, 2204, 40, 2196, 44, 2178, 46, 2184, 40, 41, 44, 2201, 46, 2203, 46, 2184, 40, 41, 41, 41, 59, 125, 2205, 46, 2206, 40, 380, 44, 41, 59, 125, 490, 2207, 61, 2178, 46, 2208, 40, 2196, 41, 59, 392, 40, 2207, 631, 424, 41, 123, 392, 40, 2207, 46, 2209, 631, 2178, 41, 123, 469, 418, 2181, 40, 2182, 46, 2210, 40, 2196, 44, 2178, 46, 2184, 40, 41, 44, 2207, 46, 2209, 46, 2184, 40, 41, 41, 41, 59, 125, 2211, 46, 2212, 40, 380, 44, 41, 59, 125, 490, 2213, 61, 2178, 46, 2214, 40, 2196, 41, 59, 392, 40, 2213, 631, 424, 41, 123, 392, 40, 2213, 46, 2215, 631, 2178, 41, 123, 469, 418, 2181, 40, 2182, 46, 2216, 40, 2196, 44, 2178, 46, 2184, 40, 41, 44, 2213, 46, 2215, 46, 2184, 40, 41, 41, 41, 59, 125, 2217, 46, 2218, 40, 380, 44, 41, 59, 125, 490, 2219, 61, 2178, 46, 2220, 40, 2196, 41, 59, 392, 40, 2219, 631, 424, 41, 123, 392, 40, 2219, 46, 2221, 631, 2178, 41, 123, 469, 418, 2181, 40, 2182, 46, 2222, 40, 2196, 44, 2178, 46, 2184, 40, 41, 44, 2219, 46, 2221, 46, 2184, 40, 41, 41, 41, 59, 125, 2223, 46, 2224, 40, 380, 44, 41, 59, 125, 125, 125, 125, 438, 491, 492, 2225, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 2177, 2178, 398, 2016, 46, 2226, 40, 41, 41, 123, 386, 40, 490, 2227, 398, 2178, 46, 2228, 40, 41, 41, 123, 392, 40, 2227, 46, 2229, 46, 2192, 40, 2230, 619, 2230, 46, 2231, 40, 41, 41, 605, 2232, 46, 2233, 46, 2234, 40, 2227, 46, 2235, 40, 41, 41, 605, 33, 2227, 46, 2236, 40, 41, 41, 123, 490, 2237, 61, 2227, 46, 2238, 40, 41, 46, 2239, 40, 41, 59, 392, 40, 2237, 631, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2240, 40, 2237, 46, 2241, 46, 2184, 40, 41, 43, 40, 2237, 46, 2242, 614, 424, 63, 58, 43, 2237, 46, 2242, 46, 2008, 41, 44, 2178, 46, 2184, 40, 41, 43, 40, 2237, 46, 2243, 614, 424, 63, 58, 43, 2237, 46, 2243, 46, 2008, 41, 44, 2237, 46, 2229, 46, 2244, 40, 2245, 58, 473, 41, 44, 2178, 46, 2246, 40, 41, 33, 46, 2229, 46, 2244, 40, 2245, 58, 473, 41, 41, 41, 59, 125, 125, 125, 125, 125, 438, 491, 492, 2247, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2178, 398, 2016, 46, 2248, 40, 41, 41, 123, 386, 40, 490, 2249, 398, 2178, 46, 2250, 40, 41, 41, 123, 490, 2251, 61, 2249, 46, 2252, 46, 2253, 40, 2254, 619, 2254, 46, 2255, 46, 2256, 40, 2255, 46, 2257, 41, 41, 59, 392, 40, 2251, 631, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2258, 40, 2251, 46, 2008, 41, 41, 59, 125, 125, 125, 125, 438, 491, 492, 2259, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 490, 2260, 61, 418, 2261, 60, 2262, 44, 2263, 62, 40, 41, 59, 386, 40, 490, 2178, 398, 2016, 46, 2264, 40, 41, 41, 123, 490, 2265, 61, 2178, 46, 2266, 40, 41, 59, 392, 40, 2265, 614, 424, 41, 123, 344, 59, 125, 386, 40, 490, 2267, 398, 2178, 46, 2268, 40, 41, 41, 123, 490, 2269, 61, 2267, 46, 2270, 59, 392, 40, 33, 2267, 46, 2271, 46, 2272, 40, 41, 606, 33, 2273, 46, 2274, 46, 2275, 40, 2267, 46, 2276, 44, 2265, 46, 2276, 41, 606, 2267, 46, 2270, 46, 2277, 40, 2178, 41, 41, 123, 344, 59, 125, 2260, 46, 2278, 40, 2178, 41, 59, 2260, 46, 2278, 40, 2269, 41, 59, 2260, 46, 2279, 40, 2178, 44, 2269, 44, 2267, 41, 59, 125, 125, 2260, 46, 2280, 40, 2281, 58, 424, 44, 2282, 58, 2283, 619, 2283, 46, 2006, 40, 2284, 619, 2284, 46, 2285, 46, 2184, 40, 41, 41, 46, 2286, 40, 41, 44, 2283, 619, 2182, 46, 2287, 40, 2283, 41, 41, 59, 125, 438, 491, 492, 2288, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 490, 2289, 61, 2016, 46, 2290, 40, 41, 46, 2291, 40, 2292, 619, 33, 40, 40, 2177, 41, 2292, 41, 46, 2293, 605, 2292, 46, 2294, 614, 424, 605, 2292, 46, 2295, 40, 41, 614, 424, 41, 59, 392, 40, 2289, 631, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2296, 40, 2289, 46, 2184, 40, 41, 41, 41, 59, 125, 125, 438, 491, 492, 2297, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 490, 2298, 61, 418, 2299, 60, 2300, 62, 40, 41, 59, 386, 40, 490, 2178, 398, 2016, 46, 2301, 40, 41, 41, 123, 2297, 40, 2016, 44, 2178, 44, 2298, 41, 59, 125, 125, 437, 457, 492, 2297, 40, 2015, 2016, 44, 2302, 2178, 44, 2303, 60, 2302, 62, 2304, 41, 123, 392, 40, 2304, 46, 2305, 40, 2178, 41, 41, 123, 450, 59, 125, 392, 40, 2178, 46, 2306, 605, 2178, 46, 2307, 631, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2308, 40, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 392, 40, 2178, 46, 2309, 40, 41, 614, 424, 605, 2178, 46, 2307, 631, 424, 41, 123, 490, 2310, 61, 2178, 46, 2311, 46, 2307, 59, 496, 40, 2310, 631, 424, 41, 123, 490, 2312, 61, 2016, 46, 2313, 40, 2310, 41, 59, 392, 40, 2312, 631, 424, 41, 123, 392, 40, 33, 2312, 46, 2314, 40, 2178, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2315, 40, 2178, 46, 2184, 40, 41, 44, 2178, 46, 2307, 46, 2184, 40, 41, 44, 2312, 46, 2184, 40, 41, 41, 41, 59, 125, 325, 59, 125, 2310, 61, 2310, 46, 2307, 59, 125, 125, 392, 40, 33, 2178, 46, 2316, 46, 2317, 40, 41, 605, 33, 2178, 46, 2318, 40, 41, 46, 2192, 40, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2319, 40, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 2304, 46, 2320, 40, 2178, 41, 59, 125, 438, 491, 492, 2321, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2322, 398, 2016, 46, 2323, 40, 41, 41, 123, 2324, 40, 2322, 41, 59, 125, 125, 438, 491, 492, 2325, 40, 2302, 2326, 41, 123, 490, 2327, 61, 2326, 46, 2328, 40, 41, 46, 2329, 40, 41, 59, 392, 40, 2327, 46, 2330, 614, 1501, 41, 123, 450, 59, 125, 490, 2331, 61, 2326, 46, 2332, 40, 41, 59, 392, 40, 2331, 614, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2333, 40, 2326, 46, 2184, 40, 41, 41, 41, 59, 125, 490, 2334, 61, 418, 2335, 60, 426, 44, 2302, 62, 40, 2331, 46, 2336, 40, 41, 41, 59, 386, 40, 490, 2337, 398, 2327, 41, 123, 392, 40, 33, 2337, 46, 2338, 46, 2339, 40, 41, 41, 123, 344, 59, 125, 490, 2340, 61, 2337, 46, 2341, 40, 41, 59, 392, 40, 2340, 614, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2342, 40, 2337, 46, 2184, 40, 41, 41, 41, 59, 125, 392, 40, 2334, 46, 2343, 40, 2340, 44, 430, 490, 2344, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2345, 40, 2337, 46, 2184, 40, 41, 44, 2340, 44, 2344, 46, 2184, 40, 41, 41, 41, 59, 125, 2334, 91, 2340, 93, 61, 2337, 59, 125, 125, 438, 491, 492, 2346, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 490, 2347, 61, 40, 323, 63, 41, 2016, 91, 2348, 46, 2349, 93, 614, 473, 59, 386, 40, 490, 2178, 398, 2016, 46, 2350, 40, 41, 41, 123, 490, 2351, 61, 2352, 46, 2353, 40, 2178, 44, 2178, 46, 2354, 40, 41, 44, 2347, 41, 59, 392, 40, 2351, 631, 424, 41, 123, 469, 418, 2181, 40, 2351, 41, 59, 125, 125, 125, 438, 491, 492, 2355, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2178, 398, 2016, 46, 2356, 40, 41, 41, 123, 490, 2357, 61, 2178, 46, 2358, 40, 41, 46, 2359, 40, 2360, 619, 2360, 46, 2361, 41, 46, 2362, 40, 41, 59, 392, 40, 2357, 46, 2363, 62, 1501, 41, 123, 469, 418, 2181, 40, 2182, 46, 2364, 40, 2178, 46, 2184, 40, 41, 44, 461, 46, 2365, 40, 44, 2357, 46, 2006, 40, 2366, 619, 36, 41, 41, 41, 41, 59, 125, 392, 40, 2357, 46, 2363, 614, 1501, 41, 123, 2367, 46, 2368, 40, 2178, 46, 2185, 40, 41, 44, 36, 41, 59, 490, 2369, 61, 2357, 91, 1500, 93, 59, 392, 40, 2178, 46, 2370, 631, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2371, 40, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 386, 40, 490, 2372, 398, 2178, 46, 2373, 40, 41, 46, 2359, 40, 2360, 619, 33, 2360, 46, 2361, 605, 33, 2374, 40, 2360, 46, 2375, 46, 2376, 40, 41, 44, 2360, 41, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2377, 40, 2372, 46, 2375, 46, 2184, 40, 41, 43, 40, 2372, 46, 2378, 614, 424, 63, 58, 43, 2372, 46, 2378, 46, 2008, 41, 44, 2372, 46, 2379, 46, 2184, 40, 41, 43, 40, 2372, 46, 2380, 614, 424, 63, 58, 43, 2372, 46, 2380, 46, 2008, 41, 44, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 386, 40, 490, 2360, 398, 2178, 46, 2381, 40, 41, 46, 2359, 40, 2360, 619, 33, 2360, 46, 2361, 605, 2360, 46, 2382, 631, 424, 605, 33, 2374, 40, 2360, 46, 2375, 46, 2376, 40, 41, 44, 2360, 41, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2383, 40, 2360, 46, 2384, 46, 2184, 40, 41, 44, 2360, 46, 2382, 33, 46, 2008, 44, 2178, 46, 2184, 40, 41, 44, 2369, 46, 2384, 46, 2184, 40, 41, 41, 41, 59, 125, 125, 360, 392, 40, 40, 40, 2188, 41, 2016, 41, 46, 2185, 40, 2178, 46, 2385, 41, 606, 2178, 46, 2185, 40, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2386, 40, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 125, 125, 437, 457, 323, 2387, 40, 2388, 63, 2389, 44, 2388, 2390, 41, 619, 2389, 631, 424, 605, 2389, 46, 2391, 46, 2392, 40, 2390, 46, 2391, 41, 605, 2393, 46, 2394, 46, 2395, 40, 2389, 46, 2396, 44, 2390, 46, 2396, 41, 59, 438, 491, 492, 2397, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2178, 398, 2016, 46, 2398, 40, 41, 41, 123, 386, 40, 490, 2399, 398, 2178, 46, 2400, 40, 41, 41, 123, 392, 40, 2399, 46, 2391, 614, 2399, 46, 2401, 605, 2399, 46, 2402, 46, 2396, 46, 2403, 40, 2399, 46, 2396, 41, 41, 123, 2021, 46, 2404, 40, 2399, 41, 59, 125, 392, 40, 2178, 46, 2405, 614, 424, 606, 2399, 46, 2406, 40, 41, 41, 123, 344, 59, 125, 386, 40, 490, 2407, 398, 2399, 46, 2396, 41, 123, 392, 40, 33, 2407, 46, 2408, 46, 2409, 40, 41, 41, 123, 344, 59, 125, 386, 40, 490, 2410, 398, 2407, 46, 2411, 40, 41, 41, 123, 392, 40, 2410, 46, 2401, 631, 2178, 605, 2410, 46, 2396, 46, 2412, 40, 2413, 619, 2399, 46, 2396, 46, 2387, 40, 2413, 41, 41, 605, 33, 2414, 40, 2410, 46, 2401, 44, 2407, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2415, 40, 2407, 46, 2008, 44, 2178, 46, 2184, 40, 41, 44, 2410, 46, 2396, 46, 2416, 40, 41, 44, 2410, 46, 2401, 46, 2184, 40, 41, 41, 41, 59, 125, 125, 125, 125, 125, 457, 323, 2417, 40, 2302, 2178, 44, 2418, 2419, 41, 619, 2178, 46, 2420, 46, 2421, 605, 2178, 46, 2422, 40, 41, 46, 2423, 40, 2193, 619, 33, 2193, 46, 2420, 46, 2421, 41, 46, 2424, 40, 2425, 619, 2425, 46, 2426, 40, 41, 46, 2192, 40, 2427, 619, 2427, 46, 2396, 46, 2387, 40, 2419, 41, 41, 41, 59, 125, 438, 491, 492, 2428, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2178, 398, 2016, 46, 2429, 40, 41, 41, 123, 490, 2430, 61, 418, 2303, 60, 2431, 62, 40, 2178, 46, 2432, 40, 41, 46, 2433, 60, 2431, 62, 40, 41, 46, 2434, 40, 2178, 46, 2435, 40, 41, 41, 46, 2436, 40, 2437, 619, 33, 2437, 46, 2438, 40, 41, 605, 33, 2437, 46, 2439, 40, 41, 41, 41, 59, 490, 2440, 61, 2178, 46, 2441, 59, 392, 40, 2440, 631, 424, 41, 123, 386, 40, 490, 2442, 398, 2440, 46, 2443, 46, 2444, 40, 2437, 619, 2437, 46, 2445, 41, 41, 123, 2430, 46, 2446, 40, 2442, 41, 59, 125, 125, 386, 40, 490, 2447, 398, 2430, 41, 123, 392, 40, 33, 2447, 46, 2448, 40, 2449, 58, 473, 44, 2450, 58, 473, 44, 2451, 58, 430, 2452, 44, 2453, 58, 430, 490, 2453, 41, 41, 123, 469, 418, 2181, 40, 2453, 41, 59, 125, 392, 40, 33, 2447, 46, 2448, 40, 2449, 58, 380, 44, 2450, 58, 473, 44, 2451, 58, 430, 2452, 44, 2453, 58, 430, 2453, 41, 41, 123, 469, 418, 2181, 40, 2453, 41, 59, 125, 392, 40, 33, 2447, 46, 2448, 40, 2449, 58, 380, 44, 2450, 58, 380, 44, 2451, 58, 430, 2452, 44, 2453, 58, 430, 2453, 41, 41, 123, 469, 418, 2181, 40, 2453, 41, 59, 125, 125, 125, 125, 438, 491, 492, 2454, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2178, 398, 2016, 46, 2455, 40, 41, 41, 123, 386, 40, 490, 2456, 398, 2178, 46, 2457, 40, 41, 41, 123, 490, 2458, 61, 2456, 46, 2459, 40, 41, 59, 392, 40, 2458, 631, 424, 605, 2456, 91, 2460, 46, 2461, 93, 614, 424, 41, 123, 490, 2462, 61, 2458, 46, 2463, 59, 392, 40, 2462, 631, 478, 40, 461, 41, 605, 33, 40, 2462, 614, 478, 40, 326, 91, 93, 41, 605, 2456, 46, 2464, 40, 41, 41, 605, 2462, 46, 2465, 40, 41, 631, 424, 41, 123, 2021, 46, 2466, 40, 2456, 41, 59, 125, 125, 392, 40, 2456, 46, 2467, 40, 41, 606, 2456, 46, 2468, 40, 41, 606, 2456, 46, 2469, 40, 41, 41, 123, 2470, 61, 2456, 46, 2471, 40, 41, 59, 125, 125, 125, 125, 438, 491, 492, 2472, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 490, 2178, 398, 2016, 46, 2473, 40, 41, 41, 123, 392, 40, 2178, 46, 2474, 40, 41, 631, 424, 41, 123, 392, 40, 2178, 46, 2475, 631, 424, 41, 123, 469, 418, 2181, 40, 2182, 46, 2476, 40, 2178, 46, 2474, 40, 41, 44, 2178, 46, 2184, 40, 41, 44, 2178, 46, 2477, 40, 41, 46, 2184, 40, 41, 41, 41, 59, 125, 392, 40, 2178, 46, 2185, 40, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2478, 40, 2178, 46, 2474, 40, 41, 44, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 125, 490, 2479, 61, 2178, 46, 2480, 40, 41, 46, 2481, 40, 2482, 619, 33, 2482, 46, 2483, 605, 2482, 46, 2484, 46, 2485, 605, 2482, 46, 2486, 605, 2482, 46, 2484, 46, 2391, 46, 2474, 40, 41, 631, 424, 605, 2482, 46, 2484, 46, 2487, 46, 2474, 40, 41, 614, 424, 41, 59, 392, 40, 2479, 631, 424, 41, 123, 2021, 46, 2488, 40, 2479, 46, 2484, 41, 59, 125, 125, 125, 438, 491, 492, 2489, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 490, 2490, 61, 418, 2491, 60, 2492, 44, 2493, 62, 40, 41, 59, 490, 2494, 61, 2021, 46, 2495, 40, 41, 59, 386, 40, 490, 2178, 398, 2016, 46, 2496, 40, 41, 41, 123, 490, 2497, 61, 2178, 46, 2498, 40, 41, 59, 392, 40, 2497, 614, 424, 41, 123, 392, 40, 2178, 46, 2499, 40, 41, 46, 2192, 40, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2500, 40, 2178, 46, 2184, 40, 41, 41, 41, 59, 125, 344, 59, 125, 2493, 63, 2501, 61, 424, 59, 386, 40, 490, 2502, 398, 2178, 46, 2503, 40, 41, 41, 123, 386, 40, 490, 2504, 398, 2178, 46, 2505, 40, 41, 41, 123, 392, 40, 33, 2502, 46, 2506, 40, 2504, 46, 2008, 44, 430, 490, 2507, 41, 606, 2507, 614, 424, 41, 123, 392, 40, 33, 2504, 46, 2508, 605, 40, 40, 33, 2504, 46, 2509, 40, 41, 605, 33, 2504, 46, 2510, 46, 2511, 40, 41, 41, 606, 2504, 46, 2512, 40, 41, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2513, 40, 2178, 46, 2184, 40, 41, 44, 2504, 46, 2008, 41, 41, 59, 125, 125, 360, 392, 40, 2504, 46, 2514, 40, 41, 605, 2504, 46, 2515, 40, 41, 605, 2504, 46, 2516, 46, 2517, 40, 2507, 41, 41, 123, 392, 40, 2504, 46, 2516, 46, 2518, 40, 41, 41, 123, 469, 418, 2181, 40, 2182, 46, 2519, 40, 2178, 46, 2184, 40, 41, 44, 2504, 46, 2008, 41, 41, 59, 125, 469, 418, 2181, 40, 2182, 46, 2520, 40, 2178, 46, 2184, 40, 41, 44, 2504, 46, 2008, 44, 2504, 46, 2516, 46, 2521, 40, 41, 41, 41, 59, 125, 360, 392, 40, 33, 2504, 46, 2516, 46, 2392, 40, 2507, 46, 2522, 40, 41, 46, 2523, 40, 41, 41, 41, 123, 392, 40, 2494, 41, 123, 469, 418, 2181, 40, 2182, 46, 2524, 40, 2178, 46, 2184, 40, 41, 44, 2507, 44, 2504, 46, 2008, 44, 2504, 46, 2516, 46, 2184, 40, 41, 41, 41, 59, 125, 469, 418, 2181, 40, 2182, 46, 2525, 40, 2178, 46, 2184, 40, 41, 44, 2504, 46, 2008, 44, 2504, 46, 2516, 46, 2184, 40, 41, 41, 41, 59, 125, 125, 490, 2526, 61, 418, 426, 91, 2497, 46, 2396, 46, 2527, 93, 59, 385, 40, 490, 2528, 61, 1500, 59, 2528, 60, 2497, 46, 2396, 46, 2527, 59, 2528, 637, 41, 123, 2526, 91, 2528, 93, 61, 2502, 91, 2497, 46, 2396, 91, 2528, 93, 46, 2008, 93, 33, 59, 125, 386, 40, 490, 2529, 398, 2178, 46, 2530, 40, 41, 46, 2531, 60, 2532, 62, 40, 2178, 46, 2533, 40, 41, 41, 41, 123, 392, 40, 2502, 46, 2534, 40, 2529, 46, 2008, 44, 430, 490, 2535, 41, 605, 40, 40, 2529, 46, 2536, 605, 2535, 407, 2002, 2537, 605, 2537, 46, 2192, 40, 41, 41, 606, 40, 33, 2529, 46, 2536, 605, 2535, 631, 424, 41, 41, 41, 123, 490, 2538, 61, 2529, 407, 2539, 2540, 63, 2540, 46, 2541, 58, 40, 40, 2542, 41, 2529, 41, 46, 2541, 59, 392, 40, 2494, 41, 123, 469, 418, 2181, 40, 2182, 46, 2543, 40, 2178, 46, 2184, 40, 41, 44, 461, 46, 2544, 40, 44, 2497, 46, 2396, 46, 2006, 40, 40, 2545, 44, 2528, 41, 619, 2545, 46, 2008, 43, 43, 2526, 91, 2528, 93, 41, 41, 44, 2529, 46, 2008, 44, 2538, 46, 2546, 46, 2184, 40, 41, 44, 2538, 46, 2396, 46, 2547, 40, 41, 41, 41, 59, 125, 469, 418, 2181, 40, 2182, 46, 2548, 40, 2178, 46, 2184, 40, 41, 44, 2529, 46, 2008, 44, 2538, 46, 2549, 46, 2184, 40, 41, 44, 2538, 46, 2396, 46, 2550, 40, 41, 41, 41, 59, 125, 125, 392, 40, 2501, 614, 424, 41, 123, 392, 40, 33, 2490, 46, 2551, 40, 2497, 44, 430, 2501, 41, 41, 123, 2501, 61, 40, 40, 2552, 41, 2497, 41, 46, 2553, 40, 41, 40, 2494, 41, 59, 2490, 91, 2497, 93, 61, 2501, 59, 125, 125, 490, 2554, 61, 2501, 46, 2555, 40, 2526, 41, 59, 392, 40, 2554, 631, 424, 41, 123, 392, 40, 2494, 41, 123, 469, 418, 2181, 40, 2182, 46, 2556, 40, 2178, 46, 2184, 40, 41, 44, 461, 46, 2557, 40, 44, 2497, 46, 2396, 46, 2006, 40, 40, 2558, 44, 2528, 41, 619, 2558, 46, 2008, 43, 43, 2526, 91, 2528, 93, 41, 41, 41, 41, 59, 125, 469, 418, 2181, 40, 2182, 46, 2559, 40, 2178, 46, 2184, 40, 41, 44, 2497, 46, 2396, 46, 2560, 40, 41, 41, 41, 59, 125, 2554, 61, 418, 2561, 40, 424, 33, 44, 2178, 44, 2502, 41, 59, 2501, 46, 2562, 40, 2526, 44, 2554, 41, 59, 125, 125, 125, 438, 491, 492, 2563, 40, 2015, 2016, 44, 2017, 60, 2018, 46, 2019, 46, 2020, 62, 2021, 41, 123, 386, 40, 2177, 2178, 398, 2016, 46, 2564, 40, 41, 41, 123, 386, 40, 490, 2565, 398, 2178, 46, 2566, 40, 41, 41, 123, 392, 40, 2565, 46, 2567, 40, 41, 41, 123, 490, 2568, 61, 2565, 46, 2569, 40, 2570, 46, 2571, 41, 59, 392, 40, 2568, 631, 424, 605, 2565, 46, 2572, 40, 41, 41, 123, 2021, 46, 2573, 40, 40, 2574, 41, 2565, 44, 40, 461, 41, 2568, 46, 2575, 33, 41, 59, 125, 360, 123, 2021, 46, 2576, 40, 40, 2577, 41, 2565, 41, 59, 125, 125, 125, 125, 125, 125]",0.99997026,1
18,72459,C#,"    public class SqliteBlobTest : IDisposable
    {
        private const string Table = ""data"";
        private const string Column = ""value"";
        private const long Rowid = 1;

        private readonly SqliteConnection _connection = new(""Data Source=:memory:"");

        public SqliteBlobTest()
        {
            _connection.Open();
            _connection.ExecuteNonQuery(
                ""CREATE TABLE "" + Table + "" ("" + Column + "" BLOB);"" +
                ""INSERT INTO "" + Table + "" (rowid, "" + Column + "") VALUES ("" + Rowid + "", X'0102');"");
        }

        [Fact]
        public void Ctor_throws_when_connection_closed()
        {
            var connection = new SqliteConnection();

            var ex = Assert.Throws<InvalidOperationException>(
                () => new SqliteBlob(connection, Table, Column, Rowid));
            Assert.Equal(Resources.SqlBlobRequiresOpenConnection, ex.Message);
        }

        [Fact]
        public void Ctor_throws_when_error()
        {
            var ex = Assert.Throws<SqliteException>(
                () => new SqliteBlob(_connection, ""UnknownTable"", Column, Rowid));
            Assert.Equal(SQLITE_ERROR, ex.SqliteErrorCode);
        }

        [Fact]
        public void Ctor_throws_when_table_null()
        {
            var ex = Assert.Throws<ArgumentNullException>(
                () => new SqliteBlob(_connection, null!, Column, Rowid));
            Assert.Equal(""tableName"", ex.ParamName);
        }

        [Fact]
        public void Ctor_throws_when_column_null()
        {
            var ex = Assert.Throws<ArgumentNullException>(
                () => new SqliteBlob(_connection, Table, null!, Rowid));
            Assert.Equal(""columnName"", ex.ParamName);
        }

        [Fact]
        public void CanRead_works()
        {
            using (var stream = CreateStream())
            {
                Assert.True(stream.CanRead);
            }
        }

        [Fact]
        public void CanSeek_works()
        {
            using (var stream = CreateStream())
            {
                Assert.True(stream.CanSeek);
            }
        }

        [Theory]
        [InlineData(false)]
        [InlineData(true)]
        public void CanWrite_works(bool readOnly)
        {
            using (var stream = CreateStream(readOnly))
            {
                Assert.Equal(!readOnly, stream.CanWrite);
            }
        }

        [Fact]
        public void Length_works()
        {
            using (var stream = CreateStream())
            {
                Assert.Equal(2, stream.Length);
            }
        }

        [Fact]
        public void Position_throws_when_negative()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentOutOfRangeException>(
                    () => stream.Position = -1);
                Assert.Equal(""value"", ex.ParamName);
                Assert.Equal(-1L, ex.ActualValue);
            }
        }

        [Fact]
        public void Flush_works()
        {
            using (var stream = CreateStream())
            {
                stream.Flush();
            }
        }

        [Theory]
        [InlineData(0, new byte[] { }, 0, 0, 0)]
        [InlineData(0, new byte[] { 0 }, 0, 0, 0)]
        [InlineData(0, new byte[] { 0 }, 2, 0, 1)]
        [InlineData(0, new byte[] { 0 }, 3, 0, 1)]
        [InlineData(1, new byte[] { 1 }, 0, 0, 1)]
        [InlineData(1, new byte[] { 1, 0 }, 0, 0, 1)]
        [InlineData(1, new byte[] { 2 }, 1, 0, 1)]
        [InlineData(1, new byte[] { 2, 0 }, 1, 0, 2)]
        [InlineData(1, new byte[] { 0, 1 }, 0, 1, 1)]
        public void Read_works(
            int expectedBytesRead,
            byte[] expectedBuffer,
            long initialPosition,
            int offset,
            int count)
        {
            using (var stream = CreateStream())
            {
                stream.Position = initialPosition;
                var buffer = new byte[expectedBuffer.Length];

                var bytesRead = stream.Read(buffer, offset, count);

                Assert.Equal(expectedBytesRead, bytesRead);
                Assert.Equal(expectedBuffer, buffer);
                Assert.Equal(initialPosition + bytesRead, stream.Position);
            }
        }

        [Fact]
        public void Read_throws_when_buffer_null()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentNullException>(
                    () => stream.Read(null!, 0, 1));

                Assert.Equal(""buffer"", ex.ParamName);
            }
        }

        [Fact]
        public void Read_throws_when_offset_negative()
        {
            using (var stream = CreateStream())
            {
                var buffer = new byte[1];

                var ex = Assert.Throws<ArgumentOutOfRangeException>(
                    () => stream.Read(buffer, -1, 1));
                Assert.Equal(""offset"", ex.ParamName);
                Assert.Equal(-1, ex.ActualValue);
            }
        }

        [Fact]
        public void Read_throws_when_offset_out_of_range()
        {
            using (var stream = CreateStream())
            {
                var buffer = new byte[1];

                var ex = Assert.Throws<ArgumentException>(
                    () => stream.Read(buffer, 1, 1));
                Assert.Null(ex.ParamName);
                Assert.Equal(Resources.InvalidOffsetAndCount, ex.Message);
            }
        }

        [Fact]
        public void Read_throws_when_count_negative()
        {
            using (var stream = CreateStream())
            {
                var buffer = new byte[1];

                var ex = Assert.Throws<ArgumentOutOfRangeException>(
                    () => stream.Read(buffer, 0, -1));
                Assert.Equal(""count"", ex.ParamName);
                Assert.Equal(-1, ex.ActualValue);
            }
        }

        [Fact]
        public void Read_throws_when_count_out_of_range()
        {
            using (var stream = CreateStream())
            {
                var buffer = new byte[1];

                var ex = Assert.Throws<ArgumentException>(
                    () => stream.Read(buffer, 0, 2));

                Assert.Null(ex.ParamName);
                Assert.Equal(Resources.InvalidOffsetAndCount, ex.Message);
            }
        }

        [Fact]
        public void Read_throws_when_disposed()
        {
            var buffer = new byte[1];

            var stream = CreateStream();
            stream.Dispose();

            var ex = Assert.Throws<ObjectDisposedException>(
                () => stream.Read(buffer, 0, 1));
        }

        [Theory]
        [InlineData(0, 1, 0, SeekOrigin.Begin)]
        [InlineData(1, 1, 1, SeekOrigin.Begin)]
        [InlineData(3, 1, 3, SeekOrigin.Begin)]
        [InlineData(0, 1, -1, SeekOrigin.Current)]
        [InlineData(1, 1, 0, SeekOrigin.Current)]
        [InlineData(2, 1, 1, SeekOrigin.Current)]
        [InlineData(3, 1, 2, SeekOrigin.Current)]
        [InlineData(1, 1, -1, SeekOrigin.End)]
        [InlineData(2, 1, 0, SeekOrigin.End)]
        [InlineData(3, 1, 1, SeekOrigin.End)]
        public void Seek_works(
            long expected,
            long initialPosition,
            long offset,
            SeekOrigin origin)
        {
            using (var stream = CreateStream())
            {
                stream.Position = initialPosition;

                var position = stream.Seek(offset, origin);

                Assert.Equal(expected, stream.Position);
                Assert.Equal(stream.Position, position);
            }
        }

        [Theory]
        [InlineData(1, -1, SeekOrigin.Begin)]
        [InlineData(1, -2, SeekOrigin.Current)]
        [InlineData(1, -3, SeekOrigin.End)]
        public void Seek_throws_when_negative(
            long initialPosition,
            long offset,
            SeekOrigin origin)
        {
            using (var stream = CreateStream())
            {
                stream.Position = initialPosition;

                var ex = Assert.Throws<IOException>(
                    () => stream.Seek(offset, origin));
                Assert.Equal(Resources.SeekBeforeBegin, ex.Message);
            }
        }

        [Fact]
        public void Seek_validates_origin()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentException>(
                    () => stream.Seek(0, (SeekOrigin)(-1)));
                Assert.Equal(""origin"", ex.ParamName);
                Assert.Contains(Resources.InvalidEnumValue(typeof(SeekOrigin), -1), ex.Message);
            }
        }

        [Fact]
        public void SetLength_throws()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<NotSupportedException>(
                    () => stream.SetLength(1));
                Assert.Equal(Resources.ResizeNotSupported, ex.Message);
            }
        }

        [Theory]
        [InlineData(new byte[] { 3, 4 }, 0, new byte[] { 3, 4 }, 0, 2)]
        [InlineData(new byte[] { 3, 2 }, 0, new byte[] { 3, 4 }, 0, 1)]
        [InlineData(new byte[] { 4, 2 }, 0, new byte[] { 3, 4 }, 1, 1)]
        [InlineData(new byte[] { 1, 3 }, 1, new byte[] { 3 }, 0, 1)]
        [InlineData(new byte[] { 1, 2 }, 0, new byte[] { }, 0, 0)]
        [InlineData(new byte[] { 1, 2 }, 2, new byte[] { }, 0, 0)]
        [InlineData(new byte[] { 1, 2 }, 3, new byte[] { }, 0, 0)]
        [InlineData(new byte[] { 1, 2 }, 0, new byte[] { 3 }, 1, 0)]
        public void Write_works(
            byte[] expected,
            long initialPosition,
            byte[] buffer,
            int offset,
            int count)
        {
            using (var stream = CreateStream())
            {
                stream.Position = initialPosition;
                stream.Write(buffer, offset, count);

                Assert.Equal(initialPosition + count, stream.Position);
            }

            Assert.Equal(
                expected,
                _connection.ExecuteScalar<byte[]>(
                    $""SELECT {Column} FROM {Table} WHERE rowid = {Rowid}""));
        }

        [Fact]
        public void Write_throws_when_buffer_null()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentNullException>(
                    () => stream.Write(null!, 0, 0));
                Assert.Equal(""buffer"", ex.ParamName);
            }
        }

        [Fact]
        public void Write_throws_when_count_out_of_range()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentException>(
                    () => stream.Write(new byte[] { 3 }, 0, 2));
                Assert.Null(ex.ParamName);
                Assert.Equal(Resources.InvalidOffsetAndCount, ex.Message);
            }
        }

        [Fact]
        public void Write_throws_when_count_negative()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentOutOfRangeException>(
                    () => stream.Write(Array.Empty<byte>(), 0, -1));
                Assert.Equal(""count"", ex.ParamName);
                Assert.Equal(-1, ex.ActualValue);
            }
        }

        [Fact]
        public void Write_throws_when_offset_out_of_range()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentException>(
                    () => stream.Write(new byte[] { 3 }, 1, 1));
                Assert.Null(ex.ParamName);
                Assert.Equal(Resources.InvalidOffsetAndCount, ex.Message);
            }
        }

        [Fact]
        public void Write_throws_when_offset_negative()
        {
            using (var stream = CreateStream())
            {
                var ex = Assert.Throws<ArgumentOutOfRangeException>(
                    () => stream.Write(new byte[] { 3, 4 }, -1, 2));
                Assert.Equal(""offset"", ex.ParamName);
            }
        }

        [Fact]
        public void Write_throws_when_position_at_end_of_stream()
        {
            using (var stream = CreateStream())
            {
                stream.Position = 2;
                var ex = Assert.Throws<NotSupportedException>(
                    () => stream.Write(new byte[] { 3 }, 0, 1));
                Assert.Equal(Resources.ResizeNotSupported, ex.Message);
            }
        }

        [Fact]
        public void Write_throws_when_readOnly()
        {
            using (var stream = CreateStream(readOnly: true))
            {
                var ex = Assert.Throws<NotSupportedException>(
                    () => stream.Write(new byte[] { 1 }, 0, 1));

                Assert.Equal(Resources.WriteNotSupported, ex.Message);
            }
        }

        [Fact]
        public void Write_throws_when_disposed()
        {
            var stream = CreateStream();
            stream.Dispose();

            var ex = Assert.Throws<ObjectDisposedException>(
                () => stream.Write(new byte[] { 3 }, 0, 1));
        }

        [Fact]
        public void Empty_works()
        {
            using var connection = new SqliteConnection(""Data Source=:memory:"");
            connection.Open();

            connection.ExecuteNonQuery(
            @""
                CREATE TABLE """""""" ("""""""" BLOB);
                INSERT INTO """""""" (rowid, """""""") VALUES(1, X'02');
            "");

            using var stream = new SqliteBlob(connection, """", """", 1);
            Assert.Equal(2, stream.ReadByte());
        }

        protected Stream CreateStream(bool readOnly = false)
            => new SqliteBlob(_connection, Table, Column, Rowid, readOnly);

        public void Dispose()
            => _connection.Dispose();
    }",1,"[439, 334, 2000, 58, 2001, 123, 437, 341, 461, 2002, 61, 59, 437, 341, 461, 2003, 61, 59, 437, 341, 413, 2004, 61, 1501, 59, 437, 441, 2005, 2006, 61, 418, 40, 41, 59, 439, 2000, 40, 41, 123, 2006, 46, 2007, 40, 41, 59, 2006, 46, 2008, 40, 43, 2002, 43, 43, 2003, 43, 43, 43, 2002, 43, 43, 2003, 43, 43, 2004, 43, 41, 59, 125, 91, 2009, 93, 439, 492, 2010, 40, 41, 123, 490, 2011, 61, 418, 2005, 40, 41, 59, 490, 2012, 61, 2013, 46, 2014, 60, 2015, 62, 40, 40, 41, 619, 418, 2016, 40, 2011, 44, 2002, 44, 2003, 44, 2004, 41, 41, 59, 2013, 46, 2017, 40, 2018, 46, 2019, 44, 2012, 46, 2020, 41, 59, 125, 91, 2009, 93, 439, 492, 2021, 40, 41, 123, 490, 2022, 61, 2023, 46, 2024, 60, 2025, 62, 40, 40, 41, 619, 418, 2026, 40, 2006, 44, 44, 2003, 44, 2004, 41, 41, 59, 2023, 46, 2027, 40, 2028, 44, 2022, 46, 2029, 41, 59, 125, 91, 2009, 93, 439, 492, 2030, 40, 41, 123, 490, 2031, 61, 2032, 46, 2033, 60, 2034, 62, 40, 40, 41, 619, 418, 2035, 40, 2006, 44, 424, 33, 44, 2003, 44, 2004, 41, 41, 59, 2032, 46, 2036, 40, 44, 2031, 46, 2037, 41, 59, 125, 91, 2009, 93, 439, 492, 2038, 40, 41, 123, 490, 2039, 61, 2040, 46, 2041, 60, 2042, 62, 40, 40, 41, 619, 418, 2043, 40, 2006, 44, 2002, 44, 424, 33, 44, 2004, 41, 41, 59, 2040, 46, 2044, 40, 44, 2039, 46, 2045, 41, 59, 125, 91, 2009, 93, 439, 492, 2046, 40, 41, 123, 489, 40, 490, 2047, 61, 2048, 40, 41, 41, 123, 2049, 46, 304, 40, 2047, 46, 2050, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2051, 40, 41, 123, 489, 40, 490, 2052, 61, 2053, 40, 41, 41, 123, 2054, 46, 304, 40, 2052, 46, 2055, 41, 59, 125, 125, 91, 2056, 93, 91, 2057, 40, 380, 41, 93, 91, 2057, 40, 473, 41, 93, 439, 492, 2058, 40, 323, 2059, 41, 123, 489, 40, 490, 2060, 61, 2061, 40, 2059, 41, 41, 123, 2062, 46, 2063, 40, 33, 2059, 44, 2060, 46, 2064, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2065, 40, 41, 123, 489, 40, 490, 2066, 61, 2067, 40, 41, 41, 123, 2068, 46, 2069, 40, 1502, 44, 2066, 46, 2070, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2071, 40, 41, 123, 489, 40, 490, 2072, 61, 2073, 40, 41, 41, 123, 490, 2074, 61, 2075, 46, 2076, 60, 2077, 62, 40, 40, 41, 619, 2072, 46, 2078, 61, 45, 1501, 41, 59, 2075, 46, 2079, 40, 44, 2074, 46, 2080, 41, 59, 2075, 46, 2079, 40, 45, 1501, 44, 2074, 46, 2081, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2082, 40, 41, 123, 489, 40, 490, 2083, 61, 2084, 40, 41, 41, 123, 2083, 46, 2085, 40, 41, 59, 125, 125, 91, 2056, 93, 91, 2057, 40, 1500, 44, 418, 326, 91, 93, 123, 125, 44, 1500, 44, 1500, 44, 1500, 41, 93, 91, 2057, 40, 1500, 44, 418, 326, 91, 93, 123, 1500, 125, 44, 1500, 44, 1500, 44, 1500, 41, 93, 91, 2057, 40, 1500, 44, 418, 326, 91, 93, 123, 1500, 125, 44, 1502, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 1500, 44, 418, 326, 91, 93, 123, 1500, 125, 44, 1502, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 1501, 44, 418, 326, 91, 93, 123, 1501, 125, 44, 1500, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 1501, 44, 418, 326, 91, 93, 123, 1501, 44, 1500, 125, 44, 1500, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 1501, 44, 418, 326, 91, 93, 123, 1502, 125, 44, 1501, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 1501, 44, 418, 326, 91, 93, 123, 1502, 44, 1500, 125, 44, 1501, 44, 1500, 44, 1502, 41, 93, 91, 2057, 40, 1501, 44, 418, 326, 91, 93, 123, 1500, 44, 1501, 125, 44, 1500, 44, 1501, 44, 1501, 41, 93, 439, 492, 2086, 40, 404, 2087, 44, 326, 91, 93, 2088, 44, 413, 2089, 44, 404, 2090, 44, 404, 2091, 41, 123, 489, 40, 490, 2092, 61, 2093, 40, 41, 41, 123, 2092, 46, 2094, 61, 2089, 59, 490, 2095, 61, 418, 326, 91, 2088, 46, 2096, 93, 59, 490, 2097, 61, 2092, 46, 2098, 40, 2095, 44, 2090, 44, 2091, 41, 59, 2099, 46, 2100, 40, 2087, 44, 2097, 41, 59, 2099, 46, 2100, 40, 2088, 44, 2095, 41, 59, 2099, 46, 2100, 40, 2089, 43, 2097, 44, 2092, 46, 2094, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2101, 40, 41, 123, 489, 40, 490, 2102, 61, 2103, 40, 41, 41, 123, 490, 2104, 61, 2105, 46, 2106, 60, 2107, 62, 40, 40, 41, 619, 2102, 46, 2108, 40, 424, 33, 44, 1500, 44, 1501, 41, 41, 59, 2105, 46, 2109, 40, 44, 2104, 46, 2110, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2111, 40, 41, 123, 489, 40, 490, 2112, 61, 2113, 40, 41, 41, 123, 490, 2114, 61, 418, 326, 91, 1501, 93, 59, 490, 2115, 61, 2116, 46, 2117, 60, 2118, 62, 40, 40, 41, 619, 2112, 46, 2119, 40, 2114, 44, 45, 1501, 44, 1501, 41, 41, 59, 2116, 46, 2120, 40, 44, 2115, 46, 2121, 41, 59, 2116, 46, 2120, 40, 45, 1501, 44, 2115, 46, 2122, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2123, 40, 41, 123, 489, 40, 490, 2124, 61, 2125, 40, 41, 41, 123, 490, 2126, 61, 418, 326, 91, 1501, 93, 59, 490, 2127, 61, 2128, 46, 2129, 60, 2130, 62, 40, 40, 41, 619, 2124, 46, 2131, 40, 2126, 44, 1501, 44, 1501, 41, 41, 59, 2128, 46, 2132, 40, 2127, 46, 2133, 41, 59, 2128, 46, 2134, 40, 2135, 46, 2136, 44, 2127, 46, 2137, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2138, 40, 41, 123, 489, 40, 490, 2139, 61, 2140, 40, 41, 41, 123, 490, 2141, 61, 418, 326, 91, 1501, 93, 59, 490, 2142, 61, 2143, 46, 2144, 60, 2145, 62, 40, 40, 41, 619, 2139, 46, 2146, 40, 2141, 44, 1500, 44, 45, 1501, 41, 41, 59, 2143, 46, 2147, 40, 44, 2142, 46, 2148, 41, 59, 2143, 46, 2147, 40, 45, 1501, 44, 2142, 46, 2149, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2150, 40, 41, 123, 489, 40, 490, 2151, 61, 2152, 40, 41, 41, 123, 490, 2153, 61, 418, 326, 91, 1501, 93, 59, 490, 2154, 61, 2155, 46, 2156, 60, 2157, 62, 40, 40, 41, 619, 2151, 46, 2158, 40, 2153, 44, 1500, 44, 1502, 41, 41, 59, 2155, 46, 2159, 40, 2154, 46, 2160, 41, 59, 2155, 46, 2161, 40, 2162, 46, 2163, 44, 2154, 46, 2164, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2165, 40, 41, 123, 490, 2166, 61, 418, 326, 91, 1501, 93, 59, 490, 2167, 61, 2168, 40, 41, 59, 2167, 46, 2169, 40, 41, 59, 490, 2170, 61, 2171, 46, 2172, 60, 2173, 62, 40, 40, 41, 619, 2167, 46, 2174, 40, 2166, 44, 1500, 44, 1501, 41, 41, 59, 125, 91, 2056, 93, 91, 2057, 40, 1500, 44, 1501, 44, 1500, 44, 2175, 46, 2176, 41, 93, 91, 2057, 40, 1501, 44, 1501, 44, 1501, 44, 2175, 46, 2176, 41, 93, 91, 2057, 40, 1502, 44, 1501, 44, 1502, 44, 2175, 46, 2176, 41, 93, 91, 2057, 40, 1500, 44, 1501, 44, 45, 1501, 44, 2175, 46, 2177, 41, 93, 91, 2057, 40, 1501, 44, 1501, 44, 1500, 44, 2175, 46, 2177, 41, 93, 91, 2057, 40, 1502, 44, 1501, 44, 1501, 44, 2175, 46, 2177, 41, 93, 91, 2057, 40, 1502, 44, 1501, 44, 1502, 44, 2175, 46, 2177, 41, 93, 91, 2057, 40, 1501, 44, 1501, 44, 45, 1501, 44, 2175, 46, 2178, 41, 93, 91, 2057, 40, 1502, 44, 1501, 44, 1500, 44, 2175, 46, 2178, 41, 93, 91, 2057, 40, 1502, 44, 1501, 44, 1501, 44, 2175, 46, 2178, 41, 93, 439, 492, 2179, 40, 413, 2180, 44, 413, 2089, 44, 413, 2090, 44, 2175, 2181, 41, 123, 489, 40, 490, 2182, 61, 2183, 40, 41, 41, 123, 2182, 46, 2184, 61, 2089, 59, 490, 2185, 61, 2182, 46, 2186, 40, 2090, 44, 2181, 41, 59, 2187, 46, 2188, 40, 2180, 44, 2182, 46, 2184, 41, 59, 2187, 46, 2188, 40, 2182, 46, 2184, 44, 2185, 41, 59, 125, 125, 91, 2056, 93, 91, 2057, 40, 1501, 44, 45, 1501, 44, 2175, 46, 2176, 41, 93, 91, 2057, 40, 1501, 44, 45, 1502, 44, 2175, 46, 2177, 41, 93, 91, 2057, 40, 1501, 44, 45, 1502, 44, 2175, 46, 2178, 41, 93, 439, 492, 2189, 40, 413, 2089, 44, 413, 2090, 44, 2175, 2181, 41, 123, 489, 40, 490, 2190, 61, 2191, 40, 41, 41, 123, 2190, 46, 2192, 61, 2089, 59, 490, 2193, 61, 2194, 46, 2195, 60, 2196, 62, 40, 40, 41, 619, 2190, 46, 2197, 40, 2090, 44, 2181, 41, 41, 59, 2194, 46, 2198, 40, 2199, 46, 2200, 44, 2193, 46, 2201, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2202, 40, 41, 123, 489, 40, 490, 2203, 61, 2204, 40, 41, 41, 123, 490, 2205, 61, 2206, 46, 2207, 60, 2208, 62, 40, 40, 41, 619, 2203, 46, 2209, 40, 1500, 44, 40, 2175, 41, 40, 45, 1501, 41, 41, 41, 59, 2206, 46, 2210, 40, 44, 2205, 46, 2211, 41, 59, 2206, 46, 2212, 40, 2213, 46, 2214, 40, 478, 40, 2175, 41, 44, 45, 1501, 41, 44, 2205, 46, 2215, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2216, 40, 41, 123, 489, 40, 490, 2217, 61, 2218, 40, 41, 41, 123, 490, 2219, 61, 2220, 46, 2221, 60, 2222, 62, 40, 40, 41, 619, 2217, 46, 2223, 40, 1501, 41, 41, 59, 2220, 46, 2224, 40, 2225, 46, 2226, 44, 2219, 46, 2227, 41, 59, 125, 125, 91, 2056, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 1500, 44, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 1500, 44, 1502, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 1500, 44, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 1500, 44, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 1501, 44, 1501, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 125, 44, 1501, 44, 418, 326, 91, 93, 123, 1502, 125, 44, 1500, 44, 1501, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 125, 44, 1500, 44, 418, 326, 91, 93, 123, 125, 44, 1500, 44, 1500, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 125, 44, 1502, 44, 418, 326, 91, 93, 123, 125, 44, 1500, 44, 1500, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 125, 44, 1502, 44, 418, 326, 91, 93, 123, 125, 44, 1500, 44, 1500, 41, 93, 91, 2057, 40, 418, 326, 91, 93, 123, 1501, 44, 1502, 125, 44, 1500, 44, 418, 326, 91, 93, 123, 1502, 125, 44, 1501, 44, 1500, 41, 93, 439, 492, 2228, 40, 326, 91, 93, 2180, 44, 413, 2089, 44, 326, 91, 93, 2229, 44, 404, 2090, 44, 404, 2091, 41, 123, 489, 40, 490, 2230, 61, 2231, 40, 41, 41, 123, 2230, 46, 2232, 61, 2089, 59, 2230, 46, 2233, 40, 2229, 44, 2090, 44, 2091, 41, 59, 2234, 46, 2235, 40, 2089, 43, 2091, 44, 2230, 46, 2232, 41, 59, 125, 2236, 46, 2237, 40, 2180, 44, 2006, 46, 2238, 60, 326, 91, 93, 62, 40, 36, 41, 41, 59, 125, 91, 2009, 93, 439, 492, 2239, 40, 41, 123, 489, 40, 490, 2240, 61, 2241, 40, 41, 41, 123, 490, 2242, 61, 2243, 46, 2244, 60, 2245, 62, 40, 40, 41, 619, 2240, 46, 2246, 40, 424, 33, 44, 1500, 44, 1500, 41, 41, 59, 2243, 46, 2247, 40, 44, 2242, 46, 2248, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2249, 40, 41, 123, 489, 40, 490, 2250, 61, 2251, 40, 41, 41, 123, 490, 2252, 61, 2253, 46, 2254, 60, 2255, 62, 40, 40, 41, 619, 2250, 46, 2256, 40, 418, 326, 91, 93, 123, 1502, 125, 44, 1500, 44, 1502, 41, 41, 59, 2253, 46, 2257, 40, 2252, 46, 2258, 41, 59, 2253, 46, 2259, 40, 2260, 46, 2261, 44, 2252, 46, 2262, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2263, 40, 41, 123, 489, 40, 490, 2264, 61, 2265, 40, 41, 41, 123, 490, 2266, 61, 2267, 46, 2268, 60, 2269, 62, 40, 40, 41, 619, 2264, 46, 2270, 40, 2271, 46, 2272, 60, 326, 62, 40, 41, 44, 1500, 44, 45, 1501, 41, 41, 59, 2267, 46, 2273, 40, 44, 2266, 46, 2274, 41, 59, 2267, 46, 2273, 40, 45, 1501, 44, 2266, 46, 2275, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2276, 40, 41, 123, 489, 40, 490, 2277, 61, 2278, 40, 41, 41, 123, 490, 2279, 61, 2280, 46, 2281, 60, 2282, 62, 40, 40, 41, 619, 2277, 46, 2283, 40, 418, 326, 91, 93, 123, 1502, 125, 44, 1501, 44, 1501, 41, 41, 59, 2280, 46, 2284, 40, 2279, 46, 2285, 41, 59, 2280, 46, 2286, 40, 2287, 46, 2288, 44, 2279, 46, 2289, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2290, 40, 41, 123, 489, 40, 490, 2291, 61, 2292, 40, 41, 41, 123, 490, 2293, 61, 2294, 46, 2295, 60, 2296, 62, 40, 40, 41, 619, 2291, 46, 2297, 40, 418, 326, 91, 93, 123, 1502, 44, 1502, 125, 44, 45, 1501, 44, 1502, 41, 41, 59, 2294, 46, 2298, 40, 44, 2293, 46, 2299, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2300, 40, 41, 123, 489, 40, 490, 2301, 61, 2302, 40, 41, 41, 123, 2301, 46, 2303, 61, 1502, 59, 490, 2304, 61, 2305, 46, 2306, 60, 2307, 62, 40, 40, 41, 619, 2301, 46, 2308, 40, 418, 326, 91, 93, 123, 1502, 125, 44, 1500, 44, 1501, 41, 41, 59, 2305, 46, 2309, 40, 2310, 46, 2311, 44, 2304, 46, 2312, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2313, 40, 41, 123, 489, 40, 490, 2314, 61, 2315, 40, 2059, 58, 473, 41, 41, 123, 490, 2316, 61, 2317, 46, 2318, 60, 2319, 62, 40, 40, 41, 619, 2314, 46, 2320, 40, 418, 326, 91, 93, 123, 1501, 125, 44, 1500, 44, 1501, 41, 41, 59, 2317, 46, 2321, 40, 2322, 46, 2323, 44, 2316, 46, 2324, 41, 59, 125, 125, 91, 2009, 93, 439, 492, 2325, 40, 41, 123, 490, 2326, 61, 2327, 40, 41, 59, 2326, 46, 2328, 40, 41, 59, 490, 2329, 61, 2330, 46, 2331, 60, 2332, 62, 40, 40, 41, 619, 2326, 46, 2333, 40, 418, 326, 91, 93, 123, 1502, 125, 44, 1500, 44, 1501, 41, 41, 59, 125, 91, 2009, 93, 439, 492, 2334, 40, 41, 123, 489, 490, 2335, 61, 418, 2005, 40, 41, 59, 2335, 46, 2336, 40, 41, 59, 2335, 46, 2337, 40, 64, 41, 59, 489, 490, 2338, 61, 418, 2339, 40, 2335, 44, 44, 44, 1501, 41, 59, 2340, 46, 2341, 40, 1502, 44, 2338, 46, 2342, 40, 41, 41, 59, 125, 438, 2343, 2344, 40, 323, 2059, 61, 380, 41, 619, 418, 2345, 40, 2006, 44, 2002, 44, 2003, 44, 2004, 44, 2059, 41, 59, 439, 492, 2346, 40, 41, 619, 2006, 46, 2346, 40, 41, 59, 125]",0.9998543,1
19,70638,C#,"                private class BadDataDataReader : DbDataReader
                {
                    private readonly object[] _values;

                    public BadDataDataReader(object[] values)
                    {
                        _values = values;
                    }

                    public override bool Read()
                        => true;

                    public override bool IsDBNull(int ordinal)
                        => false;

                    public override int GetInt32(int ordinal)
                        => (int)GetValue(ordinal);

                    public override short GetInt16(int ordinal)
                        => (short)GetValue(ordinal);

                    public override bool GetBoolean(int ordinal)
                        => (bool)GetValue(ordinal);

                    public override string GetString(int ordinal)
                        => (string)GetValue(ordinal);

                    public override object GetValue(int ordinal)
                        => _values[ordinal];

                    #region NotImplemented members

                    public override string GetName(int ordinal)
                        => throw new NotImplementedException();

                    public override int GetValues(object[] values)
                        => throw new NotImplementedException();

                    public override int FieldCount
                        => throw new NotImplementedException();

                    public override object this[int ordinal]
                        => throw new NotImplementedException();

                    public override object this[string name]
                        => throw new NotImplementedException();

                    public override bool HasRows
                        => throw new NotImplementedException();

                    public override bool IsClosed
                        => throw new NotImplementedException();

                    public override int RecordsAffected
                        => 0;

                    public override bool NextResult()
                        => throw new NotImplementedException();

                    public override int Depth
                        => throw new NotImplementedException();

                    public override int GetOrdinal(string name)
                        => throw new NotImplementedException();

                    public override byte GetByte(int ordinal)
                        => throw new NotImplementedException();

                    public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length)
                        => throw new NotImplementedException();

                    public override char GetChar(int ordinal)
                        => throw new NotImplementedException();

                    public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length)
                        => throw new NotImplementedException();

                    public override Guid GetGuid(int ordinal)
                        => throw new NotImplementedException();

                    public override long GetInt64(int ordinal)
                        => throw new NotImplementedException();

                    public override DateTime GetDateTime(int ordinal)
                        => throw new NotImplementedException();

                    public override decimal GetDecimal(int ordinal)
                        => throw new NotImplementedException();

                    public override double GetDouble(int ordinal)
                        => throw new NotImplementedException();

                    public override float GetFloat(int ordinal)
                        => throw new NotImplementedException();

                    public override string GetDataTypeName(int ordinal)
                        => throw new NotImplementedException();

                    public override Type GetFieldType(int ordinal)
                        => throw new NotImplementedException();

                    public override IEnumerator GetEnumerator()
                        => throw new NotImplementedException();

                    #endregion
                }",1,"[437, 334, 2000, 58, 2001, 123, 437, 441, 426, 91, 93, 2002, 59, 439, 2000, 40, 426, 91, 93, 2003, 41, 123, 2002, 61, 2003, 59, 125, 439, 431, 323, 2004, 40, 41, 619, 473, 59, 439, 431, 323, 2005, 40, 404, 2006, 41, 619, 380, 59, 439, 431, 404, 2007, 40, 404, 2006, 41, 619, 40, 404, 41, 2008, 40, 2006, 41, 59, 439, 431, 453, 2009, 40, 404, 2006, 41, 619, 40, 453, 41, 2008, 40, 2006, 41, 59, 439, 431, 323, 2010, 40, 404, 2006, 41, 619, 40, 323, 41, 2008, 40, 2006, 41, 59, 439, 431, 461, 2011, 40, 404, 2006, 41, 619, 40, 461, 41, 2008, 40, 2006, 41, 59, 439, 431, 426, 2008, 40, 404, 2006, 41, 619, 2002, 91, 2006, 93, 59, 35, 443, 439, 431, 461, 2012, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 404, 2014, 40, 426, 91, 93, 2003, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 404, 2015, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 426, 467, 91, 404, 2006, 93, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 426, 467, 91, 461, 2016, 93, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 323, 2017, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 323, 2018, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 404, 2019, 619, 1500, 59, 439, 431, 323, 2020, 40, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 404, 2021, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 404, 2022, 40, 461, 2016, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 326, 2023, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 413, 2024, 40, 404, 2006, 44, 413, 2025, 44, 326, 91, 93, 2026, 44, 404, 2027, 44, 404, 2028, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 330, 2029, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 413, 2030, 40, 404, 2006, 44, 413, 2025, 44, 330, 91, 93, 2026, 44, 404, 2027, 44, 404, 2028, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 2031, 2032, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 413, 2033, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 2034, 2035, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 345, 2036, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 356, 2037, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 384, 2038, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 461, 2039, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 2040, 2041, 40, 404, 2006, 41, 619, 469, 418, 2013, 40, 41, 59, 439, 431, 2042, 2043, 40, 41, 619, 469, 418, 2013, 40, 41, 59, 35, 367, 125]",0.17088272,0
20,71777,C#,"public class QueryFilterFuncletizationSqlServerTest
    : QueryFilterFuncletizationTestBase<QueryFilterFuncletizationSqlServerTest.QueryFilterFuncletizationSqlServerFixture>
{
    public QueryFilterFuncletizationSqlServerTest(
        QueryFilterFuncletizationSqlServerFixture fixture,
        ITestOutputHelper testOutputHelper)
        : base(fixture)
    {
        Fixture.TestSqlLoggerFactory.Clear();
        //Fixture.TestSqlLoggerFactory.SetTestOutputHelper(testOutputHelper);
    }

    public override void DbContext_property_parameter_does_not_clash_with_closure_parameter_name()
    {
        base.DbContext_property_parameter_does_not_clash_with_closure_parameter_name();

        AssertSql(
            @""@__ef_filter__Field_0='False'
@__Field_0='False'

SELECT [f].[Id], [f].[IsEnabled]
FROM [FieldFilter] AS [f]
WHERE [f].[IsEnabled] = @__ef_filter__Field_0 AND [f].[IsEnabled] = @__Field_0"");
    }

    public override void DbContext_field_is_parameterized()
    {
        base.DbContext_field_is_parameterized();

        AssertSql(
            @""@__ef_filter__Field_0='False'

SELECT [f].[Id], [f].[IsEnabled]
FROM [FieldFilter] AS [f]
WHERE [f].[IsEnabled] = @__ef_filter__Field_0"",
            //
            @""@__ef_filter__Field_0='True'

SELECT [f].[Id], [f].[IsEnabled]
FROM [FieldFilter] AS [f]
WHERE [f].[IsEnabled] = @__ef_filter__Field_0"");
    }

    public override void DbContext_property_is_parameterized()
    {
        base.DbContext_property_is_parameterized();

        AssertSql(
            @""@__ef_filter__Property_0='False'

SELECT [p].[Id], [p].[IsEnabled]
FROM [PropertyFilter] AS [p]
WHERE [p].[IsEnabled] = @__ef_filter__Property_0"",
            //
            @""@__ef_filter__Property_0='True'

SELECT [p].[Id], [p].[IsEnabled]
FROM [PropertyFilter] AS [p]
WHERE [p].[IsEnabled] = @__ef_filter__Property_0"");
    }

    public override void DbContext_method_call_is_parameterized()
    {
        base.DbContext_method_call_is_parameterized();

        AssertSql(
            @""@__ef_filter__p_0='2'

SELECT [m].[Id], [m].[Tenant]
FROM [MethodCallFilter] AS [m]
WHERE [m].[Tenant] = @__ef_filter__p_0"");
    }

    public override void DbContext_list_is_parameterized()
    {
        using var context = CreateContext();
        // Default value of TenantIds is null InExpression over null values throws
        Assert.Throws<NullReferenceException>(() => context.Set<ListFilter>().ToList());

        context.TenantIds = new List<int>();
        var query = context.Set<ListFilter>().ToList();
        Assert.Empty(query);

        context.TenantIds = new List<int> { 1 };
        query = context.Set<ListFilter>().ToList();
        Assert.Single(query);

        context.TenantIds = new List<int> { 2, 3 };
        query = context.Set<ListFilter>().ToList();
        Assert.Equal(2, query.Count);

        AssertSql(
            @""SELECT [l].[Id], [l].[Tenant]
FROM [ListFilter] AS [l]
WHERE 0 = 1"",
            //
            @""SELECT [l].[Id], [l].[Tenant]
FROM [ListFilter] AS [l]
WHERE [l].[Tenant] = 1"",
            //
            @""SELECT [l].[Id], [l].[Tenant]
FROM [ListFilter] AS [l]
WHERE [l].[Tenant] IN (2, 3)"");
    }

    public override void DbContext_property_chain_is_parameterized()
    {
        base.DbContext_property_chain_is_parameterized();

        AssertSql(
            @""@__ef_filter__Enabled_0='False'

SELECT [p].[Id], [p].[IsEnabled]
FROM [PropertyChainFilter] AS [p]
WHERE [p].[IsEnabled] = @__ef_filter__Enabled_0"",
            //
            @""@__ef_filter__Enabled_0='True'

SELECT [p].[Id], [p].[IsEnabled]
FROM [PropertyChainFilter] AS [p]
WHERE [p].[IsEnabled] = @__ef_filter__Enabled_0"");
    }

    public override void DbContext_property_method_call_is_parameterized()
    {
        base.DbContext_property_method_call_is_parameterized();

        AssertSql(
            @""@__ef_filter__p_0='2'

SELECT [p].[Id], [p].[Tenant]
FROM [PropertyMethodCallFilter] AS [p]
WHERE [p].[Tenant] = @__ef_filter__p_0"");
    }

    public override void DbContext_method_call_chain_is_parameterized()
    {
        base.DbContext_method_call_chain_is_parameterized();

        AssertSql(
            @""@__ef_filter__p_0='2'

SELECT [m].[Id], [m].[Tenant]
FROM [MethodCallChainFilter] AS [m]
WHERE [m].[Tenant] = @__ef_filter__p_0"");
    }

    public override void DbContext_complex_expression_is_parameterized()
    {
        base.DbContext_complex_expression_is_parameterized();

        AssertSql(
            @""@__ef_filter__Property_0='False'
@__ef_filter__p_1='True'

SELECT [c].[Id], [c].[IsEnabled]
FROM [ComplexFilter] AS [c]
WHERE [c].[IsEnabled] = @__ef_filter__Property_0 AND @__ef_filter__p_1 = CAST(1 AS bit)"",
            //
            @""@__ef_filter__Property_0='True'
@__ef_filter__p_1='True'

SELECT [c].[Id], [c].[IsEnabled]
FROM [ComplexFilter] AS [c]
WHERE [c].[IsEnabled] = @__ef_filter__Property_0 AND @__ef_filter__p_1 = CAST(1 AS bit)"",
            //
            @""@__ef_filter__Property_0='True'
@__ef_filter__p_1='False'

SELECT [c].[Id], [c].[IsEnabled]
FROM [ComplexFilter] AS [c]
WHERE [c].[IsEnabled] = @__ef_filter__Property_0 AND @__ef_filter__p_1 = CAST(1 AS bit)"");
    }

    public override void DbContext_property_based_filter_does_not_short_circuit()
    {
        base.DbContext_property_based_filter_does_not_short_circuit();

        AssertSql(
            @""@__ef_filter__p_0='False'
@__ef_filter__IsModerated_1='True' (Nullable = true)

SELECT [s].[Id], [s].[IsDeleted], [s].[IsModerated]
FROM [ShortCircuitFilter] AS [s]
WHERE [s].[IsDeleted] = CAST(0 AS bit) AND (@__ef_filter__p_0 = CAST(1 AS bit) OR @__ef_filter__IsModerated_1 = [s].[IsModerated])"",
            //
            @""@__ef_filter__p_0='False'
@__ef_filter__IsModerated_1='False' (Nullable = true)

SELECT [s].[Id], [s].[IsDeleted], [s].[IsModerated]
FROM [ShortCircuitFilter] AS [s]
WHERE [s].[IsDeleted] = CAST(0 AS bit) AND (@__ef_filter__p_0 = CAST(1 AS bit) OR @__ef_filter__IsModerated_1 = [s].[IsModerated])"",
            //
            @""@__ef_filter__p_0='True'

SELECT [s].[Id], [s].[IsDeleted], [s].[IsModerated]
FROM [ShortCircuitFilter] AS [s]
WHERE [s].[IsDeleted] = CAST(0 AS bit) AND @__ef_filter__p_0 = CAST(1 AS bit)"");
    }

    public override void EntityTypeConfiguration_DbContext_field_is_parameterized()
    {
        base.EntityTypeConfiguration_DbContext_field_is_parameterized();

        AssertSql(
            @""@__ef_filter__Field_0='False'

SELECT [e].[Id], [e].[IsEnabled]
FROM [EntityTypeConfigurationFieldFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Field_0"",
            //
            @""@__ef_filter__Field_0='True'

SELECT [e].[Id], [e].[IsEnabled]
FROM [EntityTypeConfigurationFieldFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Field_0"");
    }

    public override void EntityTypeConfiguration_DbContext_property_is_parameterized()
    {
        base.EntityTypeConfiguration_DbContext_property_is_parameterized();

        AssertSql(
            @""@__ef_filter__Property_0='False'

SELECT [e].[Id], [e].[IsEnabled]
FROM [EntityTypeConfigurationPropertyFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Property_0"",
            //
            @""@__ef_filter__Property_0='True'

SELECT [e].[Id], [e].[IsEnabled]
FROM [EntityTypeConfigurationPropertyFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Property_0"");
    }

    public override void EntityTypeConfiguration_DbContext_method_call_is_parameterized()
    {
        base.EntityTypeConfiguration_DbContext_method_call_is_parameterized();

        AssertSql(
            @""@__ef_filter__p_0='2'

SELECT [e].[Id], [e].[Tenant]
FROM [EntityTypeConfigurationMethodCallFilter] AS [e]
WHERE [e].[Tenant] = @__ef_filter__p_0"");
    }

    public override void EntityTypeConfiguration_DbContext_property_chain_is_parameterized()
    {
        base.EntityTypeConfiguration_DbContext_property_chain_is_parameterized();

        AssertSql(
            @""@__ef_filter__Enabled_0='False'

SELECT [e].[Id], [e].[IsEnabled]
FROM [EntityTypeConfigurationPropertyChainFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Enabled_0"",
            //
            @""@__ef_filter__Enabled_0='True'

SELECT [e].[Id], [e].[IsEnabled]
FROM [EntityTypeConfigurationPropertyChainFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Enabled_0"");
    }

    public override void Local_method_DbContext_field_is_parameterized()
    {
        base.Local_method_DbContext_field_is_parameterized();

        AssertSql(
            @""@__ef_filter__Field_0='False'

SELECT [l].[Id], [l].[IsEnabled]
FROM [LocalMethodFilter] AS [l]
WHERE [l].[IsEnabled] = @__ef_filter__Field_0"",
            //
            @""@__ef_filter__Field_0='True'

SELECT [l].[Id], [l].[IsEnabled]
FROM [LocalMethodFilter] AS [l]
WHERE [l].[IsEnabled] = @__ef_filter__Field_0"");
    }

    public override void Local_static_method_DbContext_property_is_parameterized()
    {
        base.Local_static_method_DbContext_property_is_parameterized();

        AssertSql(
            @""@__ef_filter__Property_0='False'

SELECT [l].[Id], [l].[IsEnabled]
FROM [LocalMethodParamsFilter] AS [l]
WHERE [l].[IsEnabled] = @__ef_filter__Property_0"",
            //
            @""@__ef_filter__Property_0='True'

SELECT [l].[Id], [l].[IsEnabled]
FROM [LocalMethodParamsFilter] AS [l]
WHERE [l].[IsEnabled] = @__ef_filter__Property_0"");
    }

    public override void Remote_method_DbContext_property_method_call_is_parameterized()
    {
        base.Remote_method_DbContext_property_method_call_is_parameterized();

        AssertSql(
            @""@__ef_filter__p_0='2'

SELECT [r].[Id], [r].[Tenant]
FROM [RemoteMethodParamsFilter] AS [r]
WHERE [r].[Tenant] = @__ef_filter__p_0"");
    }

    public override void Extension_method_DbContext_field_is_parameterized()
    {
        base.Extension_method_DbContext_field_is_parameterized();

        AssertSql(
            @""@__ef_filter__Field_0='False'

SELECT [e].[Id], [e].[IsEnabled]
FROM [ExtensionBuilderFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Field_0"",
            //
            @""@__ef_filter__Field_0='True'

SELECT [e].[Id], [e].[IsEnabled]
FROM [ExtensionBuilderFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Field_0"");
    }

    public override void Extension_method_DbContext_property_chain_is_parameterized()
    {
        base.Extension_method_DbContext_property_chain_is_parameterized();

        AssertSql(
            @""@__ef_filter__Enabled_0='False'

SELECT [e].[Id], [e].[IsEnabled]
FROM [ExtensionContextFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Enabled_0"",
            //
            @""@__ef_filter__Enabled_0='True'

SELECT [e].[Id], [e].[IsEnabled]
FROM [ExtensionContextFilter] AS [e]
WHERE [e].[IsEnabled] = @__ef_filter__Enabled_0"");
    }

    public override void Using_DbSet_in_filter_works()
    {
        base.Using_DbSet_in_filter_works();

        AssertSql(
            @""@__ef_filter__Property_0='False'

SELECT [p].[Id], [p].[Filler]
FROM [PrincipalSetFilter] AS [p]
WHERE EXISTS (
    SELECT 1
    FROM [Dependents] AS [d]
    WHERE EXISTS (
        SELECT 1
        FROM [MultiContextFilter] AS [m]
        WHERE [m].[IsEnabled] = @__ef_filter__Property_0 AND [m].[BossId] = 1 AND [m].[BossId] = [d].[PrincipalSetFilterId]) AND [d].[PrincipalSetFilterId] = [p].[Id])"");
    }

    public override void Using_Context_set_method_in_filter_works()
    {
        base.Using_Context_set_method_in_filter_works();

        AssertSql(
            @""@__ef_filter__Property_0='False'

SELECT [d].[Id], [d].[PrincipalSetFilterId]
FROM [Dependents] AS [d]
WHERE EXISTS (
    SELECT 1
    FROM [MultiContextFilter] AS [m]
    WHERE [m].[IsEnabled] = @__ef_filter__Property_0 AND [m].[BossId] = 1 AND [m].[BossId] = [d].[PrincipalSetFilterId])"");
    }

    public override void Static_member_from_dbContext_is_inlined()
    {
        base.Static_member_from_dbContext_is_inlined();

        AssertSql(
            @""SELECT [d].[Id], [d].[UserId]
FROM [DbContextStaticMemberFilter] AS [d]
WHERE [d].[UserId] <> 1"");
    }

    public override void Static_member_from_non_dbContext_is_inlined()
    {
        base.Static_member_from_non_dbContext_is_inlined();

        AssertSql(
            @""SELECT [s].[Id], [s].[IsEnabled]
FROM [StaticMemberFilter] AS [s]
WHERE [s].[IsEnabled] = CAST(1 AS bit)"");
    }

    public override void Local_variable_from_OnModelCreating_is_inlined()
    {
        base.Local_variable_from_OnModelCreating_is_inlined();

        AssertSql(
            @""SELECT [l].[Id], [l].[IsEnabled]
FROM [LocalVariableFilter] AS [l]
WHERE [l].[IsEnabled] = CAST(1 AS bit)"");
    }

    public override void Method_parameter_is_inlined()
    {
        base.Method_parameter_is_inlined();

        AssertSql(
            @""SELECT [p].[Id], [p].[Tenant]
FROM [ParameterFilter] AS [p]
WHERE [p].[Tenant] = 0"");
    }

    public override void Using_multiple_context_in_filter_parametrize_only_current_context()
    {
        base.Using_multiple_context_in_filter_parametrize_only_current_context();

        AssertSql(
            @""@__ef_filter__Property_0='False'

SELECT [m].[Id], [m].[BossId], [m].[IsEnabled]
FROM [MultiContextFilter] AS [m]
WHERE [m].[IsEnabled] = @__ef_filter__Property_0 AND [m].[BossId] = 1"",
            //
            @""@__ef_filter__Property_0='True'

SELECT [m].[Id], [m].[BossId], [m].[IsEnabled]
FROM [MultiContextFilter] AS [m]
WHERE [m].[IsEnabled] = @__ef_filter__Property_0 AND [m].[BossId] = 1"");
    }

    private void AssertSql(params string[] expected)
        => Fixture.TestSqlLoggerFactory.AssertBaseline(expected);

    public class QueryFilterFuncletizationSqlServerFixture : QueryFilterFuncletizationRelationalFixture
    {
        protected override ITestStoreFactory TestStoreFactory
            => SqlServerTestStoreFactory.Instance;
    }
}",1,"[439, 334, 2000, 58, 2001, 60, 2000, 46, 2002, 62, 123, 439, 2000, 40, 2002, 2003, 44, 2004, 2005, 41, 58, 320, 40, 2003, 41, 123, 2006, 46, 2007, 46, 2008, 40, 41, 59, 125, 439, 431, 492, 2009, 40, 41, 123, 320, 46, 2009, 40, 41, 59, 2010, 40, 64, 41, 59, 125, 439, 431, 492, 2011, 40, 41, 123, 320, 46, 2011, 40, 41, 59, 2012, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2013, 40, 41, 123, 320, 46, 2013, 40, 41, 59, 2014, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2015, 40, 41, 123, 320, 46, 2015, 40, 41, 59, 2016, 40, 64, 41, 59, 125, 439, 431, 492, 2017, 40, 41, 123, 489, 490, 2018, 61, 2019, 40, 41, 59, 2020, 46, 2021, 60, 2022, 62, 40, 40, 41, 619, 2018, 46, 2023, 60, 2024, 62, 40, 41, 46, 2025, 40, 41, 41, 59, 2018, 46, 2026, 61, 418, 2027, 60, 404, 62, 40, 41, 59, 490, 2028, 61, 2018, 46, 2023, 60, 2024, 62, 40, 41, 46, 2025, 40, 41, 59, 2020, 46, 2029, 40, 2028, 41, 59, 2018, 46, 2026, 61, 418, 2027, 60, 404, 62, 123, 1501, 125, 59, 2028, 61, 2018, 46, 2023, 60, 2024, 62, 40, 41, 46, 2025, 40, 41, 59, 2020, 46, 2030, 40, 2028, 41, 59, 2018, 46, 2026, 61, 418, 2027, 60, 404, 62, 123, 1502, 44, 1502, 125, 59, 2028, 61, 2018, 46, 2023, 60, 2024, 62, 40, 41, 46, 2025, 40, 41, 59, 2020, 46, 2031, 40, 1502, 44, 2028, 46, 2032, 41, 59, 2033, 40, 64, 44, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2034, 40, 41, 123, 320, 46, 2034, 40, 41, 59, 2035, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2036, 40, 41, 123, 320, 46, 2036, 40, 41, 59, 2037, 40, 64, 41, 59, 125, 439, 431, 492, 2038, 40, 41, 123, 320, 46, 2038, 40, 41, 59, 2039, 40, 64, 41, 59, 125, 439, 431, 492, 2040, 40, 41, 123, 320, 46, 2040, 40, 41, 59, 2041, 40, 64, 44, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2042, 40, 41, 123, 320, 46, 2042, 40, 41, 59, 2043, 40, 64, 44, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2044, 40, 41, 123, 320, 46, 2044, 40, 41, 59, 2045, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2046, 40, 41, 123, 320, 46, 2046, 40, 41, 59, 2047, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2048, 40, 41, 123, 320, 46, 2048, 40, 41, 59, 2049, 40, 64, 41, 59, 125, 439, 431, 492, 2050, 40, 41, 123, 320, 46, 2050, 40, 41, 59, 2051, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2052, 40, 41, 123, 320, 46, 2052, 40, 41, 59, 2053, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2054, 40, 41, 123, 320, 46, 2054, 40, 41, 59, 2055, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2056, 40, 41, 123, 320, 46, 2056, 40, 41, 59, 2057, 40, 64, 41, 59, 125, 439, 431, 492, 2058, 40, 41, 123, 320, 46, 2058, 40, 41, 59, 2059, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2060, 40, 41, 123, 320, 46, 2060, 40, 41, 59, 2061, 40, 64, 44, 64, 41, 59, 125, 439, 431, 492, 2062, 40, 41, 123, 320, 46, 2062, 40, 41, 59, 2063, 40, 64, 41, 59, 125, 439, 431, 492, 2064, 40, 41, 123, 320, 46, 2064, 40, 41, 59, 2065, 40, 64, 41, 59, 125, 439, 431, 492, 2066, 40, 41, 123, 320, 46, 2066, 40, 41, 59, 2067, 40, 64, 41, 59, 125, 439, 431, 492, 2068, 40, 41, 123, 320, 46, 2068, 40, 41, 59, 2069, 40, 64, 41, 59, 125, 439, 431, 492, 2070, 40, 41, 123, 320, 46, 2070, 40, 41, 59, 2071, 40, 64, 41, 59, 125, 439, 431, 492, 2072, 40, 41, 123, 320, 46, 2072, 40, 41, 59, 2073, 40, 64, 41, 59, 125, 439, 431, 492, 2074, 40, 41, 123, 320, 46, 2074, 40, 41, 59, 2075, 40, 64, 44, 64, 41, 59, 125, 437, 492, 2076, 40, 433, 461, 91, 93, 2077, 41, 619, 2078, 46, 2079, 46, 2080, 40, 2077, 41, 59, 439, 334, 2002, 58, 2081, 123, 438, 431, 2082, 2083, 619, 2084, 46, 2085, 59, 125, 125]",0.8629448,1
21,75364,C#,"    public static class TimeSpanHumanizeExtensions
    {
        private const int _daysInAWeek = 7;
        private const double _daysInAYear = 365.2425; // see https://en.wikipedia.org/wiki/Gregorian_calendar
        private const double _daysInAMonth = _daysInAYear / 12;

        /// <summary>
        /// Turns a TimeSpan into a human readable form. E.g. 1 day.
        /// </summary>
        /// <param name=""timeSpan""></param>
        /// <param name=""precision"">The maximum number of time units to return. Defaulted is 1 which means the largest unit is returned</param>
        /// <param name=""culture"">Culture to use. If null, current thread's UI culture is used.</param>
        /// <param name=""maxUnit"">The maximum unit of time to output. The default value is <see cref=""TimeUnit.Week""/>. The time units <see cref=""TimeUnit.Month""/> and <see cref=""TimeUnit.Year""/> will give approximations for time spans bigger 30 days by calculating with 365.2425 days a year and 30.4369 days a month.</param>
        /// <param name=""minUnit"">The minimum unit of time to output.</param>
        /// <param name=""collectionSeparator"">The separator to use when combining humanized time parts. If null, the default collection formatter for the current culture is used.</param>
        /// <param name=""toWords"">Uses words instead of numbers if true. E.g. one day.</param>
        /// <returns></returns>
        public static string Humanize(this TimeSpan timeSpan, int precision = 1, CultureInfo culture = null, TimeUnit maxUnit = TimeUnit.Week, TimeUnit minUnit = TimeUnit.Millisecond, string collectionSeparator = "", "", bool toWords = false)
        {
            return Humanize(timeSpan, precision, false, culture, maxUnit, minUnit, collectionSeparator, toWords);
        }

        /// <summary>
        /// Turns a TimeSpan into a human readable form. E.g. 1 day.
        /// </summary>
        /// <param name=""timeSpan""></param>
        /// <param name=""precision"">The maximum number of time units to return.</param>
        /// <param name=""countEmptyUnits"">Controls whether empty time units should be counted towards maximum number of time units. Leading empty time units never count.</param>
        /// <param name=""culture"">Culture to use. If null, current thread's UI culture is used.</param>
        /// <param name=""maxUnit"">The maximum unit of time to output. The default value is <see cref=""TimeUnit.Week""/>. The time units <see cref=""TimeUnit.Month""/> and <see cref=""TimeUnit.Year""/> will give approximations for time spans bigger than 30 days by calculating with 365.2425 days a year and 30.4369 days a month.</param>
        /// <param name=""minUnit"">The minimum unit of time to output.</param>
        /// <param name=""collectionSeparator"">The separator to use when combining humanized time parts. If null, the default collection formatter for the current culture is used.</param>
        /// <param name=""toWords"">Uses words instead of numbers if true. E.g. one day.</param>
        /// <returns></returns>
        public static string Humanize(this TimeSpan timeSpan, int precision, bool countEmptyUnits, CultureInfo culture = null, TimeUnit maxUnit = TimeUnit.Week, TimeUnit minUnit = TimeUnit.Millisecond, string collectionSeparator = "", "", bool toWords = false)
        {
            var timeParts = CreateTheTimePartsWithUpperAndLowerLimits(timeSpan, culture, maxUnit, minUnit, toWords);
            timeParts = SetPrecisionOfTimeSpan(timeParts, precision, countEmptyUnits);

            return ConcatenateTimeSpanParts(timeParts, culture, collectionSeparator);
        }

        private static IEnumerable<string> CreateTheTimePartsWithUpperAndLowerLimits(TimeSpan timespan, CultureInfo culture, TimeUnit maxUnit, TimeUnit minUnit, bool toWords = false)
        {
            var cultureFormatter = Configurator.GetFormatter(culture);
            var firstValueFound = false;
            var timeUnitsEnumTypes = GetEnumTypesForTimeUnit();
            var timeParts = new List<string>();

            foreach (var timeUnitType in timeUnitsEnumTypes)
            {
                var timepart = GetTimeUnitPart(timeUnitType,timespan, maxUnit, minUnit, cultureFormatter, toWords); 

                if (timepart != null || firstValueFound)
                {
                    firstValueFound = true;
                    timeParts.Add(timepart);
                }
            }
            if (IsContainingOnlyNullValue(timeParts))
            {
                var noTimeValueCultureFormatted = toWords ? cultureFormatter.TimeSpanHumanize_Zero()
                    : cultureFormatter.TimeSpanHumanize(minUnit, 0, toWords);
                timeParts = CreateTimePartsWithNoTimeValue(noTimeValueCultureFormatted);
            }
            return timeParts;
        }

        private static IEnumerable<TimeUnit> GetEnumTypesForTimeUnit()
        {
            var enumTypeEnumerator = (IEnumerable<TimeUnit>)Enum.GetValues(typeof(TimeUnit));
            return enumTypeEnumerator.Reverse();
        }

        private static string GetTimeUnitPart(TimeUnit timeUnitToGet, TimeSpan timespan, TimeUnit maximumTimeUnit, TimeUnit minimumTimeUnit, IFormatter cultureFormatter, bool toWords = false)
        {
            if (timeUnitToGet <= maximumTimeUnit && timeUnitToGet >= minimumTimeUnit)
            {
                var numberOfTimeUnits = GetTimeUnitNumericalValue(timeUnitToGet, timespan, maximumTimeUnit);
                return BuildFormatTimePart(cultureFormatter, timeUnitToGet, numberOfTimeUnits, toWords);
            }
            return null;
        }

        private static int GetTimeUnitNumericalValue(TimeUnit timeUnitToGet, TimeSpan timespan, TimeUnit maximumTimeUnit)
        {
            var isTimeUnitToGetTheMaximumTimeUnit = (timeUnitToGet == maximumTimeUnit);
            switch (timeUnitToGet)
            {
                case TimeUnit.Millisecond:
                    return GetNormalCaseTimeAsInteger(timespan.Milliseconds, timespan.TotalMilliseconds, isTimeUnitToGetTheMaximumTimeUnit);
                case TimeUnit.Second:
                    return GetNormalCaseTimeAsInteger(timespan.Seconds, timespan.TotalSeconds, isTimeUnitToGetTheMaximumTimeUnit);
                case TimeUnit.Minute:
                    return GetNormalCaseTimeAsInteger(timespan.Minutes, timespan.TotalMinutes, isTimeUnitToGetTheMaximumTimeUnit);
                case TimeUnit.Hour:
                    return GetNormalCaseTimeAsInteger(timespan.Hours, timespan.TotalHours, isTimeUnitToGetTheMaximumTimeUnit);
                case TimeUnit.Day:
                    return GetSpecialCaseDaysAsInteger(timespan, maximumTimeUnit);
                case TimeUnit.Week:
                    return GetSpecialCaseWeeksAsInteger(timespan, isTimeUnitToGetTheMaximumTimeUnit);
                case TimeUnit.Month:
                    return GetSpecialCaseMonthAsInteger(timespan, isTimeUnitToGetTheMaximumTimeUnit);
                case TimeUnit.Year:
                    return GetSpecialCaseYearAsInteger(timespan);
                default:
                    return 0;
            }
        }

        private static int GetSpecialCaseMonthAsInteger(TimeSpan timespan, bool isTimeUnitToGetTheMaximumTimeUnit)
        {
            if (isTimeUnitToGetTheMaximumTimeUnit)
            {
                return (int)(timespan.Days / _daysInAMonth);
            }
            else
            {
                var remainingDays = timespan.Days % _daysInAYear;
                return (int)(remainingDays / _daysInAMonth);
            }
        }

        private static int GetSpecialCaseYearAsInteger(TimeSpan timespan)
        {
            return (int)(timespan.Days / _daysInAYear);
        }

        private static int GetSpecialCaseWeeksAsInteger(TimeSpan timespan, bool isTimeUnitToGetTheMaximumTimeUnit)
        {
            if (isTimeUnitToGetTheMaximumTimeUnit || timespan.Days < _daysInAMonth)
            {
                return timespan.Days / _daysInAWeek;
            }
            return 0;
        }

        private static int GetSpecialCaseDaysAsInteger(TimeSpan timespan, TimeUnit maximumTimeUnit)
        {
            if (maximumTimeUnit == TimeUnit.Day)
            {
                return timespan.Days;
            }
            if (timespan.Days < _daysInAMonth || maximumTimeUnit == TimeUnit.Week)
            {
                var remainingDays = timespan.Days % _daysInAWeek;
                return remainingDays;
            }
            return (int)(timespan.Days % _daysInAMonth);
        }

        private static int GetNormalCaseTimeAsInteger(int timeNumberOfUnits, double totalTimeNumberOfUnits, bool isTimeUnitToGetTheMaximumTimeUnit)
        {
            if (isTimeUnitToGetTheMaximumTimeUnit)
            {
                try
                {
                    return (int)totalTimeNumberOfUnits;
                }
                catch
                {
                    //To be implemented so that TimeSpanHumanize method accepts double type as unit
                    return 0;
                }
            }
            return timeNumberOfUnits;
        }

        private static string BuildFormatTimePart(IFormatter cultureFormatter, TimeUnit timeUnitType, int amountOfTimeUnits, bool toWords = false)
        {
            // Always use positive units to account for negative timespans
            return amountOfTimeUnits != 0
                ? cultureFormatter.TimeSpanHumanize(timeUnitType, Math.Abs(amountOfTimeUnits), toWords)
                : null;
        }

        private static List<string> CreateTimePartsWithNoTimeValue(string noTimeValue)
        {
            return new List<string>() { noTimeValue };
        }

        private static bool IsContainingOnlyNullValue(IEnumerable<string> timeParts)
        {
            return (timeParts.Count(x => x != null) == 0);
        }

        private static IEnumerable<string> SetPrecisionOfTimeSpan(IEnumerable<string> timeParts, int precision, bool countEmptyUnits)
        {
            if (!countEmptyUnits)
            {
                timeParts = timeParts.Where(x => x != null);
            }

            timeParts = timeParts.Take(precision);
            if (countEmptyUnits)
            {
                timeParts = timeParts.Where(x => x != null);
            }

            return timeParts;
        }

        private static string ConcatenateTimeSpanParts(IEnumerable<string> timeSpanParts, CultureInfo culture, string collectionSeparator)
        {
            if (collectionSeparator == null)
            {
                return Configurator.CollectionFormatters.ResolveForCulture(culture).Humanize(timeSpanParts);
            }

            return string.Join(collectionSeparator, timeSpanParts);
        }
    }",1,"[439, 457, 334, 2000, 123, 437, 341, 404, 2001, 61, 1502, 59, 437, 341, 356, 2002, 61, 1504, 59, 437, 341, 356, 2003, 61, 2002, 47, 1503, 59, 439, 457, 461, 2004, 40, 467, 2005, 2006, 44, 404, 2007, 61, 1501, 44, 2008, 2009, 61, 424, 44, 2010, 2011, 61, 2010, 46, 2012, 44, 2010, 2013, 61, 2010, 46, 2014, 44, 461, 2015, 61, 44, 323, 2016, 61, 380, 41, 123, 450, 2004, 40, 2006, 44, 2007, 44, 380, 44, 2009, 44, 2011, 44, 2013, 44, 2015, 44, 2016, 41, 59, 125, 439, 457, 461, 2004, 40, 467, 2005, 2006, 44, 404, 2007, 44, 323, 2017, 44, 2008, 2009, 61, 424, 44, 2010, 2011, 61, 2010, 46, 2012, 44, 2010, 2013, 61, 2010, 46, 2014, 44, 461, 2015, 61, 44, 323, 2016, 61, 380, 41, 123, 490, 2018, 61, 2019, 40, 2006, 44, 2009, 44, 2011, 44, 2013, 44, 2016, 41, 59, 2018, 61, 2020, 40, 2018, 44, 2007, 44, 2017, 41, 59, 450, 2021, 40, 2018, 44, 2009, 44, 2015, 41, 59, 125, 437, 457, 2022, 60, 461, 62, 2023, 40, 2005, 2024, 44, 2008, 2009, 44, 2010, 2011, 44, 2010, 2013, 44, 323, 2016, 61, 380, 41, 123, 490, 2025, 61, 2026, 46, 2027, 40, 2009, 41, 59, 490, 2028, 61, 380, 59, 490, 2029, 61, 2030, 40, 41, 59, 490, 2031, 61, 418, 2032, 60, 461, 62, 40, 41, 59, 386, 40, 490, 2033, 398, 2029, 41, 123, 490, 2034, 61, 2035, 40, 2033, 44, 2024, 44, 2011, 44, 2013, 44, 2025, 44, 2016, 41, 59, 392, 40, 2034, 631, 424, 606, 2028, 41, 123, 2028, 61, 473, 59, 2031, 46, 2036, 40, 2034, 41, 59, 125, 125, 392, 40, 2037, 40, 2031, 41, 41, 123, 490, 2038, 61, 2016, 63, 2025, 46, 2039, 40, 41, 58, 2025, 46, 2040, 40, 2013, 44, 1500, 44, 2016, 41, 59, 2031, 61, 2041, 40, 2038, 41, 59, 125, 450, 2031, 59, 125, 437, 457, 2022, 60, 2010, 62, 2042, 40, 41, 123, 490, 2043, 61, 40, 2022, 60, 2010, 62, 41, 2044, 46, 2045, 40, 478, 40, 2010, 41, 41, 59, 450, 2043, 46, 2046, 40, 41, 59, 125, 437, 457, 461, 2047, 40, 2010, 2048, 44, 2005, 2024, 44, 2010, 2049, 44, 2010, 2050, 44, 2051, 2052, 44, 323, 2016, 61, 380, 41, 123, 392, 40, 2048, 620, 2049, 605, 2048, 615, 2050, 41, 123, 490, 2053, 61, 2054, 40, 2048, 44, 2024, 44, 2049, 41, 59, 450, 2055, 40, 2052, 44, 2048, 44, 2053, 44, 2016, 41, 59, 125, 450, 424, 59, 125, 437, 457, 404, 2056, 40, 2010, 2048, 44, 2005, 2024, 44, 2010, 2049, 41, 123, 490, 2057, 61, 40, 2048, 614, 2049, 41, 59, 464, 40, 2048, 41, 123, 328, 2010, 46, 2014, 58, 450, 2058, 40, 2024, 46, 2059, 44, 2024, 46, 2060, 44, 2057, 41, 59, 328, 2010, 46, 2061, 58, 450, 2058, 40, 2024, 46, 2062, 44, 2024, 46, 2063, 44, 2057, 41, 59, 328, 2010, 46, 2064, 58, 450, 2058, 40, 2024, 46, 2065, 44, 2024, 46, 2066, 44, 2057, 41, 59, 328, 2010, 46, 2067, 58, 450, 2058, 40, 2024, 46, 2068, 44, 2024, 46, 2069, 44, 2057, 41, 59, 328, 2010, 46, 2070, 58, 450, 2071, 40, 2024, 44, 2049, 41, 59, 328, 2010, 46, 2012, 58, 450, 2072, 40, 2024, 44, 2057, 41, 59, 328, 2010, 46, 2073, 58, 450, 2074, 40, 2024, 44, 2057, 41, 59, 328, 2010, 46, 2075, 58, 450, 2076, 40, 2024, 41, 59, 349, 58, 450, 1500, 59, 125, 125, 437, 457, 404, 2077, 40, 2005, 2024, 44, 323, 2078, 41, 123, 392, 40, 2078, 41, 123, 450, 40, 404, 41, 40, 2024, 46, 2079, 47, 2003, 41, 59, 125, 360, 123, 490, 2080, 61, 2024, 46, 2081, 37, 2002, 59, 450, 40, 404, 41, 40, 2080, 47, 2003, 41, 59, 125, 125, 437, 457, 404, 2082, 40, 2005, 2024, 41, 123, 450, 40, 404, 41, 40, 2024, 46, 2083, 47, 2002, 41, 59, 125, 437, 457, 404, 2084, 40, 2005, 2024, 44, 323, 2078, 41, 123, 392, 40, 2078, 606, 2024, 46, 2085, 60, 2003, 41, 123, 450, 2024, 46, 2085, 47, 2001, 59, 125, 450, 1500, 59, 125, 437, 457, 404, 2086, 40, 2005, 2024, 44, 2010, 2049, 41, 123, 392, 40, 2049, 614, 2010, 46, 2087, 41, 123, 450, 2024, 46, 2088, 59, 125, 392, 40, 2024, 46, 2089, 60, 2003, 606, 2049, 614, 2010, 46, 2012, 41, 123, 490, 2090, 61, 2024, 46, 2089, 37, 2001, 59, 450, 2090, 59, 125, 450, 40, 404, 41, 40, 2024, 46, 2089, 37, 2003, 41, 59, 125, 437, 457, 404, 2091, 40, 404, 2092, 44, 356, 2093, 44, 323, 2078, 41, 123, 392, 40, 2078, 41, 123, 474, 123, 450, 40, 404, 41, 2093, 59, 125, 329, 123, 450, 1500, 59, 125, 125, 450, 2092, 59, 125, 437, 457, 461, 2094, 40, 2051, 2052, 44, 2010, 2095, 44, 404, 2096, 44, 323, 2016, 61, 380, 41, 123, 450, 2096, 631, 1500, 63, 2052, 46, 2097, 40, 2095, 44, 2098, 46, 2099, 40, 2096, 41, 44, 2016, 41, 58, 424, 59, 125, 437, 457, 2100, 60, 461, 62, 2101, 40, 461, 2102, 41, 123, 450, 418, 2100, 60, 461, 62, 40, 41, 123, 2102, 125, 59, 125, 437, 457, 323, 2103, 40, 2022, 60, 461, 62, 2104, 41, 123, 450, 40, 2104, 46, 2105, 40, 2106, 619, 2106, 631, 424, 41, 614, 1500, 41, 59, 125, 437, 457, 2022, 60, 461, 62, 2107, 40, 2022, 60, 461, 62, 2104, 44, 404, 2007, 44, 323, 2017, 41, 123, 392, 40, 33, 2017, 41, 123, 2104, 61, 2104, 46, 2108, 40, 2109, 619, 2109, 631, 424, 41, 59, 125, 2104, 61, 2104, 46, 2110, 40, 2007, 41, 59, 392, 40, 2017, 41, 123, 2104, 61, 2104, 46, 2111, 40, 2112, 619, 2112, 631, 424, 41, 59, 125, 450, 2104, 59, 125, 437, 457, 461, 2113, 40, 2022, 60, 461, 62, 2114, 44, 2008, 2009, 44, 461, 2015, 41, 123, 392, 40, 2015, 614, 424, 41, 123, 450, 2115, 46, 2116, 46, 2117, 40, 2009, 41, 46, 2004, 40, 2114, 41, 59, 125, 450, 461, 46, 2118, 40, 2015, 44, 2114, 41, 59, 125, 125]",0.9679207,1
22,68047,C#,"public class Model : ConventionAnnotatable, IMutableModel, IConventionModel, IRuntimeModel
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static readonly Type DefaultPropertyBagType = typeof(Dictionary<string, object>);

    private readonly SortedDictionary<string, EntityType> _entityTypes = new(StringComparer.Ordinal);
    private readonly ConcurrentDictionary<Type, PropertyInfo?> _indexerPropertyInfoMap = new();
    private readonly ConcurrentDictionary<Type, string> _clrTypeNameMap = new();
    private readonly Dictionary<string, ConfigurationSource> _ignoredTypeNames = new(StringComparer.Ordinal);
    private Dictionary<string, ConfigurationSource>? _ownedTypes;

    private readonly Dictionary<Type, (ConfigurationSource ConfigurationSource, SortedSet<EntityType> Types)> _sharedTypes =
        new()
        {
            { DefaultPropertyBagType, (ConfigurationSource.Explicit, new SortedSet<EntityType>(EntityTypeFullNameComparer.Instance)) }
        };

    private ConventionDispatcher? _conventionDispatcher;
    private IList<IModelFinalizedConvention>? _modelFinalizedConventions;
    private ModelDependencies? _scopedModelDependencies;
    private bool? _skipDetectChanges;
    private ChangeTrackingStrategy? _changeTrackingStrategy;

    private ConfigurationSource? _changeTrackingStrategyConfigurationSource;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public Model()
        : this(new ConventionSet())
    {
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public Model(ConventionSet conventions, ModelDependencies? modelDependencies = null, ModelConfiguration? modelConfiguration = null)
    {
        if (modelDependencies != null)
        {
            ScopedModelDependencies = modelDependencies;
        }

        var dispatcher = new ConventionDispatcher(conventions);
        var builder = new InternalModelBuilder(this);
        _conventionDispatcher = dispatcher;
        _modelFinalizedConventions = conventions.ModelFinalizedConventions;
        Builder = builder;
        Configuration = modelConfiguration;
        dispatcher.OnModelInitialized(builder);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConventionDispatcher ConventionDispatcher
    {
        [DebuggerStepThrough]
        get => _conventionDispatcher ?? throw new InvalidOperationException(CoreStrings.ModelReadOnly);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DisallowNull]
    public virtual ModelDependencies? ScopedModelDependencies
    {
        get => _scopedModelDependencies;
        set => _scopedModelDependencies = value;
    }

    /// <summary>
    ///     Indicates whether the model is read-only.
    /// </summary>
    public override bool IsReadOnly
        => _conventionDispatcher == null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalModelBuilder Builder { [DebuggerStepThrough] get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ModelConfiguration? Configuration { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<EntityType> GetEntityTypes()
        => _entityTypes.Values;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? AddEntityType(
        string name,
        bool owned,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(name, nameof(name));

        var entityType = new EntityType(name, this, owned, configurationSource);

        return AddEntityType(entityType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? AddEntityType(
        Type type,
        bool owned,
        ConfigurationSource configurationSource)
    {
        Check.NotNull(type, nameof(type));

        var entityType = new EntityType(type, this, owned, configurationSource);

        return AddEntityType(entityType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? AddEntityType(
        string name,
        Type type,
        bool owned,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(name, nameof(name));
        Check.NotNull(type, nameof(type));

        if (GetDisplayName(type) == name)
        {
            throw new InvalidOperationException(CoreStrings.AmbiguousSharedTypeEntityTypeName(name));
        }

        var entityType = new EntityType(name, type, this, owned, configurationSource);

        return AddEntityType(entityType);
    }

    private EntityType? AddEntityType(EntityType entityType)
    {
        EnsureMutable();

        var entityTypeName = entityType.Name;
        if (_entityTypes.ContainsKey(entityTypeName))
        {
            throw new InvalidOperationException(CoreStrings.DuplicateEntityType(entityType.DisplayName()));
        }

        if (entityType.HasSharedClrType)
        {
            if (_entityTypes.Any(et => !et.Value.HasSharedClrType && et.Value.ClrType == entityType.ClrType))
            {
                throw new InvalidOperationException(
                    CoreStrings.ClashingNonSharedType(entityType.Name, entityType.ClrType.DisplayName()));
            }

            if (_sharedTypes.TryGetValue(entityType.ClrType, out var existingTypes))
            {
                var newConfigurationSource = entityType.GetConfigurationSource().Max(existingTypes.ConfigurationSource);
                existingTypes.Types.Add(entityType);
                _sharedTypes[entityType.ClrType] = (newConfigurationSource, existingTypes.Types);
            }
            else
            {
                var types = new SortedSet<EntityType>(EntityTypeFullNameComparer.Instance) { entityType };
                _sharedTypes.Add(entityType.ClrType, (entityType.GetConfigurationSource(), types));
            }
        }
        else if (_sharedTypes.ContainsKey(entityType.ClrType))
        {
            throw new InvalidOperationException(CoreStrings.ClashingSharedType(entityType.DisplayName()));
        }

        _entityTypes.Add(entityTypeName, entityType);

        return (EntityType?)ConventionDispatcher.OnEntityTypeAdded(entityType.Builder)?.Metadata;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? FindEntityType(Type type)
        => FindEntityType(GetDisplayName(type));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? FindEntityType(string name)
        => !string.IsNullOrEmpty(name) && _entityTypes.TryGetValue(name, out var entityType)
            ? entityType
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? RemoveEntityType(Type type)
        => RemoveEntityType(FindEntityType(type));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? RemoveEntityType(string name)
        => RemoveEntityType(FindEntityType(name));

    private static void AssertCanRemove(EntityType entityType)
    {
        var referencingForeignKey = entityType.GetDeclaredReferencingForeignKeys().FirstOrDefault();
        if (referencingForeignKey != null)
        {
            throw new InvalidOperationException(
                CoreStrings.EntityTypeInUseByReferencingForeignKey(
                    entityType.DisplayName(),
                    referencingForeignKey.Properties.Format(),
                    referencingForeignKey.DeclaringEntityType.DisplayName()));
        }

        var referencingSkipNavigation = entityType.GetDeclaredReferencingSkipNavigations().FirstOrDefault();
        if (referencingSkipNavigation != null)
        {
            throw new InvalidOperationException(
                CoreStrings.EntityTypeInUseByReferencingSkipNavigation(
                    entityType.DisplayName(),
                    referencingSkipNavigation.Name,
                    referencingSkipNavigation.DeclaringEntityType.DisplayName()));
        }

        var derivedEntityType = entityType.GetDirectlyDerivedTypes().FirstOrDefault();
        if (derivedEntityType != null)
        {
            throw new InvalidOperationException(
                CoreStrings.EntityTypeInUseByDerived(
                    entityType.DisplayName(),
                    derivedEntityType.DisplayName()));
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? RemoveEntityType(EntityType? entityType)
    {
        if (entityType is null || !entityType.IsInModel)
        {
            return null;
        }

        EnsureMutable();
        AssertCanRemove(entityType);

        if (_sharedTypes.TryGetValue(entityType.ClrType, out var existingTypes))
        {
            existingTypes.Types.Remove(entityType);
        }

        var removed = _entityTypes.Remove(entityType.Name);
        Check.DebugAssert(removed, ""removed is false"");

        entityType.OnTypeRemoved();

        return entityType;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? AddEntityType(
        string name,
        string definingNavigationName,
        EntityType definingEntityType,
        ConfigurationSource configurationSource)
    {
        Check.NotEmpty(name, nameof(name));

        name = definingEntityType.GetOwnedName(name, definingNavigationName);
        var entityType = new EntityType(name, DefaultPropertyBagType, this, owned: true, configurationSource);

        return AddEntityType(entityType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? AddEntityType(
        Type type,
        string definingNavigationName,
        EntityType definingEntityType,
        ConfigurationSource configurationSource)
    {
        Check.NotNull(type, nameof(type));

        var name = definingEntityType.GetOwnedName(type.ShortDisplayName(), definingNavigationName);
        var entityType = new EntityType(name, type, this, owned: true, configurationSource);

        return AddEntityType(entityType);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual string GetDisplayName(Type type)
        => _clrTypeNameMap.GetOrAdd(type, t => t.DisplayName());

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? FindEntityType(
        Type type,
        string definingNavigationName,
        EntityType definingEntityType)
        => FindEntityType(type.ShortDisplayName(), definingNavigationName, definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? FindEntityType(
        string name,
        string definingNavigationName,
        EntityType definingEntityType)
        => FindEntityType(definingEntityType.GetOwnedName(name, definingNavigationName));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    // TODO: Use layering to get the updated type #15898
    public virtual EntityType? FindActualEntityType(EntityType entityType)
        => entityType.IsInModel
            ? entityType
            : FindEntityType(entityType.Name)
            ?? (entityType.HasSharedClrType
                ? entityType.FindOwnership() is ForeignKey ownership
                    ? FindActualEntityType(ownership.PrincipalEntityType)
                        ?.FindNavigation(ownership.PrincipalToDependent!.Name)?.TargetEntityType
                    : null
                : null);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? FindClrType(string name)
        => _entityTypes.TryGetValue(name, out var entityType)
            ? entityType.HasSharedClrType
                ? null
                : entityType.ClrType
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<EntityType> FindEntityTypes(Type type)
    {
        var result = GetEntityTypes(GetDisplayName(type));
        return _sharedTypes.TryGetValue(type, out var existingTypes)
            ? result.Concat(existingTypes.Types)
            : result;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IReadOnlyCollection<EntityType> GetEntityTypes(string name)
    {
        var entityType = FindEntityType(name);
        return entityType == null
            ? Array.Empty<EntityType>()
            : new[] { entityType };
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? RemoveEntityType(
        Type type,
        string definingNavigationName,
        EntityType definingEntityType)
        => RemoveEntityType(FindEntityType(type, definingNavigationName, definingEntityType));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual EntityType? RemoveEntityType(
        string name,
        string definingNavigationName,
        EntityType definingEntityType)
        => RemoveEntityType(FindEntityType(name, definingNavigationName, definingEntityType));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsShared(Type type)
        => FindIsSharedConfigurationSource(type) != null
            || Configuration?.GetConfigurationType(type) == TypeConfigurationType.SharedTypeEntityType;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? AddIgnored(
        Type type,
        ConfigurationSource configurationSource)
        => AddIgnored(GetDisplayName(Check.NotNull(type, nameof(type))), type, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? AddIgnored(
        string name,
        ConfigurationSource configurationSource)
        => AddIgnored(Check.NotNull(name, nameof(name)), null, configurationSource);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? AddIgnored(
        string name,
        Type? type,
        ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (_ignoredTypeNames.TryGetValue(name, out var existingIgnoredConfigurationSource))
        {
            configurationSource = configurationSource.Max(existingIgnoredConfigurationSource);
            _ignoredTypeNames[name] = configurationSource;
            return name;
        }

        _ignoredTypeNames[name] = configurationSource;

        // This is to populate Type for convention when removing shared type entity type
        type ??= _entityTypes.TryGetValue(name, out var existingEntityType)
            && existingEntityType.HasSharedClrType
                ? existingEntityType.ClrType
                : null;

        return ConventionDispatcher.OnEntityTypeIgnored(Builder, name, type);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? FindIgnoredConfigurationSource(Type type)
    {
        Check.NotNull(type, nameof(type));

        return FindIgnoredConfigurationSource(GetDisplayName(type));
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? FindIgnoredConfigurationSource(string name)
        => _ignoredTypeNames.TryGetValue(Check.NotEmpty(name, nameof(name)), out var ignoredConfigurationSource)
            ? ignoredConfigurationSource
            : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsIgnored(string name)
        => FindIgnoredConfigurationSource(name) != null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsIgnored(Type type)
        => FindIgnoredConfigurationSource(GetDisplayName(type)) != null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsIgnoredType(Type type)
        => Configuration?.GetConfigurationType(type) == TypeConfigurationType.Ignored;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? RemoveIgnored(Type type)
    {
        Check.NotNull(type, nameof(type));
        return RemoveIgnored(GetDisplayName(type));
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? RemoveIgnored(string name)
    {
        Check.NotNull(name, nameof(name));
        EnsureMutable();

        return _ignoredTypeNames.Remove(name) ? name : null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IEnumerable<ITypeMappingConfiguration> GetTypeMappingConfigurations()
        => Configuration?.GetTypeMappingConfigurations() ?? Enumerable.Empty<ITypeMappingConfiguration>();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ITypeMappingConfiguration? FindTypeMappingConfiguration(Type propertyType)
        => Configuration?.FindTypeMappingConfiguration(propertyType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool IsOwned(Type type)
        => FindIsOwnedConfigurationSource(type) != null
            || Configuration?.GetConfigurationType(type) == TypeConfigurationType.OwnedEntityType;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? FindIsOwnedConfigurationSource(Type type)
    {
        if (_ownedTypes == null)
        {
            return null;
        }

        var currentType = type;

        while (currentType != null)
        {
            if (_ownedTypes.TryGetValue(GetDisplayName(currentType), out var configurationSource))
            {
                return configurationSource;
            }

            currentType = currentType.BaseType;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void AddOwned(Type type, ConfigurationSource configurationSource)
    {
        EnsureMutable();
        var name = GetDisplayName(type);
        _ownedTypes ??= new Dictionary<string, ConfigurationSource>(StringComparer.Ordinal);

        if (_ownedTypes.TryGetValue(name, out var oldConfigurationSource))
        {
            _ownedTypes[name] = configurationSource.Max(oldConfigurationSource);
            return;
        }

        _ownedTypes.Add(name, configurationSource);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual string? RemoveOwned(Type type)
    {
        EnsureMutable();

        if (_ownedTypes == null)
        {
            return null;
        }

        var currentType = type;
        while (currentType != null)
        {
            var name = GetDisplayName(type);
            if (_ownedTypes.Remove(name))
            {
                return name;
            }

            currentType = currentType.BaseType;
        }

        return null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? FindIsSharedConfigurationSource(Type type)
        => _sharedTypes.TryGetValue(type, out var existingTypes) ? existingTypes.ConfigurationSource : null;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual void AddShared(Type type, ConfigurationSource configurationSource)
    {
        EnsureMutable();

        if (FindEntityType(type) != null)
        {
            throw new InvalidOperationException(CoreStrings.CannotMarkShared(type.ShortDisplayName()));
        }

        if (_sharedTypes.TryGetValue(type, out var existingTypes))
        {
            _sharedTypes[type] = (configurationSource.Max(existingTypes.ConfigurationSource), existingTypes.Types);
        }
        else
        {
            _sharedTypes.Add(type, (configurationSource, new SortedSet<EntityType>(EntityTypeFullNameComparer.Instance)));
        }
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual Type? RemoveShared(Type type)
    {
        EnsureMutable();

        if (_sharedTypes.TryGetValue(type, out var existingTypes)
            && existingTypes.Types.Count != 0)
        {
            throw new InvalidOperationException(CoreStrings.CannotMarkNonShared(type.ShortDisplayName()));
        }

        return _sharedTypes.Remove(type) ? type : null;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertyAccessMode GetPropertyAccessMode()
        => (PropertyAccessMode?)this[CoreAnnotationNames.PropertyAccessMode]
            ?? DefaultPropertyAccessMode;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public const PropertyAccessMode DefaultPropertyAccessMode = PropertyAccessMode.PreferField;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertyAccessMode? SetPropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        ConfigurationSource configurationSource)
        => (PropertyAccessMode?)SetOrRemoveAnnotation(
            CoreAnnotationNames.PropertyAccessMode, propertyAccessMode, configurationSource)?.Value;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetPropertyAccessModeConfigurationSource()
        => FindAnnotation(CoreAnnotationNames.PropertyAccessMode)?.GetConfigurationSource();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    public virtual ChangeTrackingStrategy GetChangeTrackingStrategy()
        => _changeTrackingStrategy ?? ChangeTrackingStrategy.Snapshot;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ChangeTrackingStrategy? SetChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        ConfigurationSource configurationSource)
    {
        EnsureMutable();

        _changeTrackingStrategy = changeTrackingStrategy;

        _changeTrackingStrategyConfigurationSource = _changeTrackingStrategy == null
            ? null
            : configurationSource.Max(_changeTrackingStrategyConfigurationSource);

        return changeTrackingStrategy;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual ConfigurationSource? GetChangeTrackingStrategyConfigurationSource()
        => _changeTrackingStrategyConfigurationSource;

    /// <summary>
    ///     Runs the conventions when an annotation was set or removed.
    /// </summary>
    /// <param name=""name"">The key of the set annotation.</param>
    /// <param name=""annotation"">The annotation set.</param>
    /// <param name=""oldAnnotation"">The old annotation.</param>
    /// <returns>The annotation that was set.</returns>
    protected override IConventionAnnotation? OnAnnotationSet(
        string name,
        IConventionAnnotation? annotation,
        IConventionAnnotation? oldAnnotation)
        => ConventionDispatcher.OnModelAnnotationChanged(Builder, name, annotation, oldAnnotation);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IConventionBatch DelayConventions()
    {
        EnsureMutable();
        return ConventionDispatcher.DelayConventions();
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual T Track<T>(Func<T> func, [DisallowNull] ref IConventionForeignKey? foreignKey)
    {
        EnsureMutable();
        return ConventionDispatcher.Track(func, ref foreignKey);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IModel FinalizeModel()
    {
        EnsureMutable();
        ConventionDispatcher.AssertNoScope();

        var finalizedModel = (IModel)ConventionDispatcher.OnModelFinalizing(Builder).Metadata;

        if (finalizedModel is Model model)
        {
            finalizedModel = model.MakeReadonly();
        }

        return finalizedModel;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual IModel OnModelFinalized()
    {
        IModel model = this;
        foreach (var modelConvention in _modelFinalizedConventions!)
        {
            model = modelConvention.ProcessModelFinalized(model);
        }

        _modelFinalizedConventions = null;

        return model;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    private Model MakeReadonly()
    {
        // ConventionDispatcher should never be accessed once the model is made read-only.
        _conventionDispatcher = null;
        _scopedModelDependencies = null;
        return this;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual PropertyInfo? FindIndexerPropertyInfo(Type type)
        => _indexerPropertyInfoMap.GetOrAdd(type, type.FindIndexerProperty());

    /// <summary>
    ///     Gets a value indicating whether the given MethodInfo represents an indexer access.
    /// </summary>
    /// <param name=""methodInfo"">The MethodInfo to check for.</param>
    public virtual bool IsIndexerMethod(MethodInfo methodInfo)
        => !methodInfo.IsStatic
            && methodInfo.IsSpecialName
            && methodInfo.DeclaringType != null
            && FindIndexerPropertyInfo(methodInfo.DeclaringType) is PropertyInfo indexerProperty
            && (methodInfo == indexerProperty.GetMethod || methodInfo == indexerProperty.SetMethod);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool SkipDetectChanges
    {
        get => _skipDetectChanges ?? false;
        set => SetSkipDetectChanges(value);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual bool? SetSkipDetectChanges(bool? skipDetectChanges)
    {
        EnsureMutable();

        _skipDetectChanges = skipDetectChanges;

        return skipDetectChanges;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual object? RelationalModel
        => ((IAnnotatable)this).FindRuntimeAnnotationValue(""Relational:RelationalModel"");

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual DebugView DebugView
        => new(
            () => ((IReadOnlyModel)this).ToDebugString(),
            () => ((IReadOnlyModel)this).ToDebugString(MetadataDebugStringOptions.LongDefault));

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionModelBuilder IConventionModel.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    IConventionAnnotatableBuilder IConventionAnnotatable.Builder
    {
        [DebuggerStepThrough]
        get => Builder;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableModel.SetPropertyAccessMode(PropertyAccessMode? propertyAccessMode)
        => SetPropertyAccessMode(propertyAccessMode, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    PropertyAccessMode? IConventionModel.SetPropertyAccessMode(
        PropertyAccessMode? propertyAccessMode,
        bool fromDataAnnotation)
        => SetPropertyAccessMode(
            propertyAccessMode,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableModel.SetChangeTrackingStrategy(ChangeTrackingStrategy? changeTrackingStrategy)
        => SetChangeTrackingStrategy(changeTrackingStrategy, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    ChangeTrackingStrategy? IConventionModel.SetChangeTrackingStrategy(
        ChangeTrackingStrategy? changeTrackingStrategy,
        bool fromDataAnnotation)
        => SetChangeTrackingStrategy(
            changeTrackingStrategy,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyEntityType? IReadOnlyModel.FindEntityType(string name)
        => FindEntityType(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.FindEntityType(string name)
        => FindEntityType(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.FindEntityType(string name)
        => FindEntityType(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEntityType? IModel.FindEntityType(string name)
        => FindEntityType(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyEntityType? IReadOnlyModel.FindEntityType(Type type)
        => FindEntityType(type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEntityType? IModel.FindEntityType(Type type)
        => FindEntityType(type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyEntityType? IReadOnlyModel.FindEntityType(
        string name,
        string definingNavigationName,
        IReadOnlyEntityType definingEntityType)
        => FindEntityType(name, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.FindEntityType(
        string name,
        string definingNavigationName,
        IMutableEntityType definingEntityType)
        => FindEntityType(name, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.FindEntityType(
        string name,
        string definingNavigationName,
        IConventionEntityType definingEntityType)
        => FindEntityType(name, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEntityType? IModel.FindEntityType(
        string name,
        string definingNavigationName,
        IEntityType definingEntityType)
        => FindEntityType(name, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IReadOnlyEntityType? IReadOnlyModel.FindEntityType(
        Type type,
        string definingNavigationName,
        IReadOnlyEntityType definingEntityType)
        => FindEntityType(type, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyEntityType> IReadOnlyModel.GetEntityTypes()
        => GetEntityTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IMutableEntityType> IMutableModel.GetEntityTypes()
        => GetEntityTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IConventionEntityType> IConventionModel.GetEntityTypes()
        => GetEntityTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IEntityType> IModel.GetEntityTypes()
        => GetEntityTypes();

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IReadOnlyEntityType> IReadOnlyModel.FindEntityTypes(Type type)
        => FindEntityTypes(type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IEnumerable<IEntityType> IModel.FindEntityTypes(Type type)
        => FindEntityTypes(type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddEntityType(string name)
        => AddEntityType(name, owned: false, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddEntityType(string name, bool fromDataAnnotation)
        => AddEntityType(name, owned: false, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddEntityType(Type type)
        => AddEntityType(type, owned: false, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddEntityType(Type type, bool fromDataAnnotation)
        => AddEntityType(type, owned: false, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddEntityType(string name, Type type)
        => AddEntityType(name, type, owned: false, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddEntityType(string name, Type type, bool fromDataAnnotation)
        => AddEntityType(
            name, type, owned: false, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddEntityType(
        string name,
        string definingNavigationName,
        IMutableEntityType definingEntityType)
        => AddEntityType(name, definingNavigationName, (EntityType)definingEntityType, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [Obsolete] // The interface didn't mark method obsolete
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddEntityType(
        string name,
        string definingNavigationName,
        IConventionEntityType definingEntityType,
        bool fromDataAnnotation)
        => AddEntityType(
            name, definingNavigationName, (EntityType)definingEntityType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddEntityType(
        Type type,
        string definingNavigationName,
        IMutableEntityType definingEntityType)
        => AddEntityType(type, definingNavigationName, (EntityType)definingEntityType, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [Obsolete] // The interface didn't mark method obsolete
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddEntityType(
        Type type,
        string definingNavigationName,
        IConventionEntityType definingEntityType,
        bool fromDataAnnotation)
        => AddEntityType(
            type, definingNavigationName, (EntityType)definingEntityType,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddOwnedEntityType(string name)
        => AddEntityType(name, owned: true, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddOwnedEntityType(string name, bool fromDataAnnotation)
        => AddEntityType(name, owned: true, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddOwnedEntityType(Type type)
        => AddEntityType(type, owned: true, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddOwnedEntityType(Type type, bool fromDataAnnotation)
        => AddEntityType(type, owned: true, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType IMutableModel.AddOwnedEntityType(string name, Type type)
        => AddEntityType(name, type, owned: true, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.AddOwnedEntityType(string name, Type type, bool fromDataAnnotation)
        => AddEntityType(
            name, type, owned: true,
            fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.RemoveEntityType(IMutableEntityType entityType)
        => RemoveEntityType((EntityType)entityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.RemoveEntityType(IConventionEntityType entityType)
        => RemoveEntityType((EntityType)entityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.RemoveEntityType(Type type)
        => RemoveEntityType(type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.RemoveEntityType(Type type)
        => RemoveEntityType(type);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.RemoveEntityType(
        Type type,
        string definingNavigationName,
        IMutableEntityType definingEntityType)
        => RemoveEntityType(type, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.RemoveEntityType(
        Type type,
        string definingNavigationName,
        IConventionEntityType definingEntityType)
        => RemoveEntityType(type, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.RemoveEntityType(string name)
        => RemoveEntityType(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.RemoveEntityType(string name)
        => RemoveEntityType(name);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IMutableEntityType? IMutableModel.RemoveEntityType(
        string name,
        string definingNavigationName,
        IMutableEntityType definingEntityType)
        => RemoveEntityType(name, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    IConventionEntityType? IConventionModel.RemoveEntityType(
        string name,
        string definingNavigationName,
        IConventionEntityType definingEntityType)
        => RemoveEntityType(name, definingNavigationName, (EntityType)definingEntityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableModel.AddShared(Type type)
        => AddShared(type, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IConventionModel.AddShared(Type type, bool fromDataAnnotation)
        => AddShared(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IMutableModel.AddOwned(Type type)
        => AddOwned(type, ConfigurationSource.Explicit);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    void IConventionModel.AddOwned(Type type, bool fromDataAnnotation)
        => AddOwned(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    string IMutableModel.AddIgnored(string name)
        => AddIgnored(name, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    string? IConventionModel.AddIgnored(string name, bool fromDataAnnotation)
        => AddIgnored(name, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    string IMutableModel.AddIgnored(Type type)
        => AddIgnored(type, ConfigurationSource.Explicit)!;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    [DebuggerStepThrough]
    string? IConventionModel.AddIgnored(Type type, bool fromDataAnnotation)
        => AddIgnored(type, fromDataAnnotation ? ConfigurationSource.DataAnnotation : ConfigurationSource.Convention);
}",1,"[439, 334, 2000, 58, 2001, 44, 2002, 44, 2003, 44, 2004, 123, 439, 457, 441, 2005, 2006, 61, 478, 40, 2007, 60, 461, 44, 426, 62, 41, 59, 437, 441, 2008, 60, 461, 44, 2009, 62, 2010, 61, 418, 40, 2011, 46, 2012, 41, 59, 437, 441, 2013, 60, 2005, 44, 2014, 63, 62, 2015, 61, 418, 40, 41, 59, 437, 441, 2013, 60, 2005, 44, 461, 62, 2016, 61, 418, 40, 41, 59, 437, 441, 2007, 60, 461, 44, 2017, 62, 2018, 61, 418, 40, 2011, 46, 2012, 41, 59, 437, 2007, 60, 461, 44, 2017, 62, 63, 2019, 59, 437, 441, 2007, 60, 2005, 44, 40, 2017, 2017, 44, 2020, 60, 2009, 62, 2021, 41, 62, 2022, 61, 418, 40, 41, 123, 123, 2006, 44, 40, 2017, 46, 2023, 44, 418, 2020, 60, 2009, 62, 40, 2024, 46, 2025, 41, 41, 125, 125, 59, 437, 2026, 63, 2027, 59, 437, 2028, 60, 2029, 62, 63, 2030, 59, 437, 2031, 63, 2032, 59, 437, 323, 63, 2033, 59, 437, 2034, 63, 2035, 59, 437, 2017, 63, 2036, 59, 439, 2000, 40, 41, 58, 467, 40, 418, 2037, 40, 41, 41, 123, 125, 439, 2000, 40, 2037, 2038, 44, 2031, 63, 2039, 61, 424, 44, 2040, 63, 2041, 61, 424, 41, 123, 392, 40, 2039, 631, 424, 41, 123, 2042, 61, 2039, 59, 125, 490, 2043, 61, 418, 2026, 40, 2038, 41, 59, 490, 2044, 61, 418, 2045, 40, 467, 41, 59, 2027, 61, 2043, 59, 2030, 61, 2038, 46, 2046, 59, 2047, 61, 2044, 59, 2048, 61, 2041, 59, 2043, 46, 2049, 40, 2044, 41, 59, 125, 439, 491, 2026, 2026, 123, 91, 2050, 93, 2051, 619, 2027, 633, 469, 418, 2052, 40, 2053, 46, 2054, 41, 59, 125, 91, 2055, 93, 439, 491, 2031, 63, 2056, 123, 2057, 619, 2032, 59, 2058, 619, 2032, 61, 2059, 59, 125, 439, 431, 323, 2060, 619, 2027, 614, 424, 59, 439, 491, 2061, 2062, 123, 91, 2063, 93, 2064, 59, 125, 439, 491, 2040, 63, 2065, 123, 2066, 59, 125, 439, 491, 2067, 60, 2009, 62, 2068, 40, 41, 619, 2010, 46, 2069, 59, 439, 491, 2009, 63, 2070, 40, 461, 2071, 44, 323, 2072, 44, 2017, 2073, 41, 123, 2074, 46, 2075, 40, 2071, 44, 2076, 40, 2071, 41, 41, 59, 490, 2077, 61, 418, 2009, 40, 2071, 44, 467, 44, 2072, 44, 2073, 41, 59, 450, 2070, 40, 2077, 41, 59, 125, 439, 491, 2009, 63, 2070, 40, 2005, 2078, 44, 323, 2072, 44, 2017, 2073, 41, 123, 2079, 46, 2080, 40, 2078, 44, 2081, 40, 2078, 41, 41, 59, 490, 2082, 61, 418, 2009, 40, 2078, 44, 467, 44, 2072, 44, 2073, 41, 59, 450, 2070, 40, 2082, 41, 59, 125, 439, 491, 2009, 63, 2070, 40, 461, 2071, 44, 2005, 2078, 44, 323, 2072, 44, 2017, 2073, 41, 123, 2083, 46, 2084, 40, 2071, 44, 2085, 40, 2071, 41, 41, 59, 2083, 46, 2086, 40, 2078, 44, 2085, 40, 2078, 41, 41, 59, 392, 40, 2087, 40, 2078, 41, 614, 2071, 41, 123, 469, 418, 2088, 40, 2089, 46, 2090, 40, 2071, 41, 41, 59, 125, 490, 2091, 61, 418, 2009, 40, 2071, 44, 2078, 44, 467, 44, 2072, 44, 2073, 41, 59, 450, 2070, 40, 2091, 41, 59, 125, 437, 2009, 63, 2070, 40, 2009, 2092, 41, 123, 2093, 40, 41, 59, 490, 2094, 61, 2092, 46, 2095, 59, 392, 40, 2010, 46, 2096, 40, 2094, 41, 41, 123, 469, 418, 2097, 40, 2098, 46, 2099, 40, 2092, 46, 2100, 40, 41, 41, 41, 59, 125, 392, 40, 2092, 46, 2101, 41, 123, 392, 40, 2010, 46, 2102, 40, 2103, 619, 33, 2103, 46, 2104, 46, 2101, 605, 2103, 46, 2104, 46, 2105, 614, 2092, 46, 2105, 41, 41, 123, 469, 418, 2106, 40, 2107, 46, 2108, 40, 2092, 46, 2095, 44, 2092, 46, 2105, 46, 2109, 40, 41, 41, 41, 59, 125, 392, 40, 2022, 46, 2110, 40, 2092, 46, 2105, 44, 430, 490, 2111, 41, 41, 123, 490, 2112, 61, 2092, 46, 2113, 40, 41, 46, 2114, 40, 2111, 46, 2017, 41, 59, 2111, 46, 2021, 46, 2115, 40, 2092, 41, 59, 2022, 91, 2092, 46, 2105, 93, 61, 40, 2112, 44, 2111, 46, 2021, 41, 59, 125, 360, 123, 490, 2116, 61, 418, 2020, 60, 2009, 62, 40, 2117, 46, 2118, 41, 123, 2092, 125, 59, 2022, 46, 2119, 40, 2092, 46, 2105, 44, 40, 2092, 46, 2120, 40, 41, 44, 2116, 41, 41, 59, 125, 125, 360, 392, 40, 2022, 46, 2096, 40, 2092, 46, 2121, 41, 41, 123, 469, 418, 2122, 40, 2123, 46, 2124, 40, 2092, 46, 2125, 40, 41, 41, 41, 59, 125, 2010, 46, 2126, 40, 2094, 44, 2092, 41, 59, 450, 40, 2009, 63, 41, 2026, 46, 2127, 40, 2092, 46, 2062, 41, 634, 2128, 59, 125, 439, 491, 2009, 63, 2129, 40, 2005, 2078, 41, 619, 2129, 40, 2130, 40, 2078, 41, 41, 59, 439, 491, 2009, 63, 2129, 40, 461, 2071, 41, 619, 33, 461, 46, 2131, 40, 2071, 41, 605, 2010, 46, 2132, 40, 2071, 44, 430, 490, 2092, 41, 63, 2092, 58, 424, 59, 439, 491, 2009, 63, 2133, 40, 2005, 2078, 41, 619, 2133, 40, 2129, 40, 2078, 41, 41, 59, 439, 491, 2009, 63, 2133, 40, 461, 2071, 41, 619, 2133, 40, 2129, 40, 2071, 41, 41, 59, 437, 457, 492, 2134, 40, 2009, 2092, 41, 123, 490, 2135, 61, 2092, 46, 2136, 40, 41, 46, 2137, 40, 41, 59, 392, 40, 2135, 631, 424, 41, 123, 469, 418, 2138, 40, 2139, 46, 2140, 40, 2092, 46, 2141, 40, 41, 44, 2135, 46, 2142, 46, 2143, 40, 41, 44, 2135, 46, 2144, 46, 2141, 40, 41, 41, 41, 59, 125, 490, 2145, 61, 2092, 46, 2146, 40, 41, 46, 2137, 40, 41, 59, 392, 40, 2145, 631, 424, 41, 123, 469, 418, 2147, 40, 2148, 46, 2149, 40, 2092, 46, 2150, 40, 41, 44, 2145, 46, 2151, 44, 2145, 46, 2152, 46, 2150, 40, 41, 41, 41, 59, 125, 490, 2153, 61, 2092, 46, 2154, 40, 41, 46, 2137, 40, 41, 59, 392, 40, 2153, 631, 424, 41, 123, 469, 418, 2155, 40, 2156, 46, 2157, 40, 2092, 46, 2158, 40, 41, 44, 2153, 46, 2158, 40, 41, 41, 41, 59, 125, 125, 439, 491, 2009, 63, 2133, 40, 2009, 63, 2092, 41, 123, 392, 40, 2092, 407, 424, 606, 33, 2092, 46, 2159, 41, 123, 450, 424, 59, 125, 2160, 40, 41, 59, 2134, 40, 2092, 41, 59, 392, 40, 2022, 46, 2132, 40, 2092, 46, 2161, 44, 430, 490, 2162, 41, 41, 123, 2162, 46, 2021, 46, 2163, 40, 2092, 41, 59, 125, 490, 2164, 61, 2010, 46, 2165, 40, 2092, 46, 2166, 41, 59, 2167, 46, 2168, 40, 2164, 44, 41, 59, 2092, 46, 2169, 40, 41, 59, 450, 2092, 59, 125, 439, 491, 2009, 63, 2070, 40, 461, 2071, 44, 461, 2170, 44, 2009, 2171, 44, 2017, 2073, 41, 123, 2172, 46, 2173, 40, 2071, 44, 2174, 40, 2071, 41, 41, 59, 2071, 61, 2171, 46, 2175, 40, 2071, 44, 2170, 41, 59, 490, 2092, 61, 418, 2009, 40, 2071, 44, 2006, 44, 467, 44, 2072, 58, 473, 44, 2073, 41, 59, 450, 2070, 40, 2092, 41, 59, 125, 439, 491, 2009, 63, 2070, 40, 2005, 2078, 44, 461, 2170, 44, 2009, 2171, 44, 2017, 2073, 41, 123, 2176, 46, 2177, 40, 2078, 44, 2178, 40, 2078, 41, 41, 59, 490, 2071, 61, 2171, 46, 2179, 40, 2078, 46, 2180, 40, 41, 44, 2170, 41, 59, 490, 2092, 61, 418, 2009, 40, 2071, 44, 2078, 44, 467, 44, 2072, 58, 473, 44, 2073, 41, 59, 450, 2070, 40, 2092, 41, 59, 125, 91, 2181, 93, 439, 491, 461, 2130, 40, 2005, 2078, 41, 619, 2016, 46, 2182, 40, 2078, 44, 2183, 619, 2183, 46, 2184, 40, 41, 41, 59, 439, 491, 2009, 63, 2129, 40, 2005, 2078, 44, 461, 2170, 44, 2009, 2171, 41, 619, 2129, 40, 2078, 46, 2185, 40, 41, 44, 2170, 44, 2171, 41, 59, 439, 491, 2009, 63, 2129, 40, 461, 2071, 44, 461, 2170, 44, 2009, 2171, 41, 619, 2129, 40, 2171, 46, 2186, 40, 2071, 44, 2170, 41, 41, 59, 439, 491, 2009, 63, 2187, 40, 2009, 2092, 41, 619, 2092, 46, 2188, 63, 2092, 58, 2129, 40, 2092, 46, 2189, 41, 633, 40, 2092, 46, 2190, 63, 2092, 46, 2191, 40, 41, 407, 2192, 2193, 63, 2187, 40, 2193, 46, 2194, 41, 634, 2195, 40, 2193, 46, 2196, 33, 46, 2189, 41, 634, 2197, 58, 424, 58, 424, 41, 59, 439, 491, 2005, 63, 2198, 40, 461, 2071, 41, 619, 2010, 46, 2132, 40, 2071, 44, 430, 490, 2092, 41, 63, 2092, 46, 2190, 63, 424, 58, 2092, 46, 2199, 58, 424, 59, 439, 491, 2067, 60, 2009, 62, 2200, 40, 2005, 2078, 41, 123, 490, 2201, 61, 2068, 40, 2130, 40, 2078, 41, 41, 59, 450, 2022, 46, 2132, 40, 2078, 44, 430, 490, 2202, 41, 63, 2201, 46, 2203, 40, 2202, 46, 2021, 41, 58, 2201, 59, 125, 439, 491, 2204, 60, 2009, 62, 2068, 40, 461, 2071, 41, 123, 490, 2092, 61, 2129, 40, 2071, 41, 59, 450, 2092, 614, 424, 63, 2205, 46, 2206, 60, 2009, 62, 40, 41, 58, 418, 91, 93, 123, 2092, 125, 59, 125, 439, 491, 2009, 63, 2133, 40, 2005, 2078, 44, 461, 2170, 44, 2009, 2171, 41, 619, 2133, 40, 2129, 40, 2078, 44, 2170, 44, 2171, 41, 41, 59, 439, 491, 2009, 63, 2133, 40, 461, 2071, 44, 461, 2170, 44, 2009, 2171, 41, 619, 2133, 40, 2129, 40, 2071, 44, 2170, 44, 2171, 41, 41, 59, 439, 491, 323, 2207, 40, 2005, 2078, 41, 619, 2208, 40, 2078, 41, 631, 424, 606, 2065, 634, 2209, 40, 2078, 41, 614, 2210, 46, 2211, 59, 439, 491, 461, 63, 2212, 40, 2005, 2078, 44, 2017, 2073, 41, 619, 2212, 40, 2130, 40, 2213, 46, 2214, 40, 2078, 44, 2215, 40, 2078, 41, 41, 41, 44, 2078, 44, 2073, 41, 59, 439, 491, 461, 63, 2212, 40, 461, 2071, 44, 2017, 2073, 41, 619, 2212, 40, 2213, 46, 2214, 40, 2071, 44, 2215, 40, 2071, 41, 41, 44, 424, 44, 2073, 41, 59, 439, 491, 461, 63, 2212, 40, 461, 2071, 44, 2005, 63, 2078, 44, 2017, 2073, 41, 123, 2216, 40, 41, 59, 392, 40, 2018, 46, 2132, 40, 2071, 44, 430, 490, 2217, 41, 41, 123, 2073, 61, 2073, 46, 2218, 40, 2217, 41, 59, 2018, 91, 2071, 93, 61, 2073, 59, 450, 2071, 59, 125, 2018, 91, 2071, 93, 61, 2073, 59, 2078, 633, 61, 2010, 46, 2132, 40, 2071, 44, 430, 490, 2219, 41, 605, 2219, 46, 2190, 63, 2219, 46, 2199, 58, 424, 59, 450, 2026, 46, 2220, 40, 2062, 44, 2071, 44, 2078, 41, 59, 125, 439, 491, 2017, 63, 2221, 40, 2005, 2078, 41, 123, 2213, 46, 2214, 40, 2078, 44, 2215, 40, 2078, 41, 41, 59, 450, 2221, 40, 2130, 40, 2078, 41, 41, 59, 125, 439, 491, 2017, 63, 2221, 40, 461, 2071, 41, 619, 2018, 46, 2132, 40, 2213, 46, 2222, 40, 2071, 44, 2215, 40, 2071, 41, 41, 44, 430, 490, 2223, 41, 63, 2223, 58, 424, 59, 439, 491, 323, 2224, 40, 461, 2071, 41, 619, 2221, 40, 2071, 41, 631, 424, 59, 439, 491, 323, 2224, 40, 2005, 2078, 41, 619, 2221, 40, 2130, 40, 2078, 41, 41, 631, 424, 59, 439, 491, 323, 2225, 40, 2005, 2078, 41, 619, 2065, 634, 2209, 40, 2078, 41, 614, 2210, 46, 2226, 59, 439, 491, 461, 63, 2227, 40, 2005, 2078, 41, 123, 2213, 46, 2214, 40, 2078, 44, 2215, 40, 2078, 41, 41, 59, 450, 2227, 40, 2130, 40, 2078, 41, 41, 59, 125, 439, 491, 461, 63, 2227, 40, 461, 2071, 41, 123, 2213, 46, 2214, 40, 2071, 44, 2215, 40, 2071, 41, 41, 59, 2228, 40, 41, 59, 450, 2018, 46, 2229, 40, 2071, 41, 63, 2071, 58, 424, 59, 125, 439, 491, 2067, 60, 2230, 62, 2231, 40, 41, 619, 2065, 634, 2231, 40, 41, 633, 2232, 46, 2233, 60, 2230, 62, 40, 41, 59, 439, 491, 2230, 63, 2234, 40, 2005, 2235, 41, 619, 2065, 634, 2234, 40, 2235, 41, 59, 439, 491, 323, 2236, 40, 2005, 2078, 41, 619, 2237, 40, 2078, 41, 631, 424, 606, 2065, 634, 2209, 40, 2078, 41, 614, 2210, 46, 2238, 59, 439, 491, 2017, 63, 2237, 40, 2005, 2078, 41, 123, 392, 40, 2019, 614, 424, 41, 123, 450, 424, 59, 125, 490, 2239, 61, 2078, 59, 496, 40, 2239, 631, 424, 41, 123, 392, 40, 2019, 46, 2132, 40, 2130, 40, 2239, 41, 44, 430, 490, 2073, 41, 41, 123, 450, 2073, 59, 125, 2239, 61, 2239, 46, 2240, 59, 125, 450, 424, 59, 125, 439, 491, 492, 2241, 40, 2005, 2078, 44, 2017, 2073, 41, 123, 2242, 40, 41, 59, 490, 2071, 61, 2130, 40, 2078, 41, 59, 2019, 633, 61, 418, 2007, 60, 461, 44, 2017, 62, 40, 2011, 46, 2012, 41, 59, 392, 40, 2019, 46, 2132, 40, 2071, 44, 430, 490, 2243, 41, 41, 123, 2019, 91, 2071, 93, 61, 2073, 46, 2244, 40, 2243, 41, 59, 450, 59, 125, 2019, 46, 2245, 40, 2071, 44, 2073, 41, 59, 125, 439, 491, 461, 63, 2246, 40, 2005, 2078, 41, 123, 2247, 40, 41, 59, 392, 40, 2019, 614, 424, 41, 123, 450, 424, 59, 125, 490, 2248, 61, 2078, 59, 496, 40, 2248, 631, 424, 41, 123, 490, 2071, 61, 2130, 40, 2078, 41, 59, 392, 40, 2019, 46, 2249, 40, 2071, 41, 41, 123, 450, 2071, 59, 125, 2248, 61, 2248, 46, 2250, 59, 125, 450, 424, 59, 125, 439, 491, 2017, 63, 2208, 40, 2005, 2078, 41, 619, 2022, 46, 2132, 40, 2078, 44, 430, 490, 2251, 41, 63, 2251, 46, 2017, 58, 424, 59, 439, 491, 492, 2252, 40, 2005, 2078, 44, 2017, 2073, 41, 123, 2253, 40, 41, 59, 392, 40, 2129, 40, 2078, 41, 631, 424, 41, 123, 469, 418, 2254, 40, 2255, 46, 2256, 40, 2078, 46, 2185, 40, 41, 41, 41, 59, 125, 392, 40, 2022, 46, 2132, 40, 2078, 44, 430, 490, 2251, 41, 41, 123, 2022, 91, 2078, 93, 61, 40, 2073, 46, 2257, 40, 2251, 46, 2017, 41, 44, 2251, 46, 2021, 41, 59, 125, 360, 123, 2022, 46, 2258, 40, 2078, 44, 40, 2073, 44, 418, 2020, 60, 2009, 62, 40, 2259, 46, 2260, 41, 41, 41, 59, 125, 125, 439, 491, 2005, 63, 2261, 40, 2005, 2078, 41, 123, 2262, 40, 41, 59, 392, 40, 2022, 46, 2132, 40, 2078, 44, 430, 490, 2251, 41, 605, 2251, 46, 2021, 46, 2263, 631, 1500, 41, 123, 469, 418, 2264, 40, 2265, 46, 2266, 40, 2078, 46, 2185, 40, 41, 41, 41, 59, 125, 450, 2022, 46, 2267, 40, 2078, 41, 63, 2078, 58, 424, 59, 125, 439, 491, 2268, 2269, 40, 41, 619, 40, 2268, 63, 41, 467, 91, 2270, 46, 2268, 93, 633, 2271, 59, 439, 341, 2268, 2271, 61, 2268, 46, 2272, 59, 439, 491, 2268, 63, 2273, 40, 2268, 63, 2274, 44, 2017, 2073, 41, 619, 40, 2268, 63, 41, 2275, 40, 2270, 46, 2268, 44, 2274, 44, 2073, 41, 634, 2276, 59, 439, 491, 2017, 63, 2277, 40, 41, 619, 2278, 40, 2270, 46, 2268, 41, 634, 2279, 40, 41, 59, 91, 2181, 93, 439, 491, 2034, 2280, 40, 41, 619, 2035, 633, 2034, 46, 2281, 59, 439, 491, 2034, 63, 2282, 40, 2034, 63, 2283, 44, 2017, 2073, 41, 123, 2284, 40, 41, 59, 2035, 61, 2283, 59, 2036, 61, 2035, 614, 424, 63, 424, 58, 2073, 46, 2285, 40, 2036, 41, 59, 450, 2283, 59, 125, 439, 491, 2017, 63, 2286, 40, 41, 619, 2036, 59, 438, 431, 2287, 63, 2288, 40, 461, 2071, 44, 2287, 63, 2289, 44, 2287, 63, 2290, 41, 619, 2026, 46, 2291, 40, 2062, 44, 2071, 44, 2289, 44, 2290, 41, 59, 439, 491, 2292, 2293, 40, 41, 123, 2294, 40, 41, 59, 450, 2026, 46, 2293, 40, 41, 59, 125, 439, 491, 2295, 2296, 60, 2295, 62, 40, 2297, 60, 2295, 62, 2298, 44, 91, 2055, 93, 442, 2299, 63, 2300, 41, 123, 2301, 40, 41, 59, 450, 2026, 46, 2296, 40, 2298, 44, 442, 2300, 41, 59, 125, 439, 491, 2302, 2303, 40, 41, 123, 2304, 40, 41, 59, 2026, 46, 2305, 40, 41, 59, 490, 2306, 61, 40, 2302, 41, 2026, 46, 2307, 40, 2062, 41, 46, 2308, 59, 392, 40, 2306, 407, 2000, 2309, 41, 123, 2306, 61, 2309, 46, 2310, 40, 41, 59, 125, 450, 2306, 59, 125, 439, 491, 2302, 2311, 40, 41, 123, 2302, 2312, 61, 467, 59, 386, 40, 490, 2313, 398, 2030, 33, 41, 123, 2312, 61, 2313, 46, 2314, 40, 2312, 41, 59, 125, 2030, 61, 424, 59, 450, 2312, 59, 125, 437, 2000, 2315, 40, 41, 123, 2027, 61, 424, 59, 2032, 61, 424, 59, 450, 467, 59, 125, 439, 491, 2014, 63, 2316, 40, 2005, 2078, 41, 619, 2015, 46, 2182, 40, 2078, 44, 2078, 46, 2317, 40, 41, 41, 59, 439, 491, 323, 2318, 40, 2319, 2320, 41, 619, 33, 2320, 46, 2321, 605, 2320, 46, 2322, 605, 2320, 46, 2323, 631, 424, 605, 2316, 40, 2320, 46, 2323, 41, 407, 2014, 2324, 605, 40, 2320, 614, 2324, 46, 2325, 606, 2320, 614, 2324, 46, 2326, 41, 59, 439, 491, 323, 2327, 123, 2328, 619, 2033, 633, 380, 59, 2329, 619, 2330, 40, 2331, 41, 59, 125, 439, 491, 323, 63, 2332, 40, 323, 63, 2333, 41, 123, 2334, 40, 41, 59, 2033, 61, 2333, 59, 450, 2333, 59, 125, 439, 491, 426, 63, 2335, 619, 40, 40, 2336, 41, 467, 41, 46, 2337, 40, 41, 59, 439, 491, 2338, 2338, 619, 418, 40, 40, 41, 619, 40, 40, 2339, 41, 467, 41, 46, 2340, 40, 41, 44, 40, 41, 619, 40, 40, 2339, 41, 467, 41, 46, 2340, 40, 2341, 46, 2342, 41, 41, 59, 2343, 2003, 46, 2062, 123, 91, 2181, 93, 2344, 619, 2062, 59, 125, 2345, 2346, 46, 2062, 123, 91, 2181, 93, 2347, 619, 2062, 59, 125, 91, 2181, 93, 492, 2002, 46, 2273, 40, 2268, 63, 2274, 41, 619, 2273, 40, 2274, 44, 2017, 46, 2348, 41, 59, 91, 2181, 93, 2268, 63, 2003, 46, 2273, 40, 2268, 63, 2274, 44, 323, 2349, 41, 619, 2273, 40, 2274, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 492, 2002, 46, 2282, 40, 2034, 63, 2283, 41, 619, 2282, 40, 2283, 44, 2017, 46, 2348, 41, 59, 91, 2181, 93, 2034, 63, 2003, 46, 2282, 40, 2034, 63, 2283, 44, 323, 2349, 41, 619, 2282, 40, 2283, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2352, 63, 2339, 46, 2129, 40, 461, 2071, 41, 619, 2129, 40, 2071, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2129, 40, 461, 2071, 41, 619, 2129, 40, 2071, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2129, 40, 461, 2071, 41, 619, 2129, 40, 2071, 41, 59, 91, 2181, 93, 2355, 63, 2302, 46, 2129, 40, 461, 2071, 41, 619, 2129, 40, 2071, 41, 59, 91, 2181, 93, 2352, 63, 2339, 46, 2129, 40, 2005, 2078, 41, 619, 2129, 40, 2078, 41, 59, 91, 2181, 93, 2355, 63, 2302, 46, 2129, 40, 2005, 2078, 41, 619, 2129, 40, 2078, 41, 59, 91, 2181, 93, 2352, 63, 2339, 46, 2129, 40, 461, 2071, 44, 461, 2170, 44, 2352, 2171, 41, 619, 2129, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2129, 40, 461, 2071, 44, 461, 2170, 44, 2353, 2171, 41, 619, 2129, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2129, 40, 461, 2071, 44, 461, 2170, 44, 2354, 2171, 41, 619, 2129, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2355, 63, 2302, 46, 2129, 40, 461, 2071, 44, 461, 2170, 44, 2355, 2171, 41, 619, 2129, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2352, 63, 2339, 46, 2129, 40, 2005, 2078, 44, 461, 2170, 44, 2352, 2171, 41, 619, 2129, 40, 2078, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2067, 60, 2352, 62, 2339, 46, 2068, 40, 41, 619, 2068, 40, 41, 59, 91, 2181, 93, 2067, 60, 2353, 62, 2002, 46, 2068, 40, 41, 619, 2068, 40, 41, 59, 91, 2181, 93, 2067, 60, 2354, 62, 2003, 46, 2068, 40, 41, 619, 2068, 40, 41, 59, 91, 2181, 93, 2067, 60, 2355, 62, 2302, 46, 2068, 40, 41, 619, 2068, 40, 41, 59, 91, 2181, 93, 2067, 60, 2352, 62, 2339, 46, 2200, 40, 2005, 2078, 41, 619, 2200, 40, 2078, 41, 59, 91, 2181, 93, 2067, 60, 2355, 62, 2302, 46, 2200, 40, 2005, 2078, 41, 619, 2200, 40, 2078, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2070, 40, 461, 2071, 41, 619, 2070, 40, 2071, 44, 2072, 58, 380, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2070, 40, 461, 2071, 44, 323, 2349, 41, 619, 2070, 40, 2071, 44, 2072, 58, 380, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2070, 40, 2005, 2078, 41, 619, 2070, 40, 2078, 44, 2072, 58, 380, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2070, 40, 2005, 2078, 44, 323, 2349, 41, 619, 2070, 40, 2078, 44, 2072, 58, 380, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2070, 40, 461, 2071, 44, 2005, 2078, 41, 619, 2070, 40, 2071, 44, 2078, 44, 2072, 58, 380, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2070, 40, 461, 2071, 44, 2005, 2078, 44, 323, 2349, 41, 619, 2070, 40, 2071, 44, 2078, 44, 2072, 58, 380, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2070, 40, 461, 2071, 44, 461, 2170, 44, 2353, 2171, 41, 619, 2070, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 44, 2017, 46, 2348, 41, 33, 59, 91, 2356, 93, 91, 2181, 93, 2354, 63, 2003, 46, 2070, 40, 461, 2071, 44, 461, 2170, 44, 2354, 2171, 44, 323, 2349, 41, 619, 2070, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2070, 40, 2005, 2078, 44, 461, 2170, 44, 2353, 2171, 41, 619, 2070, 40, 2078, 44, 2170, 44, 40, 2009, 41, 2171, 44, 2017, 46, 2348, 41, 33, 59, 91, 2356, 93, 91, 2181, 93, 2354, 63, 2003, 46, 2070, 40, 2005, 2078, 44, 461, 2170, 44, 2354, 2171, 44, 323, 2349, 41, 619, 2070, 40, 2078, 44, 2170, 44, 40, 2009, 41, 2171, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2357, 40, 461, 2071, 41, 619, 2070, 40, 2071, 44, 2072, 58, 473, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2357, 40, 461, 2071, 44, 323, 2349, 41, 619, 2070, 40, 2071, 44, 2072, 58, 473, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2357, 40, 2005, 2078, 41, 619, 2070, 40, 2078, 44, 2072, 58, 473, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2357, 40, 2005, 2078, 44, 323, 2349, 41, 619, 2070, 40, 2078, 44, 2072, 58, 473, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 2002, 46, 2357, 40, 461, 2071, 44, 2005, 2078, 41, 619, 2070, 40, 2071, 44, 2078, 44, 2072, 58, 473, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2357, 40, 461, 2071, 44, 2005, 2078, 44, 323, 2349, 41, 619, 2070, 40, 2071, 44, 2078, 44, 2072, 58, 473, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2133, 40, 2353, 2092, 41, 619, 2133, 40, 40, 2009, 41, 2092, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2133, 40, 2354, 2092, 41, 619, 2133, 40, 40, 2009, 41, 2092, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2133, 40, 2005, 2078, 41, 619, 2133, 40, 2078, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2133, 40, 2005, 2078, 41, 619, 2133, 40, 2078, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2133, 40, 2005, 2078, 44, 461, 2170, 44, 2353, 2171, 41, 619, 2133, 40, 2078, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2133, 40, 2005, 2078, 44, 461, 2170, 44, 2354, 2171, 41, 619, 2133, 40, 2078, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2133, 40, 461, 2071, 41, 619, 2133, 40, 2071, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2133, 40, 461, 2071, 41, 619, 2133, 40, 2071, 41, 59, 91, 2181, 93, 2353, 63, 2002, 46, 2133, 40, 461, 2071, 44, 461, 2170, 44, 2353, 2171, 41, 619, 2133, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 2354, 63, 2003, 46, 2133, 40, 461, 2071, 44, 461, 2170, 44, 2354, 2171, 41, 619, 2133, 40, 2071, 44, 2170, 44, 40, 2009, 41, 2171, 41, 59, 91, 2181, 93, 492, 2002, 46, 2252, 40, 2005, 2078, 41, 619, 2252, 40, 2078, 44, 2017, 46, 2348, 41, 59, 91, 2181, 93, 492, 2003, 46, 2252, 40, 2005, 2078, 44, 323, 2349, 41, 619, 2252, 40, 2078, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 492, 2002, 46, 2241, 40, 2005, 2078, 41, 619, 2241, 40, 2078, 44, 2017, 46, 2348, 41, 59, 91, 2181, 93, 492, 2003, 46, 2241, 40, 2005, 2078, 44, 323, 2349, 41, 619, 2241, 40, 2078, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 461, 2002, 46, 2212, 40, 461, 2071, 41, 619, 2212, 40, 2071, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 461, 63, 2003, 46, 2212, 40, 461, 2071, 44, 323, 2349, 41, 619, 2212, 40, 2071, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 91, 2181, 93, 461, 2002, 46, 2212, 40, 2005, 2078, 41, 619, 2212, 40, 2078, 44, 2017, 46, 2348, 41, 33, 59, 91, 2181, 93, 461, 63, 2003, 46, 2212, 40, 2005, 2078, 44, 323, 2349, 41, 619, 2212, 40, 2078, 44, 2349, 63, 2017, 46, 2350, 58, 2017, 46, 2351, 41, 59, 125]",0.99999833,1
23,76850,C#,"    public class AudioOptions
    {
        public AudioOptions()
        {
            Context = EncodingContext.Streaming;

            EnableDirectPlay = true;
            EnableDirectStream = true;
        }

        public bool EnableDirectPlay { get; set; }

        public bool EnableDirectStream { get; set; }

        public bool ForceDirectPlay { get; set; }

        public bool ForceDirectStream { get; set; }

        public Guid ItemId { get; set; }

        public MediaSourceInfo[] MediaSources { get; set; }

        public DeviceProfile Profile { get; set; }

        /// <summary>
        /// Gets or sets a media source id. Optional. Only needed if a specific AudioStreamIndex or SubtitleStreamIndex are requested.
        /// </summary>
        public string MediaSourceId { get; set; }

        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or sets an override of supported number of audio channels
        /// Example: DeviceProfile supports five channel, but user only has stereo speakers.
        /// </summary>
        public int? MaxAudioChannels { get; set; }

        /// <summary>
        /// Gets or sets the application's configured quality setting.
        /// </summary>
        public int? MaxBitrate { get; set; }

        /// <summary>
        /// Gets or sets the context.
        /// </summary>
        /// <value>The context.</value>
        public EncodingContext Context { get; set; }

        /// <summary>
        /// Gets or sets the audio transcoding bitrate.
        /// </summary>
        /// <value>The audio transcoding bitrate.</value>
        public int? AudioTranscodingBitrate { get; set; }

        /// <summary>
        /// Gets the maximum bitrate.
        /// </summary>
        /// <param name=""isAudio"">Whether or not this is audio.</param>
        /// <returns>System.Nullable&lt;System.Int32&gt;.</returns>
        public int? GetMaxBitrate(bool isAudio)
        {
            if (MaxBitrate.HasValue)
            {
                return MaxBitrate;
            }

            if (Profile == null)
            {
                return null;
            }

            if (Context == EncodingContext.Static)
            {
                if (isAudio && Profile.MaxStaticMusicBitrate.HasValue)
                {
                    return Profile.MaxStaticMusicBitrate;
                }

                return Profile.MaxStaticBitrate;
            }

            return Profile.MaxStreamingBitrate;
        }
    }",1,"[439, 334, 2000, 123, 439, 2000, 40, 41, 123, 2001, 61, 2002, 46, 2003, 59, 2004, 61, 473, 59, 2005, 61, 473, 59, 125, 439, 323, 2006, 123, 2007, 59, 2008, 59, 125, 439, 323, 2009, 123, 2010, 59, 2011, 59, 125, 439, 323, 2012, 123, 2013, 59, 2014, 59, 125, 439, 323, 2015, 123, 2016, 59, 2017, 59, 125, 439, 2018, 2019, 123, 2020, 59, 2021, 59, 125, 439, 2022, 91, 93, 2023, 123, 2024, 59, 2025, 59, 125, 439, 2026, 2027, 123, 2028, 59, 2029, 59, 125, 439, 461, 2030, 123, 2031, 59, 2032, 59, 125, 439, 461, 2033, 123, 2034, 59, 2035, 59, 125, 439, 404, 63, 2036, 123, 2037, 59, 2038, 59, 125, 439, 404, 63, 2039, 123, 2040, 59, 2041, 59, 125, 439, 2042, 2043, 123, 2044, 59, 2045, 59, 125, 439, 404, 63, 2046, 123, 2047, 59, 2048, 59, 125, 439, 404, 63, 2049, 40, 323, 2050, 41, 123, 392, 40, 2039, 46, 2051, 41, 123, 450, 2039, 59, 125, 392, 40, 2027, 614, 424, 41, 123, 450, 424, 59, 125, 392, 40, 2043, 614, 2042, 46, 2052, 41, 123, 392, 40, 2050, 605, 2027, 46, 2053, 46, 2051, 41, 123, 450, 2027, 46, 2053, 59, 125, 450, 2027, 46, 2054, 59, 125, 450, 2027, 46, 2055, 59, 125, 125]",0.017420383,0
24,87301,C#,"    public partial class ViewerPanel : UserControl, IDisposable, INotifyPropertyChanged
    {
        private readonly ContextObject _context;
        private BitmapSource _coverArt;
        
        private bool _hasVideo;
        private bool _isPlaying;
        private bool _wasPlaying;
        private bool _shouldLoop;

        public ViewerPanel(ContextObject context)
        {
            InitializeComponent();

            // apply global theme
            Resources.MergedDictionaries[0].MergedDictionaries.Clear();

            _context = context;

            mediaElement.MediaUriPlayer.LAVFilterDirectory =
                IntPtr.Size == 8 ? ""LAVFilters-0.72-x64\\"" : ""LAVFilters-0.72-x86\\"";

            //ShowViedoControlContainer(null, null);
            viewerPanel.PreviewMouseMove += ShowViedoControlContainer;

            mediaElement.MediaUriPlayer.PlayerStateChanged += PlayerStateChanged;
            mediaElement.MediaOpened += MediaOpened;
            mediaElement.MediaEnded += MediaEnded;
            mediaElement.MediaFailed += MediaFailed;

            ShouldLoop = SettingHelper.Get(""ShouldLoop"", false, ""QuickLook.Plugin.VideoViewer"");

            buttonPlayPause.Click += TogglePlayPause;
            buttonLoop.Click += ToggleShouldLoop;
            buttonTime.Click += (sender, e) => buttonTime.Tag = (string) buttonTime.Tag == ""Time"" ? ""Length"" : ""Time"";
            buttonMute.Click += (sender, e) => volumeSliderLayer.Visibility = Visibility.Visible;
            volumeSliderLayer.MouseDown += (sender, e) => volumeSliderLayer.Visibility = Visibility.Collapsed;

            sliderProgress.PreviewMouseDown += (sender, e) =>
            {
                _wasPlaying = mediaElement.IsPlaying;
                mediaElement.Pause();
            };
            sliderProgress.PreviewMouseUp += (sender, e) =>
            {
                if (_wasPlaying) mediaElement.Play();
            };

            PreviewMouseWheel += (sender, e) => ChangeVolume((double) e.Delta / 120 * 0.04);
        }

        public bool HasVideo
        {
            get => _hasVideo;
            private set
            {
                if (value == _hasVideo) return;
                _hasVideo = value;
                OnPropertyChanged();
            }
        }

        public bool IsPlaying
        {
            get => _isPlaying;
            private set
            {
                if (value == _isPlaying) return;
                _isPlaying = value;
                OnPropertyChanged();
            }
        }

        public bool ShouldLoop
        {
            get => _shouldLoop;
            private set
            {
                if (value == _shouldLoop) return;
                _shouldLoop = value;
                OnPropertyChanged();
                if (!IsPlaying)
                {
                    IsPlaying = true;

                    mediaElement.Play();
                }
            }
        }

        public BitmapSource CoverArt
        {
            get => _coverArt;
            private set
            {
                if (ReferenceEquals(value, _coverArt)) return;
                if (value == null) return;
                _coverArt = value;
                OnPropertyChanged();
            }
        }

        public void Dispose()
        {
            // old plugin use an int-typed ""Volume"" config key ranged from 0 to 100. Let's use a new one here.
            SettingHelper.Set(""VolumeDouble"", LinearVolume, ""QuickLook.Plugin.VideoViewer"");
            SettingHelper.Set(""ShouldLoop"", ShouldLoop, ""QuickLook.Plugin.VideoViewer"");

            try
            {
                mediaElement?.Close();

                Task.Run(() =>
                {
                    mediaElement?.MediaUriPlayer.Dispose();
                    mediaElement = null;
                });
            }
            catch (Exception e)
            {
                Debug.WriteLine(e);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void MediaOpened(object o, RoutedEventArgs args)
        {
            if (mediaElement == null)
                return;

            HasVideo = mediaElement.HasVideo;

            _context.IsBusy = false;
        }

        private void MediaFailed(object sender, MediaFailedEventArgs e)
        {
            ((MediaUriElement) sender).Dispatcher.BeginInvoke(new Action(() =>
            {
                _context.ViewerContent =
                    new Label {Content = e.Exception, VerticalAlignment = VerticalAlignment.Center};
                _context.IsBusy = false;
            }));
        }

        private void MediaEnded(object sender, RoutedEventArgs e)
        {
            if (mediaElement == null)
                return;

            mediaElement.MediaPosition = 0;
            if (ShouldLoop)
            {
                IsPlaying = true;

                mediaElement.Play();
            }
            else
            {
                IsPlaying = false;
                
                mediaElement.Pause();
            }
        }

        private void ShowViedoControlContainer(object sender, MouseEventArgs e)
        {
            var show = (Storyboard) videoControlContainer.FindResource(""ShowControlStoryboard"");
            if (videoControlContainer.Opacity == 0 || videoControlContainer.Opacity == 1)
                show.Begin();
        }

        private void AutoHideViedoControlContainer(object sender, EventArgs e)
        {
            if (!HasVideo)
                return;

            if (videoControlContainer.IsMouseOver)
                return;

            var hide = (Storyboard) videoControlContainer.FindResource(""HideControlStoryboard"");

            hide.Begin();
        }

        private void PlayerStateChanged(PlayerState oldState, PlayerState newState)
        {
            switch (newState)
            {
                case PlayerState.Playing:
                    IsPlaying = true;
                    break;
                case PlayerState.Paused:
                case PlayerState.Stopped:
                case PlayerState.Closed:
                    IsPlaying = false;
                    break;
            }
        }

        private void UpdateMeta(string path, MediaInfo.MediaInfo info)
        {
            if (HasVideo)
                return;

            try
            {
                if (info == null)
                    throw new NullReferenceException();

                var title = info.Get(StreamKind.General, 0, ""Title"");
                var artist = info.Get(StreamKind.General, 0, ""Performer"");
                var album = info.Get(StreamKind.General, 0, ""Album"");

                metaTitle.Text = !string.IsNullOrWhiteSpace(title) ? title : Path.GetFileName(path);
                metaArtists.Text = artist;
                metaAlbum.Text = album;

                var cs = info.Get(StreamKind.General, 0, ""Cover_Data"");
                if (!string.IsNullOrEmpty(cs))
                    using (var ms = new MemoryStream(Convert.FromBase64String(cs)))
                    {
                        CoverArt = BitmapFrame.Create(ms, BitmapCreateOptions.None, BitmapCacheOption.OnLoad);
                    }
            }
            catch (Exception)
            {
                metaTitle.Text = Path.GetFileName(path);
                metaArtists.Text = metaAlbum.Text = string.Empty;
            }

            metaArtists.Visibility = string.IsNullOrEmpty(metaArtists.Text)
                ? Visibility.Collapsed
                : Visibility.Visible;
            metaAlbum.Visibility = string.IsNullOrEmpty(metaAlbum.Text)
                ? Visibility.Collapsed
                : Visibility.Visible;
        }

        // Newer .net has Math.Clamp
        private T Clamp<T>(T val, T min, T max) where T : IComparable<T>
        {
            if (val.CompareTo(min) < 0) return min;
            else if (val.CompareTo(max) > 0) return max;
            else return val;
        }

        // A change in amplitude by a factor of 10 corresponds to a 20 dB change
        private const double DecibelAmplitudeMult = 20.0;
        public double LinearVolume
        {
            // mediaElement.Volume returns [0,1] where 0 = -100db, 1 = 0db
            // Decibel is logarithmic. See amplitude table https://en.wikipedia.org/wiki/Decibel
            get
            {
                var dbVol = 100.0 * (mediaElement.Volume - 1.0);
                var linearVol = Math.Pow(10, dbVol / DecibelAmplitudeMult);
                return linearVol;
            }
            set
            {
                var linearVol = Clamp(value, 0.00001, 1.0);
                var dbVol = DecibelAmplitudeMult * Math.Log10(linearVol);
                mediaElement.Volume = dbVol / 100.0 + 1.0;
                OnPropertyChanged();
            }
        }

        private void ChangeVolume(double delta)
        {
            LinearVolume = LinearVolume + delta; // setter will clamp
        }

        private void TogglePlayPause(object sender, EventArgs e)
        {
            if (mediaElement.IsPlaying)
                mediaElement.Pause();
            else
                mediaElement.Play();
        }

        private void ToggleShouldLoop(object sender, EventArgs e)
        {
            ShouldLoop = !ShouldLoop;
        }

        public void LoadAndPlay(string path, MediaInfo.MediaInfo info)
        {
            UpdateMeta(path, info);

            // detect rotation
            double.TryParse(info?.Get(StreamKind.Video, 0, ""Rotation""), out var rotation);
            // Correct rotation: on some machine the value ""90"" becomes ""90000"" by some reason
            if (rotation > 360)
                rotation /= 1e3;
            if (Math.Abs(rotation) > 0.1)
                mediaElement.LayoutTransform = new RotateTransform(rotation, 0.5, 0.5);

            mediaElement.Source = new Uri(path);
            // old plugin use an int-typed ""Volume"" config key ranged from 0 to 100. Let's use a new one here.
            LinearVolume = SettingHelper.Get(""VolumeDouble"", 1d, ""QuickLook.Plugin.VideoViewer"");

            mediaElement.Play();
        }

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }",1,"[439, 2000, 334, 2001, 58, 2002, 44, 2003, 44, 2004, 123, 437, 441, 2005, 2006, 59, 437, 2007, 2008, 59, 437, 323, 2009, 59, 437, 323, 2010, 59, 437, 323, 2011, 59, 437, 323, 2012, 59, 439, 2001, 40, 2005, 2013, 41, 123, 2014, 40, 41, 59, 2015, 46, 2016, 91, 1500, 93, 46, 2016, 46, 2017, 40, 41, 59, 2006, 61, 2013, 59, 2018, 46, 2019, 46, 2020, 61, 2021, 46, 2022, 614, 1502, 63, 58, 59, 2023, 46, 2024, 636, 2025, 59, 2018, 46, 2019, 46, 2026, 636, 2026, 59, 2018, 46, 2027, 636, 2027, 59, 2018, 46, 2028, 636, 2028, 59, 2018, 46, 2029, 636, 2029, 59, 2030, 61, 2031, 46, 2032, 40, 44, 380, 44, 41, 59, 2033, 46, 2034, 636, 2035, 59, 2036, 46, 2034, 636, 2037, 59, 2038, 46, 2034, 636, 40, 2039, 44, 2040, 41, 619, 2038, 46, 2041, 61, 40, 461, 41, 2038, 46, 2041, 614, 63, 58, 59, 2042, 46, 2034, 636, 40, 2039, 44, 2040, 41, 619, 2043, 46, 2044, 61, 2044, 46, 2045, 59, 2043, 46, 2046, 636, 40, 2039, 44, 2040, 41, 619, 2043, 46, 2044, 61, 2044, 46, 2047, 59, 2048, 46, 2049, 636, 40, 2039, 44, 2040, 41, 619, 123, 2011, 61, 2018, 46, 2050, 59, 2018, 46, 2051, 40, 41, 59, 125, 59, 2048, 46, 2052, 636, 40, 2039, 44, 2040, 41, 619, 123, 392, 40, 2011, 41, 2018, 46, 2053, 40, 41, 59, 125, 59, 2054, 636, 40, 2039, 44, 2040, 41, 619, 2055, 40, 40, 356, 41, 2040, 46, 2056, 47, 1504, 42, 1498, 41, 59, 125, 439, 323, 2057, 123, 2058, 619, 2009, 59, 437, 2059, 123, 392, 40, 2060, 614, 2009, 41, 450, 59, 2009, 61, 2060, 59, 2061, 40, 41, 59, 125, 125, 439, 323, 2062, 123, 2063, 619, 2010, 59, 437, 2064, 123, 392, 40, 2065, 614, 2010, 41, 450, 59, 2010, 61, 2065, 59, 2066, 40, 41, 59, 125, 125, 439, 323, 2067, 123, 2068, 619, 2012, 59, 437, 2069, 123, 392, 40, 2070, 614, 2012, 41, 450, 59, 2012, 61, 2070, 59, 2071, 40, 41, 59, 392, 40, 33, 2062, 41, 123, 2062, 61, 473, 59, 2072, 46, 2073, 40, 41, 59, 125, 125, 125, 439, 2007, 2074, 123, 2075, 619, 2008, 59, 437, 2076, 123, 392, 40, 2077, 40, 2078, 44, 2008, 41, 41, 450, 59, 392, 40, 2078, 614, 424, 41, 450, 59, 2008, 61, 2078, 59, 2079, 40, 41, 59, 125, 125, 439, 492, 2080, 40, 41, 123, 2081, 46, 2082, 40, 44, 2083, 44, 41, 59, 2081, 46, 2082, 40, 44, 2067, 44, 41, 59, 474, 123, 2084, 634, 2085, 40, 41, 59, 2086, 46, 2087, 40, 40, 41, 619, 123, 2084, 634, 2088, 46, 2080, 40, 41, 59, 2084, 61, 424, 59, 125, 41, 59, 125, 329, 40, 2089, 2090, 41, 123, 2091, 46, 2092, 40, 2090, 41, 59, 125, 125, 439, 373, 2093, 2094, 59, 437, 492, 2095, 40, 426, 2096, 44, 2097, 2098, 41, 123, 392, 40, 2099, 614, 424, 41, 450, 59, 2057, 61, 2099, 46, 2057, 59, 2006, 46, 2100, 61, 380, 59, 125, 437, 492, 2101, 40, 426, 2102, 44, 2103, 2104, 41, 123, 40, 40, 2105, 41, 2102, 41, 46, 2106, 46, 2107, 40, 418, 2108, 40, 40, 41, 619, 123, 2006, 46, 2109, 61, 418, 2110, 123, 2111, 61, 2104, 46, 2112, 44, 2113, 61, 2113, 46, 2114, 125, 59, 2006, 46, 2115, 61, 380, 59, 125, 41, 41, 59, 125, 437, 492, 2116, 40, 426, 2102, 44, 2097, 2104, 41, 123, 392, 40, 2117, 614, 424, 41, 450, 59, 2117, 46, 2118, 61, 1500, 59, 392, 40, 2067, 41, 123, 2062, 61, 473, 59, 2117, 46, 2119, 40, 41, 59, 125, 360, 123, 2062, 61, 380, 59, 2117, 46, 2120, 40, 41, 59, 125, 125, 437, 492, 2121, 40, 426, 2102, 44, 2122, 2104, 41, 123, 490, 2123, 61, 40, 2124, 41, 2125, 46, 2126, 40, 41, 59, 392, 40, 2125, 46, 2127, 614, 1500, 606, 2125, 46, 2127, 614, 1501, 41, 2123, 46, 2128, 40, 41, 59, 125, 437, 492, 2129, 40, 426, 2102, 44, 2130, 2104, 41, 123, 392, 40, 33, 2057, 41, 450, 59, 392, 40, 2131, 46, 2132, 41, 450, 59, 490, 2133, 61, 40, 2134, 41, 2131, 46, 2135, 40, 41, 59, 2133, 46, 2136, 40, 41, 59, 125, 437, 492, 2137, 40, 2138, 2139, 44, 2138, 2140, 41, 123, 464, 40, 2140, 41, 123, 328, 2138, 46, 2141, 58, 2062, 61, 473, 59, 325, 59, 328, 2138, 46, 2142, 58, 328, 2138, 46, 2143, 58, 328, 2138, 46, 2144, 58, 2062, 61, 380, 59, 325, 59, 125, 125, 437, 492, 2145, 40, 461, 2146, 44, 2147, 46, 2147, 2148, 41, 123, 392, 40, 2057, 41, 450, 59, 474, 123, 392, 40, 2148, 614, 424, 41, 469, 418, 2149, 40, 41, 59, 490, 2150, 61, 2148, 46, 2151, 40, 2152, 46, 2153, 44, 1500, 44, 41, 59, 490, 2154, 61, 2148, 46, 2151, 40, 2152, 46, 2153, 44, 1500, 44, 41, 59, 490, 2155, 61, 2148, 46, 2151, 40, 2152, 46, 2153, 44, 1500, 44, 41, 59, 2156, 46, 2157, 61, 33, 461, 46, 2158, 40, 2150, 41, 63, 2150, 58, 2159, 46, 2160, 40, 2146, 41, 59, 2161, 46, 2157, 61, 2154, 59, 2162, 46, 2157, 61, 2155, 59, 490, 2163, 61, 2148, 46, 2151, 40, 2152, 46, 2153, 44, 1500, 44, 41, 59, 392, 40, 33, 461, 46, 2164, 40, 2163, 41, 41, 489, 40, 490, 2165, 61, 418, 2166, 40, 2167, 46, 2168, 40, 2163, 41, 41, 41, 123, 2074, 61, 2169, 46, 2170, 40, 2165, 44, 2171, 46, 303, 44, 2172, 46, 2173, 41, 59, 125, 125, 329, 40, 2174, 41, 123, 2175, 46, 2176, 61, 2177, 46, 2178, 40, 2146, 41, 59, 2179, 46, 2176, 61, 2180, 46, 2176, 61, 461, 46, 2181, 59, 125, 2182, 46, 2183, 61, 461, 46, 2184, 40, 2182, 46, 2185, 41, 63, 2183, 46, 2186, 58, 2183, 46, 2187, 59, 2188, 46, 2183, 61, 461, 46, 2184, 40, 2188, 46, 2185, 41, 63, 2183, 46, 2186, 58, 2183, 46, 2187, 59, 125, 437, 2189, 2190, 60, 2189, 62, 40, 2189, 2191, 44, 2189, 2192, 44, 2189, 2193, 41, 2194, 2189, 58, 2195, 60, 2189, 62, 123, 392, 40, 2191, 46, 2196, 40, 2192, 41, 60, 1500, 41, 450, 2192, 59, 360, 392, 40, 2191, 46, 2196, 40, 2193, 41, 62, 1500, 41, 450, 2193, 59, 360, 450, 2191, 59, 125, 437, 341, 356, 2197, 61, 1503, 59, 439, 356, 2198, 123, 2199, 123, 490, 2200, 61, 1503, 42, 40, 2201, 46, 2202, 45, 1501, 41, 59, 490, 2203, 61, 2204, 46, 2205, 40, 1502, 44, 2200, 47, 2197, 41, 59, 450, 2203, 59, 125, 2206, 123, 490, 2207, 61, 2190, 40, 2208, 44, 1495, 44, 1501, 41, 59, 490, 2209, 61, 2197, 42, 2210, 46, 2211, 40, 2207, 41, 59, 2212, 46, 2213, 61, 2209, 47, 1503, 43, 1501, 59, 2214, 40, 41, 59, 125, 125, 437, 492, 2215, 40, 356, 2216, 41, 123, 2198, 61, 2198, 43, 2216, 59, 125, 437, 492, 2217, 40, 426, 2102, 44, 2130, 2104, 41, 123, 392, 40, 2218, 46, 2062, 41, 2218, 46, 2219, 40, 41, 59, 360, 2218, 46, 2220, 40, 41, 59, 125, 437, 492, 2221, 40, 426, 2102, 44, 2130, 2104, 41, 123, 2067, 61, 33, 2067, 59, 125, 439, 492, 2222, 40, 461, 2146, 44, 2147, 46, 2147, 2148, 41, 123, 2145, 40, 2146, 44, 2148, 41, 59, 356, 46, 2223, 40, 2148, 634, 2224, 40, 2225, 46, 2226, 44, 1500, 44, 41, 44, 430, 490, 2227, 41, 59, 392, 40, 2227, 62, 1504, 41, 2227, 609, 1504, 59, 392, 40, 2228, 46, 2229, 40, 2227, 41, 62, 1499, 41, 2230, 46, 2231, 61, 418, 2232, 40, 2227, 44, 1499, 44, 1499, 41, 59, 2230, 46, 2233, 61, 418, 2234, 40, 2146, 41, 59, 2198, 61, 2235, 46, 2224, 40, 44, 1501, 44, 41, 59, 2230, 46, 2236, 40, 41, 59, 125, 91, 2237, 93, 438, 491, 492, 2238, 40, 91, 2239, 93, 461, 2240, 61, 424, 41, 123, 2094, 634, 2241, 40, 467, 44, 418, 2242, 40, 2240, 41, 41, 59, 125, 125]",0.9896656,1
25,71274,C#,"public class KeyPropagator : IKeyPropagator
{
    private readonly IValueGeneratorSelector _valueGeneratorSelector;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public KeyPropagator(
        IValueGeneratorSelector valueGeneratorSelector)
    {
        _valueGeneratorSelector = valueGeneratorSelector;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual InternalEntityEntry? PropagateValue(InternalEntityEntry entry, IProperty property)
    {
        Check.DebugAssert(property.IsForeignKey(), $""property {property} is not part of an FK"");

        var generationProperty = property.FindGenerationProperty();
        var principalEntry = TryPropagateValue(entry, property, generationProperty);

        if (principalEntry == null
            && property.IsKey()
            && !property.IsForeignKeyToSelf())
        {
            var valueGenerator = TryGetValueGenerator(
                generationProperty,
                generationProperty == property
                    ? entry.EntityType
                    : generationProperty?.DeclaringEntityType);

            if (valueGenerator != null)
            {
                var value = valueGenerator.Next(new EntityEntry(entry));

                if (valueGenerator.GeneratesTemporaryValues)
                {
                    entry.SetTemporaryValue(property, value);
                }
                else
                {
                    entry[property] = value;
                }

                if (!valueGenerator.GeneratesStableValues)
                {
                    entry.MarkUnknown(property);
                }
            }
        }

        return principalEntry;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public virtual async Task<InternalEntityEntry?> PropagateValueAsync(
        InternalEntityEntry entry,
        IProperty property,
        CancellationToken cancellationToken = default)
    {
        Check.DebugAssert(property.IsForeignKey(), $""property {property} is not part of an FK"");

        var generationProperty = property.FindGenerationProperty();
        var principalEntry = TryPropagateValue(entry, property, generationProperty);

        if (principalEntry == null
            && property.IsKey())
        {
            var valueGenerator = TryGetValueGenerator(
                generationProperty,
                generationProperty == property
                    ? entry.EntityType
                    : generationProperty?.DeclaringEntityType);

            if (valueGenerator != null)
            {
                var value = await valueGenerator.NextAsync(new EntityEntry(entry), cancellationToken)
                    .ConfigureAwait(false);

                if (valueGenerator.GeneratesTemporaryValues)
                {
                    entry.SetTemporaryValue(property, value);
                }
                else
                {
                    entry[property] = value;
                }

                if (!valueGenerator.GeneratesStableValues)
                {
                    entry.MarkUnknown(property);
                }
            }
        }

        return principalEntry;
    }

    private static InternalEntityEntry? TryPropagateValue(InternalEntityEntry entry, IProperty property, IProperty? generationProperty)
    {
        var entityType = entry.EntityType;
        var stateManager = entry.StateManager;

        foreach (var foreignKey in entityType.GetForeignKeys())
        {
            for (var propertyIndex = 0; propertyIndex < foreignKey.Properties.Count; propertyIndex++)
            {
                if (property == foreignKey.Properties[propertyIndex])
                {
                    var principal = foreignKey.DependentToPrincipal == null
                        ? null
                        : entry[foreignKey.DependentToPrincipal];
                    InternalEntityEntry? principalEntry = null;
                    if (principal != null)
                    {
                        principalEntry = stateManager.GetOrCreateEntry(principal, foreignKey.PrincipalEntityType);
                    }
                    else if (foreignKey.PrincipalToDependent != null)
                    {
                        foreach (var (navigationBase, internalEntityEntry) in stateManager.GetRecordedReferrers(entry.Entity, clear: false))
                        {
                            if (navigationBase == foreignKey.PrincipalToDependent)
                            {
                                principalEntry = internalEntityEntry;
                                break;
                            }
                        }
                    }

                    if (principalEntry != null)
                    {
                        var principalProperty = foreignKey.PrincipalKey.Properties[propertyIndex];

                        if (principalProperty != property)
                        {
                            var principalValue = principalEntry[principalProperty];
                            if (generationProperty == null
                                || !principalProperty.ClrType.IsDefaultValue(principalValue))
                            {
                                entry.PropagateValue(principalEntry, principalProperty, property);

                                return principalEntry;
                            }
                        }
                    }

                    break;
                }
            }
        }

        return null;
    }

    private ValueGenerator? TryGetValueGenerator(IProperty? generationProperty, IEntityType? entityType)
        => generationProperty != null
            ? _valueGeneratorSelector.Select(generationProperty, entityType!)
            : null;
}",1,"[439, 334, 2000, 58, 2001, 123, 437, 441, 2002, 2003, 59, 439, 2000, 40, 2002, 2004, 41, 123, 2003, 61, 2004, 59, 125, 439, 491, 2005, 63, 2006, 40, 2005, 2007, 44, 2008, 2009, 41, 123, 2010, 46, 2011, 40, 2009, 46, 2012, 40, 41, 44, 36, 41, 59, 490, 2013, 61, 2009, 46, 2014, 40, 41, 59, 490, 2015, 61, 2016, 40, 2007, 44, 2009, 44, 2013, 41, 59, 392, 40, 2015, 614, 424, 605, 2009, 46, 2017, 40, 41, 605, 33, 2009, 46, 2018, 40, 41, 41, 123, 490, 2019, 61, 2020, 40, 2013, 44, 2013, 614, 2009, 63, 2007, 46, 2021, 58, 2013, 634, 2022, 41, 59, 392, 40, 2019, 631, 424, 41, 123, 490, 2023, 61, 2019, 46, 2024, 40, 418, 2025, 40, 2007, 41, 41, 59, 392, 40, 2019, 46, 2026, 41, 123, 2007, 46, 2027, 40, 2009, 44, 2023, 41, 59, 125, 360, 123, 2007, 91, 2009, 93, 61, 2023, 59, 125, 392, 40, 33, 2019, 46, 2028, 41, 123, 2007, 46, 2029, 40, 2009, 41, 59, 125, 125, 125, 450, 2015, 59, 125, 439, 491, 314, 2030, 60, 2005, 63, 62, 2031, 40, 2005, 2007, 44, 2008, 2009, 44, 2032, 2033, 61, 349, 41, 123, 2034, 46, 2035, 40, 2009, 46, 2036, 40, 41, 44, 36, 41, 59, 490, 2037, 61, 2009, 46, 2038, 40, 41, 59, 490, 2039, 61, 2040, 40, 2007, 44, 2009, 44, 2037, 41, 59, 392, 40, 2039, 614, 424, 605, 2009, 46, 2041, 40, 41, 41, 123, 490, 2042, 61, 2043, 40, 2037, 44, 2037, 614, 2009, 63, 2007, 46, 2044, 58, 2037, 634, 2045, 41, 59, 392, 40, 2042, 631, 424, 41, 123, 490, 2046, 61, 319, 2042, 46, 2047, 40, 418, 2048, 40, 2007, 41, 44, 2033, 41, 46, 2049, 40, 380, 41, 59, 392, 40, 2042, 46, 2050, 41, 123, 2007, 46, 2051, 40, 2009, 44, 2046, 41, 59, 125, 360, 123, 2007, 91, 2009, 93, 61, 2046, 59, 125, 392, 40, 33, 2042, 46, 2052, 41, 123, 2007, 46, 2053, 40, 2009, 41, 59, 125, 125, 125, 450, 2039, 59, 125, 437, 457, 2005, 63, 2054, 40, 2005, 2007, 44, 2008, 2009, 44, 2008, 63, 2055, 41, 123, 490, 2056, 61, 2007, 46, 2057, 59, 490, 2058, 61, 2007, 46, 2059, 59, 386, 40, 490, 2060, 398, 2056, 46, 2061, 40, 41, 41, 123, 385, 40, 490, 2062, 61, 1500, 59, 2062, 60, 2060, 46, 2063, 46, 2064, 59, 2062, 637, 41, 123, 392, 40, 2009, 614, 2060, 46, 2063, 91, 2062, 93, 41, 123, 490, 2065, 61, 2060, 46, 2066, 614, 424, 63, 424, 58, 2007, 91, 2060, 46, 2066, 93, 59, 2005, 63, 2067, 61, 424, 59, 392, 40, 2065, 631, 424, 41, 123, 2067, 61, 2058, 46, 2068, 40, 2065, 44, 2060, 46, 2069, 41, 59, 125, 360, 392, 40, 2060, 46, 2070, 631, 424, 41, 123, 386, 40, 490, 40, 2071, 44, 2072, 41, 398, 2058, 46, 2073, 40, 2007, 46, 2074, 44, 2075, 58, 380, 41, 41, 123, 392, 40, 2071, 614, 2060, 46, 2070, 41, 123, 2067, 61, 2072, 59, 325, 59, 125, 125, 125, 392, 40, 2067, 631, 424, 41, 123, 490, 2076, 61, 2060, 46, 2077, 46, 2063, 91, 2062, 93, 59, 392, 40, 2076, 631, 2009, 41, 123, 490, 2078, 61, 2067, 91, 2076, 93, 59, 392, 40, 2055, 614, 424, 606, 33, 2076, 46, 2079, 46, 2080, 40, 2078, 41, 41, 123, 2007, 46, 2006, 40, 2067, 44, 2076, 44, 2009, 41, 59, 450, 2067, 59, 125, 125, 125, 325, 59, 125, 125, 125, 450, 424, 59, 125, 437, 2081, 63, 2082, 40, 2008, 63, 2055, 44, 2083, 63, 2084, 41, 619, 2055, 631, 424, 63, 2003, 46, 2085, 40, 2055, 44, 2084, 33, 41, 58, 424, 59, 125]",0.5780432,1
26,69966,C#,"public class ProxyBindingRewriter : IModelFinalizingConvention
{
    private static readonly MethodInfo CreateLazyLoadingProxyMethod
        = typeof(IProxyFactory).GetTypeInfo().GetDeclaredMethod(nameof(IProxyFactory.CreateLazyLoadingProxy))!;

    private static readonly PropertyInfo LazyLoaderProperty
        = typeof(IProxyLazyLoader).GetProperty(nameof(IProxyLazyLoader.LazyLoader))!;

    private static readonly MethodInfo CreateProxyMethod
        = typeof(IProxyFactory).GetTypeInfo().GetDeclaredMethod(nameof(IProxyFactory.CreateProxy))!;

    private readonly ConstructorBindingConvention _directBindingConvention;
    private readonly IProxyFactory _proxyFactory;
    private readonly ProxiesOptionsExtension? _options;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public ProxyBindingRewriter(
        IProxyFactory proxyFactory,
        ProxiesOptionsExtension? options,
        LazyLoaderParameterBindingFactoryDependencies lazyLoaderParameterBindingFactoryDependencies,
        ProviderConventionSetBuilderDependencies conventionSetBuilderDependencies)
    {
        _proxyFactory = proxyFactory;
        _options = options;
        LazyLoaderParameterBindingFactoryDependencies = lazyLoaderParameterBindingFactoryDependencies;
        ConventionSetBuilderDependencies = conventionSetBuilderDependencies;
        _directBindingConvention = new ConstructorBindingConvention(conventionSetBuilderDependencies);
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual ProviderConventionSetBuilderDependencies ConventionSetBuilderDependencies { get; }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    protected virtual LazyLoaderParameterBindingFactoryDependencies LazyLoaderParameterBindingFactoryDependencies { get; }

    /// <inheritdoc />
    public virtual void ProcessModelFinalizing(
        IConventionModelBuilder modelBuilder,
        IConventionContext<IConventionModelBuilder> context)
    {
        if (_options?.UseProxies == true)
        {
            foreach (var entityType in modelBuilder.Metadata.GetEntityTypes())
            {
                var clrType = entityType.ClrType;
                if (clrType.IsAbstract)
                {
                    continue;
                }

                if (clrType.IsSealed)
                {
                    throw new InvalidOperationException(ProxiesStrings.ItsASeal(entityType.DisplayName()));
                }

                var proxyType = _proxyFactory.CreateProxyType(_options, entityType);

                // WARNING: This code is EF internal; it should not be copied. See #10789 #14554
#pragma warning disable EF1001 // Internal EF Core API usage.
                var binding = ((EntityType)entityType).ConstructorBinding;
                if (binding == null)
                {
                    _directBindingConvention.ProcessModelFinalizing(modelBuilder, context);
                    binding = ((EntityType)entityType).ConstructorBinding!;
                }

                ((EntityType)entityType).SetConstructorBinding(
                    UpdateConstructorBindings(entityType, proxyType, binding),
                    ConfigurationSource.Convention);

                binding = ((EntityType)entityType).ServiceOnlyConstructorBinding;
                if (binding != null)
                {
                    ((EntityType)entityType).SetServiceOnlyConstructorBinding(
                        UpdateConstructorBindings(entityType, proxyType, binding),
                        ConfigurationSource.Convention);
                }
#pragma warning restore EF1001 // Internal EF Core API usage.

                foreach (var navigationBase in entityType.GetDeclaredNavigations()
                             .Concat<IConventionNavigationBase>(entityType.GetDeclaredSkipNavigations()))
                {
                    if (navigationBase.PropertyInfo == null)
                    {
                        throw new InvalidOperationException(
                            ProxiesStrings.FieldProperty(navigationBase.Name, entityType.DisplayName()));
                    }

                    if (_options.UseChangeTrackingProxies
                        && navigationBase.PropertyInfo.SetMethod?.IsReallyVirtual() == false)
                    {
                        throw new InvalidOperationException(
                            ProxiesStrings.NonVirtualProperty(navigationBase.Name, entityType.DisplayName()));
                    }

                    if (_options.UseLazyLoadingProxies)
                    {
                        if (!navigationBase.PropertyInfo.GetMethod!.IsReallyVirtual()
                            && (!(navigationBase is INavigation navigation
                                && navigation.ForeignKey.IsOwnership)))
                        {
                            throw new InvalidOperationException(
                                ProxiesStrings.NonVirtualProperty(navigationBase.Name, entityType.DisplayName()));
                        }

                        navigationBase.SetPropertyAccessMode(PropertyAccessMode.Field);
                    }
                }

                if (_options.UseChangeTrackingProxies)
                {
                    var indexerChecked = false;
                    foreach (var property in entityType.GetDeclaredProperties()
                                 .Where(p => !p.IsShadowProperty()))
                    {
                        if (property.IsIndexerProperty())
                        {
                            if (!indexerChecked)
                            {
                                indexerChecked = true;

                                if (!property.PropertyInfo!.SetMethod!.IsReallyVirtual())
                                {
                                    if (clrType.IsGenericType
                                        && clrType.GetGenericTypeDefinition() == typeof(Dictionary<,>)
                                        && clrType.GenericTypeArguments[0] == typeof(string))
                                    {
                                        if (entityType.GetProperties().Any(p => !p.IsPrimaryKey()))
                                        {
                                            throw new InvalidOperationException(
                                                ProxiesStrings.DictionaryCannotBeProxied(
                                                    clrType.ShortDisplayName(),
                                                    entityType.DisplayName(),
                                                    typeof(IDictionary<,>).MakeGenericType(clrType.GenericTypeArguments)
                                                        .ShortDisplayName()));
                                        }
                                    }
                                    else
                                    {
                                        throw new InvalidOperationException(
                                            ProxiesStrings.NonVirtualIndexerProperty(entityType.DisplayName()));
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (property.PropertyInfo == null)
                            {
                                throw new InvalidOperationException(
                                    ProxiesStrings.FieldProperty(property.Name, entityType.DisplayName()));
                            }

                            if (property.PropertyInfo.SetMethod?.IsReallyVirtual() == false)
                            {
                                throw new InvalidOperationException(
                                    ProxiesStrings.NonVirtualProperty(property.Name, entityType.DisplayName()));
                            }
                        }
                    }
                }
            }
        }
    }

    private InstantiationBinding UpdateConstructorBindings(
        IConventionEntityType entityType,
        Type proxyType,
        InstantiationBinding binding)
    {
        if (_options?.UseLazyLoadingProxies == true)
        {
            foreach (var conflictingProperty in entityType.GetDerivedTypes()
                         .SelectMany(e => e.GetDeclaredServiceProperties().Where(p => p.ClrType == typeof(ILazyLoader)))
                         .ToList())
            {
                conflictingProperty.DeclaringEntityType.RemoveServiceProperty(conflictingProperty.Name);
            }

            var serviceProperty = entityType.GetServiceProperties()
                .FirstOrDefault(e => e.ClrType == typeof(ILazyLoader));
            if (serviceProperty == null)
            {
                serviceProperty = entityType.AddServiceProperty(LazyLoaderProperty);
                serviceProperty.SetParameterBinding(
                    (ServiceParameterBinding)new LazyLoaderParameterBindingFactory(
                            LazyLoaderParameterBindingFactoryDependencies)
                        .Bind(
                            entityType,
                            typeof(ILazyLoader),
                            nameof(IProxyLazyLoader.LazyLoader)));
            }

            return new FactoryMethodBinding(
                _proxyFactory,
                CreateLazyLoadingProxyMethod,
                new List<ParameterBinding>
                {
                    new ContextParameterBinding(typeof(DbContext)),
                    new EntityTypeParameterBinding(),
                    new DependencyInjectionParameterBinding(
                        typeof(ILazyLoader), typeof(ILazyLoader), (IPropertyBase)serviceProperty),
                    new ObjectArrayParameterBinding(binding.ParameterBindings)
                },
                proxyType);
        }

        return new FactoryMethodBinding(
            _proxyFactory,
            CreateProxyMethod,
            new List<ParameterBinding>
            {
                new ContextParameterBinding(typeof(DbContext)),
                new EntityTypeParameterBinding(),
                new ObjectArrayParameterBinding(binding.ParameterBindings)
            },
            proxyType);
    }
}",1,"[439, 334, 2000, 58, 2001, 123, 437, 457, 441, 2002, 2003, 61, 478, 40, 2004, 41, 46, 2005, 40, 41, 46, 2006, 40, 2007, 40, 2004, 46, 2008, 41, 41, 33, 59, 437, 457, 441, 2009, 2010, 61, 478, 40, 2011, 41, 46, 2012, 40, 2007, 40, 2011, 46, 2013, 41, 41, 33, 59, 437, 457, 441, 2002, 2014, 61, 478, 40, 2004, 41, 46, 2005, 40, 41, 46, 2006, 40, 2007, 40, 2004, 46, 2015, 41, 41, 33, 59, 437, 441, 2016, 2017, 59, 437, 441, 2004, 2018, 59, 437, 441, 2019, 63, 2020, 59, 439, 2000, 40, 2004, 2021, 44, 2019, 63, 2022, 44, 2023, 2024, 44, 2025, 2026, 41, 123, 2018, 61, 2021, 59, 2020, 61, 2022, 59, 2023, 61, 2024, 59, 2027, 61, 2026, 59, 2017, 61, 418, 2016, 40, 2026, 41, 59, 125, 438, 491, 2025, 2028, 123, 2029, 59, 125, 438, 491, 2023, 2023, 123, 2030, 59, 125, 439, 491, 492, 2031, 40, 2032, 2033, 44, 2034, 60, 2032, 62, 2035, 41, 123, 392, 40, 2020, 634, 2036, 614, 473, 41, 123, 386, 40, 490, 2037, 398, 2033, 46, 2038, 46, 2039, 40, 41, 41, 123, 490, 2040, 61, 2037, 46, 2041, 59, 392, 40, 2040, 46, 2042, 41, 123, 344, 59, 125, 392, 40, 2040, 46, 2043, 41, 123, 469, 418, 2044, 40, 2045, 46, 2046, 40, 2037, 46, 2047, 40, 41, 41, 41, 59, 125, 490, 2048, 61, 2018, 46, 2049, 40, 2020, 44, 2037, 41, 59, 35, 435, 2050, 2051, 2052, 490, 2053, 61, 40, 40, 2054, 41, 2037, 41, 46, 2055, 59, 392, 40, 2053, 614, 424, 41, 123, 2017, 46, 2031, 40, 2033, 44, 2035, 41, 59, 2053, 61, 40, 40, 2054, 41, 2037, 41, 46, 2055, 33, 59, 125, 40, 40, 2054, 41, 2037, 41, 46, 2056, 40, 2057, 40, 2037, 44, 2048, 44, 2053, 41, 44, 2058, 46, 2059, 41, 59, 2053, 61, 40, 40, 2054, 41, 2037, 41, 46, 2060, 59, 392, 40, 2053, 631, 424, 41, 123, 40, 40, 2054, 41, 2037, 41, 46, 2061, 40, 2057, 40, 2037, 44, 2048, 44, 2053, 41, 44, 2058, 46, 2059, 41, 59, 125, 35, 435, 2050, 2062, 2052, 386, 40, 490, 2063, 398, 2037, 46, 2064, 40, 41, 46, 2065, 60, 2066, 62, 40, 2037, 46, 2067, 40, 41, 41, 41, 123, 392, 40, 2063, 46, 2009, 614, 424, 41, 123, 469, 418, 2068, 40, 2069, 46, 2070, 40, 2063, 46, 2071, 44, 2037, 46, 2072, 40, 41, 41, 41, 59, 125, 392, 40, 2020, 46, 2073, 605, 2063, 46, 2009, 46, 2074, 634, 2075, 40, 41, 614, 380, 41, 123, 469, 418, 2076, 40, 2077, 46, 2078, 40, 2063, 46, 2079, 44, 2037, 46, 2080, 40, 41, 41, 41, 59, 125, 392, 40, 2020, 46, 2081, 41, 123, 392, 40, 33, 2063, 46, 2009, 46, 2082, 33, 46, 2075, 40, 41, 605, 40, 33, 40, 2063, 407, 2083, 2084, 605, 2084, 46, 2085, 46, 2086, 41, 41, 41, 123, 469, 418, 2087, 40, 2088, 46, 2089, 40, 2063, 46, 2090, 44, 2037, 46, 2091, 40, 41, 41, 41, 59, 125, 2063, 46, 2092, 40, 2093, 46, 2094, 41, 59, 125, 125, 392, 40, 2020, 46, 2095, 41, 123, 490, 2096, 61, 380, 59, 386, 40, 490, 2097, 398, 2037, 46, 2098, 40, 41, 46, 2099, 40, 2100, 619, 33, 2100, 46, 2101, 40, 41, 41, 41, 123, 392, 40, 2097, 46, 2102, 40, 41, 41, 123, 392, 40, 33, 2096, 41, 123, 2096, 61, 473, 59, 392, 40, 33, 2097, 46, 2009, 33, 46, 2103, 33, 46, 2104, 40, 41, 41, 123, 392, 40, 2040, 46, 2105, 605, 2040, 46, 2106, 40, 41, 614, 478, 40, 2107, 60, 44, 62, 41, 605, 2040, 46, 2108, 91, 1500, 93, 614, 478, 40, 461, 41, 41, 123, 392, 40, 2037, 46, 2109, 40, 41, 46, 2110, 40, 2100, 619, 33, 2100, 46, 2111, 40, 41, 41, 41, 123, 469, 418, 2112, 40, 2113, 46, 2114, 40, 2040, 46, 2115, 40, 41, 44, 2037, 46, 2116, 40, 41, 44, 478, 40, 2117, 60, 44, 62, 41, 46, 2118, 40, 2040, 46, 2108, 41, 46, 2115, 40, 41, 41, 41, 59, 125, 125, 360, 123, 469, 418, 2119, 40, 2120, 46, 2121, 40, 2037, 46, 2122, 40, 41, 41, 41, 59, 125, 125, 125, 125, 360, 123, 392, 40, 2097, 46, 2009, 614, 424, 41, 123, 469, 418, 2123, 40, 2124, 46, 2125, 40, 2097, 46, 2126, 44, 2037, 46, 2127, 40, 41, 41, 41, 59, 125, 392, 40, 2097, 46, 2009, 46, 2128, 634, 2129, 40, 41, 614, 380, 41, 123, 469, 418, 2130, 40, 2131, 46, 2132, 40, 2097, 46, 2133, 44, 2037, 46, 2134, 40, 41, 41, 41, 59, 125, 125, 125, 125, 125, 125, 125, 437, 2135, 2136, 40, 2137, 2138, 44, 2139, 2140, 44, 2135, 2141, 41, 123, 392, 40, 2020, 634, 2142, 614, 473, 41, 123, 386, 40, 490, 2143, 398, 2138, 46, 2144, 40, 41, 46, 2145, 40, 2146, 619, 2146, 46, 2147, 40, 41, 46, 2148, 40, 2149, 619, 2149, 46, 2150, 614, 478, 40, 2151, 41, 41, 41, 46, 2152, 40, 41, 41, 123, 2143, 46, 2153, 46, 2154, 40, 2143, 46, 2155, 41, 59, 125, 490, 2156, 61, 2138, 46, 2157, 40, 41, 46, 2158, 40, 2146, 619, 2146, 46, 2150, 614, 478, 40, 2151, 41, 41, 59, 392, 40, 2156, 614, 424, 41, 123, 2156, 61, 2138, 46, 2159, 40, 2010, 41, 59, 2156, 46, 2160, 40, 40, 2161, 41, 418, 2162, 40, 2023, 41, 46, 2163, 40, 2138, 44, 478, 40, 2151, 41, 44, 2007, 40, 2011, 46, 2013, 41, 41, 41, 59, 125, 450, 418, 2164, 40, 2018, 44, 2003, 44, 418, 2165, 60, 2166, 62, 123, 418, 2167, 40, 478, 40, 2168, 41, 41, 44, 418, 2169, 40, 41, 44, 418, 2170, 40, 478, 40, 2151, 41, 44, 478, 40, 2151, 41, 44, 40, 2171, 41, 2156, 41, 44, 418, 2172, 40, 2141, 46, 2173, 41, 125, 44, 2140, 41, 59, 125, 450, 418, 2174, 40, 2018, 44, 2014, 44, 418, 2175, 60, 2176, 62, 123, 418, 2177, 40, 478, 40, 2178, 41, 41, 44, 418, 2179, 40, 41, 44, 418, 2180, 40, 2141, 46, 2181, 41, 125, 44, 2140, 41, 59, 125, 125]",0.8988796,1
27,69815,C#,"public class InMemoryValueGeneratorSelector : ValueGeneratorSelector
{
    private readonly IInMemoryStore _inMemoryStore;

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public InMemoryValueGeneratorSelector(
        ValueGeneratorSelectorDependencies dependencies,
        IInMemoryDatabase inMemoryDatabase)
        : base(dependencies)
    {
        _inMemoryStore = inMemoryDatabase.Store;
    }

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public override ValueGenerator Select(IProperty property, IEntityType entityType)
        => property.GetValueGeneratorFactory() == null
            && property.ClrType.IsInteger()
            && property.ClrType.UnwrapNullableType() != typeof(char)
                ? GetOrCreate(property)
                : base.Select(property, entityType);

    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    private ValueGenerator GetOrCreate(IProperty property)
    {
        var type = property.ClrType.UnwrapNullableType().UnwrapEnumType();

        if (type == typeof(long))
        {
            return _inMemoryStore.GetIntegerValueGenerator<long>(property);
        }

        if (type == typeof(int))
        {
            return _inMemoryStore.GetIntegerValueGenerator<int>(property);
        }

        if (type == typeof(short))
        {
            return _inMemoryStore.GetIntegerValueGenerator<short>(property);
        }

        if (type == typeof(byte))
        {
            return _inMemoryStore.GetIntegerValueGenerator<byte>(property);
        }

        if (type == typeof(ulong))
        {
            return _inMemoryStore.GetIntegerValueGenerator<ulong>(property);
        }

        if (type == typeof(uint))
        {
            return _inMemoryStore.GetIntegerValueGenerator<uint>(property);
        }

        if (type == typeof(ushort))
        {
            return _inMemoryStore.GetIntegerValueGenerator<ushort>(property);
        }

        if (type == typeof(sbyte))
        {
            return _inMemoryStore.GetIntegerValueGenerator<sbyte>(property);
        }

        throw new ArgumentException(
            CoreStrings.InvalidValueGeneratorFactoryProperty(
                ""InMemoryIntegerValueGeneratorFactory"", property.Name, property.DeclaringEntityType.DisplayName()));
    }
}",1,"[439, 334, 2000, 58, 2001, 123, 437, 441, 2002, 2003, 59, 439, 2000, 40, 2004, 2005, 44, 2006, 2007, 41, 58, 320, 40, 2005, 41, 123, 2003, 61, 2007, 46, 2008, 59, 125, 439, 431, 2009, 2010, 40, 2011, 2012, 44, 2013, 2014, 41, 619, 2012, 46, 2015, 40, 41, 614, 424, 605, 2012, 46, 2016, 46, 2017, 40, 41, 605, 2012, 46, 2016, 46, 2018, 40, 41, 631, 478, 40, 330, 41, 63, 2019, 40, 2012, 41, 58, 320, 46, 2010, 40, 2012, 44, 2014, 41, 59, 437, 2009, 2019, 40, 2011, 2012, 41, 123, 490, 2020, 61, 2012, 46, 2016, 46, 2018, 40, 41, 46, 2021, 40, 41, 59, 392, 40, 2020, 614, 478, 40, 413, 41, 41, 123, 450, 2003, 46, 2022, 60, 413, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 404, 41, 41, 123, 450, 2003, 46, 2023, 60, 404, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 453, 41, 41, 123, 450, 2003, 46, 2024, 60, 453, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 326, 41, 41, 123, 450, 2003, 46, 2025, 60, 326, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 480, 41, 41, 123, 450, 2003, 46, 2026, 60, 480, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 479, 41, 41, 123, 450, 2003, 46, 2027, 60, 479, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 488, 41, 41, 123, 450, 2003, 46, 2028, 60, 488, 62, 40, 2012, 41, 59, 125, 392, 40, 2020, 614, 478, 40, 451, 41, 41, 123, 450, 2003, 46, 2029, 60, 451, 62, 40, 2012, 41, 59, 125, 469, 418, 2030, 40, 2031, 46, 2032, 40, 44, 2012, 46, 2033, 44, 2012, 46, 2034, 46, 2035, 40, 41, 41, 41, 59, 125, 125]",0.0109290425,0
